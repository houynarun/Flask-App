from   os       			import 		path
import sys,glob,imp,os
sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

from 	app 							import 	*
from 	app.info 						import __Version__
from 	app.config 						import *
from 	.models 						import *
from   	distutils.version 				import LooseVersion,StrictVersion
import time


class CLS_Migration(object):
	"""docstring for CLS_Migration"""

	def alterAddColumn(self):
		print 'Starting migration..........'
		sql = ''' SELECT * FROM pg_catalog.pg_tables WHERE schemaname NOT IN ('pg_catalog', 'information_schema'); '''
		AlterAddFieldSql = ''
		PostAlterSQL = ''
		AlterChangeLengthFieldSql = ''
		Module      =   __import__("app.urlregister")

		# List all table in postgresql
		for row in db.session.execute(sql):
			TableName 	=	row[1]
			if hasattr(Module,TableName):
				PostgresFieldObjScript = ''' SELECT column_name, character_maximum_length
								FROM information_schema.columns
								WHERE table_schema = 'public'
								  AND table_name   = '%s' '''%TableName
				TableLiveObj    =   getattr(Module, row[1])
				PostgresFieldObj = db.session.execute(PostgresFieldObjScript)
				DicFieldInPostgres = {}

				# Add all column in table and length of field into dictionary	
				for PostField in PostgresFieldObj:
					DicFieldInPostgres.update({PostField[0]:PostField[1]})

				# List all variable in class model
				for c in TableLiveObj.__table__.columns:
					FieldName 		= 	c.name
					IsPrimaryKey 	=	c.primary_key
					IsAutoincrement =	c.autoincrement
					DefaultValue 	=	str(c.default).replace("ColumnDefault(",'').replace(")",'') if c.default and not 'Sequence' in str(c.default) else  "''"	
					FieldType 		= 	str(c.type).lower()			

					# check if field is not exist in table, meaning this is new field
					if DicFieldInPostgres.get(FieldName,'ISNULL')=='ISNULL':
								
						if 'integer' in FieldType or 'numeric' in FieldType:
							DefaultValue =	DefaultValue if DefaultValue != 0 else 0
							print "DefaultValue",DefaultValue
						if type(DefaultValue) != int and type(DefaultValue) != float:
							DefaultValue = 0

						SQLScript = 'ALTER TABLE "%s" ADD COLUMN "%s" %s;'\
									%(TableName,FieldName,FieldType)
						if IsPrimaryKey:
							SQLScript = 'ALTER TABLE "%s" ADD COLUMN "%s" %s PRIMARY KEY;'\
									%(TableName,FieldName,FieldType)
						PostSQLScript = 'UPDATE "%s" SET "%s"=%s WHERE "%s" IS NULL;'\
											%(TableName,FieldName,str(DefaultValue),FieldName)

						print 'Alter add column ============>',SQLScript
						print 'Alter update default value===>',PostSQLScript
						AlterAddFieldSql 	+= SQLScript
						PostAlterSQL 		+= PostSQLScript
					
					# this field is already exist and then check if length or type is different
					else:
						if 'varchar' in FieldType: 
							FieldLength = DicFieldInPostgres.get(FieldName)
							try:
								if int(FieldLength)<int(c.type.length):
									SQLScript 	=	'ALTER TABLE "%s" ALTER COLUMN "%s" TYPE %s;'%(TableName,FieldName,FieldType)
									AlterAddFieldSql += SQLScript
							except Exception as e:
								pass
		if AlterAddFieldSql or PostAlterSQL:
			try:
				if AlterAddFieldSql:
					try:
						#Execute add column
						print
						print 'Starting alter add column'
						db.session.execute(AlterAddFieldSql)
						db.session.commit()
					except Exception as e:
						print e
						db.session.rollback()

				if PostAlterSQL:
					try:
						#Execute update value
						print 'Starting update default value'
						db.session.execute(PostAlterSQL)
						db.session.commit()
					except Exception as e:
						print e
						db.session.rollback()

			except Exception as e:
				print e
	def runScript(self):
		VbVersion 		=	__Version__.replace('v','')
		DatabaseVersion = 	''
		ObjDatabaseVersion 	=	MKT_MIGRATION_DATABASE.query.first()
		if ObjDatabaseVersion:
			DatabaseVersion 	=	ObjDatabaseVersion.CurrentVersion.replace('v','') if ObjDatabaseVersion.CurrentVersion else ''

		AllVBVersion  		=		 glob.glob(VB_PATH + "migration/version/v*.py") 
		SortVersion    		=        []		#Use for sort all vb version file
		#Sort version file
		for File in AllVBVersion:
			 #Cut file EX: v1.2.0.py to 1.2.0
			Version =  File.split('version/v')[1].replace('.py','')
			SortVersion.append(Version)
			SortVersion.sort(key=StrictVersion)

		# print 'AllVBVersion',SortVersion

		for version in SortVersion:
			CompareVersion = LooseVersion(version) > LooseVersion(DatabaseVersion) and LooseVersion(version)<= LooseVersion(VbVersion)
			if CompareVersion:
				# Module 		= 		__import__('migration.version.v%s'%version)
				# print 'Module',Module
				open_file, file_name, description = imp.find_module('migration/version/v%s'%version) 
				#import module of version file
				try:
					imp.load_module('migration/version/v'+version, open_file, file_name, description) 
				except Exception as e:
					raise e
				print 'version==========>',version
	def updateVersion(self):
		try:
			CreateDate 			=	str(time.strftime('%Y-%m-%d %H:%M:%S'))
			DatabaseVersion 	=	''

			ObjDatabaseVersion 	=	MKT_MIGRATION_DATABASE.query.first()
			if ObjDatabaseVersion:
				DatabaseVersion 	=	ObjDatabaseVersion.CurrentVersion
			else:
				ObjDatabaseVersion 	=	MKT_MIGRATION_DATABASE()

			if DatabaseVersion == '' or DatabaseVersion != __Version__:
				ObjDatabaseVersion.Branch 			=	'HO'
				ObjDatabaseVersion.Status 			=	'AUTH'
				ObjDatabaseVersion.Curr 			=	'0'
				ObjDatabaseVersion.Inputter			=	'System'
				ObjDatabaseVersion.Createdon 		=	CreateDate
				ObjDatabaseVersion.Authorizer 		=	'System'
				ObjDatabaseVersion.Authorizeon 		=	CreateDate
				ObjDatabaseVersion.FromVersion 		=	DatabaseVersion
				ObjDatabaseVersion.CurrentVersion 	=	__Version__
				ObjDatabaseVersion.UpdateDate 		=	CreateDate
				ObjDatabaseVersion.Description 		=	'This database is on version %s'%__Version__
				db.session.add(ObjDatabaseVersion)
				db.session.commit()


			print 'Done......!'
		except Exception as e:
			db.session.rollback()
			raise e


	def execute(self):
		self.alterAddColumn()
		db.create_all()
		self.runScript()
		self.updateVersion()

ObjMigration 	=	CLS_Migration()
