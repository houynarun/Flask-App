import os
import sys

from app.info 	import __Version__,__Build__,__Release__
from app import app,db

import eod.tools.mktauth 	as mktauth
import eod.tools.mktcmd 	as mktcmd
import app.tools.mktmessage as mktmessage

runtype = "shell"
if len(sys.argv) == 2:
	runtype = "ui"


prompt ='vb$ '

print ("Welcome to Morakot VB")
print ('Version: %s Build: %s Release date: %s' %(__Version__, __Build__, __Release__))
print ('Allright Reserved 2020. Morakot Technology. www.morakot.it')

cmd = ''
login = ''
prompt = 'VB '
LogInName = ''
mktauth.attempLogout()

if runtype != 'ui':
	
	while not login:
		try:

			login = mktauth.attempLogin()
			if login == True:
				cmd = 'exit'

		except AttributeError:
			login = False
			cmd = 'exit'
		except:
			login = False
			cmd = 'exit'

	if cmd == 'exit':
		print ('')
	else:
		prompt = login.LogInName + "@" + prompt
		print('You are logged in as ' + login.LogInName)

	try:
		
		while cmd != 'exit' :
			cmd = raw_input(prompt)
			try:
				if cmd != 'exit':

					# check if command is backup-eod then backup database for end of date
					if 'BACKUP-EOD' == str(cmd).upper():

						print 'preparing BACKUP-EOD...'
						os.system('backup-eod')
						cmd = ''

					# check if command is backup-sod then backup database for start of date
					if 'BACKUP-SOD' == str(cmd).upper():

						print 'preparing backup-sod...'
						os.system('backup-sod')
						cmd = ''

					# Check command with parameter
					if cmd.split():

						param 	= cmd.split()

						if len(param) > 1:

							cmd 	= param[0]
							del param[0]

							if 'MULTIEOD' == str(cmd).upper() and str(param[0]).upper() not in ['B','BEOD','BSOED']:

								# Try convert string to integer
								try: 

									int(param[0])

								except Exception, e:

									print 'The second parameter must be integer!'
									cmd = ''
									param = ''

							if 'EOD' == str(cmd).upper() and str(param[0]).upper() not in ['B','BEOD','BSOED']:

								cmd = ''
								param = ''
								print 'Single EOD must not has second parameter!'

						elif 'MULTIEOD' == str(cmd).upper():

							cmd = ''
							param = ''
							print 'MULTIEOD must has second parameter and as integer!'

						try:

							cmd = "".join(cmd.split())
							commandToCall = getattr(mktcmd, cmd)# calling function without parameter.

						except TypeError:

							print 'Command not found'
							commandToCall = ''
						
						# allaw this block only if command if eod of multeod
						if ('EOD' == str(cmd).upper() and commandToCall) or ('MULTIEOD' == str(cmd).upper()):

							message = "Do you want to run %s? (Y/n): " %(cmd)
							Confirm = raw_input(message)

							# check whether user really want run this command or not.
							if Confirm.upper() == 'Y' or Confirm.upper() == 'YES':

								CheckBackup = raw_input("Have you done data back-up? (Y/n): ")

								# check whether user has done data backup.
								if CheckBackup.upper() == 'Y' or CheckBackup.upper() == 'YES':

									# check if command is really multieod, else must be eod.
									action = commandToCall(param)

									print ''

								elif CheckBackup.upper() == 'N' or CheckBackup.upper() == 'NO':

									if str(param[0]).upper() not in ['B','BEOD','BSOED']:
										print 'preparing backup-eod...'
										os.system('backup-eod')

									action = commandToCall(param)
									print ''

								elif CheckBackup.upper() == 'EXIT':

									mktauth.attempLogout()
									print 'You are logged out.'
									cmd = 'exit'

								else:

									print 'Answer not found, please try again.'
							
							elif Confirm.upper() == 'N' or Confirm.upper() == 'NO':

									print 'You are canceled %s.' %cmd
									cmd = ''

							elif Confirm.upper() == 'EXIT':

									mktauth.attempLogout()
									print 'You are logged out.'
									cmd = 'exit'

							else:

								print 'Answer not found, please try again.'

						else:

							if commandToCall:
								action = commandToCall() 
							print ''

				else:

					mktauth.attempLogout()
					print('You are logged out.')

			except AttributeError:

				print('Command not found')

			except Exception, e:

				db.session.rollback()
				print ''
				print 'Something is not quite right.'
				mktmessage.setLogError("%s"%e,Raise=False)
				print ''
				cmd = 'exit'

	except (KeyboardInterrupt,EOFError):

		db.session.rollback()
		print ""