import os
import sys
import sqlalchemy

from datetime 									import date, datetime, timedelta
from flask 										import session
from sqlalchemy 								import *
from sqlalchemy.sql.expression 					import cast

import app.tools.loantools.nonworkingday 		as mktDay
import app.tools.mktsetting 					as mktsetting
import app.tools.mktbjstat 						as mktbjstat
import app.tools.mktdate 						as mktdate
import app.tools.mktgl 							as mktgl
import app.tools.mktholiday 					as mktHoliday
import app.tools.mktmessage 					as mktmessage
import app.tools.mktpatch 						as mktpatch
import app.tools.mktreport 						as mktreport
import app.tools.user 							as mktuser
import subprocess

from app.BatchJob.models 						import MKT_BATCH_JOB
from app.LoginUser.models 						import MKT_LOGIN_USER
from app.mktcore.imports 						import *
from app 										import app


def validateBatchJob(BatchJobObj, BankDate):

	BatchJobObj = BatchJobObj.\
							filter(MKT_BATCH_JOB.Enable!='No').\
							filter(
								or_(MKT_BATCH_JOB.NextRunDate < BankDate , MKT_BATCH_JOB.NextRunDate == "")
							).\
							all()
	print BatchJobObj

	if BatchJobObj:

		ErrorJob = []

		for Obj in BatchJobObj:

			ErrorJob.append("BatchJob ID: {}, Tool: {}, Description: {}, Freq: {}, Order: {}, NextRunDate: {}\n"\
							.format(Obj.ID, Obj.Tool, Obj.Description, Obj.Frequency, Obj.Order, Obj.NextRunDate))

		raise Exception("There are enable BatchJob that has NextRunDate smaller than BankDate or Empty NextRunDate.\n" \
						"Current Bank Date: {}\n" \
						"{}".format(BankDate, "".join(ErrorJob)))


# Run End Of Day EOD
def eod(args=[]):

	try:

		print ""

		with app.test_request_context():
			StopEODAfterMonthEnd	=	mktsetting.getAppSetting('StopEODAfterMonthEnd').strip()

			# Logout all user in the system
			# session['SystemRunning'] = '1'
			if 'getLogInID' in session:
				mktuser.logoutAllUser(session['getLogInID'])

			print "Task Before EOD"
	
			BeforeEODKwargs = {}

			# set this to true becuase it must at least execute once
			isNextDateHoliday = True

			while isNextDateHoliday:
				db.session.commit()
				db.ThreadObj.dispose()
				ThreadS     =   db.Thread.CLS_CONNECTION_GUARD().ThreadS
				setattr(db, 'session', ThreadS)	
				
				# Call all other task before running EOD
				mktbjstat.beforeEOD.send(**BeforeEODKwargs)

				if args and ('beod' in args or 'b' in args):
					os.system('backup-eod')

				BankDateObj 	= mktdate.getBankDateObj()
				BankDate 		= BankDateObj.SystemDate
				NextBankDate 	= BankDateObj.NextSystemDate
				NextBankDate 	= NextBankDate.strip()
				NextBankDate 	= datetime.strptime(str(NextBankDate), "%Y-%m-%d").date()
				Holiday 		= mktHoliday.getHoliday()
				NextMonthEnd 	= datetime.strptime(str(BankDateObj.NextMonthEnd), "%Y-%m-%d").date()
				SystemDate 		= datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date()

				BatchJob 	=	ThreadS.query(MKT_BATCH_JOB.ID).\
								order_by(asc(cast(MKT_BATCH_JOB.Order, sqlalchemy.Integer))).\
								filter(MKT_BATCH_JOB.Enable == 'Yes')

				# Validate if Enable BatchJob has an empty NextBankDate or NextBankDate smaller than BankDate
				validateBatchJob(BatchJob, str(BankDate))

				BatchJob = BatchJob.filter(MKT_BATCH_JOB.NextRunDate == str(BankDate)).all()
				mktbjstat.startRecord()

				print "-----------------------"
				print "| EOD for %s: |" %BankDate
				print "-----------------------"

				if isNextDateHoliday:

					if BatchJob:
						BatchJobList	=	[value for value, in BatchJob]

						for ID in BatchJobList:
							resetSession()
							row 		=	db.session.query(MKT_BATCH_JOB).get(ID)	
							# if there is an enable BatchJob with Legacy Frequency raise an exception
							if mktdate.isLegacyOpt(row.Frequency):

								raise Exception("There are enable job with Legacy Freqency\n" \
												"BankDate: {}\n" \
												"BatchJob NextRunDate: {}\n" \
												"BatchJob ID: {}\n" \
												"BatchJob Description: {}\n" \
												"BatchJob Freq: {}\n" \
												"BatchJob Tool: {}".format(
																			BankDate, row.NextRunDate,
																			ID, row.Description, row.Frequency, row.Tool)
												)

							mktbjstat.calCompletedPer(ID, 0, 1, 0)

							# Generate NextBankDate
							NextRunDate, Message = mktdate.convertFreqToNextRunDate(BankDate, row.Frequency, Next=True)

							if NextRunDate > BankDate:
								# Execute Tool in EOD/row.Tool.py folder
								executeBjTool(row.Tool)

								# updating lastrundate, nextrundate
								Record 		=	db.session.query(MKT_BATCH_JOB).get(ID)	
								Record.LastRunDate 	= 	row.NextRunDate
								Record.NextRunDate 	= 	NextRunDate
								
								# add to session
								db.session.add(Record)

								# commit to db
								db.session.commit()

								mktbjstat.calCompletedPer(row.ID, 1, 1, 100,True,SystemDate)

							else:
								# if NextRunDate is smaller than BankDate
								raise Exception("NextRunDate can not be smaller than BankDate.\n" \
												"BankDate: {}\n" \
												"BatchJob NextRunDate: {}\n" \
												"BatchJob ID: {}\n" \
												"BatchJob Description: {}\n" \
												"BatchJob Freq: {}\n" \
												"BatchJob Tool: {}".format(BankDate, NextRunDate, row.ID, row.Description, row.Frequency, row.Tool))

					# if there is no BatchJob
					else:

						raise Exception("No BatchJob Found.\n" \
										"These are unlikely to happen because in BatchJob\n" \
										"it has at least one job to update BankDate.\n")

				print ""
				print "End EOD of %s." % BankDate
				print ""

				# check condition loop must be the end of the loop body
				# by default BatchJob must be execute at least once otherwise it will execute
				# until finish none working day (holiday)
				isNextDateHoliday 	= mktDay.isNonWorkingDay(NextBankDate, Holiday)
				
				# check if it is month end 
				if NextMonthEnd == SystemDate:
					os.system('backup-sod')
					if StopEODAfterMonthEnd == "Yes": isNextDateHoliday = False

				if len(args) > 0 and args[0] == 'False':
					isNextDateHoliday = False

				if args and ('bsod' in args or 'b' in args) and NextMonthEnd != SystemDate:
					os.system('backup-sod')
				AfterEODKwargs = {
					"SytemStatus": 1
				}
				print "Task After EOD"
				# Call all other task after running EOD
				mktbjstat.afterEOD.send(**AfterEODKwargs)
				# mktUser.setSysOffAndOnline(SytemStatus=1)
				
	except:

		mktmessage.setTracebackLog()
		raise

def multieod(args=[1]):
	try:
		number = int(args[0]) if args else 1
		for i in range(0,int(number)):
			No = i + 1
			print ""
			print "********* Multi EOD %s/%s *********"% (No,number)
			eod(['False',])

	except Exception, e:
		raise

def resetSession():
	db.session.commit()
	db.session.remove()
	db.ThreadObj.dispose()
	ThreadS     =   db.Thread.CLS_CONNECTION_GUARD().ThreadS
	setattr(db, 'session', ThreadS)
	
def executeBjTool(ToolName):
	try:
		# Module = __import__("EOD.%s" % ToolName)
		execfile("EOD/%s.py" % ToolName)
		# os.system("python -m EOD/%s" % ToolName)
		# del Module
		# sys.modules.pop("EOD.%s" % ToolName)
	except ImportError as e:
		#: Import batchjob from local project
		ExtendModuleObj = mktsetting.ExtendModule()
		ExtendModuleObj.loadBatchJob(BatchJob=ToolName)


# VB command
def clear():
	return os.system(['clear','cls'][os.name == 'nt'])

def help():

	try:

		print ""

		mkt = '{0:50}'
		print mkt.format(' COMMAND LIST')
		print mkt.format('-' * 50)

		mkt = '{0:10} {1:50}'
		print mkt.format(' help', ': List All Commands')
		print mkt.format(' date', ': List System Bank Date')
		print mkt.format(' eod', ': Run End of Day')
		print mkt.format(' multieod', ': Run End of Day more then once')
		print mkt.format(' backup-eod', ': Run Backup End of Day')
		print mkt.format(' backup-sod', ': Run Backup Start of Day')
		print mkt.format(' online', ': List Logged In Users')
		print mkt.format(' clear', ': Clear screen')
		print mkt.format(' info',': Get information of system.')

	except:
		raise

def info():
	try:
		print mktpatch.getInfo()
	except Exception, e:
		raise

def online():
	try:

		User = MKT_LOGIN_USER.query.\
			   order_by(MKT_LOGIN_USER.UserID.asc()).\
			   all()

		if User:
			print ""
			mkt = '{0:20} {1:<20} {2:<20} {3:<20}'
			print mkt.format('ID', 'Name', 'Role', 'Login Time')
			print mkt.format('-' * 20, '-' * 20, '-' * 20, '-' * 20)

			for item in User:
				LogInDate = item.LogInDate + " " if item.LogInDate else ""
				print mkt.format(str(item.UserID), mktreport.VLOOKUP(['MKT_USER','ID',str(item.UserID),'DisplayName']), mktreport.VLOOKUP(['MKT_ROLE','ID',str(item.Role),'Description']), str(LogInDate) + str(item.LogInTime))

		print ""

	except:
		raise

def date():
	try:

		SystemDate = mktdate.getBankDateObj()
		print ""
		print "Current System Date: " + str(SystemDate.SystemDate)
		print "Last System Date: " + str(SystemDate.LastSystemDate)
		print "Next System Date: " + str(SystemDate.NextSystemDate)
		print "Next Weekend Date: " + str(SystemDate.NextWeekend)
		print "Next Month End Date: " + str(SystemDate.NextMonthEnd)
		print "Next Year End Date: " + str(SystemDate.NextYearEnd)

	except:
		raise
