from app.mktcore.wtfimports 						import *
from app.Branch.models 								import MKT_BRANCH
from ..FixedAsset.models 							import MKT_ASSET_INAU, MKT_ASSET, MKT_ASSET_CONSUMPTION, MKT_ASSET_HIST
from app.Category.models 							import MKT_CATEGORY
from app.Account.models								import MKT_ACCOUNT
from ..AssetAssigning.models 						import *
from app.mktcore.session 							import *
from app 											import db
from sqlalchemy										import desc
from datetime 										import date, timedelta
from sqlalchemy 									import or_
from app.Category.models 							import *
import app.tools.loantools.nonworkingday 				as mktDay
import app.tools.mktdate 								as mktdate
import app.tools.mktaudit 								as mktaudit
import app.tools.mktholiday 							as mktHoliday
from app.Setting.models 							import MKT_APP_SETTING
import app.tools.mktaccounting 							as mktaccounting
from decimal 										import Decimal
from ..Depreciation.models 							import MKT_ASSET_DEPRE_SCHEDULE


def loadCategory():
	return MKT_CATEGORY.query.order_by(MKT_CATEGORY.ID).all()


def loadCurrentDate():
	return mktdate.getBankDate()

def loadOldBranch():
	return MKT_BRANCH.query

def loadAssetForTransferring():
	# return MKT_ASSET.query.join(MKT_ASSET_ASSIGNING,MKT_ASSET.ID==MKT_ASSET_ASSIGNING.AssetID).all()
	AssetList = []
	AssetLIVE = MKT_ASSET.query.join(MKT_ASSET_ASSIGNING,MKT_ASSET.ID==MKT_ASSET_ASSIGNING.AssetID)
	AssetHIST = MKT_ASSET_HIST.query.join(MKT_ASSET_ASSIGNING,MKT_ASSET_HIST.SerialNumber==MKT_ASSET_ASSIGNING.SerialNumber)
	Asset = AssetLIVE.union(AssetHIST).all()
	for row in Asset:
		PurifiedAsset = MKT_ASSET()
		PurifiedAsset.ID = str(row.ID).split('@')[0]
		PurifiedAsset.Description = str(row.Description)
		PurifiedAsset.SerialNumber = str(row.SerialNumber)
		AssetList.append(PurifiedAsset)
	return AssetList


def loadSerialNumber():
	
	if request.method == 'POST':
		AssetID=request.form["AssetID"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_ASSET_ASSIGNING.query.filter_by(SerialNumber=Record['SerialNumber'])
			app.logger.debug(getRecord())
		else:
			return MKT_ASSET_ASSIGNING.query.filter_by(SerialNumber='').all()
	return MKT_ASSET_ASSIGNING.query.filter_by(AssetID=AssetID).all()


@app.route('/Morakot/SerialNumber',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def SerialNumber():
	search = request.args.get('q')
	Audit = mktaudit.getAuditrail()
	Branch = Audit['Branch']
	#---SN = Serial Number
	SN=[]

	if 'view' in request.url:
		AssetLIVE = MKT_ASSET.query.filter(MKT_ASSET.SerialNumber==search)
		AssetHIST = MKT_ASSET_HIST.query.filter(MKT_ASSET_HIST.SerialNumber==search)
		Asset = AssetLIVE.union(AssetHIST).all()
	else:
		Asset = MKT_ASSET.query.filter(
								MKT_ASSET.AssetStatus=="IUS",
								MKT_ASSET.Branch==Branch,
								or_(MKT_ASSET.ID.ilike('%'+search+'%'), 
								MKT_ASSET.SerialNumber.ilike('%'+search+'%'), 
								MKT_ASSET.Description.ilike('%'+search+'%'))).\
							all()
	for row in Asset:
		dic={"id":row.SerialNumber, "text":str(row.ID).split('@')[0] + " - " + row.SerialNumber}
		SN.append(dic)
	app.logger.debug(SN)
	return jsonify(items=SN)


@app.route('/Morakot/Asset/GetNewBranch', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNewBranch():
	dic = {}
	SerialNumber = request.args.get('SerialNumber')
	AssignedAsset = MKT_ASSET_ASSIGNING.query.filter_by(SerialNumber=SerialNumber).first()
	Asset = MKT_ASSET.query.get(AssignedAsset.AssetID)
	NewBranch = MKT_BRANCH.query.filter(MKT_BRANCH.ID != Asset.Branch).all()
	for row in NewBranch:
		dic[row.ID] = row.ID + " - " +row.Description

	return jsonify(results=dic)


def getRecord():
	try:
		result = MKT_ASSET_ASSIGNING_INAU.query.filter_by(ID=g.formID).all()		
		if not result:
			result = MKT_ASSET_ASSIGNING.query.filter_by(ID=g.formID).all()
			Dict = {}
		if result:
			for row in result:
				Dict = row.__dict__
				return Dict
		else:
			return Dict
	except:
		raise


def loadNewBranch():
	if request.method == 'POST':
		SerialNumber=request.form["SerialNumber"]
	else:
		if len(getRecord())>0:
			Record = getRecord()		
			TransferredAsset = MKT_ASSET_ASSIGNING.query.filter_by(NewBranch=Record['NewBranch']).first()
			if TransferredAsset is None:
				TransferredAsset = MKT_ASSET_ASSIGNING_INAU.query.filter_by(NewBranch=Record['NewBranch']).first()
			Branch = MKT_BRANCH.query.filter_by(ID = TransferredAsset.NewBranch)
			return Branch
		else:
			TransferredAsset = MKT_ASSET_ASSIGNING.query.with_entities(MKT_ASSET_ASSIGNING.NewBranch).filter_by(NewBranch='').all()
			Branch = MKT_BRANCH.query.filter(MKT_BRANCH.ID.in_(TransferredAsset)) if TransferredAsset else ''
			return Branch

	Asset = MKT_ASSET.query.filter_by(SerialNumber=SerialNumber).first()
	NewBranch = MKT_BRANCH.query.filter(MKT_BRANCH.ID != Asset.Branch if Asset else '').all()
	return NewBranch


@app.route('/Morakot/Asset/GetAssetAndBranch',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def GetAssetAndBranch():
	SN = request.args.get('SerialNumber')	
	Asset = MKT_ASSET.query.filter_by(SerialNumber=SN).first()
	OldBranch = MKT_BRANCH.query.get(Asset.Branch)
	# AccountID = str(Asset.CrAccount)
	# Account = MKT_ACCOUNT.query.get(AccountID)
	# AccountDesc = AccountID + " - " + str(Account.AccName) if Account else "--None--"
	# CategoryID = str(Asset.AssetCategory)
	# Category = MKT_CATEGORY.query.get(CategoryID)
	# CategoryDesc = CategoryID + " - " + str(Category.Description) if Category else "--None--"

	
	return jsonify(	AssetID=Asset.ID,
					AssetDes=str(Asset.Description),
					OldBranchID=Asset.Branch,
					OldBranchDes=Asset.Branch + " - " + OldBranch.Description,
					# AccountID=AccountID,
					# AccountDesc=AccountDesc,
					# CategoryID=CategoryID,
					# CategoryDesc=CategoryDesc
					)


class FRM_BRANCH_ASSET_TRANSFER(exform):
	
	RecordType = TextField("Record Type",
							default='3')
	SerialNumber = RemoteTextField(requiredlabel("Serial Number","*"),									
								validators=[validators.Required()])
	AssetID = QuerySelectField(	requiredlabel("Asset","*"),
								query_factory=loadAssetForTransferring,
								blank_text=u'--None--',
								get_label=lambda a: a.ID + " - " + a.Description,
								validators=[validators.Required()],
								allow_blank=True
								)
	
	OldBranch = QuerySelectField(requiredlabel("From","*"),
								query_factory=loadOldBranch,
								blank_text=u'--Old Branch--',
								get_label=u'Description',
								validators=[validators.Required()],
								allow_blank=True
								)
	NewBranch = QuerySelectField(requiredlabel("To","*"),
								query_factory=loadNewBranch,
								blank_text=u'--Choose New Branch--',
								get_label=u'Description',
								validators=[validators.Required()],
								allow_blank=True
								)
	# DrAccount 		= 	RemoteTextField("Dr Account")
	# DrCategory 		= 	QuerySelectField(requiredlabel("Dr Category","*"),
	# 					query_factory=loadCategory,
	# 					get_label=lambda a: a.ID + " - " + a.Description,
	# 					allow_blank=True,
	# 					blank_text=u'--Choose Dr Category--',
	# 					validators=[validators.Required()]
	# 				)
	# CrAccount 		= 	RemoteTextField(getLanguage("Cr Account"),
	# 									dicRemote={'url':'/getAccount'}
	# 					)
	# CrCategory 		= 	QuerySelectField(requiredlabel("Cr Category","*"),
	# 					query_factory=loadCategory,
	# 					get_label=lambda a: a.ID + " - " + a.Description,
	# 					allow_blank=True,
	# 					blank_text=u'--Choose Dr Category--',
	# 					validators=[validators.Required()]
	# 				)

	AssigneeID = TextField("Assignee")
	NewAssigneeID = TextField("New Assignee")
	StopUsingDate 	= TextField("Stop Using Date")
	AssigningDate = DateField(	requiredlabel("Transferring Date","*"),
								validators=[validators.Required()],
								default=loadCurrentDate
							 )
	Note = TextAreaField(requiredlabel('Note',"*"), 
						validators=[validators.Length(max=100),validators.Required()]
						)


	def validate_AssigningDate(form, field):
		try:

			Holiday 		= mktHoliday.getHoliday()
			AssigningDate 	= request.form['AssigningDate']

			CheckFormatDate = mktdate.isDateISO(AssigningDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
				
			systemDate 	= 	mktdate.getBankDate()
			StrSysteDate=	str(systemDate).split("-")
			StrAssigningDate=	str(AssigningDate).split("-")

			SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
			ValueMonth 	=	"%s%s" %(StrAssigningDate[0], StrAssigningDate[1])

			if int(ValueMonth) < int(SysMonth):
				raise ValidationError("Assigning date must be different previous month.")
		except:
			raise


	@staticmethod
	def hotSelectField():
		hotfield = []
		fielddisplay="NewBranch"
		varname		="SerialNumber:$('#SerialNumber').val()"	
		fun			=["SerialNumber", varname ,fielddisplay, "/Morakot/Asset/GetNewBranch", "change"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def hotField():
		hotfield 	=[]
		fielddisplay = "$('#AssetID').select2('data',{'id':data.AssetID,'text':data.AssetDes});"
		fielddisplay += "$('#OldBranch').select2('data',{'id':data.OldBranchID,'text':data.OldBranchDes});"
		fielddisplay += "$('#DrAccount').select2('data',{'id':data.AccountID,'text':data.AccountDesc});"
		fielddisplay += "$('#DrCategory').select2('data',{'id':data.CategoryID,'text':data.CategoryDesc});"
		
		varname		= "SerialNumber:$('#SerialNumber').val()"

		fun			= ["SerialNumber", varname ,fielddisplay, "/Morakot/Asset/GetAssetAndBranch", "click"]
		hotfield.append(fun)
		return hotfield


	@staticmethod
	def setDisable():
		fields = []
		fields = [
					('OldBranch'),
					('AssetID')
				]

		return fields


	@staticmethod
	def setVisible():
		fields = []
		fields = [
					('AssigneeID'),
					('StopUsingDate'),
					('NewAssigneeID'),
					('RecordType')
				 ]
		return fields


	@staticmethod
	def listField():
		
		Fields = [
					"ID",
					"AssetID",
					"SerialNumber",
					"OldBranch",
					"NewBranch",
					"AssigningDate",
					"Note"
				]
		return Fields, ["RecordType*EQ*3"]


	@staticmethod
	def setWidth():
		control_list= [
					   ('AssigningDate', len3),
					   ]
					   
		return control_list


	@staticmethod
	def reverseRec():
		return False, ""


	@staticmethod
	def formReadOnly():
		return "AUTH"


	@staticmethod
	def beforeInsert():
		try:
			AuthLevel 			= g.getNAuthorize
			Audit 				= mktaudit.getAuditrail()
			Inputter			= Audit['Inputter']
			Createdon 			= Audit['Createdon']
			Authorizer 			= Audit['Authorizer']
			Authorizeon			= Audit['Authorizeon']
			Branch  			= Audit['Branch']
				
			if AuthLevel == 0:
				AssetID = request.form['AssetID']
				AssigningDate = request.form['AssigningDate']	
				AssignedAsset = MKT_ASSET_ASSIGNING.query.filter(MKT_ASSET_ASSIGNING.AssetID==AssetID)\
														 .order_by(desc(MKT_ASSET_ASSIGNING.Createdon)).first()
				if AssignedAsset:
					AssignedAsset.StopUsingDate = AssigningDate
				
				OldBranch 			= str(request.form['OldBranch'])
				NewBranch 			= str(request.form['NewBranch'])
				AssetID 			= str(request.form['AssetID'])
				AssigningDate 		= str(request.form['AssigningDate'])
				
				#---Update Remaining in MKT_ASSET_CONSUMPTION, so that the asset can be reassign to user
				Asset = MKT_ASSET.query.get(AssetID)
				Consumption = MKT_ASSET_CONSUMPTION.query.filter_by(ID=AssetID).first()
				Consumption.Remaining = 1

				#---Update depreciation schedule branch
				DepSchedule = MKT_ASSET_DEPRE_SCHEDULE.query.filter(MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID)
				for Installment in DepSchedule:
					Installment.Branch = NewBranch

				#---Update AssigneeID and AssigningDate in MKT_ASSET
				Asset.Inputter 			= Inputter
				Asset.Createdon 		= Createdon
				Asset.Authorizer 		= Authorizer
				Asset.Authorizeon 		= Authorizeon
				Asset.Branch 			= NewBranch
				Asset.AssigneeID 		= ''
				Asset.AssigningDate 	= AssigningDate

				db.session.commit()
			return True
		except Exception,e :
			print e
			db.session.rollback()
			db.session.close()
			return False


	@staticmethod
	def beforeAuthorize():		
		try:
			Audit 				= mktaudit.getAuditrail()
			Inputter			= Audit['Inputter']
			Createdon 			= Audit['Createdon']
			Authorizer 			= Audit['Authorizer']
			Authorizeon			= Audit['Authorizeon']
			Branch  			= Audit['Branch']
			
			AssetAssigningInau 	= MKT_ASSET_ASSIGNING_INAU.query.get(g.formID)
			OldBranch 			= str(AssetAssigningInau.OldBranch)
			NewBranch 			= str(AssetAssigningInau.NewBranch)
			AssetID 			= str(AssetAssigningInau.AssetID)
			AssigningDate 		= str(AssetAssigningInau.AssigningDate)
			
			AssignedAsset = MKT_ASSET_ASSIGNING.query.filter(MKT_ASSET_ASSIGNING.AssetID==AssetID)\
													 .order_by(desc(MKT_ASSET_ASSIGNING.Createdon)).first()
			
			if AssignedAsset:
				AssignedAsset.StopUsingDate = AssigningDate
			
			#---Update Remaining in MKT_ASSET_CONSUMPTION, so that the asset can be reassign to user
			Asset = MKT_ASSET.query.get(AssetID)
			Consumption = MKT_ASSET_CONSUMPTION.query.filter_by(ID=AssetID).first()
			Consumption.Remaining = 1

			#---Update depreciation schedule branch
			DepSchedule = MKT_ASSET_DEPRE_SCHEDULE.query.filter(MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID)
			for Installment in DepSchedule:
				Installment.Branch = NewBranch

			#---Update AssigneeID and AssigningDate in MKT_ASSET
			Asset.Inputter 			= Inputter
			Asset.Createdon 		= Createdon
			Asset.Authorizer 		= Authorizer
			Asset.Authorizeon 		= Authorizeon
			Asset.Branch 			= NewBranch
			Asset.AssigneeID 		= ''
			Asset.AssigningDate 	= AssigningDate
			Asset.AssetStatus 		= 'HUP'
			postAccountingInterBranch()
			db.session.commit()
			return True
		except Exception,e:
			print e
			db.session.rollback()
			db.session.close()
			flash(msg_error + str(e))
			return False


def postAccountingInterBranch():
	Audit 					= mktaudit.getAuditrail()
	Inputter				= Audit['Inputter']
	Createdon 				= Audit['Createdon']
	Authorizer 				= Audit['Authorizer']
	Authorizeon				= Audit['Authorizeon']
	Branch 					= Audit['Branch']
	SourceBranch 			= Branch
	AuthLevel 				= g.getNAuthorize
	# TranDate		= request.form['TransactionDate']
	# Amount			= request.form['Amount']
	# AssetID 		= request.form['AssetID']
	# Currency 		= request.form['Currency']

	length = 2

	if AuthLevel ==1 :
		AssetAssigningInau 	= MKT_ASSET_ASSIGNING_INAU.query.get(g.formID)
		TranDate 			= str(AssetAssigningInau.AssigningDate)
		Note 				= str(AssetAssigningInau.Note)
		AssetID 			= str(AssetAssigningInau.AssetID)
		TargetBranch 		= str(AssetAssigningInau.NewBranch)
	elif AuthLevel ==0 :
		TranDate 			= request.form['AssigningDate']
		AssetID 			= request.form['AssetID']
		Note 				= request.form['Note']
		TargetBranch 		= request.form['NewBranch']

	AppSetting 				= MKT_APP_SETTING.query.get('IB_FAM_FROM')
	SourceBranchCategory 	= str(AppSetting.Value) if AppSetting else ""
	AppSetting 				= MKT_APP_SETTING.query.get('IB_FAM_TO')
	TargetBranchCategory 	= str(AppSetting.Value) if AppSetting else ""
	AppSetting 				= MKT_APP_SETTING.query.get('FAM_INTER_BRANCH')
	Transaction 			= str(AppSetting.Value) if AppSetting else ""

	Asset = MKT_ASSET.query.get(AssetID)
	AssetCategory = str(Asset.AssetCategory)
	AccumulatedCategory = str(Asset.AccumulatedCategory) + str(Asset.AccumulatedAmortization)
	Amount = float(Asset.EndBookValue)
	PurchasingPrice = float(Asset.Total)
	AccumulatedAmount = float(Asset.AccumulatedDepreciation)
	Currency = str(Asset.Currency)
	Account = ""
	if not (TargetBranch == 'HO' or SourceBranch == 'HO'):
		length += 1

	CategoryList 	= [SourceBranchCategory, TargetBranchCategory]
	BranchList 		= [SourceBranch, TargetBranch]	
	
	# CrMode = "" if mktteller.isCashCateogry(PaymentMethod) else "Direct"
	for j in xrange(0, length):
		for i in xrange(0, 2):
			for k in xrange(0, 2):
				if length == 3:
					Branch 			= 	BranchList[j-1 if j>0 else 0] if j!=1 else "HO"
					if i == 0:
						Amount = PurchasingPrice
						if k == 0:
							DrCr 		= 	"Dr"
							Mode 		= 	"Direct"
							Category 	= 	CategoryList[j-1] if j!=2 else AssetCategory
						else:
							DrCr 		= 	"Cr"
							Mode 		= 	"Direct"
							Category 	= 	CategoryList[j-1] if j!=0 else AssetCategory
					else:
						Amount = AccumulatedAmount
						if k == 0:
							DrCr 		= 	"Dr"
							Mode 		= 	"Direct"
							Category 	= 	AccumulatedCategory if j==0 else CategoryList[j-1]
						else:
							DrCr 		= 	"Cr"
							Mode 		= 	"Direct"
							Category 	= 	CategoryList[j-1] if j!=2 else AccumulatedCategory
				else:
					if SourceBranch == "HO":
						Branch 			= 	BranchList[j]
						if i == 0:
							Amount = PurchasingPrice
							if k == 0:
								DrCr 		= 	"Dr"
								Mode 		= 	"Direct"
								Category 	= 	CategoryList[0] if j==0 else AssetCategory
							else:
								DrCr 		= 	"Cr"
								Mode 		= 	"Direct"
								Category 	= 	AssetCategory if j==0 else CategoryList[1]
						else:
							Amount = AccumulatedAmount
							if k == 0:
								DrCr 		= 	"Dr"
								Mode 		= 	"Direct"
								Category 	= 	AccumulatedCategory if j==0 else CategoryList[1] 
							else:
								DrCr 		= 	"Cr"
								Mode 		= 	"Direct"
								Category 	= 	CategoryList[0] if j==0 else AccumulatedCategory 
					else:
						Branch 			= 	BranchList[j]
						if i == 0:
							Amount = PurchasingPrice
							if k == 0:
								DrCr 		= 	"Dr"
								Mode 		= 	"Direct"
								Category 	= 	CategoryList[1] if j==0 else AssetCategory
							else:
								DrCr 		= 	"Cr"
								Mode 		= 	"Direct"
								Category 	= 	AssetCategory if j==0 else CategoryList[0]
						else:
							Amount = AccumulatedAmount
							if k == 0:
								DrCr 		= 	"Dr"
								Mode 		= 	"Direct"
								Category 	= 	AccumulatedCategory if j==0 else CategoryList[0]
							else:
								DrCr 		= 	"Cr"
								Mode 		= 	"Direct"
								Category 	= 	CategoryList[1] if j==0 else AccumulatedCategory
					
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
				DateTimeNow = mktdate.getDateTimeNow()
							
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					"AM",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					AssetID, 				# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)
				print "Start booking #%s -%s - %s"%(i+1,DrCr,Branch)