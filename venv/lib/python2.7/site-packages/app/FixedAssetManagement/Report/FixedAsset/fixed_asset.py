from app.mktcore.imports 					import *
from ...FixedAsset.models 					import *
from ...AssetAssigning.models				import *
from ...AssetDispose.models					import *
from ...DisposalType.models					import *
from ...AssetRepair.models					import *
from ...Depreciation.models 				import MKT_ASSET_DEPRE_SCHEDULE, MKT_ASSET_DEPRE_SCHEDULE_HIST

from app.Vendor.Vendor.models				import *
from app.Officer.models 					import *
from sqlalchemy								import or_, desc, func, String
from sqlalchemy.sql.expression 				import cast
from app									import db
import app.tools.mktdate 						as mktdate
from datetime 								import date,timedelta
from decimal 								import *
from app.mktcore.session 					import *
import app.tools.mktmoney 						as mktmoney
import collections
import itertools


@app.route("/Morakot/Report/FixedAsset", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def generateFixedAssetReport():

	Assets = []
	AssetInfo = []
	CurrentUsing = []
	UsingHist = []
	UsingHistWrapper = []
	Repair = []
	RepairWrapper = []
	Dispose = []
	dic = {}
	i = 0
	j = 0
	EndDate = None
	Query = request.args.get("Q") if 'Q' in request.url else ''
	Asset = None
	TableHeader = ["Branch", "No", "Start Date", "End Date", "Beginning Book Value", "Depreciation", "Accumulated Depreciation", "End Book Value"]
	DepSchedule = None
	AmendedInstallment = []

	#--- Query Asset that match user input on template
	
	AssetLIVE = MKT_ASSET.query.filter(MKT_ASSET.RecordType=='1', MKT_ASSET.ID==Query).first()
	if AssetLIVE:
		Asset = AssetLIVE
	else:
		if Query != "":

			AssetHIST = MKT_ASSET_HIST.query.join(MKT_ASSET_DISPOSE, MKT_ASSET_DISPOSE.SerialNumber==MKT_ASSET_HIST.SerialNumber).\
						filter(MKT_ASSET_HIST.ID.contains(Query))\
						.order_by(desc(MKT_ASSET_HIST.Createdon))\
						.first()
			if AssetHIST:
				Asset = AssetHIST
					
	if Asset:
		row = Asset
		AssetInfo.append(str(row.Description))
		AssetInfo.append(row.Currency)
		AssetInfo.append(format(float(row.Total), '.2f'))
		AssetInfo.append(str(row.ValueDate))
		AssetInfo.append(format(float(row.AccumulatedDepreciation),'.2f'))
		AssetInfo.append(format(float(row.EndBookValue), '.2f'))
		ValueDate = row.ValueDate
		EndDate = mktdate.getBankDate()
		
		#--- Query currently use or latest ownership of asset
		if row.AssigneeID !='':
			User = MKT_OFFICER.query.get(str(row.AssigneeID))
			CurrentUsing.append(User.LastName + ' ' + User.FirstName)
			CurrentUsing.append(str(row.AssigningDate))
		else:
			Branch = MKT_BRANCH.query.get(str(row.Branch))
			CurrentUsing.append('BR#'+Branch.Description)
			CurrentUsing.append(str(row.AssigningDate) if row.AssigningDate !='' else row.ValueDate)

		#--- Query history of asset user since assigning to dispose
		AssetID = str(row.ID).split('@')[0]
		UsingHistory = MKT_ASSET_ASSIGNING.query.filter(MKT_ASSET_ASSIGNING.AssetID==AssetID,MKT_ASSET_ASSIGNING.StopUsingDate!='').order_by(desc(MKT_ASSET_ASSIGNING.Createdon)).all()	
				
		TableHeader = ["Branch", "No", "Start Date", "End Date", "Beginning Book Value", "Depreciation", "Accumulated Depreciation", "End Book Value"]

		DepSchedule = MKT_ASSET_DEPRE_SCHEDULE.query.filter_by(ID=AssetID).order_by(desc(MKT_ASSET_DEPRE_SCHEDULE.Createdon)).all()
		if not DepSchedule:
			DepSchedule = MKT_ASSET_DEPRE_SCHEDULE_HIST.query.filter(func.substring(MKT_ASSET_DEPRE_SCHEDULE_HIST.ID, "(.*)@")==AssetID).order_by(MKT_ASSET_DEPRE_SCHEDULE_HIST.InstallmentNo).all()

		AmendedInstallment = [item for item in DepSchedule if "@" in str(item.InstallmentNo)]
		AmendedDivision = collections.defaultdict(list)
		SortedAmendedInstallment = []
		
		if len(AmendedInstallment) > 0:
			AmendedInstallment = [item.__dict__ for item in AmendedInstallment]
			for Installment in AmendedInstallment:
				AmendedDivision[int(str(Installment['InstallmentNo']).split("@")[1])].append(Installment)
			
			AmendedInstallment = AmendedDivision.values()
			
			for Installment in AmendedInstallment:
				SortedInstallment = sorted(Installment, key=lambda k : int(str(k['InstallmentNo']).split('@')[1]))
				SortedAmendedInstallment.append(SortedInstallment)
						
			AmendedInstallment = SortedAmendedInstallment

		AmendedInstallment.append([])
		if UsingHistory:
			for using in UsingHistory:
				if using.NewAssigneeID != '':
					User = MKT_OFFICER.query.get(str(using.NewAssigneeID))
				else:
					User = MKT_OFFICER.query.get(str(using.AssigneeID))
				if User:
					UsingHist.append(User.LastName + ' ' + User.FirstName)
				if using.AssigneeID == '':
					OldBranch = MKT_BRANCH.query.get(str(using.OldBranch))
					NewBranch = MKT_BRANCH.query.get(str(using.NewBranch))
					UsingHist.append('BR#'+OldBranch.Description)
					UsingHist.append(str(NewBranch.Description))

				UsingHist.append(str(using.AssigningDate))
				UsingHist.append(str(using.StopUsingDate))
				UsingHistWrapper.append(UsingHist)
				UsingHist = []

		#--- Query the repair or maintenance history of the asset
		RepairItem = MKT_ASSET_REPAIR.query.join(MKT_ASSET, MKT_ASSET_REPAIR.AssetID==row.ID).all()

		if not RepairItem:
			RepairItem = MKT_ASSET_REPAIR.query.join(MKT_ASSET_HIST, MKT_ASSET_REPAIR.SerialNumber==row.SerialNumber).all()
		
		if RepairItem :
			for repair in RepairItem :

				VendorID = repair.VendorID
				Vendor = MKT_VENDOR.query.get(str(VendorID))
				Repair.append(str(Vendor.VendorName) if Vendor else '')
				Repair.append(repair.Currency)
				Repair.append(format(repair.Amount,'.2f'))
				Repair.append(repair.TransactionDate)
				RepairWrapper.append(Repair)
				Repair = []

		#--- Query the dispose information of the asset
		dispose = MKT_ASSET_DISPOSE.query.filter(func.substring(row.ID, "(.*)@")==MKT_ASSET_DISPOSE.AssetID).first()
		
		if dispose :
			DisposalType = MKT_ASSET_DISPOSAL.query.get(str(dispose.DisposalType))
			EndDate = str(dispose.DisposeDate)
			Dispose.append(str(DisposalType.Description) if DisposalType else '')
			Dispose.append(dispose.Currency)
			Dispose.append(format(dispose.Amount, '.2f'))
			Dispose.append(format(dispose.LossOrGainAmount, '.2f'))
			Dispose.append(dispose.DisposeDate)

		
		Duration = mktdate.getDuration(ValueDate, EndDate)
		AssetInfo.append(Duration)
		AssetInfo.append(row.SerialNumber)
		AssetInfo.append(str(row.MaturityDate))

		dic.update({"Info":AssetInfo, 
					"Using":[CurrentUsing, UsingHistWrapper], 
					"Repair":RepairWrapper, 
					"Dispose":Dispose
					})
		
		Assets.append(dic)
		
	return render_template("/fixedasset/fixed_asset.html", 
							Assets 			= Assets, 
							Query 			= Query,
							ScheduleObj 	= AmendedInstallment,
							float 			= float,
							HeaderTable 	= TableHeader,
							toMoney 		= mktmoney.toMoney,
							getCurrencyObj 	= mktmoney.getCurrencyObj,
							AssetID 		= str(Asset.ID) if Asset else "",
							Currency 		= str(AssetInfo[1]) if AssetInfo else ""
							)


@app.route("/Morakot/Report/Asset/GetSuggestion")
@checkLogOutSession
@checkLogOutTime
def getSerialForReport():
	Q = request.args.get('q')
	Query = "%" + str(Q) + "%"
	listitem = []
	DefaultDic = collections.defaultdict(list)
	Dict = {}
	
	AssetsLIVE = MKT_ASSET.query.\
					filter(MKT_ASSET.RecordType=='1', 
					or_(MKT_ASSET.ID.ilike(Query),
					MKT_ASSET.SerialNumber.ilike(Query),
					MKT_ASSET.Description.ilike(Query)					
					)
				)
	
	AssetsHIST = MKT_ASSET_HIST.query.\
					filter(MKT_ASSET_HIST.RecordType=='1', 
					or_(MKT_ASSET_HIST.ID.ilike(Query),
					MKT_ASSET_HIST.SerialNumber.ilike(Query),
					MKT_ASSET_HIST.Description.ilike(Query)),
					~func.substring(cast(MKT_ASSET_HIST.ID, String), '(.*)@').in_([Asset.ID for Asset in AssetsLIVE])
					).\
					distinct(MKT_ASSET_HIST.ID)

	Assets = sorted(AssetsLIVE.union(AssetsHIST).all(), key= lambda k: k.Createdon)
	
	if Assets:
		for row in Assets:
			print row.Createdon
			SerialNumber = "- " + str(row.SerialNumber) if row.SerialNumber else ""
			dic = {	"id":str(row.ID).split('@')[0], 
					"text":"%s %s - %s" %(str(row.ID).split('@')[0],SerialNumber,row.Description)
					}
			listitem.append(dic)
	
	UniqueList = [dict(l) for l in set(tuple(newlist.items()) for newlist in listitem )]
	
	#--- Because uniquelist cannot handle all of our situation, so we need to filter duplicate id but diffent text dictionary
	for item in UniqueList:
		DefaultDic[item["id"]].append(item)
	
	DuplicateDict = list(itertools.chain.from_iterable([item for item in DefaultDic.values() if len(item) > 1]))	
	NonDuplicateDict = list(itertools.chain.from_iterable([item for item in DefaultDic.values() if len(item) == 1]))
	
	for i in DuplicateDict:
		try:
			Dict[i['id']] = i
		except:
			pass

	if len(DuplicateDict) > 1:
		NonDuplicateDict.extend(Dict.values())
	
	return jsonify(items=NonDuplicateDict)
	

@app.route("/Morakot/DepSchedule/<AssetID>")
def getAssetDepreciationSchedule(AssetID):
	DictRow = {}
	ListOfSchedule = []
	FinalListOfSchedule = []
	Currency = request.args.get("Currency") if "Currency" in request.args else ""
	
	TableHeader = ["Branch", "No", "Start Date", "End Date", "Beginning Book Value", "Depreciation", "Accumulated Depreciation", "End Book Value"]

	DepSchedule = MKT_ASSET_DEPRE_SCHEDULE.query.filter_by(ID=AssetID).order_by(desc(MKT_ASSET_DEPRE_SCHEDULE.Createdon)).all()
	if not DepSchedule:
		DepSchedule = MKT_ASSET_DEPRE_SCHEDULE_HIST.query.filter(func.substring(MKT_ASSET_DEPRE_SCHEDULE_HIST.ID, "(.*)@")==AssetID).order_by(MKT_ASSET_DEPRE_SCHEDULE_HIST.InstallmentNo).all()

	AmendedInstallment = [item for item in DepSchedule if "@" in str(item.InstallmentNo)]
	NewInstallment = [item for item in DepSchedule if not "@" in str(item.InstallmentNo)]
	SortedNewInstallment = sorted(NewInstallment, key=lambda k : int(k.InstallmentNo))
	AmendedDivision = collections.defaultdict(list)
	SortedAmendedInstallment = []

	if len(AmendedInstallment) > 0:
		AmendedInstallment = [item.__dict__ for item in AmendedInstallment]
		for Installment in AmendedInstallment:
			AmendedDivision[int(str(Installment['InstallmentNo']).split("@")[1])].append(Installment)
		
		AmendedInstallment = AmendedDivision.values()
		
		for Installment in AmendedInstallment:
			SortedInstallment = sorted(Installment, key=lambda k : int(str(k['InstallmentNo']).split('@')[1]))
			SortedAmendedInstallment.append(SortedInstallment)
					
		AmendedInstallment = SortedAmendedInstallment
	
	AmendedInstallment.append(SortedNewInstallment)
	
	for Schedule in AmendedInstallment :
		for Installment in Schedule :
			Dict = Installment.__dict__
			Dict.pop("_sa_instance_state")
			
			for k,v in Dict.iteritems() :

				DictRow.update({k: mktmoney.toMoney(float(v), mktmoney.getCurrencyObj(Currency), 0) if isinstance(v, Decimal) else v})
			ListOfSchedule.append(DictRow)
			
			DictRow = {}
			
		FinalListOfSchedule.append(ListOfSchedule)
		ListOfSchedule = []

	
	return jsonify(data=FinalListOfSchedule[-1])
