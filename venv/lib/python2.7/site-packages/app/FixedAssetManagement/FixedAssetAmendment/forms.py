from app.Setting.models 										import MKT_APP_SETTING
from flask 														import flash
from sqlalchemy 												import or_, desc
from app.Account.models 										import *
from app.FixedAssetManagement.Depreciation.models 				import *
from decimal 													import *
from app.mktcore.wtfimports 									import *
from .models 													import *
from app.FixedAssetManagement.FixedAsset.models 				import *
from app.mktcore.session 										import *
from app.FixedAssetManagement.PaymentMethod.models 				import *
from app.FixedAssetManagement.DepreciationRegister.models 		import *
from app.Currency.models 										import *
import app.tools.mktaudit 											as mktaudit
import app.tools.mktdate 											as mktdate
import app.tools.mktmoney 											as mktmoney
import app.tools.mktfundtransfer									as mktfundtransfer
import app.FixedAssetManagement.tools.mktfamamendment 				as mktfamamendment
import app.tools.mktteller 											as mktteller
import app.tools.mktaccounting 										as mktaccounting
import app.mktcore.globalfunction 									as globalfunction
from app.Setting.models 										import MKT_APP_SETTING



@app.route('/Morakot/AssetID',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def AssetID():
	search = request.args.get('q')
	Audit = mktaudit.getAuditrail()
	Branch = Audit['Branch']
	#---SN = Serial Number
	SN=[]

	if 'view' in request.url:
		AssetLIVE = MKT_ASSET.query.filter(MKT_ASSET.ID==search)
		AssetHIST = MKT_ASSET_HIST.query.filter(MKT_ASSET_HIST.ID==search)
		Asset = AssetLIVE.union(AssetHIST).all()
	else:
		Asset = MKT_ASSET.query.filter(
								MKT_ASSET.Branch==Branch,
								or_(MKT_ASSET.ID.ilike('%'+search+'%'), 
								MKT_ASSET.SerialNumber.ilike('%'+search+'%'), 
								MKT_ASSET.Description.ilike('%'+search+'%'))).\
							all()
	for row in Asset:
		dic={"id":str(row.ID).split('@')[0], "text":str(row.ID).split('@')[0] + ((" - " + str(row.SerialNumber)) if row.SerialNumber else ("")) + " - " + str(row.Description)}
		SN.append(dic)
	app.logger.debug(SN)
	return jsonify(items=SN)


@app.route('/Morakot/AssetAmendment/AssetID',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def GetOldAssetInfo():
	AssetID = str(request.args.get('AssetID'))
	AssetObj = MKT_ASSET.query.get(AssetID)
	Frequency = {'D':"Daily", 'W':"Weekly", 'M':"Monthly", 'Q':"Quarterly", 'Y':"Annualy"}
	Bool = False

	if AssetObj:
		Consumption 						= MKT_ASSET_CONSUMPTION.query.filter_by(ID=str(AssetObj.ID)).first()
		Currency 							= str(AssetObj.Currency)
		CurrencyObj 						= MKT_CURRENCY.query.get(Currency)
		OldCrAccount 						= str(AssetObj.CrAccount)
		OldDescription 						= str(AssetObj.Description)
		OldFrequencyID 						= str(AssetObj.Frequency)
		OldFrequencyDesc 					= Frequency[OldFrequencyID]
		OldSerialNumber 					= str(AssetObj.SerialNumber) if AssetObj.SerialNumber else ""
		OldPaymentMethodID 					= str(AssetObj.PaymentMethod)
		OldPaymentMethodObj 				= MKT_ASSET_PAYMENT_ME.query.get(OldPaymentMethodID)
		OldPaymentMethodDesc 				= (str(OldPaymentMethodObj.CategoryID) + " - " + str(OldPaymentMethodObj.Description)) if OldPaymentMethodObj else "-- None --"
		OldSalvageValue 					= mktmoney.toMoney(float(AssetObj.SalvageValue), CurrencyObj, 0)
		OldValueDate 						= str(AssetObj.ValueDate)
		OldAssetLife 						= str(AssetObj.AssetLife)
		OldDepreciationMethodID 			= str(AssetObj.DepreciationMethod)
		DepreciationMethodObj 				= MKT_ASSET_DEPRE_REG.query.get(OldDepreciationMethodID)		
		Bool 								= False if "BASE" in str(DepreciationMethodObj.Function).upper() else True		
		OldDepreciationMethodDesc 			= str(DepreciationMethodObj.Function)
		OldPurchasePriceUnits 				= mktmoney.toMoney(float(Consumption.PurchasePriceUnits), CurrencyObj, 0)
		OldUnitOfProOrHourOfOpr 			= mktmoney.toMoney(float(AssetObj.UnitOfProOrHourOfOpr), CurrencyObj, 0)
		OldWholeLifeUnitOfProOrHourOfOpr 	= mktmoney.toMoney(float(AssetObj.WholeLifeUnitOfProOrHourOfOpr), CurrencyObj, 0)

		return jsonify(
						CurrencyID 							= Currency,
						CurrencyDesc 						= Currency,
						OldCrAccount 						= OldCrAccount,
						OldDescription 						= OldDescription,
						OldFrequencyID 						= OldFrequencyID,
						OldFrequencyDesc 					= OldFrequencyDesc,
						OldSerialNumber 					= OldSerialNumber,
						OldPaymentMethodID 					= OldPaymentMethodID,
						OldPaymentMethodDesc 				= OldPaymentMethodDesc,
						OldSalvageValue 					= OldSalvageValue,
						OldValueDate 						= OldValueDate,
						OldAssetLife 						= OldAssetLife,
						OldDepreciationMethodID 			= OldDepreciationMethodID,
						OldDepreciationMethodDesc 			= OldDepreciationMethodDesc,
						OldPurchasePriceUnits 				= OldPurchasePriceUnits,
						OldUnitOfProOrHourOfOpr 			= OldUnitOfProOrHourOfOpr,
						OldWholeLifeUnitOfProOrHourOfOpr 	= OldWholeLifeUnitOfProOrHourOfOpr,
						Bool 								= Bool
						)
	return None


@app.route('/Morakot/AssetAmendment/DepMethod',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def AmendDepMethod():
	DepMethod = str(request.args.get('DepMethod'))
	DepMethodObj = MKT_ASSET_DEPRE_REG.query.get(DepMethod)
	Bool = False
	if DepMethodObj:
		Bool = False if "BASE" in str(DepMethodObj.Function).upper() else True
	else:
		Bool = True
	if Bool:
		UnitOfProOrHourOfOpr = 0
		WholeLifeUnitOfProOrHourOfOpr = 0
		return jsonify(Bool=Bool, UnitOfProOrHourOfOpr=UnitOfProOrHourOfOpr, WholeLifeUnitOfProOrHourOfOpr=WholeLifeUnitOfProOrHourOfOpr)

	return jsonify(Bool=Bool)


@app.route('/Morakot/AssetAmendment/GetAccount',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def GetNewAccount():
	PaymentMethod 	= request.args.get('PaymentMethod') if 'PaymentMethod' in request.args else ''
	Currency 	= request.args.get('Currency') if 'Currency' in request.args else ''
	DrCr 		= request.args.get('DrCr') if 'DrCr' in request.args else ''
	Audit 		= mktaudit.getAuditrail()
	Inputter	= Audit['Inputter']
	Branch 		= Audit['Branch']
	PaymentMethodObj = MKT_ASSET_PAYMENT_ME.query.get(PaymentMethod)
	Category = str(PaymentMethodObj.CategoryID)	if PaymentMethodObj else ""
	
	Account = ""
	if Category:
		if mktteller.isCashCateogry(Category):
			if Currency:
				AccountObj 	= mktteller.getCashAccountByCategory(Category,Currency,Inputter,Branch)				
				if AccountObj[0]:
					Account = AccountObj[1].ID
						
	return jsonify(Account=str(Account))


def loadPaymentMethod():
	return MKT_ASSET_PAYMENT_ME.query.all()

def loadDepreciationMethod():
	return MKT_ASSET_DEPRE_REG.query.all()

def loadCurrency(ID=''):
	if ID :
		return MKT_CURRENCY.query.filter_by(ID=ID).first()
	else:
		return MKT_CURRENCY.query.all()


class ValidateChanging():
	
	def __call__(self, form, field):

		try:
			NewFieldVal = float(field.data)
			OldField = "Old" + field.name[3:]
			OldFieldVal = float(eval("form." + OldField + ".data"))
		except Exception, e:
			NewFieldVal = field.data
			OldField = "Old" + field.name[3:]
			OldFieldVal = eval("form." + OldField + ".data")

		if "UnitOfProOrHourOfOpr" in str(field.name):
			if OldFieldVal > 0 and NewFieldVal == OldFieldVal:
				raise ValidationError("Your new value is the same to old one.")
			else:
				return

		if "DepreciationMethod" in field.name:
			if NewFieldVal:
				if "BASE" in str(field.data.Function).upper():
					return

		if NewFieldVal == OldFieldVal and not (OldFieldVal == "" or OldFieldVal == 0l):
			raise ValidationError("Your new value is the same to old one.")
		

class FRM_ASSET_AMENDMENT(exform):
	AssetID 							= HiddenField(requiredlabel("Asset", "*"), 
														validators=[validators.Required()]
														)
	OldSerialNumber 					= TextField("Old Serial Number")
	NewSerialNumber 					= TextField("New Serial Number", validators=[ValidateChanging()])
	OldDescription 						= TextField("Old Description")
	NewDescription 						= TextField("New Description", validators=[ValidateChanging()])
	EffectivePeriod 					= SelectField("Depreciation Effect",
														choices=[("1", "From Now"), ("2", "Since Acquisition")]
														)
	AmendDate 							= DateField(requiredlabel("Amend Date", "*"), 
													default=mktdate.getBankDate,
													validators=[validators.Required()])
	# Transaction 	= QuerySelectField(requiredlabel('Transaction', '*'),
	# 			                        query_factory=loadTransaction,
	# 			                        get_label=lambda a: a.ID + " - " + a.Description,
	# 			                        allow_blank=True,
	# 			                        blank_text="-- Choose Transaction --",
	# 			                        validators=[validators.Required()],
	# 			                        )
	Note 								= TextAreaField(requiredlabel("Note", "*"), 
														validators=[validators.Required(), 
														validators.Length(max=100)]
														)

	#---Asset Value Tab---
	Currency 							= QuerySelectField("Currency",
															query_factory=loadCurrency,
															get_label=u'ID',
															blank_text="-- None --",
															allow_blank=True,
															description="1-Asset Value"
														)	
	OldPaymentMethod 					= QuerySelectField("Old Payment Method",
															query_factory=loadPaymentMethod,
															get_label=lambda a : a.CategoryID + " - " + a.Description,
															blank_text="-- None --",
															allow_blank=True,
															description="1-Asset Value"
														)
	OldCrAccount 						= TextField("Old Cr Account", description="1-Asset Value")
	NewPaymentMethod 					= QuerySelectField("New Payment Method", 
															query_factory=loadPaymentMethod,
															get_label=lambda a : a.CategoryID + " - " + a.Description,
															blank_text="-- None --",
															allow_blank=True,
															description="1-Asset Value",
															validators=[ValidateChanging()]
														)
	NewCrAccount 						= TextField("New Cr Account", description="1-Asset Value")
	OldPurchasePriceUnits 				= TextField("Old Purchasing Price", default=0, description="1-Asset Value")
	NewPurchasePriceUnits 				= TextField("New Purchasing Price", default=0, description="1-Asset Value", validators=[ValidateChanging()])
	OldSalvageValue 					= TextField("Old Salvage Value", default=0, description="1-Asset Value")
	NewSalvageValue 					= TextField("New Salvage Value", default="", description="1-Asset Value")
	OldValueDate 						= TextField("Old Purchasing Date", description="1-Asset Value")
	NewValueDate 						= DateField("New Purchasing Date", 
													validators=[validators.Optional(), ValidateChanging()], 
													description="1-Asset Value"
													)

	#---Depreciation Tab---
	OldAssetLife 						= TextField("Old Asset Life", default=0, description="2-Depreciation")
	NewAssetLife 						= TextField("New Asset Life", 
													default=0, 
													description="2-Depreciation", 
													validators=[ValidateChanging()]
													)
	OldDepreciationMethod 				= QuerySelectField("Old Depreciation Method", 
															query_factory=loadDepreciationMethod,
															get_label=u"Function",
															blank_text="-- None --",
															allow_blank=True,
															description="2-Depreciation"
															)

	NewDepreciationMethod 				= QuerySelectField("New Depreciation Method", 
															query_factory=loadDepreciationMethod,
															get_label=u"Function",
															blank_text="-- None --",
															allow_blank=True,
															description="2-Depreciation",
															validators=[ValidateChanging()]
															)
	OldUnitOfProOrHourOfOpr 			= TextField("Old Unit of Production / Hour of Operation", 		
													default=0,
													description="2-Depreciation"
													)
	NewUnitOfProOrHourOfOpr 			= TextField("New Unit of Production / Hour of Operation", 
													default=0,
													description="2-Depreciation",
													validators=[ValidateChanging()]
													)
	OldWholeLifeUnitOfProOrHourOfOpr 	= TextField("Old Whole Life Unit of Production / Hour of Operation",
													default=0,
													description="2-Depreciation"
													)
	NewWholeLifeUnitOfProOrHourOfOpr 	= TextField("New Whole Life Unit of Production / Hour of Operation",
													default=0,
													description="2-Depreciation",
													validators=[ValidateChanging()]
													)
	OldFrequency 						= SelectField("Old Frequency", 
														choices=[("__None","-- None --"),("D","Daily"), ("W","Weekly"), ("M","Monthly"), ("Q", "Quarterly"), ("Y", "Annualy")],														
														description="2-Depreciation"
														)
	NewFrequency 						= SelectField("New Frequency", 
														choices=[("__None","-- None --"),("D","Daily"), ("W","Weekly"), ("M","Monthly"), ("Q", "Quarterly"), ("Y", "Annualy")],
														description="2-Depreciation",
														validators=[ValidateChanging()]
														)


	def validate_AssetID(form, field):
		DictOfValue = {}
		DictOfValue.update({
							"NewDescription":request.form['NewDescription'],
							"NewSerialNumber":request.form['NewSerialNumber'],
							"NewAssetLife":request.form['NewAssetLife'],
							"NewFrequency":request.form['NewFrequency'],
							"NewDepreciationMethod":request.form['NewDepreciationMethod'],
							"NewPurchasePriceUnits":request.form['NewPurchasePriceUnits'],
							"NewSalvageValue":request.form['NewSalvageValue'],
							"NewValueDate":request.form['NewValueDate'], 
							"NewPaymentMethod":request.form['NewPaymentMethod'], 							
							"NewUnitOfProOrHourOfOpr":request.form['NewUnitOfProOrHourOfOpr'], 
							"NewWholeLifeUnitOfProOrHourOfOpr":request.form['NewWholeLifeUnitOfProOrHourOfOpr'],
							})
		ChangingField = list(set(mktfamamendment.getChangingField(DictOfValue)))
		
		NewSalvageValue = float(request.form['NewSalvageValue'])
		OldSalvageValue = float(request.form['OldSalvageValue'])
		
		if (len(ChangingField) == 0) or ('SalvageValue' in ChangingField and len(ChangingField) == 1 and NewSalvageValue == OldSalvageValue):
			raise ValidationError("You have not amended anything yet.")		


	def validate_AmendDate(form, field):
		TranDate = str(field.data)
		
		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")			

		except Exception, e:
			print e 
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)


	def validate_OldValueDate(form, field):
		TranDate = str(field.data)
		EffectivePeriod = str(request.form['EffectivePeriod'])
		if EffectivePeriod == "2":
			try:
				CheckFormatDate = mktdate.isDateISO(TranDate)
				if not CheckFormatDate:
					raise ValidationError("Incorrect date format, should be YYYY-MM-DD")			

			except Exception, e:
				print e 
				raise ValidationError("This field must be in date format.")

			Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
			if Check:
				raise ValidationError(Check)


	def validate_NewValueDate(form, field):
		TranDate = str(field.data)
			
		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")			

		except Exception, e:
			print e 
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)


	def validate_NewAssetLife(form, field):
		AssetLife = str(request.form['NewAssetLife'])
		
		try:
			float(AssetLife)
		except Exception, e:
			raise ValidationError("New Asset Life must be number.")


	def validate_EffectivePeriod(form, field):
		DepEffect = str(request.form['EffectivePeriod'])
		OldValueDate = str(request.form['OldValueDate']).split('-')
		NewValueDate = str(request.form['NewValueDate'])

		if NewValueDate != "" and DepEffect != "2":
			raise ValidationError("To be able to amend Purchasing Date you have to choose Depreciation Effect to Since Acquisition.")
		
		if len(OldValueDate) != 1:
			AmendDate = str(request.form['AmendDate']).split('-')

			# MonthDiff = int(OldValueDate[1]) - int(NewValueDate[1])
			MonthDiff = int(OldValueDate[1]) - int(AmendDate[1])

			if DepEffect == "2":
				if MonthDiff >=2 :
					raise ValidationError("You cannot choose effective period to Since Acquisition for this new purchasing date ({}).".format(str(request.form['NewValueDate'])))


	def validate_NewCrAccount(form, field):
		try:
			CrAccount 		= form.NewCrAccount.data
			PaymentMethod 	= request.form['NewPaymentMethod']  if 'NewPaymentMethod' in request.form else ''
			PaymentMethod 	= MKT_ASSET_PAYMENT_ME.query.get(PaymentMethod)
			Currency 		= request.form['Currency']  if 'Currency' in request.form else ''			
			Amount 			= form.OldPurchasePriceUnits.data
			TransactionDate	= str(form.AmendDate.data)
			Audit 			= mktaudit.getAuditrail()
			Inputter		= Audit['Inputter']
			Branch 			= Audit['Branch']

			if mktteller.isAmountInDecimal(Amount):
				Amount 		= Decimal(Amount)

			if mktteller.isCashCateogry(str(PaymentMethod.CategoryID) if PaymentMethod else ""):
				if Currency:
					AccountObj 	= mktteller.getCashAccountByCategory(str(PaymentMethod.CategoryID),Currency,Inputter,Branch)
					if not AccountObj[0]:
						raise ValidationError(AccountObj[1])

			if CrAccount:
				AccObj = MKT_ACCOUNT.query.get(CrAccount)
				if AccObj :
					AccCategory = AccObj.AccCategory
					if AccCategory != str(PaymentMethod.CategoryID):
						raise ValidationError("Credit category not belong to account.")

					CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, Currency, Decimal(Amount), "Cr")
					if CheckBalance:
						raise ValidationError(CheckBalance)

					if (AccObj.Currency) != Currency:
						raise ValidationError('Dr Account currency and Sale Currency must be the same! %s != %s'%(str(AccObj.Currency),Currency))
		except:
			raise


	def validate_NewUnitOfProOrHourOfOpr(form, field):
		DepreciationMethod = str(request.form["NewDepreciationMethod"])
		DepreciationMethodObj = MKT_ASSET_DEPRE_REG.query.get(DepreciationMethod)
		Amount = float(field.data)
		WholeLifeAmount = float(request.form['NewWholeLifeUnitOfProOrHourOfOpr'])
		print "Amount", Amount
		if DepreciationMethodObj:
			if "BASE" in str(DepreciationMethodObj.Function).upper() and Amount<=0:
				raise ValidationError("Amount must be greater than zero.")
			elif WholeLifeAmount <= Amount and Amount != 0:
				raise ValidationError("This amount must be less than whole life amount.")


	def validate_NewWholeLifeUnitOfProOrHourOfOpr(form, field):
		DepreciationMethod = str(request.form["NewDepreciationMethod"])
		DepreciationMethodObj = MKT_ASSET_DEPRE_REG.query.get(DepreciationMethod)
		Amount = float(field.data)

		if DepreciationMethodObj:
			if "BASE" in str(DepreciationMethodObj.Function).upper() and Amount<=0:
				raise ValidationError("Amount must be greater than zero.")


	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay = "$('#OldSerialNumber').val(data.OldSerialNumber);"
		fielddisplay += "$('#OldDescription').val(data.OldDescription);"
		fielddisplay += "$('#Currency').select2('data', {'id':data.CurrencyID, 'text':data.CurrencyDesc});"
		fielddisplay += "$('#OldCrAccount').val(data.OldCrAccount);"
		fielddisplay += "$('#OldDepreciationMethod').select2('data', {'id' : data.OldDepreciationMethodID, 'text' : data.OldDepreciationMethodDesc});"
		fielddisplay += "$('#OldUnitOfProOrHourOfOpr').val(data.OldUnitOfProOrHourOfOpr);"
		fielddisplay += "$('#OldAssetLife').val(data.OldAssetLife);"
		fielddisplay += "$('#OldValueDate').val(data.OldValueDate);"
		fielddisplay += "$('#OldSalvageValue').val(data.OldSalvageValue);"
		fielddisplay += "$('#NewSalvageValue').val(data.OldSalvageValue);"
		fielddisplay += "$('#OldPaymentMethod').select2('data', {'id':data.OldPaymentMethodID, 'text':data.OldPaymentMethodDesc});"
		fielddisplay += "$('#OldPurchasePriceUnits').val(data.OldPurchasePriceUnits);"
		fielddisplay += "$('#OldFrequency').select2('data', {'id':data.OldFrequencyID, 'text':data.OldFrequencyDesc});"
		
		fielddisplay += "$('#OldWholeLifeUnitOfProOrHourOfOpr').val(data.OldWholeLifeUnitOfProOrHourOfOpr);"
		fielddisplay += "$('#NewWholeLifeUnitOfProOrHourOfOpr').attr('readonly', data.Bool);"
		fielddisplay += "$('#NewUnitOfProOrHourOfOpr').attr('readonly', data.Bool)"

		varname = "AssetID:$('#AssetID').val()"

		fun = ["AssetID", varname, fielddisplay, "/Morakot/AssetAmendment/AssetID", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#NewWholeLifeUnitOfProOrHourOfOpr').attr('readonly', data.Bool);"
		fielddisplay += "$('#NewWholeLifeUnitOfProOrHourOfOpr').val(data.WholeLifeUnitOfProOrHourOfOpr);"
		fielddisplay += "$('#NewUnitOfProOrHourOfOpr').attr('readonly', data.Bool);"
		fielddisplay += "$('#NewUnitOfProOrHourOfOpr').val(data.UnitOfProOrHourOfOpr)"


		varname = "DepMethod:$('#NewDepreciationMethod').val()"
		fun = ["NewDepreciationMethod", varname, fielddisplay, "/Morakot/AssetAmendment/DepMethod", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#NewCrAccount').val(data.Account)"
		varname = "Currency:$('#Currency').val(),PaymentMethod:$('#NewPaymentMethod').val()"
		fun = ["NewPaymentMethod", varname, fielddisplay, "/Morakot/AssetAmendment/GetAccount", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#NewSalvageValue').val(data.SalvageValue)"
		varname = "Currency:$('#Currency').val(),NewSalvageValue:$('#NewSalvageValue').val()"
		fun = ["NewSalvageValue", varname, fielddisplay, "/Morakot/AssetAmendment/GetNewSalvageValue", "blur"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def setDisable():
		Fields = [	"OldUnitOfProOrHourOfOpr",
					"OldDescription",
					"OldDepreciationMethod",
					"OldAssetLife",
					"OldValueDate",
					"OldSalvageValue",
					"OldPaymentMethod",
					"OldSerialNumber",
					"OldPurchasePriceUnits",
					"OldFrequency",
					"Currency",
					"OldCrAccount",
					"NewCrAccount",
					"OldWholeLifeUnitOfProOrHourOfOpr"
					]

		if request.method == "POST":
			if str(request.form['NewDepreciationMethod']) != "__None":
				DepMethodObj = MKT_ASSET_DEPRE_REG.query.get(str(request.form['NewDepreciationMethod']))
			else:
				DepMethodObj = MKT_ASSET_DEPRE_REG.query.get(str(request.form['OldDepreciationMethod']))
			if DepMethodObj:
				if not ("BASE" in str(DepMethodObj.Function).upper()):
					Fields.extend(["NewUnitOfProOrHourOfOpr", "NewWholeLifeUnitOfProOrHourOfOpr"])
		
		return Fields


	# @staticmethod
	# def listField():
	# 	Fields = [
	# 				"ID",
	# 				"AssetID",
	# 				"OldDescription",
	# 				"OldSerialNumber",
	# 				""
	# 			]


	@staticmethod
	def moneyField():
		Fields = [
					["OldPurchasePriceUnits", "Currency"],
					["NewPurchasePriceUnits", "Currency"],
					["OldSalvageValue", "Currency"],
					["NewSalvageValue", "Currency"],
					["NewUnitOfProOrHourOfOpr", "Currency"],
					["OldUnitOfProOrHourOfOpr", "Currency"],
					["NewWholeLifeUnitOfProOrHourOfOpr", "Currency"],
					["OldWholeLifeUnitOfProOrHourOfOpr", "Currency"],					

				 ]

		return Fields


	@staticmethod
	def setWidth():
		control_list= [
					   ('OldFrequency', len2),
					   ('NewFrequency', len2),
					   ('OldAssetLife', len1),
					   ('NewAssetLife', len1),
					   ('NewValueDate', len3),
					   ('OldValueDate', len3),
					   ('AmendDate', len3),
					   ('EffectivePeriod', len3),					   
					   ]
					   
		return control_list


	@staticmethod
	def beforeInsert():
		Audit 			= mktaudit.getAuditrail()		
		AuthLevel 		= g.getNAuthorize		
		try:
			if AuthLevel == 0:
				mktfamamendment.amendAsset(
							EffectivePeriod 					= str(request.form['EffectivePeriod']),
							AssetID 							= str(request.form['AssetID']),
							OldAssetLife 						= str(request.form['OldAssetLife']),
							NewAssetLife 						= str(request.form['NewAssetLife']),
							OldValueDate 						= str(request.form['OldValueDate']),
							NewValueDate 						= str(request.form['NewValueDate']),
							AmendDate 							= str(request.form['AmendDate']),
							NewPurchasePriceUnits 				= float(request.form['NewPurchasePriceUnits']),
							OldPurchasePriceUnits 				= float(request.form['OldPurchasePriceUnits']),
							OldDepreciationMethod 				= str(request.form['OldDepreciationMethod']),
							NewDepreciationMethod 				= str(request.form['NewDepreciationMethod']),
							NewDescription 						= str(request.form['NewDescription']),
							NewSerialNumber 					= str(request.form['NewSerialNumber']),			
							OldFrequency 						= str(request.form['OldFrequency']),
							NewFrequency 						= str(request.form['NewFrequency']),
							Currency 							= str(request.form['Currency']),
							Note 			 					= str(request.form['Note']),
							OldCrAccount 						= str(request.form['OldCrAccount']),
							NewCrAccount 						= str(request.form['NewCrAccount'])	,		
							NewPaymentMethod 					= str(request.form['NewPaymentMethod']),
							NewSalvageValue 					= str(request.form['NewSalvageValue']),
							OldSalvageValue 					= str(request.form['OldSalvageValue']),
							NewUnitOfProOrHourOfOpr 			= float(request.form['NewUnitOfProOrHourOfOpr']),
							OldUnitOfProOrHourOfOpr 			= float(request.form['OldUnitOfProOrHourOfOpr']),
							NewWholeLifeUnitOfProOrHourOfOpr 	= float(request.form['NewWholeLifeUnitOfProOrHourOfOpr']),
							OldWholeLifeUnitOfProOrHourOfOpr 	= float(request.form['OldWholeLifeUnitOfProOrHourOfOpr']),
				)
				
				db.session.commit()

			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()				
			return False


	@staticmethod
	def beforeAuthorize():		
		AuthLevel 		= g.getNAuthorize		
		
		try:
			AssetAmendmentInau 	= MKT_ASSET_AMENDMENT_INAU.query.get(g.formID)
			print "----------------------------==================", str(AssetAmendmentInau.EffectivePeriod)
			mktfamamendment.amendAsset(						
						EffectivePeriod 					= str(AssetAmendmentInau.EffectivePeriod),
						AssetID 							= str(AssetAmendmentInau.AssetID),
						OldAssetLife 						= str(AssetAmendmentInau.OldAssetLife),
						NewAssetLife 						= str(AssetAmendmentInau.NewAssetLife),
						OldValueDate 						= str(AssetAmendmentInau.OldValueDate),
						NewValueDate 						= str(AssetAmendmentInau.NewValueDate),
						AmendDate 							= str(AssetAmendmentInau.AmendDate),
						NewPurchasePriceUnits 				= float(AssetAmendmentInau.NewPurchasePriceUnits),
						OldPurchasePriceUnits 				= float(AssetAmendmentInau.OldPurchasePriceUnits),
						OldDepreciationMethod 				= str(AssetAmendmentInau.OldDepreciationMethod),
						NewDepreciationMethod 				= str(AssetAmendmentInau.NewDepreciationMethod),
						NewDescription 						= str(AssetAmendmentInau.NewDescription),
						NewSerialNumber 					= str(AssetAmendmentInau.NewSerialNumber),
						OldFrequency 						= str(AssetAmendmentInau.OldFrequency),
						NewFrequency 						= str(AssetAmendmentInau.NewFrequency),
						Currency 							= str(AssetAmendmentInau.Currency),
						Note 			 					= str(AssetAmendmentInau.Note),	
						OldCrAccount 						= str(AssetAmendmentInau.OldCrAccount),
						NewCrAccount 						= str(AssetAmendmentInau.NewCrAccount),			
						NewPaymentMethod 					= str(AssetAmendmentInau.NewPaymentMethod),
						OldSalvageValue 					= str(AssetAmendmentInau.OldSalvageValue),
						NewSalvageValue 					= str(AssetAmendmentInau.NewSalvageValue),
						NewUnitOfProOrHourOfOpr 			= float(AssetAmendmentInau.NewUnitOfProOrHourOfOpr),
						OldUnitOfProOrHourOfOpr 			= float(AssetAmendmentInau.OldUnitOfProOrHourOfOpr),
						NewWholeLifeUnitOfProOrHourOfOpr 	= float(AssetAmendmentInau.NewWholeLifeUnitOfProOrHourOfOpr),
						OldWholeLifeUnitOfProOrHourOfOpr 	= float(AssetAmendmentInau.OldWholeLifeUnitOfProOrHourOfOpr),
						)
			
			db.session.commit()
			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()				
			return False


	@staticmethod
	def reverseRec():
		return False, "Cannot reverse this record. You can do another amend instead."


	@staticmethod
	def formReadOnly():
		return "AUTH"




