from app.mktcore.wtfimports 						import *
from .models 										import *
from app.Village.models 							import *
from app.Commune.models 							import *
from app.District.models 							import *
from app.Province.models 							import *
from app.VB.models 									import *
from ..VendorType.models 							import *
from app.Country.models 							import MKT_COUNTRY
import app.tools.mkttool 								as mkttool
import app.tools.mktdate 								as mktdate
import app.tools.mktaccount 							as mktaccount
from app.Category.models 							import *
from app.Account.models 							import *
import app.tools.mktaccounting 							as mktaccounting
from app.mktcore.session 								import *


def loadCurrentDate():
	return mktdate.getBankDate()

def loadCountry(ID=''):
	if ID :
		return MKT_COUNTRY.query.filter_by(ID=ID).one()
	else:
		return MKT_COUNTRY.query.all()

def loadCategory():
	return MKT_CATEGORY.query.all()


def loadCommune():
	if request.method == 'POST':
		District=request.form["District"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['Commune'])
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()
	return MKT_COMMUNE.query.filter_by(District=District) # tablename.query

def loadVillage():
	if request.method == 'POST':
		Commune=request.form["Commune"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['Village'])
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()
	return MKT_VILLAGE.query.filter_by(Commune=Commune) # tablename.query

def loadDistrict():
	if request.method == 'POST':
		Province = request.form["Province"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])
		else:
			return MKT_DISTRICT.query.filter_by(ID='').all()
	return MKT_DISTRICT.query.filter_by(Province=Province) # tablename.query

def loadProvince():
	return MKT_PROVINCE.query.all()

def getRecord():
	try:
		result = MKT_VENDOR_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_VENDOR.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict.update({'Province'	:str(row.Province)})
				Dict.update({'District'	:str(row.District)})
				Dict.update({'Commune'	:str(row.Commune)})
				Dict.update({'Village'	:str(row.Village)})
			return Dict
		else:
			return Dict
	except:
		raise


def loadVendorType():
	return MKT_VENDOR_TYPE.query.all()


@app.route("/Morakot/Vendor/GetCountry",methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def getCountry():
	dic = False	
	Choices = request.args.get('Country')
	if Choices != "KH":
		dic = True
	return jsonify(Bool=dic, Readonly=not dic)

# @app.route("/Morakot/GetCrAccount",methods=["GET"])
# def getCrAccountForVendor():
# 	CrAccount = request.args.get('CrAccount')
# 	Account = MKT_ACCOUNT.query.get(CrAccount)
# 	Category = MKT_CATEGORY.query.get(str(Account.AccCategory))
# 	return jsonify(
# 					PayableCategoryID=str(Category.ID),
# 					PayableCategoryDesc=str(Category.Description)
# 					)


class FRM_VENDOR(exform):
	VendorName 		= TextField(requiredlabel("Vendor Name","*"), 
								validators=[validators.Required()]
								)
	VendorKhmerName = TextField(requiredlabel("Vendor Khmer Name","*"), 
								validators=[validators.Required()]
								)
	VendorType 		= QuerySelectField(	requiredlabel("Vendor Type","*"), 
										query_factory=loadVendorType, 
										get_label=u'Description',  
										validators=[validators.Required()]
										)
	# CrAccount 		= 	RemoteTextField("Cr Account")
	PayableCategory = QuerySelectField(	requiredlabel("Payable Category","*"),
										query_factory=loadCategory, 
										blank_text=u'--Choose Category--',								
										get_label=lambda a: a.ID + '-' + a.Description,
										allow_blank=True,
										validators=[validators.Required()],
										# description='1-Payable Detail'
										)
	PhoneNumber 	= TextField(requiredlabel("Phone Number","*"), 
								description="2- %s"% 'Contact', 
								validators=[validators.Required()]
								)
	Email 			= TextField("Email", 
								description="2- %s"% 'Contact', 
								validators=[validators.Optional(),validators.Email(message=u'Invalid email address.')]
								)
	Website 		= TextField("Website", 
								description="2- %s"% 'Contact'
								)
	Facebook	 	= TextField("Facebook",
								description="2- %s"% 'Contact', 								
								)
	LineID 		 	= TextField("Line ID",
								description="2- %s"% 'Contact', 								
								)
	WhatsApp	 	= TextField("Whats App",
								description="2- %s"% 'Contact', 								
								)
	Telegram 	 	= TextField("Telegram",
								description="2- %s"% 'Contact', 								
								)
	Viber 		 	= TextField("Viber",
								description="2- %s"% 'Contact', 								
								)
	
	CorporationDate = DateField(requiredlabel("Corporation Date","*"), 
								validators=[validators.Required()], 
								default=loadCurrentDate
								)
 	Country 		= QuerySelectField(requiredlabel('Country', "*"), 
										query_factory=loadCountry, 
										blank_text=u'--Choose Country--',
										get_label=u'Description', 
										default=lambda:loadCountry('KH'),
										allow_blank=True, 
										validators=[validators.Required()]
										)

 	Address 		= TextField("Address",						
								validators=[validators.Length(max=100)]
								)
	Province 		= QuerySelectField('Province', 
										query_factory=loadProvince, 
										blank_text=u'--Choose Province--',
										get_label=u'Description', 
										allow_blank=True, 
										# validators=[validators.Required()]
										)
	District 		= QuerySelectField("District",
										query_factory=loadDistrict,
										blank_text=u'--Choose District--',
										get_label=u'Description', 
										allow_blank=True,  
										)
	Commune 		= QuerySelectField("Commune",
										query_factory=loadCommune, 
										blank_text=u'--Choose Commune--',
										get_label=u'Description', 
										allow_blank=True, 
										)
	Village 		= QuerySelectField("Village", 
										query_factory=loadVillage,
										blank_text=u'--Choose Village--',
										get_label=u'Description', 
										allow_blank=True,  
										)
	MOUSign 		= SelectField(	requiredlabel("MOU Sign","*"),
									choices=[("N","No"),("Y","Yes")], 
									validators=[validators.Required()]
									)
	Remark 			= TextField("Note")
	VendorBranch 	= TextField("Vendor Branch")

	def validate_PhoneNumber(form, field):
		PhoneNumber = form.PhoneNumber.data
		if PhoneNumber:
			if len(PhoneNumber) < 3:
				raise ValidationError("Invalid mobile phone number. Ex: 012xxxxxx")
			CheckMobileNumber, Msg = mkttool.isMobile(PhoneNumber)
			if not CheckMobileNumber:
				raise ValidationError(Msg)


	# def validate_CrAccount(form, field):
	# 	try:
	# 		CrAccount 		= form.CrAccount.data
	# 		PayableCategory = request.form['PayableCategory']  if 'PayableCategory' in request.form else ''
	# 		# Currency 		= request.form['Currency']  if 'Currency' in request.form else ''			
	# 		# Amount 			= form.Amount.data
	# 		# TransactionDate	= str(form.TransactionDate.data)

	# 		# if mktteller.isAmountInDecimal(Amount):
	# 		# 	Amount 		= Decimal(Amount)

	# 		if CrAccount:
	# 			AccObj = MKT_ACCOUNT.query.get(CrAccount)
	# 			if AccObj :
	# 				AccCategory = AccObj.AccCategory					
	# 				if AccCategory != PayableCategory:
	# 					raise ValidationError("Credit category not belong to account.")

	# 				# CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, Currency, Decimal(Amount), "Cr",TranDate=TransactionDate)
	# 				# if CheckBalance:	
	# 				# 	raise ValidationError(CheckBalance)
	# 	except:
	# 		raise


	@staticmethod
	def setDisable():
		Fields = []
		Fields = [	
				  ('Address')
				 ]
		return Fields


	@staticmethod
	def setVisible():
		control_list = []
		control_list = [
						('VendorBranch')
						]
		return control_list


	@staticmethod
	def hotSelectField():
		hotfield 	=[]
		fielddisplay="District, #Commune, #Village"
		varname		="ProvinceID:$('#Province').val()"
		
		fun			=["Province", varname ,fielddisplay, "/Morakot/DistrictID", "click"]
		hotfield.append(fun)
		fielddisplay="Commune, #Village"
		varname		="DistrictID:$('#District').val()"
		
		fun			=["District", varname ,fielddisplay, "/Morakot/CommuneID", "click"]
		hotfield.append(fun)

		fielddisplay="Village"
		varname		="CommuneID:$('#Commune').val()"	
		fun			=["Commune", varname ,fielddisplay, "/Morakot/VillageID", "click"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def hotField():
		hotfield=[]

		fielddisplay="$('#Province').select2('readonly',data.Bool);"
		fielddisplay+="$('#District').select2('readonly',data.Bool);"
		fielddisplay+="$('#Commune').select2('readonly',data.Bool);"
		fielddisplay+="$('#Village').select2('readonly',data.Bool);"
		fielddisplay+="$('#Address').attr('readonly',data.Readonly);"
		
		varname="Country:$('#Country').val()"
		fun=["Country", varname ,fielddisplay, "/Morakot/Vendor/GetCountry", "click"]
		hotfield.append(fun)

		# fielddisplay="$('#PayableCategory').select2('data',{'id':data.PayableCategoryID, 'text':data.PayableCategoryDesc});"
		# varname="CrAccount:$('#CrAccount').val()"
		# fun=["CrAccount", varname ,fielddisplay, "/Morakot/GetCrAccount", "change"]
		# hotfield.append(fun)

		return hotfield


	@staticmethod
	def listField():
		Fields = [
					"ID",
					"VendorBranch",
					"VendorName",
					"VendorKhmerName",
					"VendorType",
					"PhoneNumber",
					"Email",
					"Website",
					"CorporationDate",
					"MOUSign"
				 ]
		return Fields