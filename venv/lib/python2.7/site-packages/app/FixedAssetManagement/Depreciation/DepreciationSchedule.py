from datetime 							import date, timedelta, datetime
from dateutil.relativedelta 			import *
from app 								import db
from ..Depreciation.models 				import MKT_ASSET_DEPRE_SCHEDULE_INAU, MKT_ASSET_DEPRE_SCHEDULE
import app.tools.mktaudit 					as mktaudit
import app.tools.mktdate 					as mktdate
from ..DepreciationRegister.models 		import *
import calendar
from ..tools.mktfamdate  				import DaysDiff


def getDuration(DateOffSet, CurrentDate):
	
	DateOffSet = str(DateOffSet)
	Date = DateOffSet.split('-')
	Date_1 = datetime(int(Date[0]), int(Date[1]), int(Date[2]), 0, 0)

	CurrentDate = str(CurrentDate)
	Date = CurrentDate.split('-')
	Date_2 = datetime(int(Date[0]), int(Date[1]), int(Date[2]), 0, 0)
	
	DateDifference = relativedelta(Date_2, Date_1)

	return DateDifference

def calculateNextRunDate(ValueDate, Frequency, IsFirstInstallment=False):
	FreqType = Frequency['Type']
	
	SplitDate = [int(Val) for Val in str(ValueDate).split('-')]
	if not IsFirstInstallment:
		BackValueDate = date(*SplitDate) - timedelta(days=1)
		SplitDate = [int(Val) for Val in str(BackValueDate).split('-')]
				
	DateObj = date(*SplitDate)
	NextRunDate = ""
	QuaterEnd = [3, 6, 9, 12]
	DayObj = {'MON':0, 'TUE':1, 'WED':2, 'THU':3, 'FRI':4, 'SAT':5, 'SUN':6}

	if FreqType == "D":
		if IsFirstInstallment:
			NextRunDate = DateObj
		else:
			NextRunDate = DateObj + timedelta(days=1)
	elif FreqType == "M":
		if IsFirstInstallment:
			NumberOfDay = int(calendar.monthrange(SplitDate[0], SplitDate[1])[1])
			NextRunDate = date(SplitDate[0], SplitDate[1], NumberOfDay)
		else:
			Month = SplitDate[1]+1 if (SplitDate[1] + 1) <=12 else 1
			Year = SplitDate[0] if (SplitDate[1] + 1 <=12) else (SplitDate[0]+1)
			NumberOfDay = int(calendar.monthrange(Year, Month)[1])
			NextRunDate = date(Year, Month, NumberOfDay)
	elif FreqType == "Q":
		Month = SplitDate[1]
		if IsFirstInstallment:
			for Val in QuaterEnd:
				if Month <= Val:
					QuaterToBook = Val
					break
			NumberOfDay = calendar.monthrange(SplitDate[0], QuaterToBook)[1]
			NextRunDate = date(SplitDate[0], QuaterToBook, NumberOfDay)
		else:
			QuaterToBook = Month + 3 if (Month + 3)<=12 else 3
			Year = SplitDate[0] if (Month + 3)<=12 else (SplitDate[0]+1)
			NumberOfDay = calendar.monthrange(SplitDate[0], QuaterToBook)[1]
			NextRunDate = date(Year, QuaterToBook, NumberOfDay)
	elif FreqType == "Y":
		if IsFirstInstallment:
			NextRunDate = date(SplitDate[0], 12, 31)
		else:
			Year = SplitDate[0] + 1
			NextRunDate = date(Year, 12, 31)
	elif FreqType == "W":
		if IsFirstInstallment:
			Month = SplitDate[1]
			Weekend = DayObj[Frequency['Weekend']]
			DayIndex = datetime(*SplitDate).weekday()
			NumberOfDifDay = 0 if Weekend==DayIndex else ((Weekend - DayIndex) if Weekend > DayIndex else (Weekend - DayIndex + 7))
			NumberOfDay = NumberOfDifDay + SplitDate[2]
			DayPerMonth = calendar.monthrange(SplitDate[0], SplitDate[1])[1]
			if NumberOfDay > DayPerMonth:
				NumberOfDay = NumberOfDay - DayPerMonth
				Month = SplitDate[1] + 1
			
			NextRunDate = date(SplitDate[0], Month, NumberOfDay)
		else:
			NextRunDate = DateObj + timedelta(days=7)

	return NextRunDate


def findFirstPeriod(StartDate, Frequency, NumberOfDay):
	StartDate = str(StartDate)
	SplitDate = str(StartDate).split('-')
	FirstPeriod = ""

	if Frequency == 'M':
		FirstPeriod = ((float(calendar.monthrange(int(SplitDate[0]), int(SplitDate[1]))[1]+1) - int(SplitDate[2]))/(calendar.monthrange(int(SplitDate[0]), int(SplitDate[1]))[1])) if NumberOfDay == 365 else ((31 - int(SplitDate[2]))/30)
	elif Frequency == 'Q':
		NextQuater = calculateNextRunDate(StartDate, {"Type":Frequency, 'Weekend':'FRI'}, True)
		FirstDuration = DaysDiff(StartDate, str(NextQuater)) + 1
		QuarterStart = str(calculateStartQuater(StartDate))
		FullQuaterDuration = DaysDiff(QuarterStart, str(NextQuater)) + 1
		FirstPeriod = (FirstDuration/float(FullQuaterDuration)) if NumberOfDay == 365 else (float(FirstDuration)/90)
	elif Frequency == 'W':
		NextRunWeek = calculateNextRunDate(StartDate, {"Type":Frequency, 'Weekend':'FRI'}, True)
		DifDay = DaysDiff(StartDate, str(NextRunWeek)) + 1
		FirstPeriod = float(DifDay) / 7
	elif Frequency == 'Y':
		RunDate = calculateNextRunDate(StartDate, {"Type":Frequency, 'Weekend':'FRI'}, True)
		DifDay = DaysDiff(StartDate, str(RunDate)) + 1
		FirstPeriod = float(DifDay) / NumberOfDay
	elif Frequency == 'D':
		FirstPeriod = 1

	return FirstPeriod


def calculateStartQuater(Date):
	SplitDate = str(Date).split('-')
	QuaterStart = [10, 7, 4, 1]
	for Val in QuaterStart:
		if int(SplitDate[1]) >= Val:
			return date(int(SplitDate[0]), Val, 1)
	return ""


#---Modify method getNextMonth to be more powerful
def getNextMonth(dt,NumberOfNext=1):
	dt = dt.split('-')
	mm = int(dt[1]) - 1 + NumberOfNext #Frequency is number of next month
	yy = int(dt[0]) + mm / 12
	mm = mm % 12 + 1
	dd = min(int(dt[2]),calendar.monthrange(yy,mm)[1])
	NextMonth = date(yy,mm,dd)
	
	return NextMonth


class DepreciationSchedule(object):

	FirstDay = None
	b = False

	@staticmethod
	def addItem(StartDate, EndDate, BeginBookValue, Depreciation, AccDepreciation, EndBookValue):
		Dic = {}
		Dic.update({
					"StartDate"					: StartDate,#(str(y-1) if Frequency == "Y" else str(y)) + "-" + (str(m-1 if m != 1 else 12) if Frequency=="M" else str(m)) + "-" + str(d), 
					"EndDate"					: EndDate,
					"BeginBookValue"			: BeginBookValue,
					"Depreciation"				: Depreciation,
					"AccumulatedDepreciation" 	: AccDepreciation,
					"EndBookValue"				: EndBookValue
					})		
		return Dic
		

	@staticmethod
	def SaveItem(Type, Branch, Status, Curr, Inputter, Createdon, Authorizer, Authorizeon, AssetID, InstallmentNo, StartDate, EndDate, BeginBookValue, Depreciation, AccDepreciation, EndBookValue):
		Schedule = None
		TableName = "MKT_ASSET_DEPRE_SCHEDULE_INAU" if Type == 'INAU' else "MKT_ASSET_DEPRE_SCHEDULE"
		
		Schedule = eval(TableName)(
			Branch 					= Branch,
			Status 					= Status,
			Curr 					= Curr,
			Inputter 				= Inputter,
			Createdon 				= Createdon,
			Authorizer 				= Authorizer,
			Authorizeon 			= Authorizeon, 
			ID 						= AssetID, 
			InstallmentNo			= InstallmentNo,
			StartDate				= StartDate,
			EndDate 				= EndDate,
			BeginBookValue 			= BeginBookValue,
			Depreciation 			= Depreciation,
			AccumulatedDepreciation	= AccDepreciation,
			EndBookValue			= EndBookValue
		)
		
		db.session.add(Schedule)		


	@staticmethod
	def SaveItemWithMethod(InstallmentNo, SkippedInstallment, Type, Method, Branch, Status, Curr, Inputter, Createdon, Authorizer, Authorizeon, AssetID, StartDate, AssetLife, AssetPrice, Frequency, NumberOfDay, SalvageValue, HourOfOprOrUnitOfPro='', WholeLifeUnitOfProOrHourOfOpr=''):
		
		DepReg = MKT_ASSET_DEPRE_REG.query.filter_by(ID=Method).first()
		Function = str(DepReg.Function) if DepReg else ""
		if Function != "":
			Function = "".join([word.capitalize() for word in Function.split('_')])
			getattr(registry['DepreciationSchedule'], Function)(InstallmentNo=InstallmentNo, SkippedInstallment=SkippedInstallment, Type=Type, Method=Method, Branch=Branch, Status=Status, Curr=Curr, Inputter=Inputter, Createdon=Createdon, Authorizer=Authorizer, Authorizeon=Authorizeon, AssetID=AssetID, StartDate=StartDate, AssetLife=AssetLife, AssetPrice=AssetPrice, Frequency=Frequency, NumberOfDay=NumberOfDay, SalvageValue=SalvageValue, HourOfOprOrUnitOfPro=HourOfOprOrUnitOfPro, WholeLifeUnitOfProOrHourOfOpr=WholeLifeUnitOfProOrHourOfOpr)

	
	@staticmethod
	def GetEndDate(StartDate, Frequency):
		# b = boolean value
		
		EndDate = ""
		
		IsFirstInstallment = not DepreciationSchedule.b

		if Frequency != "D":
			EndDate = calculateNextRunDate(StartDate, {'Type':Frequency, 'Weekend':'FRI'}, IsFirstInstallment)
		else:
			EndDate = calculateNextRunDate(StartDate, {'Type':Frequency, 'Weekend':'FRI'})
		
		DepreciationSchedule.b = True		
		return str(EndDate)


	def SumOfTheYear(self, year):
		s = 0
		for i in xrange(1,year+1):
			s += i
		return s

	
	@staticmethod
	def StraightLine(InstallmentNo=0, SkippedInstallment=0, **kwargs):
		
		Times = kwargs['AssetLife'] if kwargs['Frequency'] == "Y" else (kwargs['AssetLife'] * 12 if kwargs['Frequency'] == "M" else ((kwargs['AssetLife'] * kwargs['NumberOfDay'])/7 if kwargs['Frequency'] == "W" else (kwargs['AssetLife'] * kwargs['NumberOfDay'] if kwargs['Frequency']=="D" else ( kwargs['AssetLife']*4 if  kwargs['Frequency']=="Q" else 0 )))) 
		Times -= SkippedInstallment
		NumberOfDay = kwargs['NumberOfDay']
		StartDate = kwargs['StartDate']
		SplitDate = StartDate.split('-')
		QuarterStart = ""
		FirstPeriod = findFirstPeriod(StartDate, kwargs['Frequency'], kwargs['NumberOfDay'])		
		print "SKIPPED INSTALLMENT", SkippedInstallment, kwargs['SalvageValue']
		ActualPeriod = FirstPeriod + Times - 1
		FullDepreciation = (kwargs['AssetPrice'] - kwargs['SalvageValue'])/float(ActualPeriod)
		FirstDepreciation = kwargs['AssetPrice'] - kwargs['SalvageValue'] - ((Times - 1) * FullDepreciation)
		AccDepreciation = FirstDepreciation
		Depreciation = FirstDepreciation
		BeginBookValue = kwargs['AssetPrice'] - kwargs['SalvageValue']
		EndBookValue = kwargs['AssetPrice'] - kwargs['SalvageValue'] - AccDepreciation
		print "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$", FullDepreciation, InstallmentNo
		
		for i in xrange(0,Times):
			
			EndDate = DepreciationSchedule.GetEndDate(str(StartDate),kwargs['Frequency'])
			DepreciationSchedule.SaveItem(kwargs['Type'], kwargs['Branch'], kwargs['Status'], kwargs['Curr'], kwargs['Inputter'], kwargs['Createdon'], kwargs['Authorizer'], kwargs['Authorizeon'], kwargs['AssetID'],(InstallmentNo + i +1), str(StartDate),str(EndDate),BeginBookValue,Depreciation,AccDepreciation,EndBookValue)
			StartDate = date(*[int(Val) for Val in EndDate.split('-')]) + timedelta(days=1)
			if i == Times - 2:
				Depreciation = kwargs['AssetPrice'] - kwargs['SalvageValue'] - AccDepreciation
			BeginBookValue = BeginBookValue - Depreciation
			AccDepreciation = AccDepreciation + FullDepreciation
			EndBookValue = kwargs['AssetPrice'] - kwargs['SalvageValue'] - AccDepreciation
			if i != Times - 2:
				Depreciation = FullDepreciation

		DepreciationSchedule.b = False


	@staticmethod
	def DecliningBalance(InstallmentNo=1, SkippedInstallment=0, **kwargs):
		Times = 1 if kwargs['Frequency'] == "Y" else (12 if kwargs['Frequency'] == "M" else ( kwargs['NumberOfDay']/7 if kwargs['Frequency'] == "W" else ( kwargs['NumberOfDay'] if kwargs['Frequency']=="D" else ( 4 if kwargs['Frequency']=="Q" else 0 )))) 
		AccDepreciation = 0
		Times -= SkippedInstallment
		BeginBookValue = kwargs['AssetPrice'] - kwargs['SalvageValue']
		BasedDepreciation = BeginBookValue * (float(1)/kwargs['AssetLife'])
		EndBookValue = 0		
		StartDate = kwargs['StartDate']
		FirstPeriod = findFirstPeriod(StartDate, kwargs['Frequency'], kwargs['NumberOfDay'])
		ActualPeriod = FirstPeriod + (Times) - 1

		for i in xrange(0, kwargs['AssetLife']):
			
			for j in xrange(0,Times):
				if j==0 and i==0:
					Depreciation = BasedDepreciation - ((BasedDepreciation / float(ActualPeriod)) * (Times-1))
				else:
					if i==0:
						Depreciation = BasedDepreciation / float(ActualPeriod)
					else:
						Depreciation = Depreciation / float(Times) if j == 0 else (EndBookValue if i==(kwargs['AssetLife']-1) and j==(Times-1) else Depreciation)

				AccDepreciation += Depreciation
				EndBookValue = float("{0:.9f}".format(kwargs['AssetPrice'])) - kwargs['SalvageValue'] - AccDepreciation
				EndDate = DepreciationSchedule.GetEndDate(str(StartDate), kwargs['Frequency'])
				DepreciationSchedule.SaveItem(	kwargs['Type'], 
												kwargs['Branch'], 
												kwargs['Status'], 
												kwargs['Curr'], 
												kwargs['Inputter'], 
												kwargs['Createdon'], 
												kwargs['Authorizer'], 
												kwargs['Authorizeon'], 
												kwargs['AssetID'], 
												InstallmentNo, 
												str(StartDate),
												str(EndDate),
												BeginBookValue,
												Depreciation,
												AccDepreciation,
												EndBookValue
												)
				StartDate = date(*[int(Val) for Val in EndDate.split('-')]) + timedelta(days=1)
				BeginBookValue = EndBookValue 
				InstallmentNo += 1
				
			Depreciation = (BeginBookValue * (float(1)/kwargs['AssetLife'])) if i != (kwargs['AssetLife']-2) else EndBookValue

		DepreciationSchedule.b = False


	@staticmethod
	def DoubleDecliningBalance(InstallmentNo=1, SkippedInstallment=0, **kwargs):
		Times = 1 if kwargs['Frequency'] == "Y" else (12 if kwargs['Frequency'] == "M" else ( kwargs['NumberOfDay']/7 if kwargs['Frequency'] == "W" else ( kwargs['NumberOfDay'] if kwargs['Frequency']=="D" else ( 4 if kwargs['Frequency']=="Q" else 0 )))) 
		Times -= SkippedInstallment
		AccDepreciation = 0 
		
		BeginBookValue = kwargs['AssetPrice'] - kwargs['SalvageValue']
		BasedDepreciation = BeginBookValue * (float(2)/kwargs['AssetLife'])
		EndBookValue = 0
		
		StartDate = kwargs['StartDate']
		FirstPeriod = findFirstPeriod(StartDate, kwargs['Frequency'], kwargs['NumberOfDay'])
		ActualPeriod = FirstPeriod + Times - 1

		for i in xrange(0, kwargs['AssetLife']):
			
			for j in xrange(0,Times):
				if j==0 and i==0:
					Depreciation = BasedDepreciation - ((BasedDepreciation / float(ActualPeriod)) * (Times-1))
				else:
					if i==0:
						Depreciation = BasedDepreciation / float(ActualPeriod)
					else:
						Depreciation = Depreciation / float(Times) if j == 0 else (EndBookValue if i==(kwargs['AssetLife']-1) and j==(Times-1) else Depreciation)
								
				AccDepreciation += Depreciation
				EndBookValue = float("{0:.9f}".format(kwargs['AssetPrice'])) - kwargs['SalvageValue'] - AccDepreciation
				EndDate = DepreciationSchedule.GetEndDate(str(StartDate), kwargs['Frequency'])
				DepreciationSchedule.SaveItem(	kwargs['Type'], 
												kwargs['Branch'], 
												kwargs['Status'], 
												kwargs['Curr'], 
												kwargs['Inputter'], 
												kwargs['Createdon'], 
												kwargs['Authorizer'], 
												kwargs['Authorizeon'], 
												kwargs['AssetID'], 
												InstallmentNo, 
												str(StartDate),
												str(EndDate),
												BeginBookValue,
												Depreciation,
												AccDepreciation,
												EndBookValue
												)
				
				StartDate = date(*[int(Val) for Val in EndDate.split('-')]) + timedelta(days=1)
				BeginBookValue = EndBookValue 
				InstallmentNo += 1
			Depreciation = (BeginBookValue * (float(2)/kwargs['AssetLife'])) if i != (kwargs['AssetLife']-2) else EndBookValue
		
		DepreciationSchedule.b = False


	#150% Double Declining Method
	@staticmethod
	def ThreeSecondDecliningBalance(InstallmentNo=1, SkippedInstallment=0, **kwargs):
	
		Times = 1 if kwargs['Frequency'] == "Y" else (12 if kwargs['Frequency'] == "M" else ( kwargs['NumberOfDay']/7 if kwargs['Frequency'] == "W" else ( kwargs['NumberOfDay'] if kwargs['Frequency']=="D" else ( 4 if kwargs['Frequency']=="Q" else 0 )))) 
		Times -= SkippedInstallment
		AccDepreciation = 0 
		
		BeginBookValue = kwargs['AssetPrice'] - kwargs['SalvageValue']
		BasedDepreciation = BeginBookValue * (float(1.5)/kwargs['AssetLife'])
		EndBookValue = 0
		
		StartDate = kwargs['StartDate']
		FirstPeriod = findFirstPeriod(StartDate, kwargs['Frequency'], kwargs['NumberOfDay'])
		ActualPeriod = FirstPeriod + Times - 1
		
		for i in xrange(0, kwargs['AssetLife']):
			for j in xrange(0,Times):
				if j==0 and i==0:
					Depreciation = BasedDepreciation - ((BasedDepreciation / float(ActualPeriod)) * (Times-1))
				else:
					if i==0:
						Depreciation = BasedDepreciation / float(ActualPeriod)
					else:
						Depreciation = Depreciation / float(Times) if j == 0 else (EndBookValue if i==(kwargs['AssetLife']-1) and j==(Times-1) else Depreciation)
				
				# Depreciation = Depreciation / float(Times) if j == 0 else (EndBookValue if i==(kwargs['AssetLife']-1) and j==(Times-1) else Depreciation)
				AccDepreciation += Depreciation
				EndBookValue = float("{0:.9f}".format(kwargs['AssetPrice'])) - kwargs['SalvageValue'] - AccDepreciation
				EndDate = DepreciationSchedule.GetEndDate(str(StartDate), kwargs['Frequency'])
				DepreciationSchedule.SaveItem(	kwargs['Type'], 
												kwargs['Branch'], 
												kwargs['Status'], 
												kwargs['Curr'], 
												kwargs['Inputter'], 
												kwargs['Createdon'], 
												kwargs['Authorizer'], 
												kwargs['Authorizeon'], 
												kwargs['AssetID'], 
												InstallmentNo, 
												str(StartDate),
												str(EndDate),
												BeginBookValue,
												Depreciation,
												AccDepreciation,
												EndBookValue
												)
				StartDate = date(*[int(Val) for Val in EndDate.split('-')]) + timedelta(days=1)
				BeginBookValue = EndBookValue
				InstallmentNo += 1 
			Depreciation = (BeginBookValue * (float(1.5)/kwargs['AssetLife'])) if i != (kwargs['AssetLife']-2) else EndBookValue

		DepreciationSchedule.b = False


	@staticmethod
	def SumOfTheYearDigit(InstallmentNo=0, SkippedInstallment=0, **kwargs):
		
		dm = DepreciationSchedule()

		Times = kwargs['AssetLife'] if kwargs['Frequency'] == "Y" else (kwargs['AssetLife'] * 12 if kwargs['Frequency'] == "M" else ((kwargs['AssetLife'] * kwargs['NumberOfDay'])/7 if kwargs['Frequency'] == "W" else (kwargs['AssetLife'] * kwargs['NumberOfDay'] if kwargs['Frequency']=="D" else ( kwargs['AssetLife']*4 if  kwargs['Frequency']=="Q" else 0 ))))
		Times -= SkippedInstallment
		soy = dm.SumOfTheYear(Times)
		Depreciation = 0
		AccDepreciation = 0
		BeginBookValue = kwargs['AssetPrice'] - kwargs['SalvageValue']
		EndBookValue = 0
		StartDate = kwargs['StartDate']
		FirstPeriod = findFirstPeriod(StartDate, kwargs['Frequency'], kwargs['NumberOfDay'])
		
		for i in xrange(0,Times):
			BeginBookValue = float("{0:.9f}".format(BeginBookValue)) - Depreciation
			soy = dm.SumOfTheYear(Times-i)
			if soy == 1 :

				Depreciation = float("{0:.9f}".format(kwargs['AssetPrice'])) - kwargs['SalvageValue'] - AccDepreciation
				BeginBookValue = EndBookValue
				AccDepreciation = AccDepreciation + Depreciation
			else:
				Depreciation = (BeginBookValue * (float("{0:.9f}".format(Times-i))/soy))
				Depreciation = (Depreciation * FirstPeriod) if i==0 else Depreciation
				AccDepreciation = float("{0:.9f}".format(AccDepreciation)) + Depreciation

			EndBookValue = float("{0:.9f}".format(kwargs['AssetPrice'])) - kwargs['SalvageValue'] - AccDepreciation
			EndDate = DepreciationSchedule.GetEndDate(str(StartDate), kwargs['Frequency'])
			DepreciationSchedule.SaveItem(	kwargs['Type'], 
											kwargs['Branch'], 
											kwargs['Status'], 
											kwargs['Curr'], 
											kwargs['Inputter'], 
											kwargs['Createdon'], 
											kwargs['Authorizer'], 
											kwargs['Authorizeon'], 
											kwargs['AssetID'], 
											(InstallmentNo + i + 1), 
											str(StartDate),
											str(EndDate),
											BeginBookValue,
											Depreciation,
											AccDepreciation,
											EndBookValue
											)
			
			StartDate = date(*[int(Val) for Val in EndDate.split('-')]) + timedelta(days=1)

		DepreciationSchedule.b = False


	@staticmethod
	def RemainingValueOverRemainingLife(InstallmentNo=1, SkippedInstallment=0, **kwargs):
		
		Lst = []
		Times = 1 if kwargs['Frequency'] == "Y" else (12 if kwargs['Frequency'] == "M" else ( kwargs['NumberOfDay']/7 if kwargs['Frequency'] == "W" else ( kwargs['NumberOfDay'] if kwargs['Frequency']=="D" else ( 4 if kwargs['Frequency']=="Q" else 0 )))) 
		Times -= SkippedInstallment
		Depreciation = 0
		AccDepreciation = 0
		BeginBookValue = kwargs['AssetPrice'] - kwargs['SalvageValue']
		EndBookValue = 0
		FirstPeriod = round(kwargs['AssetLife']*0.2)
		
		StartDate = kwargs['StartDate']
		SubFirstPeriod = findFirstPeriod(StartDate, kwargs['Frequency'], kwargs['NumberOfDay'])
		ActualPeriod = SubFirstPeriod + Times - 1

		for i in xrange(0,kwargs['AssetLife']):
			if i <= FirstPeriod-1:
				BasedDepreciation = float("{0:.9f}".format(BeginBookValue * (float(2)/kwargs['AssetLife'])))
				for j in xrange(0,Times):
					EndDate = DepreciationSchedule.GetEndDate(str(StartDate),kwargs['Frequency'])
					if i ==0:
						if j==0:
							Depreciation = BasedDepreciation - ((BasedDepreciation / float(ActualPeriod)) * (Times - 1))
						elif j==1:
							Depreciation = ((BasedDepreciation-Depreciation) / float(Times-1))
					else :
						Depreciation = (BasedDepreciation / float(Times)) if j == 0 else Depreciation
					AccDepreciation = float("{0:.9f}".format(AccDepreciation + Depreciation))
					EndBookValue = float("{0:.9f}".format(kwargs['AssetPrice'] - kwargs['SalvageValue'] - AccDepreciation))
					
					DepreciationSchedule.SaveItem(	kwargs['Type'], 
													kwargs['Branch'], 
													kwargs['Status'], 
													kwargs['Curr'], 
													kwargs['Inputter'], 
													kwargs['Createdon'], 
													kwargs['Authorizer'], 
													kwargs['Authorizeon'], 
													kwargs['AssetID'], 
													InstallmentNo, 
													str(StartDate),
													str(EndDate),
													BeginBookValue,
													Depreciation,
													AccDepreciation,
													EndBookValue
													)
					StartDate = date(*[int(Val) for Val in EndDate.split('-')]) + timedelta(days=1)
					BeginBookValue = float("{0:.9f}".format(BeginBookValue - Depreciation)) #if j!=0 or i!=0 else AssetPrice
					InstallmentNo += 1
			else :
				Depreciation = (float(EndBookValue) / ((kwargs['AssetLife'] - FirstPeriod) * Times)) if i == (FirstPeriod) else Depreciation
				for j in xrange(0,Times):
					EndDate = DepreciationSchedule.GetEndDate(str(StartDate), kwargs['Frequency'])
					BeginBookValue = float("{0:.9f}".format(BeginBookValue - Depreciation)) if j!=0 else EndBookValue
					Depreciation = EndBookValue if j==(Times-1) and i==(kwargs['AssetLife']-1) else Depreciation

					AccDepreciation = float("{0:.9f}".format(AccDepreciation + Depreciation))
					EndBookValue = float("{0:.9f}".format(kwargs['AssetPrice'] - kwargs['SalvageValue'] - AccDepreciation))
					DepreciationSchedule.SaveItem(	kwargs['Type'], 
													kwargs['Branch'], 
													kwargs['Status'], 
													kwargs['Curr'], 
													kwargs['Inputter'], 
													kwargs['Createdon'], 
													kwargs['Authorizer'], 
													kwargs['Authorizeon'], 
													kwargs['AssetID'], 
													InstallmentNo, 
													str(StartDate),
													str(EndDate),
													BeginBookValue,
													Depreciation,
													AccDepreciation,
													EndBookValue
													)
					StartDate = date(*[int(Val) for Val in EndDate.split('-')]) + timedelta(days=1)
					InstallmentNo += 1

		DepreciationSchedule.b = False
		

	@staticmethod
	def UnitOfProductionBased(InstallmentNo=0, SkippedInstallment=0,**kwargs):
		DepreciationSchedule.HourOfOperationBased(
			InstallmentNo 					= InstallmentNo,
			SkippedInstallment 				= SkippedInstallment,
			Type 							= kwargs['Type'], 
			Method  						= kwargs['Method'], 
			Branch 							= kwargs['Branch'], 
			Status 							= kwargs['Status'], 
			Curr 							= kwargs['Curr'], 
			Inputter 						= kwargs['Inputter'], 
			Createdon 						= kwargs['Createdon'], 
			Authorizer 						= kwargs['Authorizer'], 
			Authorizeon 					= kwargs['Authorizeon'], 
			AssetID 						= kwargs['AssetID'], 
			StartDate						= kwargs['StartDate'], 
			AssetLife						= kwargs['AssetLife'], 
			AssetPrice						= kwargs['AssetPrice'], 
			Frequency						= kwargs['Frequency'], 
			NumberOfDay 					= kwargs['NumberOfDay'], 
			SalvageValue 					= kwargs['SalvageValue'], 
			HourOfOprOrUnitOfPro 			= kwargs['HourOfOprOrUnitOfPro'], 
			WholeLifeUnitOfProOrHourOfOpr 	= kwargs['WholeLifeUnitOfProOrHourOfOpr']
			)


	@staticmethod
	def HourOfOperationBased(InstallmentNo=0, SkippedInstallment=0, **kwargs):
			i = 0
			FullDepreciation = (float(kwargs['HourOfOprOrUnitOfPro'])/kwargs['WholeLifeUnitOfProOrHourOfOpr']) * (kwargs['AssetPrice'] - kwargs['SalvageValue'])
			StartDate = kwargs['StartDate']
			FirstPeriod = findFirstPeriod(StartDate, kwargs['Frequency'], kwargs['NumberOfDay'])
			
			FirstDepreciation = FullDepreciation * FirstPeriod
			AccDepreciation = FirstDepreciation
			Depreciation = FirstDepreciation
			BeginBookValue = kwargs['AssetPrice'] - kwargs['SalvageValue']
			EndBookValue = kwargs['AssetPrice'] - kwargs['SalvageValue'] - AccDepreciation
			NumberOfSkipped = 0
			EndDate = None
			
			b = False
			
			while EndBookValue > 0:
				NumberOfSkipped += 1
				if NumberOfSkipped <= SkippedInstallment:
					continue
				TempEndDate = date(*[int(Val) for Val in EndDate.split('-')]) + timedelta(days=1) if b == True else ''
				EndDate = DepreciationSchedule.GetEndDate(str(date(*[int(Val) for Val in EndDate.split('-')]) + timedelta(days=1)), kwargs['Frequency']) if b == True else DepreciationSchedule.GetEndDate(str(StartDate),kwargs['Frequency'])
				i += 1
				if b is True :
					StartDate = TempEndDate
					if EndBookValue < Depreciation :
						Depreciation = EndBookValue
						AccDepreciation = round(AccDepreciation + Depreciation)
						BeginBookValue = EndBookValue
					else:
						Depreciation = FullDepreciation
						BeginBookValue = float("{0:.2f}".format(BeginBookValue - Depreciation))
						AccDepreciation = float("{0:.2f}".format(AccDepreciation + Depreciation))
					EndBookValue = float("{0:.2f}".format(kwargs['AssetPrice'] - kwargs['SalvageValue'] - AccDepreciation))
				DepreciationSchedule.SaveItem(	kwargs['Type'], 
												kwargs['Branch'], 
												kwargs['Status'], 
												kwargs['Curr'], 
												kwargs['Inputter'], 
												kwargs['Createdon'], 
												kwargs['Authorizer'], 
												kwargs['Authorizeon'], 
												kwargs['AssetID'], 
												InstallmentNo + i, 
												str(StartDate),
												str(EndDate),
												BeginBookValue,
												Depreciation,
												AccDepreciation,
												EndBookValue
												)
				b = True

			DepreciationSchedule.b = False


registry = {'DepreciationSchedule':DepreciationSchedule}

# # Audit 		= mktaudit.getAuditrail()
# # Audit       = {'Inputter':'SYSTEM', 'Createdon':'Now', 'Authorizer':'', 'Authorizeon':'', 'Branch':'HO'}
# # Inputter	= Audit['Inputter']
# # Createdon 	= Audit['Createdon']
# # Authorizer 	= Audit['Authorizer']
# # Authorizeon	= Audit['Authorizeon']
# # Branch 		= Audit['Branch']
# StartDate	= '2019-01-01'
# AssetLife 	= 5
# AssetPrice	= 1992.328767120
# Frequency	= 'W'
# SalvageValue= 0
# NumberOfDay = 365
# # Mode 		= mktteller.getMode(DrAcc,CrAcc)

# DepreciationSchedule.SumOfTheYearDigit(1,Branch='', Status='', Curr='', Inputerr='', Authorizeon='', Authorizer='', Createdon='',AssetID='1', StartDate=StartDate,AssetLife=AssetLife,AssetPrice=AssetPrice,Frequency=Frequency,NumberOfDay=NumberOfDay,SalvageValue=SalvageValue)
# # Call function to commit add account by currency 
# # DepreciationSchedule.StraightLine()
# print "kkk"