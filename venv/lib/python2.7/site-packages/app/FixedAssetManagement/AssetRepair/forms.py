from app.mktcore.wtfimports 						import *
from .models 										import *
from ..FixedAsset.models 							import MKT_ASSET_INAU, MKT_ASSET, MKT_ASSET_CONSUMPTION, MKT_ASSET_HIST
from ..AssetAssigning.models 						import MKT_ASSET_ASSIGNING, MKT_ASSET_ASSIGNING_INAU
from ..PaymentMethod.models							import MKT_ASSET_PAYMENT_ME
from app.Setting.models 							import MKT_APP_SETTING
from app.Vendor.Vendor.models 						import *
from ..AssetSetup.models 							import *
from app.Currency.models 							import *
import app.tools.mktaudit 								as mktaudit
from app.tools.mktaccounting 						import postAccounting,getConsolKey
from app.tools.mktdate 								import getDateTimeNow
import app.tools.mktteller 								as mktteller
import app.tools.mktaccounting 							as mktaccounting
import app.tools.mktdate 								as mktdate
from decimal 										import *
import app.tools.mktholiday 							as mktHoliday
import app.tools.loantools.nonworkingday 				as mktDay
import app.tools.mkttool 								as mkttool
from app.Account.models 							import *
import app.tools.mktfundtransfer						as mktfundtransfer


def loadCurrentDate():
	return mktdate.getBankDate()

def loadVendor():
	return MKT_VENDOR.query.all()

def loadAsset():
	# return MKT_ASSET.query.join(MKT_ASSET_ASSIGNING,MKT_ASSET.ID==MKT_ASSET_ASSIGNING.AssetID).all()
	AssetList = []
	AssetLIVE = MKT_ASSET.query.join(MKT_ASSET_ASSIGNING,MKT_ASSET.ID==MKT_ASSET_ASSIGNING.AssetID)
	AssetHIST = MKT_ASSET_HIST.query.join(MKT_ASSET_ASSIGNING,MKT_ASSET_HIST.SerialNumber==MKT_ASSET_ASSIGNING.SerialNumber)
	Asset = AssetLIVE.union(AssetHIST).all()
	for row in Asset:
		PurifiedAsset = MKT_ASSET()
		PurifiedAsset.ID = str(row.ID).split('@')[0]
		PurifiedAsset.Description = str(row.Description)
		PurifiedAsset.SerialNumber = str(row.SerialNumber)
		AssetList.append(PurifiedAsset)
	return AssetList


def loadPaymentMethod():
	return MKT_ASSET_PAYMENT_ME.query.all()

def loadCurrency(ID=''):
	if ID :
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:		
		return MKT_CURRENCY.query.all()


class FRM_ASSET_REPAIR(exform):
	SerialNumber = RemoteTextField(requiredlabel("Serial Number","*"),
								validators=[validators.Required()]
								)
	AssetID = QuerySelectField(	requiredlabel("Asset","*"),
								query_factory=loadAsset,
								blank_text=u'--None--',
								get_label=lambda a: a.ID + " - " + a.Description,
								validators=[validators.Required()],
								allow_blank=True
								)
	VendorID = QuerySelectField("Vendor",
								query_factory=loadVendor,
								blank_text=u'Other',
								get_label=u'VendorName',
								allow_blank=True
								)
	TransactionDate = DateField("Repair or Maintenance Date",
								validators=[validators.Required()],
								default=loadCurrentDate
								)
	PaymentMethod = QuerySelectField(requiredlabel("Payment Method","*"),
									query_factory=loadPaymentMethod,
									blank_text=u'--Choose Payment Method--',
									get_label=lambda a: a.CategoryID + " - " + a.Description,
									validators=[validators.Required()],
									allow_blank=True
									)
	CrAccount 	= 	RemoteTextField("Account")
	Currency  = QuerySelectField(requiredlabel("Currency","*"),
								query_factory=loadCurrency, 
								blank_text=u'--Choose Currency--',
								get_label=u'ID', 
								default = lambda:loadCurrency('USD'),
								allow_blank=True,
								validators=[validators.Required()]
								)
	Amount = TextField(requiredlabel("Amount","*"),
									validators=[validators.Required()]
									)
	Note = TextAreaField(requiredlabel('Note',"*"),
						validators=[validators.Length(max=100), validators.Required()]
						)


	def validate_PaymentMethod(form, field):
		Category = str(field.data.CategoryID)
		Currency = form.Currency.data.ID
		Audit 		= mktaudit.getAuditrail()
		Inputter	= Audit['Inputter']
		Branch 		= Audit['Branch']
		if mktteller.isCashCateogry(Category):
			if Currency:
				AccountObj 	= mktteller.getCashAccountByCategory(Category,Currency,Inputter,Branch)				
				if not AccountObj[0]:
					raise ValidationError(AccountObj[1])


	def validate_Amount(form, field):
		Amount = field.data
		if mkttool.isFloat(Amount):
			if Amount <= 0:
				raise ValidationError("Amount must be bigger than zero")


	def validate_TransactionDate(form, field):
		try:
			TransactionDate 	= request.form['TransactionDate']			
			try:
				CheckFormatDate = mktdate.isDateISO(TransactionDate)
				if not CheckFormatDate:
					raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

			except Exception, e:
				print e 
				raise ValidationError("This field must be in date format.")

			Check = mktfundtransfer.checkPreMonthDateTransaction(TransactionDate)
			if Check:
				raise ValidationError(Check)
	
			# systemDate 	= 	mktdate.getBankDate()
			# StrSysteDate=	str(systemDate).split("-")
			# StrTransactionDate=	str(TransactionDate).split("-")

			# SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
			# ValueMonth 	=	"%s%s" %(StrTransactionDate[0], StrTransactionDate[1])

			# if int(ValueMonth) < int(SysMonth):
			# 	raise ValidationError("Value date must be different previous month.")
		except:
			raise


	def validate_CrAccount(form, field):
		try:
			CrAccount 		= form.CrAccount.data
			PaymentMethod 	= request.form['PaymentMethod']  if 'PaymentMethod' in request.form else ''
			PaymentMethod 	= MKT_ASSET_PAYMENT_ME.query.get(PaymentMethod)
			Currency 		= request.form['Currency']  if 'Currency' in request.form else ''			
			Amount 			= form.Amount.data
			TransactionDate	= str(form.TransactionDate.data)

			if mktteller.isAmountInDecimal(Amount):
				Amount 		= Decimal(Amount)

			if CrAccount:
				AccObj = MKT_ACCOUNT.query.get(CrAccount)
				if AccObj :
					AccCategory = AccObj.AccCategory
					if AccCategory != str(PaymentMethod.CategoryID):
						raise ValidationError("Credit category not belong to account.")

					CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, Currency, Decimal(Amount), "Cr")
					if CheckBalance:
						raise ValidationError(CheckBalance)
		except:
			raise

	def validate_Currency(form,field):
		AccountID = form.CrAccount.data
		if AccountID == '':
			return
		Currency = request.form['Currency']
		Account = MKT_ACCOUNT.query.get(AccountID)
		
		if str(Account.Currency) != Currency:
			raise ValidationError('Account currency and currency must be the same! %s != %s'%(str(Account.Currency),Currency))

	@staticmethod
	def hotField():
		hotfield =[]
		fielddisplay = "$('#AssetID').select2('data',{'id':data.AssetID,'text':data.AssetDes});"
		fielddisplay += "$('#OldBranch').select2('data',{'id':data.OldBranchID,'text':data.OldBranchDes});"
		
		varname		="SerialNumber:$('#SerialNumber').val()"

		fun			=["SerialNumber", varname ,fielddisplay, "/Morakot/Asset/GetAssetAndBranch", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#PaymentMethod').select2('data',{'id':data.PaymentMethodID, 'text':data.PaymentMethodDesc});"
		fielddisplay += "$('#Currency').select2('data',{'id':data.CurrencyID, 'text':data.CurrencyDesc});"
		varname = "CrAccount:$('#CrAccount').val()"
		fun = ["CrAccount", varname, fielddisplay, "/Morakot/Asset/AccountCategory", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#CrAccount').select2('data',{'id':data.AccountID, 'text':data.AccountDesc});"
		varname = "PaymentMethod:$('#PaymentMethod').val(), Currency:$('#Currency').val()"
		fun = ["PaymentMethod", varname, fielddisplay, "/Morakot/Asset/PaymentMethod", "change"]
		hotfield.append(fun)

		return hotfield
		

	@staticmethod
	def setDisable():
		Fields = []
		Fields = [						
					('AssetID')
					]
		return Fields

	@staticmethod
	def moneyField():
		return [
				["Amount","Currency"]
			   ]

	@staticmethod
	def setWidth():
		control_list= [
					   ('TransactionDate', len3),
					   ]
					   
		return control_list


	@staticmethod
	def listField():
		Fields = [
					"ID",
					"AssetID",
					"SerialNumber",
					"VendorID",
					"CrAccount",
					"PaymentMethod",
					"TransactionDate",
					"Currency",
					"Amount",
					"Note"
				]
		Audit = mktaudit.getAuditrail()
		Branch = Audit['Branch']

		return Fields, ["Branch*EQ*{0}".format(Branch)]


	@staticmethod
	def reverseRec():
		return False, "You cannot reverse this record."


	@staticmethod
	def formReadOnly():
		return "AUTH"


	@staticmethod
	def beforeInsert():
		AuthLevel = g.getNAuthorize
		try:
			if AuthLevel == 0:
				postAccounting()
				db.session.commit()
			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def beforeAuthorize():
		try:
			postAccounting()
			db.session.commit()
			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()
			return False


def postAccounting():
		
		Audit 			= mktaudit.getAuditrail()
		Inputter		= Audit['Inputter']
		Createdon 		= Audit['Createdon']
		Authorizer 		= Audit['Authorizer']
		Authorizeon		= Audit['Authorizeon']
		Branch 			= Audit['Branch']
		AuthLevel 		= g.getNAuthorize
		# TranDate		= request.form['TransactionDate']
		# Amount			= request.form['Amount']
		# AssetID 		= request.form['AssetID']
		# Currency 		= request.form['Currency']
		if AuthLevel ==1 :
			AssetRepairInau = MKT_ASSET_REPAIR_INAU.query.get(g.formID)
			TranDate 		= str(AssetRepairInau.TransactionDate)
			Amount			= str(AssetRepairInau.Amount)
			AssetID 		= str(AssetRepairInau.AssetID)
			Currency 		= str(AssetRepairInau.Currency)
			ID 				= str(AssetRepairInau.PaymentMethod)
			row 			= MKT_ASSET_PAYMENT_ME.query.get(ID)
			PaymentMethod 	= str(row.CategoryID)
			Account 		= str(AssetRepairInau.CrAccount)
			Note 			= str(AssetRepairInau.Note)

		elif AuthLevel ==0:
			TranDate 		= request.form['TransactionDate']
			Amount			= request.form['Amount']
			AssetID 		= request.form['AssetID']
			Currency 		= request.form['Currency']
			ID 				= request.form['PaymentMethod']
			row 			= MKT_ASSET_PAYMENT_ME.query.get(ID)
			PaymentMethod 	= row.CategoryID
			Account 		= request.form['CrAccount']
			Note 			= request.form['Note']
		
		Asset = MKT_ASSET.query.get(AssetID)
		RMCategory = Asset
		AppSetting = MKT_APP_SETTING.query.get("FAM_REPAIR")
		Transaction = str(AppSetting.Value) if AppSetting else ""
		
		CrMode = "" if mktteller.isCashCateogry(PaymentMethod) else "Direct"

		for i in range(0, 2):
			if i == 0:
				DrCr 		= 	"Dr"
				Mode 		= 	"Direct"
				Category 	= 	RMCategory.RepairCategory
			else:
				DrCr 		= 	"Cr"
				Mode 		= 	CrMode
				Category 	= 	PaymentMethod
			
			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
			DateTimeNow = mktdate.getDateTimeNow()
						
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				Inputter,				# Inputter
				Createdon, 				# Createdon
				Authorizer,				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amount), 		# Amount
				"AM",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				AssetID, 				# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode 					# Mode check to insert Journal for category
			)
			print "Start booking #%s -%s"%(i+1,DrCr)
