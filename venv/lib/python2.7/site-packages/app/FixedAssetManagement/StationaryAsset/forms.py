from app.mktcore.wtfimports 										import *
from app.FixedAssetManagement.FixedAsset.models 					import *
from app.Vendor.Vendor.models										import *
from app.Transaction.models 										import *
from app.FixedAssetManagement.AssetGroup.models 					import *
from app.FixedAssetManagement.AssetType.models 						import *
from app.FixedAssetManagement.DepreciationRegister.models 			import *
from app.Currency.models 											import *
from app.FixedAssetManagement.AcquisitionType.models 				import MKT_ASSET_ACQUISITION
from app.FixedAssetManagement.AssetSetup.models 					import MKT_ASSET_SETUP
from datetime 														import date, timedelta
from app.Category.models 											import MKT_CATEGORY
from flask 															import flash
from decimal 														import *
from app.tools.mktaccounting 										import postAccounting,getConsolKey
from app.tools.mktdate 												import getDateTimeNow
from app 															import db
from decimal 														import *
from app.FixedAssetManagement.PaymentMethod.models					import MKT_ASSET_PAYMENT_ME

import app.tools.mktteller 												as mktteller
import app.tools.mktaccounting 											as mktaccounting
import app.tools.mktdate 												as mktdate
import app.tools.mktholiday 											as mktHoliday
import app.tools.loantools.nonworkingday 								as mktDay
import app.tools.mkttool 												as mkttool
import app.tools.mktaudit 												as mktaudit
import app.tools.mktmoney 												as mktmoney
from app.mktcore.session 											import *
from app.Account.models 											import *
import app.tools.mktfundtransfer										as mktfundtransfer
import app.mktcore.globalfunction 										as globalfunction


DateTime = getDateTimeNow()

def loadCurrentDate():
	return mktdate.getBankDate()

def loadCurrency(ID=''):
	if ID :
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:		
		return MKT_CURRENCY.query.all()

def loadVendor():
	return MKT_VENDOR.query.all()

def loadAssetGroup():
	return MKT_ASSET_GROUP.query.filter_by(ID='STA')

def loadAssetType():
	return MKT_ASSET_TYPE.query.filter(MKT_ASSET_TYPE.IsStationary=='Y').all()

def loadTransaction():
	return MKT_TRANSACTION.query.all()

def loadDepreciationMethod():
	return MKT_ASSET_DEPRE_REG.query.all()

def loadAcquisitionType():
	return MKT_ASSET_ACQUISITION.query.all()

def loadAssetCategory():	
	return MKT_CATEGORY.query.order_by(MKT_CATEGORY.ID).all()			

def loadDefault():
	return "Other"

def loadPaymentMethod():
	return MKT_ASSET_PAYMENT_ME.query.all()


@app.route("/Morakot/Asset/GetAcquisitionAndDepreciation", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def getAcquisitionAndDepreciation():

	AssetGroup = request.args.get("AssetGroup")
	AssetType = request.args.get("AssetType")
	AcquisitionType = None	
	AssetCategory = None
	dic = False
	row = None
	if AssetGroup == "STA":		
		if AssetType != '__None':
			AcquisitionType = MKT_ASSET_ACQUISITION.query.join(MKT_ASSET_SETUP, MKT_ASSET_ACQUISITION.ID==MKT_ASSET_SETUP.AcquisitionType).filter_by(AssetGroup=AssetGroup,AssetType=AssetType).first()
			AssetCategory = MKT_CATEGORY.query.join(MKT_ASSET_SETUP, MKT_CATEGORY.ID==MKT_ASSET_SETUP.AssetCategory).filter_by(AssetGroup=AssetGroup,AssetType=AssetType).first()

		return jsonify(
						ID=str(AcquisitionType.ID) if AcquisitionType is not None else '', 
						AcquisitionTypeDes=str(AcquisitionType.Description) if AcquisitionType is not None else '', 						
						AssetCategoryID=str(AssetCategory.ID) if AssetCategory is not None else '',
						AssetCategoryDes=str(AssetCategory.Description) if AssetCategory is not None else '',						
						)

	if (AssetGroup != '__None') and (AssetType != '__None'):
		AcquisitionType = MKT_ASSET_ACQUISITION.query.join(MKT_ASSET_SETUP, MKT_ASSET_ACQUISITION.ID==MKT_ASSET_SETUP.AcquisitionType).filter_by(AssetGroup=AssetGroup,AssetType=AssetType).first()
		Setting = MKT_ASSET_SETUP.query.filter_by(AssetGroup=AssetGroup,AssetType=AssetType).first()
		AssetCategory = MKT_CATEGORY.query.join(MKT_ASSET_SETUP, MKT_CATEGORY.ID==MKT_ASSET_SETUP.AssetCategory).filter_by(AssetGroup=AssetGroup,AssetType=AssetType).first()

		row = MKT_ASSET_SETUP.query.filter_by(AssetGroup=AssetGroup,AssetType=AssetType,AssetLife=AssetLife).first()
		DepreciationMethod = MKT_ASSET_DEPRE_REG.query.get(str(row.DepreciationMethod))
		DepreciationMethodDesc = str(DepreciationMethod.Function) if row else ''
		DepreciationMethodID = str(DepreciationMethod.ID) if row else ''

		DepDayBasisID = str(row.DepDayBasis)
		DepDayBasisDesc = '365/365' if DepDayBasisID == '1' else '365/360'

	return jsonify(
					ID=AcquisitionType.ID if AcquisitionType is not None else '',
					AcquisitionTypeDes=AcquisitionType.Description  if AcquisitionType is not None else '',
					AssetCategoryID=str(AssetCategory.ID) if AssetCategory is not None else '',
					AssetCategoryDes=str(AssetCategory.Description) if AssetCategory is not None else '',					
				   )


@app.route("/Morakot/Asset/CalculateAmount",methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def calculateAmount():

	# if not request.args.get('Quantity').isdigit() or not request.args.get('Price').isdigit() or not request.args.get('Discount').isdigit():
	# 	return jsonify(Amount=0)
	Currency 	= str(request.args.get('Currency'))
	Qty 		= request.args.get('Quantity') if request.args.get('Quantity') != "" else 0
	# Price 		= ''.join(request.args.get('Price').split(',')) if request.args.get('Price') != "" else 0
	Price 		= globalfunction.wordAmount(request.args.get('Price')) if request.args.get('Price') != "" else 0
	Discount 	= float(request.args.get('Discount')) if request.args.get('Discount') != "" else 0
	
	CurrencyObj = MKT_CURRENCY.query.get(Currency)
	amount = int(Qty) * float(Price)
	if amount < 0:
		return jsonify(Amount=0)
	if Discount>100 or Discount<0:
		return jsonify(Amount=0)

	dis 	= amount * Discount/100
	amount 	= amount - dis
	if CurrencyObj:
		amount = mktmoney.toMoney(amount, CurrencyObj, 0)
		Price = mktmoney.toMoney(Price, CurrencyObj, 0)
	
	return jsonify(	Amount 		= amount, 					
					Qty 		= int(Qty),
					Discount 	= Discount,
					Price 		= Price
					)


@app.route("/Morakot/Asset/GetRemaining",methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def getRemaining():
	Quantity = request.args.get('Quantity')
	return jsonify(Remaining=Quantity)


class FRM_STATIONARY_ASSET(exform):
	RecordType						=	TextField('RecordType', default='2')
	Description  					=	TextAreaField(	requiredlabel('Description','*'), 
														validators=[validators.Required(), 
														validators.Length(max=30)]
														)
	AssetGroup  					=	QuerySelectField(requiredlabel("Asset Group","*"),
														query_factory=loadAssetGroup,
														# blank_text=u'--Choose Asset Group--',
														get_label=u'Description',
														allow_blank=False,
														validators=[validators.Required()]
														)
	AssetType   					=	QuerySelectField(requiredlabel("Asset Type","*"),
														query_factory=loadAssetType,
														blank_text=u'--Choose Asset Type--',
														get_label=u'Description',
														allow_blank=True,
														validators=[validators.Required()]
														)
	AssetCategory 					=	QuerySelectField(requiredlabel("Asset Category","*"),
														query_factory=loadAssetCategory,
														get_label=lambda c: c.ID + "-" + c.Description,
														blank_text=u'--None--',
														allow_blank=True,								
														validators=[validators.Required()],				
														)
	AcquisitionType  				=	QuerySelectField(requiredlabel("Acquisition Type","*"),
														query_factory=loadAcquisitionType,
														blank_text=u'--Choose Acquisition Type--',
														get_label=u'Description',
														allow_blank=True,
														validators=[validators.Required()]
														)
	PaymentMethod					= 	QuerySelectField(requiredlabel("Payment Method","*"),
														query_factory=loadPaymentMethod,
														get_label=lambda a: a.CategoryID + " - " + a.Description,
														blank_text=u'--Choose Payment Method--',
														allow_blank=True,								
														validators=[validators.Required()],
														)
	CrAccount 						= 	RemoteTextField("Account")
	

	Vendor  						=	QuerySelectField('Vendor', 
														query_factory=loadVendor, 
														blank_text=u'Other',
														get_label=u'VendorName', 
														allow_blank=True, 								
														# validators=[validators.Required()]
														)
	Brand   						=	TextField(	'Brand', 
													validators=[
																validators.Optional(), 
																validators.Length(max=20)
																]
													)
	Model   						=	TextField(	'Model', 
													validators=[
																validators.Optional(), 
																validators.Length(max=20)
																]
													)
	ValueDate   					=	DateField(	requiredlabel("Value Date","*"), 
													validators=[validators.Required()], 
													default=loadCurrentDate
													)
	Reference   					=	TextField("Reference")
	Currency  						=	QuerySelectField(requiredlabel("Currency","*"),
														query_factory=loadCurrency, 
														blank_text=u'--Choose Currency--',								
														get_label=u'ID', 
														default = lambda:loadCurrency('USD'),
														allow_blank=True,
														# description="1-Consumption"
														)
	Total   						=	TextField(	requiredlabel("Total Amount","*"), 
													validators=[validators.Required()]
													)

	#------------Consumption-----------
	
	PurchasePriceUnits  			=	TextField(	requiredlabel("Purchase Price / Units","*"), 
													validators=[validators.Required()], 
													description="1-Consumption"
													)
	Quantity  						=	TextField(	requiredlabel("Quantity","*"), 
													validators=[validators.Required()], 
													default=1,
													description="1-Consumption"
													)
	Remaining   					=	TextField(	"Remaining",													
													default=1,
													description="1-Consumption"
													)
	Discount  						=	TextField(	requiredlabel("Discount (%)","*"), 
													validators=[validators.Required()], 
													default=0,
													description="1-Consumption"
													)
	Amount  						=	TextField(	requiredlabel("Amount","*"), 
													validators=[validators.Required()], 
													description="1-Consumption"
													)
	
	Remark 							= TextAreaField('Remark', 
													validators=[validators.Length(max=100)],
													description="1-Consumption"
													)

	def validate_PaymentMethod(form, field):
		Category 	= str(field.data.CategoryID)
		Currency 	= form.Currency.data.ID
		Audit 		= mktaudit.getAuditrail()
		Inputter	= Audit['Inputter']
		Branch 		= Audit['Branch']
		if mktteller.isCashCateogry(Category):
			if Currency:
				AccountObj 	= mktteller.getCashAccountByCategory(Category,Currency,Inputter,Branch)				
				if not AccountObj[0]:
					raise ValidationError(AccountObj[1])


	def validate_Amount(form, field):

		Amount = field.data		
		if mkttool.isFloat(Amount):
			if float(Amount) == 0:
				raise ValidationError("Amount must be bigger than zero.")
			

	def validate_Total(form, field):
		Amount = form.Amount.data
		Discount = float(form.Discount.data)
		Price = float(form.PurchasePriceUnits.data)
		Quantity = int(form.Quantity.data)
		Total = float(form.Total.data)

		GetAmount = Quantity * Price * (1- Discount)
		Fields = [f.name for f in form if '_' in f.name]
		ListOfAmount = [f for f in Fields if 'Amount' in f]
		TotalAmount = sum([float(eval("form.{0}.data".format(str(amount)))) for amount in ListOfAmount]) + float(Amount)
		
		if Total != float(TotalAmount):			
			raise ValidationError("Invalid Amount.")


	def validate_ValueDate(form, field):
		try:
			ValueDate 	= request.form['ValueDate']
			try:
				CheckFormatDate = mktdate.isDateISO(ValueDate)
				if not CheckFormatDate:
					raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

			except Exception, e:
				print e 
				raise ValidationError("This field must be in date format.")	

			Check = mktfundtransfer.checkPreMonthDateTransaction(ValueDate)
			if Check:
				raise ValidationError(Check)

		except:
			raise

	def validate_CrAccount(form, field):
		try:
			CrAccount 		= form.CrAccount.data
			PaymentMethod 	= request.form['PaymentMethod']  if 'PaymentMethod' in request.form else ''
			PaymentMethod 	= MKT_ASSET_PAYMENT_ME.query.get(PaymentMethod)
			Currency 		= request.form['Currency']  if 'Currency' in request.form else ''			
			Amount 			= form.Total.data
			TransactionDate	= str(form.ValueDate.data)

			if mktteller.isAmountInDecimal(Amount):
				Amount 		= Decimal(Amount)

			if CrAccount:
				AccObj = MKT_ACCOUNT.query.get(CrAccount)
				if AccObj :
					AccCategory = AccObj.AccCategory					
					if AccCategory != str(PaymentMethod.CategoryID):
						raise ValidationError("Credit category not belong to account.")

					CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, Currency, Decimal(Amount), "Cr")
					if CheckBalance:
						raise ValidationError(CheckBalance)
		except:
			raise


	def validate_Currency(form,field):
		AccountID = form.CrAccount.data
		if AccountID == '':
			return
		Currency = request.form['Currency']
		Account = MKT_ACCOUNT.query.get(AccountID)
		
		if str(Account.Currency) != Currency:
			raise ValidationError('Account currency and currency must be the same! %s != %s'%(str(Account.Currency),Currency))


	@staticmethod
	def moneyField():
		return [
				["PurchasePriceUnits","Currency"],
				["Amount","Currency","Total"],
				["SalvageValue","Currency"]
				]


	@staticmethod
	def setDisable():
		Fields = []
		Fields = [	
					('Amount'),
					('PercentageDep'),
					('DepreciationMethod'),
					('NextRunDate'),
					('LastRunDate'),
					('MaturityDate'),
					('Total'),
					('Remaining'), 
					('AssetGroup')
					]
		return Fields


	@staticmethod
	def setVisible():
		Fields = [	
					# ('Remaining'),
					('RecordType'),
				 ]
		return Fields


	@staticmethod
	def hotField():
		hotfield=[]	

		fielddisplay = "$('#Amount').val(data.Amount);"
		fielddisplay += "$('#PurchasePriceUnits').val(data.Price);"
		fielddisplay += "$('#Discount').val(data.Discount);"
		fielddisplay += "$('#Quantity').val(data.Qty);"
		fielddisplay += "$('#Amount').trigger('blur')"
		varname = "Quantity:$('#Quantity').val(), Price:$('#PurchasePriceUnits').val(), Discount:$('#Discount').val(), Currency:$('#Currency').val()"
		fun = ["Discount", varname, fielddisplay, "/Morakot/Asset/CalculateAmount", "blur"]
		hotfield.append(fun)

		fun = ["Quantity", varname, fielddisplay, "/Morakot/Asset/CalculateAmount", "blur", "Amount"]
		hotfield.append(fun)

		fun = ["PurchasePriceUnits", varname, fielddisplay, "/Morakot/Asset/CalculateAmount", "blur","Amount"]
		hotfield.append(fun)

		fielddisplay = "$('input[name=AcquisitionType]').val(data.AcquisitionType);$('input[name=DepreciationMethod]').val(data.DepreciationMethod)"
		varname = "AssetGroup:$('#AssetGroup').val(), AssetType:$('#AssetType').val()"
		fun = ["AssetType", varname, fielddisplay, "/Morakot/Asset/GetAcquisitionAndDepreciation", "click"]
		hotfield.append(fun)

		fielddisplay = "$('#AcquisitionType').select2('data',{'id':data.ID,'text':data.AcquisitionTypeDes});"
		fielddisplay += "$('#AssetLife').attr('readonly',data.BoolAssetLife);"
		fielddisplay += "$('input[name=DepreciationMethod]').val(data.DepreciationMethod);"
		fielddisplay += "$('#PercentageDep').val(data.PercentageDep);"
		fielddisplay += "$('#AssetCategory').select2('data',{'id':data.AssetCategoryID,'text':data.AssetCategoryDes});"
		fielddisplay += "$('#UnitOfProOrHourOfOpr').attr('readonly',data.Bool);"
		fielddisplay += "$('#WholeLifeUnitOfProOrHourOfOpr').attr('readonly',data.Bool);"

		varname = "AssetGroup:$('#AssetGroup').val(), AssetType:$('#AssetType').val(), AssetLife:$('#AssetLife').val()"
		fun = ["AssetType", varname, fielddisplay, "/Morakot/Asset/GetAcquisitionAndDepreciation", "click"]
		hotfield.append(fun)

		fielddisplay = "$('#Remaining').val(data.Remaining)"
		varname = "Quantity:$('#Quantity').val()"
		fun = ["Quantity", varname, fielddisplay, "/Morakot/Asset/GetRemaining", "blur"]
		hotfield.append(fun)

		fielddisplay = "$('#CrAccount').select2('data',{'id':data.AccountID, 'text':data.AccountDesc});"
		varname = "PaymentMethod:$('#PaymentMethod').val(), Currency:$('#Currency').val()"
		fun = ["PaymentMethod", varname, fielddisplay, "/Morakot/Asset/PaymentMethod", "change"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def listField():
		Fields = [
					"ID",
					"Description",
					"ValueDate",
					"AssetType",
					"Quantity",
					"AcquisitionType",
					"Currency",
					"Total"
				 ]
		Audit = mktaudit.getAuditrail()
		Branch = Audit['Branch']
		return Fields, ["RecordType*EQ*2","Branch*EQ*{0}".format(Branch)]


	@staticmethod
	def isMultiValue():
		controls_list=["1-Consumption"]
		return controls_list


	@staticmethod
	def formReadOnly():
		return "AUTH"



	@staticmethod
	def beforeInsert():
		AuthLevel = g.getNAuthorize
		try:
			if AuthLevel ==0 :
				postAccounting()
				db.session.commit()
			return True
		except Exception, e:
			print e			
			db.session.rollback()
			db.session.close()
			return False
			

	@staticmethod
	def beforeAuthorize():
		AuthLevel 		= g.getNAuthorize
		ID 				= g.formID		
		Asset 			= MKT_ASSET_INAU.query.get(ID)
		ID 				= str(Asset.PaymentMethod)
		
		try:
			if str(Asset.Status) == "RNAU":
				row 			= MKT_ASSET_PAYMENT_ME.query.get(ID)
				PaymentMethod 	= str(row.CategoryID)
				AssetCategory 	= str(Asset.AssetCategory)
				AssetPrice		= Asset.Total
				TranDate		= Asset.ValueDate
				Currency 		= Asset.Currency
				AssetType		= MKT_ASSET_TYPE.query.get(Asset.AssetType)
				AssetGroup 		= MKT_ASSET_GROUP.query.get(Asset.AssetGroup)
				Note 			= str(AssetType.Description) + '-' + str(AssetGroup.Description)
				Account 		= str(Asset.CrAccount)
				AcquisitionType = MKT_ASSET_ACQUISITION.query.join(MKT_ASSET, MKT_ASSET_ACQUISITION.ID==MKT_ASSET.AcquisitionType).first()
				Transaction 	= str(AcquisitionType.Transaction)
				postAccounting(Reverse=True,Debit=PaymentMethod,Credit=AssetCategory,Account=Account,AssetID=Asset.ID,AssetPrice=AssetPrice,TranDate=TranDate,Currency=Currency,Note=Note,Transaction=Transaction)				
				db.session.commit()
			else:
				postAccounting()
				db.session.commit()
			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()
			flash(msg_error + str(e))
			return False


	@staticmethod
	def reverseRec():
		AuthLevel 		= g.getNAuthorize
		SystemDate 		= loadCurrentDate()
		Asset 			= MKT_ASSET.query.get(g.formID)
		ValueDate 		= str(Asset.ValueDate)
		ID 				= str(Asset.PaymentMethod)
		row 			= MKT_ASSET_PAYMENT_ME.query.get(ID)
		PaymentMethod 	= str(row.CategoryID)
		AssetCategory 	= str(Asset.AssetCategory)
		AssetPrice		= Asset.Total
		TranDate		= Asset.ValueDate
		Currency 		= Asset.Currency
		AssetType		= MKT_ASSET_TYPE.query.get(Asset.AssetType)
		AssetGroup 		= MKT_ASSET_GROUP.query.get(Asset.AssetGroup)
		Note 			= str(AssetType.Description) + '-' + str(AssetGroup.Description)
		Account 		= str(Asset.CrAccount)
		AcquisitionType = MKT_ASSET_ACQUISITION.query.join(MKT_ASSET, MKT_ASSET_ACQUISITION.ID==MKT_ASSET.AcquisitionType).first()
		Transaction 	= str(AcquisitionType.Transaction)

		if ValueDate == str(SystemDate):
			if AuthLevel == 0:
				
				postAccounting(Reverse=True,Debit=PaymentMethod,Credit=AssetCategory,Account=Account,AssetID=Asset.ID,AssetPrice=AssetPrice,TranDate=TranDate,Currency=Currency,Note=Note,Transaction=Transaction)
				
				mktaudit.moveAUTHtoHIST(MKT_ASSET,MKT_ASSET_HIST,g.formID)
				Asset = MKT_ASSET.query.get(g.formID)
				db.session.delete(Asset)
				db.session.commit()
			return True,""

		return False,""


def postAccounting(Reverse=False,Debit='',Credit='',Account='',AssetID='',AssetPrice=0,TranDate='',Currency='',Note='',Transaction=''):
		Audit 			= mktaudit.getAuditrail()
		Inputter		= Audit['Inputter']
		Createdon 		= Audit['Createdon']
		Authorizer 		= Audit['Authorizer']
		Authorizeon		= Audit['Authorizeon']
		Branch 			= Audit['Branch']
		AuthLevel 		= g.getNAuthorize
		
		if not Reverse :
			if AuthLevel == 1:
				AssetInau 		= MKT_ASSET_INAU.query.get(g.formID)
				PaymentMethod 	= MKT_ASSET_PAYMENT_ME.query.get(str(AssetInau.PaymentMethod))
				Credit 			= str(PaymentMethod.CategoryID)
				TranDate 		= str(AssetInau.ValueDate)
				AssetPrice 		= str(AssetInau.Total)
				AssetID 		= str(AssetInau.ID)
				Debit 			= str(AssetInau.AssetCategory)
				Currency 		= str(AssetInau.Currency)
				AssetGroupID 	= str(AssetInau.AssetGroup)
				AssetGroup 		= MKT_ASSET_GROUP.query.get(AssetGroupID)
				AssetTypeID 	= str(AssetInau.AssetType)
				AssetType 		= MKT_ASSET_TYPE.query.get(AssetTypeID)
				Note 			= str(AssetGroup.Description) + "-" + str(AssetType.Description)
				Account 		= str(AssetInau.CrAccount)
				AcquisitionType = MKT_ASSET_ACQUISITION.query.join(MKT_ASSET_INAU, MKT_ASSET_ACQUISITION.ID==MKT_ASSET_INAU.AcquisitionType).first()
				Transaction 	= str(AcquisitionType.Transaction)
			elif AuthLevel ==0 :
				PaymentMethod 		= MKT_ASSET_PAYMENT_ME.query.get(request.form['PaymentMethod'])
				Credit 				= str(PaymentMethod.CategoryID)
				TranDate 			= request.form['ValueDate']
				AssetPrice 			= request.form['Total']
				AssetID 			= request.form['ID']
				Debit 				= request.form['AssetCategory']
				Currency 			= request.form['Currency']
				AssetGroupID 		= request.form['AssetGroup']
				AssetGroup 			= MKT_ASSET_GROUP.query.get(AssetGroupID)
				AssetTypeID 		= request.form['AssetType']
				AssetType 			= MKT_ASSET_TYPE.query.get(AssetTypeID)
				Note 				= str(AssetGroup.Description) + "-" + str(AssetType.Description)
				Account 			= request.form['CrAccount']
				AcquisitionType 	= request.form['AcquisitionType']
				MktAcquisitionType 	= MKT_ASSET_ACQUISITION.query.get(AcquisitionType)
				Transaction 		= str(MktAcquisitionType.Transaction)
			
		CrMode = "" if mktteller.isCashCateogry(Credit if Reverse==False else Debit) else "Direct"

		for i in range(0, 2):
			if i == 0:
				DrCr 		= 	"Dr"
				Mode 		= 	"Direct" if Reverse == False else CrMode
				Category 	= 	Debit
			else:
				DrCr 		= 	"Cr"
				Mode 		= 	CrMode if Reverse == False else "Direct"
				Category 	= 	Credit
			
			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
			DateTimeNow = mktdate.getDateTimeNow()
			
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				Inputter,				# Inputter
				Createdon, 				# Createdon
				Authorizer,				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(AssetPrice), 	# Amount
				"SA",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				AssetID, 				# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode 					# Mode check to insert Journal for category
			)
			print "Start booking #%s -%s"%(i+1,DrCr)
