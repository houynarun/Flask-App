from app.mktcore.wtfimports 						import *
from .models 										import *
from app.Branch.models 								import MKT_BRANCH
from app.Officer.models 							import MKT_OFFICER
from app.FixedAssetManagement.FixedAsset.models 	import MKT_ASSET_INAU, MKT_ASSET, MKT_ASSET_CONSUMPTION, MKT_ASSET_HIST
import app.tools.mktdate 								as mktdate
from app.FixedAssetManagement.AssetAssigning.models import MKT_ASSET_ASSIGNING, MKT_ASSET_ASSIGNING_INAU
from app 											import db
from sqlalchemy 									import desc
import app.tools.mktholiday 							as mktHoliday
from datetime 										import date, timedelta
import app.tools.loantools.nonworkingday 				as mktDay
import app.tools.mktaudit 								as mktaudit
from app.mktcore.session 								import *
from sqlalchemy 										import or_
from sqlalchemy.exc 									import IntegrityError


def loadCurrentDate():
	return mktdate.getBankDate()

def loadOfficer():
	Audit = mktaudit.getAuditrail()
	Branch = Audit['Branch']
	return MKT_OFFICER.query.filter_by(Branch=Branch)


def loadAssetForAssigning():
	Audit = mktaudit.getAuditrail()
	Branch = Audit['Branch']
	AssetList = []
	""" 
		Check whether the record is new or not
		If new record, we query only unassigned asset
		else query all record
	"""
	IsNewRecord = True if 'New' in request.url else False
	if request.method == 'POST':
		return MKT_ASSET.query.join(MKT_ASSET_CONSUMPTION,MKT_ASSET.ID==MKT_ASSET_CONSUMPTION.ID).filter(MKT_ASSET_CONSUMPTION.Remaining > 0,MKT_ASSET.Branch==Branch,MKT_ASSET.RecordType=='1')
	elif IsNewRecord:
		return MKT_ASSET.query.join(MKT_ASSET_CONSUMPTION,MKT_ASSET.ID==MKT_ASSET_CONSUMPTION.ID).filter(MKT_ASSET_CONSUMPTION.Remaining > 0,MKT_ASSET.Branch==Branch,MKT_ASSET.RecordType=='1')
	else:
		AssetLIVE = MKT_ASSET.query
		AssetHIST = MKT_ASSET_HIST.query
		Asset = AssetLIVE.union(AssetHIST).all()
		for row in Asset:
			PurifiedAsset = MKT_ASSET()
			PurifiedAsset.ID = str(row.ID).split('@')[0]
			PurifiedAsset.Description = str(row.Description)
			AssetList.append(PurifiedAsset)
		return AssetList


@app.route("/Morakot/Asset/Assigning/GetSerial")
@checkLogOutSession
@checkLogOutTime
def getSerialOfAsset():
	AssetID = request.args.get('AssetID')
	Asset = MKT_ASSET.query.get(AssetID)
	print Asset.SerialNumber
	return jsonify(
					SerialNumber=(str(Asset.SerialNumber) if Asset.SerialNumber is not None else "") if Asset else '',
					Bool=True if Asset.SerialNumber!='' and Asset.SerialNumber is not None else False
					)


class FRM_ASSET_ASSIGNING(exform):
	
	AssetID 		= QuerySelectField(	requiredlabel("Asset","*"),
										query_factory=loadAssetForAssigning,
										blank_text=u'--Choose Asset--',
										get_label=lambda a: a.ID + " - " + a.Description,
										validators=[validators.Required()],
										allow_blank=True
										)
	RecordType 		= TextField("Record Type",
								default='1')
	SerialNumber 	= TextField(requiredlabel("Serial Number","*"),
								validators=[validators.Required()]
								)
	AssigneeID 		= QuerySelectField(	requiredlabel("Assignee","*"),
										query_factory=loadOfficer,
										blank_text=u'--Choose Assignee--',
										get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
										validators=[validators.Required()],
										allow_blank=True
										)
	NewAssigneeID 	= TextField("New Assignee")
	NewBranch 		= TextField("New Assignee")
	OldBranch 		= TextField("Old Assignee")
	AssigningDate 	= DateField(requiredlabel("Assigning Date","*"),
								validators=[validators.Required()],
								default=loadCurrentDate
							)
	StopUsingDate 	= TextField("Stop Using Date")
	Note 			= TextAreaField('Note', 
									validators=[validators.Length(max=100)]
									)


	def validate_AssigningDate(form, field):
		try:
			Holiday 		= mktHoliday.getHoliday()
			AssigningDate 	= request.form['AssigningDate']

			CheckFormatDate = mktdate.isDateISO(AssigningDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
				
			systemDate 	= 	mktdate.getBankDate()
			StrSysteDate=	str(systemDate).split("-")
			StrAssigningDate=	str(AssigningDate).split("-")

			SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
			ValueMonth 	=	"%s%s" %(StrAssigningDate[0], StrAssigningDate[1])

			if int(ValueMonth) < int(SysMonth):
				raise ValidationError("Assigning date must be different previous month.")

		except:
			raise


	@staticmethod
	def listField():
		Fields = [
					"ID",
					"AssigneeID",
					"AssetID",
					"SerialNumber",
					"AssigningDate",
					"Note"
				]
		Audit = mktaudit.getAuditrail()
		Branch = Audit['Branch']

		return Fields, ["RecordType*EQ*1","Branch*EQ*{0}".format(Branch)]

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay = "$('#SerialNumber').val(data.SerialNumber);$('#SerialNumber').attr('readonly',data.Bool)"
		varname		="AssetID:$('#AssetID').val()"

		fun			=["AssetID", varname ,fielddisplay, "/Morakot/Asset/Assigning/GetSerial", "click"]
		hotfield.append(fun)
		return hotfield

	@staticmethod
	def reverseRec():
		return False, "You cannot reverse this record."

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def setVisible():
		Fields = [
					("NewAssigneeID"),
					("StopUsingDate"),
					("NewBranch"),
					("OldBranch"),
					("RecordType")
				]

		return Fields

	@staticmethod
	def setWidth():
		control_list= [
					   ('AssigningDate', len3),
					   ]
					   
		return control_list


	@staticmethod
	def beforeInsert():		
		AuthLevel 	= g.getNAuthorize
		
		try:			
			if AuthLevel == 0 :
				AssigningDate = request.form['AssigningDate']				
				
				SerialNumber = request.form['SerialNumber']
				AssigneeID = request.form['AssigneeID']

				#-----------Update remaining amount of asset in table consumption
				AssetID = request.form['AssetID']
				Consuming = MKT_ASSET_CONSUMPTION.query.join(MKT_ASSET, MKT_ASSET_CONSUMPTION.ID==AssetID).one()
				if Consuming:
					Consuming.Remaining = int(Consuming.Remaining) - 1
				print "Consumption", Consuming.Remaining
				#-----------Update status of asset to in use
				Asset = MKT_ASSET.query.get(AssetID)
				if Asset:
					Asset.AssetStatus = "IUS"
					Asset.SerialNumber = SerialNumber
					Asset.AssigneeID = AssigneeID
					Asset.AssigningDate = AssigningDate

				#-----------Update stop using date if it can				
				TransferredAsset = MKT_ASSET_ASSIGNING.query.\
									filter(MKT_ASSET_ASSIGNING.AssetID==str(AssetID), 
											MKT_ASSET_ASSIGNING.NewBranch!='', 
											or_(MKT_ASSET_ASSIGNING.StopUsingDate=='', MKT_ASSET_ASSIGNING.StopUsingDate==None)).\
									order_by(desc(MKT_ASSET_ASSIGNING.Createdon)).first()
				if TransferredAsset:
					TransferredAsset.StopUsingDate = str(AssigningDate)

				db.session.commit()
				
			return True
		except IntegrityError, e:
			flash(msg_error + "Serial Number is already exist!")
			db.session.rollback()
			db.session.close()
			return False
		except Exception,e :
			print e
			db.session.rollback()
			db.session.close()
			return False


	@staticmethod
	def beforeAuthorize():
		
		try:
			AssetAssigningInau = MKT_ASSET_ASSIGNING_INAU.query.get(g.formID)
			if AssetAssigningInau:
				SerialNumber = str(AssetAssigningInau.SerialNumber)
				AssigneeID = str(AssetAssigningInau.AssigneeID)
				AssigningDate = str(AssetAssigningInau.AssigningDate)
				#-----------Update remaining amount of asset in table consumption
				AssetID = str(AssetAssigningInau.AssetID)
				Consuming = MKT_ASSET_CONSUMPTION.query.join(MKT_ASSET, MKT_ASSET_CONSUMPTION.ID==AssetID).one()
				if Consuming:
					Consuming.Remaining = int(Consuming.Remaining) - 1

			#-----------Update status of asset to in use
			Asset = MKT_ASSET.query.get(AssetID)
			if Asset:
				Asset.AssetStatus = "IUS"
				Asset.SerialNumber = SerialNumber
				Asset.AssigneeID = AssigneeID
				Asset.AssigningDate = AssigningDate

			#-----------Update stop using date if it can			
			TransferredAsset = MKT_ASSET_ASSIGNING.query.\
								filter(	MKT_ASSET_ASSIGNING.AssetID==str(AssetID), 
										MKT_ASSET_ASSIGNING.NewBranch!='',
										MKT_ASSET_ASSIGNING.StopUsingDate=='').\
								order_by(desc(MKT_ASSET_ASSIGNING.Createdon)).\
								first()
			if TransferredAsset:
				TransferredAsset.StopUsingDate = str(AssetAssigningInau.AssigningDate)
			db.session.commit()
			return True
		except IntegrityError, e:
			flash(msg_error + "Serial Number is already exist!")			
			db.session.rollback()
			db.session.close()
			return False
		except Exception,e:
			print e
			db.session.rollback()
			db.session.close()
			flash(msg_error + str(e))
			return False