from app.mktcore.wtfimports 			import *
from .models 							import *
from ..AssetGroup.models 				import *
from ..AssetType.models 				import *
from ..DepreciationRegister.models 		import *
from ..AcquisitionType.models 			import MKT_ASSET_ACQUISITION
from app.Category.models 				import MKT_CATEGORY
from app.Currency.models 				import *
from app.mktcore.session 				import *


def loadAssetGroup():
	return MKT_ASSET_GROUP.query.all()

def loadAssetType():
	if request.method == 'POST':
		ID=request.form["AssetType"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			
			IsStationary = 'Y' if Record['AssetGroup']=='STA' else 'N'
			AssetType = MKT_ASSET_TYPE.query.filter_by(IsStationary=IsStationary).all()
			return AssetType
		else:
			return MKT_ASSET_TYPE.query.filter_by(ID='').all()
	return MKT_ASSET_TYPE.query.filter_by(ID=ID).all()


def loadDepreciationMethod():
	return MKT_ASSET_DEPRE_REG.query.all()

def loadAcquisitionType():
	return MKT_ASSET_ACQUISITION.query.all()

def loadCategory():
	return MKT_CATEGORY.query.order_by(MKT_CATEGORY.ID).all()

def loadCurrency(ID=''):
	if ID :
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.all()


def getRecord():
	try:
		result = MKT_ASSET_SETUP_INAU.query.filter_by(ID=g.formID).all()		
		if not result:
			result = MKT_ASSET_SETUP.query.filter_by(ID=g.formID).all()
			Dict = {}
			
		if result:
			for row in result:
				Dict = row.__dict__
				
				return Dict
		else:
			return Dict
	except Exception, e:
		raise


@app.route("/Morakot/Asset/GetAssetType")
@checkLogOutSession
@checkLogOutTime
def getAssetType():
	AssetType = request.args.get('AssetType')
	Type = db.session.query(MKT_ASSET_TYPE.Type).filter(MKT_ASSET_TYPE.ID == AssetType).first()
	Bool = False
	
	if str(Type[0]) == 'I':
		Bool = True
	return jsonify(IsTangible = Bool, IsIntangible = not Bool)


@app.route("/Morakot/Asset/SetupAssetGroup")
@checkLogOutSession
@checkLogOutTime
def getSetupAssetGroup():
	dic = {}
	lis = []
	
	AssetGroup = request.args.get('AssetGroup')
	
	IsStationary = 'Y' if AssetGroup == 'STA' else 'N'
	AssetType = MKT_ASSET_TYPE.query.filter(MKT_ASSET_TYPE.IsStationary==IsStationary).all()
	if AssetType :
		for row in AssetType:
			dic[row.ID] = row.Description
	return jsonify(results=dic)


#class FRM_FAM_ASSET_SETTING
class FRM_ASSET_SETUP(exform):

	Description = TextField(requiredlabel("Description","*"),
							validators=[validators.Required()])
	AssetGroup = QuerySelectField(	requiredlabel("Asset Group","*"),
									query_factory=loadAssetGroup,
									blank_text=u'--Choose Asset Group--',
									get_label=u'Description',
									allow_blank=True, 
									validators=[validators.Required()]
									)
	AssetType = QuerySelectField(	requiredlabel("Asset Type","*"),
									query_factory=loadAssetType,
									blank_text=u'--Choose Asset Type--',
									get_label=u'Description',
									allow_blank=True,
									validators=[validators.Required()]
									)	
	AcquisitionType = QuerySelectField(	requiredlabel("Acquisition Type","*"),
										query_factory=loadAcquisitionType,
										blank_text=u'--Choose Acquisition Type--',
										get_label=u'Description', 
										allow_blank=True,  
										validators=[validators.Required()]
										)
	AssetLife = TextField(	"Asset Life (Year)"
							,default=0
							# validators=[validators.Required()]							
						 )
	DepDayBasis = SelectField(	"Depreciation Day Basis",
								choices=[('','--None--'),('1','365/365'),('2','365/360')]
								)
	DepreciationMethod = QuerySelectField(	"Depreciation Method",
											query_factory=loadDepreciationMethod, 
											blank_text=u'--None--',
											get_label=u'Function', 
											allow_blank=True, 
											# validators=[validators.Required()]
											)
	
	AssetCategory = QuerySelectField(requiredlabel("Asset Category","*"),
									query_factory=loadCategory, 
									blank_text=u'--Choose Asset Category--',
									get_label=lambda c: c.ID + "-" + c.Description, 
									allow_blank=True, 
									validators=[validators.Required()]
									)
	DepreciationCategory = QuerySelectField("Depreciation Category",
									query_factory=loadCategory, 
									blank_text=u'--Choose Depreciation Category--',
									get_label=lambda c: c.ID + "-" + c.Description, 
									allow_blank=True, 
									
									)
	AccumulatedCategory = QuerySelectField("Accumulation Category",
									query_factory=loadCategory, 
									blank_text=u'--Choose Accumulated Category--',
									get_label=lambda c: c.ID + "-" + c.Description, 
									allow_blank=True, 
									# validators=[validators.Required()]
									)
	AmortizationCategory = QuerySelectField("Amortization Category",
									query_factory=loadCategory, 
									blank_text=u'--Choose Amortization Category--',
									get_label=lambda c: c.ID + "-" + c.Description, 
									allow_blank=True, 		
									# validators=[validators.Optional()]				
									)
	AccumulatedAmortization = QuerySelectField("Accumulated Amortization",
									query_factory=loadCategory, 
									blank_text=u'--Choose Accumulated Amortization--',
									get_label=lambda c: c.ID + "-" + c.Description, 
									allow_blank=True, 	
									# validators=[validators.Optional()]																					
									)
	RepairCategory = QuerySelectField("Repair Category",
										query_factory=loadCategory, 
										blank_text=u'--Choose Reparir / Repair Category--',
										get_label=lambda c: c.ID + "-" + c.Description, 
										allow_blank=True, 
										# validators=[validators.Required()]
										)
	LossOnDisposalCategory = QuerySelectField("Loss On Disposal Category",
												  query_factory=loadCategory, 
												  blank_text=u'--Choose Loss On Disposal Category--',
												  get_label=lambda c: c.ID + "-" + c.Description, 
												  allow_blank=True,
												  # validators=[validators.Required()]
												 )
	GainOnDisposalCategory = QuerySelectField("Gain On Disposal Category",
												  query_factory=loadCategory, 
												  blank_text=u'--Choose Gain On Disposal Category--',
												  get_label=lambda c: c.ID + "-" + c.Description, 
												  allow_blank=True, 
												  # validators=[validators.Required()]
												 )
	Currency = QuerySelectField("Currency",
								query_factory=loadCurrency,
								blank_text=u'--Choose Currency--',								
								get_label=u'ID', 
								default = lambda:loadCurrency('USD'),
								allow_blank=True,
								description="2-Frequency Setting"
								)
	StartPrice = TextField("Start Price", description="2-Frequency Setting", default=0)
	EndPrice = TextField("End Price", description="2-Frequency Setting", default=0)
	Frequency = SelectField("Depreciation Frequency",
							choices=[("","--None--"),("Y","Annualy"),("M","Monthly"),("Q","Quarterly"),("W","Weekly"),("D","Daily")],
							description="2-Frequency Setting"
							)

	def validate_AccumulatedAmortization(form, field):
		AccumulatedAmortization = field.data
		AssetType = form.AssetType.data
		if AssetType:
			if str(AssetType.Type) == 'I' and AccumulatedAmortization == None:
				raise ValidationError('You have to choose AccumulatedAmortization because your asset type is intangible.')
			elif str(AssetType.Type) == 'T' and AccumulatedAmortization != None:
				raise ValidationError('You cannot choose AccumulatedAmortization because your asset type is tangible.')


	def validate_AmortizationCategory(form, field):
		AmortizationCategory = field.data
		AssetType = form.AssetType.data
		if AssetType:
			if str(AssetType.Type) == 'I' and AmortizationCategory == None:
				raise ValidationError('You have to choose AmortizationCategory because your asset type is intangible.')
			elif str(AssetType.Type) == 'T' and AmortizationCategory != None:
				raise ValidationError('You cannot choose AmortizationCategory because your asset type is tangible.')


	def validate_DepreciationCategory(form, field):
		DepreciationCategory = field.data
		AssetType = form.AssetType.data
		if AssetType:
			if str(AssetType.Type) == 'T' and DepreciationCategory == None:
				raise ValidationError('You have to choose DepreciationCategory because your asset type is tangible.')
			elif str(AssetType.Type) == 'I' and DepreciationCategory != None:
				raise ValidationError('You cannot choose DepreciationCategory because your asset type is intangible.')


	def validate_AccumulatedCategory(form ,field):
		AccumulatedCategory = field.data
		AssetType = form.AssetType.data
		if AssetType:
			if str(AssetType.Type) == 'T' and AccumulatedCategory == None:
				raise ValidationError('You have to choose AccumulatedCategory because your asset type is tangible.')
			elif str(AssetType.Type) == 'I' and AccumulatedCategory != None:
				raise ValidationError('You cannot choose DepreciationCategory because your asset type is intangible.')


	@staticmethod
	def listField():
		Fields = ["ID","Description","AssetGroup","AssetCategory","AssetType","AcquisitionType","AssetLife","StartPrice","EndPrice","Frequency"]
		return Fields

	@staticmethod
	def moneyField():
		return [
				["StartPrice","Currency"],
				["EndPrice","Currency"]
				]


	@staticmethod
	def setWidth():
		control_list= [
					   ('AssetLife', len1),
					   ('DepDayBasis', len2),
					   ('Frequency', len2),
					   ]
					   
		return control_list


	@staticmethod
	def hotField():
		hotfield = []
		fielddisplay = "$('#DepreciationCategory').select2('readonly', data.IsTangible);"
		fielddisplay += "$('#AccumulatedCategory').select2('readonly', data.IsTangible);"
		fielddisplay += "$('#AmortizationCategory').select2('readonly', data.IsIntangible);"
		fielddisplay += "$('#AccumulatedAmortization').select2('readonly', data.IsIntangible);"

		varname = "AssetType:$('#AssetType').val()"
		fun = ["AssetType", varname, fielddisplay, "/Morakot/Asset/GetAssetType", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotSelectField():
		hotfield = []
		fielddisplay = "AssetType"
		varname = "AssetGroup:$('#AssetGroup').val()"
		fun = ["AssetGroup", varname, fielddisplay, "/Morakot/Asset/SetupAssetGroup", "click"]
		hotfield.append(fun)

		return hotfield
