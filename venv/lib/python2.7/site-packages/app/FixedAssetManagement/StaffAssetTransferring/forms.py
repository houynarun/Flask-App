from app.mktcore.wtfimports 						import *
from app.Branch.models 								import MKT_BRANCH
from app.Officer.models 							import MKT_OFFICER
from ..FixedAsset.models 							import MKT_ASSET_INAU, MKT_ASSET, MKT_ASSET_CONSUMPTION, MKT_ASSET_HIST
import app.tools.mktdate 								as mktdate
from ..AssetAssigning.models 						import *
from app 											import db
from sqlalchemy										import func
import app.tools.mktaudit 								as mktaudit
from sqlalchemy										import desc
import app.tools.mktholiday 							as mktHoliday
from datetime 										import date, timedelta
import app.tools.loantools.nonworkingday 				as mktDay
from app.mktcore.session 							import *


def loadCurrentDate():
	return mktdate.getBankDate()


def loadAssetForTransferring():
	# return MKT_ASSET.query.filter(MKT_ASSET.AssetStatus != 'NEW').all()
	AssetList = []
	AssetLIVE = MKT_ASSET.query.filter(MKT_ASSET.AssetStatus != 'NEW')
	AssetHIST = MKT_ASSET_HIST.query
	Asset = AssetLIVE.union(AssetHIST).all()
	for row in Asset:
		PurifiedAsset = MKT_ASSET()
		PurifiedAsset.ID = str(row.ID).split('@')[0]
		PurifiedAsset.Description = str(row.Description)
		PurifiedAsset.SerialNumber = str(row.SerialNumber)
		AssetList.append(PurifiedAsset)
	return AssetList


def loadOldAssignee():
	OldAssignee = MKT_ASSET_ASSIGNING.query.with_entities(MKT_ASSET_ASSIGNING.AssigneeID).distinct(MKT_ASSET_ASSIGNING.AssigneeID).filter(MKT_ASSET_ASSIGNING.AssigneeID!='')
	NewAssingee = MKT_ASSET_ASSIGNING.query.with_entities(MKT_ASSET_ASSIGNING.NewAssigneeID).distinct(MKT_ASSET_ASSIGNING.NewAssigneeID).filter(MKT_ASSET_ASSIGNING.NewAssigneeID!='')
	Assignee = OldAssignee.union(NewAssingee).subquery()
	AllOldAssignee = MKT_OFFICER.query.filter(MKT_OFFICER.ID.in_(Assignee))
	return AllOldAssignee


@app.route('/Morakot/Asset/GetNewAssigneeID',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNewAssigneeID():
	dic = {}
	Audit = mktaudit.getAuditrail()
	Branch = Audit['Branch']
	SerialNumber= request.args.get('SerialNumber')
	AssetAssign = MKT_ASSET.query.filter_by(SerialNumber=SerialNumber).first()
	NewAssigneeID = MKT_OFFICER.query.filter(MKT_OFFICER.ID != AssetAssign.AssigneeID, MKT_OFFICER.Branch==Branch).all()
	
	for row in NewAssigneeID:
		dic[row.ID] = row.ID + ' - ' + row.LastName + ' ' + row.FirstName
	
	return jsonify(results=dic)


def getRecord():
	try:
		result = MKT_ASSET_ASSIGNING_INAU.query.filter_by(ID=g.formID).all()		
		if not result:
			result = MKT_ASSET_ASSIGNING.query.filter_by(ID=g.formID).all()
			Dict = {}
		if result:
			for row in result:
				Dict = row.__dict__
				return Dict
		else:
			return Dict
	except:
		raise


def loadNewAssignee():
	Audit = mktaudit.getAuditrail()
	Branch = Audit['Branch']
	if request.method == 'POST':
		SerialNumber = request.form["SerialNumber"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			TransferredAsset = MKT_ASSET_ASSIGNING.query.filter_by(NewAssigneeID=Record['NewAssigneeID']).first()			
			if TransferredAsset is None:
				TransferredAsset = MKT_ASSET_ASSIGNING_INAU.query.filter_by(NewAssigneeID=Record['NewAssigneeID']).first()			
			Assignee = MKT_OFFICER.query.filter_by(ID = TransferredAsset.NewAssigneeID)
			return Assignee
		else:
			TransferredAsset = MKT_ASSET.query.with_entities(MKT_ASSET.AssigneeID).filter_by(AssigneeID='').all()
			Assignee = MKT_OFFICER.query.filter(MKT_OFFICER.ID.in_(TransferredAsset))
			return Assignee
	AssetAssign = MKT_ASSET.query.filter_by(SerialNumber=SerialNumber).first()
	NewAssigneeID = MKT_OFFICER.query.filter(MKT_OFFICER.ID != AssetAssign.AssigneeID if AssetAssign else '', MKT_OFFICER.Branch==Branch).all()	

	return NewAssigneeID


@app.route('/Morakot/Asset/GetAssetAndAssignee',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAssetAndAssignee():
	SN = request.args.get('SerialNumber')
	Asset = MKT_ASSET.query.filter_by(SerialNumber=SN).first()
	Assignee = MKT_OFFICER.query.get(Asset.AssigneeID) if Asset.AssigneeID is not None else MKT_OFFICER.query.get('')
	
	return jsonify(	AssetID=Asset.ID,
					AssetDes=str(Asset.Description),
					AssigneeID=Assignee.ID if Assignee is not None else ' ',
					AssigneeName=Assignee.ID + ' - ' + Assignee.LastName + ' ' + Assignee.FirstName if Assignee is not None else '--Old Assignee--'
					)


class FRM_STAFF_ASSET_TRANSFER(exform):
	
	SerialNumber 	= RemoteTextField(requiredlabel("Serial Number","*"),									
								validators=[validators.Required()])
	AssetID 		= QuerySelectField(	requiredlabel("Asset","*"),
								query_factory=loadAssetForTransferring,
								blank_text=u'--None--',
								get_label=lambda a: a.ID + " - " + a.Description,
								validators=[validators.Required()],
								allow_blank=True
								)
	RecordType = TextField("Record Type", default='2')
	AssigneeID 		= QuerySelectField(requiredlabel("From","*"),
									query_factory=loadOldAssignee,
									blank_text=u'--Old Assignee--',
									get_label=lambda a: a.ID + '-' + a.LastName + ' ' + a.FirstName,									
									allow_blank=True,
									validators=[validators.Required()]
									)
	NewAssigneeID 	= QuerySelectField(requiredlabel("To","*"),
									query_factory=loadNewAssignee,
									blank_text=u'--Choose New Assignee--',
									get_label=lambda a: a.ID + '-' + a.LastName + ' ' + a.FirstName,									
									validators=[validators.Required()],
									allow_blank=True
									)
	NewBranch = TextField("New Assignee")
	OldBranch = TextField("Old Assignee")
	AssigningDate 	= DateField(requiredlabel("Transferring Date","*"),
								validators=[validators.Required()],
								default=loadCurrentDate
							 	)
	StopUsingDate 	= TextField("Stop Using Date")
	Note 			= TextAreaField('Note', 
									validators=[validators.Length(max=100)]
									)


	def validate_AssigningDate(form, field):
		try:
			Holiday 		= mktHoliday.getHoliday()
			AssigningDate 	= request.form['AssigningDate']

			CheckFormatDate = mktdate.isDateISO(AssigningDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
				

			systemDate 	= 	mktdate.getBankDate()
			StrSysteDate=	str(systemDate).split("-")
			StrAssigningDate=	str(AssigningDate).split("-")

			SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
			ValueMonth 	=	"%s%s" %(StrAssigningDate[0], StrAssigningDate[1])

			if int(ValueMonth) < int(SysMonth):
				raise ValidationError("Transferring date must be different previous month.")
		except:
			raise


	@staticmethod
	def hotSelectField():
		hotfield = []
		fielddisplay="NewAssigneeID"
		varname		="SerialNumber:$('#SerialNumber').val()"	
		fun			=["SerialNumber", varname ,fielddisplay, "/Morakot/Asset/GetNewAssigneeID", "change"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def hotField():
		hotfield = []
		fielddisplay = "$('#AssetID').select2('data',{'id':data.AssetID,'text':data.AssetDes});"
		fielddisplay += "$('#AssigneeID').select2('data',{'id':data.AssigneeID,'text':data.AssigneeName});$('#AssigneeID').focus()"
	
		varname = "SerialNumber:$('#SerialNumber').val()"

		fun	= ["SerialNumber", varname ,fielddisplay, "/Morakot/Asset/GetAssetAndAssignee", "click"]
		hotfield.append(fun)
		return hotfield


	@staticmethod
	def setDisable():
		fields = []
		fields = [
					('AssigneeID'),
					('AssetID')
				 ]

		return fields


	@staticmethod
	def setVisible():
		fields = [
					("NewBranch"),
					("OldBranch"),
					("RecordType"),
					('StopUsingDate')
				]

		return fields


	@staticmethod
	def listField():
		
		Fields = [
					"ID",
					"AssetID",
					"SerialNumber",
					"AssigneeID",
					"NewAssigneeID",
					"AssigningDate",
					"Note"
					]

		Audit = mktaudit.getAuditrail()
		Branch = Audit['Branch']

		return Fields, ["RecordType*EQ*2", "Branch*EQ*{0}".format(Branch)]


	@staticmethod
	def setWidth():
		control_list= [
					   ('AssigningDate', len3),
					   ]
					   
		return control_list


	@staticmethod
	def beforeInsert():	
		AuthLevel = g.getNAuthorize	
		try:
			if AuthLevel == 0:
				Audit 			= mktaudit.getAuditrail()
				Inputter		= Audit['Inputter']
				Createdon 		= Audit['Createdon']
				Authorizer 		= Audit['Authorizer']
				Authorizeon		= Audit['Authorizeon']
				Branch 			= Audit['Branch']
				
				AssetID = request.form['AssetID']
				AssigneeID = request.form['NewAssigneeID']
				OldAssigneeID = request.form['AssigneeID']
				AssigningDate = request.form['AssigningDate']

				Asset = MKT_ASSET.query.filter_by(ID=AssetID).first()
				AssignedAsset = MKT_ASSET_ASSIGNING.query.filter(MKT_ASSET_ASSIGNING.AssetID==AssetID).order_by(desc(MKT_ASSET_ASSIGNING.Createdon)).first()
				if AssignedAsset:
					AssignedAsset.StopUsingDate = AssigningDate
					
					Asset.Inputter 			= Inputter
					Asset.Createdon 		= Createdon
					Asset.Authorizer 		= Authorizer
					Asset.Authorizeon 		= Authorizeon
					Asset.Branch 			= Branch
					Asset.AssigneeID 		= AssigneeID
					Asset.AssigningDate 	= AssigningDate

					db.session.commit()
			return True
		except Exception,e:
			print e
			db.session.rollback()
			db.session.close()
			return False


	@staticmethod
	def beforeAuthorize():		
		try:
		
			Audit 			= mktaudit.getAuditrail()
			Inputter		= Audit['Inputter']
			Createdon 		= Audit['Createdon']
			Authorizer 		= Audit['Authorizer']
			Authorizeon		= Audit['Authorizeon']
			Branch 			= Audit['Branch']

			TransferredAssetInau = MKT_ASSET_ASSIGNING_INAU.query.get(g.formID)
			if TransferredAssetInau:
				AssetID 		= str(TransferredAssetInau.AssetID)
				AssigneeID 		= str(TransferredAssetInau.NewAssigneeID)
				OldAssigneeID 	= str(TransferredAssetInau.AssigneeID)
				AssigningDate 	= str(TransferredAssetInau.AssigningDate)

				Asset = MKT_ASSET.query.filter_by(ID=AssetID).first()

				AssignedAsset = MKT_ASSET_ASSIGNING.query.filter(MKT_ASSET_ASSIGNING.AssetID==AssetID).order_by(desc(MKT_ASSET_ASSIGNING.Createdon)).first()
				if AssignedAsset:
					AssignedAsset.StopUsingDate = AssigningDate
					
					Asset.Inputter 			= Inputter
					Asset.Createdon 		= Createdon
					Asset.Authorizer 		= Authorizer
					Asset.Authorizeon 		= Authorizeon
					Asset.Branch 			= Branch
					Asset.AssigneeID 		= AssigneeID
					Asset.AssigningDate 	= AssigningDate

					db.session.commit()
			return True
		except Exception,e:
			print e
			db.session.rollback()
			db.session.close()
			flash(msg_error + str(e))
			return False

