from flask 															import session,flash
from datetime 														import date, timedelta
from decimal 														import *
from sqlalchemy 													import func, desc, Float, text, select, String, Integer
from sqlalchemy.sql.expression                     					import literal, cast
import math

from app.mktcore.wtfimports 										import *
from app.mktcore.session 											import *
from app 															import db

import app.tools.mktteller 												as mktteller
import app.tools.mktaccounting 											as mktaccounting
import app.tools.mktdate 												as mktdate
import app.tools.mktholiday 											as mktHoliday
import app.tools.loantools.nonworkingday 								as mktDay
import app.tools.mkttool 												as mkttool
import app.tools.mktaudit 												as mktaudit
import app.tools.user 													as mktuser
from ..tools.mktfamdate 											import *
from ..tools.mktfixedasset 											import postAccountingDepBooking
import app.tools.mktfundtransfer										as mktfundtransfer
from ..Depreciation.DepreciationSchedule							import DepreciationSchedule, getNextMonth, calculateNextRunDate

from .models 														import *
from app.Vendor.Vendor.models 										import *
from app.Transaction.models 										import *
from ..AssetGroup.models 											import *
from ..AssetType.models 											import *
from ..DepreciationRegister.models 									import *
from app.Currency.models 											import *
from ..AcquisitionType.models 										import MKT_ASSET_ACQUISITION
from ..AssetSetup.models 											import MKT_ASSET_SETUP
from ..Depreciation.models											import *
from ..DisposalType.models 											import *
from app.Category.models 											import MKT_CATEGORY
from app.tools.mktaccounting 										import postAccounting,getConsolKey
from app.tools.mktdate 												import getDateTimeNow
from ..PaymentMethod.models											import MKT_ASSET_PAYMENT_ME
from ..AssetAssigning.models 										import MKT_ASSET_ASSIGNING
from app.Officer.models 											import MKT_OFFICER
from app.Account.models												import *


def loadCurrentDate():
	return mktdate.getBankDate()

def loadCurrency(ID=''):
	if ID :
		return MKT_CURRENCY.query.filter_by(ID=ID).first()
	else:
		return MKT_CURRENCY.query.all()

def loadVendor():
	return MKT_VENDOR.query.all()

def loadAssetGroup():
	return MKT_ASSET_GROUP.query.filter(MKT_ASSET_GROUP.ID != 'STA').all()

def loadAssetType():
	return MKT_ASSET_TYPE.query.filter(MKT_ASSET_TYPE.IsStationary=='N').all()

def loadDepreciationMethod():
	return MKT_ASSET_DEPRE_REG.query.all()

def loadAcquisitionType():
	return MKT_ASSET_ACQUISITION.query.all()

def loadAssetCategory():
	return MKT_CATEGORY.query.order_by(MKT_CATEGORY.ID).all()

def loadCategory():
	return MKT_CATEGORY.query.order_by(MKT_CATEGORY.ID).all()

def loadDefault():
	return "Other"

def loadPaymentMethod():
	return MKT_ASSET_PAYMENT_ME.query.all()

def loadOfficer():
	return MKT_OFFICER.query

def loadAssetSetup():
	return MKT_ASSET_SETUP.query.filter(MKT_ASSET_SETUP.AssetGroup!='STA').all()

def loadAssetStatus(ID=''):
	lis = []
	url = request.url
	DisposalType = db.session.query(MKT_ASSET_DISPOSAL.ID,MKT_ASSET_DISPOSAL.Description)
	AssetStatus1 = db.session.query(
									literal("NEW").label("ID"),
									literal("New").label("Description")
									)
	AssetStatus2 = db.session.query(
									literal("IUS").label("ID"),
									literal("In Use").label("Description")
									)
	AssetStatus3 = db.session.query(
									literal("HUP").label("ID"),
									literal("Hanging Up").label("Description")
									)
	DT = DisposalType.union(AssetStatus1).union(AssetStatus2).union(AssetStatus3).subquery()
	"""
	I combine two statuses such as 'New' and 'In Use' with All Status from Disposal Type
	into SelectField.
	So that, it doesn't matter when we view the record. And we don't need to store the 
	two status in a table.
	"""
	if 'New' in url:
		Obj = MKT_ASSET_DISPOSAL()
		Obj.ID = 'NEW'
		Obj.Description = 'New'
		lis.append(Obj)
	else:
		D = db.session.query(DT).all()
		for row in D:
			Obj = MKT_ASSET_DISPOSAL()
			Obj.ID = row[0]
			Obj.Description = row[1]
			lis.append(Obj)

	return lis


@app.route("/Morakot/Asset/PaymentMethod", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFixedAssetPaymentMethod():
	#---For Automatically Select CrAccount after Payment Method is selected
	Branch 			= mktuser.getCurrentBranch()
	PaymentMethod 	= request.args.get('PaymentMethod')
	Currency 		= request.args.get('Currency')
	PaymentMethod 	= MKT_ASSET_PAYMENT_ME.query.get(PaymentMethod)
	Account 		= None
	if PaymentMethod:
		Account = MKT_ACCOUNT.query.join(MKT_CATEGORY, MKT_CATEGORY.ID == MKT_ACCOUNT.AccCategory)\
							 .filter(MKT_ACCOUNT.AccCategory==str(PaymentMethod.CategoryID),
									MKT_ACCOUNT.Currency==str(Currency),
									MKT_ACCOUNT.Branch==str(Branch)
									).\
							 first()

	return jsonify(
					AccountID=str(Account.ID) if Account else '',
					AccountDesc=str(Account.ID) + '-' + str(Account.AccName) if Account else '--None--'
					)


@app.route("/Morakot/Asset/AccountCategory", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAssetAccountCategory():
	#---For Automatically select PaymentMethod and Currency after CrAccount is selected
	CrAccount = request.args.get('CrAccount')
	Account = MKT_ACCOUNT.query.get(CrAccount)
	Category = MKT_CATEGORY.query.get(str(Account.AccCategory))
	PaymentMethod = MKT_ASSET_PAYMENT_ME.query.filter(MKT_ASSET_PAYMENT_ME.CategoryID==str(Category.ID)).first()
	return jsonify(
					PaymentMethodID 	= str(PaymentMethod.ID),
					PaymentMethodDesc 	= str(Account.AccCategory+' - '+Category.Description),
					CurrencyID 			= str(Account.Currency),
					CurrencyDesc 		= str(Account.Currency),
					)


@app.route('/Morakot/Asset/AssetSetup', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAssetSetup():
	#---For automatically complete Category, AssetGroup, AssetType, AssetLife, AcquisitionType
	#---After AssetSetup is selected
	AssetSetup = request.args.get('AssetSetup')
	AcquisitionType = None
	DepreciationMethodID = "__None"
	DepreciationMethodDesc = "--Choose Depreciation Method--"
	DepDayBasisID = "__None"
	DepDayBasisDesc = "--Choose Day Basis--"
	DepreciationCategoryID = "__None"
	DepreciationCategoryDesc = "--Choose Depreciation Category--"
	AccumulatedCategoryID = "__None"
	AccumulatedCategoryDesc = "--Choose Accumulated Category--"
	AmortizationCategoryID = "__None"
	AmortizationCategoryDesc = "--Choose Amortization Category--"
	AccumulatedAmortizationID = "__None"
	AccumulatedAmortizationDesc = "--Choose Accumulated Amortization Category--"
	RepairCategoryID = "__None"
	RepairCategoryDesc = "--Choose Repair / Maintenance Category--"
	LossOnDisposalCategoryID = "__None"
	LossOnDisposalCategoryDesc = "--Choose Loss On Dispose Category--"
	GainOnDisposalCategoryID = "__None"
	GainOnDisposalCategoryDesc = "--Choose Gain On Dispose Category--"
	UnitOfProOrHourOfOpr = 0
	WholeLifeUnitOfProOrHourOfOpr = 0
	PercentageDep = ""
	AssetCategory = None
	Bool = False
	IsDisabled = True
	row = None
	AssetSetup = MKT_ASSET_SETUP.query.get(AssetSetup)
	if AssetSetup:
		AssetTypeID = str(AssetSetup.AssetType)
		AssetType = MKT_ASSET_TYPE.query.get(AssetTypeID)
		AssetGroupID = str(AssetSetup.AssetGroup)
		AssetGroup = MKT_ASSET_GROUP.query.get(str(AssetGroupID))
		AssetLife = str(AssetSetup.AssetLife)
		
		Bool = False
		Type = db.session.query(MKT_ASSET_TYPE.Type).filter(MKT_ASSET_TYPE.ID == AssetTypeID).first()
		if str(Type[0]) == 'I':
			Bool = True
		
		AcquisitionType = MKT_ASSET_ACQUISITION.query.get(str(AssetSetup.AcquisitionType))
		AcquisitionTypeID = str(AcquisitionType.ID) if AcquisitionType else ''
		AcquisitionTypeDesc = str(AcquisitionType.Description)

		AssetCategory = MKT_CATEGORY.query.get(str(AssetSetup.AssetCategory))
		AssetCategoryID = str(AssetCategory.ID) if AssetSetup else AssetCategoryID
		AssetCategoryDesc = str(AssetCategory.ID) + '-' + str(AssetCategory.Description) if AssetSetup else AssetCategoryDesc

		#---Assign row = AssetSetup because I don't want to replace all row by AssetSetup. Because of this code I copy from other section.
		row = AssetSetup
		
		DepreciationMethod = MKT_ASSET_DEPRE_REG.query.get(str(row.DepreciationMethod))
		DepreciationMethodDesc = str(DepreciationMethod.Function) if row else DepreciationMethodDesc
		DepreciationMethodID = str(DepreciationMethod.ID) if row else DepreciationMethodID
		

		if str(DepreciationMethod.Function).startswith('DECLINING'):
			PercentageDep = float("{0:.2f}".format((1 / float(AssetLife))*100))
		elif str(DepreciationMethod.Function).startswith('DOUBLE'):
			PercentageDep = float("{0:.2f}".format((1 / float(AssetLife))*200))
		elif str(DepreciationMethod.Function).startswith('THREE'):
			PercentageDep = float("{0:.2f}".format((1 / float(AssetLife))*150))
		if str(DepreciationMethod.Function).endswith('BASED'):
			IsDisabled = False

		DepDayBasisID = str(row.DepDayBasis)
		DepDayBasisDesc = '365/365' if DepDayBasisID == '1' else '365/360'

		DepreciationCategory = MKT_CATEGORY.query.get(str(row.DepreciationCategory))
		DepreciationCategoryID = str(DepreciationCategory.ID) if DepreciationCategory else DepreciationCategoryID
		DepreciationCategoryDesc = str(DepreciationCategory.ID) + '-' + str(DepreciationCategory.Description) if DepreciationCategory else DepreciationCategoryDesc
		
		AccumulatedCategory = MKT_CATEGORY.query.get(str(row.AccumulatedCategory))
		AccumulatedCategoryID = str(AccumulatedCategory.ID) if AccumulatedCategory else AccumulatedCategoryID
		AccumulatedCategoryDesc = str(AccumulatedCategory.ID) + '-' + str(AccumulatedCategory.Description) if AccumulatedCategory else AccumulatedCategoryDesc

		AmortizationCategory = MKT_CATEGORY.query.get(str(row.AmortizationCategory))
		AmortizationCategoryID = str(AmortizationCategory.ID) if AmortizationCategory else AmortizationCategoryID
		AmortizationCategoryDesc = str(AmortizationCategory.ID) + '-' + str(AmortizationCategory.Description) if AmortizationCategory else AmortizationCategoryDesc
		
		AccumulatedAmortization = MKT_CATEGORY.query.get(str(row.AccumulatedAmortization))
		AccumulatedAmortizationID = str(AccumulatedAmortization.ID) if AccumulatedAmortization else AccumulatedAmortizationID
		AccumulatedAmortizationDesc = str(AccumulatedAmortization.ID) + '-' + str(AccumulatedAmortization.Description) if AccumulatedAmortization else AccumulatedAmortizationDesc

		RepairCategory = MKT_CATEGORY.query.get(str(row.RepairCategory))
		RepairCategoryID = str(RepairCategory.ID) if RepairCategory else RepairCategoryID
		RepairCategoryDesc = str(RepairCategory.ID) + '-' + str(RepairCategory.Description) if RepairCategory else RepairCategoryDesc

		LossOnDisposalCategory = MKT_CATEGORY.query.get(str(row.LossOnDisposalCategory))
		LossOnDisposalCategoryID = str(LossOnDisposalCategory.ID) if LossOnDisposalCategory else LossOnDisposalCategoryID
		LossOnDisposalCategoryDesc = str(LossOnDisposalCategory.ID) + '-' + str(LossOnDisposalCategory.Description) if LossOnDisposalCategory else LossOnDisposalCategoryDesc

		GainOnDisposalCategory = MKT_CATEGORY.query.get(str(row.GainOnDisposalCategory))
		GainOnDisposalCategoryID = str(GainOnDisposalCategory.ID) if GainOnDisposalCategory else GainOnDisposalCategoryID
		GainOnDisposalCategoryDesc = str(GainOnDisposalCategory.ID) + '-' + str(GainOnDisposalCategory.Description) if GainOnDisposalCategory else GainOnDisposalCategoryDesc

	return jsonify(
					AssetGroupID 					= AssetGroupID,
					AssetGroupDesc 					= str(AssetGroup.Description),
					AssetTypeID 					= AssetTypeID,
					AssetTypeDesc 					= str(AssetType.Description),
					AssetLife 						= AssetLife,
					AssetCategoryID 				= AssetCategoryID,
					AssetCategoryDesc 				= AssetCategoryDesc,
					AcquisitionTypeID 				= AcquisitionTypeID,
					AcquisitionTypeDesc 			= AcquisitionTypeDesc,
					IsTangible 						= Bool,
					IsIntangible 					= not Bool,
					DepDayBasisID 					= DepDayBasisID,
					DepDayBasisDesc 				= DepDayBasisDesc,
					DepreciationMethodID 			= DepreciationMethodID,
					DepreciationMethodDesc 			= DepreciationMethodDesc,
					DepreciationCategoryID 			= DepreciationCategoryID,
					DepreciationCategoryDesc 		= DepreciationCategoryDesc,
					AccumulatedCategoryID 			= AccumulatedCategoryID,
					AccumulatedCategoryDesc 		= AccumulatedCategoryDesc,
					AmortizationCategoryID 			= AmortizationCategoryID,
					AmortizationCategoryDesc 		= AmortizationCategoryDesc,
					AccumulatedAmortizationID 		= AccumulatedAmortizationID,
					AccumulatedAmortizationDesc 	= AccumulatedAmortizationDesc,
					RepairCategoryID				= RepairCategoryID,
					RepairCategoryDesc 				= RepairCategoryDesc,
					LossOnDisposalCategoryID 		= LossOnDisposalCategoryID,
					LossOnDisposalCategoryDesc 		= LossOnDisposalCategoryDesc,
					GainOnDisposalCategoryID 		= GainOnDisposalCategoryID,
					GainOnDisposalCategoryDesc 		= GainOnDisposalCategoryDesc,
					PercentageDep 					= PercentageDep,
					UnitOfProOrHourOfOpr 			= UnitOfProOrHourOfOpr,
					WholeLifeUnitOfProOrHourOfOpr	= WholeLifeUnitOfProOrHourOfOpr,
					IsDisabled   					= IsDisabled,
	)


@app.route("/Morakot/Asset/GetDepMethod", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def getDepMethod():
	DepMethod = request.args.get('DepMethod')
	AssetLife = request.args.get('AssetLife')
	IsDisabled = True
	PercentageDep = 0
	DepMethod = MKT_ASSET_DEPRE_REG.query.get(DepMethod)
	if AssetLife != '0':
		if str(DepMethod.Function).startswith('DECLINING'):
			PercentageDep = float("{0:.2f}".format((1 / float(AssetLife))*100))
		elif str(DepMethod.Function).startswith('DOUBLE'):
			PercentageDep = float("{0:.2f}".format((1 / float(AssetLife))*200))
		elif str(DepMethod.Function).startswith('THREE'):
			PercentageDep = float("{0:.2f}".format((1 / float(AssetLife))*150))
	if str(DepMethod.Function).endswith('BASED'):
		IsDisabled = False
		AssetLife = 0

	return jsonify(
					UnitOfProOrHourOfOpr 			= 0,
					WholeLifeUnitOfProOrHourOfOpr 	= 0,
					IsDisabled 						= IsDisabled,
					PercentageDep 					= PercentageDep,
					Bool 							= not IsDisabled,
					AssetLife 						= AssetLife
	)


@app.route("/Morakot/Asset/CurrencyField", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def currencyField():
	currency = request.args.get('Currency')
	return jsonify(Currency=currency)


@app.route("/Morakot/Asset/Total", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def determineFrequency():
	Amount = float(''.join(request.args.get('Total').split(',')))
	Description = ''
	row = MKT_ASSET_SETUP.query.filter(MKT_ASSET_SETUP.StartPrice<=Amount,MKT_ASSET_SETUP.EndPrice>=Amount).first()
	Frequency = row.Frequency if row else "__None"
	if str(Frequency) == 'Y':
		Description = "Annualy"
	elif str(Frequency) == "M":
		Description = "Monthly"
	elif str(Frequency) == "Q":
		Description = "Quarterly"
	elif str(Frequency) == "W":
		Description = "Weekly"
	elif str(Frequency) == "D":
		Description = "Daily"
	return jsonify(Frequency=Frequency, Description=Description)


@app.route("/Morakot/Asset/GetMaturityDate", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def getMaturityDate():
	ValueDate = request.args.get('ValueDate')
	AssetLife = request.args.get('AssetLife')
	Frequency = request.args.get('Frequency')
	DepreciationMethod = request.args.get('DepreciationMethod')
	UnitOfProOrHourOfOpr = ''.join(request.args.get('UnitOfProOrHourOfOpr').split(','))
	WholeLifeUnitOfProOrHourOfOpr = ''.join(request.args.get('WholeLifeUnitOfProOrHourOfOpr').split(','))
	SalvageValue = ''.join(request.args.get('SalvageValue').split(','))
	Total = ''.join(request.args.get('Total').split(','))
	DepDayBasis = request.args.get('DepDayBasis')
	NumberOfDay = 365 if DepDayBasis == '1' else 360
	MaturityDate = ''
	PercentageDep = 0
	Depreciation = 0

	DepMethod = MKT_ASSET_DEPRE_REG.query.get(DepreciationMethod)
	if AssetLife != '0':
		if str(DepMethod.Function).startswith('DECLINING'):
			PercentageDep = float("{0:.2f}".format((1 / float(AssetLife))*100))
		elif str(DepMethod.Function).startswith('DOUBLE'):
			PercentageDep = float("{0:.2f}".format((1 / float(AssetLife))*200))
		elif str(DepMethod.Function).startswith('THREE'):
			PercentageDep = float("{0:.2f}".format((1 / float(AssetLife))*150))


	if ValueDate != '' and AssetLife != '0' and Frequency != '' and UnitOfProOrHourOfOpr == '0' and WholeLifeUnitOfProOrHourOfOpr == '0':
		VD = ValueDate.split('-')
		MaturityDate = date(int(VD[0]),int(VD[1]),int(VD[2]))
		if Frequency == 'Y' or Frequency == 'M':
			MaturityDate = date(int(VD[0])+int(AssetLife)-1 , int(VD[1]), int(VD[2]))
			MaturityDate = mktdate.getNextMonth(MaturityDate,NumberOfNext=12)
		elif Frequency == 'Q' or Frequency == 'W':
			for i in xrange(0, int(AssetLife)):
				for j in xrange(0, 4):
					MaturityDate += timedelta(days=NumberOfDay/4)
		elif Frequency == 'D':
			MaturityDate += timedelta(days=int(AssetLife)*NumberOfDay)

	elif DepreciationMethod != '' and UnitOfProOrHourOfOpr !='0' and WholeLifeUnitOfProOrHourOfOpr !='0' and Frequency != '':
		VD = ValueDate.split('-')
		MaturityDate = 	date(int(VD[0]),int(VD[1]),int(VD[2]))
		Depreciation = (float(UnitOfProOrHourOfOpr)/float(WholeLifeUnitOfProOrHourOfOpr)) * (float(Total)-float(SalvageValue))
		if Depreciation !=0 :
			# Duration = (math.ceil(float(Total) / Depreciation))
			# if Frequency == 'Y':
			# 	MaturityDate = str(int(VD[0])+int(Duration)) + '-' + str(VD[1]) + '-' + str(VD[2])
			# if Frequency == 'M':
			# 	MaturityDate = getNextMonth(ValueDate, NumberOfNext=int(Duration))
			# elif Frequency == 'Q':
			# 	for i in xrange(0, int(Duration)):
			# 		MaturityDate += timedelta(days=NumberOfDay/4)
			# elif Frequency == 'W':
			# 	for i in xrange(0, int(Duration)):
			# 		MaturityDate += timedelta(days=7)
			# elif Frequency == 'D':
			# 	MaturityDate += timedelta(days=int(Duration))
			AssetLife = AverageYear(DaysDiff(ValueDate, str(MaturityDate)), NumberOfDay)

	return jsonify(	MaturityDate="",
					PercentageDep=PercentageDep,
					AssetLife=AssetLife
				  )


@app.route("/Morakot/Asset/GetNextRunDate", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def getNextRunDate():
	ValDate = request.args.get('ValueDate')
	Frequency = request.args.get('Frequency')
	
	NextRunDate = calculateNextRunDate(ValDate, {'Type':Frequency, 'Weekend':'FRI'}, True)
	return jsonify(NextRunDate=str(NextRunDate))


class FRM_ASSET(exform):
	AssetStatus 					= 	QuerySelectField("Asset Status",
													query_factory=loadAssetStatus, 
													# blank_text=u'--None--',								
													get_label=u'Description',														
													# default = lambda:loadAssetStatus('NEW'),
													# allow_blank=True,
													validators=[validators.Required()]
													)

	AssetSetup 						=	QuerySelectField('Asset Setup',
														query_factory=loadAssetSetup,
														get_label=u'Description',
														allow_blank=True,
														blank_text="--Choose Asset Setup--"														
														)
	Description  					=	TextAreaField(	requiredlabel('Description','*'), 
													validators=[validators.Required(), 
													validators.Length(max=30)]
													)
	SerialNumber  					=	TextField(	'Serial Number',
													# validators=[validators.Required(),
													default=None,
													validators=[validators.Length(max=35)]
													)
	AssetGroup  					=	QuerySelectField(requiredlabel("Asset Group","*"),
														query_factory=loadAssetGroup,
														blank_text=u'--Choose Asset Group--',
														get_label=u'Description',
														allow_blank=True,
														validators=[validators.Required()]
														)
	AssetType   					=	QuerySelectField(requiredlabel("Asset Type","*"),
														query_factory=loadAssetType,
														blank_text=u'--Choose Asset Type--',
														get_label=u'Description',
														allow_blank=True,
														validators=[validators.Required()]
														)
	AcquisitionType  				=	QuerySelectField(requiredlabel("Acquisition Type","*"),
													query_factory=loadAcquisitionType,
													blank_text=u'--Choose Acquisition Type--',
													get_label=u'Description',
													allow_blank=True,
													validators=[validators.Required()]
													)
	
	PaymentMethod					= 	QuerySelectField(requiredlabel("Payment Method","*"),
														query_factory=loadPaymentMethod,
														get_label=lambda a: a.CategoryID + " - " + a.Description,
														blank_text=u'--Choose Payment Method--',
														allow_blank=True,								
														validators=[validators.Required()],
														)
	CrAccount 						= 	RemoteTextField("Account")
	Vendor  						=	QuerySelectField('Vendor', 
														query_factory=loadVendor, 
														blank_text=u'Other',
														get_label=u'VendorName',
														allow_blank=lambda:loadDefault							
														# validators=[validators.Required()],
														)
	Brand   						=	TextField(	'Brand', 
													validators=[
																validators.Optional(), 
																validators.Length(max=20)
																]
													)
	Model   						=	TextField(	'Model',
													validators=[
																validators.Optional(), 
																validators.Length(max=20)
																]
													)
	ValueDate   					=	DateField(	requiredlabel("Purchasing Date","*"), 
													validators=[validators.Required()], 
													default=loadCurrentDate
													)
	
	Reference   					=	TextField("Reference")
	
	Total   						=	TextField(	requiredlabel("Total Amount","*"), 
													validators=[validators.Required()]
													)

	
	Remark  						=	TextAreaField(	'Remark', 
														validators=[validators.Length(max=100)]
														)

	#----------------------Consumption-----------------------
	Currency  						=	QuerySelectField(requiredlabel("Currency","*"),
														query_factory=loadCurrency, 
														blank_text=u'--Choose Currency--',								
														get_label=u'ID', 
														default = lambda:loadCurrency('USD'),
														allow_blank=True,
														validators=[validators.Required()],
														description="1-Consumption"
														)
	PurchasePriceUnits  			=	TextField(	requiredlabel("Purchase Price / Units","*"), 
													validators=[validators.Required()], 
													description="1-Consumption"
													)
	Quantity  						=	TextField(	requiredlabel("Quantity","*"), 
													validators=[validators.Required()], 
													default=1,
													description="1-Consumption"
													)
	Remaining   					=	TextField(	"Remaining", 
													# validators=[validators.Required()], 
													default=1,
													description="1-Consumption"
													)
	Discount  						=	TextField(	requiredlabel("Discount (%)","*"),
													validators=[validators.Required()],
													default=0,
													description="1-Consumption"
													)
	Amount  						=	TextField(	requiredlabel("Amount","*"),
													validators=[validators.Required()],
													description="1-Consumption"
													)
	#----------------------Depreciation---------------------
	AssetLife   					=	TextField(	requiredlabel("Asset Life (Year)","*"),
													description="2- %s"% 'Depreciation',
													validators = [validators.Required()]
													)
	MaturityDate  					=	DateField(	"Maturity Date",
													description="2- Depreciation",
													validators=[validators.Optional()]
													)
	Frequency 						=	SelectField(requiredlabel("Frequency of Depreciation","*"), 
													choices=[("","--Choose Frequency--"),("D","Daily"),("W","Weekly"),("M","Monthly"),("Q","Quaterly"),("Y","Annualy")],							
													description="2- %s"% 'Depreciation',
													validators=[validators.Required()]
													)
	DepDayBasis 					= 	SelectField("Depreciation Day Basis",
													choices=[('','--Choose Day Basis--'),('1','365/365'),('2','365/360')],
													description="2- %s"% 'Depreciation',
													)
	SalvageValue					=	TextField(	requiredlabel("Salvage Value","*"), 
													description="2- %s"% 'Depreciation', 
													default=0,
													validators=[validators.Required()]
													)
	DepreciationMethod  			=	QuerySelectField(requiredlabel("Depreciation Method","*"),
													query_factory=loadDepreciationMethod,
													description="2- %s"% 'Depreciation',
													allow_blank=True,
													blank_text='--Choose Depreciation Method--',
													get_label=u'Function',
													validators=[validators.Required()] 
													)
	UnitOfProOrHourOfOpr  			=	TextField(	"Unit Of Production / Hour Of Operation",
													description="2- %s"% 'Depreciation',
													default=0
													)
	WholeLifeUnitOfProOrHourOfOpr 	= 	TextField(	"Whole Life Unit Of Production / Hour Of Operation",
													description="2- %s"% 'Depreciation',
													default=0 
													)
	PreviousDepAmount				= 	TextField(	"Previous Depreciation Amount",
													description="2- %s"% 'Depreciation',
													default=0 
													)
	CurrentDepAmount				= 	TextField(	"Current Depreciation Amount",
													description="2- %s"% 'Depreciation',
													default=0 
													)
	AccumulatedDepreciation			= 	TextField(	"Accumulated Depreciation",
													description="2- %s"% 'Depreciation',
													default=0 
													)
	BeginningBookValue				= 	TextField(	"Beginning Book Value",
													description="2- %s"% 'Depreciation',
													default=0 
													)
	EndBookValue					= 	TextField(	"End Book Value",
													description="2- %s"% 'Depreciation',
													default=0 
													)

	PercentageDep					= 	TextField(	"Percentage Depreciation (%)",
													description="2- %s"% 'Depreciation',
													)	
	
	NextRunDate  					=	DateField(	requiredlabel("Next Run Date","*"), 
													description="2- %s"% 'Depreciation',
													validators=[validators.Required()]											
													)
	LastRunDate  					=	DateField(	"Last Run Date", 
													description="2- %s"% 'Depreciation', 
													validators=[validators.Optional()]
													)
	#-----------------------Category----------------------
	AssetCategory 		=	QuerySelectField(requiredlabel("Asset Category","*"),
										query_factory=loadAssetCategory,
										get_label=lambda c: c.ID + "-" + c.Description,
										blank_text=u'--Choose Asset Category--',
										allow_blank=True,
										validators=[validators.Required()],
										description="2-Category"
										)
	DepreciationCategory = QuerySelectField("Depreciation Category",
									query_factory=loadCategory, 
									blank_text=u'--Choose Depreciation Category--',
									get_label=lambda c: c.ID + "-" + c.Description, 
									allow_blank=True,
									description="2-Category"
									)
	AccumulatedCategory = QuerySelectField("Accumulated Category",
									query_factory=loadCategory, 
									blank_text=u'--Choose Accumulated Category--',
									get_label=lambda c: c.ID + "-" + c.Description, 
									allow_blank=True, 
									validators=[validators.Optional()],
									description="2-Category"
									)
	AmortizationCategory = QuerySelectField("Amortization Category",
									query_factory=loadCategory, 
									blank_text=u'--Choose Amortization Category--',
									get_label=lambda c: c.ID + "-" + c.Description, 
									allow_blank=True,
									validators=[validators.Optional()],
									description="2-Category"			
									)
	AccumulatedAmortization = QuerySelectField("Accumulated Amortization",
									query_factory=loadCategory, 
									blank_text=u'--Choose Accumulated Amortization--',
									get_label=lambda c: c.ID + "-" + c.Description, 
									allow_blank=True, 	
									validators=[validators.Optional()],
									description="2-Category"																				
									)
	RepairCategory = QuerySelectField(requiredlabel("Repair / Maintain Category","*"),
										query_factory=loadCategory,
										blank_text=u'--Choose Reparir / Maintain Category--',
										get_label=lambda c: c.ID + "-" + c.Description,
										allow_blank=True,
										validators=[validators.Required()],
										description="2-Category"
										)
	LossOnDisposalCategory = QuerySelectField(requiredlabel("Loss On Disposal Category","*"),
												  query_factory=loadCategory, 
												  blank_text=u'--Choose Loss On Disposal Category--',
												  get_label=lambda c: c.ID + "-" + c.Description, 
												  allow_blank=True, 
												  validators=[validators.Required()],
												  description="2-Category"
												 )
	GainOnDisposalCategory = QuerySelectField(requiredlabel("Gain On Disposal Category","*"),
												  query_factory=loadCategory, 
												  blank_text=u'--Choose Gain On Disposal Category--',
												  get_label=lambda c: c.ID + "-" + c.Description, 
												  allow_blank=True, 
												  validators=[validators.Required()],
												  description="2-Category"
												 )
	#----------------------Invisible Fields---------------------
	RecordType						=	TextField('RecordType', default='1')
	AssigneeID						= 	TextField('Assignee ID')
	AssigningDate					= 	TextField('Assigning Date')


	def validate_PaymentMethod(form, field):
		Category = str(field.data.CategoryID)
		Currency = form.Currency.data.ID
		Audit 		= mktaudit.getAuditrail()
		Inputter	= Audit['Inputter']
		Branch 		= Audit['Branch']
		if mktteller.isCashCateogry(Category):
			if Currency:
				AccountObj 	= mktteller.getCashAccountByCategory(Category,Currency,Inputter,Branch)				
				if not AccountObj[0]:
					raise ValidationError(AccountObj[1])


	def validate_AccumulatedAmortization(form, field):
		AccumulatedAmortization = field.data
		AssetType = form.AssetType.data
		if AssetType:
			if str(AssetType.Type) == 'I' and AccumulatedAmortization == None:
				raise ValidationError('You have to choose AccumulatedAmortization because your asset type is intangible.')
			elif str(AssetType.Type) == 'T' and AccumulatedAmortization != None:
				raise ValidationError('You cannot choose AccumulatedAmortization because your asset type is tangible.')


	def validate_AmortizationCategory(form, field):
		AmortizationCategory = field.data
		AssetType = form.AssetType.data
		if AssetType:
			if str(AssetType.Type) == 'I' and AmortizationCategory == None:
				raise ValidationError('You have to choose AmortizationCategory because your asset type is intangible.')
			elif str(AssetType.Type) == 'T' and AmortizationCategory != None:
				raise ValidationError('You cannot choose AmortizationCategory because your asset type is tangible.')


	def validate_DepreciationCategory(form, field):
		DepreciationCategory = field.data
		AssetType = form.AssetType.data
		if AssetType:
			if str(AssetType.Type) == 'T' and DepreciationCategory == None:
				raise ValidationError('You have to choose DepreciationCategory because your asset type is tangible.')
			elif str(AssetType.Type) == 'I' and DepreciationCategory != None:
				raise ValidationError('You cannot choose DepreciationCategory because your asset type is intangible.')


	def validate_AccumulatedCategory(form ,field):
		AccumulatedCategory = field.data
		AssetType = form.AssetType.data
		if AssetType:
			if str(AssetType.Type) == 'T' and AccumulatedCategory == None:
				raise ValidationError('You have to choose AccumulatedCategory because your asset type is tangible.')
			elif str(AssetType.Type) == 'I' and AccumulatedCategory != None:
				raise ValidationError('You cannot choose DepreciationCategory because your asset type is intangible.')


	def validate_CrAccount(form, field):
		try:
			CrAccount 		= form.CrAccount.data
			PaymentMethod 	= request.form['PaymentMethod']  if 'PaymentMethod' in request.form else ''
			PaymentMethod 	= MKT_ASSET_PAYMENT_ME.query.get(PaymentMethod)
			Currency 		= request.form['Currency']  if 'Currency' in request.form else ''			
			Amount 			= form.Total.data
			TransactionDate	= str(form.ValueDate.data)

			if mktteller.isAmountInDecimal(Amount):
				Amount 		= Decimal(Amount)

			if CrAccount:
				AccObj = MKT_ACCOUNT.query.get(CrAccount)
				if AccObj :
					AccCategory = AccObj.AccCategory					
					if AccCategory != str(PaymentMethod.CategoryID):
						raise ValidationError("Credit category not belong to account.")
						
					# CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, Currency, Decimal(Amount), "Cr",TranDate=TransactionDate)
					CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, Currency, Decimal(Amount), "Cr")

					if CheckBalance:
						raise ValidationError(CheckBalance)
		except:
			raise


	def validate_Amount(form, field):
		Amount = field.data
		if mkttool.isFloat(Amount):
			if Amount <= 0:
				raise ValidationError("Amount must be bigger than zero")


	def validate_AssetLife(form,field):
		try:
			AssetLife = float(field.data)
		except:
			raise ValidationError("Asset Life must be number.")


	def validate_ValueDate(form, field):
		TranDate = str(field.data)
		
		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")			

		except Exception, e:
			print e 
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)


	def validate_NextRunDate(form, field):
		ValueDate = str(form.ValueDate.data)
		Frequency = str(form.Frequency.data)
		
		NextRunDateField = str(field.data)
		NextRunDate = calculateNextRunDate(ValueDate, {'Type':Frequency, 'Weekend':'FRI'}, True)
		
		if NextRunDateField != str(NextRunDate):
			raise ValidationError("Invalid NextRunDate.")
		

	def validate_Currency(form,field):
		AccountID = form.CrAccount.data
		if AccountID == '':
			return
		Currency = request.form['Currency']
		Account = MKT_ACCOUNT.query.get(AccountID)
		
		if str(Account.Currency) != Currency:
			raise ValidationError('Account currency and currency must be the same! %s != %s'%(str(Account.Currency),Currency))


	@staticmethod
	def moneyField():
		return [
				["PurchasePriceUnits","Currency"],
				["Amount","Currency","Total"],
				["SalvageValue","Currency"],
				["AccumulatedDepreciation","Currency"],
				["EndBookValue","Currency"],
				["UnitOfProOrHourOfOpr","Currency"],
				["WholeLifeUnitOfProOrHourOfOpr","Currency"],
				["BeginningBookValue","Currency"],
				["PreviousDepAmount","Currency"],
				["CurrentDepAmount","Currency"],
				]


	@staticmethod
	def setDisable():
		
		Fields = [	
					('Amount'),
					('PercentageDep'),
					('NextRunDate'),
					('LastRunDate'),
					('MaturityDate'),
					('Total'),
					('Remaining'),
					('Quantity'),
					('AccumulatedDepreciation'),
					('EndBookValue'),
					('AssetStatus'),
					('BeginningBookValue'),
					('PreviousDepAmount'),
					('CurrentDepAmount'),
					]

		if request.method == "POST":
			AssetType = request.form['AssetType']
			if AssetType != "":
				MktAssetType = MKT_ASSET_TYPE.query.get(AssetType)
				Type = str(MktAssetType.Type) if MktAssetType else ""
				if Type == "I":
					Fields.extend([('DepreciationCategory'), ('AccumulatedCategory')])
				else:
					Fields.extend([('AccumulatedAmortization'), ('AmortizationCategory')])

		return Fields


	@staticmethod
	def hotField():
		hotfield=[]
	
		fielddisplay = "$('#Amount').val(data.Amount);"
		fielddisplay += "$('#PurchasePriceUnits').val(data.Price);"
		fielddisplay += "$('#Amount').trigger('blur')"
		varname = "Quantity:$('#Quantity').val(), Price:$('#PurchasePriceUnits').val(), Discount:$('#Discount').val(), Currency:$('#Currency').val()"
		fun = ["Discount", varname, fielddisplay, "/Morakot/Asset/CalculateAmount", "blur"]
		hotfield.append(fun)

		fun = ["PurchasePriceUnits", varname, fielddisplay, "/Morakot/Asset/CalculateAmount", "blur"]
		hotfield.append(fun)

		fun = ["Currency", varname, fielddisplay, "/Morakot/Asset/CalculateAmount", "change"]
		hotfield.append(fun)
			
		fielddisplay = "$('#Frequency').select2('data',{'id':data.Frequency,'text':data.Description})"
		varname = "Total:$('#Total').val()"
		fun = ["Remark", varname, fielddisplay, "/Morakot/Asset/Total", "blur"]
		hotfield.append(fun)

		fielddisplay = "$('#MaturityDate').val(data.MaturityDate);"
		fielddisplay += "$('#PercentageDep').val(data.PercentageDep);"		
		varname = "ValueDate:$('#ValueDate').val(), AssetLife:$('#AssetLife').val(), DepreciationMethod:$('#DepreciationMethod').val(), Frequency:$('#Frequency').val(), Total:$('#Total').val(), UnitOfProOrHourOfOpr:$('#UnitOfProOrHourOfOpr').val(), WholeLifeUnitOfProOrHourOfOpr:$('#WholeLifeUnitOfProOrHourOfOpr').val(), SalvageValue:$('#SalvageValue').val(),DepDayBasis:$('#DepDayBasis').val()" 
		fun = ["AssetLife", varname, fielddisplay, "/Morakot/Asset/GetMaturityDate", "blur"]
		hotfield.append(fun)

		fielddisplay = "$('#MaturityDate').val(data.MaturityDate);"
		fielddisplay += "$('#AssetLife').val(data.AssetLife);"
		varname = "ValueDate:$('#ValueDate').val(), AssetLife:$('#AssetLife').val(), DepreciationMethod:$('#DepreciationMethod').val(), Frequency:$('#Frequency').val(), Total:$('#Total').val(), UnitOfProOrHourOfOpr:$('#UnitOfProOrHourOfOpr').val(), WholeLifeUnitOfProOrHourOfOpr:$('#WholeLifeUnitOfProOrHourOfOpr').val(), SalvageValue:$('#SalvageValue').val(),DepDayBasis:$('#DepDayBasis').val()" 
		fun = ["WholeLifeUnitOfProOrHourOfOpr", varname, fielddisplay, "/Morakot/Asset/GetMaturityDate", "blur"]
		hotfield.append(fun)

		fun = ["UnitOfProOrHourOfOpr", varname, fielddisplay, "/Morakot/Asset/GetMaturityDate", "blur"]
		hotfield.append(fun)

		fun = ["Frequency", varname, fielddisplay, "/Morakot/Asset/GetMaturityDate", "click"]
		hotfield.append(fun)

		fun = ["Remark", varname, fielddisplay, "/Morakot/Asset/GetMaturityDate", "blur"]
		hotfield.append(fun)

		fun = ["ValueDate", varname, fielddisplay, "/Morakot/Asset/GetMaturityDate", "blur"]
		hotfield.append(fun)

		fun = ["DepDayBasis", varname, fielddisplay, "/Morakot/Asset/GetMaturityDate", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#NextRunDate').val(data.NextRunDate)"
		varname = "ValueDate:$('#ValueDate').val(), Frequency:$('#Frequency').val(), AssetGroup:$('#AssetGroup').val(), AssetType:$('#AssetType').val()"
		fun = ["AssetLife", varname, fielddisplay, "/Morakot/Asset/GetNextRunDate", "focus"]
		hotfield.append(fun)

		fun = ["Frequency", varname, fielddisplay, "/Morakot/Asset/GetNextRunDate", "change"]
		hotfield.append(fun)

		fun = ["Remark", varname, fielddisplay, "/Morakot/Asset/GetNextRunDate", "focus"]
		hotfield.append(fun)

		fun = ["ValueDate", varname, fielddisplay, "/Morakot/Asset/GetNextRunDate", "blur"]
		hotfield.append(fun)

		fielddisplay = "$('#Remaining').val(data.Remaining)"
		varname = "Quantity:$('#Quantity').val()"
		fun = ["Quantity", varname, fielddisplay, "/Morakot/Asset/GetRemaining", "blur"]
		hotfield.append(fun)

		fielddisplay = "$('#PaymentMethod').select2('data',{'id':data.PaymentMethodID, 'text':data.PaymentMethodDesc});"
		fielddisplay += "$('#Currency').select2('data',{'id':data.CurrencyID, 'text':data.CurrencyDesc});"
		varname = "CrAccount:$('#CrAccount').val()"
		fun = ["CrAccount", varname, fielddisplay, "/Morakot/Asset/AccountCategory", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#CrAccount').select2('data',{'id':data.AccountID, 'text':data.AccountDesc});"
		varname = "PaymentMethod:$('#PaymentMethod').val(), Currency:$('#Currency').val()"
		fun = ["PaymentMethod", varname, fielddisplay, "/Morakot/Asset/PaymentMethod", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#AssetGroup').select2('data', {'id':data.AssetGroupID, 'text':data.AssetGroupDesc});"
		fielddisplay += "$('#AssetType').select2('data', {'id':data.AssetTypeID, 'text':data.AssetTypeDesc});"
		fielddisplay += "$('#AssetLife').val(data.AssetLife);"
		fielddisplay += "$('#AssetCategory').select2('data',{'id':data.AssetCategoryID,'text':data.AssetCategoryDesc});"
		fielddisplay += "$('#AcquisitionType').select2('data',{'id':data.AcquisitionTypeID,'text':data.AcquisitionTypeDesc});"
		
		fielddisplay += "$('#DepreciationMethod').select2('data',{'id':data.DepreciationMethodID, 'text':data.DepreciationMethodDesc});"
		fielddisplay += "$('#PercentageDep').val(data.PercentageDep);"
		fielddisplay += "$('#AssetCategory').select2('data',{'id':data.AssetCategoryID,'text':data.AssetCategoryDesc});"
		
		fielddisplay += "$('#DepDayBasis').select2('data',{'id':data.DepDayBasisID,'text':data.DepDayBasisDesc});"
		fielddisplay += "$('#DepreciationCategory').select2('data',{'id':data.DepreciationCategoryID,'text':data.DepreciationCategoryDesc});"
		fielddisplay += "$('#AccumulatedCategory').select2('data',{'id':data.AccumulatedCategoryID,'text':data.AccumulatedCategoryDesc});"
		fielddisplay += "$('#DepreciationCategory').select2('readonly', data.IsTangible);"
		fielddisplay += "$('#AccumulatedCategory').select2('readonly', data.IsTangible);"
		
		fielddisplay += "$('#AmortizationCategory').select2('data',{'id':data.AmortizationCategoryID,'text':data.AmortizationCategoryDesc});"
		fielddisplay += "$('#AccumulatedAmortization').select2('data',{'id':data.AccumulatedAmortizationID,'text':data.AccumulatedAmortizationDesc});"
		fielddisplay += "$('#AmortizationCategory').select2('readonly', data.IsIntangible);"
		fielddisplay += "$('#AccumulatedAmortization').select2('readonly', data.IsIntangible);"
		fielddisplay += "$('#RepairCategory').select2('data',{'id':data.RepairCategoryID,'text':data.RepairCategoryDesc});"
		fielddisplay += "$('#LossOnDisposalCategory').select2('data',{'id':data.LossOnDisposalCategoryID,'text':data.LossOnDisposalCategoryDesc});"
		fielddisplay += "$('#GainOnDisposalCategory').select2('data',{'id':data.GainOnDisposalCategoryID,'text':data.GainOnDisposalCategoryDesc});"
		fielddisplay += "$('#UnitOfProOrHourOfOpr').attr('readonly',data.IsDisabled);"
		fielddisplay += "$('#UnitOfProOrHourOfOpr').val(data.UnitOfProOrHourOfOpr);"
		fielddisplay += "$('#WholeLifeUnitOfProOrHourOfOpr').attr('readonly',data.IsDisabled);"
		fielddisplay += "$('#WholeLifeUnitOfProOrHourOfOpr').val(data.WholeLifeUnitOfProOrHourOfOpr);"		
		fielddisplay += "$('#AssetLife').trigger('blur');"
		fielddisplay += "$('#Frequency').trigger('click');"


		varname = "AssetSetup:$('#AssetSetup').val()"
		fun = ["AssetSetup", varname, fielddisplay, "/Morakot/Asset/AssetSetup", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#UnitOfProOrHourOfOpr').attr('readonly',data.IsDisabled);"
		fielddisplay += "$('#UnitOfProOrHourOfOpr').val(data.UnitOfProOrHourOfOpr);"
		fielddisplay += "$('#WholeLifeUnitOfProOrHourOfOpr').attr('readonly',data.IsDisabled);"
		fielddisplay += "$('#WholeLifeUnitOfProOrHourOfOpr').val(data.WholeLifeUnitOfProOrHourOfOpr);"
		fielddisplay += "$('#PercentageDep').val(data.PercentageDep);"
		fielddisplay += "$('#AssetLife').val(data.AssetLife);"
		fielddisplay += "$('#AssetLife').attr('readonly', data.Bool);"
		fielddisplay += "$('#AssetLife').trigger('blur');"

		varname = "DepMethod:$('#DepreciationMethod').val(),AssetLife:$('#AssetLife').val()"
		fun = ["DepreciationMethod", varname, fielddisplay, "/Morakot/Asset/GetDepMethod", "change"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def listField():
		Fields = [
					"ID",
					"Description",
					"ValueDate",
					"MaturityDate",
					"AssetLife",
					"DepreciationMethod",
					"Currency",
					"Total",
					"AccumulatedDepreciation",
					"EndBookValue"
				 ]
		Audit = mktaudit.getAuditrail()
		Branch = Audit['Branch']
		return Fields, ["RecordType*EQ*1","Branch*EQ*{0}".format(Branch)]

	@staticmethod
	def setVisible():
		Fields = [	('Quantity'),
					('Remaining'),
					('RecordType'),
					('AssigneeID'),
					('AssigningDate'),
					('Total')
					]
		return Fields


	@staticmethod
	def setWidth():
		control_list= [
					   ('Frequency', len2),
					   ('DepDayBasis', len2),
					   ('AssetLife', len1),
					   ('NextRunDate', len3),
					   ('LastRunDate', len3),
					   ('ValueDate', len3),
					   ('MaturityDate', len3),
					   ('AssetStatus', len3),
					   ('PercentageDep', len1),
					   ]
					   
		return control_list


	@staticmethod
	def formReadOnly():
		return "AUTH"


	@staticmethod
	def beforeInsert():
		AuthLevel = g.getNAuthorize
		try:
			if AuthLevel == 0:
				Asset = MKT_ASSET.query.filter(MKT_ASSET.SerialNumber=="", MKT_ASSET.RecordType=="1").all()
				for row in Asset:
					row.SerialNumber = None
				db.session.commit()
				postAccounting(Reverse=False)
			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()
			return False


	@staticmethod
	def redirectAfterInsert():
		AuthLevel 		= g.getNAuthorize
		ValueDate 		= str(request.form['ValueDate'])
		SystemDate 		= str(mktdate.getBankDate())
		AssetID 		= str(request.form['ID'])
		ID 				= AssetID
		Frequency 		= str(request.form['Frequency'])
		Debit 			= str(request.form['DepreciationCategory'])
		Credit 			= str(request.form['AccumulatedCategory'])
		Branch 			= str(request.form['Branch'])
		Currency 		= str(request.form['Currency'])
		Depreciation 	= None
		NextDepreciation= None
		BookingAmount 	= 0
		NextRunDate 	= ''
		LastRunDate 	= ''
		EndBookValue 	= 0
		
		try:
			if ValueDate < SystemDate:
				if AuthLevel == 0:
					if Frequency != "D":
						Depreciation = 	MKT_ASSET_DEPRE_SCHEDULE.query.\
										filter(
												MKT_ASSET_DEPRE_SCHEDULE.ID == ID,
												MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus == 'n',
												cast(MKT_ASSET_DEPRE_SCHEDULE.EndDate, String) < str(SystemDate)
												).\
										order_by(cast(MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo, Integer)).\
										all()
						LastRunDate = str(Depreciation[-1].EndDate)
						EndBookValue = float(Depreciation[-1].EndBookValue)
						NextDepreciation = MKT_ASSET_DEPRE_SCHEDULE.query.\
											filter(MKT_ASSET_DEPRE_SCHEDULE.ID == ID).\
											filter(MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus == 'n').\
											filter(cast(MKT_ASSET_DEPRE_SCHEDULE.EndDate, String) >= str(SystemDate)).\
											first()
						NextRunDate = str(NextDepreciation.EndDate)
					else:
						Depreciation = 	MKT_ASSET_DEPRE_SCHEDULE.query.\
										filter(
												MKT_ASSET_DEPRE_SCHEDULE.ID == ID,
												MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus == 'n',
												cast(MKT_ASSET_DEPRE_SCHEDULE.StartDate, String) < str(SystemDate)
												).\
										order_by(cast(MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo, Integer)).\
										all()
						NextDepreciation = MKT_ASSET_DEPRE_SCHEDULE.query.\
											filter(MKT_ASSET_DEPRE_SCHEDULE.ID == ID).\
											filter(MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus == 'n').\
											filter(cast(MKT_ASSET_DEPRE_SCHEDULE.StartDate, String) == str(SystemDate)).\
											first()
						LastRunDate = str(Depreciation[-1].StartDate)
						EndBookValue = float(Depreciation[-1].EndBookValue)
						NextRunDate = str(Depreciation[-1].EndDate)
					if Depreciation:
						CurrentAsset = MKT_ASSET.query.get(AssetID)
						for row in Depreciation:
							row.DepreciationStatus = 'y'
							BookingAmount += float(row.Depreciation)

						CurrentAsset.AccumulatedDepreciation = BookingAmount
						CurrentAsset.BeginningBookValue = float(CurrentAsset.Total)
						CurrentAsset.EndBookValue = EndBookValue
						CurrentAsset.PreviousDepAmount = BookingAmount
						CurrentAsset.CurrentDepAmount = float(NextDepreciation.Depreciation) if NextDepreciation else 0
						CurrentAsset.LastRunDate = LastRunDate
						CurrentAsset.NextRunDate = NextRunDate
						
						postAccountingDepBooking(BookingAmount, Debit, Credit, Currency, str(CurrentAsset.Branch), AssetID, ValueDate)

			if AuthLevel == 0:
				LastScheduleInstallment = MKT_ASSET_DEPRE_SCHEDULE.query.filter_by(ID = ID).\
											order_by(desc(cast(MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo, Integer))).first()
				Asset = MKT_ASSET.query.get(AssetID)
				Asset.MaturityDate = str(LastScheduleInstallment.EndDate)

			db.session.commit()
			return None

		except Exception, e:
			print "Error", e
			db.session.rollback()
			db.session.close()
			return False


	@staticmethod
	def beforeAuthorize():
		AuthLevel 		= g.getNAuthorize
		ID 				= g.formID
		Asset 			= MKT_ASSET_INAU.query.get(ID)
		AssetID 		= ID
		
		SystemDate 		= str(mktdate.getBankDate())
		ValueDate 		= str(Asset.ValueDate)
		Frequency 		= str(Asset.Frequency)
		Debit 			= str(Asset.DepreciationCategory)
		Credit 			= str(Asset.AccumulatedCategory)
		Branch 			= str(Asset.Branch)
		Currency 		= str(Asset.Currency)
		Depreciation 	= None
		NextDepreciation= None
		BookingAmount 	= 0
		NextRunDate 	= ''
		LastRunDate 	= ''
		EndBookValue 	= 0
		try:
			if str(Asset.Status) == "RNAU":
				ID 				= str(Asset.PaymentMethod)
				row 			= MKT_ASSET_PAYMENT_ME.query.get(ID)
				PaymentMethod 	= str(row.CategoryID)
				AssetCategory 	= str(Asset.AssetCategory)
				AssetPrice		= Asset.Total
				TranDate		= Asset.ValueDate
				Currency 		= Asset.Currency
				AssetType		= MKT_ASSET_TYPE.query.get(Asset.AssetType)
				AssetGroup 		= MKT_ASSET_GROUP.query.get(Asset.AssetGroup)
				Note 			= str(AssetType.Description) + '-' + str(AssetGroup.Description)
				Account 		= str(Asset.CrAccount) if Asset else ''
				AcquisitionType = MKT_ASSET_ACQUISITION.query.get(str(Asset.AcquisitionType))
				Transaction 	= str(AcquisitionType.Transaction) if AcquisitionType else ""
				postAccounting(Reverse=True,Debit=PaymentMethod,Credit=AssetCategory,Account=Account,AssetID=Asset.ID,AssetPrice=AssetPrice,TranDate=TranDate,Currency=Currency,Note=Note,Transaction=Transaction)
				
				#---Delete depreciation schedule after reverse record
				db.session.query(MKT_ASSET_DEPRE_SCHEDULE).filter_by(ID=Asset.ID).delete()
				db.session.commit()
			else:
				postAccounting(Reverse=False)
				if str(Asset.SerialNumber)=='':
					Asset.SerialNumber = None

				LastScheduleInstallment = MKT_ASSET_DEPRE_SCHEDULE.query.filter_by(ID = ID).\
											order_by(desc(cast(MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo, Integer))).first()
				print "--------LSI-------", LastScheduleInstallment
				Asset.MaturityDate = str(LastScheduleInstallment.EndDate)
				
				if ValueDate < SystemDate:
					if Frequency != "D":
						Depreciation = 	MKT_ASSET_DEPRE_SCHEDULE.query.\
										filter(
												MKT_ASSET_DEPRE_SCHEDULE.ID == AssetID,
												cast(MKT_ASSET_DEPRE_SCHEDULE.EndDate, String) < str(SystemDate)
												).\
										order_by(cast(MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo, Integer)).\
										all()
						if len(Depreciation) != 0:
							LastRunDate = str(Depreciation[-1].EndDate)
							EndBookValue = float(Depreciation[-1].EndBookValue)
							NextDepreciation = MKT_ASSET_DEPRE_SCHEDULE.query.\
												filter(MKT_ASSET_DEPRE_SCHEDULE.ID == AssetID).\
												filter(cast(MKT_ASSET_DEPRE_SCHEDULE.EndDate, String) >= str(SystemDate)).\
												order_by(cast(MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo, Integer)).\
												first()
							NextRunDate = str(NextDepreciation.EndDate)
					else:
						Depreciation = 	MKT_ASSET_DEPRE_SCHEDULE.query.\
										filter(
												MKT_ASSET_DEPRE_SCHEDULE.ID == AssetID,
												cast(MKT_ASSET_DEPRE_SCHEDULE.StartDate, String) < str(SystemDate)
												).\
										order_by(cast(MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo, Integer)).\
										all()
						
						if len(Depreciation) != 0:
							NextDepreciation = MKT_ASSET_DEPRE_SCHEDULE.query.\
												filter(MKT_ASSET_DEPRE_SCHEDULE.ID == AssetID).\
												filter(cast(MKT_ASSET_DEPRE_SCHEDULE.StartDate, String) == str(SystemDate)).\
												first()
							LastRunDate = str(Depreciation[-1].StartDate)
							EndBookValue = float(Depreciation[-1].EndBookValue)
							NextRunDate = str(Depreciation[-1].EndDate)
					# if len(Depreciation)!=0:
					for row in Depreciation:
						row.DepreciationStatus = 'y'
						BookingAmount += float(row.Depreciation)

					Asset.AccumulatedDepreciation = BookingAmount
					Asset.BeginningBookValue = float(Asset.Total)
					Asset.EndBookValue = EndBookValue
					Asset.PreviousDepAmount = BookingAmount
					Asset.CurrentDepAmount = float(NextDepreciation.Depreciation) if NextDepreciation else 0
					Asset.LastRunDate = LastRunDate
					Asset.NextRunDate = NextRunDate

					postAccountingDepBooking(BookingAmount, Debit, Credit, Currency, Branch, AssetID, ValueDate)

			return True
		except Exception, e:			
			db.session.rollback()
			db.session.close()
			flash(msg_error + str(e))
			return False


	@staticmethod
	def reverseRec():
		Asset 			= MKT_ASSET.query.get(g.formID)
		SystemDate 		= loadCurrentDate()
		ValueDate 		= str(Asset.ValueDate)
		AuthLevel 		= g.getNAuthorize
		ID 				= str(Asset.PaymentMethod)
		row 			= MKT_ASSET_PAYMENT_ME.query.get(ID)
		PaymentMethod 	= str(row.CategoryID)
		AssetCategory 	= str(Asset.AssetCategory)
		AssetPrice		= Asset.Total
		TranDate		= Asset.ValueDate
		Currency 		= Asset.Currency
		AssetType		= MKT_ASSET_TYPE.query.get(Asset.AssetType)
		AssetGroup 		= MKT_ASSET_GROUP.query.get(Asset.AssetGroup)
		Note 			= str(AssetType.Description) + '-' + str(AssetGroup.Description)
		Account 		= str(Asset.CrAccount) if Asset else ''
		AcquisitionType = MKT_ASSET_ACQUISITION.query.get(str(Asset.AcquisitionType))
		Transaction 	= str(AcquisitionType.Transaction) if AcquisitionType else ""
		
		if ValueDate == str(SystemDate):
			if AuthLevel == 0:
				postAccounting(Reverse=True,Debit=PaymentMethod,Credit=AssetCategory,Account=Account,AssetID=Asset.ID,AssetPrice=AssetPrice,TranDate=TranDate,Currency=Currency,Note=Note,Transaction=Transaction)
				#---Delete depreciation schedule after reverse record
				db.session.query(MKT_ASSET_DEPRE_SCHEDULE).filter_by(ID=Asset.ID).delete()
				
				#---Move Asset record to HIST
				mktaudit.moveAUTHtoHIST(MKT_ASSET,MKT_ASSET_HIST,g.formID)
				Asset = MKT_ASSET.query.get(g.formID)
				db.session.delete(Asset)
				db.session.commit()
			return True,""

		return False,""


def postAccounting(Reverse=False,Debit='',Credit='',Account='',AssetID='',AssetPrice=0,TranDate='',Currency='',Note='',Transaction=''):
		Audit 								= mktaudit.getAuditrail()
		Inputter							= Audit['Inputter']
		Createdon 							= Audit['Createdon']
		Authorizer 							= Audit['Authorizer']
		Authorizeon							= Audit['Authorizeon']
		Branch 								= Audit['Branch']
		AuthLevel 							= g.getNAuthorize
		Transaction = ''
		if not Reverse :
			if AuthLevel == 1:
				AssetInau 						= MKT_ASSET_INAU.query.get(g.formID)
				PaymentMethod 					= MKT_ASSET_PAYMENT_ME.query.get(str(AssetInau.PaymentMethod))
				Credit 							= str(PaymentMethod.CategoryID)
				TranDate 						= str(AssetInau.ValueDate)
				AssetLife 						= str(AssetInau.AssetLife)
				AssetPrice 						= str(AssetInau.Total)
				Frequency 						= str(AssetInau.Frequency)
				SalvageValue 					= str(AssetInau.SalvageValue)
				AssetID 						= str(AssetInau.ID)
				Method 							= str(AssetInau.DepreciationMethod)
				DepDayBasis 					= str(AssetInau.DepDayBasis)
				Debit 							= str(AssetInau.AssetCategory)
				Currency 						= str(AssetInau.Currency)
				AssetGroupID 					= str(AssetInau.AssetGroup)
				AssetGroup 						= MKT_ASSET_GROUP.query.get(AssetGroupID)
				AssetTypeID 					= str(AssetInau.AssetType)
				AssetType 						= MKT_ASSET_TYPE.query.get(AssetTypeID)
				NumberOfDay 					= 0
				Note 							= str(AssetGroup.Description) + "-" + str(AssetType.Description)
				Account 						= str(AssetInau.CrAccount)
				UnitOfProOrHourOfOpr 			= str(AssetInau.UnitOfProOrHourOfOpr)
				WholeLifeUnitOfProOrHourOfOpr 	= str(AssetInau.WholeLifeUnitOfProOrHourOfOpr)
				AcquisitionType = MKT_ASSET_ACQUISITION.query.get(str(AssetInau.AcquisitionType))
				Transaction = str(AcquisitionType.Transaction)

			elif AuthLevel == 0:
				PaymentMethod 					= MKT_ASSET_PAYMENT_ME.query.get(str(request.form['PaymentMethod']))
				Credit 							= PaymentMethod.CategoryID
				TranDate 						= request.form['ValueDate']
				AssetLife 						= request.form['AssetLife']
				AssetPrice 						= request.form['Total']
				Frequency 						= request.form['Frequency']
				SalvageValue 					= request.form['SalvageValue']
				AssetID 						= request.form['ID']
				Method 							= request.form['DepreciationMethod']
				DepDayBasis 					= request.form['DepDayBasis']
				Debit 							= request.form['AssetCategory']
				Currency 						= request.form['Currency']
				AssetGroupID 					= request.form['AssetGroup']
				AssetGroup 						= MKT_ASSET_GROUP.query.get(AssetGroupID)
				AssetTypeID 					= request.form['AssetType']
				AssetType 						= MKT_ASSET_TYPE.query.get(AssetTypeID)
				NumberOfDay 					= 0
				Note 							= str(AssetGroup.Description) + "-" + str(AssetType.Description)
				Account 						= request.form['CrAccount']
				UnitOfProOrHourOfOpr 			= request.form['UnitOfProOrHourOfOpr']
				WholeLifeUnitOfProOrHourOfOpr 	= request.form['WholeLifeUnitOfProOrHourOfOpr']
				AcquisitionType = MKT_ASSET_ACQUISITION.query.get(request.form['AcquisitionType'])
				Transaction = str(AcquisitionType.Transaction)

		CrMode = "" if mktteller.isCashCateogry(Credit if Reverse==False else Debit) else "Direct"

		for i in range(0, 2):
			if i == 0:
				DrCr 		= 	"Dr"
				Mode 		= 	"Direct" if Reverse == False else CrMode
				Category 	= 	Debit
			else:
				DrCr 		= 	"Cr"
				Mode 		= 	CrMode if Reverse == False else "Direct"
				Category 	= 	Credit
			
			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
			DateTimeNow = mktdate.getDateTimeNow()
						
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				Inputter,				# Inputter
				Createdon, 				# Createdon
				Authorizer,				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(AssetPrice), 	# Amount
				"AM",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				AssetID, 				# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode 					# Mode check to insert Journal for category
			)
			print "Start booking #%s -%s"%(i+1,DrCr)
		
		#---Generate and save depreciation schedule after post accounting if it is not reverse action
		if not Reverse :
			NumberOfDay = 365 if DepDayBasis == '1' else 360
			db.session.query(MKT_ASSET_DEPRE_SCHEDULE).filter_by(ID=AssetID).delete()
			SkippedInstallment = 0
			InstallmentNo = 0
			DepreciationSchedule.SaveItemWithMethod(InstallmentNo, SkippedInstallment, 'LIVE', Method, Branch, '', '0', Inputter, Createdon, Authorizer, Authorizeon, AssetID, TranDate, int(AssetLife), float(AssetPrice), Frequency, NumberOfDay, float(SalvageValue), float(UnitOfProOrHourOfOpr), float(WholeLifeUnitOfProOrHourOfOpr))	
			# db.session.commit()