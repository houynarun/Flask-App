from ..FixedAsset.models 							import MKT_ASSET_INAU, MKT_ASSET, MKT_ASSET_HIST, MKT_ASSET_CONSUMPTION
from ..Depreciation.models 							import MKT_ASSET_DEPRE_SCHEDULE, MKT_ASSET_DEPRE_SCHEDULE_HIST
from ..AssetAssigning.models 						import MKT_ASSET_ASSIGNING, MKT_ASSET_ASSIGNING_INAU
from ..PaymentMethod.models							import MKT_ASSET_PAYMENT_ME
from app.Setting.models 							import MKT_APP_SETTING
from app.Currency.models 							import *
from app.Currency.models 							import *
from ..DisposalType.models 							import *
from ..AssetSetup.models							import *
from .models 										import *
from app.mktcore.wtfimports 						import *

from decimal 										import *
from app.Account.models 							import *
from app.Category.models 							import *
from app.mktcore.session 							import *
from app 											import db
from datetime 										import datetime, date
from app.tools.mktaccounting 						import postAccounting,getConsolKey
from app.tools.mktdate 								import getDateTimeNow
import app.tools.mktmoney 								as mktmoney
import app.tools.mktteller 								as mktteller
import app.tools.mktaccounting 							as mktaccounting
import app.tools.mktdate 								as mktdate
import app.tools.mktaudit 								as mktaudit
import app.tools.mktholiday 							as mktHoliday
import app.tools.loantools.nonworkingday 				as mktDay
import app.tools.mkttool 								as mkttool
from sqlalchemy 									import desc, String
from sqlalchemy.sql.expression 						import cast
from sqlalchemy.orm.session 						import make_transient
from ..tools.mktfixedasset 							import postAccountingDepBooking
import app.tools.mktfundtransfer						as mktfundtransfer
import app.tools.user 									as mktuser
import app.mktcore.globalfunction 						as globalfunction



def loadCurrentDate():
	return mktdate.getBankDate()

def loadPaymentMethod():
	return MKT_ASSET_PAYMENT_ME.query.all()


@app.route("/Morakot/Asset/GetAssetBookingInfo")
@checkLogOutSession
@checkLogOutTime
def getAssetBookingInfo():
	SerialNumber = request.args.get('SerialNumber')
	AssignedAsset = MKT_ASSET_ASSIGNING.query.filter(MKT_ASSET_ASSIGNING.SerialNumber==SerialNumber).first()	
	Asset = MKT_ASSET.query.get(str(AssignedAsset.AssetID))
	return jsonify(
					AssetID 				= Asset.ID,
					AssetDes 				= Asset.Description,
					AssetPrice 				= float(Asset.Total),
					AccumulatedDepreciation = float(Asset.AccumulatedDepreciation),
					EndBookValue 			= float(Asset.Total)-float(Asset.AccumulatedDepreciation),
					Currency 				= Asset.Currency,
					MaturityDate  			= Asset.MaturityDate,
					)


@app.route("/Morakot/Asset/GetAssetBookingInfoByDate")
@checkLogOutSession
@checkLogOutTime
def GetAssetBookingInfoByDate():
	AssetID = request.args.get('AssetID')
	ValueDate = str(request.args.get('DisposeDate'))
	Asset = MKT_ASSET.query.get(AssetID)
	if str(Asset.Frequency) == 'D':
		Depreciation = 	MKT_ASSET_DEPRE_SCHEDULE.query.\
						filter(	MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID,
								cast(MKT_ASSET_DEPRE_SCHEDULE.EndDate, String)==ValueDate
								).\
						first()
	else:
		Depreciation = 	MKT_ASSET_DEPRE_SCHEDULE.query.\
						filter(	MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID,
								cast(MKT_ASSET_DEPRE_SCHEDULE.EndDate, String)<=ValueDate
								).\
						order_by(desc(MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo)).\
						first()

	return jsonify(
					AccumulatedDepreciation = float(Depreciation.AccumulatedDepreciation),
					EndBookValue 			= float(Depreciation.EndBookValue),					
					)


@app.route("/Morakot/Asset/GetDisposalType")
@checkLogOutSession
@checkLogOutTime
def getDisposalType():
	DisposalType = request.args.get('DisposalType')
	AssetPrice = ''.join(str(request.args.get('AssetPrice')).split(','))
	AccDep = request.args.get('AccDep')
	LossOrGainAmount = 0
	Amount = 0
	Bool = True
	PaymentMethodID = '__None'
	PaymentMethodDesc = '--None--'
	if 'SAL' in DisposalType:
		#---SAL = Sale
		Bool = False
	elif DisposalType == 'BOL':
		#---BOL = Broken Or Loss
		LossOrGainAmount = float(AccDep) - float(AssetPrice)
	return jsonify( 
					LossOrGainAmount 	= LossOrGainAmount,
					PaymentMethodID 	= PaymentMethodID,
					PaymentMethodDesc 	= PaymentMethodDesc,
					Amount 				= Amount,
					Bool 				= Bool
					)


@app.route("/Morakot/Asset/SaleAmount")
@checkLogOutSession
@checkLogOutTime
def getDisposalAmount():
	#---LOGA = Loss Or Gain Amount
	Amount 		= globalfunction.wordAmount(request.args.get('Amount')) if request.args.get('Amount') else 0
	AccDep 		= request.args.get('AccDep')
	AssetPrice 	= request.args.get('AssetPrice')
	Currency 	= str(request.args.get('Currency'))

	LOGA = float(Amount) + float(''.join(AccDep.split(','))) - float(''.join(AssetPrice.split(',')))
	CurrencyObj = MKT_CURRENCY.query.get(Currency)
	if CurrencyObj:
		Amount = mktmoney.toMoney(LOGA, CurrencyObj, 0)

	return jsonify(LossOrGainAmount=Amount)


@app.route("/Morakot/Asset/DisablePaymentMethod")
@checkLogOutSession
@checkLogOutTime
def disablePaymentMethod():
	DisposalType = request.args.get('DisposalType')
	Bool = False
	if DisposalType != 'SAL':
		Bool = True

	return jsonify(Bool=Bool)


@app.route("/Morakot/Asset/Dispose/PaymentMethod", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAssetDisposePaymentMethod():
	Branch 			= mktuser.getCurrentBranch()
	PaymentMethod 	= request.args.get('PaymentMethod')
	Currency 		= request.args.get('Currency')
	PaymentMethod 	= MKT_ASSET_PAYMENT_ME.query.get(PaymentMethod)
	Account 		= None
	if PaymentMethod:
		Account = MKT_ACCOUNT.query.join(MKT_CATEGORY, MKT_CATEGORY.ID == MKT_ACCOUNT.AccCategory)\
							 .filter(MKT_ACCOUNT.AccCategory==str(PaymentMethod.CategoryID),
							 		MKT_ACCOUNT.Currency==str(Currency),
							 		MKT_ACCOUNT.Branch==str(Branch)).\
							 first()

	return jsonify(
					AccountID 	= str(Account.ID) if Account else '',
					AccountDesc = str(Account.ID) + '-' + str(Account.AccName) if Account else '--None--'
					)


@app.route("/Morakot/Asset/DrAccountCategory", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAssetDrAccountCategory():
	DrAccount = request.args.get('DrAccount')
	Account = MKT_ACCOUNT.query.get(DrAccount)
	Category = MKT_CATEGORY.query.get(str(Account.AccCategory))
	PaymentMethod = MKT_ASSET_PAYMENT_ME.query.filter(MKT_ASSET_PAYMENT_ME.CategoryID==str(Category.ID)).first()
	return jsonify(
					PaymentMethodID 	= str(PaymentMethod.ID),
					PaymentMethodDesc 	= str(Account.AccCategory+' - '+Category.Description),
					CurrencyID 			= str(Account.Currency),
					CurrencyDesc 		= str(Account.Currency)
					)


def loadAsset():
	AssetList = []
	AssetLIVE = MKT_ASSET.query.join(MKT_ASSET_ASSIGNING, MKT_ASSET.ID==MKT_ASSET_ASSIGNING.AssetID)
	AssetHIST = MKT_ASSET_HIST.query.join(MKT_ASSET_ASSIGNING, MKT_ASSET_HIST.SerialNumber==MKT_ASSET_ASSIGNING.SerialNumber)
	Asset = AssetLIVE.union(AssetHIST).all()
	for row in Asset:
		PurifiedAsset = MKT_ASSET()
		PurifiedAsset.ID = str(row.ID).split('@')[0]
		PurifiedAsset.Description = str(row.Description)		
		AssetList.append(PurifiedAsset)
	return AssetList


def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.all()

def loadDisposalType():
	return MKT_ASSET_DISPOSAL.query

class FRM_ASSET_DISPOSE(exform):

	SerialNumber 		= RemoteTextField( requiredlabel("Serial Number","*"),
										validators=[validators.Required()]
										)
	AssetID 			= QuerySelectField(	requiredlabel("Asset","*"),
											query_factory=loadAsset,
											blank_text=u'--None--',
											get_label=u'Description',
											validators=[validators.Required()],
											allow_blank=True
											)
	Currency  			= QuerySelectField(requiredlabel("Currency","*"),
											query_factory=loadCurrency, 
											blank_text=u'--Choose Currency--',
											get_label=u'ID', 
											default = lambda:loadCurrency('USD'),
											allow_blank=True,
											validators=[validators.Required()]
											)
	AssetPrice 			= TextField(requiredlabel("Asset Price","*"),
									validators=[validators.Required()]
									)
	AccumulatedDepreciation = TextField(requiredlabel("Accumulated Depreciation","*"),
										validators=[validators.Required()]
										)
	EndBookValue 		= TextField(requiredlabel("End Book Value","*"),
									validators=[validators.Required()]
									)
	MaturityDate 		= TextField(requiredlabel("Maturity Date","*"),
									 validators=[validators.Required()]
									)
	DisposeDate 		= DateField(requiredlabel("Dispose Date","*"),
									 validators=[validators.Required()],
									 default=loadCurrentDate
									)
	DisposalType 		= QuerySelectField(requiredlabel("Disposal Type","*"),
											query_factory=loadDisposalType,
											blank_text=u'--None--',
											get_label=u'Description',
											validators=[validators.Required()],
											allow_blank=True
											)
	PaymentMethod 		= QuerySelectField("Receipt Method",
											 query_factory=loadPaymentMethod,
											 blank_text=u'--None--',
											 get_label=lambda a: a.CategoryID + " - " + a.Description,
											 allow_blank=True
											)
	DrAccount 			= 	RemoteTextField(getLanguage("Dr Account"))

	Amount 				= TextField( requiredlabel("Sale Amount","*"),
									validators=[validators.Required()]
								  )
	LossOrGainAmount 	= TextField( requiredlabel("Loss / Gain Amount","*"),
									  validators=[validators.Required()]
									)
	Note 				= TextAreaField(requiredlabel('Note',"*"), 
										validators=[validators.Length(max=100), validators.Required()]
										)

	def validate_DisposalType(form,field):
		MaturityDate = str(form.MaturityDate.data).split('-')
		MaturityDate = date(int(MaturityDate[0]),int(MaturityDate[1]),int(MaturityDate[2]))
		CurrentDate  = mktdate.getBankDate()
		DisposalType = field.data
		Amount 		 = form.Amount.data
		
		if CurrentDate < MaturityDate and str(DisposalType.ID) == "FDE":
			#---FDE = Fully Depreciation
			raise ValidationError("System Date must be greater than or equal to Maturity Date to be fully depreciated.")
		elif float(Amount) ==0 and str(DisposalType.ID) == "SAL":
			#---SAL = Sale
			raise ValidationError("Sale Amount must be greater than zero to sale an asset.")

		
	def validate_PaymentMethod(form,field):
		PaymentMethod 	= field.data
		DisposalType  	= form.DisposalType.data
		Category 		= str(PaymentMethod.CategoryID) if PaymentMethod is not None else ""
		Currency 		= form.Currency.data.ID
		Audit 			= mktaudit.getAuditrail()
		Inputter		= Audit['Inputter']
		Branch 			= Audit['Branch']
		if PaymentMethod is None and str(DisposalType) == "SAL":
			#---SAL = Sale
			raise ValidationError("Payment Method must be chosen to sale an asset.")
		else:
			if mktteller.isCashCateogry(Category):
				if Currency:
					AccountObj 	= mktteller.getCashAccountByCategory(Category,Currency,Inputter,Branch)				
					if not AccountObj[0]:
						raise ValidationError(AccountObj[1])


	def validate_DisposeDate(form,field):
		try:			
			DisposeDate 	= request.form['DisposeDate']

			try:
				CheckFormatDate = mktdate.isDateISO(DisposeDate)
				if not CheckFormatDate:
					raise ValidationError("Incorrect date format, should be YYYY-MM-DD")			

			except Exception, e:
				print e 
				raise ValidationError("This field must be in date format.")

			Check = mktfundtransfer.checkPreMonthDateTransaction(DisposeDate)
			if Check:
				raise ValidationError(Check)

		except:
			raise

	
	def validate_DrAccount(form, field):
		try:
			DrAccount 		= form.DrAccount.data
			PaymentMethod 	= request.form['PaymentMethod']  if 'PaymentMethod' in request.form else ''
			PaymentMethod 	= MKT_ASSET_PAYMENT_ME.query.get(PaymentMethod)
			Currency 		= request.form['Currency']  if 'Currency' in request.form else ''			
			Amount 			= form.Amount.data
			TransactionDate	= str(form.DisposeDate.data)

			if mktteller.isAmountInDecimal(Amount):
				Amount 		= Decimal(Amount)
			if DrAccount:
				AccObj = MKT_ACCOUNT.query.get(DrAccount)
				if AccObj :
					AccCategory = AccObj.AccCategory
					if AccCategory != str(PaymentMethod.CategoryID):
						raise ValidationError("Credit category not belong to account.")

					CheckBalance = mktaccounting.checkMaxMinBalance(DrAccount, Currency, Decimal(Amount), "Dr")
					if CheckBalance:
						raise ValidationError(CheckBalance)

					if (AccObj.Currency) != Currency:
						raise ValidationError('Dr Account currency and Sale Currency must be the same! %s != %s'%(str(AccObj.Currency),Currency))
		except:
			raise


	@staticmethod
	def hotField():

		hotfield = []
		fielddisplay  = "$('#AssetID').select2('data',{'id':data.AssetID,'text':data.AssetDes});"
		fielddisplay += "$('#Currency').select2('data',{'id':data.Currency,'text':data.Currency});"
		fielddisplay += "$('#AssetPrice').val(data.AssetPrice);"
		fielddisplay += "$('#EndBookValue').val(data.EndBookValue);"
		fielddisplay += "$('#AccumulatedDepreciation').val(data.AccumulatedDepreciation);"
		fielddisplay += "$('#AccumulatedDepreciation').focus();$('#AssetPrice').focus();$('#EndBookValue').focus();$('#DisposalType').focus();"
		fielddisplay += "$('#MaturityDate').val(data.MaturityDate);"
		
		varname	= "SerialNumber:$('#SerialNumber').val()"
		fun	= ["SerialNumber", varname ,fielddisplay, "/Morakot/Asset/GetAssetBookingInfo", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#EndBookValue').val(data.EndBookValue);"
		fielddisplay += "$('#AccumulatedDepreciation').val(data.AccumulatedDepreciation);"
		fielddisplay += "$('#AccumulatedDepreciation').focus();$('#EndBookValue').focus();$('#DisposalType').focus();"

		varname	= "DisposeDate:$('#DisposeDate').val(),AssetID:$('#AssetID').val()"
		fun	= ["DisposeDate", varname ,fielddisplay, "/Morakot/Asset/GetAssetBookingInfoByDate", "blur"]
		hotfield.append(fun)

		fielddisplay  = "$('#PaymentMethod').select2('data',{'id':data.PaymentMethodID,'text':data.PaymentMethodDesc});"
		fielddisplay += "$('#Amount').attr('readonly', data.Bool);"
		fielddisplay += "$('#Amount').val(data.Amount);"
		fielddisplay += "$('#LossOrGainAmount').val(data.LossOrGainAmount);"
		fielddisplay += "$('#PaymentMethod').focus();"
		fielddisplay += "$('#PaymentMethod').trigger('change');"
		fielddisplay += "$('#LossOrGainAmount').trigger('blur');"

		varname = "DisposalType:$('#DisposalType').val(),AssetPrice:$('#AssetPrice').val(),AccDep:$('#AccumulatedDepreciation').val()"
		fun = ["DisposalType", varname, fielddisplay, "/Morakot/Asset/GetDisposalType", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#LossOrGainAmount').val(data.LossOrGainAmount);"
		varname = "Amount:$('#Amount').val(),AccDep:$('#AccumulatedDepreciation').val(),AssetPrice:$('#AssetPrice').val(),Currency:$('#Currency').val()"
		fun = ["Amount", varname, fielddisplay, "/Morakot/Asset/SaleAmount", "blur"]
		hotfield.append(fun)

		fielddisplay  = "$('#PaymentMethod').select2('readonly',data.Bool);"
		fielddisplay  += "$('#DrAccount').select2('readonly',data.Bool);"
		# fielddisplay  += "$('#DrCurrency').select2('readonly',data.Bool);"

		varname = "DisposalType:$('#DisposalType').val()"
		fun = ["PaymentMethod", varname, fielddisplay, "/Morakot/Asset/DisablePaymentMethod", "focus"]
		hotfield.append(fun)

		fielddisplay = "$('#PaymentMethod').select2('data',{'id':data.PaymentMethodID, 'text':data.PaymentMethodDesc});"
		# fielddisplay += "$('#DrCurrency').select2('data',{'id':data.CurrencyID, 'text':data.CurrencyDesc});"
		varname = "DrAccount:$('#DrAccount').val()"
		fun = ["DrAccount", varname, fielddisplay, "/Morakot/Asset/DrAccountCategory", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#DrAccount').select2('data',{'id':data.AccountID, 'text':data.AccountDesc});"
		varname = "PaymentMethod:$('#PaymentMethod').val(), Currency:$('#Currency').val()"
		fun = ["PaymentMethod", varname, fielddisplay, "/Morakot/Asset/Dispose/PaymentMethod", "change"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def setDisable():
		Fields = []
		Fields = [	
					('AssetPrice'),
					('AccumulatedDepreciation'),
					('AssetID'),
					('Currency'),
					('LossOrGainAmount'),
					('MaturityDate'),
					('EndBookValue')
					]

		
		return Fields


	@staticmethod
	def listField():
		Audit = mktaudit.getAuditrail()
		Branch = Audit['Branch']

		Fields = [
					"ID", 	
					"AssetID",
					"SerialNumber",
					"DisposalType",					
					"MaturityDate",
					"DisposeDate",
					"Currency",
					"AccumulatedDepreciation",
					"AssetPrice",
					"EndBookValue",
					"Amount",
					"LossOrGainAmount",
					"Note"
		]

		return Fields, ["Branch*EQ*{0}".format(Branch)]
		

	@staticmethod
	def moneyField():
		return [
				["AssetPrice","Currency"],
				["AccumulatedDepreciation","Currency"],
				["Amount","Currency"],
				["LossOrGainAmount","Currency"],
				["EndBookValue","Currency"],
				]


	@staticmethod
	def reverseRec():
		return False,""


	@staticmethod
	def formReadOnly():
		return "AUTH"


	@staticmethod
	def setWidth():
		control_list= [
						('MaturityDate', len3),
					   ('DisposeDate', len3),
					   ]
					   
		return control_list

	@staticmethod
	def beforeInsert():
		AuthLevel = g.getNAuthorize
		try:
			if AuthLevel == 0:
				updateAsset()
				assetWriteOffPostAccounting()
				db.session.commit()
			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()
			return False


	@staticmethod
	def beforeAuthorize():
		try:			
			assetWriteOffPostAccounting()
			updateAsset()
			db.session.commit()
			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()
			flash(msg_error + str(e))
			return False


def updateAsset():
	AuthLevel = g.getNAuthorize
	try:
		Asset = None
		AssetID = ""
		if AuthLevel == 1:
			AssetDisposeInau = MKT_ASSET_DISPOSE_INAU.query.get(g.formID)
			Asset = MKT_ASSET.query.get(str(AssetDisposeInau.AssetID))
			AssetID = str(Asset.ID)
			AssetStatus = str(AssetDisposeInau.DisposalType)
			AssignedAsset = MKT_ASSET_ASSIGNING.query.filter(
															MKT_ASSET_ASSIGNING.AssetID==AssetID,
															MKT_ASSET_ASSIGNING.StopUsingDate==""
															).\
							first()
			AssignedAsset.StopUsingDate = str(AssetDisposeInau.DisposeDate)

		elif AuthLevel ==0 :
			AssetID = str(request.form['AssetID'])
			DisposeDate = str(request.form['DisposeDate'])
			Asset = MKT_ASSET.query.get(AssetID)			
			AssignedAsset = MKT_ASSET_ASSIGNING.query.filter(
															MKT_ASSET_ASSIGNING.AssetID==AssetID,
															MKT_ASSET_ASSIGNING.StopUsingDate==""
															).\
							first()
			AssignedAsset.StopUsingDate = DisposeDate

		if Asset:
			if str(Asset.RecordType) == '1':
				# Asset.AssetStatus = request.form['DisposalType']
				Asset.AssetStatus = str(AssetDisposeInau.DisposalType) if AuthLevel ==1 else str(request.form['DisposalType'])
				mktaudit.moveAUTHtoHIST(MKT_ASSET,MKT_ASSET_HIST,AssetID)
				db.session.delete(Asset)
			elif str(Asset.RecordType) == '2':
				Consumption = MKT_ASSET_CONSUMPTION.query.join(MKT_ASSET,MKT_ASSET.ID==MKT_ASSET_CONSUMPTION.ID).first()
				if int(Consumption.Quantity) >0:
					# mktaudit.moveAUTHtoHIST(MKT_ASSET,MKT_ASSET_HIST,AssetID)
					# Asset.AssetStatus = request.form['DisposalType']
					Consumption.Quantity -= 1
				else:
					mktaudit.moveAUTHtoHIST(MKT_ASSET,MKT_ASSET_HIST,AssetID)
					# db.session.delete(Asset)
					# Asset.AssetStatus = request.form['DisposalType']
					Asset.AssetStatus = str(AssetDisposeInau.DisposalType) if AuthLevel == 1 else request.form['DisposalType']
	except Exception, e:
		print e


def assetWriteOffPostAccounting():
		try:
			Audit 			= mktaudit.getAuditrail()
			Inputter		= Audit['Inputter']
			Createdon 		= Audit['Createdon']
			Authorizer 		= Audit['Authorizer']
			Authorizeon		= Audit['Authorizeon']
			Branch 			= Audit['Branch']
			AuthLevel 		= g.getNAuthorize
			SystemDate 		= mktdate.getBankDate()
			if AuthLevel == 1:

				AssetDisposeInau 		= MKT_ASSET_DISPOSE_INAU.query.get(g.formID)
				ID 						= str(AssetDisposeInau.PaymentMethod)
				row 					= MKT_ASSET_PAYMENT_ME.query.get(ID)
				PaymentMethod 			= str(row.CategoryID) if row else ''
				TranDate 				= str(AssetDisposeInau.DisposeDate)
				DisposalType 			= str(AssetDisposeInau.DisposalType)
				AssetID 				= str(AssetDisposeInau.AssetID)
				Currency 				= str(AssetDisposeInau.Currency)
				AccumulatedDepreciation = "".join(str(AssetDisposeInau.AccumulatedDepreciation).split(','))
				AssetPrice 				= str(AssetDisposeInau.AssetPrice)
				Amount 					= str(AssetDisposeInau.Amount)
				Account 				= str(AssetDisposeInau.DrAccount)
				Note 					= str(AssetDisposeInau.Note)
				LOGA 					= str(AssetDisposeInau.LossOrGainAmount)
				
			elif AuthLevel == 0:
				
				ID 						= request.form['PaymentMethod']
				row 					= MKT_ASSET_PAYMENT_ME.query.get(ID)
				PaymentMethod 			= str(row.CategoryID) if row else ''
				TranDate 				= request.form['DisposeDate']
				DisposalType 			= request.form['DisposalType']
				AssetID 				= request.form['AssetID']
				Currency 				= request.form['Currency']
				AccumulatedDepreciation = "".join(str(request.form['AccumulatedDepreciation']).split(','))
				AssetPrice 				= request.form['AssetPrice']
				Amount 					= request.form['Amount']
				Account 				= request.form['DrAccount']
				Note 					= request.form['Note']
				LOGA 					= request.form['LossOrGainAmount']
				
			#---LOGA = Loss Or Gain Amount
			Asset = MKT_ASSET.query.get(AssetID)
			
			CreditCategory = []
			DebitCategory = []
			PostAmount = []
			#---WODC = Write Off Or Dipose Category
			WODC = Asset
			if DisposalType == 'BOL':
				#---BOL = Broken Or Loss
				DisposalType = MKT_ASSET_DISPOSAL.query.get('BOL')
				DebitCategory = [
								 str(WODC.AccumulatedCategory)+str(WODC.AccumulatedAmortization),
								 DisposalType.Category
								]
				CreditCategory = [WODC.AssetCategory]
				Expense = float(AssetPrice) - float(AccumulatedDepreciation)
				PostAmount = [AccumulatedDepreciation,Expense,AssetPrice]
			elif DisposalType == 'FDE':
				#---FDE = Fully Depreciated
				DebitCategory = [str(WODC.AccumulatedCategory)+str(WODC.AccumulatedAmortization)]
				CreditCategory = [WODC.AssetCategory]
				PostAmount = [AccumulatedDepreciation,AssetPrice]
			elif DisposalType == 'SAL' and float(LOGA)<0:
				#---SAL = Sale
				#---Los = Loss On Sale
				Los = float(AssetPrice) - (float(Amount) + float(AccumulatedDepreciation))
				AssetSetup = Asset
				DisposalType = str(AssetSetup.LossOnDisposalCategory)
				Accumulated = WODC.AccumulatedCategory if WODC.AccumulatedCategory !='' else WODC.AccumulatedAmortization
				DebitCategory = [
								 PaymentMethod,
								 Accumulated,
								 DisposalType
								]
				CreditCategory = [WODC.AssetCategory]
				PostAmount = [Amount,AccumulatedDepreciation,Los,AssetPrice]
			elif DisposalType == 'SAL' and float(LOGA)>0:
				#---SAL = Sale
				#---Gos = Gain On Sale
				
				AssetSetup = Asset
				Gos = float(request.form['LossOrGainAmount']) if AuthLevel == 0 else float(str(AssetDisposeInau.LossOrGainAmount))
				DebitCategory = [
								 PaymentMethod, 
								 str(WODC.AccumulatedCategory)+str(WODC.AccumulatedAmortization),							 
								]
				CreditCategory = [
								  str(AssetSetup.GainOnDisposalCategory),
								  WODC.AssetCategory
								 ]
				PostAmount = [Amount,AccumulatedDepreciation,Gos,AssetPrice]
					
			DrMode = "" if mktteller.isCashCateogry(PaymentMethod) else "Direct"
			j = 0
			AccuDiffAmount = float(Asset.AccumulatedDepreciation) - float(AccumulatedDepreciation)
			if TranDate < str(SystemDate) and AccuDiffAmount != 0:
				Debit = str(Asset.DepreciationCategory) + str(Asset.AmortizationCategory)
				Credit = str(Asset.AccumulatedCategory)+str(Asset.AccumulatedAmortization)
				postAccountingDepBooking(AccuDiffAmount, Debit, Credit, Currency, str(Asset.Branch), str(Asset.ID), TranDate)

			AppSetting = MKT_APP_SETTING.query.get("FAM_DISPOSE")
			Transaction = str(AppSetting.Value) if AppSetting else ""
			for i in xrange(0, int(len(DebitCategory) + len(CreditCategory))):
				if i < len(DebitCategory):
					DrCr 		= 	"Dr"
					Mode 		= 	DrMode
					Category 	= 	DebitCategory[i]
				else:
					DrCr 		= 	"Cr"
					Mode 		= 	"Direct"
					Category 	= 	CreditCategory[j]
					j+=1
				
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
				DateTimeNow = mktdate.getDateTimeNow()				
				
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(PostAmount[i]), # Amount
					"AM",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					AssetID, 				# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)
				print "Start booking #%s -%s"%(i+1,DrCr)
			#---Move depreciation schedule to HIST and delete from LIVE after dispose asset
			mktaudit.moveAUTHtoHIST(MKT_ASSET_DEPRE_SCHEDULE,MKT_ASSET_DEPRE_SCHEDULE_HIST,AssetID)
			db.session.query(MKT_ASSET_DEPRE_SCHEDULE).filter(MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID).delete()
		except Exception, e:
			print e