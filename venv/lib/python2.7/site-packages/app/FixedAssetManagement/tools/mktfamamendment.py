from app.Setting.models 										import MKT_APP_SETTING
import app.tools.mktdate 											as mktdate
import app.tools.mktaccounting 										as mktaccounting
from decimal 													import *
import app.tools.mktaudit 											as mktaudit
import app.tools.mktdate 											as mktdate
import app.tools.mktteller 											as mktteller
import app.tools.mktaccounting 										as mktaccounting
import math
from app.Transaction.models 									import MKT_TRANSACTION
from sqlalchemy 												import or_, desc, cast, String, Integer
from datetime 													import date
from app.FixedAssetManagement.Depreciation.DepreciationSchedule	import DepreciationSchedule, getNextMonth, calculateNextRunDate, getDuration
from app.FixedAssetManagement.Depreciation.models 				import *
from app.FixedAssetManagement.tools.mktfamdate 					import *
from app.FixedAssetManagement.PaymentMethod.models 				import *
from app.FixedAssetManagement.DepreciationRegister.models 		import *
from app.Currency.models 										import *
from decimal 													import *
from app.FixedAssetManagement.tools.mktfamdate 					import *
from app.FixedAssetManagement.FixedAsset.models 				import *



def trackChanging(**kwargs):
	ChangingField = []
	
	for key, value in kwargs.items():
		if key == "SalvageValue" and float(value) == 0:
			ChangingField.append(key)
		if value == "" or value == "__None" or value == "0" or value == 0:
			continue
		ChangingField.append(key)

	return ChangingField


def getChangingField(DictOfValue):

	SalvageValue 					= DictOfValue['NewSalvageValue'] if DictOfValue['NewSalvageValue'] !="" else ""
	Description 					= str(DictOfValue['NewDescription'])
	AssetLife 						= str(DictOfValue['NewAssetLife'])
	ValueDate 						= str(DictOfValue['NewValueDate'])
	PurchasePriceUnits 				= float(DictOfValue['NewPurchasePriceUnits'])
	UnitOfProOrHourOfOpr 			= float(DictOfValue['NewUnitOfProOrHourOfOpr'])
	WholeLifeUnitOfProOrHourOfOpr 	= float(DictOfValue['NewWholeLifeUnitOfProOrHourOfOpr'])
	SerialNumber 					= str(DictOfValue['NewSerialNumber'])
	Frequency 						= str(DictOfValue['NewFrequency'])
	DepreciationMethod 				= str(DictOfValue['NewDepreciationMethod'])
	PaymentMethod 					= str(DictOfValue['NewPaymentMethod'])

	ChangingField = trackChanging(
									Description 					= Description,
									SerialNumber 					= SerialNumber,
									AssetLife 						= AssetLife,
									ValueDate 						= ValueDate,
									Frequency 						= Frequency,
									DepreciationMethod 				= DepreciationMethod,
									PaymentMethod 					= PaymentMethod,
									PurchasePriceUnits 				= PurchasePriceUnits,
									UnitOfProOrHourOfOpr 			= UnitOfProOrHourOfOpr,
									WholeLifeUnitOfProOrHourOfOpr 	= WholeLifeUnitOfProOrHourOfOpr,
									SalvageValue  					= SalvageValue
								)
	return ChangingField


def postAccDepreciation(Amount, Credit, Debit, Currency, Branch, AssetID, TranDate, DepNote, Transaction,Reverse = False):
	DateTimeNow 	= mktdate.getDateTimeNow()
	Inputter		= "SYSTEM"
	Createdon 		= DateTimeNow
	Authorizer 		= "SYSTEM"
	Authorizeon		= "SYSTEM"
	Branch 			= Branch
		
	# AppSetting = MKT_APP_SETTING.query.get("FAM_DEPRECIATION")
	# Transaction = str(AppSetting.Value) if AppSetting else ""
	Transaction = Transaction

	for i in range(0, 2):
		if i == 0:
			DrCr 		= 	"Dr"
			Mode 		= 	"Direct"
			Category 	= 	Debit if Reverse == False else Credit
		else:
			DrCr 		= 	"Cr"
			Mode 		= 	Mode
			Category 	= 	Credit if Reverse == False else Debit
		
		GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
		
		Account = ''
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			Inputter,				# Inputter
			Createdon, 				# Createdon
			Authorizer,				# Authorizer
			DateTimeNow,			# Authorizeon
			"", 					# AEID
			Account,				# Account
			Category,				# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(Amount), 		# Amount
			"AM",					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			AssetID, 				# Reference
			DepNote, 				# Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			Mode 					# Mode check to insert Journal for category
		)

		print "Start booking #%s -%s"%(i+1,DrCr)
		
	print "Fixed Asset ID : ", AssetID


def postAccOfAssetValue(Reverse=False, IncreasePrice=True, AmendMode="Price" ,**kwargs):
	Audit 			= mktaudit.getAuditrail()
	Inputter		= Audit['Inputter']
	Createdon 		= Audit['Createdon']
	Authorizer 		= Audit['Authorizer']
	Authorizeon		= Audit['Authorizeon']
	Branch 			= Audit['Branch']

	Currency 		= kwargs['Currency']
	Amount 			= kwargs['Amount']
	DrCategory 		= kwargs['DrCategory']	
	Note 			= kwargs['Note']
	Reference 		= kwargs['Reference']
	TranDate 		= kwargs['TranDate']
	NewCrAccount 	= kwargs['NewAccount']
	OldCrAccount 	= kwargs['OldAccount']
	NewCrCategory 	= kwargs['NewCrCategory']
	OldCrCategory	= kwargs['OldCrCategory']
	
	Reverse = not Reverse if AmendMode == "PaymentMethod" else Reverse
	CrCategory = OldCrCategory
	Account = OldCrAccount
	
	OldCrMode = mktteller.isCashCateogry(OldCrCategory)
	NewCrMode = mktteller.isCashCateogry(NewCrCategory)
	if Reverse:
		AppSetting = MKT_APP_SETTING.query.get("FAM_REVERSAL")
		Transaction = str(AppSetting.Value) if AppSetting else ""
	else:
		AppSetting = MKT_APP_SETTING.query.get("FAM_AMENDMENT")
		Transaction = str(AppSetting.Value) if AppSetting else ""
	
	for j in range(0, 2 if AmendMode == "PaymentMethod" else 1):
		if j == 1:
			Reverse 	= False
			AppSetting 	= MKT_APP_SETTING.query.get("FAM_AMENDMENT")
			Transaction = str(AppSetting.Value) if AppSetting else ""
			CrCategory 	= NewCrCategory
			Account 	= NewCrAccount
			CrMode 		= "" if mktteller.isCashCateogry(CrCategory if Reverse == False else DrCategory) else "Direct"

		for i in range(0 if IncreasePrice else 1, 2 if IncreasePrice else -1, 1 if IncreasePrice else -1):			
			if i == 0:
				
				DrCr 		= 	"Dr" if IncreasePrice else "Cr"
				Mode 		= 	"Direct"
				Category 	= 	DrCategory if Reverse == False else CrCategory
				
				if AmendMode == "PaymentMethod" and j==0:
					Mode = "" if OldCrMode else "Direct"

				if j==1 and i==0:
					Account = ""
			else:
				DrCr 		= 	"Cr" if IncreasePrice else "Dr"
				Mode 		= 	"" if OldCrMode else "Direct"
								
				Category 	= 	CrCategory if Reverse == False else DrCategory

				if AmendMode == "PaymentMethod" and j==0:
					Mode = "Direct"
					Account = ""
				if j==1 and i==1:
					Mode = "" if NewCrMode else "Direct"
					Category = NewCrCategory
					Account = NewCrAccount
				

			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
			DateTimeNow = mktdate.getDateTimeNow()
			
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				Inputter,				# Inputter
				Createdon, 				# Createdon
				Authorizer,				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amount), 		# Amount
				"AM",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				Reference, 				# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode 					# Mode check to insert Journal for category
			)
			print "Start booking #%s -%s -%s -%s %.2f %s"%(i+1,DrCr,Account, Mode, Amount, AmendMode)

	return False


def reverseDepAccounting(Debit, Credit,  Currency, Branch, AssetID, TranDate):
	BookedInstallment = getBookedInstallment(AssetID)
	if BookedInstallment:
		BookedInstallmentList 	= [row.__dict__ for row in BookedInstallment]
		AccumulatedDep 			= sum([float(row['Depreciation']) for row in BookedInstallmentList])
		DepNote 				= "From " + BookedInstallmentList[0]['StartDate'] + " To " + BookedInstallmentList[-1]['EndDate']
		AppSetting 				= MKT_APP_SETTING.query.get("FAM_REVERSE_DEPRE")
		Transaction 			= str(AppSetting.Value) if AppSetting else ""
		
		postAccDepreciation(AccumulatedDep, Debit, Credit, Currency, Branch, AssetID, TranDate, DepNote, Transaction, Reverse = True)


def postAmendedDepreciation(AssetID, AssetObj, AmendDate, StaticTotal, Currency, BookedInstallment, EffectivePeriod):
	DepreciationObj 		= None
	CurrentDate 			= mktdate.getBankDate()
	AccCategory 			= str(AssetObj.AccumulatedCategory) if AssetObj else ""
	DepCategory 			= str(AssetObj.DepreciationCategory) if AssetObj else ""
	Branch 					= str(AssetObj.Branch) if AssetObj else ""
	BookedInstallmentList 	= [row.__dict__ for row in BookedInstallment]
	DepreciationObj 		= MKT_ASSET_DEPRE_SCHEDULE_INAU.query.\
								filter(MKT_ASSET_DEPRE_SCHEDULE_INAU.ID==AssetID, 
										MKT_ASSET_DEPRE_SCHEDULE_INAU.DepreciationStatus=="n").\
								filter(cast(MKT_ASSET_DEPRE_SCHEDULE_INAU.EndDate, String) < str(CurrentDate)).\
								order_by(cast(MKT_ASSET_DEPRE_SCHEDULE_INAU.InstallmentNo, Integer)).\
								all()

	AppSetting 				= MKT_APP_SETTING.query.get("FAM_AMEND_DEPRE")
	Transaction 			= str(AppSetting.Value) if AppSetting else ""
	DepreciationObj 		= [Depreciation for Depreciation in DepreciationObj if Depreciation.DepreciationStatus != 'y']
	print "Depreciation OBJ", DepreciationObj
	if DepreciationObj:
		NextDepreciation = 	MKT_ASSET_DEPRE_SCHEDULE_INAU.query.\
							filter(MKT_ASSET_DEPRE_SCHEDULE_INAU.InstallmentNo==str(int(DepreciationObj[-1].InstallmentNo)+1)).\
							first()
		print "Next Depreciation", NextDepreciation.__dict__
		if NextDepreciation:
			LastRunDate 		= str(NextDepreciation.StartDate)
			NextRunDate 		= str(NextDepreciation.EndDate)
			CurrentDepAmount 	= float(NextDepreciation.Depreciation)
	
	if len(DepreciationObj)>0:
		LastDepSchedule = DepreciationObj[-1]
		LastRunDate 	= str(LastDepSchedule.EndDate)
		NextRunDate 	= str(NextDepreciation.EndDate)
		AccDepreciation = float(LastDepSchedule.AccumulatedDepreciation)
		BeginBookValue 	= float(LastDepSchedule.BeginBookValue)
		EndBookValue 	= float(LastDepSchedule.EndBookValue)
		if EffectivePeriod == "1":
			AccDepreciation = float(LastDepSchedule.AccumulatedDepreciation) + (sum([float(val["Depreciation"]) for val in BookedInstallmentList]) if BookedInstallment else 0)

	#--- Depreciate the installment in new schedule if there are.
	for row in DepreciationObj:						
		row.DepreciationStatus = 'y'
		
	if len(DepreciationObj) > 0:
		SumNewDepreciation = sum([float(Dep.Depreciation) for Dep in DepreciationObj])
		DepNote = "From " + str(DepreciationObj[0].StartDate) + " To " + str(DepreciationObj[-1].EndDate)
		postAccDepreciation(float(SumNewDepreciation), AccCategory, DepCategory, Currency, Branch, AssetID, AmendDate, DepNote, Transaction)
		

	#--- Update asset record if there are some installment in new schedule to be depreciated.
	#--- Or reset all depreciation info of asset if there aren't and depreciation effect is since acquisition.
	if len(DepreciationObj)>0:
		AssetObj.LastRunDate 				= LastRunDate
		AssetObj.NextRunDate 				= NextRunDate
		AssetObj.AccumulatedDepreciation 	= AccDepreciation
		AssetObj.BeginningBookValue 		= BeginBookValue
		AssetObj.EndBookValue 				= EndBookValue
		AssetObj.PreviousDepAmount 			= float(DepreciationObj[-1].Depreciation)
		AssetObj.CurrentDepAmount 			= CurrentDepAmount
		PercentageDep 						= round(float(float(AccDepreciation) / float(StaticTotal) * 100),2)
		AssetObj.PercentageDep 				= PercentageDep
	else:
		if EffectivePeriod == "2":
			
			AssetObj.PreviousDepAmount 			= 0
			AssetObj.CurrentDepAmount 			= 0
			AssetObj.BeginningBookValue 		= 0
			AssetObj.EndBookValue 				= 0
			AssetObj.AccumulatedDepreciation 	= 0
			AssetObj.PercentageDep 				= 0


def updateAssetDepreciationInfo(AssetID, AssetObj, BookedInstallment, EffectivePeriod):
	NewSchedule = db.session.query(MKT_ASSET_DEPRE_SCHEDULE_INAU).\
							filter(MKT_ASSET_DEPRE_SCHEDULE_INAU.ID==AssetID, cast(MKT_ASSET_DEPRE_SCHEDULE_INAU.DepreciationStatus, String)=="n")\
							.order_by(desc(cast(MKT_ASSET_DEPRE_SCHEDULE_INAU.InstallmentNo, Integer)))\
							.all()
	print "NewSchedule", NewSchedule
	AssetObj.MaturityDate = str(NewSchedule[0].EndDate)
	AssetObj.NextRunDate = str(NewSchedule[-1].EndDate)
	AssetObj.LastRunDate = ""

	if EffectivePeriod == "1":
		if len(BookedInstallment)>0:
			BookedInstallmentList 				= [row.__dict__ for row in BookedInstallment]
			LastBookedIns 						= BookedInstallmentList[-1]
			LastRunDate 						= str(LastBookedIns['EndDate'])
			AssetObj.LastRunDate 				= LastRunDate
			AssetObj.AccumulatedDepreciation 	= sum([float(val["Depreciation"]) for val in BookedInstallmentList])
			AssetObj.CurrentDepAmount 			= float(NewSchedule[-1].Depreciation)
			AssetObj.PreviousDepAmount 			= float(LastBookedIns['Depreciation'])
			AssetObj.BeginningBookValue 		= float(LastBookedIns['BeginBookValue'])
			AssetObj.EndBookValue 				= float(LastBookedIns['EndBookValue'])


def calculateDepreciatedPeriod(BookedInstallment, NumberOfDay, Frequency):
	SkippedInstallment = 0
	TimeSequence = {"Y":NumberOfDay, "Q":NumberOfDay/4, "M":NumberOfDay/12, "W":7, "D":1}

	if len(BookedInstallment) > 0:
		BookedInstallmentList 	= [row.__dict__ for row in BookedInstallment]
		FirstBookedIns 			= BookedInstallmentList[0]
		LastBookedIns			= BookedInstallmentList[-1]
		BookedPeriod 			= DaysDiff(str(FirstBookedIns['StartDate']), str(LastBookedIns['EndDate'])) + 1
		SkippedInstallment 		= int(math.ceil(BookedPeriod / TimeSequence[Frequency]))
		
	return SkippedInstallment


def updateInstallmentNo(AssetID, BookedInstallment, EffectivePeriod):
	AllBookedInstallment = MKT_ASSET_DEPRE_SCHEDULE.query.\
										filter(MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID,
												or_(MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus=='y',
													MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus=='i')).\
										order_by(MKT_ASSET_DEPRE_SCHEDULE.StartDate).\
										all()
	
	SortedBookedInstallment = sorted([row.__dict__ for row in BookedInstallment], key = lambda k : int("".join(str(k['InstallmentNo']).split('@'))), reverse=True)
	SortedAllBookedInstallment = sorted([row.__dict__ for row in AllBookedInstallment], key = lambda k : int(("".join(str(k['InstallmentNo']).split('@'))).split('#')[-1]), reverse=True)	

	#--- Update InstallmentNo of already depreciated installment of old schedule.
	for row in SortedAllBookedInstallment:
		SplitIns = str(row['InstallmentNo']).split('@')
		
		if len(SplitIns) > 1:			
			Value = (SplitIns[0] + "@" + str(int(SplitIns[1]) +1))			
		else:
			Value = (str(row['InstallmentNo']) + "@1")

		Dict = {MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo:Value}	
		if EffectivePeriod == "2":
			Dict.update({MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus:"i"})
		
		db.session.query(MKT_ASSET_DEPRE_SCHEDULE).\
		filter(MKT_ASSET_DEPRE_SCHEDULE.ID==str(row['ID']), MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo==str(row['InstallmentNo'])).\
		update(Dict)


def getTransactionDate(EffectivePeriod, AssetID, NewValueDate, OldValueDate, BookedInstallment):
	TranDate 		= NewValueDate if NewValueDate != "" else OldValueDate	
	NotYetBookedIns = MKT_ASSET_DEPRE_SCHEDULE.query.\
						filter(MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID,
								MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus=='n').\
						order_by(cast(MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo, Integer)).\
						first()
	
	if EffectivePeriod == "1":
		TranDate = str(NotYetBookedIns.StartDate)
		if len(BookedInstallment)>0:
			TranDate = str(date(*[int(val) for val in str(NotYetBookedIns.StartDate).split('-')]))

	return TranDate


def mergeDepreciationSchedule(AssetID):
	Audit 			= mktaudit.getAuditrail()
	Inputter		= Audit['Inputter']
	Createdon 		= Audit['Createdon']
	Authorizer 		= Audit['Authorizer']
	Authorizeon		= Audit['Authorizeon']
	Branch 			= Audit['Branch']

	db.session.query(MKT_ASSET_DEPRE_SCHEDULE).\
				filter(	MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID, 
						MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus=='n').\
				delete(synchronize_session='fetch')
	db.session.commit()
	db.session.close()
	db.session.expire_on_commit = False
	
	#--- I commit and close session to avoid conflict instance in db.session
	mktaudit.moveINAUtoAUTH(MKT_ASSET_DEPRE_SCHEDULE, MKT_ASSET_DEPRE_SCHEDULE_INAU, AssetID, Inputter, Createdon, Authorizer, Authorizeon)					
	db.session.query(MKT_ASSET_DEPRE_SCHEDULE_INAU).\
				filter(MKT_ASSET_DEPRE_SCHEDULE_INAU.ID==AssetID).\
				delete(synchronize_session='fetch')


def updateAssetRecord(AssetObj, ConsumptionObj, ChangingField, DictOfValue):
	AssetID 				= str(AssetObj.ID)
	NewPurchasePriceUnits 	= DictOfValue["NewPurchasePriceUnits"]
	OldPurchasePriceUnits 	= DictOfValue["OldPurchasePriceUnits"]
	NewPaymentMethod 		= DictOfValue['NewPaymentMethod']
	NewCrAccount 			= DictOfValue["NewCrAccount"]
	OldCrAccount 			= DictOfValue["OldCrAccount"]
	Currency 				= DictOfValue["Currency"]
	Note 					= DictOfValue["Note"]
	OldValueDate 			= DictOfValue["OldValueDate"]
	AmendDate 				= DictOfValue["AmendDate"]
	PaymentMethodObj 		= MKT_ASSET_PAYMENT_ME.query.get(str(AssetObj.PaymentMethod)) if AssetObj else ""
	OldCrCategory 			= str(PaymentMethodObj.CategoryID) if PaymentMethodObj else ""
	NewPaymentMethodObj 	= MKT_ASSET_PAYMENT_ME.query.get(NewPaymentMethod)
	NewCrCategory 			= str(NewPaymentMethodObj.CategoryID) if NewPaymentMethodObj else ""
	DrCategory 				= str(AssetObj.AssetCategory) if AssetObj else ""	
	Branch 					= str(AssetObj.Branch) if AssetObj else ""	
	AmendAmount 			= 0

	for field in ChangingField:
		setattr(AssetObj, field, DictOfValue["New"+field])
		
		#--- Do accounting adjustment of old asset accounting booking.
		if field == "PaymentMethod" or field == "PurchasePriceUnits":
			
			if field == "PurchasePriceUnits":
				ConsumptionObj.PurchasePriceUnits = NewPurchasePriceUnits
				AssetObj.Total = ConsumptionObj.Amount = NewPurchasePriceUnits * (1- (float(ConsumptionObj.Discount)/100))
			AmendAmount 	= (NewPurchasePriceUnits - OldPurchasePriceUnits)*(1- (float(ConsumptionObj.Discount)/100)) if NewPurchasePriceUnits >0 else OldPurchasePriceUnits*(1- (float(ConsumptionObj.Discount)/100))
			IncreasePrice 	= True if AmendAmount > 0 else False
			Amount 			= abs(AmendAmount)

			if field == "PaymentMethod":
				IncreasePrice = True
				AssetObj.CrAccount = NewCrAccount
				Amount = NewPurchasePriceUnits if NewPurchasePriceUnits != 0 else OldPurchasePriceUnits

			postAccOfAssetValue(
								IncreasePrice 	= IncreasePrice,
								AmendMode 		= field,
								Currency 		= Currency,
								Amount 			= Amount,
								Note 			= Note,
								Reference 		= AssetID,
								TranDate 		= AmendDate, #OldValueDate if field == "PaymentMethod" else AmendDate,
								OldAccount 		= OldCrAccount,
								NewAccount 		= NewCrAccount,
								NewCrCategory 	= NewCrCategory,
								OldCrCategory 	= OldCrCategory,
								DrCategory 		= DrCategory,
								)

	AssetObj.Curr = str(int(AssetObj.Curr) + 1)


def getBookedInstallment(AssetID):
	BookedInstallment = MKT_ASSET_DEPRE_SCHEDULE.query.\
						filter(MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID,
								MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus=='y',
								MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo!='i').\
						order_by(MKT_ASSET_DEPRE_SCHEDULE.StartDate).\
						all()

	return BookedInstallment


def amendAsset(EffectivePeriod, AssetID, OldAssetLife, NewAssetLife, OldValueDate, NewValueDate, AmendDate, NewPurchasePriceUnits, OldPurchasePriceUnits, OldDepreciationMethod, NewDepreciationMethod, NewDescription, NewSerialNumber, OldFrequency, 
				NewFrequency, Currency, Note, OldCrAccount, NewCrAccount, NewPaymentMethod, OldSalvageValue, NewSalvageValue, NewUnitOfProOrHourOfOpr, OldUnitOfProOrHourOfOpr, NewWholeLifeUnitOfProOrHourOfOpr, OldWholeLifeUnitOfProOrHourOfOpr):
	
	Audit 					= mktaudit.getAuditrail()
	Inputter				= Audit['Inputter']
	Createdon 				= Audit['Createdon']
	Authorizer 				= Audit['Authorizer']
	Authorizeon				= Audit['Authorizeon']

	AssetObj 				= MKT_ASSET.query.get(AssetID)
	ConsumptionObj 			= MKT_ASSET_CONSUMPTION.query.filter_by(ID=AssetID).first()
	PaymentMethodObj 		= MKT_ASSET_PAYMENT_ME.query.get(str(AssetObj.PaymentMethod)) if AssetObj else ""
	OldCrCategory 			= str(PaymentMethodObj.CategoryID) if PaymentMethodObj else ""
	NewPaymentMethodObj 	= MKT_ASSET_PAYMENT_ME.query.get(NewPaymentMethod)
	NewCrCategory 			= str(NewPaymentMethodObj.CategoryID) if NewPaymentMethodObj else ""
	DrCategory 				= str(AssetObj.AssetCategory) if AssetObj else ""
	AccCategory 			= str(AssetObj.AccumulatedCategory) if AssetObj else ""
	DepCategory 			= str(AssetObj.DepreciationCategory) if AssetObj else ""
	Branch 					= str(AssetObj.Branch) if AssetObj else ""
	NumberOfDay 			= 365 if str(AssetObj.DepDayBasis) == '1' else 360
	AmendAmount 			= 0
	Total 					= 0
	DictOfValue 			= {}
	SkippedInstallment 		= 0
	NInstallment 			= 0
	EffectiveField 			= [	"AssetLife", 
								"PurchasePriceUnits", 
								"ValueDate", 
								"DepreciationMethod", 
								"PaymentMethod", 
								"Frequency", 
								"UnitOfProOrHourOfOpr", 
								"WholeLifeUnitOfProOrHourOfOpr",
								"SalvageValue"
								]

	DictOfValue.update({
						"NewDescription":NewDescription,
						"NewSerialNumber":NewSerialNumber,
						"NewAssetLife":NewAssetLife,
						"NewFrequency":NewFrequency,
						"NewDepreciationMethod":NewDepreciationMethod,
						"NewPurchasePriceUnits":NewPurchasePriceUnits,
						"OldPurchasePriceUnits":OldPurchasePriceUnits,
						"NewSalvageValue":float(NewSalvageValue),
						"NewValueDate":NewValueDate, 
						"OldValueDate":OldValueDate,
						"AmendDate":AmendDate,
						"NewPaymentMethod":NewPaymentMethod, 
						"NewCrAccount":NewCrAccount, 
						"OldCrAccount":OldCrAccount, 
						"NewUnitOfProOrHourOfOpr":NewUnitOfProOrHourOfOpr, 
						"NewWholeLifeUnitOfProOrHourOfOpr":NewWholeLifeUnitOfProOrHourOfOpr,
						"Currency":Currency,
						"Note":Note
						})

	mktaudit.moveAUTHtoHIST(MKT_ASSET, MKT_ASSET_HIST, AssetID)
	ChangingField 	= getChangingField(DictOfValue)	
	EffectiveAmend 	= set(ChangingField).intersection(set(EffectiveField))
	print "Before udpdate asset record"
	updateAssetRecord(AssetObj, ConsumptionObj, ChangingField, DictOfValue)
	print "After udpdate asset record"
	
	if 'ValueDate' in ChangingField:
		EffectivePeriod = "2"
	print "Before reverse dep accounting"
	if EffectivePeriod == "2":
		reverseDepAccounting(AccCategory, DepCategory, Currency, Branch, AssetID, AmendDate)
	print "After reverse dep accounting"

	if len(EffectiveAmend) > 0:
		Method 							= NewDepreciationMethod if (NewDepreciationMethod != "__None" and NewDepreciationMethod != "") else OldDepreciationMethod
		AssetPrice 						= NewPurchasePriceUnits if NewPurchasePriceUnits !=0 else OldPurchasePriceUnits
		Total 							= AssetPrice * (1- (float(ConsumptionObj.Discount)/100))
		StaticTotal 					= Total
		AssetLife 						= NewAssetLife if NewAssetLife != "0" else OldAssetLife
		Frequency 						= NewFrequency if (NewFrequency != "__None" and NewFrequency != "") else OldFrequency
		SalvageValue 					= NewSalvageValue if NewSalvageValue != "" else OldSalvageValue
		UnitOfProOrHourOfOpr 			= NewUnitOfProOrHourOfOpr if NewUnitOfProOrHourOfOpr !=0 else OldUnitOfProOrHourOfOpr
		WholeLifeUnitOfProOrHourOfOpr 	= NewWholeLifeUnitOfProOrHourOfOpr if NewWholeLifeUnitOfProOrHourOfOpr !=0 else OldWholeLifeUnitOfProOrHourOfOpr
		
		if "DepreciationMethod" in ChangingField:
			DepreciationMethodObj = MKT_ASSET_DEPRE_REG.query.get(Method)
			if not "BASE" in str(DepreciationMethodObj.Function).upper():
				AssetObj.UnitOfProOrHourOfOpr = 0
				AssetObj.WholeLifeUnitOfProOrHourOfOpr = 0
		print "Before get booked installment no"
		BookedInstallment = getBookedInstallment(AssetID)
		print "After get booked installment no"
		SumAccDepreciation 	= sum([float(val.Depreciation) for val in BookedInstallment]) if BookedInstallment else 0				
		print "Before update installment no"
		updateInstallmentNo(AssetID, BookedInstallment, EffectivePeriod)
		print "After update installment no"

		print "Before get transaction date"
		TranDate = getTransactionDate(EffectivePeriod, AssetID, NewValueDate, OldValueDate, BookedInstallment)		
		print "After get transaction date"


		if EffectivePeriod == "1":
			Total -= SumAccDepreciation
			print "Before calculate depreciation period"
			SkippedInstallment = calculateDepreciatedPeriod(BookedInstallment, NumberOfDay, Frequency)
			NInstallment = len(BookedInstallment)
			print "After calculate depreciation period"
		
		print "Before reschedule",len(BookedInstallment), SkippedInstallment, AssetID, TranDate, AssetLife, Total, Frequency, NumberOfDay, SalvageValue, UnitOfProOrHourOfOpr, WholeLifeUnitOfProOrHourOfOpr
		DepreciationSchedule.SaveItemWithMethod(
												NInstallment,
												SkippedInstallment,
												'INAU', 
												Method, 
												Branch,
												'',
												str(AssetObj.Curr),
												Inputter, 
												Createdon, 
												Authorizer, 
												Authorizeon, 
												AssetID,
												TranDate, 
												int(AssetLife), 
												float(Total), 
												Frequency, 
												NumberOfDay, 
												float(SalvageValue), 
												float(UnitOfProOrHourOfOpr), 
												float(WholeLifeUnitOfProOrHourOfOpr)
												)
		print "After reschedule"
		print "Before update dep info"
		updateAssetDepreciationInfo(AssetID, AssetObj, BookedInstallment, EffectivePeriod)
		print "After update dep info"
		print "Before post amend dep"
		postAmendedDepreciation(AssetID, AssetObj, AmendDate, StaticTotal, Currency, BookedInstallment, EffectivePeriod)
		print "After post amend dep"
		print "Before merge schedule"
		mergeDepreciationSchedule(AssetID)
		print "After merge schedule"
