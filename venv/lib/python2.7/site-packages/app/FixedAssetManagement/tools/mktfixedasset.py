from ..FixedAsset.models 							import *
from ..Depreciation.models 							import *
from sqlalchemy 									import String
from sqlalchemy.sql.expression 						import cast
from app 											import db
from ..AssetSetup.models							import *
from decimal 										import *
import app.tools.mktaccounting 							as mktaccounting
import app.tools.mktaudit 								as mktaudit
import app.tools.mktdate 								as mktdate
import app.tools.mktteller 								as mktteller
from sqlalchemy										import or_, desc
from app.Setting.models 							import MKT_APP_SETTING


def postAccountingDepBooking(Amount, Credit, Debit, Currency, Branch, AssetID, TranDate):
	DateTimeNow 	= mktdate.getDateTimeNow()
	Inputter		= "SYSTEM"
	Createdon 		= DateTimeNow
	Authorizer 		= "SYSTEM"
	Authorizeon		= "SYSTEM"
	Branch 			= Branch
	
	Mode = mktteller.isCashCateogry(Credit)
	AppSetting = MKT_APP_SETTING.query.get("FAM_DEPRECIATION")	
	Transaction = str(AppSetting.Value) if AppSetting else ""

	for i in range(0, 2):
		if i == 0:
			DrCr 		= 	"Dr"
			Mode 		= 	"Direct"
			Category 	= 	Debit
		else:
			DrCr 		= 	"Cr"
			Mode 		= 	Mode
			Category 	= 	Credit
		
		GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
		
		Account = ''
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			Inputter,				# Inputter
			Createdon, 				# Createdon
			Authorizer,				# Authorizer
			DateTimeNow,			# Authorizeon
			"", 					# AEID
			Account,				# Account
			Category,				# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(Amount), 		# Amount
			"FAM",					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			AssetID, 				# Reference
			"Depreciation Booking", # Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			Mode 					# Mode check to insert Journal for category
		)

		print "Start booking #%s -%s"%(i+1,DrCr)
		
	print "Fixed Asset ID : ", AssetID


def updateFixedAssetBookValue():
	CurrentDate = mktdate.getBankDate()
	NextRunDate = ''
	LastRunDate = ''
	Asset = MKT_ASSET.query.\
			filter(cast(MKT_ASSET.NextRunDate, String) == str(CurrentDate)).\
			filter(or_(MKT_ASSET.AssetStatus=='NEW', MKT_ASSET.AssetStatus=='IUS',  MKT_ASSET.AssetStatus=='HUP')).\
			all()

	for row in Asset:
		AssetID = row.ID
		Depreciation = None
		# if row.Frequency != 'D':
		Depreciation = MKT_ASSET_DEPRE_SCHEDULE.query.\
						filter(MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID, MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus=='n').\
						filter(cast(MKT_ASSET_DEPRE_SCHEDULE.EndDate, String) == str(CurrentDate)).\
						first()
		LastRunDate = row.NextRunDate		
		
		try:
			
			BookedInstallment = MKT_ASSET_DEPRE_SCHEDULE.query.\
										filter(MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID,
												MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus=='y',
												~MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo.like('#%'),
												MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo.like('%@%')).\
										all()
			
			SumOldAccumulatedDep = sum([float(Ins.Depreciation) for Ins in BookedInstallment]) if len(BookedInstallment)>0 else 0			
			
			CurrentAsset = MKT_ASSET.query.get(AssetID)
			Installment = int(Depreciation.InstallmentNo)
			NextInstallment = MKT_ASSET_DEPRE_SCHEDULE.query.\
								filter(MKT_ASSET_DEPRE_SCHEDULE.ID==AssetID,
										MKT_ASSET_DEPRE_SCHEDULE.DepreciationStatus=='n', 
										MKT_ASSET_DEPRE_SCHEDULE.InstallmentNo==str(Installment+1)).\
								first()
			
			CurrentAsset.AccumulatedDepreciation = float(Depreciation.AccumulatedDepreciation) + SumOldAccumulatedDep
			PercentageDep = round(float(float(row.AccumulatedDepreciation) / float(CurrentAsset.Total) * 100),2)
			CurrentAsset.PercentageDep = PercentageDep
			CurrentAsset.BeginningBookValue = Depreciation.BeginBookValue
			CurrentAsset.EndBookValue = Depreciation.EndBookValue
			CurrentAsset.PreviousDepAmount = float(Depreciation.Depreciation)
			CurrentAsset.CurrentDepAmount = float(NextInstallment.Depreciation) if NextInstallment else 0
			CurrentAsset.LastRunDate = LastRunDate
			CurrentAsset.NextRunDate = str(NextInstallment.EndDate) if NextInstallment else ""

			Depreciation.DepreciationStatus = 'y'
			
			postAccountingDepBooking(
									Amount 		= Depreciation.Depreciation,
									Debit 		= row.DepreciationCategory if row.DepreciationCategory !='' else row.AmortizationCategory,
									Credit 		= row.AccumulatedCategory if row.AccumulatedCategory !='' else row.AccumulatedAmortization,
									Currency 	= row.Currency,
									Branch   	= row.Branch,
									AssetID 	= AssetID,
									TranDate 	= CurrentDate,
									)
			db.session.commit()
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()

