from app.mktcore.wtfimports 	import *
from .models 					import *
from decimal 					import Decimal
import time

import app.tools.catetool 			as mktcategory
import app.tools.mktsetting 		as mktsetting
import app.tools.mktaccounting 		as mktaccounting
import app.tools.mktfundtransfer 	as mktfundtransfer
import app.tools.mktdate 			as mktdate
import app.tools.mktaudit 			as mktaudit
import app.tools.user 				as mktuser

from app.Account.models 		import MKT_ACCOUNT
from app.Currency.models 		import MKT_CURRENCY
from app.GLBalance.models 		import MKT_GL_BALANCE
from app.GL.models 				import MKT_GL_MAPPING_DE
from app.Category.models 		import MKT_CATEGORY
from app.AssetClass.models 		import MKT_ASSET_CLASS
from app.Transaction.models 	import MKT_TRANSACTION
from app.mktcore.imports 		import *

def loadCurrency():
	return MKT_CURRENCY.query

def loadCategory():
	return MKT_CATEGORY.query

def loadAssetClass():
	return MKT_ASSET_CLASS.query.filter(~MKT_ASSET_CLASS.ID.like('%-%')).order_by(MKT_ASSET_CLASS.ID.asc())

def loadTransaction():
	return MKT_TRANSACTION.query

def loadAccount():
	AccObj = MKT_ACCOUNT.query.order_by(MKT_ACCOUNT.ID.asc())
	return AccObj

class FRM_ACC_POSTING(exform):
	Note 			= TextAreaField(requiredlabel("Note", "*"), [validators.Required(), validators.Length(max=140)])
	Reference 		= TextField(requiredlabel("Reference","*"),[validators.Required()])
	TransactionDate = DateField(requiredlabel("Transaction Date", "*"),validators=[validators.Required()])

	AccountID 		= HiddenField(requiredlabel("Account","*"), [validators.Required()],
							description="1-Detail")

	Category 		= QuerySelectField(requiredlabel('Category', "*"),
                        query_factory=loadCategory,
                        get_label=lambda a: a.ID + " - " + a.Description,
                        allow_blank=True,
                        blank_text=u'--None--',
                        validators=[validators.Required()],
                        description="1-Detail")

	Currency 		= QuerySelectField(requiredlabel('Currency', '*'),
                        query_factory=loadCurrency,
                        get_label=u'ID',
                        allow_blank=True,
                        blank_text=u'--None--',
                        validators=[validators.Required()],
                        description="1-Detail")

	AssetClass 		= QuerySelectField('Loan Class',
                        query_factory=loadAssetClass,
                        get_label=lambda a: a.ID + " - " + a.Description,
                        allow_blank=True,
                        blank_text=u'--None--',
                        description="1-Detail")


	MoreThanOneYear = SelectField("More Than One Year",
								choices=[('', '--None--'),('Y', 'Y'),('N', 'N')],
							 	coerce=str, description="1-Detail")
	ConsolKey 		= TextField(requiredlabel("ConsolKey", "*"), description="1-Detail")
	Transaction 	= QuerySelectField(requiredlabel('Transaction', '*'),
                        query_factory=loadTransaction,
                        get_label=lambda a: a.ID + " - " + a.Description,
                        validators=[validators.Required()],
                        description="1-Detail")
	
	DebitCredit 	= SelectField("Debit Credit", 
								choices=[('Dr', 'Dr'),('Cr', 'Cr')],
							 	coerce=str, description="1-Detail")
	Module 			= TextField("Module", description="1-Detail")
	Amount 			= TextField(requiredlabel("Amount", "*"), validators=[validators.Required()], 
						description="1-Detail", default=0)
	LCYAmount 		= TextField(requiredlabel("LCY Amount","*"), validators=[validators.Required()], description="1-Detail",default=0)

	def validate_ConsolKey(form, field):
		ListCurrency	= [item for item in request.form if "Currency" in item]
		ListCategory	= [item for item in request.form if "Category" in item]
		ListConsolKey	= [item for item in request.form if "ConsolKey" in item]
		ListCurrency.sort()
		ListCategory.sort()
		ListConsolKey.sort()

		if ListConsolKey and ListCategory and ListCurrency:
			for nub in range(0,len(ListConsolKey)):
				Category 	= request.form[ListCategory[nub]]
				Currency 	= request.form[ListCurrency[nub]]
				ConsolKey 	= request.form[ListConsolKey[nub]]
				Key 		= ConsolKey.split('.')
				
				if len(Key) > 2:
					if Category != Key[0]: raise ValidationError("Category and Console Key is not match")
					if Currency != Key[1]: raise ValidationError("Currency and Console Key is not match")
				else:
					raise ValidationError("Console Key is incorrect")

				# GLObj = MKT_GL_MAPPING_DE.query.filter(MKT_GL_MAPPING_DE.ConsolKey==ConsolKey).first()
				# if not GLObj:
				# 	raise ValidationError("Console Key is not mapped")

	def validate_TransactionDate(form, field):
		TranDate 	= request.form['TransactionDate']

		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	# @staticmethod
	# def beforeNewID () :
		# CheckMoraktTeam = setModuleInternal()
		# if not CheckMoraktTeam[0]:# It's will be not Morakot Team
		# 	return True, CheckMoraktTeam[1]
		# else:
		# 	return False,''

	@staticmethod
	def isMultiValue():
		control_list = ["1-Detail"]

		return control_list

	@staticmethod
	def setDisable():
		return [("ConsolKey")]

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def reverseRec():
		return True, "%s Record is not allowed to reverse." %(msg_warning)

	@staticmethod
	def hotField():
		hotfield=[]

		fielddisplay 	= 	"$('#Category').select2('data', {'id':data.Category,'text':data.CategoryDesc});"
		fielddisplay	+=	"$('#Currency').select2('data', {'id':data.Currency,'text':data.Currency});"
		# fielddisplay	+=	"$('#ConsolKey').val(data.Category +'.'+ data.Currency+'..........');"
		fielddisplay	+=	"$('#ConsolKey').val(data.ConsoleKey);"
		varname 		= "Account:$('#AccountID').val()"
		fun 			= ["AccountID", varname, fielddisplay, "/Morakot/FundTransferHotField", "change"]
		hotfield.append(fun)

		parameters = "GLCategory:$('#Category').val(),Currency:$('select#Currency').val(),AssetClass:$('select#AssetClass').val()"
		parameters += (",Key1:$('#MoreThanOneYear').val()" if mktsetting.getAccSetting().GL_KEY1 else "") 
		value = "$('#ConsolKey').val(data.item)"

		fielddisplay=value
		varname=parameters
		fun=["GLCategory", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "change"]
		hotfield.append(fun)

		fielddisplay=value
		varname=parameters
		fun=["Currency", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "change"]
		hotfield.append(fun)

		fielddisplay=value
		varname=parameters
		fun=["AssetClass", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "change"]
		hotfield.append(fun)

		fielddisplay="$('#ConsolKey').val(data.item)"
		varname=parameters
		fun=["MoreThanOneYear", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeInsert():
		try:
			
			AuthLevel 	= g.getNAuthorize
			if AuthLevel == 0 :
				Note 	   		= request.form['Note']
				Reference 		= request.form['Reference']
				TranDate		= request.form['TransactionDate']
				
				controls_list 	= request.form
				ListTransaction	= mkttool.getControlList('Transaction')[0]
				ListConsolKey	= [item for item in controls_list if "ConsolKey" in item]
				ListAccount		= [item for item in controls_list if "AccountID" in item]
				ListAmount 		= [item for item in controls_list if "Amount" in item]
				ListLCYAmount	= [item for item in controls_list if "LCYAmount" in item]
				ListModule		= [item for item in controls_list if "Module" in item]
				ListDrCr		= [item for item in controls_list if "DebitCredit" in item]

				ListTransaction.sort()
				ListConsolKey.sort()
				ListAccount.sort()
				ListAmount.sort()
				ListModule.sort()
				ListDrCr.sort()
				
				Audit = mktaudit.getAuditrail()
				Branch    	= Audit['Branch']
				Inputter    = Audit['Inputter']
				Createdon   = Audit['Createdon']
				Authorizer  = Audit['Authorizer']
				Authorizeon = Audit['Authorizeon']
				for nub in range(0,len(ListConsolKey)):
					ConsolKey 	= request.form[ListConsolKey[nub]]
					GL_KEYS 	= ConsolKey
					ConsolKey 	= ConsolKey.split('.')
					Category 	= ConsolKey[0]
					Currency 	= ConsolKey[1]
					Amount 	 	= request.form[ListAmount[nub]]
					LCYAmount 	= Decimal(request.form[ListLCYAmount[nub]])
					DrCr 	 	= request.form[ListDrCr[nub]]
					Transaction	= request.form[ListTransaction[nub]]
					Account		= request.form[ListAccount[nub]]
					if Account == '__None':
						Account = ''
					Module		= request.form[ListModule[nub]]
					Mode 		= 'Indirect' if Account else 'Direct'
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						Inputter,				# Inputter
						Createdon, 			# Createdon
						Authorizer,				# Authorizer
						Authorizeon,			# Authorizeon
						"", 					# AEID
						Account,				# Account
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Decimal(Amount), # Amount
						Module,					# Module
						Transaction, 			# Transaction
						TranDate, 				# TransactionDate
						Reference,				# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						LCYAmount=LCYAmount 
					)
			return True

		except Exception as e:
			raise
			return False


	@staticmethod
	def beforeAuthorize():
		try:
			ID = g.formID

			AccPostingObj = MKT_ACC_POSTING_INAU.query.get(ID)
			if AccPostingObj:
				Note 			= AccPostingObj.Note
				Reference 		= AccPostingObj.Reference
				TranDate 		= AccPostingObj.TransactionDate
				Branch    		= AccPostingObj.Branch
				Inputter    	= AccPostingObj.Inputter
				Createdon   	= AccPostingObj.Createdon
				Audit 			= mktaudit.getAuditrail()
				Authorizer  	= Audit['Authorizer']
				Authorizeon 	= Audit['Authorizeon']

				AccPostingDeObj = MKT_ACC_POSTING_DE_INAU.query.filter(MKT_ACC_POSTING_DE_INAU.ID==ID).all()

				for item in AccPostingDeObj:
					Mode = "Indirect" if item.AccountID else 'Direct'
					Account = item.AccountID

					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						Inputter,				# Inputter
						Createdon, 				# Createdon
						Authorizer,				# Authorizer
						Authorizeon,			# Authorizeon
						"", 					# AEID
						Account,				# Account
						item.Category,			# Category
						item.Currency,			# Currency
						item.DebitCredit,		# DrCr
						item.Amount, 			# Amount
						item.Module,			# Module
						item.Transaction,		# Transaction
						TranDate, 				# TransactionDate
						Reference,				# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						item.ConsolKey,			# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						LCYAmount=item.LCYAmount 				
					)

				return True

			return False

		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

