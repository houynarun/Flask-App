from app.mktcore.wtfimports import *
from app.Branch.models import *
from app.Customer.models import *
from app.LoanContract.models import *
from app.Account.models import *
from app.PD.models 		import *
import app.tools.mktdate 				as mktdate
from sqlalchemy import or_
from .. 							import app, db
from .models import * 
from flask 							import flash
import app.tools.user           as mktuser

def loadBranch():  
	return MKT_BRANCH.query
def getAllCustomer():
	CustomerID 	= request.form['CustomerID']
	CustomerList 	=  CustomerID.split()
	CustomerObj=MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID.in_(CustomerList))
	Customer=[str(Cus.ID) for Cus in CustomerObj]
	return Customer

def checkCustomer(CustomerList,Branch,Status):
	try:
		CustomerObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID.in_(CustomerList))
		BankDate = mktdate.getBankDate()
		for Customer in CustomerObj:
			LoanContractObj = db.session.query(MKT_LOAN_CONTRACT,MKT_PAST_DUE).\
										 join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
										 filter(or_(MKT_LOAN_CONTRACT.ContractCustomerID==Customer.ID,MKT_PAST_DUE.Customer==Customer.ID)).\
										 filter(or_(MKT_LOAN_CONTRACT.OutstandingAmount>0,MKT_PAST_DUE.TotODAmount>0)).all()
			if LoanContractObj:
				Status=False

			AccountObj 		= db.session.query(MKT_ACCOUNT).filter(MKT_ACCOUNT.CustomerList==Customer.ID)
			for Acc in AccountObj:
				if Acc.Balance>0:
					Status=False
				else:
					Acc.AccStatus='C'
					Acc.ClosingDate=BankDate
					db.session.add(Acc)

			Customer.Branch=Branch
			db.session.add(Customer)
		
		return Status

	except Exception as e:
		raise
	
		
class FRM_TRANSFER_CUSTOMER(exform):
	CustomerID			=	TextAreaField(requiredlabel("Customer ID","*"),[validators.Required()])
	ToBranch			=	QuerySelectField('To Branch',query_factory=loadBranch, 
													  get_label='ID',
													  allow_blank=False,
													  blank_text='None')

	def  validate_CustomerID(form,field):
		CustomerID 		=	request.form['CustomerID']
		CustomerList 	=	CustomerID.split()
		Branch 			=	request.form['ToBranch']
		CustomerAll 	=	getAllCustomer()
		CurrentBranch 	=	mktuser.getBranch(session["ChangeBranch"]).ID
		Cus = ''
		for Customer in CustomerList:
			if Customer not in CustomerAll:
				Cus=str(Customer)
				raise ValidationError("Please Check Your Customer ID:%s"%(Cus))

		CustomerObj = db.session.query(MKT_CUSTOMER.ID,MKT_CUSTOMER.Branch).\
					  filter(MKT_CUSTOMER.ID.in_(CustomerList))
		for CustomerLoan in CustomerObj:
			if CustomerLoan.Branch != CurrentBranch:
				raise ValidationError("This Customer %s is not in current branch"%(Cus))

			if Branch == CustomerLoan.Branch:
				Cus=(str(CustomerLoan.ID))
				raise ValidationError("This Customer %s have the same branch"%(Cus))

			LoanContractObj = db.session.query(MKT_LOAN_CONTRACT.OutstandingAmount,MKT_PAST_DUE.TotODAmount).\
												 join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
												 filter(MKT_LOAN_CONTRACT.ContractCustomerID==CustomerLoan.ID).\
												 filter(or_(MKT_LOAN_CONTRACT.OutstandingAmount>0,MKT_PAST_DUE.TotODAmount>0)).all()
			# print LoanContractObj
			if LoanContractObj:
				Cus=str(CustomerLoan.ID)
				raise ValidationError("This Customer %s have active loan"%(Cus))

			AccountObj	=	db.session.query(MKT_ACCOUNT).filter(MKT_ACCOUNT.CustomerList==CustomerLoan.ID)
			for Acc in AccountObj:
				if Acc.Balance>0:
					Cus=str(Acc.CustomerList)
					raise ValidationError("This Customer %s have balance bigger than 0"%(Cus))
	
	@staticmethod
	def beforeInsert():
		try:
			AuthLevel	=	g.getNAuthorize
			Status		=	True
			if AuthLevel == 0:
				CustomerID		=	request.form['CustomerID']
				CustomerList	=	CustomerID.split()
				Branch			=	request.form['ToBranch']
				Status			=	checkCustomer(CustomerList,Branch,Status)
			return Status
		except Exception as e:
			raise

	@staticmethod
	def beforeAuthorize():
		try:
			ID		=	g.formID
			Status	=	True
			TransferCustomerObj =	MKT_TRANSFER_CUSTOMER_INAU.query.get(ID)
			if not TransferCustomerObj:
				flash(msg_error + "Transfer Customer %s not found." %ID)
				Status	=	False
			else:
				CustomerID 		=	TransferCustomerObj.CustomerID
				CustomerList	=	CustomerID.split()
				Branch			=	TransferCustomerObj.ToBranch
				Status			=	checkCustomer(CustomerList,Branch,Status)
			
			return Status

		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			Status=False
	
	