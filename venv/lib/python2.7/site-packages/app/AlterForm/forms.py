from app import db

from app.mktcore.wtfimports import *
import app.tools.mkttool    as mkttool

from app.urlregister        import *

from .models                import *
from app.AlterTable.models  import *

# get all control field type for form
def getControlType():
    controlType = [
        ('TextField',       'Text Field'),
        ('TextAreaField',   'Text Area Field'),
        ('DateField',       'Date Field'),
        ('SelectField',     'Select Field')
    ]

    return controlType

# get all form in project
def getAllForms():

    result = []

    for obj in globals():
        if 'FRM_' in obj:
            result.append((obj, obj))

    result.sort(key=lambda tup: tup[1])
    result.insert(0, ('','--None--'))
    return result

# get all model from MKT_ALTERTABLE table
def getModel():

    tableNames = db.session.query(MKT_ALTERTABLE).distinct(MKT_ALTERTABLE.TableName)
    return tableNames

# load default alter field, Filter by id = 'None' because field must load only after model already choosen.
# so by defalt there is no data
def loadAlterField():
    if request.method == 'POST':
        Data            =   []
        Model           =   request.form["Model"]
        TableFieldObj   =   MKT_ALTERTABLE.query.filter(MKT_ALTERTABLE.ID==Model).first()
        
        if TableFieldObj:
            Data        =   MKT_ALTERTABLE.query.filter(MKT_ALTERTABLE.TableName==TableFieldObj.TableName)
        
        return Data

    else:
        ID          =   g.formID
        Data        =   []
        MainTable   =   MKT_ALTERFORM_INAU.query.get(ID)
        if not MainTable:
            MainTable = MKT_ALTERFORM.query.get(ID)
        if MainTable:
            Model           = MainTable.Model # Refer to ID for table MKT_ALTERTABLE
            TableFieldObj   = MKT_ALTERTABLE.query.filter(MKT_ALTERTABLE.ID==Model).first()
            if TableFieldObj:
                Data        = MKT_ALTERTABLE.query.filter(MKT_ALTERTABLE.TableName==TableFieldObj.TableName)
            return Data
        else:
            # Case when click new
            return []
 
# get new field which alter in model
@app.route("/Morakot/getAlterModelField", methods=['GET'])
@app.route("/Morakot/API/getAlterModelField", methods=['GET'])
def getAlterField():

    model = request.args.get('Model')
    dic={}
    result =    MKT_ALTERTABLE.query.filter(MKT_ALTERTABLE.TableName == model)

    for row in result:
        dic["%s" % (row.ID)] = row.FieldName

    return jsonify(results=dic)




class FRM_ALTERFORM(exform):
    Model                   = QuerySelectField('Model',
                                                        query_factory=getModel,
                                                        get_label=u'TableName',
                                                        allow_blank=True,
                                                        blank_text=u'--Choose Model--')

    Form                    = SelectField(requiredlabel('Form', '*'),
                                                        choices = getAllForms(),
                                                        validators = [validators.Required()])

    FieldListOrder          = TextAreaField('Field List Order')
    HiddenField             = TextAreaField('Hidden Field')

    FieldID                 = QuerySelectField('Field Name',
                                                query_factory=loadAlterField,
                                                get_label=u'FieldName',
                                                allow_blank=True,
                                                blank_text=u'--Choose Field--',
                                                description='1-New Form Field')

    FieldLabel              = TextField('Label', description='1-New Form Field')


    Description             = TextField('Tab Description', description='1-New Form Field')

    IsRequired              = SelectField("Is required", choices=[('N','No'),('Y','Yes')], 
                                                        description = "1-New Form Field")

    Type                    = SelectField("Type", choices = getControlType(), default='1',
                                                        description='1-New Form Field')

    DefaultValue            = TextField("Default Value",description='1-New Form Field')

    ListValue               = TextAreaField("List Value",description='1-New Form Field')

    Required                = TextAreaField('Required',description='2-Old Form Field')
    ChangeLabel             = TextAreaField('Change Label',description='2-Old Form Field')

    def validate_Form(form, field):
        ID      = request.form['ID']
        FormObj = MKT_ALTERFORM.query.filter(MKT_ALTERFORM.Form == field.data).first()
        if FormObj and FormObj.ID != ID:
            raise ValidationError("%s already exist" % field.data)

    @staticmethod
    def isMultiValue():
        return ['1-New Form Field']

    @staticmethod
    def hotSelectField():
        hotfield = []

        fielddisplay="FieldID"
        varname="Model:$('#Model option:selected').text()"
        fun=["Model",varname,fielddisplay,"/Morakot/getAlterModelField","click"]
        hotfield.append(fun)

        return hotfield