import app.tools.mkttool		as mkttool
import xlsxwriter
import StringIO
from flask 						import make_response
from app.mktcore.wtfimports 	import *
from datetime import datetime

from app.Module.models 			import *
from app.Role.models			import *
import app.tools.mktdate 		as mktdate 

class CLS_CUSTOM_REPORT(object):

	def getCustomReportTemplate(self,**kwargs):
		try:
			html 		= 	"customreport/report_master.html"

			ListExclude = [ row for row in list_exclude if row != 'Branch' ]

			SearchForm  = kwargs.get('SearchForm')
			Parameters  = kwargs.get('Parameters')
			Result 		= kwargs.get("Result")
			FilterOption= kwargs.get('FilterOption')

			if not SearchForm:
				SearchForm = FRM_CUSTOM_REPORT_SEARCH()
			#add value to form 
			for field in SearchForm:
				field_value = request.args.get(field.name)
				if not field_value:				
					field_value = Parameters.get(field.name)
				if field.type == "DateField":
					field_value = datetime.strptime(field_value, '%Y-%m-%d')
				Field = getattr(SearchForm, field.name)				
				Field.data = field_value
				
			return render_template(html,
						str 			=	str,
						mktmoney 		=	mktmoney,
						float 			=	float,
						list_exclude	=	ListExclude,
						Parameters		=	Parameters,
						Result 			=	Result,
						FilterOption 	=	FilterOption,
						SearchForm 		=	SearchForm,
						mktdate 		=	mktdate
						)
			
		except:
			raise

	def getReportHeader(self):
		CompanyObj      =   mkttool.getCompany()
		CompanyName     =   CompanyObj.CompanyName
		ReportHeader    =   {'CompanyName' : CompanyName }
		return ReportHeader

	def setTableHeader(self,**kwargs):
		TableHeader = kwargs.get('TableHeader',{})
		Text        = kwargs.get('Text','')
		Rowspan     = kwargs.get('Rowspan','')
		Colspan     = kwargs.get('Colspan','')
		RowIndex    = kwargs.get('RowIndex',1)
		Class       = kwargs.get('Class','')
		Style       = kwargs.get('Style','')
		ExcelCol       = kwargs.get('ExcelCol','')

		ListHeader  = TableHeader.get(RowIndex,[])
		if mkttool.isFloat(Text):
		    Text = str(Text)

		Rowspan = ""  if Rowspan == 0 else Rowspan
		Colspan = ""  if Colspan == 0 else Colspan
		ListHeader.append(
		                    {'Text':Text,
		                    'Rowspan':Rowspan,
		                    'Colspan':Colspan,
		                    'Class':Class,
		                    'Style':Style,
		                    'ExcelCol': ExcelCol})

		TableHeader.update({RowIndex:ListHeader})

		return TableHeader

	def exportExcel(self,**kwargs):
		Result 			=	kwargs.get("Result")
		FileName 		=	kwargs.get("FileName","FileExport")		
		ReportHeader 	= 	Result.get("ReportHeader")
		TableHeader 	= 	Result.get("TableHeader")
		Data 			=	Result.get("Data")

		output 			= 	StringIO.StringIO()		
		workbook 		= 	xlsxwriter.Workbook(output, {'in_memory': True})

		FileName 		= 	"%s.xlsx" % FileName
		worksheet 		= 	workbook.add_worksheet()

		# bold = workbook.add_format({'bold': 1})
		# money_format = workbook.add_format({'num_format': '#,##0.00'})
		# merge_format = workbook.add_format({'valign': 'top'})
		# header_merge_format = workbook.add_format({'bold': 1,'valign': 'vcenter'})

		ExcelColumn = self.getColumn()
		StartRow 	= 1
		StartColumn = 1
		#ExcelHeader
		worksheet.write('%s%s' % (ExcelColumn.get(StartColumn),StartRow), ReportHeader.get("CompanyName"))
		StartRow+=1
		for key, value in ReportHeader.get("Parameters").iteritems():	
			TextValue = value 
			ValueSplit = value.split() 
			if value:				
				if mktdate.isDate(ValueSplit[0]):
					DateLen = len(ValueSplit)
					if DateLen == 2:
						TextValue = "%s To %s" % (ValueSplit[0],ValueSplit[1]) 
					else: 
						TextValue = value.replace(" "," , ")
					
			worksheet.write('%s%s' % (ExcelColumn.get(StartColumn),StartRow), key)
			worksheet.write('%s%s' % (ExcelColumn.get(StartColumn+1),StartRow), TextValue)
			StartRow+=1

		#TableHeader
		for key, value in TableHeader.iteritems():
			for item in value:
				Rowspan 		= item.get("Rowspan") if item.get("Rowspan") else 0
				Colspan 		= item.get("Colspan") if item.get("Colspan") else 0
				ExcelCol 		= item.get("ExcelCol")
				ExcelColKey 	= self.getKeyOfDictionary(ExcelColumn,ExcelCol)
				Text 			= item.get("Text")

				# print 'Rowspan ', Rowspan
				# print 'Colspan ', Colspan
				# print 'ExcelCol  ', ExcelCol
				# print 'Text', Text

				StartCol = ExcelCol
				EndCol 	 = ExcelCol
				if Colspan > 0:
					EndCol   = ExcelColumn.get(ExcelColKey+Colspan-1)

				StartR 	 = StartRow
				EndR 	 = StartRow
				if Rowspan > 0:
					EndR 	 = StartRow+Rowspan-1

				# print "%s%s:%s%s" %(StartCol,StartR,EndCol,EndR)

				if Colspan == 0 and Rowspan == 0:
					worksheet.write("%s%s" % (ExcelCol,StartRow),Text)
				else:
					worksheet.merge_range("%s%s:%s%s" %(StartCol,StartR,EndCol,EndR),Text)

			StartRow+=1

		#TableBody
		StartColumn = 0
		for item in Data:
			for key, value in item[0].iteritems():
				worksheet.write('%s%s' % (ExcelColumn.get(StartColumn+key),StartRow),value.get("Value"))
			StartRow+=1

		workbook.close()
		output.seek(0)

		response = make_response(output.getvalue())
		# This is the key: Set the right header for the response
		# to be downloaded, instead of just printed on the browser
		response.headers['Cache-Control'] = 'no-cache'
		response.headers["Content-Disposition"] = "attachment; filename=%s"%FileName
		response.headers["Content-type"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"

		return response

	def getColumn(self):
		ColumnHeader =  {1:"A",2:"B",3:"C",4:"D",5:"E",
						6:"F",7:"G",8:"H",9:"I",10:"J",
						11:"K",12:"L",13:"M",14:"N",15:"O",
						16:"P",17:"Q",18:"R",19:"S",20:"T",
						21:"U",22:"V",23:"W",24:"X",25:"Y",26:"Z"}

		ColumnList = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
		Index = 27
		for i in range(26):
			for j in range(26):
				ColumnHeader.update({Index: "%s%s" %(ColumnList[i],ColumnList[j])})
				Index = Index + 1

		return ColumnHeader

	def getKeyOfDictionary(self,DictData={},Value=''):
		Result = ""
		for key, value in DictData.iteritems():
			if value == Value:
				Result = key
				break
		return Result

	def getDefaultReportUrl(self,**kwargs):
		CurrentUrl = kwargs.get("CurrentUrl")
		# print CurrentUrl
		Result = "/Morakot/Report/Custom"

		ModuleObj  = MKT_FORM.query.\
							filter(MKT_FORM.URL == CurrentUrl.replace("/Morakot/","")).first()		
		if ModuleObj:
			AccessObj	=	MKT_ACCESS.query.\
									filter(MKT_ACCESS.Module==ModuleObj.ID).\
									filter(MKT_ACCESS.Form==ModuleObj.FormID).first()
			if AccessObj:
				Result = CurrentUrl
		return Result

CUSTOM_REPORT = CLS_CUSTOM_REPORT()

class FRM_CUSTOM_REPORT_SEARCH(exform):
	Branch			=		TextField("Branch")	

class DateTextField(TextField):
	def __call__(self, *args, **kwargs):
		return super(DateTextField, self).__call__(*args, **kwargs)
