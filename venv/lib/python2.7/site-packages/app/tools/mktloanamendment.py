from flask 							import flash
from app.mktcore.imports 			import *
from .. 							import app
from sqlalchemy 					import *
from decimal 						import *
from datetime 						import datetime, date, timedelta
import time
import calendar

from app.LoanContract.models 		import *
from app.LoanApplication.models		import *
from app.ScheduleDefine.models 		import *
from app.RepaymentSchedule.models 	import *
from app.Account.models 			import MKT_ACCOUNT
from app.PD.models 					import *
from app.LoanAmendment.models 		import *
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.AssetClass.models 			import *
from app.Customer.models 			import MKT_CUSTOMER
from app.ChargeRate.models 			import *
from app.ScheduleAddon.models 		import *
from app.Provisioning.models 		import *
from app.Tax.models 				import MKT_TAX

import app.tools.mktsetting 		as mktsetting
import app.tools.mktdate	 		as mktdate
import mktaccounting 				as mktaccounting
import app.tools.mktkey 			as mktkey
import app.tools.mktaudit 			as mktaudit
import mktmoney 					as mktmoney
import mktpdcollection 				as mktpd
import mktparam 					as mktparam
import mktmessage 					as mktmessage
import mktloan 						as mktloan
import loantools.rescheduletools 	as mktreschedule
import app.tools.mktcharge 			as mktcharge
import app.tools.mkttool 			as mkttool
import app.tools.mktdb 				as mktdb
import app.tools.user 				as mktuser
import app.tools.mktmoney 			as mktmoney
import app.tools.mktnotification 	as mktnotification
import app.tools.mktautoid 			as mktautoid
import app.tools.mktleasing 		as mktleasing

try:
	""" 
		Dynamic import * from local project
		Process:
			1. Import from local project first
			2. If no local project, it will import from 
			custom tool in custom app module
	"""
	ExtendModuleObj = mktsetting.ExtendModule()
	LocalPath 		= ExtendModuleObj.getLocalPath()
	CheckFile 		= ExtendModuleObj.isFileInLocal(FileName='tools/mktcustomscript.py')

	if LocalPath and CheckFile:
		ImportFile = "import %s.tools.mktcustomscript as CustomTool" % LocalPath
		# print "ImportFile",ImportFile
		exec(ImportFile)
	else:
		try:
			import app.CustomApp.CustomTools.Loan.PreTermination.views as CustomTool
		except ImportError, e:
			Msg = str(e)
			if not 'No module named CustomTools.Loan.PreTermination.views' in Msg:
				print "Warning import mktcustomscript from CustomApp %s"%e
except Exception as e:
	raise


def getQueryObj(AmendID, LoanID, Resource=""):
	if Resource.upper() == "INAU":
		Amend = MKT_LOAN_AMENDMENT_INAU.query.get(AmendID)
	else:
		Amend = MKT_LOAN_AMENDMENT.query.get(AmendID)

	if Amend:
		LoanContractObj = 	MKT_LOAN_CONTRACT.query.get(LoanID)
		ScheduleInauObj	= 	MKT_REP_SCHEDULE_INAU.query.\
							filter(MKT_REP_SCHEDULE_INAU.LoanID==LoanID).\
							order_by(MKT_REP_SCHEDULE_INAU.No.desc())
		''' Get previous installment and total interest'''
		ScheduleLiveObj = 	MKT_REP_SCHEDULE.query.\
							filter(MKT_REP_SCHEDULE.LoanID == LoanID,
									MKT_REP_SCHEDULE.CollectionDate <= Amend.AmendDate).all()
		ScheduleDefineObj=	MKT_SCHED_DEFINE_INAU.query.get(LoanID)
	DictObj = {	
				'LoanAmendment'	:	Amend,
				'LoanContract'	:	LoanContractObj,
				'ScheduleINAU'	:	ScheduleInauObj,
				'ScheduleLIVE'	:	ScheduleLiveObj,
				'ScheduleDefine':	ScheduleDefineObj
				}
	return DictObj

def updateNoInstallemnt(AmendID, LoanID, Resource=""):

	QueryObj = getQueryObj(AmendID, LoanID, Resource)
	if QueryObj:
		Amend 			= QueryObj.get('LoanAmendment',{})
		ScheduleInauObj = QueryObj.get('ScheduleINAU',{})
		ScheduleLiveObj = QueryObj.get('ScheduleLIVE',{})
	PrevInstallment =	0

	if ScheduleLiveObj:
		PrevInstallment = 	len(ScheduleLiveObj) if Amend.KeepPrevSchedule == 'Y' else 0

	if ScheduleInauObj:
		try:
			for item in ScheduleInauObj.all():
				mktdb.updateRecord(MKT_REP_SCHEDULE_INAU,[MKT_REP_SCHEDULE_INAU.LoanID == LoanID, MKT_REP_SCHEDULE_INAU.ID == item.ID], 
														{'No':int(item.No) + PrevInstallment, 'ID':"%s%s" %(item.LoanID, int(item.No) + PrevInstallment)})
			db.session.commit()
		except Exception as e:
			db.session.rollback()
			raise

def syncAmendToLC(AmendID=None, LoanID=None, Resource="",IsIRR=False):
	'''
		UPDATE LOAN CONTRACT
		====================
		Loan amendment have option to keep previous schedule or not.
		If previous schedule is kept:
			1. Total interest will add with total interest of installment of previous schedule smaller than amend date.
			2. Installment equal to previous installments except user use manual or upload schedule. 
		else:
			1. Total interest equal to total interest of new installment only.
			2. Installment equal to new installment only.
		3. Maturity update to the last collection date of repayment schedule. 
	'''
	try:
		QueryObj = getQueryObj(AmendID, LoanID, Resource)
		if QueryObj:
			Amend 			= QueryObj.get('LoanAmendment',{})
			LoanContractObj = QueryObj.get('LoanContract',{})
			ScheduleInauObj = QueryObj.get('ScheduleINAU',{})
			ScheduleLiveObj = QueryObj.get('ScheduleLIVE',{})
			ScheduleDefineObj  = QueryObj.get('ScheduleDefine',{})

			MaturityDate 	=	''
			TotalInterest 	=	0
			OldTotalInterest=	0
			PrevInstallment =	0
			IRR 			= 	''

			if ScheduleLiveObj:
				PrevInstallment = 	len(ScheduleLiveObj) if Amend.KeepPrevSchedule == 'Y' else 0
				for row in ScheduleLiveObj:
					OldTotalInterest += float(row.Interest)

			if ScheduleInauObj.first():
				for item in ScheduleInauObj.all():
					TotalInterest += float(item.Interest)
				if ScheduleInauObj.first():
					MaturityDate 	= ScheduleInauObj.first().CollectionDate

				''' check if user want to keep previous schedule smaller than amend date '''
				NewTerm 		= len(ScheduleInauObj.all())
				NewInstallment 	= NewTerm + int(PrevInstallment)
				Installment 	= NewInstallment if Amend.Installment != NewInstallment else Amend.Installment

			''' Update new total interest '''
			TotalInterest = TotalInterest + OldTotalInterest

			if LoanContractObj:
				''' if mode Deduct, DisbursedAmount will not deduct, if mode add, DisbursedAmount will add with new amend principal '''
				if int(Amend.AddDeduct) == 1:
					NewAmount 					=	float(LoanContractObj.Amount) 	- float(Amend.Amount)
					LoanContractObj.Amount 		= 	NewAmount
					NewDisbursedAmount 			=	float(LoanContractObj.Disbursed)
				else:
					NewAmount 					=	float(LoanContractObj.Amount) 	+ float(Amend.Amount)
					NewDisbursedAmount			=	float(LoanContractObj.Disbursed) + float(Amend.Amount)
					LoanContractObj.Disbursed 	=	NewDisbursedAmount
					LoanContractObj.Amount 		=	NewAmount

				''' update approved amount '''
				ApprovedAmount = float(LoanContractObj.ApprovedAmount)
				if NewDisbursedAmount > ApprovedAmount:
					ApprovedAmount = NewDisbursedAmount

				# Take update for back date
				IntPerDay 			=	0
				TotalInt 			=	0
				SystemBankDate 		=	Amend.AmendDate
				NextSystemDate 		=	str(mktdate.getBankDate())
				Currency 			=	LoanContractObj.Currency

				LoanProduct 		=	LoanContractObj.LoanProduct
				Product 			=	MKT_LOAN_PRODUCT.query.get(LoanProduct)

				if Product:
					InterestDayBasis=	Product.IntDayBasis
					NumOfDay 		= 	mktreschedule.getNumberOfDay(InterestDayBasis, SystemBankDate, NextSystemDate)
					# NumOfDay 	=	int(NumOfDay) - 1

					if int(NumOfDay) > 0:
						RatePerYear 		=	Amend.Interest
						OutstandingAmount 	=	NewAmount
						IntPerDay 			=	mktreschedule.getInterestPerDay(float(RatePerYear), float(OutstandingAmount), int(InterestDayBasis), SystemBankDate)
						TotalInt 			=	float(IntPerDay) * float(NumOfDay)

				if ScheduleDefineObj and ScheduleDefineObj.RepMode == "4":
					IRRObj = mktreschedule.getIRR(NewAmount,float(Amend.Interest),int(Amend.FreqType),int(NewTerm))
					IRR = "%s"%IRRObj[0] # IRR Rate Per Year
					if IsIRR:
						return IRR
				else:
					if IsIRR:
						return True

				# Update Loan Contract Information
				# New loan amendment: Value Date will not be updated, Disbursed Amount will be update only when loan is amended by adding principal
				LoanContractObj.IRR 				= 	IRR
				LoanContractObj.MaturityDate 		= 	MaturityDate
				LoanContractObj.TotalInterest 		= 	TotalInterest
				LoanContractObj.InterestRate 		= 	Amend.Interest
				LoanContractObj.Installment  		= 	Installment
				LoanContractObj.Term 		 		= 	Amend.Term
				LoanContractObj.LoanType 	 		= 	Amend.LoanType
				LoanContractObj.AccrIntCurrMonth 	= 	float(LoanContractObj.AccrCurrentInt) + float(TotalInt)
				LoanContractObj.NextRunDate 		=	Amend.AmendDate
				LoanContractObj.AccrInterest 		=	float(LoanContractObj.AccrInterest) + float(TotalInt)
				LoanContractObj.AccrIntPerDay 		=	float(IntPerDay)
				LoanContractObj.AccrCurrentInt 		=	float(LoanContractObj.AccrCurrentInt) + float(TotalInt)
				LoanContractObj.ApprovedAmount 		=	ApprovedAmount
				LoanContractObj.Curr 				=	str(int(LoanContractObj.Curr)+1)
				db.session.add(LoanContractObj)

				# Update Loan Charge Information
				mktcharge.updateLoanCharge(LoanID, Installment, NewDisbursedAmount, Currency, "AUTH", 'Y')

			else:
				flash("Loan contract not found.")
				return True

		else:
			flash("Loan amendment not found.")
			return False

		return True

	except:
		db.session.rollback()
		raise


def setLoanTerminate(AmendObj, LoanID, EOD=1, AddDeduct=1):
	try:
		# print "I am here in setLoanTerminate" 
		# Splite only 45 Charactors because Note in Jounal have 50 Charactors
		Note 			=	AmendObj.Reason[0:45]+'...' if AmendObj.Reason else "Loan Termination"
		AmtID 			=	AmendObj.ID
		PenaltyAmount   =   AmendObj.PenaltyAmount

		TranDate 		= 	mktdate.getBankDate()
		systemDate 		= 	str(TranDate)
		LoanContract 	= 	MKT_LOAN_CONTRACT.query.get(LoanID)		# Lookup MKT_LOAN_CONTRACT record
		TrueOrFalse 	= 	"1"
		PDParamObj 		= 	mktparam.getPDParam()
		Param 			= 	PDParamObj.RepOrder.split()
		AccSetting 		= 	mktsetting.getAccSetting()
		LoanProductObj 	= 	MKT_LOAN_PRODUCT.query
		ReportingRateObj= mktaccounting.getReportingRateObj()
		AccrOption 		= "Y"

		if LoanContract:

			Currency 			= 	LoanContract.Currency
			Branch 				= 	LoanContract.Branch
			LC_PRODUCT 			= 	LoanContract.LoanProduct
			CustomerID			=	LoanContract.ContractCustomerID
			LC_ValueDate 		=	LoanContract.ValueDate
			MaturityDate 		=	str(LoanContract.MaturityDate)
			Officer 			=	LoanContract.ContractOfficerID
			Disbursed 			=	Decimal(LoanContract.Disbursed) if LoanContract.Disbursed else Decimal(0)
			CustomerObj 		=	MKT_CUSTOMER.query.get(CustomerID)
			CustomerName 		=	""

			if CustomerObj:
				CustomerName 	=	CustomerObj.LastNameEn + " " + CustomerObj.FirstNameEn

			LCID 				=	LoanContract.ID
			Suspend 			=	LoanContract.Suspend
			AssClass 			=	LoanContract.AssetClass
			MoreThanOneYear 	=	LoanContract.MoreThanOneYear
			LoanType 			=	LoanContract.LoanType
			Principal 			=	float(LoanContract.Amount) if LoanContract.Amount else float(0)

			# Block Charge Collection
			RegularFee 		= '2'
			Zero 			= Decimal(0)
			ChargeAccrCurr  = Zero
			LoanChargeObj 	=	db.session.query(MKT_LOAN_CHARGE, MKT_CHARGE_RATE).\
										filter(MKT_LOAN_CHARGE.ID == LCID).\
										filter(MKT_CHARGE_RATE.ChargeMode == RegularFee).\
										join(MKT_CHARGE_RATE,MKT_CHARGE_RATE.ID ==MKT_LOAN_CHARGE.ChargeKey+Currency).first()
			if LoanChargeObj:
				ChargeObj 	= LoanChargeObj[0]
				ChargeRate 	= LoanChargeObj[1]
				if ChargeRate:
					ReceiveCat 	= ChargeRate.ReceiveCat
					IncomeCat 	= ChargeRate.IncomeCat
					SuspendCat 	= ChargeRate.ChargeSuspendCat
					AccrOption 	= mktsetting.getAppSetting("ACCR_CHARGE_DAILY")
				if ChargeObj:
					ChargeAccrCurr 	= Decimal(ChargeObj.AccrCurrent) if ChargeObj.AccrCurrent else Zero

			# Block Calculator Interest
			
			RepSchedule =	MKT_REP_SCHEDULE.query.\
							filter(MKT_REP_SCHEDULE.CollectionDate == systemDate).\
							filter(MKT_REP_SCHEDULE.LoanID == LCID).\
							filter(MKT_REP_SCHEDULE.RepStatus == "0").\
							first()

			if RepSchedule:
				# If Paid Off on collection date the interest will take from schedule
				Interest 		=	float(RepSchedule.Interest)
			else:
				BookOption 	= str(AccSetting.AccrIntBooking)

				if BookOption == '1': # Accrual Interest Booking mode with 1.Daily
					Interest 	=	float(LoanContract.AccrCurrentInt)
					
					if MaturityDate < systemDate: # Case loan have been maturity 
						Interest = float(LoanContract.AccrInterest)

				elif BookOption == '2':# Accrual Interest Booking mode with 2.Monthly

					# Case AIR Booking by Monthly the Interest = Accrued Interest Receivable + Accr Int Current Month
					Interest = float(LoanContract.AccrInterest) + float(LoanContract.AccrIntCurrMonth)

			# End Block Calculator Interest

			Account = MKT_ACCOUNT.query.get(LoanContract.Account) 	# Lookup MKT_ACCOUNT record
			if Account:

				AccBal 		= float(Account.AvailableBal)
				AccountID 	= Account.ID
				AccCategory = Account.AccCategory
				AccProduct 	= Account.AccProduct

				k1 = AccSetting.GL_KEY1
				k2 = AccSetting.GL_KEY2
				k3 = AccSetting.GL_KEY3
				k4 = AccSetting.GL_KEY4
				k5 = AccSetting.GL_KEY5
				k6 = AccSetting.GL_KEY6
				k7 = AccSetting.GL_KEY7
				k8 = AccSetting.GL_KEY8
				k9 = AccSetting.GL_KEY9

				k1 = mktkey.getResultKey(k1, LCID, CustomerID)
				k2 = mktkey.getResultKey(k2, LCID, CustomerID)
				k3 = mktkey.getResultKey(k3, LCID, CustomerID)
				k4 = mktkey.getResultKey(k4, LCID, CustomerID)
				k5 = mktkey.getResultKey(k5, LCID, CustomerID)
				k6 = mktkey.getResultKey(k6, LCID, CustomerID)
				k7 = mktkey.getResultKey(k7, LCID, CustomerID)
				k8 = mktkey.getResultKey(k8, LCID, CustomerID)
				k9 = mktkey.getResultKey(k9, LCID, CustomerID)



				AIRWriteOff 		=	0
				TotODAmount 		=	0
				TotPrincipalDue 	=	0
				TotInterestDue 		=	0
				TotPenaltyDue 		=	0
				TotChargeDue 		=	Zero

				PastDueID 			=	"PD" + str(LoanID)
				CheckPD 			=	MKT_PAST_DUE.query.get(PastDueID)
				
				if CheckPD:

					TotODAmount 	=	float(CheckPD.TotODAmount) if CheckPD.TotODAmount else float(0)
					TotPrincipalDue =	float(CheckPD.TotPrincipalDue) if CheckPD.TotPrincipalDue else float(0)
					TotInterestDue 	=	float(CheckPD.TotInterestDue) if CheckPD.TotInterestDue else float(0)
					TotPenaltyDue 	=	float(CheckPD.TotPenaltyDue) if CheckPD.TotPenaltyDue else float(0)
					TotChargeDue 	=	Decimal(CheckPD.TotChargeDue) if CheckPD.TotChargeDue else Decimal(0)
					

				PrincipalToWOF 	=	float(Principal) + float(TotPrincipalDue)
				ChargeToWOF		=	Decimal(ChargeAccrCurr) + Decimal(TotChargeDue)

				LC_Pro = LoanProductObj.get(LC_PRODUCT)
				if not LC_Pro:
					# Call method for error message
					mktmessage.setLogError("Loan product not found for loan-" + str(LCID) +".")
							

				# Checking Charge Amortization
				ChargeAmortization = mktcharge.bookingChargeAmortization(LCID, Currency, Branch, '0', 'Y')
				if ChargeAmortization[0] == False:
					error_msg 	= "%s." %ChargeAmortization[1]
					mktmessage.setLogError(error_msg)
				
				for p in Param:

					if p == 'CH':
						ChargeCollect 	= mktmoney.toMoney(float(ChargeAccrCurr), mktmoney.getCurrencyObj(Currency))
						ChargeCollect 	= Decimal(ChargeCollect.replace(",", ""))

						if ChargeCollect > 0:
							if AccBal >= ChargeCollect:
								ChargeCollect 	= Decimal(ChargeCollect)

							else:
								ChargeCollect 	= Decimal(AccBal)

							ChargeParam = { 'Branch':Branch, 'LoanID':LCID, 
											'Account':AccountID, 'AccCategory':AccCategory, 
											'Currency':Currency, 'AccSetting':AccSetting,
											'ChargeCollect':ChargeCollect, 'TotalCollect': ChargeAccrCurr, 
											'Transaction':AccSetting.ChargeTran, 'TransactionDate':TranDate, 
											'Suspend':Suspend,'Termination':'Y'}

							mktcharge.setChargeCollection(**ChargeParam)
									
							ChargeToWOF	= Decimal(ChargeToWOF) - Decimal(ChargeCollect)
							AccBal 		= float(AccBal) - float(ChargeCollect)

					if p == 'PE':

						if int(AddDeduct) == 2:
							updatePreTerminationPenalty(LCID, PenaltyAmount)
							# Check Pre-Termination Penalty Option
							Account = MKT_ACCOUNT.query.get(LoanContract.Account)
							if Account:
								# get Account Balance
								AccBal 		= float(Account.AvailableBal) if Account.AvailableBal else float(0)
							
					if p == 'IN':
							
						Interest 		= mktmoney.toMoney(float(Interest), mktmoney.getCurrencyObj(Currency))
						Interest 		= float(Interest.replace(",", ""))
						# print "Interest original",Interest
						# Case client doesn't have sufficient fund.
						if AccBal < Interest:
							# Calculator to find amount of interest for write-off 
							AIRWriteOff =	(float(Interest) - float(AccBal)) + TotInterestDue

						# print 'AccBal',AccBal,'Interest',Interest,'AIRWriteOff',AIRWriteOff
						Termination = True
						mktloan.setInterestCollection(Termination,AccSetting,PDParamObj,LC_Pro,ReportingRateObj,
													LoanContract,Interest,Account.AccCategory,AccBal,TranDate)
						AccBal 	= 	float(AccBal) - float(Interest)
						
					if p == 'PR':

						if float(AccBal) > 0:

							if float(Principal) > 0:

								Category = Account.AccCategory
								
								if not Category:
									# Call method for error message
									 mktmessage.setLogError( "Drawdown account category not found.")

								Temp 	=	0
								if AccBal >= PrincipalToWOF:

									Amount 				= 	PrincipalToWOF
									Temp  				= 	float(Amount) 			- float(Principal)
									
								else:

									Amount = AccBal

									if float(Amount) >= float(Principal):

										Temp  	= 	float(Amount) - float(Principal)

								AccBal 			= float(AccBal) 			- float(Amount)
								PrincipalToWOF 	= float(Principal) 			- float(Amount)
								Principal 		= float(Principal) 			- float(Amount)
								TotPrincipalDue = float(TotPrincipalDue) 	- float(Temp)

								Transaction 	= AccSetting.PrincipalTran

								mktloan.setPrincipalCollection(AccSetting,LoanContract,Amount,AccountID,
																Account.AccCategory,Currency,Transaction,
																TranDate,AssClass,LCID)
								
				if float(AIRWriteOff) > 0:
					Transaction = AccSetting.AmendmentTran
					
					if Transaction:

						#Get Category Int.Income or Interest In Suspend
						Category,GL_KEYS,IntCurrency,IntIncome = mktloan.getCategoryIntIncome(ReportingRateObj,PDParamObj,LC_Pro,
																AccSetting,Branch,Suspend,Currency,AIRWriteOff,AssClass,
																k1, k2, k3, k4, k5, k6, k7, k8, k9)

						DateTimeNow = mktdate.getDateTimeNow()
						Mode 		= "Direct"
						DrCr 		= "Dr"
						# Debit Interest Income or Interest in Suspend Category
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							AccountID,				# Account
							Category,				# Category
							IntCurrency,			# Currency
							DrCr,					# DrCr
							Decimal(IntIncome), 	# Amount
							"LC",					# Module
							Transaction, 			# Transaction
							TranDate, 				# TransactionDate
							LCID, 					# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
							AllowEquivalent=True,
							UserReference=AmtID
						)

						Category 	= LC_Pro.IntReceivableCate.strip()
						if not Category:
							# Call method for error message
							mktmessage.setLogError("Accrued interest receivable category not found.")

						DateTimeNow = mktdate.getDateTimeNow()
						Mode 		= "Direct"
						DrCr 		= "Cr"
						GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)

						# Credit AIR Category
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							AccountID,				# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							Decimal(AIRWriteOff), 	# Amount
							"LC",					# Module
							Transaction, 			# Transaction
							TranDate, 				# TransactionDate
							LCID, 					# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
							AllowEquivalent=True,
							UserReference=AmtID
						)
					else:
						# Call method for error message
						mktmessage.setLogError("Loan write-off transaction not found.")

				# Check if charge is Accrued
				if AccrOption == "Y":
					if ChargeToWOF > Zero :

						ChargeRevTran = mktcharge.getAccrChargeRevTran()
						for i in range(0, 2):
							if i == 0:
								DrCr 		= 	"Dr"
								Mode 		= 	"Direct"
								Category 	= 	IncomeCat if Suspend == "N" else SuspendCat
								
							else:
								DrCr 		= 	"Cr"
								Mode 		= 	"Direct"
								Category 	= 	ReceiveCat


							GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
							DateTimeNow = mktdate.getDateTimeNow()
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								DateTimeNow, 			# Createdon
								"System",				# Authorizer
								DateTimeNow,			# Authorizeon
								"", 					# AEID
								"",						# Account
								Category,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								Decimal(ChargeToWOF), 	# Amount
								"LC",					# Module
								ChargeRevTran, 			# Transaction
								TranDate, 				# TransactionDate
								LCID, 					# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# GL_KEYS
								Mode 					# Mode check to insert Journal for category
							)

				if float(PrincipalToWOF) > 0:

					Category 	=	PDParamObj.SocialLoanWriteOff
					
					if not Category:
						# Call method for error message
						mktmessage.setLogError("Social loan write-off category not found.")

					Transaction = AccSetting.AmendmentTran
					# Convert to Base currency
					LCYCurrency,LCYAmount 		= mktaccounting.setLCYAmount(ReportingRateObj,AccSetting,Currency,PrincipalToWOF)

					if Transaction:
						
						DateTimeNow = mktdate.getDateTimeNow()
						DrCr 		= "Dr"
						Mode 		= "Direct"

						GL_KEYS = mktaccounting.getConsolKey(Category, LCYCurrency, "", "LC", "", "", "", "", "", "", "", "", "")
						# Debit Customer Account
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							AccountID,				# Account
							Category,				# Category
							LCYCurrency,			# Currency
							DrCr,					# DrCr
							Decimal(LCYAmount), 	# Amount
							"LC",					# Module
							Transaction, 			# Transaction
							TranDate, 				# TransactionDate
							LCID, 					# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
							AllowEquivalent=True,
							UserReference=AmtID
						)
						
						DateTimeNow = mktdate.getDateTimeNow()
						DrCr 		= "Cr"
						Mode 		= "Direct"
						Category 	= LoanContract.Category

						GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
						# Cradit LC Amount
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							AccountID,				# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							Decimal(Principal), 	# Amount
							"LC",					# Module
							Transaction, 			# Transaction
							TranDate, 				# TransactionDate
							LCID, 					# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
							AllowEquivalent=True,
							UserReference=AmtID
						)

						if TotPrincipalDue > 0:

							# Cradit LC Amount
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								DateTimeNow, 			# Createdon
								"System",				# Authorizer
								DateTimeNow,			# Authorizeon
								"", 					# AEID
								AccountID,				# Account
								Category,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								Decimal(TotPrincipalDue), 	# Amount
								"LC",					# Module
								Transaction, 			# Transaction
								TranDate, 				# TransactionDate
								PastDueID, 				# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# GL_KEYS
								Mode,					# Mode check to insert Journal for category
								UserReference=AmtID
							)

					else:
						# Call method for error message
						mktmessage.setLogError("Loan write-off transaction not found.")


				# Reverse last booked provisioning
				LoanID 		=	LCID
				AssetClassObj 	= 	MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID.ilike('%-' + LC_PRODUCT)).first()
				AssetClass 		= 	'%s-%s'%(AssClass,LC_PRODUCT) if AssetClassObj else AssClass 
				AssetClassListObj 	=	MKT_ASSET_CLASS.query
				ProAssetClassObj = AssetClassListObj.get(AssetClass)
				# print '*'*900, 'ProAssetClassObj ID', ProAssetClassObj.ID,'ProAssetClassObj', ProAssetClassObj
				if ProAssetClassObj and ProAssetClassObj.ProvExpCat and ProAssetClassObj.ProResvCat :
					ProResvCat = ProAssetClassObj.ProResvCat
					ProvExpCat 	= ProAssetClassObj.ProvExpCat
				else:
					error_msg = "Loan loss reversal/receivable category not found."
					mktmessage.setLogError(error_msg)

				if not ProvExpCat:
					# Call method for error message
					error_msg = "Loan loss reversal category not found."
					mktmessage.setLogError(error_msg)

				# Provisioning Transfer from old Class
				mktpd.reverseProvisioning(LoanID, AssClass, ProResvCat, ProvExpCat, Currency, AccountID, TranDate, Branch, AccSetting, ReportingRateObj)	

				Amount 		=	float(PrincipalToWOF)
				WOFAmount 	=	float(AIRWriteOff) + float(PrincipalToWOF)
				Account 	=	AccountID
				if float(WOFAmount) > 0:
					WOFType = 'TMN'
					mktloan.moveLoanToWOF(LoanID, Branch, TranDate, CustomerID, CustomerName, Currency,
										  Disbursed, Amount, TotODAmount, WOFAmount, Account,
										  TotPrincipalDue, TotInterestDue, TotPenaltyDue, TotChargeDue,
										  LC_ValueDate, MaturityDate, Officer, WOFType)
			else:
				# Call method for error message
				mktmessage.setLogError("Account not found.")
		else:
			# Call method for error message
			mktmessage.setLogError( "Loan contract not found")

	except:
		db.session.rollback()
		raise

def setLoanAmendment(ID, Resource="", EOD=1):
	try:

		SystemBankDate 	= str(mktdate.getBankDate())
		TrueOrFalse 	= "1"
		if Resource == "INAU":
			Amend = MKT_LOAN_AMENDMENT_INAU.query.get(ID)
		else:
			Amend = MKT_LOAN_AMENDMENT.query.get(ID)

		if Amend:
			OperationType 	= str(Amend.Operation).strip()
			AmtID 			= Amend.ID
			LoanID 			= Amend.LoanID
			Principal 		= Amend.Amount
			PenaltyAmount	= Amend.PenaltyAmount
			Interest 		= Amend.Interest
			Installment 	= Amend.Installment
			Term 			= Amend.Term
			AddDeduct 		= Amend.AddDeduct
			AmendDate 		= Amend.AmendDate
			Interest 		= str(Interest).split()
			Interest 		= float(Interest[0])
			# Splite only 45 Charactors because Note in Jounal have 50 Charactors
			Note 			= Amend.Reason[0:45]+'...' if Amend.Reason else "Loan Amendment"

			LC = MKT_LOAN_CONTRACT.query.get(LoanID)
			if LC:
				Disbursed 		= LC.Disbursed
				Account 		= LC.Account
				LcCategory 		= LC.Category
				Branch 			= LC.Branch
				AssClass 		= LC.AssetClass
				PreAssClass 	= LC.AssetClass
				Currency 		= LC.Currency
				Suspend 		= LC.Suspend
				CustomerID 		= LC.ContractCustomerID
				TranDate 		= SystemBankDate
				InterestRate	= LC.InterestRate
				LcAmount 		= float(LC.Amount) if LC.Amount else float(0)
				CurInstall 		= float(LC.AccrCurrentInt) if LC.AccrCurrentInt else float(0)
				DisbursedStat 	= LC.DisbursedStat
				AccrIntPreMonth = float(LC.AccrIntPreMonth) if LC.AccrIntPreMonth else float(0)
				AccrInterest 	= float(LC.AccrInterest) if LC.AccrInterest else float(0)
				LoanProduct 	= LC.LoanProduct
				Product 		= MKT_LOAN_PRODUCT.query.get(LoanProduct)

				InterestRate 	= str(InterestRate).split()
				InterestRate 	= float(InterestRate[0])

				RepSchedule 	=	MKT_REP_SCHEDULE.query.\
									filter(MKT_REP_SCHEDULE.CollectionDate == SystemBankDate).\
									filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
									filter(MKT_REP_SCHEDULE.RepStatus == "0").\
									first()

				if RepSchedule:
					InterestAmount 	=	float(RepSchedule.Interest) if RepSchedule.Interest else float(0)
				else:
					InterestAmount 	=	CurInstall
			
				Acc = MKT_ACCOUNT.query.get(Account)
				if Acc:
					AccID 		= Acc.ID
					AccCategory = Acc.AccCategory
					Amount 		= 0
					toDo 		= 0
					AccBal 		= float(Acc.AvailableBal) if Acc.AvailableBal else float(0)

					Tran = mktsetting.getAccSetting()
					if not Tran:
						# Call method for error message
						TrueOrFalse = mktmessage.msgError(EOD, "Accounting setting record not found, Please go to setting.")

					else:

						k1 = Tran.GL_KEY1
						k2 = Tran.GL_KEY2
						k3 = Tran.GL_KEY3
						k4 = Tran.GL_KEY4
						k5 = Tran.GL_KEY5
						k6 = Tran.GL_KEY6
						k7 = Tran.GL_KEY7
						k8 = Tran.GL_KEY8
						k9 = Tran.GL_KEY9

						k1 = mktkey.getResultKey(k1, LoanID, CustomerID)
						k2 = mktkey.getResultKey(k2, LoanID, CustomerID)
						k3 = mktkey.getResultKey(k3, LoanID, CustomerID)
						k4 = mktkey.getResultKey(k4, LoanID, CustomerID)
						k5 = mktkey.getResultKey(k5, LoanID, CustomerID)
						k6 = mktkey.getResultKey(k6, LoanID, CustomerID)
						k7 = mktkey.getResultKey(k7, LoanID, CustomerID)
						k8 = mktkey.getResultKey(k8, LoanID, CustomerID)
						k9 = mktkey.getResultKey(k9, LoanID, CustomerID)

					TotODAmount =	0
					PastDueID 	= 	"PD" + LoanID
					CheckPD 	=	MKT_PAST_DUE.query.get(PastDueID)
					ReverseAIR 	=	""
					
					if CheckPD:

						TotODAmount 	= 	float(CheckPD.TotODAmount) if CheckPD.TotODAmount else float(0)

					TotalAmountToPay 	=	float(LcAmount) + float(TotODAmount) + float(InterestAmount)

					if OperationType.upper() == "AMT":

						# Check if amendment's date is bank date or last bank date; To do.
						if str(AmendDate) <= str(SystemBankDate):
							# updatePreTerminationPenalty(LoanID, PenaltyAmount, AmendmentPenalty=True)
							# Clear Loan Amendment with Past Due
							if float(AccBal) >= TotODAmount:
								if CheckPD:
									mktpd.setPDCollection(PastDueID, EOD)

							if int(AddDeduct) == 1:
								toDo = 1 # Deduct LC Amount

							Amount = float(Principal) if Principal else float(0)

							Error = 0
							if int(toDo) == 1:

								if RepSchedule:
									mktloan.setLoanCollection(LoanID, EOD)
									ReverseAIR = "1"
								else:
									# print ""
									# Loan Classification
									mktpd.loanClassification(LoanID)

								if float(AccBal) < float(Amount):
									Error = 1

							LCUpToDate = MKT_LOAN_CONTRACT.query.get(LoanID)
							if LCUpToDate:
								Suspend 	= LCUpToDate.Suspend
								AssClass 	= LCUpToDate.AssetClass

							if int(Error) == 0:
								Transaction = Tran.AmendmentTran
								if Transaction:
									for i in range(0, 2):
										# toDo == 0 Mean that Loan amendment deduct amount; toDo == 1 Mean that Loan amendment add amount;
										if toDo == 0:
											if i == 0:
												DrCr 		= "Dr"
												Mode 		= "Direct"
												Category 	= LcCategory
												GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)

											else:
												DrCr 		= "Cr"
												Mode 		= ""
												Category 	= AccCategory
												GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
										
										else:
											if i == 0:
												DrCr 		= "Dr"
												Mode 		= ""
												Category 	= AccCategory
												GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")

											else:
												DrCr 		= "Cr"
												Mode 		= "Direct"
												Category 	= LcCategory
												GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
										
										DateTimeNow = mktdate.getDateTimeNow()
										if not Category:
											# Call method for error message
											TrueOrFalse = mktmessage.msgError(EOD, "Drawdown account or loan outstanding category not found.")

										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											Account,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(Amount), 		# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											LoanID, 				# Reference
											Note, 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode, 					# Mode check to insert Journal for category
											UserReference=AmtID
										)

									Setting 		= mktsetting.getAccSetting()
									BookOption 		= Setting.AccrIntBooking
									if BookOption != '1':
										# Check if due today.
										if ReverseAIR:

											# Reverse AIR and II or from Suspend
											if Suspend.upper() == 'Y':
												Category 	= mktparam.getPDParam().SuspendCrCat
												GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
											else:
												Category 	= Product.IntIncomeCate.strip()
												GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
											
											if not Category:
												# Call method for error message
												TrueOrFalse = mktmessage.msgError(EOD, "Interest income or suspend account category not found.")

											DateTimeNow = mktdate.getDateTimeNow()
											Mode 		= "Direct"
											DrCr 		= "Dr"

											# Debit Interest Income Category
											mktaccounting.postAccounting(
												"AUTH", 				# Status
												"0", 					# Curr
												"System",				# Inputter
												DateTimeNow, 			# Createdon
												"System",				# Authorizer
												DateTimeNow,			# Authorizeon
												"", 					# AEID
												Account,				# Account
												Category,				# Category
												Currency,				# Currency
												DrCr,					# DrCr
												Decimal(AccrIntPreMonth), 	# Amount
												"LC",					# Module
												Transaction, 			# Transaction
												TranDate, 				# TransactionDate
												LoanID, 				# Reference
												Note, 					# Note
												"", 					# JNID
												Branch,					# Branch
												GL_KEYS,				# GL_KEYS
												Mode, 					# Mode check to insert Journal for category
												UserReference=AmtID
											)

											Category 	= Product.IntReceivableCate.strip()
											if not Category:
												# Call method for error message
												TrueOrFalse = mktmessage.msgError(EOD, "Accrual interest receivable category not found.")

											GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
											DateTimeNow = mktdate.getDateTimeNow()
											Mode 		= "Direct"
											DrCr 		= "Cr"

											# Credit Accrued Interest Receivable Category
											mktaccounting.postAccounting(
												"AUTH", 				# Status
												"0", 					# Curr
												"System",				# Inputter
												DateTimeNow, 			# Createdon
												"System",				# Authorizer
												DateTimeNow,			# Authorizeon
												"", 					# AEID
												Account,				# Account
												Category,				# Category
												Currency,				# Currency
												DrCr,					# DrCr
												Decimal(AccrIntPreMonth), # Amount
												"LC",					# Module
												Transaction, 			# Transaction
												TranDate, 				# TransactionDate
												LoanID, 				# Reference
												Note, 					# Note
												"", 					# JNID
												Branch,					# Branch
												GL_KEYS,				# GL_KEYS
												Mode,					# Mode check to insert Journal for category,
												UserReference=AmtID
											)

											LC_Update = MKT_LOAN_CONTRACT.query.get(LoanID)
											if LC_Update:
												LC_Update.AccrInterest 		= float(LC_Update.AccrInterest) - float(AccrIntPreMonth)
												
												if Suspend.upper() == 'N':
													LC_Update.IntIncEarned 		= float(LC_Update.IntIncEarned) - float(AccrIntPreMonth)
												
												LC_Update.AccrIntPreMonth 	= 0
												db.session.add(LC_Update)

								else:
									# Call method for error message
									TrueOrFalse = mktmessage.msgError(EOD, "Loan amendment transaction not found.")

								updatePreTerminationPenalty(LoanID, PenaltyAmount, AmendmentPenalty=True)
									
								''' Move and update data '''

								# Copy live LC to history LC before Update
								Curr = mktaudit.moveAUTHtoHIST(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT_HIST, LoanID)

								# Update Information Amendment to Loan
								syncAmendToLC(AmtID, LoanID, Resource)
								# Check for disbursement; in case this loan not disburse yet
								mktloan.setLCDisbursement(LoanID, "AUTH", EOD)

								# Audit trail for loan amendment
								if EOD==1:
									Inputter	= "System"
									Createdon 	= mktdate.getDateTimeNow()
									Authorizer 	= "System"
									Authorizeon	= mktdate.getDateTimeNow()
								else:
									Inputter	= mktuser.getUser().ID
									Createdon 	= mktdate.getDateTimeNow()
									Authorizer 	= mktuser.getUser().ID
									Authorizeon	= mktdate.getDateTimeNow()

								# Move Schedule Define data to HIST, and INAU to LIVE
								mktaudit.moveAUTHtoHIST(MKT_SCHED_DEFINE, MKT_SCHED_DEFINE_HIST, LoanID)
								mktaudit.deleteAUTH(MKT_SCHED_DEFINE, LoanID)
								mktaudit.moveINAUtoAUTH(MKT_SCHED_DEFINE, MKT_SCHED_DEFINE_INAU, LoanID,
														Inputter, Createdon, Authorizer, Authorizeon)
								mktaudit.deleteAUTH(MKT_SCHED_DEFINE_INAU, LoanID)

								# Move Repayment Schedule data to HIST, and INAU to LIVE by checking if user want to keep old previous schedule smaller than amend date
								mktaudit.moveAUTHtoHIST(MKT_REP_SCHEDULE, MKT_REP_SCHEDULE_HIST, LoanID, "LoanID",Curr=Curr)
								if Amend.KeepPrevSchedule == 'Y':
									mktaudit.deleteRecord(MKT_REP_SCHEDULE,[MKT_REP_SCHEDULE.LoanID == LoanID, MKT_REP_SCHEDULE.CollectionDate > AmendDate],True)
								else:
									mktaudit.deleteRecord(MKT_REP_SCHEDULE,[MKT_REP_SCHEDULE.LoanID == LoanID],True)
								mktaudit.moveINAUtoAUTH(MKT_REP_SCHEDULE, MKT_REP_SCHEDULE_INAU, LoanID,
														Inputter, Createdon, Authorizer, Authorizeon, "LoanID")
								mktaudit.deleteRecord(MKT_REP_SCHEDULE_INAU,[MKT_REP_SCHEDULE_INAU.LoanID == LoanID],True)

								ScheduleLiveObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == LoanID).all()
								if ScheduleLiveObj:
									for item in ScheduleLiveObj:
										mktdb.updateRecord(MKT_REP_SCHEDULE,[MKT_REP_SCHEDULE.LoanID == LoanID, MKT_REP_SCHEDULE.ID == item.ID], {'Curr': LCUpToDate.Curr})

								# Move CO-Borrower, Guarantor, Loan Charge, and Collateral to HIST, and update current version equal to loan contract
								if MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID == LoanID).first():
									mktaudit.moveAUTHtoHIST(MKT_LOAN_CO_BORROWER, MKT_LOAN_CO_BORROWER_HIST, LoanID)
									mktdb.updateRecord(MKT_LOAN_CO_BORROWER, [MKT_LOAN_CO_BORROWER.ID == LoanID], {'Curr': LCUpToDate.Curr})

								if MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID == LoanID).first():
									mktaudit.moveAUTHtoHIST(MKT_GUARANTOR, MKT_GUARANTOR_HIST, LoanID)
									mktdb.updateRecord(MKT_GUARANTOR, [MKT_GUARANTOR.ID == LoanID], {'Curr': LCUpToDate.Curr})

								if MKT_LOAN_CHARGE.query.filter(MKT_LOAN_CHARGE.ID == LoanID).first():
									mktaudit.moveAUTHtoHIST(MKT_LOAN_CHARGE, MKT_LOAN_CHARGE_HIST, LoanID)
									mktdb.updateRecord(MKT_LOAN_CHARGE, [MKT_LOAN_CHARGE.ID == LoanID], {'Curr': LCUpToDate.Curr})

								if MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID == LoanID).first():
									mktaudit.moveAUTHtoHIST(MKT_LOAN_COLLATERAL, MKT_LOAN_COLLATERAL_HIST, LoanID)
									mktdb.updateRecord(MKT_LOAN_COLLATERAL, [MKT_LOAN_COLLATERAL.ID == LoanID], {'Curr': LCUpToDate.Curr})

								# Update Last Outstanding Amount
								mktloan.setUpdateOutstandingAmount(LC)
								if Amount > 0:
									AccSetting 		= 	mktsetting.getAccSetting()
									ReportingRateObj= 	mktaccounting.getReportingRateObj()
									LoanObj 		= 	MKT_LOAN_CONTRACT.query.get(LoanID)
									AssetClass 		=	LoanObj.AssetClass
									AssetClassObj 	= 	MKT_ASSET_CLASS.query.get(AssetClass)
									ProResvCat 		= 	AssetClassObj.ProResvCat
									ProvExpCat 		= 	AssetClassObj.ProvExpCat
									LoanType  		=	LoanObj.LoanType
									MoreThanOneYear =	LoanObj.MoreThanOneYear
									LoanOustanding  =	LoanObj.OutstandingAmount
									MinAssetClass =getattr(LoanObj,'MinAssetClass','')
									NumDayDue 		= 	0
									PDObj = MKT_PD_DATE.query.filter(MKT_PD_DATE.ID==PastDueID).\
												filter(MKT_PD_DATE.NextRunDate==SystemBankDate).\
												filter(or_(MKT_PD_DATE.OutPriAmount>0,MKT_PD_DATE.OutIntAmount>0)).\
												order_by(MKT_PD_DATE.DueDate.asc()).first()

									if PDObj:
										NumDayDue = PDObj.NumDayDue
										
									ProAssetClassObj= 	MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID.ilike('%-' + LoanProduct)).first()
									ProAssetClass	= 	'%s-%s'%(AssetClass,LoanProduct) if ProAssetClassObj else AssetClass
									ProvisionAmount = 	mktpd.getProvisioningAmount(ProAssetClass, LoanOustanding, LoanType, MoreThanOneYear, NumDayDue,MinAssetClass=MinAssetClass)
									
									AssClass 	= MKT_ASSET_CLASS.query.get(ProAssetClass)
									ProResvCat 	= AssClass.ProResvCat
									ProvExpCat 	= AssClass.ProvExpCat
									# Reverse Old Provisioning
									mktpd.reverseProvisioning(LoanID, AssetClass, ProResvCat, ProvExpCat, Currency, Account, TranDate, Branch, AccSetting, ReportingRateObj)

									# Booking Provisioning To New Class
									mktpd.provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, Account, Currency, TranDate, LoanID, Branch, AssetClass, AccSetting, ReportingRateObj)
								
								# update amendment stat to 'Y'
								Amend.AmendmentStat = 'Y'
								db.session.add(Amend)
									
								''' End move and update data '''

								TrueOrFalse = True

							else:
								msg = "Account %s doesn't have sufficient fund. Current balance is %s." %(AccID, mktmoney.toMoney(float(AccBal), mktmoney.getCurrencyObj(Currency)))
								# Call method for error message
								TrueOrFalse = mktmessage.msgError(EOD, msg)

						return TrueOrFalse

					else:
						"""
							Start Loan Termination
							1. Terminate process
							2. Clear PD
							3. Move loan data to HIST but keep old record
							4. Update Loan Outstanding, Loan Balance, AIR to Zero
							5. Move loan data to HIST and delete old record

						"""
						AccBal 	= float(Acc.AvailableBal) if Acc.AvailableBal else float(0)

						if str(AmendDate) == str(SystemBankDate):

							if DisbursedStat.upper() == "Y": # Loan has been disbursed

								# Clear Loan Termination with Past Due
								PastDueID = "PD" + LoanID

								PDObj = MKT_PAST_DUE.query.get(PastDueID)

								if PDObj:
									mktpd.setPDCollection(PastDueID, EOD, "", True)

								# Check class change
								mktpd.loanClassification(LoanID, EOD)

								TotalAmountToPay 		= 	float(TotalAmountToPay) - float(TotODAmount)
								CheckPreTermination 	= 	getLoanRepaymentDetail(LoanID)
								TotalAmountToPay		+= 	float(CheckPreTermination[1])

								# Terminiate Process Booking
								setLoanTerminate(Amend, LoanID, EOD, AddDeduct)
								mktloan.DoubleRecordToHIST(LoanID)
							TrueOrFalse = True

							# update amendment stat to 'Y'
							Amend.AmendmentStat = 'Y'
							db.session.add(Amend)
							
						else:
							# Call method for error message
							TrueOrFalse = mktmessage.msgError(EOD, "Please check termination date.")

					# Function Ended
					return TrueOrFalse

				else:
					# Call method for error message
					TrueOrFalse = mktmessage.msgError(EOD, "Account not found.")

			else:
				# Call method for error message
				TrueOrFalse = mktmessage.msgError(EOD, "Loan contract not found.")

		else:
			# Call method for error message
			TrueOrFalse = mktmessage.msgError(EOD, "No loan amendment record.")

		if EOD == 1:
			return ""
		else:
			return TrueOrFalse

	except:
		db.session.rollback()
		raise

def moveLoanDataToHist(LoanID, KeepRecord = False, Reverse=False, Curr='', KeepLoanApplication=False):
	""" Method to move related records Loan Contract to history and Change Status of Loan Application to "Closed". 
		For loan amendment or loan write off and reach maturity date.
		Flow:
			1. move record 	to HIST
				* MKT_SCHED_DEFINE 			=> LoanID
				* MKT_REP_SCHEDULE 			=> LoanID
				* MKT_LOAN_CO_BORROWER 		=> LoanID
				* MKT_GUARANTOR 			=> LoanID
				* MKT_LOAN_CHARGE 			=> LoanID
				* MKT_LOAN_COLLATERAL 		=> LoanID
				* MKT_PAST_DUE 				=> LoanID
				* MKT_PD_DATE 				=> LoanID
				* MKT_PROVISION 			=> LoanID
				
				* MKT_LOAN_APPLICATION 		=> LoanAppID if KeepLoanApplication=False
				* MKT_LOAN_CO_BORROWER 		=> LoanAppID
				* MKT_LOAN_COLLATERAL 		=> LoanAppID
				* MKT_GUARANTOR 			=> LoanAppID

				* MKT_SCHEDULE_ADDON 			=> AddonID
				* MKT_SCHEDULE_ADDON_DE 		=> AddonID
				* MKT_SCHEDULE_ADDON_COLLECT 	=> AddonID+AddonType
				* MKT_SCHEDULE_ADDON_PD 		=> AddonID+AddonType

			2. Delete Record
				* MKT_SCHED_DEFINE 			=> LoanID
				* MKT_REP_SCHEDULE 			=> LoanID
				* MKT_LOAN_CO_BORROWER 		=> LoanID
				* MKT_GUARANTOR 			=> LoanID
				* MKT_LOAN_CHARGE 			=> LoanID
				* MKT_LOAN_COLLATERAL 		=> LoanID
				* MKT_PAST_DUE 				=> LoanID
				* MKT_PD_DATE 				=> LoanID
				* MKT_PROVISION 			=> LoanID

				* MKT_LOAN_APPLICATION 		=> LoanAppID if KeepLoanApplication=False
				* MKT_LOAN_CO_BORROWER 		=> LoanAppID
				* MKT_LOAN_COLLATERAL 		=> LoanAppID
				* MKT_GUARANTOR 			=> LoanAppID

				* MKT_SCHEDULE_ADDON 			=> AddonID
				* MKT_SCHEDULE_ADDON_DE 		=> AddonID
				* MKT_SCHEDULE_ADDON_COLLECT 	=> AddonID+AddonType
				* MKT_SCHEDULE_ADDON_PD 		=> AddonID+AddonType
		Args:
			LoanID 		(str)	 : string Loan contract ID
			KeepRecord 	(boolean): True/False
			Reverse 	(boolean): True/False
			Curr 		(str) 	 : Optional
			KeepLoanApplication (boolean)	 : True/False
		Return:
			Curr
	"""
	try:
		# Set Status of Loan application to "Closed"
		LA_STATUS_CLOSED = "6"
		LoanContractObj 	=	MKT_LOAN_CONTRACT.query.get(LoanID)
		if LoanContractObj:
			if KeepLoanApplication==False:
				StatusClose = LA_STATUS_CLOSED # Loan Application Closed Status
				mktdb.updateRecord(MKT_LOAN_APPLICATION,[MKT_LOAN_APPLICATION.ID == LoanContractObj.LoanApplicationID],{'AppStatus':StatusClose})

		# Query use for get Schedule addon
		AddonObj = MKT_SCHEDULE_ADDON.query.filter(MKT_SCHEDULE_ADDON.LoanID == LoanID).first()
		AddonID = AddonObj.ID if AddonObj else ''
		AddonType  = AddonObj.AddonType if AddonObj else ''

		ID = "%s%s" % (AddonID,AddonType)

		if not Reverse:
			# Copy live LC to hist LC
			mktaudit.moveAUTHtoHIST(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT_HIST, LoanID)
			# Remove live LC
			if KeepRecord:
				mktaudit.deleteAUTH(MKT_LOAN_CONTRACT, LoanID)

		# 1
		# Move Record form LIVE to HIST Record relate with Loan Contract
		mktaudit.moveAUTHtoHIST(MKT_SCHED_DEFINE, MKT_SCHED_DEFINE_HIST, LoanID)
		mktaudit.moveAUTHtoHIST(MKT_LOAN_CO_BORROWER, MKT_LOAN_CO_BORROWER_HIST, LoanID)
		mktaudit.moveAUTHtoHIST(MKT_GUARANTOR, MKT_GUARANTOR_HIST, LoanID)
		mktaudit.moveAUTHtoHIST(MKT_LOAN_CHARGE, MKT_LOAN_CHARGE_HIST, LoanID)
		mktaudit.moveAUTHtoHIST(MKT_LOAN_COLLATERAL, MKT_LOAN_COLLATERAL_HIST, LoanID)
		mktaudit.moveAUTHtoHIST(MKT_PAST_DUE, MKT_PAST_DUE_HIST, 'PD%s'%LoanID)
		mktaudit.moveAUTHtoHIST(MKT_PD_DATE, MKT_PD_DATE_HIST, 'PD%s'%LoanID)
		# We use "Curr" when we are not filter by ID
		mktaudit.moveAUTHtoHIST(MKT_PROVISION, MKT_PROVISION_HIST, LoanID, "LOANID", Curr=Curr)
		Curr = mktaudit.moveAUTHtoHIST(MKT_REP_SCHEDULE, MKT_REP_SCHEDULE_HIST, LoanID, "LoanID", Curr=Curr)

		# Move Record form LIVE to HIST Record relate with Loan Application
		if KeepLoanApplication==False and LoanContractObj.LoanApplicationID:
			LoanApplicationCurr = mktaudit.moveAUTHtoHIST(MKT_LOAN_APPLICATION, MKT_LOAN_APPLICATION_HIST, LoanContractObj.LoanApplicationID)
			mktaudit.moveAUTHtoHIST(MKT_LOAN_CO_BORROWER, MKT_LOAN_CO_BORROWER_HIST, LoanContractObj.LoanApplicationID,"ID", Curr=LoanApplicationCurr)
			mktaudit.moveAUTHtoHIST(MKT_LOAN_COLLATERAL, MKT_LOAN_COLLATERAL_HIST, LoanContractObj.LoanApplicationID, "ID", Curr=LoanApplicationCurr)
			mktaudit.moveAUTHtoHIST(MKT_GUARANTOR, MKT_GUARANTOR_HIST, LoanContractObj.LoanApplicationID, "ID",  Curr=LoanApplicationCurr)

		# Move Schedule Addon to HIST
		mktaudit.moveAUTHtoHIST(MKT_SCHEDULE_ADDON,MKT_SCHEDULE_ADDON_HIST,AddonID)
		mktaudit.moveAUTHtoHIST(MKT_SCHEDULE_ADDON_DE,MKT_SCHEDULE_ADDON_DE_HIST,AddonID)
		mktaudit.moveAUTHtoHIST(MKT_SCHEDULE_ADDON_COLLECT,MKT_SCHEDULE_ADDON_COLLECT_HIST,ID)
		mktaudit.moveAUTHtoHIST(MKT_SCHEDULE_ADDON_PD,MKT_SCHEDULE_ADDON_PD_HIST,ID)

		# remove old record
		if KeepRecord:
			# 2
			# Delete Record relate with Loan Contract
			mktaudit.deleteAUTH(MKT_SCHED_DEFINE, LoanID)
			mktaudit.deleteAUTH(MKT_REP_SCHEDULE, LoanID, "LoanID")
			mktaudit.deleteAUTH(MKT_LOAN_CO_BORROWER, LoanID)
			mktaudit.deleteAUTH(MKT_GUARANTOR, LoanID)
			mktaudit.deleteAUTH(MKT_LOAN_CHARGE, LoanID)
			mktaudit.deleteAUTH(MKT_LOAN_COLLATERAL, LoanID)
			mktaudit.deleteAUTH(MKT_PAST_DUE, 'PD%s'%LoanID)
			mktaudit.deleteAUTH(MKT_PD_DATE, 'PD%s'%LoanID)
			mktaudit.deleteAUTH(MKT_PROVISION, LoanID, "LOANID")

			# Delete Record relate with Loan Application
			if KeepLoanApplication==False and LoanContractObj.LoanApplicationID:

				mktaudit.deleteAUTH(MKT_LOAN_APPLICATION, LoanContractObj.LoanApplicationID)
				mktaudit.deleteAUTH(MKT_LOAN_CO_BORROWER, LoanContractObj.LoanApplicationID)
				mktaudit.deleteAUTH(MKT_LOAN_COLLATERAL, LoanContractObj.LoanApplicationID)
				mktaudit.deleteAUTH(MKT_GUARANTOR, LoanContractObj.LoanApplicationID)

			# Delete Schedule Addon
			mktdb.deleteRecord(MKT_SCHEDULE_ADDON,[MKT_SCHEDULE_ADDON.ID == AddonID])
			mktdb.deleteRecord(MKT_SCHEDULE_ADDON_DE,[MKT_SCHEDULE_ADDON_DE.ID == AddonID])
			mktdb.deleteRecord(MKT_SCHEDULE_ADDON_COLLECT,[MKT_SCHEDULE_ADDON_COLLECT.ID == ID])
			mktdb.deleteRecord(MKT_SCHEDULE_ADDON_PD,[MKT_SCHEDULE_ADDON_PD.ID == ID])

		return Curr

	except Exception, e:
		raise e

def getLoanRepaymentDetail(ID,AmendmentPenalty=False,**kwargs):
	'''
		Get loan term, installment, frequency, frequency type
	'''
	try:

		Result 		=	[False, 0]
		LoanObj 	= 	MKT_LOAN_CONTRACT.query.get(ID)

		if LoanObj:

			FreqType 	=	LoanObj.FreqType
			Frequency 	=	LoanObj.Frequency
			Installment =	LoanObj.Installment
			Term 		=	LoanObj.Term
			Disbursed 	=	LoanObj.Disbursed
			Outstanding =	LoanObj.OutstandingAmount
			LoanProduct = 	LoanObj.LoanProduct
			Result 		=	getTerminationPenalty(ID, Term, Installment, Frequency, FreqType, Disbursed, Outstanding, LoanProduct, AmendmentPenalty, **kwargs)

		return Result

	except Exception, e:
		raise

def getTerminationPenalty(ID, Term, Installment, Frequency, FreqType, Disbursed, Outstanding, LoanProduct="SYSTEM",AmendmentPenalty=False, **kwargs):
	try:
		
		PDParam 	=	mktparam.getPDParam(LoanProduct)
		Result 		=	[False, 0]
		FirstStr 	=	""
		SecondStr 	=	""
		ThirdStr 	=	""
		RepID 		=	[]
		BankDate 	=	str(mktdate.getBankDate())
		ValueDate 	=	BankDate
		IntDayBasis = 	"2"
		TotalPenalty 	=	0
		IntIncEarned 	=	0
		TotalInterest 	=	0
		Suspend 		=	'N'
		AccrInterest 	=	0
		PrepaidAmount   = 	0
		if AmendmentPenalty == True:
			PrepaidAmount 	= kwargs.get('AmendmentAmount',0)
		else:
			PrepaidAmount = Outstanding
		if PDParam:
			if AmendmentPenalty==False:
				PreTermination 	=	PDParam.PreTermination
			else:
				PreTermination 	=	PDParam.AmendmentPenalty

			if PreTermination:
				NewStr 	=	PreTermination.split()
				
				if NewStr and NewStr[0] == "CUSTOM":
					SecondStr 	=	"CUSTOM"
				
				else:
					FirstStr 	=	NewStr[0] if len(NewStr) >= 1 else 1
					SecondStr 	=	NewStr[1] if len(NewStr) >= 2 else 1
					ThirdStr 	=	NewStr[2] if len(NewStr) >= 3 else 1

				RepObj 	=	MKT_REP_SCHEDULE.query.\
							filter(MKT_REP_SCHEDULE.LoanID == ID).\
							filter(MKT_REP_SCHEDULE.RepStatus != '0')


				NumberOfPaid	=	RepObj.count()
				# Result 	=	[False, FirstStr]
				# if not RepObj:
				LoanObj 	=	db.session.query(
									MKT_LOAN_CONTRACT.ID,
									MKT_LOAN_CONTRACT.ValueDate,
									MKT_LOAN_PRODUCT.IntDayBasis,
									MKT_LOAN_CONTRACT.OutstandingAmount,
									MKT_LOAN_CONTRACT.DisbursedStat,
									MKT_LOAN_CONTRACT.TotalInterest,
									MKT_LOAN_CONTRACT.IntIncEarned,
									MKT_LOAN_CONTRACT.Term,
									MKT_LOAN_CONTRACT.AccrCurrentInt,
									MKT_LOAN_CONTRACT.Installment,
									MKT_LOAN_CONTRACT.Currency,
									MKT_LOAN_CONTRACT.OutstandingAmount,
									MKT_LOAN_CONTRACT.Suspend,
									MKT_LOAN_CONTRACT.AccrInterest,
									MKT_LOAN_CONTRACT.LoanProduct,
									MKT_LOAN_CONTRACT.AccrIntPerDay
								).\
								join(
									MKT_LOAN_PRODUCT,
									MKT_LOAN_PRODUCT.ID == MKT_LOAN_CONTRACT.LoanProduct
								).\
								filter(MKT_LOAN_CONTRACT.ID == ID).\
								first()

				if LoanObj:
					Currency 		=	LoanObj.Currency
					ValueDate 		=	LoanObj.ValueDate
					IntDayBasis 	=	LoanObj.IntDayBasis
					DisbursedStat 	=   LoanObj.DisbursedStat
					IntIncEarned	=	LoanObj.IntIncEarned
					AccrCurrentInt 	=	LoanObj.AccrCurrentInt
					TotalInterest 	=	LoanObj.TotalInterest
					InstallmentOfLC	=	LoanObj.Installment
					Suspend 		=	LoanObj.Suspend
					AccrInterest 	=	LoanObj.AccrInterest

					if NewStr and NewStr[0] == "CUSTOM":
						SecondStr 	=	"CUSTOM"
					else:
						MultiFirstStr = NewStr[0].split("*")
						MultiThirdStr = NewStr[2].split("*")
						if len(MultiFirstStr) >1 and len(MultiThirdStr)> 1:
							if int(LoanObj.Term) <=12 :
								FirstStr 	=	MultiFirstStr[0] if len(NewStr) >= 1 else 1
								SecondStr 	=	NewStr[1] if len(NewStr) >= 2 else 1
								ThirdStr 	=	MultiThirdStr[0] if len(NewStr) >= 3 else 1
								
							elif int(LoanObj.Term) >12:
								FirstStr 	=	MultiFirstStr[1] if len(NewStr) >= 1 else 1
								SecondStr 	=	NewStr[1] if len(NewStr) >= 2 else 1
								ThirdStr 	=	MultiThirdStr[1] if len(NewStr) >= 3 else 1
				
				PaidOffDate	= 	BankDate
				PastDueObj 	=	MKT_PAST_DUE.query.get('PD%s'%ID)
				NumOfDay 	=	mktreschedule.getNumberOfDay(IntDayBasis, ValueDate, BankDate)

				# If paid off during less Last Date Of Penalty will be calculator
				# Penalty with total interest of installment.
				if DisbursedStat == "Y":
					# Validate PreTermination Format
					if SecondStr == "CUSTOM":
						Condition = True
					elif FirstStr[-1] == 'I' or SecondStr == 'D':
						Installment 	=	FirstStr[:-1] if FirstStr[-1] == 'I' else FirstStr
						if Installment == '0':
							Installment =	InstallmentOfLC
						LastDateOfPenalty 	= 	getLastDateOfPenalty(ID, Installment)
						Condition 			= 	PaidOffDate <= LastDateOfPenalty

					elif mkttool.isInteger(FirstStr):
						Condition = int(FirstStr) > int(NumOfDay) or int(FirstStr) == 0 
					else:
						mktmessage.setLogError('Wrong Format In PD Param PreTermination')


					"""
						Pretermination Rule: 
							1. Default rules: A - E
							2. Custom rule: this rule will be written into extend local project following this structure
								local/PROJECT_NAME/tools/mktcustomscript.py
					"""
					if Condition :

						if SecondStr == "A":
							# Example: if client pay off, client will be penalized sum of interest of first 4 installments
							# ThirdStr = 4
							RepObj 	=	MKT_REP_SCHEDULE.query.\
										filter(MKT_REP_SCHEDULE.LoanID == ID).\
										order_by(MKT_REP_SCHEDULE.No.asc()).\
										limit(int(ThirdStr)).\
										all()

							if RepObj:
								for row in RepObj:
									TotalPenalty += float(row.Interest)

						elif SecondStr == "B":
							# Example: if client pay off client will be penalized 20% of amount outstanding
							# ThirdStr = 20%
							Perc 		=	float(ThirdStr) / float(100)
							TotalPenalty 	=	float(Outstanding) * Perc

						elif SecondStr == "C":
							# Example: if client pay off client will be penalized 20% of amount disbursed
							# ThirdStr = 20%
							Perc 		=	float(ThirdStr) / float(100)
							TotalPenalty 	=	float(Disbursed) * Perc


						elif SecondStr == "D":
							# Example: If client pay-off client will be penalized interest of first 3 instalment not include the collected interest
							# ThirdStr = 3 installment
							Term = int(LoanObj.Term)
														
							if len(MultiThirdStr) == 1:
								TotalInterest = getPenaltyByInstallment(ID, ThirdStr)
							else:
								if Term <= 12:
									TotalInterest = getPenaltyByInstallment(ID, MultiThirdStr[0])
								elif Term >12:
									TotalInterest = getPenaltyByInstallment(ID, MultiThirdStr[1])
							# The interest have been collected from client
							CollectionInterest = IntIncEarned #- AccrCurrentInt
							if CollectionInterest < TotalInterest:
								TotalPenalty = TotalInterest - CollectionInterest
								if Suspend == 'Y':
									TotalPenalty = TotalInterest - CollectionInterest - AccrInterest
							
						elif SecondStr == "E":
							# Example: If Client paid-off, client will be penalized 25% of the total remaining interest
							# ThirdStr = 25%
							SchObj 	= 	db.session.query(
											MKT_REP_SCHEDULE.LoanID,
											func.sum(MKT_REP_SCHEDULE.Interest).label('Interest')
										).\
										filter(MKT_REP_SCHEDULE.LoanID==ID).\
										group_by(MKT_REP_SCHEDULE.LoanID)

							Sch1Obj	=	SchObj.filter(MKT_REP_SCHEDULE.CollectionDate<BankDate).first()
							TSchObj = 	SchObj.first()

							Perc 				=	Decimal(ThirdStr) / 100
							TotalInterestDue 	=	PastDueObj.TotInterestDue if PastDueObj else 0
							TotalInterest 		=	TSchObj.Interest
							CollectedInterest 	=	Sch1Obj.Interest if Sch1Obj else 0
							CollectedInterest 	=	CollectedInterest - TotalInterestDue
							TotalPenalty		=	(TotalInterest - CollectedInterest) * Perc
						# Add new option F for evergrowth 

						elif SecondStr == "F": 
							Perc = 0
							if len(ThirdStr)==1:
								Perc = ThirdStr
							else:
								try:
									Separator = ThirdStr.split("*")
									InstallmentSeparator = len(Separator)
									# 12/3=4
									if Installment >= InstallmentSeparator:
										InstallmentLitmit   = float(Installment) / float(InstallmentSeparator)
										InstallmentLitmit   = round(InstallmentLitmit)
										CurrentInstallment  = getCurrentInstallment(LoanID = ID)
										index = 0
										ins   = InstallmentLitmit
										for i in range(1,int(Installment),int(InstallmentLitmit)):
											if (CurrentInstallment - InstallmentLitmit) < ins:
												Perc = Separator[len(Separator)-1]
											if CurrentInstallment >= i and CurrentInstallment <=InstallmentLitmit:
												Perc = Separator[index]
												break
											index += 1
											InstallmentLitmit += ins
								except Exception as e:
									print "Installment is lower than Separator"
									raise e
							print "Perc:",Perc
							Perc = float(Perc) / 100
							TotalPenalty = float(PrepaidAmount) * Perc
							
						elif SecondStr == "CUSTOM":
							try:

								TotalPenalty = str(CustomTool.getCustomTerminationPenalty(NumOfDay,PaidOffDate,LoanObj,NewStr))

							except TypeError as e:
								kwargs.update({	'NumOfDay'		:	NumOfDay,
												'PaidOffDate'	:	PaidOffDate,
												'LoanObj'		:	LoanObj,
												'NewStr'		:	NewStr
									})
								TotalPenalty = str(CustomTool.getCustomTerminationPenalty(**kwargs))
							
							TotalPenalty = float(TotalPenalty.replace(',',''))

						TotalPenalty = mktmoney.toMoney(float(TotalPenalty),mktmoney.getCurrencyObj(Currency))
						TotalPenalty = float(TotalPenalty.replace(',',''))

						Result 	=	[True, TotalPenalty]

		return Result

	except Exception, e:
		return [False, "Error: %s" %e]
def getCurrentInstallment(LoanID = ""):
	CurrentInstallment = 0
	BankDate 		   = mktdate.getBankDate()
	ScheduleObj        = db.session.query(func.count(MKT_REP_SCHEDULE.LoanID).label('InstallmentNum')).filter(MKT_REP_SCHEDULE.LoanID==LoanID,MKT_REP_SCHEDULE.CollectionDate < str(BankDate)).first()
	if ScheduleObj:
		CurrentInstallment = ScheduleObj.InstallmentNum + 1
	return CurrentInstallment

def getLastDateOfPenalty(LoanID, NumOfInstallment):

	try:

		RepSheduleObj 	=	MKT_REP_SCHEDULE.query.\
							filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
							filter(MKT_REP_SCHEDULE.No == str(NumOfInstallment)).first()
		if RepSheduleObj:
			LastDateOfPenalty = RepSheduleObj.CollectionDate
		
			return LastDateOfPenalty
		else:
			return ''

	except Exception, e:
		print e
		db.session.rollback()
		db.session.close()
		raise

def getPenaltyByInstallment(LoanID, InterestOfInstallment):
	try:

		TotalOfInterest = 0
		RepSheduleObj 	=	MKT_REP_SCHEDULE.query.\
							filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
							filter(MKT_REP_SCHEDULE.No <= str(InterestOfInstallment)).\
							all()

		if RepSheduleObj:

			for row in RepSheduleObj:
				TotalOfInterest += row.Interest

		return TotalOfInterest

	except Exception, e:
		print e
		db.session.rollback()
		db.session.close()
		raise

def updatePreTerminationPenalty(ID, PenaltyAmount, AmendmentPenalty=False):
	try:
		CheckTask 		=	False
		LoanObj 		= 	MKT_LOAN_CONTRACT.query.get(ID)
		Branch 			=	""
		Category 		=	""
		AccBal 			=	0
		ReportingRateObj 	= mktaccounting.getReportingRateObj()
		Note 			=	'Amendment Penalty' if AmendmentPenalty else 'Pre-Termination Penalty'

		if LoanObj:

			Branch 		=	LoanObj.Branch
			Account 	=	LoanObj.Account
			FreqType 	=	LoanObj.FreqType
			Frequency 	=	LoanObj.Frequency
			Installment =	LoanObj.Installment
			Term 		=	LoanObj.Term
			Disbursed 	=	LoanObj.Disbursed
			Outstanding =	LoanObj.OutstandingAmount
			Currency 	=	LoanObj.Currency
			LoanProduct = 	LoanObj.LoanProduct			
			# CheckTask 	=	getTerminationPenalty(ID, Term, Installment, Frequency, FreqType, Disbursed, Outstanding, LoanProduct)


			AccObj 		=	MKT_ACCOUNT.query.get(Account)
			if AccObj:
				Category 	=	AccObj.AccCategory
				AccBal 		=	AccObj.AvailableBal

			PDParam 	=	mktparam.getPDParam()
			AccSetting 	=	mktsetting.getAccSetting()
			ODPenaltyCat=	""
			Transaction =	""
			DrCr 		=	"Dr"
			TranDate 	=	mktdate.getBankDate()
			Amount 		=	PenaltyAmount
			DateTimeNow = 	mktdate.getDateTimeNow()
			Mode 		=	""

			if float(AccBal) < float(Amount):
				Amount 	=	float(AccBal)

			if PDParam:
				## Amendment: PenaltyAmend
				if AmendmentPenalty:
					ODPenaltyCat 	=	PDParam.PenaltyAmend
					Transaction 	=	AccSetting.PenaltyAmendmentTran if AccSetting else ''
				## Terminate: PenaltyTerminate
				else:
					ODPenaltyCat 	= 	PDParam.PenaltyTerminate
					Transaction 	=	AccSetting.PenaltyTerminateTran if AccSetting else ''

			## if not Transaction  it will use PenaltyTran
			if AccSetting:
				if not Transaction:
					Transaction 	=	AccSetting.PenaltyTran

			## if not Terminate or Amendment, it will use ODPenaltyCat
			if not ODPenaltyCat:
				ODPenaltyCat = PDParam.ODPenaltyCat

			if not ODPenaltyCat:
				# Call method for error message
				error_msg = "Penalty income category not found."
				return mktmessage.msgError(0, error_msg)

			if not Category:
				# Call method for error message
				error_msg = "Account#%s category not found." %Account
				return mktmessage.msgError(0, error_msg)

			if Amount > 0:

				GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
				# Debit Customer Account
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					AllowEquivalent=True
				)

				#Check if is Leasing and have VATOnPenalty
				VATOnPenalty = mktsetting.getAppSetting("TerminatePenaltyVAT") if mktsetting.getAppSetting("TerminatePenaltyVAT") else ""
				'''
					If VATOnPenalty on AppSetting Terminate set to No Penalty Amount Does not Include VAT
					Else VATOnPenalty is Y will post Penalty Amount also to VAT
				'''

				#For Leasing
				if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":				
					LoanProductObj = MKT_LOAN_PRODUCT.query.get(LoanProduct)

					if not LoanProductObj:
						error_msg = "Loan Product does not found!"
						return mktmessage.msgError(0, error_msg)

					Tax 	= MKT_TAX.query.get(LoanProductObj.Tax)

					if not Tax:
						error_msg = "Penalty Tax Output Category not found!"
						return mktmessage.msgError(0, error_msg)

				if VATOnPenalty != "Y":
					# Define new parameter for Credit Penalty Category
					DateTimeNow = mktdate.getDateTimeNow()
					DrCr 		= "Cr"
					Mode 		= "Direct"
					Category 	= ODPenaltyCat
					if not Category:
						# Call method for error message
						error_msg = "Penalty income category not found."
						return mktmessage.msgError(0, error_msg)

					LCYCurrency,LCYAmount 	= mktaccounting.setLCYAmount(ReportingRateObj,AccSetting,Currency,Amount)

					GL_KEYS = mktaccounting.getConsolKey(Category, LCYCurrency, "", "LC", "", "", "", "", "", "", "", "", "")
					# Credit Penalty Category
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						DateTimeNow, 			# Createdon
						"System",				# Authorizer
						DateTimeNow,			# Authorizeon
						"", 					# AEID
						Account,				# Account
						Category,				# Category
						LCYCurrency,			# Currency
						DrCr,					# DrCr
						Decimal(LCYAmount), 	# Amount
						"LC",					# Module
						Transaction, 			# Transaction
						TranDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						AllowEquivalent=True
					)
				else:
					'''
						Is Leasing
						Penalty On VAT Account Posting
					'''
					
					#Post Penalty Collection Income
					DateTimeNow = mktdate.getDateTimeNow()
					DrCr 		= "Cr"
					Mode 		= "Direct"
					Category 	= ODPenaltyCat
					if not Category:
						# Call method for error message
						error_msg = "Penalty income category not found."
						return mktmessage.msgError(0, error_msg)

					LCYCurrency,LCYAmount 	= mktaccounting.setLCYAmount(ReportingRateObj,AccSetting,Currency,Amount)

					AmountAfterVAT = (float(LCYAmount)*100)/110
					AmountAfterVAT = mktmoney.toMoney(float(AmountAfterVAT), mktmoney.getCurrencyObj(LCYCurrency))
					AmountAfterVAT = AmountAfterVAT.replace(",","")


					GL_KEYS = mktaccounting.getConsolKey(Category, LCYCurrency, "", "LC", "", "", "", "", "", "", "", "", "")
					# Credit Penalty Category
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						DateTimeNow, 			# Createdon
						"System",				# Authorizer
						DateTimeNow,			# Authorizeon
						"", 					# AEID
						Account,				# Account
						Category,				# Category
						LCYCurrency,			# Currency
						DrCr,					# DrCr
						Decimal(AmountAfterVAT), 	# Amount
						"LC",					# Module
						Transaction, 			# Transaction
						TranDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						AllowEquivalent=True
					)

					#Post VAT
					Category 	= Tax.Category
					if not Category:
						# Call method for error message
						error_msg = "Penalty Tax VAT Output category not found."
						return mktmessage.msgError(0, error_msg)

					#Get VAT Amount 
					VATAmount = float(LCYAmount)-((float(LCYAmount)*100)/110)
					VATAmount = mktmoney.toMoney(float(VATAmount), mktmoney.getCurrencyObj(LCYCurrency))
					VATAmount = VATAmount.replace(",","")

					GL_KEYS = mktaccounting.getConsolKey(Category, LCYCurrency, "", "LC", "", "", "", "", "", "", "", "", "")

					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						DateTimeNow, 			# Createdon
						"System",				# Authorizer
						DateTimeNow,			# Authorizeon
						"", 					# AEID
						Account,				# Account
						Category,				# Category
						LCYCurrency,			# Currency
						DrCr,					# DrCr
						Decimal(VATAmount), 	# Amount
						"LC",					# Module
						Transaction, 			# Transaction
						TranDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						AllowEquivalent=True
					)

		return True

	except Exception, e:
		print "Error", str(e)
		db.session.rollback()
		return False

def getLoanAmendAmount(**kwargs):
	try:
		# Last Amend Date & First Amend Date
		LoanID 				= kwargs.get('LoanID')

		LastCollectionDate  = kwargs.get('LastCollectionDate')

		CollectionDate 		= kwargs.get('CollectionDate')

		FirstAmendDate 		= kwargs.get('FirstAmendDate')

		LastAmendDate 		= kwargs.get('LastAmendDate')

		AmendAmount 		= ''

		AddAmount 			= 0

		DeductAmount 		= 0

		NumDays  		= mktdate.getDateDiff(str(LastAmendDate),str(CollectionDate)) # equal 0 meaning collection date is a last amend date

		if str(FirstAmendDate) < str(CollectionDate) < str(LastAmendDate) or (NumDays >= 0 and NumDays <=31 and str(CollectionDate) != str(LastAmendDate)):
			#  '''
			#  In case, Last Amend Date (2017-11-06) == Collection Date (2017-11-06),next installment, collection Date (2017-11-06) must not equal to last collection date (2017-11-06)
			#  In case, amend at exact collection date, we exclude this, and start it in next collection date
			# '''
			QueryObj 			 = db.session.query(func.sum(MKT_LOAN_AMENDMENT.Amount).label('Amount'),
														MKT_LOAN_AMENDMENT.LoanID,
														MKT_LOAN_AMENDMENT.Currency).\
												filter(MKT_LOAN_AMENDMENT.AmendDate.between(str(LastCollectionDate),str(CollectionDate))).\
												filter(~(MKT_LOAN_AMENDMENT.AmendDate==CollectionDate)).\
												filter(MKT_LOAN_AMENDMENT.LoanID==LoanID).\
												group_by(MKT_LOAN_AMENDMENT.LoanID,MKT_LOAN_AMENDMENT.Currency)

			AmendAddedAmount 	 = QueryObj.filter(MKT_LOAN_AMENDMENT.AddDeduct=="2").first()

			AmendDeductedAmount	 = QueryObj.filter(MKT_LOAN_AMENDMENT.AddDeduct=="1").first()

			if AmendAddedAmount:
				AddAmount 		 = float(AmendAddedAmount.Amount)

			if AmendDeductedAmount:
				DeductAmount 	 = float(AmendDeductedAmount.Amount)

			if AmendAddedAmount and AmendDeductedAmount:
				AmendAmount = AddAmount - DeductAmount
				AmendAmount = mktmoney.toMoney(float(AmendAmount), mktmoney.getCurrencyObj(AmendDeductedAmount.Currency))

			elif AmendAddedAmount and not AmendDeductedAmount:
				AmendAmount = '+%s'%mktmoney.toMoney(float(AmendAddedAmount.Amount), mktmoney.getCurrencyObj(AmendAddedAmount.Currency)) 

			elif AmendDeductedAmount and not AmendAddedAmount:
				AmendAmount = '-%s'%mktmoney.toMoney(float(AmendDeductedAmount.Amount), mktmoney.getCurrencyObj(AmendDeductedAmount.Currency)) 

			else:
				AmendAmount = ''

		return AmendAmount
	except Exception as e:
		db.session.rollback()
		raise
	
		return False

#Capitalize Interest/Penalty 2018-04-11 Mony
def setCapitalize(**kwargs):
	"""
	1. Change Classification - Restructure Loan
		1.1 update LoanType in LC for do restructure loan in case do amend restructure
	2. Post accounting capitalize interest
		2.1 In case Suspend=Y => Post Dr.IIS, Cr. IIC
	3. Update LC
	4. Update Repayment schedule status
	5. Substract PD Principal and PD Interest	
	6. Change classification and provision
	
	"""		

	try:
		AmendID 		= kwargs.get("AmendID")
		Resource		= kwargs.get("Resource","INAU")		
		EOD 			= kwargs.get("EOD",1)
		SystemBankDate 	= str(mktdate.getBankDate())

		Amend 			= ""
		if Resource == "INAU":
			Amend = MKT_LOAN_AMENDMENT_INAU.query.get(AmendID)
		else:
			Amend = MKT_LOAN_AMENDMENT.query.get(AmendID)
		
		TrueOrFalse 	= "1"
		if Amend:
			OperationType 		= str(Amend.Operation).strip()
			AmtID 				= Amend.ID
			LoanID 				= Amend.LoanID
			CapitalizeOption 	= Amend.CapitalizeOption
			CapitalizeAmount 	= Amend.CapitalizeAmount
			AmendDate 			= Amend.AmendDate
			LoanType 			= Amend.LoanType

			LC = MKT_LOAN_CONTRACT.query.get(LoanID)
			if LC:
				LcCategory 		= LC.Category
				Branch 			= LC.Branch
				Currency 		= LC.Currency
				CustomerID 		= LC.ContractCustomerID
				TranDate 		= SystemBankDate
				LoanProduct 	= LC.LoanProduct
				Product 		= MKT_LOAN_PRODUCT.query.get(LoanProduct)		
				CurrencyObj 	= mktmoney.getCurrencyObj(Currency)	
				RoundCapitalizeAmount  	= 	mktmoney.toMoney(float(CapitalizeAmount),CurrencyObj)	
				RoundCapitalizeAmount 	=   float(RoundCapitalizeAmount.replace(",",""))

				Tran = mktsetting.getAccSetting()

				if not Tran:
					# Call method for error message
					TrueOrFalse = mktmessage.msgError(EOD, "Accounting setting record not found, Please go to setting.")

				else:

					k1 = Tran.GL_KEY1
					k2 = Tran.GL_KEY2
					k3 = Tran.GL_KEY3
					k4 = Tran.GL_KEY4
					k5 = Tran.GL_KEY5
					k6 = Tran.GL_KEY6
					k7 = Tran.GL_KEY7
					k8 = Tran.GL_KEY8
					k9 = Tran.GL_KEY9

					k1 = mktkey.getResultKey(k1, LoanID, CustomerID)
					k2 = mktkey.getResultKey(k2, LoanID, CustomerID)
					k3 = mktkey.getResultKey(k3, LoanID, CustomerID)
					k4 = mktkey.getResultKey(k4, LoanID, CustomerID)
					k5 = mktkey.getResultKey(k5, LoanID, CustomerID)
					k6 = mktkey.getResultKey(k6, LoanID, CustomerID)
					k7 = mktkey.getResultKey(k7, LoanID, CustomerID)
					k8 = mktkey.getResultKey(k8, LoanID, CustomerID)
					k9 = mktkey.getResultKey(k9, LoanID, CustomerID)

					if OperationType.upper() == "AMT" and CapitalizeOption == "Y":
						# Check if amendment's date is bank date or last bank date; To do.
						if str(AmendDate) == str(SystemBankDate):							
							Transaction 		= Tran.CapitalizeIntTran
							Note 				= "Capitalize interest"

							if Transaction:
								#1. ChangeClass
								#2. Post accounting capitalize interest								
								LCUpdate = MKT_LOAN_CONTRACT.query.get(LoanID)
								if LCUpdate:
									Suspend 	= LCUpdate.Suspend
									AssClass 	= LCUpdate.AssetClass
									Product 	= MKT_LOAN_PRODUCT.query.get(LCUpdate.LoanProduct)

								SuspendOrIncomeCat = mktloan.getSuspendOrIncomeCat(LoanID=LoanID)
								for i in range(0, 2):
									if i == 0:
										DrCr 		= "Dr"
										Mode 		= "Direct"
										Category 	= LcCategory
										GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)

									else:
										DrCr 		= "Cr"
										Mode 		= "Direct"
										Category 	= SuspendOrIncomeCat.get("AIR_Category")
										GL_KEYS 	= SuspendOrIncomeCat.get("AIR_GL_KEYS")
									
									DateTimeNow = mktdate.getDateTimeNow()
									if not Category:
										# Call method for error message
										TrueOrFalse = mktmessage.msgError(EOD, "AIR or loan outstanding category not found.")

									mktaccounting.postAccounting(
										"AUTH", 				# Status
										"0", 					# Curr
										"System",				# Inputter
										DateTimeNow, 			# Createdon
										"System",				# Authorizer
										DateTimeNow,			# Authorizeon
										"", 					# AEID
										"",				# Account
										Category,				# Category
										Currency,				# Currency
										DrCr,					# DrCr
										Decimal(RoundCapitalizeAmount), 		# Amount
										"LC",					# Module
										Transaction, 			# Transaction
										TranDate, 				# TransactionDate
										LoanID, 				# Reference
										Note, 					# Note
										"", 					# JNID
										Branch,					# Branch
										GL_KEYS,				# GL_KEYS
										Mode, 					# Mode check to insert Journal for category
										UserReference=AmtID
									)

								#2.1 In case Suspend=Y => Post Dr.IIS, Cr. IIC
								#In case Suspend=Y => Post Dr.IIS, Cr. IIC
								if Suspend == "Y":
									SuspendOrIncomeCat = mktloan.getSuspendOrIncomeCat(LoanID=LoanID)
									for i in range(0, 2):
										if i == 0:
											DrCr 		= "Dr"
											Mode 		= "Direct"
											Category 	= SuspendOrIncomeCat.get("Category")
											GL_KEYS 	= SuspendOrIncomeCat.get("GL_KEYS")

										else:
											DrCr 		= "Cr"
											Mode 		= "Direct"
											Category    = Product.IntIncomeCate.strip() if Product else ""
											GL_KEYS     = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
										
										DateTimeNow = mktdate.getDateTimeNow()
										if not Category:
											# Call method for error message
											TrueOrFalse = mktmessage.msgError(EOD, "IIS or IIC category not found.")

										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											"",						# Accounts
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(RoundCapitalizeAmount), 		# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											LoanID, 				# Reference
											Note, 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode, 					# Mode check to insert Journal for category
											UserReference=AmtID
										)

								#3. Update LC
								LCUpdate = MKT_LOAN_CONTRACT.query.get(LoanID)
								Curr = mktaudit.moveAUTHtoHIST(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT_HIST, LoanID)
								if LCUpdate:
									CapitalizeTotalAmount 		= 	getCapitalizeTotalAmount(AmendID=AmendID,Resource=Resource,Type="2")
									
									NewAmount 					=	float(LCUpdate.Amount) + float(CapitalizeTotalAmount) #capitalize interest/penalty
									NewOutstandingAmount		=	float(LCUpdate.OutstandingAmount) + float(RoundCapitalizeAmount)
									NewApprovedAmount 			=	float(LCUpdate.ApprovedAmount) + float(RoundCapitalizeAmount)
									
									LCUpdate.OutstandingAmount 	=	NewOutstandingAmount
									LCUpdate.Amount 			=	float(LCUpdate.Amount) + float(RoundCapitalizeAmount) #do not add PD pricipal yet because in loanclassification it book provision based on LCAmount + PD principal
									LCUpdate.ApprovedAmount 	= 	NewApprovedAmount
									LCUpdate.LoanType 			=	LoanType
									LCUpdate.AccrInterest 		= 	0
									LCUpdate.AccrCurrentInt 	= 	0
									LCUpdate.AccrIntPreMonth 	=	0
									LCUpdate.AccrIntCurrMonth 	=	0
									LCUpdate.Curr 				= 	int(Curr)+1
									db.session.add(LCUpdate)
									mktpd.loanClassification(LoanID=LoanID,Check="No",ForceReClass=True,Note=" ",ClassifiedMode="Manual")

									#update LC amount with pd principal
									LCUpdate = MKT_LOAN_CONTRACT.query.get(LoanID)
									LCUpdate.Amount 			= 	NewAmount
									db.session.add(LCUpdate)

								#4. Update Repayment schedule status (Capitalize Interest) for capitalize installment
								PDID = "PD%s" % LoanID
								PDDetailObj = db.session.query(MKT_PD_DATE.DueDate).\
															filter(MKT_PD_DATE.ID==PDID).\
															filter(or_(MKT_PD_DATE.OutPriAmount>0,
																	   MKT_PD_DATE.OutIntAmount>0))

								NewStatus = "5" #Capitalize Interest
								ScheduleObj = MKT_REP_SCHEDULE.query.\
														filter(or_(MKT_REP_SCHEDULE.CollectionDate==str(SystemBankDate),
																   MKT_REP_SCHEDULE.CollectionDate.in_(PDDetailObj.subquery()))).\
														filter(MKT_REP_SCHEDULE.LoanID==LoanID)
								for row in ScheduleObj:
									row.RepStatus = NewStatus
									db.session.add(row)

								#5. Substract PD Principal and PD Interest
								PDObj = MKT_PAST_DUE.query.filter(MKT_PAST_DUE.LoanID==LoanID).first()	
								TempCapitalizeAmount = float(RoundCapitalizeAmount)
								PDPrincipalAmount = 0															
								if PDObj:
									PDPrincipalAmount = PDObj.TotPrincipalDue
									##substract PD principal from detail PD table
									PDDetailObj = MKT_PD_DATE.query.filter(MKT_PD_DATE.ID == PDObj.ID)
									for row_pd in PDDetailObj:
										OutAmount 			= float(row_pd.OutAmount)
										OutPriAmount 		= float(row_pd.OutPriAmount)
										OutIntAmount 		= float(row_pd.OutIntAmount)

										PDIntAmount 		= 0

										if TempCapitalizeAmount >= OutIntAmount:
						  					PDIntAmount 	= OutIntAmount						
										else:
											PDIntAmount 	= TempCapitalizeAmount

										TempCapitalizeAmount = TempCapitalizeAmount - PDIntAmount

										row_pd.OutAmount 	= OutAmount - OutPriAmount - PDIntAmount
										row_pd.OutPriAmount = 0
										row_pd.OutIntAmount = OutIntAmount - PDIntAmount
										db.session.add(row_pd)

									##substract PD pricipal from PD table
									TotPrincipalDue = float(PDObj.TotPrincipalDue)
									TotInterestDue  = float(PDObj.TotInterestDue)
									PDTotInterestDue = 0
									if RoundCapitalizeAmount >= TotInterestDue:
										PDTotInterestDue = TotInterestDue
									else:
										PDTotInterestDue = TotInterestDue - RoundCapitalizeAmount	

									PDObj.TotODAmount = float(PDObj.TotODAmount) - TotPrincipalDue - PDTotInterestDue
									PDObj.TotPrincipalDue = 0									
									PDObj.TotInterestDue = float(PDObj.TotInterestDue) - PDTotInterestDue
									db.session.add(PDObj)

								#6. Change classificatiton & Provsion
								#Use ClassifiedMode for force reverse and book new provision without calculate new provision
								#IF not it will only reverse but not new booking becasue ProvisionAmount reture 0 when PD is 0 but class not zero
								mktpd.loanClassification(LoanID=LoanID,Check="No",ForceReClass=True,ClassifiedMode="Manual")

								TrueOrFalse = "1"
									
							else:
								# Call method for error message
								TrueOrFalse = mktmessage.msgError(EOD, "Capitalize transaction not found.")		

			else:
				# Call method for error message
				TrueOrFalse = mktmessage.msgError(EOD, "Loan contract not found.")

		else:
			# Call method for error message
			TrueOrFalse = mktmessage.msgError(EOD, "No loan amendment record.")

		if EOD == 1:
			return ""
		else:
			return TrueOrFalse

	except:
		db.session.rollback()
		raise
#end

#Capitalize Interest/Penalty 2018-04-11 Mony
def getCapitalizeTotalAmount(**kwargs):
	"""
	This function is for calcualte total amount to return back to Loan Balance
	Parameter:
		AmendID 	(String)	: Loan Amendment ID
		Resource 	(String)	: For type of Loan amendment table whether its INAU or LIVE		
		Type 		(String)	: #1:Only Principal,2:Principal + Capialize Int Amount
	Return
		Amount 		(float)
	Example:
		>>>>> Amount = getCapitalizeTotalAmount(LoanID="LC001",Resource="INAU",AmendID="LN001",Type="2")
		>>>>> 3095
	"""
	Resource 			= kwargs.get("Resource")
	AmendID 			= kwargs.get("AmendID")
	Type 				= kwargs.get("Type","")	#1:Only Principal,2:Principal + Capialize Int Amount

	Amount = 0

	if Resource == "INAU":
		Amend = MKT_LOAN_AMENDMENT_INAU.query.get(AmendID)
	else:
		Amend = MKT_LOAN_AMENDMENT.query.get(AmendID)

	if Amend:
		CapitalizeOption 	= Amend.CapitalizeOption
		CapitalizeAmount  	= Amend.CapitalizeAmount	
		CapitalizeAmount 	= mktmoney.toMoney(float(CapitalizeAmount), mktmoney.getCurrencyObj(Amend.Currency))
		CapitalizeAmount 	= float(CapitalizeAmount.replace(",",""))				
		if CapitalizeOption == "Y":
			PDObj = MKT_PAST_DUE.query.filter(MKT_PAST_DUE.LoanID==Amend.LoanID).first()
			if PDObj:
				Amount = Amount + float(PDObj.TotPrincipalDue)

			if Type == "2":
				Amount = Amount + float(CapitalizeAmount)

			Amount = mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Amend.Currency))
			Amount = float(Amount.replace(",",""))
			# print Amount

	return Amount
#end

def updateRepScheduleOnCollectionDate(**kwargs):
	try:
		LoanID = kwargs.get("LoanID")
		BankDate = kwargs.get("BankDate")
		Operation = kwargs.get("Operation")
		WaiveInterest = kwargs.get("WaiveInterest")

		RepSecheduleObj = MKT_REP_SCHEDULE.query.\
												filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
												filter(MKT_REP_SCHEDULE.CollectionDate == BankDate).\
												first()
		if RepSecheduleObj:
			InterestAmount = 0
			Interest = RepSecheduleObj.Interest
			if Operation == "D":
				InterestAmount = Interest - WaiveInterest
			elif Operation == "A":
				InterestAmount = Interest + WaiveInterest

			mktdb.updateRecord(MKT_REP_SCHEDULE, [MKT_REP_SCHEDULE.ID == RepSecheduleObj.ID], {"Interest": InterestAmount})
	except:
		db.session.rollback()
		raise
		

def getLoanAmendment(ID="",EOD=1,Date="",Resouce ="AUTH"):
	"""
	Definition:

	Params:
		- ID= Loan amend ID
		- Date = Bank Date or System Date
		- EOD
			0 : Refer to execute function from web interface.
			1 : Refer to execute function from terminal.
		- Resouce = UATH or INAU

	Return:
	
	Edit by :Borin
	"""
	try:
		if EOD==1:
			print "=========================="
			print "| Loan Amend Future Date |"
			print "=========================="
		SystemBankDate 		=  	str(mktdate.getBankDate())
		SystemBankDate 		= 	str(Date) if Date else SystemBankDate
		if Resouce=="INAU":
			AmendObj 			=	MKT_LOAN_AMENDMENT_INAU.query.filter(MKT_LOAN_AMENDMENT_INAU.AmendmentStat=="N",
																		 MKT_LOAN_AMENDMENT_INAU.AmendDate==SystemBankDate)
		else:
			AmendObj 			=	MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.AmendmentStat=="N",
																		 MKT_LOAN_AMENDMENT.AmendDate==SystemBankDate)
		if ID:
			if Resouce=="INAU":
				AmendObj  =	AmendObj.filter(MKT_LOAN_AMENDMENT_INAU.ID==ID)
			else :
				AmendObj  =	AmendObj.filter(MKT_LOAN_AMENDMENT.ID==ID)

		if AmendObj.first():
			for Row in AmendObj:
				ID 					=	Row.ID
				LoanID 				=	Row.LoanID
				Status 				=	Row.Status
				WaiveInterestAmount =	Row.WaiveInterest
				Operation 			= 	Row.Operation
				LoanType 			=	Row.LoanType
				Restructure 		= 	Row.Restructure
				CollectCurrInt 		= 	Row.CollectCurrInt
				AmendDate 			= 	Row.AmendDate

				if Operation.upper() == "AMT":
					RepSchedObj 		=	MKT_REP_SCHEDULE_INAU.query.\
											filter(MKT_REP_SCHEDULE_INAU.LoanID==LoanID).first()
					if not RepSchedObj:
						error_msg = "Payment schedule not found for loan %s "%LoanID
						if EOD==1:							
							mktmessage.setLogError(error_msg)
						else:
							print error_msg
							return False


				if CollectCurrInt > 0:

					import app.tools.mktloaninterest as mktloaninterest

					CollectStatus, Msg = mktloaninterest.collectCurrInt(LoanID, CollectCurrInt, AmendDate)

					if not CollectStatus:
						flash(msg_error + " %s" %(Msg))
						return False

				"""waiv interest"""
				#in case there are transaction (add,update,etc) above this transaction (setWaivInterest),
				#you need to generate auto id for it and place above those transaction if not it will not rollback when error
				#because in setAutoID function have commit in that
				#AutoID = mktautoid.getAutoID("FRM_PENALTY") #place this AUTO ID above
				#
				setWaivInterest(ID=ID,EOD=EOD,Date=SystemBankDate,Resource=Status,AutoID="")

				#update LoanContract info when restructure loan
				#Borin
				# upate min asset class 
				if Restructure=='Y':
					LCUpdate = MKT_LOAN_CONTRACT.query.get(LoanID)					
					if LCUpdate.LoanType=='N':
						Curr = mktaudit.moveAUTHtoHIST(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT_HIST, LoanID)
						LCUpdate.LoanType = "R"
						LCUpdate.Curr = int(Curr)+1
						# Update watchday after restructure
						CurAssClass = '%s-%s' %(LCUpdate.AssetClass,LCUpdate.LoanProduct)
						AssetClassObj = MKT_ASSET_CLASS_PRO.query.\
									   order_by(MKT_ASSET_CLASS_PRO.ID.asc()).\
									   filter(MKT_ASSET_CLASS_PRO.LoanType == str(LCUpdate.LoanType)).\
									   filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(LCUpdate.MoreThanOneYear)).\
									   filter(MKT_ASSET_CLASS_PRO.ID == CurAssClass).\
									   first()
						if not AssetClassObj:
							AssetClassObj = MKT_ASSET_CLASS_PRO.query.\
										   order_by(MKT_ASSET_CLASS_PRO.ID.asc()).\
										   filter(MKT_ASSET_CLASS_PRO.LoanType == str(LCUpdate.LoanType)).\
										   filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(LCUpdate.MoreThanOneYear)).\
										   filter(MKT_ASSET_CLASS_PRO.ID == LCUpdate.AssetClass).\
										   first()
						if AssetClassObj:
							if str(LCUpdate.WatchDay) == "0" and str(AssetClassObj.WatchDay) != "0":
								LCUpdate.WatchDay = str(AssetClassObj.WatchDay)

						db.session.add(LCUpdate)
					mktloan.setMinAssetClassRestructure(LoanID=LoanID,EOD=0)
					mktpd.loanClassification(LoanID=LoanID,Check="No")

				#End Borin

				#Capitalize Interest/Penalty 2018-04-11 Mony				
				Auth = setCapitalize(AmendID=ID,Resource=Status,EOD=0)
				if int(Auth) == 0:
					print "There something wrong in capitalzie interest method."
					return False
				#end

				"""Loan Amendment"""
				Auth =	setLoanAmendment(ID, Status, EOD)
				if int(Auth)==0:
					error_msg = "There something wrong in setLoanAmendment method."
					if EOD==1:						
						mktmessage.setLogError(error_msg)
					else:
						print error_msg
						return False

				#add waiveinterest to interest schedule in case amend in collection date
				if float(WaiveInterestAmount) > 0:
					updateRepScheduleOnCollectionDate(LoanID=LoanID,BankDate=SystemBankDate,WaiveInterest=WaiveInterestAmount,Operation="A")
				if EOD==1:
					msg ="%s amend future was successful "%ID
					mktmessage.msgOutputMsg(msg)
				
		else:
			if EOD==1:
				print "No loan future amend.\n"
			else:
				print "Loan amendment not found."
				return False
		return "" if EOD==1 else True
	except Exception as e:
		raise 

def setWaivInterest(ID='',EOD=1,Date=Date,Resource="AUTH",AutoID=""):
	"""
	Definition:
		Update LC and post accounting in case there's waive interest
	Params:
		-ID is loan amendment ID.
		-EOD is param use to check error.
	
	Edit by :Borin
	"""
	try:
		BankDate 	=	Date if Date else mktdate.getBankDate()
		if not AutoID:
			AutoID = mktautoid.getAutoID("FRM_PENALTY")
		if Resource=="INAU":
			LoanAmendmentObj 	=	MKT_LOAN_AMENDMENT_INAU.query.get(ID)
		else:
			LoanAmendmentObj 	=	MKT_LOAN_AMENDMENT.query.get(ID)
		
		if LoanAmendmentObj:
			LoanID 				= LoanAmendmentObj.LoanID
			WaiveInterestAmount = LoanAmendmentObj.WaiveInterest
			if WaiveInterestAmount > 0:
				PDWaive 			= "N"
				TranDate 			= LoanAmendmentObj.AmendDate
				UserReference 		= LoanAmendmentObj.ID
				Note 				= "Waive Accr current interest."

				Condition = {"LoanID"		: LoanID,
							 "Amount"		: WaiveInterestAmount,
							 "PDWaive"		: PDWaive,
							 "TranDate"		: TranDate,
							 "UserReference": UserReference,
							 "Note"			: Note}

				mktloan.updateLCAfterWaive(**Condition)

				#insert waive current interest to MKT_PENALTY #for more easy do report
				InsertWaivePD 	= {'LoanID'			: LoanID,
							       'CustomerName'	: LoanAmendmentObj.Customer,
							       'Currency'		: LoanAmendmentObj.Currency,
							       'TranDate'		: TranDate,
							       'Operation'		: "WI",
							       'InterestAmount'	: WaiveInterestAmount,
							       'Amount'			: 0,
							       'Note'			: Note,
							       'PDWaive'		: "N"}
				if EOD==1:
					InsertWaivePD.update({'Status':'AUTH',
										 'Curr':'0',
										 'Inputter':'System',
										 'Createdon':mktdate.getDateTimeNow(),
										 'Authorizer':'System',
										 'Authorizeon':mktdate.getDateTimeNow(),
										 'Branch':LoanAmendmentObj.Branch}
										 )

				InsertWaivePD.update({"ID":AutoID})
				mktdb.insertTable(MKT_PENALTY,InsertWaivePD)

				#deduct waiveinterest from interest schedule in case amend in collection date
				updateRepScheduleOnCollectionDate(LoanID=LoanID,BankDate=BankDate,WaiveInterest=WaiveInterestAmount,Operation="D")
	except:
		db.session.rollback()
		raise


