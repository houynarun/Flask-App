# -*- coding: utf-8 -*-

# Created by Kiry 
# Date: 29 January 2015
# Modify Date : 05 February 2015
# All Right Reserved Morakot Technology
# Description :
#			getDateNow()
#			getDatediff() calculator only 360/360

import calendar
import time
# from calendar import *
# from datetime import *
from datetime import date, datetime, timedelta

from dateutil.relativedelta import *
from flask import flash

# import loantools.rescheduletools as mktschedule
import loantools.nonworkingday as mktDay
import mktholiday as mktHoliday
import mktsetting as mktsetting
from app.AccSetting.models import MKT_ACCOUNTING_SETTING
from app.Dates.models import MKT_DATES
from app.mktcore.constant import *
from app.mktcore.imports import *

from .. import db


class Struct(object):

	def __init__(self, **entries):
		self.__dict__.update(entries)

def getDatediff360(DateFrom,DateTo): #YearA must be  datetime.date(2015, 1, 1)

	YearFrom	= int(DateFrom.year)
	MonthFrom	= int(DateFrom.month)
	DayFrom		= int(DateFrom.day)

	YearTo		= int(DateTo.year)
	MonthTo		= int(DateTo.month)
	DayTo		= int(DateTo.day)

	if DateTo >= DateFrom:

		DayResult	=	DayTo - DayFrom
	else:
		DayResult 	= 	(DayTo + 30) - DayFrom 
		MonthTo-=1


	if MonthTo >= MonthFrom:

		MonthResult	=	MonthTo - MonthFrom
	else:
		MonthResult 	= 	(MonthTo + 12) - MonthFrom 
		YearTo-=1


	if YearTo >= YearFrom:

		YearResult	=	YearTo - YearFrom
		
	if DateFrom > DateTo:

		print msg_error+"DateTo %s must be greater then DateFrom %s." % (DateTo,DateFrom)
		flash(msg_error+"DateTo %s must be greater then DateFrom %s." % (DateTo,DateFrom))
		NumberOfDays 	= 0
	else:
		NumberOfDays=(YearResult*12*30)+(MonthResult*30)+DayResult

	return NumberOfDays

def isLeapYear(Date):
# Date must be is yyyy-mm-dd
    if Date:
        year    = int(Date.split("-")[0])
        Leap    = year % 4
        
        if Leap == 0: # year is leap 1-29
            return True
        else: #year is non leap 1-28
            return False
            
def formatDate(Date,Formatting="dd-mm-yyyy"):
#Date must be is yyyy-mm-dd
#After formatting dd-mm-yyyy
	try:
		
		if Formatting == "dd-mm-yyyy":
			return Date.split("-")[2] + "-" + Date.split("-")[1] + "-" + Date.split("-")[0]

		elif Formatting == "dd/mm/yyyy":
			return Date.split("-")[2] + "/" + Date.split("-")[1] + "/" + Date.split("-")[0]
		
		elif Formatting == "ddmmyyyy":
			return ''.join(list(reversed(Date.split('-'))))

		elif Formatting == "DD":
			return Date.split("-")[2]

		elif Formatting == "MM":
			return Date.split("-")[1]

		elif Formatting == "YYYY":
			return Date.split("-")[0]

		elif Formatting == "MMYYYY":
			return '%s%s'%(Date.split("-")[1],Date.split("-")[0])

		elif Formatting == "DDMM":
			return '%s%s'%(Date.split("-")[2],Date.split("-")[1])
			
		else:
			NewDate = datetime.strptime(str(Date), "%Y-%m-%d").date()
			return  NewDate.strftime(Formatting)
	except:
		raise

def getDateISO(Date=None):
	try:
		if Date:
			now = Date
		else:
			d = datetime.now()
			now = '%s-%s-%s'% (d.year, d.month, d.day)
		CurrentDate = datetime.strptime(str(now), "%Y-%m-%d").date()
		return CurrentDate

	except:
		raise

def isDate(Date=''):
#Date must be is yyyy-mm-dd
#if data return True else False
	try:
		if Date:
			Date = str(Date)
			if Date.find('-') != -1: # the value search is list

				# Date
				d=int(Date.split("-")[2])
				# Month
				m=int(Date.split("-")[1])
				# Year
				y=int(Date.split("-")[0])
				# Validate Date
				Leap 	= y % 4
				if Leap == 0: # year is leap 1-29
					if m == 2:
						if d > 29:
							return False
				else: #year is non leap 1-28
					if m == 2:
						if d > 28:
							return False
				if d > 31:
					return False
				elif d <=0 :
					return False

				# Validate Month
				if m > 12:
					return False
				elif m <= 0:
					return False
					
				# Validate Year
				if y <= 100:
					return False
				return True
			else:
				return False
		
	except:
		return False
		
def getHour():
	try:
		dat = datetime.now()
		Hour = '%s:%s:%s'% (dat.hour, dat.minute, dat.second)

		return Hour
	except:
		raise

def getDateTimeNow():

	CurrentDateTime = str(time.strftime('%Y-%m-%d %H:%M:%S'))

	return CurrentDateTime

def getAge(DOB=None):
	CurrentDate = datetime.today()
	DateOfBirth = datetime.strptime(str(DOB),'%Y-%m-%d')

	Age = CurrentDate - DateOfBirth
	Age = Age.days / 365

	return Age

def toDateEngLong(Date):
	FormatDate = datetime.strptime(str(Date),'%Y-%m-%d').date()
	DateEng = FormatDate.strftime("%A %d-%B-%Y")

	return DateEng

def toDateShort(Date,Locale='EN',**kwargs):
	""" Using format date to Khmer and English
	How to use :
		$ go-vb
		$ python
		>>> from app.tools.mktdate import *
		>>> toDateShort('2010-10-15',Locale='KH',Format=5)
		u'15-\u178f\u17bb\u179b\u17b6-2010'
		>>> print toDateShort('2010-10-15',Locale='KH',Format=5)
		15-តុលា-2010
		>>> print toDateShort('2010-10-15',Locale='KH',Format=1)
		ថ្ងៃទី​​ ១៥ ខែ តុលា ឆ្នាំ​ ២០១០
		>>> print toDateShort('2010-10-15',Locale='KH',Format=2)
		១៥ តុលា ឆ្នាំ​ ២០១០
		>>> print toDateShort('2010-10-15',Locale='KH',Format=3)
		ខែ តុលា ឆ្នាំ​ ២០១០
		>>> print toDateShort('2010-10-15',Locale='KH',Format=4)
		សុក្រ
		>>> 
	"""
	result = ''
	if Date:
		Format = None
		NumberKh = {	1	: u'១',
						2	: u'២',
						3	: u'៣',
						4	: u'៤',
						5	: u'៥',
						6	: u'៦',
						7	: u'៧',
						8	: u'៨',
						9	: u'៩',
						0	: u'០'}

		KhmerDate=[u'ច័ន្ទ',u'អង្គារ',u'ពុធ',u'ព្រហ',u'សុក្រ',u'សៅរ៍',u'អាទិត្យ']
		KhmerMonth=['',u'មករា',u'កុម្ភៈ',u'មីនា',u'មេសា',u'ឧសភា',u'មិថុនា',u'កក្កដា',u'សីហា',u'កញ្ញា',u'តុលា',u'វិចិ្ឆកា',u'ធ្នូ']
		MyDate = datetime.strptime(str(Date),'%Y-%m-%d').date()
		if 'Format' in kwargs:
			Format = kwargs['Format']

		if Locale=='EN': #default EN

			result = MyDate.strftime('%a %d-%b-%Y')

		elif Locale=='KH':

			KH 	= KhmerDate[MyDate.weekday()]
			d 	= MyDate.strftime('%d')
			m 	= KhmerMonth[int(MyDate.strftime('%m'))]
			y   = MyDate.strftime('%Y')
			if Format:
				PFDD = u'ថ្ងៃទី​​'
				PFMM = u'ខែ'
				PFYY = u'ឆ្នាំ​'
				# Day
				DD = u''
				for row in list(d):
					DD+=NumberKh[int(row)]
				# Month
				MM = m
				# Convert year to khmer
				YY = u''
				for row in list(y):
					YY+=NumberKh[int(row)]

				#:ថ្ងៃទី​​ ១៥ ខែ តុលា ឆ្នាំ​ ២០១០
				if Format == 1:
					result = u'%s %s %s %s %s %s'%(PFDD,DD,PFMM,MM,PFYY,YY)

				#:១៥ តុលា ឆ្នាំ​ ២០១០
				elif Format == 2:
					result = u'%s %s %s %s'%(DD,MM,PFYY,YY)

				#ខែ តុលា ឆ្នាំ​ ២០១០
				elif Format == 3:
					result = u'%s %s %s %s'%(PFMM,MM,PFYY,YY)

				#:សុក្រ
				elif Format == 4:#Day Khmer Only
					result = u'%s'%(KH)

				#: 15-តុលា-2010
				elif Format == 5:
					result = u'%s-%s-%s'%(d,MM,y)

			else:
				KH  = u'{:<{}s}'.format(KH, 10)
				result=u'%s, %s %s %s'%(KH,d,m,y)

	return result

def getFirstDay(dt, d_years=0, d_months=0):

	y, m = dt.year + d_years, dt.month + d_months
	a, m = divmod(m-1, 12)

	return date(y+a, m+1, 1)


def getLastDay(dt,y='',m=''):
	if type(dt) == str:
		dt = datetime.strptime(str(dt),'%Y-%m-%d').date()
	return getFirstDay(dt, 0, 1) + timedelta(-1)

def getNextMonth(dt,NumberOfNext=1):
 
    mm = dt.month - 1 + NumberOfNext #Frequency is number of next month
    yy = dt.year + mm / 12
    mm = mm % 12 + 1
    dd = min(dt.day,calendar.monthrange(yy,mm)[1])
    NextMonth = date(yy,mm,dd)
    
    return NextMonth

def getLastDayPrevMonth(dt):
	return dt.replace(day=1) - timedelta(days=1)

# Example :
	# DateNow = mktdate.date.today()	
	# FirstDayCurMonth = mktdate.getDateISO(mktdate.getFirstDay(DateNow))		
	# LastDayPrevMonth = mktdate.getDateISO(mktdate.getLastDayPrevMonth(DateNow))
	# FirstDayPrevMonth = mktdate.getDateISO(mktdate.getFirstDay(LastDayPrevMonth))	

def getJulianDay(Date):

	CurrentDate = datetime.strptime(str(Date),'%Y-%m-%d').date()
	D = CurrentDate.timetuple()
	JulianDay = D.tm_yday
	Year = str(CurrentDate.year)[-2:]
	strFormat = '{:0>3d}'
	JulianDay = strFormat.format(JulianDay)
	JulianDay = Year + str(JulianDay)

	return JulianDay

def getBankDate():
	try:
		from app.Dates.models import MKT_DATES

		BankDate = MKT_DATES.query.get("SYSTEM")
		if BankDate:
			CurrentDate = BankDate.SystemDate
		else:
			BankDate = {'SystemDate':str(getDateISO())}
			CurrentDate = Struct(**BankDate)

		CurrentDate = datetime.strptime(str(CurrentDate), "%Y-%m-%d").date()
		
		return CurrentDate

	except:
		db.session.rollback()
		raise

def getBankDateObj():
	try:
		from app.Dates.models import MKT_DATES

		BankDate = MKT_DATES.query.get("SYSTEM")
		return BankDate

	except:
		db.session.rollback()
		raise

def getDateDiff(From, To):
	try:
		DateFrom 	= 	datetime.strptime(str(From),'%Y-%m-%d')
		DateTo 		= 	datetime.strptime(str(To),'%Y-%m-%d')

		NumOfDay 	=	DateTo - DateFrom

		return NumOfDay.days

	except:
		raise

def getNextWeekEndDay(StartDate, NumberOfNextWeek, Day, DayEndOfMonth, Holiday):
	try:
		
		ConvertToDate 	= datetime.strptime(str(StartDate),'%Y-%m-%d').date() #Convert string to like this datetime.date(2015, 1, 1)
		Weekend 		= timedelta(days = 7) * NumberOfNextWeek 
		NextWeek 		= ConvertToDate + Weekend
		
		return NextWeek

	except:
		raise

def getCurrentMonthEnd(SystemDate):
	try:

		CurrentMonthEnd = 	""
		Setting 		= 	mktsetting.getBankDateObj()
		CurrentDate 	= 	datetime.strptime(str(SystemDate),'%Y-%m-%d').date()
		Year 			= 	CurrentDate.year
		Month 			=	CurrentDate.month
		DayEndOfMonth 	= 	mktsetting.getAccSetting().MONTH_END.strip()

		if DayEndOfMonth.upper() == "END" or DayEndOfMonth.upper() == "":
			NewDate = getLastDay(CurrentDate)
		else:
			NewDate = Setting.NextMonthEnd
		
		NewDate = datetime.strptime(str(NewDate),'%Y-%m-%d').date()
		Day 	= NewDate.day
		Day 	= "%02d" %int(Day)
		Month 	= "%02d" %int(Month)
		CurrentMonthEnd = "%s-%s-%s" %(Year, Month, Day)

		return CurrentMonthEnd

	except Exception, e:
		raise

def getPeriodic(Frequency):
	try:

		Periodic 		= 	""
		BankDateObj 	=	mktsetting.getBankDateObj()
		TreyMeasValue 	=	{'01':['01', '02', '03'], '02':['04', '05', '06'], '03':['07', '08', '09'], '04':['10', '11', '12']}
		TreyMeasObj 	=	['01', '02', '03', '04']

		BankDate 	= 	getBankDate()
		Year 		= 	BankDate.year
		Month 		= 	BankDate.month
		Month 		= 	'%02d' %Month

		if int(Frequency) == 1:

			Periodic = BankDateObj.NextWeekend

		elif int(Frequency) == 2:

			Periodic = BankDateObj.NextMonthEnd

		elif int(Frequency) == 3:

			Quarterly = ''
			for item in TreyMeasObj:
				if Month in TreyMeasValue[item]:
					Quarterly = item
					break

			if Quarterly == "01":
				CurrentDate = "%s-%s-01" %(Year, "03")
				

			elif Quarterly == "02":
				CurrentDate = "%s-%s-01" %(Year, "06")

			elif Quarterly == "03":
				CurrentDate = "%s-%s-01" %(Year, "09")

			else:
				CurrentDate = "%s-%s-01" %(Year, "12")

			CurrentDate = 	datetime.strptime(str(CurrentDate),'%Y-%m-%d').date()
			QuaDate 	= 	getCurrentMonthEnd(CurrentDate)
			Periodic 	= 	QuaDate

		else:
			Periodic = BankDateObj.NextYearEnd

		return Periodic

	except Exception, e:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def getNextMonthDate(CurrentEndMonth, LastSystemDate):
	try:

		NextMonthEnd 	= CurrentEndMonth
		LastSystemDate  = datetime.strptime(str(LastSystemDate),'%Y-%m-%d').date()
		CurrentEndMonth = datetime.strptime(str(CurrentEndMonth),'%Y-%m-%d').date()

		if LastSystemDate == CurrentEndMonth:
			EndYear 		= CurrentEndMonth.year
			EndMonth 		= CurrentEndMonth.month
			EndDay 			= CurrentEndMonth.day
			NextMonthEnd 	= getNextMonth(date(int(EndYear), int(EndMonth), int(EndDay)))
			DayEndOfMonth 	= mktsetting.getAccSetting().MONTH_END.strip()
			if DayEndOfMonth.upper() == "END" or DayEndOfMonth.upper() == "":
				NextMonthEnd = getLastDay(NextMonthEnd)

			else:
				DayEndOfMonth 	=	getLastDayOfMonth(NextMonthEnd.year, NextMonthEnd.month, DayEndOfMonth)
				NextMonthEnd 	= 	date(NextMonthEnd.year, NextMonthEnd.month, int(DayEndOfMonth)) 

			NextMonthEnd	= 	str(NextMonthEnd)

		return NextMonthEnd

	except:
		raise

def getDayEndOfMonth(LastSystemDate):

	DayEndOfMonth = mktsetting.getAccSetting().MONTH_END.strip()
	if DayEndOfMonth.upper() == "END" or DayEndOfMonth.upper() == "":
		# Current Month End
		CurrentDate = datetime.strptime(str(LastSystemDate),'%Y-%m-%d').date()
		
		D 			= str(CurrentDate).split("-")
		Year 		= D[0]
		Month 		= D[1]
		CurrentDay 	= D[2]
		# Next Month
		CurrentDate 	= getNextMonth(date(int(Year), int(Month), int(CurrentDay)))

		DateEndOfMonth 	= getLastDay(CurrentDate)
		Day 			= str(DateEndOfMonth).split("-")
		DayEndOfMonth 	= int(Day[2])

	return DayEndOfMonth

def getNextDay(Date='',NumberOfDay=1):
	Date 		= datetime.strptime(str(Date),'%Y-%m-%d').date() if Date else getDateISO()
	NumberOfDay = timedelta(days=NumberOfDay) # one dayDate	
	NextDay 	= 	 Date + (NumberOfDay) #datetime.date(2015, 1, 1)
	return NextDay

def getPreviousDay(Date='',NumberOfDay=1):
	Date 		= datetime.strptime(str(Date),'%Y-%m-%d').date() if Date else getDateISO()
	NumberOfDay = timedelta(days=NumberOfDay) # one dayDate	
	PreviousDay	= 	 Date - (NumberOfDay) #datetime.date(2015, 1, 1)
	return PreviousDay

def setBankDate():
	try:
		
		Holiday = mktHoliday.getHoliday()

		BankDate = MKT_DATES.query.get("SYSTEM")
		if BankDate:
			one_day 			= 	timedelta(days=1) # one day
			LastSystemDate 		= 	BankDate.SystemDate
			SystemDate 			= 	BankDate.NextSystemDate
			NextSystemDate 		= 	datetime.strptime(str(BankDate.NextSystemDate),'%Y-%m-%d').date() + one_day #datetime.date(2015, 1, 1)
			NextMonthEnd 		= 	BankDate.NextMonthEnd
			LastMonthEnd		= 	BankDate.LastMonthEnd
			PrevLastMonthEnd	= 	BankDate.PrevLastMonthEnd

			NextWeekend 	= 	BankDate.NextWeekend
			NextYearEnd 	= 	BankDate.NextYearEnd
			LastYearEnd 	= 	BankDate.LastYearEnd

			LastDay = timedelta(days=30)
			Julian  = getJulianDay(SystemDate)

			BankDate.LastSystemDate 	=	LastSystemDate
			BankDate.SystemDate 		= 	SystemDate
			BankDate.NextSystemDate 	= 	NextSystemDate
			BankDate.JulianDate			=	Julian

			CurrentEndMonth = BankDate.NextMonthEnd

			DayEndOfMonth = getDayEndOfMonth(LastSystemDate)

			D 	= str(LastSystemDate).split("-")
			Day = D[2]

			E 		= str(NextWeekend).split("-")
			DayEnd 	= E[2]

			if int(Day) == int(DayEnd):
				NextWeekend = getNextWeekEndDay(NextWeekend, 1, Day, DayEndOfMonth, Holiday)

			NextMonthEnd = 	getNextMonthDate(CurrentEndMonth, LastSystemDate)

			if BankDate.NextYearEnd == LastSystemDate:
				BankDate.LastYearEnd =	BankDate.NextYearEnd
			
			if CurrentEndMonth != NextMonthEnd:
				PrevLastMonthEnd =	LastMonthEnd
				LastMonthEnd 	 = 	CurrentEndMonth
				NextYearEnd  	 = 	getNextYearEnd(SystemDate)

			BankDate.NextYearEnd 		=	NextYearEnd
			BankDate.NextWeekend 		=	NextWeekend
			BankDate.NextMonthEnd 		=	NextMonthEnd
			BankDate.LastMonthEnd 		=	LastMonthEnd
			BankDate.PrevLastMonthEnd 	=	PrevLastMonthEnd
			# Commit data update
			db.session.add(BankDate)
			db.session.commit()
			# Output message to screen
			print "Current System Date is 	%s." %SystemDate
			print "Next Weekend is 	%s." %NextWeekend
			print "Next Month End is 	%s." %NextMonthEnd
			print "Next Year End is 	%s." %NextYearEnd

		else:
			print "System date not found."
		
		return ""

	except:
		db.session.rollback()
		raise

def getWeekendDay(CurrentDate):
	try:

		Holiday = mktHoliday.getHoliday()
		one_day = timedelta(days=1) # one day

		check = True
		# check Next Date with Holiday and Weekend
		while check:
			check = mktDay.isNonWorkingDay(CurrentDate, Holiday)
			if check:
				CurrentDate = CurrentDate - one_day

		return int(Holiday)

	except:
		db.session.rollback()
		raise

def isDateISO(Date):
	try:
		if Date:
			if len(Date) == 10:
				Date = datetime.strptime(Date, '%Y-%m-%d')
				return True
			else:
				return False
		else:
			return False
	except ValueError:
		return False

def getNextYearEnd(CurrentDate):
	'''
		This method uses for calculate next year end by providing date
		Calculation is depend on setting of month end and year end 
		- Month end setting value can be "END" or value number of day of month. Ex. 25
		- Year end setting value is three character of month. Ex. JAN
		if year end setting value is "NOV", month end setting value is "END" 
		and provided date equal 2016-05-05 it return 2016-11-30
		if year end setting value is "NOV", month end setting value is "25" 
		and provided date equal 2016-05-05 it return 2016-11-25
	'''
	try:
		CurrentDate  	= 	datetime.strptime(str(CurrentDate),'%Y-%m-%d').date()
		Setting 		= 	mktsetting.getAccSetting()
		MonthDict 		= 	{ 	'JAN': 1, 'FEB': 2, 'MAR': 3, 'APR': 4, 'MAY': 5, 'JUN': 6, 
		                    	'JUL': 7, 'AUG': 8, 'SEP': 9, 'OCT': 10, 'NOV': 11, 'DEC': 12}
		MonthEndOfYear 	= 	MonthDict[Setting.YEAR_END.strip()]
		DayEndOfMonth 	= 	Setting.MONTH_END.strip()

		if DayEndOfMonth.upper() == "END" or DayEndOfMonth.upper() == "":
			Day	=	getLastDayOfMonth(CurrentDate.year, MonthEndOfYear)
		else:
			Day =	getLastDayOfMonth(CurrentDate.year, MonthEndOfYear, DayEndOfMonth)

		Year =	CurrentDate.year 
		if CurrentDate.month > MonthEndOfYear or (CurrentDate.month == MonthEndOfYear and CurrentDate.day > Day):
			Year += 1

		return date(Year, MonthEndOfYear, Day)
		
	except Exception, e:
		raise e

def getLastYearEnd(CurrentDate):
	try:
		NextYearEnd = getNextYearEnd(CurrentDate)
		return date(NextYearEnd.year -1, NextYearEnd.month, NextYearEnd.day)
	except Exception, e:
		raise e
	
def getLastMonthEnd(CurrentDate):
	'''
		This method uses for calculate last month end by providing date
		Calculation is depend on setting(setting value can be "END" or value number of day of month. Ex. 25)
		if setting value equal "END" it means day end of previous month base on calandar 
		if setting value is number it means previous month end by providing day. Ex. Current date is 2016-05-05 and 
		setting value equal 25 so previous month end is 2016-04-25 not 2016-04-30
	'''
	try:
		DayEndOfMonth 	= 	mktsetting.getAccSetting().MONTH_END.strip()
		CurrentDate  	= 	datetime.strptime(str(CurrentDate),'%Y-%m-%d').date()
		LastMonthEnd 	= 	getLastDayPrevMonth(CurrentDate) # if CurrentDate = 2016-05-05 it returns 2016-04-30
		NextMonthEnd 	= 	getNextMonthEnd(CurrentDate)

		if DayEndOfMonth and not DayEndOfMonth.upper() == "END":
			Day   		 =	getLastDayOfMonth(LastMonthEnd.year, LastMonthEnd.month, DayEndOfMonth)
			LastMonthEnd = 	date(LastMonthEnd.year, LastMonthEnd.month, Day)

			if (NextMonthEnd.month - LastMonthEnd.month) > 1:
				if NextMonthEnd.month == 12:
					Year 		=	NextMonthEnd.year + 1
					Month 		=	1
				else:
					Year 		=	NextMonthEnd.year
					Month 		=	NextMonthEnd.month + 1

				Day   		 =	getLastDayOfMonth(Year, Month, DayEndOfMonth)
				LastMonthEnd = 	date(Year, Month, Day)

		return LastMonthEnd
		
	except Exception, e:
		raise e

def getNextMonthEnd(CurrentDate):
	'''
		This method uses for calculate next month end by providing date
		Calculation is depend on setting(setting value can be "END" or value number of day of month. Ex. 25)
		if setting value equal "END" it means day end of month base on calandar 
		if setting value is number it means month end by providing day. Ex. Current date is 2016-05-05 and 
		setting value equal 25 so month end is 2016-05-25 not 2016-05-31
	'''
	try:
		DayEndOfMonth 	= 	mktsetting.getAccSetting().MONTH_END.strip()
		CurrentDate  	= 	datetime.strptime(str(CurrentDate),'%Y-%m-%d').date()
		NextMonthEnd 	= 	getLastDay(CurrentDate) # if CurrentDate = 2016-05-05 it returns 2016-05-31

		if DayEndOfMonth and not DayEndOfMonth.upper() == "END":
			Day   		 =	getLastDayOfMonth(NextMonthEnd.year, NextMonthEnd.month, DayEndOfMonth)
			NextMonthEnd = 	date(NextMonthEnd.year, NextMonthEnd.month, Day)

			if CurrentDate > NextMonthEnd:
				if NextMonthEnd.month == 12:
					Year 		=	NextMonthEnd.year + 1
					Month 		=	1
				
				else:
					Year 		=	NextMonthEnd.year
					Month 		=	NextMonthEnd.month + 1

				Day   		 	=	getLastDayOfMonth(Year, Month, DayEndOfMonth)
				NextMonthEnd 	= 	date(Year, Month, Day)

		return NextMonthEnd
		
	except Exception, e:
		raise e

def getLastDayOfMonth(Year, Month, DayEndOfMonth=''):
	'''
		return last day of provided month
		if DayEndOfMonth is provided we check it with last day of provided month if DayEndOfMonth is bigger
		it's not correct so it returns last day of provided month
		if DayEndOfMonth is smaller it returns DayEndOfMonth
	'''
	if DayEndOfMonth:
		DayEndOfMonth   =	int(DayEndOfMonth)
		LastDayOfMonth  =  	calendar.monthrange(Year, Month)[1]
		return DayEndOfMonth if LastDayOfMonth >= DayEndOfMonth else LastDayOfMonth
	else:
		return calendar.monthrange(Year, Month)[1]


def isInteger(Value):
	'''
	Check if the value is Integer if true return value else return false
	'''
	try:

		Value = int(Value)
		return Value

	except ValueError:

		return False


def isDateInteger(DateInt):
	'''
	Check if string of DateInt is the length of 2 and is it an integer
	If it is return true, else return false
	'''
	Opt = False

	if len(DateInt) == 2:

		if isInteger(DateInt):

			Opt = True

	return Opt


def checkFreq(Freq):
	'''
	Validate the Freqency check if it's in the correct format
	'''
	FREQ_DICT = {
		'D': 1,
		'W': 2,
		'M': 3,
		'Y': 4,
	}

	if len(Freq) < 3:
		return None, None, 'Length of Freqency must be 3 or more character long'
	# Check if the last character of the Freq is in FREQ_DICT
	if not FREQ_DICT.get(Freq[-1:].upper()):
		return None, None, 'Incorrect Freqency: %s Freqency must be %s' % (Freq[-1:].upper(), ' '.join(FREQ_DICT.keys()))
	# Check if the 1st character until the one before the last character is an integer
	if not isInteger(Freq[:-1]):
		return None, None, '%s Interval must be an Integer and bigger than 0' % Freq[:-1]

	Interval = int(Freq[:-1])
	RFreq = FREQ_DICT.get(Freq[-1:].upper())

	return Interval, RFreq, ''


def isMonthEndLastDay():
	'''
	Check if the Month End setting if set to END or is an integer return true, else return false
	'''
	AccSetting = getAccSetting()

	MonthEndSetting = AccSetting.MONTH_END

	Opt = False

	if MonthEndSetting.upper() == 'END':

		Opt = True

	elif isInteger(MonthEndSetting):

		Opt = True

	return Opt


def getMonthEndDay():
	'''
	Get if Month End setting is set to END return 31 and if Month End Setting is integer return that integer
	'''
	AccSetting = getAccSetting()

	MonthEndSetting = AccSetting.MONTH_END

	Opt = None

	if MonthEndSetting.upper() == 'END':

		Opt = 31

	elif isInteger(MonthEndSetting):

		Opt = isInteger(MonthEndSetting)

	return Opt


def getAccSetting():
	'''Get Accounting Setting'''
	return MKT_ACCOUNTING_SETTING.query.get('SYSTEM')


def convertDate(Date):
	'''
	If Date type of string or unicode, convert it to datetime of DATE_FORMAT and return the converted datetime
	If Date type of datetime already, convert it to datetime in the format of DATE_FORMAT and return the converted datetime
	Else return None
	'''
	DATE_FORMAT = '%Y-%m-%d'

	if isinstance(Date, str) or isinstance(Date, unicode):

		Date = datetime.strptime(Date, DATE_FORMAT).date()

	elif isinstance(Date, date):

		Date = Date.strftime(DATE_FORMAT)

	else:

		Date = None

	return Date


def isLegacyOpt(Freq):

	Opt = False
	FreqSplit = Freq.split()

	if len(FreqSplit) == 2:

		if len(FreqSplit[1]) == 4:

			MonthDayOpt = FreqSplit[1]

			try:

				Date = MonthDayOpt[:2] + "-" + MonthDayOpt[2:]
				datetime.strptime(str(Date), "%m-%d")

				Opt = True

			except:

				Opt = False
	else:

		Opt = False

	return Opt




# def LegacyOpt(Freq):

# 	BankDate 		= getBankDate()

# 	CurrentDate 	= str(BankDate)
# 	CurrentDate 	= CurrentDate.split("-")

# 	CurDay 		= "0"
# 	CurMonth	= "0"

# 	NewFrequency = ""

# 	if len(CurrentDate) > 2:

# 		CurMonth 	=	CurrentDate[1]
# 		CurDay 		= 	CurrentDate[2]

# 	RunDate = Freq.split()

# 	EndMonthDate 	= 	RunDate[1]
# 	EndMonth 		=	EndMonthDate[:2]
# 	EndDay 			=	EndMonthDate[2:]

# 	if int(CurDay) == int(EndDay) and int(CurMonth) == int(EndMonth):

# 		import loantools.rescheduletools as mktschedule

# 		NumberOfMonth 	=	int(Freq[:2]) if Freq[:2] else int(0)
# 		NextRunDate 	=	mktschedule.getNextMonth(BankDate, NumberOfMonth)

# 		NextRunDate 	=	str(NextRunDate).split('-')
# 		FirstStr 		= 	RunDate[0]
# 		SecondStr 		=	str(NextRunDate[1]) + str(NextRunDate[2])
# 		NewFrequency 	= 	FirstStr + " " + str(SecondStr)

# 	else:

# 		NewFrequency = Freq

# 	return NewFrequency


def convertFreqToNextRunDate(BankDate, Freq, Next=False):

	try:

		if Freq:

			DAY_DICT = {
				'MON': MO,
				'TUE': TU,
				'WED': WE,
				'THU': TH,
				'FRI': FR,
				'SAT': SA,
				'SUN': SU
			}

			MONTH_DICT = {
				'JAN': 1,
				'FEB': 2,
				'MAR': 3,
				'APR': 4,
				'MAY': 5,
				'JUN': 6,
				'JUL': 7,
				'AUG': 8,
				'SEP': 9,
				'OCT': 10,
				'NOV': 11,
				'DEC': 12
			}

			Interval = 0
			Message = ''
			RFreq = 0

			SplitFreq = Freq.split()

			AccSetting = getAccSetting()

			# Get Current Date
			CurrDate = convertDate(BankDate)

			NextRunDate = ''
			RelatDelta = None

			# Check if Frequency have correct format AAB
			# AA repesent Interval and B represent Frequency check FREQ_DICT in checkFreq function
			if len(SplitFreq) >= 1:

				Interval, RFreq, Message = checkFreq(SplitFreq[0])

				# if Interval and RFreq is empty. Then NextRunDate = None
				if not (Interval and RFreq):

					return None, Message
			# if Next = True don't minus Interval 1 else minus Interval 1
			if not Next:

				Interval = Interval - 1

			# Daily
			if RFreq == 1:

				if len(SplitFreq) == 1:

					RelatDelta = relativedelta(days=+Interval)

				else:

					Message = 'Wrong Daily Freqency format %s for example 01D or 15D' % Freq

			# Weekly
			elif RFreq == 2:

				if len(SplitFreq) == 2:

					Weekday = DAY_DICT.get(SplitFreq[1].upper())

					if Weekday:

						RelatDelta = relativedelta(weekday=Weekday(+1), weeks=+Interval)


					else:

						Message = 'Wrong Weekday format: %s example format %s' % (SplitFreq[1], ' '.join(DAY_DICT.keys()))

				else:

					Message = 'Wrong Weekly format: %s for exmaple 01W FRI or 02W MON' % Freq

			# Monthly
			elif RFreq == 3:

				if len(SplitFreq) == 2:

					FreqOpt = SplitFreq[1]

					if FreqOpt.upper() == 'END':

						if getMonthEndDay():

							RelatDelta = relativedelta(day=getMonthEndDay(), months=+Interval)

					elif isDateInteger(FreqOpt):

						'''
						If Current Bank Date + RelatDelta is smaller than Current Bank Date
						add 1 to Interval until Current Bank Date + RelatDelta bigger than Current Bank Date
						'''
						Condition = True
						while (Condition):

							RelatDelta = relativedelta(day=isInteger(FreqOpt), months=+Interval)

							Interval += 1

							Condition = (CurrDate + RelatDelta) < CurrDate

					else:

						Message = 'Wrong Monthly Frequency: %s for example 01M END or 03M 25' % Freq

				else:

					Message = 'Wrong Monthly Frequency: %s for example 01M END or 03M 25' % Freq

			# Yearly no need to check if RFreq == 4 because we already check it in checkFreq() above
			else:

				if len(SplitFreq) == 2:

					if SplitFreq[1].upper() == 'END':

						MonthEndDay = getMonthEndDay()

						YearEndMonth = MONTH_DICT.get(AccSetting.YEAR_END.upper())
						'''
						If Current Bank Date + RelatDelta is smaller than Current Bank Date
						add 1 to Interval until Current Bank Date + RelatDelta bigger than Current Bank Date
						'''
						Condition = True

						while (Condition):

							RelatDelta = relativedelta(day=MonthEndDay, month=YearEndMonth, years=+Interval)

							Interval += 1

							Condition = (CurrDate + RelatDelta) < CurrDate

					else:

						Message = 'Wrong Yearly Frequency %s for example 01Y END or 03Y 25 JAN' % Freq

				elif len(SplitFreq) == 3:

					MonthEndDay = isInteger(SplitFreq[1])
					YearEndMonth = MONTH_DICT.get(SplitFreq[2].upper())

					if MonthEndDay and YearEndMonth:
						'''
						If Current Bank Date + RelatDelta is smaller than Current Bank Date
						add 1 to Interval until Current Bank Date + RelatDelta bigger than Current Bank Date
						'''
						Condition = True

						while (Condition):

							RelatDelta = relativedelta(day=MonthEndDay, month=YearEndMonth, years=+Interval)

							Interval += 1

							Condition = (CurrDate + RelatDelta) < CurrDate

					else:

						Message = 'Wrong Yearly Frequency %s for example 01Y END or 03Y 25 JAN' % Freq

				else:

					Message = 'Wrong Yearly Frequency %s for example 01Y END or 03Y 25 JAN' % Freq		

		if RelatDelta != None:

			NextRunDate = CurrDate + RelatDelta

		return str(NextRunDate), Message
	except:

		raise

#Fixed Asset
def getDuration(DateOffSet, CurrentDate):
	
	DateOffSet = str(DateOffSet)
	Date = DateOffSet.split('-')
	Date_1 = datetime(int(Date[0]), int(Date[1]), int(Date[2]), 0, 0)

	CurrentDate = str(CurrentDate)
	Date = CurrentDate.split('-')
	Date_2 = datetime(int(Date[0]), int(Date[1]), int(Date[2]), 0, 0)
	
	DateDifference = relativedelta(Date_2, Date_1)

	return DateDifference

def validateUTC(Value,AllowBlank=False):
	"""
	Validate univeral time coordinate
	-AllowBalnk param is allow emtype field for un-required field
	"""
	try:
		Msg_Success = True,"Time is valid" # Success validation
		Msg_Fail    = False,"Time is invalid" # Fail validation
		if AllowBlank:
			Msg = Msg_Success
		else:
			if not Value:
				Msg = Msg_Fail
			else:
				Value = Value.split(":")
				if len(Value)!=2:
					Msg = Msg_Fail
				else:
					if int(Value[0])>24 or int(Value[1])>60:
						Msg = Msg_Fail
	except Exception as e:
		return Msg_Fail

	return Msg
