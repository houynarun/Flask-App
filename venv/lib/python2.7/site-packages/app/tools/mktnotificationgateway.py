import sys, os
sys.path.append(os.path.abspath('../../'))

from flask 							import flash,Markup,render_template_string, render_template, request
from app.mktcore.imports 			import *
from app.Notification.models 		import *
from app.tools.mktmail 				import MAIL
from app.tools.mktsms  				import SMS
import app.tools.mktapirequest 		as mktapirequest
import app.tools.mktdate 			as mktdate
import app.tools.mktaudit 			as mktaudit
import app.tools.mkttool 			as mkttool
import app.tools.mktdb 				as mktdb
import time
from app.mktcore.authentication 	import getToken
import requests,json
import app.tools.mktsetting 		as mktsetting
from app.Notification.models		import *
import app.mktcore.autoid 			as mktautoid
import app.tools.mktapirequest 		as api_request
from app.Customer.models 			import *
from app.User.models 				import *
import app.tools.mktmoney 			as mktmoney


class CLS_NOTIFICATION_GATEWAY(object):

	#execute send sms/email
	def setNotificationGateway(self):
		try:
			Result = True, ""
			CurrentDate =	mktdate.getDateISO()
			#NotifyStatus = 1: Queque, 4: Retry

			NotiGateObj = db.session.query(MKT_NOTIFICATION_GATEWAY).\
									filter(or_(MKT_NOTIFICATION_GATEWAY.NotifyStatus=="1",
											MKT_NOTIFICATION_GATEWAY.NotifyStatus=="4")).\
									filter(or_(MKT_NOTIFICATION_GATEWAY.Date==str(CurrentDate),
											   MKT_NOTIFICATION_GATEWAY.Date=="")) # filter queue(1) & retry(4) record & Date
			NotiGateObj = NotiGateObj.limit(5)
			CurrentTime = time.strftime('%H:%M')
			Index = 1
			if NotiGateObj.first():
				for Row in NotiGateObj:			
					if not str(Row.Time) or CurrentTime >= str(Row.Time):
						NotificationType 	= 	int(Row.NotifyType)
						Subject 			= 	Row.Subject
						Message 			=	Row.Message
						To 					= 	Row.To
						Time 				= 	Row.Time # UTC 
						Hour 				= 	mktdate.getHour() #UTC
						ID 					= 	Row.ID
						# print "Record ID",Row.ID
						if NotificationType==1: # SMS
							SendResult = 	SMS.sendSMS(Body=Message,
										 			     To=To)
						else:
							SendResult = 	MAIL.sendMail(	Subject 		= Subject,
															Recipients		= [To],
															Body 			= Message)
						
						Result = self.updateNotifyGateway(ID,SendResult)
						db.session.commit()
						Msg = "\t%s. send notification sms/email to %s [%s - %s]" % (Index,To,Result[1],SendResult[1])
						Result = True, Msg
					else:
						Result = True, "\tNot yet time to send %s ..." % Row.To

					Index+=1
			else:
				Result = True, "\tNo record found."
			return Result
		except Exception, e:
			return False, str(e)

	def updateNotifyGateway(self,ID,Msg):
		try:
			""" 
			Update reocrd
			Msg = (False/True,"Message detail")
			"""
			UpdateData = {}
			if Msg[0]:
				NotifyStatus=2 #Success
			else:
				NotifyStatus=3 #fail		

			UpdateData.update({"NotifyStatus":NotifyStatus,"Error":Msg[1],"ResultDateTime": mktdate.getDateTimeNow()})
			mktdb.updateRecord(MKT_NOTIFICATION_GATEWAY,[MKT_NOTIFICATION_GATEWAY.ID==ID],UpdateData)

			if NotifyStatus==2:
				NotifyObj = MKT_NOTIFICATION_GATEWAY.query.get(ID)
				if NotifyObj:
					Data = {}
					Data.update(NotifyObj.__dict__)
					if "_sa_instance_state" in Data.keys():
						del Data['_sa_instance_state']
					# copy record to MKT_NOTIFICATION_GATEWAY_RESERVE
					ReserveObj = MKT_NOTIFICATION_GATEWAY_RESERVE(**Data)
					db.session.add(ReserveObj)
					# del record from MKT_PAYMENT_GATEWAY
					mktdb.deleteRecord(MKT_NOTIFICATION_GATEWAY,[MKT_NOTIFICATION_GATEWAY.ID==ID])

			return True, "Success" if NotifyStatus == 2 else "Fail"

		except Exception, e:
			return False, str(e)

	#end execute send sms/email

	def getNAuthorize(self,URL):
		from app.Module.models import MKT_FORM
		FormObj = MKT_FORM.query.filter(MKT_FORM.URL==URL).first()
		return int(FormObj.NAuthorize) if FormObj else 0

	def autoExecuteNotificationScript(self,TemplateList=""):
		try:	
			Result = True,""		
			TemplateALLObj = MKT_NOTIFICATION_TEMPLATE.query.\
								filter(MKT_NOTIFICATION_TEMPLATE.Enable == "Y")
			if TemplateList:
				TemplateALLObj = TemplateALLObj.filter(MKT_NOTIFICATION_TEMPLATE.ID.in_(TemplateList))
			
			Option = 1 #1: Execute without using api , 2: using api		
			if TemplateALLObj.first():
				for row in TemplateALLObj:
					if Option == 1:				
						Result = self.excuteTemplateNoAPI(TemplateID=row.ID)
					else:
						Result = self.excuteTemplateAPI(TemplateID=row.ID)
				# return Result
			else:
				Result = True, "No template to execute "
			return Result
		except Exception, e:
			return False, str(e)

	#end auto execute templates
	def excuteTemplateNoAPI(self,**kwargs):
		try:
			TemplateID 	= 	kwargs.get("TemplateID")
			TemplateObj = 	MKT_NOTIFICATION_TEMPLATE.query.get(TemplateID)
			if TemplateObj:
				#ExecuteID	=   mktautoid.getAutoID("FRM_TEMPLATE_EXEC")
				Result = self.executeNotify(TemplateID=TemplateID,IntervalOpt=1)

			return Result

		except Exception, e:
			return False, str(e)
			

	def excuteTemplateAPI(self,**kwargs):
		try:
			TemplateID 	= 	kwargs.get("TemplateID")
			TemplateObj = 	MKT_NOTIFICATION_TEMPLATE.query.get(TemplateID)
			if TemplateObj:
				FormUrl 	= 	"NotificationExec"
				NAuthorize  = 	self.getNAuthorize(URL=FormUrl)
				Username = "" 
				Password = ""
				NotiSettingObj	= mktsetting.getNotificationSetting()
				if NotiSettingObj:
					Username = str(NotiSettingObj.AdminUser).strip() 
					Password = str(NotiSettingObj.AdminPassword).strip() 

				# print "===========. ", NAuthorize

				#insert to execute
				AutoID 		=   mktautoid.getAutoID("FRM_NOTIFICATION_EXEC") 
				Token 		=  	mktapirequest.api_request.getRequestLogin(Username=Username,Password=Password)

				BaseUrl 	=	"%s/Morakot/API/%s/"%(mktapirequest.api_request.getMorakotBaseUrl(),FormUrl) # api url
				PostUrl 	= 	BaseUrl+"?accept=override"# accept= override is atomaically accept

				Dic = {}

				Inputter = "" if NAuthorize == 0 else "SYSTEM"

				Dic.update({'Status'	: 	""})
				Dic.update({'Curr' 		: 	""})
				Dic.update({'Inputter' 	:	""})
				Dic.update({'Createdon' : 	""})
				Dic.update({'Authorizer' : 	""})
				Dic.update({'Authorizeon': 	""})
				Dic.update({'Branch'	 :  ""})

				#data
				Dic.update({'ID'	     :  AutoID})	
				Dic.update({'Template'	 :  TemplateObj.ID})
				Dic.update({'NotifyDate' :  ""})
				Dic.update({'NotifyTime' :  ""})
				Dic.update({'Note'	  	 :  ""})

				headers = 	{	
							'authorizationkey':	Token ,
							'accept': "application/json",
							'content-type': "application/json"
							}
				#post new execute
				MsgResponse ,status_code = mktapirequest.api_request.postForm(url=PostUrl,data=Dic,headers=headers,Inputter=Inputter)
				# print "insert ..............."
				# print MsgResponse
				# print status_code

				if NAuthorize == 1 and status_code == 200:
					#post authorize
					AuthUrl = "%s%s%s%s" % (BaseUrl,"Authorize/",AutoID,"/?accept=override")# accept= override is atomaically accept
					# print AuthUrl
					MsgResponse ,status_code = mktapirequest.api_request.postAuthorize(url=AuthUrl,headers=headers)
					# print "authorize ............."
					# print MsgResponse
					# print status_code

				if status_code == 200:
					print "successful execute %s ==> %s" % (AutoID,TemplateObj.Description)
					#delete execute report in case it do not have value
					GatewayObj = MKT_NOTIFICATION_GATEWAY.query.filter(MKT_NOTIFICATION_GATEWAY.ExecuteID==AutoID).first()
					if not GatewayObj:
						ExeObj = MKT_NOTIFICATION_EXEC.query.get(AutoID)
						if ExeObj:
							print "delete execute records %s ==> %s" % (AutoID,TemplateObj.Description)
							db.session.delete(ExeObj)
							db.session.commit()

			return True, ""
		except Exception, e:
			return False, str(e)
			

	def checkGatewayReference(self,**kwargs):
		TableObj 		= kwargs.get("TableObj")
		ReferenceField  = kwargs.get("ReferenceField")
		NotifyType 		= kwargs.get("NotifyType")

		GatewayObj = 	db.session.query(MKT_NOTIFICATION_GATEWAY.Reference).\
											filter(MKT_NOTIFICATION_GATEWAY.Reference !="").\
											filter(MKT_NOTIFICATION_GATEWAY.NotifyType == NotifyType)

		ReserveObj = 	db.session.query(MKT_NOTIFICATION_GATEWAY_RESERVE.Reference).\
											filter(MKT_NOTIFICATION_GATEWAY_RESERVE.Reference !="").\
											filter(MKT_NOTIFICATION_GATEWAY_RESERVE.NotifyType == NotifyType)
		if GatewayObj.first():
			Filter = [~ReferenceField.in_(GatewayObj.subquery())]
			TableObj = TableObj.filter(*Filter)

		if ReserveObj.first():
			Filter = [~ReferenceField.in_(ReserveObj.subquery())]
			TableObj = TableObj.filter(*Filter)

		return TableObj

	def executeNotify(self,**kwargs):
		try:
			Result 		= 	True,""
			ExecuteID 	= 	kwargs.get("ExecuteID")
			Resource	=	kwargs.get("Resource")
			TemplateID  = 	kwargs.get("TemplateID")
			NotifyDate 	= 	kwargs.get("NotifyDate","")
			NotifyTime 	= 	kwargs.get("NotifyTime","")
			IntervalOpt	= 	kwargs.get("IntervalOpt",0) #0: execute from form, 1: execute in interval or cron
			
			if ExecuteID:
				if Resource == "INAU":
					TABLE 	= 	MKT_NOTIFICATION_EXEC_INAU
				else:
					TABLE 	= 	MKT_NOTIFICATION_EXEC


				ExecuteObj  = 	TABLE.query.get(ExecuteID)
				if ExecuteObj:				
					TemplateID = ExecuteObj.Template
					NotifyDate = ExecuteObj.NotifyDate
					NotifyTime = ExecuteObj.NotifyTime

			if TemplateID:
				#1. find list of contact to insert
				#2. translate template
				#3. insert to notify gateway
				TemplateObj 	= MKT_NOTIFICATION_TEMPLATE.query.get(TemplateID)
				NotifyResult 	= self.getNotifyRecords(TemplateID=TemplateID)

				if NotifyResult[0]:	#True
					NotifyDict = NotifyResult[1]
					if NotifyDict:
						"""
						{
							"Recipients" 	:Recipients,
							"RecipientsData":RecipientsData,
							"CommonData"	:CommonData
						 }
					 	"""
					 	Recipients 		= NotifyDict.get("Recipients")
					 	RecipientsData 	= NotifyDict.get("RecipientsData")
					 	CommonData 		= NotifyDict.get("CommonData")
					 	References 		= NotifyDict.get("References","")
					 	AutoExecuteID 	= ExecuteID
					 	# print "Reference ", References
					 	if IntervalOpt == 1: #used interval
					 		#DateTime,TemplateID,TemplateTool,ExecuteID,Total
					 		if not ExecuteID:
						 		AutoExecuteID = mktautoid.getAutoID("FRM_TEMPLATE_EXEC")
					 		else:
					 			AutoExecuteID = ExecuteID

					 		ExeLogs = "%s,%s,%s,%s,%s" % (mktdate.getDateTimeNow(),TemplateID,TemplateObj.Tool,AutoExecuteID,len(Recipients))
				 			self.writeExecute(Path="/var/log/vb/notification/",Text=ExeLogs)
				 			Result = True, "\t%s" %ExeLogs
				 		

					 	index = 0					 	
					 	for recipient in Recipients:
					 		Recipient = self.getRecipientInfo(RecipientID=recipient)
					 		RecipientData = RecipientsData.get(recipient)
					 		AutoID 		= mktautoid.getAutoID("FRM_NOTIFICATION_GATEWAY")
					 		with app.app_context():
								Subject = render_template_string(TemplateObj.Subject,
													Recipient=Recipient,
													RecipientData=RecipientData,
													CommonData=CommonData,
													formatMoney=self.formatMoney,
													formatNumber=mktmoney.formatNumber) 
								Message = render_template_string(TemplateObj.Message,
													Recipient=Recipient,
													RecipientData=RecipientData,
													CommonData=CommonData,
													formatMoney=self.formatMoney,
													formatNumber=mktmoney.formatNumber) 
							NotifyStatus = '1' #Queue
							NotifyType = TemplateObj.NotifyType
							Date = NotifyDate if NotifyDate else TemplateObj.NotifyDate
							Time = NotifyTime if NotifyTime else TemplateObj.NotifyTime
							ExecuteID = "%s" % ExecuteID
							Reference = ""
							if References:
								Reference = References[index]

							To 	 = self.getContact(NotifyType=NotifyType,RecipientID=recipient)
							
							PostData = {}
							PostData.update({"Subject": Subject,"Message": Message,"NotifyStatus":NotifyStatus,
											 "NotifyType": NotifyType,"Date":Date,"Time":Time,"ExecuteID":AutoExecuteID,
											 "Reference": Reference,
											 "To": To,
											 "ID": AutoID,
											 "ResultDateTime": mktdate.getDateTimeNow()})

							if IntervalOpt == 1:
								PostData.update({'Status'	: 	"AUTH"})
								PostData.update({'Curr' 	: 	"0"})
								PostData.update({'Inputter' :	"SYSTEM"})
								PostData.update({'Createdon' : 	mktdate.getDateTimeNow()})
								PostData.update({'Authorizer' : "SYSTEM"})
								PostData.update({'Authorizeon': mktdate.getDateTimeNow()})
								PostData.update({'Branch'	 :  "HO"})

							self.insertNotifyGateway(data=PostData)
							db.session.commit()

							index = index + 1

				else: # False
					Result = False, NotifyResult[1]

			else:
				Result = True, "No template to execute"

			return Result

		except Exception, e:
			return False, str(e)

	def getNotifyParamDict(self,**kwargs):
		"""
		Notify Param Syntax:
			VariableName1=Value
			VariableName2=Value
			Value canbe anyting. Program need to split or anything by their own
		This Param like setting of that particular notify script
		Result:
			return Dict of Param name with value
		Example:
			>>>> getNotifyParam(Param='PRE_NOTIFY_DAY=2')
			>>>> {"PRE_NOTIFY_DAY": '2'}
		"""
		Result = {}
		Param = kwargs.get("Param")
		if Param:
			ParamList = Param.split("\n")
			for param in ParamList:
				VariableName = param.split("=")[0].strip()
				Value 		 = param.split("=")[1].strip()
				Result.update({VariableName: Value})

		return Result	

	def getNotifyRecords(self,**kwargs):
		Result 			= True,{}
		TemplateID 		= kwargs.get("TemplateID")
		TemplateName   	= kwargs.get("TemplateName")
		TemplateParam 	= kwargs.get("TemplateParam")
		NotifyType 	 	= kwargs.get("NotifyType","")

		TemplateObj = MKT_NOTIFICATION_TEMPLATE.query.get(TemplateID)
		if TemplateObj:
			TemplateName = TemplateObj.Tool
			TemplateParam = TemplateObj.ToolParam
			NotifyType = TemplateObj.NotifyType
		# print TemplateName 
		# print TemplateParam
		try:
			ImportFile = "import app.NotificationScript.%s as mktnotifyscript" % TemplateName	
			exec(ImportFile)
		except Exception as e:
			#Result = False, str(e)			
			ExtendModuleObj = mktsetting.ExtendModule()
			LocalPath = ExtendModuleObj.getLocalPath()
			ImportFile = "import %s.NotificationScript.%s as mktnotifyscript" % (LocalPath,TemplateName)
			exec(ImportFile)

		try:			
			ParamDict = self.getNotifyParamDict(Param=TemplateParam)
			ParamDict.update({"NotifyType": NotifyType})
			ResultDict = mktnotifyscript.NOTIFY.getRecords(**ParamDict)
			# print "Result ", len(ResultDict.get("Recipients"))
			Result = True, ResultDict

		except Exception as e:
			Result = False, str(e)	
		else:
			pass
		finally:
			pass
				

		return Result	

	def getRecipientInfo(self,**kwargs):
		Result 		= {"Mobile":"",
						"Email":"",
						"FirstNameEn":"",
						"LastNameEn":"",
						"FirstNameKh":"",
						"LastNameKh":""
					}
		RecipientID = kwargs.get("RecipientID")
		Obj = MKT_CUSTOMER.query.get(RecipientID)
		if Obj:
			Result.update({"Mobile": Obj.Mobile1})
			Result.update({"Email": Obj.Email})
			Result.update({"FirstNameEn": Obj.FirstNameEn})
			Result.update({"LastNameEn": Obj.LastNameEn})
			Result.update({"FirstNameKh": Obj.FirstNameKh})
			Result.update({"LastNameKh": Obj.LastNameKh})
		else:
			Obj = MKT_USER.query.get(RecipientID)
			if Obj:
				Result.update({"Mobile": Obj.Mobile1})
				Result.update({"Email": Obj.Email})
				Result.update({"FirstNameEn": Obj.DisplayName})
				Result.update({"LastNameEn": Obj.DisplayName})
				Result.update({"FirstNameKh": Obj.DisplayName})
				Result.update({"LastNameKh": Obj.DisplayName})

		return Result

	def getContact(self,**kwargs):
		Result = ''
		NotifyType 		= kwargs.get("NotifyType")
		RecipientID    	= kwargs.get("RecipientID")
		RecInfo = self.getRecipientInfo(RecipientID=RecipientID)

		if NotifyType == '1':#sms
			Result = RecInfo.get("Mobile")
		elif NotifyType == '2':#email
			Result = RecInfo.get("Email")

		return Result

	def insertNotifyGateway(self,**kwargs):
		try:		
			data 	= 	kwargs.get("data",{})	
			mktdb.insertTable(MKT_NOTIFICATION_GATEWAY,data)
		except Exception as e:
			pass

	def formatMoney(self,Amount,Currency):
		return mktmoney.toMoney(float(Amount),mktmoney.getCurrencyObj(Currency))

	def writeExecute(self,**kwargs):
		try:
			DefaultPath = "/var/vblogs/notification/";
			DefaultFileName = "executes_%s.log" % mktdate.getDateISO()
			PATH = kwargs.get("Path",DefaultPath)
			FILE_NAME = kwargs.get("FileName",DefaultFileName)
			TEXT = kwargs.get("Text")
			PATH_FILE = "%s%s" % (PATH,FILE_NAME)
			Result = mkttool.setWriteFile(PATH_FILE,TEXT,False)	
			return Result

		except Exception, e:
			print str(e)
			return False, str(e)	

# NOTIFY_GATEWAY =	CLS_NOTIFICATION_GATEWAY()
