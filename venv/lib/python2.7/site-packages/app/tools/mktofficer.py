'''
Created Date: 04 Sep 2015
Author: Sovankiry Rim

Modified by: Sovankiry
Modified Date: 30 Sep 2015
All Right Reserved Morakot Technology
Description : mktofficer refer to function officer , generate disburse sheet and disbursement.
'''

from app.mktcore.imports 	import *
from app import app,db
from sqlalchemy import or_
from decimal 					import *
from app.Officer.models 		import *
from app.LoanContract.models 	import *
from app.Customer.models 		import *
from app.Account.models 		import *
from app.CashAccount.models 	import *
from app.Branch.models 			import *
from app.Disbursement.models	import *
from app.VB.models 				import *
from app.FundTransfer.models 	import MKT_FUND_TRANSFER
from app.RestrictBranch.models 	import MKT_RESTRICT_BRANCH
from app.GroupLoan.models 		import MKT_GROUP_LOAN_BORROWER
from app.AccProduct.models 		import MKT_ACC_PRODUCT
from app.Charge.models 			import MKT_CHARGE
from app.ChargeRate.models 		import MKT_CHARGE_RATE
from app.Currency.models		import MKT_CURRENCY

import app.mktcore.globalfunction as globalfunction
import app.mktcore.autoid 		as mktautoid
import mktdate 					as mktdate
import user 					as mktuser
import mktsetting 				as mktsetting
import mktparam 				as mktparam
import mktdb 					as mktdb
import mktaudit 				as mktaudit
import mktaccounting 			as mktaccounting
import mktmoney 				as mktmoney
import mktloan 					as mktloan
import mktcharge 				as mktcharge
import collections
import json

def getSearchOfficer():
	Branch = mktuser.getBranch(session["ChangeBranch"]).ID
	search = request.args.get('q')
	NAMES = []
	if mkttool.isRequestAll():
		a = MKT_OFFICER.query.\
						filter(MKT_OFFICER.Branch == Branch).\
						order_by(MKT_OFFICER.ID.asc()).\
						all()
	else:
		a = MKT_OFFICER.query.\
						filter(or_(or_(MKT_OFFICER.ID.ilike('%'+search+'%'), MKT_OFFICER.FirstName.ilike('%'+search+'%')), MKT_OFFICER.LastName.ilike('%'+search+'%'))).\
						filter(MKT_OFFICER.Branch == Branch).\
						order_by(MKT_OFFICER.ID.asc()).\
						all()
	for row in a:
		dic = { "id":row.ID, "text":row.ID + " - " + row.LastName + " " + row.FirstName }
		NAMES.append(dic)

	# app.logger.debug(NAMES)
	return jsonify(items = NAMES)

def getOfficerByBranch(BranchID=''):
	Branch = mktuser.getUser().Branch
	if  not BranchID:
		BranchID = Branch

	dic = {}
	result = MKT_OFFICER.query.filter_by(Branch = BranchID).all()
	for row in  result:
		dic[row.ID] = row.ID + ' - '+ row.LastName + ' ' +row.FirstName

	return jsonify(results=dic)
	
def getSearchOfficerByCurreny():
	Branch = mktuser.getCurrentBranch()
	search = str(request.args.get('q'))
	Currency = str(request.args.get('Currency'))
	NAMES = [{"id": "","text": ""}]
	if not search.isspace():
		search = search.strip()
		if not search is None:
			NAMES=[]
			Key 	= search[:2]
			KeyInt 	= search[:3]
			KeyInt 	= KeyInt[-1:]
			# Search by Customer ID
			if Key == "CU" and mkttool.isInteger(KeyInt):
				QueryObj = db.session.query(MKT_LOAN_CONTRACT.ID,
									MKT_CUSTOMER.FirstNameEn,
									MKT_CUSTOMER.LastNameEn).\
									filter(MKT_LOAN_CONTRACT.Branch==Branch).\
									filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
									filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
									filter(MKT_CUSTOMER.ID.like('%'+search.upper()+'%')).\
									filter(MKT_LOAN_CONTRACT.Currency==Currency).\
									join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).limit(30).yield_per(100)
			# Search by Customer ID
			if Key == "CU" and mkttool.isInteger(KeyInt):
				QueryObj = db.session.query(MKT_LOAN_CONTRACT.ID,
										MKT_CUSTOMER.FirstNameEn,
										MKT_CUSTOMER.LastNameEn).\
										filter(MKT_LOAN_CONTRACT.Branch==Branch).\
										filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
										filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
										filter(MKT_LOAN_CONTRACT.ID.like('%'+search.upper()+'%')).\
										filter(MKT_LOAN_CONTRACT.Currency==Currency).\
										join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).limit(30).yield_per(100)
			else:
				QueryObj = db.session.query(MKT_LOAN_CONTRACT.ID,
										MKT_CUSTOMER.FirstNameEn,
										MKT_CUSTOMER.LastNameEn).\
										filter(MKT_LOAN_CONTRACT.Branch==Branch).\
										filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
										filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
										filter(MKT_LOAN_CONTRACT.Currency==Currency).\
										filter(or_(or_(MKT_LOAN_CONTRACT.ID.like('%'+search.upper()+'%'), func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+search.upper()+'%')), func.upper(MKT_CUSTOMER.LastNameEn).like('%'+search.upper()+'%'))).\
										join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).limit(30).yield_per(100)
			for row in QueryObj:
				dic = { "id":row.ID, "text":row.ID + " - " + row.LastNameEn + " " + row.FirstNameEn }
				NAMES.append(dic)
	return jsonify(items = NAMES)
	
def loadOfficer(BranchID=''):
	Branch = mktuser.getBranch(session["ChangeBranch"]).ID
	if  not BranchID:
		BranchID = Branch
	
	Result = MKT_OFFICER.query.filter(MKT_OFFICER.Branch == str(BranchID)) # tablename.query

	return Result

def getActualAmount(DetailObj,LoanID,DisburseAmount):
	Amount 				= 0
	LoanChargeAmount 	= 0
	NoCharge 	= mktsetting.getAppSetting('AUTH_NOT_CHARGE')
	if NoCharge == 'N':
		LoanCharge 		= mktloan.getLoanCharge(LoanID = LoanID,Status='AUTH')
		LoanChargeAmount = mktloan.getCalculateLoanCharge(LoanChargeObj=LoanCharge)

	DisburseDetail 	= DetailObj.filter(MKT_DISBURSE_DE.LoanID==LoanID)
	SumActualAmount = 0
	AccID 			= ""

	for row in DisburseDetail:
		ActualAmount = float(row.ActualAmount)
		SumActualAmount+=ActualAmount
		AccID = row.Account
	
	Amount = float(DisburseAmount) - float(SumActualAmount) - float(LoanChargeAmount)
	if Amount < 0:
		Amount= 0
	return Amount

def getActualCompulsory(DetailObj,LoanID,DisburseAmount):
	Amount = 0
	DisburseDetail 		= DetailObj.filter(MKT_DISBURSE_DE.LoanID==LoanID)
	SumActualCompulsory = 0
	Compulsory 			= 0
	isDisbursed 		= False
	for row in DisburseDetail:
		isDisbursed = True
		ActualCompulsory = float(row.ActualCompulsory)
		SumActualCompulsory+=ActualCompulsory
		Compulsory 			= row.Compulsory
	
	Amount = float(Compulsory) - float(SumActualCompulsory)
	if Amount < 0:
		Amount= 0
	return Amount, isDisbursed

def getDisburseSheet(AuthLevel,DisburseID,Officer,Currency,ValueDate="",VBID="",Group="",Status="", FilterBy = ''):
	RecrodRow = []
	RecordCol = {}
	TotalDisbursement = 0
	TotalLoanContract = 0
	CompulsoryAmount = 0
	ValueDate=str(ValueDate).strip()
	AccObj = MKT_ACCOUNT.query
	CurrencyObj 	= mktmoney.getCurrencyObj(Currency)
	FilterBy 		= mktsetting.getAppSetting('GenerateDisburseFilter')

	#Initialize Object Table
	if AuthLevel == 0:
		MainTable 	= MKT_DISBURSE
		DetailTable = MKT_DISBURSE_DE
	else :
		MainTable 		= MKT_DISBURSE_INAU
		DetailTable 	= MKT_DISBURSE_DE_INAU


	if Status == "Save":

		DisburseObj 		= MKT_DISBURSE.query.get(DisburseID)
		DisburseINAUObj 	= MKT_DISBURSE_INAU.query.get(DisburseID)

		if DisburseObj:
			MainTable 		= MKT_DISBURSE
			DetailTable 	= MKT_DISBURSE_DE

		if DisburseINAUObj:
			MainTable 		= MKT_DISBURSE_INAU
			DetailTable 	= MKT_DISBURSE_DE_INAU
		FilterDate = eval('MKT_LOAN_CONTRACT.%s'%FilterBy) if FilterBy else MKT_LOAN_CONTRACT.ValueDate
		QueryObj = db.session.query(DetailTable.LoanID.label('ID'),
												DetailTable.Account,
												DetailTable.Amount,
												DetailTable.Compulsory,
												MKT_LOAN_CONTRACT.Currency,
												FilterDate,
												MKT_LOAN_CONTRACT.ContractCustomerID,
												MKT_CUSTOMER.FirstNameEn,
												MKT_CUSTOMER.LastNameEn).\
										filter(DetailTable.ID==DisburseID).\
										join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==DetailTable.LoanID).\
										join(MKT_ACCOUNT,MKT_ACCOUNT.ID==DetailTable.Account).\
										join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
										order_by(MKT_LOAN_CONTRACT.ID.asc())
		for row in QueryObj:
			LoanID 			= str(row.ID)
			Customer 		= "%s - %s %s"%(row.ContractCustomerID,row.LastNameEn,row.FirstNameEn)
			Account 		= row.Account
			Currency 		= row.Currency
			ValueDate 		= eval('row.%s'%FilterBy) if FilterBy else row.ValueDate
			ActualAmount 	= float(row.Amount)
			AccFilter 		= AccObj.get(Account)
			CompulsoryAmount = str(row.Compulsory).replace(",","")
			if AccFilter:
				AvailableBal = float(AccFilter.AvailableBal)
				AvailableBal = mktmoney.toMoney(AvailableBal,mktmoney.getCurrencyObj(Currency))
			else:
				AvailableBal = 0

			LoanChargeObj 	= db.session.query(MKT_LOAN_CHARGE.ChargeKey, MKT_LOAN_CHARGE.ChargeUnearned,MKT_CHARGE.Description).\
										join(MKT_CHARGE, MKT_CHARGE.ID == MKT_LOAN_CHARGE.ChargeKey).\
										join(MKT_CHARGE_RATE, MKT_CHARGE_RATE.ID == MKT_CHARGE.ID+Currency).\
										filter(MKT_LOAN_CHARGE.ID == LoanID).\
										filter(MKT_CHARGE_RATE.ChargeMode == '1').all()

			key = {'Doc':['100','102'],'Wel':['101','103']}
			ChargeDict = {}
			for row in LoanChargeObj:
				if row.ChargeKey in key['Doc']:
					ChargeDict.update({'Doc' : row.ChargeUnearned})
				else:
					ChargeDict.update({'Wel' : row.ChargeUnearned})

			if ActualAmount > 0:
				TotalLoanContract+=1
				TotalDisbursement+=ActualAmount
				RecordCol.update({'ID'			:LoanID})
				RecordCol.update({'Customer'	:Customer})
				RecordCol.update({'Account'		:Account})
				RecordCol.update({'Currency'	:Currency})
				RecordCol.update({'ValueDate'	:ValueDate})
				RecordCol.update({'Amount'		:mktmoney.toMoney(ActualAmount,mktmoney.getCurrencyObj(Currency))})
				RecordCol.update({'AvailableBal':AvailableBal})
				RecordCol.update({'CompulsoryAmount':CompulsoryAmount})
				RecordCol.update({'ChargeDict':ChargeDict})
				RecrodRow.append(RecordCol)
				RecordCol={}

	elif Status == "Hist":
		MainTable 		= MKT_DISBURSE_HIST
		DetailTable 	= MKT_DISBURSE_DE_HIST
		FilterDate 		= eval('MKT_LOAN_CONTRACT.%s'%FilterBy) if FilterBy else MKT_LOAN_CONTRACT.ValueDate
		QueryObj = db.session.query(DetailTable.LoanID.label('ID'),
												DetailTable.Account,
												DetailTable.Amount,
												MKT_LOAN_CONTRACT.Currency,
												FilterDate,
												MKT_LOAN_CONTRACT.ContractCustomerID,
												MKT_CUSTOMER.FirstNameEn,
												MKT_CUSTOMER.LastNameEn,
												case(
													[(MKT_GROUP_LOAN_BORROWER.ID !=None, MKT_GROUP_LOAN_BORROWER.CompulsorySaving)],
													else_=''
												).label('CompulsorySaving'),
												case(
													[(MKT_GROUP_LOAN_BORROWER.ID !=None, MKT_GROUP_LOAN_BORROWER.RateFixed)],
													else_=''
												).label('RateFixed'),
												case(
													[(MKT_GROUP_LOAN_BORROWER.ID !=None, MKT_GROUP_LOAN_BORROWER.SavingRate)],
													else_='0'
												).label('SavingRate')).\
										filter(DetailTable.ID==DisburseID).\
										join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==DetailTable.LoanID).\
										join(MKT_ACCOUNT,MKT_ACCOUNT.ID==DetailTable.Account).\
										join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
										outerjoin(MKT_GROUP_LOAN_BORROWER,MKT_GROUP_LOAN_BORROWER.LoanID==MKT_LOAN_CONTRACT.ID).\
										order_by(MKT_LOAN_CONTRACT.ID.asc())
		
		for row in QueryObj:
			LoanID 			= str(row.ID)
			Customer 		= "%s - %s %s"%(row.ContractCustomerID,row.LastNameEn,row.FirstNameEn)
			Account 		= row.Account
			Currency 		= row.Currency
			ValueDate 		= eval('row.%s'%FilterBy) if FilterBy else row.ValueDate
			ActualAmount 	= float(row.Amount)
			AccFilter 		= AccObj.get(Account)
			CompulsoryAmount = row.SavingRate if row.RateFixed == 'F' else (Decimal(ActualAmount) * Decimal(row.SavingRate)) / 100

			if AccFilter:
				AvailableBal = float(AccFilter.AvailableBal)
				AvailableBal = mktmoney.toMoney(AvailableBal,mktmoney.getCurrencyObj(Currency))

			LoanChargeObj 	= db.session.query(MKT_LOAN_CHARGE.ChargeKey, MKT_LOAN_CHARGE.ChargeUnearned,MKT_CHARGE.Description).\
											join(MKT_CHARGE, MKT_CHARGE.ID == MKT_LOAN_CHARGE.ChargeKey).\
											join(MKT_CHARGE_RATE, MKT_CHARGE_RATE.ID == MKT_CHARGE.ID+Currency).\
											filter(MKT_LOAN_CHARGE.ID == LoanID).\
											filter(MKT_CHARGE_RATE.ChargeMode == '1').all()

			key = {'Doc':['100','102'],'Wel':['101','103']}
			ChargeDict = {}
			for row in LoanChargeObj:
				if row.ChargeKey in key['Doc']:
					ChargeDict.update({'Doc' : row.ChargeUnearned})
				else:
					ChargeDict.update({'Wel' : row.ChargeUnearned})

			TotalLoanContract+=1
			TotalDisbursement+=ActualAmount
			RecordCol.update({'ID'			:LoanID})
			RecordCol.update({'Customer'	:Customer})
			RecordCol.update({'Account'		:Account})
			RecordCol.update({'Currency'	:Currency})
			RecordCol.update({'ValueDate'	:ValueDate})
			RecordCol.update({'Amount'		:mktmoney.toMoney(ActualAmount,mktmoney.getCurrencyObj(Currency))})
			RecordCol.update({'AvailableBal':AvailableBal})
			RecordCol.update({'CompulsoryAmount':CompulsoryAmount})
			RecordCol.update({'ChargeDict':ChargeDict})
			RecrodRow.append(RecordCol)
			RecordCol={}
	else:
		Branch = mktuser.getCurrentBranch()

		ValueDateRange = ValueDate.split()

		if len(ValueDateRange)==2:
			ColLeft, ColRight = ValueDateRange[0],ValueDateRange[1]
			Condition=[eval('MKT_LOAN_CONTRACT.%s'%FilterBy).between(ColLeft, ColRight) ] if FilterBy else [MKT_LOAN_CONTRACT.ValueDate.between(ColLeft, ColRight) ]
		else:
			Condition=[eval('MKT_LOAN_CONTRACT.%s'%FilterBy)==ValueDate] if FilterBy else [MKT_LOAN_CONTRACT.ValueDate==ValueDate]

		FilterDate = eval('MKT_LOAN_CONTRACT.%s'%FilterBy) if FilterBy else MKT_LOAN_CONTRACT.ValueDate

		Conditions = []
		if VBID:
			Conditions.append(MKT_LOAN_CONTRACT.ContractVB==VBID)

		if Group:
			Conditions.append(MKT_LOAN_CONTRACT.Group==Group)

		QueryObj = db.session.query(MKT_LOAN_CONTRACT.ID,
									MKT_LOAN_CONTRACT.Account,
									MKT_LOAN_CONTRACT.Disbursed,
									MKT_LOAN_CONTRACT.Currency,
									FilterDate,
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.FirstNameEn,
									MKT_CUSTOMER.LastNameEn,
									case(
										[(MKT_GROUP_LOAN_BORROWER.ID !=None, MKT_GROUP_LOAN_BORROWER.CompulsorySaving)],
										else_=''
									).label('CompulsorySaving'),
									case(
										[(MKT_GROUP_LOAN_BORROWER.ID !=None, MKT_GROUP_LOAN_BORROWER.RateFixed)],
										else_=''
									).label('RateFixed'),
									case(
										[(MKT_GROUP_LOAN_BORROWER.ID !=None, MKT_GROUP_LOAN_BORROWER.SavingRate)],
										else_='0'
									).label('SavingRate')).\
									filter(MKT_LOAN_CONTRACT.ContractOfficerID==Officer).\
									filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
									filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
									filter(MKT_ACCOUNT.Balance>0).\
									filter(MKT_ACCOUNT.Branch==Branch).\
									filter(MKT_LOAN_CONTRACT.Currency==Currency).\
									filter(*Conditions).\
									filter(*Condition).\
									join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
									outerjoin(MKT_GROUP_LOAN_BORROWER,MKT_GROUP_LOAN_BORROWER.LoanID==MKT_LOAN_CONTRACT.ID).\
									join(MKT_ACCOUNT,MKT_ACCOUNT.ID==MKT_LOAN_CONTRACT.Account).\
									order_by(MKT_LOAN_CONTRACT.ID.asc()).\
									yield_per(100)
		DetailObj = MKT_DISBURSE_DE.query
		for row in QueryObj:

			LoanID 			= str(row.ID)
			Customer 		= "%s - %s %s"%(row.ContractCustomerID,row.LastNameEn,row.FirstNameEn)
			Account 		= row.Account
			Currency 		= row.Currency
			ValueDate 		= eval('row.%s'%FilterBy) if FilterBy else row.ValueDate
			DisburseAmount 	= float(row.Disbursed)
			ActualAmount 	= getActualAmount(DetailObj,LoanID,DisburseAmount)
			if ActualAmount > 0:
				AccFilter 		= AccObj.get(Account)
				CompulsoryAmount, isDisbursed = getActualCompulsory(DetailObj,LoanID,DisburseAmount)

				if not isDisbursed:
					CompulsoryAmount = row.SavingRate if row.RateFixed == 'F' else (Decimal(DisburseAmount) * Decimal(row.SavingRate)) / 100

				if AccFilter:
					AvailableBal = float(AccFilter.AvailableBal)
					AvailableBal = mktmoney.toMoney(AvailableBal,mktmoney.getCurrencyObj(Currency))
				else:
					AvailableBal = 0

				LoanChargeObj 	= db.session.query(MKT_LOAN_CHARGE.ChargeKey, MKT_LOAN_CHARGE.ChargeUnearned,MKT_CHARGE.Description).\
											join(MKT_CHARGE, MKT_CHARGE.ID == MKT_LOAN_CHARGE.ChargeKey).\
											join(MKT_CHARGE_RATE, MKT_CHARGE_RATE.ID == MKT_CHARGE.ID+Currency).\
											filter(MKT_LOAN_CHARGE.ID == LoanID).\
											filter(MKT_CHARGE_RATE.ChargeMode == '1').all()

				key = {'Doc':['100','102'],'Wel':['101','103']}
				ChargeDict = {}
				for row in LoanChargeObj:
					if row.ChargeKey in key['Doc']:
						ChargeDict.update({'Doc' : row.ChargeUnearned})
					else:
						ChargeDict.update({'Wel' : row.ChargeUnearned})

				# if ActualAmount > 0:
				TotalLoanContract+=1
				TotalDisbursement+=ActualAmount
				RecordCol.update({'ID'			:LoanID})
				RecordCol.update({'Customer'	:Customer})
				RecordCol.update({'Account'		:Account})
				RecordCol.update({'Currency'	:Currency})
				RecordCol.update({'ValueDate'	:ValueDate})
				RecordCol.update({'Amount'		:mktmoney.toMoney(ActualAmount,mktmoney.getCurrencyObj(Currency))})
				RecordCol.update({'AvailableBal':AvailableBal})
				RecordCol.update({'CompulsoryAmount':CompulsoryAmount})
				RecordCol.update({'ChargeDict':ChargeDict})

				RecrodRow.append(RecordCol)
				RecordCol={}

	TotalLoanContract 	= mktmoney.formatNumber(TotalLoanContract,1,0)
	TotalDisbursement 	= mktmoney.toMoney(TotalDisbursement,mktmoney.getCurrencyObj(Currency))
	OfficerBalance 		= 0
	MainObj 			= MainTable.query.get(DisburseID)
	if MainObj:
		AccObj 				= MKT_ACCOUNT.query.get(str(MainObj.OfficerAccount))
		if AccObj:
			OfficerBalance 		= float(AccObj.Balance)
			OfficerBalance 		= mktmoney.toMoney(OfficerBalance,mktmoney.getCurrencyObj(Currency))
	return {"ResultObj":RecrodRow,
			"Currency":Currency,
			"DisburseObj":MainObj,
			"TotalLoanContract":TotalLoanContract,
			"TotalDisbursement":TotalDisbursement,
			"OfficerBalance":OfficerBalance
			}

# Hot Field in Fund Withdrawal and Fund Deposit
def getOfficerAcount(Officer,Currency):
	
	TellerParam 	= mktparam.getTellerParam()
	Transaction 	= ""
	OfficerAccount 	= ""
	OfficerCategory = ""
	OfficerBalance	= ""
	Message 		= ""
	if TellerParam:
		
		OfficerObj 		= MKT_OFFICER.query.get(Officer)
		if OfficerObj:
			UserID 		= OfficerObj.UserID
			UserObj  	= mktuser.getUser(UserID)
			DefaultBranch 	= mktuser.getCurrentBranch()
			if UserObj:
				CashAccountID  	= UserObj.CashAccount
				CashObj  		= MKT_CASH_ACCOUNT.query.get(CashAccountID)
				if CashObj:
					Type = CashObj.Type
					ListCashAccount = CashObj.Account.split()
					if Type == "W":
						OfficerCategory = TellerParam.WalletCategory
						AccID 	= "%s%s%s"	%(Currency,OfficerCategory,CashAccountID)
						AccObj 	= MKT_ACCOUNT.query.get(AccID)
						if AccObj:
							OfficerAccount	= AccObj.ID
							CurrencyObj		= MKT_CURRENCY.query.get(Currency)
							OfficerBalance	= mktmoney.toMoney(float(AccObj.AvailableBal), CurrencyObj)
							if DefaultBranch != AccObj.Branch:
								Branch = MKT_BRANCH.query.get(DefaultBranch)
								Message = "Officer don't have Wallet Account in %s branch."%Branch.Description
						else:
							Message = "Wallet Account not found."
					else:
						Message = "Officer doesn't have Wallet Account."
				else:
					Message = "Cash Account #%s not found."%CashAccountID
			else:
				Message = "Officer don't have Wallet Account."
		else:
			Message = "Officer not found."
	else:
		Message = "Please set Teller Parameter first."
	if Message:
		app.logger.debug("Disbursement:%s"%Message)

	return jsonify(OfficerAccount=OfficerAccount,OfficerCategory=OfficerCategory,OfficerBalance=OfficerBalance,Message=Message)

def getDisburseAmount(Account):
	LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.Account==Account)


def insertDisbursementSheet(AuthLevel,DisburseID,kwargs):
	try:
	
		Officer 		= kwargs["Officer"]			if "Officer" 			in kwargs else ""
		Currency 		= kwargs["Currency"]		if "Currency" 			in kwargs else ""
		ValueDateStart  = kwargs["ValueDateStart"]	if "ValueDateStart" 	in kwargs else ""
		ValueDateEnd 	= kwargs["ValueDateEnd"]	if "ValueDateEnd" 		in kwargs else ""
		OfficerAccount 	= kwargs["OfficerAccount"]	if "OfficerAccount" 	in kwargs else ""
		OfficerCategory = kwargs["OfficerCategory"]	if "OfficerCategory" 	in kwargs else ""
		VBID 			= kwargs["VBID"]			if "VBID" 				in kwargs else ""
		Group 			= kwargs["Group"]			if "Group" 				in kwargs else ""
		ValueDateRange 	= "%s %s"%(ValueDateStart,ValueDateEnd)
		Status 		= ""
		Message 	= ""

		Url = "/Morakot/GenerateDisbursement/Generate/%s/"%DisburseID
		Url+="?Officer=%s"%Officer
		Url+="&Currency=%s"%Currency
		Url+="&ValueDateStart=%s"%ValueDateStart
		Url+="&ValueDateEnd=%s"%ValueDateEnd
		Url+="&OfficerAccount=%s"%OfficerAccount
		Url+="&OfficerCategory=%s"%OfficerCategory
		Url+="&VBID=%s"%VBID
		Url+="&Group=%s"%Group
		Url+="&Save=Save"

		TotalDisbursement 	= 0
		Audit 			= mktaudit.getAuditrail()
		# Inputter 		= Audit['Inputter']
		# Createdon 		= Audit['Createdon']
		# Branch 			= Audit['Branch']
		# Authorizer 		= Audit['Authorizer']
		# Authorizeon		= Audit['Authorizeon']
		MainTableHIST 	= MKT_DISBURSE_HIST
		DetailTableHIST = MKT_DISBURSE_DE_HIST
		if AuthLevel == 1:
			Resource 	= "INAU"
			MainTable 	= MKT_DISBURSE_INAU
			DetailTable = MKT_DISBURSE_DE_INAU
			Audit.update({"Status":"INAU"})
			Audit.update({"Authorizer":""})
			Audit.update({"Authorizeon":""})
		else:
			Resource 		= "AUTH"
			MainTable 		= MKT_DISBURSE
			DetailTable 	= MKT_DISBURSE_DE
			

		if DisburseID:
			print "f"*200

			ListLoanID			= [str(kwargs[item]) for item in kwargs if "LoanID" in item]
			ListAmount 			= [item for item in kwargs if "Amount" in item]
			# print "before account"
			ListAccount 		= [str(kwargs[item]) for item in kwargs if "Account" in item]
			# print "after account"
			DuplicateListAccount= [item for item, count in collections.Counter(ListAccount).items() if count > 1]
			
			LoanObj 			= MKT_LOAN_CONTRACT.query
			AccObj 				= MKT_ACCOUNT.query
			InsertRecord 		= {}
			
			ListLoanID.sort()
			# Block validation
			if not Officer:
				Status = False

			if not Currency:
				Status = False

			if not ValueDateStart:
				Status = False

			if not OfficerAccount:
				Status = False

			if not OfficerCategory:
				Status = False



			# Before insert need clear record old.
			if Resource == "AUTH":
				mktaudit.moveAUTHDetailtoHIST(MainTable,DetailTable,DetailTableHIST,DisburseID)
			mktdb.deleteRecord(DetailTable,[DetailTable.ID==DisburseID])

			#Check Duplicate LoanID
			DuplicateLoan   = [x for x in ListLoanID if ListLoanID.count(x) > 1]
			if DuplicateLoan:
				Status = False
				Message = "Duplicate loan contract."
				return {"Status":Status,"Message":Message,"Url":Url}

			#Check  LoanID
			if len(ListLoanID)==0:
				Status = False
				Message = "Your generate disburse don't have any contract. "
				return {"Status":Status,"Message":Message,"Url":Url}
			# DetailObj = DetailTable.query
			LoanObj = MKT_LOAN_CONTRACT.query
				
			No = 1
			
			for row in ListLoanID:
				FeeDict = {}
				UpFrontFee = ""
				LoanID 		= row
				LoanFilter	= LoanObj.get(LoanID)

				Account 	= LoanFilter.Account

				Amount = float(kwargs['Amount_%s'%LoanID].replace(',',''))

				# get charge from form
				WelfarefundFee = float(kwargs['Welfarefund_%s'%LoanID].replace(',',''))
				DocumentationFee = float(kwargs['Documentation_%s'%LoanID].replace(',',''))
				
				# Newly standardize
				kwargs.to_dict(flat=False)

				for key, val in kwargs.iteritems() :
					if "Fee" in key and LoanID in key :
						FeeKeys = key.split("_")
						FeeDict.update({FeeKeys[1]: kwargs[key]})

				UpFrontFee = json.dumps(FeeDict)
				#

				# Newly standardize
				kwargs.to_dict(flat=False)

				for key, val in kwargs.iteritems() :
					if "Fee" in key and LoanID in key :
						FeeKeys = key.split("_")
						FeeDict.update({FeeKeys[1]: kwargs[key]})

				UpFrontFee = json.dumps(FeeDict)
				ComAmount 	= LoanFilter.Disbursed
				CompulsoryAmount = 0

				CompulsoryObj = MKT_GROUP_LOAN_BORROWER.query.filter(MKT_GROUP_LOAN_BORROWER.LoanID == LoanID).first()
				if CompulsoryObj:
					CompulsoryAmount = CompulsoryObj.SavingRate if CompulsoryObj.RateFixed == 'F' else (Decimal(ComAmount) * Decimal(CompulsoryObj.SavingRate)) / 100

				#Check Balance of Amount if one account has more loan

				if Account in DuplicateListAccount:
					DuplicateLoanObj	= LoanObj.filter(MKT_LOAN_CONTRACT.Account==Account)
					TotalAmountByAccount = 0
					AvailableBalByAccount = 0
					WelfarefundFee 		= 0
					DocumentationFee 	= 0

					for item in DuplicateLoanObj:
						if 'LoanID_%s'%item.ID in kwargs:
							TotalAmountByAccount+=float(kwargs['Amount_%s'%item.ID].replace(',',''))
							AvailableBalByAccount=float(kwargs['AvailableBal_%s'%item.ID].replace(',',''))

					if TotalAmountByAccount >AvailableBalByAccount:
						getCurrencyObj = mktmoney.getCurrencyObj(item.Currency)
						Status = False
						Message = "Account#%s have doesn't have sufficient fund for total disbursement %s. Current balance is %s"%(Account,mktmoney.toMoney(TotalAmountByAccount,getCurrencyObj),mktmoney.toMoney(AvailableBalByAccount,getCurrencyObj))
						return {"Status":Status,"Message":Message,"Url":Url}
						
				if LoanFilter:
					DisburseAmount 	= float(LoanFilter.Disbursed)
					AccFilter 		= AccObj.get(LoanFilter.Account)
					if AccFilter:
						AccID 		= AccFilter.ID
						AccCategory = AccFilter.AccCategory
						Balance 	= float(AccFilter.Balance)
						if Amount > Balance:
							Status=False
							Message="Loan Contract %s amount more than available balances %s"%(LoanID,mktmoney.formatNumber(Balance,1,0))
							
							# return {"Status":Status,"Message":Message,"Url":Url}
						if Amount < 0 :
							Status=False
							Message="Amount must be more than 0."
							
							# return {"Status":Status,"Message":Message,"Url":Url}
						TotalDisbursement+=Amount

						InsertRecord = {	'ID'				:DisburseID,
											'DisburseID'		:No,
											'LoanID'			:LoanID,
											'Account'			:AccID,
											'AccCategory'		:AccCategory,
											'Amount'			:Amount,
											'ActualAmount' 		:Amount,
											'Compulsory' 		:CompulsoryAmount,
											'ActualCompulsory' 	:CompulsoryAmount,
											'DocumentationFee' 	:DocumentationFee,
											'WelfarefundFee' 	:WelfarefundFee,
											'UpFrontFee' 		:UpFrontFee, # Newly Standardize
											'Reference' 		: ""}
						# Insert record to Disbursement sheet
						InsertRecord.update(Audit)
						mktdb.insertTable(DetailTable,InsertRecord)
						No+=1
					else:
						Message="Account #%s not found in loan contract #%s."(LoanFilter.Account,LoanID)
						
				else:
					
					Message="Loan Contract #%s not found"%LoanID
					
		Status = True
		if Message:
			Status=False
			return {"Status":Status,"Message":Message,"Url":Url}
		else:
			# Before insert need clear record old.
			if Resource == "INAU":
				CheckRestoreID = mktaudit.isRestoreID(MKT_DISBURSE,MKT_DISBURSE_INAU,MKT_DISBURSE_HIST,DisburseID)
				if CheckRestoreID[0]:
					Curr=CheckRestoreID[1]
				else:
					Curr = "0"
			else:
				mktaudit.moveAUTHtoHIST(MainTable,MainTableHIST,DisburseID)
				Curr = mktaudit.getCurrRecord(MainTable,[MainTable.ID==DisburseID])
				CheckRestoreID = mktaudit.isRestoreID(MKT_DISBURSE,MKT_DISBURSE_INAU,MKT_DISBURSE_HIST,DisburseID)
				if CheckRestoreID[0]:
					Curr=CheckRestoreID[1]

			mktaudit.deleteAUTH(MainTable, DisburseID)
			InsertRecord = {
							'Curr'				:Curr,
							'Status'			:Resource,
							'ID'				:DisburseID,
							'Officer' 			:Officer,
							'OfficerAccount'	:OfficerAccount,
							'OfficerCategory'	:OfficerCategory,
							'TotalDisbursement'	:TotalDisbursement,
							'Currency'			:Currency,
							'ValueDate'			:ValueDateRange,
							'VBID' 				:VBID,
							'Group' 			:Group,
							'OptionGroupby'		:"",
							'TotalActualAmount'	:0,
							'DisbursedStatus'	:"N",
							'AdvanceStatus' 	:"N"}
			# Update TotalDisburse
			mktdb.insertTable(MainTable,InsertRecord)
			if Resource == "AUTH":
				Message = "Record was added successfully, record id: %s"%DisburseID
			else:
				Message = "Record was added successfully, record id: %s in INAU "%DisburseID
			
			Url="/Morakot/GenerateDisbursement"

		return {"Status":Status,"Message":Message,"Url":Url}
		
	except Exception, e:
		Officer 		= kwargs["Officer"]			if "Officer" 			in kwargs else ""
		Currency 		= kwargs["Currency"]		if "Currency" 			in kwargs else ""
		ValueDateStart  = kwargs["ValueDateStart"]	if "ValueDateStart" 	in kwargs else ""
		ValueDateEnd 	= kwargs["ValueDateEnd"]	if "ValueDateEnd" 		in kwargs else ""
		OfficerAccount 	= kwargs["OfficerAccount"]	if "OfficerAccount" 	in kwargs else ""
		OfficerCategory = kwargs["OfficerCategory"]	if "OfficerCategory" 	in kwargs else ""
		VBID 			= kwargs["VBID"]			if "VBID" 				in kwargs else ""
		Group 			= kwargs["Group"]			if "Group" 				in kwargs else ""
		Url = "/Morakot/GenerateDisbursement/Generate/%s/"%DisburseID
		Url+="?Officer=%s"%Officer
		Url+="&Currency=%s"%Currency
		Url+="&ValueDateStart=%s"%ValueDateStart
		Url+="&ValueDateEnd=%s"%ValueDateEnd
		Url+="&OfficerAccount=%s"%OfficerAccount
		Url+="&OfficerCategory=%s"%OfficerCategory
		Url+="&VBID=%s"%VBID
		Url+="&Group=%s"%Group
		Url+="&Save=Save"
		Url= ""
		Status= False
		Message=msg_error+" %s"%e
		db.session.rollback()
		db.session.close()
		return {"Status":Status,"Message":Message,"Url":"Url"}

def setAuthorizeDisbursementSheet(AuthLevel,ID,Status,Inputter,Createdon,Branch):
	try:
		# Authorize have two transcations INAU, RNAU 
		# print 'beforeAuthorize: %s'% AuthLevel
		Message = ""
		if AuthLevel == 1:

			Audit 		= mktaudit.getAuditrail()
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']

			# Cannot authorize by urseft
			if Inputter != Authorizer:

				if Status == 'RNAU':

					# Remove to history 
					mktaudit.moveAUTHtoHIST(MKT_DISBURSE,MKT_DISBURSE_HIST,ID)
					# Delete live record and Un-authorize
					mktaudit.deleteAUTH(MKT_DISBURSE, ID)
					mktaudit.deleteAUTH(MKT_DISBURSE_INAU, ID)

				
					# Remove account to history 
					mktaudit.moveAUTHDetailtoHIST(MKT_DISBURSE,MKT_DISBURSE_DE,MKT_DISBURSE_DE_HIST,ID)
				
					# Delete Detail live record and Un-authorize
					mktaudit.deleteAUTH(MKT_DISBURSE_DE, ID)
					mktaudit.deleteAUTH(MKT_DISBURSE_DE_INAU, ID)
					
					# Message = "%s Record was authorized for reverse successfully."%ID
					Message="The record was authorized successfully for reversed, record id:%s"%ID
				else:
					DisburseObj = MKT_DISBURSE.query.get(ID)
					if DisburseObj:
						# Authorize Edit record
						#Add to hist Detail
						mktaudit.moveAUTHDetailtoHIST(MKT_DISBURSE,MKT_DISBURSE_DE,MKT_DISBURSE_DE_HIST,ID)
						mktaudit.deleteAUTH(MKT_DISBURSE_DE, ID)

						#Add to hist Main
						mktaudit.moveAUTHtoHIST(MKT_DISBURSE,MKT_DISBURSE_HIST,ID)
						Curr = mktaudit.getCurrRecord(MKT_DISBURSE,[MKT_DISBURSE.ID==ID])
						mktaudit.deleteAUTH(MKT_DISBURSE, ID)

						#Add INAU to LIVE
						mktaudit.moveINAUtoAUTH(MKT_DISBURSE, MKT_DISBURSE_INAU, ID, Inputter, Createdon, Authorizer, Authorizeon,"",Curr)
						mktaudit.deleteAUTH(MKT_DISBURSE_INAU, ID)

			
						#Add INAU to LIVE
						mktaudit.moveINAUtoAUTH(MKT_DISBURSE_DE, MKT_DISBURSE_DE_INAU, ID, Inputter, Createdon, Authorizer, Authorizeon,"",Curr)
						mktaudit.deleteAUTH(MKT_DISBURSE_DE_INAU, ID)

					else:	
						#Add Live 
						mktaudit.moveINAUtoAUTH(MKT_DISBURSE, MKT_DISBURSE_INAU, ID, Inputter, Createdon, Authorizer, Authorizeon)
						#Delete INAU for Main Table
						mktaudit.deleteAUTH(MKT_DISBURSE_INAU, ID)

						#Add to delete old Detail
						mktaudit.deleteAUTH(MKT_DISBURSE_DE, ID)
						#Add to live Detail
						mktaudit.moveINAUtoAUTH(MKT_DISBURSE_DE, MKT_DISBURSE_DE_INAU, ID, Inputter, Createdon, Authorizer, Authorizeon)
						#Delete INAU for Detail Table
						mktaudit.deleteAUTH(MKT_DISBURSE_DE_INAU, ID)

					Message="The record was authorized successfully, record id:%s"%ID
			else:
				Message = msg_error+msg_cannot_authorize
				return False,Message

		return True,Message
	except Exception, e:
		db.session.rollback()
		return False,msg_error+" %s"%e


def setReverseDisbursementSheet(AuthLevel,ID):

	try:
		Message 	= ""
		Audit 		= mktaudit.getAuditrail()
		Inputter 	= Audit['Inputter']
		Createdon	= Audit['Createdon']
		Status 		= "RNAU"
		DisburseMain = MKT_DISBURSE_INAU.query.get(ID)
		if DisburseMain:
			Message = msg_error+" The record was already reversed and in list un-authorize. Cannot reverse this record"
			return False,Message
		DisburseObj = MKT_DISBURSE.query.get(ID)
		if DisburseObj:
			DisbursedStatus = DisburseObj.DisbursedStatus
			if DisbursedStatus == "Y":
				Message = msg_error+" The record was disbursemented already. Cannot reverse this record"
				return False,Message

		if AuthLevel == 1:
			moveAUTHtoINAU(MKT_DISBURSE,MKT_DISBURSE_INAU,ID,Inputter,Createdon, Status)
			moveAUTHtoINAU(MKT_DISBURSE_DE,MKT_DISBURSE_DE_INAU,ID,Inputter,Createdon, Status)
			Message="The record was reversed successfully, record id:%s in INAU."%ID
		else:
			#Remove Main to history 
			mktaudit.moveAUTHtoHIST(MKT_DISBURSE,MKT_DISBURSE_HIST,ID)
			# Delete live record
			mktaudit.deleteAUTH(MKT_DISBURSE, ID)

			#Remove Detail to history 
			# mktaudit.moveAUTHDetailtoHIST(MKT_DISBURSE,MKT_DISBURSE_DE,MKT_DISBURSE_DE_HIST,ID)
			mktaudit.moveAUTHtoHIST(MKT_DISBURSE_DE,MKT_DISBURSE_DE_HIST,ID)
			# Delete live record
			mktaudit.deleteAUTH(MKT_DISBURSE_DE, ID)
			# mktaudit.deleteAUTH(MKT_DISBURSE_DE, ID)

			Message="The record was reversed successfully, record id:%s"%ID
		
		return True,Message

	except Exception, e:
		return False,msg_error+" %s"%e

def setDeleteDisbursement(DisburseID):
	try:

		DisburseObj  = MKT_DISBURSE.query.get(DisburseID)
		DisburseINAUObj = MKT_DISBURSE_INAU.query.get(DisburseID)
		if DisburseObj:
			Status = DisburseObj.Status
			if Status == "AUTH":
				if not DisburseINAUObj:
					return False,msg_warning+"The record was authorized and could not be deleted."
		
		if DisburseINAUObj:
			Status = DisburseINAUObj.Status
			if Status in ["INAU","RNAU"] :
				mktdb.deleteRecord(MKT_DISBURSE_INAU,[MKT_DISBURSE_INAU.ID==DisburseID])
				mktdb.deleteRecord(MKT_DISBURSE_DE_INAU,[MKT_DISBURSE_DE_INAU.ID==DisburseID])
				return True,"The record was deleted successfully, record id:%s"%DisburseID
			else:
				return False,msg_error+" %s"%msg_reverse_0
		else:
			return False," %s"%msg_not_found_0
	except Exception, e:
		return False,msg_error+" %s"%e

def moveAUTHtoINAU(LIVE,INAU,ID,Inputter='',Createdon='', Status='',FilterField="",Accounting="N"):

	try:

		dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(LIVE)
		for item in Mapper.attrs:						
			FieldInTable.append(item.key)
		if FilterField:
			QueryObj = INAU.query.filter(getattr(INAU, FilterField) == ID)
		else:
			QueryObj = LIVE.query.filter(LIVE.ID==ID)
		if QueryObj :
			for row in QueryObj:
				for col in FieldInTable:
					dic.update({col:getattr(row,col)})
				dic.update({'Status':Status})
				dic.update({'ID':ID})
				dic.update({'Inputter':Inputter})
				dic.update({'Createdon':Createdon})
				dic.update({'Authorizer':''})
				dic.update({'Authorizeon':''})
				AddINAUObj = INAU(**dic)
				db.session.add(AddINAUObj)
	except Exception, e:
		db.session.rollback()
		raise

#----------------Block Disbursement-------------------

def getListLive():
	Condition 	= []
	CurrentBranch = mktuser.getCurrentBranch()

	AccessBranch 	=	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model=="MKT_DISBURSE").first()
	if AccessBranch:
		Condition = [MKT_DISBURSE.Branch==CurrentBranch]
	QueryObj = MKT_DISBURSE.query.filter(MKT_DISBURSE.DisbursedStatus.in_(["Y"])).\
										filter(*Condition)
	return QueryObj

def getListAuth():

	Condition 	= []
	CurrentBranch = mktuser.getCurrentBranch()
	AccessBranch 	=	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model=="MKT_DISBURSE").first()
	if AccessBranch:

		Condition =[MKT_DISBURSE_INAU.Branch==CurrentBranch]
	QueryObj = MKT_DISBURSE_INAU.query.filter(MKT_DISBURSE_INAU.DisbursedStatus=="I").\
										filter(*Condition)
	return QueryObj

def getDisbursementSheet(DisburseID,Action=""):
	Status 			= False
	Message 		= ""
	QueryObj		= []
	OfficerObj		= []
	OfficerBalance 	= 0
	TotalDisburse 	= 0
	TotalActual 	= 0
	CountLoan 		= 0
	Currency 		= ""
	OfficerAccount  = ""
	VBID 			= ""
	Group 			= ""
	CurrentBranch 		= mktuser.getCurrentBranch()
	DisburseObj 		= MKT_DISBURSE.query.get(DisburseID)
	DisburseINAUObj 	= MKT_DISBURSE_INAU.query.get(DisburseID)

	if DisburseObj:
		MainTable 		= MKT_DISBURSE
		DetailTable 	= MKT_DISBURSE_DE
		if Action == "Edit":
			DisbursedStatus = str(DisburseObj.DisbursedStatus) if DisburseObj else ""
			if DisbursedStatus == "N" and not DisburseINAUObj:
				Message = msg_warning+"Record not found..."
				return {"Status":False,"Message":Message}
			elif DisburseObj.DisbursedStatus == "Y":
				Message = msg_warning+"The record was authorized and could not be edited."
				return {"Status":False,"Message":Message}
				

	if DisburseINAUObj:
		MainTable 		= MKT_DISBURSE_INAU
		DetailTable 	= MKT_DISBURSE_DE_INAU

		if Action == "New":
			Message = msg_warning+" %s exists in list un-authorize record."%DisburseID
			return {"Status":False,"Message":Message}

		if Action == "Search":
			DisburseObj = DisburseINAUObj
		if Action == "Edit":

			DisburseObj = DisburseINAUObj


	if DisburseObj:

		Status 		= True
		Officer 	= DisburseObj.Officer
		Currency 	= DisburseObj.Currency
		ValueDate 	= DisburseObj.ValueDate
		VBID 		= DisburseObj.VBID
		Group 		= DisburseObj.Group

		DisbursedStatus= str(DisburseObj.DisbursedStatus)
		QueryObj 	= db.session.query(DetailTable.LoanID.label('ID'),
										DetailTable.Account,
										DetailTable.Amount,
										DetailTable.Compulsory,
										DetailTable.ActualCompulsory,
										DetailTable.DocumentationFee,
										DetailTable.WelfarefundFee,
										DetailTable.UpFrontFee,
										DetailTable.Reference,
										DetailTable.ActualAmount,
										MKT_ACCOUNT.Currency,
										MKT_LOAN_CONTRACT.ValueDate,
										MKT_LOAN_CONTRACT.ContractCustomerID,
										MKT_CUSTOMER.FirstNameEn,
										MKT_CUSTOMER.LastNameEn).\
									filter(DetailTable.ID==DisburseID).\
									join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==DetailTable.LoanID).\
									join(MKT_ACCOUNT,MKT_ACCOUNT.ID==DetailTable.Account).\
									join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID)
		OfficerAccount 	= DisburseObj.OfficerAccount
		OfficerObj		= MKT_OFFICER.query.get(Officer)
		TotalDisburse 	= sum(float(c.Amount) for c in QueryObj)
		TotalActual 	= sum(float(c.ActualAmount) for c in QueryObj)
		AccObj 			= MKT_ACCOUNT.query.get(DisburseObj.OfficerAccount)
		OfficerBalance 	= AccObj.Balance
		CountLoan 		= mktmoney.formatNumber(QueryObj.count(),1,0)

		Dic ={"Status":Status,
			"QueryObj":QueryObj,
			"DisburseObj":DisburseObj,
			"OfficerObj":OfficerObj,
			"OfficerAccount":OfficerAccount,
			"OfficerBalance":OfficerBalance,
			"TotalDisburse":TotalDisburse,
			"TotalActual":TotalActual,
			"Currency":Currency,
			"DisbursedStatus":DisbursedStatus,
			"CountLoan":CountLoan,
			"VBID":VBID,
			"Group":Group}
	else:
		Status = False
		Message= msg_not_found_0
		Dic={"Status":Status,
			"Message":Message,
			"QueryObj":QueryObj,
			"DisburseObj":DisburseObj,
			"OfficerObj":OfficerObj,
			"OfficerAccount":OfficerAccount,
			"OfficerBalance":OfficerBalance,
			"TotalDisburse":TotalDisburse,
			"TotalActual":TotalActual,
			"Currency":Currency,
			"DisbursedStatus":"",
			"CountLoan":CountLoan,
			"VBID":VBID,
			"Group":Group}
	return Dic

def setSerachDisbursement(DisburseID):

	return getDisbursementSheet(DisburseID)

	
def setDisbursement(AuthLevel,DisburseMain,DisburseDetail,DisburseID,DicLoan,DicCompulsory={}):
	
	try:
		Transaction  		= mktsetting.getAccSetting().DisbursedTran if mktsetting.getAccSetting() else ""
		TranDate 			= str(mktdate.getBankDate())
		Audit 				= mktaudit.getAuditrail()
		Inputter 			= Audit['Inputter']
		Createdon 			= Audit['Createdon']
		Authorizer 			= Audit['Authorizer']
		Authorizeon			= Audit['Authorizeon']
		Branch 				= Audit['Branch']
		TotalActualAmount 	= 0
		DicReference 		= {}
		DicReferenceCom 	= {}
		if AuthLevel == 0:

			if DicCompulsory:
				for item in DicCompulsory:
					#Function getAutoID has db.session.commit so we need to get first before submit
					DicReferenceCom.update({item:mktautoid.getAutoID('FRM_FUND_TRANSFER')})
				for item in DicCompulsory:
					AccCompulsory		= item
					ActualCompulsory	= DicCompulsory[item].split('-')[0]
					LoanID				= DicCompulsory[item].split('-')[1]
					ComAccCategory 		= db.session.query(MKT_ACC_PRODUCT.CategoryList).\
													join(MKT_ACCOUNT,MKT_ACCOUNT.AccProduct==MKT_ACC_PRODUCT.ID).\
													filter(MKT_ACCOUNT.ID==item).first()
					if not ComAccCategory:
						return False, "Account product of Compulsory not found"
					if float(ActualCompulsory) > 0:
						FilterDisburse = DisburseDetail.filter(MKT_DISBURSE_DE.LoanID == LoanID).first()
						if FilterDisburse:
							if float(ActualCompulsory) > float(FilterDisburse.Compulsory):
								return False,"Actual Compulsory Amount %s is more than Compulsory Amount %s"%(ActualCompulsory,mktmoney.formatNumber(float(FilterDisburse.Compulsory),1,2))
							if float(ActualCompulsory) < float(FilterDisburse.Compulsory):
								mktdb.updateRecord(MKT_DISBURSE_DE,
											[MKT_DISBURSE_DE.LoanID==LoanID],
											{"ActualCompulsory":Decimal(ActualCompulsory)})
							# Debit Account 
							CrAcc 	= AccCompulsory
							CrCat 	= ComAccCategory.CategoryList
							CrCur 	= DisburseMain.first().Currency
							Amount 	= float(ActualCompulsory)
							# Credit Co Account
							DrAcc 	= DisburseMain.first().OfficerAccount
							DrCat 	= DisburseMain.first().OfficerCategory
							DrCur 	= DisburseMain.first().Currency
							Note  	= "Compulsory Saving Settlement"
							Module 	= "FT"
							Reference = DicReferenceCom[AccCompulsory]
							#Block Comming Accounting
							CheckAccounting = setDisburseCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Decimal(ActualCompulsory),Module,Transaction,TranDate,Reference,Note,DisburseID)
							if not CheckAccounting[0]:
								return False,CheckAccounting[1]
					else:
						mktdb.updateRecord(MKT_DISBURSE_DE,
											[MKT_DISBURSE_DE.LoanID==LoanID],
											{"ActualCompulsory":Decimal(0)})

			#Get Reference ID for FT
			for row in DicLoan:
				#Function getAutoID has db.session.commit so we need to get first before submit
				DicReference.update({row:mktautoid.getAutoID('FRM_FUND_TRANSFER')})

			#Block Update Disbursement status
			mktdb.updateRecord(MKT_DISBURSE,
						[MKT_DISBURSE.ID==DisburseID],
						{"DisbursedStatus":"Y"})
				
			# Block PostAccounting and Actual Amount
			for row in DicLoan:

				LoanID 			= row
				ActualAmount 	= DicLoan[row]

				if ActualAmount > 0:

					FilterDisburse = DisburseDetail.filter(MKT_DISBURSE_DE.LoanID == LoanID).first()

					if FilterDisburse:
						# Debit Account 
						DrAcc 	= FilterDisburse.Account
						DrCat 	= FilterDisburse.AccCategory
						DrCur 	= DisburseMain.first().Currency
						Amount 	= float(FilterDisburse.Amount)
						# Credit Co Account
						CrAcc 	= DisburseMain.first().OfficerAccount
						CrCat 	= DisburseMain.first().OfficerCategory
						CrCur 	= DisburseMain.first().Currency
						Note  	= "Generate Disbursement"
						Module 	= "FT"
						Reference = DicReference[LoanID]
						# Validation Max Min Balance
						CheckBalanceDrAcc = mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(ActualAmount), "Dr")
						if CheckBalanceDrAcc:
							return False,CheckBalanceDrAcc

						CheckBalanceCrAcc = mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(ActualAmount), "Cr")
						if CheckBalanceCrAcc:								
							return False,CheckBalanceCrAcc
								
						if ActualAmount > Amount:

							return False,"Loan Contract #%s actual amount %s is more than loan amount."% (LoanID,mktmoney.formatNumber(ActualAmount,1,0))

						TotalActualAmount+=float(ActualAmount)
						#Block Update Disbursement status
						mktdb.updateRecord(MKT_DISBURSE_DE,
											[MKT_DISBURSE_DE.LoanID==LoanID],
											{"Reference":Reference,
											"ActualAmount":Decimal(ActualAmount)})
						#Block Comming Accounting
						CheckAccounting = setDisburseCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Decimal(ActualAmount),Module,Transaction,TranDate,Reference,Note,DisburseID)
						if not CheckAccounting[0]:
							return False,CheckAccounting[1]
					else:
						return False,"Generate Disbursement don't have loan #%s"%LoanID
				else:
					mktdb.updateRecord(MKT_DISBURSE_DE,
											[MKT_DISBURSE_DE.LoanID==LoanID],
											{"ActualAmount":Decimal(0)})
											# ,"ActualCompulsory":Decimal(0)
				# else:
				# 	return False,"Actual amount for loan contract #%s must be more than zero."%LoanID

			#Block Update Total Actual Amount
			mktdb.updateRecord(MKT_DISBURSE,
						[MKT_DISBURSE.ID==DisburseID],
						{"TotalActualAmount":TotalActualAmount})

			return True,"%s was disbursemented successfully."%DisburseID

		elif AuthLevel == 1:
			# Before insert need clear record old.
			db.session.close()
			with db.session.no_autoflush :
				# mktaudit.deleteRecord(MKT_DISBURSE_INAU,[MKT_DISBURSE_INAU.ID==DisburseID], True)
				# mktaudit.deleteRecord(MKT_DISBURSE_DE_INAU,[MKT_DISBURSE_DE_INAU.ID==DisburseID], True)
				
				db.session.query(MKT_DISBURSE_INAU).filter(MKT_DISBURSE_INAU.ID==DisburseID).delete(synchronize_session='fetch')
				db.session.flush()
				db.session.commit()
				db.session.close()
				db.session.expire_on_commit = False
				db.session.query(MKT_DISBURSE_DE_INAU).filter(MKT_DISBURSE_DE_INAU.ID==DisburseID).delete(synchronize_session='fetch')
				db.session.flush()
				db.session.commit()
				db.session.close()

				Status 			= "INAU"
				#Block insert Detail Table
				dic 			= {}
				FieldInTable 	= []
				Mapper 			= inspect(MKT_DISBURSE_DE_INAU)
				for item in Mapper.attrs:						
					FieldInTable.append(item.key)
				#loop Detail value
				for row in DisburseDetail:
					for col in FieldInTable:
						dic.update({col:getattr(row,col)})
					#overwite value

					LoanID 			= row.LoanID
					ActualAmount 	= DicLoan.get(LoanID,0)
					ActualCompulsory = DicCompulsory.get(LoanID,0)
					Amount 			= float(row.Amount)

					# Debit DDA Account 
					DrAcc 			= row.Account
					DrCat 			= row.AccCategory
					DrCur 			= DisburseMain.first().Currency

					# Credit Co Account
					CrAcc 			= DisburseMain.first().OfficerAccount
					CrCat 			= DisburseMain.first().OfficerCategory
					CrCur 			= DisburseMain.first().Currency

					if ActualAmount > 0:

						# Validation Max Min Balance
						CheckBalanceDrAcc = mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(ActualAmount), "Dr")
						if CheckBalanceDrAcc:
							return False,CheckBalanceDrAcc

						CheckBalanceCrAcc = mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(ActualAmount), "Cr")
						if CheckBalanceCrAcc:
							return False,CheckBalanceCrAcc
							
					if ActualAmount > Amount:
						return False,"Loan Contract #%s actual amount %s is more than loan amount."% (LoanID,mktmoney.formatNumber(ActualAmount,1,0))

					TotalActualAmount+=ActualAmount
					dic.update({'ActualAmount':ActualAmount})
					dic.update({'ActualCompulsory':ActualCompulsory})
					dic.update({'Status':Status})
					dic.update({'Inputter':Inputter})
					dic.update({'Createdon':Createdon})
					dic.update({'Authorizer':''})
					dic.update({'Authorizeon':''})
					AddINAUObj = MKT_DISBURSE_DE_INAU(**dic)
					db.session.add(AddINAUObj)

				#Block insert Main Table
				dic 			= {}
				FieldInTable 	= []
				Mapper 			= inspect(MKT_DISBURSE_INAU)
				for item in Mapper.attrs:						
					FieldInTable.append(item.key)
				for row in DisburseMain:
					for col in FieldInTable:
						dic.update({col:getattr(row,col)})
					#overwite value
					dic.update({'Status':Status})
					dic.update({'Inputter':Inputter})
					dic.update({'Createdon':Createdon})
					dic.update({'Authorizer':''})
					dic.update({'Authorizeon':''})
					#For TotalActualAmount When finish insert to INAU TotalActualAmount has been update finish value
					dic.update({'TotalActualAmount':TotalActualAmount}) 
					dic.update({'DisbursedStatus':"I"})
					AddINAUObj = MKT_DISBURSE_INAU(**dic)
					db.session.add(AddINAUObj)

				return True,"Record was added successfully, record id: %s in INAU"%DisburseID
		else:
			return False," %s NAuthorize not found"%AuthLevel

	except Exception, e:
		raise
		return False," %s"%e
		
def setAuthorizeDisbursement(DisburseID):
	try:
		Message 			= ""

		Audit 				= mktaudit.getAuditrail()
		Authorizer 			= Audit['Authorizer']
		Authorizeon			= Audit['Authorizeon']

		DisburseObj 		= MKT_DISBURSE_INAU.query.get(DisburseID)
		DisburseDetail 		= MKT_DISBURSE_DE_INAU.query.filter(MKT_DISBURSE_DE_INAU.ID==DisburseID)
		DicReference		= {}
		SettleCharge 		= {}
		DicCOMReference 	= {}
		Transaction  		= mktsetting.getAccSetting().DisbursedTran if mktsetting.getAccSetting() else ""
		TranDate 			= str(mktdate.getBankDate())
		TotalActualAmount 	= 0

		if DisburseObj:
			Inputter 	= DisburseObj.Inputter
			Createdon 	= DisburseObj.Createdon
			Branch 		= DisburseObj.Branch
			Currency 	= DisburseObj.Currency
			AccCateCustomer = ''
			

			if 	Inputter != Authorizer:
				#Get Reference ID for FT
				for row in DisburseDetail:
					#Function getAutoID has db.session.commit so we need to get before submit
					DicReference.update({str(row.LoanID):mktautoid.getAutoID('FRM_FUND_TRANSFER')})
					SettleCharge.update({str(row.LoanID):mktautoid.getAutoID('FRM_FUND_TRANSFER')})
					DicCOMReference.update({str(row.LoanID):mktautoid.getAutoID('FRM_FUND_TRANSFER')})

				#Block PostAccounting and Actual Amount
				for index, row in enumerate(DisburseDetail):

					TotalCharge 	= 0
					UpFrontFee 		= 0

					for key, value in eval('%s'%row.UpFrontFee).iteritems():
						UpFrontFee = UpFrontFee + float(value)

					TotalCharge = TotalCharge + float(UpFrontFee)

					LoanID 			= str(row.LoanID)
					ActualAmount 	= float(row.ActualAmount) - float(TotalCharge)
					TotalActualAmount+ActualAmount

					if ActualAmount > 0:

						# Debit Account 
						DrAcc 	= row.Account
						DrCat 	= row.AccCategory
						DrCur 	= Currency

						# Credit Co Account
						CrAcc 	= DisburseObj.OfficerAccount
						CrCat 	= DisburseObj.OfficerCategory
						CrCur 	= Currency
						Note  	= "Generate Disbursement"
						Module 	= "FT"
						Reference = DicReference[LoanID]
						
						# Validation Max Min Balance
						CheckBalanceDrAcc = mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(ActualAmount), "Dr")
						if CheckBalanceDrAcc:
							return False,msg_error+CheckBalanceDrAcc

						CheckBalanceCrAcc = mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(ActualAmount), "Cr")
						if CheckBalanceCrAcc:								
							return False,msg_error+CheckBalanceCrAcc
						
						#Block Comming Accounting
						CheckAccounting = setDisburseCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Decimal(ActualAmount),Module,Transaction,TranDate,Reference,Note,DisburseID)		
						if not CheckAccounting[0]:
							return False,msg_error+CheckAccounting[1]

						NoCharge 	= mktsetting.getAppSetting('AUTH_NOT_CHARGE')
						if NoCharge == 'Y':

							# post accounting of charge
							Resource = "AUTH"
							ChargeBooking = mktcharge.bookingLoanCharge(LoanID, Currency, DrAcc, DrCat, Branch, Resource,TranDate=TranDate,Authorizer=Authorizer)
							if ChargeBooking[0] == False:
								db.session.rollback()
					else:
						Reference = ""

					
					ActualCompulsory = row.ActualCompulsory
					if float(ActualCompulsory) > 0:

						AccCOM 	= str(mktsetting.getAppSetting('ACC_PRODUCT_COMPULSORY'))

						LoanObj = db.session.query(MKT_LOAN_CONTRACT.ContractCustomerID).\
											 filter(MKT_LOAN_CONTRACT.ID == LoanID).first()

						AccCompulsoryObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==LoanObj.ContractCustomerID).\
																	 filter(MKT_ACCOUNT.Currency==Currency).\
																	 filter(MKT_ACCOUNT.AccProduct == AccCOM).first()

						ComAccCategory 		= db.session.query(MKT_ACC_PRODUCT.CategoryList).\
													join(MKT_ACCOUNT,MKT_ACCOUNT.AccProduct==MKT_ACC_PRODUCT.ID).\
													filter(MKT_ACCOUNT.ID==AccCompulsoryObj.ID).first()

						if AccCompulsoryObj:

							CrAcc 	= AccCompulsoryObj.ID
							CrCat 	= ComAccCategory.CategoryList
							CrCur 	= Currency

							DrAcc 	= DisburseObj.OfficerAccount
							DrCat 	= DisburseObj.OfficerCategory
							DrCur 	= Currency

							Note  	= "Compulsory Saving Settlement"
							Module 	= "FT"
							Reference = DicCOMReference[LoanID]

							#Block Comming Accounting
							CheckAccounting = setDisburseCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,ActualCompulsory,Module,Transaction,TranDate,Reference,Note,DisburseID)
							if not CheckAccounting[0]:
								return False,msg_error+CheckAccounting[1]

					#Block Update Disbursement status
					mktdb.updateRecord(MKT_DISBURSE_DE,
										[MKT_DISBURSE_DE.LoanID==LoanID],{
										'Inputter' 		:	Inputter,
										'Createdon' 	: 	Createdon,
										'Authorizer' 	: 	Authorizer,
										'Authorizeon'	: 	Authorizeon,
										"Reference"		:	Reference,
										"ActualAmount"	:	Decimal(ActualAmount)
										})

				#Block Update Disbursement status
				mktdb.updateRecord(MKT_DISBURSE,
								[MKT_DISBURSE.ID==DisburseID],{	
									'Inputter' 		:	Inputter,
									'Createdon' 	: 	Createdon,
									'Authorizer' 	: 	Authorizer,
									'Authorizeon'	: 	Authorizeon,
									"DisbursedStatus"	:"Y",
									"TotalActualAmount"	:TotalActualAmount
									})

				mktdb.deleteRecord(MKT_DISBURSE_INAU,[MKT_DISBURSE_INAU.ID==DisburseID])
				mktdb.deleteRecord(MKT_DISBURSE_DE_INAU,[MKT_DISBURSE_DE_INAU.ID==DisburseID])

				Message = msg_authorize_0
				return True, Message
			else:
				Message = msg_error+msg_cannot_authorize
				return False,Message
		else:
			Message = msg_error+" No record to authorize. "
			return False,Message

	except Exception, e:
		return False,msg_error+" %s"%e
	

def setDisburseCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amount,Module,Tran,TranDate,Reference,Note,DisburseID,Mode=""):
	try:
		Message = ""
		ExchangeRate = 0
		LCYAmount = 0
		CheckAccounting = mktaccounting.getValidationAccounting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amount,Module,Tran,TranDate,Reference,Note)
		if CheckAccounting[0]:

			# Insert record to Fund Transfer
			if DrCur:
				CurrencyObj 	= MKT_CURRENCY.query.get(DrCur)
				if CurrencyObj:
					if Amount:
						CAmount 	= mktmoney.toMoney(float(Amount),CurrencyObj)
						CAmount 	= float(str(Amount).replace(',',''))
					else:
						CAmount = 0

					ExchangeRate 	= str(mktaccounting.getReportingRate(DrCur,TranDate))
					LCYAmount 		= float(ExchangeRate) * float(CAmount)

			InsertRecord = {	
								'Inputter'		:Inputter,
								'Createdon'		:Createdon,
								'Authorizer'	:Authorizer,
								'Authorizeon'	:Authorizeon,
								'Branch'		:Branch,
								'ID'			:Reference,
								'DrAccount'		:DrAcc,
								'DrCategory'	:DrCat,
								'DrCurrency'	:DrCur,
								'CrAccount'		:CrAcc,
								'CrCategory'	:CrCat,
								'CrCurrency' 	:CrCur,
								'Amount'		:Amount,
								'Transaction'	:Tran,
								'TranDate'		:TranDate,
								'Reference'		:DisburseID,
								'Note'			:Note,
								'Module'		:'DS',
								'ExchangeRate'	:ExchangeRate,
								'LCYAmount'		:LCYAmount
							}
			mktdb.insertTable(MKT_FUND_TRANSFER,InsertRecord)

			#post accounting
			for i in range(0, 2):

				if i == 0:
					Account 	= DrAcc
					Category	= DrCat
					Currency 	= DrCur
					DrCr 		= "Dr"
				else:
					Account		= CrAcc
					Category	= CrCat
					Currency 	= CrCur
					DrCr 		= "Cr"

				#get Gl key	
				GL_KEYS = mktaccounting.getConsolKey(Category,Currency,"","")
					
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					Authorizeon,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Amount, 				# Amount
					Module,					# Module
					Tran, 					# Transaction
					TranDate, 				# TransactionDate
					Reference, 				# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# ConsolKey
					Mode,					# Mode
					"YES")					# Tell function to update LastTransaction Customer's Account
			
			#Check after post accounting
			CheckPointObj = mktaccounting.setAccoutningCheckPoint(Mode,Reference)
			if not CheckPointObj[0]:
				db.session.rollback()
				return False,CheckPointObj[1]

			return True,Message
		else:
			db.session.rollback()
			return False,CheckAccounting[1]
	except Exception, e:
		db.session.rollback()
		return False,'%s'%e


# Hot Field in Fund Withdrawal and Fund Deposit
def getOfficerAcountByBranch():
	try:

		TellerParam = 	mktparam.getTellerParam()
		Branch 		= 	mktuser.getBranch(session["ChangeBranch"]).ID
		AccObj 		= 	""
		WalletCat 	=	""
		if TellerParam:
			WalletCat = TellerParam.WalletCategory

		CashObj 	=	MKT_CASH_ACCOUNT.query.\
						filter(MKT_CASH_ACCOUNT.Type == 'W').\
						all()

		AccID =	[]

		if CashObj:

			for item in CashObj:

				ID 				=	item.ID
				CurrencyList 	= 	item.Currency
				CurrencyList 	= 	CurrencyList.split()
				
				if CurrencyList:

					for cur in CurrencyList:
						NewID = str(cur) + str(WalletCat) + str(ID)
						AccID.append(NewID)

		AccObj 	=	MKT_ACCOUNT.query.\
					filter(MKT_ACCOUNT.ID.in_(AccID)).\
					filter(MKT_ACCOUNT.Branch == Branch)

		return AccObj

	except Exception, e:
		return "%s" %s

def setChangeOfficer(LoanContract,Officer,**kwargs):
	try:
		DicLoan 	= {}
		LoanObj 	= MKT_LOAN_CONTRACT.query
		CustomerObj = MKT_CUSTOMER.query

		if 'DicLoan' in kwargs:
			DicLoan = kwargs['DicLoan']
		if LoanContract:
			DicLoan.update({str(LoanContract):str(Officer)})

		if DicLoan:
			for key, value in DicLoan.iteritems():
				NewOfficer 	= str(value)
				LoanID 		= str(key)

				FilterLoanObj = LoanObj.get(LoanID)
				if FilterLoanObj:

					Customer 			= FilterLoanObj.ContractCustomerID
					FilterCustomerObj 	= CustomerObj.get(Customer)

					if FilterCustomerObj:
						FilterLoanObj.ContractOfficerID = NewOfficer
						FilterCustomerObj.Officer 		= NewOfficer

						# LoanObjUpdate = FilterLoanObj.update({'ContractOfficerID':NewOfficer})
						# CustomerObjUpdate = FilterCustomerObj.update({'Officer':NewOfficer})

						db.session.add(FilterLoanObj)
						db.session.add(FilterCustomerObj)
					else:
						return False,"Customer %s not found in loan contract %s."%(Customer,LoanID)
				else:
					return False,"Loan contract %s not found."%LoanID
			# db.session.commit()
			return True,"Record was update successfully."

	except Exception, e:
		db.session.rollback()
		return False,"%s"%e
		raise

def ChageGroupLCOfficer(ID, OfficerID,**kwargs):
	try:
		VBID 			= ''
		GroupID 		= ''
		isChangeVB 		= kwargs.get('isChangeVB', False)
		condiction 		= []
		queryObj 		= []

		OfficerObj 		= MKT_CHANGE_OFFICER.query.filter(MKT_CHANGE_OFFICER.ID == ID).first()
		if not OfficerObj:
			OfficerObj 		= MKT_CHANGE_OFFICER_INAU.query.filter(MKT_CHANGE_OFFICER_INAU.ID == ID).first()

		if OfficerObj:
			VBID 	= OfficerObj.VBID
			GroupID = OfficerObj.GroupID

			VBObj 		= MKT_VB.query.filter(MKT_VB.ID == VBID).first()
			if GroupID:
				condiction.append(MKT_GROUP.ID == GroupID)

			GroupObj 	= MKT_GROUP.query.filter(MKT_GROUP.VBID == VBID).\
										  filter(*condiction).all()

			if VBObj and not isChangeVB:
				VBObj.OfficerID = OfficerID
				db.session.add(VBObj)

			if GroupObj:
				for row in GroupObj:
					row.OfficerID = OfficerID
					db.session.add(row)

		return True,"Record was update successfully."
	except Exception, e:
		db.session.rollback()
		return False,"%s"%e
		raise

def getLoanUpfrontCharge(LoanID, Currency) :

	LoanChargeObj = db.session.query(MKT_LOAN_CHARGE.ChargeKey, MKT_LOAN_CHARGE.ChargeUnearned,MKT_CHARGE.Description).\
							join(MKT_CHARGE, MKT_CHARGE.ID == MKT_LOAN_CHARGE.ChargeKey).\
							join(MKT_CHARGE_RATE, MKT_CHARGE_RATE.ID == MKT_CHARGE.ID+Currency).\
							filter(MKT_LOAN_CHARGE.ID == LoanID).\
							filter(MKT_CHARGE_RATE.ChargeMode == '1').all()

	return LoanChargeObj