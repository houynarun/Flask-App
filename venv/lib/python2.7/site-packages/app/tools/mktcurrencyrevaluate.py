from .. 						import app, db
from decimal 					import *
from sqlalchemy 				import or_, func

from app.Category.models 		import MKT_CATEGORY
from app.Currency.models 		import MKT_CURRENCY
from app.ConsolBalance.models	import MKT_CONSOL_BALANCE
from app.Branch.models 			import MKT_BRANCH

import mktmoney 				as mktmoney 
import mktdate 					as mktdate
import mktsetting 				as mktsetting
import mktaccounting 			as mktaccounting
import mktgl 					as mktgl

'''
	**** Write by Sovankiry Rim / Date: 10 Oct 2016
	Calculate Amount for Gain or Loss 
'''

def setCurrencyRevaluation(IsBackDate=""):
	try:
		# FCY : Foreign Currency refer to other currency different base currency in setting.
		# LCY : Local Currency refer to other currency different base currency in setting.

		AccSetting 		= 	mktsetting.getAccSetting()
		PositionCat 	=	AccSetting.PositionCat
		EquivalentCat 	=	AccSetting.EquivalentCat
		RoundingCat 	=	AccSetting.RoundingCat
		LocalCurrency 	= 	AccSetting.BaseCurrency
		Revaluation 	= 	AccSetting.Revaluation if AccSetting.Revaluation else "N"
		RevaluationCat 	=	AccSetting.RevCatType.split()

		BranchObj 		= MKT_BRANCH.query.order_by(MKT_BRANCH.ID.asc())
		if Revaluation == "Y" :

			print "Currency Revaluation..."
			print ''
			# Block Find Console Key with Base Currency and Foreign Currency.
			PositionKey 	= []
			CurrencyObj 	= MKT_CURRENCY.query.\
								filter(MKT_CURRENCY.ID != LocalCurrency).\
								all()
			for row in CurrencyObj:
				GL_KEYS 	= 	mktaccounting.getConsolKey(PositionCat, row.ID)
				PositionKey.append(GL_KEYS)

			EquivalentKey = mktaccounting.getConsolKey(EquivalentCat, LocalCurrency)
			# end Block
			CategoryObj 		= 	MKT_CATEGORY.query
			ReportingRateObj	= 	mktaccounting.getReportingRateObj()
			TranDate 			= 	mktdate.getBankDate()
			Field 				=	"Balance"

			if IsBackDate == "PreviousMonth":
				BankDateObj 	=	mktdate.getBankDateObj()
				TranDate 		=	BankDateObj.LastMonthEnd
				Field			=	"PrevMonthBal"

			elif IsBackDate == "PreviousYear":
				BankDateObj 	=	mktdate.getBankDateObj()
				TranDate 		=	BankDateObj.LastYearEnd
				Field			=	"PrevYearBal"

			Reference 			=	str(TranDate).replace("-", "")
			Reference 			= 	"REV%s" %Reference
			ConditionConsoleFCY = 	getConditionConsoleFCY(AccSetting)
			# print "Start Revaluation"
			for item in BranchObj:

				Branch 			= 	item.ID
				# print "Branch %s"%Branch

				PositionObj 	= 	MKT_CONSOL_BALANCE.query.\
														filter(MKT_CONSOL_BALANCE.ID.in_(PositionKey)).\
														filter(MKT_CONSOL_BALANCE.Branch == Branch).all()
														
				EquivalentObj 	= 	MKT_CONSOL_BALANCE.query.\
														filter(MKT_CONSOL_BALANCE.ID==EquivalentKey).\
														filter(MKT_CONSOL_BALANCE.Branch == Branch).first()
				if EquivalentObj and PositionObj:

					OldValue = Decimal(getattr(EquivalentObj, Field))


					NewValue = Decimal(0)
					for row in PositionObj:
						Balance = Decimal(getattr(row, Field))
						print "Position Account Balance: %s" % mktmoney.formatNumber(Balance,DecimalPlace=9)
						# Multiply FCY Balance with FCY Rate
						LCYBalance =  Balance* Decimal(ReportingRateObj.get(row.Currency))

						if IsBackDate:
							LCYBalance =  Balance * Decimal(mktaccounting.getReportingRate(row.Currency,TranDate))
						
						NewValue += LCYBalance

					print "Old Equivalent Balance: %s" % mktmoney.formatNumber(OldValue,DecimalPlace=9)
					print "New Equivalent Balance: %s" % mktmoney.formatNumber(NewValue,DecimalPlace=9)
					# print "Cal Revaluation",'NewValue',NewValue,'OldValue',OldValue
					
					if NewValue > OldValue :
						# Gain On Exchange
						GainAmount = NewValue - OldValue
						GainAmount = '{:.9f}'.format(GainAmount) # If decimal place more than 9 digit need to round
						GainAmount = float(GainAmount)
						# print "Gain Amount",GainAmount
						GainOrLoss = True # Mean that Gain On Exchange
						mktaccounting.setGainAndLossAccounting(AccSetting,GainOrLoss,Branch,TranDate,LocalCurrency,GainAmount,Reference)
						if GainAmount > 0:
							print "%s - Gain on exchange amount %s." %(Branch, mktmoney.formatNumber(GainAmount,DecimalPlace=9))
						else:
							print "No Gain/Loss on exchange for branch %s."%Branch

					elif NewValue < OldValue :
						# Loss on Exchange
						LossAmount = OldValue - NewValue
						LossAmount = '{:.9f}'.format(LossAmount) # If decimal place more than 9 digit need to round 
						LossAmount = float(LossAmount)

						GainOrLoss = False # Mean that Loss On Exchange
						mktaccounting.setGainAndLossAccounting(AccSetting,GainOrLoss,Branch,TranDate,LocalCurrency,LossAmount,Reference)
						if LossAmount > 0:
							print "%s - Loss on exchange amount %s." %(Branch,mktmoney.formatNumber(LossAmount,DecimalPlace=9))
						else:
							print "No Gain/Loss on exchange for branch %s."%Branch

					else:
						print "No Gain/Loss on exchange for branch %s."%Branch

				# Call Revaluation
				setRevaluation(AccSetting,ReportingRateObj,CurrencyObj,CategoryObj,ConditionConsoleFCY,Branch,TranDate,Reference,IsBackDate)

			db.session.commit()
			print "Currency Revaluation was successfully."
	except Exception, e:
		db.session.rollback()
		raise

def getCategoryRevaluate(AccSetting):
	"""
		Get category that revaluation
	"""

	RevaluationCat 	=	AccSetting.RevCatType.split()
	CheckCurrency 	= 	mktaccounting.getDefaultCurrency()
	if CheckCurrency: # Currency more than two
		if not RevaluationCat:
			raise ValueError("Revaluate Category Type is required. Please configuration Accounting Setting.")

	CategoryObj 	= 	db.session.query(MKT_CATEGORY.ID).filter(MKT_CATEGORY.CategoryType.in_(RevaluationCat)).\
														all()
	ListCategory 	= 	[]

	for row in CategoryObj:
		ListCategory.append(str(row.ID))

	return ListCategory

def getConditionConsoleFCY(AccSetting):
	Condition = []
	RevaluationCatObj 	= getCategoryRevaluate(AccSetting)
		
	#Find category for revaluation
	Condition 			= []
	for row in RevaluationCatObj:
		Condition.append(MKT_CONSOL_BALANCE.ID.ilike('{}%'.format(row)))
	return Condition

def setRevaluation(AccSetting,ReportingRateObj,CurrencyObj,CategoryObj,ConditionConsoleFCY,Branch,TransactionDate,Reference,IsBackDate=""):
	'''
		Revaluation all Balance Sheet Account with new reporting rate
	'''
	try:
		
		Transaction 		= AccSetting.RevTran
		DrDic = {}
		CrDic = {}
		

		for curr in CurrencyObj:

			Currency = curr.ID
			DicRevalue = {}

			ConsoleObj = MKT_CONSOL_BALANCE.query.\
											filter(or_(*ConditionConsoleFCY)).\
											filter(MKT_CONSOL_BALANCE.Currency == Currency).\
											filter(MKT_CONSOL_BALANCE.Branch == Branch)

			if IsBackDate == "PreviousYear":
				BankDate	=	mktdate.getBankDate()
				IsFirstMonthOfYear	=	False
				
				FirstMonthOfYear = int(str(TransactionDate).split('-')[1]) + 1
				if FirstMonthOfYear == 13: FirstMonthOfYear = 1
				if FirstMonthOfYear == BankDate.month:
					IsFirstMonthOfYear	=	True
			
			for row in ConsoleObj:
				ID = row.ID
				Category = ID.split('.')[0]

				# print "Start Update Console",Branch,ID
				if IsBackDate:
					ReportingRate	=	Decimal(mktaccounting.getReportingRate(row.Currency,TransactionDate))
						
					if IsBackDate == "PreviousMonth":
						row.LCYCurrentPrevMonthBal	=	row.CurrentPrevMonthBal * ReportingRate
						row.LCYPrevMonthBal 		=	row.PrevMonthBal * ReportingRate
					
					elif IsBackDate == "PreviousYear": 
						row.LCYCurrentPrevYearBal	=	row.CurrentPrevYearBal * ReportingRate
						row.LCYPrevYearBal 			=	row.PrevYearBal * ReportingRate

						if IsFirstMonthOfYear:
							row.LCYCurrentPrevMonthBal	=	row.CurrentPrevMonthBal * ReportingRate
							row.LCYPrevMonthBal 		=	row.PrevMonthBal * ReportingRate

				else:
					# Calculate new reporting rate
					ReportingRate 		= Decimal(ReportingRateObj.get(row.Currency))
					LCYBalance  		= Decimal(row.Balance) * ReportingRate
					LCYCurrentMonthBal 	= Decimal(row.CurrentMonthBal) * ReportingRate
					LCYYTDBal 			= Decimal(row.YTDBal) * ReportingRate

					# Sum Dr/Cr by console balance 
					DrDic,CrDic 		= getDicConsoleUpdate(DrDic,CrDic,CategoryObj,ID,Category,
																row.LCYBalance,			LCYBalance,
																row.LCYCurrentMonthBal,	LCYCurrentMonthBal,
																row.LCYYTDBal,			LCYYTDBal)

					row.LCYBalance 			= LCYBalance
					row.LCYCurrentMonthBal 	= LCYCurrentMonthBal
					row.LCYYTDBal 			= LCYYTDBal
				
				db.session.add(row)

			# # Check Different Rouding
			# if DrDic or CrDic:
			# 	isRoundingDifference(AccSetting,Branch,DrDic,CrDic,TransactionDate,Transaction,Reference)			
			
		print "Revaluate currency for branch %s was successfully."%Branch				
	except Exception, e:
		db.session.rollback()
		raise
	else:
		pass
	finally:
		pass


def getDicConsoleUpdate(DrDic,CrDic,CategoryObj,GLKey,Category,OldBalance,NewBalance,OldCurrentMonthBal,NewCurrentMonthBal,OldYTDBal,NewYTDBal):

	CategoryType = CategoryObj.get(Category)

	if CategoryType:

		BalanceType = CategoryType.BalanceType
		Description = CategoryType.Description

		OldDrDic = DrDic.get('OldDrDic',{})
		OldCrDic = CrDic.get('OldCrDic',{})

		NewDrDic = DrDic.get('NewDrDic',{})
		NewCrDic = CrDic.get('NewCrDic',{})

		DicOldBal = {'OldBalance':OldBalance,'OldCurrentMonthBal':OldCurrentMonthBal,'OldYTDBal':OldYTDBal}
		DicNewBal = {'NewBalance':NewBalance,'NewCurrentMonthBal':NewCurrentMonthBal,'NewYTDBal':NewYTDBal}

		if BalanceType == "Dr":
			OldDrDic.update({'%s, %s'%(GLKey,Description):DicOldBal})
		else:
			OldCrDic.update({'%s, %s'%(GLKey,Description):DicOldBal})

		if BalanceType == "Dr":
			NewDrDic.update({'%s, %s'%(GLKey,Description):DicNewBal})
		else:
			NewCrDic.update({'%s, %s'%(GLKey,Description):DicNewBal})

		DrDic.update({'OldDrDic':OldDrDic})
		CrDic.update({'OldCrDic':OldCrDic})

		DrDic.update({'NewDrDic':NewDrDic})
		CrDic.update({'NewCrDic':NewCrDic})

	return DrDic,CrDic


def isRoundingDifference(AccSetting,Branch,DrDic,CrDic,TransactionDate,Transaction,Reference):

	OldDrDic 		= DrDic.get('OldDrDic')
	OldCrDic 		= CrDic.get('OldCrDic')
	NewDrDic 		= DrDic.get('NewDrDic')
	NewCrDic 		= CrDic.get('NewCrDic')

	# Get Differences of Balance
	Balance 		= getDiffBalance('Balance',Branch,OldDrDic,OldCrDic,NewDrDic,NewCrDic)
	
	# Get Differences of Current Month balance
	CurrentMonthBal = getDiffBalance('CurrentMonthBal',Branch,OldDrDic,OldCrDic,NewDrDic,NewCrDic)
	
	# Get Differences of YTD Balance
	YTDBal 			= getDiffBalance('YTDBal',Branch,OldDrDic,OldCrDic,NewDrDic,NewCrDic)

	setConsoleRounding(AccSetting,Branch,Balance,CurrentMonthBal,YTDBal,TransactionDate,Transaction,Reference)


def getDiffBalance(Period,Branch,OldDrDic,OldCrDic,NewDrDic,NewCrDic):
	'''
																							Before-Old							After-New		Different
	Key					Description				Branch		Currency	Dr/Cr		FCYBalance		Balance			FCYBalance	Balance		
	11111.KHR..........	CASH ON HAND			HO			KHR			Dr			293400			71.9117532		293400		69.857073		2.0546802	
	11112.KHR..........	PETTY CASH				HO			KHR			Dr			800000			196.0784		800000		190.476			5.6024	
	22167.KHR..........	PO-PREPAID-OTHER		HO			KHR			Dr			5000100			1225.5145098	5000100		1190.4988095	35.0157003	
	28972.KHR..........	AR-ADVANCE TO EMPLOYEE	HO			KHR			Dr			0				0				0			0				0
																		----------------------------------------------------------------------------------
																	Total Debit		6093500			1493.504663		6093500		1450.8318825	42.6727805	

											
	38411.KHR..........	OTHER WITHHOLDING TAX	HO			KHR			Cr			5700			1.3970586		5700		1.3571415		0.0399171	
	38610.KHR..........	Position Account		HO			KHR			Cr			6099200			1494.9017216	6099200		1452.189024		42.7126976	
																		----------------------------------------------------------------------------------
																	Total Credit	6104900	1496.2987802	6104900	1453.5461655	42.7526147	-0.0798342

	=> -0.0798342 ( Different Amount)

	'''
	OldDrBalance 			= 0
	OldCrBalance 			= 0
	
	NewDrBalance 			= 0
	NewCrBalance 			= 0
	

	OldPeriod = 'Old%s'%Period
	NewPeriod = 'New%s'%Period
	print ''
	print "Before revaluation %s"%Period
	#Debit
	for row in OldDrDic:

		DicBal 			= OldDrDic[row]
		Balance 		= Decimal(DicBal.get(OldPeriod,0))
		OldDrBalance 	+= Balance
		
		print '%s Dr, %s, %s'%(Branch,row,Balance)

	print 'Total Debit,,, %s'%(OldDrBalance)

	# Credit
	for row in OldCrDic:
		DicBal 			= OldCrDic[row]
		Balance 		= Decimal(DicBal.get(OldPeriod,0))
		OldCrBalance 	+= Balance

		print '%s Dr, %s, %s'%(Branch,row,Balance)


	print 'Total Credit,, , %s'%(OldCrBalance)
	print ''
	
	print "After revaluation %s"%Period
	#Debit 
	for row in NewDrDic:
		DicBal 			= NewDrDic[row]
		Balance 		= Decimal(DicBal.get(NewPeriod,0))
		NewDrBalance 	+= Balance

		print '%s Dr, %s, %s'%(Branch,row,Balance)


	print 'Total Debit,,, %s'%(NewDrBalance)

	# Credit
	for row in NewCrDic:
		DicBal 			= NewCrDic[row]
		Balance 		= Decimal(DicBal.get(NewPeriod,0))

		NewCrBalance 			+= Balance
	

		print '%s Cr, %s, %s'%(Branch,row,Balance)


	print 'Total Credit,,, %s'%(NewCrBalance)

	# Calculate Different Balance
	DrDifferentAmt  	= OldDrBalance - NewDrBalance

	CrDifferentAmt  	= OldCrBalance - NewCrBalance

	BalanceDifferentAmt = DrDifferentAmt - CrDifferentAmt

	print "Total Debit Different,,,",DrDifferentAmt
	print "Total Debit Different,,,",CrDifferentAmt
	print "Different %s,,,%s"%(Period,BalanceDifferentAmt)
	
	BalanceDifferentAmt = '{:.9f}'.format(BalanceDifferentAmt) # If decimal place more than 9 digit need to round 
	BalanceDifferentAmt = Decimal(BalanceDifferentAmt)

	return BalanceDifferentAmt


def setConsoleRounding(AccSetting,Branch,Balance,CurrentMonthBal,YTDBal,TransactionDate,Transaction,Reference):

	print 'Balance',Balance,'CurrentMonthBal',CurrentMonthBal,'YTDBal',YTDBal

	Currency 	= AccSetting.BaseCurrency
	Category 	= AccSetting.RoundingCat
	GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)

	ConsoleObj = MKT_CONSOL_BALANCE.query.filter(MKT_CONSOL_BALANCE.ID == GL_KEYS).\
							filter(MKT_CONSOL_BALANCE.Branch == Branch).first()
	# Casue New
	if not ConsoleObj :
		ConsoleObj = mktgl.getNewConsoleBalance(GL_KEYS, Branch, Currency)

	if abs(Balance) > 0: 
		ConsoleObj.Balance 				= Balance 			+ Decimal(ConsoleObj.Balance)
		ConsoleObj.LCYBalance 			= Balance 			+ Decimal(ConsoleObj.LCYBalance)
	
	if abs(CurrentMonthBal) > 0:

		ConsoleObj.CurrentMonthBal 		= CurrentMonthBal 	+ Decimal(ConsoleObj.CurrentMonthBal)
		ConsoleObj.LCYCurrentMonthBal 	= CurrentMonthBal 	+ Decimal(ConsoleObj.LCYCurrentMonthBal)

	if abs(YTDBal) > 0:
		ConsoleObj.YTDBal 				= YTDBal 			+ Decimal(ConsoleObj.YTDBal)
		ConsoleObj.LCYYTDBal 			= YTDBal 			+ Decimal(ConsoleObj.LCYYTDBal)
	
	if ConsoleObj:
		db.session.add(ConsoleObj)

	DateTimeNow 	= mktdate.getDateTimeNow()
	JNID 			= ''#mktaccounting.getJournalAutoID() # get journal ID
	Amount 			= CurrentMonthBal
	if Amount > 0:
		DebitCredit = "Dr"
	else:
		DebitCredit = 'Cr'
	Amount 			= abs(Amount)
	LCYAmount 		= Amount
	if LCYAmount > 0:
		mktaccounting.insert_MKT_JOURNAL("AUTH", "0", 'System', DateTimeNow, 'System',
										DateTimeNow, JNID ,Category ,DebitCredit ,
										Amount, 'RV', Transaction, TransactionDate ,Reference,
										Currency, Branch, GL_KEYS, LCYAmount)