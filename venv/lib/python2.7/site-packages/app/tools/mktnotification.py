# -*- coding: utf-8 -*-

'''
Created Date: 23 July 2015
Author: Sovankiry Rim

Modified by: Sovankiry
Modified Date: 01 Oct 2015
All Right Reserved Morakot Technology
Description :

'''

import sys
from app.mktcore.imports 	import *
from flask 				import flash,session,request,template_rendered
from flask.ext.login 		import LoginManager, login_user, logout_user, current_user, login_required
from app 				import app, db

import app.tools.mktdb 				as mktdb
import app.tools.user 				as mktuser
import app.tools.mktsetting 		as mktsetting
import app.tools.mktdate 			as mktdate
import time
from app.Notification.models 		import *
from app.User.models 				import *
from app.LoginUser.models 			import *

from sqlalchemy import desc
from app.Module.models import MKT_FORM
from app.Role.models 	import *

ExtendModuleObj = mktsetting.ExtendModule()

def getConfigNotification():
	

	# Path : Title
	ConfigNotification = {
			#__A__
			'Account'				:'Account'			,
			'Account_DD'			:'Drawdown Account' ,
			'Account_SV'			:'Savings Account'	,
			'Account_OD'			:'Overdraft Account',
			#__B__
			'Branch'				:'Branch'				,
			'BuyForeign'			:'Buy Foreign Currency'	,
			'BorrowingContract'		:'Borrowing Contract'	,
			'BorrowingPayment'		:'Borrowing Payment'	,
			'BorrowingAccount'		:'Borrowing Account'	,
			'BorrowingCharge'		:'Borrowing Charge'		,
			#__C__
			'CBC'					:'CBC Enquiry'		,
			'ChangeLoanProduct'		:'Change Loan Product',
			"Collateral"			:'Collateral'		,
			'CollateralDetail'		:'Collateral Detail',
			'Customer'				:'Customer'			,
			'CompulsoryAccount'		:'Compulsory Account',
			#__D__
			'Deposit'				:'Deposit'			,
			'DepositBank'			:'Deposit By Bank'	,
			'DepositCheque'			:'Deposit By Cheque',
			#__E__
			'ExpensePosting'		:'ExpensePosting'	,
			#__F__
			'FundAdvance'			:'Fund Advance'		,
			'FundDeposit'			:'Fund Deposit'		,
			'FundSettlement'		:'Fund Settlement'	,
			'FundTransfer'			:'Fund Transfer'	,
			'FundWithdrawal'		:'Fund Withdrawal'	,
			'SaleForeclosedProperty'	 : 'Foreclosed Sale',
			'RevalueForeclosedProperty'  : 'Foreclosed Revalue',
			'TransferForeclosedProperty' : 'Foreclosed Transfer',
			# G
			'GroupLoan'				:'Group Loan Contract',
			'Group'					:'Group',
			#__I__
			'IncomeExpenseBooking'	:'Income Expense Booking',
			'IncomePosting'			:'Income Posting'	,
			#__J__
			'JoinAccount'			:'Join Account'		,
			'JournalEntry'			:'Journal Entry'	,
			#__L__
			'LoanApplication'		:'Loan Application'	,
			'LoanAmendment'			:'Loan Amendment'	,
			'LoanAmendmentDetail'	:'Loan Amendment Detail',
			'LoanContract'			:'Loan Contract'	,
			'LoanClassification'	:'Loan Classification',
			'LoanRecovery'			:'Loan Recovery'	,
			'LoanWriteOff'			:'Loan Write-off'	,
			#__M__
			"ManualLoanCollection"	:'Manual Loan Collection',
			'MultiJournal'			:'Multi Journal'	,
			'MultiJournalII'		:'Multi Journal'	,
			#__O__
			'OverdraftContract'		:'Overdraft Contract',
			'OverdraftAmendment'	:'Overdraft Amendment',
			'OverdraftWriteOff'		:'Overdraft Write Off',
			'OverdraftRecovery'		:'Overdraft Recovery',
			#__P__
			'Penalty'				:'Penalty',
			'POCustomer'			:'Potential Customer',
			'POCustomerAct'			:'Potential Customer Activity',
			#__R__
			'Rejected'				:'Rejected'			,
			#__S__
			'SellForeign'			:'Sell Foreign Currency',
			'SpecialJournal'		:'Special Journal'	,
			'StandingOrder'			:'StandingOrder',
			'Survey'				:'Survey',
			'SurveyQuestion'		:'Survey Question',
			'SurveyQuestionnaire'	:'Survey Questionnaire',
			#__T__
			'TillClose'				:'Till Close'		,
			'TillOpen'				:'Till Open'		,
			'TillToTill'			:'Till To Till'		,
			#__V__
			'VB'					:'Village Bank',
			'Vendor'				:'Vendor'			,
			#__W__
			'Withdrawal'			:'Withdrawal'		,
			'WithdrawalBank'		:'Withdrawal By Bank',
			'WithdrawalCheque'		:'Withdrawal By Cheque',
			'Workflow'                :'Workflow',
			'ReviewApproveCustom'    :'ReviewApproveCustom'
			}
	ConfigNotification = ExtendModuleObj.getNotificationExtend(NotifyConf=ConfigNotification)

	return ConfigNotification


def getMappingFlowCode(Code):
	# ['N','D','A','R','E', 'ALL']
	# Opearation , Event Code
	Dict={'100':'N'	,
			'101':'N',
			'200':'A',
			'300':'E',
			'301':'E',
			'500':'D',
			'600':'R',
			'601':'R',
			'602':'A',
			
			}
	return Dict.get(Code,'')

def getEventCode():
	# if ur code have unicode 
	# reload(sys)
	# sys.setdefaultencoding('utf-8')

	# Code : Description
	MessageNotification = {
			'000':'has logged-in.',
			'001':'has logged-out.',
			'100':'was created and un-authorized.',
			'101':'was created and authorized.',
			'200':'was authorized.',
			'300':'was edited and un-authorized.',
			'301':'was edited and authorized.',
			'400':'was viewed.',
			'500':'was deleted.',
			'501':'was deleted from unathorized record.',
			'600':'was reversed and un-authorized.',
			'601':'was reversed and authorized.',
			'602':'was reversal authorized.',
			'700':'reviewed',
			'701':'EOD',
			'702':'Backup',
			'703':'new record was clicked',
			'704':'Month End Closing',
			'705':'General Setting',
			'Direct':''#Direct Notify
			}

	return MessageNotification

# Use flask signal event to upload data in db
def log_template_renders(sender, template, context, **extra):
	# SettingObj 				= mktsetting.getSetting()
	# if SettingObj:
	# 	SettingNotify 			= True if SettingObj.Notification == "TRUE" else False
	# 	if SettingNotify:
	if 'notification' in context:
		if context['notification']:
			Config 	= getConfigNotification()
			# Message = getMessageNotification()
			# print str(context['path']).split('/')[2]
			Path 	= str(context['path']).split('/')[2]  if 'path' in context else context['notification']['Path']
			if Path in Config:

				InsertRecord	= {}
				ID 				= context['notification']['ID'] 
				Path 			= Path
				Title 			= Config[Path]
				Status 			= context['notification']['Status']
				Description 	= context['notification']['Code']
				AppName 		= context['notification']['Model']
				DictNotify = {
						'Status'	:Status,
						'GlobalID'	:ID,
						'Path'		:Path,
						'AppName'	:AppName,
						'Title'		:Title,
						'Description':Code,
						'Read'		:'',
						'ReadDetail':'',
						'Clear':''
						}
				InsertRecord.update({
								'Status'	:Status,
								'GlobalID'	:ID,
								'Path'		:Path,
								'AppName'	:AppName,
								'Title'		:Title,
								'Description':Description,
								'Read'		:'',
								'ReadDetail':'',
								'Clear':''
								})

				mktdb.insertTable(MKT_NOTIFICATION,InsertRecord)
				db.session.commit()
				InsertRecord	= {}
				setPushNotify()
				# print "DictNotify 1",DictNotify
			else:
				print "Not Save Notify 1"
		else:
			print "Not found notification",context['notification']
		db.session.close()

	# sender.logger.debug('Rendering template "%s" with context %s',template.name or 'string template',context)

# template_rendered.connect(log_template_renders, app)

#Use flask signal to push notification
# @template_rendered.connect_via(app)
# def when_template_rendered(sender, template, context, **extra):
# 	# print 'Template %s is rendered with %s' % (template.name, 'context')
# 	setPushNotify()

def getCode(Status='',NAuthorize=''):
	Code = ""
	if NAuthorize == 0:
		if Status == "":
			Code = "101"

		if Status == "AUTH":
			Code = "301"

	if NAuthorize >= 1:

		if Status == "":
			Code = "100"

		if Status == "INAU":
			Code = "300"

		if Status == "AUTH":
			Code = "300"

		if Status == "RNAU":
			Code = "602"

	return Code

def getSignal(ID='',Model='',Status='',Code='',Path=''):
	
	dic={}
	Model=Model.__name__
	dic = {'ID':ID,'Model':Model,'Status':Status,'Code':Code,'Path':Path}

	return dic

#Genarate
def event_stream(Dic,timeInMili = 0):

	# yield 'data:%s\n\n' % Dic
	yield 'retry:%s\ndata:%s\n\n' % (timeInMili, Dic)

def getNotifyAccess(ExcludeRead=True):
	"""
		ExcludeRead = True : Mean that get all record exclude read record
		ExcludeRead = False : Mean that get all record

	"""
	try:
		NotifyFlow = []
		DictFlow   = {}
		ListURL    = []
		ReadID     = []
		QueryObj   = []
		if 'getLogInID' in session:

			ObjUser 		= mktuser.getUser()
			DefaultBranch 	= mktuser.getCurrentBranch()
			CurrentUser 	= ObjUser.ID
			Role 			= ObjUser.Role
			EnableNotifyFlow= mktsetting.getAppSetting('EnableNotifyFlow')
			# EnableNotifyFlow="Y"

			# Filter any Module that user can access only 
			AccessForm 		= db.session.query(MKT_ACCESS.ID,MKT_FORM.URL).\
										join(MKT_FORM,MKT_ACCESS.Form == MKT_FORM.FormID).\
										filter(MKT_ACCESS.ID == Role)
			ListForm = []
			for row in AccessForm:
				ListForm.append(str(row.URL))
			# print 'ListForm',ListForm

			# Block Check Notify Flow
			if EnableNotifyFlow and EnableNotifyFlow=="Y":
				NotifyFlow = db.session.query(MKT_NOTIFICATION_FLOW,MKT_FORM.URL).\
										filter(MKT_NOTIFICATION_FLOW.Role == Role).\
										join(MKT_FORM,MKT_FORM.FormID == MKT_NOTIFICATION_FLOW.Form)

										# filter(MKT_NOTIFICATION_FLOW.Form.in_(ListForm))

				# Filter with workflow
				if NotifyFlow.first():

					for row in NotifyFlow:
						URL = str(row[1])
						AccessRight = row[0].Notify.split()

						# Store URL and Access right Notify
						DictFlow.update({URL:AccessRight})
						# Store URL
						ListURL.append(URL)

			# Filter exclude read record
			ReadObj = db.session.query(MKT_NOTIFICATION_READ.ID).\
									filter( MKT_NOTIFICATION_READ.Read == CurrentUser)

			Notification 	= db.session.query(MKT_NOTIFICATION).filter(MKT_NOTIFICATION.RecordType == '1')
			if ExcludeRead:
				Notification= Notification.\
										filter(~MKT_NOTIFICATION.ID.in_(ReadObj.subquery()))

			# for row in Notification:
			# 	print 'A-',row.GlobalID

			# Filter by branch and exclude own record
			Notification 	= Notification.\
							filter(MKT_NOTIFICATION.Branch==DefaultBranch).\
							filter(MKT_NOTIFICATION.Inputter!=CurrentUser)

			# for row in Notification:
			# 	print 'b',row.GlobalID

			# Case super admin can view all record without access form
			if Role != '99':#Super Admin
				# Filter only form that you can access
				Notification = Notification.filter(MKT_NOTIFICATION.Path.in_(ListForm))


			# print 'DictFlow',DictFlow
			# Filter All URL can access for notify
			# if ListURL:
			# 	Notification = Notification.filter(MKT_NOTIFICATION.Path.in_(ListURL))

			# yield record
			Notification = Notification.yield_per(100)
	
			for row in Notification:
				
				# Get Notify Config Access by Form 
				NotifyConf = DictFlow.get(row.Path,[])
				# print 'NotifyConf',NotifyConf

				# Get Event code from record db
				EventCode  = row.Description
				# print 'EventCode',EventCode

				# Convert Event code to latter of code
				# Example : Record description 100 change to N
				FlowCode = getMappingFlowCode(EventCode)
				# print 'FlowCode',FlowCode

				# Check with config that record can access notify 
				# But exclude role 99
				if row.Description == 'Direct':
					# Filter only Direct to you ( Current User)
					if row.Description == 'Direct':
						if row.To == CurrentUser:
							ReadID.append(row.ID)

				elif NotifyConf:
					if FlowCode in NotifyConf and 'OFF' not in NotifyConf:
						# Store ID of record notify
						ReadID.append(row.ID)

				elif Role =='99':
					# Super Admin Can view any notify without config
					ReadID.append(row.ID)

				# Case NotifyFlow is not enable
				# Notify all record exclude direct message
				elif not EnableNotifyFlow and EnableNotifyFlow=="Y":
					ReadID.append(row.ID)
				else:
					ReadID.append(row.ID)
					
			# print 'ReadID',ReadID
			if ReadID:
				QueryObj = MKT_NOTIFICATION.query.filter(MKT_NOTIFICATION.ID.in_(ReadID))

			return QueryObj
	except Exception as e:
		raise

		
def setPushNotify():
	"""
		1.Push notify event by branch
		2.Push notify event by user can access
		3.Push notifu event by workflow (custom)
	"""
	Count 		= '0'
	Check 		= ''
	Dic 		= {}
	if 'getLogInID' in session:
		AuthorizeCode 	= ['101','200','301','601','602']
		UnauthorizeCode = ['100','300','501','600']
		InboxCode 		= ['100','101','Direct']
		NotificationAuthorize 	= []
		NotificationUnauthorize = []
		NotificationInbox 		= []
		ObjUser 		= mktuser.getUser()
		# Check User turn off/on Notify by user profile
		if ObjUser.Notification == None or ObjUser.Notification == "":	
			MuteNotification = "Y"  
		else: 
			MuteNotification = ObjUser.Notification
		
		# Call Notify with exclude read record
		Notification = getNotifyAccess()
		# print "Panha",Notification.all()
		if Notification:
			for row in Notification.all():    
				Code = row.Description				
				if Code in AuthorizeCode:
					NotificationAuthorize.append(Code)
				elif Code in UnauthorizeCode:
					NotificationUnauthorize.append(Code)
				elif Code in InboxCode:
					NotificationInbox.append(Code)
					
			Count = Notification.count()

		# Case doesn't have new record comming 
		# It's will not show notify
		Check = 'New'
		Count = str(Count)
		if 'Notification' in session:
			if Count == session['Notification']:
				Check = 'Old'

		session['Notification']=Count

		Count 				= str(Count)
		Check 				= str(Check)
		MuteNotification 	= str(MuteNotification)
		Dic = {
				'Count':Count,
				'Check':Check,
				'Mute':MuteNotification , 
				'Authorize':len(NotificationAuthorize),		
			 	'Unauthorize':len(NotificationUnauthorize),
				'Inbox':len(NotificationInbox)
			  }
		
		#Clear variable 
		del Notification
		del ObjUser
		del MuteNotification

	return Dic

def setReadNotify():
	""" Update Read Notify """
	try:
		CurrentUser = mktuser.getUser().ID
		Notification = getNotifyAccess()
		AuditTrial = {  'Status'		: 	"AUTH",
						'Curr' 			: 	"0",
						'Inputter' 		:	CurrentUser,
						'Createdon' 	: 	mktdate.getDateTimeNow(),
						'Authorizer'	:   CurrentUser,
						'Authorizeon'	: 	mktdate.getDateTimeNow(),
						}
		for row in Notification:
			DictRecord = {
				'Branch':row.Branch,
				'ID':row.ID,
				'Read':CurrentUser}
			DictRecord.update(AuditTrial)
			ObjInsert = MKT_NOTIFICATION_READ(**DictRecord)
			db.session.add(ObjInsert)
		db.session.commit()
		db.session.close()
	except Exception, e:
		db.session.rollback()
		db.session.close()
		raise

def insertNotify(notification):

	InsertRecord 	= {}
	Config 			= getConfigNotification()

	if notification['Path'] in Config:

		ID 		= notification['ID'] 
		Path 	= notification['Path']
		Title 	= Config[Path] if not 'Title' in notification else notification['Title']
		Status 	= notification['Status'] if 'Status' in notification else 'AUTH'
		Code 	= notification['Code'] if 'Code' in notification else 'Direct'
		AppName = notification['Model'] if 'Model' in notification else 'Custom'
		RecordType = notification['RecordType'] if 'RecordType' in notification else '1'
		DictNotify = {
						'Status'	:Status,
						'GlobalID'	:ID,
						'Path'		:Path,
						'AppName'	:AppName,
						'Title'		:Title,
						'Description':Code,
						'Read'		:'',
						'ReadDetail':''
						}

		InsertRecord.update({
						'Status'	:Status,
						'GlobalID'	:ID,
						'Path'		:Path,
						'AppName'	:AppName,
						'Title'		:Title,
						'Description':Code,
						'Read'		:'',
						'ReadDetail':'',
						'Clear':'',
						'RecordType':RecordType
						})

		if Code == 'Direct':
			From 	= notification['From']
			To 		= notification['To']
			Message = notification['Message']
			InsertRecord.update({'From':From,'To':To,'Message':Message})
		mktdb.insertTable(MKT_NOTIFICATION,InsertRecord)
		db.session.commit()
		setPushNotify()
	else:
		ID 		= notification['ID'] 
		Path 	= notification['Path']
		Title 	= notification['Path'] if 'Path' in notification else notification['Message']
		Status 	= notification['Status'] if 'Status' in notification else 'AUTH'
		Code 	= notification['Code'] if 'Code' in notification else 'Direct'
		AppName = notification['Model'] if 'Model' in notification else ''
		InsertRecord.update({
						'Status'	:Status,
						'GlobalID'	:ID,
						'Path'		:Path,
						'AppName'	:AppName,
						'Title'		:Title,
						'Description':Code,
						'Read'		:'',
						'ReadDetail':'',
						'RecordType':'2'
						})

		if Code == 'Direct':
			From 	= notification['From']
			To 		= notification['To']
			Message = notification['Message']
			InsertRecord.update({'From':From,'To':To,'Message':Message})
		mktdb.insertTable(MKT_NOTIFICATION,InsertRecord)
		db.session.commit()

	# 	print "DictNotify",DictNotify
	# else:
	# 	print "Not Save to notify"
	
def setClearNotify():
	""" Delete all notify in table"""
	Notify		= db.session.query(MKT_NOTIFICATION.ID).\
									delete(synchronize_session='fetch')
	db.session.commit()
	print "Notification clear successful."
	

def clearOldNotificationEachUser(KeepingRecord = 14):
	KeepingRecord = int(KeepingRecord)
	Notification  = MKT_NOTIFICATION.query
	Users         = db.session.query(MKT_NOTIFICATION.Inputter).group_by(MKT_NOTIFICATION.Inputter).all()
	
	for User in Users:
		Count = Notification.filter(MKT_NOTIFICATION.Inputter==User.Inputter).count()
		if Count > KeepingRecord:
			Limit = Count - KeepingRecord

			UserNotification = db.session.query(MKT_NOTIFICATION.ID).\
							filter(MKT_NOTIFICATION.Inputter==User.Inputter).\
							order_by(desc(MKT_NOTIFICATION.Createdon)).limit(Limit).all()

			DeleteObj = Notification.filter(MKT_NOTIFICATION.ID.in_(UserNotification)).delete(synchronize_session='fetch')

