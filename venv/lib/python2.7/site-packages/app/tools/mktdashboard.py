'''
Created Date: 07 May 2015
Author: Sovankiry Rim

Modified by: Sovankiry
Modified Date: 06 Nov 2015
All Right Reserved Morakot Technology
Description : Dashboard widget
Notes : 
'''
from flask import jsonify
from app.mktcore.imports 		import *
from app.urlregister 			import *
import app.tools.user 			as mktuser
import app.tools.mktparam 		as mktparam
import app.Dashboard.widget 	as UserWidget
from app.Dashboard.models 		import MKT_DASHBOARD_STORAGE
import app.tools.mktmoney 		as mktmoney
import app.tools.mktdb 			as mktdb
import app.tools.mktaudit 		as mktaudit
import app.tools.mktdate 		as mktdate
import mktsetting 				as mktsetting

from app.SupportTool.FixData.models 	import *
from app.Customer.models import *
from app.LoanContract.models import *
from app.ForeclosedProperty.models import *
from app.PotentialCustomer.models import *
from app.Report.models import *
from app.Dashboard.models import *
from app.Teller.models import *
from app.TillOperation.models import *
from app.ForeignExchange.models import *
from app.FixedAssetManagement.FixedAsset.models import *
from app.FixedAssetManagement.AssetAssigning.models import *
from app.Currency.models import *
from app.tools.mktsetting import ExtendModule
from collections import defaultdict, OrderedDict
from sqlalchemy import func
import json
from app.Workflow.workflow         import Workflow

from app.SystemHealthCheck.models 	import *
import ast
import app.tools.mktgl as mktgl
import app.tools.mktmoney as mktmoney
from app.GLBalance.models import MKT_GL_BALANCE
from app.FinancialReport.models import MKT_FINANCIAL_WIDGET_REG
from app.AccSetting.models import MKT_ACCOUNTING_SETTING


Module = __import__("app.urlregister")


class Dashboard(ExtendModule):
	"""docstring for Dashboard"""

	def getDashboardUnauth(self):
		"""
			Please register new module of dashboard unauthorize. If you donot register, it will doesn't show in dashboard.
			Formula =  Url  : [Label,Table,Condition],
		"""

		# LocalUnauthorize = mktsetting.getDictExtend()

		MainObj = super(Dashboard,self).getDashboardUnauth()
		# print 'MainObj',MainObj
		FDCondition = [MKT_FUND_TRANSFER_INAU.Module=='FD']
		FWCondition = [MKT_FUND_TRANSFER_INAU.Module=='FW']
		FSCondition = [MKT_FUND_TRANSFER_INAU.Module=='FS']
		FACondition = [MKT_FUND_TRANSFER_INAU.Module=='FA']
		FTCondition = [MKT_FUND_TRANSFER_INAU.Module=='FT']
		PFCondition = [MKT_FUND_TRANSFER_INAU.Module=='PF']
		FTGCondition = [MKT_FUND_TRANSFER_INAU.Module=='FTG']
		#Teller
		DPCondition = [MKT_TELLER_INAU.ID.like('%'+'DP'+'%')]
		WDCondition = [MKT_TELLER_INAU.ID.like('%'+'WD'+'%')]
		TTCondition = [MKT_TELLER_INAU.ID.like('%'+'TT'+'%')]
		IPCondition = [MKT_TELLER_INAU.ID.like('%'+'IP'+'%')]
		EPCondition = [MKT_TELLER_INAU.ID.like('%'+'EP'+'%')]
		CCCondition = [MKT_TELLER_INAU.ID.like('%'+'CC'+'%')]
		CBCondition = [MKT_TELLER_INAU.ID.like('%'+'CB'+'%')]
		WCCondition = [MKT_TELLER_INAU.ID.like('%'+'WC'+'%')]
		WBCondition = [MKT_TELLER_INAU.ID.like('%'+'WB'+'%')]

		TOCondition = [MKT_TILL_OPERATION_INAU.ID.like('%'+'TO'+'%')]
		TCCondition = [MKT_TILL_OPERATION_INAU.ID.like('%'+'TC'+'%')]

		# #ForeignExchange
		SellForeign = [MKT_FOREIGN_EXCHANGE_INAU.ID.like('%'+'SF'+'%')]
		BuyForeign = [MKT_FOREIGN_EXCHANGE_INAU.ID.like('%'+'BF'+'%')]

		#Foreclose
		FCSale 		= [MKT_FORECLOSED_PROPERTY_INAU.FCStatus == '2']
		FCTransfer 	= [MKT_FORECLOSED_PROPERTY_INAU.FCStatus == '1']
		FCRevalue 	= [MKT_FORECLOSED_PROPERTY_INAU.FCStatus == '3']


		#Only CMI
		ODCondition = [MKT_ACCOUNT_INAU.Type == 'OD']
		DDCondition = [MKT_ACCOUNT_INAU.AccProduct == '101']
		SVCondition = [MKT_ACCOUNT_INAU.AccProduct == '102']

		Compulsory =  mktsetting.getAppSetting('ACC_PRODUCT_COMPULSORY')
		ACCondition = [~MKT_ACCOUNT_INAU.AccProduct.in_(['101','102',Compulsory]),MKT_ACCOUNT_INAU.Type != 'OD']
		SAVCondition= [MKT_ACCOUNT_INAU.AccProduct == Compulsory]

		#Borrowing Account
		Setting 	= mktsetting.getAppSetting('BORROWING_ACC_PRODUCT_SETUP')

		AccProductID = Setting.split(' ') if Setting else 'None'
		
		BACCondition = [MKT_ACCOUNT_INAU.AccProduct.in_(AccProductID)] if AccProductID else ''

		LNCondition  = [MKT_LOAN_AMENDMENT_INAU.ID.like('%'+'LN'+'%')]
		LMCondition = [MKT_LOAN_AMENDMENT_INAU.ID.like('%'+'LM'+'%')]

		FAMCondition = [MKT_ASSET_INAU.RecordType == '1']
		SACondition = [MKT_ASSET_INAU.RecordType == '2']
		AACondition = [MKT_ASSET_ASSIGNING_INAU.RecordType == '1']
		STCondition = [MKT_ASSET_ASSIGNING_INAU.RecordType == '2']
		BTCondition = [MKT_ASSET_ASSIGNING_INAU.RecordType == '3']

		FixDataInsertCondition = [MKT_FIX_DATA_INAU.Action == 'Insert']
		FixDataUpdateCondition = [MKT_FIX_DATA_INAU.Action == 'Update']
		FixDataDeleteCondition = [MKT_FIX_DATA_INAU.Action == 'Delete']


		WIDGET_UNAUTHORIZE =  {
		#__A__
		'Account':                ['Account',                 'MKT_ACCOUNT_INAU',                 ACCondition ],
		'Asset Assigning':	  	  ['AssetAssigning', 		  'MKT_ASSET_ASSIGNING_INAU', 		   AACondition],
		'Asset Repair':	  		  ['AssetRepair', 			  'MKT_ASSET_REPAIR_INAU', 						  ],
		'Asset Dispose':	      ['AssetDispose', 			  'MKT_ASSET_DISPOSE_INAU', 					  ],
		'Asset Amendment':	  	  ['AssetAmendment', 		  'MKT_ASSET_AMENDMENT_INAU', 				   	  ],

		#__B__
		'Borrowing Account': 	  ['BorrowingAccount', 	  	  'MKT_ACCOUNT_INAU', 				  BACCondition],
		'Borrowing Charge': 	  ['BorrowingCharge', 	  	  'MKT_BORROWING_CHARGE_INAU' 					  ],
		# 'Batch Upload'		  :   ['BatchUpload_I',            'MKT_BATCH_UPLOAD_INAU'	     	  			  ],
		'Borrowing Contract': 	  ['BorrowingContract', 	  'MKT_BORROWING_INAU' 							  ],
		'Borrowing Payment': 	  ['BorrowingPayment', 	  	  'MKT_BORROWING_PAYMENT_INAU' 					  ],
		'Branch Asset Transfer':  ['BranchAssetTransfer', 	  'MKT_ASSET_ASSIGNING_INAU', 		   BTCondition],
		'Buy Foreign Currency':   ['BuyForeign',              'MKT_FOREIGN_EXCHANGE_INAU',        BuyForeign  ],
		#__C__
		'CBC Enquiry':            ['CBC',                     'MKT_CBC_INAU'                                  ],
		'Change Loan Product':    ['ChangeLoanProduct',       'MKT_CHANGE_LOAN_PRODUCT_INAU'                  ],
		'Collateral':             ['Collateral',              'MKT_COLLATERAL_INAU',                          ],
		'Collateral Detail':      ['CollateralDetail',        'MKT_COLLATERAL_DE_INAU',                       ],
		'Customer':               ['Customer',                'MKT_CUSTOMER_INAU'                             ],
		'Compulsory Account':     ['CompulsoryAccount',       'MKT_ACCOUNT_INAU',                 SAVCondition],
		#__D__
		'Deposit':                ['Deposit',                 'MKT_TELLER_INAU',                  DPCondition ],
		'Deposit By Bank':        ['DepositBank',             'MKT_TELLER_INAU',                  CBCondition ],
		'Deposit By Cheque':      ['DepositCheque',           'MKT_TELLER_INAU',                  CCCondition ],
		'Drawdown Account':       ['Account_DD',              'MKT_ACCOUNT_INAU',                 DDCondition ],
		# 'Disbursement Settlement':['Disbursement',            'MKT_DISBURSE_INAU',                            ],
		#__E__
		'Expense Posting':        ['ExpensePosting',          'MKT_TELLER_INAU',                  EPCondition ],
		#__F__
		'Fixed Asset Creation':	  ['FixedAsset', 			  'MKT_ASSET_INAU', 				   FAMCondition],
		'FixData Insert':         ['FixDataInsert',           'MKT_FIX_DATA_INAU',           	   FixDataInsertCondition],
		'FixData Update':         ['FixDataUpdate',           'MKT_FIX_DATA_INAU',          	   FixDataUpdateCondition],
		'FixData Delete':         ['FixDataDelete',           'MKT_FIX_DATA_INAU',           	   FixDataDeleteCondition],
		'Foreclosed Sale':        ['SaleForeclosedProperty',  'MKT_FORECLOSED_PROPERTY',          FCSale 	  ],
		'Foreclosed Transfer':    ['TransferForeclosedProperty',  'MKT_FORECLOSED_PROPERTY',      FCTransfer  ],
		'Foreclosed Revalue':     ['RevalueForeclosedProperty',   'MKT_FORECLOSED_PROPERTY',      FCRevalue   ],
		'Fund Advance':           ['FundAdvance',             'MKT_FUND_TRANSFER_INAU',           FACondition ],
		'Fund Deposit':           ['FundDeposit',             'MKT_FUND_TRANSFER_INAU',           FDCondition ],
		'Fund Transfer':          ['FundTransfer',            'MKT_FUND_TRANSFER_INAU',           FTCondition ],
		'Fund Settlement':        ['FundSettlement',          'MKT_FUND_TRANSFER_INAU',           FSCondition ],
		'Fund Withdrawal':        ['FundWithdrawal',          'MKT_FUND_TRANSFER_INAU',           FWCondition ],
		#__G__
		'Group':				  ['Group', 	              'MKT_GROUP_INAU',                               ],
		'Group Loan Contract':	  ['GroupLoan',               'MKT_GROUP_LOAN_CONTRACT_INAU',                 ],
		'Gateway Transfer':       ['GatewayTransfer',         'MKT_FUND_TRANSFER_INAU',           FTGCondition],
		#__I__
		'Income Expense Booking': ['IncomeExpenseBooking',    'MKT_INCOME_EXPENSE_BOOKING_INAU',              ],
		'Income Posting':         ['IncomePosting',           'MKT_TELLER_INAU',                  IPCondition ],
		#__J__
		'Join Account':           ['JoinAccount',             'MKT_JACCOUNT_INAU',                            ],
		'Journal Entry':          ['JournalEntry',            'MKT_JOURNAL_ENTRY_INAU',                       ],
		#__L__
		'Loan Amendment':         ['LoanAmendment',           'MKT_LOAN_AMENDMENT_INAU',          LNCondition ],
		'Loan Amendment Detail':  ['LoanAmendmentDetail',     'MKT_LOAN_AMENDMENT_INAU',          LMCondition ],
		'Loan Application':       ['LoanApplication',         'MKT_LOAN_APPLICATION_INAU',                    ],
		'Loan Contract':          ['LoanContract',            'MKT_LOAN_CONTRACT_INAU'                        ],
		'Loan Collection':        ['LoanCollection',          'MKT_LOAN_COLLECTION_INAU'                      ],
		'Loan Classification':    ['LoanClassification',      'MKT_LOAN_CLASSIFICATION_INAU'                  ],
		'Loan Recovery':          ['LoanRecovery',            'MKT_LOAN_RECOVERY_INAU',                       ],
		'Loan Write-off':         ['LoanWriteOff',            'MKT_WRITE_OFF_INAU',                           ],
		'Lender':         		  ['Lender',            	  'MKT_LENDER_INAU',                           	  ],
		#__M__
		'Manual Loan Collection': ['ManualLoanCollection',	  'MKT_MANUAL_LOAN_COLLECTION_INAU',			  ],
		'Multi Journal':          ['MultiJournal',            'MKT_MULTI_JOURNAL_INAU',                       ],
		'Multi Journal Entries':  ['MultiJournalII',          'MKT_MULTI_JOURNAL_II_INAU',                    ],
		#__O__
		'Overdraft Account':       ['Account_OD',             'MKT_ACCOUNT_INAU',                 ODCondition ],
		'Overdraft Contract':  	  ['OverdraftContract',       'MKT_OVERDRAFT_CONTRACT_INAU',                  ],
		'Overdraft Amendment':    ['OverdraftAmendment',      'MKT_OVERDRAFT_AMENDMENT_INAU',                 ],
		'Overdraft Recovery':     ['OverdraftRecovery',       'MKT_OVERDRAFT_RECOVERY_INAU',                  ],
		'Overdraft Write Off':    ['OverdraftWriteOff',       'MKT_OVERDRAFT_WRITE_OFF_INAU',                 ],
		#__P__
		'Provident Fund Booking': ['PFExpense',               'MKT_FUND_TRANSFER_INAU',           PFCondition ],
		'Waive Penalty or Interest': 		  ['Penalty',     'MKT_PENALTY_INAU',							  ],
		'Payable': 				  ['Payable', 				  'MKT_PAYABLE_INAU',							  ],
		#__R__
		'Receivable': 			  ['Receivable', 			  'MKT_RECEIVABLE_INAU',							  ],		
		#__S__
		'Savings Account':        ['Account_SV',              'MKT_ACCOUNT_INAU',                 SVCondition ],
		'Saving Plan':            ['SavingPlan',              'MKT_SAVING_PLAN_INAU'                          ],
		'Sell Foreign Currency':  ['SellForeign',             'MKT_FOREIGN_EXCHANGE_INAU',        SellForeign ],
		'Special Journal':        ['SpecialJournal',          'MKT_SPECIAL_JOURNAL_INAU'                      ],
		'Staff Asset Transfer':	  ['StaffAssetTransfer', 	  'MKT_ASSET_ASSIGNING_INAU', 		   STCondition],
		'Standing Order':         ['StandingOrder',           'MKT_STANDING_ORDER_INAU'                       ],
		'Stationary Asset':	  	  ['StationaryAsset', 		  'MKT_ASSET_INAU', 		   		   SACondition],
		'Survey':                 ['Survey',                  'MKT_SURVEY_INAU'                               ],
		'Survey Question':        ['SurveyQuestion',          'MKT_SURVEY_QUESTIONS_INAU'                     ],
		'Survey Questionnaire':   ['SurveyQuestionnaire',     'MKT_SURVEY_QUESTIONNAIRE_INAU'                 ],
		#__T__
		'Till Close':             ['TillClose',               'MKT_TILL_OPERATION_INAU',          TCCondition ],
		'Till Open':              ['TillOpen',                'MKT_TILL_OPERATION_INAU',          TOCondition ],
		'Till To Till':           ['TillToTill',              'MKT_TELLER_INAU',                  TTCondition ],
		'Template Base':          ['TemplateBase',            'MKT_TEMPLATE_BASE_INAU',                       ],
		#__V__
		'Village Bank':           ['VB',                      'MKT_VB_INAU',                                  ],
		#__V__
		'Vendor':				  ['Vendor',				  'MKT_VENDOR_INAU'							      ],
		'Withdrawal':             ['Withdrawal',              'MKT_TELLER_INAU',                  WDCondition ],
		'Withdrawal By Bank':     ['WithdrawalBank',          'MKT_TELLER_INAU',                  WBCondition ],
		'Withdrawal By Cheque':   ['WithdrawalCheque',        'MKT_TELLER_INAU',                  WCCondition ],
		}

		# print MainObj
		WIDGET_UNAUTHORIZE.update(MainObj)
		return WIDGET_UNAUTHORIZE

class WidgetManager(object):
# Configuration Widget
	def __init__(self, Branch=""):
		self.Branch = Branch

	
	@staticmethod
	def getDashboardObj():
		DashboardID 	= mktuser.getUser().Dashboard
		DashboardObj 	= []
		db.session.close()

		if DashboardID:
			DashboardObj 	= MKT_DASHBOARD_DE.query.\
								filter(MKT_DASHBOARD_DE.ID==DashboardID).\
								order_by(MKT_DASHBOARD_DE.ID.asc(),MKT_DASHBOARD_DE.WGID.asc())
		print DashboardObj
		return DashboardObj


	def setRegisterSystemWidget(self):
		# NameofWidget, Label of Widget , Name of Function ,Part and File html, MacroName		
		Widget 	=	[	('','--None--'),
						('Unauthorize',	'Unauthorize',	self.getWidgetUnauthorize,	'dashboard/widget.html','Unauthorize'),
						('ChartLoan',	'Chart Loan',	self.getLoanProduct,	'dashboard/widget.html','ChartLoan'),
						('CashBalance',	'Cash Position', self.getWidgetCashPosition,	'dashboard/widget.html','CashPosition'),
						('BranchProductivity','Branch Productivity', self.getWidgetBranchProductivity,'dashboard/widget.html','BranchProductivity'),
						('SystemHealthCheck', 'System Health Check', self.getSysHealthCheckLog, 'dashboard/widget.html', 'SystemHealthCheck'),
						('OverviewInquiry', 'Overview Inquiry Statistics', self.getOverviewInquiry, 'dashboard/widget.html', 'OverviewInquiry'),
						('OverviewInquiryInd', 'Overview Inquiry Statistics (Individual)', self.getOverviewInquiryInd, 'dashboard/widget.html', 'OverviewInquiryInd'),
						('Workflow', 'Workflow', self.WorkflowWidget, 'dashboard/widget.html', 'WorkflowWidget'),
						('LoanOstByPro', 'Loan Outstanding By Product', self.getLoanOutstandingByPro, 'dashboard/widget.html', 'LoanOutstandingByPro'),
						('LoanOstByCurr', 'Loan Outstanding By Currency', self.getLoanOutstandingByCurr, 'dashboard/widget.html', 'LoanOutstandingByCurr'),
						('LoanColAndDis', 'Loan Collection and Disbursement', self.getLoanCollectionAndDisbursement, 'dashboard/widget.html', 'LoanCollectionAndDisbursement'),
						('FinancialReport', 'Financial Report', self.getFinancialReport, 'dashboard/widget.html', 'FinancialReport'),						

					]   

		return Widget
 
	
	def getWidgetObj(self):
		WidgetObj 		= []
		# Build-In		
		for row in self.setRegisterSystemWidget():
			WidgetObj.append(row)
		# User-Widget
		
		for row in UserWidget.setRegisterWidget():
			WidgetObj.append(row)
				
		return WidgetObj

			
	def getListWidget(self):

		ListWidget 	= []
		# Build-In
		for row in self.setRegisterSystemWidget():
			ListWidget.append((row[0],row[1]))
		# User-Widget
		for row in UserWidget.setRegisterWidget():
			ListWidget.append((row[0],row[1]))

		return ListWidget


	def formatDashboard(self, Title="",Icon="",Refresh="",TotalRecord="",Type="",Body=None,TypeUrl=""):
		APIDicObj = {}
		APIDicObj.update({
				"title":Title,
				"icon":Icon,
				"refresh":Refresh,
				"total_record":TotalRecord,
				"type":Type,
				"type_url":TypeUrl,
				"body":Body,
				'header':Title
				})
		return APIDicObj

	def numberFormat(self, key="",value="",icon="",url="",typeUrl='Form'):
		return {
				"key":key,
				"value":value,
				"icon":icon,
				"url":url,
				'type_url':typeUrl
				}

	def tableFormat(self, columns=[],url="",important=[],typeUrl='Form'):

		return {
				"columns":columns,
				'important':important,
				"url":url,
				'type_url':typeUrl
				}

	def dunatFormat(self, key="",value=""):
		return {
				"key":key,
				"value":value
				}

	def donutFormatLOS(self, key="",label="",value=""):
		return {
				"key":key,
				"label":label,
				"value":value
				}

	def listFormat(self, title="",total_record="",url="",typeUrl='Form' , type = 'Text'):
		return {
				"title":title,
				"total_record":total_record,
				"url":url,
				'type_url':typeUrl,
				'type':type
				}

	def lineGraphFormat(self, key="", value=[]):
		return {
				"key": key,
				"value": value,				
				}


	def defaultGraphObj(self, Title, Refresh, Type):
		formatDashboard = self.formatDashboard(
							Title=Title,
							Icon="cubes",
							Refresh=Refresh,
							TotalRecord="",
							Type=Type,
							Body=[],
							TypeUrl="",
							)
		formatDashboard.update({'total_amount':0, 'total_amount_shortcuts':"", "last_update":[]})

		return formatDashboard


	# Widget Unauthorize
	def getWidgetUnauthorize(self):
		# from app.urlregister import *

		ListModule 	= []
		UserObj = mktuser.getUser()
		Role = UserObj.Role
		DashboardObj 		= Dashboard()
		WIDGET_UNAUTHORIZE = DashboardObj.getDashboardUnauth()
		# print DashboardObj.getUrlExtend()

		for key,value in WIDGET_UNAUTHORIZE.iteritems():

			Label 	= key
			Url 	= value[0]

			Table 	= getattr(Module,value[1])
			if Role == "99":
				QueryObj = db.session.query(func.count(Table.ID).label('Count')).yield_per(100)
			else:
				AccessBranch = UserObj.AccessBranch.strip()
				AccessBranch = AccessBranch.split()
				
				if 'ALL' in AccessBranch:
					QueryObj = db.session.query(func.count(Table.ID).label('Count')).\
											yield_per(100)
				else:
					QueryObj = db.session.query(func.count(Table.ID).label('Count')).\
											filter(Table.Branch.in_(AccessBranch)).\
											yield_per(100)
										
			if len(value)==3:
				Condition=value[2]
				QueryObj = QueryObj.filter(*Condition).yield_per(100)
				
			# for row in QueryObj:
			# 	ListModule.append([Label,Url,value[1],row.Count])
			
			if QueryObj.first().Count > 0:
				ListModule.append([Label,Url,value[1],QueryObj.first().Count])
		#Clear variable 
		del QueryObj

		if "API" in request.url:
			APIListObj = []
			for row in ListModule:
				Url = "/Unauthorize/%s"%row[0]
				ListFormat = self.listFormat(title=row[0],total_record=row[3],url=Url)
				APIListObj.append(ListFormat)
			Title 			=	"Unauthorized Records"
			Icon 			=	"file"
			Refresh 		=	"/UnauthorizeRefresh"
			TotalRecord 	=	len(ListModule)
			Type 			=	"List"
			TypeUrl 		=	"List"
			FormatDashboard = self.formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=APIListObj,TypeUrl=TypeUrl)
			return FormatDashboard

		return ListModule

	# Widget Chart Loan Type
	def getLoanProduct(self):

		QueryObj 		= []
		DicObj 			= {}

		LoanContract 	= MKT_LOAN_CONTRACT.query.all()

		LoanProduct 	= db.session.query(MKT_LOAN_PRODUCT.ID,
										MKT_LOAN_PRODUCT.Description,
										func.count(MKT_LOAN_CONTRACT.ID).label('Count')).\
										join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.LoanProduct==MKT_LOAN_PRODUCT.ID).\
										group_by(MKT_LOAN_PRODUCT.ID,MKT_LOAN_PRODUCT.Description)

		if LoanProduct:
			TotalContract = len(LoanContract)
			for row in LoanProduct:
				Percent = int(row.Count * 100 / TotalContract)
				QueryObj.append((row.Description,Percent))
				
		#Clear variable 
		del LoanProduct
		if "API" in request.url:
			APIListObj = []
			Obj = dict(QueryObj)
			for key,value in Obj.iteritems():
				DunatFormat = self.dunatFormat(key=key,value=value)
				APIListObj.append(DunatFormat) 
			Title 			=	"Loan Type"
			Icon 			=	"cubes"
			Refresh 		=	""
			TotalRecord 	=	len(QueryObj)
			Type 			=	"Donut"
			FormatDashboard = self.formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=APIListObj)
			return FormatDashboard
		
		return QueryObj

	def getWidgetCashPosition(self):
		
		UserObj 	= mktuser.getUser()
		AccObj 		= []
		ListAccount = []
		if UserObj:
			CurrentBranch 	= mktuser.getCurrentBranch()
			Role	 		= str(UserObj.Role)
			CashID 			= UserObj.CashAccount

			# 99 Super Admin 
			# 97 Chief Teller
			if Role == '99' or Role == '97':
				
				if CurrentBranch:
					CashObj 	=  MKT_CASH_ACCOUNT.query.filter(MKT_CASH_ACCOUNT.CashBranch==CurrentBranch).\
														filter(MKT_CASH_ACCOUNT.Type.in_(['V','T']))
					for row in CashObj:
						AccID =str(row.Account).split()
						for item in AccID:
							ListAccount.append(item)
					if ListAccount:
						AccObj = MKT_ACCOUNT.query.\
											filter(MKT_ACCOUNT.ID.in_(ListAccount)).\
											order_by(MKT_ACCOUNT.ID.asc())
			else:
				if CashID :
					CashObj 	=  MKT_CASH_ACCOUNT.query.get(CashID)
					if CashObj:
						ListAccount = str(CashObj.Account).split()
						if ListAccount:
							AccObj = MKT_ACCOUNT.query.\
											filter(MKT_ACCOUNT.ID.in_(ListAccount)).\
											order_by(MKT_ACCOUNT.ID.asc())

		if "API" in request.url:
			APIListObj = []
			for row in AccObj:
				CurrencyObj = mktmoney.getCurrencyObj
				toMoney = mktmoney.toMoney
				ToMoney = toMoney(float(row.Balance),CurrencyObj(row.Currency))
				URL = "/AccountStatement/?ID=%s"%row.ID
				Column = [{
						"key":"ACCOUNT",
						"value":row.ID
						},
						{"key":"CURRENCY",
						 "value":row.Currency
						},
						{"key":"BALANCE",
						 "value":ToMoney
						}
					]
				TableFormat = self.tableFormat(columns=Column,important=Column,url=URL,typeUrl='Custom')
				APIListObj.append(TableFormat)
			Title 			=	"Cash Position"
			Icon 			=	"money"
			Refresh 		=	"/CashPositionRefresh"
			TotalRecord 	=	len(APIListObj)
			Type 			=	"Table"
			FormatDashboard = self.formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=APIListObj)
			return FormatDashboard


		DicObj={
				'AccObj':AccObj,
				'float':float,
				'toMoney':mktmoney.toMoney,
				'CurrencyObj':mktmoney.getCurrencyObj}
		return DicObj

	def getWidgetBranchProductivity(self):	
		UserObj = mktuser.getUser()
		DicObj 	= {}
		NumberOfCustomer = 0
		NumberOfLoan 	= 0
		TotalPortfolio 	= []
		DicTotalPortfolio = {'Currency':'','Amount':0}
		ListTotalPortfolio = []

		#check dashboard role cofig for sum value of branch
		ProductivityConfig 	= 	self.getProductivityBranchList()
		BranchList 			=	ProductivityConfig[0]
		IsConfig 			=	ProductivityConfig[1]

		Branch =  BranchList if BranchList else [mktuser.getCurrentBranch()]

		if UserObj:
			Role 			= UserObj.Role
			if (Role == "99" and IsConfig == False) or "ALL" in Branch:
				QueryObj = MKT_REPORT_PRODUCTIVITY.query.get('ALL')
				if QueryObj:
					NumberOfCustomer 	= mktmoney.formatNumber(float(QueryObj.NumberOfCustomer),1,0)
					NumberOfLoan 		= mktmoney.formatNumber(float(QueryObj.NumberOfLoan),1,0)
					TotalPortfolio		= eval(QueryObj.TotalPortfolio)
			else:
				QueryObj = MKT_REPORT_PRODUCTIVITY.query.filter(MKT_REPORT_PRODUCTIVITY.ID.in_(Branch))
				if QueryObj:
					for Row in QueryObj:
						NumberOfCustomer 	+= float(Row.NumberOfCustomer)
						NumberOfLoan 		+= float(Row.NumberOfLoan)
						TotalPortfolio		= eval(Row.TotalPortfolio)
						for item in TotalPortfolio:
							if 'Currency' in item:
								ListTotalPortfolio.append({item['Currency']:item['Amount']})
									
					NumberOfCustomer 	= mktmoney.formatNumber(float(NumberOfCustomer),1,0)
					NumberOfLoan 		= mktmoney.formatNumber(float(NumberOfLoan),1,0)
				
				SumTotal = defaultdict(float)
				for item in ListTotalPortfolio:
					for k,v in item.iteritems():
						SumTotal[k] += v

				TotalPortfolio = []
				for key,value in SumTotal.iteritems():
					TotalPortfolio.append({'Currency':key,'Amount':value})
			if "API" in request.url:
				TotalPortfol 	= 	'0'
				Currency 		=	''
				if TotalPortfolio:
					CurrencyObj = mktmoney.getCurrencyObj
					toMoney = mktmoney.toMoney
					Currency = TotalPortfolio[0].get("Currency")
					TotalPortfol = toMoney(float(TotalPortfolio[0].get("Amount")),CurrencyObj(Currency))
				APIListObj = []
				APIListObjDic=[
					   {
						"key":"#OF CUSTOMER",
						"value":NumberOfCustomer,
						"icon":"user",
						"url":""
						},
						{"key":"#LOAN CONTRACT",
						 "value":NumberOfLoan,
						 "icon":"file-text",
						 "url":""
						},
						{"key":"TOTAL PORTFOLIO",
						 "value": Currency + " " + TotalPortfol,
						 "icon":"",
						 "url":""
						}
					]
				for row in APIListObjDic:
					NumberFormat = self.numberFormat(key=row.get("key"),value=row.get("value"),icon=row.get("icon"),url=row.get("url"))
					APIListObj.append(NumberFormat)

				Title 			=	"Branch Productivity"
				Icon 			=	"cube"
				Refresh 		=	"/BranchProductivityRefresh"
				TotalRecord 	=	len(APIListObj)
				Type 			=	"Number"
				FormatDashboard = self.formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=APIListObj)
				return FormatDashboard


			DicObj={
			'float':float,
			'toMoney':mktmoney.toMoney,
			'CurrencyObj':mktmoney.getCurrencyObj,
			'NumberOfCustomer':NumberOfCustomer,
			'NumberOfLoan':NumberOfLoan,
			'TotalPortfolio':TotalPortfolio
					}

		return DicObj

	def updateBranchProductivity(self):
		try:
			DicObj 	= []
			NumberOfCustomer 	= 0
			NumberOfLoan 		= 0
			AmountPortfolio 	= 0
			TotalPortfolio 		= []
			UserObj 			= mktuser.getUser()

			#check dashboard role cofig for sum value of branch
			ProductivityConfig 	= 	self.getProductivityBranchList()
			BranchList 			=	ProductivityConfig[0]
			IsConfig 			=	ProductivityConfig[1]
			Branch =  BranchList if BranchList else [mktuser.getCurrentBranch()]

			if UserObj:
				Role 			= UserObj.Role

				if (Role == "99" and IsConfig == False) or "ALL" in Branch:
					ID="ALL"
					CustomerObj 	= db.session.query(func.count(MKT_CUSTOMER.ID).label('Customer'))

					CountLoanObj	= db.session.query(func.count(MKT_LOAN_CONTRACT.ID).label('Loan')).\
												filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
												filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y")

					SumLoanObj 		= db.session.query(MKT_LOAN_CONTRACT.Currency,func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Amount')).\
												filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
												filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
												group_by(MKT_LOAN_CONTRACT.Currency)
					self.setBranchProductivity(CustomerObj,CountLoanObj,SumLoanObj,ID)
				else:
					
					for branch in Branch:
						CustomerObj 	= db.session.query(func.count(MKT_CUSTOMER.ID).label('Customer')).\
													filter(MKT_CUSTOMER.Branch==branch)

						CountLoanObj	= db.session.query(func.count(MKT_LOAN_CONTRACT.ID).label('Loan')).\
													filter(MKT_LOAN_CONTRACT.Branch==branch).\
													filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
													filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y")

						SumLoanObj 		= db.session.query(MKT_LOAN_CONTRACT.Currency,func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Amount')).\
													filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
													filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
													filter(MKT_LOAN_CONTRACT.Branch==branch).\
													group_by(MKT_LOAN_CONTRACT.Currency)
						#update to table
						self.setBranchProductivity(CustomerObj,CountLoanObj,SumLoanObj,branch)

				db.session.commit()
			return True
		except Exception, e:
			print "Error Function updateBranchProductivity :%s"%e
			db.session.rollback()
			return False
			
	def setBranchProductivity(self, CustomerObj,CountLoanObj,SumLoanObj,ID):

		NumberOfCustomer = 0
		NumberOfLoan = 0
		TotalPortfolio = []
		for row in CustomerObj:
			NumberOfCustomer+=int(row.Customer)

		for row in CountLoanObj:
			NumberOfLoan+=int(row.Loan)
		
		for row in SumLoanObj:
			DicTotalPortfolio = {'Currency':row.Currency,'Amount':float(row.Amount)}
			TotalPortfolio.append(DicTotalPortfolio)

		ProductObj = MKT_REPORT_PRODUCTIVITY.query.get(ID)
		Audit 		= mktaudit.getAuditrail()
		DicRecord = {
				'ID':ID,
				'NumberOfCustomer':NumberOfCustomer,
				'NumberOfLoan':NumberOfLoan,
				'TotalPortfolio':'%s'%TotalPortfolio
			}
		DicRecord.update(Audit)
		if ProductObj:
			Condition = [MKT_REPORT_PRODUCTIVITY.ID==ID]
			mktdb.updateRecord(MKT_REPORT_PRODUCTIVITY,Condition,DicRecord)
		else:
			mktdb.insertTable(MKT_REPORT_PRODUCTIVITY,DicRecord)

	def getSysHealthCheckLog(self):

		ListAllError	= 	MKT_SYSTEM_HEALTH_CHECK.query.all()
		ListError 		= 	{}
		Result 			= 	[]
		
		if ListAllError:
			for row in ListAllError:
				ListError.update({
					'Level':row.Level,
					'Code':row.Code,
					'Title':row.Title,
					'Length':len(ast.literal_eval(row.ErrorDetail))
					})
				Result.append(ListError)
				ListError 	= 	{}
		return Result


	def getOverviewInquiry(self):
		Branch 				= mktuser.getCurrentBranch()
		BranchList			= Branch.split()
		POCustomerObj 		= db.session.query(MKT_PO_CUSTOMER).filter(MKT_PO_CUSTOMER.AssignBranch.in_(BranchList))

		CurrentDate 		= mktdate.getDateISO()
		NextDate 			= mktdate.getNextDay(CurrentDate,2)

		NewAssignObj		= POCustomerObj.filter(MKT_PO_CUSTOMER.POStatus=='2').\
											filter(MKT_PO_CUSTOMER.AssignDate==str(CurrentDate))

		#Reminder Upcoming followup customer	
		UpcomingObj			= POCustomerObj.filter(MKT_PO_CUSTOMER.NextFollowDate<=str(NextDate)).\
											filter(MKT_PO_CUSTOMER.NextFollowDate>str(CurrentDate)).\
											filter(MKT_PO_CUSTOMER.POStatus!='5')

		#Reminder Today followup
		TodayObj 			= POCustomerObj.filter(MKT_PO_CUSTOMER.NextFollowDate==str(CurrentDate)).\
							  filter(MKT_PO_CUSTOMER.POStatus!='5')

		if "API" in request.url:
				APIListObj = []
				APIListObjDic=[
					   {
						"key":"NEW",
						"value":POCustomerObj.filter_by(POStatus='1').count(),
						"icon":"",
						"url":"/POManage?TabSelected=1"
						},
						{"key":"ASSIGNED",
						 "value":POCustomerObj.filter_by(POStatus='2').count(),
						 "icon":"",
						 "url":"/POManage?TabSelected=2"
						},
						{"key":"MEETING",
						 "value":POCustomerObj.filter_by(POStatus='3').count(),
						 "icon":"",
						 "url":"/POManage?TabSelected=3"
						},
						{"key":"APPLIED",
						 "value":POCustomerObj.filter_by(POStatus='4').count(),
						 "icon":"",
						 "url":"/POManage?TabSelected=4"
						},
						{"key":"REJECTED",
						 "value":POCustomerObj.filter_by(POStatus='5').count(),
						 "icon":"",
						 "url":"/POManage?TabSelected=5"
						},
						{"key":"MORE",
						 "value":"",
						 "icon":"",
						 "url":"/POManage"
						},
						{"key":"NEW ASSIGNED",
						 "value":NewAssignObj.count(),
						 "icon":"",
						 "url":"/POManage?TabSelected=new-assign"
						},
						{"key":"UPCOMING FOLLOWUP",
						 "value":UpcomingObj.count(),
						 "icon":"",
						 "url":"/POManage?TabSelected=upcoming"
						},
						{"key":"TODAY FOLLOWUP",
						 "value":TodayObj.count(),
						 "icon":"",
						 "url":"/POManage?TabSelected=today"
						}
					]
				for row in APIListObjDic:
					NumberFormat = self.numberFormat(key=row.get("key"),value=row.get("value"),icon=row.get("icon"),url=row.get("url"))
					APIListObj.append(NumberFormat)

				Title 			=	"Potential Customer Statistics By Branch"
				Icon 			=	"users"
				Refresh 		=	"/OverviewInquiryRefresh"
				TotalRecord 	=	len(APIListObj)
				Type 			=	"Number"
				FormatDashboard = self.formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=APIListObj)
				return FormatDashboard

		return [POCustomerObj, NewAssignObj, UpcomingObj, TodayObj]

	def getOverviewInquiryInd(self):
		Branch 				= mktuser.getCurrentBranch()
		BranchList			= Branch.split()

		UserID      		= mktuser.getUser().ID

		POCustomerObj 		= db.session.query(MKT_PO_CUSTOMER).\
										filter(MKT_PO_CUSTOMER.AssignBranch.in_(BranchList)).\
										filter(MKT_PO_CUSTOMER.AssignTo==UserID)


		CurrentDate 		= mktdate.getDateISO()
		NextDate 			= mktdate.getNextDay(CurrentDate,2)

		NewAssignObj		= POCustomerObj.filter(MKT_PO_CUSTOMER.POStatus=='2').\
											filter(MKT_PO_CUSTOMER.AssignDate==str(CurrentDate))

		#Reminder Upcoming followup customer
		UpcomingObj			= POCustomerObj.filter(MKT_PO_CUSTOMER.NextFollowDate<=str(NextDate)).\
											filter(MKT_PO_CUSTOMER.NextFollowDate>str(CurrentDate)).\
											filter(MKT_PO_CUSTOMER.POStatus!='5')

		#Reminder Today followup
		TodayObj 			= POCustomerObj.filter(MKT_PO_CUSTOMER.NextFollowDate==str(CurrentDate)).\
							  filter(MKT_PO_CUSTOMER.POStatus!='5')

		if "API" in request.url:
			APIListObj = []
			APIListObjDic=[
					{
					"key":"NEW",
					"value":POCustomerObj.filter_by(POStatus='1').count(),
					"icon":"",
					"url":"/POManageIndividual?TabSelected=1"
					},
					{"key":"ASSIGNED",
						"value":POCustomerObj.filter_by(POStatus='2').count(),
						"icon":"",
						"url":"/POManageIndividual?TabSelected=2"
					},
					{"key":"MEETING",
						"value":POCustomerObj.filter_by(POStatus='3').count(),
						"icon":"",
						"url":"/POManageIndividual?TabSelected=3"
					},
					{"key":"APPLIED",
						"value":POCustomerObj.filter_by(POStatus='4').count(),
						"icon":"",
						"url":"/POManageIndividual?TabSelected=4"
					},
					{"key":"REJECTED",
						"value":POCustomerObj.filter_by(POStatus='5').count(),
						"icon":"",
						"url":"/POManageIndividual?TabSelected=5"
					},
					{"key":"MORE",
						"value":"",
						"icon":"",
						"url":"/POManageIndividual"
					},
					{"key":"NEW ASSIGNED",
						"value":NewAssignObj.count(),
						"icon":"",
						"url":"/POManageIndividual?TabSelected=new-assign"
					},
					{"key":"UPCOMING FOLLOWUP",
						"value":UpcomingObj.count(),
						"icon":"",
						"url":"/POManageIndividual?TabSelected=upcoming"
					},
					{"key":"TODAY FOLLOWUP",
						"value":TodayObj.count(),
						"icon":"",
						"url":"/POManageIndividual?TabSelected=today"
					}
				]
			for row in APIListObjDic:
				NumberFormat = numberFormat(key=row.get("key"),value=row.get("value"),icon=row.get("icon"),url=row.get("url"))
				APIListObj.append(NumberFormat)
			Title 			=	"Potential Customer Statistics By Branch"
			Icon 			=	"users"
			Refresh 		=	"/OverviewInquiryRefresh"
			TotalRecord 	=	len(APIListObj)
			Type 			=	"Number"
			FormatDashboard = formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=APIListObj)
			return FormatDashboard
		POCustomerStatusObj 		= getPOCustomerStatus()
		
		return [POCustomerObj, NewAssignObj , mktuser.getUser(), UpcomingObj, TodayObj,POCustomerStatusObj]


	def WorkflowWidget(self):

	   listForm,formIDList 	= Workflow.workflowDashboard()
	   userRecently         = Workflow.userRecently()
	   if "API" in request.url:
			APIListObj 	= []
			# APIListObj.append({
			# 	"title":'REVIEW | APPROVE',
			# 	"total_record":0,
			# 	"url":'',
			# 	'type_url':'',
			# 	'type':'Title'
			# 	})
			message 	= []
			for key, value in listForm.items():
				if value != 0:
					message.append('1')
					Url = 'listRecord/?formID=%s'%(formIDList[key])
					ListFormat = self.listFormat(title=key,total_record=value,url=Url,typeUrl='Custom')
					APIListObj.append(ListFormat)
			if not message:
				APIListObj.append({
				"title":'There is no record',
				"total_record":0,
				"url":'',
				'type_url':'',
				'type':'Text'
				})

			Title 			=	"Workflow"
			Icon 			=	"line-chart"
			Refresh 		=	""
			TotalRecord 	=	2
			Type 			=	"List"
			TypeUrl 		=	"Custom"
			FormatDashboard = self.formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=APIListObj,TypeUrl=TypeUrl)
			return FormatDashboard

	   return [listForm,formIDList,userRecently]

	def getProductivityBranchList(self,**kwargs):
		"""
			This function used for return list of branch to sum up value of productivity 
			based on configuration in App Setting [DASH_PRODUCTIVITY_ROLE_CONFIG]

			Note:
				None
			Args:
				None
			Attributes:
				None
			Returns:
				List of Branch
			Raises:
				None
			Examples:
				Examples should be written in doctest format, and should illustrate how
				to use the function.

				>>> print getProductivityBranchList()
				[CM,BM,ALL]

		"""
		UserObj 	= mktuser.getUser()	
		Branch 		= mktuser.getCurrentBranch()
		BranchList 	= []
		IsConfig  	= False
		#check dashboard role cofig for sum value of branch
		DASH_PRODUCTIVITY_ROLE_CONFIG 	=	mktsetting.getAppSetting('DASH_PRODUCTIVITY_ROLE_CONFIG')
		if DASH_PRODUCTIVITY_ROLE_CONFIG and UserObj:
			Role 		= 	UserObj.Role
			User 		= 	UserObj.ID
			Row			= 	DASH_PRODUCTIVITY_ROLE_CONFIG.split('\n')
			DashRole 	=	''
			for item in Row:
				SplitItem  			=	item.split('*')
				if len(SplitItem) >=3:
					DashRole 			= 	SplitItem[0]
					CurrentBranchList 	= 	SplitItem[1].split() #List Current Branch
					SumBranchList 		= 	SplitItem[2].split() #List Branch to sum value
					if Role == DashRole:
						IsConfig = True
						if "ALL" in CurrentBranchList or Branch in CurrentBranchList:
							BranchList	= 	SumBranchList
							break

		return BranchList, IsConfig


	def shortenAmount(self, amount, precision):
		OriginalAmount = float(amount)
		ShortAmount = OriginalAmount
		AmountEquivalent = OrderedDict()
		AmountEquivalent.update({'T':10**12})
		AmountEquivalent.update({'B':10**9})
		AmountEquivalent.update({'M':10**6})
		AmountEquivalent.update({'K':1000})
				
		for key, value in AmountEquivalent.items():			
			if OriginalAmount >= float(value):
				ShortAmount = round(float(OriginalAmount / value), precision)
				ShortAmount = str(ShortAmount) + key
				break

		return ShortAmount


	def queryDashboardObj(self, WidgetID):
		UserID = mktuser.getUser().ID
		Branch = self.Branch		
		
		Filter = [
					MKT_DASHBOARD_STORAGE.Branch==Branch, 
					MKT_DASHBOARD_STORAGE.WidgetID==WidgetID
					]

		if Branch == "ALL":
			Filter.append(MKT_DASHBOARD_STORAGE.User==UserID)

		DashboardObj = MKT_DASHBOARD_STORAGE.query.filter(*Filter).first()
		return DashboardObj


	def queryDashboardDict(self, WidgetID):
		DashboardObj = self.queryDashboardObj(WidgetID)
		Result = {}

		if DashboardObj:
			Result = eval(DashboardObj.JSONData)
			Result.update({"last_update": str(DashboardObj.LastUpdate).split(' ')})
		
		return Result


	def createOrUpdateDashboard(self, WidgetID, JSONData=""):
		try:
			DateTimeNow = mktdate.getDateTimeNow()
			Branch = self.Branch
			UserID = mktuser.getUser().ID

			db.session.close()
			DashboardObj = self.queryDashboardObj(WidgetID)			
			if DashboardObj is not None:
				if str(DashboardObj.LastUpdate) != str(DateTimeNow):
					DashboardObj.Curr = int(DashboardObj.Curr) + 1
					DashboardObj.JSONData = json.dumps(JSONData)
					DashboardObj.LastUpdate = DateTimeNow
			else:
				DashboardObj = MKT_DASHBOARD_STORAGE(
													Branch = Branch,
													Curr = 0,
													Createdon = DateTimeNow,
													User = UserID,
													WidgetID = WidgetID, 
													JSONData = json.dumps(JSONData), 
													LastUpdate = DateTimeNow
													)
				db.session.add(DashboardObj)

			db.session.commit()
			db.session.expire_on_commit=False
			db.session.close()
		except Exception as e:
			print e
			db.session.rollback()
			db.session.close()


	def updateLoanOutstandingByPro(self):
		try:
			QueryObj 		= []
			DicObj 			= {}
			DateTimeNow = mktdate.getDateTimeNow()
			
			QueryObj = self.getLoanOutstanding("LoanProduct")

			if len(QueryObj)==0 :
				Data = self.defaultGraphObj("Loan Oustanding By Product", "/LoanOstByProductRefresh","Donut")
				self.createOrUpdateDashboard(WidgetID="LoanOstByPro",JSONData=Data)
				return jsonify(Data)

			
			TotalOstAmount = sum([float(val) for obj in QueryObj for key, val in obj.iteritems()])

			LoanProduct = MKT_LOAN_PRODUCT.query.all()
			LoanProductDict = {}
			for product in LoanProduct:
				LoanProductDict.update({str(product.ID):str(product.Description)})
			
			APIListObj = []
			Obj = dict(obj for item in QueryObj for obj in item.items())

			for key,value in Obj.iteritems():
				DunatFormat = self.donutFormatLOS(	key=LoanProductDict[key],
													label=self.shortenAmount(value, 2),
													value=round((value/TotalOstAmount)*100,2)
													)
				APIListObj.append(DunatFormat)

			APIListObj 		= 	sorted(APIListObj, key=lambda k: k['value'], reverse=True)
			Title 			=	"Loan Outstanding By Product"
			Icon 			=	"cubes"
			Refresh 		=	"/LoanOstByProductRefresh"
			TotalRecord 	=	len(QueryObj)
			Type 			=	"Donut"
			FormatDashboard = self.formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=APIListObj)
			FormatDashboard.update({"last_update":DateTimeNow.split(' ')})
			self.createOrUpdateDashboard(WidgetID="LoanOstByPro",JSONData=FormatDashboard)
			return jsonify(FormatDashboard)

		except Exception as e:
			db.session.close()
			print e


	def updateLoanOutstandingByCurr(self):
		try:
			QueryObj 		= []
			DicObj 			= {}
			Currency = MKT_CURRENCY.query.all()
			ReportingRate = {}
			DateTimeNow = mktdate.getDateTimeNow()

			for obj in Currency:
				ReportingRate.update({str(obj.ID):float(obj.ReportingRate)})
			
			Total = 0

			QueryObj = self.getLoanOutstanding("Currency")
			if len(QueryObj) == 0:
				Data = self.defaultGraphObj("Loan Oustanding By Currency", "/LoanOstByCurrRefresh","DonutSlim")
				self.createOrUpdateDashboard(WidgetID="LoanOstByCurr",JSONData=Data)
				return jsonify(Data)
			
			APIListObj = []
			Obj = dict(obj for item in QueryObj for obj in item.items())

			for key,value in Obj.iteritems():
				Total += value
				DunatFormat = self.dunatFormat(key=key,value=value)
				DunatFormat.update({"label":self.shortenAmount(value/ReportingRate[key], 2)})
				APIListObj.append(DunatFormat)

			Title 			=	"Loan Outstanding By Currency"
			Icon 			=	"cubes"
			Refresh 		=	"/LoanOstByCurrRefresh"
			TotalRecord 	=	len(QueryObj)
			Type 			=	"DonutSlim"
			FormatDashboard = self.formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=APIListObj)
			FormatDashboard.update({"total_amount_shortcuts":self.shortenAmount(Total, 2),
									"total_amount":Total,
									"last_update":DateTimeNow.split(' ')							
									})
			
			self.createOrUpdateDashboard(WidgetID="LoanOstByCurr",JSONData=FormatDashboard)
			return jsonify(FormatDashboard)

		except Exception as e:
			db.session.close()
			print e


	def getLoanOutstanding(self, GroupBy):
		DashboardDict = defaultdict(list)
		Result = []		
		Branch = self.Branch
		AccessBranch = mktuser.getUser().AccessBranch
		ListAccessBranch = AccessBranch.split(' ')
		Currency = MKT_CURRENCY.query.all()
		ReportingRate = {}

		for obj in Currency:
			ReportingRate.update({str(obj.ID):float(obj.ReportingRate)})

		LoanContract = db.session.query(MKT_LOAN_CONTRACT.LoanProduct,
						MKT_LOAN_CONTRACT.Currency,
						MKT_LOAN_CONTRACT.OutstandingAmount
						)
				
		if Branch != "ALL":
			LoanContract = LoanContract.filter(MKT_LOAN_CONTRACT.Branch==Branch)
		elif Branch == "ALL" and "ALL" not in AccessBranch:
			LoanContract = LoanContract.filter(MKT_LOAN_CONTRACT.Branch.in_(ListAccessBranch))			
		
		CurrencyList = [item.Description for item in Currency]
		LoanProductList = [str(item.LoanProduct) for item in LoanContract]
		GroupByDict = {"Currency":CurrencyList, "LoanProduct":LoanProductList}

		if LoanContract is not None:
			for row in LoanContract:
				DashboardDict[eval("row.%s"%GroupBy)].append(row)
			for key, value in DashboardDict.items():
				Result.append({key: sum([float(val[2])*ReportingRate[str(val[1])] for val in value])})
		return Result


	def getLoanOutstandingByPro(self):
		Result = self.queryDashboardDict("LoanOstByPro")
		if len(Result) ==0 :
			return self.defaultGraphObj("Loan Oustanding By Product", "/LoanOstByProductRefresh","Donut")

		return Result


	def getLoanOutstandingByCurr(self):
		Result = self.queryDashboardDict("LoanOstByCurr")
		if len(Result) == 0:
			return self.defaultGraphObj("Loan Oustanding By Currency", "/LoanOstByCurrRefresh","DonutSlim")
		return Result


	def updateLoanCollectionAndDisbursement(self):
		try:
			SystemDate = str(mktdate.getBankDate())
			SplitedDate = SystemDate.split('-')			
			Branch = self.Branch
			AccessBranch = mktuser.getUser().AccessBranch
			ListAccessBranch = AccessBranch.split(' ')
			DateTimeNow = mktdate.getDateTimeNow()
			QueryYear = SplitedDate[0] + "%"
			APIListObj = []
			LoanCollections = []
			LoanDisbursement = []
			LoanDict = {}
			LoanDictList = []
			FinalLoanCollectDictList = []
			AxisDict = OrderedDict()
			FormatDashboard = OrderedDict()
			y_axis = [12]
			x_axis = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]

			Currency = MKT_CURRENCY.query.all()
			AccountingSetting = MKT_ACCOUNTING_SETTING.query.first()
			ReportingRate = {}
			for obj in Currency:
				ReportingRate.update({str(obj.ID):float(obj.ReportingRate)})

			LoanContract = db.session.query(MKT_LOAN_CONTRACT.ID,
											MKT_LOAN_CONTRACT.ValueDate,
											MKT_LOAN_CONTRACT.Currency,
											MKT_LOAN_CONTRACT.Disbursed,
											MKT_LOAN_CONTRACT.Amount,
											MKT_LOAN_CONTRACT.OutstandingAmount
											).\
							filter(MKT_LOAN_CONTRACT.ValueDate.like(QueryYear))

			LoanCollectionObj = db.session.query(MKT_ACC_ENTRY.Amount, 
												 MKT_ACC_ENTRY.Currency, 
												 MKT_ACC_ENTRY.Account,
												 MKT_ACC_ENTRY.TransactionDate).\
								join(MKT_CATEGORY, MKT_ACC_ENTRY.Category==MKT_CATEGORY.ID).\
								join(MKT_ACCOUNT, MKT_CATEGORY.ID==MKT_ACCOUNT.AccCategory).\
								filter(	MKT_ACC_ENTRY.TransactionDate.like(QueryYear),
										MKT_ACC_ENTRY.DebitCredit == "Dr",
										MKT_ACC_ENTRY.Module == "LC",
										MKT_ACCOUNT.AccProduct == "101"
									)

			# print "++++++======+++++", LoanCollectionObj
			
			if Branch != "ALL":
				LoanContract = LoanContract.filter(MKT_LOAN_CONTRACT.Branch==Branch).all()
				LoanCollectionObj = LoanCollectionObj.filter(MKT_ACC_ENTRY.Branch==Branch).all()
			elif Branch == "ALL" and "ALL" not in AccessBranch:
				LoanContract = LoanContract.filter(MKT_LOAN_CONTRACT.Branch.in_(ListAccessBranch)).all()
				LoanCollectionObj = LoanCollectionObj.filter(MKT_ACC_ENTRY.Branch.in_(ListAccessBranch)).all()
			
			LoanContractDictList = [obj.__dict__ for obj in LoanContract]
			LoanCollectDictList	 = [obj.__dict__ for obj in LoanCollectionObj]
			LoanByMonth = collections.defaultdict(list)
			LoanCollectByMonth = collections.defaultdict(list)

			for row in LoanContractDictList:
				LoanByMonth[str(row['ValueDate']).split('-')[1]].append(row)

			for row in LoanCollectDictList:
				# print "JOY", row
				LoanCollectByMonth[str(row['TransactionDate']).split('-')[1]].append(row)
				
			for key, value in LoanByMonth.iteritems():
				DisbursedAmount = sum([float(val['Disbursed'])*ReportingRate[val['Currency']] for val in value])							
				LoanDict.update({"month": key, "disbursed": round(DisbursedAmount,2)})
				LoanDictList.append(LoanDict)
				LoanDict = {}

			for key, value in LoanCollectByMonth.iteritems():
				CollectedAmount = sum([float(val['Amount'])*ReportingRate[val['Currency']] for val in LoanCollectByMonth[key]])				
				LoanDict.update({"month": key, "collected": round(CollectedAmount,2)})
				FinalLoanCollectDictList.append(LoanDict)
				LoanDict = {}
			
			SortedLoanDict = sorted(LoanDictList, key=lambda k : int(k['month']))
			SortedLoanCollectDict = sorted(FinalLoanCollectDictList, key=lambda kk : int(kk['month']))

			indicator = 0
			autofill = False
			if len(SortedLoanDict) == 0 and len(SortedLoanCollectDict) == 0:
				Data = self.defaultGraphObj("Loan Collection and Disbursement", "/LoanColDisRefresh", "Line")
				self.createOrUpdateDashboard("LoanColAndDis", JSONData=Data)
				return jsonify(Data)


			for item in range(0, 12):
				if autofill or len(SortedLoanDict)==0:					
					LoanDisbursement.append(0.0)

				for x in range(indicator, len(SortedLoanDict)):					
					if (item+1) == int(SortedLoanDict[x]['month']):
						LoanDisbursement.append(SortedLoanDict[x]['disbursed'])
						indicator += 1
						break
					else:
						LoanDisbursement.append(0.0)
						break
				if indicator == len(SortedLoanDict):
					autofill = True

			autofill = False
			indicator = 0
			for item in range(0, 12):
				if autofill or len(SortedLoanCollectDict)==0:
					LoanCollections.append(0.0)
				for x in range(indicator, len(SortedLoanCollectDict)):
					if (item+1) == int(SortedLoanCollectDict[x]['month']):
						LoanCollections.append(SortedLoanCollectDict[x]['collected'])
						indicator += 1
						break
					else:
						LoanCollections.append(0.0)
						break
				if indicator == len(SortedLoanCollectDict):
					autofill = True
			
			Combination = sorted(LoanCollections + LoanDisbursement, reverse=True)
			y_axis = [Combination[0], Combination[-1]]
			y_axis_shortcuts = [self.shortenAmount(y, 2) for y in y_axis]
			
			LoanCollectionsFormat = self.lineGraphFormat(key="Loan Collection", value=LoanCollections)
			LoanDisbursementFormat = self.lineGraphFormat(key="Loan Disbursement", value=LoanDisbursement)
			
			APIListObj.append(LoanCollectionsFormat)
			APIListObj.append(LoanDisbursementFormat)

			Title 			=	"Line Graph"
			Icon 			=	"cubes"
			Refresh 		=	"/LoanColDisRefresh"
			TotalRecord 	=	2
			Type 			=	"Line"
			FormatDashboard = 	self.formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=APIListObj)			
			FormatDashboard.update({'y_axis':y_axis,
									'y_axis_shortcuts':y_axis_shortcuts,
									'x_axis':x_axis,
									'last_update': DateTimeNow.split(' '),
									'base_currency': str(AccountingSetting.BaseCurrency),
									}
									)
			self.createOrUpdateDashboard("LoanColAndDis", JSONData=FormatDashboard)
			return jsonify(FormatDashboard)

		except Exception as e:
			db.session.close()
			print e

		
	def getLoanCollectionAndDisbursement(self):
		WidgetID = "LoanColAndDis"
		Result = self.queryDashboardDict(WidgetID)
		
		if len(Result)==0 :			
			return self.defaultGraphObj("Loan Collection and Disbursement", "/LoanColDisRefresh", "Line")
		
		return Result


	def updateFinancialReport(self):
		# getReportSubTotal(Report, LineNumber, Currency, Branch, Period, GLTable='', GLObj='', FCY=False, NBC=False)
		try:	
			Branch = session['ChangeBranch']
			BranchList = self.Branch			
			AccessBranch = mktuser.getUser().AccessBranch			
			DateTimeNow = mktdate.getDateTimeNow()
			Currency = MKT_CURRENCY.query.all()
			ListAPIObj = []
			ListOfValue = []
			ListLine = []
			y_axis = []
			x_axis = []
			y_axis_shortcuts = []
			ReportingRate = {}	
			webicon = []

			for obj in Currency:
				ReportingRate.update({str(obj.ID):float(obj.ReportingRate)})

			ListResult         = []
			FinancialReport = MKT_FINANCIAL_WIDGET_REG.query.all()			
				
			if BranchList == "ALL" and "ALL" not in AccessBranch:
				BranchList = AccessBranch

			for FR in FinancialReport:
				LineReport = MKT_LINE_REPORT_DE.query.get(FR.LineNumber)
				LineNumber = str(LineReport.LineNumber)
				ListLine.append(
								{'LineReport':FR.LineReport,
								 'LineNumber':LineNumber,
								 'Branch':str(BranchList),
								 'Period':int(FR.Period),
								 'Label':str(FR.Label),
								 'Currency':str(FR.Currency),
								 'Icon':str(FR.Icon)
								}
					)
			
			GLObj = MKT_GL_BALANCE.query
			for row in ListLine:
				#Find Total Asset
				Value= mktgl.getReportSubTotal(	Report=row.get('LineReport'),
												LineNumber=row.get('LineNumber'),
												Currency=row.get('Currency'),
												Branch=row.get('Branch'),
												Period=row.get('Period'),
												GLTable=MKT_GL_BALANCE,
												GLObj=GLObj)
				#Update to dict result for return result
				row.update({'Value':mktmoney.toMoney(float("".join(Value.split(','))),mktmoney.getCurrencyObj(row.get('Currency')))})
				ListResult.append(row)
			
			for row in ListResult:
				key = row['Label']
				value = float("".join(row['Value'].split(',')))*ReportingRate[row['Currency']]
				webicon.append(str(row['Icon']))
				ListOfValue.append(value)
				x_axis.append(key)
				y_axis.append(value)
				y_axis_shortcuts.append(self.shortenAmount(value, 2))

			if len(ListOfValue)==0 or max(ListOfValue) == 0:
				Data = self.defaultGraphObj("Financial Report", "/FinancialReportRefresh", "Bar")
				self.createOrUpdateDashboard("FinancialReport", JSONData=Data)
				return jsonify(Data)			
			ListAPIObj.append({'key':'Financial Report', 'value':ListOfValue, 'web_icon':webicon})
			Title 			=	"Bar Graph"
			Icon 			=	"cubes"
			Refresh 		=	"/FinancialReportRefresh"
			TotalRecord 	=	len(ListResult)
			Type 			=	"Bar"
			FormatDashboard = 	self.formatDashboard(Title=Title,Icon=Icon,Refresh=Refresh,TotalRecord=TotalRecord,Type=Type,Body=ListAPIObj)			
			y_axis = sorted(y_axis, reverse=True)
			FormatDashboard.update({'y_axis':[y_axis[0], y_axis[-1]],
									'y_axis_shortcuts':y_axis_shortcuts,
									'x_axis':x_axis,
									'last_update': DateTimeNow.split(' ')}
									)

			self.createOrUpdateDashboard("FinancialReport", JSONData=FormatDashboard)
			return jsonify(FormatDashboard)

		except Exception as e:
			db.session.close()
			print "Error", e
		

	def getFinancialReport(self):
		Result = self.queryDashboardDict("FinancialReport")

		if len(Result) == 0:
			return self.defaultGraphObj("Financial Report", "/FinancialReportRefresh", "Bar")

		return Result



def getPOCustomerStatus():
	POStatusObj 	= MKT_PO_CUSTOMER_STATUS.query.order_by(MKT_PO_CUSTOMER_STATUS.Order.asc())
	return POStatusObj