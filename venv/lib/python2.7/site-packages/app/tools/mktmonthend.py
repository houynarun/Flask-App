
from app.mktcore.imports 			import *
from .. 							import app
from sqlalchemy 					import *
from decimal 						import *
from datetime 						import datetime, date, timedelta
from dateutil.relativedelta 		import relativedelta

from app.ConsolBalance.models 		import MKT_CONSOL_BALANCE
from app.GLBalance.models 			import MKT_GL_BALANCE,MKT_GL_BALANCE_BACKUP
from app.Branch.models 				import MKT_BRANCH
from app.GL.models 					import *
from app.FinancialReport.models 	import *
from app.Journal.models 			import *
from app.Category.models			import *

import mktaudit 					as mktaudit
import mktdate 						as mktdate
import mktaccounting 				as mktaccounting
import mktsetting 					as mktsetting
import mktmessage 					as mktmessage
import mktmoney 					as mktmoney
import mktgl 						as mktgl
import mktparam 					as mktparam
import mktcurrencyrevaluate			as mktcurrencyrevaluate

'''
GL Balance Period
'0':'CurrentMonthBal'
'1':'CurrentPrevMonthBal'
'2':'PrevMonthBal'
'3':'YTDBal'
'4':'CurrentPrevYearBal'
'5':'PrevYearBal'
'6':'Balance'
'''
def setManualEndMonth():
	# Update current year profit/loss
	BankDateObj 	= 	mktdate.getBankDateObj()
	BankDate 		=	BankDateObj.SystemDate
	LastMonthEnd 	=	BankDateObj.LastMonthEnd
	BranchObj 		=	MKT_BRANCH.query.all()

	AccSetting      =   mktsetting.getAccSetting()
	YearEnd        	=   AccSetting.YEAR_END.strip()
	MonthOfYearEnd 	=   mkttool.getMonth(YearEnd)
	FirstMonthOfYear = 	(MonthOfYearEnd + 1) if (MonthOfYearEnd + 1) < 13 else 1

	ReportLockedStatus	=	True
	AdjustmentPrevMonth =  	False
	AdjustmentPrevYear  = 	False
	
	if BranchObj:
		for row in BranchObj:
			if row.ReportLocked[:3] != "100":
				ReportLockedStatus	=	False
				if row.ReportLocked[:3][-1] == '1' and row.ReportLocked[-1] == '1':
					AdjustmentPrevYear =  True

				if row.ReportLocked[1] == '1' and row.ReportLocked[3] == '1':
					AdjustmentPrevMonth =  True

	if ReportLockedStatus:
		return False, "Month End is already closed"

	if AdjustmentPrevMonth == False and AdjustmentPrevYear == False:
		'''Reset key to default in case open key lock and not post any transaction'''
		for b in BranchObj:
			b.ReportLocked = '10000'
			db.session.add(b)

	if AdjustmentPrevYear:
		'''Start booking accounting for previous year'''
		# Period = 4 is CurrentPrevYearBal

		mktcurrencyrevaluate.setCurrencyRevaluation(IsBackDate="PreviousYear")
		
		LastYearEnd 	=	BankDateObj.LastYearEnd
		EndMonthObj 	=	bookMonthEndProfit(BranchObj, TranDate=LastYearEnd, Period=4, IsManualMonthEnd=True, IsPrevYear=True)
		if not EndMonthObj[0]:
			db.session.rollback()
			return False,EndMonthObj[1]

		EndYearObj = bookYearEndProfit(BranchObj, TranDate=LastYearEnd, Field="CurrentPrevYearBal", IsManualMonthEnd=True, IsPrevYear=True)
		if not EndYearObj[0]:
			db.session.rollback()
			return False, EndYearObj[1]
		
		else:
			if not AdjustmentPrevMonth:
				# mktcurrencyrevaluate.setCurrencyRevaluation()
				AdjustmentPrevMonth =  True
				if int(BankDate[5:7]) != FirstMonthOfYear:
					Dict = {}
					for b in BranchObj:
						Dict.update({b.ID:b.ReportLocked})
						b.ReportLocked = '11000'
				else:
					mktcurrencyrevaluate.setCurrencyRevaluation()
			
			mktgl.updateGLBalanceAllBranch()
			ExcludeGL   =	getExcludeGL(AccSetting)
			for row in BranchObj:
				copyAndUpdateGLBackup(LastYearEnd, row.ID, ExcludeGL, AccSetting)

	if  AdjustmentPrevMonth and (int(BankDate[5:7]) != FirstMonthOfYear):
		'''
		Start booking accounting on month end
		Period = 1 mean we calculate on field LCYCurrentPrevMonthBal of gl balance 
		'''
		mktcurrencyrevaluate.setCurrencyRevaluation(IsBackDate="PreviousMonth")
		EndMonthObj =	bookMonthEndProfit(BranchObj, TranDate=LastMonthEnd, Period=1, IsManualMonthEnd=True)
		
		if not EndMonthObj[0]:
			db.session.rollback()
			return False,EndMonthObj[1]

		''' Manual Month end process is to close previous month 
			if current month is January so previous month is December it is year end
			so we are going to book year end profit '''
		 
		# if int(BankDate[1]) == FirstMonthOfYear: 
		# 	EndYearObj = bookYearEndProfit(BranchObj, TranDate=LastMonthEnd, Field="CurrentPrevYearBal", IsManualMonthEnd=True)
		# 	if not EndYearObj[0]:
		# 		db.session.rollback()
		# 		return False, EndYearObj[1]

		mktcurrencyrevaluate.setCurrencyRevaluation()
		#  update gl
		mktgl.updateGLBalanceAllBranch()

		DataTransfer = transferBalanceToBackup(LastMonthEnd)
		if not DataTransfer[0]:
			db.session.rollback()
			return False, DataTransfer[1]
	
	db.session.commit()
	return True,''

def transferBalanceToBackup(TranDate):
	'''
	This method uses for transfer balance from MKT_GL_BALANCE to MKT_GL_BALANCE_BACKUP on manual month end

	MKT_GL_BALANCE  			move to 	MKT_GL_BALANCE_BACKUP
	--------------------------------------------------------------------
	CurrentPrevMonthBal 		====>	 	CurrentMonthBal
	PrevMonthBal 				====> 		Balance
	YTDBal - CurrentMonthBal 	====> 		YTDBal
	PrevMonthBal - PrevYearBal 	====> 		YTDBal
	
	** In case new GL was created
	0 							====> 		CurrentPrevMonthBal 	
	0 							====> 		PrevYearBal				
	0 							====> 		PrevMonthBal 			
	CurrentPrevMonthBal			====> 		CurrentMonthBal 		
	0 							====> 		CurrentPrevYearBal
	PrevMonthBal				====> 		Balance
	YTDBal - CurrentMonthBal 	====> 		YTDBal

	* For Year End
	CurrentPrevYearBal 			====> 		YTDBal
	
	********************************************************************'''
	try:
		BankDateObj 		=	mktdate.getBankDateObj()
		LastYearEnd 		=	BankDateObj.LastYearEnd
		AccSetting 			=	mktsetting.getAccSetting()
		ExcludeGL   		=	getExcludeGL(AccSetting)
		BalanceSheetGLID	=	getBalanceSheetGLID(AccSetting)
		YearEnd        		=   AccSetting.YEAR_END.strip()
		MonthOfYearEnd 		=   mkttool.getMonth(YearEnd)
		SplitTranDate		=	TranDate.split("-")
		Year 				=	SplitTranDate[0]
		Month 				=	SplitTranDate[1]
		Day 				= 	SplitTranDate[2]
		GLBalanceObj 		= 	MKT_GL_BALANCE.query
		GLBalBackupObj 		=	MKT_GL_BALANCE_BACKUP.query.\
								filter(MKT_GL_BALANCE_BACKUP.GLYear==Year).\
								filter(MKT_GL_BALANCE_BACKUP.GLMonth==Month)
								
		GLBalanceBackupObj  =	GLBalBackupObj.filter(MKT_GL_BALANCE_BACKUP.Audit=='1')

		if GLBalanceBackupObj.first():

			for row in GLBalanceObj.all():
				if row.ID in ExcludeGL:
					continue

				GLBalanceBackup =	GLBalanceBackupObj.filter(MKT_GL_BALANCE_BACKUP.ID == row.ID).\
									filter(MKT_GL_BALANCE_BACKUP.Branch == row.Branch).first()
					
				# YTDBal 		=	float(row.YTDBal) - float(row.CurrentMonthBal) 
				YTDBal 		=	Decimal(row.PrevMonthBal) - Decimal(row.PrevYearBal) 

				if TranDate == LastYearEnd:
					YTDBal	=	Decimal(row.CurrentPrevYearBal)
				
				if row.ID in BalanceSheetGLID:
					LCYYTDBal	=	YTDBal * Decimal(mktaccounting.getReportingRate(row.Currency,str(TranDate)))
				else:
					LCYYTDBal	=	Decimal(row.LCYPrevMonthBal) - Decimal(row.LCYPrevYearBal) 
					if TranDate == LastYearEnd:
						LCYYTDBal	=	Decimal(row.LCYCurrentPrevYearBal)
				
				if GLBalanceBackup:
					GLBalanceBackup.CurrentMonthBal 	= 	row.CurrentPrevMonthBal
					GLBalanceBackup.Balance 			= 	row.PrevMonthBal
					GLBalanceBackup.YTDBal 				=	YTDBal

					GLBalanceBackup.LCYCurrentMonthBal 	= 	row.LCYCurrentPrevMonthBal
					GLBalanceBackup.LCYBalance 			= 	row.LCYPrevMonthBal
					GLBalanceBackup.LCYYTDBal			=	LCYYTDBal

				else:
					GLBalanceBackup =	MKT_GL_BALANCE_BACKUP (
						ID 						= 	row.ID,
						Branch 					=	row.Branch,
						Currency 				=	row.Currency,
						CurrentPrevMonthBal 	=	0,
						PrevYearBal				=	0,
						YTDBal					=	YTDBal,
						PrevMonthBal 			=	0,
						CurrentMonthBal 		= 	row.CurrentPrevMonthBal,
						CurrentPrevYearBal		=	0,
						Balance 				=	row.PrevMonthBal,

						LCYCurrentPrevMonthBal 	=	0,
						LCYPrevYearBal			=	0,
						LCYYTDBal				=	LCYYTDBal,
						LCYPrevMonthBal 		=	0,
						LCYCurrentMonthBal 		= 	row.LCYCurrentPrevMonthBal,
						LCYCurrentPrevYearBal	=	0,
						LCYBalance 				=	row.LCYPrevMonthBal,
						GLYear 					= 	Year,
						GLMonth 				=	Month,
						GLDay 					=	Day,
						Audit 					=	'1'
					)

				db.session.add(GLBalanceBackup)
		
		return True, "Transfer Completed"

	except Exception, e:
		db.session.rollback()
		raise
		return False, e

def bookMonthEndProfit(BranchObj, TranDate="", Period=0, IsManualMonthEnd=False, IsPrevYear=False):
	'''
	Post accounting close month
	'''
	try:
		AccSetting 			=	mktsetting.getAccSetting()
		BankDateObj			=	mktdate.getBankDateObj()
		BankDate 			=	BankDateObj.SystemDate
		LastMonthEnd 		=	BankDateObj.LastMonthEnd
		PrevMonthTranStatus =	"0" #set to 0 it means have no back date transaction
		PrevMonthTranKey    =	"0"		
		Transaction 		=	AccSetting.CurrYearTran
		CurrentYearCat		=	AccSetting.CurrYearCat
		IncomeSummaryCat 	=	AccSetting.IntSummaryCat
		BaseCurrency 		=	AccSetting.BaseCurrency
		MonthEndClosing 	=	AccSetting.MonthEndClosing
		MonthEndStatus 		=	AccSetting.MonthEndStatus
		PriorYearCat 		=	AccSetting.PriorYearCat
		YearEnd        		=   AccSetting.YEAR_END.strip()
		MonthOfYearEnd 		=   mkttool.getMonth(YearEnd)
		FirstMonthOfYear 	= 	(MonthOfYearEnd + 1) if (MonthOfYearEnd + 1) < 13 else 1

		if not TranDate:
			TranDate 	=	BankDate

		if not PriorYearCat or not CurrentYearCat or not IncomeSummaryCat:
			mktmessage.setLogError("Category not set correctly for month end and year end.")

		if not Transaction:
			mktmessage.setLogError("Current year profit/loss booking transaction not found.")

		GLTable   	= 	MKT_GL_BALANCE
		GLObj   	=   GLTable.query
		Currency 	=	BaseCurrency
		
		if BranchObj:
			
			for item in BranchObj:
				Branch 			=	item.ID
				# if current branch is closed and runnig manual month end we continue to next branch
				if item.ReportLocked[:3] == "100" and IsManualMonthEnd == True:
					continue
				# if previous month do not be closed we stop current month end process
				if item.ReportLocked[:3] in ["110","111","101"] and IsManualMonthEnd == False:
					return False, "Branch %s is not close previous month/year"%Branch

				PrevYearTranKey = item.ReportLocked[:3][-1]
				PrevYearPostedStatus = item.ReportLocked[-1]

				if IsPrevYear == True:
					PrevMonthTranStatus =	item.ReportLocked[3]
					PrevMonthTranKey 	=	item.ReportLocked[1]

				# check month end mode is Automatic or runnig manual month end we are going to post accounting
				if MonthEndClosing == "A" or IsManualMonthEnd == True:
					
					Condition2 	=	MonthEndClosing == "A" and IsManualMonthEnd == False	
					if not MonthEndStatus:
						MonthEndStatus = '%s-N'%TranDate[:7] if Condition2 else '%s-N'%LastMonthEnd[:7]

					Condition1 	=	IsManualMonthEnd == True and MonthEndStatus[:7] == LastMonthEnd[:7] and MonthEndStatus[-1] == 'N'
					OriAmount 	=	0

					if Condition1 or Condition2:
						if Period == 4: Period = 1
						# OriAmount 	=	mktgl.getReportSubTotal(ReportID, LineValue, Currency, Branch, Period, GLObj=GLObj, GLTable=GLTable)
						OriAmount 	=	getProfitAmount(Period,Branch)
						Amount 		=	abs(Decimal(OriAmount))	
						 
					elif IsManualMonthEnd:
						OriAmount	=	item.PrevYearAmount if Period == 4 else item.PrevMonthAmount
						Amount		=	abs(Decimal(OriAmount))
						BankDate 	=	mktdate.getBankDate()
						TrancDate  	=	datetime.strptime(str(TranDate), "%Y-%m-%d").date()
						# updateGLBackupBal(IncomeSummaryCat,TrancDate,BankDate,BaseCurrency,OriAmount,Branch)
						updateGLBackupBal(CurrentYearCat,TrancDate,BankDate,BaseCurrency,OriAmount,Branch)

					postProfit(IncomeSummaryCat, CurrentYearCat, Transaction, OriAmount, Amount, Currency, Branch, TranDate, "EOM")

					print "Month-end closing for branch %s." %Branch
					print "Net operating profit/loss amount is %s." %mktmoney.toMoney(float(OriAmount), mktmoney.getCurrencyObj(Currency))

					# Check if it is year end we will not set report lock equal 100 in month end process
					# we're going to set it in year end 
					if MonthOfYearEnd != int(TranDate[5:7]):
						'''
						Update report lock with "100" this mean alow to post accounting
						for current month only not for previous month and previous year  '''
						item.PrevMonthAmount = 0
						item.ReportLocked = "1%s%s%s%s"%(PrevMonthTranKey,PrevYearTranKey,PrevMonthTranStatus,PrevYearPostedStatus)
						if Condition1 or Condition2:
							AccSetting.MonthEndStatus = '%s-Y'%TranDate[:7] if Condition2 else '%s-Y'%LastMonthEnd[:7]
							db.session.add(AccSetting)

				elif MonthEndClosing == "M":
					if MonthOfYearEnd == int(TranDate[5:7]) and item.ReportLocked[2] == "1":
						mktmessage.setLogError("Please run manual month end before continue to new year")

					AccSetting.MonthEndStatus = '%s-N'%TranDate[:7]
					db.session.add(AccSetting)

					item.ReportLocked = "11%s1%s"%(PrevYearTranKey,PrevYearPostedStatus)
					if MonthOfYearEnd == int(TranDate[5:7]):
						item.ReportLocked = "11111"
					
				db.session.add(item)
		
		# mktmessage.setLogError("Break in month end")
		return True,'Posting successfully'

	except Exception, e:
		raise
		db.session.rollback()
		return False,e

def updateEndMonthProfitLoss(Period=0):
	'''
	Process close month
	'''
	try:

		BranchObj 	=	MKT_BRANCH.query.all()

		if BranchObj:
			AccSetting 		=	mktsetting.getAccSetting()
			YearEnd        	=   AccSetting.YEAR_END.strip()
			MonthOfYearEnd 	=   mkttool.getMonth(YearEnd)
			BankDateObj 	=	mktdate.getBankDateObj()
			Date       		=	BankDateObj.SystemDate.split("-")

			BookMonthEnd	=	bookMonthEndProfit(BranchObj)
			if not BookMonthEnd[0]:
				mktmessage.setLogError(BookMonthEnd[1])
			
			#Update GL Balance again
			mktgl.updateGLBalanceAllBranch()	

			'''
			Month End copy data from MKT_GL_BALANCE to MKT_GL_BALANCE_BACKUP 
			by adding default value to ExtraField
			''' 
			ExtraField 			= 	{'GLYear':Date[0], 'GLMonth':Date[1], 'GLDay':Date[2], 'Audit':'1'}
			BackUpGLBalanceObj 	= 	mktaudit.copyData(MKT_GL_BALANCE,MKT_GL_BALANCE_BACKUP,ExtraField)
			if not BackUpGLBalanceObj[0]:
				mktmessage.setLogError(BackUpGLBalanceObj[1])

			if mktgl.isYearEnd(BankDateObj):
				ExtraField 			= 	{'GLYear':Date[0], 'GLMonth':Date[1], 'GLDay':Date[2], 'Audit':'0'}
				BackUpGLBalanceObj 	= 	mktaudit.copyData(MKT_GL_BALANCE,MKT_GL_BALANCE_BACKUP,ExtraField)
				if not BackUpGLBalanceObj[0]:
					mktmessage.setLogError(BackUpGLBalanceObj[1])
				
			if int(Date[1]) != MonthOfYearEnd:
				# Move Balance From Current Month to Prev Month
				moveBalanceToPreMonth()
				
				#Update GL Balance again
				mktgl.updateGLBalanceAllBranch()

			print "Month-end was successfully closed."
			print ""

		return ""

	except Exception, e:
		mktmessage.setLogError(str(e))

def bookYearEndProfit(BranchObj, TranDate="", Field="YTDBal", IsManualMonthEnd=False, IsPrevYear=False):
	'''
	Post accounting close year
	'''
	try:
		AccSetting      	=   mktsetting.getAccSetting()
		PrevMonthTranStatus = 	"0" #set to 0 it means have no back date transaction
		PrevYearTranStatus 	=	"0" #set to 0 it means have no back date transaction
		PrevMonthTranKey 	=  	"0"
		YearEnd        		=   AccSetting.YEAR_END.strip()
		MonthOfYearEnd 		=   mkttool.getMonth(YearEnd)
		FirstMonthOfYear 	= 	(MonthOfYearEnd + 1) if (MonthOfYearEnd + 1) < 13 else 1
		BankDateObj			=	mktdate.getBankDateObj()
		BankDate 			=	mktdate.getBankDate()
		LastMonthEnd 		=	BankDateObj.LastMonthEnd
		
		if not TranDate:
			TranDate 	=	str(mktdate.getBankDate())

		if AccSetting:
			Transaction 	=	AccSetting.PriorYearTran
			CurrentYearCat	=	AccSetting.CurrYearCat
			PriorYearCat 	=	AccSetting.PriorYearCat
			IncomeSummaryCat 	=	AccSetting.IntSummaryCat
			BaseCurrency 	= 	AccSetting.BaseCurrency
			MonthEndClosing =	AccSetting.MonthEndClosing
			MonthEndStatus	=	AccSetting.MonthEndStatus

		Currency 	=	BaseCurrency
		ExcludeGL   =	getExcludeGL(AccSetting)

		if not Transaction:
			mktmessage.setLogError("Current year profit/loss booking transaction not found.")

		if BranchObj:

			for item in BranchObj:

				Branch 			=	item.ID
				if not (item.ReportLocked[:3] == "100" and IsManualMonthEnd == True):

					if IsPrevYear == True and BankDate.month != FirstMonthOfYear :	
						PrevMonthTranStatus =	item.ReportLocked[:4][-1]
						PrevMonthTranKey 	=	item.ReportLocked[:2][-1]

					if MonthEndClosing == "A" or IsManualMonthEnd == True:
						
						Condition2 	=	MonthEndClosing == "A" and IsManualMonthEnd == False
						if not MonthEndStatus:
							MonthEndStatus = '%s-N'%TranDate[:7] if Condition2 else '%s-N'%LastMonthEnd[:7]

						Condition1 	=	IsManualMonthEnd == True and MonthEndStatus[:7] == LastMonthEnd[:7] and MonthEndStatus[-1] == 'N'
						OriAmount 	=	0
						if Condition1 or Condition2:
							# Get amount from Consolidated Balance
							CurrentYearKey 	=	mktaccounting.getConsolKey(CurrentYearCat, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
							OriAmount		=	mktgl.getConsolKeyBal(CurrentYearKey, Branch, Field)
							Amount 			=	abs(OriAmount)
							# print "KEY %s Branch %s Currency %s Field %s Amount %s" %(CurrentYearKey, Branch, Currency,Field,Amount)
						elif IsManualMonthEnd:
							OriAmount	=	item.PrevYearAmount
							Amount		=	abs(Decimal(OriAmount))
							TrancDate  	=	datetime.strptime(str(TranDate), "%Y-%m-%d").date()
							# updateGLBackupBal(IncomeSummaryCat,TrancDate,BankDate,BaseCurrency,OriAmount,Branch,YearEnd=True,DoMonthRange=False)
							updateGLBackupBal(PriorYearCat,TrancDate,BankDate,BaseCurrency,OriAmount,Branch,YearEnd=True)

						postProfit(CurrentYearCat, PriorYearCat, Transaction, OriAmount, Amount, Currency, Branch, TranDate, "EOY")
						AccSetting.MonthEndStatus = '%s-Y'%TranDate[:7] if Condition2 else '%s-Y'%LastMonthEnd[:7]
						db.session.add(AccSetting)

						print "Year-end closing for branch %s." %Branch
						print "Net operating profit/loss amount is %s." %mktmoney.toMoney(float(OriAmount), mktmoney.getCurrencyObj(Currency))
						item.PrevYearAmount = 0
						item.ReportLocked = "1%s0%s0"%(PrevMonthTranKey,PrevMonthTranStatus)
						db.session.add(item)

					elif MonthEndClosing == "M":
						AccSetting.MonthEndStatus = '%s-N'%TranDate[:7]
						db.session.add(AccSetting)
					
				print "GL is updating for %s." %Branch
				mktgl.getTreeGLCode(Branch)
				
				# if IsPrevYear == True:
				# 	copyAndUpdateGLBackup(TranDate, Branch, ExcludeGL, AccSetting)

		# mktmessage.setLogError("Break in year end")
		return True, 'Posting Year End successfully'

	except Exception, e:
		db.session.rollback()
		raise
		return False,e

def updateEndYearProfitLoss(Period=6):
	'''
	Process close year
	'''
	try:

		BranchObj 		=	MKT_BRANCH.query.all()
		BankDateObj 	=	mktdate.getBankDateObj()
		Date       		=	BankDateObj.SystemDate.split("-")

		if BranchObj:

			BookYearEnd =	bookYearEndProfit(BranchObj)
			if not BookYearEnd[0]:
				mktmessage.setLogError(BookYearEnd[1])

			ExtraField 			= 	{'GLYear':Date[0], 'GLMonth':'00', 'GLDay':Date[2], 'Audit':'0'}
			BackUpGLBalanceObj 	= 	mktaudit.copyData(MKT_GL_BALANCE,MKT_GL_BALANCE_BACKUP,ExtraField)
			if not BackUpGLBalanceObj[0]:
				mktmessage.setLogError(BackUpGLBalanceObj[1])

			ExtraField 			= 	{'GLYear':Date[0], 'GLMonth':'00', 'GLDay':Date[2], 'Audit':'1'}
			BackUpGLBalanceObj 	= 	mktaudit.copyData(MKT_GL_BALANCE,MKT_GL_BALANCE_BACKUP,ExtraField)
			if not BackUpGLBalanceObj[0]:
				mktmessage.setLogError(BackUpGLBalanceObj[1])

			# Move Balance From Current Month to Prev Month
			moveBalanceToPreMonth()

			# Move Balance From YTD  to Current Prev Month
			EndYearBal 	=	MKT_CONSOL_BALANCE.query.\
							order_by(MKT_CONSOL_BALANCE.ID.asc()).\
							all()

			if EndYearBal:

				for item in EndYearBal:

					item.PrevYearBal 			= 	float(item.Balance)
					item.CurrentPrevYearBal 	=	float(item.YTDBal)
					item.YTDBal 				= 	float(0)

					item.LCYPrevYearBal 		= 	float(item.LCYBalance)
					item.LCYCurrentPrevYearBal 	=	float(item.LCYYTDBal)
					item.LCYYTDBal 				= 	float(0)

					db.session.add(item)

			#Update GL Balance again
			mktgl.updateGLBalanceAllBranch()

			print "Year-end was successfully closed."
			print ""

		return ""

	except Exception, e:
		raise
		mktmessage.setLogError(e)

def moveBalanceToPreMonth():
	try:
		print "Starting Move balance to previous month"
		EndMonthBal 	=	MKT_CONSOL_BALANCE.query.\
							order_by(MKT_CONSOL_BALANCE.ID.asc()).\
							all()

		if EndMonthBal:

			for item in EndMonthBal:

				item.PrevMonthBal 			= 	float(item.Balance)
				item.CurrentPrevMonthBal 	=	float(item.CurrentMonthBal)
				item.CurrentMonthBal 		= 	0

				item.LCYPrevMonthBal 		= 	float(item.LCYBalance) 
				item.LCYCurrentPrevMonthBal =	float(item.LCYCurrentMonthBal)
				item.LCYCurrentMonthBal 	= 	0

				db.session.add(item)
		
	except Exception, e:
		raise e

def postProfit(DrCat, CrCat, Transaction, OriAmount, Amount, Currency, Branch, TranDate, Reference):
	"""
	# DrCat = IncomeSummaryCat and CrCat = CurrentYearCat for month end
	# DrCat = CurrentYearCat and CrCat = PriorYearCat for year end
	
	On month end if gains we post
		Dr 	IncomeSummary 	xxx
			Cr 	CurrentYear 	xxx

	On year end if gains we post
		Dr 	CurrentYear 	xxx
			Cr 	PriorYear 		xxx 
	"""
	try:
		
		Category 	=	DrCat if float(OriAmount) >= 0 else CrCat
		DrCr 		=	"Dr"
		Mode 		=	"Direct"
		DateTimeNow = 	mktdate.getDateTimeNow()
		GL_KEYS 	= 	mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
		if float(Amount) > float(0):
			for x in range(2):
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					Reference,				# Reference
					"", 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				Category 	=	CrCat if Category == DrCat else DrCat
				DrCr 		=	"Cr"
				Mode 		=	"Direct"
				DateTimeNow = 	mktdate.getDateTimeNow()
				GL_KEYS 	= 	mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
		
	except Exception, e:
		raise

def getExcludeGL(AccSetting,Category=[]):
	'''	In gl balance backup we do not backup current month balance of gl current year, income summary and  retained earning
		so this method will list of exlude gl
	'''
	try:
		BaseCurrency 		=	AccSetting.BaseCurrency
		CurrentYearCat		=	AccSetting.CurrYearCat
		CurrentYearKey		=	mktaccounting.getConsolKey(CurrentYearCat, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", "")
		# IncomeSummaryCat 	=	AccSetting.IntSummaryCat
		# IncomeSummaryKey	= 	mktaccounting.getConsolKey(IncomeSummaryCat, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", "")
		PriorYearCat 		=	AccSetting.PriorYearCat
		PriorYearKey		=	mktaccounting.getConsolKey(PriorYearCat, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", "")
		ExcludeCategory 	=	[]

		if Category:
			for c in Category:
				ExcludeCategory.append(mktaccounting.getConsolKey(c, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", ""))
		else:
			ExcludeCategory =	[PriorYearKey,CurrentYearKey]

		GLList				=	[]
		GLDEObj				=	db.session.query(MKT_GL_MAPPING_DE.ID).\
								filter(MKT_GL_MAPPING_DE.ConsolKey.in_(ExcludeCategory)).\
								all()
								# filter(MKT_GL_MAPPING_DE.ConsolKey.in_([PriorYearKey,IncomeSummaryKey,CurrentYearKey])).\
		for g in GLDEObj:
			GLObj 	=	db.session.query(MKT_GL_MAPPING.ID,MKT_GL_MAPPING.SubGL).\
						filter(MKT_GL_MAPPING.SubGL.like('%'+g.ID+'%')).first()
			if GLObj:
				SubGL 	= GLObj.SubGL.split()
				if g.ID in SubGL:
					GLList.append(GLObj.ID)
					GLList 	=	GLList + SubGL
				
			else:
				GLList.append(g.ID)

		return GLList

	except Exception, e:
		raise e

def copyAndUpdateGLBackup(TranDate, Branch, ExcludeGL, AccSetting):
	'''
	Copy GL balance backup and set audit status to 0 this mean GL backup before doing previous year adjustment
	Update GL balance backup amount when do previous year adjustment of last month of previous year and forword previous month 
	'''
	try:
		BankDate 			=	mktdate.getBankDate()
		NYear 				= 	str(BankDate.year)
		SplitTranDate		=	TranDate.split("-")
		Year 				=	SplitTranDate[0]
		Month 				=	SplitTranDate[1]
		Day 				= 	SplitTranDate[2]
		
		YearEnd        		=   AccSetting.YEAR_END.strip()
		MonthOfYearEnd 		=   mkttool.getMonth(YearEnd)
		BalanceSheetGLID	=	getBalanceSheetGLID(AccSetting)
		FirstMonthOfYear 	= 	(MonthOfYearEnd + 1) if (MonthOfYearEnd + 1) < 13 else 1

		GLBalanceObj 		= 	MKT_GL_BALANCE.query.filter(MKT_GL_BALANCE.Branch == Branch)
		GLBalanceBackupObj 	=	MKT_GL_BALANCE_BACKUP.query.\
								filter(MKT_GL_BALANCE_BACKUP.GLYear==Year).\
								filter(MKT_GL_BALANCE_BACKUP.Branch == Branch).\
								filter(MKT_GL_BALANCE_BACKUP.GLMonth==Month)
		GLBalanceBackupObj0	=	MKT_GL_BALANCE_BACKUP.query.\
								filter(MKT_GL_BALANCE_BACKUP.GLYear==Year).\
								filter(MKT_GL_BALANCE_BACKUP.Branch == Branch).\
								filter(MKT_GL_BALANCE_BACKUP.GLMonth=='00')

		MonthRange 	= 	[]
		BankDateObj = 	mktdate.getBankDateObj()
		StartMonth 	= 	datetime.strptime(BankDateObj.LastYearEnd,'%Y-%m-%d').date()    
		EndMonth    =   BankDate - relativedelta(months=1)
		while str(StartMonth)[0:7] < str(EndMonth)[0:7]:
			StartMonth += relativedelta(months=1)
			MonthRange.append(StartMonth.month)
		
		copyGLBackup(GLBalanceBackupObj)
		# for m in MonthRange:
		# 	GLBalObj 	=	MKT_GL_BALANCE_BACKUP.query.\
		# 					filter(MKT_GL_BALANCE_BACKUP.GLYear==NYear).\
		# 					filter(MKT_GL_BALANCE_BACKUP.GLMonth==str(m).zfill(2))
		# 	copyGLBackup(GLBalObj)
		if MonthRange:
			print "Updating previous year balance of GL backup branch %s."%Branch
			for row in GLBalanceObj:
				"""Update GL backup from Jan to current previous month"""
				PrevMonthRate	=	mktaccounting.getReportingRate(row.Currency,str(TranDate))			
				for m in MonthRange:
					NMonth			=	str(m).zfill(2)
					NGLBalBackupObj =	MKT_GL_BALANCE_BACKUP.query.\
										filter(MKT_GL_BALANCE_BACKUP.Branch  == Branch).\
										filter(MKT_GL_BALANCE_BACKUP.GLYear  == NYear).\
										filter(MKT_GL_BALANCE_BACKUP.GLMonth == NMonth)
					FGLBalBackupObj	=	NGLBalBackupObj.first()

					Rate			=	mktaccounting.getReportingRate(row.Currency,"%s-%s-%s"%(NYear,NMonth,FGLBalBackupObj.GLDay))
					NGLBalObj 		=	NGLBalBackupObj.\
										filter(MKT_GL_BALANCE_BACKUP.ID      == row.ID).\
										filter(MKT_GL_BALANCE_BACKUP.Audit 	 == '1').first()

					PrevYearBal  	=	0
					if NGLBalObj: 
						PrevYearBal	=	Decimal(NGLBalObj.PrevYearBal)
					
					Amount			=	Decimal(row.PrevYearBal) - PrevYearBal

					if Amount:
						NGLBalRecord	=	NGLBalBackupObj.first()
							
						if NGLBalRecord:
							NDay	=	NGLBalRecord.GLDay

						else:
							DayEndOfMonth 	= 	AccSetting.MONTH_END.strip()
							if DayEndOfMonth and not DayEndOfMonth.upper() == "END":
								NDay =	mktdate.getLastDayOfMonth(int(NYear), int(NMonth), DayEndOfMonth)

							else:
								NDay =	mktdate.getLastDayOfMonth(int(NYear), int(NMonth))
							
						updateGLBackup(NGLBalObj, row, Amount, Rate,PrevMonthRate, NYear, NMonth, NDay, FirstMonthOfYear,BalanceSheetGLID)

					PrevMonthRate	=	Rate

		"""Update GL backup previous year"""
		for row in GLBalanceObj:
			PrevYearRate	=	mktaccounting.getReportingRate(row.Currency,str(TranDate))
			
			if row.ID in ExcludeGL:
				continue

			GLBalanceBackup 	=	GLBalanceBackupObj.filter(MKT_GL_BALANCE_BACKUP.ID == row.ID).\
									filter(MKT_GL_BALANCE_BACKUP.Audit == '1').first()
			GLBalanceBackup0	=	GLBalanceBackupObj0.filter(MKT_GL_BALANCE_BACKUP.ID == row.ID).\
									filter(MKT_GL_BALANCE_BACKUP.Audit == '1').first()
			
			updateGLBackupPrevYear(GLBalanceBackup, row, PrevYearRate, Year, Month, Day, BalanceSheetGLID)
			updateGLBackupPrevYear(GLBalanceBackup0, row, PrevYearRate, Year, '00', Day, BalanceSheetGLID)

		"""Update and post revalue and close month"""
		updateProfitByMonthRange(MonthRange, AccSetting, Branch, NYear)
			
	except Exception, e:
		db.session.rollback()
		raise

def updateProfitByMonthRange(MonthRange, AccSetting, Branch, NYear):
	try:
		MonthRange1	=	MonthRange[:-1]
		if MonthRange:
			BaseCurrency 		=	AccSetting.BaseCurrency
			PositionCat 		=	AccSetting.PositionCat
			EquivalentCat 		=	AccSetting.EquivalentCat
			EquivalentKey		=	mktaccounting.getConsolKey(EquivalentCat, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", "")
			CurrentYearCat		=	AccSetting.CurrYearCat
			CurrentYearKey		=	mktaccounting.getConsolKey(CurrentYearCat, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", "")
			IncomeSummaryCat 	=	AccSetting.IntSummaryCat
			IncomeSummaryKey	=	mktaccounting.getConsolKey(IncomeSummaryCat, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", "")
			Transaction 		=	AccSetting.PriorYearTran
			ExcludeGL			=	getExcludeGL(AccSetting,Category=[CurrentYearCat])
			IsFirstMonthOfYear	=	True
			GainLoss			=	0
			SumGain 			=	0
			SumLoss 			=	0
			GainAmount 			=	0
			print "Do currency revalue by month of branch %s"%Branch
			for m in MonthRange:
				Month 				=	str(m).zfill(2)
				PositionGLIDList 	=	db.session.query(MKT_GL_MAPPING_DE.ID).\
										join(MKT_GL_MAPPING,MKT_GL_MAPPING_DE.ID==MKT_GL_MAPPING.ID).\
										filter(MKT_GL_MAPPING.Currency!=BaseCurrency).\
										filter(MKT_GL_MAPPING_DE.GLCategory==PositionCat).\
										all() # Look at GL Mapping whether base currency and foriegn current are the same Category.
				EquivalentGLID 		=	db.session.query(MKT_GL_MAPPING_DE.ID).\
										join(MKT_GL_MAPPING,MKT_GL_MAPPING_DE.ID==MKT_GL_MAPPING.ID).\
										filter(MKT_GL_MAPPING.Currency==BaseCurrency).\
										filter(MKT_GL_MAPPING_DE.ConsolKey==EquivalentKey).first() # Look at GL Mapping whether base currency and foriegn current are the same Category.
																
				PositionObj 		=	MKT_GL_BALANCE_BACKUP.query.\
										filter(MKT_GL_BALANCE_BACKUP.Branch  == Branch).\
										filter(MKT_GL_BALANCE_BACKUP.GLYear  == NYear).\
										filter(MKT_GL_BALANCE_BACKUP.GLMonth == Month).\
										filter(MKT_GL_BALANCE_BACKUP.ID.in_(PositionGLIDList)).\
										filter(MKT_GL_BALANCE_BACKUP.Audit 	 == '1').all()

				EquivalentObj		=	MKT_GL_BALANCE_BACKUP.query.\
										filter(MKT_GL_BALANCE_BACKUP.Branch  == Branch).\
										filter(MKT_GL_BALANCE_BACKUP.GLYear  == NYear).\
										filter(MKT_GL_BALANCE_BACKUP.GLMonth == Month).\
										filter(MKT_GL_BALANCE_BACKUP.ID.in_(EquivalentGLID)).\
										filter(MKT_GL_BALANCE_BACKUP.Audit 	 == '1').first()

				if PositionObj and EquivalentObj:
					NewValue 		=	0
					OldValue 		=	EquivalentObj.Balance + GainLoss
					Reference 		=	"ADJREV%s%s%s"%(NYear,Month,EquivalentObj.GLDay)
					TranDateByMonth =	"%s-%s-%s"%(NYear,Month,EquivalentObj.GLDay)
					Rate = mktaccounting.getReportingRate(BaseCurrency,TranDateByMonth)

					for row in PositionObj:
						Balance = row.Balance
						print "Position Account Balance by month: %s" % mktmoney.formatNumber(Balance,DecimalPlace=9)
						# Multiply FCY Balance with FCY Rate
						LCYBalance =  Balance * mktaccounting.getReportingRate(row.Currency,TranDateByMonth)
						NewValue += LCYBalance

					GainAmount	=	NewValue - OldValue
					GainLoss 	+=	GainAmount
					SumAmount	=	0
					GainLossOnExcKey 	=	''
					GainLossKey 		=	''

					if NewValue > OldValue :
						# Gain on Exchange
						SumGain += abs(GainAmount)
						SumAmount = SumGain
						GainOrLoss = True # Mean that Gain On Exchange
						GainLossOnExcCat =	AccSetting.GainOnExcCat
						GainLossOnExcKey =	mktaccounting.getConsolKey(GainLossOnExcCat, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", "")
						GainLossKey 	=	mktaccounting.getConsolKey(AccSetting.LossOnExcCat, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", "")
						mktaccounting.setGainAndLossAccounting(AccSetting,GainOrLoss,Branch,TranDateByMonth,BaseCurrency,GainAmount,Reference)

					elif NewValue < OldValue :
						# Loss on Exchange
						SumLoss += abs(GainAmount)
						SumAmount = SumLoss
						LossAmount		=	OldValue - NewValue
						GainLossOnExcCat=	AccSetting.LossOnExcCat
						GainLossOnExcKey=	mktaccounting.getConsolKey(GainLossOnExcCat, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", "")
						GainLossKey 	=	mktaccounting.getConsolKey(AccSetting.GainOnExcCat, BaseCurrency, "", "AC", "", "", "", "", "", "", "", "", "")
						GainOrLoss 		=	False # Mean that Loss On Exchange
						mktaccounting.setGainAndLossAccounting(AccSetting,GainOrLoss,Branch,TranDateByMonth,BaseCurrency,LossAmount,Reference)

					postProfit(IncomeSummaryCat, CurrentYearCat, Transaction, GainAmount, abs(GainAmount), BaseCurrency, Branch, TranDateByMonth, "EOM")

					"""Set curnent month balance for GL backup for month range"""
					GLList	=	getGLIDandMainID([GainLossOnExcKey])
					Date 	=	datetime.strptime(TranDateByMonth,'%Y-%m-%d').date()
					if GainLossOnExcKey:
						for g in GLList:
							setCurrentPeriodBalForGLBackupMonthRange(g,Date,SumAmount,abs(GainAmount),Branch,Rate = Rate,IsFirstMonthOfYear = IsFirstMonthOfYear,ExcludeGL=ExcludeGL)
				
					"""Set previous month balance for GL backup for month range """
					GLList	=	getGLIDandMainID([EquivalentKey, IncomeSummaryKey, CurrentYearKey])
					Date 	=	datetime.strptime(TranDateByMonth,'%Y-%m-%d').date()
					for g in GLList:
						setCurrentPeriodBalForGLBackupMonthRange(g,Date,GainLoss,GainAmount,Branch,Rate = Rate,IsFirstMonthOfYear = IsFirstMonthOfYear,ExcludeGL=ExcludeGL)
					"""Set previous month balance for GL backup for month range """
					GLList	=	getGLIDandMainID([GainLossKey])
					for g in GLList:
						setPrevMonthBalForGLBackupMonthRange(g,Date,Branch,IsFirstMonthOfYear = IsFirstMonthOfYear,ExcludeGL=ExcludeGL)

				IsFirstMonthOfYear  =	False

			BranchObj = MKT_BRANCH.query.get(Branch)
			BranchObj.PrevMonthAmount -= GainAmount
			db.session.add(BranchObj)
			"""Set previous month balance for GL backup last month range"""
			# GLObj 	=	MKT_GL_BALANCE_BACKUP.query.\
			# 			filter(MKT_GL_BALANCE_BACKUP.GLYear==str(NYear)).\
			# 			filter(MKT_GL_BALANCE_BACKUP.GLMonth==str(MonthRange[-1]).zfill(2)).\
			# 			filter(MKT_GL_BALANCE_BACKUP.Branch==Branch).\
			# 			filter(MKT_GL_BALANCE_BACKUP.Audit=='1').all()

			# for g in GLObj:
			# 	Date = datetime.strptime("%s-%s-%s"%(NYear,g.GLMonth,g.GLDay),'%Y-%m-%d').date()
			# 	setPrevMonthBalForGLBackupMonthRange(g.ID,Date,Branch, SetBalance=False,IsFirstMonthOfYear = IsFirstMonthOfYear,ExcludeGL=ExcludeGL)
				
	except Exception as e:
		raise

def copyGLBackup(GLBalanceBackupObj):
	'''
	Copy GL Balance Backup that filter by year and month and set field audit status from 1 to 0
	- 1 mean updated records when do previous year adjustment
	- 0 mean records before do previous year adjustment from first time
	'''
	try:
		GLBalBackupUnAuditObj 	=	GLBalanceBackupObj.filter(MKT_GL_BALANCE_BACKUP.Audit=='0')

		if not GLBalBackupUnAuditObj.first():
			for row in GLBalanceBackupObj:
				GLBalanceBackup = 	MKT_GL_BALANCE_BACKUP (
					ID 						= 	row.ID,
					Branch 					=	row.Branch,
					Currency 				=	row.Currency,
					CurrentPrevMonthBal 	=	row.CurrentPrevMonthBal,
					PrevYearBal				=	row.PrevYearBal,
					YTDBal					=	row.YTDBal,
					PrevMonthBal 			=	row.PrevMonthBal,
					CurrentMonthBal 		= 	row.CurrentMonthBal,
					CurrentPrevYearBal		=	row.CurrentPrevYearBal,
					Balance 				=	row.Balance,
					LCYCurrentPrevMonthBal 	=	row.LCYCurrentPrevMonthBal,
					LCYPrevYearBal			=	row.LCYPrevYearBal,
					LCYYTDBal				=	row.LCYYTDBal,
					LCYPrevMonthBal 		=	row.LCYPrevMonthBal,
					LCYCurrentMonthBal 		= 	row.LCYCurrentMonthBal,
					LCYCurrentPrevYearBal	=	row.LCYCurrentPrevYearBal,
					LCYBalance 				=	row.LCYBalance,
					GLYear 					= 	row.GLYear,
					GLMonth 				=	row.GLMonth,
					GLDay 					=	row.GLDay,
					Audit 					=	'0'
				)
				db.session.add(GLBalanceBackup)

	except Exception, e:
		raise

def updateGLBackup(GLBackup, GLLive, UpdateAmount, Rate, PrevMonthRate, Year, Month, Day, FirstMonthOfYear,BalanceSheetGLID):
	'''
	This method uses for update previous year balance from MKT_GL_BALANCE to MKT_GL_BALANCE_BACKUP 
	on manual month end for GL backup previous year(December)

	UpdateAmount = GLLive.PrevYearBal - GLBackup.PrevYearBal

	MKT_GL_BALANCE_BACKUP
	--------------------------------------------------------------------
	Balance				= Balance + UpdateAmount
	PrevYearBal			= PrevYearBal + UpdateAmount
	PrevMonthBal		= PrevMonthBal + UpdateAmount
	CurrentPrevYearBal	= CurrentPrevYearBal + UpdateAmount
	* In case it is first month of year 
	CurrentPrevMonthBal	= CurrentPrevMonthBal + UpdateAmount

	** In case new GL was created
	CurrentPrevMonthBal	=	0 	
	CurrentPrevYearBal	=	UpdateAmount
	CurrentMonthBal		=	0 		
	PrevMonthBal		=	UpdateAmount 			
	PrevYearBal			=	UpdateAmount				
	Balance				=	UpdateAmount
	YTDBal				=	0
	* In case it is first month of year 
	CurrentPrevMonthBal	= UpdateAmount
	'''
	try:
		
		if GLBackup:
			GLBackup.Balance				+= 	UpdateAmount
			GLBackup.PrevYearBal			+= 	UpdateAmount
			GLBackup.PrevMonthBal			+= 	UpdateAmount
			GLBackup.CurrentPrevYearBal		+= 	UpdateAmount

			if GLBackup.ID in BalanceSheetGLID:
				GLBackup.LCYBalance 		=	GLBackup.Balance * Rate
				GLBackup.LCYPrevMonthBal	=	GLBackup.PrevMonthBal * PrevMonthRate

			else:
				Amount	=	Decimal(GLLive.LCYPrevYearBal) - Decimal(GLBackup.LCYPrevYearBal)
				GLBackup.LCYBalance 		=	GLBackup.LCYBalance + Amount
				GLBackup.LCYPrevMonthBal	=	GLBackup.LCYPrevMonthBal + Amount

			GLBackup.LCYPrevYearBal			=	GLLive.LCYPrevYearBal
			GLBackup.LCYCurrentPrevYearBal	=	GLLive.LCYCurrentPrevYearBal

			if int(FirstMonthOfYear) == int(Month):
				GLBackup.CurrentPrevMonthBal	+=	UpdateAmount
				
				if GLBackup.ID in BalanceSheetGLID:
					GLBackup.LCYCurrentPrevMonthBal	=	GLBackup.CurrentPrevMonthBal * PrevMonthRate
				
				else:
					GLBackup.LCYCurrentPrevMonthBal	=	GLBackup.LCYCurrentPrevMonthBal + Amount

		else:
			LCYCurrentPrevMonthBal 	= 	0
			CurrentPrevMonthBal 	=	0
			UpdateLCYAmount 		=	Decimal(GLLive.LCYPrevYearBal)
			
			if GLLive.ID in BalanceSheetGLID:
				UpdateLCYAmount 	=	UpdateAmount * Rate

			if int(FirstMonthOfYear) == int(Month):
				CurrentPrevMonthBal 	=	UpdateAmount
				if GLLive.ID in BalanceSheetGLID:
					LCYCurrentPrevMonthBal	=	UpdateAmount * PrevMonthRate

				else:
					LCYCurrentPrevMonthBal	=	UpdateLCYAmount

			GLBackup = 	MKT_GL_BALANCE_BACKUP (
				ID 						= 	GLLive.ID,
				Branch 					=	GLLive.Branch,
				Currency 				=	GLLive.Currency,
				CurrentPrevMonthBal 	=	CurrentPrevMonthBal,
				PrevYearBal				=	UpdateAmount,
				YTDBal					=	0,
				PrevMonthBal 			=	UpdateAmount,
				CurrentMonthBal 		= 	0,
				CurrentPrevYearBal		=	UpdateAmount,
				Balance 				=	UpdateAmount,
				LCYCurrentPrevMonthBal 	=	LCYCurrentPrevMonthBal,
				LCYPrevYearBal			=	GLLive.LCYPrevYearBal,
				LCYYTDBal				=	0,
				LCYPrevMonthBal 		=	UpdateLCYAmount,
				LCYCurrentMonthBal 		= 	0,
				LCYCurrentPrevYearBal	=	GLLive.LCYCurrentPrevYearBal,
				LCYBalance 				=	UpdateLCYAmount,
				GLYear 					= 	Year,
				GLMonth 				=	Month,
				GLDay 					=	Day,
				Audit 					=	'1'
			)

		db.session.add(GLBackup)

	except Exception, e:
		raise

def updateGLBackupPrevYear(GLBackup, GLLive, Rate,Year, Month, Day, BalanceSheetGLID):
	'''
	This method uses for update balance from MKT_GL_BALANCE to MKT_GL_BALANCE_BACKUP on manual month end
	for GL backup previous year(December)

	MKT_GL_BALANCE  			move to 	MKT_GL_BALANCE_BACKUP
	--------------------------------------------------------------------
	PrevYearBal 				====> 		Balance
	 							====>	 	CurrentMonthBal = Balance - PrevMonthBal 
	CurrentPrevYearBal 			====> 		YTDBal
	
	** In case new GL was created
	0 							====> 		CurrentPrevMonthBal 	
	0 							====> 		PrevYearBal				
	0 							====> 		PrevMonthBal 			
	0 							====> 		CurrentPrevYearBal
	PrevYearBal					====> 		Balance
	PrevYearBal					====> 		CurrentMonthBal 		
	CurrentPrevYearBal 			====> 		YTDBal
	'''
	try:

		if GLBackup:
			GLBackup.Balance			=	GLLive.PrevYearBal
			GLBackup.CurrentMonthBal	=	Decimal(GLBackup.Balance) - Decimal(GLBackup.PrevMonthBal)
			GLBackup.YTDBal 			=	GLLive.CurrentPrevYearBal

			if GLBackup.ID in BalanceSheetGLID:
				GLBackup.LCYYTDBal			=	Decimal(GLBackup.YTDBal) * Rate
				GLBackup.LCYBalance 		=	Decimal(GLBackup.Balance) * Rate
				GLBackup.LCYCurrentMonthBal	=	Decimal(GLBackup.CurrentMonthBal) * Rate
				
			else:
				GLBackup.LCYBalance 		=	GLLive.LCYPrevYearBal
				GLBackup.LCYCurrentMonthBal	=	Decimal(GLBackup.LCYBalance) - Decimal(GLBackup.LCYPrevMonthBal)
				GLBackup.LCYYTDBal			=	GLLive.LCYCurrentPrevYearBal
		
		else:
			if GLLive.ID in BalanceSheetGLID:
				LCYAmount	=	Decimal(GLLive.PrevYearBal) * Rate

			else:
				LCYAmount	=	Decimal(GLLive.LCYCurrentPrevYearBal)

			GLBackup = 	MKT_GL_BALANCE_BACKUP (
				ID 						= 	GLLive.ID,
				Branch 					=	GLLive.Branch,
				Currency 				=	GLLive.Currency,
				CurrentPrevMonthBal 	=	0,
				PrevYearBal				=	0,
				YTDBal					=	GLLive.CurrentPrevYearBal,
				PrevMonthBal 			=	0,
				CurrentMonthBal 		= 	GLLive.PrevYearBal,
				CurrentPrevYearBal		=	0,
				Balance 				=	GLLive.PrevYearBal,
				LCYCurrentPrevMonthBal 	=	0,
				LCYPrevYearBal			=	0,
				LCYYTDBal				=	LCYAmount,
				LCYPrevMonthBal 		=	0,
				LCYCurrentMonthBal 		= 	LCYAmount,
				LCYCurrentPrevYearBal	=	0,
				LCYBalance 				=	LCYAmount,
				GLYear 					= 	Year,
				GLMonth 				=	Month,
				GLDay 					=	Day,
				Audit 					=	'1'
			)
		db.session.add(GLBackup)

	except Exception, e:
		raise

def getProfitAmount(Period, Branch):
	try:
		AccSetting	=	mktsetting.getAccSetting()
		ExsCatType	=	AccSetting.ExpCatType.split()
		IncCatType	=	AccSetting.IncCatType.split()
		
		if Period == 0: 
			Field 	=	MKT_CONSOL_BALANCE.LCYCurrentMonthBal 
		elif Period == 1: 
			Field 	=	MKT_CONSOL_BALANCE.LCYCurrentPrevMonthBal

		# ConsolObj	=	db.session.query(MKT_CONSOL_BALANCE.Branch,MKT_CONSOL_BALANCE.ID,Field.label('SAmount')).\
		# 				distinct(MKT_CONSOL_BALANCE.ID).\
		# 				join(MKT_CATEGORY, MKT_CATEGORY.ID == MKT_CONSOL_BALANCE.Category).\
		# 				filter(MKT_CONSOL_BALANCE.Branch == Branch)

		ConsolSubquery	=	db.session.query(
							MKT_CONSOL_BALANCE.Branch,
							MKT_CONSOL_BALANCE.ID,
							func.substring(MKT_CONSOL_BALANCE.ID,'^[0-9]*').label('Category'),
							Field.label('SAmount')).\
						filter(MKT_CONSOL_BALANCE.Branch == Branch).subquery()
						
		ConsolObj   = 	db.session.query(
							ConsolSubquery.c.Branch,
							ConsolSubquery.c.ID,
							ConsolSubquery.c.Category,
							ConsolSubquery.c.SAmount).\
						distinct(ConsolSubquery.c.ID).\
						join(MKT_CATEGORY, MKT_CATEGORY.ID == ConsolSubquery.c.Category)

		ESubquery	=	ConsolObj.filter(MKT_CATEGORY.CategoryType.in_(ExsCatType)).subquery()
		ExpenseObj	=	db.session.query(func.sum(ESubquery.c.SAmount).label('Amount')).\
						group_by(ESubquery.c.Branch).first()

		ISubquery	=	ConsolObj.filter(MKT_CATEGORY.CategoryType.in_(IncCatType)).subquery()
		IncomeObj	=	db.session.query(func.sum(ISubquery.c.SAmount).label('Amount')).\
						group_by(ISubquery.c.Branch).first()
		
		Expense 	=	0
		Income 		=	0
		if ExpenseObj:	Expense	=	ExpenseObj.Amount
		if IncomeObj:	Income 	=	IncomeObj.Amount

		return Income - Expense

	except Exception as e:
		raise

def getGLList(ConsolKey):
	try:
		GLList 		=	[]
		GLDEObj		= 	db.session.query(MKT_GL_MAPPING_DE.ID).\
						filter(MKT_GL_MAPPING_DE.ConsolKey==ConsolKey).first()
		GLObj 		=	db.session.query(MKT_GL_MAPPING.ID,MKT_GL_MAPPING.SubGL).\
						filter(MKT_GL_MAPPING.SubGL.like('%'+GLDEObj.ID+'%')).all()
		GLList.append(GLDEObj.ID)
		for g in GLObj:
			if GLDEObj.ID in g.SubGL.split():
				GLList.append(g.ID)
		return GLList
		
	except Exception as e:
		raise

def getGLIDandMainID(ConsolKey):
	try:
		GLList 		=	[]
		for c in ConsolKey:
			GLDEObj		= 	db.session.query(MKT_GL_MAPPING_DE.ID).\
							filter(MKT_GL_MAPPING_DE.ConsolKey==c).first()
			GLObj 		=	db.session.query(MKT_GL_MAPPING.ID,MKT_GL_MAPPING.SubGL).\
							filter(MKT_GL_MAPPING.SubGL.like('%'+GLDEObj.ID+'%')).first()
			if GLDEObj.ID:
				GLList.append(GLDEObj.ID)
			if GLObj:
				GLList.append(GLObj.ID)
		return GLList

	except Exception as e:
		raise

def getMonthRange(LastYearEnd,BankDate):
	"""
	For getting list of month from first month of year until last month of bank date
	Args:
		LastYearEnd	(obj) 	:	date object
		BankDate 	(obj)	: 	date object

	Returns:
		MonthRange  (list)	: 	list of month. Ex. [1,2,3,4]
	
	Raises:
		Exception: raise all exceptions

	Examples:
		>>>	import app.tools.mktmothend as mktmothend
		>>>	print mktmothend.getMonthRange(datetime.date(2016,12,31),datetime.date(2017,05,21))
		[1,2,3,4]
	"""
	try:
		MonthRange 	= 	[]
		StartMonth 	= 	LastYearEnd
		EndMonth    =   BankDate - relativedelta(months=1)

		while StartMonth < EndMonth:
			StartMonth += relativedelta(months=1)
			MonthRange.append(StartMonth.month)
		return MonthRange
	except Exception as e:
		raise 

def updateGLBackupBal(Category,PeriodDate,BankDate,Currency,LCYAmount,Branch,YearEnd=False,DoMonthRange=True):
	"""
	For updating gl balance backup for given category and date period
	- Previous month will set only current period for gl backup
	- Previous year  will set balance current period for gl backup last year and previous year period from 
	gl backup first month of year until gl backup last month

	Args:
		Category 		(str)	: 	string of category number ID
		PeriodDate		(obj) 	:	date object Ex.LastYearEnd, LastMonthEnd
		BankDate 		(obj)	: 	date object
		Currency 		(str)	: 	string currency ID
		LCYAmount 		(dec)	: 	amount for updating
		DrCr 			(str)	: 	string value Dr Cr
		Branch 			(str)	: 	string branch ID
	
	Raises:
		Exception: raise all exceptions

	"""
	try:
		ConsolKey 	=	mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
		MonthRange 	=	getMonthRange(PeriodDate,BankDate)
		GLList 		=	getGLList(ConsolKey)
		
		for l in GLList:
			setCurrentPeriodBalForGLBackup(l,PeriodDate,LCYAmount,Branch,YearEnd=YearEnd)

			if DoMonthRange:
				IsFirstMonthOfYear 	=	False
				Count 				=	0
				BankDateObj 		=	mktdate.getBankDateObj()
				for m in MonthRange:
					# Month = '00' if YearEnd else m 
					IsFirstMonthOfYear = True if Count == 0 and mktgl.isYearEnd(BankDateObj) else False
					Count += 1
					setPrevYearPeriodBalForGLBackup(l,BankDate.year,m,LCYAmount,Branch,IsFirstMonthOfYear)
		
	except Exception as e:
		raise

def getGLBalanceObj(ID,Year,Month,Branch):
	"""
		For getting gl balance backup for given category and date period
		Args:
			ID 			(str)	: 	string of category number ID
			Year		(str) 	:	string of year Ex.2018
			Month 		(str)	: 	string of mount Ex.12
			Branch 		(str)	: 	string branch ID Ex.HO

		Returns:
			GLBalBackupObj  (obj)	: 	object of gl balance backup
	"""
	try:
		GLBalBackupObj 	=	MKT_GL_BALANCE_BACKUP.query.\
							filter(MKT_GL_BALANCE_BACKUP.Branch  == Branch).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear  == str(Year)).\
							filter(MKT_GL_BALANCE_BACKUP.GLMonth == str(Month).zfill(2)).\
							filter(MKT_GL_BALANCE_BACKUP.ID      == ID).\
							filter(MKT_GL_BALANCE_BACKUP.Audit 	 == '1').first()
		return GLBalBackupObj
	except Exception as e:
		raise

def setPrevYearPeriodBalForGLBackup(ID,Year,Month,Amount,Branch,IsFirstMonthOfYear=False):
	"""
		Update GL Balance Backup for previous year period
		Args:
			ID 			(str)	: 	string of category number ID
			Year		(str) 	:	string of year Ex.2018
			Month 		(str)	: 	string of mount Ex.12
			Branch 		(str)	: 	string branch ID Ex.HO
			Amount 		(dec)	: 	decimal amount
			IsFirstMonthOfYear	(boo)	: 	boolean value

	"""
	try:
		GLBalBackupObj 	=	getGLBalanceObj(ID,Year,Month,Branch)

		if GLBalBackupObj:
			GLBalBackupObj.Balance 			+=	Amount
			GLBalBackupObj.LCYBalance		+=	Amount
			GLBalBackupObj.PrevMonthBal 	+=	Amount
			GLBalBackupObj.LCYPrevMonthBal	+=	Amount
			GLBalBackupObj.PrevYearBal 		+=	Amount
			GLBalBackupObj.LCYPrevYearBal	+=	Amount
			GLBalBackupObj.CurrentPrevYearBal 		+=	Amount
			GLBalBackupObj.LCYCurrentPrevYearBal	+=	Amount
			
			if IsFirstMonthOfYear:
				GLBalBackupObj.CurrentPrevMonthBal		+=	Amount
				GLBalBackupObj.LCYCurrentPrevMonthBal	+=	Amount

			db.session.add(GLBalBackupObj)

	except Exception as e:
		raise

def setCurrentPeriodBalForGLBackup(ID,Date,Amount,Branch,YearEnd=False):
	"""
		Update GL Balance Backup for current period
		Args:
			ID 			(str)	: 	string of category number ID
			Date		(obj) 	:	date object
			Branch 		(str)	: 	string branch ID Ex.HO

	"""
	try:
		Month = '00' if YearEnd else Date.month 
		GLBalBackupObj 	=	getGLBalanceObj(ID,Date.year,Month,Branch)

		if GLBalBackupObj:
			GLBalBackupObj.Balance 		+=	Amount
			GLBalBackupObj.LCYBalance	+=	Amount
			GLBalBackupObj.YTDBal 		+=	Amount
			GLBalBackupObj.LCYYTDBal	+=	Amount
			GLBalBackupObj.CurrentMonthBal 		+=	Amount
			GLBalBackupObj.LCYCurrentMonthBal	+=	Amount
			db.session.add(GLBalBackupObj)

		else:
			Currency      	=	mktsetting.getAccSetting().BaseCurrency
			GLBalBackupObj 	=	MKT_GL_BALANCE_BACKUP()
			GLBalBackupObj.Balance 				=	Amount
			GLBalBackupObj.LCYBalance			=	Amount
			GLBalBackupObj.YTDBal 				=	Amount
			GLBalBackupObj.LCYYTDBal			=	Amount
			GLBalBackupObj.CurrentMonthBal 		=	Amount
			GLBalBackupObj.LCYCurrentMonthBal	=	Amount
			
			GLBalBackupObj.LCYCurrentPrevYearBal	=	0
			GLBalBackupObj.CurrentPrevYearBal		=	0
			GLBalBackupObj.LCYPrevYearBal			=	0
			GLBalBackupObj.PrevYearBal				=	0
			GLBalBackupObj.LCYCurrentPrevMonthBal	=	0
			GLBalBackupObj.CurrentPrevMonthBal		=	0
			GLBalBackupObj.LCYPrevMonthBal			=	0
			GLBalBackupObj.PrevMonthBal				=	0

			GLBalBackupObj.Branch	=	Branch
			GLBalBackupObj.GLYear	=	str(Date.year)
			GLBalBackupObj.GLMonth	=	str(Month).zfill(2)
			GLBalBackupObj.GLDay	=	str(Date.day)
			GLBalBackupObj.Audit	=	'1'
			GLBalBackupObj.ID		=	ID
			GLBalBackupObj.Currency	=	Currency
			db.session.add(GLBalBackupObj)

	except Exception as e:
		raise

def setCurrentPeriodBalForGLBackupMonthRange(ID,Date,GainLoss,Amount,Branch, Rate,IsFirstMonthOfYear = False,ExcludeGL=''):
	"""
		Update GL Balance Backup for current period
		Args:
			ID 			(str)	: 	string of category number ID
			Date		(obj) 	:	date object
			Branch 		(str)	: 	string branch ID Ex.HO

	"""
	try:

		Month 	=	Date.month - 1
		Year 	=	Date.year
		if Month == 0:
			Month 	=	12
			Year 	-=	1
		GLBalBackupObj		=	getGLBalanceObj(ID,Date.year,Date.month,Branch)
		PrevGLBalBackupObj	=	getGLBalanceObj(ID,Year,Month,Branch)
		PrevMonthBal 		=	0
		CurrentPrevMonthBal =	0
		LCYPrevMonthBal 		=	0
		LCYCurrentPrevMonthBal	=	0

		if not (IsFirstMonthOfYear and ID in ExcludeGL):
			if PrevGLBalBackupObj :
				PrevMonthBal 		=	PrevGLBalBackupObj.Balance
				CurrentPrevMonthBal =	PrevGLBalBackupObj.CurrentMonthBal
				LCYPrevMonthBal 		=	PrevGLBalBackupObj.LCYBalance
				LCYCurrentPrevMonthBal	=	PrevGLBalBackupObj.LCYCurrentMonthBal

		if GLBalBackupObj:
			GLBalBackupObj.PrevMonthBal 			=	PrevMonthBal
			GLBalBackupObj.CurrentPrevMonthBal		=	CurrentPrevMonthBal
			GLBalBackupObj.LCYPrevMonthBal			=	LCYPrevMonthBal
			GLBalBackupObj.LCYCurrentPrevMonthBal	=	LCYCurrentPrevMonthBal
			GLBalBackupObj.Balance 		+=	GainLoss
			GLBalBackupObj.LCYBalance	=	GLBalBackupObj.Balance * Rate
			GLBalBackupObj.YTDBal 		+=	GainLoss
			GLBalBackupObj.LCYYTDBal	=	GLBalBackupObj.YTDBal * Rate
			GLBalBackupObj.CurrentMonthBal		+=	Amount
			GLBalBackupObj.LCYCurrentMonthBal	=	GLBalBackupObj.CurrentMonthBal * Rate
			db.session.add(GLBalBackupObj)

		else:
			Currency      	=	mktsetting.getAccSetting().BaseCurrency
			GLBalBackupObj 	=	MKT_GL_BALANCE_BACKUP()
			GLBalBackupObj.Balance 				=	GainLoss
			GLBalBackupObj.LCYBalance			=	GLBalBackupObj.Balance * Rate
			GLBalBackupObj.YTDBal 				=	GainLoss
			GLBalBackupObj.LCYYTDBal			=	GLBalBackupObj.YTDBal * Rate
			GLBalBackupObj.CurrentMonthBal		=	Amount
			GLBalBackupObj.LCYCurrentMonthBal	=	GLBalBackupObj.CurrentMonthBal * Rate
			
			GLBalBackupObj.LCYCurrentPrevYearBal	=	0
			GLBalBackupObj.CurrentPrevYearBal		=	0
			GLBalBackupObj.LCYPrevYearBal			=	0
			GLBalBackupObj.PrevYearBal				=	0
			GLBalBackupObj.LCYCurrentPrevMonthBal	=	LCYCurrentPrevMonthBal
			GLBalBackupObj.CurrentPrevMonthBal		=	CurrentPrevMonthBal
			GLBalBackupObj.LCYPrevMonthBal			=	LCYPrevMonthBal
			GLBalBackupObj.PrevMonthBal				=	PrevMonthBal

			GLBalBackupObj.Branch	=	Branch
			GLBalBackupObj.GLYear	=	str(Date.year)
			GLBalBackupObj.GLMonth	=	str(Date.month).zfill(2)
			GLBalBackupObj.GLDay	=	str(Date.day)
			GLBalBackupObj.Audit	=	'1'
			GLBalBackupObj.ID		=	ID
			GLBalBackupObj.Currency	=	Currency
			db.session.add(GLBalBackupObj)

	except Exception as e:
		raise

def setPrevMonthBalForGLBackupMonthRange(ID,Date,Branch, SetBalance=True,IsFirstMonthOfYear = False,ExcludeGL=''):
	"""
		Update GL Balance Backup for previous month period
		Args:
			ID 			(str)	: 	string of category number ID
			Date		(obj) 	:	date object
			Branch 		(str)	: 	string branch ID Ex.HO

	"""
	try:

		Month 	=	Date.month - 1
		Year 	=	Date.year
		if Month == 0:
			Month 	=	12
			Year 	-=	1

		GLBalBackupObj		=	getGLBalanceObj(ID,Date.year,Date.month,Branch)
		PrevGLBalBackupObj	=	getGLBalanceObj(ID,Year,Month,Branch)
		PrevMonthBal 		=	0
		CurrentPrevMonthBal =	0
		LCYPrevMonthBal 		=	0
		LCYCurrentPrevMonthBal	=	0

		if not (IsFirstMonthOfYear and ID in ExcludeGL):
			if PrevGLBalBackupObj :
				PrevMonthBal 		=	PrevGLBalBackupObj.Balance
				CurrentPrevMonthBal =	PrevGLBalBackupObj.CurrentMonthBal
				LCYPrevMonthBal 		=	PrevGLBalBackupObj.LCYBalance
				LCYCurrentPrevMonthBal	=	PrevGLBalBackupObj.LCYCurrentMonthBal

		if GLBalBackupObj:
			GLBalBackupObj.PrevMonthBal 			=	PrevMonthBal
			GLBalBackupObj.CurrentPrevMonthBal		=	CurrentPrevMonthBal
			GLBalBackupObj.LCYPrevMonthBal			=	LCYPrevMonthBal
			GLBalBackupObj.LCYCurrentPrevMonthBal	=	LCYCurrentPrevMonthBal

			if SetBalance:
				GLBalBackupObj.Balance 					=	Decimal(PrevMonthBal) + Decimal(GLBalBackupObj.CurrentMonthBal)
				GLBalBackupObj.LCYBalance 				=	Decimal(LCYPrevMonthBal) + Decimal(GLBalBackupObj.LCYCurrentMonthBal)
			
			db.session.add(GLBalBackupObj)

	except Exception as e:
		raise

def getBalanceSheetGLID(AccSetting=''):
	'''
	This method uses for getting list Balance Sheet GL ID

	Args:
		AccSetting	(obj)	:	Accounting Setting object

	Returns:
		GLList 		(list)	:	list of GL ID
	'''
	try:
		if not AccSetting:
			AccSetting	=	mktsetting.getAccSetting()

		BSCatType		=	AccSetting.RevCatType.split()
		CategoryObj 	=	db.session.query(MKT_CATEGORY.ID).\
							filter(MKT_CATEGORY.CategoryType.in_(BSCatType)).all()
		GLDEObj 		=	db.session.query(MKT_GL_MAPPING_DE.ID).\
							filter(MKT_GL_MAPPING_DE.GLCategory.in_(CategoryObj)).all()
		GLList			=	[]
		for g in GLDEObj:
			GLList.append(g.ID)
			GLObj		=	db.session.query(MKT_GL_MAPPING.ID,MKT_GL_MAPPING.SubGL).\
							filter(MKT_GL_MAPPING.SubGL.like('%'+g.ID+'%')).first()
			if GLObj and GLObj.ID not in GLList:
				GLList.append(GLObj.ID)

		return GLList

	except Exception as e:
		raise
