from app.mktcore.imports 			import *
from .. 							import app
from sqlalchemy 					import *
from decimal 						import *
from datetime 						import datetime, date, timedelta
from dateutil.relativedelta 		import relativedelta
import time
import calendar
from collections import defaultdict
from flask import flash,Markup
from app.Category.models 			import MKT_CATEGORY
from app.ConsolBalance.models 		import MKT_CONSOL_BALANCE
from app.GLBalance.models 			import MKT_GL_BALANCE,MKT_GL_BALANCE_BACKUP
from app.GL.models 					import *
from app.Branch.models 				import MKT_BRANCH
from app.Currency.models 			import MKT_CURRENCY
from app.FinancialReport.models 	import *
# from app.FinancialReport.views 		import getReportSubTotal, getGLValue

import mktaudit 					as mktaudit
import mktdate 						as mktdate
import mktaccounting 				as mktaccounting
import mktsetting 					as mktsetting
import mktmessage 					as mktmessage
import mktmoney 					as mktmoney
import mktbjstat 					as mktbjstat
import mktmonthend 					as mktmonthend
import mkttool 						as mkttool
import user 						as mktuser

def setConsolBalance(GL_KEYS, Branch, Currency, Amount, Category, DrCr, Module, TranDate, LCYAmount):
	
	try:
		BalType 		= 	MKT_CATEGORY.query.get(Category)
		BankDateObj 	= 	mktdate.getBankDateObj()

		if not BankDateObj.SystemDate:
			mktmessage.setLogError("Bank date not found in system date")

		TranDate            =   datetime.strptime(str(TranDate),'%Y-%m-%d').date()
		BankDate            =   datetime.strptime(str(BankDateObj.SystemDate),'%Y-%m-%d').date()
		NextMonthEnd        =   datetime.strptime(str(BankDateObj.NextMonthEnd),'%Y-%m-%d').date()
		LastMonthEnd        =   datetime.strptime(str(BankDateObj.LastMonthEnd),'%Y-%m-%d').date()
		PrevLastMonthEnd    =   datetime.strptime(str(BankDateObj.PrevLastMonthEnd),'%Y-%m-%d').date()
		NextYearEnd    		=   datetime.strptime(str(BankDateObj.NextYearEnd),'%Y-%m-%d').date()
		LastYearEnd    		=   datetime.strptime(str(BankDateObj.LastYearEnd),'%Y-%m-%d').date()
		
		StartMonthOfYearEnd	=	datetime.strptime('%s-%s-%s'%(LastYearEnd.year,LastYearEnd.month,'01'),'%Y-%m-%d').date()
		EndMonthOfYearEnd 	=	LastYearEnd

		if BalType:

			BalType = 	BalType.BalanceType
			GL_KEYS = 	GL_KEYS.strip()

			ConBal 	= 	MKT_CONSOL_BALANCE.query.with_for_update().\
						filter(MKT_CONSOL_BALANCE.ID == str(GL_KEYS)).\
						filter(MKT_CONSOL_BALANCE.Branch == str(Branch)).\
						first()

			if not ConBal:
				NewConsoleBalance = getNewConsoleBalance(GL_KEYS, Branch, Currency)
				db.session.add(NewConsoleBalance)
				
				ConBal 	= 	MKT_CONSOL_BALANCE.query.with_for_update().\
							filter(MKT_CONSOL_BALANCE.ID == str(GL_KEYS)).\
							filter(MKT_CONSOL_BALANCE.Branch == str(Branch)).\
							first()

			'''	*************************************
				* Start updating console balance    *
				*************************************'''
			
			BranchObj 	=	MKT_BRANCH.query.get(Branch)
			
			if BranchObj:
				"""	Report Lock setting '100' for default mean prevent post accounting for previouse month and year 
					status lock '0' mean lock and '1' mean unlock
					First number '1' is lock status for current month
					Second number '0' is lock status for previous month
					Third number '0' is lock status for previous year	"""
				ReportLocked 		=	BranchObj.ReportLocked

				if ReportLocked and len(ReportLocked) == 5:
					CurrentMonthLock 	=	ReportLocked[0]
					PreviousMonthLock 	=	ReportLocked[1]
					PreviousYearLock 	=	ReportLocked[2]
					PostedPrevMonth 	=	ReportLocked[3]
					PostedPrevYear 		=	ReportLocked[4]
					
					# Check if it is current transaction  
					if TranDate > LastYearEnd and TranDate <= PrevLastMonthEnd:
						ConBal = updateConsolePreCurrentPrevMonth(ConBal, Amount, LCYAmount, BalType, DrCr)

					elif TranDate > LastMonthEnd and TranDate <= NextMonthEnd:
						if CurrentMonthLock == "0":
							flash(msg_error + "Branch %s was locked current month transaction." %Branch)
							mktmessage.setLogError("Branch %s was locked current month transaction." %Branch)

						else:
							ConBal = updateConsoleCurrentDate(ConBal, Amount, LCYAmount, BalType, DrCr)

					# Check if it is transaction for previous year 
					elif TranDate >= StartMonthOfYearEnd and TranDate <= EndMonthOfYearEnd:
						if PreviousYearLock == "0":
							flash(msg_error + "Branch %s was locked previous year transaction." %Branch)
							mktmessage.setLogError("Branch %s was locked previous year transaction." %Branch)

						else:
							IsFirstMonthOfYear 	=	False
							FirstMonthOfYear 	= 	LastYearEnd + relativedelta(months=1)
							
							if BankDate.month == FirstMonthOfYear.month:
								IsFirstMonthOfYear 	=	True

							ConBal = updateConsolePrevYear(ConBal, Amount, LCYAmount, BalType, DrCr, IsFirstMonthOfYear)
							BranchObj.ReportLocked = "%s%s%s%s1"%(CurrentMonthLock,PreviousMonthLock,PreviousYearLock,PostedPrevMonth)
							db.session.add(BranchObj)

					# Check if it is transaction for previous month 
					elif TranDate <= LastMonthEnd and TranDate > PrevLastMonthEnd:
						if PreviousMonthLock == "0":
							flash(msg_error + "Branch %s was locked previous month transaction." %Branch)
							mktmessage.setLogError("Branch %s was locked previous month transaction." %Branch)

						else:
							ConBal = updateConsoleBackDate(ConBal, TranDate, Amount, LCYAmount, BalType, DrCr)
							BranchObj.ReportLocked = "%s%s%s1%s"%(CurrentMonthLock,PreviousMonthLock,PreviousYearLock,PostedPrevYear)
							db.session.add(BranchObj)

					else:
						flash(msg_error + "Transaction Date allows current month and previous month only.")
						mktmessage.setLogError("Transaction Date allows current month and previous month only.")

				else:
					mktmessage.setLogError('ReportLocked is incorrect')

			else:
				mktmessage.setLogError("Branch %s not found." %Branch)

			db.session.add(ConBal)
			
		else:
			mktmessage.setLogError('Category not found.')

	except Exception, e:
		mktmessage.setLogError(str(e))

def calculateDrCrAmount(ConBal, Amount, BalType, DrCr):

	return Decimal(ConBal) + Decimal(Amount) if BalType == DrCr else Decimal(ConBal) - Decimal(Amount)

def updateConsoleCurrentDate(ConBal, Amount, LCYAmount, BalType, DrCr):
	ConBal.Balance 			=	calculateDrCrAmount(ConBal.Balance, Amount, BalType, DrCr)
	ConBal.YTDBal 			=	calculateDrCrAmount(ConBal.YTDBal, Amount, BalType, DrCr)
	ConBal.CurrentMonthBal 	=	calculateDrCrAmount(ConBal.CurrentMonthBal, Amount, BalType, DrCr)

	ConBal.LCYBalance 		=	calculateDrCrAmount(ConBal.LCYBalance, LCYAmount, BalType, DrCr)
	ConBal.LCYYTDBal 		=	calculateDrCrAmount(ConBal.LCYYTDBal, LCYAmount, BalType, DrCr)
	ConBal.LCYCurrentMonthBal =	calculateDrCrAmount(ConBal.LCYCurrentMonthBal, LCYAmount, BalType, DrCr)

	return ConBal

def updateConsolePrevYear(ConBal, Amount, LCYAmount, BalType, DrCr, IsFirstMonthOfYear):
	ConBal.Balance 				=	calculateDrCrAmount(ConBal.Balance, Amount, BalType, DrCr)
	ConBal.PrevYearBal 			=	calculateDrCrAmount(ConBal.PrevYearBal, Amount, BalType, DrCr)
	ConBal.PrevMonthBal 		=	calculateDrCrAmount(ConBal.PrevMonthBal, Amount, BalType, DrCr)
	ConBal.CurrentPrevYearBal 	=	calculateDrCrAmount(ConBal.CurrentPrevYearBal, Amount, BalType, DrCr)

	ConBal.LCYBalance 				=	calculateDrCrAmount(ConBal.LCYBalance, LCYAmount, BalType, DrCr)
	ConBal.LCYPrevYearBal 			=	calculateDrCrAmount(ConBal.LCYPrevYearBal, LCYAmount, BalType, DrCr)
	ConBal.LCYPrevMonthBal 			=	calculateDrCrAmount(ConBal.LCYPrevMonthBal, LCYAmount, BalType, DrCr)
	ConBal.LCYCurrentPrevYearBal 	=	calculateDrCrAmount(ConBal.LCYCurrentPrevYearBal, LCYAmount, BalType, DrCr)

	if IsFirstMonthOfYear:
		ConBal.CurrentPrevMonthBal 		=	calculateDrCrAmount(ConBal.CurrentPrevMonthBal, Amount, BalType, DrCr)
		ConBal.LCYCurrentPrevMonthBal	=	calculateDrCrAmount(ConBal.LCYCurrentPrevMonthBal, LCYAmount, BalType, DrCr)

	return ConBal

def updateConsoleBackDate(ConBal, TranDate, Amount, LCYAmount, BalType, DrCr):
	ConBal.YTDBal 				=	calculateDrCrAmount(ConBal.YTDBal, Amount, BalType, DrCr)
	ConBal.Balance 				=	calculateDrCrAmount(ConBal.Balance, Amount, BalType, DrCr)
	ConBal.PrevMonthBal 		=	calculateDrCrAmount(ConBal.PrevMonthBal, Amount, BalType, DrCr)
	ConBal.CurrentPrevMonthBal 	=	calculateDrCrAmount(ConBal.CurrentPrevMonthBal, Amount, BalType, DrCr)

	ConBal.LCYYTDBal 				=	calculateDrCrAmount(ConBal.LCYYTDBal, LCYAmount, BalType, DrCr)
	ConBal.LCYBalance 				=	calculateDrCrAmount(ConBal.LCYBalance, LCYAmount, BalType, DrCr)
	ConBal.LCYPrevMonthBal 			=	calculateDrCrAmount(ConBal.LCYPrevMonthBal, LCYAmount, BalType, DrCr)
	ConBal.LCYCurrentPrevMonthBal	=	calculateDrCrAmount(ConBal.LCYCurrentPrevMonthBal, LCYAmount, BalType, DrCr)

	return ConBal

def updateConsolePreCurrentPrevMonth(ConBal, Amount, LCYAmount, BalType, DrCr):
	ConBal.YTDBal 				=	calculateDrCrAmount(ConBal.YTDBal, Amount, BalType, DrCr)
	ConBal.Balance 				=	calculateDrCrAmount(ConBal.Balance, Amount, BalType, DrCr)
	ConBal.PrevMonthBal 		=	calculateDrCrAmount(ConBal.PrevMonthBal, Amount, BalType, DrCr)

	ConBal.LCYYTDBal 				=	calculateDrCrAmount(ConBal.LCYYTDBal, LCYAmount, BalType, DrCr)
	ConBal.LCYBalance 				=	calculateDrCrAmount(ConBal.LCYBalance, LCYAmount, BalType, DrCr)
	ConBal.LCYPrevMonthBal 			=	calculateDrCrAmount(ConBal.LCYPrevMonthBal, LCYAmount, BalType, DrCr)

	return ConBal

def getNewConsoleBalance(GL_KEYS, Branch, Currency):
	Console 	= 	MKT_CONSOL_BALANCE(
					ID 					=	GL_KEYS,
					Branch 				=	Branch,
					Currency 			=	Currency,
					PrevMonthBal 		=	0,
					CurrentPrevMonthBal =	0,
					CurrentMonthBal 	=	0,
					PrevYearBal 		= 	0,
					CurrentPrevYearBal 	=	0,
					YTDBal 				=	0,
					Balance 			=	0,

					LCYPrevMonthBal 		=	0,
					LCYCurrentPrevMonthBal 	=	0,
					LCYCurrentMonthBal 		=	0,
					LCYPrevYearBal 			= 	0,
					LCYCurrentPrevYearBal 	=	0,
					LCYYTDBal 				=	0,
					LCYBalance 				=	0
				)
	return Console

def isYearEnd(BankDateObj):
	BankDate 	= 	BankDateObj.SystemDate
	BankDate 	= 	str(BankDate)

	YearEnd 	= 	BankDateObj.NextYearEnd
	YearEnd 	= 	str(YearEnd)
	if BankDate == YearEnd:
		return True
	else:
		return False

def isMonthEnd(BankDateObj):
	BankDate 	= 	BankDateObj.SystemDate
	BankDate 	= 	str(BankDate)

	EndMonth 	= 	BankDateObj.NextMonthEnd
	EndMonth 	= 	str(EndMonth)
	if BankDate == EndMonth:
		return True
	else:
		return False
	
def updateEndMonthConsolBalance():
	try:
		# CHeck Condition with End Of Month or End Of Year
		BankDateObj 	= 	mktdate.getBankDateObj()
		RunEndMonth 	= 	isMonthEnd(BankDateObj)
		RunEndYear 		= 	isYearEnd(BankDateObj)

		if RunEndMonth:
			# Update current year profit/loss
			mktmonthend.updateEndMonthProfitLoss()

		if RunEndYear: # Check Year-end
			# Update prior year profit/loss
			mktmonthend.updateEndYearProfitLoss()
		
		db.session.commit()

	except:
		print ""
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def updateGLBalanceAllBranch():
	BranchObj 		=	MKT_BRANCH.query.all()
	for item in BranchObj:
		Branch 			=	item.ID
		# Update GL Balance
		print "GL is updating for %s." %Branch
		getTreeGLCode(Branch)


# @app.route("/Morakot/GetNetOperatingProfitLoss/", methods=['GET'])
# def getTestKey():

# 	Currency 	=	"KHR"
# 	Branch 		=	request.args.get('Branch') if 'Branch' in request.args else "HO"
# 	Period 		=	request.args.get('Period') if 'Period' in request.args else 0
# 	Test = getTransferSetting()
# 	Good = getReportSubTotal(Test[1], Test[3], Currency, Branch, Period)
# 	updateEndYearProfitLoss()

# 	# return "%s" %mktmoney.toMoney(Decimal(Good), mktmoney.getCurrencyObj(Currency))
# 	return "%s" %Test

def getGLRecord(GL_Code):
	try:

		Record = MKT_GL_MAPPING.query.get(GL_Code)
		return Record

	except:
		raise

def getConsolKeyList(GL_Code):
	try:

		Record = MKT_GL_MAPPING_DE.query.\
				 filter(MKT_GL_MAPPING_DE.ID == GL_Code).\
				 all()

		Key = []
		if Record:
			for item in Record:
				Key.append(item.ConsolKey)

		return Key

	except:
		raise

def getConsolKeyBal(ConsolKey, Branch, Field="Balance"):
	try:

		Record = MKT_CONSOL_BALANCE.query.\
				 filter(MKT_CONSOL_BALANCE.ID == str(ConsolKey)).\
				 filter(MKT_CONSOL_BALANCE.Branch == Branch).\
				 first()

		Balance = 0
		if Record:

			Balance = Decimal(getattr(Record, Field))

		return Balance

	except:
		raise

def getUpdateGLBalance(GL_Code, Branch, ConsolKeyObj="", GLKeyObj="", GLObj=""):
	try:

		Balance 				= 	0
		PrevMonthBal 			=	0
		CurrentPrevMonthBal 	=	0
		CurrentMonthBal 		=	0
		PrevYearBal 			=	0
		CurrentPrevYearBal 		=	0
		YTDBal 					=	0

		LCYBalance 				= 	0
		LCYPrevMonthBal 		=	0
		LCYCurrentPrevMonthBal 	=	0
		LCYCurrentMonthBal 		=	0
		LCYPrevYearBal 			=	0
		LCYCurrentPrevYearBal 	=	0
		LCYYTDBal 				=	0
		
		if GLObj:

			for row in GLObj:

				if row.ID == GL_Code:

					SubGLList = row.SubGL

					if SubGLList:

						SubGLList = str(SubGLList).split()

						for SubGLItem in SubGLList:

							getBalance 				=	getUpdateGLBalance(SubGLItem, Branch, ConsolKeyObj, GLKeyObj, GLObj)
							
							Balance 				= 	Decimal(Balance) 				+ Decimal(getBalance["Balance"])
							PrevMonthBal 			= 	Decimal(PrevMonthBal) 			+ Decimal(getBalance["PrevMonthBal"])
							CurrentPrevMonthBal 	=	Decimal(CurrentPrevMonthBal) 	+ Decimal(getBalance["CurrentPrevMonthBal"])
							CurrentMonthBal 		=	Decimal(CurrentMonthBal) 		+ Decimal(getBalance["CurrentMonthBal"])
							PrevYearBal 			=	Decimal(PrevYearBal) 			+ Decimal(getBalance["PrevYearBal"])
							CurrentPrevYearBal 		=	Decimal(CurrentPrevYearBal) 	+ Decimal(getBalance["CurrentPrevYearBal"])
							YTDBal 					=	Decimal(YTDBal) 				+ Decimal(getBalance["YTDBal"])

							LCYBalance 				= 	Decimal(LCYBalance) 				+ Decimal(getBalance["LCYBalance"])
							LCYPrevMonthBal 		= 	Decimal(LCYPrevMonthBal) 			+ Decimal(getBalance["LCYPrevMonthBal"])
							LCYCurrentPrevMonthBal 	=	Decimal(LCYCurrentPrevMonthBal) 	+ Decimal(getBalance["LCYCurrentPrevMonthBal"])
							LCYCurrentMonthBal 		=	Decimal(LCYCurrentMonthBal) 		+ Decimal(getBalance["LCYCurrentMonthBal"])
							LCYPrevYearBal 			=	Decimal(LCYPrevYearBal) 			+ Decimal(getBalance["LCYPrevYearBal"])
							LCYCurrentPrevYearBal 	=	Decimal(LCYCurrentPrevYearBal) 		+ Decimal(getBalance["LCYCurrentPrevYearBal"])
							LCYYTDBal 				=	Decimal(LCYYTDBal) 					+ Decimal(getBalance["LCYYTDBal"])

					else:

						if GLKeyObj:
							for item in GLKeyObj:
								if item.ID == GL_Code:
									for row1 in ConsolKeyObj:
										if row1.ID == item.ConsolKey and row1.Branch == Branch:

											Balance 				= 	Decimal(Balance) 				+ Decimal(row1.Balance)
											PrevMonthBal 			= 	Decimal(PrevMonthBal) 			+ Decimal(row1.PrevMonthBal)
											CurrentPrevMonthBal 	=	Decimal(CurrentPrevMonthBal) 	+ Decimal(row1.CurrentPrevMonthBal)
											CurrentMonthBal 		=	Decimal(CurrentMonthBal) 		+ Decimal(row1.CurrentMonthBal)
											PrevYearBal 			=	Decimal(PrevYearBal) 			+ Decimal(row1.PrevYearBal)
											CurrentPrevYearBal 		=	Decimal(CurrentPrevYearBal) 	+ Decimal(row1.CurrentPrevYearBal)
											YTDBal 					=	Decimal(YTDBal) 				+ Decimal(row1.YTDBal)

											LCYBalance 				= 	Decimal(LCYBalance) 				+ Decimal(row1.LCYBalance)
											LCYPrevMonthBal 		= 	Decimal(LCYPrevMonthBal) 			+ Decimal(row1.LCYPrevMonthBal)
											LCYCurrentPrevMonthBal 	=	Decimal(LCYCurrentPrevMonthBal) 	+ Decimal(row1.LCYCurrentPrevMonthBal)
											LCYCurrentMonthBal 		=	Decimal(LCYCurrentMonthBal) 		+ Decimal(row1.LCYCurrentMonthBal)
											LCYPrevYearBal 			=	Decimal(LCYPrevYearBal) 			+ Decimal(row1.LCYPrevYearBal)
											LCYCurrentPrevYearBal 	=	Decimal(LCYCurrentPrevYearBal) 		+ Decimal(row1.LCYCurrentPrevYearBal)
											LCYYTDBal 				=	Decimal(LCYYTDBal) 					+ Decimal(row1.LCYYTDBal)

		Results 	= 	{
							"Balance"				:	Balance,
							"PrevMonthBal"			:	PrevMonthBal,
							"CurrentPrevMonthBal"	:	CurrentPrevMonthBal,
							"CurrentMonthBal" 		:	CurrentMonthBal,
							"PrevYearBal" 			:	PrevYearBal,
							"CurrentPrevYearBal"	:	CurrentPrevYearBal,
							"YTDBal"				:	YTDBal,
							"LCYBalance"			:	LCYBalance,
							"LCYPrevMonthBal"		:	LCYPrevMonthBal,
							"LCYCurrentPrevMonthBal":	LCYCurrentPrevMonthBal,
							"LCYCurrentMonthBal" 	:	LCYCurrentMonthBal,
							"LCYPrevYearBal" 		:	LCYPrevYearBal,
							"LCYCurrentPrevYearBal"	:	LCYCurrentPrevYearBal,
							"LCYYTDBal"				:	LCYYTDBal
						}
		# print Results
		return Results

	except:
		raise

def getConsolBalanceDic():
	try:

		Record 	= MKT_CONSOL_BALANCE.query

		return Record

	except:
		raise

# @app.route("/Morakot/TestGL/", methods=['GET'])
# def getTestGL():
# 	try:
# 		Branch 		= 	session.get("ChangeBranch")
# 		Results 	=	[]
# 		getTreeGLCode(Branch)
# 		return ""

# 	except Exception, e:
# 		raise


def getTreeGLCode(Branch):
	try:
		# Start = time.time()
		Dic 		=	{}

		GlObj 		= 	db.session.query(
							MKT_GL_MAPPING.ID,
							MKT_GL_MAPPING.SubGL,
							MKT_GL_MAPPING.Currency,
							MKT_GL_MAPPING.BalanceType,
						).\
						filter(MKT_GL_MAPPING.SubGL == "").\
						all()

		if GlObj:
			GLMappingDE 		= db.session.query(MKT_GL_MAPPING_DE.ConsolKey)
			ConsolBalance 		= MKT_CONSOL_BALANCE.query

			for item in GlObj:
				# print "Key - %s" %item.ConsolKey
				Currency 	=	item.Currency
				ID 			=	item.ID
				BalanceType = 	item.BalanceType
				DetailObj 	=	GLMappingDE.\
								filter(MKT_GL_MAPPING_DE.ID == ID).\
								all()

				ConsolObj 	=	ConsolBalance.\
								filter(MKT_CONSOL_BALANCE.ID.in_(DetailObj)).\
								filter(MKT_CONSOL_BALANCE.Branch == Branch).\
								all()

				# Block Sum Balance for Sub GL
				if ConsolObj:
					ListBalance = [	'Balance',
									'CurrentMonthBal',
									'PrevMonthBal',
									'CurrentPrevMonthBal',
									'YTDBal',
									'CurrentPrevYearBal',
									'PrevYearBal',
									'LCYBalance',
									'LCYCurrentMonthBal',
									'LCYPrevMonthBal',
									'LCYCurrentPrevMonthBal',
									'LCYYTDBal',
									'LCYCurrentPrevYearBal',
									'LCYPrevYearBal']
					DicSumByBalance = defaultdict(Decimal)
					#Sum amount by balance
					for row in ConsolObj:
						for col in ListBalance:
							DicSumByBalance[col] += Decimal(getattr(row,col))
					DicSumByBalance.update({'Currency':Currency,'BalanceType':BalanceType})
					Dic.update({ID:DicSumByBalance})

				# End Block Sum
		if len(Dic) > 0:
			db.session.query(MKT_GL_BALANCE.ID).\
			filter(MKT_GL_BALANCE.Branch == Branch).\
			delete()

			for item in Dic:

				ObjInsert 	= 	MKT_GL_BALANCE(
									ID 						=	item,
									Branch 					=	Branch,
									Currency 				=	Dic[item]['Currency'],
									CurrentPrevMonthBal 	=	Dic[item]['CurrentPrevMonthBal'],
									PrevYearBal				=	Dic[item]['PrevYearBal'],
									YTDBal					=	Dic[item]['YTDBal'],
									PrevMonthBal 			=	Dic[item]['PrevMonthBal'],
									CurrentMonthBal 		= 	Dic[item]['CurrentMonthBal'],
									CurrentPrevYearBal		=	Dic[item]['CurrentPrevYearBal'],
									Balance 				=	Dic[item]['Balance'],
									LCYCurrentPrevMonthBal 	=	Dic[item]['LCYCurrentPrevMonthBal'],
									LCYPrevYearBal			=	Dic[item]['LCYPrevYearBal'],
									LCYYTDBal				=	Dic[item]['LCYYTDBal'],
									LCYPrevMonthBal 		=	Dic[item]['LCYPrevMonthBal'],
									LCYCurrentMonthBal 		= 	Dic[item]['LCYCurrentMonthBal'],
									LCYCurrentPrevYearBal	=	Dic[item]['LCYCurrentPrevYearBal'],
									LCYBalance 				=	Dic[item]['LCYBalance']
								)

				db.session.add(ObjInsert)

			getSubGLUpdate(Dic, Branch)
			# Commit once updated
			print "GL was successfully updated for %s." %Branch

		# EndTime = time.time() - Start
		# Text = "GL updated:%s seconds"%EndTime
		# print Text

		return ""

	except Exception, e:
		raise

def getSubGLUpdate(Dic, Branch):
	try:
		
		GlObj 		= 	db.session.query(
							MKT_GL_MAPPING.ID,
							MKT_GL_MAPPING.SubGL,
							MKT_GL_MAPPING.Currency,
							MKT_GL_MAPPING.BalanceType,
						).\
						filter(MKT_GL_MAPPING.SubGL != "").\
						all()

		CheckList 	=	{}
		Listed 		=	{}

		if GlObj:

			for item in GlObj:
				
				SubGLList 	=	item.SubGL
				ID 			=	item.ID
				Currency 	=	item.Currency
				MainBalanceType = item.BalanceType

				Balance 				=	0
				CurrentMonthBal 		=	0
				PrevMonthBal 			=	0
				CurrentPrevMonthBal 	=	0
				YTDBal 					=	0
				CurrentPrevYearBal 		=	0
				PrevYearBal 			=	0

				LCYBalance 				=	0				
				LCYCurrentMonthBal 		=	0				
				LCYPrevMonthBal 		=	0				
				LCYCurrentPrevMonthBal 	=	0				
				LCYYTDBal 				=	0				
				LCYCurrentPrevYearBal 	=	0				
				LCYPrevYearBal 			=	0

				CheckList.update({ID:str(SubGLList)})
				# print "CheckList",CheckList
				if SubGLList:
					SubGLList 	=	SubGLList.split()
					for val in SubGLList:
						
						if val in Dic:
							SubBalanceType = 	Dic[val]['BalanceType']
							# print 'MainBalanceType',MainBalanceType
							# print 'SubBalanceType',SubBalanceType

							# Block Sum Balance for Main GL
							if MainBalanceType == SubBalanceType :
						
								Balance 				+= Decimal(Dic[val]['Balance'])
								LCYBalance 				+= Decimal(Dic[val]['LCYBalance'])
								CurrentMonthBal 		+= Decimal(Dic[val]['CurrentMonthBal'])
								LCYCurrentMonthBal 		+= Decimal(Dic[val]['LCYCurrentMonthBal'])
								PrevMonthBal 			+= Decimal(Dic[val]['PrevMonthBal'])
								LCYPrevMonthBal 		+= Decimal(Dic[val]['LCYPrevMonthBal'])
								CurrentPrevMonthBal 	+= Decimal(Dic[val]['CurrentPrevMonthBal'])
								LCYCurrentPrevMonthBal 	+= Decimal(Dic[val]['LCYCurrentPrevMonthBal'])
								YTDBal 					+= Decimal(Dic[val]['YTDBal'])
								LCYYTDBal 				+= Decimal(Dic[val]['LCYYTDBal'])
								CurrentPrevYearBal 		+= Decimal(Dic[val]['CurrentPrevYearBal'])
								LCYCurrentPrevYearBal 	+= Decimal(Dic[val]['LCYCurrentPrevYearBal'])
								PrevYearBal 			+= Decimal(Dic[val]['PrevYearBal'])
								LCYPrevYearBal 			+= Decimal(Dic[val]['LCYPrevYearBal'])
							else:

								Balance 				-= Decimal(Dic[val]['Balance'])
								LCYBalance 				-= Decimal(Dic[val]['LCYBalance'])
								CurrentMonthBal 		-= Decimal(Dic[val]['CurrentMonthBal'])
								LCYCurrentMonthBal 		-= Decimal(Dic[val]['LCYCurrentMonthBal'])
								PrevMonthBal 			-= Decimal(Dic[val]['PrevMonthBal'])
								LCYPrevMonthBal 		-= Decimal(Dic[val]['LCYPrevMonthBal'])
								CurrentPrevMonthBal 	-= Decimal(Dic[val]['CurrentPrevMonthBal'])
								LCYCurrentPrevMonthBal 	-= Decimal(Dic[val]['LCYCurrentPrevMonthBal'])
								YTDBal 					-= Decimal(Dic[val]['YTDBal'])
								LCYYTDBal 				-= Decimal(Dic[val]['LCYYTDBal'])
								CurrentPrevYearBal 		-= Decimal(Dic[val]['CurrentPrevYearBal'])
								LCYCurrentPrevYearBal 	-= Decimal(Dic[val]['LCYCurrentPrevYearBal'])
								PrevYearBal 			-= Decimal(Dic[val]['PrevYearBal'])
								LCYPrevYearBal 			-= Decimal(Dic[val]['LCYPrevYearBal'])

				# Add element to Dic
				Listed.update({ID:{
					'Currency':Currency,
					'Balance':str(Balance),
					'LCYBalance':str(LCYBalance),
					'CurrentMonthBal':str(CurrentMonthBal),
					'LCYCurrentMonthBal':str(LCYCurrentMonthBal),
					'PrevMonthBal':str(PrevMonthBal),
					'LCYPrevMonthBal':str(LCYPrevMonthBal),
					'CurrentPrevMonthBal':str(CurrentPrevMonthBal),
					'LCYCurrentPrevMonthBal':str(LCYCurrentPrevMonthBal),
					'YTDBal':str(YTDBal),
					'LCYYTDBal':str(LCYYTDBal),
					'CurrentPrevYearBal':str(CurrentPrevYearBal),
					'LCYCurrentPrevYearBal':str(LCYCurrentPrevYearBal),
					'PrevYearBal':str(PrevYearBal),
					'LCYPrevYearBal':str(LCYPrevYearBal)
				}})
		# print "Listed",Listed
		if len(Listed) > 0:
			GLBalance = MKT_GL_BALANCE.query
			for item in Listed:

				# print "- %s => %s = %s" %(item, CheckList[item], Listed[item]['Balance'])
				# db.session.query(MKT_GL_BALANCE.ID).\
				# filter(MKT_GL_BALANCE.ID == item).\
				# filter(MKT_GL_BALANCE.Branch == Branch).\
				# delete()
				
				SubGLListUpdate =	getLastGLBalance(item, CheckList[item], Listed)

				GL_BAL 	= 	GLBalance.\
							filter(MKT_GL_BALANCE.ID == item).\
							filter(MKT_GL_BALANCE.Branch == Branch).\
							first()

				if GL_BAL:
					# print "i am here in GL_BAL"
					GL_BAL.Balance 				= 	Dic[item]['Balance']
					GL_BAL.PrevMonthBal			= 	Dic[item]['PrevMonthBal']
					GL_BAL.CurrentPrevMonthBal 	= 	Dic[item]['CurrentPrevMonthBal']
					GL_BAL.CurrentMonthBal 		= 	Dic[item]['CurrentMonthBal']
					GL_BAL.PrevYearBal 			=	Dic[item]['PrevYearBal']
					GL_BAL.CurrentPrevYearBal 	=	Dic[item]['CurrentPrevYearBal']
					GL_BAL.YTDBal 				= 	Dic[item]['YTDBal']

					GL_BAL.LCYCurrentPrevMonthBal 	=	Dic[item]['LCYCurrentPrevMonthBal']
					GL_BAL.LCYPrevYearBal			=	Dic[item]['LCYPrevYearBal']
					GL_BAL.LCYYTDBal				=	Dic[item]['LCYYTDBal']
					GL_BAL.LCYPrevMonthBal 			=	Dic[item]['LCYPrevMonthBal']
					GL_BAL.LCYCurrentMonthBal 		= 	Dic[item]['LCYCurrentMonthBal']
					GL_BAL.LCYCurrentPrevYearBal	=	Dic[item]['LCYCurrentPrevYearBal']
					GL_BAL.LCYBalance 				=	Dic[item]['LCYBalance']

					db.session.add(GL_BAL)

				else:
					# print "not found GL_BAL"
					ObjInsert 	= 	MKT_GL_BALANCE(
										ID 						=	item,
										Branch 					=	Branch,
										Currency 				=	SubGLListUpdate[item]['Currency'],
										CurrentPrevMonthBal 	=	SubGLListUpdate[item]['CurrentPrevMonthBal'],
										PrevYearBal				=	SubGLListUpdate[item]['PrevYearBal'],
										YTDBal					=	SubGLListUpdate[item]['YTDBal'],
										PrevMonthBal 			=	SubGLListUpdate[item]['PrevMonthBal'],
										CurrentMonthBal 		= 	SubGLListUpdate[item]['CurrentMonthBal'],
										CurrentPrevYearBal		=	SubGLListUpdate[item]['CurrentPrevYearBal'],
										Balance 				=	SubGLListUpdate[item]['Balance'],
										LCYCurrentPrevMonthBal 	=	SubGLListUpdate[item]['LCYCurrentPrevMonthBal'],
										LCYPrevYearBal			=	SubGLListUpdate[item]['LCYPrevYearBal'],
										LCYYTDBal				=	SubGLListUpdate[item]['LCYYTDBal'],
										LCYPrevMonthBal 		=	SubGLListUpdate[item]['LCYPrevMonthBal'],
										LCYCurrentMonthBal 		= 	SubGLListUpdate[item]['LCYCurrentMonthBal'],
										LCYCurrentPrevYearBal	=	SubGLListUpdate[item]['LCYCurrentPrevYearBal'],
										LCYBalance 				=	SubGLListUpdate[item]['LCYBalance']
									)

					db.session.add(ObjInsert)

		return Listed

	except Exception, e:
		raise

def getLastGLBalance(Value, CheckList, ListValue):
	try:

		Result 		=	{}

		if CheckList:

			Currency 				=	""
			Balance 				= 	Decimal(ListValue[Value]['Balance'])
			LCYBalance 				= 	Decimal(ListValue[Value]['LCYBalance'])
			CurrentMonthBal 		= 	Decimal(ListValue[Value]['CurrentMonthBal'])
			LCYCurrentMonthBal 		= 	Decimal(ListValue[Value]['LCYCurrentMonthBal'])
			PrevMonthBal 			= 	Decimal(ListValue[Value]['PrevMonthBal'])
			LCYPrevMonthBal 		= 	Decimal(ListValue[Value]['LCYPrevMonthBal'])
			CurrentPrevMonthBal 	= 	Decimal(ListValue[Value]['CurrentPrevMonthBal'])
			LCYCurrentPrevMonthBal 	= 	Decimal(ListValue[Value]['LCYCurrentPrevMonthBal'])
			YTDBal 					= 	Decimal(ListValue[Value]['YTDBal'])
			LCYYTDBal 				= 	Decimal(ListValue[Value]['LCYYTDBal'])
			CurrentPrevYearBal 		= 	Decimal(ListValue[Value]['CurrentPrevYearBal'])
			LCYCurrentPrevYearBal 	= 	Decimal(ListValue[Value]['LCYCurrentPrevYearBal'])
			PrevYearBal 			= 	Decimal(ListValue[Value]['PrevYearBal'])
			LCYPrevYearBal 			= 	Decimal(ListValue[Value]['LCYPrevYearBal'])
			CheckList 				= 	CheckList.split()
			Currency 				= 	ListValue[Value]['Currency']
			for item in CheckList:
				if item in ListValue:
					
					Balance 				+= Decimal(ListValue[item]['Balance'])
					LCYBalance 				+= Decimal(ListValue[item]['LCYBalance'])
					CurrentMonthBal 		+= Decimal(ListValue[item]['CurrentMonthBal'])
					LCYCurrentMonthBal 		+= Decimal(ListValue[item]['LCYCurrentMonthBal'])
					PrevMonthBal 			+= Decimal(ListValue[item]['PrevMonthBal'])
					LCYPrevMonthBal 		+= Decimal(ListValue[item]['LCYPrevMonthBal'])
					CurrentPrevMonthBal 	+= Decimal(ListValue[item]['CurrentPrevMonthBal'])
					LCYCurrentPrevMonthBal 	+= Decimal(ListValue[item]['LCYCurrentPrevMonthBal'])
					YTDBal 					+= Decimal(ListValue[item]['YTDBal'])
					LCYYTDBal 				+= Decimal(ListValue[item]['LCYYTDBal'])
					CurrentPrevYearBal 		+= Decimal(ListValue[item]['CurrentPrevYearBal'])
					LCYCurrentPrevYearBal 	+= Decimal(ListValue[item]['LCYCurrentPrevYearBal'])
					PrevYearBal 			+= Decimal(ListValue[item]['PrevYearBal'])
					LCYPrevYearBal 			+= Decimal(ListValue[item]['LCYPrevYearBal'])
					# print "==> %s = %s" %(item, ListValue[item]['Balance'])

			Result.update({Value:{
				'Currency':Currency,
				'Balance':str(Balance),
				'LCYBalance':str(LCYBalance),
				'CurrentMonthBal':str(CurrentMonthBal),
				'LCYCurrentMonthBal':str(LCYCurrentMonthBal),
				'PrevMonthBal':str(PrevMonthBal),
				'LCYPrevMonthBal':str(LCYPrevMonthBal),
				'CurrentPrevMonthBal':str(CurrentPrevMonthBal),
				'LCYCurrentPrevMonthBal':str(LCYCurrentPrevMonthBal),
				'YTDBal':str(YTDBal),
				'LCYYTDBal':str(LCYYTDBal),
				'CurrentPrevYearBal':str(CurrentPrevYearBal),
				'LCYCurrentPrevYearBal':str(LCYCurrentPrevYearBal),
				'PrevYearBal':str(PrevYearBal),
				'LCYPrevYearBal':str(LCYPrevYearBal)
			}})

		return Result

	except:
		raise

def getGLKeyObj():
	try:

		Record = MKT_GL_MAPPING_DE.query

		return Record

	except:
		raise
		
def getGLRecordObj():
	try:

		return MKT_GL_MAPPING.query

	except:
		raise

def setGLBalance(Branch=""):
	try:

		BankDate 		= 	mktdate.getBankDate()
		BankDate 		= 	str(BankDate)
		Day 			= 	BankDate.split("-")[2]
		Day 			= 	Day.strip()

		EndMonth 		= 	mktdate.getBankDateObj().NextMonthEnd
		EndMonth 		= 	str(EndMonth)
		DayEndMonth 	= 	EndMonth.split("-")[2]
		DayEndMonth 	= 	DayEndMonth.strip()

		YearEnd 		=	mktdate.getBankDateObj().NextYearEnd
		DayEndYear 		=	str(YearEnd).split("-")[2]
		DayEndYear 		=	DayEndYear.strip()

		GL_MAPPING 		= 	MKT_GL_MAPPING.query.\
							order_by(asc(MKT_GL_MAPPING.ID)).\
							all()

		ConsolKeyObj 	=	getConsolBalanceDic()
		GLKeyObj 		=	getGLKeyObj()
		GLObj 			=	getGLRecordObj()

		if GL_MAPPING:
			for row in GL_MAPPING:

				Currency 			= 	row.Currency
				GL_Code 			= 	row.ID
				# getBalance 			=	getUpdateGLBalance(GL_Code, Branch, ConsolKeyObj, GLKeyObj, GLObj)
				
				# Balance 				= 	getBalance["Balance"]
				# PrevMonthBal 			= 	getBalance["PrevMonthBal"]
				# CurrentPrevMonthBal 	=	getBalance["CurrentPrevMonthBal"]
				# CurrentMonthBal 		=	getBalance["CurrentMonthBal"]
				# PrevYearBal 			=	getBalance["PrevYearBal"]
				# CurrentPrevYearBal 		=	getBalance["CurrentPrevYearBal"]
				# YTDBal 					=	getBalance["YTDBal"]

				# LCYBalance 				= 	getBalance["LCYBalance"]
				# LCYPrevMonthBal 		= 	getBalance["LCYPrevMonthBal"]
				# LCYCurrentPrevMonthBal 	=	getBalance["LCYCurrentPrevMonthBal"]
				# LCYCurrentMonthBal 		=	getBalance["LCYCurrentMonthBal"]
				# LCYPrevYearBal 			=	getBalance["LCYPrevYearBal"]
				# LCYCurrentPrevYearBal 	=	getBalance["LCYCurrentPrevYearBal"]
				# LCYYTDBal 				=	getBalance["LCYYTDBal"]

				Balance 				= 	0
				PrevMonthBal 			= 	0
				CurrentPrevMonthBal 	=	0
				CurrentMonthBal 		=	0
				PrevYearBal 			=	0
				CurrentPrevYearBal 		=	0
				YTDBal 					=	0

				LCYBalance 				= 	0
				LCYPrevMonthBal 		= 	0
				LCYCurrentPrevMonthBal 	=	0
				LCYCurrentMonthBal 		=	0
				LCYPrevYearBal 			=	0
				LCYCurrentPrevYearBal 	=	0
				LCYYTDBal 				=	0

				GL_BAL 	= 	MKT_GL_BALANCE.query.\
							filter(MKT_GL_BALANCE.ID == GL_Code).\
							filter(MKT_GL_BALANCE.Branch == Branch).\
							first()

				if not GL_BAL:
					
					Insert = MKT_GL_BALANCE(
								ID 						=	GL_Code,
								Branch 					=	Branch,
								Currency 				=	Currency,
								CurrentPrevMonthBal 	=	Decimal(CurrentPrevMonthBal),
								PrevYearBal				=	Decimal(PrevYearBal),
								YTDBal					=	Decimal(YTDBal),
								PrevMonthBal 			=	Decimal(PrevMonthBal),
								CurrentMonthBal 		= 	Decimal(CurrentMonthBal),
								CurrentPrevYearBal		=	Decimal(CurrentPrevYearBal),
								Balance 				=	Decimal(Balance),
								LCYCurrentPrevMonthBal 	=	Decimal(LCYCurrentPrevMonthBal),
								LCYPrevYearBal			=	Decimal(LCYPrevYearBal),
								LCYYTDBal				=	Decimal(LCYYTDBal),
								LCYPrevMonthBal 		=	Decimal(LCYPrevMonthBal),
								LCYCurrentMonthBal 		= 	Decimal(LCYCurrentMonthBal),
								LCYCurrentPrevYearBal	=	Decimal(LCYCurrentPrevYearBal),
								LCYBalance 				=	Decimal(LCYBalance)
							 )
					db.session.add(Insert)
					
				else:

					GL_BAL.Balance 				= 	Decimal(Balance)
					GL_BAL.PrevMonthBal			= 	Decimal(PrevMonthBal)
					GL_BAL.CurrentPrevMonthBal 	= 	Decimal(CurrentPrevMonthBal)
					GL_BAL.CurrentMonthBal 		= 	Decimal(CurrentMonthBal)
					GL_BAL.PrevYearBal 			=	Decimal(PrevYearBal)
					GL_BAL.CurrentPrevYearBal 	=	Decimal(CurrentPrevYearBal)
					GL_BAL.YTDBal 				= 	Decimal(YTDBal)

					GL_BAL.LCYCurrentPrevMonthBal 	=	Decimal(LCYCurrentPrevMonthBal)
					GL_BAL.LCYPrevYearBal			=	Decimal(LCYPrevYearBal)
					GL_BAL.LCYYTDBal				=	Decimal(LCYYTDBal)
					GL_BAL.LCYPrevMonthBal 			=	Decimal(LCYPrevMonthBal)
					GL_BAL.LCYCurrentMonthBal 		= 	Decimal(LCYCurrentMonthBal)
					GL_BAL.LCYCurrentPrevYearBal	=	Decimal(LCYCurrentPrevYearBal)
					GL_BAL.LCYBalance 				=	Decimal(LCYBalance)

					db.session.add(GL_BAL)

				db.session.commit()
				
		else:
			print "GL mapping not found."

	except:
		db.session.rollback()
		raise

def getVerifiedGL():
	try:
		CategoryObj = MKT_CATEGORY.query
		ConsolObj = db.session.query(MKT_CONSOL_BALANCE.ID.label('ConsolKey'), MKT_CONSOL_BALANCE.Balance, MKT_CONSOL_BALANCE.Currency).\
				  filter(~MKT_CONSOL_BALANCE.ID.in_(db.session.query(MKT_GL_MAPPING_DE.ConsolKey))).\
				  filter(MKT_CONSOL_BALANCE.Balance != 0).\
				  all()
		RecordRow = getVerifiedMapping()
		
		if ConsolObj:
			for row in ConsolObj:
				RecordCol 	= {}
				ConsolKey 	= row.ConsolKey
				Currency 	= row.Currency
				Balance 	= mktmoney.toMoney(float(row.Balance),mktmoney.getCurrencyObj(Currency))
				Category 	= str(str(ConsolKey).split('.')[0])
				ConsoleCateogry = CategoryObj.get(Category)
				
				Description = ConsoleCateogry.Description if ConsoleCateogry else ''
				Message 	= "Keys have not been mapped with balance %s"%Balance

				RecordCol.update({'ID'		:'%s  %s'%(ConsolKey,Description),
								  'Message'	:Message})
				RecordRow.append(RecordCol)

		GLMappingObj = MKT_GL_MAPPING.query.filter(MKT_GL_MAPPING.Branch != 'HO')
		GLMappingDeObj = MKT_GL_MAPPING_DE.query.filter(MKT_GL_MAPPING_DE.Branch != 'HO')

		if GLMappingObj:

			for row in GLMappingObj:

				Message = 'GL Mapping Main with wrong Branch: %s' % row.Branch
				RecordCol = {
					'ID':'%s %s' %(row.ID, row.Description),
					'Message': Message
				}

				RecordRow.append(RecordCol)

		if GLMappingDeObj:

			for row in GLMappingDeObj:

				Message = 'GL Mapping Detail with wrong Branch: %s' % row.Branch
				GLMainObj = MKT_GL_MAPPING.query.get(row.ID)
				RecordCol = {
					'ID':'%s %s' %(row.ID, GLMainObj.Description),
					'Message': Message
				}

				RecordRow.append(RecordCol)

		return RecordRow

	except:
		raise

def getVerifiedMapping():
	RecordRow = []
	CategoryObj = MKT_CATEGORY.query
	GLMapping 	= MKT_GL_MAPPING.query
	GLMappingDe = MKT_GL_MAPPING_DE.query
	
	for row in GLMapping:

		Message 	= []
		RecordCol 	= {}
		GLID 		= row.ID
		Description = row.Description
		SubGL 		= row.SubGL
		FilterGLDe  = GLMappingDe.filter(MKT_GL_MAPPING_DE.ID==GLID).all()
		if FilterGLDe:

			for col in FilterGLDe:

				ConsolKey 		= col.ConsolKey
				GLCategory 		= col.GLCategory #Category
				if GLCategory:
					GLCategoryObj 	= CategoryObj.get(GLCategory)
					CheckGLKey 		= mktaccounting.checkGLKey(ConsolKey, GLCategory, row.Currency, GLID)
				else:
					CheckGLKey 	  = ['']
					GLCategoryObj = ''
				if not GLCategoryObj and not SubGL:
					Message.append('Category %s not found'%GLCategory)
				else:
					if not CheckGLKey[0] and not SubGL:
						Message.append('Console Key '+CheckGLKey[1])
		else:
				
			if not SubGL:
				Message.append('GL %s not found console key')
		
		if Message:
			GLID 	= "<a href='javascript:void(0)' onClick=ClickEdit('GL','GL','%s')><u>%s</u></a>"%(GLID,GLID)
			Message = ', '.join(Message)
			RecordCol.update({'ID'		:Markup('%s - %s'%(GLID,Description)),
							  'Message'	:Message})
			RecordRow.append(RecordCol)

	MainCategory = db.session.query(MKT_CONSOL_BALANCE.ID,
									MKT_CONSOL_BALANCE.Branch,
									MKT_CONSOL_BALANCE.Currency,
									MKT_GL_MAPPING.ID.label('GL'),
									MKT_GL_MAPPING.Description,
									MKT_CONSOL_BALANCE.Balance).\
								filter(MKT_CONSOL_BALANCE.Balance > 0).\
								filter(MKT_GL_MAPPING.SubGL != '').\
								join(MKT_GL_MAPPING_DE,MKT_GL_MAPPING_DE.ConsolKey == MKT_CONSOL_BALANCE.ID).\
								join(MKT_GL_MAPPING, MKT_GL_MAPPING.ID == MKT_GL_MAPPING_DE.ID).\
								order_by(MKT_CONSOL_BALANCE.ID.asc(),MKT_CONSOL_BALANCE.Branch.asc(),)
	
	for row in MainCategory:
		GLID 		= row.GL
		Currency 	= row.Currency
		Balance 	= mktmoney.toMoney(float(row.Balance),mktmoney.getCurrencyObj(Currency))
		GLID 	= "<a href='javascript:void(0)' onClick=ClickEdit('GL','GL','%s')><u>%s</u></a>"%(GLID,GLID)
		Message = "Main GL can have balance from its Sub GLs only. You need to adjustment to Sub GLs. %s - %s" %(row.Branch,Balance)
		Description = row.Description
		RecordCol = {'ID'		:Markup('%s - %s'%(GLID,Description)),
					 'Message'	:Message}
		RecordRow.append(RecordCol)
	
	return RecordRow

def getReportSubTotal(Report, LineNumber, Currency, Branch, Period, GLTable='', GLObj='', FCY=False, NBC=False):
	try:
		Balance  = 0

		if LineNumber.find('>') != -1:
			NewStr      = LineNumber.split('>')
			if len(NewStr) >= 1:
				FirstStr    =   NewStr[0]
				SecondStr   =   NewStr[1]
				LineNumber  =   ""
				SecondStr   =   int(SecondStr) + 1
				
				for i in range(int(FirstStr), int(SecondStr)):
					LineNumber += str(i) + " "

		LineNumber  = LineNumber.split()

		for item in LineNumber:
			
			Option      = "+"
			if item.find("-") != -1:
				Option  = "-"
				item    = item.replace("-", "")

			if NBC:
				LineRecord  = getNBCLineValueRecord(Report, item)
			else:
				LineRecord  = getLineValueRecord(Report, item)

			if LineRecord:
				LineType = LineRecord.LineType
				if LineType.upper() == "ST":
					LineValue   = str(LineRecord.LineValue)
					SubLine     = getReportSubTotal(Report, LineValue, Currency, Branch, Period, GLTable=GLTable, GLObj=GLObj, FCY=FCY, NBC=NBC)
					SubLine     = SubLine.replace(",", "")
					Balance     = Decimal(Balance) + Decimal(SubLine) if Option == "+" else Decimal(Balance) - Decimal(SubLine)
				
				if LineType.upper() == "LD":
					GLBalance = Decimal(getGLValue(LineRecord.LineValue, Branch, Period, GLTable=GLTable, GLObj=GLObj, FCY=FCY))
					Balance   = Decimal(Balance) + GLBalance if Option == "+" else Decimal(Balance) - GLBalance

			else:
				print "Line detail not found."

		# return mktmoney.toMoney(float(Balance), mktmoney.getCurrencyObj(Currency))
		# print Report, LineNumber, Balance
		return str(Balance)

	except:
		raise

def getGLValue(ID, Branch, Period, Currency='', GLTable='', GLObj='', FCY=False):
	try:

		Balance     =   0
		ListID      =   ID.split()
		LCY         =   'LCY' if FCY == False else ''
		PeriodDict  =   {   '0':'%sCurrentMonthBal'%LCY,
							'1':'%sCurrentPrevMonthBal'%LCY,
							'2':'%sPrevMonthBal'%LCY,
							'3':'%sYTDBal'%LCY,
							'4':'%sCurrentPrevYearBal'%LCY,
							'5':'%sPrevYearBal'%LCY,
							'6':'%sBalance'%LCY
						}

		PeriodField     = PeriodDict[str(Period)]
		ListIDWithMinus =   []
		# get all gl id with minus into ListIDWithMinus for calculate all balance of line value
		for l in ListID:
			if l.find('-') != -1:
				ListIDWithMinus.append(l.replace('-',''))
		# get all gl that have balance within given ID List
		TempListID  =   ID.replace('-', '').split()
		if TempListID:    
			Record      =   GLObj.filter(GLTable.ID.in_(TempListID)).\
							filter(eval('GLTable.%s'%PeriodField) != 0)

			if Currency:
				Record  =   Record.filter(GLTable.Currency == Currency)

			if Branch.upper() != "ALL":
				BranchList = Branch.split()
				Record     = Record.filter(GLTable.Branch.in_(BranchList))

			# sum of balance in line report
			for item in Record:
				if item.ID in ListIDWithMinus:
					Balance = Decimal(Balance) - (Decimal(eval('item.%s'%PeriodField)))
					 
				else:
					Balance = Decimal(Balance) + (Decimal(eval('item.%s'%PeriodField)))
					
		return Balance

	except Exception, e:
		raise e
		return "%s" %e

def getLineValueRecord(Report, LineNumber):
	try:

		Record  =   MKT_LINE_REPORT_DE.query.\
					filter(MKT_LINE_REPORT_DE.Report == Report).\
					filter(MKT_LINE_REPORT_DE.LineNumber == LineNumber).\
					first()

		return Record

	except:
		raise

def getNBCLineValueRecord(Report, LineNumber):
	try:

		Record  =   MKT_NBC_REPORT_DE.query.\
					filter(MKT_NBC_REPORT_DE.Report == Report).\
					filter(MKT_NBC_REPORT_DE.LineNumber == LineNumber).\
					first()

		return Record

	except:
		raise

