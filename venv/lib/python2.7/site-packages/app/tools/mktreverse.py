'''
Created Date: 08 Apr 2015
Author: Theavuth NHEL + Sovankiry RIM

Modified by: 
Modified Date: 
All Right Reserved Morakot Technology Co.,Ltd.
Description : mktreverse.py Refer to use for reverse LIVE RECORD to HISTORY RECORD and DESTROY HISTORY 
'''
from flask 						import session
from app.mktcore.wtfimports 	import *
from app.urlregister 			import *
from app 						import app, db
from sqlalchemy 				import inspect

from app.User.models 			import MKT_USER_HIST
from app.FundTransfer.models 	import *
from app.JournalEntry.models 	import *
from app.Teller.models 			import *
from app.ForeignExchange.models import *

import mktaudit 				as mktaudit

import operator

class Struct:
    def __init__(self, **entries): 
        self.__dict__.update(entries)

class clsReverse():

	@staticmethod
	def setReverse(Table, ID, Table2=None):
		
		db.session.query(eval(Table)).filter_by(ID=ID).delete(synchronize_session="fetch")

def moveAUTHToHIST(LIVE, HIST,FilterField=""):
	try:
		dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(LIVE)
		for item in Mapper.attrs:						
			FieldInTable.append(item.key)
		

		if FilterField:
			QueryObj = LIVE.query.filter(getattr(LIVE, FilterField) == ID)
		else:
			QueryObj = LIVE.query

	
		for row in QueryObj:
			Dict 	= row.__dict__
			Dict.pop('_sa_instance_state',None)
			ID 		= Dict.get('ID')

			CheckDuplicate = True
			Curr 	= int(Dict.get('Curr',0))
			while CheckDuplicate :

				HistID = '%s@%s' %(ID,Curr)
				HistObj = HIST.query.get(HistID)
				if not HistObj:
					Dict.update({'ID':HistID})
					Dict.update({'Curr':Curr})
					CheckDuplicate = False
				else:
					Curr +=1
				if Curr > 9999:
					CheckDuplicate = False
			
			AddHistObj = HIST(**Dict)
			db.session.add(AddHistObj)

	except Exception, e:
		db.session.rollback()
		raise

def deleteRecord(Table):
	try:

		db.session.query(Table).delete()

	except:
		db.session.rollback()
		raise

def clearFTJETTtoHist():
	try:
		print "Data Purge processing..."
		print "Journal entry..."
		# Move MKT_JOURNAL_ENTRY record per day to MKT_JOURNAL_ENTRY_HIST
		moveAUTHToHIST(MKT_JOURNAL_ENTRY, MKT_JOURNAL_ENTRY_HIST)
		
		# Delete MKT_JOURNAL_ENTRY record per day
		deleteRecord(MKT_JOURNAL_ENTRY)
		print "Fund transfer..."
		# Move MKT_FUND_TRANSFER record per day to MKT_FUND_TRANSFER_HIST; Fund Transfer, Fund Deposit, Fund Withdrawal
		moveAUTHToHIST(MKT_FUND_TRANSFER, MKT_FUND_TRANSFER_HIST)

		# Delete MKT_FUND_TRANSFER record per day; Fund Transfer, Fund Deposit, Fund Withdrawal
		deleteRecord(MKT_FUND_TRANSFER)
		
		print "Teller..."
		# Move MKT_TELLER record per day to MKT_TELLER_HIST
		moveAUTHToHIST(MKT_TELLER, MKT_TELLER_HIST)
		# Delete MKT_TELLER record per day
		deleteRecord(MKT_TELLER)

		print "Foreign Exchange..."
		# Move MKT_FOREIGN_EXCHANGE record per day to MKT_FOREIGN_EXCHANGE_HIST
		moveAUTHToHIST(MKT_FOREIGN_EXCHANGE, MKT_FOREIGN_EXCHANGE_HIST)
		# Delete MKT_FOREIGN_EXCHANGE record per day
		deleteRecord(MKT_FOREIGN_EXCHANGE)

		db.session.commit()
		print "Data Purge was successfully."
		print ""

	except:
		db.session.rollback()
		raise