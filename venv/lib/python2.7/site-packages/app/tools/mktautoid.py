from app.mktcore.imports 			import *
from .. 							import app

from app.AutoID.models 				import MKT_SEQUENCE

import app.tools.mktdate 			as mktdate
import app.mktcore.constant
from app.VoucherType.models			import MKT_VOUCHER_REF
import app.mktcore.autoid 			as autoid
import app.tools.thread.mktthread as mktthread
import os

def setAutoID(AppName="", Digit=1, Table="",Format="Julian"):
	# ThreadObj   =   mktthread.CLS_CONNECTION_GUARD()
	# ThreadS     =   ThreadObj.ThreadS

	try:

		Auto 			= db.session.query(MKT_SEQUENCE).with_for_update().get(Table)
		BankDateObj 	= mktdate.getBankDateObj()
		Julian 			= BankDateObj.JulianDate
		if not Julian :
			Julian = mktdate.getJulianDay(BankDateObj.SystemDate)

		if Format == "Julian":
			PrefixFormat = Julian
		else:
			PrefixFormat = mktdate.formatDate(BankDateObj.SystemDate,Format)

		if not Auto:
			print os.getpid(),'Table',Table
			Auto 	= 	MKT_SEQUENCE(
							ID 			=	str(Table),
							Current		=	0,
							Increment	=	1
					  	)
			db.session.add(Auto)
			# ThreadS.add(Auto)
			# ThreadS.commit()

			Auto 	= 	db.session.query(MKT_SEQUENCE).with_for_update().get(Table)

		newVal 			= 	int(Auto.Current) + int(Auto.Increment)
		Auto.Current 	= 	newVal
		db.session.add(Auto)

		# ThreadS.add(Auto)
		# ThreadS.commit()

		strFormat 		= 	'{:0>' + str(Digit) + 'd}'
		newVal 			= 	strFormat.format(newVal)
		ID 				= 	str(AppName) + str(PrefixFormat) + str(newVal)
		db.session.commit()
		return ID

	except:
		db.session.rollback()
		db.session.close()
		# ThreadS.rollback()
		# ThreadS.close()
		raise
		# ThreadS.close()

def resetSequence():
	try:
		Auto = MKT_SEQUENCE.query.all()
		if Auto:
			for row in Auto:
				reset = MKT_SEQUENCE.query.get(row.ID)
				reset.Current = 0

				db.session.add(reset)

		return "Sequence is updated."
	except:
		db.session.rollback()
		raise

#This fun is for Insert Auto ID to the MKT_VOUCHER_REF
def setVoucherRef(VoucherID,Reference):
	try:
		InsertVoucherRef = MKT_VOUCHER_REF(
									ID 			= VoucherID,
									Reference 	= Reference)
		return db.session.add(InsertVoucherRef)

	except:
		db.session.rollback()
		raise

def getVoucherRef(VoucherName,Reference):
	try:
		ReferenceCheck = MKT_VOUCHER_REF.query.filter_by(Reference=Reference).all()
		if ReferenceCheck:
			for row in ReferenceCheck:
				RefID = row.ID
				if RefID == '':
					return 'Please Config AutoID for Voucher.'
				else:
					return RefID
		else:
			NewID = autoid.getAutoID(VoucherName)
			setVoucherRef(NewID,Reference)
			db.session.commit()
			return NewID
	except:
		db.session.rollback()
		raise