#master
from .. 							import app, db
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.Account.models 			import MKT_ACCOUNT
from app.AccProduct.models 			import MKT_ACC_PRODUCT
from app.Charge.models 				import MKT_CHARGE
from app.Tax.models					import MKT_TAX
from app.LoanContract.models 		import *
from app.PD.models 					import * 
from app.AssetClass.models 			import * 
from app.Provisioning.models 		import *
from decimal 						import *
from datetime 						import datetime, date, timedelta
from sqlalchemy 					import *
import time

import mktaccounting	 			as mktaccounting
import mktmoney 					as mktmoney
import mktdate						as mktdate
import mktparam 					as mktParam
import mktsetting 					as mktsetting
import mktloan 						as mktloan
import mktautoid 					as mktAutoID
import mktkey 						as mktkey
import mktmessage 					as mktmessage
import loantools.rescheduletools 	as mktreschedule
import mktbjstat 					as mktbjstat
import mktcharge 					as mktcharge

from app.mktcore.constant			import *
from app.BjStat.models 				import MKT_BJ_STAT
from app.ManualLoanCollection.models import *

import app.tools.thread.mktthread	as mktthread
from app.tools.thread.mktthread import *
import multiprocessing
import math
import os
import app.tools.mktjournaltool 	as mktjournaltool

try:
	""" 
		Dynamic import * from local project
		Process:
			1. Import from local project first
	"""
	ExtendModuleObj = mktsetting.ExtendModule()
	LocalPath 		= ExtendModuleObj.getLocalPath()
	CheckFile 		= ExtendModuleObj.isFileInLocal(FileName='tools/mktcustomscript.py')

	if LocalPath and CheckFile:
		ImportFile = "import %s.tools.mktcustomscript as CustomTool" % LocalPath
		exec(ImportFile)

except Exception as e:
	raise


def getTotODAmount(PDID):
	try:

		Amount 	= 0
		Obj 	= MKT_PAST_DUE.query.get(PDID)

		if Obj:
			Amount = Obj.TotPrincipalDue

		return Amount

	except:
		mktbjstat.makeLogFileOnError('Y')
		raise

def getPenatyRate(**kwargs):
	'''
		This function mainly used for get Penalty Rate with format base on it type
		F : Fix Based
		I : Interest Rate Based
		P : Percentage Base
		it will return Obj of PastDue based on LoanID, 
		PenaltyRate after cut out currency (USD0.04 => 0.04), PenaltyRateWithFormat: 0.04 % etc.
	'''
	try:
		Param = {}
		LoanID 		   	= 	kwargs['LoanID']
		LoanObj 		= 	MKT_LOAN_CONTRACT.query.get(LoanID)
		if not LoanObj:
			LoanObj 		= 	MKT_LOAN_CONTRACT_INAU.query.get(LoanID)
		if LoanObj:
			LoanProduct = LoanObj.LoanProduct
			Currency 	= LoanObj.Currency
			PDObj = mktParam.getPDParam(LoanProduct)
			if PDObj:
				PenaltyType = PDObj.PenType
				PenaltyRate = PDObj.PenaltyRate
				PenaltyRateList = PenaltyRate.split()
				Rate 			= '0'

				for item in PenaltyRateList:
					PenCurrency = item[0:3]
					if Currency == PenCurrency:				
						Rate 		= item[3:]		
								
				# F = Fixd Base
				if PenaltyType == "F":
					Param.update({"PenaltyRate": Rate,
								  "Type": Currency, 
								  "PenaltyRateWithFormat": mktmoney.toMoney(float(Rate), mktmoney.getCurrencyObj(Currency))
								})

				# I = Interest Rate Base
				elif PenaltyType == "I":
					Param.update({"PenaltyRate": Rate,
								  "Type": "%",
								  "PenaltyRateWithFormat": "%s %s" % (Rate, "%")
								})

				# P = Percentage Base
				elif PenaltyType == "P":
					Param.update({"PenaltyRate": Rate,
								  "Type": "%",
								  "PenaltyRateWithFormat": "%s %s" % (Rate, "%")
								})

				Param.update({"PDObj": PDObj})

		return Param

	except Exception as e:
		raise
	else:
		pass
	finally:
		pass

def setPD(ID="", Customer="", Currency="", Category="", PenaltyType="", PenaltyRate="", DueDate="", PD_Principal="", PD_Interest="", PD_Charge="", PD_Penalty="", NextRunDate="", LoanID="", Branch="", Param="",Installment="",ManualCollect=False,AccrIntOption=1):
	try:
		Status 			= 	"AUTH"
		Curr 			= 	'0'
		Inputter 		= 	'System'
		Createdon 		= 	mktdate.getDateTimeNow()
		Authorizer 		= 	'System'
		Authorizeon 	= 	mktdate.getDateTimeNow()

		PD = MKT_PAST_DUE.query.get(ID)

		if not PD:
			PD = MKT_PAST_DUE(
					Branch 			=	Branch,
					Status 			= 	Status,
					Curr 			= 	Curr,
					Inputter 		= 	Inputter,
					Createdon 		= 	Createdon,
					Authorizer 		= 	Authorizer,
					Authorizeon 	= 	Authorizeon,
					ID 				= 	ID,
					LoanID 			=	LoanID,
					Customer 		=	Customer,
					Currency 		=	Currency,
					Category 		=	Category,
					TotODAmount 	=	0,
					TotPrincipalDue	=	0,
					TotInterestDue	=	0,
					TotPenaltyDue	=	0,
					TotChargeDue	=	0,
					PenaltyType		=	PenaltyType,
					PenaltyRate		=	PenaltyRate
					
				 )
			db.session.add(PD)

			PD = MKT_PAST_DUE.query.get(ID)
		
		TotODAmount 		= 	float(PD_Principal) + float(PD_Interest) + float(PD_Charge) + float(PD_Penalty)
		PD.TotODAmount 		= 	float(PD.TotODAmount)  + float(TotODAmount)
		PD.TotPrincipalDue 	= 	float(PD.TotPrincipalDue) + float(PD_Principal)
		PD.TotInterestDue 	= 	float(PD.TotInterestDue) + float(PD_Interest)
		PD.TotPenaltyDue 	= 	float(PD.TotPenaltyDue) + float(PD_Penalty)
		PD.TotChargeDue 	= 	float(PD.TotChargeDue) + float(PD_Charge)

		db.session.add(PD)

		PD_DATE_ID = str(mktAutoID.setAutoID("PD", 10, "MKT_PD_DATE"))

		TotODAmount = float(PD_Principal) + float(PD_Interest) + float(PD_Charge) + float(PD_Penalty)
		SystemBankDate 	=	str(mktdate.getBankDate())
		NumDayDue = 1 
		if ManualCollect == True:
			NumDayDue 	= 	0 
			NextRunDate =	SystemBankDate

		PD_DATE = MKT_PD_DATE(
					Branch 			= 	Branch,
					Status 			= 	Status,
					Curr 			= 	Curr,
					Inputter 		= 	Inputter,
					Createdon 		= 	Createdon,
					Authorizer 		= 	Authorizer,
					Authorizeon 	= 	Authorizeon,
					ID 				= 	PD.ID,
					PDID 			=	PD_DATE_ID,
					DueDate 		=	DueDate,
					NumDayDue		=	NumDayDue,
					ODStatus 		=	'PRE',
					TotODAmount 	=	TotODAmount,
					OutAmount 		=	TotODAmount,
					PrincipalDue 	=	PD_Principal,
					OutPriAmount 	=	PD_Principal,
					InterestDue 	=	PD_Interest,
					OutIntAmount 	=	PD_Interest,
					PenaltyDue 		=	PD_Penalty,
					OutPenAmount 	=	PD_Penalty,
					ChargeDue 		=	PD_Charge,
					OutChgAmount 	=	PD_Charge,
					NextRunDate 	=	NextRunDate
				  )

		# return "Past due record was created for %s." %ID
		print_msg = "Past due record was created for %s." %ID
		mktmessage.msgOutputMsg(print_msg)

		if ManualCollect == False:
			# Update PD Status with default
			LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
			LoanProduct = LoanObj.LoanProduct
			updatePDStatus(PD_DATE,LoanProduct)
			if AccrIntOption == '2':
				updatePDInterest(LoanObj,PD_DATE_ID,SystemBankDate)
				calculateTotalPD(ID)

			# Update Penalty
			if 'PE' in Param:
				setPenalty(PD, LoanID, ID, PD_DATE_ID, DueDate)
		db.session.add(PD_DATE)


	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def subtractPDCollection(ID, PDID, ODStatus, PD_Penalty, PD_Charge, PD_Interest, PD_Principal):
	'''
	Edit By : Sovankiry Rim
	The function will return Repayment Status  and Past Due Amount Collection
	0: Not Yet Due 			(Orange)
	1: Past Due 			(Red)
	2: Partial Paid 		(Orange)
	3: Fully Paid On Time 	(Green)
	4: Fully Paid But Late 	(Blue)
	'''
	try:
		RepStatus 	= 1 #Default 1: Past Due
		Total 		= float(PD_Penalty) + float(PD_Charge) + float(PD_Interest) + float(PD_Principal)
		ClearPenalty = 0
		if Total > 0:
			PD_UPDATE = MKT_PAST_DUE.query.get(ID)
			if PD_UPDATE:
				PD_UPDATE.TotODAmount 		= float(PD_UPDATE.TotODAmount) - Total
				PD_UPDATE.TotPrincipalDue 	= float(PD_UPDATE.TotPrincipalDue) - float(PD_Principal)
				PD_UPDATE.TotInterestDue 	= float(PD_UPDATE.TotInterestDue) - float(PD_Interest)
				PD_UPDATE.TotPenaltyDue 	= float(PD_UPDATE.TotPenaltyDue) - float(PD_Penalty)
				PD_UPDATE.TotChargeDue 		= float(PD_UPDATE.TotChargeDue) - float(PD_Charge)
				# print "Update PD_UPDATE"
				db.session.add(PD_UPDATE)

				PastDueDateObj = MKT_PD_DATE.query.\
						  filter(MKT_PD_DATE.PDID == PDID).\
						  filter(MKT_PD_DATE.ID == ID).\
						  first()

				if PastDueDateObj:
					# print "Update PastDueDateObj"
					PDateTotODAmount =  PastDueDateObj.TotODAmount # Total Outstanding Amount Of Past Due Date

					PastDueDateObj.OutAmount 		= float(PastDueDateObj.OutAmount) - float(Total)
					PastDueDateObj.OutPriAmount 	= float(PastDueDateObj.OutPriAmount) - float(PD_Principal)
					PastDueDateObj.OutIntAmount 	= float(PastDueDateObj.OutIntAmount) - float(PD_Interest)
					PastDueDateObj.OutPenAmount 	= float(PastDueDateObj.OutPenAmount) - float(PD_Penalty)
					PastDueDateObj.OutChgAmount 	= float(PastDueDateObj.OutChgAmount) - float(PD_Charge)
					
					# Block Clear Penalty If Full Collection in Status PRE, GRA
					ClearPenalty = float(PastDueDateObj.OutAmount)
					if ODStatus in ['PRE','GRA']:
						OutPriAmount = float(mktmoney.formatNumber(PastDueDateObj.OutPriAmount,1,9).replace(',',''))
						OutIntAmount = float(mktmoney.formatNumber(PastDueDateObj.OutIntAmount,1,9).replace(',',''))
						if OutPriAmount == 0 and OutIntAmount == 0 and PastDueDateObj.OutPenAmount:
							PastDueDateObj.OutPenAmount = 0
							PastDueDateObj.PenaltyDue 	= 0
							PastDueDateObj.OutAmount 	= 0
							PD_UPDATE.TotODAmount 		= float(PD_UPDATE.TotODAmount) - ClearPenalty
							PD_UPDATE.TotPenaltyDue 	= float(PD_UPDATE.TotPenaltyDue) - ClearPenalty

							db.session.add(PD_UPDATE)

					OutAmount = float(mktmoney.formatNumber(PastDueDateObj.OutAmount,1,9).replace(',',''))
					# print OutAmount,OutAmount == 0,'wwwwwwwwwwwww%.14f %.14f'%(OutAmount,PastDueDateObj.OutAmount)
					if OutAmount == 0:
						RepStatus = 4 #4: Fully Paid But Late
					else:
						RepStatus = 2 #2: Partial Paid

					db.session.add(PastDueDateObj)

	

		return RepStatus,Total,ClearPenalty #1: Past Due,Total PD Collection, Amount Penalty

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def setNumDayDue(PDDateObj,SystemBankDate):
	try:
		#Fix late only penalty number of day still count
		if PDDateObj.OutPriAmount or PDDateObj.OutIntAmount or PDDateObj.OutChgAmount:
			From 			= PDDateObj.DueDate
			To 				= SystemBankDate
			NumOfDay 		= mktdate.getDateDiff(From, To)
			PDDateObj.NumDayDue 	= NumOfDay + 1
			db.session.add(PDDateObj)

		return ""

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def updatePDStatus(PastDueDateObj,LoanProduct="SYSTEM"):
	"""
		Calculate New Status Of PD.DATE accouding to number day due.

	"""
	try:

		PDParam = mktParam.getPDParam(LoanProduct)
		PRE  = int(PDParam.PRE)
		GRA  = int(PDParam.GRA)
		PDO  = int(PDParam.PDO)
		NAB  = int(PDParam.NAB)
	
	
		if PastDueDateObj:

			NumDayDue 	= int(PastDueDateObj.NumDayDue)  if PastDueDateObj.NumDayDue else int(1)
			Status 		= PastDueDateObj.ODStatus
			# By Default the status is PRE

			if NumDayDue >= GRA:
				Status = "GRA"

			if NumDayDue >= PDO:
				Status = "PDO"

			if NumDayDue >= NAB:
				Status = "NAB"

			# print "Before checkPDStatus",PastDueDateObj.ODStatus
			PastDueDateObj.ODStatus = Status
			# print "After checkPDStatus",PastDueDateObj.ODStatus
			db.session.add(PastDueDateObj)

		return ''

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def getOverDuePenaltyBase(PenCalBase,Principal,Interest,Charge,Penalty):
	'''
	Total Amount From Past due. We can exclude by any option by the setting
	'''
	PenCalBase 		= PenCalBase.split()
	PenCalBase 		= filter(None,PenCalBase)
	TotalPrincipal 	= 0
	TotalInterest 	= 0
	TotalCharge 	= 0
	TotalPenalty 	= 0
	TotalOverDue 	= 0

	for row in PenCalBase:
		if row == 'PR':
			TotalOverDue 	+= float(Principal) #	* float(CalValue) / float(100)
		elif row == 'IN':
			TotalOverDue 	+= float(Interest) 	#* float(CalValue) / float(100)
		elif row == 'CH':
			TotalOverDue 	+= float(Charge) 	#* float(CalValue) / float(100)
		elif row == 'PE':
			TotalOverDue 	+= float(Penalty) 	#* float(CalValue) / float(100)
	
	return TotalOverDue

def isCalPenaltyBase(PastDueDateObj,PenCalBase):
	PenCalBase 	= 	PenCalBase.split()
	Principal 	= 	PastDueDateObj.OutPriAmount
	Interest 	= 	PastDueDateObj.OutIntAmount
	Penalty 	= 	PastDueDateObj.OutPenAmount
	Charge 		= 	PastDueDateObj.OutChgAmount
	# print "Principal",Principal,'Interest',Interest,'Penalty',Penalty,'PenType',PenCalBase
	if 'PR' in PenCalBase:
		if Principal > 0 :
			return True

	if 'IN' in PenCalBase:
		if Interest > 0 :
			return True

	if 'PE' in PenCalBase:
		if Penalty > 0 :
			return True

	if 'CH' in PenCalBase:
		if Charge > 0 :
			return True 
	
	return False

def setPenalty(PastDueObj,LoanID,ID="",PDID="",DueDate=""):
	try:
		
		DoPenalty 	=	"Y"
		LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		if LoanObj:
			DoPenalty 	= LoanObj.Penalty
			LoanProduct = LoanObj.LoanProduct
			if DoPenalty == 'Y':

				#Get Loan Product
				Product 			= 	MKT_LOAN_PRODUCT.query.get(LoanObj.LoanProduct)
				InterestDayBasis 	= 	int(Product.IntDayBasis) if Product else 0

				PDParamObj 			=	mktParam.getPDParam(LoanProduct)
				PRE  				= 	PDParamObj.PRE
				GRA  				= 	PDParamObj.GRA
				PDO  				= 	PDParamObj.PDO
				NAB  				= 	PDParamObj.NAB
				PenCalBase 			= 	PDParamObj.PenCalBase
				Type 				= 	PDParamObj.PenType.strip()
				Rate 				= 	PDParamObj.PenaltyRate.strip()
				

				PastDueDateObj 	= 	MKT_PD_DATE.query.\
											filter(MKT_PD_DATE.ID == ID).\
											filter(MKT_PD_DATE.PDID == PDID).\
											filter(MKT_PD_DATE.DueDate == DueDate).\
											order_by(MKT_PD_DATE.DueDate.asc()).\
											first()


				NumDayDue 		= 	int(PastDueDateObj.NumDayDue)
				# print ""
				# print "************************"
				# print "|       Penalty        |"
				# print "************************"
				# print "Grace Period\t\t:%s"%GRA
				# print "Pre Grace Period\t:%s"%PRE
				if int(NumDayDue) < int(NAB):


					if PastDueDateObj:
						ID 			= 	PastDueDateObj.ID
						Currency 	= 	PastDueObj.Currency.strip()
						
						'''
						CalValue define for value calculator Penalty
						
						if Penalty Type Fixed Base
							The CalValue is fix amount for Penalty amount.

						if Penalty Type Interest Rate Base
							The CalValue refer to frequcy of interest rate per loan contract.

						if Penalty Type Percentage Base
							The CalValue refer to percentage value for calculator Penalty

						'''
						CalValue 	= 	0
						Principal 	= 	float(PastDueDateObj.OutPriAmount)
						Interest 	= 	float(PastDueDateObj.OutIntAmount)
						Penalty 	= 	float(PastDueDateObj.OutPenAmount)
						Charge 		= 	float(PastDueDateObj.OutChgAmount)
						
						Rate 		= 	Rate.split()
						Filter_Rate = 	[]
						# print "Rate\t\t\t:",Rate
						if len(Rate) > 0:
							Filter_Rate	= [item for item in Rate if str(Currency) in item]
						# print "Filter_Rate\t\t:",Filter_Rate
						if len(Filter_Rate) > 0:
							CalValue = str(Filter_Rate[0])
							# print "CalValue Filter_Rate\t:",Filter_Rate
							CalValue = float(CalValue[3:])
							# print "CalValue[3:]\t\t:",CalValue


						TotalPrincipal 	= float(0)
						TotalInterest 	= float(0)
						TotalCharge 	= float(0)
						TotalPenalty 	= float(0)
						PenaltyPerDay 	= float(0)
						#Penalty Type
						# F = Fixd Base
						if Type == 'F':
							checkPenaltyBase = isCalPenaltyBase(PastDueDateObj,PenCalBase)
							# print "Type\t:",Type
							# print "checkPenaltyBase",checkPenaltyBase
							PenaltyPerDay = CalValue if checkPenaltyBase else 0
							# print "PenaltyPerDay",PenaltyPerDay

						# I = Interest Rate Base
						elif Type == 'I':
							SystemBankDate 		= 	mktdate.getBankDate()

							# print "Type\t\t:",Type
							# Get Interest Rate from Loan Contract
							RatePerYear 		= 	float(LoanObj.IRR) if LoanObj.IRR else float(LoanObj.InterestRate)
							
							# We need to multiple Interest Rate with CalValue
							RatePerYear 		= 	RatePerYear * float(CalValue)

							# Get Total Amount Of Over Due taken from Penalty Cal Base
							TotalOverDue 		= 	getOverDuePenaltyBase(PenCalBase,Principal,Interest,Charge,Penalty)
							# print "TotalOverDue\t:",TotalOverDue
							
							# Call function InterestPerDay for Calculator Penalty Per Day
							PenaltyPerDay 		= 	mktreschedule.getInterestPerDay(RatePerYear,TotalOverDue,InterestDayBasis,SystemBankDate)
							
							# print "PenaltyPerDay\t:",PenaltyPerDay

						# P = Percentage Base
						elif Type == 'P':
							# print "Type\t:",Type
							if PenCalBase:
								
								PenCalBase = PenCalBase.split()
								
								for pen in PenCalBase:
									if pen == 'PR':
										TotalPrincipal 	= float(Principal) 	* float(CalValue) / float(100)
									elif pen == 'IN':
										TotalInterest 	= float(Interest) 	* float(CalValue) / float(100)
									elif pen == 'CH':
										TotalCharge 	= float(Charge) 	* float(CalValue) / float(100)
									else:
										TotalPenalty 	= float(Penalty) 	* float(CalValue) / float(100)
								
								PenaltyPerDay = TotalPrincipal + TotalInterest + TotalCharge + TotalPenalty

						# C = Custom Script Base
						# Update this kwargs
						elif Type == 'C':
							kwargs = {	
										"NumOfDayLate": 	NumDayDue,
										"PastDueDateObj":	PastDueDateObj,
										"Param":			Rate,
										"LoanObj":			LoanObj,
										"PenCalBase": 		PenCalBase
									}
							PenaltyPerDay = str(CustomTool.getCustomPastDuePenalty(**kwargs))

						# set amount of penaltyperday here
						TotalAmount = float(PenaltyPerDay)

						# print "Total Penalty\t:",TotalAmount
						# print "NumDayDue\t:",NumDayDue

						if int(NumDayDue) >= int(GRA):
							# print "NumDayDue >= GRA:"
							StrTotalAmount = mktmoney.toMoney(float(TotalAmount), mktmoney.getCurrencyObj(Currency))
							
							if StrTotalAmount and StrTotalAmount.find(',') != -1:

								StrTotalAmount = str(StrTotalAmount).replace(',', '')

							TotalAmount = float(StrTotalAmount)
							# print "TotalAmount\t:",TotalAmount
							TotPenaltyDue = float(PastDueObj.TotPenaltyDue) + float(TotalAmount)
							# print "Final Penalty\t:",TotPenaltyDue
							# Update MKT_PAST_DUE after Penalty is calculated
							PastDueObj.TotODAmount 			= 	float(PastDueObj.TotODAmount) + float(TotalAmount)
							PastDueObj.TotPenaltyDue 		= 	float(PastDueObj.TotPenaltyDue) + float(TotalAmount)
							db.session.add(PastDueObj)

							# PastDueDateObj = MKT_PD_DATE.query.\
							# 				filter(MKT_PD_DATE.PDID == PDID).\
							# 				first()
											
							# Update MKT_PD_DATE after Penalty is calculated
							PastDueDateObj.TotODAmount 	= 	float(PastDueDateObj.TotODAmount) + float(TotalAmount)
							PastDueDateObj.OutAmount 	= 	float(PastDueDateObj.OutAmount) + float(TotalAmount)
							PastDueDateObj.PenaltyDue 	= 	float(PastDueDateObj.PenaltyDue) + float(TotalAmount)
							PastDueDateObj.OutPenAmount = 	float(PastDueDateObj.OutPenAmount) + float(TotalAmount)
							# print "PenaltyDue \t:",PastDueDateObj.PenaltyDue 
							# print "OutPenAmount\t:",PastDueDateObj.OutPenAmount
							# print "************************"
							db.session.add(PastDueDateObj)
							# print "Total penalty amount: " + str(TotalAmount) + " for loan " + str(ID[2:])
							

				else:
					# print "No PD record."
					print_msg = "No PD record."
					mktmessage.msgOutputMsg(print_msg)


		return ""

	except Exception, e:
		print e
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def getPenaltyByDate(Date,PDID):
		
	Penalty 	= 	0
	RecordObj 	=	MKT_PD_DATE.query.\
					filter(MKT_PD_DATE.DueDate == Date).\
					filter(MKT_PD_DATE.ID == PDID ).\
					first()
	if RecordObj:
		Penalty 	=	RecordObj.PenaltyDue
	return Penalty
		
def getProvisioningAmount(AssClass, TotPrincipalDue, LoanType, MoreThanOneYear, NumDayDue,ClassifiedMode='',MinAssetClass=''):
	try:
		# print "*** getProvisioningAmount"
		# print AssClass,LoanType,MoreThanOneYear,NumDayDue
		Rate 	= 0
		Check 	= None
		ASS_PRO = MKT_ASSET_CLASS_PRO.query.\
				  filter(MKT_ASSET_CLASS_PRO.ID == str(AssClass)).\
				  filter(MKT_ASSET_CLASS_PRO.LoanType == str(LoanType)).\
				  filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(MoreThanOneYear)).\
				  all()

		if ASS_PRO:

			for item in ASS_PRO:
				Ass_OverDueFr 	= 	item.OverdueFr if item.OverdueFr else "0"
				Ass_OverdueTo	= 	item.OverdueTo if item.OverdueTo else "0"
				PercentagRate 	= 	float(item.ProvPerc) if item.ProvPerc else float(0)
				# print "From",item.OverdueFr,"To",item.OverdueTo,"PercentagRate",PercentagRate

				if str(Ass_OverdueTo).upper() == "UP" or str(Ass_OverdueTo) == "":
					# print "I am in Overdue To UP"
					if int(NumDayDue) >= int(Ass_OverDueFr):
						# print "A"
						Rate 	= float(TotPrincipalDue) * float(PercentagRate) / float(100)
						Check 	= 1
					else:
						if MinAssetClass:
							Rate 	= float(TotPrincipalDue) * float(PercentagRate) / float(100)
							Check 	= 1
				else:
					# print "I amnot in Overdue To UP"
					if int(NumDayDue) >= int(Ass_OverDueFr) and int(NumDayDue) <= int(Ass_OverdueTo):
						# print "B"
						Rate 	= float(TotPrincipalDue) * float(PercentagRate) / float(100)
						Check 	= 1
					else:
						if MinAssetClass:
							Rate 	= float(TotPrincipalDue) * float(PercentagRate) / float(100)
							Check 	= 1

				if ClassifiedMode:
					Rate 	= float(TotPrincipalDue) * float(PercentagRate) / float(100)
					Check 	= 1

				if Check:
					break

		return Rate

	except:
		mktbjstat.makeLogFileOnError('Y')
		raise

def getLoanAssetClass(NumDayDue, LoanType, MoreThanOneYear, ProductID):
	try:
		AssetClassObj 	= 	MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID.ilike('%-' + ProductID)).first()
		AssetPro 		= 	MKT_ASSET_CLASS_PRO.query.\
							order_by(MKT_ASSET_CLASS_PRO.ID.asc()).\
							filter(MKT_ASSET_CLASS_PRO.LoanType == str(LoanType)).\
							filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(MoreThanOneYear))

		if AssetClassObj:
			AssetPro 	=	AssetPro.filter(MKT_ASSET_CLASS_PRO.ID.ilike('%-' + ProductID)).all()
		else:
			AssetPro 	=	AssetPro.filter(~MKT_ASSET_CLASS_PRO.ID.ilike('%-%')).all()
			
		AssetClass = ""

		if not AssetPro:
			AssetPro = MKT_ASSET_CLASS_PRO.query.\
					   order_by(MKT_ASSET_CLASS_PRO.ID.asc()).\
					   filter(MKT_ASSET_CLASS_PRO.LoanType == str(LoanType)).\
					   filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(MoreThanOneYear)).\
					   all() 
		if AssetPro:
			for item in AssetPro:
				Ass_ID 			= 	item.ID
				Ass_OverDueFr 	= 	item.OverdueFr if item.OverdueFr else "0"
				Ass_OverdueTo	= 	item.OverdueTo if item.OverdueTo else "0"

				if str(Ass_OverdueTo).upper() == "UP" or str(Ass_OverdueTo) == "":
					if int(NumDayDue) >= int(Ass_OverDueFr):
						AssetClass = Ass_ID
				else:
					if int(NumDayDue) >= int(Ass_OverDueFr) and int(NumDayDue) <= int(Ass_OverdueTo):
						AssetClass = Ass_ID

				if AssetClass != "":
					break

		if AssetClass == '':
			AssetPro = MKT_ASSET_CLASS_PRO.query.\
				   order_by(MKT_ASSET_CLASS_PRO.ID.asc()).\
				   filter(MKT_ASSET_CLASS_PRO.LoanType == str(LoanType)).\
				   filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(MoreThanOneYear)).\
				   filter(cast(MKT_ASSET_CLASS_PRO.Ass_OverDueFr, Float) <= float(NumDayDue)).\
				   all()

			if AssetPro:
				AssetClass = AssetPro[0].ID

		return AssetClass.split('-')[0]

	except:
		mktbjstat.makeLogFileOnError('Y')
		raise
# Get Past Due Date
def getPastDueDate(ID):
	NumDayDue = ''
	OverDueDate = ''
	PDDate = {"NumDayDue":'',"OverDueDate":''}

	PDDateObj 	= MKT_PD_DATE.query.filter(MKT_PD_DATE.ID.ilike('%'+ID)).\
									filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
									order_by(MKT_PD_DATE.DueDate.asc(),
											MKT_PD_DATE.NumDayDue.desc()).\
									limit(1).first()
	if PDDateObj:
		NumDayDue=str(PDDateObj.NumDayDue)
		PDDate.update({"NumDayDue":NumDayDue})

	# Get Due Date by Loan ID
	OverDueDateObj = MKT_PD_DATE.query.filter(MKT_PD_DATE.ID.ilike('%'+ID)).\
										filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
										order_by(MKT_PD_DATE.DueDate.asc()).first()
	if OverDueDateObj:
		OverDueDate = str(OverDueDateObj.DueDate)
		PDDate.update({"OverDueDate":OverDueDate})
	return PDDate

def getMaxNumDayDue(ID):
	return getPastDueDate(ID)["NumDayDue"]

def getNumDayDue(PD_ID):
	try:

		NumDayDue 	= '0'
		ASS_PD 		= MKT_PAST_DUE.query.\
					  filter(MKT_PAST_DUE.ID == PD_ID).\
					  filter(MKT_PAST_DUE.TotODAmount > 0).\
					  first()

		# ======== Asign Loan Classification =========
		
		ASS_CLASS = MKT_ASSET_CLASS.query.\
					order_by(asc(MKT_ASSET_CLASS.Authorizeon)).\
					all()

		if ASS_PD:
			
			if ASS_CLASS:

				ASS_PD_DATE = MKT_PD_DATE.query.\
							  order_by(MKT_PD_DATE.DueDate.asc()).\
							  filter(MKT_PD_DATE.ID == str(ASS_PD.ID)).\
							  filter(MKT_PD_DATE.OutAmount>0).\
							  all()

				for ass_row in ASS_CLASS:

					if ASS_PD_DATE:

						for row in ASS_PD_DATE:
									
							Ass_AmountType = str(ass_row.AmountType)
							if Ass_AmountType:
								
								Ass_AmountType = Ass_AmountType.split()
								if len(Ass_AmountType) > 0:
									for item in Ass_AmountType:
										if str(item).upper() == 'PR':
											if float(row.OutPriAmount) > 0:
												NumDayDue = row.NumDayDue

										elif str(item).upper() == 'IN':
											if float(row.OutIntAmount) > 0:
												NumDayDue = row.NumDayDue

										elif str(item).upper() == 'CH':
											if float(row.OutChgAmount) > 0:
												NumDayDue = row.NumDayDue

										else:
											if float(row.OutPenAmount) > 0:
												NumDayDue = row.NumDayDue

							if NumDayDue != '0':
								break

					if NumDayDue != '0':
						break
				
			else:
				print "No asset class record."

		return NumDayDue

	except:
		mktbjstat.makeLogFileOnError('Y')
		raise

def provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, Account, Currency, TranDate, ID, Branch, AssClass, AccSetting, ReportingRateObj, Note="",EOD=0):
	try:
		"""
			Notes By : Sovankiry / Last Update: 09 October 2016
			Refer to loan provisioning booking that book when loan change class
			 
				Debit - Bad & Doubfull Debts 							Loan Loss Provision Booking		xxxx

				   Credit - Less Reserve for Specific loan loss 		Loan Loss Provision Booking  				xxxx
		"""
		session9 = db.create_session({})
		if float(ProvisionAmount) > 0:
			# ReportingRate 			= ReportingRateObj.get(Currency) 
			LCYCurrency,LCYAmount 	= mktaccounting.setLCYAmount(ReportingRateObj,AccSetting,Currency,ProvisionAmount)

			DrCr  		= 'Dr'
			Category 	= ProvExpCat
			Transaction = mktsetting.getAccSetting().ProvisionTran
			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "", "", "", "", "", "", "", "", "", "")
			DateTimeNow = mktdate.getDateTimeNow()
			Mode 		= "Direct"

			# Debit 
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				Category,				# Category
				Currency,			# Currency
				DrCr,					# DrCr
				Decimal(ProvisionAmount), 	# Amount
				"LC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				ID, 					# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				AllowEquivalent=True,
				EOD=EOD
			)

			# Define new parameter
			DateTimeNow = mktdate.getDateTimeNow()
			DrCr 		= "Cr"
			Mode 		= "Direct"
			Category 	= ProResvCat
			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "", "", "", "", "", "", "", "", "", "")
			
			# Credit 
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(ProvisionAmount), # Amount
				"LC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				ID, 					# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				LCYAmount = LCYAmount,
				AllowEquivalent=True,
				EOD=EOD
			)

			print_msg = "%s provision is now %s." %(ID, mktmoney.toMoney(float(ProvisionAmount), mktmoney.getCurrencyObj(Currency), 2))
			# print_msg = "%s provision is now %s." %(ID, mktmoney.toMoney(float(LCYAmount), mktmoney.getCurrencyObj(LCYCurrency), 2))
			mktmessage.msgOutputMsg(print_msg)

			PROV = db.session.query(MKT_PROVISION).\
					filter(MKT_PROVISION.LOANID == ID).\
					filter(MKT_PROVISION.ASSETID == AssClass).\
					first()

			if not PROV:
				# Update Auditrail
					
				PROV = MKT_PROVISION(
							Status		= 	"AUTH",
							Curr 		= 	"0",
							Inputter	= 	"System",
							Createdon 	= 	DateTimeNow,
							Authorizer 	= 	"System",
							Authorizeon	= 	DateTimeNow,
							Branch 		=	Branch,
							LOANID 		= 	ID,
							ASSETID 	=	AssClass,
							TranDate 	=	TranDate,
							Amount 		=	LCYAmount,
							FCYAmount	=	ProvisionAmount,

						)

			PROV.ASSETID 	= AssClass
			PROV.TranDate 	= TranDate
			PROV.Amount 	= LCYAmount
			PROV.FCYAmount	= ProvisionAmount
			db.session.add(PROV)


		return ""

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def reverseProvisioning(ID, PrevAss, ProResvCat, ProvExpCat, Currency, Account, TranDate, Branch, AccSetting, ReportingRateObj, Note="",EOD=0):
	try:
		"""
			Notes By : Sovankiry / Last Update: 27 October 2016
			Refer to loan reverse old provisioning that book when loan change class
			 
				Debit - Less Reserve for Specific loan loss 		Loan Loss Provision Reversal		xxxx

				   Credit - Bad & Doubfull Debts 							Loan Loss Provision Reversal  				xxxx
		"""
		ProvToReverse = MKT_PROVISION.query.\
								filter(MKT_PROVISION.LOANID == ID).\
								filter(MKT_PROVISION.ASSETID == PrevAss).\
								first()
								
		if ProvToReverse:
			
			# Define parameter 
			# ReportingRate 	= float(ProvToReverse.ReportingRate)
			PrevAmount 		= float(ProvToReverse.Amount) if ProvToReverse.Amount else float(0)
			FCYAmount 		= float(ProvToReverse.FCYAmount) if ProvToReverse.FCYAmount else float(0)
			# FCYAmount 		= mktaccounting.setFCYAmount(ReportingRateObj,AccSetting,Currency,PrevAmount)
			# LCYAmount 		= float(FCYAmount) * ReportingRate

			DrCr  		= 'Dr'
			Category 	= ProResvCat
			Transaction = AccSetting.ProvReverTran
			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "", "", "", "", "", "", "", "", "", "")
			DateTimeNow = mktdate.getDateTimeNow()
			Mode 		= "Direct"
			
			if float(PrevAmount) > 0:
					
				# Debit Provision Receivable Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(FCYAmount), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					LCYAmount=PrevAmount,
					AllowEquivalent=True,
					EOD=EOD
					
				)
				LCYCurrency = mktaccounting.getLCYCurrency(AccSetting,Currency)

				# Define new parameter
				DateTimeNow = mktdate.getDateTimeNow()
				DrCr 		= "Cr"
				Mode 		= "Direct"
				Category 	= ProvExpCat
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "", "", "", "", "", "", "", "", "", "")
				# Credit Provision Reversed Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,			# Currency
					DrCr,					# DrCr
					Decimal(FCYAmount), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					LCYAmount=PrevAmount,
					AllowEquivalent=True,
					EOD=EOD
				
				)
				# Clear to zero amount
				ProvToReverse.Amount = 0
				ProvToReverse.FCYAmount = 0
				db.session.add(ProvToReverse)
		

		return ""

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def getAssetClassReg(ID):
	try:

		Asset 		= MKT_ASSET_CLASS.query.get(ID)
		IncomeRecog = ""
		if Asset:
			IncomeRecog = Asset.IncomeRecog

		return IncomeRecog

	except:
		mktbjstat.makeLogFileOnError('Y')
		raise

def getLoanForClassification(LoanID='', Stat='', ByBranch='', Limit='', OffSet=''):
	try:

		if LoanID:
			LC 	= 	db.session.query(
						MKT_LOAN_CONTRACT.ID, 
						MKT_LOAN_CONTRACT.LoanType, 
						MKT_LOAN_CONTRACT.MoreThanOneYear, 
						MKT_LOAN_CONTRACT.AssetClass, 
						MKT_LOAN_CONTRACT.LoanProduct, 
						MKT_LOAN_CONTRACT.Branch, 
						MKT_LOAN_CONTRACT.Account, 
						MKT_LOAN_CONTRACT.ContractCustomerID, 
						MKT_LOAN_CONTRACT.Currency, 
						MKT_LOAN_CONTRACT.Amount, 
						MKT_LOAN_CONTRACT.Term, 
						MKT_LOAN_CONTRACT.Classification, 
						MKT_LOAN_CONTRACT.MinAssetClass, 
						MKT_LOAN_CONTRACT.WatchDay,
						MKT_ASSET_CLASS.ProResvCat, 
						MKT_ASSET_CLASS.ProvExpCat).\
					join(MKT_ASSET_CLASS, MKT_ASSET_CLASS.ID == MKT_LOAN_CONTRACT.AssetClass).\
					order_by(asc(MKT_LOAN_CONTRACT.ID)).\
					filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
					filter(MKT_LOAN_CONTRACT.ID == LoanID)
		
		else:

			if ByBranch:
				ListBranch = ByBranch.split()
				ListBranch = filter(None,ListBranch)

				if Limit:
					LC 	= 	db.session.query(
							MKT_LOAN_CONTRACT.ID, 
							MKT_LOAN_CONTRACT.LoanType, 
							MKT_LOAN_CONTRACT.MoreThanOneYear, 
							MKT_LOAN_CONTRACT.AssetClass, 
							MKT_LOAN_CONTRACT.LoanProduct, 
							MKT_LOAN_CONTRACT.Branch, 
							MKT_LOAN_CONTRACT.Account, 
							MKT_LOAN_CONTRACT.ContractCustomerID, 
							MKT_LOAN_CONTRACT.Currency, 
							MKT_LOAN_CONTRACT.Amount, 
							MKT_LOAN_CONTRACT.Term, 
							MKT_LOAN_CONTRACT.Classification, 
							MKT_ASSET_CLASS.ProResvCat, 
							MKT_ASSET_CLASS.ProvExpCat).\
						join(MKT_ASSET_CLASS, MKT_ASSET_CLASS.ID == MKT_LOAN_CONTRACT.AssetClass).\
						order_by(asc(MKT_LOAN_CONTRACT.ID)).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
						filter(MKT_LOAN_CONTRACT.Branch.in_(ListBranch)).\
						limit(Limit).offset(OffSet).all()

				else:
					LC 	= 	db.session.query(
							MKT_LOAN_CONTRACT.ID, 
							MKT_LOAN_CONTRACT.LoanType, 
							MKT_LOAN_CONTRACT.MoreThanOneYear, 
							MKT_LOAN_CONTRACT.AssetClass, 
							MKT_LOAN_CONTRACT.LoanProduct, 
							MKT_LOAN_CONTRACT.Branch, 
							MKT_LOAN_CONTRACT.Account, 
							MKT_LOAN_CONTRACT.ContractCustomerID, 
							MKT_LOAN_CONTRACT.Currency, 
							MKT_LOAN_CONTRACT.Amount, 
							MKT_LOAN_CONTRACT.Term, 
							MKT_LOAN_CONTRACT.Classification, 
							MKT_ASSET_CLASS.ProResvCat, 
							MKT_ASSET_CLASS.ProvExpCat).\
						join(MKT_ASSET_CLASS, MKT_ASSET_CLASS.ID == MKT_LOAN_CONTRACT.AssetClass).\
						order_by(asc(MKT_LOAN_CONTRACT.ID)).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
						filter(MKT_LOAN_CONTRACT.Branch.in_(ListBranch))

			else:
				if Limit:
					LC 	= 	db.session.query(
							MKT_LOAN_CONTRACT.ID, 
							MKT_LOAN_CONTRACT.LoanType, 
							MKT_LOAN_CONTRACT.MoreThanOneYear, 
							MKT_LOAN_CONTRACT.AssetClass, 
							MKT_LOAN_CONTRACT.LoanProduct, 
							MKT_LOAN_CONTRACT.Branch, 
							MKT_LOAN_CONTRACT.Account, 
							MKT_LOAN_CONTRACT.ContractCustomerID, 
							MKT_LOAN_CONTRACT.Currency, 
							MKT_LOAN_CONTRACT.Amount, 
							MKT_LOAN_CONTRACT.Term, 
							MKT_LOAN_CONTRACT.Classification, 
							MKT_ASSET_CLASS.ProResvCat, 
							MKT_ASSET_CLASS.ProvExpCat).\
						join(MKT_ASSET_CLASS, MKT_ASSET_CLASS.ID == MKT_LOAN_CONTRACT.AssetClass).\
						order_by(asc(MKT_LOAN_CONTRACT.ID)).\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
						limit(Limit).offset(OffSet).all()
		
				else:
					LC 	= 	db.session.query(
							MKT_LOAN_CONTRACT.ID, 
							MKT_LOAN_CONTRACT.LoanType, 
							MKT_LOAN_CONTRACT.MoreThanOneYear, 
							MKT_LOAN_CONTRACT.AssetClass, 
							MKT_LOAN_CONTRACT.LoanProduct, 
							MKT_LOAN_CONTRACT.Branch, 
							MKT_LOAN_CONTRACT.Account, 
							MKT_LOAN_CONTRACT.ContractCustomerID, 
							MKT_LOAN_CONTRACT.Currency, 
							MKT_LOAN_CONTRACT.Amount, 
							MKT_LOAN_CONTRACT.Term, 
							MKT_LOAN_CONTRACT.Classification, 
							MKT_ASSET_CLASS.ProResvCat, 
							MKT_ASSET_CLASS.ProvExpCat).\
						join(MKT_ASSET_CLASS, MKT_ASSET_CLASS.ID == MKT_LOAN_CONTRACT.AssetClass).\
						order_by(asc(MKT_LOAN_CONTRACT.ID)).\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y')

		
		if Stat == "1": 
			LC	=	LC.count()

		return LC


	except Exception as e:
		raise

def runClassificationThread():
	try:
		Count 	=	getLoanForClassification(Stat="1")
		Process =	mktthread.runMultiprocessing(getLoanForClassification,loanClassification, Count,Param1={},Param2={'LC_Count':Count,'EOD':1})
		# print Result, len(Result['List'])

	except Exception as e:
		raise 

def loanClassification(LoanID="", EOD=1, Stat="", Date="", Check="Yes", LoanClass='', ClassifiedMode='', UserReference='', ByBranch='', ForceReClass=False, Note="",LC_Count="",**kwargs):
	try:

		# if 'SharedDict' in kwargs:
		# 	with kwargs['Locker']:
		# 		MList = kwargs['SharedDict'].get('List',[])
		# 		MList.append(LoanID)
		# 		kwargs['SharedDict'].update({
		# 					'Val':kwargs['SharedDict'].get('Val',0)+1,
		# 					'List':MList
		# 				})
		if EOD == 0:
			EOD = kwargs.get('EOD',0)
		JobStatus = []
		# print " i am here in loan change class"
		# SystemBankDate = mktdate.getBankDate()
		ListAssetClass 		= []
		PrevWatchDay 		= 0
		ListAssetClassObj 	= db.session.query(MKT_ASSET_CLASS.ID)
		if ListAssetClassObj.all():
			for ass in ListAssetClassObj:
				assID = ass.ID
				if "-" in ass.ID:
					assID = (ass.ID).split('-')[0]
				if assID not in ListAssetClass:
					ListAssetClass.append((assID).encode())
			ListAssetClass.sort()
		if Date:
			SystemBankDate 	= Date
		else:
			SystemBankDate 	= mktdate.getBankDate()

		if LC_Count=="":
			LC_Count = getLoanForClassification(LoanID="", Stat="1", ByBranch=ByBranch)
		if Check == 'Yes':
			if Stat == "1":

				return LC_Count

		LC 	=	getLoanForClassification(LoanID=LoanID, ByBranch=ByBranch)

		if Check == 'Yes':
			# Check if no record set progress bar done.
			mktbjstat.calCompletedPer('CL', 0, 1, 0)

		if LC:
			AssetClassListObj 	=	MKT_ASSET_CLASS.query
			AccSetting 			= 	mktsetting.getAccSetting()
			ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
			# JobStatus           =   []

			for lc_row in LC:

				if Check == 'Yes':
					''
					JobStatus 		=	mktbjstat.updateCompletedJobStatus('LoanClassification', LC_Count, JobStatus)
					
				# Check if loan is classified as manualy we won't do loan classification
				# M:Manual, A:Automait
				if LoanClass == '' and lc_row.Classification == 'M': continue

				ID 					= 	lc_row.ID
				PrevAss 			= 	lc_row.AssetClass
				LoanProduct 		= 	lc_row.LoanProduct
				LoanType 			=	lc_row.LoanType
				MoreThanOneYear 	=	lc_row.MoreThanOneYear
				PDID 				= 	"PD" + str(ID)
				NumDayDue 			= 	getNumDayDue(PDID)
				MinAssetClass 		= 	lc_row.MinAssetClass
				OriginalWatchDay 	= 	lc_row.WatchDay
				OriginalAssetClass  = 	lc_row.AssetClass
				if NumDayDue:
					NumDayDue = int(NumDayDue)
				else:
					NumDayDue = 0

				ASS_ID 				= 	getLoanAssetClass(NumDayDue, LoanType, MoreThanOneYear,LoanProduct)
				ASS_PD 				= 	MKT_PAST_DUE.query.\
										filter(MKT_PAST_DUE.ID == PDID).\
										filter(MKT_PAST_DUE.TotODAmount > 0).\
										first()
				### This block is for move class step by step ###
				### Currently close this block because it cause issue of move class back and forth
				### related ticket: 3746

				# if str(OriginalWatchDay) == "1" or str(OriginalWatchDay) == "0":
				# 	if "-" in PrevAss:
				# 		PrevAss = PrevAss.split('-')[0]
				# 	CurrentClassIndex = ListAssetClass.index(PrevAss)
				# 	MinAssClass = 0
				# 	for i in range(CurrentClassIndex,MinAssClass,-1):
				# 		PreAssClass = ListAssetClass[CurrentClassIndex - 1]
				# 		AssetClassCon = '%s-%s' %(PreAssClass, LoanProduct)
				# 		AssetQueryObj = MKT_ASSET_CLASS_PRO.query.\
				# 						filter(MKT_ASSET_CLASS_PRO.ID==AssetClassCon).\
				# 						filter(MKT_ASSET_CLASS_PRO.LoanType ==LoanType).\
				# 						filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear ==MoreThanOneYear).\
				# 						first()
				# 		if not AssetQueryObj:
				# 			AssetQueryObj = MKT_ASSET_CLASS_PRO.query.\
				# 							filter(MKT_ASSET_CLASS_PRO.ID==PreAssClass).\
				# 							filter(MKT_ASSET_CLASS_PRO.LoanType ==LoanType).\
				# 							filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear ==MoreThanOneYear).\
				# 							first()
				# 		if AssetQueryObj:
				# 			if str(AssetQueryObj.WatchDay) != "0":	
				# 				ASS_ID = PreAssClass
				# 				PrevWatchDay = str(AssetQueryObj.WatchDay)
				# 				break
				# 			else:
				# 				continue
				### END ###
				#update min asset classs
				ASS_ID = str(ASS_ID).split('-')[0]
				if int(ASS_ID)<int(MinAssetClass):
					ASS_ID = MinAssetClass
				#end update min asset class

				LC = MKT_LOAN_CONTRACT.query.get(ID)
				TotODAmount = 0
				
				# check whether loan has PD or not.
				if ASS_PD:
					TotODAmount = float(ASS_PD.TotODAmount) - float(ASS_PD.TotPenaltyDue) - float(ASS_PD.TotChargeDue)
					TotODAmount = round(TotODAmount,2) # round to cut off tail example: 0.00000000000000000000000003


				# By config order of batchjob the WatchDay run late then PDCollect one cycle.
				if (int(LC.WatchDay) -1) > 0 or TotODAmount > 0:

					# check if loan classified does not do by manual.
					if ClassifiedMode != 'M':
						#check if prevAss config watch day 
						CurAssClass = '%s-%s' %(PrevAss,LoanProduct)
						ClassObj = MKT_ASSET_CLASS_PRO.query.\
									   order_by(MKT_ASSET_CLASS_PRO.ID.asc()).\
									   filter(MKT_ASSET_CLASS_PRO.LoanType == str(LC.LoanType)).\
									   filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(LC.MoreThanOneYear)).\
									   filter(MKT_ASSET_CLASS_PRO.ID == CurAssClass).\
									   first() 
						if not ClassObj:
							ClassObj = MKT_ASSET_CLASS_PRO.query.\
									   order_by(MKT_ASSET_CLASS_PRO.ID.asc()).\
									   filter(MKT_ASSET_CLASS_PRO.LoanType == str(LC.LoanType)).\
									   filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(LC.MoreThanOneYear)).\
									   filter(MKT_ASSET_CLASS_PRO.ID == PrevAss).\
									   first() 
					  	if ClassObj:
					  		if ClassObj.WatchDay > '0' and ClassObj.WatchDay:
								# check if previous asset class greater than current asset class, it will skip all the below codes. 
								if int(PrevAss) > int(ASS_ID):
									continue
				
				if ASS_ID or ClassifiedMode:
					LC.AssetClass = LoanClass if ClassifiedMode == 'M' else ASS_ID 
					db.session.add(LC)

				print_msg = "%s is currently in class %s." %(ID, ASS_ID)
				print print_msg

				LC_ASS = MKT_LOAN_CONTRACT.query.get(ID)

				AssClass 			= 	LC_ASS.AssetClass
				LC_Amount 			= 	LC_ASS.Amount
				LC_Category 		= 	LC_ASS.Category
				LC_PRODUCT 			= 	LC_ASS.LoanProduct
				Branch 				= 	LC_ASS.Branch
				Account 			= 	LC_ASS.Account
				CustomerID 			= 	LC_ASS.ContractCustomerID
				Currency 			= 	LC_ASS.Currency
				Suspend 			=	LC_ASS.Suspend
				Term 				= 	float(LC_ASS.Term)
				TranDate 			= 	SystemBankDate
				TotalAccrIntRec 	= 	float(LC_ASS.AccrInterest) if LC_ASS.AccrInterest else float(0)
				TotalIntIncEarned 	= 	float(LC_ASS.IntIncEarned) if LC_ASS.IntIncEarned else float(0)

				k1 = AccSetting.GL_KEY1
				k2 = AccSetting.GL_KEY2
				k3 = AccSetting.GL_KEY3
				k4 = AccSetting.GL_KEY4
				k5 = AccSetting.GL_KEY5
				k6 = AccSetting.GL_KEY6
				k7 = AccSetting.GL_KEY7
				k8 = AccSetting.GL_KEY8
				k9 = AccSetting.GL_KEY9

				k1 = mktkey.getResultKey(k1, ID, CustomerID)
				k2 = mktkey.getResultKey(k2, ID, CustomerID)
				k3 = mktkey.getResultKey(k3, ID, CustomerID)
				k4 = mktkey.getResultKey(k4, ID, CustomerID)
				k5 = mktkey.getResultKey(k5, ID, CustomerID)
				k6 = mktkey.getResultKey(k6, ID, CustomerID)
				k7 = mktkey.getResultKey(k7, ID, CustomerID)
				k8 = mktkey.getResultKey(k8, ID, CustomerID)
				k9 = mktkey.getResultKey(k9, ID, CustomerID)

				# Transfer Loan Outstading from old class to new one.
				TotPrincipalDue = 0
				if ASS_PD:
					TotPrincipalDue = float(ASS_PD.TotPrincipalDue) if ASS_PD.TotPrincipalDue else float(0)
				
				OutStandingAmount = float(TotPrincipalDue) + float(LC_Amount)

				"""
					Apply Multi Currency
				
					
						Loan Change Class not allow booking Equivalence and Position Account
					Because it's booking the same category. finally Equivalence and Position Account is zero.


				"""		
				AllowEquivalent 	= False # False Mean that not allow book Equivalence and Position Account.
				CanChangeFirstDueDate = False
				if LC_ASS.FirstDueDate== None or (LC_ASS.WatchDay=='0' and LC_ASS.AssetClass=='0') :
					CanChangeFirstDueDate = True
				# print "PrevAss",PrevAss
				# print "AssClass",AssClass
				if PrevAss != AssClass:
					# print "Loan %s change class from old class %s to new class %s"%(ID,PrevAss,AssClass)
					Note = "Class change from %s to %s"%(PrevAss,AssClass)
					# Block loan change class from old class to new class
					if OutStandingAmount > 0:
						Category 	= LC_Category
						if not Category:
							# Call method for error message
							error_msg = "Loan category not found."
							mktmessage.setLogError(error_msg)

						else:
							Transaction = AccSetting.TerminateTran
							Transaction = Transaction.strip()

							DrCr 		= "Dr"
							Mode 		= "Direct"
							GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
							DateTimeNow = mktdate.getDateTimeNow()

							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								DateTimeNow, 			# Createdon
								"System",				# Authorizer
								DateTimeNow,			# Authorizeon
								"", 					# AEID
								Account,				# Account
								Category,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								OutStandingAmount, 			# Amount
								"PD",					# Module
								Transaction, 			# Transaction
								TranDate, 				# TransactionDate
								ID, 					# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
								AllowEquivalent=AllowEquivalent,
								UserReference=UserReference,
								EOD=EOD
							)

							DrCr 		= "Cr"
							Mode 		= "Direct"
							GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, PrevAss, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
							DateTimeNow = mktdate.getDateTimeNow()

							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								DateTimeNow, 			# Createdon
								"System",				# Authorizer
								DateTimeNow,			# Authorizeon
								"", 					# AEID
								Account,				# Account
								Category,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								OutStandingAmount, 		# Amount
								"PD",					# Module
								Transaction, 			# Transaction
								TranDate, 				# TransactionDate
								ID, 					# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
								AllowEquivalent=AllowEquivalent,
								UserReference=UserReference,
								EOD=EOD
							)

					# End Transfer Loan Outstanding from Previous Class to New Class

					ProResvCat 	= lc_row.ProResvCat
					if not ProResvCat:
						# Call method for error message
						error_msg = "Loan loss receivable category not found."
						mktmessage.setLogError(error_msg)

					AssetClassObj 	= 	MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID.ilike('%-' + LoanProduct)).first()
					AssetClass 		= 	'%s-%s'%(PrevAss,LoanProduct) if AssetClassObj else PrevAss
					ProAssetClassObj = AssetClassListObj.get(AssetClass)
					if ProAssetClassObj and ProAssetClassObj.ProvExpCat and ProAssetClassObj.ProResvCat :
						ProResvCat = ProAssetClassObj.ProResvCat
						ProvExpCat = ProAssetClassObj.ProvExpCat
					else:
						error_msg = "Loan loss reversal/receivable category not found."
						mktmessage.setLogError(error_msg)

					AssetClassObj 	= 	MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID.ilike('%-' + LoanProduct)).first()
					AssetClass 		= 	'%s-%s'%(PrevAss,LoanProduct) if AssetClassObj else PrevAss 
					ProAssetClassObj = AssetClassListObj.get(AssetClass)
					if ProAssetClassObj and ProAssetClassObj.ProvExpCat and ProAssetClassObj.ProResvCat :
						ProResvCat = ProAssetClassObj.ProResvCat
						ProvExpCat = ProAssetClassObj.ProvExpCat
					else:
						error_msg = "Loan loss reversal/receivable category not found."
						mktmessage.setLogError(error_msg)
					# Provisioning Transfer from old Class
					reverseProvisioning(ID, PrevAss, ProResvCat, ProvExpCat, Currency, Account, TranDate, Branch, AccSetting, ReportingRateObj,EOD=EOD)

					# Provisioning Booking to New Class

					AssetClass 		= 	'%s-%s'%(AssClass,LoanProduct) if AssetClassObj else AssClass 
					ProAssetClassObj = AssetClassListObj.get(AssetClass)
					if ProAssetClassObj and ProAssetClassObj.ProvExpCat and ProAssetClassObj.ProResvCat :
						ProResvCat = ProAssetClassObj.ProResvCat
						ProvExpCat = ProAssetClassObj.ProvExpCat
					else:
						error_msg = "Loan loss reversal/receivable category not found."
						mktmessage.setLogError(error_msg)

					ProvisionAmount = 	getProvisioningAmount(AssetClass, OutStandingAmount, LoanType, MoreThanOneYear, NumDayDue,ClassifiedMode=ClassifiedMode,MinAssetClass=MinAssetClass)
					# Booking Provisioning To New Class
					provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, Account, Currency, TranDate, ID, Branch, AssClass, AccSetting, ReportingRateObj,EOD=EOD)

					# ======== Reverse and Booking AIR, Interest Income =========

					LC_Pro = MKT_LOAN_PRODUCT.query.get(LC_PRODUCT)
					
					if LC_Pro:

						if Suspend.upper() == 'N':
							if float(TotalAccrIntRec) > 0:
								"""
									Apply Multi Currency
								"""
								# print " TotalIntIncEarned",TotalIntIncEarned
								DicEquivalent,IntCurrency,IntIncome = mktloan.getInterestMultiCurrency(AccSetting,ReportingRateObj,
													Branch,Currency,TotalAccrIntRec)

								Category = LC_Pro.IntIncomeCate.strip()
								if not Category:
									# Call method for error message
									error_msg = "Interest income category not found."
									mktmessage.setLogError(error_msg)

								# ============== Interest Income | Reverse Old Class and Booking New Class ================
								Transaction 	= AccSetting.TerminateTran
								if Transaction:
									
									DateTimeNow = mktdate.getDateTimeNow()
									GL_KEYS 	= mktaccounting.getConsolKey(Category, IntCurrency, PrevAss, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
									Mode 		= "Direct"
									DrCr 		= "Dr"
									# Debit Interest Income Category
									mktaccounting.postAccounting(
										"AUTH", 				# Status
										"0", 					# Curr
										"System",				# Inputter
										DateTimeNow, 			# Createdon
										"System",				# Authorizer
										DateTimeNow,			# Authorizeon
										"", 					# AEID
										Account,				# Account
										Category,				# Category
										IntCurrency,			# Currency
										DrCr,					# DrCr
										Decimal(IntIncome), 	# Amount
										"LC",					# Module
										Transaction, 			# Transaction
										TranDate, 				# TransactionDate
										ID, 					# Reference
										Note, 					# Note
										"", 					# JNID
										Branch,					# Branch
										GL_KEYS,				# GL_KEYS
										Mode, 					# Mode check to insert Journal for category
										UserReference=UserReference,
										EOD=EOD
										
									)

									DateTimeNow = mktdate.getDateTimeNow()
									Mode 		= "Direct"
									DrCr 		= "Cr"

									GL_KEYS = mktaccounting.getConsolKey(Category, IntCurrency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
									# Credit Interest Income Category
									mktaccounting.postAccounting(
										"AUTH", 				# Status
										"0", 					# Curr
										"System",				# Inputter
										DateTimeNow, 			# Createdon
										"System",				# Authorizer
										DateTimeNow,			# Authorizeon
										"", 					# AEID
										Account,				# Account
										Category,				# Category
										IntCurrency,			# Currency
										DrCr,					# DrCr
										Decimal(IntIncome), 	# Amount
										"LC",					# Module
										Transaction, 			# Transaction
										TranDate, 				# TransactionDate
										ID, 					# Reference
										Note, 					# Note
										"", 					# JNID
										Branch,					# Branch
										GL_KEYS,				# GL_KEYS
										Mode, 					# Mode check to insert Journal for category
										UserReference=UserReference,
										EOD=EOD
									)

								else:
									# Call method for error message
									error_msg = "Interest collection transaction not found."
									mktmessage.setLogError(error_msg)

						# Change Class AIR
						if float(TotalAccrIntRec) > 0:

							# ============== AIR | Reverse Old Class and Booking New Class ================							
							Category = LC_Pro.IntReceivableCate.strip()
							if not Category:
								# Call method for error message
								error_msg = "Interest receivable category not found."
								mktmessage.setLogError(error_msg)
								
							Transaction = AccSetting.TerminateTran
							if Transaction:
								
								DateTimeNow = mktdate.getDateTimeNow()
								GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
								Mode 		= "Direct"
								DrCr 		= "Dr"
								# Dredit AIR Category
								mktaccounting.postAccounting(
									"AUTH", 				# Status
									"0", 					# Curr
									"System",				# Inputter
									DateTimeNow, 			# Createdon
									"System",				# Authorizer
									DateTimeNow,			# Authorizeon
									"", 					# AEID
									Account,				# Account
									Category,				# Category
									Currency,				# Currency
									DrCr,					# DrCr
									Decimal(TotalAccrIntRec), 	# Amount
									"LC",					# Module
									Transaction, 			# Transaction
									TranDate, 				# TransactionDate
									ID, 					# Reference
									Note, 					# Note
									"", 					# JNID
									Branch,					# Branch
									GL_KEYS,				# GL_KEYS
									Mode, 					# Mode check to insert Journal for category
									AllowEquivalent=AllowEquivalent,
									UserReference=UserReference,
									EOD=EOD
									
								)

								DateTimeNow = mktdate.getDateTimeNow()
								GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, PrevAss, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
								Mode 		= "Direct"
								DrCr 		= "Cr"
								# Credit AIR Category
								mktaccounting.postAccounting(
									"AUTH", 				# Status
									"0", 					# Curr
									"System",				# Inputter
									DateTimeNow, 			# Createdon
									"System",				# Authorizer
									DateTimeNow,			# Authorizeon
									"", 					# AEID
									Account,				# Account
									Category,				# Category
									Currency,				# Currency
									DrCr,					# DrCr
									Decimal(TotalAccrIntRec), 	# Amount
									"LC",					# Module
									Transaction, 			# Transaction
									TranDate, 				# TransactionDate
									ID, 					# Reference
									Note, 					# Note
									"", 					# JNID
									Branch,					# Branch
									GL_KEYS,				# GL_KEYS
									Mode, 					# Mode check to insert Journal for category
									AllowEquivalent=AllowEquivalent,
									UserReference=UserReference,
									EOD=EOD
								)

							else:
								# Call method for error message
								error_msg = "Class changed transaction not found."
								mktmessage.setLogError(error_msg)

						# Block Change Int.Income to Suspend
						IncomeRecog = getAssetClassReg(AssClass)
						Transaction = AccSetting.CrAccrIntTran
						if not Transaction:
							# Call method for error message
							error_msg = "Accraed interest reversal transaction not found."
							mktmessage.setLogError(error_msg)
						
						else:
							"""
								Apply Multi Currency
							"""

							Loan = MKT_LOAN_CONTRACT.query.get(ID)
							# print " i am here in loan change class"
							if IncomeRecog.upper() == 'N':
								# Move Income to Suspend
								# print " ***IncomeRecog",IncomeRecog

								if Suspend.upper() == 'N':
									Note = "Interest income has been moved to suspend"
									# print "Suspend",Suspend
									DicEquivalent,IntCurrency,IntIncome = mktloan.getInterestMultiCurrency(AccSetting,ReportingRateObj,
																		Branch,Currency,TotalAccrIntRec)
									# print DicEquivalent,IntCurrency,IntIncome 

									Category = LC_Pro.IntIncomeCate.strip()
									if not Category:
										# Call method for error message
										error_msg = "Interest income category not found."
										mktmessage.setLogError(error_msg)

									DateTimeNow = mktdate.getDateTimeNow()
									GL_KEYS 	= mktaccounting.getConsolKey(Category, IntCurrency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
									Mode 		= "Direct"
									DrCr 		= "Dr"
									# Debit Interest Income Category
									mktaccounting.postAccounting(
										"AUTH", 				# Status
										"0", 					# Curr
										"System",				# Inputter
										DateTimeNow, 			# Createdon
										"System",				# Authorizer
										DateTimeNow,			# Authorizeon
										"", 					# AEID
										Account,				# Account
										Category,				# Category
										IntCurrency,			# Currency
										DrCr,					# DrCr
										Decimal(IntIncome), 	# Amount
										"LC",					# Module
										Transaction, 			# Transaction
										TranDate, 				# TransactionDate
										ID, 					# Reference
										Note, 					# Note
										"", 					# JNID
										Branch,					# Branch
										GL_KEYS,				# GL_KEYS
										Mode, 					# Mode check to insert Journal for category
										AllowEquivalent=True,
										UserReference=UserReference,
										EOD=EOD
										
									)

									Category 	= mktParam.getPDParam().SuspendCrCat
									if not Category:
										# Call method for error message
										error_msg = "Suspend credit category not found."
										mktmessage.setLogError(error_msg)

									DateTimeNow = mktdate.getDateTimeNow()
									GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
									Mode 		= "Direct"
									DrCr 		= "Cr"
									# Debit Interest Income Category
									mktaccounting.postAccounting(
										"AUTH", 				# Status
										"0", 					# Curr
										"System",				# Inputter
										DateTimeNow, 			# Createdon
										"System",				# Authorizer
										DateTimeNow,			# Authorizeon
										"", 					# AEID
										Account,				# Account
										Category,				# Category
										Currency,				# Currency
										DrCr,					# DrCr
										Decimal(TotalAccrIntRec), 	# Amount
										"LC",					# Module
										Transaction, 			# Transaction
										TranDate, 				# TransactionDate
										ID, 					# Reference
										Note, 					# Note
										"", 					# JNID
										Branch,					# Branch
										GL_KEYS,				# GL_KEYS
										Mode, 					# Mode check to insert Journal for category
										AllowEquivalent=True,
										UserReference=UserReference,
										EOD=EOD
										
									)

									Loan.Suspend = 'Y'
									# Calculate Interest Income Earned to local currency
									LCYAccrInterest 		= 	float(TotalAccrIntRec) * float(ReportingRateObj.get(Currency))
									Loan.IntIncEarned 		= (float(Loan.IntIncEarned) if Loan.IntIncEarned else float(0)) - float(LCYAccrInterest)
									
									if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
									
										Loan.FCYIntIncEarned 	= (float(Loan.FCYIntIncEarned) if Loan.FCYIntIncEarned else float(0)) - float(TotalAccrIntRec)
									
									db.session.add(Loan)


									# Block Charge Classification
									# Move Charge Income to Charge In Suspend 
									ChargeParam = {'Branch':Branch, 'LoanID':ID,
													'Transaction':AccSetting.TerminateTran,
													'TransactionDate': TranDate, 
													'Currency':Currency,
													'Suspend':'Y',
													'AccSetting':AccSetting,
													'EOD':EOD
													}
									mktcharge.setChargeClassification(**ChargeParam)
									# print ID,"Charge income has been moved to suspend."

									print_msg = "%s Interest income has been moved to suspend account. Suspend amount %s." %(ID, mktmoney.toMoney(float(TotalAccrIntRec), mktmoney.getCurrencyObj(Currency)))
									mktmessage.msgOutputMsg(print_msg)
									# print "%s Interest income has been moved to suspend account. Suspend amount %s." %(ID, mktmoney.toMoney(float(TotalAccrIntRec), mktmoney.getCurrencyObj(Currency)))

							else:
								# Move Interest Suspend to Int.Income
								# print " ***IncomeRecog",IncomeRecog
								if Suspend.upper() == 'Y':
									Note = "Interest income has been moved from suspend"
									Category 	= mktParam.getPDParam().SuspendCrCat
									if not Category:
										# Call method for error message
										error_msg = "Suspend credit category not found."
										mktmessage.setLogError(error_msg)

									DateTimeNow = mktdate.getDateTimeNow()
									GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
									Mode 		= "Direct"
									DrCr 		= "Dr"
									# Debit Interest Income Category
									mktaccounting.postAccounting(
										"AUTH", 				# Status
										"0", 					# Curr
										"System",				# Inputter
										DateTimeNow, 			# Createdon
										"System",				# Authorizer
										DateTimeNow,			# Authorizeon
										"", 					# AEID
										Account,				# Account
										Category,				# Category
										Currency,				# Currency
										DrCr,					# DrCr
										Decimal(TotalAccrIntRec), 	# Amount
										"LC",					# Module
										Transaction, 			# Transaction
										TranDate, 				# TransactionDate
										ID, 					# Reference
										Note, 					# Note
										"", 					# JNID
										Branch,					# Branch
										GL_KEYS,				# GL_KEYS
										Mode, 					# Mode check to insert Journal for category
										AllowEquivalent=True,
										UserReference=UserReference,
										EOD=EOD
									)
									# print "Suspend IncomeRecog Y",Suspend
									DicEquivalent,IntCurrency,IntIncome = mktloan.getInterestMultiCurrency(AccSetting,ReportingRateObj,
																		Branch,Currency,TotalAccrIntRec)

									Category = LC_Pro.IntIncomeCate.strip()
									if not Category:
										# Call method for error message
										error_msg = "Interest income category not found."
										mktmessage.setLogError(error_msg)

									DateTimeNow = mktdate.getDateTimeNow()
									GL_KEYS 	= mktaccounting.getConsolKey(Category, IntCurrency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
									Mode 		= "Direct"
									DrCr 		= "Cr"
									# Debit Interest Income Category
									mktaccounting.postAccounting(
										"AUTH", 				# Status
										"0", 					# Curr
										"System",				# Inputter
										DateTimeNow, 			# Createdon
										"System",				# Authorizer
										DateTimeNow,			# Authorizeon
										"", 					# AEID
										Account,				# Account
										Category,				# Category
										IntCurrency,			# Currency
										DrCr,					# DrCr
										Decimal(IntIncome), 	# Amount
										"LC",					# Module
										Transaction, 			# Transaction
										TranDate, 				# TransactionDate
										ID, 					# Reference
										Note, 					# Note
										"", 					# JNID
										Branch,					# Branch
										GL_KEYS,				# GL_KEYS
										Mode, 					# Mode check to insert Journal for category
										AllowEquivalent=True,
										UserReference=UserReference,
										EOD=EOD
									)

									Loan.Suspend = 'N'
									# Calculate Interest Income Earned to local currency using for accr daily
									LCYAccrInterest 		= 	float(IntIncome) * float(ReportingRateObj.get(Currency))
									Loan.IntIncEarned 		= (float(Loan.IntIncEarned) if Loan.IntIncEarned else float(0)) + float(LCYAccrInterest)
									
									if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
									
										Loan.FCYIntIncEarned 	= (float(Loan.FCYIntIncEarned) if Loan.FCYIntIncEarned else float(0)) + float(IntIncome)
									
									db.session.add(Loan)

									# Block Charge Classification
									# Move Charge In Suspend to Charge Income		
									ChargeParam = {'Branch':Branch, 'LoanID':ID,
													'Transaction':AccSetting.TerminateTran,
													'TransactionDate': TranDate, 
													'Currency':Currency,
													'Suspend':'N',
													'AccSetting':AccSetting,
													'EOD':EOD
													}
									mktcharge.setChargeClassification(**ChargeParam)
									# print "Charge income has been moved from suspend."
									# print "%s Interest income has been moved from suspend account. Amount %s." %(ID, mktmoney.toMoney(float(TotalAccrIntRec), mktmoney.getCurrencyObj(Currency)))

									print_msg = "%s Interest income has been moved from suspend account. Amount %s." %(ID, mktmoney.toMoney(float(TotalAccrIntRec), mktmoney.getCurrencyObj(Currency)))
									mktmessage.msgOutputMsg(print_msg)
					else:
						# Call method for error message
						error_msg = "Account product not found for loan-" + str(ID) +"."
						mktmessage.setLogError(error_msg)
								
						# ======== End Reverse Interest, Penalty, Charge in PD =========

					# When the loan change class, it will always update WatchDay of loan contract depend on MKT_ASSET_CLASS_PRO.
					AssetClass = '%s-%s' %(LC_ASS.AssetClass, LC_ASS.LoanProduct)
					AssetObj = db.session.query(MKT_ASSET_CLASS_PRO).\
										filter(MKT_ASSET_CLASS_PRO.LoanType==LC_ASS.LoanType).\
										filter(MKT_ASSET_CLASS_PRO.ID==AssetClass).\
										filter(LC_ASS.MoreThanOneYear==MKT_ASSET_CLASS_PRO.MoreThanOneYear).\
										first()
					if not AssetObj:
						AssetObj = db.session.query(MKT_ASSET_CLASS_PRO).\
										filter(MKT_ASSET_CLASS_PRO.LoanType==LC_ASS.LoanType).\
										filter(MKT_ASSET_CLASS_PRO.ID==LC_ASS.AssetClass).\
										filter(LC_ASS.MoreThanOneYear==MKT_ASSET_CLASS_PRO.MoreThanOneYear).\
										first()
					LC_ASS.WatchDay=AssetObj.WatchDay
					# set first due date when loan is starting late.
					if CanChangeFirstDueDate:
						BankDateObj 	= mktdate.getBankDateObj()
						SystemDate 		= datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date()
						LC_ASS.FirstDueDate = str(SystemDate)
					# For Restructure Loan only
					AssetClassList = db.session.query(MKT_ASSET_CLASS)
					LoanPDID = 'PD%s' %LC_ASS.ID
					AssetClassLoanPD = AssetClassList.filter(MKT_ASSET_CLASS.ID==LC_ASS.AssetClass).first()
					AmountType = AssetClassLoanPD.AmountType
					PastDueObj 				= 	db.session.query(MKT_PAST_DUE).\
															filter(MKT_PAST_DUE.ID == LoanPDID)

					ListCondition = []
					# check AmountType which can split.
					if AmountType.split():
						AmountTypeList = AmountType.split()
						if 'PR' in AmountTypeList:
							ListCondition.append(MKT_PAST_DUE.TotPrincipalDue > 0)
						if 'IN' in AmountTypeList:
							ListCondition.append(MKT_PAST_DUE.TotInterestDue > 0)
						if 'PE' in AmountTypeList:
							ListCondition.append(MKT_PAST_DUE.TotPenaltyDue > 0)
						if 'CH' in AmountTypeList:
							ListCondition.append(MKT_PAST_DUE.TotChargeDue > 0)
						PastDueObj = PastDueObj.filter(or_(*ListCondition)).first()
					if not PastDueObj:
						if (int(OriginalWatchDay) -1) == 0 and (int(OriginalAssetClass) == 20):
							LC_ASS.DoneWatchDay=mktloan.getDoneWatchDay(LC_ASS.ID)
						# LC_ASS.WatchDay = '0'
						LC_ASS.WatchDay = PrevWatchDay
						LC_ASS.FirstDueDate = None		

					db.session.add(LC_ASS)
					# Commit one transaction
					db.session.commit()

				else:
					if ForceReClass:
						Note = "Provision rate was changed" if not Note else Note
						ProResvCat 	= lc_row.ProResvCat
						if not ProResvCat:
							# Call method for error message
							error_msg = "Loan loss receivable category not found."
							mktmessage.setLogError(error_msg)

						ProvExpCat 	= lc_row.ProvExpCat
						if not ProvExpCat:
							# Call method for error message
							error_msg = "Loan loss reversal category not found."
							mktmessage.setLogError(error_msg)

						# Provisioning Transfer from old Class
						reverseProvisioning(ID, PrevAss, ProResvCat, ProvExpCat, Currency, Account, TranDate, Branch, AccSetting, ReportingRateObj, Note=Note,EOD=EOD)

						# Provisioning Booking to New Class
						ProvisionAmount = 	getProvisioningAmount(AssClass, OutStandingAmount, LoanType, MoreThanOneYear, NumDayDue,ClassifiedMode=ClassifiedMode,MinAssetClass=MinAssetClass)
						# Booking Provisioning To New Class
						AssetClassObj = AssetClassListObj.get(AssClass)
						if AssetClassObj and AssetClassObj.ProvExpCat and AssetClassObj.ProResvCat :
							ProResvCat = AssetClassObj.ProResvCat
							ProvExpCat = AssetClassObj.ProvExpCat
						else:
							error_msg = "Loan loss reversal/receivable category not found."
							mktmessage.setLogError(error_msg)

						provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, Account, Currency, TranDate, ID, Branch, AssClass, AccSetting, ReportingRateObj, Note=Note,EOD=EOD)
						db.session.commit()
		else:
			# print "No loan contract for class update."
			print_msg = "No loan contract for class update."
			mktmessage.msgOutputMsg(print_msg)

		return ""

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise


def calculateTotalPD(ID):
	try:
		
		TotalPD = MKT_PAST_DUE.query.get(ID)

		if TotalPD:
			# for row in TotalPD:

			Total_Amount 	= float(0)
			Total_Principal = float(0)
			Total_Interest 	= float(0)
			Total_Penalty 	= float(0)
			Total_Charge 	= float(0)

			TotalPD_DATE = MKT_PD_DATE.query.\
						   order_by(asc(MKT_PD_DATE.Authorizeon)).\
						   filter(MKT_PD_DATE.ID == ID).\
						   all()

			if TotalPD_DATE:
				for PD in TotalPD_DATE:

					Total_Amount 	+= float(PD.OutAmount)
					Total_Principal += float(PD.OutPriAmount)
					Total_Interest 	+= float(PD.OutIntAmount)
					Total_Penalty 	+= float(PD.OutPenAmount)
					Total_Charge 	+= float(PD.OutChgAmount)

			PD_TOTAL = MKT_PAST_DUE.query.get(ID)
			PD_TOTAL.TotODAmount 		= 	Total_Amount
			PD_TOTAL.TotPrincipalDue 	= 	Total_Principal
			PD_TOTAL.TotInterestDue 	= 	Total_Interest
			PD_TOTAL.TotPenaltyDue 		= 	Total_Penalty
			PD_TOTAL.TotChargeDue 		= 	Total_Charge

			db.session.add(PD_TOTAL)

		return ""

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def setPDCollection(PastDueID="", EOD=1, Stat="", TerminateTran=False, ManualCollect=False, ManualCollectID='',NumInstallmentCollect='',CollectOrder=''):
	try:
		PDParam 		= 	mktParam.getPDParam() # Get PD Paramater Setting
		if PDParam.RepMethod == '2':
			return setPDCollectionVertical(PastDueID=PastDueID, EOD=EOD, Stat=Stat, TerminateTran=TerminateTran, ManualCollect=ManualCollect, ManualCollectID=ManualCollectID,NumInstallmentCollect=NumInstallmentCollect,CollectOrder=CollectOrder)
		else:
			return setPDCollectionHorizental(PastDueID=PastDueID, EOD=EOD, Stat=Stat, TerminateTran=TerminateTran, ManualCollect=ManualCollect, ManualCollectID=ManualCollectID,NumInstallmentCollect=NumInstallmentCollect,CollectOrder=CollectOrder)			
		# Process Journal and Console Balance
		mktjournaltool.processJournalAndConsoleBalanceBooking()
	except Exception as e:
		raise

def getPastDue(PDRepMethod='', SystemBankDate='', PastDueID='', Count=False, Limit='', OffSet=''):
	try:
		#: Check PD Rep Method
		if PDRepMethod == "3":#:3-Fair Collection
				
			if Count:
				PD	=	db.session.query(MKT_PAST_DUE.ID, 
							MKT_LOAN_CONTRACT.ID.label('LoanID'), 
							MKT_LOAN_CONTRACT.Account,
							MKT_PD_DATE.PDID.label('PDDATE'),
							MKT_PD_DATE.DueDate,
							MKT_PD_DATE.NumDayDue,
							MKT_PD_DATE.OutAmount,
							MKT_PD_DATE.OutPriAmount,
							MKT_PD_DATE.OutIntAmount,
							MKT_PD_DATE.OutPenAmount,
							MKT_PD_DATE.OutChgAmount).\
						join(MKT_PD_DATE, MKT_PD_DATE.ID == MKT_PAST_DUE.ID).\
						join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID == MKT_PAST_DUE.LoanID).\
						filter(MKT_PD_DATE.OutAmount >0).\
						filter(MKT_PD_DATE.NextRunDate <= str(SystemBankDate)).\
						order_by(MKT_LOAN_CONTRACT.Account.asc(),MKT_PD_DATE.DueDate.asc(),
								MKT_LOAN_CONTRACT.ValueDate.asc(),MKT_LOAN_CONTRACT.ID.asc()).count()

			elif PastDueID:
				PD	=	db.session.query(MKT_PAST_DUE.ID, 
							MKT_LOAN_CONTRACT.ID.label('LoanID'), 
							MKT_LOAN_CONTRACT.Account,
							MKT_PD_DATE.PDID.label('PDDATE'),
							MKT_PD_DATE.DueDate,
							MKT_PD_DATE.NumDayDue,
							MKT_PD_DATE.OutAmount,
							MKT_PD_DATE.OutPriAmount,
							MKT_PD_DATE.OutIntAmount,
							MKT_PD_DATE.OutPenAmount,
							MKT_PD_DATE.OutChgAmount).\
						join(MKT_PD_DATE, MKT_PD_DATE.ID == MKT_PAST_DUE.ID).\
						join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID == MKT_PAST_DUE.LoanID).\
						filter(MKT_PD_DATE.OutAmount >0).filter(MKT_PAST_DUE.ID == PastDueID).\
						filter(MKT_PD_DATE.NextRunDate <= str(SystemBankDate)).\
						order_by(MKT_LOAN_CONTRACT.Account.asc(),MKT_PD_DATE.DueDate.asc(),
								MKT_LOAN_CONTRACT.ValueDate.asc(),MKT_LOAN_CONTRACT.ID.asc()).all()

			else:
				if Limit:
					PD	=	db.session.query(MKT_PAST_DUE.ID, 
								MKT_LOAN_CONTRACT.ID.label('LoanID'), 
								MKT_LOAN_CONTRACT.Account,
								MKT_PD_DATE.PDID.label('PDDATE'),
								MKT_PD_DATE.DueDate,
								MKT_PD_DATE.NumDayDue,
								MKT_PD_DATE.OutAmount,
								MKT_PD_DATE.OutPriAmount,
								MKT_PD_DATE.OutIntAmount,
								MKT_PD_DATE.OutPenAmount,
								MKT_PD_DATE.OutChgAmount).\
							join(MKT_PD_DATE, MKT_PD_DATE.ID == MKT_PAST_DUE.ID).\
							join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID == MKT_PAST_DUE.LoanID).\
							filter(MKT_PD_DATE.OutAmount >0).filter(MKT_PD_DATE.NextRunDate <= str(SystemBankDate)).\
							order_by(MKT_LOAN_CONTRACT.Account.asc(),MKT_PD_DATE.DueDate.asc(),
									MKT_LOAN_CONTRACT.ValueDate.asc(),MKT_LOAN_CONTRACT.ID.asc()).\
							limit(Limit).offset(OffSet).all()
				else:
					PD	=	db.session.query(MKT_PAST_DUE.ID, 
								MKT_LOAN_CONTRACT.ID.label('LoanID'), 
								MKT_LOAN_CONTRACT.Account,
								MKT_PD_DATE.PDID.label('PDDATE'),
								MKT_PD_DATE.DueDate,
								MKT_PD_DATE.NumDayDue,
								MKT_PD_DATE.OutAmount,
								MKT_PD_DATE.OutPriAmount,
								MKT_PD_DATE.OutIntAmount,
								MKT_PD_DATE.OutPenAmount,
								MKT_PD_DATE.OutChgAmount).\
							join(MKT_PD_DATE, MKT_PD_DATE.ID == MKT_PAST_DUE.ID).\
							join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID == MKT_PAST_DUE.LoanID).\
							filter(MKT_PD_DATE.OutAmount >0).filter(MKT_PD_DATE.NextRunDate <= str(SystemBankDate)).\
							order_by(MKT_LOAN_CONTRACT.Account.asc(),MKT_PD_DATE.DueDate.asc(),
									MKT_LOAN_CONTRACT.ValueDate.asc(),MKT_LOAN_CONTRACT.ID.asc()).all()

		else:#:1-By Default Collection
			if Count:
				PD	=	db.session.query(MKT_PAST_DUE).order_by(asc(MKT_PAST_DUE.ID)).\
						filter(MKT_PAST_DUE.TotODAmount > 0).\
						order_by(MKT_PAST_DUE.Branch.asc(),MKT_PAST_DUE.ID.asc()).count()

			elif PastDueID:
				PD = db.session.query(MKT_PAST_DUE.ID).order_by(asc(MKT_PAST_DUE.ID)).\
					 filter(MKT_PAST_DUE.TotODAmount > 0).filter(MKT_PAST_DUE.ID == PastDueID).\
					 order_by(MKT_PAST_DUE.Branch.asc(),MKT_PAST_DUE.ID.asc()).all()
			
			else:
				if Limit:
					PD	=	db.session.query(MKT_PAST_DUE.ID).order_by(asc(MKT_PAST_DUE.ID)).\
							filter(MKT_PAST_DUE.TotODAmount > 0).\
							order_by(MKT_PAST_DUE.Branch.asc(),MKT_PAST_DUE.ID.asc()).\
							limit(Limit).offset(OffSet).all()
				else:
					PD	=	db.session.query(MKT_PAST_DUE.ID).order_by(asc(MKT_PAST_DUE.ID)).\
							filter(MKT_PAST_DUE.TotODAmount > 0).\
							order_by(MKT_PAST_DUE.Branch.asc(),MKT_PAST_DUE.ID.asc()).all()

		return PD

	except Exception as e:
		raise

def setPDCollectionHorizental(PastDueID="", EOD=1, Stat="", TerminateTran=False, ManualCollect=False, ManualCollectID='',NumInstallmentCollect='',CollectOrder=''):
	try:
		Start 			= time.time()
		NextRunDate 	= mktdate.getBankDateObj().NextSystemDate
		NextRunDate 	= NextRunDate.strip()

		currentDate 	= 	mktdate.getDateISO()
		SystemBankDate 	= 	mktdate.getBankDate()
		
		# Get Parameter from Setting
		AccSetting 		= 	mktsetting.getAccSetting() #Get Acccounting Setting
		PDParam 		= 	mktParam.getPDParam() # Get PD Paramater Setting
		
		PDRepMethod 	= 	PDParam.RepMethod
		PDO_PARAM  		= 	PDParam.PDO
		NAB_PARAM  		= 	PDParam.NAB
		PenaltyOption 	=	PDParam.PenOption
		Param 			= 	PDParam.RepOrder
		Param 			= 	Param.split()

		#CollectionOrder must be list of Collect code such as IN PI PE etc.
		if CollectOrder:
			Param = CollectOrder
		# End Setting

		#Get transaction from App setting
		PDCharge 		= mktsetting.getAppSetting('PDCharge')
		PDInterest 		= mktsetting.getAppSetting('PDInterest')
		PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')
		#End App setting
		if Stat != "1":
			if not PDCharge or not PDInterest or not PDPrincipal :
				mktmessage.setLogError("PD collection transaction not yet configuration in app setting.")
				
		# get MKT_PAST_DUE records
		LC = ""
		#: Check PD Rep Method

		PD_Count = getPastDue(PDRepMethod=PDRepMethod, SystemBankDate=SystemBankDate, Count=True)

		Note  	= 	''
		if PastDueID:
			# PD 		= 	PD.filter(MKT_PAST_DUE.ID == PastDueID)
			Note  	=	'Manual Collection' if ManualCollect == True else ''

		# PD_Count = PD.count()
		if Stat == "1":
			# Count record before run eod.
			return PD_Count

		# PD = PD.all()

		if PD_Count:
			
			NumberOfCompleted 	= 	0
			RecordNumber 		=	0
			NumOfCompletedPerc 	=	0
			NumOfTransaction 	=	mktbjstat.setNumOfTransaction(PD_Count)
			AssetClassObj 		= 	MKT_ASSET_CLASS.query
			ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
			JobStatus 			= 	[]
			AccSetting 			= mktsetting.getAccSetting()
			AccrIntOption		= 	AccSetting.AccrIntOption

			Option  =	{	'PDRepMethod':PDRepMethod, 
							'SystemBankDate':SystemBankDate, 
							'PastDueID':PastDueID
						}
			kwargs 	=	{	'AccSetting'	:	AccSetting,
							'ReportingRateObj'	:	ReportingRateObj,
							# 'AssetClassObj'	:	AssetClassObj,
							'AccrIntOption'	:	AccrIntOption,
							'PDCharge'	:	PDCharge,
							'PDInterest'	:	PDInterest,
							'PDPrincipal'	:	PDPrincipal,
							'Param'	:	Param,
							'SystemBankDate'	:	SystemBankDate,
							'NextRunDate'	:	NextRunDate,
							'currentDate'	:	currentDate,
							'PDParam'	:	PDParam,
							'PDRepMethod'	:	PDRepMethod,
							'PDO_PARAM'	:	PDO_PARAM,
							'NAB_PARAM'	:	NAB_PARAM,
							'PenaltyOption'	:	PenaltyOption,
							'ManualCollect'	:	ManualCollect,
							'ManualCollectID'	:	ManualCollectID,
							'PastDueID'	:	PastDueID,
							'EOD'	:	EOD,
							'PD_Count'	:	PD_Count,
							'JobStatus'	:	JobStatus,
							'Note'	:	Note,
							'NumInstallmentCollect':NumInstallmentCollect
						}
			if PastDueID:
				processPD(PastDueID,**kwargs)
			else:
				kwargs.update({'EOD':1})
				Process =	mktthread.runMultiprocessing(getPastDue,processPD, PD_Count,Param1=Option, Param2=kwargs)
				# Result 	=	Process.start()

		else:
			# print "No PD record."
			print_msg = "No PD record."
			mktmessage.msgOutputMsg(print_msg)

		# Clear PD; LC query object
		# del PD
		# del LC

		EndTime = time.time() - Start
		print "Total Execute PD Collection:%s seconds"%EndTime

		if EOD == 1:
			return ""
		else:
			return True

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def processPD(PD, **kwargs):
	try:
		# ThreadS    =   mktthread.CLS_CONNECTION_GUARD().ThreadS
		# setattr(db, 'session', ThreadS)

		# SharedDict	=	kwargs['SharedDict']
		# Locker 		=	kwargs['Locker']
		
		# if 'kwargs' in SharedDict:
		# 	kwargs = SharedDict.get('kwargs',{})

		AccSetting  		=	kwargs.get('AccSetting','')	
		ReportingRateObj  	=	kwargs.get('ReportingRateObj','')	
		AssetClassObj 		= 	MKT_ASSET_CLASS.query
		AccrIntOption  		=	kwargs.get('AccrIntOption','')	
		PDCharge  			=	kwargs.get('PDCharge','')	
		PDInterest  		=	kwargs.get('PDInterest','')	
		PDPrincipal  		=	kwargs.get('PDPrincipal','')	
		Param  				=	kwargs.get('Param','')	
		SystemBankDate  	=	kwargs.get('SystemBankDate','')	
		NextRunDate  		=	kwargs.get('NextRunDate','')	
		currentDate  		=	kwargs.get('currentDate','')	
		PDParam  			=	kwargs.get('PDParam','')	
		PDRepMethod  		=	kwargs.get('PDRepMethod','')	
		PDO_PARAM  			=	kwargs.get('PDO_PARAM','')	
		NAB_PARAM  			=	kwargs.get('NAB_PARAM','')	
		PenaltyOption  		=	kwargs.get('PenaltyOption','')	
		ManualCollect  		=	kwargs.get('ManualCollect','')	
		ManualCollectID  	=	kwargs.get('ManualCollectID','')	
		PastDueID  			=	kwargs.get('PastDueID','')	
		EOD  				=	kwargs.get('EOD',0)	
		PD_Count  			=	kwargs.get('PD_Count','')	
		JobStatus  			=	kwargs.get('JobStatus','')	
		Note  				=	kwargs.get('Note','')
		CollectedNote 		= 	Note	
		NumInstallmentCollect  =	kwargs.get('NumInstallmentCollect','')
		print os.getpid(), PD
		# Block update BjStat
		if EOD:
			JobStatus 	=	mktbjstat.updateCompletedJobStatus('PDCollection', PD_Count, JobStatus)
		# End Block
		row = MKT_PAST_DUE.query.get(PD)
		PDID 		= 	row.ID
		Principal 	= 	0
		Interest 	= 	0
		Penalty 	= 	0
		Charge 		= 	0
		TranDate 	=	SystemBankDate
		AccBal 		= 	0

		LC_ID = row.LoanID
		# Block get single Loan Contract record of PD
		LC = MKT_LOAN_CONTRACT.query.get(LC_ID)
		Account = ""
		if LC:
			ID 					= 	PDID
			LC_PRODUCT 			= 	LC.LoanProduct
			Branch 				= 	LC.Branch
			Account 			= 	LC.Account
			CustomerID 			= 	LC.ContractCustomerID
			LC_Amount 			=	LC.Amount
			MoreThanOneYear 	=	LC.MoreThanOneYear
			LoanType 			=	LC.LoanType
			LoanID 				=	LC.ID
			# Suspend 			=	LC.Suspend
			# AssClass 			= 	LC.AssetClass

			k1 = AccSetting.GL_KEY1
			k2 = AccSetting.GL_KEY2
			k3 = AccSetting.GL_KEY3
			k4 = AccSetting.GL_KEY4
			k5 = AccSetting.GL_KEY5
			k6 = AccSetting.GL_KEY6
			k7 = AccSetting.GL_KEY7
			k8 = AccSetting.GL_KEY8
			k9 = AccSetting.GL_KEY9

			k1 = mktkey.getResultKey(k1, LC_ID, CustomerID)
			k2 = mktkey.getResultKey(k2, LC_ID, CustomerID)
			k3 = mktkey.getResultKey(k3, LC_ID, CustomerID)
			k4 = mktkey.getResultKey(k4, LC_ID, CustomerID)
			k5 = mktkey.getResultKey(k5, LC_ID, CustomerID)
			k6 = mktkey.getResultKey(k6, LC_ID, CustomerID)
			k7 = mktkey.getResultKey(k7, LC_ID, CustomerID)
			k8 = mktkey.getResultKey(k8, LC_ID, CustomerID)
			k9 = mktkey.getResultKey(k9, LC_ID, CustomerID)

			# Block get Account information
			AccountObj = MKT_ACCOUNT.query.with_for_update().get(Account)
			if AccountObj:
				AccCategory = AccountObj.AccCategory
				AccBal 		= float(AccountObj.AvailableBal) if AccountObj.AvailableBal else float(0)
				Currency 	= AccountObj.Currency						

				if PDRepMethod == "3":
					PDDATE 		= 	row.PDDATE
					#Filter only one PD Date
					PD_DATE = MKT_PD_DATE.query.with_for_update().\
										filter(MKT_PD_DATE.ID == PDID).\
										filter(MKT_PD_DATE.PDID == PDDATE)
				else:
					# Block Filter All PD detail Record
					PD_DATE = 	MKT_PD_DATE.query.with_for_update().\
										order_by(asc(MKT_PD_DATE.DueDate)).\
										filter(MKT_PD_DATE.ID == PDID).\
										filter(MKT_PD_DATE.NextRunDate == str(SystemBankDate))
				
				"""	
					Block For Limit PD manual collect by number of installment
				"""
				if ManualCollect:
					"""
					Check PenaltyOption
					"""
					if PenaltyOption == "M": #Manual Collect
						PD_DATE = PD_DATE.filter(or_(MKT_PD_DATE.OutIntAmount > 0,
													 MKT_PD_DATE.OutPriAmount > 0,
													 MKT_PD_DATE.OutChgAmount > 0))
					else:
						PD_DATE = PD_DATE.filter(MKT_PD_DATE.OutAmount >0)

					PD_DATE = PD_DATE.order_by(asc(MKT_PD_DATE.DueDate))

					if NumInstallmentCollect:
						PD_DATE = PD_DATE.limit(NumInstallmentCollect)
				else:
					PD_DATE = PD_DATE.filter(MKT_PD_DATE.OutAmount >0)
					PD_DATE = PD_DATE.order_by(asc(MKT_PD_DATE.DueDate))
				# --- End ---#

				PD_DATE = PD_DATE.all()

				if PD_DATE:
					NumOfPD = 1
					for PD_ROW in PD_DATE:
						Note = '%s Due Date %s'%(CollectedNote, PD_ROW.DueDate)

						""" 
							Notes by Sovankiry Rim. Date 04 Oct 2016
							**** Warning
							Do not change position this code. Cus we need to up to date of Asset Class
						"""
						LC 					= 	db.session.query(MKT_LOAN_CONTRACT).filter(MKT_LOAN_CONTRACT.ID==LC_ID).first()
						Suspend 			=	LC.Suspend
						AssClass 			= 	LC.AssetClass
						# get MinAssetClass if client use it. 
						MinAssetClass 		= getattr(LC,'MinAssetClass','')
						"""End Warning"""
						if not PastDueID:
							PD_ROW.NextRunDate = NextRunDate
							db.session.add(PD_ROW)

						PD_ID 			= 	PD_ROW.PDID
						DueDate 		= 	PD_ROW.DueDate
						NumDayDue 		= 	PD_ROW.NumDayDue
						ODStatus 		= 	PD_ROW.ODStatus
						TotODAmount 	= 	PD_ROW.TotODAmount
						OutAmount 		= 	PD_ROW.OutAmount
						PrincipalDue 	= 	PD_ROW.PrincipalDue
						OutPriAmount 	= 	PD_ROW.OutPriAmount
						InterestDue 	= 	PD_ROW.InterestDue
						OutIntAmount 	= 	PD_ROW.OutIntAmount
						PenaltyDue 		= 	PD_ROW.PenaltyDue
						OutPenAmount 	= 	PD_ROW.OutPenAmount
						ChargeDue 		= 	PD_ROW.ChargeDue
						OutChgAmount 	= 	PD_ROW.OutChgAmount
						
						# Define Principal, Interest, Penalty, Charge from MKT_PD_DATE
						Principal 		= 	float(OutPriAmount) if OutPriAmount else float(0) 		# Define Principal
						Interest 		= 	float(OutIntAmount) if OutIntAmount else float(0)		# Define Interest
						Penalty 		= 	float(OutPenAmount) if OutPenAmount else float(0)		# Define Penalty
						Charge 			= 	float(OutChgAmount) if OutChgAmount else float(0)		# Define Charge
						PD_Total_Amount = 	float(OutAmount) 	if OutAmount 	else float(0)


						# Variable for get settlement amount
						PenaltyCollection 	= 0
						ChargeCollection 	= 0
						InterestCollection 	= 0
						PrincipalCollection = 0

						# print ""
						# print "************************"
						# print "|       PastDue        |"
						# print "************************"
						# print "PD\t\t:%s"%PDID
						# print "PD Total Over Due Amount:%s"%PD_Total_Amount
						# print "Principal\t\t",Principal
						# print "Interest\t\t",Interest
						# print "Penalty\t\t",Penalty

						for p in Param:
							# Block get Account information, protected from multi process concurrency.
							AccountObj = MKT_ACCOUNT.query.with_for_update().get(Account)
							if AccountObj:
								AccCategory = AccountObj.AccCategory
								AccBal 		= float(AccountObj.AvailableBal) if AccountObj.AvailableBal else float(0)
								Currency 	= AccountObj.Currency	
							if AccBal <= 0:
								break

							if p == 'PE':

								if PenaltyOption and PenaltyOption.upper() == 'A':

									if float(Penalty) > 0:

										if float(AccBal) >= float(Penalty):
											Amount = float(Penalty)
										else:
											Amount = float(AccBal)

										if int(NumDayDue) >= int(PDO_PARAM):

											AccBal = float(AccBal) - float(Amount)
											PenaltyCollection = Amount
											if Amount > 0:
												# Define parameter for Debit Customer Account
												DrCr  		= 'Dr'
												Category 	= AccountObj.AccCategory
												if not Category:
													# Call method for error message
													error_msg = "Account category not found."
													mktmessage.setLogError(error_msg)

												Transaction = AccSetting.PenaltyTran
												GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
												DateTimeNow = mktdate.getDateTimeNow()
												Mode 		= ""
												AllowEquivalent 	= False # False Mean that not allow book Equivalence and Position Account.

												if Transaction:
													# Debit Customer Account
													mktaccounting.postAccounting(
														"AUTH", 				# Status
														"0", 					# Curr
														"System",				# Inputter
														DateTimeNow, 			# Createdon
														"System",				# Authorizer
														DateTimeNow,			# Authorizeon
														"", 					# AEID
														Account,				# Account
														Category,				# Category
														Currency,				# Currency
														DrCr,					# DrCr
														Decimal(Amount), 		# Amount
														"PD",					# Module
														Transaction, 			# Transaction
														TranDate, 				# TransactionDate
														ID, 					# Reference
														Note, 					# Note
														"", 					# JNID
														Branch,					# Branch
														GL_KEYS,				# GL_KEYS
														Mode, 					# Mode check to insert Journal for category
														AllowEquivalent=AllowEquivalent,
														UserReference=ManualCollectID, 	# UserReference
														EOD=EOD
													)

													# For Leasing
													PenaltyVAT = mktsetting.getAppSetting("PD_Penalty_VAT")
													
													#If Leasing, Have Penalty on VAT and Penalty on VAT is Yes
													if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y" and PenaltyVAT and PenaltyVAT == 'Y':
														PenaltyAmount = float(Amount) - (float(Amount)*10)/110
														PenaltyAmount = mktmoney.toMoney(float(PenaltyAmount), mktmoney.getCurrencyObj(Currency))
														PenaltyAmount = PenaltyAmount.replace(',','')
													else:
														PenaltyAmount = float(Amount) 
													
													# Define new parameter for Credit Penalty Category
													DateTimeNow = mktdate.getDateTimeNow()
													DrCr 		= "Cr"
													Mode 		= "Direct"
													Category 	= PDParam.ODPenaltyCat
													if not Category:
														# Call method for error message
														error_msg = "Penalty income category not found."
														mktmessage.setLogError(error_msg)

													GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
													# Credit Penalty Category
													mktaccounting.postAccounting(
														"AUTH", 				# Status
														"0", 					# Curr
														"System",				# Inputter
														DateTimeNow, 			# Createdon
														"System",				# Authorizer
														DateTimeNow,			# Authorizeon
														"", 					# AEID
														Account,				# Account
														Category,				# Category
														Currency,				# Currency
														DrCr,					# DrCr
														Decimal(PenaltyAmount), # Amount
														"PD",					# Module
														Transaction, 			# Transaction
														TranDate, 				# TransactionDate
														ID, 					# Reference
														Note, 					# Note
														"", 					# JNID
														Branch,					# Branch
														GL_KEYS,				# GL_KEYS
														Mode, 					# Mode check to insert Journal for category
														UserReference=ManualCollectID, 	# UserReference
														EOD=EOD
													)

													if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y" and PenaltyVAT and PenaltyVAT == 'Y':

														LoanProduct = MKT_LOAN_PRODUCT.query.get(LC.LoanProduct)

														if not LoanProduct:
															error_msg = "Loan Product not found."
															mktmessage.setLogError(error_msg)

														Tax = MKT_TAX.query.get(LoanProduct.Tax)

														if not Tax:
															error_msg = "Loan Product Tax not found."
															mktmessage.setLogError(error_msg)

														DrCr 		= "Cr"
														Mode 		= "Direct"
														Category 	= Tax.Category
														if not Category:
															# Call method for error message
															error_msg = "Tax VAT Output category not found."
															mktmessage.setLogError(error_msg)
														VATAmount = (float(Amount)*10)/110
														VATAmount = mktmoney.toMoney(float(VATAmount), mktmoney.getCurrencyObj(Currency))
														VATAmount = VATAmount.replace(',','')

														GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
														# Credit Penalty Category
														mktaccounting.postAccounting(
															"AUTH", 				# Status
															"0", 					# Curr
															"System",				# Inputter
															DateTimeNow, 			# Createdon
															"System",				# Authorizer
															DateTimeNow,			# Authorizeon
															"", 					# AEID
															Account,				# Account
															Category,				# Category
															Currency,				# Currency
															DrCr,					# DrCr
															Decimal(VATAmount), 		# Amount
															"PD",					# Module
															Transaction, 			# Transaction
															TranDate, 				# TransactionDate
															ID, 					# Reference
															Note, 					# Note
															"", 					# JNID
															Branch,					# Branch
															GL_KEYS,				# GL_KEYS
															Mode, 					# Mode check to insert Journal for category
															UserReference=ManualCollectID 	# UserReference
														)

												else:
													# Call method for error message
													error_msg = "Penalty collection transaction not found."
													mktmessage.setLogError(error_msg)

							elif p == 'CH':

								if float(Charge) != 0:

									if AccBal >= Charge:
										Amount = float(Charge)
									else:
										Amount = float(AccBal)

									ChargeCollection 	= Amount
									AccBal 				= float(AccBal) - float(Amount)

									# Call Charge Collection
									Transaction = PDCharge
									mktcharge.setChargeCollection(Branch=Branch, LoanID=LC_ID, AccSetting=AccSetting,
													 Account=Account, AccCategory=AccCategory, Currency=Currency, 
													 ChargeCollect=Amount, TotalCollect=Charge, Transaction=Transaction, TransactionDate=TranDate, 
													 Reference=ID, Suspend=Suspend, PDCollect="Y",Note=Note, ManualCollectID=ManualCollectID,EOD=EOD)
									
							elif p == 'IN':
								if float(Interest) > 0:
									# print "Interest = " + str(Interest)
									if AccBal >= Interest:
										Amount = float(Interest)
									else:
										Amount 		= float(AccBal)

									InterestCollection = Amount

									AccBal = float(AccBal) - float(Amount)

									if Amount > 0:
										DrCr  		= 'Dr'
										Category 	= AccountObj.AccCategory
										if not Category:
											# Call method for error message
											error_msg = "Account category not found."
											mktmessage.setLogError(error_msg)

										Transaction = PDInterest
										GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
										DateTimeNow = mktdate.getDateTimeNow()
										Mode 		= ""

										LC_Pro = MKT_LOAN_PRODUCT.query.get(LC_PRODUCT)
										if LC_Pro:

											if Transaction:
												# Debit Customer Account
												mktaccounting.postAccounting(
													"AUTH", 				# Status
													"0", 					# Curr
													"System",				# Inputter
													DateTimeNow, 			# Createdon
													"System",				# Authorizer
													DateTimeNow,			# Authorizeon
													"", 					# AEID
													Account,				# Account
													Category,				# Category
													Currency,				# Currency
													DrCr,					# DrCr
													Decimal(Amount), 		# Amount
													"PD",					# Module
													Transaction, 			# Transaction
													TranDate, 				# TransactionDate
													ID, 					# Reference
													Note, 					# Note
													"", 					# JNID
													Branch,					# Branch
													GL_KEYS,				# GL_KEYS
													Mode, 					# Mode check to insert Journal for category
													UserReference=ManualCollectID, 	# UserReference
													EOD=EOD
												)

												DrCr  		= 'Cr'
												Category 	= LC_Pro.IntReceivableCate
												if not Category:
													# Call method for error message
													error_msg = "Interest income category not found."
													mktmessage.setLogError(error_msg)

												# Transaction = PDInterest
												GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "PD", k1, k2, k3, k4, k5, k6, k7, k8, k9)
												DateTimeNow = mktdate.getDateTimeNow()
												Mode 		= "Direct"

												# Credit Interest Income Category
												mktaccounting.postAccounting(
													"AUTH", 				# Status
													"0", 					# Curr
													"System",				# Inputter
													DateTimeNow, 			# Createdon
													"System",				# Authorizer
													DateTimeNow,			# Authorizeon
													"", 					# AEID
													Account,				# Account
													Category,				# Category
													Currency,			# Currency
													DrCr,					# DrCr
													Decimal(Amount), 	# Amount
													"PD",					# Module
													Transaction, 			# Transaction
													TranDate, 				# TransactionDate
													ID, 					# Reference
													Note, 					# Note
													"", 					# JNID
													Branch,					# Branch
													GL_KEYS,				# GL_KEYS
													Mode, 					# Mode check to insert Journal for category
													UserReference=ManualCollectID, 	# UserReference
													EOD=EOD
												)

												LC.AccrInterest = (float(LC.AccrInterest) if LC.AccrInterest else float(0)) - float(Amount)
												db.session.add(LC)

											else:
												# Call method for error message
												error_msg = "Interest collection transaction not found."
												mktmessage.setLogError(error_msg)
											
											SuspendParam = { 'AccSetting' 	:AccSetting,
															'EOD' 			:EOD,
															'Suspend' 		:Suspend,
															'PDParam' 		:PDParam,
															'Amount' 		:Amount,
															'Note' 			:Note,
															'Account' 		:Account,
															'Branch' 		:Branch,
															'Currency' 		:Currency,
															'LC_Pro' 		:LC_Pro,
															'LoanContract' 	:LC,
															'AssClass' 		:AssClass,
															'TranDate' 		:TranDate,
															'ReportingRateObj' 	:ReportingRateObj,
															'ManualCollectID' 	:ManualCollectID,
															'ID':LoanID,
															'k1':k1, 'k2':k2, 'k3':k3, 'k4':k4, 'k5':k5, 'k6':k6, 'k7':k7, 'k8':k8, 'k9':k9

														}

											getSuspendCollection(**SuspendParam)

										else:
											# Call method for error message
											error_msg = "Account product not found for contract#" + str(ID) + "."
											mktmessage.setLogError(error_msg)

							else:
								if float(Principal) > 0:
									# print "Principal = " + str(Principal)
									if AccBal >= Principal:
										Amount = float(Principal)
									else:
										Amount 			= float(AccBal)

									PrincipalCollection = Amount
									AccBal 				= float(AccBal) - float(Amount)
									AccCategory 		= AccountObj.AccCategory
									Transaction 		= PDPrincipal
									mktloan.setPrincipalCollection(AccSetting,LC,
																Amount,Account,AccCategory,Currency,
																Transaction,TranDate,AssClass,ID,Note=Note,ManualCollectID=ManualCollectID,EOD=EOD)
									
						
						# print 'ODStatus',ODStatus, 'PenaltyCollection',PenaltyCollection, 'ChargeCollection',ChargeCollection, 'InterestCollection',InterestCollection, 'PrincipalCollection',PrincipalCollection 
						# print ''

						# Update Subtract Amount PD Collection  
						# 
						RepStatus,TotalCollection,ClearPenalty = subtractPDCollection(ID, PD_ID, ODStatus, PenaltyCollection, ChargeCollection, InterestCollection, PrincipalCollection)
						Penalty -= ClearPenalty # Mean that Fully Paid PD in status PRE and GRA

						# print 'RepStatus',RepStatus,'TotalCollection',TotalCollection,'ClearPenalty',ClearPenalty
						# TotalCollection = float(PenaltyCollection) + float(ChargeCollection) + float(InterestCollection) + float(PrincipalCollection)
						if TotalCollection > 0:
							#Update Repayment Status
							mktloan.updateScheduleStatus(LoanID,DueDate,RepStatus,TotalCollection)

						if AccrIntOption == '2': 
							#update interest accrue by loan outstanding
							updatePDInterest(LC,PD_ID,SystemBankDate)
						# Calculate all MKT_PD_DATE depend on MKT_PAST_DUE
						calculateTotalPD(ID)

						if PrincipalCollection > 0:
							"""
								This provisioning on the block using for loan has been collection principal,
								So we need to reverse old provisioning amount and booking new amount with 
								the same loan class
							"""
							Provision = MKT_PROVISION.query.\
										filter(MKT_PROVISION.LOANID == LoanID).\
										filter(MKT_PROVISION.ASSETID == AssClass).\
										first()

							if Provision:
								# print "Provision booking and reversal in pd"
								PastDue 						= 	MKT_PAST_DUE.query.get(ID)

								if PastDue:

									LoanOustanding 				= 	float(PastDue.TotPrincipalDue) + float(LC.Amount)
									
									# print 'LoanOustanding',LoanOustanding
									ClassifiedMode 	= 'M' if LC.Classification == 'M' else '' 
									ProAssetClassObj= 	AssetClassObj.filter(MKT_ASSET_CLASS.ID.ilike('%-' + LC_PRODUCT)).first()
									ProAssetClass	= 	'%s-%s'%(AssClass,LC_PRODUCT) if ProAssetClassObj else AssClass
									ProvisionAmount = 	getProvisioningAmount(ProAssetClass, LoanOustanding, LoanType, MoreThanOneYear, NumDayDue, ClassifiedMode=ClassifiedMode,MinAssetClass=MinAssetClass)
									# print 'ProvisionAmount',ProvisionAmount

									AssetClass 	= AssetClassObj.get(ProAssetClass)
									ProResvCat 	= AssetClass.ProResvCat
									ProvExpCat 	= AssetClass.ProvExpCat
									
									# Reverse Old Provisioning
									reverseProvisioning(LoanID, AssClass, ProResvCat, ProvExpCat, Currency, Account, TranDate, Branch, AccSetting, ReportingRateObj,EOD=EOD)
									
									# Booking Provisioning To New Class
									provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, Account, Currency, TranDate, LoanID, Branch, AssClass, AccSetting, ReportingRateObj,EOD=EOD)
						
						if RepStatus != 4:	#4: Fully Paid	
							if ManualCollect == False:
								# Update NumDayDue Of Past Due Date
								setNumDayDue(PD_ROW,SystemBankDate)

								# Update PD Status
								updatePDStatus(PD_ROW, LC_PRODUCT)

						# Update Last Outstanding Amount
						mktloan.setUpdateOutstandingAmount(LC)

						### This block cause issue ticket: 3746 ###
						### Don't know why need to check whether there is collection amount for multi process
						# if TotalCollection > 0:
						# 	# Update Class
						# 	loanClassification(LC_ID, EOD, "", "", "No")
						### END ###

						# Update Class
						loanClassification(LC_ID, EOD, "", "", "No")

						# Update Penalty
						if 'PE' in Param:
							if ManualCollect == False:
								PDObj = MKT_PAST_DUE.query.get(PDID)
								setPenalty(PDObj,LoanID,ID,PD_ID,DueDate)
						# commit() one dependency record
						db.session.commit()
						# db.ThreadObj.dispose()
						# print "Past due collected successfully."
						TotalPDAmount = float(Principal) + float(Interest) + float(Charge) + float(Penalty)
						if float(TotalPDAmount) == float(TotalCollection):
							# print "%s #%s Full amount was collected: %s." %(ID, str(NumOfPD), str(TotalCollection))
							print_msg = "%s #%s Full amount was collected: %s." %(ID, str(NumOfPD), str(TotalCollection))
							mktmessage.msgOutputMsg(print_msg)
						elif float(TotalCollection) < float(TotalPDAmount) and float(TotalCollection) > 0:
							# print "%s #%s Partial amount was collected: %s." %(ID, str(NumOfPD), str(TotalCollection))
							print_msg = "%s #%s Partial amount was collected: %s." %(ID, str(NumOfPD), str(TotalCollection))
							mktmessage.msgOutputMsg(print_msg)
						# else:
						# 	# print "%s #%s No amount was collected." %(ID, str(NumOfPD))
						# 	print_msg = "%s #%s No amount was collected." %(ID, str(NumOfPD))
						# 	mktmessage.msgOutputMsg(print_msg)


						NumOfPD += 1

				# Clear PD_DATE query object
				del PD_DATE

			else:
				# Call method for error message
				error_msg = "Account not found."
				mktmessage.setLogError(error_msg)

		else:
			# Call method for error message
			error_msg = "Loan contract not found."
			mktmessage.setLogError(error_msg)
		db.session.commit()
	except Exception as e:
		db.session.rollback()
		raise


def bookProvision(LC, AccSetting, ReportingRateObj, AssetClassObj, TranDate, NextRunDate, NumDayDue=0,EOD=0):
	"""
		This provisioning on the block using for loan has been collection principal,
		So we need to reverse old provisioning amount and booking new amount with 
		the same loan class
	"""
	try:
		LoanID 		= 	LC.ID 
		AssClass 	= 	LC.AssetClass 
		LoanType 	=	LC.LoanType 
		Currency 	=	LC.Currency 
		Account 	=	LC.Account 
		Branch  	=	LC.Branch
		ID 			=	'PD%s'%LoanID 
		MoreThanOneYear =	LC.MoreThanOneYear  
		PrevProvisionAmount = 0
		MinAssetClass = getattr(LC,'MinAssetClass','')
		Provision = MKT_PROVISION.query.\
					filter(MKT_PROVISION.LOANID == LoanID).\
					filter(MKT_PROVISION.ASSETID == AssClass).\
					first()

		if Provision:
			PrevProvisionAmount =	float(Provision.Amount)

		if int(AssClass) == 0 or LoanType == 'R' or LC.Classification == 'M':
			ClassifiedMode = 'M' if LC.Classification == 'M' else ''

			LoanOustanding 	= 	float(LC.OutstandingAmount)
			PDObj = MKT_PD_DATE.query.filter(MKT_PD_DATE.ID==ID).\
						filter(MKT_PD_DATE.NextRunDate==NextRunDate).\
						filter(or_(MKT_PD_DATE.OutPriAmount>0,MKT_PD_DATE.OutIntAmount>0)).\
						order_by(MKT_PD_DATE.DueDate.asc()).first()

			if PDObj:
				NumDayDue = PDObj.NumDayDue

			ProAssetClassObj 	= 	MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID.ilike('%-' + LC.LoanProduct)).first()
			ProAssetClass		= 	'%s-%s'%(AssClass,LC.LoanProduct) if ProAssetClassObj else AssClass
			ProvisionAmount 	= 	getProvisioningAmount(ProAssetClass, LoanOustanding, LoanType, MoreThanOneYear, NumDayDue,ClassifiedMode=ClassifiedMode)
			RoundedProvisionAmount = mktmoney.formatNumber(ProvisionAmount,1,9)
			RoundedPrevProvisionAmount = mktmoney.formatNumber(PrevProvisionAmount,1,9)
			if RoundedProvisionAmount != RoundedPrevProvisionAmount:
				AssetClass 	= AssetClassObj.get(ProAssetClass)
				ProResvCat 	= AssetClass.ProResvCat
				ProvExpCat 	= AssetClass.ProvExpCat
				
				# Reverse Old Provisioning
				if PrevProvisionAmount > 0:
					reverseProvisioning(LoanID, AssClass, ProResvCat, ProvExpCat, Currency, Account, TranDate, Branch, AccSetting, ReportingRateObj,EOD=EOD)

				# Booking Provisioning To New Class
				provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, Account, Currency, TranDate, LoanID, Branch, AssClass, AccSetting, ReportingRateObj,EOD=EOD)
		
	except Exception as e:
		raise

def updatePDInterest(LoanObj,PDID,SystemBankDate):
	try:
		ProductObj 			= 	MKT_LOAN_PRODUCT.query.get(LoanObj.LoanProduct)
		InterestDayBasis 	= 	int(ProductObj.IntDayBasis)
		RatePerYear 		= 	float(LoanObj.IRR) if LoanObj.IRR else float(LoanObj.InterestRate)

		PDDateObj = MKT_PD_DATE.query.filter(MKT_PD_DATE.PDID==PDID).first()
		if PDDateObj:
			InterestPerDay 	= 	mktreschedule.getInterestPerDay(RatePerYear, float(PDDateObj.OutPriAmount), InterestDayBasis, SystemBankDate)
			PDDateObj.OutAmount = Decimal(PDDateObj.OutAmount) + Decimal(InterestPerDay)
			PDDateObj.OutIntAmount = Decimal(PDDateObj.OutIntAmount) + Decimal(InterestPerDay)
			db.session.add(PDDateObj)
		
	except Exception as e:
		raise 

def getSuspendCollection(**kwargs):
	try:
		# Check if Loan is Suspend
		# Collection Suspend
		EOD 		= kwargs.get('EOD',0)
		AccSetting 	= kwargs.get('AccSetting','')
		Suspend 	= kwargs.get('Suspend','')
		PDParam 	= kwargs.get('PDParam','')
		Amount 		= kwargs.get('Amount','')
		Note 		= kwargs.get('Note','')
		Account 	= kwargs.get('Account','')
		Branch 		= kwargs.get('Branch','')
		Currency 	= kwargs.get('Currency','')
		LC_Pro 		= kwargs.get('LC_Pro','')
		TranDate 	= kwargs.get('TranDate','')
		AssClass 	= kwargs.get('AssClass','')
		ID 			= kwargs.get('ID','')
		k1 			= kwargs.get('k1','')
		k2 			= kwargs.get('k2','')
		k3 			= kwargs.get('k3','')
		k4 			= kwargs.get('k4','')
		k5 			= kwargs.get('k5','')
		k6 			= kwargs.get('k6','')
		k7 			= kwargs.get('k7','')
		k8 			= kwargs.get('k8','')
		k9 			= kwargs.get('k9','')

		LoanContract 	= kwargs.get('LoanContract','')
		ReportingRateObj 	= kwargs.get('ReportingRateObj','')
		ManualCollectID 	= kwargs.get('ManualCollectID','')
		if not Note:
			Note = 'Interest income has been moved from suspend'

		if Suspend.upper() == 'Y':
			Transaction = AccSetting.CrAccrIntTran
			if not Transaction:
				# Call method for error message
				error_msg = "Accraed interest reversal transaction not found."
				mktmessage.setLogError(error_msg)

			else:

				Category 	= PDParam.SuspendCrCat
				if not Category:
					# Call method for error message
					error_msg = "Suspend credit category not found."
					mktmessage.setLogError(error_msg)

				DateTimeNow = mktdate.getDateTimeNow()
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
				Mode 		= "Direct"
				DrCr 		= "Dr"
				# Debit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					"PD",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					AllowEquivalent=True,
					UserReference=ManualCollectID, 	# UserReference
					EOD=EOD
				)

				DicEquivalent,IntCurrency,IntIncome = mktloan.getInterestMultiCurrency(AccSetting,ReportingRateObj,Branch,Currency,Amount)
				
				Category = LC_Pro.IntIncomeCate.strip()
				if not Category:
					# Call method for error message
					error_msg = "Interest income category not found."
					mktmessage.setLogError(error_msg)

				DateTimeNow = mktdate.getDateTimeNow()
				GL_KEYS 	= mktaccounting.getConsolKey(Category, IntCurrency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
				Mode 		= "Direct"
				DrCr 		= "Cr"
				# Debit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					IntCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(IntIncome), 	# Amount
					"PD",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					AllowEquivalent=True,
					UserReference=ManualCollectID, 	# UserReference
					EOD=EOD
				)

				LCYAccrInterest 				=	float(IntIncome) * float(ReportingRateObj.get(Currency))
				LoanContract.IntIncEarned 		=	(float(LoanContract.IntIncEarned) if LoanContract.IntIncEarned else float(0)) + float(LCYAccrInterest)
				
				if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
					LoanContract.FCYIntIncEarned 	=	(float(LoanContract.FCYIntIncEarned) if LoanContract.FCYIntIncEarned else float(0)) + float(IntIncome)
					
				db.session.add(LoanContract)

	except Exception as e:
		raise e

def getPDCollectionVertical(LoanID='', Stat='', ByBranch='', Limit='', OffSet='', **kwargs):
	''
	if LoanID: 
		PD = MKT_PAST_DUE.query.\
								order_by(asc(MKT_PAST_DUE.ID)).\
								filter(MKT_PAST_DUE.TotODAmount > 0).\
								filter(MKT_PAST_DUE.ID ==LoanID).\
								all()
	else:
		
		if Limit:
			PD = MKT_PAST_DUE.query.\
									order_by(asc(MKT_PAST_DUE.ID)).\
									filter(MKT_PAST_DUE.TotODAmount > 0).\
									limit(Limit).offset(OffSet).\
									all()
		else:
			PD = MKT_PAST_DUE.query.\
									order_by(asc(MKT_PAST_DUE.ID)).\
									filter(MKT_PAST_DUE.TotODAmount > 0).\
									count()
	return PD

def setPDCollectionVertical(PastDueID="", EOD=1, Stat="", TerminateTran=False, ManualCollect=False, ManualCollectID='',NumInstallmentCollect='',CollectOrder=''):
	"""
	During EOD follow by BatchJob, before collection:
		- Check Loan Past Due.
		- Check Current Installment or Loan not due.
		- Look up Draw Down Account Balance.
		- Check order collection loan.
		more detail, please read morakot document.
	"""
	try:
		
		NextRunDate 	= mktdate.getBankDateObj().NextSystemDate
		NextRunDate 	= NextRunDate.strip()

		Start 			= time.time()

		currentDate 	= 	mktdate.getDateISO()
		SystemBankDate 	= 	mktdate.getBankDate()
		
		# Get Parameter from Setting
		AccSetting 		= 	mktsetting.getAccSetting() #Get Acccounting Setting
		PDParam 		= 	mktParam.getPDParam() # Get PD Paramater Setting
	
		PDO_PARAM  		= 	PDParam.PDO
		NAB_PARAM  		= 	PDParam.NAB
		PenaltyOption 	=	PDParam.PenOption
		Param 			= 	PDParam.RepOrder
		Param 			= 	Param.split()

		# End Setting

		#Get transaction from App setting
		PDCharge 		= mktsetting.getAppSetting('PDCharge')
		PDInterest 		= mktsetting.getAppSetting('PDInterest')
		PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')
		#End App setting
		if Stat != "1":
			if not PDCharge or not PDInterest or not PDPrincipal :
				mktmessage.setLogError("PD collection transaction not yet configuration in app setting.")
				
		# get MKT_PAST_DUE records
		LC = ""
		Note  	= 	''
		if PastDueID:
			Note  	=	'Manual Collection' if ManualCollect == True else ''

		PD_Count = getPDCollectionVertical(LoanID="", Stat='1')
		if Stat == "1":
			# Count record before run eod.
			return PD_Count

		AccSetting 			= 	mktsetting.getAccSetting()
		AssetClassObj 		= 	MKT_ASSET_CLASS.query
		AccrIntOption		= 	AccSetting.AccrIntOption
		ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
		JobStatus 			= 	[]


		if PD_Count:

			Option  =	{}
			kwargs 	=	{	'AccSetting'	:	AccSetting,
							'ReportingRateObj'	:	ReportingRateObj,
							# 'AssetClassObj'	:	AssetClassObj,
							'AccrIntOption'	:	AccrIntOption,
							'PDCharge'	:	PDCharge,
							'PDInterest'	:	PDInterest,
							'PDPrincipal'	:	PDPrincipal,
							'Param'	:	Param,
							'SystemBankDate'	:	SystemBankDate,
							'NextRunDate'	:	NextRunDate,
							'currentDate'	:	currentDate,
							'PDParam'	:	PDParam,
							'PDO_PARAM'	:	PDO_PARAM,
							'NAB_PARAM'	:	NAB_PARAM,
							'PenaltyOption'	:	PenaltyOption,
							'ManualCollect'	:	ManualCollect,
							'ManualCollectID'	:	ManualCollectID,
							'PastDueID'	:	PastDueID,
							'EOD'	:	EOD,
							'PD_Count'	:	PD_Count,
							'JobStatus'	:	JobStatus,
							'Note'	:	Note,
							'NumInstallmentCollect':NumInstallmentCollect
						}
			if PastDueID:
				processPDCollection(PastDueID,**kwargs)
			else:
				kwargs.update({'EOD':1})
				Process =	mktthread.runMultiprocessing(getPDCollectionVertical,processPDCollection, PD_Count,Param1=Option, Param2=kwargs)

		else:
			# print "No PD record."
			print_msg = "No PD record."
			mktmessage.msgOutputMsg(print_msg)

		# Clear PD; LC query object
		# del PD
		del LC

		EndTime = time.time() - Start
		print "Total Execute PD Collection:%s seconds"%EndTime

		if EOD == 1:
			return ""
		else:
			return True

	except Exception as e:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise


def processPDCollection(PD, **kwargs):
	try:
		AccSetting  		=	kwargs.get('AccSetting','')	
		ReportingRateObj  	=	kwargs.get('ReportingRateObj','')	
		AssetClassObj  		= 	MKT_ASSET_CLASS.query
		AccrIntOption  		=	kwargs.get('AccrIntOption','')	
		PDCharge  			=	kwargs.get('PDCharge','')	
		PDInterest  		=	kwargs.get('PDInterest','')	
		PDPrincipal  		=	kwargs.get('PDPrincipal','')	
		Param  				=	kwargs.get('Param','')	
		SystemBankDate  	=	kwargs.get('SystemBankDate','')	
		NextRunDate  		=	kwargs.get('NextRunDate','')	
		currentDate  		=	kwargs.get('currentDate','')	
		PDParam  			=	kwargs.get('PDParam','')	
		PDRepMethod  		=	kwargs.get('PDRepMethod','')	
		PDO_PARAM  			=	kwargs.get('PDO_PARAM','')	
		NAB_PARAM  			=	kwargs.get('NAB_PARAM','')	
		PenaltyOption  		=	kwargs.get('PenaltyOption','')	
		ManualCollect  		=	kwargs.get('ManualCollect','')	
		ManualCollectID  	=	kwargs.get('ManualCollectID','')	
		PastDueID  			=	kwargs.get('PastDueID','')	
		EOD  				=	kwargs.get('EOD',0)	
		PD_Count  			=	kwargs.get('PD_Count','')	
		JobStatus  			=	kwargs.get('JobStatus','')	
		Note  				=	kwargs.get('Note','')
		NumInstallmentCollect  	=	kwargs.get('NumInstallmentCollect','')
		CollectedNote 		= 	Note	
		
		# Block update BjStat
		if EOD:
			JobStatus 	=	mktbjstat.updateCompletedJobStatus('PDCollection', PD_Count, JobStatus)
		# End Block
		row = db.session.query(MKT_PAST_DUE).get(PD)

		PDID 		= 	row.ID
		Principal 	= 	0
		Interest 	= 	0
		Penalty 	= 	0
		Charge 		= 	0
		TranDate 	=	SystemBankDate
		AccBal 		= 	0

		LC_ID = row.LoanID
		# Block get single Loan Contract record of PD
		LC = MKT_LOAN_CONTRACT.query.get(LC_ID)
		Account = ""
		if LC:
			ID 					= 	PDID
			LC_PRODUCT 			= 	LC.LoanProduct
			Branch 				= 	LC.Branch
			Account 			= 	LC.Account
			CustomerID 			= 	LC.ContractCustomerID
			LC_Amount 			=	LC.Amount
			MoreThanOneYear 	=	LC.MoreThanOneYear
			LoanType 			=	LC.LoanType
			LoanID 				=	LC.ID
			Suspend 			=	LC.Suspend
			AssClass 			= 	LC.AssetClass
			MinAssetClass 		= getattr(LC,'MinAssetClass','')

			k1 = AccSetting.GL_KEY1
			k2 = AccSetting.GL_KEY2
			k3 = AccSetting.GL_KEY3
			k4 = AccSetting.GL_KEY4
			k5 = AccSetting.GL_KEY5
			k6 = AccSetting.GL_KEY6
			k7 = AccSetting.GL_KEY7
			k8 = AccSetting.GL_KEY8
			k9 = AccSetting.GL_KEY9

			k1 = mktkey.getResultKey(k1, LC_ID, CustomerID)
			k2 = mktkey.getResultKey(k2, LC_ID, CustomerID)
			k3 = mktkey.getResultKey(k3, LC_ID, CustomerID)
			k4 = mktkey.getResultKey(k4, LC_ID, CustomerID)
			k5 = mktkey.getResultKey(k5, LC_ID, CustomerID)
			k6 = mktkey.getResultKey(k6, LC_ID, CustomerID)
			k7 = mktkey.getResultKey(k7, LC_ID, CustomerID)
			k8 = mktkey.getResultKey(k8, LC_ID, CustomerID)
			k9 = mktkey.getResultKey(k9, LC_ID, CustomerID)

			# Block get Account information
			AccountObj = MKT_ACCOUNT.query.get(Account)
			if AccountObj:
				AccCategory = 	AccountObj.AccCategory
				AccBal 		= 	AccountObj.AvailableBal if AccountObj.AvailableBal else 0
				Currency 	= 	AccountObj.Currency
				# Block Filter All PD detail Record
				PDDateObj 	= 	MKT_PD_DATE.query.\
								order_by(asc(MKT_PD_DATE.DueDate)).\
								filter(MKT_PD_DATE.ID == PDID).\
								filter(MKT_PD_DATE.NextRunDate == str(SystemBankDate))

				"""	
					Block For Limit PD manual collect by number of installment
				"""
				if ManualCollect:
					"""
					Check PenaltyOption
					"""
					if PenaltyOption == "M": #Manual Collect
						PDDateObj = PDDateObj.filter(or_(MKT_PD_DATE.OutIntAmount > 0,
													 MKT_PD_DATE.OutPriAmount > 0,
													 MKT_PD_DATE.OutChgAmount > 0))
					else:
						PDDateObj = PDDateObj.filter(MKT_PD_DATE.OutAmount >0)

					PDDateObj = PDDateObj.order_by(asc(MKT_PD_DATE.DueDate))

					if NumInstallmentCollect:
						PDDateObj = PDDateObj.limit(NumInstallmentCollect)
				else:
					PDDateObj = PDDateObj.filter(MKT_PD_DATE.OutAmount >0)
					PDDateObj = PDDateObj.order_by(asc(MKT_PD_DATE.DueDate))

				# --- End ---#										
				PDDateObj = PDDateObj.all()
				if PDDateObj:

					PenaltyCollection 	= 0
					ChargeCollection 	= 0
					InterestCollection 	= 0
					PrincipalCollection = 0
					CollectionDic = {}
					# LC 					= 	MKT_LOAN_CONTRACT.query.get(LC_ID)
					# Suspend 			=	LC.Suspend
					# AssClass 			= 	LC.AssetClass

					if AccBal > 0:
						
						for p in Param:
							if AccBal <= 0:	break
							if p == 'PE' and PenaltyOption and PenaltyOption.upper() == 'A':
								DateTimeNow = mktdate.getDateTimeNow()
								
								for pd in PDDateObj:
									Note = '%s Due Date %s'%(CollectedNote, pd.DueDate)
									if AccBal <= 0:	break
									Penalty = pd.OutPenAmount
									Amount = pd.OutPenAmount if AccBal >= pd.OutPenAmount else AccBal

									if int(pd.NumDayDue) >= int(PDO_PARAM):
										AccBal = AccBal - Amount
										Dict = CollectionDic.get(str(pd.DueDate), {})
										Dict.update({'PE':Amount})
										CollectionDic.update({str(pd.DueDate):Dict})

										if Amount > 0:
											# Define parameter for Debit Customer Account
											DrCr  		= 'Dr'
											Category 	= AccountObj.AccCategory
											if not Category:
												# Call method for error message
												error_msg = "Account category not found."
												mktmessage.setLogError(error_msg)

											Transaction = AccSetting.PenaltyTran
											GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
											Mode 		= ""

											if Transaction:
												# Debit Customer Account
												mktaccounting.postAccounting(
													"AUTH", 				# Status
													"0", 					# Curr
													"System",				# Inputter
													DateTimeNow, 			# Createdon
													"System",				# Authorizer
													DateTimeNow,			# Authorizeon
													"", 					# AEID
													Account,				# Account
													Category,				# Category
													Currency,				# Currency
													DrCr,					# DrCr
													Decimal(Amount), 		# Amount
													"PD",					# Module
													Transaction, 			# Transaction
													TranDate, 				# TransactionDate
													ID, 					# Reference
													Note, 					# Note
													"", 					# JNID
													Branch,					# Branch
													GL_KEYS,				# GL_KEYS
													Mode, 					# Mode check to insert Journal for category
													UserReference=ManualCollectID, 	# UserReference
													EOD=EOD
												)

												# Define new parameter for Credit Penalty Category
												DrCr 		= "Cr"
												Mode 		= "Direct"
												Category 	= PDParam.ODPenaltyCat
												if not Category:
													# Call method for error message
													error_msg = "Penalty income category not found."
													mktmessage.setLogError(error_msg)

												GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
												# Credit Penalty Category
												mktaccounting.postAccounting(
													"AUTH", 				# Status
													"0", 					# Curr
													"System",				# Inputter
													DateTimeNow, 			# Createdon
													"System",				# Authorizer
													DateTimeNow,			# Authorizeon
													"", 					# AEID
													Account,				# Account
													Category,				# Category
													Currency,				# Currency
													DrCr,					# DrCr
													Decimal(Amount), 		# Amount
													"PD",					# Module
													Transaction, 			# Transaction
													TranDate, 				# TransactionDate
													ID, 					# Reference
													Note, 					# Note
													"", 					# JNID
													Branch,					# Branch
													GL_KEYS,				# GL_KEYS
													Mode, 					# Mode check to insert Journal for category
													UserReference=ManualCollectID, 	# UserReference
													EOD=EOD
												)

											else:
												# Call method for error message
												error_msg = "Penalty collection transaction not found."
												mktmessage.setLogError(error_msg)

							if p == 'CH':
								for pd in PDDateObj:
									Note = '%s Due Date %s'%(CollectedNote, pd.DueDate)
									if AccBal <= 0:	break
									if pd.OutChgAmount > 0:
										Amount 	= pd.OutChgAmount if AccBal >= pd.OutChgAmount else AccBal
										AccBal 	= AccBal - Amount
										Dict = CollectionDic.get(str(pd.DueDate), {})
										Dict.update({'CH':Amount})
										CollectionDic.update({str(pd.DueDate):Dict})

										# Call Charge Collection
										Transaction = PDCharge
										mktcharge.setChargeCollection(Branch=Branch, LoanID=LC_ID, AccSetting=AccSetting,
														 Account=Account, AccCategory=AccCategory, Currency=Currency, 
														 ChargeCollect=Amount, TotalCollect=pd.OutChgAmount, Transaction=Transaction, TransactionDate=TranDate, 
														 Reference=ID, Suspend=Suspend, PDCollect="Y",Note=Note, ManualCollectID=ManualCollectID,EOD=EOD)

							if p == 'IN':
								
								DateTimeNow = mktdate.getDateTimeNow()
								LC_Pro = MKT_LOAN_PRODUCT.query.get(LC_PRODUCT)
								
								for pd in PDDateObj:
									Note = '%s Due Date %s'%(CollectedNote, pd.DueDate)
									if AccBal <= 0:	break

									if pd.OutIntAmount > 0:
										Amount = pd.OutIntAmount if AccBal >= pd.OutIntAmount else AccBal
										RoundedAmount 	= Decimal((mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(LC.Currency))).replace(',',''))
										DiffOutIntAmount = Amount - RoundedAmount
										AccBal = AccBal - RoundedAmount
										Dict = CollectionDic.get(str(pd.DueDate), {})
										Dict.update({'IN':Amount})
										CollectionDic.update({str(pd.DueDate):Dict})

										""" Posting DrCr
											Dr : DDA is RoundedAmount
											Cr : AIR is an Amount
										"""
										if Amount > 0:
											
											DrCr 		= 'Dr'
											Category 	= AccountObj.AccCategory

											if not Category:
												# Call method for error message
												error_msg = "Account category not found."
												mktmessage.setLogError(error_msg)

											Transaction = PDInterest
											GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
											Mode 		= ""

											if LC_Pro:

												if Transaction:
													# Debit Customer Account
													mktaccounting.postAccounting(
														"AUTH", 				# Status
														"0", 					# Curr
														"System",				# Inputter
														DateTimeNow, 			# Createdon
														"System",				# Authorizer
														DateTimeNow,			# Authorizeon
														"", 					# AEID
														Account,				# Account
														Category,				# Category
														Currency,				# Currency
														DrCr,					# DrCr
														Decimal(RoundedAmount), # Amount
														"PD",					# Module
														Transaction, 			# Transaction
														TranDate, 				# TransactionDate
														ID, 					# Reference
														Note, 					# Note
														"", 					# JNID
														Branch,					# Branch
														GL_KEYS,				# GL_KEYS
														Mode, 					# Mode check to insert Journal for category
														UserReference=ManualCollectID, 	# UserReference
														EOD=EOD
													)

													DrCr 		= 'Cr'
													Category 	= LC_Pro.IntReceivableCate
													if not Category:
														# Call method for error message
														error_msg = "Interest income category not found."
														mktmessage.setLogError(error_msg)

													# Transaction = PDInterest
													GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "PD", k1, k2, k3, k4, k5, k6, k7, k8, k9)
													Mode 		= "Direct"

													# Credit Interest Income Category
													mktaccounting.postAccounting(
														"AUTH", 				# Status
														"0", 					# Curr
														"System",				# Inputter
														DateTimeNow, 			# Createdon
														"System",				# Authorizer
														DateTimeNow,			# Authorizeon
														"", 					# AEID
														Account,				# Account
														Category,				# Category
														Currency,			# Currency
														DrCr,					# DrCr
														Decimal(Amount), 	# Amount
														"PD",					# Module
														Transaction, 			# Transaction
														TranDate, 				# TransactionDate
														ID, 					# Reference
														Note, 					# Note
														"", 					# JNID
														Branch,					# Branch
														GL_KEYS,				# GL_KEYS
														Mode, 					# Mode check to insert Journal for category
														UserReference=ManualCollectID, 	# UserReference
														EOD=EOD
													)

													""" Posting DrCr Interest Income or Interest Suspend
													if DiffOutIntAmount > 0:
														Dr : Int_Income or Int_Suspend
													els:
														Cr : Int_Income or Int_Suspend
													"""
													DrCr = 'Dr'
													Suspend = LC.Suspend
													Mode 		= "Direct"

													if DiffOutIntAmount < 0:

														DrCr = 'Cr'
														DiffOutIntAmount = abs(DiffOutIntAmount)

													if Suspend.upper() == 'Y':

														Transaction = AccSetting.CrAccrIntTran

														if not Transaction:
															# Call method for error message
															error_msg = "Accraed interest reversal transaction not found."
															mktmessage.setLogError(error_msg)

														else:

															Category 	= PDParam.SuspendCrCat

															if not Category:
																# Call method for error message
																error_msg = "Suspend credit category not found."
																mktmessage.setLogError(error_msg)

														GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
													else:
														Category = LC_Pro.IntIncomeCate.strip()
														if not Category:
															# Call method for error message
															error_msg = "Interest income category not found."
															mktmessage.setLogError(error_msg)

														GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "PD", k1, k2, k3, k4, k5, k6, k7, k8, k9)

													# Credit or Debit Interest Income Category
													mktaccounting.postAccounting(
														"AUTH", 				# Status
														"0", 					# Curr
														"System",				# Inputter
														DateTimeNow, 			# Createdon
														"System",				# Authorizer
														DateTimeNow,			# Authorizeon
														"", 					# AEID
														Account,				# Account
														Category,				# Category
														Currency,			# Currency
														DrCr,					# DrCr
														Decimal(DiffOutIntAmount), # Amount
														"PD",					# Module
														Transaction, 			# Transaction
														TranDate, 				# TransactionDate
														ID, 					# Reference
														Note, 					# Note
														"", 					# JNID
														Branch,					# Branch
														GL_KEYS,				# GL_KEYS
														Mode, 					# Mode check to insert Journal for category
														UserReference=ManualCollectID, 	# UserReference
														EOD=EOD
													)


													LC.AccrInterest = (LC.AccrInterest if LC.AccrInterest else 0) - Amount
													db.session.add(LC)

												else:
													# Call method for error message
													error_msg = "Interest collection transaction not found."
													mktmessage.setLogError(error_msg)
												"""
												Loan's class changes to class 20 up
												and then we collect and change from Interest Insuspend to Interest Income
												"""
												SuspendParam = { 'AccSetting' 	:AccSetting,
																'EOD'			:EOD,
																'Suspend' 		:Suspend,
																'PDParam' 		:PDParam,
																'Amount' 		:RoundedAmount,
																'Note' 			:Note,
																'Account' 		:Account,
																'Branch' 		:Branch,
																'Currency' 		:Currency,
																'LC_Pro' 		:LC_Pro,
																'LoanContract' 	:LC,
																'AssClass' 		:AssClass,
																'TranDate' 		:TranDate,
																'ReportingRateObj' 	:ReportingRateObj,
																'ManualCollectID' 	:ManualCollectID,
																'ID':LC_ID,
																'k1':k1, 'k2':k2, 'k3':k3, 'k4':k4, 'k5':k5, 'k6':k6, 'k7':k7, 'k8':k8, 'k9':k9

															}

												getSuspendCollection(**SuspendParam)

											else:
												# Call method for error message
												error_msg = "Account product not found for contract#" + str(ID) + "."
												mktmessage.setLogError(error_msg)

							if p == 'PR':
								for pd in PDDateObj:
									Note = '%s Due Date %s'%(CollectedNote, pd.DueDate)
									if AccBal <= 0:	break
									if pd.OutPriAmount > 0:
										Amount = pd.OutPriAmount if AccBal >= pd.OutPriAmount else AccBal
										Dict = CollectionDic.get(str(pd.DueDate), {})
										Dict.update({'PR':Amount})
										CollectionDic.update({str(pd.DueDate):Dict})

										AccBal 				= AccBal - Amount
										AccCategory 		= AccountObj.AccCategory
										Transaction 		= PDPrincipal
										mktloan.setPrincipalCollection(AccSetting,LC,
												Amount,Account,AccCategory,Currency,
												Transaction,TranDate,AssClass,ID,Note=Note,ManualCollectID=ManualCollectID,EOD=EOD)
								
					NumOfPD = 1
					NumDayDue 	=	0
					CollectedPrincipal = 0
					for pd in PDDateObj:
						if not NumDayDue : NumDayDue  = pd.NumDayDue
						DueDate 			= pd.DueDate 
						PD_ID 				= pd.PDID 
						ODStatus 			= pd.ODStatus 
						Dict = CollectionDic.get(DueDate,{})
						PenaltyCollection 	= Dict.get('PE',0) 
						ChargeCollection 	= Dict.get('CH',0)
						InterestCollection 	= Dict.get('IN',0) 
						PrincipalCollection = Dict.get('PR',0)
						CollectedPrincipal  += PrincipalCollection

						# print PenaltyCollection,ChargeCollection,InterestCollection,PrincipalCollection
						Penalty 			= pd.OutPenAmount
						pd.NextRunDate 		= NextRunDate
						db.session.add(pd)
						
						RepStatus,TotalCollection,ClearPenalty = subtractPDCollection(ID, PD_ID, ODStatus, PenaltyCollection, ChargeCollection, InterestCollection, PrincipalCollection)
						Penalty -= Decimal(ClearPenalty) # Mean that Fully Paid PD in status PRE and GRA

						# print 'RepStatus',RepStatus,'TotalCollection',TotalCollection,'ClearPenalty',ClearPenalty
						# TotalCollection = float(PenaltyCollection) + float(ChargeCollection) + float(InterestCollection) + float(PrincipalCollection)
						if TotalCollection > 0:
							#Update Repayment Status
							mktloan.updateScheduleStatus(LoanID,DueDate,RepStatus,TotalCollection)

						if AccrIntOption == '2': 
							#update interest accrue by loan outstanding
							updatePDInterest(LC,PD_ID,SystemBankDate)
						# # Calculate all MKT_PD_DATE depend on MKT_PAST_DUE
						# calculateTotalPD(ID)

						
						if RepStatus != 4:	#4: Fully Paid	
							if ManualCollect == False:
								# Update NumDayDue Of Past Due Date
								setNumDayDue(pd,SystemBankDate)

								# Update PD Status
								updatePDStatus(pd, LC_PRODUCT)

						# # Update Last Outstanding Amount
						# mktloan.setUpdateOutstandingAmount(LC)

						# Update Penalty
						if 'PE' in Param:
							if ManualCollect == False:
								setPenalty(row,LoanID,ID,PD_ID,DueDate)
						# # commit() one dependency record
						# db.session.commit()
						# print "Past due collected successfully."
						TotalPDAmount = float(Principal) + float(Interest) + float(Charge) + float(Penalty)
						if float(TotalPDAmount) == float(TotalCollection):
							# print "%s #%s Full amount was collected: %s." %(ID, str(NumOfPD), str(TotalCollection))
							print_msg = "%s #%s Full amount was collected: %s." %(ID, str(NumOfPD), str(TotalCollection))
							mktmessage.msgOutputMsg(print_msg)
						elif float(TotalCollection) < float(TotalPDAmount) and float(TotalCollection) > 0:
							# print "%s #%s Partial amount was collected: %s." %(ID, str(NumOfPD), str(TotalCollection))
							print_msg = "%s #%s Partial amount was collected: %s." %(ID, str(NumOfPD), str(TotalCollection))
							mktmessage.msgOutputMsg(print_msg)
						else:
							# print "%s #%s No amount was collected." %(ID, str(NumOfPD))
							print_msg = "%s #%s No amount was collected." %(ID, str(NumOfPD))
							mktmessage.msgOutputMsg(print_msg)


						NumOfPD += 1

					if CollectedPrincipal > 0:
						"""
							This provisioning on the block using for loan has been collection principal,
							So we need to reverse old provisioning amount and booking new amount with 
							the same loan class
						"""
						Provision = MKT_PROVISION.query.\
									filter(MKT_PROVISION.LOANID == LoanID).\
									filter(MKT_PROVISION.ASSETID == AssClass).\
									first()

						if Provision:
							# print "Provision booking and reversal in pd"
							PastDue 						= 	MKT_PAST_DUE.query.get(ID)

							if PastDue:

								LoanOustanding 				= 	float(PastDue.TotPrincipalDue) + float(LC.Amount)
								
								# print 'LoanOustanding',LoanOustanding
								ClassifiedMode 	= 	'M' if LC.Classification == 'M' else '' 
								ProAssetClassObj= 	AssetClassObj.filter(MKT_ASSET_CLASS.ID.ilike('%-' + LC_PRODUCT)).first()
								ProAssetClass	= 	'%s-%s'%(AssClass,LC_PRODUCT) if ProAssetClassObj else AssClass
								ProvisionAmount = 	getProvisioningAmount(ProAssetClass, LoanOustanding, LoanType, MoreThanOneYear, NumDayDue, ClassifiedMode=ClassifiedMode)
								# print 'ProvisionAmount',ProvisionAmount

								AssetClass 	= AssetClassObj.get(ProAssetClass)
								ProResvCat 	= AssetClass.ProResvCat
								ProvExpCat 	= AssetClass.ProvExpCat
								
								# Reverse Old Provisioning
								reverseProvisioning(LoanID, AssClass, ProResvCat, ProvExpCat, Currency, Account, TranDate, Branch, AccSetting, ReportingRateObj,EOD=EOD)

								# Booking Provisioning To New Class
								provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, Account, Currency, TranDate, LoanID, Branch, AssClass, AccSetting, ReportingRateObj,EOD=EOD)
						
					# Update Last Outstanding Amount
					mktloan.setUpdateOutstandingAmount(LC)
					# Update Class
					loanClassification(LC_ID, EOD, "", "", "No")
					# Calculate all MKT_PD_DATE depend on MKT_PAST_DUE
					calculateTotalPD(ID)
					# commit() one dependency record
					db.session.commit()

				# Clear PD_DATE query object
				del PDDateObj

			else:
				# Call method for error message
				error_msg = "Account not found."
				mktmessage.setLogError(error_msg)

		else:
			# Call method for error message
			error_msg = "Loan contract not found."
			mktmessage.setLogError(error_msg)
		
	except Exception as e:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

#Capitalize Interest/Penalty 2018-04-11 Mony
def loanProvision(**kwargs):
	try:
		LoanID 			= 	kwargs.get("LoanID")

		AccSetting 		= 	mktsetting.getAccSetting()
		ReportingRateObj= 	mktaccounting.getReportingRateObj()
		SystemBankDate  = 	str(mktdate.getBankDate())
		LoanObj 		= 	MKT_LOAN_CONTRACT.query.get(LoanID)
		AssetClass 		=	LoanObj.AssetClass
		AssetClassObj 	= 	MKT_ASSET_CLASS.query.get(AssetClass)
		ProResvCat 		= 	AssetClassObj.ProResvCat
		ProvExpCat 		= 	AssetClassObj.ProvExpCat
		LoanType  		=	LoanObj.LoanType
		MoreThanOneYear =	LoanObj.MoreThanOneYear
		LoanOustanding  =	LoanObj.OutstandingAmount
		Currency 		= 	LoanObj.Currency
		TranDate 		= 	SystemBankDate
		Branch 			=	LoanObj.Branch
		Account 		= 	""

		NumDayDue 		= 	0
		PastDueID 		= 	"PD%s" % LoanID
		PDObj = MKT_PD_DATE.query.filter(MKT_PD_DATE.ID==PastDueID).\
								filter(MKT_PD_DATE.NextRunDate==SystemBankDate).\
								filter(or_(MKT_PD_DATE.OutPriAmount>0,MKT_PD_DATE.OutIntAmount>0)).\
								order_by(MKT_PD_DATE.DueDate.asc()).first()
		if PDObj:
			NumDayDue = PDObj.NumDayDue

		ProvisionAmount = 	getProvisioningAmount(AssetClass, LoanOustanding, LoanType, MoreThanOneYear, NumDayDue,"M")								
		# Reverse Old Provisioning
		reverseProvisioning(LoanID, AssetClass, ProResvCat, ProvExpCat, Currency, Account, TranDate, Branch, AccSetting, ReportingRateObj)
		# Booking Provisioning To New Class
		provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, Account, Currency, TranDate, LoanID, Branch, AssetClass, AccSetting, ReportingRateObj)

	except Exception as e:
		raise
#end

