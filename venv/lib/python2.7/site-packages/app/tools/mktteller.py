'''
Created Date: 07 May 2015
Author: Sovankiry Rim

Modified by: Sovankiry
Modified Date: 15 July 2015
All Right Reserved Morakot Technology
Description : mktteller refer to function for Teller Function
Notes : 
'''
from flask 						import flash,session,jsonify,Markup
from app.mktcore.wtfimports 	import *
from .. 						import app, db
from decimal 					import *
from sqlalchemy 				import *

from app.CashAccount.models 			import *
from app.FundTransfer.models 			import *
from app.Teller.models 					import *
from app.Currency.models 				import *
from app.TellerParam.models 			import *
from app.Account.models 				import *
from app.JournalEntry.models 			import *
from app.MultiJournal.models 			import *
from app.Branch.models  				import *
from app.TillOperation.models 			import *
from app.IncomeExpenseBooking.models 	import *
from app.Bank.models 					import *
from app.ForeignExchange.models 		import *
from app.AccProduct.models 				import *
from app.User.models 					import *
from app.Category.models 				import *
from app.Currency.models 				import *
from app.AccEntry.models				import *
from app.LoanContract.models import MKT_LOAN_CONTRACT
from app.PD.models import MKT_PAST_DUE

import mktaudit 				as mktaudit
import mktaccount 				as mktaccount
import mktaccounting 			as mktaccounting
import mktsetting 				as mktsetting
import mkttool 					as mkttool
import mktdate 					as mktdate
import app.tools.mktparam 		as mktparam
import app.tools.mktdb			as mktdb
import app.tools.mktreport 		as mktreport
import app.tools.user 			as mktuser
import app.tools.mktmoney 		as mktmoney


#------------------------ Teller Income / Expense ---------------------------

def isSuspendConfig():
	CurrentBranch 	= mktuser.getCurrentBranch()
	TellerParam 	= mktparam.getTellerParam()
	if TellerParam:
		SuspendAccPro = TellerParam.SuspendAccPro
		if not SuspendAccPro:
			return False,"Please configuration Teller Parameter first."
		
		Acc 	= 	MKT_ACCOUNT.query.filter_by(
											AccProduct 	= 	TellerParam.SuspendAccPro,
											Branch 		= 	CurrentBranch ).\
											first()
		if not Acc:

			return False,"Please create Suspend account first."

		if not TellerParam.IncomeTran:
			return False,"Teller Income transcations not found."

		if not TellerParam.ExpenseTran:
			return False,"Teller Expense transcations not found."

		#Successfull for validate
		return True, TellerParam

	else:
		return False,"Please configuration Teller Parameter first."

def getIncomeExpenseHotField(Type=""):

	DicType = {'I':'Income','E':'Expense'}
	DrAccount	= ""
	DrCategory 	= ""
	Currency 	= ""
	CrAccount 	= ""
	CrCategory 	= ""
	TranCode 	= ""
	Message  	= ""
	TellerParam = mktparam.getTellerParam()
	if TellerParam:
		if Type in DicType:
			if Type == "I":
				# print "here in get IncomeTran %s"%TellerParam.IncomeTran
				TranCode 	= TellerParam.IncomeTran
			else:
				# print "here in get ExpenseTran"
				TranCode 	= TellerParam.ExpenseTran

			if not TranCode:
				Message = "Teller %s transaction not found."% DicType[Type]

			#Get Suspend Account
			CurrentBranch 	= mktuser.getCurrentBranch()	
			Currency 		= request.args.get('Currency') if 'Currency' in request.args else ''
			SuspendAccObj 	= mktaccount.getSuspendAccount(Currency,CurrentBranch)
			if SuspendAccObj:

				if DicType[Type] == "Income":
					CrAccount 	= SuspendAccObj.ID
					CrCategory 	= SuspendAccObj.AccCategory
					
				elif DicType[Type] == "Expense":
					DrAccount 	= SuspendAccObj.ID
					DrCategory 	= SuspendAccObj.AccCategory
			else:
				Message+="Suspend Account not found."
			
			#Get Teller Account
			TellerAcc = getTillAccountObj("",Currency)
			if TellerAcc:

				if DicType[Type] == "Income":

					DrAccount 	= TellerAcc.ID
					DrCategory 	= TellerAcc.AccCategory

				elif DicType[Type] == "Expense":

					CrAccount 	= TellerAcc.ID
					CrCategory 	= TellerAcc.AccCategory
			else:
				Message+="Till Account not found."
			
		else:
			Message="Parameter not found in Income /Expense."
	else:
		Message="Please set Teller Parameter first."

	return jsonify(TranCode=TranCode,DrAccount=DrAccount,DrCategory=DrCategory,CrAccount=CrAccount,CrCategory=CrCategory,Currency=Currency)



def getTellerIncomeExpense():
	ExpenseTran 		= ""
	IncomeTran 			= ""
	TellerParam 		= mktparam.getTellerParam()
	ListTellerID 		= []
	ListIncomeExpense 	= []
	CurrentBranch		= mktuser.getCurrentBranch()

	if TellerParam:
		ExpenseTran = TellerParam.ExpenseTran
		IncomeTran 	= TellerParam.IncomeTran
	IncomeExpenseObj=MKT_INCOME_EXPENSE_BOOKING.query
	QueryTellerID = db.session.query(MKT_TELLER.ID).\
						filter(~MKT_TELLER.ID.in_(db.session.query(MKT_INCOME_EXPENSE_BOOKING.ID).all())).\
						filter(or_(MKT_TELLER.ID.like('%'+'IP'+'%'),MKT_TELLER.ID.like('%'+'EP'+'%'))).\
						filter(MKT_TELLER.Branch == CurrentBranch)

	for row in QueryTellerID:
		ID = str(row.ID)
		CheckAccounting = isIncomeExpenseBooking(IncomeExpenseObj,ID)
		CheckReverse 	= isRecordReverse(ID)
		if not CheckAccounting and not CheckReverse:
			ListTellerID.append(ID)

	QueryObj = MKT_TELLER.query.filter(MKT_TELLER.ID.in_(ListTellerID))
	return QueryObj,ListTellerID

def isIncomeExpenseBooking(QueryObj,ID):
	QueryObj = QueryObj.get(ID)
	if QueryObj:
		return True
	else:
		return False

def isRecordReverse(ID):
	ObjReverse = validationReverse(MKT_TELLER,MKT_TELLER_INAU,ID)
	return ObjReverse[0]

def setAuthorizeIncomeExpenseBooking(ID):
	try:
		# print "start authorize"
		IncomeExpenseObj = MKT_INCOME_EXPENSE_BOOKING_INAU.query.get(ID)
		if ID[-1:] == 'R':
			Opearation = "Reverse"
		else:
			Opearation = "Authorize"
		# print "you are authorize the %s record"%Opearation
		Audit 		= mktaudit.getAuditrail()
		Inputter	= IncomeExpenseObj.Inputter
		Createdon 	= IncomeExpenseObj.Createdon
		Branch 		= IncomeExpenseObj.Branch
		Authorizer 	= Audit['Authorizer']
		Authorizeon	= Audit['Authorizeon']
		
		IncomeExpenseCat = IncomeExpenseObj.IncomeExpenseCat
		Type 		= IncomeExpenseObj.Type
		Currency 	= IncomeExpenseObj.Currency
		Account 	= IncomeExpenseObj.Account
		Category 	= IncomeExpenseObj.Category
		Amount  	= Decimal(IncomeExpenseObj.Amount)
		LCYAmount 	= Decimal(IncomeExpenseObj.LCYAmount)
		Module 		= 'IE'
		Transaction = IncomeExpenseObj.Transaction
		TranDate 	= IncomeExpenseObj.TranDate
		Reference 	=  IncomeExpenseObj.Reference
		UserReference = Reference
		Note 		= IncomeExpenseObj.Note
		CheckAccounting =  setIncomeExpenseBookingAccouting(Opearation,Inputter,Createdon,Authorizer,Authorizeon,Branch,
														IncomeExpenseCat,Type,Currency,Account,Category,Amount,Module,Transaction,
														TranDate,ID,Note,UserReference=UserReference,LCYAmount=LCYAmount)
		if not CheckAccounting[0]:
			return False,CheckAccounting[1]
		# print "final authorize"
		return True,""

	except Exception, e:
		db.session.rollback()
		return False," %s"%e

def setReverseIncomeExpenseBooking(AuthLevel,ID,Inputter='',Createdon=''):
	try:
		Message = ""
		TellerParam = mktparam.getTellerParam()
		# print "start setReverseIncomeExpenseBooking"
		if AuthLevel == 1:
			# print "AuthLevel 1"
			mktaudit.moveAUTHtoINAU(MKT_INCOME_EXPENSE_BOOKING,MKT_INCOME_EXPENSE_BOOKING_INAU,ID,Inputter,Createdon, 'INAU', '-1')
			Message = "The record was reversed successfully, record id:%sR in INAU." % ID
			print Message
		else:
			# print "AuthLevel : 0"
			IncomeExpenseObj = MKT_INCOME_EXPENSE_BOOKING.query.get(ID)
			ID = ID+"R"
			Opearation 	= "Reverse"
			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']
			
			IncomeExpenseCat = IncomeExpenseObj.IncomeExpenseCat
			Type 			= IncomeExpenseObj.Type
			Currency 		= IncomeExpenseObj.Currency
			Account 		= IncomeExpenseObj.Account
			Category 		= IncomeExpenseObj.Category
			Amount  		= Decimal(IncomeExpenseObj.Amount)
			LCYAmount  		= Decimal(IncomeExpenseObj.LCYAmount)
			Module 			= 'IE'
			Transaction 	= IncomeExpenseObj.Transaction
			TranDate 		= IncomeExpenseObj.TranDate
			Reference 		= IncomeExpenseObj.Reference
			UserReference 	= IncomeExpenseObj.Reference
			Note 			= IncomeExpenseObj.Note
			ExchangeRate 	= IncomeExpenseObj.ExchangeRate
			RevTransaction 	= TellerParam.RevTransaction
			# print "before setIncomeExpenseBookingAccouting"
			CheckAccounting =  setIncomeExpenseBookingAccouting(Opearation,Inputter,Createdon,Authorizer,Authorizeon,Branch,IncomeExpenseCat,Type,Currency,\
								Account,Category,Amount,Module,RevTransaction,TranDate,ID,Note,UserReference=UserReference,LCYAmount=LCYAmount)
			if not CheckAccounting[0]:
				db.session.rollback()
				return False,CheckAccounting[1]

			# print "Adding record reverse to db session "
			InsertObj = MKT_INCOME_EXPENSE_BOOKING(
						Status			= 'AUTH',
						Curr 			= '0',
						Inputter 		= Inputter,
						Createdon 		= Createdon,
						Authorizer 		= Authorizer,
						Authorizeon 	= Authorizeon,
						Branch			= Branch,
						ID 				= ID,
						IncomeExpenseCat= IncomeExpenseCat,
						Type 			= Type,
						Account 		= Account,
						Category 		= Category,
						Currency 		= Currency,
						Amount 			= Amount,
						LCYAmount 		= LCYAmount,
						ExchangeRate	= ExchangeRate,
						Transaction 	= RevTransaction,
						TranDate 		= TranDate,
						Reference 		= Reference,
						Note 			= Note )

			db.session.add(InsertObj)
			Message = "The record was reversed successfully, record id:%s"%ID
			# print "finish reversed"
		# print "before return"
		# print "Message:"+Message
		return True,Message
	except Exception, e:
		raise
		db.session.rollback()
		return False," %s"%e		
def setIncomeExpenseBookingAccouting(Opearation,Inputter,Createdon,Authorizer,Authorizeon,Branch,
									IncomeExpenseCat,Type,Currency,Account,Category,Amount,Module,Transaction,
									TranDate,Reference,Note,UserReference='',LCYAmount=0):
	try:
		tmpCategory = Category

		#Commit Authorize record
		if Opearation == "Authorize":
			for i in range(0, 2):
				Category = tmpCategory
				if i == 0:

					if Type == "Income":
							#Debit Suspend A/C
							DrCr 			= "Dr"
							Mode 			= ""
							UpdateLastTran 	= "YES"

					if Type == "Expense":

							#Debit Expense Category
							DrCr 			= "Dr"
							Mode 			= "Direct"
							UpdateLastTran 	= "NO"
							Category 		= IncomeExpenseCat
				else:
					if Type == "Income":

							#Credit Income Category
							DrCr 			= "Cr"
							Mode 			= "Direct"
							UpdateLastTran 	= "NO"
							Category 		= IncomeExpenseCat

					if Type == "Expense":

							#Credit Suspend A/C
							DrCr 			= "Cr"
							Mode 			= ""
							UpdateLastTran 	= "YES"

				#get Gl key	
				GL_KEYS 		= mktaccounting.getConsolKey(Category,Currency,"","")
				ObjAccounting 	= mktaccounting.postAccounting(		

									"AUTH", 				# Status
									"0", 					# Curr
									Inputter,				# Inputter
									Createdon, 				# Createdon
									Authorizer,				# Authorizer
									Authorizeon,			# Authorizeon
									"", 					# AEID
									Account,				# Account
									Category,				# Category
									Currency,				# Currency
									DrCr,					# DrCr
									Amount, 				# Amount
									Module,					# Module
									Transaction, 			# Transaction
									TranDate, 				# TransactionDate
									Reference, 				# Reference
									Note, 					# Note
									"", 					# JNID
									Branch,					# Branch
									GL_KEYS,				# ConsolKey
									Mode,					# Mode
									UpdateLastTran,
									LCYAmount=LCYAmount,
									UserReference=UserReference)			# Tell function to update LastTransaction Customer's Account

		#Commit Reverse record
		else:

			for i in range(0, 2):
				Category = tmpCategory
				if i == 0:
					if Type == "Income":
						#Credit Income Category
						DrCr 			= "Dr"
						Mode 			= "Direct"
						UpdateLastTran 	= "NO"
						Category 		= IncomeExpenseCat
						
					if Type == "Expense":
						
						#Credit Suspend A/C
						DrCr 			= "Dr"
						Mode 			= ""
						UpdateLastTran 	= "YES"

				else:
					if Type == "Income":
						
						#Debit Suspend A/C
						DrCr 			= "Cr"
						Mode 			= ""
						UpdateLastTran 	= "YES"
						
					if Type == "Expense":
						
						#Debit Expense Category
						DrCr 			= "Cr"
						Mode 			= "Direct"
						UpdateLastTran 	= "NO"
						Category 		= IncomeExpenseCat

				#get Gl key	
				GL_KEYS 		= mktaccounting.getConsolKey(Category,Currency,"","")
				ObjAccounting 	= mktaccounting.postAccounting(		

										"AUTH", 				# Status
										"0", 					# Curr
										Inputter,				# Inputter
										Createdon, 				# Createdon
										Authorizer,				# Authorizer
										Authorizeon,			# Authorizeon
										"", 					# AEID
										Account,				# Account
										Category,				# Category
										Currency,				# Currency
										DrCr,					# DrCr
										Amount, 				# Amount
										Module,					# Module
										Transaction, 			# Transaction
										TranDate, 				# TransactionDate
										Reference, 				# Reference
										Note, 					# Note
										"", 					# JNID
										Branch,					# Branch
										GL_KEYS,				# ConsolKey
										Mode,					# Mode
										UpdateLastTran,
										LCYAmount=LCYAmount,
										UserReference=UserReference)			# Tell function to update LastTransaction Customer's Account

		return True,""
	except Exception, e:
		db.session.rollback()
		return False," %s"%e


def getValidationRequired(kwargs):
	for key,value in kwargs.iteritems():
		if not value:
			return False,"%s is not found for post accounting."%key
	return True,""

#----------------------------- Block Cash Account ---------------------------

def insertCashAccount(AuthLevel,Inputter,Createdon,Authorizer,Authorizeon,Branch,ID,ListCurrency,ListAccount,Type):
	# print 'I am here in function insertCashAccount'

	Param = mktparam.getTellerParam()
	if Param:
		QueryObj 		= MKT_CASH_ACCOUNT.query.get(ID)
		if Type == "V":
			LabelType 		= "Cash in Vault"#
			AccProduct 		= Param.VaultAccPro
			AccCategory 	= Param.VaultCategory

		elif Type == "T":
			LabelType 		= "Cash in Till"
			AccProduct 		= Param.TillAccPro
			AccCategory 	= Param.TillCategory

		elif Type == "W":
			LabelType 		= "Cash in Wallet"
			AccProduct 		= Param.WalletAccPro
			AccCategory 	= Param.WalletCategory

		ListInteger 	= [s for s in list(ID) if s.isdigit()]
		IndexAcc 		= int("".join(ListInteger))

		# Check Cash ID already exists mean that u are update Cash Account or not if not mean that add new account
		if QueryObj:

			LiveCurrency 	= QueryObj.Currency.split()
			LiveBranch 		= QueryObj.CashBranch
			LiveAccount 	= QueryObj.Account.split()

			# Add More Currency
			for Currency in ListCurrency :
				#Cash in Till 01 at HO
				AccName = "%s %02d at %s"%(LabelType,IndexAcc,Branch)
				# Change Branch
				if LiveBranch != Branch:

					# Call function to get old account belong
					for AccID in LiveAccount:
						AccObj = mktaccount.getAccount(AccID)
						if AccObj:
							# Move record LIVE to HIST
							mktaudit.moveAUTHtoHIST(MKT_ACCOUNT,MKT_ACCOUNT_HIST,AccObj.ID)
							# Update Account to new User ID 
							mktdb.updateRecord(MKT_ACCOUNT,
												[MKT_ACCOUNT.ID==AccObj.ID],
												{"Branch":Branch})

				# Check find which one is new currency
				if Currency not in LiveCurrency:
					AccID = Currency+AccCategory+ID
					checkRestoreID = mktaudit.isRestoreID(MKT_ACCOUNT,MKT_ACCOUNT_INAU,MKT_ACCOUNT_HIST,AccID)
					if checkRestoreID[0]:
						Curr=checkRestoreID[1]
					else:
						Curr="0"
					# add more account by new currency
					mktaccounting.insert_MKT_ACC(
							Curr,					#Curr
							Inputter, 				#Inputter
							Createdon,				#Createdon
							Authorizer,				#Authorizer
							Authorizeon,			#Authorizeon
							Branch,					#Branch
							Currency+AccCategory+ID,# ID
							AccName,				# AccName
							Currency,				# Currency
							AccProduct, 			# AccProduct
							AccCategory				# AccCategory
							)

			# Remove Currency
			for Currency in LiveCurrency:

				# Check find which currency is remove 
				if Currency not in ListCurrency:

					AccID = Currency+AccCategory+ID
					# Call function to get old account belong 
					AccObj = mktaccount.getAccount(AccID)
					
					if AccObj:

						# Check Vault Account Balance == 0 can be close account
						if float(AccObj.Balance) == float(0):
							# Move record LIVE to HIST
							mktaudit.moveAUTHtoHIST(MKT_ACCOUNT,MKT_ACCOUNT_HIST,AccObj.ID)
							# Delete LIVE 
							mktaudit.deleteAUTH(MKT_ACCOUNT,AccObj.ID)

						else:
							
							return False,Markup('Cash Account# %s still open with some balance %s <br /> You cannot remove currncy %s'%(AccObj.ID,AccObj.Balance,AccObj.Currency))

		else:# New record

			for Currency in ListCurrency :
				AccName = "%s %02d at %s"%(LabelType,IndexAcc,Branch)
				AccID = Currency+AccCategory+ID
				checkRestoreID = mktaudit.isRestoreID(MKT_ACCOUNT,MKT_ACCOUNT_INAU,MKT_ACCOUNT_HIST,AccID)
				if checkRestoreID[0]:
					Curr=checkRestoreID[1]
				else:
					Curr="0"
				mktaccounting.insert_MKT_ACC(
						Curr,					#Curr
						Inputter, 				#Inputter
						Createdon,				#Createdon
						Authorizer,				#Authorizer
						Authorizeon,			#Authorizeon
						Branch,					#Branch
						AccID, 					# ID
						AccName,				# AccName
						Currency,				# Currency
						AccProduct, 			# AccProduct
						AccCategory 			# AccCategory
						)
		return True,""
	else:
		return False,"Cannot create cash account! Please set Teller Parameter first."
	
	return True,""

def setAuthCashAccount(AuthLevel,ID):
	# Authorize have two transcations INAU, RNAU 
	TellerParam = mktparam.getTellerParam()
	# print 'beforeAuthorize: %s'% AuthLevel
	if AuthLevel == 1:

		ObjINAU 	= MKT_CASH_ACCOUNT_INAU.query.get(ID)

		if ObjINAU:

			ListCurrency= ObjINAU.Currency.split()
			ListAccount = ObjINAU.Account.split()
			Branch 		= ObjINAU.CashBranch
			Type 		= ObjINAU.Type
			Audit 		= mktaudit.getAuditrail()
			Inputter	= ObjINAU.Inputter
			Createdon 	= ObjINAU.Createdon
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			# Cannot authorize by urseft
			if Inputter != Authorizer:

				if ObjINAU.Status == 'RNAU':
					# print "Authorize Record RNAU"
					for AccID in ListAccount :
						CashAccount = mktaccount.getAccount(AccID)
						if CashAccount:
							# print 'before call moveAUTHtoHIST'
							# Remove account to history 
							mktaudit.moveAUTHtoHIST(MKT_ACCOUNT,MKT_ACCOUNT_HIST,CashAccount.ID)
							# print 'After '
							# Delete live record
							mktaudit.deleteAUTH(MKT_ACCOUNT,CashAccount.ID)
							# print 'After call deleteAUTH'
				else:
					# print "Authorize Record INAU"				
					# Call function to commit add account by currency 
					CheckCommit = insertCashAccount(AuthLevel,Inputter,Createdon,Authorizer,Authorizeon,Branch,ID,ListCurrency,ListAccount,Type)
					if not CheckCommit[0]:
						return False,CheckCommit[1]
				# Authorize was successfully.
				return True,""

def getValidationCashAccountBranch(ID,Currency,Branch):

	ListCurrency 		= Currency.split()
	
	QueryObj = MKT_CASH_ACCOUNT.query.get(ID)

	BranchDescription = mktreport.VLOOKUP(["MKT_BRANCH","ID",Branch,"Description"])
	
	if QueryObj:
		CheckChangeBranch = QueryObj.CashBranch

		if CheckChangeBranch!= Branch:
			LiveAccount = QueryObj.Account.split()
			for item in LiveAccount:
				AccObj = mktaccount.getAccount(item)
				
				if AccObj:

					if float(AccObj.Balance) != float(0):
					
						return False,Markup('Cash Account# %s still open with balance : %s <br /> You cannot change branch to %s.'%
												(AccObj.ID,float(AccObj.Balance),BranchDescription))
		return True,""
	else:
		return True,""
						
def getValidationCashAccountReverse(AuthLevel,ID):
	ListAccClose = []
	ListAccOpen  = []
	Msg 			= ""
	QueryObj 		= MKT_CASH_ACCOUNT.query.get(ID)
	if QueryObj:
		ListCurrency= QueryObj.Currency.split()
		ListAccount = QueryObj.Account.split()

		for AccID in ListAccount:
			# Check Balance Account
			AccObj = mktaccount.getAccount(AccID)
			if AccObj:
				# Balance = 0 mean can reverse
				if float(AccObj.Balance) == float(0):
					ListAccClose.append((AccObj.ID,AccObj.Currency,float(AccObj.Balance)))
				else:
					ListAccOpen.append((AccObj.ID,AccObj.Currency,float(AccObj.Balance)))
	if ListAccOpen:
		for item in ListAccOpen:

			Msg+=Markup('Cash Account# %s still open with balance: %s <br />'%(item[0],item[2]))

		if Msg:

			return True,msg_error+Msg+"You cannot reverse record"
	else:
		# u can reverseRec record
		if AuthLevel == 0:
			for item in ListAccClose :
				AccID = item[0]
				AccObj = mktaccount.getAccount(AccID)
				if AccObj:
					# print 'before call moveAUTHtoHIST'
					# Remove account to history 
					mktaudit.moveAUTHtoHIST(MKT_ACCOUNT,MKT_ACCOUNT_HIST,AccID)
					# print 'After '
					# Delete live record
					mktaudit.deleteAUTH(MKT_ACCOUNT,AccID)
					# print 'After call deleteAUTH'
		return True,""

def getValidationDuplicateCurreny(ListCurrency):
	CurrencyObj = MKT_CURRENCY.query
	for item in ListCurrency:
		ChkCurrencyObj 	=CurrencyObj.filter(MKT_CURRENCY.ID==str(item)).all()
		if not ChkCurrencyObj:
			return False,"%s currency not foud!"%item

	DuplicateCur   = [x for x in ListCurrency if ListCurrency.count(x) > 1]
	if DuplicateCur:
		return False,"Duplicate %s currency"%DuplicateCur[0]
	return True,""

def getValidationTellerParam():
	TellerParam = mktparam.getTellerParam()
	if TellerParam:
		return True,""
	else:
		return False,"Please configuration Teller Parameter first."

def isAmountInDecimal(Amount):
	Amount 	= str(Amount).replace(',','')
	if mkttool.isFloat(Amount):
		return True
	else:
		return False

def customValidateLCYAmount(form, field):
	try:
		LCYAmount 	 = form.LCYAmount.data
		ExchangeRate = form.ExchangeRate.data
		Amount 		 = str(form.Amount.data).replace(',','')
	 	if mkttool.isFloat(LCYAmount) and mkttool.isFloat(ExchangeRate):
	 		if mkttool.isFloat(Amount):
				ExchangeRate = Decimal(ExchangeRate)
				LCYAmount 	 = Decimal(LCYAmount).quantize(Decimal('1e-9'))
				Amount 		 = Decimal(Amount)
				LCYAmt 		 = Amount * ExchangeRate
				LCYAmt 		 = Decimal(LCYAmt).quantize(Decimal('1e-9'))

				if LCYAmount <= 0:
					raise ValidationError("This field must be more than 0.")
				
				if LCYAmount != LCYAmt: 
					raise ValidationError("This field value must be %s."%LCYAmt)

		else:
			raise ValidationError("This field must be a number.")

	except Exception as e:
		print "Exception from func customValidateLCYAmount()"
		raise
	
#Using in WTForm only for validate field exchange rate
def customValidateExchangeRate(form, field):
	try:
		AccSetting 		= 	mktsetting.getAccSetting()
		LocalCurrency 	= 	AccSetting.BaseCurrency
		ExchangeRate 	= 	form.ExchangeRate.data

		if hasattr(form,'DrCurrency'):
			Currency = 	request.form['DrCurrency'] if 'DrCurrency' in request.form else ''
			if not Currency:
				Currency 	= 	request.form['CrCurrency'] if 'CrCurrency' in request.form else ''

		elif hasattr(form,'Currency'):

			Currency 	= 	request.form['Currency'] if 'Currency' in request.form else ''
		else:
			raise ValidationError("Curreny not found!")

		if mkttool.isFloat(ExchangeRate):
			ExchangeRate = Decimal(ExchangeRate)
			if ExchangeRate <= 0:
				raise ValidationError("This field must be more than 0.")
			
			if str(Currency) == str(LocalCurrency):
				if Decimal(str(ExchangeRate).replace(',','')) != 1:
					raise ValidationError("Exchange Rate must be 1 for base currency")

		else:
			raise ValidationError("This field must be a number.")
	except Exception as e:
		print "Exception from func customValidateExchangeRate()"
		raise

def getChangeAccount(ID,CurrentAccount):

	ChangeAccount	= []
	QueryObj 		= MKT_CASH_ACCOUNT.query.get(ID)
	if QueryObj:

		LiveAccount = QueryObj.Account.split()

		for item in LiveAccount:
			if item not in CurrentAccount:
				ChangeAccount.append(item)

	return ChangeAccount

def loadExchangeRate():
	try:
		ReportingRate= ""
		BankDate 	= str(mktdate.getBankDate())
		CurrObj 	=	MKT_CURRENCY.query

		if len(CurrObj.all())== 1:
			Currency = CurrObj.first().ID
			ReportingRate = mktaccounting.getReportingRate(Currency,BankDate)
		
		return ReportingRate
	except Exception, e:
		return ''

def getAccountClose(ListAccount):
	ListAccClose 	= []
	if ListAccount:
		for item in ListAccount:
			AccObj = mktaccount.getAccount(item)
			if AccObj:
				if float(AccObj.Balance) == float(0):
					ListAccClose.append((AccObj.ID,AccObj.Currency,float(AccObj.Balance),AccObj.AccCategory))
	return ListAccClose

def getAccountOpen(ListAccount):

	ListAccOpen 	= []
	if ListAccount:
		for item in ListAccount:
			AccObj = mktaccount.getAccount(item)
			if AccObj:
				if float(AccObj.Balance) != float(0):
					ListAccOpen.append((AccObj.ID,AccObj.Currency,float(AccObj.Balance),AccObj.AccCategory))
	return ListAccOpen

def getUserCashAccount(**kwargs):

	Account 	= ""
	CashID 		= ""
	Currency 	= ""
	ListUser 	= []
	if "CashID" in kwargs:
		CashID = kwargs['CashID']
		UserObj = MKT_USER.query.filter(MKT_USER.CashAccount==CashID)
		for row in UserObj:
			ListUser.append(str(row.ID))

	return ListUser

# Hot Field in Fund Withdrawal and Fund Deposit
def getFundAcount(Resource,AccID="",Bank="",CashType=""):

	TellerParam = mktparam.getTellerParam()
	TranCode 	= ""
	CrAccount 	= ""
	CrCategory 	= ""
	CrCurrency 	= ""
	DrAccount 	= ""
	DrCurrency 	= ""
	DrCategory 	= ""
	Message 	= ""
	LabelType	= ""
	CashAccount = ""

	if TellerParam:
		
		UserObj  		= mktuser.getUser()
		DefaultBranch 	= mktuser.getCurrentBranch()
		VaultCategory 	= TellerParam.VaultCategory
		TillCategory 	= TellerParam.TillCategory
		WalletCategory  = TellerParam.WalletCategory

		if Resource in ['DP','CB','CC'] :#Cash Deposit, Cash Deposit by bank, Cash Deposit by cheque
			if AccID=='DP':
				session['TELLER']='DP'

		if Resource in ['WD','WB','WC']:
			if AccID=='WD':
				session['TELLER']='WD'

		# app.logger.debug(request.args.get('TCrAccount'))
		# app.logger.debug('session name'+session['TELLER'])
		if AccID:
			AccObj = MKT_ACCOUNT.query
			
			AccountExternal = AccObj.filter(MKT_ACCOUNT.ID==AccID).first()
			if AccountExternal:

				Currency = AccountExternal.Currency
				if Resource in ["FD","DP"]:
					CrCategory 	= str(AccountExternal.AccCategory)
					CrCurrency 	= str(AccountExternal.Currency)
					TranCode 	= TellerParam.DepTransaction
					LabelType	= "Vault" if Resource == "FD" else "Till"

				elif Resource in ["FW","WD"]:
					DrCategory 	= str(AccountExternal.AccCategory)
					DrCurrency 	= str(AccountExternal.Currency)
					TranCode 	= TellerParam.WitTransaction
					LabelType	= "Vault" if Resource == "FW" else "Till"

				elif Resource == "CB": # Depsit By Bank
					CrCategory 	= str(AccountExternal.AccCategory)
					CrCurrency 	= str(AccountExternal.Currency)
					TranCode 	= str(mktsetting.getAppSetting('BankDepositTran'))
					LabelType	= "Till"
					DrCategory 	= getBankCategory(Bank,CashType)
					DrAccount 	= getInternalAccount(DefaultBranch,DrCategory,CrCurrency)
					DrCurrency 	= str(AccountExternal.Currency)

				elif Resource == "CC": # Depsit By Cheque
					CrCategory 	= str(AccountExternal.AccCategory)
					CrCurrency 	= str(AccountExternal.Currency)
					DrCategory 	= str(mktsetting.getAppSetting('ChequeCat'))
					DrCurrency 	= str(AccountExternal.Currency)
					TranCode 	= str(mktsetting.getAppSetting('ChequeDepositTran'))
					LabelType	= "Till"

				elif Resource == "WB": # Withdrawal By Bank
					DrCategory 	= str(AccountExternal.AccCategory)
					DrCurrency 	= str(AccountExternal.Currency)
					TranCode 	= str(mktsetting.getAppSetting('BankWithdrawalTran'))
					LabelType	= "Till"
					CrCategory 	= getBankCategory(Bank,CashType)
					CrAccount 	= getInternalAccount(DefaultBranch,CrCategory,DrCurrency)
					CrCurrency 	= str(AccountExternal.Currency)

				elif Resource == "WC": # Withdrawal By Cheque
					DrCategory 	= str(AccountExternal.AccCategory)
					DrCurrency 	= str(AccountExternal.Currency)
					CrCategory 	= str(mktsetting.getAppSetting('ChequeCat'))
					CrCurrency 	= str(AccountExternal.Currency)
					TranCode 	= str(mktsetting.getAppSetting('ChequeWithdrawalTran'))
					LabelType	= "Till"

				CashID  		= UserObj.CashAccount
				CashObj  		= MKT_CASH_ACCOUNT.query.get(CashID)
				if CashObj:
					Type = CashObj.Type
					if Type=="V":
						CashAccount = "%s%s%s"%(Currency,VaultCategory,CashID)
					elif Type == "T":
						CashAccount = "%s%s%s"%(Currency,TillCategory,CashID)
					elif Type == "W":
						CashAccount = "%s%s%s"%(Currency,WalletCategory,CashID)

					if CashObj.CashBranch == DefaultBranch:
						
						FilterAccObj = AccObj.get(CashAccount)

						if FilterAccObj:
							if Resource in ['FD','DP']:
								DrAccount  = FilterAccObj.ID
								DrCurrency = FilterAccObj.Currency
								DrCategory = FilterAccObj.AccCategory

							elif Resource in ['FW','WD']:
								CrAccount 	= FilterAccObj.ID
								CrCurrency 	= FilterAccObj.Currency
								CrCategory 	= FilterAccObj.AccCategory
						else:
							Message = "Cash account# %s not found"%CashAccount
					else:
						Message = "User don't have %s Account in Branch #%s"%(LabelType,DefaultBranch)

				else:
					Message = "User don't have cash account."
				
			else:
				Message = "Account #%s not found."%AccID
	else:
		Message= "Please set Teller Parameter first."

	return jsonify(TranCode=TranCode,CrAccount=CrAccount,CrCategory=CrCategory, CrCurrency=CrCurrency,DrAccount=DrAccount,DrCurrency=DrCurrency,DrCategory=DrCategory,Message=Message)

def isUserVaultAccount():
	UserObj 		= mktuser.getUser()
	if UserObj:
		CashID 	= UserObj.CashAccount
		CurrentBranch 	= mktuser.getCurrentBranch()
		if CashID:
			CashObj = MKT_CASH_ACCOUNT.query.get(CashID)
			if CashObj:
				CashBranch 	= CashObj.CashBranch
				Type 		= CashObj.Type
				if not Type in ["V" ,"W"]:
					return False,"User don't have Vault Account."
				if CashBranch != CurrentBranch :
					Branch = MKT_BRANCH.query.get(CurrentBranch)
					return False,"You don't have Vault Account in %s branch."%Branch.Description
				
				# Pass
				return True,CashID
			else:
				return False,"Vault Account not found."
		else:
			return False,"User don't have Vault Account."

def isUserTillAccount():

	UserObj 		= mktuser.getUser()
	if UserObj:
		CashID 	= UserObj.CashAccount
		CurrentBranch 	= mktuser.getCurrentBranch()
		if CashID:
			CashObj = MKT_CASH_ACCOUNT.query.get(CashID)
			if CashObj:
				CashBranch 	= CashObj.CashBranch
				Type 		= CashObj.Type
				if Type != "T":
					return False,"User don't have Till Account."
				if CashBranch != CurrentBranch :
					Branch = MKT_BRANCH.query.get(CurrentBranch)
					return False,"You don't have Till Account in %s branch."%Branch.Description
				else:
					# Pass
					return True,CashID
			else:
				return False,"Till Account not found."
		else:
			return False,"User don't have Till Account."

def isUserCashAccount():
	UserObj 		= mktuser.getUser()
	if UserObj:
		CashID 	= UserObj.CashAccount
		CurrentBranch 	= mktuser.getCurrentBranch()
		if CashID:
			CashObj = MKT_CASH_ACCOUNT.query.get(CashID)
			if CashObj:
				CashBranch 	= CashObj.CashBranch
				
				if CashBranch != CurrentBranch :
					Branch = MKT_BRANCH.query.get(CurrentBranch)
					return False,"You don't have Vault/Till Account in %s branch."%Branch.Description
				else:
					# Pass
					return True,CashID
			else:
				return False,"Vault/Till Account not found."
		else:
			return False,"User don't have Vault/Till Account."

def getCashCategory():
	AccProObj = MKT_ACC_PRODUCT.query
	Category = [str(row.CategoryList) for row in AccProObj]
	return Category

def isCashCateogry(Category):

	CashCategory = getCashCategory()
	CashCategory = filter(None,CashCategory)
	if Category in CashCategory:
		return True
	else:
		return False

def isVaultCategory(Category):
	TellerParam = mktparam.getTellerParam()
	if TellerParam:
		VaultCategory 	= TellerParam.VaultCategory
		if Category == VaultCategory:
			return True
		else:
			return False
	else:
		return False

def getExcludeCashCategory():
	Category = []
	TellerParam 	= 	mktparam.getTellerParam()
	if TellerParam:
		AccProObj = MKT_ACC_PRODUCT.query.filter(MKT_ACC_PRODUCT.CategoryList != TellerParam.VaultCategory).\
										filter(MKT_ACC_PRODUCT.CategoryList != TellerParam.SuspendCategory)
		Category = [str(row.CategoryList) for row in AccProObj]

	return Category

def getCashAccountByCategory(Category,Currency,Inputter,Branch):

	TellerParam 	= 	mktparam.getTellerParam()
	if TellerParam:
		SuspendCategory = TellerParam.SuspendCategory

	ID 		= mktuser.getUser(Inputter).CashAccount
	Account = str(Currency+Category+ID)
	if Category == SuspendCategory:
		# print " I am here in Suspend Category"
		Acc 	= mktaccount.getSuspendAccount(Currency,Branch)
		if Acc:
			return True,Acc
		else:
			return False, "The category %s - Suspense for Clearing Account not found."%(Category)
	else:
		Acc 	= MKT_ACCOUNT.query.get(Account)
		if Acc:
			if Acc.Branch == Branch:
				return True,Acc
			else:
				BranchObj = MKT_BRANCH.query.get(Branch)
				return False, "User %s don't have cash account #%s in branch %s"%(Inputter,Account,BranchObj.Description)

		return False,"User %s don't have cash account #%s in category %s."%(Inputter,Account,Category)


def getTillAccountObj(UserID="",Currency=""):

	AccObj = []
	if UserID:
		UserObj 		= mktuser.getUser(UserID)
	else:
		UserObj 		= mktuser.getUser()
		
	if UserObj:
		CashID 		= UserObj.CashAccount
		CashObj 	= MKT_CASH_ACCOUNT.query.get(CashID)
		if CashObj:
			CashAccount = CashObj.Account.split()
			if Currency:
				AccObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.ID.in_(CashAccount)).\
											filter(MKT_ACCOUNT.Currency==Currency).first()

	return AccObj

def getCashAccountObj(Currency=""):
	AccObj = []
	UserObj 		= mktuser.getUser()
	if UserObj:
		CashID 		= UserObj.CashAccount
		CashObj 	= MKT_CASH_ACCOUNT.query.get(CashID)
		if CashObj:
			CashAccount = CashObj.Account.split()
			if Currency:
				AccObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.ID.in_(CashAccount)).\
											filter(MKT_ACCOUNT.Currency==Currency).first()
			else:
				AccObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.ID.in_(CashAccount))
											
	return AccObj

def validationReverse(AUTH,INAU,ID):

	if ID[-1:] == 'R':
		return True, msg_error+" The record was reversed already. Cannot reverse this record"
	else:
		Query = AUTH.query.get(ID+'R')
		# print " can reverse"
		if not Query :
			ObjINAU = INAU.query.get(ID+'R')
			if ObjINAU:
				return True, msg_error+" The record was already reversed and in list un-authorize. Cannot reverse this record"
			else:
				return False,''
		else:
			return True,msg_error+" The record was reversed already. Cannot reverse this record"



# ============ Deposit Bank/Cheque =======

def getInternalAccount(Branch,Category,Currency):
	AccObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.Currency == Currency).\
								filter(MKT_ACCOUNT.Branch == Branch).\
								filter(MKT_ACCOUNT.AccCategory == Category).first()
	if AccObj:
		return AccObj.ID
	else:
		return ""

def getBankCategory(BankID,CashType):
	Account 	= ''
	Category 	= ''
	CurrentBranch 	= mktuser.getCurrentBranch()
	if BankID and CashType=="3":
		BankObj = MKT_BANK.query.get(BankID)
		if BankObj:
			Category = BankObj.Category
	elif CashType == "2":
		Category = str(mktsetting.getAppSetting('ChequeCat'))
	return Category

def getValidateBankAccount(Bank,Category,Account):

	CurrentBranch 	= mktuser.getCurrentBranch()
	if Category:
		if isCashCateogry(Category):
			if not Account:
				return False,'Please create %s account for branch %s'%(Bank,CurrentBranch)
	else:
		return False,"Bank category not found."
	return True,"Pass"
			
# ============ End Deposit Bank/Cheque =====

# ============ Fund Transafer =========
def getMode(DrAcc,CrAcc):
	if DrAcc and not CrAcc:
		Mode 		= "CrDirect"
	elif not DrAcc and CrAcc:
		Mode 		= "DrDirect"
	elif DrAcc and CrAcc:
		Mode 		= ""
	else:
		Mode = "Direct"
	return Mode

def getDescriptionCategory(Category):

	CategoryObj = MKT_CATEGORY.query.get(Category)
	if CategoryObj:

		return CategoryObj.Description
	else:
		return ''

def validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,Amount=0,LCYAmount=0,DrGLKey='',CrGLKey='',Module='',TranDate=''):

	try:
		Amount 		= Decimal(Amount)
		Mode 		= getMode(DrAccount,CrAccount)
		DrCatName 	= getDescriptionCategory(DrCategory)
		CrCatName 	= getDescriptionCategory(CrCategory)

		if Amount > 0 :
			if Mode == "":
				DrAmount = Amount
				CrAmount = Amount

				if Module in ['BF','SF']:
					BaseCurrency = 	mktsetting.getAccSetting().BaseCurrency
					if BaseCurrency == DrCurrency:
						DrAmount = LCYAmount
						CrAmount = Amount
					else:
						DrAmount = Amount
						CrAmount = LCYAmount
				# print "DrAmount",DrAmount,DrCurrency
				# print "CrAmount",CrAmount,CrCurrency
				CheckBalance = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, DrAmount, "Dr",TranDate=TranDate)
				if CheckBalance:
					db.session.rollback()
					return False, "%s %s" %(msg_error, CheckBalance)
				# print "Pass Dr"
				CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, CrAmount, "Cr",TranDate=TranDate)
				if CheckBalance:
					db.session.rollback()
					return False, "%s %s" %(msg_error, CheckBalance)

			elif Mode == "DrDirect":

				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, DrCategory, DrCurrency, Branch, 'Dr', DrGLKey, LCYAmount,TranDate=TranDate)
				if not CheckBalance[0]:
					db.session.rollback()
					return False, "%s %s" %(msg_error, CheckBalance[1])
				# print "DrDirect check Console Balance Pass"
				CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Amount, "Cr",TranDate=TranDate)
				if CheckBalance:
					db.session.rollback()
					return False, "%s %s" %(msg_error, CheckBalance)
				# print "DrDirect checkMaxMinBalance"
			elif Mode == "CrDirect":

				CheckBalance = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Amount, "Dr",TranDate=TranDate)
				if CheckBalance:
					db.session.rollback()
					return False, "%s %s" %(msg_error, CheckBalance)

				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, CrCategory, CrCurrency, Branch, 'Cr', CrGLKey, LCYAmount,TranDate=TranDate)
				if not CheckBalance[0]:
					db.session.rollback()
					return False, "%s %s" %(msg_error, CheckBalance[1])

			elif Mode == "Direct":

				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, DrCategory, DrCurrency, Branch, 'Dr', DrGLKey, LCYAmount,TranDate=TranDate)
				if not CheckBalance[0]:
					db.session.rollback()
					return False, "%s %s" %(msg_error, CheckBalance[1])

				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, CrCategory, CrCurrency, Branch, 'Cr', CrGLKey, LCYAmount,TranDate=TranDate)
				if not CheckBalance[0]:
					db.session.rollback()
					return False, "%s %s" %(msg_error, CheckBalance[1])
			else:
				return False, msg_error+" Mode not found."

			return True,"Pass"
		else:
			return False,"Amount must be more than 0."
	except Exception, e:
		raise

# ============ End Fund Transafer =========


# ============ Foreign Exchange ==========

def getFXAccount(Inputter,ForeignCurrency,DrCr):
	'''

		Get Till or Vault Account with base currency (LCY)
			
			*** Buy Foreign

				Debit Cash - FCY 					xxxx
					Credit Cash-LCY 						xxxx

			*** Sell Foreign

				Debit Cash-LCY 						xxxx
					Credit Cash-FCY 						xxxx
	'''
	DrAcc = ""
	DrCat = ""
	DrCur = ""
	CrAcc = ""
	CrCat = ""
	CrCur = ""
	AccSetting 		= 	mktsetting.getAccSetting()
	if AccSetting:
		LocalCurrency 	= 	AccSetting.BaseCurrency
		FCYAccount 	= getTillAccountObj(Inputter,ForeignCurrency)
		LCYAccount 	= getTillAccountObj(Inputter,LocalCurrency)
		if FCYAccount:
			if DrCr == "Dr":
				
				DrAcc = FCYAccount.ID
				DrCat = FCYAccount.AccCategory
				DrCur = FCYAccount.Currency
			else:
				CrAcc = FCYAccount.ID
				CrCat = FCYAccount.AccCategory
				CrCur = FCYAccount.Currency

		if LCYAccount:
			if DrCr == "Dr":
				CrAcc = LCYAccount.ID
				CrCat = LCYAccount.AccCategory
				CrCur = LCYAccount.Currency	
			else:
				
				DrAcc = LCYAccount.ID
				DrCat = LCYAccount.AccCategory
				DrCur = LCYAccount.Currency
			
				
	return {'DrAcc':DrAcc,
			'DrCat':DrCat,
			'DrCur':DrCur,
			'CrAcc':CrAcc,
			'CrCat':CrCat,
			'CrCur':CrCur}
	

def getValidateForeignCurrency(DrCurrency,CrCurrency):

	if DrCurrency != CrCurrency:
		return "Transaction cannot cross currency between %s to %s"%(DrCurrency,CrCurrency)


# ============ End Foreign Exchange ==========

def setAuthorize(TypeModule,AUTH,INAU,ID):
	# When reverse record we need to post another record which opposites between debit and credit of the old one

	try:
		Message 	= ""
		ObjINAU 	= INAU.query.get(ID)
		Mode 		= ""
		LCYAmount 	= 0
		DrGLKey 	= ''
		CrGLKey 	= ''
		Branch 		= mktuser.getCurrentBranch()
		TargetBranch 		= ""
		TargetBranchDrCr 	= ""
		if ObjINAU:

			# If Status RNAU mean that Authorize record reverse

			if ID[-1:] == 'R':
				# print "Authorize Record RNAU"
				
				if TypeModule in ['DP','WD','TT','IP','EP','CB','CC','WB','WC']:

					DrAcc 		= ObjINAU.TCrAccount
					DrCat 		= ObjINAU.CrCategory
					DrCur 		= ObjINAU.CrCurrency

					CrAcc 		= ObjINAU.TDrAccount
					CrCat 		= ObjINAU.DrCategory
					CrCur 		= ObjINAU.DrCurrency

					Module 		= TypeModule
					TranDate 	= ObjINAU.TranDate
					Mode 		= getMode(DrAcc,CrAcc)

				# Fund Transfer Deposit
				elif TypeModule in ['FD','FW','FA','FS','BF','SF','FT']:

					if TypeModule in ['BF', 'SF'] or not ObjINAU.TargetBranch or ObjINAU.TargetBranch == Branch or ObjINAU.TargetBranch =="__None" or ID[-1:] != 'R': #not inter-branch

						DrAcc 		= ObjINAU.CrAccount
						DrCat 		= ObjINAU.CrCategory
						DrCur 		= ObjINAU.CrCurrency

						CrAcc 		= ObjINAU.DrAccount
						CrCat 		= ObjINAU.DrCategory
						CrCur 		= ObjINAU.DrCurrency
						Module 		= TypeModule
						TranDate 	= ObjINAU.TranDate
						Mode 		= getMode(DrAcc,CrAcc)

					#check if inter-branch
					else:
						DrAcc 		= ObjINAU.DrAccount
						DrCat 		= ObjINAU.DrCategory
						DrCur 		= ObjINAU.DrCurrency

						CrAcc 		= ObjINAU.CrAccount
						CrCat 		= ObjINAU.CrCategory
						CrCur 		= ObjINAU.CrCurrency
						Module 		= TypeModule
						TranDate 	= ObjINAU.TranDate
						Mode 		= getMode(DrAcc,CrAcc)
					# Becasuse in FX have Exchange Amount
					if hasattr(ObjINAU, 'ExchangeAmount') and TypeModule in ['BF']:
						LCYAmount 	= ObjINAU.ExchangeAmount if ObjINAU.ExchangeAmount else 0
					if hasattr(ObjINAU, 'DrGLKey') and hasattr(ObjINAU, 'CrGLKey'):
						DrGLKey = ObjINAU.CrGLKey
						CrGLKey = ObjINAU.DrGLKey
				# Fund Transfer
				# elif TypeModule == 'FT':
				# 	# Spacail Case FT no need reverse field
				# 	# Cus reverse already in when click reverse.
				# 	DrAcc 		= ObjINAU.DrAccount
				# 	DrCat 		= ObjINAU.DrCategory
				# 	DrCur 		= ObjINAU.DrCurrency

				# 	CrAcc 		= ObjINAU.CrAccount
				# 	CrCat 		= ObjINAU.CrCategory
				# 	CrCur 		= ObjINAU.CrCurrency
				# 	Module 		= TypeModule
				# 	TranDate 	= ObjINAU.TranDate
				# 	Mode 		= getMode(DrAcc,CrAcc)
				# 	DrGLKey 	= ObjINAU.DrGLKey
				# 	CrGLKey 	= ObjINAU.CrGLKey
				

					# print "Pass FT field"
				# Journal Entry
				elif TypeModule == 'JE':
					# Spacail Case JE no need reverse field
					# Cus reverse already in when click reverse.
					if not ObjINAU.TargetBranch or ObjINAU.TargetBranch == Branch or ObjINAU.TargetBranch =="__None" or ID[-1:] != 'R':#not inter-branch
						DrAcc 		= ObjINAU.DrAccount
						DrCat 		= ObjINAU.DebitCategory
						DrCur 		= ObjINAU.Currency

						CrAcc 		= ObjINAU.CrAccount
						CrCat 		= ObjINAU.CreditCategory
						CrCur 		= ObjINAU.Currency
						Module 		= TypeModule
						TranDate 	= ObjINAU.TransactionDate
						Mode 		= getMode(DrAcc,CrAcc)
						LCYAmount 	= Decimal(ObjINAU.LCYAmount) if ObjINAU.LCYAmount else 0

					else:
						DrAcc 		= ObjINAU.CrAccount
						DrCat 		= ObjINAU.CreditCategory
						DrCur 		= ObjINAU.Currency

						CrAcc 		= ObjINAU.DrAccount
						CrCat 		= ObjINAU.DebitCategory
						CrCur 		= ObjINAU.Currency
						Module 		= TypeModule
						TranDate 	= ObjINAU.TransactionDate
						Mode 		= getMode(DrAcc,CrAcc)
						LCYAmount 	= Decimal(ObjINAU.LCYAmount) if ObjINAU.LCYAmount else 0

				else:
					#Catch error
					db.session.rollback()
					return False,msg_error+"Invalid Mode %s"%TypeModule

				if hasattr(ObjINAU, 'ExchangeRate'):

					if not ObjINAU.ExchangeRate:
						ExchangeRate = str(mktaccounting.getReportingRate(DrCur,TranDate))
						ObjINAU.ExchangeRate = ExchangeRate
						db.session.add(ObjINAU)

				if hasattr(ObjINAU, 'LCYAmount'):

					LCYAmount = ObjINAU.LCYAmount if ObjINAU.LCYAmount else 0
					ObjINAU.LCYAmount = LCYAmount
					db.session.add(ObjINAU)

				Amo  		= Decimal(ObjINAU.Amount)
				if hasattr(ObjINAU, 'ExchangeAmount') and TypeModule in ['SF']:
					LCYAmount 	= ObjINAU.Amount if ObjINAU.Amount else 0
					Amo 		= ObjINAU.ExchangeAmount if ObjINAU.ExchangeAmount else 0

				Tran  		= ObjINAU.Transaction
				Ref 		= ObjINAU.ID
				Note 		= ObjINAU.Note
				UserReference = ObjINAU.Reference

				Audit 		= mktaudit.getAuditrail()
				Inputter	= ObjINAU.Inputter
				Createdon 	= ObjINAU.Createdon
				Branch 		= ObjINAU.Branch
				Authorizer 	= Audit['Authorizer']
				Authorizeon	= Audit['Authorizeon']
				#2018-06-05 - Inter-Branch
				if hasattr(ObjINAU, 'TargetBranch'):
					
					TargetBranch= ObjINAU.TargetBranch if ObjINAU.TargetBranch else ""
					TargetBranchDrCr=ObjINAU.TargetBranchDrCr if ObjINAU.TargetBranchDrCr else ""
				#end

				if Inputter != Authorizer:

					
					# Call function to commit add account by currency 
					#2018-06-05 - Inter-Branch
					CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,\
														 Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,\
														 TranDate,Ref,Note,Mode,LCYAmount,DrGLKey,CrGLKey,UserReference=UserReference,\
														 TargetBranch=TargetBranch,TargetBranchDrCr=TargetBranchDrCr)
					#end

					#Block validation
					if not CheckAccounting[0]:

						#Catch error
						db.session.rollback()
						return False,msg_error+CheckAccounting[1]

					# Successfully
					Message = msg_authorize_0
					return True,Message
				else:

					#Catch error
					db.session.rollback()
					return False,msg_error+msg_cannot_authorize
			else:
				# Mean that Authorize INAU
				# print "Authorize Record INAU"

				if TypeModule in ['DP','WD','TT','IP','EP','CB','CC','WB','WC']:
				
					DrAcc 		= ObjINAU.TDrAccount
					DrCat 		= ObjINAU.DrCategory
					DrCur 		= ObjINAU.DrCurrency

					CrAcc 		= ObjINAU.TCrAccount
					CrCat 		= ObjINAU.CrCategory
					CrCur 		= ObjINAU.CrCurrency
					Module 		= TypeModule
					TranDate 	= ObjINAU.TranDate
					Mode 		= getMode(DrAcc,CrAcc)

				# Fund Transfer Deposit
				elif TypeModule in ['FD','FW','FA','FT','FS','BF','SF']:
				
					DrAcc 		= ObjINAU.DrAccount
					DrCat 		= ObjINAU.DrCategory
					DrCur 		= ObjINAU.DrCurrency

					CrAcc 		= ObjINAU.CrAccount
					CrCat 		= ObjINAU.CrCategory
					CrCur 		= ObjINAU.CrCurrency
					Module 		= TypeModule
					TranDate 	= ObjINAU.TranDate
					Mode 		= getMode(DrAcc,CrAcc)
					ObjINAU.Module = Module # Update Module of Fund Transfer type

				
					if hasattr(ObjINAU, 'ExchangeAmount') and TypeModule in ['BF']:
						LCYAmount 	= ObjINAU.ExchangeAmount if ObjINAU.ExchangeAmount else 0

					if hasattr(ObjINAU, 'DrGLKey') and hasattr(ObjINAU, 'CrGLKey'):
						DrGLKey = ObjINAU.DrGLKey
						CrGLKey = ObjINAU.CrGLKey

				elif TypeModule == "JE":
					DrAcc 		= ObjINAU.DrAccount
					DrCat 		= ObjINAU.DebitCategory
					DrCur 		= ObjINAU.Currency

					CrAcc 		= ObjINAU.CrAccount
					CrCat 		= ObjINAU.CreditCategory
					CrCur 		= ObjINAU.Currency
					Module 		= TypeModule
					TranDate 	= ObjINAU.TransactionDate
					Mode 		= getMode(DrAcc,CrAcc)
					LCYAmount 	= Decimal(ObjINAU.LCYAmount) if ObjINAU.LCYAmount else 0
					
				else:
					#Catch error
					db.session.rollback()
					return False,msg_error+"Invalid Mode %s"%TypeModule

				if hasattr(ObjINAU, 'ExchangeRate'):

					if not ObjINAU.ExchangeRate:
						ExchangeRate = str(mktaccounting.getReportingRate(DrCur,TranDate))
						ObjINAU.ExchangeRate = ExchangeRate
						db.session.add(ObjINAU)

				if hasattr(ObjINAU, 'LCYAmount'):

					LCYAmount = ObjINAU.LCYAmount if ObjINAU.LCYAmount else 0
					ObjINAU.LCYAmount = LCYAmount
					db.session.add(ObjINAU)

				Amo  		= Decimal(ObjINAU.Amount)

				if hasattr(ObjINAU, 'ExchangeAmount') and TypeModule in ['SF']:
					LCYAmount 	= ObjINAU.Amount if ObjINAU.Amount else 0
					Amo  		= Decimal(ObjINAU.ExchangeAmount)

				Tran  		= ObjINAU.Transaction
				Ref 		= ObjINAU.ID
				Note 		= ObjINAU.Note
				UserReference = ObjINAU.Reference

				Audit 		= mktaudit.getAuditrail()
				Inputter	= ObjINAU.Inputter
				Createdon 	= ObjINAU.Createdon
				Branch 		= ObjINAU.Branch
				Authorizer 	= Audit['Authorizer']
				Authorizeon	= Audit['Authorizeon']
				#2018-06-05 - Inter-Branch

				if hasattr(ObjINAU, 'TargetBranch'):

					TargetBranch= ObjINAU.TargetBranch if ObjINAU.TargetBranch else ""
					TargetBranchDrCr=ObjINAU.TargetBranchDrCr if ObjINAU.TargetBranchDrCr else ""
				#end
				#Validate Duplicate record
				DuplicateRecord = isDuplicatePosting(AUTH, ID)
				if DuplicateRecord[0]:
					db.session.rollback()
					return False, msg_error+DuplicateRecord[1]

				if Inputter != Authorizer:

					CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,\
														DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,\
														TranDate,Ref,Note,Mode,LCYAmount,DrGLKey,CrGLKey,UserReference=UserReference,\
														TargetBranch=TargetBranch,TargetBranchDrCr=TargetBranchDrCr)
					
					#Block Validation 
					if not CheckAccounting[0]:
						#catch error
						db.session.rollback()
						return False,msg_error+CheckAccounting[1]


					# Successfully
					Message = msg_authorize_0
					return True,Message
				else:

					#Catch error
					db.session.rollback()
					return False,msg_error+msg_cannot_authorize
		else:
			db.session.rollback()
			Message = msg_warning+"Record not found..."
			return False,Message

	except Exception, e:
		raise
		db.session.rollback()
		return False,msg_error+' %s'%e

def isDuplicatePosting(AUTH,ID):
	LiveObj = AUTH.query.get(ID)
	if LiveObj:
		return True, msg_error+'The record %s already exists in live by Inputter %s - %s.'% (ID,LiveObj.Inputter,LiveObj.Createdon)
	else:
		return False,''
def setReverse(TypeProcess,AuthLevel,TypeModule,AUTH,INAU,ID,Inputter='',Createdon='',MoveDataField={}):
	try:
		Message = ""
		TellerParam = mktparam.getTellerParam()
		ObjAUTH 	= AUTH.query.get(ID)
		LCYAmount 	= 0
		DrGLKey = ''
		CrGLKey = ''

		if AuthLevel == 1:

			mktaudit.moveAUTHtoINAU(AUTH,INAU,ID,Inputter,Createdon, 'INAU', '-1',MoveDataField)
			Message = "The record was reversed successfully, record id: %sR in INAU."%ID
			return True,Message
		else:
			# print "Start reverse record seft Authorize"
			# Seft Authorize need to reverse
			
			# print ObjAUTH
			# print 'AUTH :%s'% AUTH
			# print 'INAU :%s'% INAU
			# print 'ID :%s'%ID

			if ObjAUTH:
				'''
					DP 	=	Teller Deposit
					WD 	= 	Teller Withdrawal
					TT 	= 	Teller Till To Till
					IP 	= 	Teller Income Posting
					EP 	= 	Teller Expense Posting
					CB 	= 	Teller Cash Deposit By Bank
					CC 	= 	Teller Cash Deposit By Cheque
					WB 	= 	Teller Cash Withdrawal By Bank
					WC 	=	Teller Cash Withdrawal By Cheque


					FT 	= 	FundTransfer
					FD 	= 	FundTransfer Deposit
					FW 	=	FundTransfer Withdrawal
					FA 	=	FundTransfer Fund Advance
					FS 	=	FundTransfer Fund Settlement

					BF 	= 	Buying Foregin Exchange
					SF 	= 	Selling Foregin Exchange
				'''

				# Teller 
				if TypeModule in ['DP','WD','TT','IP','EP','CB','CC','WB','WC']:

					DrAcc 		= ObjAUTH.TDrAccount 
					DrCat 		= ObjAUTH.DrCategory
					DrCur 		= ObjAUTH.DrCurrency

					CrAcc 		= ObjAUTH.TCrAccount 
					CrCat 		= ObjAUTH.CrCategory
					CrCur 		= ObjAUTH.CrCurrency
					Module 		= TypeModule
					TranDate 	= ObjAUTH.TranDate
					Mode 		= getMode(CrAcc,DrAcc)

				# FundTransfer And Foregin Exchange
				elif TypeModule in ['FD','FW','FA','FT','FS','BF','SF']:

					DrAcc 		= ObjAUTH.DrAccount 
					DrCat 		= ObjAUTH.DrCategory
					DrCur 		= ObjAUTH.DrCurrency

					CrAcc 		= ObjAUTH.CrAccount 
					CrCat 		= ObjAUTH.CrCategory
					CrCur 		= ObjAUTH.CrCurrency
					Module 		= TypeModule
					TranDate 	= ObjAUTH.TranDate
					Mode 		= getMode(DrAcc,CrAcc)


					if hasattr(ObjAUTH, 'ExchangeAmount') and TypeModule in ['BF','SF']:
						LCYAmount 	= ObjAUTH.ExchangeAmount

					if hasattr(ObjAUTH, 'DrGLKey') and hasattr(ObjAUTH, 'CrGLKey'):
						DrGLKey = ObjAUTH.CrGLKey
						CrGLKey = ObjAUTH.DrGLKey

				# Journal Entry
				elif TypeModule == 'JE':

					DrAcc 		= ObjAUTH.DrAccount
					DrCat 		= ObjAUTH.DebitCategory
					DrCur 		= ObjAUTH.Currency

					CrAcc 		= ObjAUTH.CrAccount
					CrCat 		= ObjAUTH.CreditCategory
					CrCur 		= ObjAUTH.Currency
					Module 		= TypeModule
					TranDate 	= ObjAUTH.TransactionDate
					Mode 		= getMode(DrAcc,CrAcc)

				else:
					#Catch error
					db.session.rollback()
					return False,msg_error+"Invalid Mode %s"%TypeModule

				if hasattr(ObjAUTH, 'LCYAmount'):

					LCYAmount = ObjAUTH.LCYAmount if ObjAUTH.LCYAmount else 0

				if hasattr(ObjAUTH, 'ExchangeRate'):

					ExchangeRate = ObjAUTH.ExchangeRate

				Amo  		= Decimal(ObjAUTH.Amount)
				Tran  		= TellerParam.RevTransaction
				Ref 		= ObjAUTH.Reference
				ID			= ObjAUTH.ID+'R'
				UserReference=ObjAUTH.Reference
				Note 		= ObjAUTH.Note

				Audit 		= mktaudit.getAuditrail()
				Inputter	= Audit['Inputter']
				Createdon 	= Audit['Createdon']
				Authorizer 	= Audit['Authorizer']
				Authorizeon	= Audit['Authorizeon']
				Branch 		= Audit['Branch']

				if TypeProcess == "Teller":
					CashType = ObjAUTH.CashType
					ChequeNo = ObjAUTH.ChequeNo
					Bank 	 = ObjAUTH.Bank
					# print "Adding record reverse TT to db session "
					InsertObjAUTH = AUTH(
						Status			= 'AUTH',
						Curr 			= '0',
						Inputter 		= Inputter,
						Createdon 		= Createdon,
						Authorizer 		= Authorizer,
						Authorizeon 	= Authorizeon,
						Branch			= Branch,
						ID 				= ID,
						TDrAccount 		= DrAcc,
						DrCategory 		= DrCat,
						DrCurrency 		= DrCur,
						TCrAccount 		= CrAcc,
						CrCategory 		= CrCat,
						CrCurrency 		= CrCur,
						Amount 			= Amo,
						Transaction 	= Tran,
						TranDate 		= TranDate,
						Reference 		= Ref,
						Note 			= Note,
						CashType 		= CashType,
						ChequeNo 		= ChequeNo,
						Bank 			= Bank,
						ExchangeRate 	= ExchangeRate,
						LCYAmount 		= LCYAmount
						 )

				elif TypeProcess == "JournalEntry":

					# print "Adding record reverse FT to db session "
					InsertObjAUTH = AUTH(
						Status			= 'AUTH',
						Curr 			= '0',
						Inputter 		= Inputter,
						Createdon 		= Createdon,
						Authorizer 		= Authorizer,
						Authorizeon 	= Authorizeon,
						Branch			= Branch,
						ID 				= ID,
						DebitCategory 	= DrCat,
						CreditCategory 	= CrCat,
						Currency 		= CrCur,
						Amount 			= Amo,
						Transaction 	= Tran,
						TransactionDate = TranDate,
						Reference 		= Ref,
						Note 			= Note,
						ExchangeRate 	= ExchangeRate,
						LCYAmount 		= LCYAmount )

				elif TypeProcess == "ForeignExchange":
					# print "Adding record reverse ForeignExchange to db session "

					ExchangeRate 	= ObjAUTH.ExchangeRate
					ExchangeAmount 	= ObjAUTH.ExchangeAmount
					LCYAmount 		= ExchangeAmount
					InsertObjAUTH = AUTH(
						Status			= 'AUTH',
						Curr 			= '0',
						Inputter 		= Inputter,
						Createdon 		= Createdon,
						Authorizer 		= Authorizer,
						Authorizeon 	= Authorizeon,
						Branch			= Branch,
						ID 				= ID,
						DrAccount 		= DrAcc,
						DrCategory 		= DrCat,
						DrCurrency 		= DrCur,
						CrAccount 		= CrAcc,
						CrCategory 		= CrCat,
						CrCurrency 		= CrCur,
						Amount 			= Amo,
						Transaction 	= Tran,
						TranDate 		= TranDate,
						Reference 		= Ref,
						Note 			= Note,
						ExchangeRate 	= ExchangeRate,
						ExchangeAmount 	= ExchangeAmount)
				else: 
					
					# print "Adding record reverse FT to db session "
					InsertObjAUTH = AUTH(
						Status			= 'AUTH',
						Curr 			= '0',
						Inputter 		= Inputter,
						Createdon 		= Createdon,
						Authorizer 		= Authorizer,
						Authorizeon 	= Authorizeon,
						Branch			= Branch,
						ID 				= ID,
						DrAccount 		= DrAcc,
						DrCategory 		= DrCat,
						DrCurrency 		= DrCur,
						CrAccount 		= CrAcc,
						CrCategory 		= CrCat,
						CrCurrency 		= CrCur,
						Amount 			= Amo,
						Transaction 	= Tran,
						TranDate 		= TranDate,
						Reference 		= Ref,
						Note 			= Note,
						DrGLKey 		= DrGLKey,
						CrGLKey 		= CrGLKey,
						ExchangeRate 	= ExchangeRate,
						LCYAmount 		= LCYAmount)

					if TypeModule in ['FD','FW','FA','FT','FS']:
						InsertObjAUTH.Module = Module

				db.session.add(InsertObjAUTH)
				# print "Added record to session "				
				# Call function to commit add account by currency 
				# CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,\
				# 									CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,ID,Note,\
				# 									Mode,LCYAmount,DrGLKey,CrGLKey,UserReference)
				CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,CrAcc,CrCat,CrCur,\
													DrAcc,DrCat,DrCur,Amo,Module,Tran,TranDate,ID,Note,\
													Mode,LCYAmount,DrGLKey,CrGLKey,UserReference)
				#Block validation
				if not CheckAccounting[0]:
					#Catch error
					db.session.rollback()
					return False,msg_error+CheckAccounting[1]

			else:
				db.session.rollback()
				Message = msg_warning+"Record not found..."
				return False,Message

			Message = "The record was reversed successfully, record id:%s"%ID
			return True,Message

	except Exception, e:
		db.session.rollback()
		return False,msg_error+" %s"%e

#----- Till Opearation

def setAuthorizeTillOperation(TypeModule,ID):
	# When reverse record we need to post another record which opposites between debit and credit of the old one
	try:
		Message 	= ""
		MainObj		= MKT_TILL_OPERATION_INAU.query.get(ID)
		DetailObj 	= MKT_TO_DETAIL_INAU.query.filter(MKT_TO_DETAIL_INAU.ID==ID)
		TellerParam = mktparam.getTellerParam()
		Tran  		= MainObj.Transaction
		TranDate 	= MainObj.TranDate
		Ref 		= MainObj.ID
		UserReference= MainObj.Reference
		Note 		= MainObj.Note
		Mode 		= ""

		Audit 		= mktaudit.getAuditrail()
		Inputter	= MainObj.Inputter
		Createdon 	= MainObj.Createdon
		Branch 		= MainObj.Branch
		Authorizer 	= Audit['Authorizer']
		Authorizeon	= Audit['Authorizeon']

		if MainObj:
			if Inputter == Authorizer:
				#Catch error
				db.session.rollback()
				return False,msg_error+msg_cannot_authorize

			# If Status RNAU mean that Authorize record reverse
			if ID[-1:] == 'R':
				# print "Authorize Record RNAU"
				# Till Open
				if TypeModule == 'TO':

					Module 		= TypeModule

					for row in DetailObj:

						Amo 		= Decimal(row.Amount)
						Currency 	= row.Currency
						VaultObj 	= mktuser.getVaultInfo(Currency,Inputter)

						if VaultObj:
							DrAcc 	= VaultObj.ID
							DrCat	= VaultObj.AccCategory
							DrCur 	= VaultObj.Currency

						CrAcc 	=	row.TillAccount
						CrCur 	=	Currency
						CrCat 	=	row.Category

						CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr",TranDate=TranDate)
						if CheckBalanceDr:
							return False,msg_error + CheckBalanceDr
						
						CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr",TranDate=TranDate)
						if CheckBalanceCr:
							return False,msg_error + CheckBalanceCr

					
						# print "Added record to session "
						CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
															CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
															UserReference=UserReference)
						#Block validation
						if not CheckAccounting[0]:
							#Catch error
							db.session.rollback()
							return False,msg_error+CheckAccounting[1]

				#Till Close
				if TypeModule == 'TC':

					Module 		= TypeModule
					UnBalance 	= TellerParam.UnBalance
					AccObj 		= MKT_ACCOUNT.query

					for row in DetailObj:

						TillAccount = str(row.TillAccount)
						Amo   		= Decimal(row.Amount)
						FilterAcc 	= AccObj.get(TillAccount)

						if FilterAcc:
							
							Balance 		= Decimal(row.Balance)
							TillAccount 	= FilterAcc.ID
							TillCategory	= FilterAcc.AccCategory
							TillCurrency 	= FilterAcc.Currency

						else:
							return False,msg_error+"Till Account not found."

						VaultObj   	= mktuser.getVaultInfo(TillCurrency,Inputter)
						if VaultObj:
							VaultAccount 	=	VaultObj.ID
							VaultCategory 	=	VaultObj.AccCategory
							VaultCurrency 	=	VaultObj.Currency
						else:
							return False,msg_error+"Vault Account not found."
						# check Balance and Amount (Shortage and Surplus)
						# Shortage
						if Amo < Balance:
							if UnBalance == "Y":

								DrAcc = TillAccount
								DrCat = TillCategory
								DrCur = TillCurrency

								CrAcc = VaultAccount
								CrCat = VaultCategory
								CrCur = VaultCurrency

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]

								#Post Shortage Accout - 
								ShortageAcc  = mktaccount.getShortageAccount(CrCur,Branch)
								if ShortageAcc:
									Amo = Balance - Amo
									DrAcc = TillAccount
									DrCat = TillCategory
									DrCur = TillCurrency

								else:
									return False,msg_error+"Shortage Account not found."

								CrAcc = ShortageAcc.ID
								CrCat = ShortageAcc.AccCategory
								CrCur = ShortageAcc.Currency

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]
							
							else:
								return False,msg_error+"Cannot close till with amount less than balance."

						# check Balance and Amount (Shortage and Surplus)
						# Surplus
						elif Amo > Balance:

							if UnBalance == "Y":

								DrAcc = TillAccount
								DrCat = TillCategory
								DrCur = TillCurrency

								CrAcc = VaultAccount
								CrCat = VaultCategory
								CrCur = VaultCurrency

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]
									
								#Post Surplus Accout + :
								Surplus  = mktaccount.getSurplusAccount(CrCur,Branch)
								Amo = Amo - Balance

								DrAcc = Surplus.ID 
								DrCat = Surplus.AccCategory 
								DrCur = Surplus.Currency

								if Surplus:
									CrAcc = TillAccount
									CrCat = TillCategory
									CrCur = TillCurrency
								else:
									return False,msg_error+"Surplus Account not found."

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]
							else:
								return False,msg_error+"Cannot close till with amount more than balance."
						else:

							DrAcc = TillAccount
							DrCat = TillCategory
							DrCur = TillCurrency

							CrAcc = VaultAccount
							CrCat = VaultCategory
							CrCur = VaultCurrency

							# Call function to commit add account by currency 
							CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																UserReference=UserReference)
							if not CheckAccounting[0]:
								return False,CheckAccounting[1]
						

				# Successfully
				Message="The record was authorized successfully for reversed, record id:%s"%ID
				return True,Message
			else:
				# Mean that Authorize INAU
				# print "Authorize Record INAU"
				
				#Till Open
				if TypeModule == 'TO':

					Module 		= TypeModule
					for row in DetailObj:
						
						Amo 		= Decimal(row.Amount)
						Currency 	= row.Currency
						VaultObj 	= mktuser.getVaultInfo(Currency,Inputter)

						if VaultObj:
							CrAcc 	= VaultObj.ID
							CrCat	= VaultObj.AccCategory
							CrCur 	= VaultObj.Currency

						DrAcc 	=	row.TillAccount
						DrCur 	=	Currency
						DrCat 	=	row.Category

						CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr",TranDate=TranDate)
						if CheckBalanceDr:
							return False,msg_error + CheckBalanceDr
						
						CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr",TranDate=TranDate)
						if CheckBalanceCr:
							return False,msg_error + CheckBalanceCr

						if Inputter != Authorizer:

							# print "Added record to session "
							CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
															CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
															UserReference=UserReference)
							#Block validation
							if not CheckAccounting[0]:
								#Catch error
								db.session.rollback()
								return False,msg_error+CheckAccounting[1]
						else:
							#Catch error
							db.session.rollback()
							return False,msg_error+msg_cannot_authorize

				#Till Close
				elif TypeModule == 'TC':

					Module 		= TypeModule
					UnBalance 	= TellerParam.UnBalance
					AccObj 		= MKT_ACCOUNT.query

					for row in DetailObj:

						TillAccount = str(row.TillAccount)
						Amo   		= Decimal(row.Amount)
						FilterAcc 	= AccObj.get(TillAccount)

						if FilterAcc:
							
							Balance 		= Decimal(FilterAcc.Balance)
							TillAccount 	= FilterAcc.ID
							TillCategory	= FilterAcc.AccCategory
							TillCurrency 	= FilterAcc.Currency

						else:
							return False,msg_error+"Till Account not found."

						VaultObj   	= mktuser.getVaultInfo(TillCurrency,Inputter)
						if VaultObj:
							VaultAccount 	=	VaultObj.ID
							VaultCategory 	=	VaultObj.AccCategory
							VaultCurrency 	=	VaultObj.Currency
						else:
							return False,msg_error+"Vault Account not found."
						# check Balance and Amount (Shortage and Surplus)
						# Shortage
						if Amo < Balance:
							if UnBalance == "Y":

								DrAcc = VaultAccount
								DrCat = VaultCategory
								DrCur = VaultCurrency

								CrAcc = TillAccount
								CrCat = TillCategory
								CrCur = TillCurrency

								CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr",TranDate=TranDate)
								if CheckBalanceDr:
									return False,msg_error + CheckBalanceDr
								
								CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr",TranDate=TranDate)
								if CheckBalanceCr:
									return False,msg_error + CheckBalanceCr

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]

								#Post Shortage Accout - 
								ShortageAcc  = mktaccount.getShortageAccount(CrCur,Branch)
								if ShortageAcc:
									Amo = Balance - Amo
									DrAcc = ShortageAcc.ID
									DrCat = ShortageAcc.AccCategory
									DrCur = ShortageAcc.Currency
								else:
									return False,msg_error+"Shortage Account not found in currency %s."%CrCur

								CrAcc = TillAccount
								CrCat = TillCategory
								CrCur = TillCurrency

								CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr",TranDate=TranDate)
								if CheckBalanceDr:
									return False,msg_error + CheckBalanceDr
								
								CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr",TranDate=TranDate)
								if CheckBalanceCr:
									return False,msg_error + CheckBalanceCr

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]
							
							else:
								return False,msg_error+"Cannot close till with amount less than balance."

						# check Balance and Amount (Shortage and Surplus)
						# Surplus
						elif Amo > Balance:

							if UnBalance == "Y":
								

								DrAcc = TillAccount
								DrCat = TillCategory
								DrCur = TillCurrency
								
								# if Surplus need post first Surplus Accout + :
								Surplus  = mktaccount.getSurplusAccount(TillCurrency,Branch)
								SurplusAmount = Amo - Balance
								
								if Surplus:
									CrAcc = Surplus.ID 
									CrCat = Surplus.AccCategory 
									CrCur = Surplus.Currency
								else:
									return False,msg_error+"Surplus Account not found in currency %s."%DrCur

								CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(SurplusAmount), "Dr",TranDate=TranDate)
								if CheckBalanceDr:
									return False,msg_error + CheckBalanceDr
								
								CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(SurplusAmount), "Cr",TranDate=TranDate)
								if CheckBalanceCr:
									return False,msg_error + CheckBalanceCr

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,SurplusAmount,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]

								#Post close till 
								DrAcc = VaultAccount
								DrCat = VaultCategory
								DrCur = VaultCurrency

								CrAcc = TillAccount
								CrCat = TillCategory
								CrCur = TillCurrency

								CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr",TranDate=TranDate)
								if CheckBalanceDr:
									return False,msg_error + CheckBalanceDr
								
								CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr",TranDate=TranDate)
								if CheckBalanceCr:
									return False,msg_error + CheckBalanceCr

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]

							else:
								return False,msg_error+"Cannot close till with amount more than balance."
						else:

							DrAcc = VaultAccount
							DrCat = VaultCategory
							DrCur = VaultCurrency

							CrAcc = TillAccount
							CrCat = TillCategory
							CrCur = TillCurrency

							CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr",TranDate=TranDate)
							if CheckBalanceDr:
								return False,msg_error + CheckBalanceDr
							
							CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr",TranDate=TranDate)
							if CheckBalanceCr:
								return False,msg_error + CheckBalanceCr

							# Call function to commit add account by currency 
							CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																UserReference=UserReference)
							if not CheckAccounting[0]:
								return False,CheckAccounting[1]

				# Successfully
				Message="The record was authorized successfully, record id:%s"%ID
				return True,Message
		else:
			Message = msg_warning+"Record not found..."
			return False,Message

	except Exception, e:
		db.session.rollback()
		return False,msg_error+' %s'%e

def setReverseMultiForm(AuthLevel,TypeModule,MianAUTH,MainINAU,DetailAUTH,DetailINAU,ID,Inputter='',Createdon=''):
	
	try:
		Message = ""
		TellerParam = mktparam.getTellerParam()
		MainObj 	= MianAUTH.query.get(ID)
		DetailObj 	= DetailAUTH.query.filter(DetailAUTH.ID==ID)
		LiveInputter = MainObj.Inputter
		if Inputter != LiveInputter:
			Message = msg_warning+"User %s cannot reverse record for user %s."%(Inputter,LiveInputter)
			return False,Message

		if AuthLevel == 1:

			mktaudit.moveAUTHtoINAU(DetailAUTH,DetailINAU,ID,Inputter,Createdon, 'INAU')
			mktaudit.moveAUTHtoINAU(MianAUTH,MainINAU,ID,Inputter,Createdon, 'INAU', '-1')
			Message = "The record was reversed successfully, record id:%sR in INAU."%ID
			return True,Message
		else:
			
			# print "Start reverse record seft Authorize"
			# Seft Authorize need to reverse
			MainObj 	= MianAUTH.query.get(ID)

			DetailObj 	= DetailAUTH.query.filter(DetailAUTH.ID==ID)
			Audit 		= mktaudit.getAuditrail()
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']

			# print MainObj
			# print 'ID :%s'%ID
			if MainObj:

				# Till Open
				if TypeModule == 'TO':

					Tran  		= TellerParam.RevTransaction
					TranDate 	= MainObj.TranDate
					Ref 		= "%sR"%MainObj.ID
					UserReference= MainObj.Reference
					Note 		= MainObj.Note
					Mode 		= ""
					Module 		= TypeModule
					

					#Detail Table
					mktaudit.setReverseToLive(DetailAUTH,DetailINAU,ID,Inputter,Createdon,Authorizer,Authorizeon)

					#Main Table
					mktaudit.setReverseToLive(MianAUTH,MainINAU,ID,Inputter,Createdon,Authorizer,Authorizeon)

					for row in DetailObj:

						Amo 		= Decimal(row.Amount)
						Currency 	= row.Currency
						VaultObj 	= mktuser.getVaultInfo(Currency,LiveInputter)

						if VaultObj:
							DrAcc 	= VaultObj.ID
							DrCat	= VaultObj.AccCategory
							DrCur 	= VaultObj.Currency

						CrAcc 	=	row.TillAccount
						CrCur 	=	Currency
						CrCat 	=	row.Category

						CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr")
						if CheckBalanceDr:
							return False,msg_error + CheckBalanceDr
						
						CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr")
						if CheckBalanceCr:
							return False,msg_error + CheckBalanceCr

						# print "Added record to session "				
						# Call function to commit add account by currency 
						CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
															CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
															UserReference=UserReference)
						#Block validation
						if not CheckAccounting[0]:
							#Catch error
							db.session.rollback()
							return False,msg_error+CheckAccounting[1]

				if TypeModule == 'TC':

					UnBalance 	= TellerParam.UnBalance
					Tran  		= TellerParam.RevTransaction
					TranDate 	= MainObj.TranDate
					Ref 		= "%sR"%MainObj.ID
					UserReference= MainObj.Reference
					Note 		= MainObj.Note
					Mode 		= ""
					Module 		= TypeModule
					

					#Detail Table
					mktaudit.setReverseToLive(DetailAUTH,DetailINAU,ID,Inputter,Createdon,Authorizer,Authorizeon)

					#Main Table
					mktaudit.setReverseToLive(MianAUTH,MainINAU,ID,Inputter,Createdon,Authorizer,Authorizeon)
					
					AccObj = MKT_ACCOUNT.query
					for row in DetailObj:

						TillAccount = row.TillAccount
						Amo 		= Decimal(row.Amount)

						FilterAcc = AccObj.get(TillAccount)
						if FilterAcc:

							Balance 		= Decimal(row.Balance)
							TillAccount 	= FilterAcc.ID
							TillCategory	= FilterAcc.AccCategory
							TillCurrency 	= FilterAcc.Currency

						VaultObj   	= mktuser.getVaultInfo(TillCurrency,LiveInputter)
						if VaultObj:
							VaultAccount 	=	VaultObj.ID
							VaultCategory 	=	VaultObj.AccCategory
							VaultCurrency 	=	VaultObj.Currency

						# check Balance and Amount (Shortage and Surplus)
						# Shortage
						if Amo < Balance:
							if UnBalance == "Y":

								DrAcc = TillAccount
								DrCat = TillCategory
								DrCur = TillCurrency

								CrAcc = VaultAccount
								CrCat = VaultCategory
								CrCur = VaultCurrency

								CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr")
								if CheckBalanceDr:
									return False,msg_error + CheckBalanceDr
								
								CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr")
								if CheckBalanceCr:
									return False,msg_error + CheckBalanceCr

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]

								#Post Shortage Accout - 
								ShortageAcc  = mktaccount.getShortageAccount(CrCur,Branch)
								if ShortageAcc:
									Amo = Balance - Amo
									CrAcc = ShortageAcc.ID
									CrCat = ShortageAcc.AccCategory
									CrCur = ShortageAcc.Currency
								else:
									return False,msg_error+"Shortage Account not found."

								DrAcc = TillAccount
								DrCat = TillCategory
								DrCur = TillCurrency
								

								CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr")
								if CheckBalanceDr:
									return False,msg_error + CheckBalanceDr
						
								CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr")
								if CheckBalanceCr:
									return False,msg_error + CheckBalanceCr

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]
							
							else:
								return False,msg_error+"Cannot close till with amount less than balance."

						# check Balance and Amount (Shortage and Surplus)
						# Surplus
						elif Amo > Balance:

							if UnBalance == "Y":

								DrAcc = TillAccount
								DrCat = TillCategory
								DrCur = TillCurrency

								CrAcc = VaultAccount
								CrCat = VaultCategory
								CrCur = VaultCurrency

								CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr")
								if CheckBalanceDr:
									return False,msg_error + CheckBalanceDr
								
								CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr")
								if CheckBalanceCr:
									return False,msg_error + CheckBalanceCr

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]
									
								#Post Surplus Accout + :
								Surplus  = mktaccount.getSurplusAccount(CrCur,Branch)
								Amo = Amo - Balance

								DrAcc = Surplus.ID 
								DrCat = Surplus.AccCategory 
								DrCur = Surplus.Currency

								if Surplus:
									CrAcc = TillAccount
									CrCat = TillCategory
									CrCur = TillCurrency
								else:
									return False,msg_error+"Surplus Account not found."

								CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr")
								if CheckBalanceDr:
									return False,msg_error + CheckBalanceDr
								
								CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr")
								if CheckBalanceCr:
									return False,msg_error + CheckBalanceCr

								# Call function to commit add account by currency 
								CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																	CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																	UserReference=UserReference)
								if not CheckAccounting[0]:
									return False,CheckAccounting[1]

							else:
								return False,msg_error+"Cannot close till with amount more than balance."
						else:
							DrAcc = TillAccount
							DrCat = TillCategory
							DrCur = TillCurrency

							CrAcc = VaultAccount
							CrCat = VaultCategory
							CrCur = VaultCurrency

							CheckBalanceDr 	= 	mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amo), "Dr")
							if CheckBalanceDr:
								return False,msg_error + CheckBalanceDr
							
							CheckBalanceCr 	= 	mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amo), "Cr")
							if CheckBalanceCr:
								return False,msg_error + CheckBalanceCr

							# Call function to commit add account by currency 
							CheckAccounting = setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,
																CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,
																UserReference=UserReference)
							if not CheckAccounting[0]:
								return False,CheckAccounting[1]
							

			else:
				db.session.rollback()
				Message = msg_warning+"Record not found..."
				return False,Message

			Message = "The record was reversed successfully, record id:%sR"%ID
			return True,Message

	except Exception, e:
		db.session.rollback()
		return False,msg_error+" %s"%e

	
def setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amount,Module,Tran,TranDate,Ref,Note,

						Mode="",LCYAmount=0,DrGLKey='',CrGLKey='',UserReference='',TargetBranch='',TargetBranchDrCr='',EOD=0):

	try:
		# Mode Option
		# 	Direct 	 : Both Dr/Cr is Direct 
		# 	None 	 : Both Dr/Cr not Direct
		# 	DrDirect : Dr Direct and Cr not Direct
		# 	CrDirect : Cr Direct and Dr not Direct
		# print "DrAcc ", DrAcc
		# print "CrAcc ", CrAcc
		# print "TargetBranch ", TargetBranch
		# print 'TargetBranchDrCr ', TargetBranchDrCr
		InterBranchAccList = getInterBranchAccPosting(Branch=Branch,TargetBranch=TargetBranch,
												 TargetBranchDrCr=TargetBranchDrCr,
												 DrAcc=DrAcc,DrCat=DrCat,DrCur=DrCur,
												 CrAcc=CrAcc,CrCat=CrCat,CrCur=CrCur,
												 ModeOption=Mode)
		if TargetBranch and TargetBranch != "__None" and TargetBranch != Branch and Ref[-1:] == "R":
			InterBranchAccList = getInterBranchReverse(InterBranchAccList)
		# print "*^"*20
		# print len(InterBranchAccList)
		# print "*" * 50
		# print InterBranchAccList
		for postDict in InterBranchAccList:
			# print postDict
			Message = ""

			ModeOption 	= postDict.get("ModeOption") #Original Mode Value
			Branch 	 	= postDict.get("Branch")
			DrAcc 		= postDict.get("DrAcc")
			DrCat 		= postDict.get("DrCat")
			DrCur 		= postDict.get("DrCur")
			CrAcc 		= postDict.get("CrAcc")
			CrCat 		= postDict.get("CrCat")
			CrCur 		= postDict.get("CrCur")

			CheckAccounting = mktaccounting.getValidationAccounting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amount,Module,Tran,TranDate,Ref,Note,ModeOption)
			AccSetting 		= 	mktsetting.getAccSetting()
			BaseCurrency 	= 	AccSetting.BaseCurrency
			
			if CheckAccounting[0]:
				for i in range(2):
					if i == 0:
						Account 	= DrAcc
						Category	= DrCat
						Currency 	= DrCur
						DrCr 		= "Dr"

						if ModeOption == "DrDirect":
							Mode = "Direct"
						elif ModeOption == "CrDirect":
							Mode = ""
						elif not ModeOption:
							Mode = ""
						elif ModeOption=="Direct":
							Mode = "Direct"
					else:
						Account		= CrAcc
						Category	= CrCat
						Currency 	= CrCur
						DrCr 		= "Cr"

						if ModeOption == "CrDirect":
							Mode = "Direct"
						elif ModeOption == "DrDirect":
							Mode = ""
						elif not ModeOption:
							Mode = ""
						elif ModeOption=="Direct":
							Mode = "Direct"
					# By Default Booking Amount equal Amount that user booking
					BookingAmount 	= 	Amount

					# Block Foreign Exchange
					"""
						Formula FX amount :

						FCY Currency => Amount 			LCYAmount
						LCY Currency =>	LCYAmount 		LCYAmount
						
					"""
					if Module in ['BF','SF'] :

						LCYTransaction  = 	mktaccounting.isLCY(BaseCurrency,Currency)

						if LCYTransaction:
							BookingAmount = LCYAmount
					

					#Get Default Gl key	
					GL_KEYS 		= mktaccounting.getConsolKey(Category,Currency,"","")

					# Overwrite GLKey in Fund transfer
					if DrCr == 'Dr' and DrGLKey:
						GL_KEYS = DrGLKey
					elif DrCr == 'Cr' and CrGLKey:
						GL_KEYS = CrGLKey

					# print "GL_KEYS",GL_KEYS
					ObjAccounting 	= mktaccounting.postAccounting(		

												"AUTH", 				# Status
												"0", 					# Curr
												Inputter,				# Inputter
												Createdon, 				# Createdon
												Authorizer,				# Authorizer
												Authorizeon,			# Authorizeon
												"", 					# AEID
												Account,				# Account
												Category,				# Category
												Currency,				# Currency
												DrCr,					# DrCr
												BookingAmount, 			# Amount
												Module,					# Module
												Tran, 					# Transaction
												TranDate, 				# TransactionDate
												Ref, 					# Reference
												Note, 					# Note
												"", 					# JNID
												Branch,					# Branch
												GL_KEYS,				# ConsolKey
												Mode,					# Mode
												"YES",
												LCYAmount=LCYAmount,				# Tell function to update LastTransaction Customer's Account
												UserReference=UserReference
												)	
					if Account:
						AccEntryObj=checkValidateAccEntry(AccountID=Account,Amount=Amount,TranDate=TranDate,Ref=Ref,DrCr=DrCr)
						if AccEntryObj[0]==False:
							db.session.rollback()
							return False,AccEntryObj[1]

				# Check after post accounting
				CheckPointObj = mktaccounting.setAccoutningCheckPoint(ModeOption,Ref,Branch=Branch)
				if not CheckPointObj[0]:
					db.session.rollback()
					return False,CheckPointObj[1]


				# return False,"test"
				#Pass
				# print "pass commit accounting"
				# return True,""
			else:

				db.session.rollback()
				return False,CheckAccounting[1]
		return True,""

	except Exception, e:
		raise
		db.session.rollback()
		return False," %s"%e

def checkDDAccount(AccountID, ConfirmMsg=True):

	Msg=""
	LoanObj = MKT_LOAN_CONTRACT.query.filter_by(Account=AccountID)

	if len(LoanObj.all()) <= 1:
		return False, Msg

	Link_Contract = [
		"<a href='javascript:void(0)' onClick=CustomClickView('Loan&nbsp;Centre','LoanCentre/?ID=%s')>%s</a>" % (row.ID, row.ID) \
		for row in LoanObj.all()
	]

	Msg = "Drawdown account has %s loan contract: %s<br>" % (len(Link_Contract), ' '.join(Link_Contract))

	for row in LoanObj:
		PDObj = MKT_PAST_DUE.query.filter_by(LoanID=row.ID)
		for PD in PDObj:
			CurrencyObj = mktmoney.getCurrencyObj(PD.Currency)
			Msg += "Past Due ID: <a href='javascript:void(0)' onClick=CustomClickView('%s','PD/?ID=%s')>%s</a><br>" % (PD.ID, PD.ID, PD.ID)
			Msg += "<table><tr><th>Total Past Due</th></tr>"
			Msg += '<tr><td>Principle:</td><td><b>' + mktmoney.toMoney(float(PD.TotPrincipalDue), CurrencyObj, 1) + '</b></td></tr>'
			Msg += '<tr><td>Interest:</td><td><b>' + mktmoney.toMoney(float(PD.TotInterestDue), CurrencyObj, 1) + '</b></td></tr>'
			Msg += '<tr><td>Charge:</td><td><b>' + mktmoney.toMoney(float(PD.TotChargeDue), CurrencyObj, 1) + '</b></td></tr>'
			Msg += '<tr><td>Penalty:</td><td><b>' + mktmoney.toMoney(float(PD.TotPenaltyDue), CurrencyObj, 1) + '</b></td></tr>'
			Msg += '</table>'

	if ConfirmMsg:
		Msg = '%s <br/>Are you sure want to proceed?'%(Msg)
	
	return True, Msg


#2018-06-05 - Inter-Branch
def getInterBranchAccPosting(**kwargs):
	# Result = [{"DrAcc":"","DrCat":"","DrCur":"","ModeOption":"",
	# 		   "CrAcc":"","CrCat":"","CrCur":""}]

   	CurrentBranch 	= kwargs.get("Branch")
   	TargetBranch 	= kwargs.get("TargetBranch","")
   	TargetBranchDrCr= kwargs.get("TargetBranchDrCr","")
   	DrAcc 			= kwargs.get("DrAcc")
   	DrCat 			= kwargs.get("DrCat")
   	DrCur 			= kwargs.get("DrCur")
   	ModeOption 		= kwargs.get("ModeOption")
   	CrAcc 			= kwargs.get("CrAcc")
   	CrCat 			= kwargs.get("CrCat")
   	CrCur 			= kwargs.get("CrCur")

   	Result = []
	AccDict = {}

   	if not TargetBranch or TargetBranch == CurrentBranch or TargetBranch =="__None":#not inter-branch
   		# print "Not inter-branch"
   		AccDict.update({"DrAcc": DrAcc,"DrCat": DrCat,"DrCur":DrCur,"ModeOption": ModeOption,"Branch":CurrentBranch})
   		AccDict.update({"CrAcc": CrAcc,"CrCat": CrCat,"CrCur":CrCur})
   		Result.append(AccDict)

	else:#inter-branch
		# print "Inter-branch ..."
		AccSetting 				= mktsetting.getAccSetting()
		InterBranchHO 			= AccSetting.InterBranchHO

	   	#1. At Current Branch
	   	AccDict = {"Branch": CurrentBranch}
	   	if TargetBranchDrCr == "Dr":#current branch will be Cr
	   		IBACat,IBAAcc = getIBACat(Branch=CurrentBranch,TargetBranch=TargetBranch,Currency=CrCur)
	   		AccDict.update({"CrAcc":CrAcc,"CrCat": CrCat,"CrCur":CrCur})
	   		AccDict.update({"DrAcc":IBAAcc,"DrCat": IBACat,"DrCur":DrCur})
	   		AccDict.update({"ModeOption": getMode(IBAAcc,CrAcc)})
   		else:#current branch will be Dr
   			IBACat,IBAAcc = getIBACat(Branch=CurrentBranch,TargetBranch=TargetBranch,Currency=DrCur)
   			AccDict.update({"DrAcc":DrAcc,"DrCat": DrCat,"DrCur":DrCur})
   			AccDict.update({"CrAcc":IBAAcc,"CrCat": IBACat,"CrCur":CrCur})
   			AccDict.update({"ModeOption": getMode(DrAcc,IBAAcc)})
		Result.append(AccDict)	

		#2. At HO Branch   		
   		if InterBranchHO not in [TargetBranch,CurrentBranch]:#branch to branch process need to have middle branch
   			AccDict = {"Branch": InterBranchHO}
   			DrBranch = ""
   			CrBranch = ""
   			if TargetBranchDrCr == "Dr":
   				DrBranch = TargetBranch
   				CrBranch = CurrentBranch
			else:
				DrBranch = CurrentBranch
				CrBranch = TargetBranch
			
   			IBACat,IBAAccDr = getIBACat(Branch=InterBranchHO,TargetBranch=DrBranch,Currency=DrCur)
   			AccDict.update({"DrAcc":IBAAccDr,"DrCat": IBACat,"DrCur":DrCur})


	   		IBACat,IBAAccCr = getIBACat(Branch=InterBranchHO,TargetBranch=CrBranch,Currency=CrCur)
   			AccDict.update({"CrAcc":IBAAccCr,"CrCat": IBACat,"CrCur":CrCur})	
   			AccDict.update({"ModeOption": getMode(IBAAccDr,IBAAccCr)})
   			Result.append(AccDict)	

	   	#3. At TargetBranch
	   	AccDict = {"Branch": TargetBranch}
	   	if TargetBranchDrCr == "Dr":#target branch will be Dr
	   		IBACat,IBAAcc = getIBACat(Branch=TargetBranch,TargetBranch=CurrentBranch,Currency=DrCur)
	   		AccDict.update({"DrAcc":DrAcc,"DrCat": DrCat,"DrCur":DrCur})
   			AccDict.update({"CrAcc":IBAAcc,"CrCat": IBACat,"CrCur":CrCur})	
   			AccDict.update({"ModeOption": getMode(DrAcc,IBAAcc)})
   		else:#target branch will be Cr
	   		IBACat,IBAAcc = getIBACat(Branch=TargetBranch,TargetBranch=CurrentBranch,Currency=CrCur)
   			AccDict.update({"CrAcc":CrAcc,"CrCat": CrCat,"CrCur":CrCur})
	   		AccDict.update({"DrAcc":IBAAcc,"DrCat": IBACat,"DrCur":DrCur})
	   		AccDict.update({"ModeOption": getMode(IBAAcc,CrAcc)})

	   	
   		Result.append(AccDict)	

   	return Result

def getIBACat(**kwargs):
	Branch 					= kwargs.get("Branch")
	TargetBranch 			= kwargs.get("TargetBranch")
	Currency 				= kwargs.get("Currency")

	AccSetting 				= mktsetting.getAccSetting()
	InterBranchHO 			= AccSetting.InterBranchHO
	InterBranchDueToCat 	= AccSetting.InterBranchDueToCat
	InterBranchDueFromCat 	= AccSetting.InterBranchDueFromCat
	
	if Branch == InterBranchHO:
		IBAAcc 	=	getInterBranchAccount(TargetBranch, InterBranchDueFromCat, Currency)
		return InterBranchDueFromCat, IBAAcc
	else:
		IBAAcc = getInterBranchAccount(Branch, InterBranchDueToCat, Currency)
		return InterBranchDueToCat,IBAAcc

def getAccountTesting(Branch,Category,Currency):
	ID = "%s%s%s" % (Currency,Category,Branch)
	print "ID ", ID
	AccObj = MKT_ACCOUNT.query.get(ID)
	if AccObj:
		return AccObj.ID
	else:
		return ""
#end

#2018-06-05 - Inter-Branch
def getInterBranchAccount(Branch,Category,Currency):
	"""
	-def : to get account number for inter-branch, it similar to getInternalAccount() method.
	-param :
		-Branch : Current branch or source branch,ex. now you are on HO so current branch is HO
		-Category : category number
		-Currency : USD or KHR, ...
	-return :
		- account id . data example : KHR29651RK
	"""

	AccSetting 		= 	mktsetting.getAccSetting() #Get Acccounting Setting
	CentralBranch 	=	AccSetting.InterBranchHO      

	ID 	=	"%s%s%s"%(Currency,Category,Branch)
	AccObj = MKT_ACCOUNT.query.get(ID)

	if AccObj:
		return AccObj.ID
	else:
		return ""

def getInterBranchReverse(InterBranchAccList=""):

	Result = []
	if InterBranchAccList:
		for postDict in InterBranchAccList:
			AccDict = {}
			AccDict.update(postDict)
			ModeOption 	= postDict.get("ModeOption") #Original Mode Value
			if ModeOption  == "DrDirect":
				ModeOption  = "CrDirect"
			elif ModeOption  == "CrDirect":
				ModeOption  = "DrDirect"
			TargetBranch 		= postDict.get("TargetBranch")
	   		TargetBranchDrCr 	= postDict.get("TargetBranchDrCr")
			CurrentBranch 	 	= postDict.get("Branch")
			DrAcc 				= postDict.get("CrAcc")
			DrCat 				= postDict.get("CrCat")
			DrCur 				= postDict.get("CrCur")
			CrAcc 				= postDict.get("DrAcc")
			CrCat 				= postDict.get("DrCat")
			CrCur 				= postDict.get("DrCur")
		
			AccDict.update({
				"DrAcc"	: 	DrAcc,
				"DrCat" : 	DrCat,
				"DrCur" : 	DrCur,
				"CrAcc"	: 	CrAcc,
				"CrCat" : 	CrCat,
				"CrCur" : 	CrCur,
				"ModeOption" : ModeOption
				})


			Result.append(AccDict)
		
	return Result
def checkValidateAccEntry(AccountID="",Amount="",TranDate="",Ref="",DrCr=""):
	"""
		-> This filter is use for validate Record In MKT_ACC_ENTRY avoid duplicate records.
		-> Account = DrAcc or CrAcc
		-> This Query use for check data that already exit.
	"""
	ValidateAccEntryObj = MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Account==AccountID).\
											filter(MKT_ACC_ENTRY.Amount==Amount).\
											filter(MKT_ACC_ENTRY.TransactionDate==TranDate).\
											filter(MKT_ACC_ENTRY.Reference==Ref).\
											filter(MKT_ACC_ENTRY.DebitCredit==DrCr).count()
	if ValidateAccEntryObj > 1:
		db.session.rollback()
		return False,'The system detects duplicate posting accounting, Please try to authorize again.'
		# return False, Message
	return True,''


