
from app 						import db

from app.Currency.models 		import MKT_CURRENCY
from app.BatchJob.models 		import MKT_BATCH_JOB
from app.StandingOrder.models 	import *

import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktdate 		as mktdate
import app.tools.user 			as mktuser
import app.tools.mktaudit 		as mktaudit
import app.tools.mktmoney 		as mktmoney
import app.tools.mktteller 		as mktteller
import app.tools.mktparam 		as mktparam
import app.tools.mktdb 			as mktdb
import app.tools.mktbjstat 		as mktbjstat
from decimal 					import *

# Special Journal Processes
class CLS_STANDING_ORDER(mktbjstat.CLS_BATCHJOB):
	"""
	S Journal Process Flows:
	==============================
	1. After insert record (See # After Insert [app.StandingOrder.forms.py]):
		a. Update AccrPerDay, NextRunDate, LastRunDate 
	2. When run EOD (See # Standing Order Process [app.tools.accounting.mktstandingorder.py]):
		a. Query all record with (See # startStandingOrder()):
			- FrequencyType != ""
			- ValueDate <= BankDate
			- NextRunDate == BankDate
			- MaturityDate >= BankDate
		b. Loop in list of query objects 
			- Posting journal (See # setPostingJournal())
			- Update record of Special Journal (See # updateStandingOrder()):
				+ OutstandingAmount 
				+ EarnedAmount
				+ LastRunDate
				+ NextRunDate
	"""

	def startStandingOrder(self):
		try:
			
			BankDate 		= mktdate.getBankDate()
			StandingObj 	= MKT_STANDING_ORDER.query.filter(	MKT_STANDING_ORDER.FrequencyType != '', 
															MKT_STANDING_ORDER.OutstandingAmount > 0,
															MKT_STANDING_ORDER.ValueDate <= str(BankDate),
															MKT_STANDING_ORDER.NextRunDate == str(BankDate), 
															MKT_STANDING_ORDER.MaturityDate >= str(BankDate)).\
													order_by(MKT_STANDING_ORDER.Branch.asc(),MKT_STANDING_ORDER.ValueDate.asc())
			TotalRecord 	= StandingObj.count()
			JobStatus 		= []
			if StandingObj.first():
				print 'Standing Order Processing...'
				for item in StandingObj:
					JobStatus 	= mktbjstat.updateCompletedJobStatus('StandingOrder', TotalRecord, JobStatus)
					self.setPostingJournal(item)
					self.updateStandingOrder(item)
				db.session.commit()
			self.setOutMaturity()
		except Exception as e:
			db.session.rollback()
			raise

	def setPostingJournal(self,StandingObj):
		TellerParam = mktparam.getTellerParam()
		Status 		= 'AUTH'
		Inputter 	= 'System'
		Createdon 	= mktdate.getDateTimeNow()
		Authorizer 	= 'System'
		Authorizeon = mktdate.getDateTimeNow()
		BankDate 	= mktdate.getBankDate()
		CurrencyObj = MKT_CURRENCY.query
		try:

			if StandingObj:
				Amortize 	= StandingObj.Amortize
				Branch 		= StandingObj.Branch
				Module 		= 'SO'
				Mode 		= mktteller.getMode(StandingObj.DrAccount, StandingObj.CrAccount)
				Currency 	= StandingObj.Currency
				Reference 	= StandingObj.ID
				UserReference= StandingObj.Reference
				TransactionDate = str(BankDate)
				
				''' For Multi Journals, these are dynamic elements '''
				DrCategory 	= StandingObj.DrCategory
				DrAccount 	= StandingObj.DrAccount
				DrGLKey 	= mktaccounting.getConsolKey(DrCategory, Currency)
				Debit 		= 'Dr'

				CrCategory 	= StandingObj.CrCategory
				CrAccount 	= StandingObj.CrAccount
				CrGLKey 	= mktaccounting.getConsolKey(CrCategory, Currency)
				Credit 		= 'Cr'

				Transaction = StandingObj.Transaction
				Amount 		= self.getBookedAmount(StandingObj)
				AmtBooking 	= Amount[0]
				Note 		= StandingObj.Note

				mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAccount,DrCategory,Currency,CrAccount,CrCategory,Currency,\
											AmtBooking,Module,Transaction,TransactionDate,Reference,Note,Mode,DrGLKey=DrGLKey,CrGLKey=CrGLKey,UserReference=UserReference)
				print "%s - %s was booking successfully with amount %s %s" % (Branch,Reference,Currency,AmtBooking)
				# Booking extra amount
				NextRunDate = StandingObj.NextRunDate
				MaturityDate = StandingObj.MaturityDate
				if NextRunDate == MaturityDate and Amortize == "Y":
					# print "\t\tI'm on MaturityDate %s"%MaturityDate
					AmtRemaining = Amount[1]
					if AmtRemaining < 0:
						# !!! Here posting reverse exceed amount

						# Debit
						DrCategory 	= StandingObj.CrCategory
						DrAccount 	= StandingObj.CrAccount
						DrGLKey 	= mktaccounting.getConsolKey(CrCategory, Currency)

						# Credit
						CrCategory 	= StandingObj.DrCategory
						CrAccount 	= StandingObj.DrAccount
						CrGLKey 	= mktaccounting.getConsolKey(DrCategory, Currency)

						Transaction = TellerParam.RevTransaction
						AmtBooking 	= abs(AmtRemaining)
						Note 		= 'Reverse decimal rounding.'
						# print "\t\t\tI post reverse %s"%AmtBooking
						mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAccount,DrCategory,Currency,CrAccount,CrCategory,Currency,\
											AmtBooking,Module,Transaction,TransactionDate,Reference,Note,Mode,DrGLKey=DrGLKey,CrGLKey=CrGLKey,UserReference=UserReference)
						# print "\t\t\tDone Posting"
					elif AmtRemaining > 0:
						AmtBooking 	= AmtRemaining
						# print "\t\t\tI post add more %s"%AmtBooking
						mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAccount,DrCategory,Currency,CrAccount,CrCategory,Currency,\
											AmtBooking,Module,Transaction,TransactionDate,Reference,Note,Mode,DrGLKey=DrGLKey,CrGLKey=CrGLKey,UserReference=UserReference)
						# print "\t\t\tDone Posting"
		except Exception as e:
			db.session.rollback()
			raise

	def updateStandingOrder(self,StandingObj):
		try:
			CurrencyObj = MKT_CURRENCY.query
			if StandingObj:
				Amount 			= StandingObj.Amount
				NextRunDate 	= StandingObj.NextRunDate
				MaturityDate 	= StandingObj.MaturityDate
				EarnedAmount	= StandingObj.EarnedAmount
				Outstanding 	= StandingObj.OutstandingAmount
				Currency 		= StandingObj.Currency
				Amortize 		= StandingObj.Amortize

				Amount  		= self.getBookedAmount(StandingObj)
				AmtBooking 		= Amount[0]
				AmtRemaining 	= Amount[1]
				NewNextRunDate 	= self.getNextRunDate(StandingObj)

				""" Update Outstanding amount and Earned amount
					* Outstanding Amount 	= Current Outstanding Amount - Amount Booked
					* Earned Amount 		= Current Earned Amount + Amount Booked
				"""
				if Amortize == "Y":
					Outstanding 	-= AmtBooking

				EarnedAmount 	+= AmtBooking

				if NextRunDate == MaturityDate:
					# print "\t\tI update till zero balance"
					if Amortize == "Y":
						if AmtRemaining > 0:
							# print "\t\t\tCase AmtRemaining %s > 0"%AmtRemaining
							Outstanding -= AmtRemaining
							EarnedAmount += AmtRemaining
						elif AmtRemaining < 0:
							# print "\t\t\tCase AmtRemaining %s < 0"%AmtRemaining
							Outstanding += AmtRemaining
							EarnedAmount -= AmtRemaining
					else:
						Outstanding = 0

				# update NextRunDate, LastRunDate, OutstandingAmount, EarnedAmount
				mktdb.updateRecord(	MKT_STANDING_ORDER, [MKT_STANDING_ORDER.ID==StandingObj.ID],
									{'OutstandingAmount':Outstanding,
									 'EarnedAmount': EarnedAmount,
									 'LastRunDate': NextRunDate,
									 'NextRunDate':NewNextRunDate})

		except Exception as e:
			db.session.rollback()
			raise

	def getBookedAmount(self,Standing):
		Outstanding 		= Standing.OutstandingAmount
		BookAmount 			= Standing.BookAmount
		NextRunDate 		= Standing.NextRunDate
		ValueDate 			= Standing.ValueDate
		MaturityDate		= Standing.MaturityDate
		LastRunDate 		= Standing.LastRunDate
		FrequencyType 		= Standing.FrequencyType
		Amortize 			= Standing.Amortize
		AmtBooking 			= 0

		if FrequencyType == "D":
			AmtBooking = Decimal(BookAmount)

		elif FrequencyType == "M":

			""" Amount = 100, 
				ValueDate = 2017-09-01, 
				MaturityDate = 2017-12-31
				=> NumOfDay = "2017-12-31" - "2017-09-01" + 1 = 122
				=> AccPerDay = 100 / 122 = 0.819672131

				Example:
				No		LastRunDate 	NextRunDate 	NumOfDay 	OutAmount 		EarnedAmount
				====|================|===============|============|==============|==============
				1		2017-09-01		2017-09-30		29 + 1		75.40983607		24.59016393
				2		2017-09-30		2017-10-31		30			74.59016393		25.40983607
				3		2017-10-30		2017-11-30		31			75.40983607		24.59016393
				4		2017-11-30		2017-12-31		30			74.59016393		25.40983607

				* First month, must plus one day because it counts on value date and next run date as well
				* After first month, last run date is not counted, it was counted on first month already, no need to plus on day
			"""
			if Amortize == "Y":
				NumOfDays = 0
				if LastRunDate == ValueDate:
					NumOfDays	= int(mktdate.getDateDiff(LastRunDate, NextRunDate)) + 1
				else:
					NumOfDays 	= int(mktdate.getDateDiff(LastRunDate, NextRunDate))
				AmtBooking 		= Decimal(BookAmount) * Decimal(NumOfDays)
			else:
				AmtBooking 		= Decimal(BookAmount)

		AmtRemaining = 0
		if NextRunDate == MaturityDate and Amortize == "Y":
			# print "\t when NextRunDate %s == MaturityDate %s"%(NextRunDate, MaturityDate)
			AmtRemaining = Outstanding - AmtBooking
			# print "\t\tAmtRemaining %s = Outstanding %s - AmtBooking %s"%(AmtRemaining,Outstanding,AmtBooking)

		return AmtBooking, AmtRemaining

	def getNextRunDate(self,Standing):
		FrequencyType 	= Standing.FrequencyType
		Frequency 		= Standing.Frequency if Standing.Frequency else '1'
		MaturityDate 	= Standing.MaturityDate

		BankDate 		= mktdate.getBankDate()
		Frequency 		= self.getStandardFrequency(FrequencyType, Frequency)
		Result 			= mktdate.convertFreqToNextRunDate(str(BankDate), str(Frequency), Next=True)
		NextRunDate 	= Result[0]

		""" Check holiday if NextRunDate is on holiday, it will skip holiday """
		# Holiday 		= mktday.getHoliday()
		# CheckHoliday 	= mktday.isNonWorkingDay(NextRunDate, Holiday)

		# Check if Standing reaches MaturityDate
		if NextRunDate >= MaturityDate:
			NextRunDate = MaturityDate

		return NextRunDate

	def getStandardFrequency(self,FrequencyType, Frequency, ValueDate = ""):
		Freq = ""
		Frequency = Frequency if len(Frequency) > 1 else '0%s'%(Frequency) # Format of Frequency must be 2 digits. eg. 01, 12

		if FrequencyType == 'D':
			Freq = '%s%s'%(Frequency, FrequencyType)
		elif FrequencyType == 'M':
			Freq = '%s%s %s'%(Frequency, FrequencyType, 'END')
		return Freq

	def setOutMaturity(self):
		BankDate = str(mktdate.getBankDate())
		OutMaturity = MKT_STANDING_ORDER.query.filter(MKT_STANDING_ORDER.MaturityDate < BankDate)
		for row in OutMaturity:
			mktaudit.moveAUTHtoHIST(MKT_STANDING_ORDER,MKT_STANDING_ORDER_HIST,row.ID)
			mktaudit.deleteAUTH(MKT_STANDING_ORDER,row.ID)
			print "%s - %s clean standing order out of maturity date." % (row.Branch,row.ID)
		db.session.commit()

# from app.tools.accounting.mktstandingorder import *
# CLS_STANDING_ORDER.setup(ID='015',Description='Standing Order', Frequency='01D', Tool='StandingOrder', Order='8', UpOrDown='Up')