# -*- coding: utf-8 -*-
'''
Created Date: 16 May 2018
Author: Chhit Chanmony

Modified by: 
Modified Date:
All Right Reserved Morakot Technology
Description : 
'''

from app.mktcore.wtfimports import *
from app                    import db
from sys                    import platform
from flask                  import flash,render_template_string, render_template
from os.path                import basename
from wtforms                import validators
from datetime               import datetime, date, timedelta
from sqlalchemy import *
import app.tools.user       as mktuser
import app.tools.mktdate    as mktdate
import app.tools.mktdb 		as mktdb
import re
from decimal import Decimal

from app.Notification.models        import *
from app.Customer.models            import *
from app.RepaymentSchedule.models   import *
from app.LoanContract.models        import *
from app.User.models                import *
from app.tools.mktmail              import *
from app.tools.mktsms               import *
import json
import app.mktcore.autoid           as mktautoid
import app.tools.mktnotification  	as mktnotification

class CLS_PRE_DEFINE_FUNCTION(object):
	#PreDefineObj function
	def getLoanPayment(self,**kwargs):
		"""
		- param:
			-kwargs key:
				- PreDay = type int , is pre payment day before loan collect

		"""
		Result          =   {}
		BankDate        =   mktdate.getBankDate()
		CurrentDate     =   mktdate.getDateISO()
		NumberOfDay     =   kwargs.get("PreDay")
		CollectionDate  =   mktdate.getNextDay(CurrentDate,NumberOfDay=int(NumberOfDay))

		ScheduleObj = db.session.query(MKT_REP_SCHEDULE,
									   MKT_LOAN_CONTRACT
									    ).\
								join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID == MKT_REP_SCHEDULE.LoanID).\
								filter(MKT_REP_SCHEDULE.CollectionDate ==str(CollectionDate))
		Recipients     = []
		RecipientsData = {}
		CommonData     = {}
		# print "len",len(ScheduleObj.all())
		# print "*"*100
		if ScheduleObj:

			for Row in ScheduleObj:
				ContractObj 	= Row[1].__dict__
				RepScheduleObj 	= Row[0].__dict__
				#remove _sa_instance_state obj
				if "_sa_instance_state" in ContractObj.keys():
					del ContractObj['_sa_instance_state']
				if "_sa_instance_state" in RepScheduleObj:
					del RepScheduleObj['_sa_instance_state']

				CusID = ContractObj.get('ContractCustomerID')
				Recipients.append(CusID)
				RecipientsData.update({CusID:{"Contract":ContractObj,
											  "RepSchedule":RepScheduleObj}
										})
				CommonData = {}
		#keep that three key in dictionary 
		Result = {
					"Recipients" :Recipients,
					"RecipientsData":RecipientsData,
					"CommonData":CommonData
				 }

		print Result
		return Result

	#end

	def getRecipients(self,**kwargs):
		Result              = []
		Recipients          = kwargs.get("Recipients",[]) #List of recipients ids can be user or customer

		for rep in Recipients:
			Type      = 1
			Recipient = MKT_CUSTOMER.query.get(rep)
			if not Recipient:
				Type      = 2
				Recipient = MKT_USER.query.get(rep)

			if Recipient:
				if Type == 1: #customer
					Result.append({"RecipientID"     : Recipient.ID,
									"FullnameEn"     : "%s %s"%(Recipient.FirstNameEn,Recipient.LastNameEn),
									"FullnameKh"     : "%s %s"%(Recipient.FirstNameKh,Recipient.LastNameKh),
									"Mobile1"        : Recipient.Mobile1,
									"Mobile2"        : Recipient.Mobile2,
									"Email"          : Recipient.Email})
				else:
					Result.append({"RecipientID"     : Recipient.ID,
									"FullnameEn"     : "%s"%(Recipient.DisplayName),
									"FullnameKh"     : "%s"%(Recipient.DisplayName),
									"Mobile1"        : Recipient.Mobile1,
									"Mobile2"        : Recipient.Mobile2,
									"Email"          : Recipient.Email})
		return Result

	def getAllowRecipients(self,**kwargs):
		Result      = []
		EventID     = kwargs.get("EventID")
		Recipients  = kwargs.get("Recipients") #list of recipents from pre-define function
		EventObj    = MKT_NOTIFICATION_EVENT.query.get(EventID)
		if EventObj:
			Include = EventObj.IncludeRecipient.split("\n")
			Exclude = EventObj.ExcludeRecipient

			IncludeDict = {}
			IncludeList = []
			for rep in Include:
				repSplit = rep.split("*")
				IncludeDict.update({repSplit[0]:repSplit[1].split()})
				IncludeList.extend(repSplit[1].split())

			ExcludeDict = {}
			ExcludeList = []
			if Exclude:
				for rep in Exclude.split("\n"):
					repSplit = rep.split("*")
					ExcludeDict.update({repSplit[0]:repSplit[1].split()})
					ExcludeList.extend(repSplit[1].split())             

			if EventObj.Function and EventObj.Function !="__None": #for execute events that have define function
				if Recipients:
					if "ALL" in ExcludeList:
						Result = []
					else:
						if "ALL" in IncludeList:
							Result = [rep for rep in Recipients if rep not in ExcludeList]   
						else:
							Result = [rep for rep in Recipients if (rep not in ExcludeList and rep in IncludeList)]

			else:#for events that have no define function
				NotifyType = EventObj.NotifyType #E:Email,S:SMS,W:Web
				for key, value in IncludeDict.iteritems():
					TABLE = ""
					if key == "Customer":
						TABLE = MKT_CUSTOMER
					elif key == "User":
						TABLE = MKT_USER
					elif key == "Email":
						pass
					elif key == "SMS":
						pass

					if TABLE:
						TableObj = ""
						TableObj = TABLE.query
						if "ALL" not in value:
							TableObj = TableObj.filter(TABLE.ID.in_(value))
						if key in ExcludeDict:
							if "ALL" not in ExcludeDict.get(key):
								TableObj = TableObj.filter(~TABLE.ID.in_(ExcludeDict.get(key)))
							else:
								TableObj = []
						for row in TableObj:
							if NotifyType == "E":
								Result.append(row.Email)
							elif NotifyType == "S":
								Result.append(row.Mobile1)  

					# SEND_IN_GROUP = "Y"
					# if SEND_IN_GROUP == "Y":
					#   if NotifyType == "E":
					#       Result = MAIL.getGroupMail(Recipients=Result)
					#   elif NotifyType == "S":
					#       pass                                                        
		# print "result",Result
		return Result

	def recordLogs(self,**kwargs):
		try:
			ExecuteID = kwargs.get("ExecuteID")
			DataLogs  = kwargs.get("DataLogs")

			LOGS_PATH = "app/static/NotificationLogs/" 
			FileName  = '%s.json' % ExecuteID

			#Write to file
			with open(LOGS_PATH + FileName,"w+") as file:
				json.dump(DataLogs, file)

		except Exception, e:
			return False, str(e)

	def readLogs(self,**kwargs):
		try:
			ExecuteID = kwargs.get("ExecuteID")

			LOGS_PATH = "app/static/NotificationLogs/"
			FileName  = '%s.json' % ExecuteID

			Result = True,{}
			#Write to file
			with open(LOGS_PATH + FileName,"r") as file:
				Data = json.load(file)
				Result = True,Data

			return Result

		except Exception, e:
			return False, str(e)    

	def getGroupRecipients(self,**kwargs):
		Result = []
		Recipients = kwargs.get("Recipients")
		NotifyType = kwargs.get("NotifyType")
		if NotifyType == "E":
			Result = MAIL.getGroupMail(Recipients=Recipients)
		elif NotifyType == "S":
			Result = Recipients

		return Result       

	def executeNotificationEvent(self,**kwargs):
		NotifyTypeList  = kwargs.get("NotifyTypeList")  # Email or SMS
		EventList       = kwargs.get("EventList")       # List of Event
		ExecuteDict     = kwargs.get("ExecuteDict")     # Execute Infor for manual execute only
		PreDefineOnly   = kwargs.get("PreDefineOnly",False)
		Cron            = kwargs.get("Cron",False)      
		
		EventObj        = MKT_NOTIFICATION_EVENT.query
		if EventList:
			EventObj    = EventObj.filter(MKT_NOTIFICATION_EVENT.ID.in_(EventList))
		if NotifyTypeList:
			EventObj    = EventObj.filter(MKT_NOTIFICATION_EVENT.NotifyType.in_(NotifyTypeList))

		if PreDefineOnly:
			EventObj    = EventObj.filter(or_(MKT_NOTIFICATION_EVENT.Function !="",
											  MKT_NOTIFICATION_EVENT.Function !=None,
											  MKT_NOTIFICATION_EVENT.Function !="__None"))
		Result = True
		for row_event in EventObj:
			EventID      = row_event.ID
			NotifyType   = row_event.NotifyType
			PreDefineObj = MKT_NOTIFICATION_FUNC.query.get(row_event.Function)      
			
			Recipient       = "" #variable for using in msg
			RecipientData   = "" #variable for using in msg
			CommonData      = "" #variable for using in msg
			Recipients      = "" #list of recipents from pre-define function
			ALLOW_RECIEPIENTS= []
			ExecuteID = ExecuteDict.get("ID",{})
			if Cron:#insert new record of Notification Execute for logs
				ExecuteID = mktautoid.getAutoID("FRM_NOTIFICATION_EXEC")
				InsertDict  = { "ID":ExecuteID,
							    "EventID":EventID,
							    "Mode":"1",
							    "ExecStatus":""
							   } #Mode=1 Send,Mode 2 Resend
				mktdb.insertTable(MKT_NOTIFICATION_EXEC,InsertDict)
				db.session.commit()
				print 'ExecuteID1',ExecuteID
			#end cron

			#1. Check logs whether recipents already successful send. 
			#1. For case execute mode is resend
			FailRecord = False #for store wether FailRecord exist
			if ExecuteDict:
				ExecuteID 	= ExecuteDict.get("ID",{})
				Mode 		= ExecuteDict.get("Mode",{})#1:send , 2: resend
				PrevExecID 	= ExecuteDict.get("PrevExecID",{})                   
				PrevExecObj = MKT_NOTIFICATION_EXEC.query.get(PrevExecID)

				if Mode == "2" and PrevExecObj: #resend
					NotiStatus 	= mktnotification.getNotificationLogStatus(PrevExecID)
					FailList 	= NotiStatus.get("Fail")[1]
					FailRecord 	= True
					ALLOW_RECIEPIENTS = FailList

			if PreDefineObj:#Execute with pre-define function
				FunctionName    = PreDefineObj.FunctionName
				Paramenter      = self.spliteStar( PreDefineObj.FuncParam)
				Function        = eval("%s%s%s"%("self.",FunctionName,"(**%s)"%Paramenter))

				for key, value in Function.iteritems():
					exec("%s = %s" % (key,value))
			#Filter only allow reciepants base on config in Events
			if not FailRecord:#in case no fail record system regenerate list allow recipents
				ALLOW_RECIEPIENTS   = self.getAllowRecipients(EventID=row_event.ID,Recipients=Recipients)
			
			#Sending        
			if not PreDefineObj:#case no define function, it can be send in group or individual
				"""
					ALLOW_RECIEPIENTS = [1,2,3,4,5,6,7,8,9,10,11,12]
					SEND_IN_GROUP: Y
						ALLOW_RECIEPIENTS = [[1,2,3,4,5,6,7,8,9,10],[11,12]]
					SEND_IN_GROUP: N
						ALLOW_RECIEPIENTS = [1,2,3,4,5,6,7,8,9,10,11,12]    
				"""
				SEND_IN_GROUP = "Y"
				if SEND_IN_GROUP == "Y":
					ALLOW_RECIEPIENTS = self.getGroupRecipients(Recipients=ALLOW_RECIEPIENTS,NotifyType=NotifyType)

			for rep in ALLOW_RECIEPIENTS:
				Emails = []
				Mobiles = []
				RecipientID = rep
				AppendCommand = "extend" if type(RecipientID) is list else "append"
				if PreDefineObj:
					Recipient       = self.getRecipients(Recipients=[rep])[0]
					RecipientID     = str(Recipient.get("RecipientID"))
					RecipientData   = RecipientsData[RecipientID]   
					CommonData      = CommonData
					Emails          = [Recipient.get("Email")]
					Mobiles         = [Recipient.get("Mobile1")]
				else:
					exec("Emails.%s(RecipientID)" % AppendCommand)
					exec("Mobiles.%s(RecipientID)" % AppendCommand)

				Msg = row_event.Msg
				Msg = render_template_string(Msg,
											Recipient=Recipient,
											RecipientData=RecipientData,
											CommonData=CommonData)              
				SendResult = ""         
				#Email
				if NotifyType == "E":
					# print "send email"
					SendResult = MAIL.sendMail(Subject=row_event.Subject,
											Recipients=Emails,
											Html=Msg)  
					print "Send Email Status",SendResult    
				#SMS
				elif NotifyType == "S":                         
					SendResult = SMS.sendSMS(Body=Msg,To=Mobiles)   
					print "send sms"

				elif NotifyType == "W":
					SendResult = True, {}

				#store sending result
				RecordDict  = {
								"GlobalID":ExecuteID,
								"NotificationStatus":"",
								"Type":NotifyType,
								"To":RecipientID
							   }
				SuccessSend = True
				if SendResult[0]: #success
					RecordDict.update({"NotificationStatus":"1"})
				else:#fail
					RecordDict.update({"NotificationStatus":"2"})
					SuccessSend = True
				
				# Insert record notification log
				mktnotification.insertNotificationLog(**RecordDict)
				
				# update fail send record status
				if Cron:
					if SuccessSend:
						Data = {"ExecStatus":"1"}
					else:
						Data = {"ExecStatus":"2"}
					mktdb.updateRecord(MKT_NOTIFICATION_EXEC,[MKT_NOTIFICATION_EXEC.ID==ExecuteID],
										Data)
				# end update status of Execute event

		return Result

	def spliteStar(self,Value):
		"""

		Valule = "ID*001
				  Name*John
				  Gender*M"
		return {"ID":"001",
				"Name":"John",
				"Gender":"M"}
		** This functin already existed call converStar(). unforturnatly, int this branch not yet have
		"""
		if Value:
			"""split star in app setting for multi value"""
			List = Value.split("\n")
			Dict = {}
			for item in List:
				if item:
					ListKeyValue =item.split("*")
					Dict.update({ListKeyValue[0]:ListKeyValue[1].split("\r")[0]})
			return Dict
		else :
			return None
PRE_DEFINE = CLS_PRE_DEFINE_FUNCTION()