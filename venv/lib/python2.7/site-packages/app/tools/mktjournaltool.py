from .. 							import app, db
from app.Journal.models 			import *
from app.ConsolBalance.models 		import *
from app.Category.models 			import *
from decimal 						import *
from datetime 						import datetime, date, timedelta
from sqlalchemy 					import *
import time


from app.mktcore.constant			import *

import math
import os

def processJournalAndConsoleBalanceBooking():
	
	try:
		current_milli_time = lambda: int(round(time.time() * 1000))
		mStart = current_milli_time()

		ConsolObj = db.session.query(
									MKT_CONSOL_BALANCE.ID.label('ID'),
									MKT_CONSOL_BALANCE.Currency.label('TempCurrency'),
									MKT_CONSOL_BALANCE.Branch.label('TempBranch'),
									MKT_CONSOL_BALANCE.Balance,
									MKT_CONSOL_BALANCE.Currency,
									MKT_CONSOL_BALANCE.Branch,
									MKT_CONSOL_BALANCE.LCYBalance,
									).\
									subquery()

		ConsolObj = db.session.query(
								ConsolObj.c.ID,
								case(
									[(
										ConsolObj.c.Balance == None,
										0
									)],
									else_=ConsolObj.c.Balance
								).label('Balance'),
								case(
									[(
										ConsolObj.c.LCYBalance == None,
										0
									)],
									else_=ConsolObj.c.LCYBalance
								).label('LCYBalance'),
								case(
									[(
										ConsolObj.c.Currency == None,
										None
									)],
									else_=ConsolObj.c.Currency
								).label('Currency'),
								case(
									[(
										ConsolObj.c.Branch == None,
										None
									)],
									else_=ConsolObj.c.Branch
								).label('Branch')
								).\
								distinct(ConsolObj.c.ID,ConsolObj.c.Branch).\
								all()
		i = 1
		for c in ConsolObj:
			NID 	= 'JN2%s' %(str(i).zfill(19))
			CategoryID = str(c.ID).split('.')
			CategoryID = CategoryID[0]
			Journal = 	MKT_JOURNAL_CONSOL_TEMP(
						ID 				= 	NID,
						CategoryID 		= 	CategoryID,
						Amount 			= 	c.Balance,
						LCYAmount 		= 	c.LCYBalance,
						Currency		= 	c.Currency,
						Branch 			= 	c.Branch,
						GL_KEYS 		=	c.ID
					)
			i += 1
			db.session.add(Journal)

		db.session.commit()

		ConsolObj = db.session.query(
									MKT_JOURNAL_TEMP.ID,
									MKT_JOURNAL_TEMP.CategoryID,
									MKT_JOURNAL_TEMP.Currency,
									MKT_JOURNAL_TEMP.Branch,
									MKT_JOURNAL_TEMP.GL_KEYS
									).\
									outerjoin(MKT_JOURNAL_CONSOL_TEMP,MKT_JOURNAL_CONSOL_TEMP.GL_KEYS==MKT_JOURNAL_TEMP.GL_KEYS).\
									filter(MKT_JOURNAL_CONSOL_TEMP.ID==None).\
									all()
		i = 1
		for c in ConsolObj:
			NID 	=  'JN2%s' %(str(i).zfill(19))
			Journal = 	MKT_JOURNAL_CONSOL_TEMP(
						ID 				= 	NID,
						CategoryID 		= 	c.CategoryID,
						Amount 			= 	0,
						LCYAmount 		= 	0,
						Currency		= 	c.Currency,
						Branch 			= 	c.Branch,
						GL_KEYS 		=	c.GL_KEYS
					)
			i += 1
			db.session.add(Journal)

		db.session.commit()

		SqlStr = """update "MKT_JOURNAL_CONSOL_TEMP" set "DebitCredit" = "MKT_CATEGORY"."BalanceType" from "MKT_CATEGORY" where "MKT_CATEGORY"."ID" = "MKT_JOURNAL_CONSOL_TEMP"."CategoryID" ;"""
		db.session.execute(SqlStr)
		db.session.commit()
		print "================== Data has been inserted to table MKT_JOURNAL_CONSOL_TEMP. =================="

		# Calculate PreBalance and LCYPreBalance
		calculatePreBalance()
		print "==================Completed Calculation PreBalance=================="
		# Copy Data from table MKT_JOURNAL_TEMP to MKT_JOURNAL
		copyDataToJournal()
		print "==================Data has been inserted to table  MKT_JOURNAL=================="
		# Update table Console Balance
		updateTblConsoleBalance()
		print "==================Data in table MKT_CONSOL_BALANCE was updated.=================="
		# Insert to table Console Balance
		InsertToConsoleBalance()
		print "==================Data has been inserted to table  MKT_CONSOL_BALANCE=================="

		JourObj = db.session.query(MKT_JOURNAL_TEMP).delete()
		ConJourObj = db.session.query(MKT_JOURNAL_CONSOL_TEMP).delete()
		print "==================Data has been deleted from table  MKT_JOURNAL_TEMP and MKT_JOURNAL_CONSOL_TEMP=================="
		db.session.commit()
		mEnd = current_milli_time()
		print '*'*30
		print 'Total time', (float(mEnd) - float(mStart)) /1000, 'seconds'

	except Exception as e:
		db.session.rollback()
		db.session.close()
		raise 
def calculatePreBalance():
	try:
		SqlStr = """ 
					UPDATE "MKT_JOURNAL_TEMP"
					SET "PrevBalance" = jnt5."AmountDrCr",
					"LCYPrevBalance" = jnt5."LCYAmountDrCr"
					FROM (
						SELECT 
							jnt4."ID",
							jnt4."Branch",
							jnt4."CategoryID",
							jnt4."GL_KEYS",
							jnt4."DebitCredit",
							jnt4."OriginAmount",
							jnt4."Amount",
							jnt4."RowNumber",
							jnt4."LagAmount",
							jnt4."LagAmount2",	
									
							case 
								when jnt4."RowNumber" = 1 then jnt4."Amount"
								when jnt4."RowNumber" = 2 and jnt4."LagAmount" = 0 then 0.000000000
								when jnt4."RowNumber" = 2 and jnt4."LagAmount2" is null then  (sum("Amount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" )) - "Amount"
								when jnt4."RowNumber" = 3 and jnt4."LagAmount2" = 0 then jnt4."LagAmount" 
								when jnt4."RowNumber" = 3 and jnt4."LagAmount2" >0 and jnt4."LagAmount" >0 then  (sum("Amount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" )) - "Amount"
								when jnt4."RowNumber" = 3 and jnt4."LagAmount2" >0 and jnt4."LagAmount" <0 then  (sum("Amount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" )) - "Amount"
								when  jnt4."RowNumber" = 3 and jnt4."LagAmount2" > 0 then (sum("Amount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" )) - "Amount"
								when  jnt4."RowNumber" = 4 and jnt4."LagAmount" > 0 then sum("Amount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" ) - "Amount"
								else 
									(sum("Amount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" )) - "Amount"
							end as "AmountDrCr",
														  
							jnt4."OriginLCYAmount",
							jnt4."LCYAmount",
							jnt4."LagLCYAmount",
							jnt4."LagLCYAmount2",
							
							case 
								when jnt4."RowNumber" = 1 then jnt4."LCYAmount"
								when jnt4."RowNumber" = 2 and jnt4."LagLCYAmount" = 0 then 0.000000000
								when jnt4."RowNumber" = 2 and jnt4."LagLCYAmount2" is null then  (sum("LCYAmount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" )) - "LCYAmount"
								when jnt4."RowNumber" = 3 and jnt4."LagLCYAmount2" = 0 then jnt4."LagLCYAmount" 
								when jnt4."RowNumber" = 3 and jnt4."LagLCYAmount2" >0 and jnt4."LagLCYAmount" >0 then  (sum("LCYAmount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" )) - "LCYAmount"
								when jnt4."RowNumber" = 3 and jnt4."LagLCYAmount2" >0 and jnt4."LagLCYAmount" <0 then  (sum("LCYAmount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" )) - "LCYAmount"
								when  jnt4."RowNumber" = 3 and jnt4."LagLCYAmount2" > 0 then (sum("LCYAmount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" )) - "LCYAmount"
								when  jnt4."RowNumber" = 4 and jnt4."LagLCYAmount" > 0 then sum("LCYAmount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" ) - "LCYAmount"
								else 
									(sum("LCYAmount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" )) - "LCYAmount"
							end as "LCYAmountDrCr"
						FROM (
							SELECT 
								jnt3."ID",
								jnt3."Branch",
								jnt3."CategoryID",
								jnt3."GL_KEYS",
								jnt3."DebitCredit",
								jnt3."OriginAmount",
								jnt3."Amount",
								jnt3."RowNumber",
								jnt3."LagAmount",
								jnt3."OriginLCYAmount",
								jnt3."LCYAmount",
								jnt3."LagLCYAmount",
								Lag(jnt3."LagAmount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" ) as "LagAmount2",
								Lag(jnt3."LagLCYAmount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" ) as "LagLCYAmount2"
							FROM (
								SELECT 
									jnt2."ID",
									jnt2."Branch",
									jnt2."CategoryID",
									jnt2."GL_KEYS",
									jnt2."DebitCredit",
									jnt2."OriginAmount",
									jnt2."Amount",
									jnt2."OriginLCYAmount",
									jnt2."LCYAmount",
									jnt2."RowNumber",
									Lag(jnt2."Amount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" ) as "LagAmount",
									Lag(jnt2."LCYAmount")  OVER (partition BY "GL_KEYS","Branch" ORDER BY "ID" ) as "LagLCYAmount"

								FROM (
									SELECT 
										jnt1."ID",
										jnt1."Branch",
										jnt1."CategoryID",
										jnt1."GL_KEYS",
										jnt1."DebitCredit",
										jnt1."OriginAmount",
										jnt1."Amount",
										jnt1."OriginLCYAmount",
										jnt1."LCYAmount",
										row_number()  OVER (partition BY jnt1."GL_KEYS",jnt1."Branch" ORDER BY jnt1."ID" ) as "RowNumber"
									FROM (
										SELECT 
											jc."ID",
											jc."Branch",
											jc."CategoryID",
											jc."GL_KEYS",
											jc."DebitCredit",
											0 as "OriginAmount",
											jc."Amount",
											0 as "OriginLCYAmount",
											jc."LCYAmount"
										from "MKT_JOURNAL_CONSOL_TEMP" as jc
										union (
										SELECT 
											jn."ID",
											jn."Branch",
											jn."CategoryID",
											jn."GL_KEYS",
											jn."DebitCredit",
											jn."Amount" as "OriginAmount",
											case 
												when jn."DebitCredit" <> ct."BalanceType" then 0 - "Amount"
												else "Amount"
											end as "Amount",
											jn."LCYAmount"  as "OriginLCYAmount",
											case 
												when jn."DebitCredit" <> ct."BalanceType" then 0 - "LCYAmount"
												else jn."LCYAmount"
											end as "LCYAmount"
										FROM "MKT_JOURNAL_TEMP" as jn
										JOIN "MKT_CATEGORY" ct on ct."ID" = jn."CategoryID"
										)
									) as jnt1
								) as jnt2
							) as jnt3
						) as jnt4
					)as jnt5
					WHERE jnt5."ID" = "MKT_JOURNAL_TEMP"."ID" ;						  
				"""
		db.session.execute(SqlStr)
		db.session.commit()
	except Exception as e:
		db.session.rollback()
		raise e

def copyDataToJournal():
	try:
		SqlStr = """

				INSERT INTO "MKT_JOURNAL"
								(
									"Status",
									"Curr",
									"Inputter",
									"Createdon",
									"Authorizer",
									"Authorizeon",
									"ID",
									"Account",
									"Description",
									"CategoryID",
									"CustomerID",
									"DebitCredit",
									"Amount",
									"PrevBalance",
									"Currency",
									"Module",
									"Transaction",
									"TransactionDate",
									"Reference",
									"UserReference",
									"Branch",
									"LCYAmount",
									"LCYPrevBalance",
									"GL_KEYS"
								)
				SELECT 
									"Status",
									"Curr",
									"Inputter",
									"Createdon",
									"Authorizer",
									"Authorizeon",
									"ID",
									"Account",
									"Description",
									"CategoryID",
									"CustomerID",
									"DebitCredit",
									"Amount",
									"PrevBalance",
									"Currency",
									"Module",
									"Transaction",
									"TransactionDate",
									"Reference",
									"UserReference",
									"Branch",
									"LCYAmount",
									"LCYPrevBalance",
									"GL_KEYS"
								
				FROM "MKT_JOURNAL_TEMP"
				ORDER BY "MKT_JOURNAL_TEMP"."ID" ASC ;
				"""
		db.session.execute(SqlStr)
		db.session.commit()
	except Exception as e:
		db.session.rollback()
		raise e

def updateTblConsoleBalance():
	try:

		JnTempObj = db.session.query(
						MKT_JOURNAL_TEMP.Branch.label('Branch'),
						MKT_JOURNAL_TEMP.GL_KEYS.label('GL_KEYS'),
						MKT_JOURNAL_TEMP.DebitCredit.label('DebitCredit'),
						MKT_JOURNAL_TEMP.Currency.label('Currency'),
						func.sum(MKT_JOURNAL_TEMP.Amount).label('Amount'),
						func.sum(MKT_JOURNAL_TEMP.LCYAmount).label('LCYAmount'),
						MKT_CATEGORY.BalanceType.label('BalanceType'),
					).\
					join(MKT_CATEGORY, MKT_CATEGORY.ID == MKT_JOURNAL_TEMP.CategoryID).\
					group_by(MKT_JOURNAL_TEMP.Branch, MKT_JOURNAL_TEMP.GL_KEYS,
						MKT_JOURNAL_TEMP.DebitCredit,MKT_CATEGORY.BalanceType,
						MKT_JOURNAL_TEMP.Currency).\
					all()

		TotalDr = Decimal(0)
		TotalCr = Decimal(0)

		if JnTempObj:
			
			for jnt in JnTempObj:
				ConObj = db.session.query(MKT_CONSOL_BALANCE).\
									filter(MKT_CONSOL_BALANCE.ID == jnt.GL_KEYS).\
									filter(MKT_CONSOL_BALANCE.Branch == jnt.Branch).\
									filter(MKT_CONSOL_BALANCE.Currency == jnt.Currency).\
									with_for_update().first()

				CatID = str(jnt.GL_KEYS).split('.')
				CatID = CatID[0]
				CatObj = MKT_CATEGORY.query.get(CatID)

				TotalAmount = Decimal(0)
				TotalLCYAmount = Decimal(0)

				if jnt.DebitCredit == 'Dr':
					TotalDr += Decimal(jnt.Amount)
				elif jnt.DebitCredit == 'Cr':
					TotalCr += Decimal(jnt.Amount)
				else:
					print 'jnt.Branch',jnt.Branch, 'DebitCredit', jnt.DebitCredit, 'TotalAmount',TotalAmount, 'TotalLCYAmount', TotalLCYAmount
			
				if CatObj.BalanceType != jnt.DebitCredit:
					 TotalAmount -= Decimal(jnt.Amount)
					 TotalLCYAmount -= Decimal(jnt.LCYAmount)
				else:
					 TotalAmount = Decimal(jnt.Amount)
					 TotalLCYAmount = Decimal(jnt.LCYAmount)

				if not ConObj:
					ConObj = MKT_CONSOL_BALANCE(
									ID = jnt.GL_KEYS,
									Branch = jnt.Branch,
									Currency = jnt.Currency,
									PrevMonthBal = 0,
									CurrentPrevMonthBal = 0,
									CurrentMonthBal = TotalAmount,
									PrevYearBal = 0,
									CurrentPrevYearBal = 0,
									YTDBal = TotalAmount,
									Balance = TotalAmount,
									LCYPrevMonthBal = 0,
									LCYCurrentPrevMonthBal = 0,
									LCYCurrentMonthBal = TotalLCYAmount,
									LCYPrevYearBal = 0,
									LCYCurrentPrevYearBal = 0,
									LCYYTDBal = TotalLCYAmount,
									LCYBalance = TotalLCYAmount
								)
				else:

					ConObj.CurrentMonthBal 	= Decimal(ConObj.CurrentMonthBal) + TotalAmount
					ConObj.YTDBal 			= Decimal(ConObj.YTDBal) + TotalAmount
					ConObj.Balance 			= Decimal(ConObj.Balance) + TotalAmount

					ConObj.LCYCurrentMonthBal 	= Decimal(ConObj.LCYCurrentMonthBal) + TotalLCYAmount
					ConObj.LCYYTDBal 			= Decimal(ConObj.LCYYTDBal) + TotalLCYAmount
					ConObj.LCYBalance 			= Decimal(ConObj.LCYBalance) + TotalLCYAmount

				db.session.add(ConObj)
				db.session.commit()
		
	except Exception as e:
		db.session.rollback()
		raise e
		
def InsertToConsoleBalance():
	try:
		SqlStr = """
				INSERT INTO  "MKT_CONSOL_BALANCE" 
								(					
									"ID",
									"Branch" ,
									"Currency" ,
									"PrevMonthBal",
									"CurrentPrevMonthBal",
									"CurrentMonthBal",
									"PrevYearBal" ,
									"CurrentPrevYearBal",
									"YTDBal",
									"Balance",
									"LCYPrevMonthBal" ,
									"LCYCurrentPrevMonthBal",
									"LCYCurrentMonthBal",
									"LCYPrevYearBal" ,
									"LCYCurrentPrevYearBal" ,
									"LCYYTDBal",
									"LCYBalance"	
								)
								SELECT 
									jn2."GL_KEYS",
									jn2."Branch",
									jn2."Currency",
									0 as "PrevMonthBal",
									0 as "CurrentPrevMonthBal",
									jn2."Balance",
									0 as "PrevYearBal",
									0 as "CurrentPrevYearBal",
									jn2."Balance",
									jn2."Balance",
									0 as "LCYPrevMonthBal" ,
									0 as "LCYCurrentPrevMonthBal",
									jn2."LCYBalance",
									0 as "LCYPrevYearBal" ,
									0 as "LCYCurrentPrevYearBal" ,
									jn2."LCYBalance",
									jn2."LCYBalance"
								FROM (	
									SELECT 
										jn1."GL_KEYS",
										jn1."Branch",
										jn1."Currency",
										sum(jn1."Amount") as "Balance",
										sum(jn1."LCYAmount") as "LCYBalance"
									FROM (
										SELECT 
											jn."Branch",
											jn."GL_KEYS",
											jn."DebitCredit",
											jn."Currency",
											case 
												when jn."DebitCredit" <> ct."BalanceType" then 0 - "Amount"
												else "Amount"
											end as "Amount",
											case 
												when jn."DebitCredit" <> ct."BalanceType" then 0 - "LCYAmount"
												else jn."LCYAmount"
											end as "LCYAmount"

										FROM "MKT_JOURNAL_TEMP" as jn
										JOIN "MKT_CATEGORY" ct on ct."ID" = jn."CategoryID"
									) as jn1
									group by jn1."GL_KEYS", jn1."Branch", jn1."Currency"
								) as jn2
								LEFT OUTER JOIN "MKT_CONSOL_BALANCE" cb ON cb."ID" = jn2."GL_KEYS"
								WHERE cb."ID" IS null ;
		"""
		# db.session.execute(SqlStr)
		db.session.commit()
	except Exception as e:
		db.session.rollback()
		raise e
