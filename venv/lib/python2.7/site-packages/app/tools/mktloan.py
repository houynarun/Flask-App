	# -*- coding: utf-8 -*-
from flask 							import flash,request,jsonify
from app.mktcore.imports 			import *
from .. 							import app, db
from sqlalchemy 					import *
from decimal 						import *
from datetime 						import datetime, date, timedelta
import time
import calendar

from app.LoanContract.models 		import *
from app.ScheduleDefine.models 		import *
from app.RepaymentSchedule.models 	import *
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.Account.models 			import MKT_ACCOUNT
from app.AccProduct.models 			import MKT_ACC_PRODUCT
from app.PD.models 					import *
from app.Category.models 			import MKT_CATEGORY
from app.ConsolBalance.models 		import MKT_CONSOL_BALANCE
from app.Tax.models 				import MKT_TAX
from app.LoanAmendment.models 		import *
from app.PD.models 					import *
from app.AssetClass.models			import *
from app.Customer.models 			import MKT_CUSTOMER
from app.Tax.models 				import MKT_TAX
from app.LoanWriteOff.models 		import *
from app.PD.models					import MKT_PAST_DUE, MKT_PD_DATE, MKT_PD_DATE_HIST
from app.tools.mktloanamendment 	import *
from app.ScheduleAddon.models 		import MKT_SCHEDULE_ADDON
from app.Journal.models 		import *
from app.Vendor.Vendor.models		import MKT_VENDOR

import mktsetting 					as mktsetting
import user 						as mktuser
import mktdate	 					as mktdate
import mktaccounting 				as mktaccounting
import mktaccount					as mktaccount
import mktkey 						as mktkey
import mktholiday 					as mktHoliday
import mktpdcollection				as mktpd
import loantools.nonworkingday 		as mktDay
import loantools.rescheduletools 	as mktreschedule
import mktloanamendment 			as mktamt
import mktparam 					as mktparam
import mktaudit 					as mktaudit
import mktmoney 					as mktmoney
import mktautoid 					as mktAutoID
import mktmessage 					as mktmessage
import mktbjstat 					as mktbjstat
import mktcharge 					as mktcharge
import mktcurrencyrevaluate 		as mktcurrencyrevaluate
import numpy 						as np
import mktloanaccrual 				as mktloanaccrual
import app.tools.mktdb 				as mktdb
import app.tools.mktleasing 		as mktleasing

from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
# import mktloan 						as mktloan
from app.BjStat.models 				import MKT_BJ_STAT

from app.mktcore.constant			import *
from app.SavingPlan.models 			import *
from app.RelationIndicators.models	import *
from app.PDParameter.models 		import MKT_PD_PARAM

import app.tools.thread.mktthread	as mktthread

import app.tools.mktjournaltool 	as mktjournaltool
import multiprocessing


try:
	""" 
		Dynamic import * from local project
		Process:
			1. Import from local project first
			2. If no local project, it will import from 
			custom tool in custom app module
	"""
	ExtendModuleObj = mktsetting.ExtendModule()
	LocalPath 		= ExtendModuleObj.getLocalPath()
	CheckFile 		= ExtendModuleObj.isFileInLocal(FileName='tools/mktcustomscript.py')

	if LocalPath and CheckFile:
		ImportFile = "import %s.tools.mktcustomscript as CustomTool" % LocalPath
		# print "ImportFile",ImportFile
		exec(ImportFile)
	else:
		try:
			import app.CustomApp.CustomTools.Loan.PreTermination.views as CustomTool
		except ImportError, e:
			Msg = str(e)
			if not 'No module named CustomTools.Loan.PreTermination.views' in Msg:
				print "Warning import mktcustomscript from CustomApp %s"%e
except Exception as e:
	raise


def loadLoanProduct():
	return MKT_LOAN_PRODUCT.query.filter(MKT_LOAN_PRODUCT.Active=="Y")
def loadRelationIndicators():
	return MKT_RELATION_INDICATORS.query


def getSearchLoanContract(FilterBranch=False):
	ListResult 	= []
	search 		= request.args.get('q')
	action 		= request.args.get('action') if 'action' in request.args else ""
	AllowPutID 	= request.args.get('AllowPutID') if 'AllowPutID' in request.args else ""
	if action == 'view':
		dic = {"id":search, "text": search}
		ListResult.append(dic)
		return jsonify(items = ListResult)
	if not search.isspace():
		search = search.strip()
		if not search is None:
			LoanObj = db.session.query( MKT_LOAN_CONTRACT.ID,
										MKT_CUSTOMER.ID.label('CustomerID'),
										MKT_CUSTOMER.FirstNameEn,
										MKT_CUSTOMER.LastNameEn,
										).\
								outerjoin( MKT_CUSTOMER, MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
								filter( or_(
											MKT_CUSTOMER.ID.like('%'+search.upper()+'%'),
											MKT_LOAN_CONTRACT.ID.like('%'+search.upper()+'%'),
											func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+search.upper()+'%'), 
											func.upper(MKT_CUSTOMER.LastNameEn).like('%'+search.upper()+'%'),
											func.concat(func.upper(MKT_CUSTOMER.LastNameEn),' ',func.upper(MKT_CUSTOMER.FirstNameEn)).like('%'+search.upper()+'%'),
											func.concat(func.upper(MKT_CUSTOMER.FirstNameEn),' ',func.upper(MKT_CUSTOMER.LastNameEn)).like('%'+search.upper()+'%'),
											
											)
									 )
	if FilterBranch:
		CurrentBranch = mktuser.getCurrentBranch()
		LoanObj = LoanObj.filter(MKT_LOAN_CONTRACT.Branch == CurrentBranch)
	if LoanObj.first():
		for row in LoanObj:
			dic = {"id":row.ID, "text":row.ID + " - " + row.LastNameEn + " " + row.FirstNameEn}
			ListResult.append(dic)
			# app.logger.debug(ListResult)
	else:
		if AllowPutID == "Y":
			dic = {"id":search, "text": search}
			ListResult.append(dic)
			
	return jsonify(items = ListResult)

def updateScheduleStatus(LoanID,CollectionDate,RepStatus,PaidAmount=0):
	'''
	Repayment Status has 4 level: 1, 2, 3, 4
	0: Not Yet Due 			(Orange)
	1: Past Due 			(Red)
	2: Partial Paid 		(Orange)
	3: Fully Paid On Time 	(Green)
	4: Fully Paid But Late 	(Blue)

	'''	
	Rep_Schedule = MKT_REP_SCHEDULE.query.\
				   filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
				   filter(MKT_REP_SCHEDULE.CollectionDate == str(CollectionDate)).\
				   first()
	if Rep_Schedule:
		Rep_Schedule.RepStatus 		= RepStatus
		Rep_Schedule.PartPaidAmt 	= float(Rep_Schedule.PartPaidAmt) + float(PaidAmount)
		db.session.add(Rep_Schedule)

def getValueDate(LoanID, HolidayList):
	try:
		
		SystemBankDate 	= mktsetting.getBankDate()
		one_day 		= timedelta(days=1) # one day
		NextSystemDate 	= ""

		Record = MKT_REP_SCHEDULE.query.\
				 order_by(MKT_REP_SCHEDULE.CollectionDate.asc()).\
				 filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
				 filter(MKT_REP_SCHEDULE.CollectionDate.in_(HolidayList)).\
				 all()

		if Record:
			for item in Record:
				
				NextSystemDate = item.CollectionDate
				BankDate 	= str(SystemBankDate)
				BankDate 	= BankDate.split()
				BankDate 	= str(BankDate[0]).replace("-", "")
				CollectDate = str(NextSystemDate).replace("-", "")
				
				if int(CollectDate) == int(BankDate):
					# NextSystemDate = HolidayList[-1]
					NextSystemDate = datetime.strptime(str(NextSystemDate),'%Y-%m-%d').date() + one_day
					NextSystemDate = datetime.strptime(str(NextSystemDate),'%Y-%m-%d')
					NextSystemDate = str(NextSystemDate).split()
					NextSystemDate = NextSystemDate[0]
				
				break

			if not NextSystemDate:
				NextSystemDate = HolidayList[-1]
				NextSystemDate = datetime.strptime(str(NextSystemDate),'%Y-%m-%d').date() + one_day
				NextSystemDate = datetime.strptime(str(NextSystemDate),'%Y-%m-%d')
				NextSystemDate = str(NextSystemDate).split()
				NextSystemDate = NextSystemDate[0]
		# 	print 'CollectDate - BankDate:%s'%(CollectDate,BankDate)
		# print 'getValueDate - NextSystemDate:%s'%NextSystemDate
		return NextSystemDate

	except:
		mktbjstat.makeLogFileOnError('Y')
		raise

def getDateEndOfMonth(AccID, HolidayList):
	try:

		Account = MKT_ACCOUNT.query.\
				  filter(MKT_ACCOUNT.NextAccrDate.in_(HolidayList)).\
				  filter(MKT_ACCOUNT.AccStatus == 'O').\
				  filter(MKT_ACC_PRODUCT.ProductType == 'E').\
				  filter(MKT_ACC_PRODUCT.ID == str(AccID)).\
				  all()

		return Account

	except:
		mktbjstat.makeLogFileOnError('Y')
		raise

def checkHolidayForEndOfMonth(HolidayList, DayEndOfMonth):
	try:

		one_day 		= timedelta(days=1) # one day
		SystemBankDate 	= mktsetting.getBankDate()
		NextSystemDate 	= ""

		for item in HolidayList:

			D 		= 	str(item).split("-")
			Month 	=	D[1]
			Day 	= 	D[2]

			E 		= 	str(DayEndOfMonth).split("-")
			MonthE 	=	E[1]
			DayEnd 	= 	E[2]
			
			if int(Month) == int(MonthE) and int(Day) == int(DayEnd):
				
				NextSystemDate = item
				BankDate 	= str(SystemBankDate)
				BankDate 	= BankDate.split()
				BankDate 	= str(BankDate[0]).replace("-", "")
				AccruedDate = str(NextSystemDate).replace("-", "")
				
				if int(AccruedDate) == int(BankDate):
					# NextSystemDate = HolidayList[-1]
					NextSystemDate = datetime.strptime(str(NextSystemDate),'%Y-%m-%d').date() + one_day
					NextSystemDate = datetime.strptime(str(NextSystemDate),'%Y-%m-%d')
					NextSystemDate = str(NextSystemDate).split()
					NextSystemDate = NextSystemDate[0]

				break

			if not NextSystemDate:

				NextSystemDate = HolidayList[-1]
				NextSystemDate = datetime.strptime(str(NextSystemDate),'%Y-%m-%d').date() + one_day
				NextSystemDate = datetime.strptime(str(NextSystemDate),'%Y-%m-%d')
				NextSystemDate = str(NextSystemDate).split()
				NextSystemDate = NextSystemDate[0]

		return NextSystemDate

	except:
		mktbjstat.makeLogFileOnError('Y')
		raise

def getLoanBalance(LoanContractObj):
	"""
		If repayment schedule mode is flat loan balance equal disbursement.
	"""
	LoanID = LoanContractObj.ID
	LoanBalance = float(LoanContractObj.Amount)

	ScheduleDefineObj = MKT_SCHED_DEFINE.query.get(LoanID)
	if ScheduleDefineObj:
		RepMode = int(ScheduleDefineObj.RepMode)
		if RepMode == 3:
			LoanBalance = float(LoanContractObj.Disbursed)

	return LoanBalance

def toBaseCurrency(Amount=0, Currency=""):
	ReportingRateObj = mktaccounting.getReportingRateObj()
	ExchangeRate 	 = float(ReportingRateObj.get(Currency,0))

	Amount = Amount * ExchangeRate
	return Amount

def getAccrLoanContract(LoanID='', Stat='', ByBranch='', Limit='', OffSet='',SystemBankDate='',AccrIntOption=''):

	try:
		
		if AccrIntOption == '2':
			if LoanID: 
				LC = MKT_LOAN_CONTRACT.query.\
										filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
										filter(MKT_LOAN_CONTRACT.NextRunDate >= str(SystemBankDate)).\
										filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
										filter(MKT_LOAN_CONTRACT.ID ==LoanID).\
										order_by(MKT_LOAN_CONTRACT.ID.asc()).\
										all()
			else:
				
				if Limit:
					LC = MKT_LOAN_CONTRACT.query.\
										 filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
										 filter(MKT_LOAN_CONTRACT.NextRunDate >= str(SystemBankDate)).\
										 filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
										 order_by(MKT_LOAN_CONTRACT.ID.asc()).\
										 limit(Limit).offset(OffSet).\
										 all()
				else:
					LC = MKT_LOAN_CONTRACT.query.\
										 filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
										 filter(MKT_LOAN_CONTRACT.NextRunDate >= str(SystemBankDate)).\
										 filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).count()
			
		else:
			
		
			if LoanID: 
				LC = MKT_LOAN_CONTRACT.query.\
										 filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
										 filter(MKT_LOAN_CONTRACT.NextRunDate >= str(SystemBankDate)).\
										 filter(MKT_LOAN_CONTRACT.MaturityDate >= str(SystemBankDate)).\
										 filter(MKT_LOAN_CONTRACT.ID == LoanID).\
										 order_by(MKT_LOAN_CONTRACT.ID.asc()).\
										 all()
			else:
				
				if Limit:
					LC = MKT_LOAN_CONTRACT.query.\
										 filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
										 filter(MKT_LOAN_CONTRACT.NextRunDate >= str(SystemBankDate)).\
										 filter(MKT_LOAN_CONTRACT.MaturityDate >= str(SystemBankDate)).\
										 order_by(MKT_LOAN_CONTRACT.ID.asc()).\
										 limit(Limit).offset(OffSet).\
										 all()
					
				else:
					LC = MKT_LOAN_CONTRACT.query.\
										 filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
										 filter(MKT_LOAN_CONTRACT.NextRunDate == str(SystemBankDate)).\
										 filter(MKT_LOAN_CONTRACT.MaturityDate >= str(SystemBankDate)).count()
					
		return LC

	except Exception as e:
		raise

def runAccrLoanContractThread():
	try:
		current_milli_time = lambda: int(round(time.time() * 1000))
		mStart  = current_milli_time()
		EOD 	= 1
		SystemBankDate 	= mktdate.getBankDate()
		AccSetting 		= mktsetting.getAccSetting()
		AccrIntOption	= AccSetting.AccrIntOption
		Count 			= getAccrLoanContract(Stat="1",SystemBankDate =SystemBankDate,AccrIntOption=AccrIntOption)
		Param1={'SystemBankDate':SystemBankDate,'AccrIntOption':AccrIntOption}
		Param2={'LC_Count':Count,'AccrIntOption':AccrIntOption,'EOD':EOD}
		Result 			= mktthread.runMultiprocessing(getAccrLoanContract,setAccrLoanContract, Count,Param1=Param1,Param2=Param2)

		# ListKeyBooking 	= Result.get('ListKeyBooking',[])
		# ListKeyID 		= Result.get('ListKeyID',[])
		# DicEquivalent 	= Result.get('DicEquivalent',{})
		ListKeyBooking = {}
		ListKeyID = {}
		DicEquivalent = {}
		SystemBankDate = str(SystemBankDate)
	
		AIROBJ =  db.session.query(
								MKT_AIR_KEY.CombineKey,
								func.sum(MKT_AIR_KEY.CombineValue).label("CombineValue")
								).\
								filter(MKT_AIR_KEY.CombineKey!=None).\
								group_by(MKT_AIR_KEY.CombineKey).all()

		if AIROBJ:
			for air in AIROBJ:
				if air.CombineKey and air.CombineValue:
					ListKeyBooking.update({air.CombineKey:air.CombineValue})
		
		AIROBJ =  db.session.query(
								MKT_AIR_KEY.GL_ReceivableKey,
								MKT_AIR_KEY.GL_ReceivableValue
								).\
								filter(MKT_AIR_KEY.GL_ReceivableKey!=None).\
								all()

		if AIROBJ:
			for air in AIROBJ:
				if air.GL_ReceivableKey and air.GL_ReceivableValue:
					ListKeyID.update({air.GL_ReceivableKey:air.GL_ReceivableValue})
		
		AIROBJ =  db.session.query(
								MKT_AIR_KEY.DicEquivalentKey,
								MKT_AIR_KEY.DicEquivalentValue
								).\
								filter(MKT_AIR_KEY.DicEquivalentKey!=None).\
								all()
		if AIROBJ:
			for air in AIROBJ:
				if air.DicEquivalentKey and air.DicEquivalentValue:
					DicEquivalent.update({air.DicEquivalentKey:air.DicEquivalentValue})
		
		setDailyAccrueBooking(ListKeyBooking=ListKeyBooking,ListKeyID=ListKeyID,DicEquivalent=DicEquivalent,EOD=EOD)
		AIROBJ =  db.session.query(MKT_AIR_KEY).delete()
		# Process Journal and Console Balance
		mktjournaltool.processJournalAndConsoleBalanceBooking()
		mEnd = current_milli_time()
		print '*'*30
		print 'Total time', (float(mEnd) - float(mStart)) /1000, 'seconds'

	except Exception as e:
		db.session.rollback()
		raise 
	

def setAccrLoanContract(LoanID="",Stat="", Date="", ByBranch="",LC_Count="",**kwargs): # This to update daily accrued interest for loan contract
	try:

		# SharedDict	=	kwargs.get('SharedDict',{})
		# Locker 		=	kwargs.get('Locker',None)

		Start = time.time()
		TrueOrFalse 	= "1"
		EOD 			= 1
	
		# SystemBankDate 	= mktsetting.getBankDate()
		if Date:
			SystemBankDate 	= Date
		else:
			SystemBankDate 	= mktdate.getBankDate()

		#Check config getAccSetting
		AccSetting = mktsetting.getAccSetting()
		if not AccSetting:
			# Call method for error message
			error_msg = "Please mktsetting up accounting mktsetting."
			TrueOrFalse = mktmessage.msgError(EOD, error_msg)

		#Check BankDateObj
		BankDateObj = mktsetting.getBankDateObj()
		if not BankDateObj:
			error_msg = "Count not get bank date."
			TrueOrFalse = mktmessage.msgError(EOD, error_msg)

		#Check PD Param config
		PDParamObj = mktparam.getPDParam()
		if not PDParamObj:
			error_msg = "Please configuration PD Parameter in setting."
			TrueOrFalse = mktmessage.msgError(EOD, error_msg)

		DateTimeNow 	= mktdate.getDateTimeNow()
		Holiday 		= mktHoliday.getHoliday()
		DayEndOfMonth 	= BankDateObj.NextMonthEnd
		NextSystemDate 	= BankDateObj.NextSystemDate
		WeekEndDate 	= BankDateObj.NextWeekend
		NextMonthEnd 	= BankDateObj.NextMonthEnd
		NextYearEnd 	= BankDateObj.NextYearEnd
		BookOption 		= AccSetting.AccrIntBooking
		AccrIntOption	= AccSetting.AccrIntOption
		ListKeyBooking 	=	{}
		ListKeyID 		=	{'AutoID':0}
		DicEquivalent 	= 	{}
		DailyBooking 	= 	False
		DailyTran 		=	""
		TranDate 		= 	SystemBankDate
		NAB 			= PDParamObj.NAB if PDParamObj.NAB else 0
		SuspPLNAB 		= PDParamObj.SuspPLNAB
		LC 				= ""
		CollectionOnHoliday = []
		EndOfMonthInHoliday = False # Default False mean that End Of Month not in holiday
		ReportingRateObj 	= mktaccounting.getReportingRateObj()
		BaseCurrency 		= AccSetting.BaseCurrency

		# print "DayEndOfMonth",DayEndOfMonth
		if not SystemBankDate:
			# Call method for error message
			error_msg 	= "Bank System date not found."
			mktmessage.setLogError( error_msg)
		else:
			# Check for count loan contract for accr today
			if LC_Count == "":
				LC_Count = getAccrLoanContract(LoanID='', Stat="1", ByBranch=ByBranch,SystemBankDate=SystemBankDate,AccrIntOption=AccrIntOption)
			if Stat == "1":
				return LC_Count

			LC = getAccrLoanContract(LoanID=LoanID, ByBranch=ByBranch,SystemBankDate=SystemBankDate,AccrIntOption=AccrIntOption)

			# Check if no record set progress bar done.
			mktbjstat.calCompletedPer('AL', 0, 1, 0)

			if LC:
				# Get GL Key from setting
				Settingk1			= AccSetting.GL_KEY1
				Settingk2 			= AccSetting.GL_KEY2
				Settingk3 			= AccSetting.GL_KEY3
				Settingk4 			= AccSetting.GL_KEY4
				Settingk5 			= AccSetting.GL_KEY5
				Settingk6 			= AccSetting.GL_KEY6
				Settingk7 			= AccSetting.GL_KEY7
				Settingk8 			= AccSetting.GL_KEY8
				Settingk9 			= AccSetting.GL_KEY9
				# Count For EOD GUI
				RecordNumber 		=	0
				NumberOfCompleted 	= 	0
				NumOfCompletedPerc 	=	0
				NumOfTransaction 	=	mktbjstat.setNumOfTransaction(LC_Count)


				AmortizationBase 	=	mktsetting.getAppSetting('AmortizationBase')
				if not AmortizationBase :  # Default Base on Charge Collection Date
					AmortizationBase = 'C'


				LoanDailyAccrLog = "Y" # Default Allow Log Accr Int

				EnableAccrCharge = mktcharge.getAccrChargeDaily()


				ProductObj 	= MKT_LOAN_PRODUCT.query
				JobStatus 	= []
				for row in LC:
					JobStatus 		=	mktbjstat.updateCompletedJobStatus('AccrualLoan', LC_Count, JobStatus)

					ID 					= 	row.ID
					CustomerID 			= 	row.ContractCustomerID
					Suspend 			= 	row.Suspend
					
					# Overwrite GL Key from Setting 
					k1 = mktkey.getResultKey(Settingk1, ID, CustomerID) if Settingk1 else ''
					k2 = mktkey.getResultKey(Settingk2, ID, CustomerID) if Settingk2 else ''
					k3 = mktkey.getResultKey(Settingk3, ID, CustomerID) if Settingk3 else ''
					k4 = mktkey.getResultKey(Settingk4, ID, CustomerID) if Settingk4 else ''
					k5 = mktkey.getResultKey(Settingk5, ID, CustomerID) if Settingk5 else ''
					k6 = mktkey.getResultKey(Settingk6, ID, CustomerID) if Settingk6 else ''
					k7 = mktkey.getResultKey(Settingk7, ID, CustomerID) if Settingk7 else ''
					k8 = mktkey.getResultKey(Settingk8, ID, CustomerID) if Settingk8 else ''
					k9 = mktkey.getResultKey(Settingk9, ID, CustomerID) if Settingk9 else ''

					Contract 			= 	MKT_LOAN_CONTRACT.query.get(ID)
					ProductID 			= 	Contract.LoanProduct
					Product 			= 	ProductObj.get(ProductID)
					AssClass 			= 	row.AssetClass
					InterestDayBasis 	= 	int(Product.IntDayBasis)
					Branch 				= 	row.Branch
					Account 			= 	row.Account
					Currency 			= 	row.Currency
					ValueDate 			=	row.ValueDate
					LoanBalance 		= 	getLoanBalance(row) 
					LoanOutstanding		= 	float(row.OutstandingAmount) 
					RatePerYear 		= 	float(Contract.IRR) if Contract.IRR else float(Contract.InterestRate)

					# print "EOD-RatePerYear:%s"%RatePerYear

					# Get Interest Per Day
					# Option 1 accrued base on loan balance
					# Option 2 accrued base on loan outstanding
					BaseAmount 	= LoanBalance
					InterestPerDay 	= 	mktreschedule.getInterestPerDay(RatePerYear, LoanBalance, InterestDayBasis, SystemBankDate)
					AccrPerDayOfCurrentInt = InterestPerDay 
					
					if AccrIntOption == '2':
						BaseAmount 	= LoanOutstanding
						InterestPerDay 	= 	mktreschedule.getInterestPerDay(RatePerYear, LoanOutstanding, InterestDayBasis, SystemBankDate)
					
					

					# Get Number Of Day 
					NumberOfDay 	= 	1 
					print "InterestPerDay=",InterestPerDay
					# Block Calculator TotalAccrInterest
					TotalAccrInterest 			= 	InterestPerDay 
					
					# Calculate Interest Income Earned to local currency using for accr daily
					TotalLCYAccrInterest 		= 	float(TotalAccrInterest) * float(ReportingRateObj.get(Currency))

					Contract.AccrCurrentInt 	= 	(float(Contract.AccrCurrentInt) if Contract.AccrCurrentInt else float(0)) + float(AccrPerDayOfCurrentInt)
					Contract.AccrIntCurrMonth 	= 	(float(Contract.AccrIntCurrMonth) if Contract.AccrIntCurrMonth else float(0)) + float(AccrPerDayOfCurrentInt)
					Contract.AccrIntPerDay 		= 	InterestPerDay
					Contract.NextRunDate 		= 	NextSystemDate

					# Update accrual interest in LC
					db.session.add(Contract)
					# Call Charge Accr
					if EnableAccrCharge == "Y":
						mktcharge.setAccrChargeDaily(Branch=Branch, LoanID=ID, Currency=Currency, Suspend=Suspend,
													LoanBalance=LoanBalance, TransactionDate=TranDate,EOD=EOD)
						
					D 		= str(SystemBankDate).split("-")
					Day 	= D[2]
					E 		= str(DayEndOfMonth).split("-")
					DayEnd 	= E[2]

					if BookOption == '1':
						if Product:

							InterestReceivable = float(Contract.AccrIntCurrMonth) if Contract.AccrIntCurrMonth else float(0)

							DailyTran 		= AccSetting.DrAccrIntTran
							RCategory 		= Product.IntReceivableCate.strip()
							GL_Receivable 	= mktaccounting.getConsolKey(RCategory, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)

							#Get Category Int.Income or Interest In Suspend
							Category,GL_KEYS,IntCurrency,IntIncome = getCategoryIntIncome(ReportingRateObj,PDParamObj,Product,AccSetting,
																				Branch,Suspend,Currency,TotalAccrInterest,AssClass,
																				k1, k2, k3, k4, k5, k6, k7, k8, k9)


							# print "****** Accr Int"
							# print Category,GL_KEYS,IntCurrency,IntIncome
							# print ""
							# if GL_Receivable not in ListKeyID:
							# 	AutoID = ListKeyID.get('AutoID',0)+1

							# 	GL_ReceivableValue = 'AIR%s%s'%(str(TranDate).replace("-",""), AutoID)

							# 	ListKeyID.update({GL_Receivable:GL_ReceivableValue, 'AutoID':AutoID})
							
							AutoID = 1
							GL_ReceivableValue 	= 'AIR%s%s'%(str(TranDate).replace("-",""), AutoID)
							
							ListKeyIDObj = MKT_AIR_KEY(GL_ReceivableKey = GL_Receivable, GL_ReceivableValue=GL_ReceivableValue, AutoID=AutoID, 
															TransactionDate = str(TranDate))

							db.session.add(ListKeyIDObj)
							# session2.commit()
							
							# AIRRef = ListKeyID.get(GL_Receivable,'')
							AIRRef = GL_ReceivableValue
							mktloanaccrual.setLoanAccrualPosting(RCategory, GL_Receivable, Currency, TotalAccrInterest, Category, GL_KEYS, IntCurrency, IntIncome, 
											DailyTran, TranDate, ID, DateTimeNow, Branch, RatePerYear, BaseAmount, AIRRef,EOD=EOD)

							# GL_KEYS : define for Interest income Category
							# GL_Receivable : define for Interest Receivable Category

							# CombineKey 	= "%s-%s-%s" %( GL_KEYS,GL_Receivable,Branch)
							# BookingAmt 	=	float(TotalAccrInterest) + float(ListKeyBooking.get(CombineKey,0)) # ListKeyBooking.get(CombineKey,0)mean that if dic couldnot find key default value is zero
							# ListKeyBooking.update({CombineKey:BookingAmt}
							# 	)
							
							CombineKey 	= "%s-%s-%s" %( GL_KEYS,GL_Receivable,Branch)
							
							ListKeyIDObj = MKT_AIR_KEY(CombineKey = CombineKey, CombineValue=TotalAccrInterest,TransactionDate = str(TranDate))

							db.session.add(ListKeyIDObj)
							# session3.commit()
							
							DailyBooking = True

							UpdateLCEndMonth 					= 	MKT_LOAN_CONTRACT.query.get(ID)
							UpdateLCEndMonth.AccrInterest 		=	(float(UpdateLCEndMonth.AccrInterest) if UpdateLCEndMonth.AccrInterest else float(0)) + float(TotalAccrInterest)
							

							if Suspend.upper() == 'N':
								UpdateLCEndMonth.IntIncEarned 		=	(float(UpdateLCEndMonth.IntIncEarned) if UpdateLCEndMonth.IntIncEarned else float(0)) + float(TotalLCYAccrInterest)
								
								if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
									UpdateLCEndMonth.FCYIntIncEarned 	=	(float(UpdateLCEndMonth.FCYIntIncEarned) if UpdateLCEndMonth.FCYIntIncEarned else float(0)) + float(TotalAccrInterest)
							
							# Update after daily booked AIR, II
							db.session.add(UpdateLCEndMonth)
							TrueOrFalse = True

							output_msg = "%s accrual interest has been updated successfully." %ID
							mktmessage.msgOutputMsg(output_msg)
						else:
							# Call method for error message
							error_msg = "Interest income category not found."
							TrueOrFalse = mktmessage.msgError(EOD, error_msg)

					else:
						DailyBooking = False
						# Check if it is end of month, 
						# if so, Recognise Interest Income and book Accrued Interest
						if int(Day) == int(DayEnd):

							InterestReceivable = float(Contract.AccrIntCurrMonth) if Contract.AccrIntCurrMonth else float(0)
							
							# Calculate Interest Income Earned to local currency using for accr monthly 
							LCYInterestReceivable = InterestReceivable * float(ReportingRateObj.get(Currency))

							if InterestReceivable > 0:

								if Product:

									Category 	= Product.IntReceivableCate.strip()
									GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
									Transaction = AccSetting.DrAccrIntTran
									Mode 		= "Direct"
									DrCr 		= "Dr"

									if Transaction:
										# Debit Accrued Interest Receivable Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											Account,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(InterestReceivable), 	# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode, 					# Mode check to insert Journal for category
											EOD=EOD
										)

										
										"""
											Apply Multi Currency
										"""

										#Get Category Int.Income or Interest In Suspend
										Category,GL_KEYS,IntCurrency,IntIncome = getCategoryIntIncome(ReportingRateObj,PDParamObj,Product,AccSetting,
																						Branch,Suspend,Currency,InterestReceivable,AssClass,
																						k1, k2, k3, k4, k5, k6, k7, k8, k9)
										
										# Sum for Booking Equivalent
										# DicEquivalent = getInterestMultiCurrency(AccSetting,ReportingRateObj,
										# 								Branch,Currency,InterestReceivable,DicEquivalent)[0]

										# with Locker:

										# 	DicEq 	= SharedDict.get('DicEquivalent',{})
										# 	DicEq.update(DicEquivalent)

										# 	SharedDict.update({
										# 					'DicEquivalent':DicEq,
										# 				})
									
										ListKeyIDObj = MKT_AIR_KEY(DicEquivalentKey=DicEquivalent, DicEquivalentValue=DicEquivalent,TransactionDate = str(TranDate))

										db.session.add(ListKeyIDObj)
										# session4.commit()

										Mode 		= "Direct"
										DrCr 		= "Cr"

										# Credit Interest Income Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											Account,				# Account
											Category,				# Category
											IntCurrency,			# Currency
											DrCr,					# DrCr
											Decimal(IntIncome), 	# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode, 					# Mode check to insert Journal for category
											EOD=EOD

										)

									else:
										# Call method for error message
										error_msg = "Accrued interest booking or reversal transaction not found."
										TrueOrFalse = mktmessage.msgError(EOD, error_msg)

								else:
									# Call method for error message
									error_msg = "Interest income category not found."
									TrueOrFalse = mktmessage.msgError(EOD, error_msg)

							UpdateLCEndMonth 					= 	MKT_LOAN_CONTRACT.query.get(ID)
							UpdateLCEndMonth.AccrInterest 		=	(float(UpdateLCEndMonth.AccrInterest) if UpdateLCEndMonth.AccrInterest else float(0)) + float(InterestReceivable)
							if Suspend.upper() == 'N':
								UpdateLCEndMonth.IntIncEarned 	=	(float(UpdateLCEndMonth.IntIncEarned) if UpdateLCEndMonth.IntIncEarned else float(0)) + float(LCYInterestReceivable)
							
							# Update after month-end booked AIR, II
							db.session.add(UpdateLCEndMonth)
							TrueOrFalse = True

						error_msg = "%s accrual interest has been updated successfully." %ID
						mktmessage.msgOutputMsg(error_msg)
						# print "%s accrual interest has been updated successfully." %ID
						print os.getpid(),ID

					# Block Booking to table Daily Booking
					
					Customer 	= Contract.ContractCustomerID
					Reference 	= ID
					BookedAmount= TotalAccrInterest
					Module 		= "LC"
					Transaction = AccSetting.DrAccrIntTran
					
					ObjBooking 	= mktloanaccrual.setDailyBooking(	LoanDailyAccrLog=	LoanDailyAccrLog, 		
													Branch 			=	Branch,
													Customer 		=	Customer,
													Reference 		=	Reference,
													BaseAmount 		=	BaseAmount,
													Rate 			= 	RatePerYear,
													NumDay 			= 	NumberOfDay, 
													Currency 		= 	Currency,
													BookedAmount 	=	BookedAmount,
													Module 			= 	Module,
													Transaction 	=	Transaction,
													TransactionDate = 	TranDate)
					# End Block

					# Check if month-end and update Accr Current Month and Accr Previous Month
					if int(Day) == int(DayEnd):
						# print '== Run in month-end =='
						#update charge month end
						if AmortizationBase == 'E' :
							Installment = False 
							if Contract.MaturityDate[0:7] == DayEndOfMonth[0:7] :
								Installment = True 
							
							
							ChargeAmortization = mktcharge.bookingChargeAmortization(ID,Currency,Branch,Installment,LoanContractObj=Contract,IsMonthEnd=True,EOD=EOD)
							if ChargeAmortization[0] == False:
								error_msg 	= "%s." %ChargeAmortization[1]
								mktmessage.setLogError(error_msg)
								
						MonthEndUpdate 						= 	MKT_LOAN_CONTRACT.query.get(ID)
						MonthEndUpdate.AccrIntPreMonth 		= 	MonthEndUpdate.AccrIntCurrMonth
						MonthEndUpdate.AccrIntCurrMonth 	= 	0
						# Update LC month-end
						

						db.session.add(MonthEndUpdate)
											
			else:
				error_msg = "No accrual interest record for update."
				mktmessage.msgOutputMsg(error_msg)
				# print "No accrual interest record for update."
		
		# Clear query object
		
		db.session.commit()
		del LC
		if int(EOD) == 1:
			return ""
		else:
			return TrueOrFalse
		
	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		db.session.close_all()
		raise
	

def setDailyAccrueBooking(ListKeyBooking="",ListKeyID={},DicEquivalent={},EOD=0):
	''
	DateTimeNow 	= mktdate.getDateTimeNow()
	AccSetting 		= mktsetting.getAccSetting()
	DailyTran 		= AccSetting.DrAccrIntTran
	SystemBankDate 	= mktdate.getBankDate()
	TranDate 		= 	SystemBankDate
	BaseCurrency 	= AccSetting.BaseCurrency
	BookOption 		= AccSetting.AccrIntBooking
	ReportingRateObj= mktaccounting.getReportingRateObj()
	
	try:
		if BookOption == '1':
			for item in ListKeyBooking:
				# print "Key: %s - Amount: %s." %(item, ListKeyBooking[item])
				# print ""
				Amount 		=	ListKeyBooking[item]
				StrKey 		=	item.split("-")

				DrKey 			=	StrKey[1]
				DrCat 			=	DrKey.split(".")[0]
				DrCurrency 		=	DrKey.split(".")[1]
				# print "DrKey",DrKey,"DrCurrency",DrCurrency

				CrKey 			=	StrKey[0]
				CrCat 			=	CrKey.split(".")[0]
				CrCurrency 		=	CrKey.split(".")[1]
				# print "CrKey",CrKey,'CrCurrency',CrCurrency

				Branch 		=	StrKey[2]
				Ref 		= 	ListKeyID.get(DrKey,'')
				
				# print "Dr: %s - Cat: %s - Currency: %s." %(DrKey, DrCat, Currency)
				# print "Cr: %s - Cat: %s - Currency: %s." %(CrKey, CrCat, Currency)
				# print "Amount: %s." %(Amount)
				# print "Branch: %s." %(Branch)
				# print ""

				Transaction = DailyTran

				# Debit Accrued Interest Receivable Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					DrCat,					# Category
					DrCurrency,				# Currency
					"Dr",					# DrCr
					Decimal(Amount), 		# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					Ref, 					# Reference
					"", 					# Note
					"", 					# JNID
					Branch,					# Branch
					DrKey,					# GL_KEYS
					"Direct", 				# Mode check to insert Journal for category
					EOD=EOD
				)

				"""
					Notes by Sovankiry Rim. Date: 13 Oct 2016
						Apply Multi Currency

					If loan accrued in different base Currency we need to booking int.income with base Currency
					and in class standard loan
				"""

				# if DrCurrency != BaseCurrency and DrCurrency != CrCurrency :

				# 	DicEquivalent, IntCurrency, IntIncome = getInterestMultiCurrency(AccSetting,ReportingRateObj,Branch,DrCurrency,Amount,DicEquivalent)
				# else:
				IntCurrency = DrCurrency
				IntIncome 	= Amount
					
				# print 'DicEquivalent'
				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					CrCat,					# Category
					IntCurrency,			# Currency
					"Cr",					# DrCr
					Decimal(IntIncome), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					Ref, 					# Reference
					"", 					# Note
					"", 					# JNID
					Branch,					# Branch
					CrKey,					# GL_KEYS
					"Direct" , 				# Mode check to insert Journal for category
					EOD=EOD
				)

				msg = "Daily accrued interest is successfully booked. %s - Key: %s - Amount: %s." %(Branch, DrKey, mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(IntCurrency)))
				mktmessage.msgOutputMsg(msg)
			db.session.commit()
		else:
			DicEquivalent = DicEquivalent

		if DicEquivalent:
				for row in DicEquivalent:
					Branch 			= 	row.split()[0]
					Currency 		= 	row.split()[1]
					Amount 			=	DicEquivalent.get(row)
					LCYAmount 	  	= 	float(Amount) * float(ReportingRateObj.get(Currency))
					DrCr 			= 	"Dr"
					Transaction 	= 	AccSetting.DrAccrIntTran
					Reference 		=	str(TranDate).replace("-", "")
					Reference 		= 	"IIP%s" %Reference
					AllowEquivalent =  	True

					mktaccounting.isEquivalentPosting("AUTH",
										"0",
										"System",
										DateTimeNow,
										"System",
										DateTimeNow,
										Branch,
										"",
										DrCr,
										Currency,
										Amount,
										LCYAmount,
										"LC",
										Transaction,
										TranDate,
										Reference,
										"",
										"",
										AllowEquivalent,
										EOD=EOD)
		# Check if no record set progress bar done for Loan Write-off.
		mktbjstat.calCompletedPer('AL', 0, 1, 0)

	except Exception as e:
		db.session.close_all()
		raise
		
def getForAccrAccount(AccID='',Stat='', Limit='', OffSet='',Date=''):
	try:
		if Date:
			SystemBankDate 	= Date
		else:
			SystemBankDate 	= mktdate.getBankDate()
		if AccID:
			Account 	= 	db.session.query(MKT_ACCOUNT.ID,
											MKT_ACCOUNT.AccrIntBooked,
											MKT_ACCOUNT.NextAccrDate,
											MKT_ACCOUNT.Balance,
											MKT_ACCOUNT.AvailableBal,
											MKT_ACCOUNT.Currency,
											MKT_ACCOUNT.Branch,
											MKT_ACCOUNT.CustomerList,
											MKT_ACCOUNT.InterestRate,
											MKT_ACCOUNT.AccrCurMonth,
											MKT_ACCOUNT.AccrCurCapital,
											MKT_ACCOUNT.AccCategory,
											MKT_ACC_PRODUCT.IntDayBasis,
											MKT_ACC_PRODUCT.Tax,
											MKT_ACC_PRODUCT.IntAccrBasis,
											MKT_ACC_PRODUCT.IntCapitalization,
											MKT_ACC_PRODUCT.IntExpenseCat,
											MKT_ACC_PRODUCT.AccrMode,
											MKT_ACC_PRODUCT.IntPayableCat).\
											join(MKT_ACC_PRODUCT, MKT_ACC_PRODUCT.ID == MKT_ACCOUNT.AccProduct).\
											filter(MKT_ACCOUNT.NextAccrDate == str(SystemBankDate)).\
											filter(MKT_ACCOUNT.AccStatus == 'O').\
											filter(MKT_ACC_PRODUCT.ProductType == 'E').\
											filter(MKT_ACCOUNT.InterestRate != "0").\
											filter(MKT_ACCOUNT.Dormant == "N").\
											filter(MKT_ACCOUNT.ClosingDate == "").\
											filter(MKT_ACCOUNT.Blocked == "N").\
											filter(MKT_ACCOUNT.ID==AccID)
		else:
			if Limit:
			
				Account 	= 	db.session.query(MKT_ACCOUNT.ID,
											MKT_ACCOUNT.AccrIntBooked,
											MKT_ACCOUNT.NextAccrDate,
											MKT_ACCOUNT.Balance,
											MKT_ACCOUNT.AvailableBal,
											MKT_ACCOUNT.Currency,
											MKT_ACCOUNT.Branch,
											MKT_ACCOUNT.CustomerList,
											MKT_ACCOUNT.InterestRate,
											MKT_ACCOUNT.AccrCurMonth,
											MKT_ACCOUNT.AccrCurCapital,
											MKT_ACCOUNT.AccCategory,
											MKT_ACC_PRODUCT.IntDayBasis,
											MKT_ACC_PRODUCT.Tax,
											MKT_ACC_PRODUCT.IntAccrBasis,
											MKT_ACC_PRODUCT.IntCapitalization,
											MKT_ACC_PRODUCT.IntExpenseCat,
											MKT_ACC_PRODUCT.AccrMode,
											MKT_ACC_PRODUCT.IntPayableCat).\
											join(MKT_ACC_PRODUCT, MKT_ACC_PRODUCT.ID == MKT_ACCOUNT.AccProduct).\
											filter(MKT_ACCOUNT.NextAccrDate == str(SystemBankDate)).\
											filter(MKT_ACCOUNT.AccStatus == 'O').\
											filter(MKT_ACC_PRODUCT.ProductType == 'E').\
											filter(MKT_ACCOUNT.InterestRate != "0").\
											filter(MKT_ACCOUNT.Dormant == "N").\
											filter(MKT_ACCOUNT.ClosingDate == "").\
											filter(MKT_ACCOUNT.Blocked == "N").\
											limit(Limit).offset(OffSet).all()
			else:
			
				Account 	= 	db.session.query(MKT_ACCOUNT.ID,
										MKT_ACCOUNT.AccrIntBooked,
										MKT_ACCOUNT.NextAccrDate,
										MKT_ACCOUNT.Balance,
										MKT_ACCOUNT.AvailableBal,
										MKT_ACCOUNT.Currency,
										MKT_ACCOUNT.Branch,
										MKT_ACCOUNT.CustomerList,
										MKT_ACCOUNT.InterestRate,
										MKT_ACCOUNT.AccrCurMonth,
										MKT_ACCOUNT.AccrCurCapital,
										MKT_ACCOUNT.AccCategory,
										MKT_ACC_PRODUCT.IntDayBasis,
										MKT_ACC_PRODUCT.Tax,
										MKT_ACC_PRODUCT.IntAccrBasis,
										MKT_ACC_PRODUCT.IntCapitalization,
										MKT_ACC_PRODUCT.IntExpenseCat,
										MKT_ACC_PRODUCT.AccrMode,
										MKT_ACC_PRODUCT.IntPayableCat).\
										join(MKT_ACC_PRODUCT, MKT_ACC_PRODUCT.ID == MKT_ACCOUNT.AccProduct).\
										filter(MKT_ACCOUNT.NextAccrDate == str(SystemBankDate)).\
										filter(MKT_ACCOUNT.AccStatus == 'O').\
										filter(MKT_ACC_PRODUCT.ProductType == 'E').\
										filter(MKT_ACCOUNT.InterestRate != "0").\
										filter(MKT_ACCOUNT.Dormant == "N").\
										filter(MKT_ACCOUNT.ClosingDate == "").\
										filter(MKT_ACCOUNT.Blocked == "N")

		if Stat == "1": 
			Account	=	Account.count()

		return Account

	except Exception as e:
		raise

def runAccrAccountThread():
	try:
		Start 			= time.time()
		Count 	=	getForAccrAccount(Stat="1")
		Process =	mktthread.runMultiprocessing(getForAccrAccount,setAccrAccount, Count,Param1={},Param2={'AC_Count':Count,'EOD':1})

		# Process Journal and Console Balance
		mktjournaltool.processJournalAndConsoleBalanceBooking()

		EndTime = time.time() - Start
		print "Total Execute Accr Account:%s seconds"%EndTime

	except Exception as e:
		raise 


def setAccrAccount(AccID="",Stat="", Date="",AC_Count="", **kwargs):
	try:

		EOD 			= 1
		TrueOrFalse 	= "1"
		DayEndOfMonth 	= mktsetting.getBankDateObj().NextMonthEnd
		NextSystemDate 	= mktsetting.getBankDateObj().NextSystemDate
		# SystemBankDate 	= mktsetting.getBankDate()

		if Date:
			SystemBankDate 	= Date
		else:
			SystemBankDate 	= mktdate.getBankDate()

		NextWeekend 	= mktsetting.getBankDateObj().NextWeekend
		NextYearEnd 	= mktsetting.getBankDateObj().NextYearEnd
		Holiday 		= mktHoliday.getHoliday()

		Account 	= 	db.session.query(MKT_ACCOUNT.ID, MKT_ACCOUNT.AccrIntBooked, MKT_ACCOUNT.NextAccrDate, 
										MKT_ACCOUNT.Balance, MKT_ACCOUNT.AvailableBal, MKT_ACCOUNT.Currency, MKT_ACCOUNT.Branch, 
										MKT_ACCOUNT.CustomerList, MKT_ACCOUNT.InterestRate, MKT_ACCOUNT.AccrCurMonth, MKT_ACCOUNT.AccrCurCapital, 
										MKT_ACCOUNT.AccCategory, MKT_ACC_PRODUCT.IntDayBasis, MKT_ACC_PRODUCT.Tax, MKT_ACC_PRODUCT.IntAccrBasis, 
										MKT_ACC_PRODUCT.IntCapitalization, MKT_ACC_PRODUCT.IntExpenseCat, MKT_ACC_PRODUCT.IntPayableCat, MKT_ACC_PRODUCT.AccrMode).\
						join(MKT_ACC_PRODUCT, MKT_ACC_PRODUCT.ID == MKT_ACCOUNT.AccProduct).\
						filter(MKT_ACCOUNT.NextAccrDate == str(SystemBankDate)).\
						filter(MKT_ACCOUNT.AccStatus == 'O').\
						filter(MKT_ACC_PRODUCT.ProductType == 'E').\
						filter(MKT_ACCOUNT.InterestRate != "0").\
						filter(MKT_ACCOUNT.Dormant == "N").\
						filter(MKT_ACCOUNT.ClosingDate == "").\
						filter(MKT_ACCOUNT.Blocked == "N")


		# Check for count account for accr today
		if AC_Count=="":
			AC_Count = getForAccrAccount(Stat="1")
		if Stat == "1":
			return AC_Count

		Account =	getForAccrAccount(AccID=AccID)

		# Check if no record set progress bar done.
		mktbjstat.calCompletedPer('AA', 0, 1, 0)

		if Account:

			RecordNumber 		=	0
			NumberOfCompleted 	= 	0
			NumOfCompletedPerc 	=	0
			NumOfTransaction 	=	mktbjstat.setNumOfTransaction(AC_Count)
			JobStatus 	=	[]
			for row in Account:

				# Block update BjStat
				JobStatus 		=	mktbjstat.updateCompletedJobStatus('AccrualAccount', AC_Count, JobStatus)
				# End Block

				ID = row.ID
				InterestRate 	= 	float(row.InterestRate) if row.InterestRate else float(0)
				InterestPerDay 		=	float(0)
				IntPerDay 			=	float(0)
				AccEndofMonth 		= 	False
				if InterestRate > 0:
					
					# Rule = mktaccounting.getAccountRule(ID)
					MinBalance = float(row.Balance) if row.Balance else float(0)

					# update mininum to table account
					MinBalance, AccEndofMonth = getMininumAccountBalance(ID,row.AccrMode)

					if MinBalance > 0:

						IntDayBasis = int(row.IntDayBasis) if row.IntDayBasis else int(1)
						RatePerYear = float(InterestRate)
						Balance 	= float(row.Balance)
						NextAccrDate= row.NextAccrDate

						IntAccrBasis 		= int(row.IntAccrBasis) if row.IntAccrBasis else int(0)
						IntCapitalization 	= int(row.IntCapitalization) if row.IntCapitalization else int(0)
						IntExpenseCat 		= row.IntExpenseCat
						IntPayableCat 		= row.IntPayableCat
						TaxID 				= row.Tax if row.Tax else ""

						check 		= True
						one_day 	= timedelta(days=1) # one day
						StartDate 	= datetime.strptime(str(NextAccrDate),'%Y-%m-%d').date()
						HolidayList	= []
						while check:
							check = mktDay.isNonWorkingDay(StartDate, Holiday)
							if check:
								Item = StartDate
								Item = datetime.strptime(str(Item),'%Y-%m-%d')
								Item = str(Item).split()
								HolidayList.append(str(Item[0]))
								StartDate = StartDate + one_day

						if len(HolidayList) > 0:
							
							# print "Holiday: %s." %HolidayList
							error_msg = "Holiday: %s." %HolidayList
							mktmessage.msgOutputMsg(error_msg)

							if int(IntCapitalization) == 2:
								NewDate 	=	NextWeekend
							elif int(IntCapitalization) == 3:
								NewDate 	=	DayEndOfMonth
							else:
								NewDate 	=	NextYearEnd

							onHoliday = checkHolidayForEndOfMonth(HolidayList, NewDate)
							# if DayEndOfMonth in HolidayList:
							# 	print 'im in HolidayList'
							# 	NextSystemDate = DayEndOfMonth
							# elif onHoliday:
							# 	NextSystemDate = onHoliday
							# print NextSystemDate,'==============================='
						if AccEndofMonth:
							IntPerDay = (MinBalance * RatePerYear / 12) /100
						else:
							NumOfDay 	= 1
							if NextSystemDate:
								NumOfDay = mktreschedule.getNumberOfDay(IntDayBasis, NextAccrDate, NextSystemDate)
								# NumOfDay = mktdate.getDateDiff(NextAccrDate, NextSystemDate)

							IntPerDay 	= 	mktreschedule.getInterestPerDay(RatePerYear, MinBalance, IntDayBasis, SystemBankDate)
							
							if int(NumOfDay) > 0:
								IntPerDay 	= 	float(IntPerDay) * float(NumOfDay)

						Contract 	= MKT_ACCOUNT.query.get(ID)

						if Contract:
							AccrCurMonth 		= float(Contract.AccrCurMonth) if Contract.AccrCurMonth else float(0)
							AccrCurCapital 		= float(Contract.AccrCurCapital) if Contract.AccrCurCapital else float(0)
						else:
							AccrCurMonth 		= float(0)
							AccrCurCapital 		= float(0)

						# print "%s accrual interest was updated successfully." %ID
						print_msg = "%s accrual interest was updated successfully." %ID
						mktmessage.msgOutputMsg(print_msg)

						AccountID 	= ID
						Currency 	= Contract.Currency if Contract.Currency else ""
						TranDate 	= str(mktsetting.getBankDate())
						Branch 		= Contract.Branch if Contract.Branch else ""
						CustomerID 	= Contract.CustomerList if Contract.CustomerList else ""
						AccCategory = Contract.AccCategory if Contract.AccCategory else ""
						AccrIntBooked 	= float(Contract.AccrIntBooked) if Contract.AccrIntBooked else float(0)
						#: Fix By     : Sovankiry Rim , 
						#: Fix date   : 01 December 2017
						#: Description: Rounding Interest Capitalization
						CapAmount 	= mktmoney.toMoney(float(AccrCurCapital),mktmoney.getCurrencyObj(Currency))
						CapAmount 	= float(str(CapAmount).replace(',',''))
						
						#mony 2018-02-22
						SavingPlanObj = MKT_SAVING_PLAN.query.\
															filter(MKT_SAVING_PLAN.SavingAccount==ID).\
															filter(MKT_SAVING_PLAN.MaturityDate>=str(SystemBankDate)).\
															first()
						#end

						"""
							# Comment added 2018-11-05
							This will loop through option in field Interest Accrual Basis and Interest Capitalization
							n: value of option in Interest Accrual Basis and Interest Capitalization
							if n is 1:
								1. For interest accrual, it will set to Daily
								2. For interest capitalization, it will set to Daily
							so on and so forth.
						"""
						for i in range(1, 5):

							n 			= 0
							if AccEndofMonth:
								Amount 		= IntPerDay
							else:
								Amount 		= AccrCurMonth

							if i == 1:
								n = 1
							elif i == 2:
								D 	= str(SystemBankDate).split("-")
								Day = D[2]

								E 		= str(NextWeekend).split("-")
								DayEnd 	= E[2]
								
								if int(Day) == int(DayEnd):
									n = 2

							elif i == 3:
								D 	= str(SystemBankDate).split("-")
								Day = D[2]

								E 		= str(DayEndOfMonth).split("-")
								DayEnd 	= E[2]
								
								if int(Day) == int(DayEnd):
									n = 3

								#mony 2018-02-22
								if SavingPlanObj:
									if SavingPlanObj.MaturityDate == str(SystemBankDate):
										n = 3
								#end

							else:
								
								YearEnd 	= str(NextYearEnd).replace("-", "")
								BankDate 	= str(SystemBankDate).replace("-", "")
								
								if int(YearEnd) == int(BankDate):
									n = 4
							"""
								# Block Posting Accrual Interest
								IntAccrBasis:
									0: --None--
									1: Daily
									2: Weekly
									3: Monthly
									4: Yearly
							"""
							if int(IntAccrBasis) != 0:
								if int(IntAccrBasis) == int(n) and Amount > 0:

									Category 	= IntExpenseCat
									if not Category:
										# Call method for error message
										error_msg 	= "Interest expense category not found."
										TrueOrFalse = mktmessage.msgError(EOD, error_msg)

									GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
									DateTimeNow = mktdate.getDateTimeNow()
									Transaction = mktsetting.getAccSetting().AccrIntTran
									Mode 		= "Direct"
									DrCr 		= "Dr"

									if Transaction:
										# Debit Accrued Interest Receivable Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											AccountID,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(Amount), 		# Amount
											"AC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode, 					# Mode check to insert Journal for category
											EOD=EOD
										)

										Category 	= IntPayableCat
										if not Category:
											# Call method for error message
											error_msg = "Interest payable category not found."
											TrueOrFalse = mktmessage.msgError(EOD, error_msg)

										GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
										DateTimeNow = mktdate.getDateTimeNow()
										Transaction = mktsetting.getAccSetting().IntPayaTran
										Mode 		= "Direct"
										DrCr 		= "Cr"

										# Credit Interest Income Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											AccountID,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(Amount), 		# Amount
											"AC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode, 					# Mode check to insert Journal for category
											EOD=EOD
										)

										# Update Accrued Current Capital
										UpdateAccrCurrMonth 				= MKT_ACCOUNT.query.get(ID)
										UpdateAccrCurrMonth.AccrIntBooked 	= float(UpdateAccrCurrMonth.AccrIntBooked) + float(UpdateAccrCurrMonth.AccrCurMonth)
										UpdateAccrCurrMonth.AccrCurMonth 	= 0

										AccrIntBooked = float(UpdateAccrCurrMonth.AccrIntBooked)
										db.session.add(UpdateAccrCurrMonth)

									else:
										# Call method for error message
										error_msg = "Accrued interest booking transaction not found."
										TrueOrFalse = mktmessage.msgError(EOD, error_msg)
							# End block posting accrual interest

							"""
								# Block posting capitalize interest
								IntCapitalization:
									0: --None--
									1: Daily
									2: Weekly
									3: Monthly
									4: Yearly
							"""
							if int(IntCapitalization) != 0:
								if int(IntCapitalization) == int(n) and CapAmount > 0:

									Category 	= IntPayableCat
									if not Category:
										# Call method for error message
										error_msg 	= "Interest payable category not found."
										TrueOrFalse = mktmessage.msgError(EOD, error_msg)

									GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
									DateTimeNow = mktdate.getDateTimeNow()
									Transaction = mktsetting.getAccSetting().IntPayaTran
									Mode 		= "Direct"
									DrCr 		= "Dr"

									if Transaction:
										# Debit Accrued Interest Receivable Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											AccountID,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(AccrIntBooked), # Amount
											"AC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"Capitalization",		# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode, 					# Mode check to insert Journal for category
											EOD=EOD
										)

										Category 	= IntExpenseCat
										if not Category:
											# Call method for error message
											error_msg 	= "Interest expense category not found."
											TrueOrFalse = mktmessage.msgError(EOD, error_msg)

										GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
										DateTimeNow = mktdate.getDateTimeNow()
										Transaction = mktsetting.getAccSetting().AccrIntTran
										Mode 		= "Direct"
										DrCr 		= "Dr"

										IntExpAmt 	=	float(CapAmount) - float(AccrIntBooked)
										if IntExpAmt < 0:
											DrCr 		=	"Cr"
											IntExpAmt 	=	abs(IntExpAmt)
										# Debit Accrued Interest Receivable Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											AccountID,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(IntExpAmt), 	# Amount
											"AC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"Capitalization",		# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode, 					# Mode check to insert Journal for category
											EOD=EOD
										)

										Category 	= AccCategory
										if not Category:
											# Call method for error message
											error_msg 	= "Account category not found."
											TrueOrFalse = mktmessage.msgError(EOD, error_msg)

										GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
										DateTimeNow = mktdate.getDateTimeNow()
										# Transaction = mktsetting.getAccSetting().AccrIntTran
										Mode 		= ""
										DrCr 		= "Cr"

										# Credit Interest Income Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											AccountID,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(CapAmount), 	# Amount
											"AC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"Capitalization",		# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode, 					# Mode check to insert Journal for category
											EOD=EOD
										)

										# Calculate tax for saving account
										Tax = MKT_TAX.query.get(TaxID)
										TaxRate 	= 0
										TaxCategory = ""
										TaxPayment 	= 0

										if Tax:

											TaxRate 	= Tax.Rate
											TaxCategory = Tax.Category

											TaxPayment 	= (float(CapAmount) * float(TaxRate)) / float(100)

											if float(TaxPayment) > 0:
												
												Transaction = mktsetting.getAccSetting().TaxTran
												if not Transaction:
													# Call method for error message
													error_msg 	= "Withholding tax transaction not found."
													TrueOrFalse = mktmessage.msgError(EOD, error_msg)
												else:

													Category 	= AccCategory
													if not Category:
														# Call method for error message
														error_msg 	= "Account category not found."
														TrueOrFalse = mktmessage.msgError(EOD, error_msg)

													GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
													DateTimeNow = mktdate.getDateTimeNow()
													Mode 		= ""
													DrCr 		= "Dr"

													# Debit Customer Account
													mktaccounting.postAccounting(
														"AUTH", 				# Status
														"0", 					# Curr
														"System",				# Inputter
														DateTimeNow, 			# Createdon
														"System",				# Authorizer
														DateTimeNow,			# Authorizeon
														"", 					# AEID
														AccountID,				# Account
														Category,				# Category
														Currency,				# Currency
														DrCr,					# DrCr
														Decimal(TaxPayment), 	# Amount
														"AC",					# Module
														Transaction, 			# Transaction
														TranDate, 				# TransactionDate
														ID, 					# Reference
														"", 					# Note
														"", 					# JNID
														Branch,					# Branch
														GL_KEYS,				# GL_KEYS
														Mode 					# Mode check to insert Journal for category
													)

													Category 	= TaxCategory
													if not Category:
														# Call method for error message
														error_msg 	= "Withholding tax category not found."
														TrueOrFalse = mktmessage.msgError(EOD, error_msg)

													GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
													DateTimeNow = mktdate.getDateTimeNow()
													Mode 		= "Direct"
													DrCr 		= "Cr"

													# Credit Interest Income Category
													mktaccounting.postAccounting(
														"AUTH", 				# Status
														"0", 					# Curr
														"System",				# Inputter
														DateTimeNow, 			# Createdon
														"System",				# Authorizer
														DateTimeNow,			# Authorizeon
														"", 					# AEID
														AccountID,				# Account
														Category,				# Category
														Currency,				# Currency
														DrCr,					# DrCr
														Decimal(TaxPayment), 	# Amount
														"AC",					# Module
														Transaction, 			# Transaction
														TranDate, 				# TransactionDate
														ID, 					# Reference
														"", 					# Note
														"", 					# JNID
														Branch,					# Branch
														GL_KEYS,				# GL_KEYS
														Mode 					# Mode check to insert Journal for category
													)

										#mony 2018-02-22
										#---check account to store capital interest for saving ---#
										# SavingPlanObj = MKT_SAVING_PLAN.query.\
										# 						filter(MKT_SAVING_PLAN.SavingAccount==ID).\
										# 						filter(MKT_SAVING_PLAN.MaturityDate>=str(SystemBankDate)).\
										# 						first()

										if SavingPlanObj:

											TransferAmount = 0
											DrAccount = ""
											CrAccount = ""
											Note 	  = ""
											if SavingPlanObj.MaturityDate == str(SystemBankDate):
												print "--------> reach maturity."
												#1.move balance from saving to general accout
												SavingAccountObj = MKT_ACCOUNT.query.get(ID)
												TransferAmount = SavingAccountObj.Balance
												DrAccount = SavingPlanObj.SavingAccount
												CrAccount = SavingPlanObj.GeneralAccount
												Note 	=  "Transfer saving balance to general acc."

												#close saving account
												SavingAccountObj.AccStatus 		= 'C'
												SavingAccountObj.ClosingDate	= str(SystemBankDate)
												
												# db.session.commit()
												db.session.add(SavingAccountObj)

											else:
												print "--------> not reach maturity."
												#1. transfer capitalize interest to general account in case saving and general is different
												if SavingPlanObj.SavingAccount != SavingPlanObj.GeneralAccount:
													#Transfer interest to general account
													TransferAmount = Decimal(CapAmount) - Decimal(TaxPayment)
													DrAccount = SavingPlanObj.SavingAccount
													CrAccount = SavingPlanObj.GeneralAccount
													Note = "Transfer saving int. capitalize to general acc."

											if TransferAmount > 0:
												print "--------> post transfer."
												#Debit from Saving Plan Account
												SavingAccObj = MKT_ACCOUNT.query.get(SavingPlanObj.SavingAccount)
												Category 	= SavingAccObj.AccCategory
												if not Category:
													# Call method for error message
													error_msg 	= "Account category not found."
													TrueOrFalse = mktmessage.msgError(EOD, error_msg)

												GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
												DateTimeNow = mktdate.getDateTimeNow()
												Transaction = "102" #Account Transfer
												Mode 		= ""
												DrCr 		= "Dr"

												mktaccounting.postAccounting(
													"AUTH", 				# Status
													"0", 					# Curr
													"System",				# Inputter
													DateTimeNow, 			# Createdon
													"System",				# Authorizer
													DateTimeNow,			# Authorizeon
													"", 					# AEID
													DrAccount,				# Account
													Category,				# Category
													Currency,				# Currency
													DrCr,					# DrCr
													Decimal(TransferAmount), 	# Amount
													"AC",					# Module
													Transaction, 			# Transaction
													TranDate, 				# TransactionDate
													DrAccount, 					# Reference
													Note,		# Note
													"", 					# JNID
													Branch,					# Branch
													GL_KEYS,				# GL_KEYS
													Mode 					# Mode check to insert Journal for category
												)
												#Cr to general account
												GeneralAccObj = MKT_ACCOUNT.query.get(SavingPlanObj.GeneralAccount)
												Category 	= GeneralAccObj.AccCategory
												if not Category:
													# Call method for error message
													error_msg 	= "Account category not found."
													TrueOrFalse = mktmessage.msgError(EOD, error_msg)

												GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
												DateTimeNow = mktdate.getDateTimeNow()
												Transaction = "102" #Account Transfer
												Mode 		= ""
												DrCr 		= "Cr"
												# AccountID 	= SavingPlanObj.GeneralAccount

												# Credit Interest Income Category
												mktaccounting.postAccounting(
													"AUTH", 				# Status
													"0", 					# Curr
													"System",				# Inputter
													DateTimeNow, 			# Createdon
													"System",				# Authorizer
													DateTimeNow,			# Authorizeon
													"", 					# AEID
													CrAccount,				# Account
													Category,				# Category
													Currency,				# Currency
													DrCr,					# DrCr
													Decimal(TransferAmount), 	# Amount
													"AC",					# Module
													Transaction, 			# Transaction
													TranDate, 				# TransactionDate
													CrAccount, 					# Reference
													Note,		# Note
													"", 					# JNID
													Branch,					# Branch
													GL_KEYS,				# GL_KEYS
													Mode 					# Mode check to insert Journal for category
												)
										#end

										UpdateCapitalize 					= MKT_ACCOUNT.query.get(ID)
										UpdateCapitalize.AccrCurCapital 	= 0
										UpdateCapitalize.AccrIntBooked 		= 0
										db.session.add(UpdateCapitalize)

									else:
										# Call method for error message
										error_msg = "Interest payment transaction not found."
										TrueOrFalse = mktmessage.msgError(EOD, error_msg)
							# End block posting capitalize interest

							#check saving maturity
							#1. capitalize interest to saving account in case maturity date not equal monthend
							#2. move balance from saving to general saving
							#3. close account saving


							#check saving maturity
							#1. capitalize interest to saving account in case maturity date not equal monthend
							#2. move balance from saving to general saving
							#3. close account saving


				NextAccr 				= 	MKT_ACCOUNT.query.get(ID)
				CheckNextSystemDate 	= mktdate.formatDate(NextSystemDate,Formatting="MM")
				CheckDayEndOfMonth 		= mktdate.formatDate(DayEndOfMonth,Formatting="MM")
				AccrCurrentMonth 		= 0
				if not int(CheckDayEndOfMonth) == int(CheckNextSystemDate):
					AccrCurrentMonth 		= NextAccr.AccrCurMonth
				if AccEndofMonth:
					# update AccInterest, AccrCurMonth, AccrCurCapital in table account end of month
					if str(NextSystemDate) == str(DayEndOfMonth):
						NextAccr.AccrInterest 	= (float(NextAccr.AccrInterest) if NextAccr.AccrInterest else float(0)) + IntPerDay
						NextAccr.AccrCurMonth 	= (float(NextAccr.AccrCurMonth) if NextAccr.AccrCurMonth else float(0)) + IntPerDay
						NextAccr.AccrCurCapital = (float(NextAccr.AccrCurCapital) if NextAccr.AccrCurCapital else float(0)) + IntPerDay
				else:
					# update AccInterest, AccrCurMonth, AccrCurCapital daily
					NextAccr.AccrInterest 	= (float(NextAccr.AccrInterest) if NextAccr.AccrInterest else float(0)) + IntPerDay
					NextAccr.AccrCurMonth 	= (float(NextAccr.AccrCurMonth) if NextAccr.AccrCurMonth else float(0)) + IntPerDay - float(AccrCurrentMonth)
					NextAccr.AccrCurCapital = (float(NextAccr.AccrCurCapital) if NextAccr.AccrCurCapital else float(0)) + IntPerDay
				# Contract.NextAccrDate = NextSystemDate
				
				# db.session.commit()
				NextAccr.NextAccrDate	=	str(NextSystemDate)
				db.session.add(NextAccr)
				# Commit Data per Account
				db.session.commit()

		else:
			# print "No account to update accrual interest."
			error_msg = "No account to update accrual interest."
			mktmessage.msgOutputMsg(error_msg)

		# Clear query object
		del Account

		return ""

	except Exception, e:
		db.session.rollback()
		mktmessage.setLogError("File: mktloan.py Function: setAccrAccount() Message: %s"%e)
		mktbjstat.makeLogFileOnError('Y')
		db.session.close_all()
		raise

def updateLoanIntIncome():
	'''
	Function refer to generate Int.Income per loan contract
	'''
	SystemBankDate 	= 	str(mktdate.getBankDate())
	LoanObj 		= 	MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ValueDate <= SystemBankDate)
	AccSetting 		= 	mktsetting.getAccSetting() #Get Acccounting Setting
	PDParamObj 		= 	mktparam.getPDParam()
	for row in LoanObj:
		Branch 				= row.Branch
		Resource 			= 'AUTH'
		ID 					= row.ID
		AccrInterest 		= float(row.AccrInterest)
		CustomerID 			= row.ContractCustomerID
		LoanProduct 		= row.LoanProduct
		AssClass 			= row.AssetClass
		Currency 			= row.Currency
		ValueDate 			= row.ValueDate
		Suspend 			= row.Suspend
		RatePerYear 		= float(row.IRR) if row.IRR else float(row.InterestRate)
		OutstandingAmount 	= float(row.Amount)
		ProductObj 			= MKT_LOAN_PRODUCT.query.get(LoanProduct)
		ReportingRateObj 	= mktaccounting.getReportingRateObj()

		if ProductObj:
			InterestDayBasis =	ProductObj.IntDayBasis
			NumOfDay 		 = 	mktreschedule.getNumberOfDay(InterestDayBasis, ValueDate, SystemBankDate)
			# Check Booking Int.Income and AIR with calculator Number Of Day more than or equal one day
			if int(NumOfDay) > 0:

				RatePerYear 		=	float(row.IRR) if row.IRR else float(row.InterestRate)
				OutstandingAmount 	=	float(row.Amount)
				IntPerDay 			= 	mktreschedule.getInterestPerDay(float(RatePerYear), float(OutstandingAmount), int(InterestDayBasis), SystemBankDate)
				TotalInt 			= 	float(IntPerDay) * float(NumOfDay)
				LCYTotalInt 		= 	TotalInt * float(ReportingRateObj.get(Currency))
				AmountIntIncome 	= 	TotalInt - AccrInterest

				row.AccrCurrentInt 		=	float(TotalInt)
				row.AccrIntCurrMonth 	=	float(TotalInt)
				row.IntIncEarned 		=	float(LCYTotalInt)
				row.AccrInterest 		=	float(TotalInt)
				db.session.add(row)
				
				k1 = AccSetting.GL_KEY1
				k2 = AccSetting.GL_KEY2
				k3 = AccSetting.GL_KEY3
				k4 = AccSetting.GL_KEY4
				k5 = AccSetting.GL_KEY5
				k6 = AccSetting.GL_KEY6
				k7 = AccSetting.GL_KEY7
				k8 = AccSetting.GL_KEY8
				k9 = AccSetting.GL_KEY9

				k1 = mktkey.getResultKey(k1, ID, CustomerID, Resource)
				k2 = mktkey.getResultKey(k2, ID, CustomerID, Resource)
				k3 = mktkey.getResultKey(k3, ID, CustomerID, Resource)
				k4 = mktkey.getResultKey(k4, ID, CustomerID, Resource)
				k5 = mktkey.getResultKey(k5, ID, CustomerID, Resource)
				k6 = mktkey.getResultKey(k6, ID, CustomerID, Resource)
				k7 = mktkey.getResultKey(k7, ID, CustomerID, Resource)
				k8 = mktkey.getResultKey(k8, ID, CustomerID, Resource)
				k9 = mktkey.getResultKey(k9, ID, CustomerID, Resource)

				AccrIntReceivable  	= ProductObj.IntReceivableCate.strip()
				GLReceivable 		= mktaccounting.getConsolKey(AccrIntReceivable, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
				
				if Suspend.upper() == 'Y':
					IntIncome 		= PDParamObj.SuspendCrCat
					Transaction 	= AccSetting.CrAccrIntTran
					GLIntIncome 	= mktaccounting.getConsolKey(IntIncome, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
					if not Category:
						# Call method for error message
						error_msg 	= "Suspend credit category not found."
						TrueOrFalse = mktmessage.msgError(EOD, error_msg)

				else:
					IntIncome  		= ProductObj.IntIncomeCate.strip()
					Transaction 	= AccSetting.DrAccrIntTran
					GLIntIncome 	= mktaccounting.getConsolKey(IntIncome, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
					if not IntIncome:
						# Call method for error message
						error_msg = "Interest income category not found."
						TrueOrFalse = mktmessage.msgError(EOD, error_msg)

				DateTimeNow = mktdate.getDateTimeNow()
				# Debit Accrued Interest Receivable Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					AccrIntReceivable,		# Category
					Currency,				# Currency
					"Dr",					# DrCr
					Decimal(AmountIntIncome), 		# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					SystemBankDate, 				# TransactionDate
					ID, 					# Reference
					"", 					# Note
					"", 					# JNID
					Branch,					# Branch
					GLReceivable,			# GL_KEYS
					"Direct" 				# Mode check to insert Journal for category
				)

				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					IntIncome,				# Category
					Currency,				# Currency
					"Cr",					# DrCr
					Decimal(AmountIntIncome), 		# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					SystemBankDate, 				# TransactionDate
					ID, 					# Reference
					"", 					# Note
					"", 					# JNID
					Branch,					# Branch
					GLIntIncome,			# GL_KEYS
					"Direct" 				# Mode check to insert Journal for category
				)
				print "LoanID",ID,"AmountIntIncome",AmountIntIncome,'GLReceivable',GLReceivable,'GLIntIncome',GLIntIncome

def updateLoanBackDate(LoanObj,Resource,AccSetting,PDParamObj,SystemBankDate,EOD=0):
	'''
	Function Refer to Booking Int.Income and AIR when loan post back date and update loan contract 
	with relative field.
	'''
	try:
		Branch 		= LoanObj.Branch
		ID 			= LoanObj.ID
		CustomerID 	= LoanObj.ContractCustomerID
		LoanProduct = LoanObj.LoanProduct
		AssClass 	= LoanObj.AssetClass
		Currency 	= LoanObj.Currency
		ValueDate 	= LoanObj.ValueDate
		Suspend 	= LoanObj.Suspend

		ProductObj 	= MKT_LOAN_PRODUCT.query.get(LoanProduct)
		if ProductObj:
			ReportingRateObj 	= mktaccounting.getReportingRateObj()
			InterestDayBasis =	ProductObj.IntDayBasis
			NumOfDay 	= 	mktreschedule.getNumberOfDay(InterestDayBasis, ValueDate, SystemBankDate)
			# Check Booking Int.Income and AIR with calculator Number Of Day more than or equal one day
			if int(NumOfDay) > 0:

				RatePerYear 	=	float(LoanObj.IRR) if LoanObj.IRR else float(LoanObj.InterestRate)
				LoanBalance 	=	float(LoanObj.Amount)
				IntPerDay 		= 	mktreschedule.getInterestPerDay(float(RatePerYear), float(LoanBalance), int(InterestDayBasis), SystemBankDate)
				TotalInt 		= 	float(IntPerDay) * float(NumOfDay)
				LCYTotalInt 	= 	TotalInt * float(ReportingRateObj.get(Currency))

				LoanObj.AccrIntPerDay 		=	float(IntPerDay)
				LoanObj.AccrCurrentInt 		=	float(TotalInt)
				LoanObj.AccrIntCurrMonth 	=	float(TotalInt)
				LoanObj.IntIncEarned 		=	float(LCYTotalInt)
				LoanObj.AccrInterest 		=	float(TotalInt)
				db.session.add(LoanObj)

				k1 = AccSetting.GL_KEY1
				k2 = AccSetting.GL_KEY2
				k3 = AccSetting.GL_KEY3
				k4 = AccSetting.GL_KEY4
				k5 = AccSetting.GL_KEY5
				k6 = AccSetting.GL_KEY6
				k7 = AccSetting.GL_KEY7
				k8 = AccSetting.GL_KEY8
				k9 = AccSetting.GL_KEY9

				k1 = mktkey.getResultKey(k1, ID, CustomerID, Resource)
				k2 = mktkey.getResultKey(k2, ID, CustomerID, Resource)
				k3 = mktkey.getResultKey(k3, ID, CustomerID, Resource)
				k4 = mktkey.getResultKey(k4, ID, CustomerID, Resource)
				k5 = mktkey.getResultKey(k5, ID, CustomerID, Resource)
				k6 = mktkey.getResultKey(k6, ID, CustomerID, Resource)
				k7 = mktkey.getResultKey(k7, ID, CustomerID, Resource)
				k8 = mktkey.getResultKey(k8, ID, CustomerID, Resource)
				k9 = mktkey.getResultKey(k9, ID, CustomerID, Resource)

				AccrIntReceivable  	= ProductObj.IntReceivableCate.strip()
				GLReceivable 		= mktaccounting.getConsolKey(AccrIntReceivable, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
				
				if Suspend.upper() == 'Y':
					IntIncome 		= PDParamObj.SuspendCrCat
					Transaction 	= AccSetting.CrAccrIntTran
					GLIntIncome 	= mktaccounting.getConsolKey(IntIncome, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
					if not Category:
						# Call method for error message
						error_msg 	= "Suspend credit category not found."
						TrueOrFalse = mktmessage.msgError(EOD, error_msg)

				else:
					IntIncome  		= ProductObj.IntIncomeCate.strip()
					Transaction 	= AccSetting.DrAccrIntTran
					GLIntIncome 	= mktaccounting.getConsolKey(IntIncome, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
					if not IntIncome:
						# Call method for error message
						error_msg = "Interest income category not found."
						TrueOrFalse = mktmessage.msgError(EOD, error_msg)
				Description 		= "Loan back date, authorize on bnk date %s"%SystemBankDate
				DateTimeNow = mktdate.getDateTimeNow()
				# Debit Accrued Interest Receivable Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					AccrIntReceivable,		# Category
					Currency,				# Currency
					"Dr",					# DrCr
					Decimal(TotalInt), 		# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					ValueDate, 				# TransactionDate
					ID, 					# Reference
					Description, 			# Note
					"", 					# JNID
					Branch,					# Branch
					GLReceivable,			# GL_KEYS
					"Direct", 				# Mode check to insert Journal for category
					EOD=EOD
				)

				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					IntIncome,				# Category
					Currency,				# Currency
					"Cr",					# DrCr
					Decimal(TotalInt), 		# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					ValueDate, 				# TransactionDate
					ID, 					# Reference
					Description,			# Note
					"", 					# JNID
					Branch,					# Branch
					GLIntIncome,			# GL_KEYS
					"Direct", 				# Mode check to insert Journal for category
					EOD=EOD
				)
				# Block Insert into AIR Journal
				mktloanaccrual.setLoanAccrualPosting(AccrIntReceivable, GLReceivable, Currency, TotalInt, IntIncome, GLIntIncome, Currency, TotalInt, 
								Transaction, ValueDate, ID, DateTimeNow, Branch, RatePerYear, LoanBalance, ID, Description,EOD=EOD)
				#End Block

				# Block Booking to table Daily Booking
				ObjBooking 	= mktloanaccrual.setDailyBooking(	LoanDailyAccrLog=	'Y',
												Branch 			=	Branch,
												Customer 		=	CustomerID,
												Reference 		=	ID,
												BaseAmount 		=	LoanBalance,
												Rate 			= 	RatePerYear,
												NumDay 			= 	NumOfDay, 
												Currency 		= 	Currency,
												BookedAmount 	=	TotalInt,
												Module 			= 	"LC",
												Transaction 	=	Transaction,
												TransactionDate = 	ValueDate)
				# End Block
	except Exception, e:
		db.session.rollback()
		print '%s'%e 
		raise
	

def setDormantAccount():
	try:

		SystemBankDate 	= mktsetting.getBankDate()
		TrueOrFalse 	= "1"
		Account = db.session.query(MKT_ACCOUNT.ID, MKT_ACCOUNT.LastTranDate, MKT_ACCOUNT.OpenDate, MKT_ACC_PRODUCT.DormantDays).\
				  join(MKT_ACC_PRODUCT, MKT_ACC_PRODUCT.ID == MKT_ACCOUNT.AccProduct).\
				  filter(MKT_ACCOUNT.AccStatus == 'O').\
				  filter(MKT_ACC_PRODUCT.ProductType == 'E').\
				  filter(MKT_ACCOUNT.ClosingDate == "").\
				  filter(MKT_ACCOUNT.Blocked == "N").\
				  filter(MKT_ACCOUNT.Dormant == "N").\
				  all()

		if Account:
			for item in Account:
				ID 						= item.ID
				Dormant 				= int(item.DormantDays) if item.DormantDays else int(0)
				LastTranDate 			= item.LastTranDate
				OpenDate 				= item.OpenDate
				LastTranDate 			= LastTranDate if LastTranDate else OpenDate
				NumberOfNonActivitiy 	= mktdate.getDateDiff(LastTranDate, SystemBankDate)

				if int(Dormant) > 0 and int(NumberOfNonActivitiy) >= int(Dormant):
					Acc 		= MKT_ACCOUNT.query.get(ID)
					if Acc:
						Acc.Dormant = "Y"
						db.session.add(Acc)
						db.session.commit()
						print_msg = "%s no activity for %s days, dormant is set to 'Yes'." %(ID, str(NumberOfNonActivitiy))
						mktmessage.msgOutputMsg(print_msg)
						# print "%s no activity for %s days, dormant is set to 'Yes'." %(ID, str(NumberOfNonActivitiy))

		# Clear query object
		del Account

		return ""

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

# Update Accr Interest and Amount during Due Date
def updateAccrCurrInt(LoanContractObj,  Principal=0):
	try:
		
		if LoanContractObj:
			LoanContractObj.AccrCurrentInt 		= 0		# Update Accr Current Installment to 0
			LoanContractObj.AccrIntCurrMonth 	= 0 	# Update Accr Current Month to 0
			LoanContractObj.Amount 				= float(LoanContractObj.Amount) - float(Principal)	# Update Loan Amount
			db.session.add(LoanContractObj)

		return ""

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def getLoanDisbursement(LoanID=None, Resource=None, EOD=1, Stat="", Date="",Authorizer="",Authorizeon="",Limit='', OffSet='',SystemBankDate='',**kwargs):

	if Resource and Resource == "INAU":

		if LoanID:
			Disbursed = MKT_LOAN_CONTRACT_INAU.query.\
					filter(MKT_LOAN_CONTRACT_INAU.ValueDate <= str(SystemBankDate)).\
					filter(MKT_LOAN_CONTRACT_INAU.DisbursedStat == 'N').\
					filter(MKT_LOAN_CONTRACT_INAU.ID == str(LoanID))
		else:
			if Limit:
				Disbursed = MKT_LOAN_CONTRACT_INAU.query.\
					filter(MKT_LOAN_CONTRACT_INAU.ValueDate <= str(SystemBankDate)).\
					filter(MKT_LOAN_CONTRACT_INAU.DisbursedStat == 'N').\
					limit(Limit).offset(OffSet)
			else:
				Disbursed = MKT_LOAN_CONTRACT_INAU.query.\
					filter(MKT_LOAN_CONTRACT_INAU.ValueDate <= str(SystemBankDate)).\
					filter(MKT_LOAN_CONTRACT_INAU.DisbursedStat == 'N').count()

	else:
		if LoanID:
			Disbursed = MKT_LOAN_CONTRACT.query.\
					filter(MKT_LOAN_CONTRACT.ValueDate <= str(SystemBankDate)).\
					filter(MKT_LOAN_CONTRACT.DisbursedStat == 'N').\
					filter(MKT_LOAN_CONTRACT.ID == str(LoanID))
		else:
			if Limit:
				Disbursed = MKT_LOAN_CONTRACT.query.\
					filter(MKT_LOAN_CONTRACT.ValueDate <= str(SystemBankDate)).\
					filter(MKT_LOAN_CONTRACT.DisbursedStat == 'N').\
					limit(Limit).offset(OffSet)
			else:
				Disbursed = MKT_LOAN_CONTRACT.query.\
					filter(MKT_LOAN_CONTRACT.ValueDate <= str(SystemBankDate)).\
					filter(MKT_LOAN_CONTRACT.DisbursedStat == 'N').count()

	return Disbursed


def setLCDisbursement(LCID=None, Resource=None, EOD=1, Stat="", Date="",Authorizer="",Authorizeon="",Limit=None):
	'''
	Notes by Sovankiry Rim
	* EOD 
		0 : Refer to execute function from web interface.
		1 : Refer to execute function from terminal.
	* Stat
		1 : Mean that execute function only for count record

	'''
	try:

		print ""
		TrueOrFalse = "1"
		SystemBankDate 	= mktdate.getBankDate()
		NextRunDate 	= mktdate.getBankDateObj().NextSystemDate
		NextRunDate 	= NextRunDate.strip()
		# Get Parameter from Setting
		AccSetting 			= 	mktsetting.getAccSetting() #Get Acccounting Setting
		PDParamObj 			= 	mktparam.getPDParam()
		ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
		# End Block Setting
		JobStatus 			=	[]
		
		if Date:
			SystemBankDate 	= Date
		else:
			SystemBankDate 	= mktdate.getBankDate()
		# Block Validate
		if Stat != "1":
			if AccSetting:
				DisbursedTran 	= 	AccSetting.DisbursedTran
				if not DisbursedTran:
					Message = "Loan disbursement transaction has not been set, Please go to mktsetting."
					if EOD == 1:
						mktmessage.setLogError(Message)# Call method for error message
					else:
						return False,Message

				ChargeTran 	= 	AccSetting.ChargeTran	
				if not ChargeTran:
					
					Message ="Charge transaction has not been set, Please go to mktsetting."
					if EOD == 1:
						mktmessage.setLogError(Message)# Call method for error message
					else:
						return False,Message
			else:
				Message ="Accounting Setting not yet configuration."
				if EOD == 1:
					mktmessage.setLogError(Message)# Call method for error message
				else:
					return False,Message
		if not NextRunDate:
			# Call method for error message
			Message ="Next bank date not found, Please go to configuration date"
			if EOD == 1:
				mktmessage.setLogError(Message)# Call method for error message
			else:
				return False,Message

		LC_Count = getLoanDisbursement(Resource=Resource,SystemBankDate=SystemBankDate)
		if Stat == "1":
			return LC_Count

		Option  =	{	'AccSetting'	:	AccSetting,
						'PDParamObj'	:	PDParamObj,
						'Resource':Resource, 
						'ReportingRateObj':ReportingRateObj,
						'SystemBankDate':SystemBankDate,
						'EOD':EOD,
						'Date':Date,
						'Authorizer':Authorizer,
						'Authorizeon':Authorizeon,
						'JobStatus':JobStatus,
						'LID':LCID,
						'DisbursedTran':DisbursedTran
					}

		kwargs 	=	{	'AccSetting': AccSetting,
						'PDParamObj'	:	PDParamObj,
						'Resource':Resource, 
						'ReportingRateObj':	ReportingRateObj,
						'SystemBankDate':SystemBankDate, 
						'LC_Count':	LC_Count, 
						'LID':LCID,
						'EOD':EOD,
						'Date':Date,
						'Authorizer':Authorizer,
						'Authorizeon':Authorizeon,
						'JobStatus':JobStatus,
						'DisbursedTran':DisbursedTran
					}

		if LCID:
			processLoanDisbursement(LCID,**kwargs)

		else:
			kwargs.update({'EOD':1})
			Process =	mktthread.runMultiprocessing(getLoanDisbursement,processLoanDisbursement, LC_Count,Param1=Option, Param2=kwargs)
			# Process Journal and Console Balance
			mktjournaltool.processJournalAndConsoleBalanceBooking()
	
		if int(EOD) == 1:
			return ""
		else:
			Message = "Loan contract has been disbursed successfully."
			return True,Message

	except Exception, e:
		print "%s"%e
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def processLoanDisbursement(LCID,**kwargs):

	try:

		AccSetting 			= kwargs.get('AccSetting','')
		Resource 			= kwargs.get('Resource','')
		ReportingRateObj 	= kwargs.get('ReportingRateObj','')
		SystemBankDate 		= kwargs.get('SystemBankDate','')
		LC_Count 			= kwargs.get('LC_Count','')
		EOD 				= kwargs.get('EOD',0)
		Date 				= kwargs.get('Date','')
		Authorizer 			= kwargs.get('Authorizer','')
		Authorizeon 		= kwargs.get('Authorizeon','')
		LID 				= kwargs.get('LCID','')
		DisbursedTran 		= kwargs.get('DisbursedTran','')
		PDParamObj 			= kwargs.get('PDParamObj','')
		JobStatus 			= kwargs.get('JobStatus','')
		 
		if LID:
			LID = LCID

		if Resource and Resource == "INAU":
			Disbursed = MKT_LOAN_CONTRACT_INAU.query.\
						filter(MKT_LOAN_CONTRACT_INAU.ValueDate <= str(SystemBankDate)).\
						filter(MKT_LOAN_CONTRACT_INAU.DisbursedStat == 'N').\
						filter(MKT_LOAN_CONTRACT_INAU.ID == str(LCID)).first()
		else:
			Disbursed = MKT_LOAN_CONTRACT.query.\
						filter(MKT_LOAN_CONTRACT.ValueDate <= str(SystemBankDate)).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == 'N').\
						filter(MKT_LOAN_CONTRACT.ID == str(LCID)).first()

		if Disbursed:
			if EOD:
				JobStatus 	=	mktbjstat.updateCompletedJobStatus('LoanDisburement', LC_Count, JobStatus)

			CustomerID 	= Disbursed.ContractCustomerID
			ValueDate 	= Disbursed.ValueDate

			LoanID 		= 	Disbursed.ID
			ID 			= 	Disbursed.ID
			AssClass 	=	Disbursed.AssetClass
			Currency 	= 	Disbursed.Currency
			Branch 		= 	Disbursed.Branch
			Category 	= 	Disbursed.Category
			Amount 		= 	Decimal(Disbursed.Amount) # Update by Sovankiry - 30-JAN-2017 Change from disburse to loan balance
			TranDate 	= 	ValueDate
			Account 	= 	Disbursed.Account
			Inputter 	= 	Disbursed.Inputter
			Createdon 	= 	Disbursed.Createdon
			Authorizer 	= 	Authorizer if Authorizer else Disbursed.Authorizer
			Authorizeon =	Authorizeon if Authorizeon else Disbursed.Authorizeon
			Message 	= 	""

			k1 = AccSetting.GL_KEY1
			k2 = AccSetting.GL_KEY2
			k3 = AccSetting.GL_KEY3
			k4 = AccSetting.GL_KEY4
			k5 = AccSetting.GL_KEY5
			k6 = AccSetting.GL_KEY6
			k7 = AccSetting.GL_KEY7
			k8 = AccSetting.GL_KEY8
			k9 = AccSetting.GL_KEY9

			k1 = mktkey.getResultKey(k1, ID, CustomerID, Resource)
			k2 = mktkey.getResultKey(k2, ID, CustomerID, Resource)
			k3 = mktkey.getResultKey(k3, ID, CustomerID, Resource)
			k4 = mktkey.getResultKey(k4, ID, CustomerID, Resource)
			k5 = mktkey.getResultKey(k5, ID, CustomerID, Resource)
			k6 = mktkey.getResultKey(k6, ID, CustomerID, Resource)
			k7 = mktkey.getResultKey(k7, ID, CustomerID, Resource)
			k8 = mktkey.getResultKey(k8, ID, CustomerID, Resource)
			k9 = mktkey.getResultKey(k9, ID, CustomerID, Resource)

			AccCat = MKT_ACCOUNT.query.get(Account).AccCategory

			Disbursed.DisbursedStat 		= 	'Y'
			Disbursed.NextRunDate 		= 	str(SystemBankDate)
			db.session.add(Disbursed)

			# Block Booking Accounting Loan Disbursement
			for i in range(0, 2):
				
				if i == 0:
					DrCr = "Dr"
					Mode = "Direct"
					Category = Category
					GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
				else:
					DrCr = "Cr"
					Mode = ""
					Category = AccCat
					GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
				
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					Authorizeon,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Amount, 				# Amount
					"LC",					# Module
					DisbursedTran, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					"", 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					EOD=EOD
				)
			
			if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
				Success, Message = mktleasing.leasingDisbursement(row,Inputter,Createdon,Authorizer,Authorizeon)

				if not Success:
					if EOD == 1:
						mktmessage.setLogError(Message)# Call method for error message
					else:
						return False,Message
			#Check after post accounting
			if EOD == 0:
				CheckPointObj = mktaccounting.setAccoutningCheckPoint('DrDirect',ID)
				if not CheckPointObj[0]:
					db.session.rollback()
					Message = CheckPointObj[1]
					if EOD == 1:
						mktmessage.setLogError(Message)# Call method for error message
					else:
						return False,Message
			# End Check point

			# Not allow system  post charge when authoize loan contract, charge option is 'Y' and charge mode = '1- up-front fee'
			NoCharge 	= mktsetting.getAppSetting('AUTH_NOT_CHARGE')
			if NoCharge == 'N' or NoCharge == '':

				# Check Loan Charge Booking
				ChargeBooking = mktcharge.bookingLoanCharge(LoanID, Currency, Account, AccCat, Branch, Resource,TranDate=TranDate,Authorizer=Authorizer)
				if ChargeBooking[0] == False:
					db.session.rollback()
					# Call method for error message
					Message = "Asset class not found."
					if EOD == 1:
						mktmessage.setLogError(Message)# Call method for error message
					else:
						return False,Message

			if Resource and Resource == "INAU":
				Update = MKT_LOAN_CONTRACT_INAU.query.get(LoanID)
			else:
				Update = MKT_LOAN_CONTRACT.query.get(LoanID)
				
			if Update:
				# Block Calculator AIR and II
				updateLoanBackDate(Update,Resource,AccSetting,PDParamObj,SystemBankDate,EOD=EOD)
				# End Block

				Update.DisbursedStat 	= 	'Y'
				Update.NextRunDate 		= 	str(SystemBankDate)
				db.session.add(Update)

				AssClass 				=	Update.AssetClass
				OutStandingAmount		=	Update.Amount
				LoanType 				=	Update.LoanType
				MoreThanOneYear 		=	Update.MoreThanOneYear
				Account 				=	Update.Account
				Currency 				=	Update.Currency
				TranDate 				=	SystemBankDate
				ID 						=	Update.ID
				Branch 					=	Update.Branch

				AssetClassID = str(AssClass) + "-" + str(Update.LoanProduct)
				ASS_CLASS = MKT_ASSET_CLASS.query.get(AssetClassID)

				if not ASS_CLASS :
					ASS_CLASS =	MKT_ASSET_CLASS.query.get(AssClass)

				if not ASS_CLASS:
					# Call method for error message
					Message = "Asset class not found."
					if EOD == 1:
						mktmessage.setLogError(Message)# Call method for error message
					else:
						return False,Message

				else:

					ProvExpCat			=	ASS_CLASS.ProvExpCat
					ProResvCat			=	ASS_CLASS.ProResvCat
					ProAssetClassObj 	= 	MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID.ilike('%-' + Disbursed.LoanProduct)).first()
					ProAssetClass		= 	'%s-%s'%(AssClass,Disbursed.LoanProduct) if ProAssetClassObj else AssClass
					
					ProvisionAmount 	= 	mktpd.getProvisioningAmount(ProAssetClass, OutStandingAmount, LoanType, MoreThanOneYear, 0)
					# Booking Provisioning To New Class
					mktpd.provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, Account, Currency, TranDate, ID, Branch, AssClass, AccSetting, ReportingRateObj,EOD=EOD)

				if not LCID:
					db.session.commit()

				print_msg = "%s has been disbursed successfully." %ID
				mktmessage.msgOutputMsg(print_msg)
				
				if EOD == 1:
					db.session.commit()
			else:
				# Call method for error message
				Message = "Loan contract %s not found in System."%ID
				if EOD == 1:
					mktmessage.setLogError(Message)# Call method for error message
				else:
					return False,Message
		else:
			# print "No contract was scheduled for disbursement today."
			print_msg = "No contract was scheduled for disbursement today."
			mktmessage.msgOutputMsg(print_msg)
	except Exception as e:
		db.session.rollback()
		db.session.close_all()
		raise e

# Method for update loan outstanding amount by ID
def setUpdateOutstandingAmount(LoanContractObj):
	try:

		
		if LoanContractObj:
			PDID 		=	"PD" + str(LoanContractObj.ID)
			ODAmount 	=	mktpd.getTotODAmount(PDID)
			LoanContractObj.OutstandingAmount = float(LoanContractObj.Amount) + float(ODAmount)
			db.session.add(LoanContractObj)

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def getLoanForCollection(LoanID='', Stat='', Limit='', OffSet='',Date=''):
	try:
		if Date:
			EOD_DATE 	= Date
		else:
			EOD_DATE 	= mktdate.getBankDate()

		if LoanID:
			SCH_REP 	= 	MKT_REP_SCHEDULE.query.\
							filter(MKT_REP_SCHEDULE.CollectionDate == str(EOD_DATE)).\
							filter(MKT_REP_SCHEDULE.RepStatus == '0').\
							filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
							order_by(MKT_REP_SCHEDULE.LoanID.asc())
		else:
			if Limit:
				SCH_REP 	= 	MKT_REP_SCHEDULE.query.\
							filter(MKT_REP_SCHEDULE.CollectionDate == str(EOD_DATE)).\
							filter(MKT_REP_SCHEDULE.RepStatus == '0').\
							order_by(MKT_REP_SCHEDULE.LoanID.asc()).\
							limit(Limit).offset(0).all()
			else:
				SCH_REP 	= 	MKT_REP_SCHEDULE.query.\
							filter(MKT_REP_SCHEDULE.CollectionDate == str(EOD_DATE)).\
							filter(MKT_REP_SCHEDULE.RepStatus == '0').\
							order_by(MKT_REP_SCHEDULE.LoanID.asc())

		if Stat == "1": 
			SCH_REP	=	SCH_REP.count()

		return SCH_REP

	except Exception as e:
		raise

def runLoanCollectionThread():
	try:
		Count 	=	getLoanForCollection(Stat="1")
		Process =	mktthread.runMultiprocessing(getLoanForCollection,setLoanCollection, Count,PassField='LoanID',Param1={},Param2={'LC_Count':Count,'EODT':1})
		
		# Process Journal and Console Balance
		mktjournaltool.processJournalAndConsoleBalanceBooking()

	except Exception as e:
		raise 

def setLoanCollection(LoanID="", EOD=1, Stat="", Date="", ManualCollect=False, ManualCollectID='',LC_Count="", **kwargs):
	try:

		NumOfRecord 	= 0
		NumOfBadRecord 	= 0
		ID 				= ""
		TrueOrFalse 	= "1"
		ID 				= ""
		if EOD == 0:
			EOD = kwargs.get('EODT',0)
		
		# EOD_DATE 	= 	mktdate.getBankDate()
		if Date:
			EOD_DATE 	= Date
		else:
			EOD_DATE 	= mktdate.getBankDate()

		AccSetting 		= mktsetting.getAccSetting()
		AccrIntOption	= AccSetting.AccrIntOption

		NextRunDate = 	mktdate.getBankDateObj().NextSystemDate
		NextRunDate = 	NextRunDate.strip()

		Note  	= 	''
		if LoanID:
			Note  	=	'Manual Collection' if ManualCollect == True else ''

		if LC_Count == "":
			LC_Count = getLoanForCollection(LoanID=LoanID, Stat="1")

		if Stat == "1":
			return LC_Count

		SCH_REP = getLoanForCollection(LoanID=LoanID)
		# Check if no record set progress bar done.
		mktbjstat.calCompletedPer('LC', 0, 1, 0)

		if SCH_REP:

			# Get Parameter from Setting
			AccSetting 			= mktsetting.getAccSetting()
			BookOption 			= AccSetting.AccrIntBooking
			PDParamObj 			= mktparam.getPDParam() # Get Re-payment Order.
			RepOrder 			= PDParamObj.RepOrder.split()
			LoanProductObj 		= MKT_LOAN_PRODUCT.query
			ReportingRateObj 	= mktaccounting.getReportingRateObj()
			AssetClassObj 		= 	MKT_ASSET_CLASS.query
			# End Setting

			"""
				Block Validation Of Setting

			"""
			AmortizationBase 	=	mktsetting.getAppSetting('AmortizationBase')
			if not AmortizationBase :  # Default Base on Charge Collection Date
				AmortizationBase = 'C'

			LoanDailyAccrLog = "Y" # Default Allow Log Accr Int

			"""
				Define for BJ Stat
			"""
			JobStatus 	=	[]
			
			for row in SCH_REP:

				# Block update BjStat
				if EOD:
					JobStatus 	=	mktbjstat.updateCompletedJobStatus('LoanCollection', LC_Count, JobStatus)
				# End Block

				ID 			= 	row.LoanID
				Principal 	= 	float(row.Principal)  # Define Principal
				Interest 	= 	float(row.Interest)   # Define Interest
				ChargeAmount= 	float(row.Charge)	  # Define Charge
				#LoanBalance = 	float(row.Balance)	  # Define Loan Balance
				Total 		= 	Principal + Interest + ChargeAmount					# Define Total = Principal + Interest
				AccBal 		= 	0
				
				TranDate 	= 	row.CollectionDate
				Mode 		= 	""
				PayPri 	 	= 	0
				PayCharge 	=	0
				PayInt 		= 	0

				PD_Penalty 		= 0
				PD_Charge 		= 0
				PD_Interest 	= 0
				PD_Principal 	= 0
				DueDate 		= row.CollectionDate

				LoanContract = MKT_LOAN_CONTRACT.query.get(ID)		# Lookup MKT_LOAN_CONTRACT record
				if LoanContract:
					Currency 	= 	LoanContract.Currency
					Branch 		= 	LoanContract.Branch
					LC_PRODUCT 	= 	LoanContract.LoanProduct
					CustomerID	=	LoanContract.ContractCustomerID
					LCID 		=	LoanContract.ID
					AssClass 	=	LoanContract.AssetClass
					Suspend 	=	LoanContract.Suspend
					Installment =	LoanContract.Installment
					print LCID,'LCID'
					Account = MKT_ACCOUNT.query.get(LoanContract.Account) 	# Lookup MKT_ACCOUNT record
					if Account:
						# get Account Balance
						Customer 	= Account.CustomerList
						AccBal 		= float(Account.AvailableBal)
						AccountID 	= Account.ID
						AccCategory = Account.AccCategory
						AccProduct 	= Account.AccProduct

						NumOfRecord += 1
						
						# Get GL Key from setting
						Settingk1	= AccSetting.GL_KEY1
						Settingk2 	= AccSetting.GL_KEY2
						Settingk3 	= AccSetting.GL_KEY3
						Settingk4 	= AccSetting.GL_KEY4
						Settingk5 	= AccSetting.GL_KEY5
						Settingk6 	= AccSetting.GL_KEY6
						Settingk7 	= AccSetting.GL_KEY7
						Settingk8 	= AccSetting.GL_KEY8
						Settingk9 	= AccSetting.GL_KEY9

						k1 = mktkey.getResultKey(Settingk1, LCID, CustomerID)
						k2 = mktkey.getResultKey(Settingk2, LCID, CustomerID)
						k3 = mktkey.getResultKey(Settingk3, LCID, CustomerID)
						k4 = mktkey.getResultKey(Settingk4, LCID, CustomerID)
						k5 = mktkey.getResultKey(Settingk5, LCID, CustomerID)
						k6 = mktkey.getResultKey(Settingk6, LCID, CustomerID)
						k7 = mktkey.getResultKey(Settingk7, LCID, CustomerID)
						k8 = mktkey.getResultKey(Settingk8, LCID, CustomerID)
						k9 = mktkey.getResultKey(Settingk9, LCID, CustomerID)

						# print "==== Run In Loan Collection"
						# Checking Charge Amortization
						if not AmortizationBase  or AmortizationBase == 'C':
							ChargeAmortization = mktcharge.bookingChargeAmortization(ID, Currency, Branch, Installment,EOD=EOD)
							if ChargeAmortization[0] == False:
								mktmessage.setLogError(ChargeAmortization[1])

						if LoanContract.MaturityDate == TranDate and AmortizationBase == 'E':
							ChargeAmortization = mktcharge.bookingChargeAmortization(ID, Currency, Branch, Installment, LoanContractObj=LoanContract,LastCollection=True,EOD=EOD)
							if ChargeAmortization[0] == False:
								mktmessage.setLogError(ChargeAmortization[1])

						for p in RepOrder:#Param

							if p.upper() == "CH":

								if AccBal >= ChargeAmount :
									Amount = float(ChargeAmount)
								else :
									Amount 		= float(AccBal)
									PD_Charge 	= float(ChargeAmount) - float(AccBal)

								PayCharge 	= float(Amount)
								AccBal 		= float(AccBal) - float(Amount)

								# Call Charge Collection
								Transaction = AccSetting.ChargeTran
								mktcharge.setChargeCollection(Branch=Branch, LoanID=ID, Account=AccountID, AccCategory=AccCategory, Currency=Currency, AccSetting=AccSetting,
															 ChargeCollect=Amount, TotalCollect= ChargeAmount, Transaction=Transaction, TransactionDate=TranDate, Suspend=Suspend,Note=Note,ManualCollectID=ManualCollectID,EOD=EOD)
								
								
							if p.upper() == 'IN':
								
								if float(Interest) > 0:
									if AccBal >= Interest :
										Amount = float(Interest)
									else :
										Amount 		= float(AccBal)
										PD_Interest = float(Interest) - float(AccBal)

									PayInt 		= float(Amount)
									LC_Pro 		= LoanProductObj.get(LC_PRODUCT)
									Termination = False
									AccCategory = Account.AccCategory

									setInterestCollection(Termination,AccSetting,PDParamObj,LC_Pro,ReportingRateObj,LoanContract,Interest,AccCategory,AccBal,TranDate,Note=Note,ManualCollectID=ManualCollectID,EOD=EOD)
									
									AccBal 		= float(AccBal) - float(Amount)

							if p.upper() == 'PR':
								
								if float(Principal) != 0:
									AccCategory = Account.AccCategory
									if AccBal >= Principal :
										Amount = Principal
									else :
										Amount = AccBal
										PD_Principal = float(Principal) - float(AccBal)

									AccBal = float(AccBal) - float(Amount)
									PayPri = float(Amount)
									Transaction = AccSetting.PrincipalTran

									"""
										Notes By : Sovankiry / Last Update: 16 September 2016
										Case booking Debit Drawdown Account with Principal for Principal collection
										 
											Debit - Drawdown Account 	Principal Collection 	xxxx

											   Credit - LO Category 	Principal Collection 			xxxx
									"""

									setPrincipalCollection(AccSetting,LoanContract,Amount,AccountID,AccCategory,Currency,
									Transaction,TranDate,AssClass,ID,Note=Note,ManualCollectID=ManualCollectID,EOD=EOD)

									
						Total_PD 	= float(PD_Principal) + float(PD_Interest) + float(PD_Charge) + float(PD_Penalty)
						Category 	= LoanContract.Category.strip()
						PDID = "PD" + str(ID)
						Total_PD	=	float(mktmoney.formatNumber(Total_PD,1,5).replace(',',''))
						if Total_PD > 0:
							PDParamByProduct = mktparam.getPDParam(LoanContract.LoanProduct)
							PenaltyType = PDParamByProduct.PenType.strip()
							PenaltyRate = PDParamByProduct.PenaltyRate.strip()
							mktpd.setPD(PDID, Customer, Currency, Category, PenaltyType,
										  PenaltyRate, DueDate, PD_Principal, PD_Interest,
										  PD_Charge, PD_Penalty, NextRunDate, ID, Branch, RepOrder,row.No,ManualCollect=ManualCollect,AccrIntOption=AccrIntOption)

						updateAccrCurrInt(LoanContract, Principal)

						# row.NextRunDate = NextRunDate
						# Update repayment schedule status
						PaymentAm 		= float(PayPri) + float(PayInt) + float(PayCharge)

						# if float(Total) == float(PaymentAm):
						# 	row.RepStatus 	= '3'
						# elif float(PaymentAm) == 0:
						# 	row.RepStatus 	= '1'
						# else:
						# 	row.RepStatus 	= '2'

						"""
							Note By : Mengkheang / Last Update 19 April 2017

							Update wrong rep status cause of Python floating point precision.

							Example

								import numpy as np 

								interest = 43.56
								principle = 116.67
								charge = 0

								collect = 160.23

								total = interest + principle + charge

								print collect == total
								print np.isclose(float(collect),float(total))

							Output

								False
								True

						"""

						if np.isclose(float(Total), float(PaymentAm)):
							row.RepStatus 	= '3'
						elif float(PaymentAm) == 0:
							row.RepStatus 	= '1'
						else:
							row.RepStatus 	= '2'

						row.PartPaidAmt 	= float(PaymentAm)
						db.session.add(row)

						# Update Last Outstanding Amount
						setUpdateOutstandingAmount(LoanContract)
						mktpd.bookProvision(LoanContract,AccSetting, ReportingRateObj, AssetClassObj, TranDate, NextRunDate,EOD=EOD)
						
						# Commit to DB per loan procceed
						db.session.commit()
						if float(Total) == float(PaymentAm):
							# print "%s Full amount was collected: %s." %(ID, str(PaymentAm))
							print_msg = "%s Full amount was collected: %s." %(ID, str(PaymentAm))
							print print_msg
						elif float(PaymentAm) < float(Total) and float(PaymentAm) > 0:
							# print "%s Partial amount was collected: %s." %(ID, str(PaymentAm))
							print_msg = "%s Partial amount was collected: %s." %(ID, str(PaymentAm))
							print print_msg
						else:
							# print "%s No amount was collected." %ID
							print_msg = "%s No amount was collected." %ID
							print print_msg

						
						TrueOrFalse = True

					else:
						# Call method for error message
						error_msg = "Account not found."
						mktmessage.setLogError(error_msg)
				else:
					# print "Loan contract not found."
					error_msg = "Loan contract %s not found."%ID
					mktmessage.setLogError(error_msg)
		
		
			# print mktmessage.getTextMsg("000001")
			print ID,"Loan collection was successfully completed."
		else:
			print "No loan collection today."

		if LoanID:
			# Loan Classification
			mktpd.loanClassification(LoanID)
		# else:
		# 	# Loan Classification
		# 	mktpd.runClassificationThread()

		# Clear Query Object
		del SCH_REP

		if EOD == 1:
			db.session.commit()
			return ""
		else:
			return TrueOrFalse

	except Exception, e:
		print e
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		db.session.close_all()
		raise

"""
	Appyy Multi Currency
"""

def getInterestMultiCurrency(AccSetting,ReportingRateObj,Branch,Currency,Amount,DicEquivalent={}):

	"""
		If Interest in foreign Currency will be convert to local Currency and amount.
		DicEquivalent using sum amount of equivalent for booking.
	"""
	try:
		BaseCurrency 	= AccSetting.BaseCurrency

		CheckInterestFCY = mktaccounting.isFCY(BaseCurrency,Currency)
		# if CheckInterestFCY:
			

		# 	# Get the Key Of Equivalent
		# 	KeyEquivalent = "%s %s"%(Branch,Currency)

		# 	# Calculate local amount
		# 	LCYAmount 	  = float(Amount) * float(ReportingRateObj.get(Currency))
		# 	# print "LCYAmount",LCYAmount

		# 	# Update Sum amount
		# 	EquivalentAmount = DicEquivalent.get(KeyEquivalent,0) + float(Amount)
			
		# 	# Update Dictionary with new amount
		# 	DicEquivalent.update({KeyEquivalent:EquivalentAmount})

		# 	return DicEquivalent, BaseCurrency , LCYAmount
		# else:
		return DicEquivalent,  Currency, Amount
		

	except Exception, e:
		raise
	else:
		pass
	finally:
		pass

def setPenaltyCollection(**kwargs):
	""" Collect Penalty from loan arrear"""
	try:
		Branch 	   		= kwargs['Branch']
		ID 		   		= kwargs['LoanID']
		Currency   		= kwargs['Currency']
		Account 		= kwargs['Account']
		AccCategory 	= kwargs['AccCategory']
		Transaction 	= kwargs['Transaction']
		TranDate 		= kwargs['TranDate']
		Reference 		= kwargs['Reference'] if 'Reference' in kwargs else ID
		Amount 			= kwargs['Amount']
		PenaltyCat 		= kwargs['PenaltyCat']
		Note 			= ""
		if Amount > 0:

			for i in range(0, 2):
				if i == 0:
					DrCr 		= 	"Dr"
					Mode 		= 	""
					Category 	= 	AccCategory

				else:

					DrCr 		= 	"Cr"
					Mode 		= 	"Direct"
					Category 	= 	PenaltyCat
				
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
				DateTimeNow = mktdate.getDateTimeNow()
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					"PD",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					Reference, 				# Reference
					"", 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)
			# Post VAT
			VATOnOff 	= mktsetting.getAppSetting('MEGA_VAT_NO_OFF')
			if VATOnOff == "Y":
				LCObj = MKT_LOAN_CONTRACT.query.get(ID)
				if LCObj:
					if LCObj.VAT == '2':
						PDParamObj = MKT_PD_PARAM.query.get('SYSTEM')
						if PDParamObj:
							if PDParamObj.Tax !=None:
								TaxObj = MKT_TAX.query.get(PDParamObj.Tax)
								if TaxObj:
									DrCr 		= 	"Cr"
									Mode 		= 	"Direct"
									Category 	= 	TaxObj.Category
									Amt 		= 	(Decimal(Amount) * Decimal(TaxObj.Rate))/110
									# Amt   		= 	mktmoney.toMoney(float(Amt), mktmoney.getCurrencyObj(Currency))
									# Amt   		= 	float(Amt.replace(",",""))
									# print "VAT Amount:",Amt
									Note 		=   "VAT on penalty"
									GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
									DateTimeNow = mktdate.getDateTimeNow()
									mktaccounting.postAccounting(
										"AUTH", 				# Status
										"0", 					# Curr
										"System",				# Inputter
										DateTimeNow, 			# Createdon
										"System",				# Authorizer
										DateTimeNow,			# Authorizeon
										"", 					# AEID
										Account,				# Account
										Category,				# Category
										Currency,				# Currency
										DrCr,					# DrCr
										Decimal(Amt), 		    # Amount
										"PD",					# Module
										Transaction, 			# Transaction
										TranDate, 				# TransactionDate
										Reference, 				# Reference
										Note, 					# Note
										"", 					# JNID
										Branch,					# Branch
										GL_KEYS,				# GL_KEYS
										Mode 					# Mode check to insert Journal for category
									)
				# End Posting
	except Exception as e:
		print "hello world",e
		raise
	else:
		pass
	finally:
		pass

def setPrincipalCollection(AccSetting,LoanObj,Principal,AccountID,AccCategory,Currency,
							Transaction,TranDate,AssetClass,Reference,Note='',ManualCollectID='',EOD=0):
	"""
		Created By : Sovankiry Rim / Last Update: 16 September 2016
		Case book accounting for principal collection

			Debit Draw Down Account 		Principal Collection 		xxxx

				Credit -  LO Category 		Principal Collection 					xxxx

	"""
	try:

		if Principal > 0:

			Branch 		= LoanObj.Branch
			LoanID 		= LoanObj.ID
			CustomerID 	= LoanObj.ContractCustomerID

			# Get GL Key from setting
			Settingk1	= AccSetting.GL_KEY1
			Settingk2 	= AccSetting.GL_KEY2
			Settingk3 	= AccSetting.GL_KEY3
			Settingk4 	= AccSetting.GL_KEY4
			Settingk5 	= AccSetting.GL_KEY5
			Settingk6 	= AccSetting.GL_KEY6
			Settingk7 	= AccSetting.GL_KEY7
			Settingk8 	= AccSetting.GL_KEY8
			Settingk9 	= AccSetting.GL_KEY9

			k1 = mktkey.getResultKey(Settingk1, LoanID, CustomerID)
			k2 = mktkey.getResultKey(Settingk2, LoanID, CustomerID)
			k3 = mktkey.getResultKey(Settingk3, LoanID, CustomerID)
			k4 = mktkey.getResultKey(Settingk4, LoanID, CustomerID)
			k5 = mktkey.getResultKey(Settingk5, LoanID, CustomerID)
			k6 = mktkey.getResultKey(Settingk6, LoanID, CustomerID)
			k7 = mktkey.getResultKey(Settingk7, LoanID, CustomerID)
			k8 = mktkey.getResultKey(Settingk8, LoanID, CustomerID)
			k9 = mktkey.getResultKey(Settingk9, LoanID, CustomerID)


			# Debit Drawdown Account 
			DateTimeNow = mktdate.getDateTimeNow()
			Category 	= AccCategory
			DrCr 		= "Dr"
			Mode 		= ""
			AllowEquivalent 	= False # False Mean that not allow book Equivalence and Position Account.

			GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
			# Debit Customer Account
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				AccountID,				# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Principal), 	# Amount
				"LC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				Reference, 				# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				AllowEquivalent=AllowEquivalent,
				UserReference=ManualCollectID, 	# UserReference
				EOD=EOD
			)

			# Credit Loan Category
			Category 	= LoanObj.Category
			DrCr 		= "Cr"
			Mode 		= "Direct"

			GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
			# Cradit LC Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Principal), 	# Amount
				"LC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				Reference, 				# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				AllowEquivalent=AllowEquivalent,
				UserReference=ManualCollectID, 	# UserReference
				EOD=EOD
			)
			print Reference,'principal was collected. Amount',mktmoney.formatNumber(float(Principal))
			
			#For leasing Collect VAT 
			if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y" and LoanObj.VATCollectionOption == "Y":

				DateTimeNow = mktdate.getDateTimeNow()
				
				LP_Obj = MKT_LOAN_PRODUCT.query.get(LoanObj.LoanProduct)

				if not LP_Obj.Tax:
					error_msg = "Loan Prooduct Tax does not found!"
					return mktmessage.msgError(0, error_msg)

				#Call function Collect VAT
				IsCollected, Message = mktleasing.VATCollection(
					Reference,				#Reference ID
					LoanObj.Vendor,			#Vendor ID
					LP_Obj.Tax,				#Tax ID
					Currency,				#Currency ID
					Principal,				#Amount
					"System",				#Inpuuter
					DateTimeNow,			#DateInput
					"System",				#Authorizer
					DateTimeNow,			#DateAuthorize
					TranDate,				#Transaction Date
					Branch)					#Branch
				
				if not IsCollected:
					print Message
					error_msg = Message
					return mktmessage.msgError(0, error_msg)
				
	except Exception, e:

		raise

def setInterestCollection(Termination,AccSetting,PDParamObj,LoanProductObj,ReportingRateObj,LoanContract,Interest,AccCategory,AccBal,TranDate,Note='',ManualCollectID='',EOD=0):
	
	# print "Here In set InterestCollection"
	LoanDailyAccrLog = "Y" # Default Allow Log Accr Int

	ID 			= LoanContract.ID
	CustomerID 	= LoanContract.ContractCustomerID
	Suspend 	= LoanContract.Suspend
	AssClass 	= LoanContract.AssetClass
	Currency 	= LoanContract.Currency
	LoanProduct = LoanContract.LoanProduct
	LoanType 	= LoanContract.LoanType
	Branch 		= LoanContract.Branch
	BookOption 	= AccSetting.AccrIntBooking
	DateTimeNow = mktdate.getDateTimeNow()

	# Get GL Key from setting
	Settingk1	= AccSetting.GL_KEY1
	Settingk2 	= AccSetting.GL_KEY2
	Settingk3 	= AccSetting.GL_KEY3
	Settingk4 	= AccSetting.GL_KEY4
	Settingk5 	= AccSetting.GL_KEY5
	Settingk6 	= AccSetting.GL_KEY6
	Settingk7 	= AccSetting.GL_KEY7
	Settingk8 	= AccSetting.GL_KEY8
	Settingk9 	= AccSetting.GL_KEY9

	k1 = mktkey.getResultKey(Settingk1, ID, CustomerID)
	k2 = mktkey.getResultKey(Settingk2, ID, CustomerID)
	k3 = mktkey.getResultKey(Settingk3, ID, CustomerID)
	k4 = mktkey.getResultKey(Settingk4, ID, CustomerID)
	k5 = mktkey.getResultKey(Settingk5, ID, CustomerID)
	k6 = mktkey.getResultKey(Settingk6, ID, CustomerID)
	k7 = mktkey.getResultKey(Settingk7, ID, CustomerID)
	k8 = mktkey.getResultKey(Settingk8, ID, CustomerID)
	k9 = mktkey.getResultKey(Settingk9, ID, CustomerID)
	
	if float(Interest) > 0:

		if AccBal >= Interest :
			Amount = float(Interest)
		else :
			Amount 		= float(AccBal)

		
		PayInt 		= float(Amount)
		AccBal 		= float(AccBal) - float(Amount)
		AllowEquivalent 	= False # False Mean that not allow book Equivalence and Position Account.
		# print 'AccBal',AccBal,'Amount',Amount,ID
		
		"""
			Case booking Debit Drawdown Account with Int.Income
			for Interest Collection
		"""
		CollectedAmount = 0
		if Amount > 0:
			
			CollectedAmount = Amount
			AccountID 	= LoanContract.Account
			DrCr 		= 'Dr'
			Mode 		= ''
			Transaction = AccSetting.InterestTran # Interest Transaction
			GL_KEYS = mktaccounting.getConsolKey(AccCategory, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
			# Debit Customer Account
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				AccountID,				# Account
				AccCategory,			# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amount), 		# Amount
				"LC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				ID, 					# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				AllowEquivalent=AllowEquivalent,
				UserReference=ManualCollectID, 	# UserReference
				EOD=EOD
			)
			print ID,'interest was collected. Amount',mktmoney.formatNumber(float(Amount))
			
		PrevMonth 	= 	float(LoanContract.AccrIntPreMonth) 
		CurrMonth 	= 	float(LoanContract.AccrIntCurrMonth)
		IntIncomeToRev = 0
		
		if BookOption == '1':
			PrevMonth 	= 	float(LoanContract.AccrCurrentInt) 

		if float(PrevMonth) >= float(Interest):

			DifferentAmount 	= 	float(PrevMonth) - float(Interest)
			
			LCYDifferentAmount 	= 	DifferentAmount * float(ReportingRateObj.get(Currency))

			AIRtoReverse 		= 	float(PrevMonth) if float(Amount) >= float(PrevMonth) else (float(Amount) + DifferentAmount)
			
			IntIncomeToRev 		= 	float(DifferentAmount)

			LoanContract.AccrInterest 		= 	float(LoanContract.AccrInterest) - float(DifferentAmount)
			
			if Suspend.upper() == 'N':
				LoanContract.IntIncEarned 	=	float(LoanContract.IntIncEarned)  - float(LCYDifferentAmount)

			if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
				LoanContract.FCYIntIncEarned 	=	float(LoanContract.FCYIntIncEarned)  - float(DifferentAmount)
			
			# print 'PreMonth >='
			# print PrevMonth,Amount,DifferentAmount,Interest

			# Block Booking to table Daily Booking Log
			BookedAmount= -DifferentAmount
			# End Block

		else:
			DifferentAmount 				= 	float(Interest) - float(PrevMonth)
			
			LCYDifferentAmount 				= 	DifferentAmount * float(ReportingRateObj.get(Currency))

			AIRtoReverse 					= 	float(PrevMonth) if float(Amount) >= float(PrevMonth) else float(Amount)

			LoanContract.AccrInterest 		= 	float(LoanContract.AccrInterest) + float(DifferentAmount)
			
			if Suspend.upper() == 'N':
				LoanContract.IntIncEarned 	=	float(LoanContract.IntIncEarned) + float(LCYDifferentAmount)

				if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
					LoanContract.FCYIntIncEarned 	=	float(LoanContract.FCYIntIncEarned)  + float(DifferentAmount)
			
			# Block Booking to table Daily Booking Log
			BookedAmount= DifferentAmount
			# End Block
			# print "else PrevMonth"
			# print PrevMonth,Amount,DifferentAmount,Interest
			
		# Block Booking to table Daily Booking	
		RatePerYear = float(LoanContract.IRR) if LoanContract.IRR else float(LoanContract.InterestRate)
		BaseAmount 	= LoanContract.Amount
		Transaction = AccSetting.CrAccrIntTran
		ObjBooking 	= mktloanaccrual.setDailyBooking(	LoanDailyAccrLog=	LoanDailyAccrLog,
										Branch 			=	Branch,
										Customer 		=	CustomerID,
										Reference 		=	ID,
										BaseAmount 		=	BaseAmount,
										Rate 			= 	RatePerYear,
										Currency 		= 	Currency,
										BookedAmount 	=	BookedAmount,
										Module 			= 	"LC",
										Transaction 	=	Transaction,
										TransactionDate = 	TranDate)
			
		# End Block

		# AIR update with paid amount
		LoanContract.AccrInterest 			= 	float(LoanContract.AccrInterest) - float(Amount)
		
		LoanContract.AccrIntPreMonth 		= 	0 # After collected move AIR Premonth to zero(0)
		if not Termination: # Case if Terminate loan contract we don't have any info. just keep to history record.
			db.session.add(LoanContract)
		"""
			Notes by Sovankiry Rim. Date: 04 Oct 2016
			*** Definition ***
			AIRtoReverse 		: The Amount Of Accrued Interest Receivable Reversal 
		"""
		Amount 				=	(float(Amount) 		- float(AIRtoReverse)) if float(Amount) >= float(AIRtoReverse) else float(Amount)
		CurrIntIncome 		= 	(float(Interest) 	- float(PrevMonth)) if float(Interest) >= float(PrevMonth) else float(0)
		SettledIntIncome	=	float(CurrIntIncome) if float(Amount) >= float(CurrIntIncome) else float(Amount)
		NewIntReceivable 	=   float(Interest) 	- float(PrevMonth) - float(SettledIntIncome)
		
		# print 'AIRtoReverse',AIRtoReverse
		# print 'SettledIntIncome',SettledIntIncome
		# print 'IntIncomeToRev',IntIncomeToRev
		# print 'NewIntReceivable',NewIntReceivable

		"""
			Modify By : Sovankiry / Last Update: 16 September 2016

			Reverse AIR when client payment interest
		"""
		if AIRtoReverse > 0:
			
			Category 	= LoanProductObj.IntReceivableCate.strip()
			Transaction = AccSetting.CrAccrIntTran # Accrued Interest Receivable Reversal
			Mode 		= "Direct"
			DrCr 		= "Cr"
			
			if Transaction:
				# Credit Reverse Accrued Interest Category
				GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(AIRtoReverse), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					AllowEquivalent=AllowEquivalent,
					UserReference=ManualCollectID, 	# UserReference
					EOD=EOD
				)
				print "AIRtoReverse ", AIRtoReverse
				
			else:
				# Call method for error message
				error_msg = "Accrued interest reversal transaction not found."
				mktmessage.setLogError(error_msg)

			"""
				Added by sophiarith 2017-08-11
				reverse intest in suspend to interest income
			"""
			if CollectedAmount > 0:
				LC_Pro = MKT_LOAN_PRODUCT.query.get(LoanProduct)
				if LC_Pro:
					PDParam 	= 	mktparam.getPDParam() # Get PD Paramater Setting

					# Check if Loan is Suspend
					# Collection Suspend
					SuspendParam = { 'AccSetting' 	:AccSetting,
									'EOD' 			:EOD,
									'Suspend' 		:Suspend,
									'PDParam' 		:PDParam,
									'Amount' 		:CollectedAmount,
									'Note' 			:Note,
									'Branch' 		:Branch,
									'Currency' 		:Currency,
									'LC_Pro' 		:LC_Pro,
									'ID' 			:ID,
									'AssClass' 		:AssClass,
									'LoanContract' 	:LoanContract,
									'TranDate' 		:TranDate,
									'ReportingRateObj' 	:ReportingRateObj,
									'ManualCollectID' 	:ManualCollectID,
									'k1':k1, 'k2':k2, 'k3':k3, 'k4':k4, 'k5':k5, 'k6':k6, 'k7':k7, 'k8':k8, 'k9':k9
								}

					mktpd.getSuspendCollection(**SuspendParam)

					print "AIR to Reverse, CollectAmount", CollectedAmount

						
		"""
			Modify By : Sovankiry / Last Update: 16 September 2016
			Case Int.Income not booking enough when acrr daily.
			So we need to booking credit Int.Income more

			AIR Less than interest collection
		"""
		if SettledIntIncome > 0:

			#Get Category Int.Income or Interest In Suspend
			Category,GL_KEYS,IntCurrency,SettledIntIncome = getCategoryIntIncome(ReportingRateObj,PDParamObj,LoanProductObj,AccSetting,
																	Branch,Suspend,Currency,SettledIntIncome,AssClass,
																	k1, k2, k3, k4, k5, k6, k7, k8, k9)
			
			Transaction = AccSetting.InterestTran # Interest Collection
			Mode 		= "Direct"
			DrCr 		= "Cr"
			
			if Transaction:
				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					'',						# Account
					Category,				# Category
					IntCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(SettledIntIncome), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					UserReference=ManualCollectID, 	# UserReference
					EOD=EOD
				)
				# print "SettleIntIncome ", SettleIntIncome

			else:
				# Call method for error message
				error_msg = "Interest collection transaction not found."
				mktmessage.setLogError(error_msg)

		"""
			Modify By : Sovankiry / Last Update: 16 September 2016
			Case Int.Income more than interest in schedule.
			We need to reverse Int.Income

			AIR more than Interest Collection
		"""
		if IntIncomeToRev > 0:

			#Get Category Int.Income or Interest In Suspend
			Category,GL_KEYS,IntCurrency,IntIncomeToRev = getCategoryIntIncome(ReportingRateObj,PDParamObj,LoanProductObj,AccSetting,
																	Branch,Suspend,Currency,IntIncomeToRev,AssClass,
																	k1, k2, k3, k4, k5, k6, k7, k8, k9)	
			Transaction = AccSetting.IntRevTran #Interest Reversal Transaction
			Mode 		= "Direct"
			DrCr 		= "Dr"
			
			if Transaction:
				
				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					IntCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(IntIncomeToRev), # Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					UserReference=ManualCollectID, 	# UserReference
					EOD=EOD
				)
				print "IntIncomeToRev ", IntIncomeToRev

			else:
				# Call method for error message
				error_msg = "Interest collection transaction not found."
				mktmessage.setLogError(error_msg)
		
		"""
			Modify By : Sovankiry / Last Update: 16 September 2016
			Case client has not paid enough interest
			We need to reverse Int.Income and AIR
		"""
		if float(NewIntReceivable) > 0:
			
			Category = LoanProductObj.IntReceivableCate # Accrued Interest Receivable
			if not Category:
				# Call method for error message
				error_msg = "Interest receivable category not found."
				mktmessage.setLogError(error_msg)

		
			Transaction = AccSetting.DrAccrIntTran #Accrued Interest Receivable Booking
			Mode 		= "Direct"
			DrCr 		= "Dr"

			if Transaction:
				GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
				# Debit Accrued Interest Receivable Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(NewIntReceivable), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					UserReference=ManualCollectID, 	# UserReference
					EOD=EOD
				)
				print "NewIntReceivable ", NewIntReceivable

			else:
				# Call method for error message
				error_msg = "Interest collection transaction not found."
				mktmessage.setLogError(error_msg)
		

			#Get Category Int.Income or Interest In Suspend
			Category,GL_KEYS,IntCurrency,NewIntReceivable = getCategoryIntIncome(ReportingRateObj,PDParamObj,LoanProductObj,AccSetting,
																	Branch,Suspend,Currency,NewIntReceivable,AssClass,
																	k1, k2, k3, k4, k5, k6, k7, k8, k9)	
			Transaction = AccSetting.DrAccrIntTran #Accrued Interest Receivable Booking
			Mode 		= "Direct"
			DrCr 		= "Cr"

			if Transaction:
				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					IntCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(NewIntReceivable), 		# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					UserReference=ManualCollectID, 	# UserReference
					EOD=EOD
				)

				print "Int.Income or Interest In Suspend ", NewIntReceivable

			else:
				# Call method for error message
				error_msg = "Accrued interest booking transaction not found."
				mktmessage.setLogError(error_msg)

def getSimulateCollection(**kwargs):
	""" Simulate Report of collection """
	try:
		ID 		   		= kwargs['LoanID']
		TranDate 		= kwargs['TranDate']
		LoanObj 		= MKT_LOAN_CONTRACT.query.get(ID)
		if LoanObj:
			Account 	= LoanObj.Account
			Principal 	= LoanObj.Amount
			Acc
			PDID 	= 'PD%s'%ID
			PDObj 	= MKT_PAST_DUE.query.get(PDID)
			if PDObj:
				pass

	except Exception as e:
		raise
	else:
		pass
	finally:
		pass

def getCategoryIntIncome(ReportingRateObj,PDParamObj,LoanProductObj,AccSetting,Branch,
						Suspend,Currency,IntIncome,AssClass,k1, k2, k3, k4, k5, k6, k7, k8, k9):

	"""
		Get Int.Income and GLKey if loan in category belong to Interest in Suspend.
		We are change currency of interest income if loan in class 0 and 10 not in suspend
		but if loan move to suspend not change currency to base currency.
	"""

	# BaseCurrency =  AccSetting.BaseCurrency
	# if mktaccounting.isFCY(BaseCurrency,Currency) and Suspend.upper() == 'N':
	# 	IntIncome 	= Decimal(IntIncome) * ReportingRateObj.get(Currency)
	# 	Currency 	= BaseCurrency
		# print "isFCY"
	if Suspend.upper() == 'Y':
		Category 	= PDParamObj.SuspendCrCat
		GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
	else:
		Category 	= LoanProductObj.IntIncomeCate.strip() if hasattr(LoanProductObj,'IntIncomeCate') else LoanProductObj.IntIncomeCat.strip()
		GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
	
	if not Category:
		# Call method for error message
		error_msg = "Suspend credit or interest income category not found."
		mktmessage.setLogError(error_msg)
	# print Category,GL_KEYS,Currency,IntIncome
	return Category,GL_KEYS,Currency,IntIncome

def moveLoanToWOF(ID, Branch, TranDate, CustomerID, CustomerName, Currency,
				  Disbursed, Amount, TotODAmount, WOFAmount, Account,
				  TotPrincipalDue, TotInterestDue, TotPenaltyDue, TotChargeDue,
				  LC_ValueDate, MaturityDate, Officer ,WOFType = ''):

	Amount 			= Decimal(mktmoney.formatNumber(Amount,0,2))
	TotODAmount 	= Decimal(mktmoney.formatNumber(TotODAmount,0,2))
	WOFAmount 		= Decimal(mktmoney.formatNumber(WOFAmount,0,2))
	TotPrincipalDue = Decimal(mktmoney.formatNumber(TotPrincipalDue,0,2))
	TotInterestDue 	= Decimal(mktmoney.formatNumber(TotInterestDue,0,2))
	TotPenaltyDue 	= Decimal(mktmoney.formatNumber(TotPenaltyDue,0,2))
	TotChargeDue 	= Decimal(mktmoney.formatNumber(TotChargeDue,0,2))
	
	if Amount == Decimal(0) and TotODAmount == Decimal(0) and WOFAmount ==  Decimal(0) \
		and TotPrincipalDue ==  Decimal(0) and TotInterestDue ==  Decimal(0) and TotChargeDue ==  Decimal(0):
		return ""

	try:
		Amount 			= Decimal(mktmoney.formatNumber(Amount,0,5))
		WOFAmount 		= Decimal(mktmoney.formatNumber(WOFAmount,0,5))
		TotODAmount 	= Decimal(mktmoney.formatNumber(TotODAmount,0,5))
		TotChargeDue 	= Decimal(mktmoney.formatNumber(TotChargeDue,0,5))
		TotPenaltyDue 	= Decimal(mktmoney.formatNumber(TotPenaltyDue,0,5))
		TotInterestDue 	= Decimal(mktmoney.formatNumber(TotInterestDue,0,5))
		TotPrincipalDue = Decimal(mktmoney.formatNumber(TotPrincipalDue,0,5))
		
		if Amount == Decimal(0) and TotODAmount == Decimal(0) and WOFAmount ==  Decimal(0) \
			and TotPrincipalDue ==  Decimal(0) and TotInterestDue ==  Decimal(0) and TotChargeDue ==  Decimal(0):
			return ""

		DateTimeNow = mktdate.getDateTimeNow()
		WOF 		= MKT_WRITE_OFF.query.get(ID)
		# Add new record for MKT_LOAN_WRITTEN_OFF
		if not WOF:

			WOF = MKT_WRITE_OFF(
						Branch 		=	Branch,
						Status 		=	'AUTH',
						Curr 		=	'0',
						Inputter 	=	'System',
						Createdon 	=	DateTimeNow,
						Authorizer 	=	'System',
						Authorizeon =	DateTimeNow,
						ID 			=	ID,
						CustomerID 	=	CustomerID,
						CustomerName=	CustomerName,
						Currency 	=	Currency,
						Disbursed 	=	Disbursed,
						Balance 	=	Amount,
						OverdueAmt 	=	TotODAmount,
						WOFAmount 	=	WOFAmount,
						WOFType 	=	WOFType
					)

		db.session.add(WOF)

		WrittenOf = MKT_WRITE_OFF_DE.query.get(ID)
		if not WrittenOf:

			WrittenOf = MKT_WRITE_OFF_DE(
							Branch 			=	Branch,
							Status 			=	'AUTH',
							Curr 			=	'0',
							Inputter 		=	'System',
							Createdon 		=	DateTimeNow,
							Authorizer 		=	'System',
							Authorizeon 	=	DateTimeNow,
							ID 				=	ID,
							CustomerID 		=	CustomerID,
							CustomerName	=	CustomerName,
							AccountNumber	=	Account,
							Currency 		=	Currency,
							LoanDisbursed 	=	Disbursed,
							LoanBalance 	=	Amount,
							TotODAmount 	=	TotODAmount,
							TotPrincipalDue =	TotPrincipalDue,
							TotWOFPrincipal =	TotPrincipalDue,
							TotInterestDue 	=	TotInterestDue,
							TotWOFInterest 	=	TotInterestDue,
							TotPenaltyDue 	=	TotPenaltyDue,
							TotWOFPenalty 	=	TotPenaltyDue,
							TotChargeDue 	=	TotChargeDue,
							TotWOFCharge 	=	TotChargeDue,
							TotWOFAmount 	=	WOFAmount,
							ValueDate 		=	LC_ValueDate,
							MaturityDate 	=	MaturityDate,
							WOFDate 		=	TranDate,
							Officer 		=	Officer
						)

			db.session.add(WrittenOf)

		return ""

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def setLoanWriteOff(ID="", EOD=1, Stat="", Date=""):
	try:

		TrueOrFalse 	= "1"

		if Date:
			SystemBankDate 	= Date
		else:
			SystemBankDate 	= mktdate.getBankDate()

		WOFClass		= mktparam.getPDParam().WOFClass
		AccrChargeRevTran = mktcharge.getAccrChargeRevTran()

		Loan 		= 	db.session.query(
							MKT_LOAN_CONTRACT.ID, 
							MKT_LOAN_CONTRACT.Suspend, 
							MKT_LOAN_CONTRACT.ValueDate, 
							MKT_LOAN_CONTRACT.MaturityDate, 
							MKT_LOAN_CONTRACT.LoanProduct, 
							MKT_LOAN_CONTRACT.ContractCustomerID, 
							MKT_LOAN_CONTRACT.ContractOfficerID, 
							MKT_LOAN_CONTRACT.Disbursed, 
							MKT_LOAN_CONTRACT.Amount, 
							MKT_LOAN_CONTRACT.Currency, 
							MKT_LOAN_CONTRACT.AccrInterest, 
							MKT_LOAN_CONTRACT.AccrCurrentInt, 
							MKT_LOAN_CONTRACT.AssetClass, 
							MKT_LOAN_CONTRACT.Branch, 
							MKT_LOAN_CONTRACT.Category, 
							MKT_LOAN_CONTRACT.Account, 
							MKT_CUSTOMER.LastNameEn, 
							MKT_CUSTOMER.FirstNameEn, 
							MKT_ASSET_CLASS.ProResvCat, 
							MKT_ASSET_CLASS.ProvExpCat).\
						join(MKT_CUSTOMER, MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
						join(MKT_ASSET_CLASS, MKT_ASSET_CLASS.ID == MKT_LOAN_CONTRACT.AssetClass).\
						filter(MKT_LOAN_CONTRACT.AssetClass == WOFClass)

		if ID:
			Loan = Loan.\
				   filter(MKT_LOAN_CONTRACT.ID == ID)

		# Check for count loan write-off for today
		LC_Count = Loan.count()
		if Stat == "1":
			return LC_Count

		FlagID 	= ID
		Loan 	= Loan.all()

		# Check if no record set progress bar done.
		mktbjstat.calCompletedPer('LW', 0, 1, 0)

		if Loan:

			NumberOfCompleted 	= 	0
			RecordNumber 		=	0
			NumOfCompletedPerc 	=	0
			NumOfTransaction 	=	mktbjstat.setNumOfTransaction(LC_Count)

			for row in Loan:

				# Block update BjStat
				RecordNumber 		+= 1
				NumberOfCompleted 	+= 1

				if int(NumberOfCompleted) == int(NumOfTransaction) or int(RecordNumber) == int(LC_Count):
					NumOfCompletedPerc += float(mktbjstat.getPercPerTransaction(NumberOfCompleted, LC_Count))
					mktbjstat.calCompletedPer('LW', NumberOfCompleted, LC_Count, NumOfCompletedPerc)
					NumberOfCompleted = 0
					
				# End Block

				ID 				= 	row.ID
				AssClass 		=	row.AssetClass
				Currency 		= 	row.Currency
				Branch 			= 	row.Branch
				Category 		= 	row.Category
				Suspend 		=	row.Suspend
				Disbursed 		=	Decimal(row.Disbursed) if row.Disbursed else Decimal(0)
				Amount 			= 	Decimal(row.Amount) if row.Amount else Decimal(0)
				Account 		= 	row.Account
				AccrInterest 	=	Decimal(row.AccrInterest) if row.AccrInterest else Decimal(0)
				AccrCurrentInt 	=	Decimal(row.AccrCurrentInt) if row.AccrCurrentInt else Decimal(0)
				CustomerID 		=	row.ContractCustomerID
				CustomerName 	=	row.LastNameEn + " " + row.FirstNameEn
				LoanProduct 	=	row.LoanProduct
				LC_ValueDate 	=	row.ValueDate
				MaturityDate 	=	row.MaturityDate
				Officer 		=	row.ContractOfficerID
				Product 		=	MKT_LOAN_PRODUCT.query.get(LoanProduct)
				TotPrincipalDue =	Decimal(0)
				TotODAmount 	=	Decimal(0)
				TotChargeDue 	=	Decimal(0)
				TotPenaltyDue	=	Decimal(0)
				TotInterestDue 	=	Decimal(0)
				PastDueID 		=	"PD" + ID
				PD 				=	MKT_PAST_DUE.query.get(PastDueID)
				if PD:
					TotPrincipalDue	=	Decimal(PD.TotPrincipalDue) if PD.TotPrincipalDue else Decimal(0)
					TotODAmount 	=	Decimal(PD.TotODAmount) if PD.TotODAmount else Decimal(0)
					TotChargeDue 	=	Decimal(PD.TotChargeDue) if PD.TotChargeDue else Decimal(0)
					TotPenaltyDue 	=	Decimal(PD.TotPenaltyDue) if PD.TotPenaltyDue else Decimal(0)
					TotInterestDue 	=	Decimal(PD.TotInterestDue) if PD.TotInterestDue else Decimal(0)

				Tran 		= 	mktsetting.getAccSetting()
				Transaction = 	""
				ChargeTran 	= 	""
				TranDate 	= 	SystemBankDate
				WOFAmount 	=	Decimal(Amount) + Decimal(TotODAmount)

				ValueDate 	=	SystemBankDate

				if not Tran:
					# Call method for error message
					error_msg = "Please mktsetting up transaction type for loan disbursement before submit the record."
					TrueOrFalse = mktmessage.msgError(EOD, error_msg)

				else:

					k1 = Tran.GL_KEY1
					k2 = Tran.GL_KEY2
					k3 = Tran.GL_KEY3
					k4 = Tran.GL_KEY4
					k5 = Tran.GL_KEY5
					k6 = Tran.GL_KEY6
					k7 = Tran.GL_KEY7
					k8 = Tran.GL_KEY8
					k9 = Tran.GL_KEY9

					k1 = mktkey.getResultKey(k1, ID, CustomerID, "") if k1 else ""
					k2 = mktkey.getResultKey(k2, ID, CustomerID, "") if k2 else ""
					k3 = mktkey.getResultKey(k3, ID, CustomerID, "") if k3 else ""
					k4 = mktkey.getResultKey(k4, ID, CustomerID, "") if k4 else ""
					k5 = mktkey.getResultKey(k5, ID, CustomerID, "") if k5 else ""
					k6 = mktkey.getResultKey(k6, ID, CustomerID, "") if k6 else ""
					k7 = mktkey.getResultKey(k7, ID, CustomerID, "") if k7 else ""
					k8 = mktkey.getResultKey(k8, ID, CustomerID, "") if k8 else ""
					k9 = mktkey.getResultKey(k9, ID, CustomerID, "") if k9 else ""

					# Checking Charge Amortization
					ChargeAmortization = mktcharge.bookingChargeAmortization(ID, Currency, Branch, '0', 'Y')
					if ChargeAmortization[0] == False:
						error_msg 	= "%s." %ChargeAmortization[1]
						mktmessage.setLogError(error_msg)

					Transaction = mktsetting.getAccSetting().WOFTran
					if not Transaction:
						# Call method for error message
						error_msg = "Loan write-off transaction not found."
						TrueOrFalse = mktmessage.msgError(EOD, error_msg)
					else:
						if not Product:
							# Call method for error message
							error_msg = "Loan product not found."
							TrueOrFalse = mktmessage.msgError(EOD, error_msg)
						else:

							Param = mktparam.getPDParam().RepOrder
							Param = Param.split()
							for p in Param:

								if p.upper() == "CH":

									if float(TotChargeDue) > 0:

										# Block Charge Write Off
										ChargeParam = {'Branch':Branch, 'LoanID':ID,
														'Transaction':AccrChargeRevTran,
														'TransactionDate': TranDate, 
														'Currency':Currency,
														'Suspend':Suspend,
														}
										mktcharge.setChargeWriteOff(**ChargeParam)

								elif p.upper() == "IN":

									if Suspend.upper() == 'Y':
										Category 	= mktparam.getPDParam().SuspendCrCat
										GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
									else:
										Category 	= Product.IntIncomeCate.strip()
										GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)

									if not Category:
										# Call method for error message
										error_msg = "Interest income or suspend account category not found."
										TrueOrFalse = mktmessage.msgError(EOD, error_msg)

									if float(AccrInterest) > 0:
										DateTimeNow = mktdate.getDateTimeNow()
										DrCr 		= "Dr"
										Mode 		= "Direct"
										# Debit Interest Income Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											Account,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(AccrInterest), 	# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode 					# Mode check to insert Journal for category
										)

										Category 	= Product.IntReceivableCate.strip()
										if not Category:
											# Call method for error message
											error_msg = "Accreal interest receivable category not found."
											TrueOrFalse = mktmessage.msgError(EOD, error_msg)

										GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
										DateTimeNow = mktdate.getDateTimeNow()
										DrCr 		= "Cr"
										Mode 		= "Direct"
										# Credit Accrued Interest Receivable Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											Account,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(AccrInterest), 	# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode 					# Mode check to insert Journal for category
										)

								elif p.upper() == "PR":
								
									LoanAmmount = float(Amount) + float(TotPrincipalDue)
									DrCr 		= "Dr"
									Mode 		= "Direct"
									ProAssetClassObj= 	MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID.ilike('%-' + LoanProduct)).first()
									ProAssetClass	= 	'%s-%s'%(AssClass,LoanProduct) if ProAssetClassObj else AssClass
									AssetClass 	= MKT_ASSET_CLASS.query.get(ProAssetClass)
									Category 	= AssetClass.ProResvCat
									if not Category:
										# Call method for error message
										error_msg = "Loan loss reserved category not found."
										TrueOrFalse = mktmessage.msgError(EOD, error_msg)

									DateTimeNow = mktdate.getDateTimeNow()
									GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
									
									if float(LoanAmmount) > 0:
										# Debit Loan Loss Reserved
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											Account,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(LoanAmmount), 	# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode 					# Mode check to insert Journal for category
										)

										DrCr 		= "Cr"
										Category 	= row.Category
										if not Category:
											# Call method for error message
											error_msg = "Loan outstanding category not found."
											TrueOrFalse = mktmessage.msgError(EOD, error_msg)

										DateTimeNow = mktdate.getDateTimeNow()
										GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
										# Credit Loan Outstanding
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											Account,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(LoanAmmount), 	# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode 					# Mode check to insert Journal for category
										)


										#For Leasing Module
										LoanContractObj = MKT_LOAN_CONTRACT.query.get(ID)

										if not LoanContractObj:
											error_msg = "Loan Contract does not found!"
											TrueOrFalse = mktmessage.msgError(EOD, error_msg)

										if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y" and LoanContractObj.VATCollectionOption == "Y":
											VendorID = LoanContractObj.Vendor

											LoanProductObj = MKT_LOAN_PRODUCT.query.get(LoanProduct)

											#Check if LoanProduct object found
											if not LoanProductObj:
												error_msg = "Loan Contract Produdct does not found!"
												TrueOrFalse = mktmessage.msgError(EOD, error_msg)

											# Post VAT
											IsCollected, Message = mktleasing.VATCollection(
											ID,						#Reference ID
											VendorID,				#Vendor ID
											LoanProductObj.Tax,		#Tax ID
											Currency,				#Currency ID
											float(LoanAmmount),		#Amount
											"System",				#Inpuuter
											DateTimeNow,			#DateInput
											"System",				#Authorizer
											DateTimeNow,			#DateAuthorize
											TranDate,				#Transaction Date
											Branch)					#Branch
										
											if not IsCollected:
												print Message
												error_msg = Message
												return mktmessage.msgError(0, error_msg)

							# WOF = MKT_WRITE_OFF.query.get(ID)
							# # Add new record for MKT_LOAN_WRITTEN_OFF
							# if not WOF:

							# 	WOF = MKT_WRITE_OFF(
							# 				Branch 		=	Branch,
							# 				Status 		=	'AUTH',
							# 				Curr 		=	'0',
							# 				Inputter 	=	'System',
							# 				Createdon 	=	TranDate,
							# 				Authorizer 	=	'System',
							# 				Authorizeon =	TranDate,
							# 				ID 			=	ID,
							# 				CustomerID 	=	CustomerID,
							# 				CustomerName=	CustomerName,
							# 				Currency 	=	Currency,
							# 				Disbursed 	=	Disbursed,
							# 				Balance 	=	Amount,
							# 				OverdueAmt 	=	TotODAmount,
							# 				WOFAmount 	=	WOFAmount
							# 			)

							# db.session.add(WOF)

							# WrittenOf = MKT_WRITE_OFF_DE.query.get(ID)
							# if not WrittenOf:

							# 	WrittenOf = MKT_WRITE_OFF_DE(
							# 					Branch 			=	Branch,
							# 					Status 			=	'AUTH',
							# 					Curr 			=	'0',
							# 					Inputter 		=	'System',
							# 					Createdon 		=	TranDate,
							# 					Authorizer 		=	'System',
							# 					Authorizeon 	=	TranDate,
							# 					ID 				=	ID,
							# 					CustomerID 		=	CustomerID,
							# 					CustomerName	=	CustomerName,
							# 					AccountNumber	=	Account,
							# 					Currency 		=	Currency,
							# 					LoanDisbursed 	=	Disbursed,
							# 					LoanBalance 	=	Amount,
							# 					TotODAmount 	=	TotODAmount,
							# 					TotPrincipalDue =	TotPrincipalDue,
							# 					TotInterestDue 	=	TotInterestDue,
							# 					TotPenaltyDue 	=	TotPenaltyDue,
							# 					TotChargeDue 	=	TotChargeDue,
							# 					TotWOFAmount 	=	WOFAmount,
							# 					ValueDate 		=	LC_ValueDate,
							# 					MaturityDate 	=	MaturityDate,
							# 					WOFDate 		=	TranDate,
							# 					Officer 		=	Officer
							# 				)

							# 	db.session.add(WrittenOf)
							WOFType = "WOF"
							moveLoanToWOF(ID, Branch, TranDate, CustomerID, CustomerName, Currency,
										  Disbursed, Amount, TotODAmount+AccrCurrentInt, WOFAmount+AccrCurrentInt, Account,
										  TotPrincipalDue, TotInterestDue + AccrCurrentInt, TotPenaltyDue, TotChargeDue,
										  LC_ValueDate, MaturityDate, Officer, WOFType)

							# mktamt.moveLoanDataToHist(ID,True)
							DoubleRecordToHIST(ID)

							# print "%s was written-off successfully." %ID
							print_msg = "%s was written-off successfully." %ID
							mktmessage.msgOutputMsg(print_msg)

		else:
			# print "No loan for write-off today."
			print_msg = "No loan for write-off today."
			mktmessage.msgOutputMsg(print_msg)

		return ""

	except:
		db.session.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def setLoanRecovery(LoanID = "", RecID="", TranDate = "", Note = "", EOD=1):
	try:

		TrueOrFalse 	= "1"
		SystemBankDate	= 	mktdate.getBankDate()
		Recovery 		= 	db.session.query(MKT_WRITE_OFF_DE.ID, MKT_WRITE_OFF_DE.TotODAmount, MKT_WRITE_OFF_DE.TotWOFAmount, MKT_WRITE_OFF_DE.LoanBalance, MKT_WRITE_OFF_DE.Branch, MKT_WRITE_OFF_DE.Currency, MKT_ACCOUNT.AvailableBal, MKT_WRITE_OFF_DE.TotPrincipalDue, MKT_WRITE_OFF_DE.TotInterestDue, MKT_WRITE_OFF_DE.TotChargeDue, MKT_WRITE_OFF_DE.TotPenaltyDue, MKT_WRITE_OFF_DE.AccountNumber, MKT_ACCOUNT.AccCategory).\
							order_by(MKT_WRITE_OFF_DE.Authorizeon.asc()).\
							join(MKT_ACCOUNT, MKT_ACCOUNT.ID == MKT_WRITE_OFF_DE.AccountNumber).\
							filter(MKT_ACCOUNT.AvailableBal > 0)

		if LoanID:
			Recovery 	= 	Recovery.\
							filter(MKT_WRITE_OFF_DE.ID == LoanID)

		Recovery 		= 	Recovery.\
							all()

		if Recovery:
			for row in Recovery:

				RecoveryID 		= 	mktAutoID.setAutoID("SLR", 4, "MKT_LOAN_RECOVERY")
				RefID 			=	RecID
				if not RecID:
					RefID 		= 	RecoveryID
				
				ID 					=	row.ID
				Branch 				=	row.Branch
				AccCategory 		=	row.AccCategory
				Currency 			=	row.Currency
				Account 			= 	row.AccountNumber
				# print "Account: %s." %Account

				AccountBalance 		=	float(row.AvailableBal) if row.AvailableBal else float(0)
				Principal 			=	float(row.LoanBalance) if row.LoanBalance else float(0)
				TotPrincipalDue 	= 	float(row.TotPrincipalDue) if row.TotPrincipalDue else float(0)
				TotInterestDue 		=	float(row.TotInterestDue) if row.TotInterestDue else float(0)
				TotChargeDue 		=	float(row.TotChargeDue) if row.TotChargeDue else float(0)
				TotPenaltyDue 		=	float(row.TotPenaltyDue) if row.TotPenaltyDue else float(0)
				TotWOFAmount 		=	float(row.TotWOFAmount)

				RecoveryAmt 		=	float(0)

				PrincipalPaid 		=	0
				ODPrincipalPaid 	=	0
				ODInterestPaid 		=	0
				ODPenaltyPaid 		=	0
				ODChargePaid		=	0

				if float(AccountBalance) >= float(TotWOFAmount):
					AccountBalance = float(TotWOFAmount)

				Param = mktparam.getPDParam().FWOFRepOrder
				Param = Param.split()
				RecoveryAmount = {'PR': 0, 'IN': 0, 'PE': 0, 'CH': 0}
				RecoveryNote = {'PR': 'Principal', 'IN': 'Interes', 'PE': 'Penalty', 'CH': 'Charge'}
				for p in Param:
					if p.upper() == "PR":

						if float(RecoveryAmt) < float(AccountBalance):
							LoanOutstanding = Principal + TotPrincipalDue
							DiffAmount = float(AccountBalance) - float(RecoveryAmt)

							if float(DiffAmount) >= float(TotPrincipalDue):
								ODPrincipalPaid = float(TotPrincipalDue)
							else:
								ODPrincipalPaid = float(DiffAmount)

							RecoveryAmt = float(RecoveryAmt) + float(LoanOutstanding)
							RecoveryAmount.update({'PR':LoanOutstanding})

						if float(RecoveryAmt) >= float(AccountBalance):
							break

					elif p.upper() == "IN":

						if float(RecoveryAmt) < float(AccountBalance):
					
							DiffAmount = float(AccountBalance) - float(RecoveryAmt)

							if float(DiffAmount) >= float(TotInterestDue):
								ODInterestPaid = float(TotInterestDue)
							else:
								ODInterestPaid = float(DiffAmount)

							RecoveryAmt = float(RecoveryAmt) + float(ODInterestPaid)
							RecoveryAmount.update({'IN':ODInterestPaid})

						if float(RecoveryAmt) >= float(AccountBalance):
							break

					elif p.upper() == "CH":

						if float(RecoveryAmt) < float(AccountBalance):
					
							DiffAmount = float(AccountBalance) - float(RecoveryAmt)

							if float(DiffAmount) >= float(TotChargeDue):
								ODChargePaid = float(TotChargeDue)
							else:
								ODChargePaid = float(DiffAmount)

							RecoveryAmt = float(RecoveryAmt) + float(ODChargePaid)
							RecoveryAmount.update({'CH':ODChargePaid})

						if float(RecoveryAmt) >= float(AccountBalance):
							break

					else:

						if float(RecoveryAmt) < float(AccountBalance):
					
							DiffAmount = float(AccountBalance) - float(RecoveryAmt)

							if float(DiffAmount) >= float(TotPenaltyDue):
								ODPenaltyPaid = float(TotPenaltyDue)
							else:
								ODPenaltyPaid = float(DiffAmount)

							RecoveryAmt = float(RecoveryAmt) + float(ODPenaltyPaid)
							RecoveryAmount.update({'PE':ODPenaltyPaid})

						if float(RecoveryAmt) >= float(AccountBalance):
							break
				if float(RecoveryAmt) < float(AccountBalance):
					
					DiffAmount = float(AccountBalance) - float(RecoveryAmt)

					if float(DiffAmount) >= float(Principal):
						PrincipalPaid = float(Principal)
					else:
						PrincipalPaid = float(DiffAmount)

					RecoveryAmt = float(RecoveryAmt) + float(PrincipalPaid)

				RecoveryCat = mktparam.getPDParam().RecoveryCat
				if not RecoveryCat:
					# Call method for error message
					error_msg = "Loan recovery category not found."
					TrueOrFalse = mktmessage.msgError(EOD, error_msg)
				else:

					Transaction = mktsetting.getAccSetting().RecoveryTran
					if not Transaction:
						# Call method for error message
						error_msg = "Loan recovery transaction not found."
						TrueOrFalse = mktmessage.msgError(EOD, error_msg)
					else:

						for key, value in RecoveryAmount.items():

							PointNote = Note[:33] + '...' if len(Note) > 33 else Note
							Notes = RecoveryNote[key] + ' - ' + PointNote
							for i in range(0, 2):
								if i == 0:
									TranDate 	= TranDate
									DrCr 		= "Dr"
									Mode 		= ""
									Category 	= AccCategory
									DateTimeNow = mktdate.getDateTimeNow()
									GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
								else:
									DrCr 		= "Cr"
									Category 	= RecoveryCat
									if not Category:
										# Call method for error message
										error_msg = "Loan recovery category not found."
										TrueOrFalse = mktmessage.msgError(EOD, error_msg)
									GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
									DateTimeNow = mktdate.getDateTimeNow()
									Mode 		= "Direct"
									# Credit Income from Recovery Loan
								if value > 0:
									# Debit Customer Account
									mktaccounting.postAccounting(
										"AUTH", 				# Status
										"0", 					# Curr
										"System",				# Inputter
										DateTimeNow, 			# Createdon
										"System",				# Authorizer
										DateTimeNow,			# Authorizeon
										"", 					# AEID
										Account,				# Account
										Category,				# Category
										Currency,				# Currency
										DrCr,					# DrCr
										Decimal(value), 		# Amount
										"LR",					# Module
										Transaction, 			# Transaction
										TranDate, 				# TransactionDate
										LoanID, 				# Reference
										Notes, 					# Note
										"", 					# JNID
										Branch,					# Branch
										GL_KEYS,				# GL_KEYS
										Mode, 					# Mode check to insert Journal for category
										RecID 					# User Reference
									)
						# print "Booked."
						Update 			= 	MKT_WRITE_OFF_DE.query.get(ID)
						TotWOFAmount 	=	0
						if Update:
							# print "Update WOFAmount."
							TotODAmount 			= 	float(ODPrincipalPaid) + float(ODInterestPaid) + float(ODPenaltyPaid) + float(ODChargePaid)
							Update.LoanBalance 		= 	float(Update.LoanBalance) 		- float(PrincipalPaid)
							Update.TotPrincipalDue 	=	float(Update.TotPrincipalDue) 	- float(ODPrincipalPaid)
							Update.TotInterestDue 	=	float(Update.TotInterestDue) 	- float(ODInterestPaid)
							Update.TotPenaltyDue 	=	float(Update.TotPenaltyDue) 	- float(ODPenaltyPaid)
							Update.TotChargeDue 	=	float(Update.TotChargeDue)		- float(ODChargePaid)
							Update.TotODAmount 		=	float(Update.TotODAmount) 		- float(TotODAmount)
							Update.TotWOFAmount 	=	float(Update.TotWOFAmount) 		- float(RecoveryAmt)
							TotWOFAmount 			= 	float(Update.TotWOFAmount) if Update.TotWOFAmount else float(0)
							db.session.add(Update)
						
						if float(AccountBalance) > float(RecoveryAmt):
							AccBal 	= float(RecoveryAmt)
						else:
							AccBal 	= float(AccountBalance)

						if not RecID:
							# print "Recovery Record saved."
							AddRecovery = MKT_LOAN_RECOVERY(
												Branch 			=	Branch,
												Status 			=	'AUTH',
												Curr 			=	'0',
												Inputter 		=	'System',
												Createdon 		=	TranDate,
												Authorizer 		=	'System',
												Authorizeon 	=	TranDate,
												ID 				=	RecoveryID,
												LoanID 			=	ID,
												AccountID 		=	Account,
												Currency 		=	Currency,
												AccBalance 		=	AccBal,
												RecoveryAmt 	=	RecoveryAmt
											)

							db.session.add(AddRecovery)

						if TotWOFAmount == 0:
							mktaudit.moveAUTHtoHIST(MKT_WRITE_OFF_DE, MKT_WRITE_OFF_DE_HIST, ID)
							mktaudit.deleteAUTH(MKT_WRITE_OFF_DE, ID)

						if float(AccountBalance) >= float(RecoveryAmt):
							# print "%s Full amount was recovered: %s." %(ID, mktmoney.toMoney(float(RecoveryAmt), mktmoney.getCurrencyObj(Currency)))
							print_msg = "%s Full amount was recovered: %s." %(ID, mktmoney.toMoney(float(RecoveryAmt), mktmoney.getCurrencyObj(Currency)))
							mktmessage.msgOutputMsg(print_msg)
						elif float(AccountBalance) < float(RecoveryAmt) and float(AccountBalance) > 0:
							# print "%s Partial amount was recovered: %s." %(ID, mktmoney.toMoney(float(RecoveryAmt), mktmoney.getCurrencyObj(Currency)))
							print_msg = "%s Partial amount was recovered: %s." %(ID, mktmoney.toMoney(float(RecoveryAmt), mktmoney.getCurrencyObj(Currency)))
							mktmessage.msgOutputMsg(print_msg)
						else:
							# print "%s No amount was recovered." %ID
							print_msg = "%s No amount was recovered." %ID
							mktmessage.msgOutputMsg(print_msg)
		else:
			# print "No loan write-off for recovery today."
			print_msg = "No loan write-off for recovery today."
			mktmessage.msgOutputMsg(print_msg)

		return ""

	except:
		db.session.rollback()
		raise

def getSuspendOrIncomeCat(**kwargs):
	""" Get Category of int.income or interest in suspend of loan 
		Ex: getSuspendOrIncome(LoanID='LC17020300001')
			=> If loan in sub-standard category will be return to interest in suspend
			else:
				return int.income category
	"""
	LoanID = kwargs.get('LoanID')
	LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	if LoanObj:
		Currency 			= LoanObj.Currency
		Suspend          	= LoanObj.Suspend
		LoanProduct      	= LoanObj.LoanProduct
		AssetClass         	= LoanObj.AssetClass
		CustomerID 			= LoanObj.ContractCustomerID
		PDParamObj         	= mktparam.getPDParam()
		LoanProductObj     	= MKT_LOAN_PRODUCT.query.get(LoanProduct)

		AccSetting = mktsetting.getAccSetting()
		k1 = AccSetting.GL_KEY1
		k2 = AccSetting.GL_KEY2
		k3 = AccSetting.GL_KEY3
		k4 = AccSetting.GL_KEY4
		k5 = AccSetting.GL_KEY5
		k6 = AccSetting.GL_KEY6
		k7 = AccSetting.GL_KEY7
		k8 = AccSetting.GL_KEY8
		k9 = AccSetting.GL_KEY9

		k1 = mktkey.getResultKey(k1, LoanID, CustomerID)
		k2 = mktkey.getResultKey(k2, LoanID, CustomerID)
		k3 = mktkey.getResultKey(k3, LoanID, CustomerID)
		k4 = mktkey.getResultKey(k4, LoanID, CustomerID)
		k5 = mktkey.getResultKey(k5, LoanID, CustomerID)
		k6 = mktkey.getResultKey(k6, LoanID, CustomerID)
		k7 = mktkey.getResultKey(k7, LoanID, CustomerID)
		k8 = mktkey.getResultKey(k8, LoanID, CustomerID)
		k9 = mktkey.getResultKey(k9, LoanID, CustomerID)

		if LoanProductObj:
			if Suspend == "Y":
				Category     = PDParamObj.SuspendCrCat
				GL_KEYS      = mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
			else:
				Category    	= LoanProductObj.IntIncomeCate.strip()
				GL_KEYS     	= mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)

			AIR_Category    	= LoanProductObj.IntReceivableCate.strip()
			AIR_GL_KEYS     	= mktaccounting.getConsolKey(AIR_Category, Currency, AssetClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)

	# return Category,GL_KEYS
	return {"Category": Category,"GL_KEYS": GL_KEYS,"AIR_Category":AIR_Category,"AIR_GL_KEYS": AIR_GL_KEYS}

def setPostAccounting(**kwargs):
	for i in range(0, 2):
		if i == 0:
			DrCr 		= 	"Dr"
			Mode 		= 	kwargs.get("DrMode")
			Category 	= 	kwargs.get("DrCategory")
			Account 	= 	kwargs.get("DrAccount")
			GL_KEYS 	=	kwargs.get("DrGL_Keys","")
		else:
			DrCr 		= 	"Cr"
			Mode 		= 	kwargs.get("CrMode")
			Category 	= 	kwargs.get("CrCategory")
			Account 	= 	kwargs.get("CrAccount")
			GL_KEYS 	=	kwargs.get("CrGL_Keys","")

		Transaction = kwargs.get("Transaction")
		TranDate 	= kwargs.get("TranDate")
		Module 	 	= kwargs.get("Module","LC")
		Reference 	= kwargs.get("Reference")
		Amount 		= kwargs.get("Amount")
		Currency	= kwargs.get("Currency")
		Branch 		= kwargs.get("Branch")
		Note 		= kwargs.get("Note")
		UserReference= kwargs.get("UserReference")
		Inputter 	 = kwargs.get("Inputter")
		
		if not GL_KEYS:
			print "No GL_KEYS"
			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", Module, "", "", "", "", "", "", "", "", "")

		DateTimeNow = mktdate.getDateTimeNow()
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			Inputter,				# Inputter
			DateTimeNow, 			# Createdon
			Inputter,				# Authorizer
			DateTimeNow,			# Authorizeon
			"", 					# AEID
			Account,				# Account
			Category,				# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(Amount), 		# Amount
			Module,					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			Reference, 				# Reference
			Note, 					# Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			Mode, 					# Mode check to insert Journal for category,
			UserReference=UserReference			# User Reference
		)

def updateLCAfterWaive(**kwargs):
	'''
	For Update Loan Contract and Post accounting after waive interest. (PD or Accr)
	'''
	LoanID 				= kwargs.get("LoanID")
	WaiveInterestAmount = kwargs.get("Amount",0)
	PDWaive 			= kwargs.get("PDWaive","N")
	TranDate 			= kwargs.get("TranDate")
	UserReference 		= kwargs.get("UserReference")
	Note 				= kwargs.get("Note", "Reverse Interest")

	ReportingRateObj 	= mktaccounting.getReportingRateObj()


	LoanObj 	= MKT_LOAN_CONTRACT.query.get(LoanID)
	if LoanObj:
		WaiveInterestAmount = Decimal(WaiveInterestAmount)
		Currency  			= LoanObj.Currency
		Branch 				= LoanObj.Branch

		if WaiveInterestAmount > 0:
			Suspend				= LoanObj.Suspend
			AssetClass 			= LoanObj.AssetClass

			TotalInterest 		= Decimal(LoanObj.TotalInterest)		#Total Interest
			IntIncEarned 		= Decimal(LoanObj.IntIncEarned)			#Interest Income Earned
			AccrInterest		= Decimal(LoanObj.AccrInterest)			#Accrued Interest Receivable
			AccrCurrentInt		= Decimal(LoanObj.AccrCurrentInt)		#Accr Current Installment
			AccrIntCurrMonth 	= Decimal(LoanObj.AccrIntCurrMonth)		#Accr Int Current Month
			AccrIntPreMonth		= Decimal(LoanObj.AccrIntPreMonth)		#Accr Int Previous Month
			
			if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
				FCYIntIncEarned 	= Decimal(LoanObj.FCYIntIncEarned)

			DictUpdate 			= {}
			RemainAmount 		= Decimal(0)

			LCYWaiveIntAmt		= WaiveInterestAmount * Decimal(ReportingRateObj.get(Currency))

			if AccrInterest >= WaiveInterestAmount:
				AccrInterest = AccrInterest - WaiveInterestAmount
			else:
				AccrInterest = 0

			if Suspend == "N":
				if IntIncEarned >= LCYWaiveIntAmt:
					IntIncEarned = IntIncEarned - LCYWaiveIntAmt

					if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
						FCYIntIncEarned	= FCYIntIncEarned - WaiveInterestAmount

				else:
					IntIncEarned = 0

					if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
						FCYIntIncEarned = 0

			if PDWaive == "N":#Y = Waive PD interest or N = waive AccrCurrentInstallment
				if AccrCurrentInt >= WaiveInterestAmount:
					AccrCurrentInt = AccrCurrentInt - WaiveInterestAmount
				else:
					AccrCurrentInt = 0

				if AccrIntCurrMonth >= WaiveInterestAmount:
					AccrIntCurrMonth = AccrIntCurrMonth - WaiveInterestAmount
				else:
					RemainAmount = WaiveInterestAmount - AccrIntCurrMonth
					AccrIntCurrMonth = 0
					if AccrIntPreMonth >= RemainAmount:
						AccrIntPreMonth = AccrIntPreMonth - RemainAmount
					else:
						AccrIntPreMonth = 0

			DictUpdate.update({"TotalInterest": TotalInterest,
								"AccrInterest": AccrInterest,
								"IntIncEarned": IntIncEarned,
								"AccrCurrentInt": AccrCurrentInt,
								"AccrIntCurrMonth": AccrIntCurrMonth,
								"AccrIntPreMonth": AccrIntPreMonth
								})

			if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
				DictUpdate.update({"FCYIntIncEarned": FCYIntIncEarned})


			mktdb.updateRecord(MKT_LOAN_CONTRACT, [MKT_LOAN_CONTRACT.ID == LoanID], DictUpdate)

			#post adjust accounting

			SuspendOrIncomeCat = getSuspendOrIncomeCat(LoanID=LoanID)

			DrMode 			= "Direct"
			DrCategory 		= SuspendOrIncomeCat.get("Category")
			DrAccount 		= ""
			DrGL_Keys 		= SuspendOrIncomeCat.get("GL_KEYS")

			CrMode 			= "Direct"
			CrCategory 		= SuspendOrIncomeCat.get("AIR_Category")
			CrAccount 		= ""
			CrGL_Keys 		= SuspendOrIncomeCat.get("AIR_GL_KEYS")

			TellerParam 	= mktparam.getTellerParam()
			Transaction 	= TellerParam.RevTransaction

			PostData = {}
			PostData.update({"DrMode"			: 	DrMode,
							 "DrCategory"		:	DrCategory,
							 "DrAccount"		:	DrAccount,
							 "CrMode"			:	CrMode,
							 "CrCategory"		:	CrCategory,
							 "CrAccount"		:	CrAccount,
							 "Transaction"		:	Transaction,
							 "TranDate"			: 	TranDate,
							 "Module"			: 	"LC",
							 "Reference"		:	LoanID,
							 "Amount"			: 	WaiveInterestAmount,
							 "Currency"			:	Currency,
							 "Branch"			: 	Branch,
							 "Note"				:	Note,
							 "UserReference"	:	UserReference,
							 "Inputter"			: 	"System",
							 "DrGL_Keys"		:	DrGL_Keys,
							 "CrGL_Keys"		: 	CrGL_Keys})

			setPostAccounting(**PostData)


# When run EOD this method will work
def setLoanReStatus():
	try:
		# Chage LoanStatus and Copy MKT_LOAN_CONTRACT_HIST to MKT_CLOSED_LOAN
		setLoanStatusLCLive()
		setLoanStatusAmemdment()
		setLoanStatusWriteOff()
		setLoanStatusMarturity()
		db.session.commit()
	except:
		db.session.rollback()
		raise


def getLoanPreTerminationDetail(Loan,PD,RepSchedule,**kwargs):
	""" Method to get Loan PreTermination Detail amount:
			- LoanBalance, AccrCurrentInt, AccrCurrentCharge, WaiveInt, GRAPenalty
			- PastDue, PDTotalPrincipal, InterestDue, PenaltyDue, ChargeDue
			- Total:
				+ Principal = LoanBalance + PastDue
				+ Interest = InterestDue + AccrCurrentInt - WaiveInt
				+ Charge = ChargeDue + AccrCurrentCharge
				+ PreTerminateAmount = PreTerminateAmount + AccrCurrentInt + AccrCurrentCharge - WaiveInt
		Args:
			- Required paramater
				+ Loan (str) 		: List of Loan Contract
				+ PD (str) 			: List of PD
				+ RepSchedule 		: List of RepSchedule
			- Optional paramater
				+ WaiveInterest 	: Number
				+ GRAPenalty 		: Number
		Return:
			dicts.update({
					'LoanBalance': LoanBalance,
					'PastDue': PastDue,
					'WaiveInt': WaiveInt,
					'AccrCurrentInt': AccrCurrentInt,
					'AccrCurrentCharge': AccrCurrentCharge,
					'PDTotalPrincipal': PDTotalPrincipal,
					'InterestDue': InterestDue,
					'PenaltyDue': PenaltyDue,
					'ChargeDue': ChargeDue,
					'Principal':Principal,
					'Interest':Interest,
					'Charge':Charge,
					'PreTerminateAmount':PreTerminateAmount
				})
	"""
	try:
		dicts 		= {}

		Loan 		= Loan
		PD 			= PD
		RepSchedule = RepSchedule
		GRAPenalty 	= kwargs.get('GRAPenalty',0)
		WaiveInterest = kwargs.get('WaiveInterest',0)

		LoanBalance 		= 0
		PastDue 			= 0
		AccrCurrentInt 		= 0
		WaiveInt 			= 0
		AccrCurrentCharge 	= 0
		PDTotalPrincipal 	= 0
		InterestDue 		= 0
		PenaltyDue			= 0
		ChargeDue			= 0
		GRAPenalty 			= 0

		Principal 			= 0
		Interest 			= 0
		Charge 				= 0
		PreTerminateAmount 	= 0

		if Loan:
			LoanBalance 		= Decimal(Loan.Amount)
			CurrencyObj 		= mktmoney.getCurrencyObj(Loan.Currency)

			# Interest Accr Current Installment
			AccrCurrentInt  = Decimal(Loan.AccrCurrentInt) if Loan.AccrCurrentInt else Decimal(0)
			AccrCurrentInt 	= mktmoney.toMoney(float(AccrCurrentInt), CurrencyObj)
			AccrCurrentInt 	= Decimal(AccrCurrentInt.replace(",", ""))

			# Charge Accr Current Installment
			AccrCurrentCharge  	= mktcharge.getAccrCurrCharge(LoanID=Loan.ID, Currency=Loan.Currency)
			AccrCurrentCharge  	= mktmoney.toMoney(float(AccrCurrentCharge), CurrencyObj)
			AccrCurrentCharge 	= Decimal(AccrCurrentCharge.replace(",", ""))

		if WaiveInterest:
			WaiveInt 			= Decimal(WaiveInterest)
		if RepSchedule:
			AccrCurrentInt 		= Decimal(RepSchedule.Interest)
			AccrCurrentCharge 	= Decimal(RepSchedule.Charge)
		if GRAPenalty:
			GRAPenalty 			= Decimal(GRAPenalty)
		if PD:			
			PastDue 			= PD.TotODAmount-GRAPenalty
			PDTotalPrincipal 	= PD.TotPrincipalDue
			InterestDue 		= PD.TotInterestDue
			PenaltyDue 			= PD.TotPenaltyDue-GRAPenalty
			ChargeDue 			= PD.TotChargeDue

		# Total amount of Principal, Interest, Charge
		Principal 			= Decimal(LoanBalance) + Decimal(PastDue)
		Interest 			= Decimal(InterestDue) + Decimal(AccrCurrentInt) - Decimal(WaiveInt)
		Charge 				= Decimal(ChargeDue) + Decimal(AccrCurrentCharge)
		PreTerminateAmount 	= Decimal(Principal) + Decimal(Interest) + Decimal(Charge)

		dicts.update({	'LoanBalance': LoanBalance,
						'PastDue': PastDue,
						'WaiveInt': WaiveInt,
						'AccrCurrentInt': AccrCurrentInt,
						'AccrCurrentCharge': AccrCurrentCharge,
						'PDTotalPrincipal': PDTotalPrincipal,
						'InterestDue': InterestDue,
						'PenaltyDue': PenaltyDue,
						'ChargeDue': ChargeDue,
						'Principal':Principal,
						'Interest':Interest,
						'Charge':Charge,
						'PreTerminateAmount':PreTerminateAmount
					})
		return dicts
	except Exception, e:
		raise

def setLoanStatusLCLive():
	try:
		BankDate 	= mktsetting.getBankDate()
		# Loan Contract Live
		# Update Loan Status to Approved when DisbursedStat = N
		LoanStatusApproved 	= db.session.query(MKT_LOAN_CONTRACT).\
										filter(MKT_LOAN_CONTRACT.LoanStatus=="SMT").\
										filter(MKT_LOAN_CONTRACT.DisbursedStat=="N").\
										update({MKT_LOAN_CONTRACT.LoanStatus:'APV'},synchronize_session='fetch')
		print "%s Update Loan Status to APV Successfully"%LoanStatusApproved
		# Update Loan Status to Disbursed when DisbursedStat = Y
		LoanStatusDisbursed = db.session.query(MKT_LOAN_CONTRACT).\
										filter(or_(MKT_LOAN_CONTRACT.LoanStatus=="SMT",
												   MKT_LOAN_CONTRACT.LoanStatus=="APV")).\
										filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
										update({MKT_LOAN_CONTRACT.LoanStatus:'DSB'},synchronize_session='fetch')
		print "%s Update Loan Status to DSB Successfully"%LoanStatusDisbursed
	except Exception, e:
		raise

def setLoanStatusAmemdment():
	try:
		# Amendment and Terminate
		DeductList = []
		ToppedUpList = []
		TerminateList = []
		LoanID = []
		BankDate 	= mktsetting.getBankDate()
		LoanAmendDeductObj = db.session.query(MKT_LOAN_AMENDMENT.LoanID, MKT_LOAN_AMENDMENT.AddDeduct,MKT_LOAN_AMENDMENT.Operation).\
										filter(MKT_LOAN_AMENDMENT.AmendDate==BankDate).\
										outerjoin(MKT_CLOSED_LOAN,MKT_LOAN_AMENDMENT.LoanID==MKT_CLOSED_LOAN.ID).\
										filter(MKT_CLOSED_LOAN.ID==None).subquery()
		AmendmentObj = db.session.query(LoanAmendDeductObj).all()
		if AmendmentObj:
			for row in AmendmentObj:
				if row[2]=='AMT':
					DeductList.append(row[0]) if row[1]=='1' else ToppedUpList.append(row[0])
				else:
					LoanHist = db.session.query(MKT_LOAN_CONTRACT_HIST.ID).\
										  filter(MKT_LOAN_CONTRACT_HIST.ID.like(row[0]+'@%')).\
										  order_by(MKT_LOAN_CONTRACT_HIST.ID.desc()).limit(1).all()
					LoanID.extend([item[0] for item in LoanHist])

			# Update Loan Status to Deduct
			if DeductList:
				LoanStatusDeducted = db.session.query(MKT_LOAN_CONTRACT).\
												filter(MKT_LOAN_CONTRACT.ID.in_(DeductList)).\
												update({MKT_LOAN_CONTRACT.LoanStatus:'DDT'},synchronize_session='fetch')
				print "%s Update Loan Status to DDT Successfully"%LoanStatusDeducted
			# Update Loan Status to Topped Up
			if ToppedUpList:
				LoanStatusToppUp = db.session.query(MKT_LOAN_CONTRACT).\
												filter(MKT_LOAN_CONTRACT.ID.in_(ToppedUpList)).\
												update({MKT_LOAN_CONTRACT.LoanStatus:'TPU'},synchronize_session='fetch')
				print "%s Update Loan Status to TPU Successfully"%LoanStatusToppUp
			if LoanID:
				LoanStatusToppUp = db.session.query(MKT_LOAN_CONTRACT_HIST).\
												filter(MKT_LOAN_CONTRACT_HIST.ID.in_(LoanID)).\
												update({MKT_LOAN_CONTRACT_HIST.LoanStatus:'TMN'},synchronize_session='fetch')
				print "%s Update Loan Status to TMN Successfully"%LoanStatusToppUp
				# Copy Loan contract to Closed Loan Table
				mktaudit.copyData(MKT_LOAN_CONTRACT_HIST,MKT_CLOSED_LOAN,{'ClosedDate':BankDate},LoanID)
				TerminateObj = db.session.query(MKT_CLOSED_LOAN).\
										  filter(MKT_CLOSED_LOAN.ID.in_(LoanID)).all()
				for item in TerminateObj:
					if item.ClosedDate == BankDate:
						item.ID = item.ID.split("@")[0]
	except Exception, e:
		raise

def setLoanStatusWriteOff():
	try:
		# Written off
		WriteOffIDList = []
		WriteOffObj = ''
		LoanID = []
		BankDate 	= mktsetting.getBankDate()
		Writeoff = db.session.query(MKT_WRITE_OFF.ID).\
								filter(MKT_WRITE_OFF.WOFDate==BankDate).\
								outerjoin(MKT_CLOSED_LOAN,MKT_WRITE_OFF.ID==MKT_CLOSED_LOAN.ID).\
								filter(MKT_CLOSED_LOAN.ID==None).subquery()

		for row in db.session.query(Writeoff).all():
			WriteOffObj = db.session.query(MKT_LOAN_CONTRACT_HIST.ID).\
									  filter(MKT_LOAN_CONTRACT_HIST.ID.like(row[0]+'@%')).\
									  order_by(MKT_LOAN_CONTRACT_HIST.ID.desc()).limit(1).all()
			LoanID.extend([item[0] for item in WriteOffObj])
		if LoanID:
			LoanStatusWriteOff = db.session.query(MKT_LOAN_CONTRACT_HIST).\
											filter(MKT_LOAN_CONTRACT_HIST.ID.in_(LoanID)).\
											update({MKT_LOAN_CONTRACT_HIST.LoanStatus:'WOF'},synchronize_session='fetch')
			print "%s Update Loan Status to WOF Successfully"%LoanStatusWriteOff
		# Copy Loan from MKT_LOAN_CONTRACT_HIST TO MKT_CLOSED_LOAN
		if LoanID:
			mktaudit.copyData(MKT_LOAN_CONTRACT_HIST,MKT_CLOSED_LOAN,{'ClosedDate':BankDate},LoanID)
			WriteOffObj = db.session.query(MKT_CLOSED_LOAN).\
									  filter(MKT_CLOSED_LOAN.ID.in_(LoanID)).all()
			for item in WriteOffObj:
				if item.ClosedDate == BankDate:
					item.ID = item.ID.split("@")[0]
	except Exception, e:
		raise

def setLoanStatusMarturity():
	try:
		# Update Loan Status to Maturity
		LoanIDList = []
		BankDate 	= mktsetting.getBankDate()
		LoanMaturityList = db.session.query(MKT_LOAN_CONTRACT.ID.label('LoanID')).\
											filter(MKT_LOAN_CONTRACT.OutstandingAmount==0).\
											filter(MKT_LOAN_CONTRACT.DisbursedStat=='Y').all()
		if LoanMaturityList:
			LoanIDList.extend([item[0] for item in LoanMaturityList])
			for LoanObj in LoanMaturityList:
				LoanPastDueObj = MKT_PAST_DUE.query.\
											filter(MKT_PAST_DUE.TotODAmount > 0).\
											filter(MKT_PAST_DUE.LoanID==LoanObj.LoanID).first()
				LoanScheduleAddOnObj = MKT_SCHEDULE_ADDON.query.\
											filter(MKT_SCHEDULE_ADDON.PastDue > 0).\
											filter(MKT_SCHEDULE_ADDON.LoanID==LoanObj.LoanID).first()
				if LoanPastDueObj is None and LoanScheduleAddOnObj is None:	
					# Update Loan Status to Maturity
					LoanStatusDisbursed = db.session.query(MKT_LOAN_CONTRACT).\
													filter(MKT_LOAN_CONTRACT.ID.in_(LoanIDList)).\
													update({MKT_LOAN_CONTRACT.LoanStatus:'MRT'},synchronize_session='fetch')
					print "%s Update Loan Status to MRT Successfully"%LoanStatusDisbursed
					# Copy Loan Contract to HIST and Delete Record in Loan Contract by LoanID
			if LoanIDList:
				mktaudit.copyData(MKT_LOAN_CONTRACT,MKT_CLOSED_LOAN,{'ClosedDate':BankDate},LoanIDList)
				for LoanID in LoanIDList:
					mktamt.moveLoanDataToHist(LoanID, True)
	except Exception, e:
		raise

def DoubleRecordToHIST(LoanID):
	""" Method to move loan to table (two record):
		+ record 1: copy loan to hist same loan
		+ rcord 2: update:
				- OutstandingAmount = 0
				- Amount = 0
				- AccrInterest = 0
				- AccrCurrentInt = 0
				- AccrIntCurrMonth = 0
				- AccrIntPreMonth = 0
				- AccrIntPerDay = 0
		Args:
			+ LoanID (str) 		: Loan Contract
		Return:
			+ True
	"""
	Curr = mktamt.moveLoanDataToHist(LoanID)
	Curr = int(Curr) +1

	LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	if LoanObj:
		LoanObj.OutstandingAmount 	= 0
		LoanObj.Amount 				= 0
		LoanObj.AccrInterest 		= 0
		LoanObj.AccrCurrentInt 		= 0
		LoanObj.AccrIntCurrMonth 	= 0
		LoanObj.AccrIntPreMonth 	= 0
		LoanObj.AccrIntPerDay 		= 0
	db.session.add(LoanObj)

	# move related loan data to hist
	mktamt.moveLoanDataToHist(LoanID, True, Curr=Curr)
	return True

def getDoneWatchDay(LoanID):
	'''
	-def : define that how many time that loan has done watch cylce
		ex. Thare are a loan are watching 180 days. 
			From day to day this loan decrease by 1 until 0 day so that DoneWatchCycle is 1.
			One again this loan was watching 180 days as second time of watching. As such as above condition it decrease from 180 to zero day so that DoneWatchCycle at this time is 2.
	- return :
		-rtype(int)
		- # of DoneWatchCycle
	'''
	LoanObj 	=	MKT_LOAN_CONTRACT.query.get(LoanID)
	
	if LoanObj:
		DoneWatchDay  	= 	int(LoanObj.DoneWatchDay)
		DoneWatchDay 	   += 	1
		print "DoneWatchDay"
	else:
		DoneWatchDay 		=	0
	return DoneWatchDay

def getNumLoanRestructure(LoanID):
	'''
	-def : define that how many time of a loan has restructured.
	-return :
		- number of loan restructure or none
		- rtype (int) 
	'''
	AmendObj 	=  	MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.LoanID==LoanID,
													MKT_LOAN_AMENDMENT.Restructure=='Y')
	if AmendObj:
		NumRestructure = AmendObj.count()
	else:
		NumRestructure = None

	return NumRestructure

def setMinAssetClassRestructure(LoanID="",EOD=1):
	'''
	- def : define that when a loan is restructured watch day loan which asset class it should stand at least 
	- return :
		- rtype (int): minimume asset class 
	'''
	MIN_CLASS_RULE = mktsetting.getAppSetting('MIN_CLASS_RESTRUCTURE_RULE')
	if MIN_CLASS_RULE:		
		ListLoanObj  =	MKT_LOAN_CONTRACT.query
		if LoanID:
			ListLoanObj = ListLoanObj.filter(MKT_LOAN_CONTRACT.ID==LoanID)
		
		if ListLoanObj:
			try:
				for LoanObj in ListLoanObj:
					LoanType 			=	LoanObj.LoanType
					if LoanType == "R":
						'''
							-NumRestructure <= 1 ,should be 0 or less than. In this case , if this function is called in before authorize of loan amendment 
								so that loan has restructured for one time but haven't in loan amendment live table yet.
							-Restructure one time ==> MinAssetClass = current asset class ,but when current asset class move up, MinAssetClass not move in case
						'''
						MinAssetClass = calculateMinAssetClass(MIN_CLASS_RULE=MIN_CLASS_RULE,LoanID=LoanObj.ID)
			
						#update MinAssetClass to Loan Contract
						if MinAssetClass:
							Curr = mktaudit.moveAUTHtoHIST(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT_HIST, LoanID)
							LoanObj.MinAssetClass =  MinAssetClass
							LoanObj.Curr = int(Curr)+1
							db.session.add(LoanObj)

							if EOD==1:
								db.session.commit()						
							if EOD==1: 
								print "%s: minimum asset class is %s."%(LoanObj.ID,MinAssetClass)
						
			except Exception as e:
				db.session.rollback()
				print "Erorr,updating minimum asset class."
				
		else:
			print "No LC has been update Min Asset Class."

		print "Finished updating minimum asset class."
		print ""

def setMinAssetClass(LoanID="",EOD=1):
	if EOD==0:
		'''
		use on web interface
		'''
		ListLoanObj  		=	MKT_LOAN_CONTRACT.query.get(LoanID)
	else:
		'''
		use when eod process
		'''
		print 'Starting to update minimum asset class'
		ListLoanObj  		=	MKT_LOAN_CONTRACT.query.\
										filter(MKT_LOAN_CONTRACT.MinAssetClass!='40')
	if ListLoanObj:
		'''
		Normal loan "N"
		- DoneWatchDay >=1 ==> MinAssetClass = 0
		- DoneWatchDay >1:
			CurrentAssetClass <=20 ==> MinAssetClass = 20
			CurrentAssetClass >20  ==> MinAssetClass = CurrentAssetClass

		'''
		try:
			for LoanObj in ListLoanObj:
				LoanType 	= 	LoanObj.LoanType
				MIN_CLASS_RULE = mktsetting.getAppSetting('MIN_CLASS_WATCHDAY_RULE_%s' % LoanType)
				if MIN_CLASS_RULE:
					MinAssetClass = calculateMinAssetClass(MIN_CLASS_RULE=MIN_CLASS_RULE,LoanID=LoanObj.ID)	
					if MinAssetClass:
						Curr = mktaudit.moveAUTHtoHIST(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT_HIST, LoanID)
						LoanObj.MinAssetClass=MinAssetClass
						LoanObj.Curr = int(Curr)+1
						db.session.add(LoanObj)
						if EOD==1:
							db.session.commit()
						print "%s in minimum asset class %s. "%(LoanObj.ID,MinAssetClass)

		except Exception as e:
			db.session.rollback()
			if EOD==1:
				print "Error, update min asset class for loan contract"
			raise
		
	else:
		print "There no loan contract updated min asset class."
	print ""

def getCalculateRecoveryAmount(**kwargs):
	""" Method to calculate amout of principal, interest, penalty, charge when recovery loan
		Args:
			- Required paramater
				+ AccBalance (float) 		: Account Balance
				+ Amount (float) 			: Amount of Principal, Interest, Penalty, Charge

		Return:
			- Recovery= {
							"TotAmount":[Principal, Interest, Penalty, Charge],
							"TotAccBal":Account Balance
						}
	"""
	AccBalance 			= kwargs['AccBalance']
	Amount 				= kwargs['Amount']

	Recovery 			= {"TotAmount" : 0, "TotAccBal" : 0}
	RecAmount 				= 0
	AccBal 				= 0

	if float(AccBalance) >= float(Amount):
		RecAmount 		= float(Amount)
		AccBal 			= float(AccBalance) - float(Amount)
		Recovery.update({"TotAmount":RecAmount,"TotAccBal":AccBal})
	else:
		RecAmount 	= float(AccBalance) if not float(AccBalance) == 0 else float(Amount)
		AccBal 			= 0
		Recovery.update({"TotAmount":RecAmount,"TotAccBal":AccBal})

	return Recovery

def getCurrInstallmentRecord(LoanID):
	"""
	This method use to get the current insatllment of repayment schedule by loan contract.

	param :
		LoanID = Loan Contract ID 
	Return:
		rtype: query obj

	"""
	RepScheduleObj 		=	MKT_REP_SCHEDULE.query.\
											filter(MKT_REP_SCHEDULE.LoanID==LoanID,
												   MKT_REP_SCHEDULE.RepStatus=='0').\
													order_by(MKT_REP_SCHEDULE.CollectionDate.asc()).first()
											
	return RepScheduleObj

def getCurrInstallment(LoanID):
	"""
	This method is used to get total of current installment amount that customer gonna pay and due payment date of repayment schedule.

	param:
		- LoanID = Loan Contract ID

	return: 
		rtype : dictionalry
		rvalue : {"TotalAmount":300,"DuePaymentDate":'2019-03-30'}

	"""
	RepScheduleObj 	=	getCurrInstallmentRecord(LoanID)
	TotalAmount 	=	0
	DuePaymentDate 	= 	0

	if RepScheduleObj:

		Principal 	=	float(RepScheduleObj.Principal) if RepScheduleObj.Principal else float(0)
		Interest 	=	float(RepScheduleObj.Interest) if RepScheduleObj.Interest else float(0)
		Charge 		=	float(RepScheduleObj.Charge) if  RepScheduleObj.Charge else float(0)

		DuePaymentDate = RepScheduleObj.CollectionDate

		TotalAmount = Principal + Interest + Charge

	return {"TotalAmount":TotalAmount,"DuePaymentDate":DuePaymentDate}


def getPercentagePayment(DisbursedAmount=0,OutstandingAmount=0):
	
	Percentage 	= 0

	if DisbursedAmount:
		Amount 	=	float(DisbursedAmount) - float(OutstandingAmount)
		if Amount: # if Amount >0
			Percentage 	= (Amount*100) / float(DisbursedAmount)

	return Percentage

def getTotPDAmount(LoanID):
	"""
	This method is used to get total of PD amount of a loan.

	param:
		- LoanID = Loan Contract ID

	return: 
		rtype : float
		rvalue : TotODAmount
	"""
	PDObj 	=	MKT_PAST_DUE.query.filter(MKT_PAST_DUE.LoanID==LoanID).first()
	TotODAmount = 0
	if PDObj:
		TotODAmount = PDObj.TotODAmount

	return float(TotODAmount)

def getLoanCharge(**kwargs):
	"""
		Method used to get loan charge by loan contract
		Args:
			- Required paramater
				+ LoanID (string) 		: Loan contract ID
				+ Status (string) 		: Status of loan
											- AUTH = LOAN in live record,
											- INAU = Loan in Inauthorize record, 
											- HIST = Loan in history record
		Return:
			Object of loan charge: LoanChargeObj
	"""
	LoanID 		= kwargs.get('LoanID')
	Status 		= kwargs.get('Status')
	TableLoan				= MKT_LOAN_CONTRACT
	TableLoanCharge 		= MKT_LOAN_CHARGE
	if Status == 'INAU':
		TableLoan 			= MKT_LOAN_CONTRACT_INAU
		TableLoanCharge 	= MKT_LOAN_CHARGE_INAU
	elif Status == 'HIST':
		TableLoan 			= MKT_LOAN_CONTRACT_HIST
		TableLoanCharge 	= MKT_LOAN_CHARGE_HIST

	LoanChargeObj 	= []

	if LoanID:
		LoanChargeObj = db.session.query( 	TableLoanCharge.ID,
											TableLoanCharge.ChargeKey,
											TableLoanCharge.RateFixed,
											TableLoanCharge.Charge,
											TableLoan.Disbursed,
											TableLoan.Currency).\
							join(TableLoan,TableLoan.ID == TableLoanCharge.ID).\
							filter(TableLoan.ID == LoanID)
	return LoanChargeObj

def getCalculateLoanCharge(**kwargs):
	"""
		Method used to calculate charge amount by loan contract
		Args:
			- Required paramater
				+ LoanChargeObj: Object of loan charge:
									- ID Loan
									- Charge Key,
									- RateFixed,
									- Charge,
									- Disbursed,
									- Currency
		Return:
			Totoal Charge
	"""
	LoanChargeObj = kwargs.get('LoanChargeObj')

	REGULAR_FEE 		= '2'
	TotalCharge 		= 0
	Disbursed 			= 0

	if LoanChargeObj:
		for row in LoanChargeObj:
			ChargeKey 	= row.ChargeKey + row.Currency
			Disbursed 	= row.Disbursed
			RateFixed 	= row.RateFixed
			Charge 		= row.Charge
			KeyObj 		=	MKT_CHARGE_RATE.query.filter(MKT_CHARGE_RATE.ID == ChargeKey).first()
			ChargeUnearned 	= 0
			if KeyObj:
				ChargeMode = KeyObj.ChargeMode
				if ChargeMode != REGULAR_FEE:
					MinimumAmount 	=float(KeyObj.MinimumAmount)
					if RateFixed == 'F':
						ChargeUnearned 	=	float(Charge)
					elif RateFixed == "R":
						NewCharge = (float(Disbursed) * float(Charge)) / 100
						ChargeUnearned = NewCharge

			TotalCharge += ChargeUnearned

	return TotalCharge

def getMininumAccountBalance(AccID,AccrMode):
	"""
		Method used to calculate charge amount by loan contract
		Args:
			- Required paramater
				+ LoanChargeObj: Object of loan charge:
									- ID Loan
									- Charge Key,
									- RateFixed,
									- Charge,
									- Disbursed,
									- Currency
		Return:
			Totoal Charge
	"""
	AccObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.ID == AccID).first()
	MinBalance = 0
	AccEndofMonth = False

	if AccrMode == 'CUSTOM':
		MinBalance, MinTranDate = CustomTool.getCustomAccurAccountSaving(AccID,AccObj,AccrMode)
		AccObj.MinBalance 		= MinBalance
		AccObj.MinTranDate		= MinTranDate
		AccEndofMonth = True
	else:
		MinBalance 				= AccObj.Balance

	db.session.add(AccObj)

	return float(MinBalance), AccEndofMonth

def calculateMinAssetClass(**kwargs):
	"""
	MIN_CLASS_RULE
		NUM_RESTRUCTURE == 1*0 10 11/0*20 30 40/20
		UP*0 10 11/20*20 30 40/CurrentAssetClass

	"""
	MinAssetClass 	= ""
	MIN_CLASS_RULE 	= kwargs.get("MIN_CLASS_RULE")
	LoanID 			= kwargs.get("LoanID")

	LoanObj 			= 	MKT_LOAN_CONTRACT.query.get(LoanID)
	if LoanObj:
		LoanType 			=	LoanObj.LoanType
		NUM_RESTRUCTURE		=	getNumLoanRestructure(LoanObj.ID) # number loan restructure		
		DONE_WATCHDAY 		= 	int(LoanObj.DoneWatchDay)
		CurrentAssetClass 	=	str(LoanObj.AssetClass)
		OriMinAssetClass 	= 	str(LoanObj.MinAssetClass)

		if NUM_RESTRUCTURE != None:
			#add 1 because NUM_RESTRUCTURE is calculate when LN not yet authorized 
			#and getNumLoanRestructure only query from amend in LIVE
			NUM_RESTRUCTURE = int(NUM_RESTRUCTURE) + 1 

		RULE = MIN_CLASS_RULE.split('\n')
		for rule in RULE:
			rule = rule.split("*")
			CONDITION = rule[0]
			CURRENT_CLASS_LIST = rule
			del CURRENT_CLASS_LIST[0]
			if CONDITION != "UP":
				# print "Not UP ..."
				if eval(CONDITION):
					for current_list in CURRENT_CLASS_LIST:
						current_list = current_list.split("/")
						if CurrentAssetClass in current_list[0].split():
							MinAssetClass = CurrentAssetClass if current_list[1].strip() == "CurrentAssetClass" else current_list[1].strip()
							break
					break
			else:
				# print "UP ..."
				for current_list in CURRENT_CLASS_LIST:
					current_list = current_list.split("/")
					if CurrentAssetClass in current_list[0].split():
						MinAssetClass = CurrentAssetClass if current_list[1].strip() == "CurrentAssetClass" else current_list[1].strip()
						break

		if MinAssetClass:
			if MinAssetClass < OriMinAssetClass:
				MinAssetClass = ""

	return MinAssetClass