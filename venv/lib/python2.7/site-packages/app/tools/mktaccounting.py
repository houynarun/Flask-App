# Created by Kiry and Theavuth
# Date: 01 February 2015
# Modify Date : 11 February 2015
# Modify by : Kiry
# All Right Reserved Morakot Technology
# Description :

# BalanceType = "Dr" mean that :
# 	Till Account (USD150350001,KHR150350001,THB150350001)
# 	Dr +
# 	Cr -

# BalanceType = "Cr" mean that :
# 	Customer Account (ACC150350001)
# 	Dr -
# 	Cr +

from app.mktcore.wtfimports 	import *
from .. 						import app, db
from decimal 					import *
from sqlalchemy 				import or_, func
from app.AccEntry.models 		import MKT_ACC_ENTRY
from app.Journal.models 		import MKT_JOURNAL,MKT_JOURNAL_TEMP
from app.Account.models 		import MKT_ACCOUNT
from app.Category.models 		import MKT_CATEGORY
from app.Currency.models 		import MKT_CURRENCY,MKT_CURRENCY_DE
from app.Transaction.models 	import MKT_TRANSACTION
from app.ConsolBalance.models	import MKT_CONSOL_BALANCE
from app.Customer.models 		import MKT_CUSTOMER
from app.AssetClass.models 		import MKT_ASSET_CLASS
from app.SpecialJournal.models 	import MKT_SPECIAL_JOURNAL
from app.GLBalance.models 		import MKT_GL_BALANCE_BACKUP
from app.GL.models 				import *
#2018-06-05 - Inter-Branch
from app.Branch.models 			import *	
#end

import mktmoney 				as mktmoney 
import mktdate 					as mktdate
from app.Account.models 		import *
from app.AccProduct.models 		import *
from app.AccRuleDetail.models 	import *
from app.Category.models 		import *
from app.Branch.models 			import *
from app.VoucherType.models 	import *
import app.tools.mktgl 					as mktgl
import app.tools.mktautoid 				as mktAutoID
import mktsetting 						as mktsetting
import app.tools.mktcurrencyrevaluate 	as mktcurrencyrevaluate
import app.tools.mktteller 				as mktteller
import app.tools.mkttool 				as mkttool
from dateutil.relativedelta 		import relativedelta


def loadSpecialJournal():
	return MKT_SPECIAL_JOURNAL.query.order_by(MKT_SPECIAL_JOURNAL.ID.asc())
	
def loadVoucherType():
	return MKT_VOUCHER_TYPE.query.order_by(MKT_VOUCHER_TYPE.ID.asc())

def loadTransaction():
	return MKT_TRANSACTION.query

def loadCurrency(Default=False):
	AccSetting 	= mktsetting.getAccSetting() #Get Acccounting Setting
	Currency 	= AccSetting.BaseCurrency

	if Default:
		return MKT_CURRENCY.query.get(Currency)
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())

def loadCategory():

	JOURNAL_ENTRY_EXCLUDED = mktsetting.getExcludedCategories()
	JOURNAL_ENTRY_EXCLUDED.extend(mktteller.getExcludeCashCategory())
	return 	MKT_CATEGORY.query.\
			filter(~MKT_CATEGORY.ID.in_(JOURNAL_ENTRY_EXCLUDED)).\
			order_by(MKT_CATEGORY.ID.asc()).\
			all()

def loadCategoryWithCashCategory():
	JOURNAL_ENTRY_EXCLUDED = mktsetting.getExcludedCategories()
	return 	MKT_CATEGORY.query.\
			filter(~MKT_CATEGORY.ID.in_(JOURNAL_ENTRY_EXCLUDED)).\
			order_by(MKT_CATEGORY.ID.asc()).\
			all()

def setExchangeRate(Status,Curr,Inputter,Createdon,Authorizer,Authorizeon,Branch,Currency,SystemDate,BuyRate,SellRate,MidRate,ReportingRate,OtherRate1,OtherRate2,OtherRate3):
	try:
		ID = mktAutoID.setAutoID("", 4, "MKT_CURRENCY_DE",Format="%y%m%d")
		CurrencyObj = MKT_CURRENCY_DE(
				Status 			= 		Status,
				Curr 			= 		Curr,
				Inputter 		= 		Inputter,
				Createdon 		= 		Createdon,
				Authorizer 		= 		Authorizer,
				Authorizeon 	= 		Authorizeon,
				Branch			= 		Branch,
				ID 				= 		ID,
				Currency		= 		Currency,
				SystemDate 		= 		SystemDate,
				BuyRate 		= 		BuyRate,
				SellRate 		= 		SellRate,
				MidRate 		= 		MidRate,
				OtherRate1 		= 		OtherRate1,
				OtherRate2 		= 		OtherRate2,
				OtherRate3 		= 		OtherRate3,
				ReportingRate 	= 		ReportingRate,
				)
		db.session.add(CurrencyObj)
		return True,''
	except Exception, e:
		raise
		db.session.rollback
		return False,e

def getMatchesBalance(Amount, BalByKey, Type, DrCr):
	try:

		if Type == "Cr":
			BalByKey = (Decimal(BalByKey) + Amount)  if DrCr == "Cr" else (Decimal(BalByKey) - Amount)
		else:
			BalByKey = (Decimal(BalByKey) + Amount)  if DrCr == "Dr" else (Decimal(BalByKey) - Amount)

		return BalByKey

	except:
		raise

def getDefaultCurrency():
	Currency 	=	0
	try:
		
		CurrObj 	=	MKT_CURRENCY.query

		if CurrObj.count() == 1:
			Currency 	=	1

	except Exception, e:
		Currency = 2

	if int(Currency) == 1:
		return False
	else:
		return True

def getReportingRate(Currency,SystemDate="",Field="ReportingRate"):
	try:
		if SystemDate:
			CurrencyObj = MKT_CURRENCY_DE.query.filter(MKT_CURRENCY_DE.Currency == Currency).\
												filter(MKT_CURRENCY_DE.SystemDate <= SystemDate).\
												order_by(MKT_CURRENCY_DE.ID.desc(),
														MKT_CURRENCY_DE.SystemDate.desc()).first()

			
			if not CurrencyObj:
				# print "Cannot get exchange by date",SystemDate
				CurrencyObj = mktmoney.getCurrencyObj(Currency)
			# else:
			# 	print CurrencyObj.SystemDate,CurrencyObj.ID
				
		else:
			CurrencyObj 	= mktmoney.getCurrencyObj(Currency)

		if CurrencyObj:
			ReportingRate 	= getattr(CurrencyObj,Field)
			if ReportingRate == 0:
				db.session.rollback()
				raise ValueError("Currency %s reporting rate count not zero. Please update exchange rate again."%Currency)
			return ReportingRate
		else:
			db.session.rollback()
			raise ValueError("Currency %s reporting rate not found"%Currency)
	except:
		db.session.rollback()
		raise

def getConsolKey(Category="", Currency="", AssClass="", Module="", Key1="", Key2="", Key3="", Key4="", Key5="", Key6="", Key7="", Key8="", Key9=""):
	try:

		Key1 = Key1 if Key1 else ""
		Key2 = Key2 if Key2 else ""
		Key3 = Key3 if Key3 else ""
		Key4 = Key4 if Key4 else ""
		Key5 = Key5 if Key5 else ""
		Key6 = Key6 if Key6 else ""
		Key7 = Key7 if Key7 else ""
		Key8 = Key8 if Key8 else ""
		Key9 = Key9 if Key9 else ""

		GL_KEYS = str(Category) + "." + str(Currency) + "." + str(AssClass) + "." + \
				  str(Key1) + "." + str(Key2) + "." + str(Key3) + "." + \
				  str(Key4) + "." + str(Key5) + "." + str(Key6) + "." + \
				  str(Key7) + "." + str(Key8) + "." + str(Key9)
		
		return GL_KEYS

	except:
		raise

def checkGLKey(Data, DrCrCategory, Currency, DrCr):

	if mkttool.isContainWhitespace(Data):
		return False,'%s GL Key contain space' % DrCr
	else:
		ListGLKey = Data.split('.')

		if len(ListGLKey) != 12:
			return False, 'Wrong GL Key format %s' % Data
		else:
			CategoryObj = MKT_CATEGORY.query.get(ListGLKey[0])

			if ListGLKey[0] != DrCrCategory:
				return False, 'GL Key Category is not the same as %s Category %s' % (DrCr, Data)

			if not CategoryObj:
				return False, 'Wrong Category %s' % Data

			if ListGLKey[1] != Currency:
				return False, 'Wrong Currency %s' % Data

			if ListGLKey[2]:
				AssetClassObj = MKT_ASSET_CLASS.query.get(ListGLKey[2])

				if not AssetClassObj:
					return False, 'Wrong Asset Class %s' % Data

			if ListGLKey[3]:

				if ListGLKey[3] not in ['N', 'Y']:
					return False, 'Incorrect more than one year value must be N or Y'
	return True, ''

def getConsolKeyBalance(ConsolKey="", Branch=""):
	try:

		Balance = Decimal(0)

		Consol = MKT_CONSOL_BALANCE.query.\
				 filter(MKT_CONSOL_BALANCE.ID == str(ConsolKey)).\
				 filter(MKT_CONSOL_BALANCE.Branch == str(Branch)).\
				 first()

		if Consol:
			Balance = Decimal(Consol.Balance)

		return Balance

	except:
		raise

def getAccountRule(AccID=None):
	try:

		Acc = MKT_ACCOUNT.query.get(AccID)
		if Acc:
			AccProductID = str(Acc.AccProduct)
			AccProduct = MKT_ACC_PRODUCT.query.get(AccProductID)
			if AccProduct:
				AccRuleID = str(AccProduct.Rule) + str(Acc.Currency)
				AccRule = MKT_ACC_RULE_DE.query.get(AccRuleID)
				if AccRule:
					return AccRule
			else:
				return False
		else:
			return False

	except:
		raise

def checkMaxMinBalance(AccID='',Currency='',Amount='',DrCr='',TranDate=''):

	MinB 	= 	''
	MaxB 	= 	''
	Msg 	=	''
	AccSetting = mktsetting.getAccSetting()

	CurrencyObj = mktmoney.getCurrencyObj(Currency)
	Amo = Decimal(Amount)

	if Amo <= 0:
		return "Amount must be more than 0."

	Acc = MKT_ACCOUNT.query.get(AccID)

	if Acc:
		if Acc.Type == 'OD':
			import app.tools.bank.mktoverdraft as mktoverdraft
			return mktoverdraft.OVERDRAFT().validateODAccount(Acc,TranDate,Amount,DrCr,Currency)

		BalanceType  = getAccBalanceType(Acc.AccCategory)

		# Get list of Allow Post Negative
		ListOfAllowKey 	= 	AccSetting.AllowNegative.split() if AccSetting.AllowNegative else []

		# If Account Category is in Allow Post Negative list then allow post negative
		if Acc.AccCategory in ListOfAllowKey:

			return Msg

		AccProductID = str(Acc.AccProduct)
		AccProduct   = MKT_ACC_PRODUCT.query.get(AccProductID)

		if AccProduct:
			ProductDesc = AccProduct.Description
			AccRuleID = str(AccProduct.Rule) + str(Acc.Currency)
			AccRule = MKT_ACC_RULE_DE.query.get(AccRuleID)
			if AccRule:
				MinB = Decimal(AccRule.MinBalance)
				MaxB = Decimal(AccRule.MaxBalance)
							
			if BalanceType == 'Cr':

				if DrCr == 'Dr':

					if Decimal(Acc.Balance) < Amount:
						return "%s Account#%s doesn't have sufficient fund. Current balance is %s" %(ProductDesc,AccID, mktmoney.toMoney(float(Acc.Balance), CurrencyObj, 2))

					if MinB :	
						if ( Decimal(Acc.Balance) - Amount ) < MinB:
							return "Account#%s required minimum balance %s" %(AccID, mktmoney.toMoney(float(MinB), CurrencyObj, 2))

					if MaxB :
						if ( Decimal(Acc.Balance) - Amount ) > MaxB:
							return "Account#%s required maximum balance %s" %(AccID, mktmoney.toMoney(float(MaxB), CurrencyObj, 2))
			
				else:

					if MinB :	
						if (Decimal(Acc.Balance) + Amount ) < MinB:
							return "Account#%s required minimum balance %s" %(AccID, mktmoney.toMoney(float(MinB), CurrencyObj, 2))
			
					if MaxB:
						if (Decimal(Acc.Balance) + Amount) > MaxB:
							return "Account#%s required maximum balance %s" %(AccID, mktmoney.toMoney(float(MaxB), CurrencyObj, 2))


			else: #BalanceType == 'Dr'

				if DrCr == 'Cr':

					if Decimal(Acc.Balance) < Amount:
						return "%s Account#%s doesn't have sufficient fund. Current balance is %s" %(ProductDesc, AccID, mktmoney.toMoney(float(Acc.Balance), CurrencyObj, 2))
					
					if MinB :						
						if ( Decimal(Acc.Balance) - Amount ) < MinB:
							return "Account#%s required minimum balance %s" %(AccID, mktmoney.toMoney(float(MinB), CurrencyObj, 2))
			
					if MaxB :
						if ( Decimal(Acc.Balance) - Amount ) > MaxB:
							return "Account#%s required maximum balance %s" %(AccID, mktmoney.toMoney(float(MaxB), CurrencyObj, 2))
			
				else:

					if MinB :
						if (Decimal(Acc.Balance) + Amount ) < MinB:
							return "Account#%s required minimum balance %s" %(AccID, mktmoney.toMoney(float(MinB), CurrencyObj, 2))
				
					if MaxB :
						if (Decimal(Acc.Balance) + Amount) > MaxB:
							return "Account#%s required maximum balance %s" %(AccID, mktmoney.toMoney(float(MaxB), CurrencyObj, 2))

		return Msg

	else:
		if DrCr == "Dr":
			return "Debit account #%s not found in system."%AccID
		else:
			return "Credit account #%s not found in system."%AccID


def getAccBalanceType(AccCategory):
	DrCr=''
	Category=MKT_CATEGORY.query.get(AccCategory)
	if Category:
		DrCr=Category.BalanceType
		return DrCr
		
	else:
		return "Category not found."

def getAccAvailableBal(AccountID):
	try:
		
		AvailableBal 	= 0
		Account 		= MKT_ACCOUNT.query.get(AccountID)
		if Account:
			AvailableBal = Account.AvailableBal

		return float(AvailableBal)

	except:
		raise

def insert_MKT_ACC_ENTRY(Status,Curr,Inputter,Createdon,Authorizer,
						Authorizeon,ID,Account,Category,Currency,
						DebitCredit,Amount,Module,Transaction,
						TransactionDate,Reference,Note, Branch, 
						PrevBalance,UserReference):
	
	try:
		AE = MKT_ACC_ENTRY(
				Status 		= Status,
				Curr 		= Curr,
				Inputter 	= Inputter,
				Createdon 	= Createdon,
				Authorizer 	= Authorizer,
				Authorizeon = Authorizeon,
				# ID 			= ID,
				Account		= Account,
				Category 	= Category,
				Currency 	= Currency,
				DebitCredit = DebitCredit,
				Amount 		= Amount,
				Module 		= Module,
				Transaction = Transaction,
				TransactionDate = TransactionDate,
				Reference 	= Reference,
				Note 		= Note,
				Branch		= Branch,
				PrevBalance 	= PrevBalance,
				UserReference = UserReference)
		return db.session.add(AE)

	except:
		db.session.rollback()
		raise

def insert_MKT_JOURNAL_TEMP(	Status, Curr, Inputter, Createdon, Authorizer,
						Authorizeon, ID ,CategoryID ,DebitCredit ,
						Amount, Module, Transaction, TransactionDate ,Reference,
						Currency="", Branch="", GL_KEYS="", LCYAmount="", CustomerID="",Note="",UserReference="",Account=""):
	
	Description 	= ""
	PrevBalance 	= 0
	LCYPrevBalance 	= 0
	if Note:
		Description = Note

	try:
		Journal = 	MKT_JOURNAL_TEMP(
						Status			= 	Status,
						Curr 			= 	Curr,
						Inputter 		= 	Inputter,
						Createdon 		= 	Createdon,
						Authorizer 		= 	Authorizer,
						Authorizeon 	= 	Authorizeon,
						Account 		= 	Account,
						Description 	=	Description,
						CategoryID 		= 	CategoryID,
						CustomerID 		=	CustomerID,
						DebitCredit 	= 	DebitCredit,
						Amount 			= 	Amount,
						PrevBalance 	=	PrevBalance,
						Currency		= 	Currency,
						Module 			= 	Module,
						Transaction 	=	Transaction,
						TransactionDate = 	TransactionDate,
						Reference 		= 	Reference,
						UserReference 	=	UserReference,
						Branch 			= 	Branch,
						LCYAmount 		=	LCYAmount,
						LCYPrevBalance	=	LCYPrevBalance,
						GL_KEYS 		=	GL_KEYS
					)

		db.session.add(Journal)

	except:
		db.session.rollback()
		raise

def insert_MKT_JOURNAL(	Status, Curr, Inputter, Createdon, Authorizer,
						Authorizeon, ID ,CategoryID ,DebitCredit ,
						Amount, Module, Transaction, TransactionDate ,Reference,
						Currency="", Branch="", GL_KEYS="", LCYAmount="", CustomerID="",Note="",UserReference="",Account=""):
	
	Description 	= ""
	PrevBalance 	= 0
	LCYPrevBalance 	= 0

	ConsolBal 		= 	MKT_CONSOL_BALANCE.query.\
						filter(MKT_CONSOL_BALANCE.ID == GL_KEYS).\
						filter(MKT_CONSOL_BALANCE.Branch == Branch).\
						first()
				
	if ConsolBal:

		PrevBalance 	= ConsolBal.Balance # PrevBalance for Beggining Balance on GL Balance Detail
		LCYPrevBalance 	= ConsolBal.LCYBalance

	if Note:
		Description = Note

	try:
		Journal = 	MKT_JOURNAL(
						Status			= 	Status,
						Curr 			= 	Curr,
						Inputter 		= 	Inputter,
						Createdon 		= 	Createdon,
						Authorizer 		= 	Authorizer,
						Authorizeon 	= 	Authorizeon,
						Account 		= 	Account,
						Description 	=	Description,
						CategoryID 		= 	CategoryID,
						CustomerID 		=	CustomerID,
						DebitCredit 	= 	DebitCredit,
						Amount 			= 	Amount,
						PrevBalance 	=	PrevBalance,
						Currency		= 	Currency,
						Module 			= 	Module,
						Transaction 	=	Transaction,
						TransactionDate = 	TransactionDate,
						Reference 		= 	Reference,
						UserReference 	=	UserReference,
						Branch 			= 	Branch,
						LCYAmount 		=	LCYAmount,
						LCYPrevBalance	=	LCYPrevBalance,
						GL_KEYS 		=	GL_KEYS
					)

		return db.session.add(Journal)

	except:
		db.session.rollback()
		raise

def insert_MKT_ACC(Curr,Inputter,Createdon,Authorizer,Authorizeon,Branch,
					ID, AccName, Currency , AccProduct, AccCategory):

	DateNow 	= mktdate.getDateISO()
	BankDate 	= str(mktdate.getBankDate())
	try:
		Acc = MKT_ACCOUNT(
				Status			= 'AUTH',
				Curr 			= Curr,
				Inputter 		= Inputter,
				Createdon 		= Createdon,
				Authorizer 		= Authorizer,
				Authorizeon 	= Authorizeon,
				Branch			= Branch,
				ID 				= ID,
				CustomerList 	= '',
				AccName 		= AccName,
				Currency 		= Currency,
				JAccount 		= 'N',
				JoinID 			= '',
				AccProduct 		= AccProduct,
				AccCategory 	= AccCategory,
				InterestRate 	= 0,
				Charge 			= 0,
				OpenDate 		= DateNow,
				NextAccrDate 	= BankDate,
				AccrInterest	= 0,
				AccrCurMonth 	= 0,
				AccrCurCapital	= 0,
				Balance 		= 0,
				AvailableBal 	= 0,
				AccrIntBooked 	= 0,
				AccStatus 		= 'O',
				ClosingDate 	= '',
				Dormant 		= 'N',
				Blocked 		= 'N',
				OfficerID		= '',
				Tax 			= '',
				LastTranDate 	= DateNow)

		return db.session.add(Acc)
	
	except:
		db.session.rollback()
		raise
		return False


def update_MKT_ACC(Acc, TranDate, Balance, AvailableBal, LastTran):

	try:

		Acc.Balance 		= Balance
		Acc.AvailableBal 	= AvailableBal if float(Balance) > 0 else 0
		
		if LastTran.upper() == "YES":
			Acc.LastTranDate 	= TranDate

		return db.session.add(Acc)
	
	except:
		db.session.rollback()
		raise

def calculateLCY(Currency=None, Amount=None, TransactionDate=''):
	try:
		
		ReportingRate = getReportingRate(Currency)

		LCYAmount 	= Decimal(Amount) * Decimal(ReportingRate)

		return LCYAmount

	except:
		db.session.rollback()
		raise

def calculateBalance(AccCategory, Balance, Amount, DrCr):
	try:
		BalanceType = getAccBalanceType(AccCategory)

		if BalanceType == "Cr":
			Balance = (Decimal(Balance) + Amount)  if DrCr == "Cr" else ( Decimal(Balance) - Amount )  if DrCr == "Dr" else Amount
		else:
			Balance = (Decimal(Balance) + Amount)  if DrCr == "Dr" else ( Decimal(Balance) - Amount )  if DrCr == "Cr" else Amount

		return Balance

	except:
		db.session.rollback()
		raise

def calculateAvailableBal(AccIDID, Balance):
	try:

		AvailableBal = Balance
		Rule = getAccountRule(AccIDID)
		if Rule:
			AvailableBal = float(AvailableBal) - float(Rule.MinBalance)

		return AvailableBal

	except:
		raise

def getJournalAutoID():
	try:

		JNID = mktAutoID.setAutoID("JN", 10, "MKT_JOURNAL")
		return JNID

	except:
		db.session.rollback()
		raise

def getAccEntryAutoID():
	try:

		AEID = mktAutoID.setAutoID("AE", 6, "MKT_ACC_ENTRY")
		return AEID

	except:
		db.session.rollback()
		raise

def getValidateConsolBalance(Amount, Category, Currency, Branch, DrCr, ConsolKey="", LCYAmount=0, ExchangeRate="",TranDate=""):
	try:

		CategoryObj 		=	MKT_CATEGORY.query.get(Category)
		if CategoryObj:
			Type 			=	CategoryObj.BalanceType
			Description 	= 	CategoryObj.Description
			AccSetting 		= 	mktsetting.getAccSetting()
			BaseCurrency 	= 	AccSetting.BaseCurrency
			ListOfAllowKey 	= 	AccSetting.AllowNegative.split() if AccSetting.AllowNegative else []
			ConvertLCYCate  = 	False

			PriorYearCat 		=	AccSetting.PriorYearCat
			CurrentYearCat		=	AccSetting.CurrYearCat
			IncomeSummaryCat 	=	AccSetting.IntSummaryCat
			
			if Category in [IncomeSummaryCat,CurrentYearCat,PriorYearCat]:
				BankDateObj 	=	mktdate.getBankDateObj()
				if TranDate <= BankDateObj.LastMonthEnd:
					return False, 'The Category %s does not allow to post previous month or previous year.'%Category
			# Convert to LCY Currency if FXtransaction with P&L account
			if isFCY(BaseCurrency,Currency):
				BSAccount 	= 	isBSAccount(AccSetting,Category)
				if not BSAccount:

					if LCYAmount == 0:
						LCYAmount = calculateLCY(Currency,Amount)

					if ExchangeRate:
						LCYAmount 	= ExchangeRate * Amount

					Currency = BaseCurrency
					ConvertLCYCate  = True

			ConsolKey 		= 	ConsolKey if ConsolKey else getConsolKey(Category,Currency)
			# print "ConsolKey",ConsolKey,DrCr,Amount

			BalByKey 		= 	getConsolKeyBalance(ConsolKey, Branch)
			# print "BalByKey",BalByKey

			CheckAmount 	= 	LCYAmount if ConvertLCYCate else Amount
			Balance 		= 	getMatchesBalance(CheckAmount, BalByKey, Type, DrCr)
			# print "Balance",Balance
			
			if Decimal(Balance) < Decimal(0):

				# Category allow negative balance
				if Category in ListOfAllowKey:
					return True, BalByKey

				# If Balance is already negative, can reduce balance
				elif Balance >= BalByKey:
					return True, BalByKey

				# If balance is already negative, can't add more negative balance
				else:
					Message = "The category %s - %s doesn't have sufficient fund. Current balance is %s." %(Category, Description, mktmoney.toMoney(float(BalByKey), mktmoney.getCurrencyObj(Currency), 2))
					
					return False, Message
			else:
				return True, BalByKey

		else:
			return False,"Category %s not found."% Category
		

	except:
		raise

def isAccountInSystem(AccObj,Account,Branch):
	try:
		AccountObj = AccObj.get(Account)
		if AccountObj:
			if AccountObj.Branch != Branch:
				Branch = MKT_BRANCH.query.get(Branch)
				Message="Account %s don't have in %s branch."%(Account,Branch.Description)
				return False,Message
		else:
			Message="Account #%s not found in system."%Account
			return False,Message

		return True,"Pass"
	except Exception, e:
		db.session.rollback()
		raise
	
	

def getValidationAccounting(Inputter="",Createdon="",Authorizer="",Authorizeon="",Branch="",DrAcc="",DrCat="",DrCur="",CrAcc="",CrCat="",CrCur="",Amount="",Module="",Tran="",TranDate="",Reference="",Note="",Mode=""):
		# Mode Option
		# 	Direct 	 : Both Dr/Cr is Direct 
		# 	None 	 : Both Dr/Cr not Direct
		# 	DrDirect : Dr Direct and Cr not Direct
		# 	CrDirect : Cr Direct and Dr not Direct
	try:
		Message=""
		CategoryList = [str(row.ID) for row in MKT_CATEGORY.query]
		AccountObj   = MKT_ACCOUNT.query
		if not Mode:
			if not DrAcc:
				Message="Debit account not found for post accounting."
				return False,Message
			else:
				Check = isAccountInSystem(AccountObj,DrAcc,Branch)
				if not Check[0]:
					return Check

			if not CrAcc:
				Message="Credit account not found for post accounting."
				return False,Message
			else:
				Check = isAccountInSystem(AccountObj,CrAcc,Branch)
				if not Check[0]:
					return Check

		elif Mode == "DrDirect":
			if not CrAcc:
				Message="Credit account not found for post accounting."
				return False,Message
			else:
				Check = isAccountInSystem(AccountObj,CrAcc,Branch)
				if not Check[0]:
					return Check

		elif Mode == "CrDirect":
			if not DrAcc:
				Message="Debit account not found for post accounting."
				return False,Message
			else:
				Check = isAccountInSystem(AccountObj,DrAcc,Branch)
				if not Check[0]:
					return Check

		if not DrCat:
			Message="Debit category not found for post accounting."
			return False,Message
		else:
			if not DrCat in CategoryList:
				Message="Debit category %s not found in system."%DrCat
				return False,Message
			# Validate Cash Category is required account #			
			if mktteller.isCashCateogry(DrCat):
				if not DrAcc:
					CategoryDesc = DrCat
					CategoryObj = MKT_CATEGORY.query.get(DrCat)
					if CategoryObj:
						CategoryDesc = '%s - %s'%(DrCat,CategoryObj.Description)
					Message = "Debit account is required if you choose category %s"% CategoryDesc
					return False,Message

		if not CrCat:
			Message="Credit category not found for post accounting."
			return False,Message
		else:
			if not CrCat in CategoryList:
				Message="Credit category %s not found in system."%CrCat
				return False,Message

			# Validate Cash Category is required account #			
			if mktteller.isCashCateogry(CrCat):
				if not CrAcc:
					CategoryDesc = CrCat
					CategoryObj = MKT_CATEGORY.query.get(CrCat)
					if CategoryObj:
						CategoryDesc = '%s - %s'%(CrCat,CategoryObj.Description)
					Message = "Credit account is required if you choose category %s"% CategoryDesc
					return False,Message

		if not Amount:
			Message="Amount not found for post accounting."
			return False,Message

		if not Reference:
			Message="Reference not found for post accounting."
			return False,Message	
		else:
			if len(Reference)>35:
				Message="Reference: Field cannot be longer than 35 characters."
				return False,Message
		if Note:
			if len(Note)>100:
				Message="Note: Field cannot be longer than 50 characters."
				return False,Message
		if not TranDate:
			Message="Transaction Date: This field is required."
			return False,Message
		else:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				Message="Transaction Date: Incorrect date format, should be YYYY-MM-DD"
				return False,Message
				
		return True,Message

	except Exception, e:
		db.session.rollback()
		raise
	
	

def setAccoutningCheckPoint(Mode,ID,Branch=""):
	try:
	
		Message 			= ""
		CheckAccEntry 		= False
		
		# Mode Option
		# 	Direct 	 : Both Dr/Cr is Direct 
		# 	None 	 : Both Dr/Cr not Direct
		# 	DrDirect : Dr Direct and Cr not Direct
		# 	CrDirect : Cr Direct and Dr not Direct

		if not Mode: # Both Dr/Cr not Direct
			# Check Journal
			JournalObj = MKT_JOURNAL.query.filter(MKT_JOURNAL.Reference==ID)
			if JournalObj.all():
				CountJN = len(JournalObj.all())
				if not CountJN % 2 == 0: # Check Odd value
					Message = "Total Debit/Credit amount not balance, After commit in journal."
					return False,Message
			else:
				Message = "Accounting transcation was interrupted in journal."
				return False,Message

			# Check Account Entry
			AccEntryObj = MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Reference==ID)
			if Branch:
				AccEntryObj 	=	AccEntryObj.filter(MKT_ACC_ENTRY.Branch==Branch)
			if AccEntryObj.all():
				
				CountAE = len(AccEntryObj.all())
				if not CountAE % 2 == 0: # Check Odd value

					Message = "Total Debit/Credit amount not balance, After commit in account entry."
					return False,Message

			else:
				Message = "Accounting transcation was interrupted in account entry."
				return False,Message

		elif Mode in ["Direct","DrDirect","CrDirect"]:
			# Case Only Multi Journal
			if ID[:2] == "MJ":
				DrAmount = 0
				CrAmount = 0

				JournalObj = MKT_JOURNAL.query.filter(MKT_JOURNAL.Reference==ID)
												
				JournalSumObj = db.session.query(	func.sum(MKT_JOURNAL.Amount).label('Amount'),
													func.sum(MKT_JOURNAL.LCYAmount).label('LCYAmount'),
													MKT_JOURNAL.DebitCredit).\
												filter(MKT_JOURNAL.Reference==ID).\
												order_by(MKT_JOURNAL.DebitCredit.asc()).\
												group_by(MKT_JOURNAL.DebitCredit)
				CashCategory = mktteller.getCashCategory()
				CheckAccEntryObj = MKT_JOURNAL.query.filter(MKT_JOURNAL.Reference==ID).\
												filter(MKT_JOURNAL.CategoryID.in_(CashCategory)).first()
				CheckAccEntry = True if CheckAccEntryObj else False
				
				for row in JournalSumObj:
					DebitCredit = row.DebitCredit
					# print row.DebitCredit,row.Amount,row.LCYAmount
					if DebitCredit == "Dr":
						DrAmount = row.LCYAmount
					else:
						CrAmount = row.LCYAmount

				# print 'DrAmount',DrAmount,'CrAmount',CrAmount
				if mktmoney.formatNumber(DrAmount, DecimalPlace=5) != mktmoney.formatNumber(CrAmount, DecimalPlace=5):
					Message = "Total amount debit %s /credit %s not balance, After commit in journal."%(DrAmount,CrAmount)
					return False,Message
			else:
				# Check Journal for case singal journal
				JournalObj = MKT_JOURNAL.query.filter(MKT_JOURNAL.Reference==ID)
				if JournalObj.all():
					
					CountJN = len(JournalObj.all())
					if not CountJN % 2 == 0: # Check Odd value
						Message = "Total Debit/Credit amount not balance, After commit in journal."
						return False,Message
				else:
					Message = "Accounting transcation was interrupted in journal."
					return False,Message

			if Mode in ["DrDirect","CrDirect"]:
				CheckAccEntry = True

			if CheckAccEntry:
				AccEntryObj = MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Reference==ID)
				if not AccEntryObj.all():
					Message = "Accounting transcation was interrupted in account entry."
					return False,Message
			
		else:
			Message = "Invaild define mode for post accounting."
			return False,Message
		return True,Message
	except Exception, e:
		db.session.rollback()
		raise
	

def updateCashCateogry(Status="", Curr="", Inputter="", Createdon="", Authorizer="", Authorizeon="",
						Category="",Currency="", DrCr="", Amount="", Module="", Transaction="", TransactionDate="",
						Reference="", Note="",Branch="",UserReference=""):
	try:
		# print "updateCashCateogry"
		if float(Amount) > 0:

			# print "Amount more then 0"
			if Category in mktteller.getCashCategory():
				# print "Category:%s"%Category
				LastTran 	= "Yes"
				CashAccountObj 	= mktteller.getCashAccountByCategory(Category,Currency,Inputter,Branch)
				if CashAccountObj[0]:
					AccountObj = CashAccountObj[1]
					# print "account:%s"% AccountObj.ID
					Account 	= AccountObj.ID
					AccountObj 	= MKT_ACCOUNT.query.with_for_update().get(Account)
					AEID 		= ''#getAccEntryAutoID()
					# print "after get AEID"
					Balance 	= Decimal(AccountObj.Balance) if AccountObj.Balance else Decimal(0)
					Amount 		= Decimal(Amount)
					Balance 	= calculateBalance(Category,Balance, Amount, DrCr)
					# print "Balance%s"%Balance
					PrevBalance = AccountObj.Balance
					# print "PrevBalance%s"%PrevBalance
					AvailableBal = calculateAvailableBal(Account, Balance)
					# print "after insert_MKT_ACC_ENTRY"
					#Call function to insert into MKT_ACC_ENTRY
					ObjInsertJN 	= insert_MKT_ACC_ENTRY(
											Status, Curr, Inputter, Createdon, Authorizer,
											Authorizeon, AEID, Account, Category, Currency,
											DrCr, Amount, Module,Transaction, TransactionDate,
											Reference, Note, Branch, PrevBalance, UserReference
											)
					# print "inserted insert_MKT_ACC_ENTRY"
					# Call function to update_MKT_ACC
					ObjUpdateAccountBalance = update_MKT_ACC(AccountObj, TransactionDate, Balance, AvailableBal, LastTran)

					# print "finish update account"
					return True,''
				else:
					# print "error user don't have cash"
					return False,CashAccountObj[1]
			else:
				# print "error Category not found."
				return False,"Category %s not found."%Category
		else:
			# print "Amount must be more then zero."
			return False,"Amount must be more then zero."

	except Exception, e:
		db.session.rollback()
		return False,e

def getCustomerIDByAccount(Account):
	try:

		Customer 	= 	""

		Record 		=	db.session.query(
							MKT_ACCOUNT.ID,
							MKT_ACCOUNT.CustomerList
						).\
						join(
							MKT_CUSTOMER,
							MKT_CUSTOMER.ID == MKT_ACCOUNT.CustomerList
						).\
						filter(
							MKT_ACCOUNT.ID == Account
						).\
						first()

		if Record:

			Customer = Record.CustomerList

		return Customer

	except:
		db.session.rollback()
		raise

def setAmountToCurrencyFormat(Amount, Currency, Mod=""):
	try:

		NewAmount 	=	0

		Module 		=	['JE', 'MJ', 'TC', 'TO', 'WD', 'DP', 'FD', 'FW', 'FT', 'TT']

		Check 		=	[item for item in Module if Mod if item]

		if Amount and Currency:

			if len(Check) > 0:
			
				NewAmount = mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency))

				if NewAmount:

					if str(NewAmount).find(',') != -1:

						NewAmount = str(NewAmount).replace(',', '')

			else:

				NewAmount = Amount

		return Decimal(NewAmount)

	except:
		raise

def postAccounting(Status="", Curr="", Inputter="", Createdon="", Authorizer="", Authorizeon="", AEID="", Account="",Category="",
					Currency="", DrCr="", Amount="", Module="", Transaction="", TransactionDate="", Reference="", Note="",
					JNID="", Branch="", GL_KEYS="", Mode="", LastTran="No", LCYAmount=0, AllowEquivalent=True, UserReference="",IsMonthEnd=False,EOD=0):
	"""
	For posting accounting 
	For any adjustment back date of expense or income to previous month or previous year we are going to store 
	its amount in LCY amout for posting close month or year:

	"""
	try:
		BankDateObj 	= 	mktdate.getBankDateObj()
		AccSetting 		= 	mktsetting.getAccSetting()
		TranDate        =   datetime.strptime(str(TransactionDate),'%Y-%m-%d').date()
		LastMonthEnd    =   datetime.strptime(str(BankDateObj.LastMonthEnd),'%Y-%m-%d').date()
		if LCYAmount == 0:	LCYAmount = calculateLCY(Currency, Amount)
		
		processPostingAccounting(Status=Status, Curr=Curr, Inputter=Inputter, Createdon=Createdon, Authorizer=Authorizer, 
				Authorizeon=Authorizeon, AEID=AEID, Account=Account,Category=Category, Currency=Currency, DrCr=DrCr, 
				Amount=Amount, Module=Module, Transaction=Transaction, TransactionDate=TransactionDate, Reference=Reference, 
				Note=Note, JNID=JNID, Branch=Branch, GL_KEYS=GL_KEYS, Mode=Mode, LastTran=LastTran, LCYAmount=LCYAmount, 
				AllowEquivalent=AllowEquivalent, UserReference=UserReference,AccSetting=AccSetting,EOD=EOD)

		if TranDate <= LastMonthEnd:
			BranchObj 	=	MKT_BRANCH.query.with_for_update().get(Branch)
			
			if BranchObj:
				ReportLocked 		=	BranchObj.ReportLocked
				CatObj 				= 	MKT_CATEGORY.query.get(Category)
				IncCatType 			=	AccSetting.IncCatType.split()
				ExpCatType 			=	AccSetting.ExpCatType.split()
				IncExpCatList 		=	IncCatType + ExpCatType
				MonthEndStatus 		=	AccSetting.MonthEndStatus # YYYY-MM-STATUS Ex. 2017-10-Y or 2017-10-N
				PrevLastMonthEnd    =   datetime.strptime(str(BankDateObj.PrevLastMonthEnd),'%Y-%m-%d').date()
				BankDate            =   datetime.strptime(str(BankDateObj.SystemDate),'%Y-%m-%d').date()
				NextMonthEnd        =   datetime.strptime(str(BankDateObj.NextMonthEnd),'%Y-%m-%d').date()
				NextYearEnd    		=   datetime.strptime(str(BankDateObj.NextYearEnd),'%Y-%m-%d').date()
				LastYearEnd    		=   datetime.strptime(str(BankDateObj.LastYearEnd),'%Y-%m-%d').date()
				StartMonthOfYearEnd	=	datetime.strptime('%s-%s-%s'%(LastYearEnd.year,LastYearEnd.month,'01'),'%Y-%m-%d').date()
				EndMonthOfYearEnd 	=	LastYearEnd
				IsPreviousMonth		=	TranDate <= LastMonthEnd and TranDate > PrevLastMonthEnd and LastYearEnd < TranDate < NextYearEnd
				IsPreviousYear		=	TranDate >= StartMonthOfYearEnd and TranDate <= EndMonthOfYearEnd

				if (CatObj.CategoryType in IncExpCatList and ReportLocked != '10000') and \
					((MonthEndStatus and MonthEndStatus[:7] == BankDateObj.LastMonthEnd[:7] and MonthEndStatus[-1] == 'Y') or \
					(TranDate <= PrevLastMonthEnd)):
					# Check if it is transaction for previous month 
					LCYAmount = Decimal(LCYAmount)
					if CatObj.BalanceType != DrCr:
						LCYAmount = -LCYAmount
						
					if IsPreviousYear:
						print 'accounting previous year',Category,LCYAmount
						BranchObj.PrevYearAmount += LCYAmount if CatObj.CategoryType in IncCatType else -LCYAmount
						
					elif IsPreviousMonth:
						print 'accounting previous month',Category,LCYAmount
						BranchObj.PrevMonthAmount += LCYAmount if CatObj.CategoryType in IncCatType else -LCYAmount

					
	except Exception as e:
		db.session.rollback()
		raise


def processPostingAccounting(Status="", Curr="", Inputter="", Createdon="", Authorizer="", Authorizeon="", AEID="", Account="",
	Category="", Currency="", DrCr="", Amount="", Module="", Transaction="", TransactionDate="", Reference="", Note="",
	JNID="", Branch="", GL_KEYS="", Mode="", LastTran="No", LCYAmount=0, AllowEquivalent=True, UserReference="",AccSetting="",EOD=0):
	

	# Call default auditrail
	Status 		= Status if Status else "AUTH"
	Curr 		= Curr if Status else "0"
	Inputter 	= Inputter if Inputter else "System"
	Createdon 	= mktdate.getDateTimeNow() if Createdon else Createdon
	Authorizer  = Authorizer if Authorizer else "System"
	Authorizeon = mktdate.getDateTimeNow() if Authorizeon else Authorizeon

	JNID 	= 	''#getJournalAutoID() # get journal ID
	AEID 	= 	''#getAccEntryAutoID() # get account entry ID
	CustomerID = ""
	
	# print "GL_KEYS Original:",GL_KEYS,Currency,Amount
	# Check GL_KEYS for convert to local currency
	#GL_KEYS,Currency,Amount = setConvertGLKEY(AccSetting,Category,Currency,GL_KEYS,Amount,LCYAmount)
	# print "GL_KEYS Converted:",GL_KEYS,Currency,Amount,LCYAmount
	if float(Amount) > 0:
		if EOD ==1:
			
			if Mode == "Direct":
				#Call function to insert into MKT_JOURNAL_TEMP
				ObjInsertJN = insert_MKT_JOURNAL_TEMP(Status, Curr, Inputter, Createdon, Authorizer,
											Authorizeon, JNID, Category, DrCr, Amount, Module, Transaction,
											TransactionDate, Reference, Currency, Branch, GL_KEYS, LCYAmount, CustomerID, Note, UserReference, Account=Account)

			else:
				# Acc = MKT_ACCOUNT.query.with_for_update().get(Account)
				# Testing Multi Process
				Acc = MKT_ACCOUNT.query.get(Account)

				if Acc.Type == 'OD':
					import app.tools.bank.mktoverdraft as mktoverdraft
					GL_KEYS = mktoverdraft.OVERDRAFT().postingOD(Account,Amount,Category,Currency,DrCr,TransactionDate,Branch,Authorizeon,Transaction,Note,EOD=EOD)

				Balance = calculateBalance(Category,Acc.Balance, Amount, DrCr)
				PrevBalance = Acc.Balance
				AvailableBal = calculateAvailableBal(Account, Balance)
				#Call function to insert into MKT_ACC_ENTRY
				ObjInsertAE = insert_MKT_ACC_ENTRY(
											Status, Curr, Inputter, Createdon, Authorizer,
											Authorizeon, AEID, Account, Category, Currency,
											DrCr, Amount, Module,Transaction, TransactionDate,
											Reference, Note, Branch, PrevBalance,UserReference
											)
				CustomerID 	= getCustomerIDByAccount(Account)
				#Call function to insert into MKT_JOURNAL
				ObjInsertJN = insert_MKT_JOURNAL_TEMP(Status, Curr, Inputter, Createdon, Authorizer,
												Authorizeon, JNID, Category, DrCr, Amount, Module, Transaction,
												TransactionDate, Reference, Currency, Branch, GL_KEYS, LCYAmount, CustomerID,Note, UserReference, Account=Account)
				# Call function to update_MKT_ACC
				ObjUpdateAccountBalance = update_MKT_ACC(Acc, TransactionDate, Balance, AvailableBal, LastTran)

			# Check for Posting Equivalent Category and Position Account
			ObjRevaluation = isEquivalentPosting(Status,Curr,Inputter,Createdon,Authorizer,Authorizeon,Branch,Category,DrCr,Currency,Amount,LCYAmount,Module,Transaction,TransactionDate,Reference,Note,CustomerID,AllowEquivalent,EOD=EOD)

		else:
			
			if Mode == "Direct":
				#Call function to insert into MKT_JOURNAL
				ObjInsertJN = insert_MKT_JOURNAL(Status, Curr, Inputter, Createdon, Authorizer,
											Authorizeon, JNID, Category, DrCr, Amount, Module, Transaction,
											TransactionDate, Reference, Currency, Branch, GL_KEYS, LCYAmount, CustomerID, Note, UserReference, Account=Account)

			else:

				# Acc = MKT_ACCOUNT.query.with_for_update().get(Account)
				# Testing Multi Process
				Acc = MKT_ACCOUNT.query.with_for_update().get(Account)
				if Acc.Type == 'OD':
					import app.tools.bank.mktoverdraft as mktoverdraft
					GL_KEYS = mktoverdraft.OVERDRAFT().postingOD(Account,Amount,Category,Currency,DrCr,TransactionDate,Branch,Authorizeon,Transaction,Note)

				Balance = calculateBalance(Category,Acc.Balance, Amount, DrCr)
				PrevBalance = Acc.Balance
				AvailableBal = calculateAvailableBal(Account, Balance)
				#Call function to insert into MKT_ACC_ENTRY
				ObjInsertAE = insert_MKT_ACC_ENTRY(
											Status, Curr, Inputter, Createdon, Authorizer,
											Authorizeon, AEID, Account, Category, Currency,
											DrCr, Amount, Module,Transaction, TransactionDate,
											Reference, Note, Branch, PrevBalance,UserReference
											)
				CustomerID 	= getCustomerIDByAccount(Account)
				#Call function to insert into MKT_JOURNAL
				ObjInsertJN = insert_MKT_JOURNAL(Status, Curr, Inputter, Createdon, Authorizer,
												Authorizeon, JNID, Category, DrCr, Amount, Module, Transaction,
												TransactionDate, Reference, Currency, Branch, GL_KEYS, LCYAmount, CustomerID,Note, UserReference, Account=Account)
				# Call function to update_MKT_ACC
				ObjUpdateAccountBalance = update_MKT_ACC(Acc, TransactionDate, Balance, AvailableBal, LastTran)

			# Check for Posting Equivalent Category and Position Account
			ObjRevaluation = isEquivalentPosting(Status,Curr,Inputter,Createdon,Authorizer,Authorizeon,Branch,Category,DrCr,Currency,Amount,LCYAmount,Module,Transaction,TransactionDate,Reference,Note,CustomerID,AllowEquivalent)

			# Update Consolidate Balance
			ObjsetConsolBalance = mktgl.setConsolBalance(GL_KEYS, Branch, Currency, Amount, Category, DrCr, Module, TransactionDate, LCYAmount)

def isFCY(BaseCurrency,Currency):
	# Check if Foreign Currency return True
	return  False if BaseCurrency == Currency else True

def isLCY(BaseCurrency,Currency):
	# Check if Local Currency return True
	return  True if BaseCurrency == Currency else False

def isBSAccount(AccSetting,Category):
	"""
		Check if booking journal with Foreign currency and category in BS need to booking Equivalent
	"""
	RevaluationCat 	= mktcurrencyrevaluate.getCategoryRevaluate(AccSetting) # Category of BS
	
	if Category in RevaluationCat:
		return True

	return False

def setConvertGLKEY(AccSetting,Category,Currency,GL_KEYS,Amount,LCYAmount):
	"""
		Check if booking journal with foreign currency and category in P&L need to convert GL_KEYS to local currency.
	"""
	
	BaseCurrency = AccSetting.BaseCurrency
	if isFCY(BaseCurrency,Currency):
		if not isBSAccount(AccSetting,Category):
			# Convert currency FCY to local
			ListGL 		= GL_KEYS.split('.')
			ListGL[1] 	= BaseCurrency
			GL_KEYS 	= ".".join(ListGL)
			Amount 		= LCYAmount
			Currency 	= BaseCurrency

	return GL_KEYS,Currency,Amount

def getLCYCurrency(AccSetting,Currency):
	BaseCurrency = AccSetting.BaseCurrency
	if isFCY(BaseCurrency,Currency):
		return BaseCurrency
	else:
		return Currency
	
def setLCYAmount(ReportingRateObj,AccSetting,Currency,Amount):

	BaseCurrency = AccSetting.BaseCurrency
	if isFCY(BaseCurrency,Currency):
		Amount 	  = float(Amount) * float(ReportingRateObj.get(Currency))
		Currency  = BaseCurrency
	
	return Currency,Amount

def setFCYAmount(ReportingRateObj,AccSetting,Currency,Amount):

	BaseCurrency = AccSetting.BaseCurrency
	if isFCY(BaseCurrency,Currency):
		Amount 	  = float(Amount) / float(ReportingRateObj.get(Currency))
	
	return Amount

def getReportingRateObj():
	
	Dict = {}
	CurrencyObj 	= MKT_CURRENCY.query
	if CurrencyObj:
		for row in CurrencyObj:
			Dict.update({str(row.ID):row.ReportingRate})
		return Dict

def getCategoryType(Category):
	try:

		CategoryTypeObj 	=	MKT_CATEGORY.query.get(Category)

		if CategoryTypeObj:
			return CategoryTypeObj.CategoryType
		else:
			db.session.rollback()
			raise ValueError("Category Type %s not found"%Category)
	except:
		raise


def isEquivalentPosting(Status,Curr,Inputter,Createdon,Authorizer,Authorizeon,Branch,Category,DebitCredit,ForeignCurrency,Amount,LCYAmount,Module,Transaction,TransactionDate,Reference,Note,CustomerID,AllowEquivalent,EOD=0):
	# FCY : Foreign Currency refer to other currency different base currency in setting.
	# LCY : Local Currency refer to other currency different base currency in setting.

	AccSetting 		= 	mktsetting.getAccSetting()
	PositionCat 	=	AccSetting.PositionCat
	EquivalentCat 	=	AccSetting.EquivalentCat
	LocalCurrency 	= 	AccSetting.BaseCurrency
	Revaluation 	= 	AccSetting.Revaluation if AccSetting.Revaluation else "N"
	# print "Revaluation",Revaluation
	# When trnasction bookin accounting is FCY
	if Revaluation == 'Y': # Check setting allow revaluation or not
		
		BSAccount 		= 	isBSAccount(AccSetting,Category)
		# print BSAccount,AllowEquivalent
		if AllowEquivalent and ForeignCurrency != LocalCurrency: # Mean booking Equivalent and Position Account unless cross currency
			# print "Allow Equivalent",AllowEquivalent
			if BSAccount:
				# print "Start booking Equivalent"
				setEquivalentPosting(Status,Curr,Inputter,Createdon,Authorizer,Authorizeon,Branch,AccSetting,DebitCredit,ForeignCurrency,Amount,LCYAmount,Module,Transaction,TransactionDate,Reference,Note,CustomerID,EOD=EOD)


def setEquivalentPosting(Status,Curr,Inputter,Createdon,Authorizer,Authorizeon,Branch,AccSetting,DebitCredit,ForeignCurrency,Amount,LCYAmount,Module,Transaction,TransactionDate,Reference,Note,CustomerID,EOD=0):
	
	PositionCat 	=	AccSetting.PositionCat
	EquivalentCat 	=	AccSetting.EquivalentCat
	LocalCurrency 	= 	AccSetting.BaseCurrency
	if EOD == 1:
		if DebitCredit == "Dr":
		
			'''
				Base Currency 	: KHR
				Exchange Rate 	: R 4,000
				
				*** Buy Foreign

				Debit Cash - FCY 					FCY=1,000 		LCY=4,000,000

					Credit Cash-LCY 						FCY=4,000,000 	LCY=4,000,000

				Debit Equivalent-LCY				FCY=4,000,000 		LCY=4,000,000

					Credit Position Account -FCY 			FCY=1,000 		LCY=4,000,000
			'''
			
			#Debit Equivalent-LCY
			# print 'Dr- EquivalentCat',EquivalentCat
			DrCr =	"Dr"
			Category 	= 	EquivalentCat
			GL_KEYS 	= 	getConsolKey(Category, LocalCurrency, "", "", "", "", "", "", "", "", "", "", "")
			JNID 		= 	''#getJournalAutoID() # get journal ID
			#Call function to insert into MKT_JOURNAL_TEMP
			ObjInsertJN = insert_MKT_JOURNAL_TEMP(Status, Curr, Inputter, Createdon, Authorizer,
										Authorizeon, JNID, Category, DrCr, LCYAmount, Module, Transaction,
										TransactionDate, Reference, LocalCurrency, Branch, GL_KEYS, LCYAmount, CustomerID, Note)
		
			#Credit Position Account -FCY
			# print "Cr- PositionCat",PositionCat
			DrCr =  	"Cr"
			Category 	= 	PositionCat
			GL_KEYS 	= 	getConsolKey(Category, ForeignCurrency, "", "", "", "", "", "", "", "", "", "", "")
			JNID 		= 	''#getJournalAutoID() # get journal ID

			#Call function to insert into MKT_JOURNAL_TEMP
			ObjInsertJN = insert_MKT_JOURNAL_TEMP(Status, Curr, Inputter, Createdon, Authorizer,
										Authorizeon, JNID, Category, DrCr, Amount, Module, Transaction,
										TransactionDate, Reference, ForeignCurrency, Branch, GL_KEYS, LCYAmount, CustomerID, Note)
		
		else:
			'''
				Base Currency 	: KHR
				Exchange Rate 	: R 4,000

				*** Sell Foreign
				Debit Cash-LCY 						FCY=4,000,000 		LCY=4,000,000

					Credit Cash-FCY 							FCY=1,000 		LCY=4,000,000
				------------------------			---------------------------------------------
				Debit Position Account -FCY			FCY=1,000 		LCY=4,000,000

					Credit Equivalent-LCY 						FCY=4,000,000 	LCY=4,000,000
			'''
			
			#Debit Position Account -FCY

			DrCr 		=	"Dr"
			Category 	= 	PositionCat
			GL_KEYS 	= 	getConsolKey(Category, ForeignCurrency, "", "", "", "", "", "", "", "", "", "", "")
			JNID 		= 	''#getJournalAutoID() # get journal ID
			# print 'Dr- Position',Category
			#Call function to insert into MKT_JOURNAL_TEMP
			ObjInsertJN = insert_MKT_JOURNAL_TEMP(Status, Curr, Inputter, Createdon, Authorizer,
										Authorizeon, JNID, Category, DrCr, Amount, Module, Transaction,
										TransactionDate, Reference, ForeignCurrency, Branch, GL_KEYS, LCYAmount, CustomerID, Note)

			#Credit Equivalent-LCY
			DrCr 		=  	"Cr"
			Category 	= 	EquivalentCat
			GL_KEYS 	= 	getConsolKey(Category, LocalCurrency, "", "", "", "", "", "", "", "", "", "", "")
			JNID 		= 	''#getJournalAutoID() # get journal ID
			# print 'Cr- Position',Category
			#Call function to insert into MKT_JOURNAL_TEMP
			ObjInsertJN = insert_MKT_JOURNAL_TEMP(Status, Curr, Inputter, Createdon, Authorizer,
										Authorizeon, JNID, Category, DrCr, LCYAmount, Module, Transaction,
										TransactionDate, Reference, LocalCurrency, Branch, GL_KEYS, LCYAmount, CustomerID, Note)
	else:
		if DebitCredit == "Dr":
		
			'''
				Base Currency 	: KHR
				Exchange Rate 	: R 4,000
				
				*** Buy Foreign

				Debit Cash - FCY 					FCY=1,000 		LCY=4,000,000

					Credit Cash-LCY 						FCY=4,000,000 	LCY=4,000,000

				Debit Equivalent-LCY				FCY=4,000,000 		LCY=4,000,000

					Credit Position Account -FCY 			FCY=1,000 		LCY=4,000,000
			'''
			
			#Debit Equivalent-LCY
			# print 'Dr- EquivalentCat',EquivalentCat
			DrCr =	"Dr"
			Category 	= 	EquivalentCat
			GL_KEYS 	= 	getConsolKey(Category, LocalCurrency, "", "", "", "", "", "", "", "", "", "", "")
			JNID 		= 	''#getJournalAutoID() # get journal ID
			#Call function to insert into MKT_JOURNAL
			ObjInsertJN = insert_MKT_JOURNAL(Status, Curr, Inputter, Createdon, Authorizer,
										Authorizeon, JNID, Category, DrCr, LCYAmount, Module, Transaction,
										TransactionDate, Reference, LocalCurrency, Branch, GL_KEYS, LCYAmount, CustomerID, Note)
			# Update Consolidate Balance
			ObjsetConsolBalance = mktgl.setConsolBalance(GL_KEYS, Branch, LocalCurrency, LCYAmount, Category, DrCr, Module, TransactionDate, LCYAmount)

			
			#Credit Position Account -FCY
			# print "Cr- PositionCat",PositionCat
			DrCr =  	"Cr"
			Category 	= 	PositionCat
			GL_KEYS 	= 	getConsolKey(Category, ForeignCurrency, "", "", "", "", "", "", "", "", "", "", "")
			JNID 		= 	''#getJournalAutoID() # get journal ID

			#Call function to insert into MKT_JOURNAL
			ObjInsertJN = insert_MKT_JOURNAL(Status, Curr, Inputter, Createdon, Authorizer,
										Authorizeon, JNID, Category, DrCr, Amount, Module, Transaction,
										TransactionDate, Reference, ForeignCurrency, Branch, GL_KEYS, LCYAmount, CustomerID, Note)
			# Update Consolidate Balance
			ObjsetConsolBalance = mktgl.setConsolBalance(GL_KEYS, Branch, ForeignCurrency, Amount, Category, DrCr, Module, TransactionDate, LCYAmount)
		
		else:
			'''
				Base Currency 	: KHR
				Exchange Rate 	: R 4,000

				*** Sell Foreign
				Debit Cash-LCY 						FCY=4,000,000 		LCY=4,000,000

					Credit Cash-FCY 							FCY=1,000 		LCY=4,000,000
				------------------------			---------------------------------------------
				Debit Position Account -FCY			FCY=1,000 		LCY=4,000,000

					Credit Equivalent-LCY 						FCY=4,000,000 	LCY=4,000,000
			'''
			
			#Debit Position Account -FCY

			DrCr 		=	"Dr"
			Category 	= 	PositionCat
			GL_KEYS 	= 	getConsolKey(Category, ForeignCurrency, "", "", "", "", "", "", "", "", "", "", "")
			JNID 		= 	''#getJournalAutoID() # get journal ID
			# print 'Dr- Position',Category
			#Call function to insert into MKT_JOURNAL
			ObjInsertJN = insert_MKT_JOURNAL(Status, Curr, Inputter, Createdon, Authorizer,
										Authorizeon, JNID, Category, DrCr, Amount, Module, Transaction,
										TransactionDate, Reference, ForeignCurrency, Branch, GL_KEYS, LCYAmount, CustomerID, Note)
			# Update Consolidate Balance
			ObjsetConsolBalance = mktgl.setConsolBalance(GL_KEYS, Branch, ForeignCurrency, Amount, Category, DrCr, Module, TransactionDate, LCYAmount)

		
			#Credit Equivalent-LCY
			DrCr 		=  	"Cr"
			Category 	= 	EquivalentCat
			GL_KEYS 	= 	getConsolKey(Category, LocalCurrency, "", "", "", "", "", "", "", "", "", "", "")
			JNID 		= 	''#getJournalAutoID() # get journal ID
			# print 'Cr- Position',Category
			#Call function to insert into MKT_JOURNAL
			ObjInsertJN = insert_MKT_JOURNAL(Status, Curr, Inputter, Createdon, Authorizer,
										Authorizeon, JNID, Category, DrCr, LCYAmount, Module, Transaction,
										TransactionDate, Reference, LocalCurrency, Branch, GL_KEYS, LCYAmount, CustomerID, Note)
			# Update Consolidate Balance
			ObjsetConsolBalance = mktgl.setConsolBalance(GL_KEYS, Branch, LocalCurrency, LCYAmount, Category, DrCr, Module, TransactionDate, LCYAmount)

def setGainAndLossAccounting(AccSetting,GainOrLoss,Branch,TranDate,Currency,Amount,Reference):
	"""
		GainOrLoss if True mean that Gain on Exchange else Loss on Exchange

		+ Case GainOrLoss equal True
		+ Gain On Exchange

			Debit 	Equivalent - LCY 			xxxx
			
				Credit 	Gain on Exchange - LCY 				xxxx

		+ Case GainOrLoss equal False
		+ Loss On Exchange 

			Debit 	Loss On Exchange			xxxx
			
				Credit 	Equivalent - LCY 					xxxx
	"""

	Amount = '{:.9f}'.format(Amount) # If decimal place more than 9 digit need to round 
	Amount = float(Amount)

	if Amount > 0 :

		#Debit 	
		DrCr 		=	"Dr"
		Category 	= 	AccSetting.EquivalentCat if GainOrLoss else AccSetting.LossOnExcCat # True is Gain
		GL_KEYS 	= 	getConsolKey(Category, Currency)
		JNID 		= 	''#getJournalAutoID() # get journal ID
		DateTimeNow = 	mktdate.getDateTimeNow()
		Module 		= 	"RV"
		Transaction =  	AccSetting.RevTran
		

		#Call function to insert into MKT_JOURNAL
		# ObjInsertJN = insert_MKT_JOURNAL("AUTH", "0", "System", DateTimeNow, "System",
		# 							DateTimeNow, JNID, Category, DrCr, Amount, Module, Transaction,
		# 							TranDate, Reference, Currency, Branch, GL_KEYS, Amount)
		# Update Consolidate Balance
		# ObjsetConsolBalance = mktgl.setConsolBalance(GL_KEYS, Branch, Currency, Amount, Category, DrCr, Module, TranDate, Amount)
		postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			"System",				# Inputter
			DateTimeNow, 			# Createdon
			"System",				# Authorizer
			DateTimeNow,			# Authorizeon
			"", 					# AEID
			"",						# Account
			Category,				# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(Amount), 		# Amount
			Module,					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			Reference,				# Reference
			"", 					# Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			'Direct' 					# Mode check to insert Journal for category
		)

		#Credit
		DrCr 		=	"Cr"
		Category 	= 	AccSetting.GainOnExcCat if GainOrLoss else AccSetting.EquivalentCat
		GL_KEYS 	= 	getConsolKey(Category, Currency)
		JNID 		= 	''#getJournalAutoID() # get journal ID
		DateTimeNow = 	mktdate.getDateTimeNow()
		Module 		= 	"RV"
		Transaction =  	AccSetting.RevTran


		#Call function to insert into MKT_JOURNAL
		# ObjInsertJN = insert_MKT_JOURNAL("AUTH", "0", "System", DateTimeNow, "System",
		# 							DateTimeNow, JNID, Category, DrCr, Amount, Module, Transaction,
		# 							TranDate, Reference, Currency, Branch, GL_KEYS, Amount)
		# Update Consolidate Balance
		# ObjsetConsolBalance = mktgl.setConsolBalance(GL_KEYS, Branch, Currency, Amount, Category, DrCr, Module, TranDate, Amount)

		# print "%s - Gain and Loss on exchange amount %s." %(Reference, mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(BaseCurrency), 2))

		postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amount), 		# Amount
				Module,					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				Reference,				# Reference
				"", 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				'Direct' 					# Mode check to insert Journal for category
			)

#2018-06-05 - Inter-Branch
def loadBranch():
	return MKT_BRANCH.query.order_by(MKT_BRANCH.Description)
#end
