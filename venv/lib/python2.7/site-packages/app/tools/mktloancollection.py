'''
Created Date: 23 Sep 2015
Author: Sovankiry Rim

Modified by: Sovankiry
Modified Date: 01 Oct 2015
All Right Reserved Morakot Technology
Description : mktloancollection refer to generate collection sheet.

'''

from app.mktcore.imports 	import *
from decimal 				import *

from app.Officer.models 			import *
from app.LoanContract.models 		import *
from app.Customer.models 			import *
from app.Account.models 			import *
from app.CashAccount.models 		import *
from app.Branch.models 				import *
from app.RepaymentSchedule.models	import *
from app.FundTransfer.models 		import *
from app.Village.models 			import *
from app.User.models 				import *
from app.LoanCollection.models 		import *
from app.PD.models 					import *
from app.AccProduct.models 			import MKT_ACC_PRODUCT
from app.Currency.models 			import MKT_CURRENCY

from sqlalchemy import *
import app.mktcore.autoid 		as mktautoid
import mktdate 					as mktdate
import user 					as mktuser
import mktsetting 				as mktsetting
import mktparam 				as mktparam
import mktdb 					as mktdb
import mktaudit 				as mktaudit
import mktaccounting 			as mktaccounting
import mktmoney 				as mktmoney
import mktsetting 				as mktsetting
import mktteller 				as mktteller

def getLoanCollectionSheet(Officer,Currency,CollectionDate,ContractVB="",Group="",ListExcludeRepID=[]):

	Condition =[]
	CollectionDate 	= CollectionDate.strip()
	CollectionRange = CollectionDate.split()
	CurrentBranch 	= mktuser.getCurrentBranch()
	if len(CollectionRange)==2:
		ColLeft, ColRight = CollectionRange[0],CollectionRange[1]
		Condition.append(MKT_REP_SCHEDULE.CollectionDate.between(ColLeft, ColRight) )
	else:
		Condition.append(MKT_REP_SCHEDULE.CollectionDate==CollectionDate)

	if ContractVB:
		Condition.append(MKT_LOAN_CONTRACT.ContractVB==ContractVB)

	if Group:
		Condition.append(MKT_LOAN_CONTRACT.Group==Group)
	if ListExcludeRepID:
		Condition.append(~MKT_REP_SCHEDULE.ID.in_(ListExcludeRepID))

	Condition.append(MKT_LOAN_CONTRACT.ContractOfficerID==Officer)
	Condition.append(MKT_LOAN_CONTRACT.OutstandingAmount > 0)
	Condition.append(MKT_LOAN_CONTRACT.DisbursedStat=="Y")
	Condition.append(MKT_LOAN_CONTRACT.Branch==CurrentBranch)
	Condition.append(MKT_LOAN_CONTRACT.Currency==Currency)
	

	ScheduleObj = db.session.query(	MKT_REP_SCHEDULE.ID,
									MKT_REP_SCHEDULE.CollectionDate,
									MKT_REP_SCHEDULE.Principal,
									MKT_REP_SCHEDULE.Interest,
									MKT_REP_SCHEDULE.Charge,
									MKT_REP_SCHEDULE.LoanID,
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_LOAN_CONTRACT.Account,
									MKT_LOAN_CONTRACT.ContractVB,
									MKT_LOAN_CONTRACT.Group,
									MKT_LOAN_CONTRACT.Currency,
									MKT_CUSTOMER.FirstNameEn,
									MKT_CUSTOMER.LastNameEn,
									MKT_VILLAGE.Description.label('Village')).\
								filter(*Condition).\
								filter(MKT_REP_SCHEDULE.RepStatus == '0').\
								join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_REP_SCHEDULE.LoanID).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
								outerjoin(MKT_VILLAGE,MKT_VILLAGE.ID==MKT_CUSTOMER.Village).\
								order_by(MKT_REP_SCHEDULE.CollectionDate.asc(),MKT_LOAN_CONTRACT.ID.asc())

	return ScheduleObj

def getPDCollectionSheet(Officer,Currency,ContractVB="",Group="",ListExcludeRepID=[]):

	Condition 		= []
	ResultDict 		= {}

	CurrentBranch 	= mktuser.getCurrentBranch()

	if ContractVB:
		Condition.append(MKT_LOAN_CONTRACT.ContractVB==ContractVB)

	if Group:
		Condition.append(MKT_LOAN_CONTRACT.Group==Group)

	Condition.append(MKT_LOAN_CONTRACT.ContractOfficerID==Officer)
	Condition.append(MKT_LOAN_CONTRACT.OutstandingAmount > 0)
	Condition.append(MKT_LOAN_CONTRACT.DisbursedStat=="Y")
	Condition.append(MKT_LOAN_CONTRACT.Branch==CurrentBranch)
	Condition.append(MKT_LOAN_CONTRACT.Currency==Currency)

	PDObj = db.session.query( 	MKT_PAST_DUE.ID,
								MKT_PAST_DUE.LoanID,
								MKT_LOAN_CONTRACT.Account,
								MKT_LOAN_CONTRACT.ContractCustomerID,
								MKT_LOAN_CONTRACT.Currency,
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn).\
						filter(*Condition).\
						join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_PAST_DUE.LoanID).\
						join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID)

	if PDObj:
		for row in PDObj:
			TotPrincipalDue 	= 0
			TotInterestDue 		= 0
			TotChargeDue 		= 0
			TotPenaltyDue 		= 0
			DueDate 			= ''
			PDDateObj = db.session.query( 	MKT_PD_DATE.OutPriAmount,
											MKT_PD_DATE.OutIntAmount,
											MKT_PD_DATE.OutPenAmount,
											MKT_PD_DATE.OutChgAmount,
											MKT_PD_DATE.DueDate).\
									join(MKT_PAST_DUE,MKT_PAST_DUE.ID == MKT_PD_DATE.ID).\
									filter(MKT_PD_DATE.OutAmount > 0).\
									filter(MKT_PD_DATE.ID == row.ID).\
									order_by(MKT_PD_DATE.DueDate.asc()).all()
			for item in PDDateObj:
				TotPrincipalDue 	= TotPrincipalDue + item.OutPriAmount
				TotInterestDue 		= TotInterestDue + item.OutIntAmount
				TotChargeDue 		= TotChargeDue + item.OutChgAmount
				TotPenaltyDue 		= TotPenaltyDue + item.OutPenAmount
				DueDate 			= item.DueDate

			TotalPD = float(TotPrincipalDue) + float(TotInterestDue) + float(TotChargeDue) + float(TotPenaltyDue)
			if TotalPD > 0:
				ResultDict.update({row.LoanID:{'PDPrincipal': TotPrincipalDue,'PDInterest':TotInterestDue,'PDCharge':TotChargeDue,
											   'Penalty':TotPenaltyDue, 'DueDate':DueDate ,'ID':row.LoanID,'Account':row.Account,'Village':'','Principal':0,
											   'Interest':0,'Charge':0,'Currency':row.Currency,'ContractCustomerID':row.ContractCustomerID,
											   'FirstNameEn':row.FirstNameEn,'LastNameEn':row.LastNameEn,'WITHLC':'N'}})

	return ResultDict


def getListAuthLoanCollection(Option):
	CurrentBranch = mktuser.getCurrentBranch()
	Transaction = mktsetting.getAccSetting().LoanCollectionTran if mktsetting.getAccSetting() else ""
	if Option == "ListLive":
		FundTable= MKT_LOAN_COLLECTION
	elif Option == "ListAuth":
		FundTable= MKT_LOAN_COLLECTION_INAU
	elif Option == "ListHist":
		FundTable= MKT_LOAN_COLLECTION_HIST

	QueryObj = FundTable.query.filter(FundTable.Branch==CurrentBranch)

	return QueryObj

def getSearchLoanCollection(CollectionID,Action):

	kwargs 				= {}
	ListRepID 			= []
	AuditObj 			= []
	Customer 			= ""
	Account 			= ""
	LoanID 				= ""
	RepID 				= ""
	CollectionDate 		= ""
	OfficerID 			= ""
	OfficerAccount 		= ""
	OfficerCategory 	= ""
	Currency 			= ""
	Village 			= ""
	Reference 			= ""
	
	Amount 				= 0
	Principal 			= 0
	Interest 			= 0
	Charge 				= 0
	TotalActualAmount 	= 0
	TotalCollection 	= 0
	CountRow 			= 0
	TotalAmount 		= 0
	PDPrincipal 		= 0
	PDInterest 			= 0
	PDCharge 			= 0
	Penalty 			= 0

	FundObj 			= MKT_FUND_TRANSFER.query.filter(MKT_FUND_TRANSFER.Reference==CollectionID)
	FundINAUObj 		= MKT_FUND_TRANSFER_INAU.query.filter(MKT_FUND_TRANSFER_INAU.Reference==CollectionID)
	FundHISTObj 		= MKT_FUND_TRANSFER_HIST.query.filter(MKT_FUND_TRANSFER_HIST.Reference==CollectionID)

	LoanCollectObj 			= MKT_LOAN_COLLECTION.query.filter(MKT_LOAN_COLLECTION.ID == CollectionID)
	LoanCollectINAUObj 		= MKT_LOAN_COLLECTION_INAU.query.filter(MKT_LOAN_COLLECTION_INAU.ID == CollectionID)
	LoanCollectHistObj 		= MKT_LOAN_COLLECTION_HIST.query.filter(MKT_LOAN_COLLECTION_HIST.ID == CollectionID)

	LoanCollectDEObj 			= MKT_LOAN_COLLECTION_DE.query.filter(MKT_LOAN_COLLECTION_DE.LoanCollectionID == CollectionID).order_by(MKT_LOAN_COLLECTION_DE.Collection)
	LoanCollectDEINAUObj 		= MKT_LOAN_COLLECTION_DE_INAU.query.filter(MKT_LOAN_COLLECTION_DE_INAU.LoanCollectionID == CollectionID).order_by(MKT_LOAN_COLLECTION_DE_INAU.Collection)
	LoanCollectDEHistObj 		= MKT_LOAN_COLLECTION_DE_HIST.query.filter(MKT_LOAN_COLLECTION_DE_HIST.LoanCollectionID == CollectionID).order_by(MKT_LOAN_COLLECTION_DE_HIST.Collection)

	if LoanCollectDEObj.all():
		QueryDEObj 	= LoanCollectDEObj
	elif LoanCollectDEINAUObj.all():
		QueryDEObj = LoanCollectDEINAUObj
	else:
		QueryDEObj =LoanCollectDEHistObj

	if LoanCollectObj.all():
		QueryObj 	= LoanCollectObj.first()
	elif LoanCollectINAUObj.first():
		QueryObj 	= LoanCollectINAUObj.first()
	else:
		QueryObj 	= LoanCollectHistObj.first()
	
	if FundObj.all():
		Reference 	= FundObj.first().ID
	elif FundINAUObj.first():
		Reference 	= FundINAUObj.first().ID
	elif FundHISTObj.first():
		Reference 	= FundHISTObj.first().ID

	CustomerObj 	= MKT_CUSTOMER.query
	VillageObj		= MKT_VILLAGE.query
	Currency 	= QueryObj.Currency if QueryObj else ""
	
	for index, row in enumerate(QueryDEObj):

		if FundObj.all():
			FTObj = FundObj.filter(or_(MKT_FUND_TRANSFER.Note.like("%"+str(row.LoanID)+"%"), 
											MKT_FUND_TRANSFER.Note == str(row.ID))).first()
			Reference 	= str(FTObj.ID) if FTObj else ""

		elif FundINAUObj.all():
			FTINAUObj = FundINAUObj.filter(or_(MKT_FUND_TRANSFER_INAU.Note.like("%"+str(row.LoanID)+"%"), 
											MKT_FUND_TRANSFER_INAU.Note == str(row.ID))).first()
			Reference 	= str(FTINAUObj.ID) if FTINAUObj else ""

		elif FundHISTObj.all():
			FTHISTObj = FundHISTObj.filter(or_(MKT_FUND_TRANSFER_HIST.Note.like("%"+str(row.LoanID)+"%"), 
											MKT_FUND_TRANSFER_HIST.Note == str(row.ID))).first()
			Reference 	= str(FTHISTObj.ID) if FTHISTObj else ""

		CountRow+=1
		LoanID 			= row.LoanID
		Village 		= row.Village
		Account 		= row.Account
		CollectionDate 	= row.Collection
		Principal 		= row.Principal
		Interest 		= row.Interest
		Charge 			= row.Charge
		PDPrincipal 	= row.PDPrincipal
		PDInterest 		= row.PDInterest
		PDCharge 		= row.PDCharge
		Penalty 		= row.Penalty
		TotalAmount 	= row.TotalAmount
		Amount 			= row.ActualAmount
		SavingAmount 	= row.SavingAmount
		Reference 		= Reference
		RepID 			= row.ID

		ListRepID.append(RepID)
		Customer 		= CustomerObj.get(row.Customer)
		CustomerID 		= Customer.ID
		Customer 		= "%s %s"%(Customer.LastNameEn,Customer.FirstNameEn)

		kwargs.update({  
				str('LoanID_%s'%RepID) 			:LoanID,
				str('CustomerID_%s'%RepID) 		:CustomerID,
				str('Customer_%s'%RepID)		:Customer,
				str('Village_%s'%RepID)			:Village,
				str('Account_%s'%RepID) 		:Account,
				str('CollectionDate_%s'%RepID) 	:CollectionDate,
				str('Reference_%s'%RepID) 		:Reference,
				str('Principal_%s'%RepID) 		:mktmoney.toMoney(float(Principal),mktmoney.getCurrencyObj(Currency)),
				str('Interest_%s'%RepID) 		:mktmoney.toMoney(float(Interest),mktmoney.getCurrencyObj(Currency)),
				str('Charge_%s'%RepID) 			:mktmoney.toMoney(float(Charge),mktmoney.getCurrencyObj(Currency)),
				str('TotalAmount_%s'%RepID) 	:mktmoney.toMoney(float(TotalAmount),mktmoney.getCurrencyObj(Currency)),
				str('Amount_%s'%RepID) 			:mktmoney.toMoney(float(Amount),mktmoney.getCurrencyObj(Currency)),
				str('SavingAmount_%s'%RepID) 	:mktmoney.toMoney(float(SavingAmount),mktmoney.getCurrencyObj(Currency)),

				str('PDPrincipal_%s'%RepID) 	:mktmoney.toMoney(float(PDPrincipal),mktmoney.getCurrencyObj(Currency)),
				str('PDInterest_%s'%RepID) 		:mktmoney.toMoney(float(PDInterest),mktmoney.getCurrencyObj(Currency)),
				str('PDCharge_%s'%RepID) 		:mktmoney.toMoney(float(PDCharge,),mktmoney.getCurrencyObj(Currency)),
				str('Penalty_%s'%RepID) 		:mktmoney.toMoney(float(Penalty),mktmoney.getCurrencyObj(Currency))
				})
		AuditObj= {'Status':row.Status,
					'Curr':row.Curr,
					'Inputter':row.Inputter,
					'Createdon':row.Createdon,
					'Authorizer':row.Authorizer,
					'Authorizeon':row.Authorizeon,
					'Branch':row.Branch
					}

	CollectionDateEnd = ''		

	ValueDate = str(QueryObj.ValueDate).split() if QueryObj else ""
	if len(ValueDate) == 2:
		CollectionDateStart 	= ValueDate[0]
		CollectionDateEnd 		= ValueDate[1]
		if not ValueDate[1]:
			CollectionDateEnd 		= ValueDate[0]
	else:
		CollectionDateStart 	= ''
		CollectionDateEnd 		= ''

	if QueryObj :
		kwargs.update({
						'Officer':QueryObj.Officer,
						'OfficerAccount':QueryObj.OfficerAccount,
						'OfficerCategory':QueryObj.OfficerCategory,
						'Currency':QueryObj.Currency,
						'CountRow':mktmoney.formatNumber(CountRow,1,0),
						'TotalCollection':mktmoney.toMoney(float(QueryObj.TotalCollection),mktmoney.getCurrencyObj(Currency)),
						'TotalActualAmount':mktmoney.toMoney(float(QueryObj.TotalActualAmount),mktmoney.getCurrencyObj(Currency)),
						'ContractVB':QueryObj.ContractVB,
						'VBGroup':QueryObj.VBGroup,
						'CollectionDateStart':CollectionDateStart,
						'CollectionDateEnd':CollectionDateEnd,
						'TotalSaving':mktmoney.toMoney(float(QueryObj.TotalSaving),mktmoney.getCurrencyObj(Currency)),
						'TotalAmounts':mktmoney.toMoney(float(QueryObj.TotalAmount),mktmoney.getCurrencyObj(Currency))
						})

	return {'ListRepID':ListRepID,'kwargs':kwargs,'AuditObj':AuditObj}

def getOfficerByAccount(OfficerAccount):
	CashID = ""
	CashObj = MKT_CASH_ACCOUNT.query
	for row in CashObj:
		ListAccount = row.Account.split()
		if OfficerAccount in ListAccount:
			CashID = str(row.ID)
	UserObj = MKT_USER.query.filter(MKT_USER.CashAccount==CashID).first()
	if UserObj:
		OfficerObj = MKT_OFFICER.query.filter(MKT_OFFICER.UserID==UserObj.ID).first()
		if OfficerObj:
			return 	OfficerObj.ID
	return ""
def insertLoanCollection(AuthLevel,CollectionID,kwargs,ListRepID,LoanCollectDict = {}):
	try:
		if not ListRepID:
			Message = "Don't have any loan Contract to collection."
			return False,Message

		Message 			= ""
		Transaction  		= mktsetting.getAccSetting().LoanCollectionTran if mktsetting.getAccSetting() else ""
		TranDate 			= str(mktdate.getBankDate())
		Audit 				= mktaudit.getAuditrail()
		Inputter 			= Audit['Inputter']
		Createdon 			= Audit['Createdon']
		Authorizer 			= Audit['Authorizer']
		Authorizeon			= Audit['Authorizeon']
		Branch 				= Audit['Branch']
		Module 				= "FD"
		Note 				= "Loan Collection"

		AccObj 				= MKT_ACCOUNT.query
		if AuthLevel==1:

			OfficerAccount 	= kwargs['OfficerAccount']
			OfficerCategory = kwargs['OfficerCategory']
			Currency 		= kwargs['Currency']
			i 				= 0
			LCStatus 		= ''

			AuditObj = {	'Status'		:"INAU",
							'Authorizer'	:"",
							'Authorizeon'	:""
						}

			# Check loan collection if have delete
			CheckLoanCollectObj = MKT_LOAN_COLLECTION_INAU.query.filter(MKT_LOAN_COLLECTION_INAU.ID == CollectionID).first()
			if CheckLoanCollectObj:
				mktaudit.deleteAUTH(MKT_LOAN_COLLECTION_INAU, CollectionID)

				CheckLoanCollectDeObj = MKT_LOAN_COLLECTION_DE_INAU.query.filter(MKT_LOAN_COLLECTION_DE_INAU.LoanCollectionID == CollectionID).all()
				if CheckLoanCollectDeObj:
					for row in CheckLoanCollectDeObj:
						mktaudit.deleteAUTH(MKT_LOAN_COLLECTION_DE_INAU, row.ID)

			# insert data to table "MKT_LOAN_COLLECTION_INAU"
			if LoanCollectDict:
				LoanCollectDict.update(AuditObj)
				mktdb.insertTable(MKT_LOAN_COLLECTION_INAU,LoanCollectDict)

			for RepID in ListRepID:
				LoanID 			= kwargs['LoanID_%s'%RepID]
				Account 		= kwargs['Account_%s'%RepID]
				Customer 		= kwargs['Customer_%s'%RepID]
				Village 		= ''
				Collection 		= kwargs['CollectionDate_%s'%RepID]
				Principal 		= kwargs['Principal_%s'%RepID]
				Interest 		= kwargs['Interest_%s'%RepID]
				Charge 			= kwargs['Charge_%s'%RepID]
				TotalAmount 	= kwargs['TotalAmount_%s'%RepID]
				ActualAmount 	= kwargs['Amount_%s'%RepID]
				SavingAmount 	= kwargs['SavingAmount_%s'%RepID]
				PDPrincipal 	= kwargs['PDPrincipal_%s'%RepID]
				PDInterest 		= kwargs['PDInterest_%s'%RepID]
				PDCharge 		= kwargs['PDCharge_%s'%RepID]
				Penalty 		= kwargs['Penalty_%s'%RepID]

				Amount 			= kwargs['Amount_%s'%RepID]

				Amount 			= float(Amount.replace(',',''))
				Principal 		= float(Principal.replace(',',''))
				Interest 		= float(Interest.replace(',',''))
				Charge 			= float(Charge.replace(',',''))
				TotalAmount 	= float(TotalAmount.replace(',',''))
				ActualAmount 	= float(ActualAmount.replace(',',''))
				SavingAmount 	= float(SavingAmount.replace(',','')) if SavingAmount else 0

				PDPrincipal 		= float(PDPrincipal.replace(",",""))
				PDInterest 			= float(PDInterest.replace(",",""))
				PDCharge 			= float(PDCharge.replace(",",""))
				Penalty 			= float(Penalty.replace(",",""))

				if Amount >= 0 :
					FilterAcc  		= AccObj.get(Account)
					if FilterAcc:
						# Debit Co Account 
						DrAcc 			= OfficerAccount
						DrCat 			= OfficerCategory
						DrCur 			= Currency

						# Credit Client Account
						CrAcc 			= FilterAcc.ID
						CrCat 			= FilterAcc.AccCategory
						CrCur 			= Currency
						if Amount > 0:
							# Validation Max Min Balance
							CheckBalanceDrAcc = mktaccounting.checkMaxMinBalance(DrAcc, DrCur, Decimal(Amount), "Dr")
							if CheckBalanceDrAcc:
								return False,CheckBalanceDrAcc

							CheckBalanceCrAcc = mktaccounting.checkMaxMinBalance(CrAcc, CrCur, Decimal(Amount), "Cr")
							if CheckBalanceCrAcc:
								return False,CheckBalanceCrAcc
						i 		+= 1
						CLDEID 	= CollectionID + str(i)

						CustomerID = db.session.query(MKT_LOAN_CONTRACT.ContractCustomerID).filter(MKT_LOAN_CONTRACT.ID==LoanID).first()
						if CustomerID:
							Customer = CustomerID.ContractCustomerID

						InsertRecord = {
										'ID' 			: CLDEID ,
										'LoanCollectionID' : CollectionID,
										'LoanID' 		: LoanID,
										'Currency' 		: Currency,
										'Customer' 		: Customer,
										'Village' 		: Village,
										'Account' 		: Account,
										'Collection' 	: Collection,
										'Principal' 	: Principal,
										'Interest' 		: Interest,
										'Charge' 		: Charge,
										'TotalAmount' 	: TotalAmount,
										'ActualAmount' 	: ActualAmount,
										'SavingAmount' 	: SavingAmount,
										'PDPrincipal' 	: PDPrincipal,
										'PDInterest' 	: PDInterest,
										'PDCharge' 		: PDCharge,
										'Penalty' 		: Penalty
						}
						InsertRecord.update(AuditObj)
						mktdb.insertTable(MKT_LOAN_COLLECTION_DE_INAU,InsertRecord)

					else:
						Message = "Account#%s not found."%Account
						return False,Message
		flash("Record was added successfully, record id: %s in INAU"%CollectionID)
		return True,Message
	except Exception, e:
		db.session.rollback()
		return False," %s"%e

def setAuthorizeLoanCollection(AuthLevel,CollectionID):
	try:
		Message 			= ""
		Account 			= ""
		LoanID 				= ""
		CollectionDate 		= ""
		Amount 				= 0
		Principal 			= 0
		Interest 			= 0
		Charge 				= 0
		TotalActualAmount 	= 0
		TotalCollection 	= 0
		Audit 				= mktaudit.getAuditrail()
		Authorizer 			= Audit['Authorizer']
		Authorizeon			= Audit['Authorizeon']
		Module 				= "GLC"
		CurrentBranch 		= str(mktuser.getCurrentBranch())
		Transaction 		= ''
		TranDate 			= ''
		Reference 			= ''
		CrCategory 			= ''
		if AuthLevel == 1:

			LoanCollectObj 			= MKT_LOAN_COLLECTION_INAU.query.filter(MKT_LOAN_COLLECTION_INAU.ID == CollectionID).first()
			if LoanCollectObj:
				LoanCollectDEObj 	= MKT_LOAN_COLLECTION_DE_INAU.query.filter(MKT_LOAN_COLLECTION_DE_INAU.LoanCollectionID == CollectionID).all()
				for row in LoanCollectDEObj:
					Inputter 		= row.Inputter
					Createdon 		= row.Createdon
					Branch 			= row.Branch
					ActualAmount 	= row.ActualAmount
					Reference 		= row.ID
					Tran 			= mktsetting.getAccSetting().LoanCollectionTran if mktsetting.getAccSetting() else ""
					TranDate 		= str(mktdate.getBankDate())
					Currency 		= LoanCollectObj.Currency
					Note 			= "Loan Collection"

					if Inputter == Authorizer:
						return False,msg_error+"user who authorize must differ from input."
					if not Branch == CurrentBranch:
						return False,msg_error+" Not allow authorize different branch."

					# check Voluntary account in account table
					AccObj 		= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.ID==row.Account).\
													 filter(MKT_ACCOUNT.Currency==Currency).first()
					if AccObj:
						CrCategory	= AccObj.AccCategory
					else:
						return False,msg_warning+"Customer %s with Currency %s doesn't have account ..."%(row.Customer,Currency)

					for i in range(0, 2):
						if i == 0:
							Account 	= LoanCollectObj.OfficerAccount
							Category	= LoanCollectObj.OfficerCategory
							Currency 	= Currency
							DrCr 		= "Dr"
						else:
							Account		= row.Account
							Category	= CrCategory
							Currency 	= Currency
							DrCr 		= "Cr"

						#get Gl key
						GL_KEYS = mktaccounting.getConsolKey(Category,Currency,"","")
							
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							Inputter,				# Inputter
							Createdon, 				# Createdon
							Authorizer,				# Authorizer
							Authorizeon,			# Authorizeon
							"", 					# AEID
							Account,				# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							ActualAmount, 			# Amount
							Module,					# Module
							Tran, 					# Transaction
							TranDate, 				# TransactionDate
							Reference, 				# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# ConsolKey
							'',						# Mode
							"YES")					# Tell function to update LastTransaction Customer's Account

					# Posting Accounting to Saving Account
					VolunAccCategory 	= ''
					SavingAmount = row.SavingAmount
					Tran 		= '100'
					if float(SavingAmount) > 0:
						# get ID of Saving Account from term deposit in setting
						AccSetting 		= mktsetting.getTASetting()
						AccVoluntaryID 	= ''

						if AccSetting:
							AccVoluntary 	= str(AccSetting.AccSaving).split()
							AccVoluntaryID 	= AccVoluntary[0]
						if not AccVoluntaryID:
							return False, msg_error + "Desn't have account Product of Saving amount. Please go to config in term deposit setting."

						# check Voluntary account in account table
						AccVoluntaryObj 	= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==row.Customer).\
														 filter(MKT_ACCOUNT.Currency==LoanCollectObj.Currency).\
														 filter(MKT_ACCOUNT.AccProduct== AccVoluntaryID).first()

						# check Voluntary account in account product table
						if AccVoluntaryObj:
							VolunAccCategory = db.session.query(MKT_ACC_PRODUCT.CategoryList).\
														  join(MKT_ACCOUNT,MKT_ACCOUNT.AccProduct==MKT_ACC_PRODUCT.ID).\
														  filter(MKT_ACCOUNT.ID==AccVoluntaryObj.ID).first()
						else:
							return False,msg_warning+"Customer %s with Currency %s doesn't have saving account ..."%(row.Customer,Currency)

						#post accounting: Voluntary Saving
						CrCategory 	= VolunAccCategory.CategoryList
						Note    = mktsetting.getAppSetting('VALUNTARY_SAVING_NOTE')
						if not Note:
							Note  	= "Valuntary Saving"
						mktsetting.getAccSetting().DisbursedTran if mktsetting.getAccSetting() else ""

						for i in range(0, 2):

							if i == 0:
								Account 	= LoanCollectObj.OfficerAccount
								Category	= LoanCollectObj.OfficerCategory
								Currency 	= Currency
								DrCr 		= "Dr"
							else:
								Account		= AccVoluntaryObj.ID
								Category	= CrCategory
								Currency 	= Currency
								DrCr 		= "Cr"

							#get Gl key	
							GL_KEYS = mktaccounting.getConsolKey(Category,Currency,"","")
								
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								Inputter,				# Inputter
								Createdon, 				# Createdon
								Authorizer,				# Authorizer
								Authorizeon,			# Authorizeon
								"", 					# AEID
								Account,				# Account
								Category,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								SavingAmount, 			# Amount
								Module,					# Module
								Tran, 					# Transaction
								TranDate, 				# TransactionDate
								Reference, 				# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# ConsolKey
								'',						# Mode
								"YES")					# Tell function to update LastTransaction Customer's Account

					# Move record to live and delete from inau table
					mktaudit.moveINAUtoAUTH(MKT_LOAN_COLLECTION_DE, MKT_LOAN_COLLECTION_DE_INAU, row.ID, Inputter, Createdon, Authorizer, Authorizeon)
					mktaudit.deleteAUTH(MKT_LOAN_COLLECTION_DE_INAU, row.ID)

				mktaudit.moveINAUtoAUTH(MKT_LOAN_COLLECTION, MKT_LOAN_COLLECTION_INAU, LoanCollectObj.ID, Inputter, Createdon, Authorizer, Authorizeon)
				mktaudit.deleteAUTH(MKT_LOAN_COLLECTION_INAU, LoanCollectObj.ID)

		Message = "%s %s."%(CollectionID,msg_authorize_0)
		return True,Message
	except Exception, e:
		db.session.rollback()
		return False,msg_error+" %s"%e

def setDeleteLoanCollection(CollectionID):
	try:
		LoanCollectObj = MKT_LOAN_COLLECTION_INAU.query.filter(MKT_LOAN_COLLECTION_INAU.ID == CollectionID).first()
		if LoanCollectObj:
			mktdb.deleteRecord(MKT_LOAN_COLLECTION_INAU,[MKT_LOAN_COLLECTION_INAU.ID==CollectionID])

		LoanCollectObj = MKT_LOAN_COLLECTION_DE_INAU.query.filter(MKT_LOAN_COLLECTION_DE_INAU.LoanCollectionID == CollectionID).first()
		if LoanCollectObj:
			mktdb.deleteRecord(MKT_LOAN_COLLECTION_DE_INAU,[MKT_LOAN_COLLECTION_DE_INAU.LoanCollectionID==CollectionID])
			return True,"%s %s"%(CollectionID,msg_delete_0)

		else:
			return False," %s"%msg_not_found_0
		
	except Exception, e:
		return False,msg_error+" %s"%e

# generate autoid and check ID is existing in fund transfer yet
def generateFDIDofCO():
	AutoID = ''
	i = False
	while i == False:
		AutoID 		= mktautoid.getAutoID('FRM_FUND_DEPOSIT')
		FDObj 		= MKT_FUND_TRANSFER.query.filter(MKT_FUND_TRANSFER.ID == AutoID).first()
		if not FDObj:
			FDObj 		= MKT_FUND_TRANSFER_INAU.query.filter(MKT_FUND_TRANSFER_INAU.ID == AutoID).first()
		if not FDObj:
			i = True
	return AutoID