import math
from datetime 					import date, datetime, timedelta
from sqlalchemy 				import *

from app.BjStat.models 			import *
from app.BatchJob.models 		import *
from app.mktcore.imports 		import *

import app.tools.mktaudit 		as mktaudit
import app.tools.mktmessage 	as mktmessage
import app.tools.thread.mktthread as mktthread
import app.tools.thread.mktdate   as mktdate

from app import app,ThreadS

def updateCompletedJobStatus(Tool, TotalRecord, Reference,ThreadS=ThreadS):
	try:
		
		if Reference:
			RecordNumber 		= Reference[0] + 1
			NumberOfCompleted 	= Reference[1] + 1
			NumOfCompletedPerc 	= Reference[2] 
			NumOfTransaction 	= Reference[3] 
			JobID 				= Reference[4]
			
		else:
			JobID 				= ''
			RecordNumber 		= 1
			NumberOfCompleted 	= 1
			NumOfCompletedPerc 	= 0 
			NumOfTransaction 	=	setNumOfTransaction(TotalRecord)
			SystemDate 			=	mktdate.getBankDate(ThreadS=ThreadS)
			BatchJob 			= 	ThreadS.query(MKT_BATCH_JOB).filter(MKT_BATCH_JOB.Enable == 'Yes').\
									filter(MKT_BATCH_JOB.Tool == Tool).first()
			
			if BatchJob:
				JobID 	=	BatchJob.ID
				getCountBjStat(BatchJob.ID, BatchJob.ID, BatchJob.Description, TotalRecord, str(SystemDate),BatchJob.Order, True,ThreadS=ThreadS)

		if int(NumberOfCompleted) == int(NumOfTransaction) or int(RecordNumber) == int(TotalRecord):
			NumOfCompletedPerc += float(getPercPerTransaction(NumberOfCompleted, TotalRecord))
			calCompletedPer(JobID, NumberOfCompleted, TotalRecord, NumOfCompletedPerc,ThreadS=ThreadS)
			NumberOfCompleted = 0

		return [RecordNumber, NumberOfCompleted, NumOfCompletedPerc, NumOfTransaction, JobID]
	
	except Exception as e:
		ThreadS.rollback()
		raise

def calCompletedPer(Module, NumberOfCompleted, TotalCount, CompletedPerc, EndRecord=False,EODBankDate='',ThreadS=ThreadS):
	try:

		SystemDate 		=	mktdate.getBankDate(ThreadS=ThreadS)
		EODBankDate     =  	EODBankDate if EODBankDate else SystemDate
		Date 			= 	datetime.now()
		CurrentTime 	= 	'%s:%s:%s'% (Date.hour, Date.minute, Date.second)
		JobAfterBankDate= 	[]
		BatchJob 		= 	ThreadS.query(MKT_BATCH_JOB).filter(MKT_BATCH_JOB.Tool == 'BankDate').first()
		JobList 		= 	ThreadS.query(MKT_BATCH_JOB.ID).\
							filter(cast(MKT_BATCH_JOB.Order, Integer) >= int(BatchJob.Order)).all()
		for l in JobList:
			JobAfterBankDate.append(l[0])
		# if Module in ["LD","005","006"]:
		if Module in JobAfterBankDate: 
			if not (EndRecord == False and Module == BatchJob.ID):
				one_day 	= 	timedelta(days=1) # one day
				StartDate 	= 	datetime.strptime(str(SystemDate),'%Y-%m-%d').date()
				StartDate 	= 	StartDate - one_day

				StartDate 	=	str(StartDate).split()
				SystemDate 	=	StartDate[0]
				


		BjStat 	=	ThreadS.query(MKT_BJ_STAT).\
					filter(MKT_BJ_STAT.SystemDate == str(SystemDate)).\
					filter(MKT_BJ_STAT.Module == Module).\
					first()

		if BjStat:
			StartLoop 					=	BjStat.NumberOfCompleted
			# CompletedPerc 				=	(100 * NumberOfCompleted) / float(TotalCount)
			BjStat.NumberOfCompleted 	= 	int(BjStat.NumberOfCompleted) + int(NumberOfCompleted)
			BjStat.Completed 			= 	float(CompletedPerc)
			NumberOfCompleted 			=	BjStat.NumberOfCompleted

			if int(StartLoop) == 0 and not EndRecord:
				BjStat.StartTime 	= 	CurrentTime

			elif int(NumberOfCompleted) == int(TotalCount) or EndRecord == True:
				BjStat.EndTime 	= 	CurrentTime
				BjStat.NumberOfCompleted 	= 	BjStat.NumberOfRecord
				if BjStat.StartTime == '': BjStat.StartTime = CurrentTime 

				t1 = datetime.strptime(str(BjStat.StartTime),'%H:%M:%S')
				t2 = datetime.strptime(str(BjStat.EndTime),'%H:%M:%S')

				delta = (t2 - t1)
				delta = delta.seconds

				BjStat.Duration = 	delta
				File = app.config.get("EOD_LOG_ERROR")

				if EndRecord == True:
					mkttool.setCreateFile(File)
					mkttool.setWriteFile(File,'%s,%s,%s,%s,%s'%(EODBankDate,BjStat.JobID,BjStat.NumberOfRecord,BjStat.Description,formatTime(BjStat.Duration)),Overwirte=False)

			BjStat.Progress 	=	'Y'
			
			ThreadS.add(BjStat)
			ThreadS.commit()

		# Clear query object
		del BjStat
		
		return True

	except Exception, e:
		makeLogFileOnError('Y')
		ThreadS.rollback()
		raise

def setNumOfTransaction(NumOfRecord):
	try:

		Number = float(NumOfRecord) / 1000
		
		if Number < 1:
			return 1
			
		return math.ceil(Number)

	except:
		raise

def getPercPerTransaction(NumberOfCompleted, TotalRecord):
	try:

		Result = (100 * NumberOfCompleted) / float(TotalRecord)

		return Result

	except:
		raise

def formatTime(seconds):

	m, s = divmod(seconds, 60)
	h, m = divmod(m, 60)
	
	return "%s:%02d:%02d" % (h, m, s)

def makeLogFileOnError(Error):
	try:

		dat 		= datetime.now()
		CurrentTime = '%s:%s:%s'% (dat.hour, dat.minute, dat.second)
		currentDate = '%s-%s-%s'% (dat.year, dat.month, dat.day)
		DateTime 	= str(currentDate) + " " + CurrentTime
		Msg = Error + " " + DateTime

		filename 	= app.config.get("EOD_LOG_RESUME")
		f = open(filename, 'w')
		f.write(Msg)
		f.close()

	except:
		raise
		
def getCountBjStat(JobID, Module, Description, NumberOfRecord, SystemDate, Order, Overide=False,ThreadS=ThreadS):
	try:

		Date 			= 	datetime.now()
		CalendarDate 	= 	'%s-%s-%s'% (Date.year, Date.month, Date.day)
		getObj 			=	ThreadS.query(MKT_BJ_STAT).\
							filter(MKT_BJ_STAT.SystemDate == str(SystemDate)).\
							filter(MKT_BJ_STAT.Module == Module).\
							first()

		if not getObj:

			ID  			=	setAutoID("BJ", 10, "MKT_BJ_STAT")
			# StartTime 		= 	'%s:%s:%s'% (Date.hour, Date.minute, Date.second)
			StartTime 		=	""
			EndTime 		=	""
			Duration 		=	""

			BjStat 	=	MKT_BJ_STAT(
							ID 				=	ID,
							JobID 			=	JobID,
							Module 			=	Module,
							Description 	=	Description,
							StartTime 		=	StartTime,
							EndTime 		=	EndTime,
							Duration 		=	Duration,
							SystemDate 		=	SystemDate,
							CalendarDate 	=	CalendarDate,
							NumberOfRecord 	=	NumberOfRecord,
							Completed 		=	0,
							Order 			=	Order,
							NumberOfCompleted = 0,
							Progress 		=	'N'
						)

			ThreadS.add(BjStat)
			# print "Inserted."

		elif Overide:
			# # print "Updated."
			# getObj.CalendarDate 	=	CalendarDate
			getObj.NumberOfRecord 	=	NumberOfRecord
			# getObj.Completed 		=	0
			# getObj.NumberOfCompleted=	0
			# getObj.Progress 		=	'N'

			ThreadS.add(getObj)
		
		ThreadS.commit()

		return True

	except Exception, e:
		ThreadS.rollback()
		# raise
		return msg_error+"%s"%e


def setAutoID(AppName="", Digit=1, Table="",Format="Julian"):
	try:
		Auto 			= ThreadS.query(MKT_SEQUENCE).get(Table)
		BankDateObj 	= mktdate.getBankDateObj()
		Julian 			= BankDateObj.JulianDate
		if not Julian :
			Julian = mktdate.getJulianDay(BankDateObj.SystemDate)

		if Format == "Julian":
			PrefixFormat = Julian
		else:
			PrefixFormat = mktdate.formatDate(BankDateObj.SystemDate,Format)

		if not Auto:
			Auto 	= 	MKT_SEQUENCE(
							ID 			=	str(Table),
							Current		=	0,
							Increment	=	1
					  	)
			ThreadS.add(Auto)
			Auto 	= 	ThreadS.query(MKT_SEQUENCE).get(Table)

		newVal 			= 	int(Auto.Current) + int(Auto.Increment)
		Auto.Current 	= 	newVal
		ThreadS.add(Auto)

		strFormat 		= 	'{:0>' + str(Digit) + 'd}'
		newVal 			= 	strFormat.format(newVal)
		ID 				= 	str(AppName) + str(PrefixFormat) + str(newVal)

		return ID

	except:
		ThreadS.rollback()
		raise



