from flask 							import flash
from app.mktcore.imports 			import *
from ... 							import app, db
from sqlalchemy 					import *
from decimal 						import *
from datetime 						import datetime, date, timedelta
from dateutil.relativedelta 		import relativedelta
import time
import calendar


from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from app.LoanContract.models 		import MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT_INAU, MKT_LOAN_CHARGE, MKT_LOAN_CHARGE_INAU
from app.ChargeRate.models 			import MKT_CHARGE_RATE
from app.Transaction.models 		import MKT_TRANSACTION
from app.ScheduleDefine.models 		import MKT_SCHED_DEFINE

import mktsetting 					as mktsetting
import mktdate	 					as mktdate
import mktaccounting 				as mktaccounting
import mktkey 						as mktkey

def getAccrChargeTran():
	"""Accrued Charge Receivable Booking """
	Transaction = mktsetting.getAppSetting('ACCR_CHARGE_TRAN')

	return Transaction

def getAccrChargeRevTran():
	""" Accrued Charge Receivable Reversal """
	Transaction = mktsetting.getAppSetting('ACCR_CHARGE_REV_TRAN')

	return Transaction

def getAccrChargeDaily():
	""" Get Status of Enable Accrued Charge Receivable Daily """
	EnableCharge = mktsetting.getAppSetting('ACCR_CHARGE_DAILY')

	return EnableCharge

def setChargeCollection(**kwargs):
	""" Charge Collection on repayment schdule has two mode :
			1. With Accrued Daily 
			2. Without Accrued Daily
	"""
	ThreadS 	   		= kwargs['ThreadS']
	try:
		Branch 	   		= kwargs['Branch']
		ChargeCollect 	= Decimal(kwargs['ChargeCollect'])
		TotalCollect 	= Decimal(kwargs['TotalCollect'])
		ID 		   		= kwargs['LoanID']
		Note	   		= kwargs['Note'] if 'Note' in kwargs else ''
		ManualCollectID	= kwargs['ManualCollectID'] if 'ManualCollectID' in kwargs else ''
		Currency   		= kwargs['Currency']
		Account 		= kwargs['Account']
		Suspend 		= kwargs['Suspend']
		AccCategory 	= kwargs['AccCategory']
		Transaction 	= kwargs['Transaction']
		TransactionDate = kwargs['TransactionDate']
		Termination 	= kwargs['Termination'] if 'Termination' in kwargs else "N"
		Reference 		= kwargs['Reference'] if 'Reference' in kwargs else ID
		AccSetting 		= kwargs['AccSetting']
		PDCollect		= kwargs['PDCollect'] if 'PDCollect' in kwargs else "N"
		RegularFee 		= '2'
		AccrChargeDaily = getAccrChargeDaily()
		LoanChargeObj 	=	ThreadS.query(MKT_LOAN_CHARGE, MKT_CHARGE_RATE).\
										filter(MKT_LOAN_CHARGE.ID ==ID).\
										filter(MKT_CHARGE_RATE.ChargeMode == RegularFee).\
										join(MKT_CHARGE_RATE,MKT_CHARGE_RATE.ID ==MKT_LOAN_CHARGE.ChargeKey+Currency).first()

		if LoanChargeObj:
			Zero 		= Decimal(0)
			ChargeObj 	= LoanChargeObj[0]
			ChargeRate 	= LoanChargeObj[1]

			ReceiveCat  = ChargeRate.ReceiveCat
			IncomeCat   = ChargeRate.IncomeCat
			SuspendCat  = ChargeRate.ChargeSuspendCat
			# Block Update Accr Charge to Loan contract

			AccrCurrent 	= ChargeObj.AccrCurrent if ChargeObj.AccrCurrent else Zero
			ChargeUnearned 	= ChargeObj.ChargeUnearned

			# Calculate Charge Income
			# Case Add Income
			AddIncome 		= TotalCollect - AccrCurrent

			# Case Subtract Income
			SubtractIncome 	= AccrCurrent - TotalCollect


			# Update Accr Current Installment 
			if PDCollect == "N":# If loan on collection
				ChargeObj.AccrCurrent 	 = Zero
			

			# End block
			if ChargeCollect > Zero:

				# Add Accr Charge Receivable to Earned
				ChargeObj.ChargeEarned = ChargeObj.ChargeEarned + Decimal(ChargeCollect)

				for i in range(0, 2):
					if i == 0:
						DrCr 		= 	"Dr"
						Mode 		= 	""
						Category 	= 	AccCategory
						
					else:
						DrCr 		= 	"Cr"
						Mode 		= 	"Direct"
						# With Accrued Daily  
						Category 	= 	ReceiveCat if AccrChargeDaily == "Y" else IncomeCat
						Account 	= 	""

					GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
					DateTimeNow = mktdate.getDateTimeNow()
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						DateTimeNow, 			# Createdon
						"System",				# Authorizer
						DateTimeNow,			# Authorizeon
						"", 					# AEID
						Account,				# Account
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Decimal(ChargeCollect), # Amount
						"LC",					# Module
						Transaction, 			# Transaction
						TransactionDate, 		# TransactionDate
						Reference, 				# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						UserReference=ManualCollectID, 	# UserReference
						ThreadS=ThreadS
					)
				print ID,'charge was collected. Amount',mktmoney.formatNumber(float(ChargeCollect))

			if AccrChargeDaily == "Y": # With Accrued Daily  
				if PDCollect == "N":

					# Case Add Income, Because Income less than schdule
					if AddIncome > Zero:
						# Add Accr Charge Receivable 
						ChargeObj.ChargeUnearned = ChargeObj.ChargeUnearned + Decimal(AddIncome)

						# Add Charge Income
						ChargeObj.ChargeUEarned = ChargeObj.ChargeEarned + Decimal(AddIncome)
						AccrChargeTran = getAccrChargeTran()

						# print ChargeCollect,Termination
						for i in range(0, 2):
							if i == 0:
								DrCr 		= 	"Dr"
								Mode 		= 	"Direct"
								Category 	= 	ReceiveCat

							else:

								DrCr 		= 	"Cr"
								Mode 		= 	"Direct"
								Category 	= 	IncomeCat if Suspend == "N" else SuspendCat
							
							GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
							DateTimeNow = mktdate.getDateTimeNow()
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								DateTimeNow, 			# Createdon
								"System",				# Authorizer
								DateTimeNow,			# Authorizeon
								"", 					# AEID
								"",						# Account
								Category,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								Decimal(AddIncome), 	# Amount
								"LC",					# Module
								AccrChargeTran, 		# Transaction
								TransactionDate, 		# TransactionDate
								Reference, 				# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
								UserReference=ManualCollectID, 	# UserReference
								ThreadS=ThreadS
							)
						print ID,'charge add income:',AddIncome
					# Case Subtract Income Because income more than schedule
					if SubtractIncome > Zero:
						# Subtract Accr Charge Receivable
						ChargeObj.ChargeUnearned = ChargeObj.ChargeUnearned - Decimal(SubtractIncome)

						ChargeRevTran = getAccrChargeRevTran()
						for i in range(0, 2):
							if i == 0:
								DrCr 		= 	"Dr"
								Mode 		= 	"Direct"
								Category 	= 	IncomeCat if Suspend == "N" else SuspendCat
								
							else:
								DrCr 		= 	"Cr"
								Mode 		= 	"Direct"
								Category 	= 	ReceiveCat
							

							GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
							DateTimeNow = mktdate.getDateTimeNow()
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								DateTimeNow, 			# Createdon
								"System",				# Authorizer
								DateTimeNow,			# Authorizeon
								"", 					# AEID
								"",						# Account
								Category,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								Decimal(SubtractIncome), # Amount
								"LC",					# Module
								ChargeRevTran, 			# Transaction
								TransactionDate, 		# TransactionDate
								Reference, 				# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
								UserReference=ManualCollectID, 	# UserReference
								ThreadS=ThreadS
							)
						print ID,'charge subtract income:',SubtractIncome
				# Case charge collection in suspense
				# We need to reverse suspend to income
				if Suspend == "Y" and ChargeCollect > Zero and ChargeUnearned > Zero:
					SuspendTran = AccSetting.SuspenseReverseTran
					Note = "Charge suspense reversal to income"
					for i in range(0, 2):
						if i == 0:
							DrCr 		= 	"Dr"
							Mode 		= 	"Direct"
							Category 	= 	SuspendCat
							
						else:
							DrCr 		= 	"Cr"
							Mode 		= 	"Direct"
							Category 	= 	IncomeCat

						GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
						DateTimeNow = mktdate.getDateTimeNow()
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							"",						# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							Decimal(ChargeCollect), # Amount
							"LC",					# Module
							SuspendTran, 			# Transaction
							TransactionDate, 		# TransactionDate
							Reference, 				# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
							UserReference=ManualCollectID, 	# UserReference
							ThreadS=ThreadS
						)
					print ID,'Charge suspense reversal to income. Amount',mktmoney.formatNumber(float(ChargeCollect))
				# Why I have put this code on the last func, Because finally 
				# I need to subtract Accr Charge
				if ChargeCollect > Zero:
					# Subtract Accr Charge Receivable by Collect Amount
					ChargeUnearned =  ChargeUnearned - ChargeCollect
					if ChargeUnearned > Zero: 
						ChargeObj.ChargeUnearned 	=  ChargeUnearned
					else:# Case Accr Charge less than 0 update to 0
						ChargeObj.ChargeUnearned 	= Zero 
			ThreadS.add(ChargeObj)

	except Exception as e:
		raise
	else:
		pass
	finally:
		pass

def setChargeClassification(**kwargs):
	""" Start process charge classification"""
	ThreadS 	   		= kwargs['ThreadS']
	try:
		Zero			= Decimal(0)
		Branch 	   		= kwargs['Branch']
		ID 		   		= kwargs['LoanID']
		Currency   		= kwargs['Currency']
		Transaction 	= kwargs['Transaction']
		TransactionDate = kwargs['TransactionDate']
		Suspend 		= kwargs['Suspend']
		AccSetting 		= kwargs['AccSetting']
		Reference 		= kwargs['Reference'] if 'Reference' in kwargs else ID
		UserReference 	= kwargs['UserReference'] if 'UserReference' in kwargs else ''
		RegularFee 		= '2'
		LoanChargeObj 	=	db.session.query(MKT_LOAN_CHARGE, MKT_CHARGE_RATE).\
										filter(MKT_CHARGE_RATE.ChargeMode == RegularFee).\
										filter(MKT_LOAN_CHARGE.ID == ID).\
										join(MKT_CHARGE_RATE,MKT_CHARGE_RATE.ID ==MKT_LOAN_CHARGE.ChargeKey+Currency).first()

		if LoanChargeObj:
			ChargeObj 	= LoanChargeObj[0]
			ChargeRate 	= LoanChargeObj[1]
			IncomeCat   = ChargeRate.IncomeCat
			SuspendCat  = ChargeRate.ChargeSuspendCat
			ChargeAmount= Decimal(ChargeObj.ChargeUnearned)

			if ChargeAmount > Zero:
				if Suspend == "Y":
					Note = "Charge income has been moved to suspend."
					Transaction = AccSetting.SuspenseBookingTran
				else:
					Note = "Charge income has been moved from suspend."
					Transaction = AccSetting.SuspenseReverseTran
				for i in range(0, 2):
					if i == 0:
						DrCr 		= 	"Dr"
						Mode 		= 	"Direct"
						Category 	= 	IncomeCat if Suspend == "Y" else SuspendCat

					else:
						DrCr 		= 	"Cr"
						Mode 		= 	"Direct"
						Category 	= 	SuspendCat if Suspend == "Y" else IncomeCat

					GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
					DateTimeNow = mktdate.getDateTimeNow()
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						DateTimeNow, 			# Createdon
						"System",				# Authorizer
						DateTimeNow,			# Authorizeon
						"", 					# AEID
						"",						# Account
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Decimal(ChargeAmount), 	# Amount
						"LC",					# Module
						Transaction, 			# Transaction
						TransactionDate, 		# TransactionDate
						Reference, 				# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						UserReference=UserReference,
						ThreadS=ThreadS
					)
				print ID,Note,'Amount %s'%mktmoney.formatNumber(float(ChargeAmount))
	except Exception as e:
		ThreadS.rollback()
		raise
	else:
		pass
	finally:
		pass