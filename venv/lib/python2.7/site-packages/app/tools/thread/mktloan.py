from flask 							import flash
from app.mktcore.imports 			import *
from ... 							import app, db, ThreadS
from sqlalchemy 					import *
from decimal 						import *
from datetime 						import datetime, date, timedelta
import time

from app.LoanContract.models 		import *
from app.ScheduleDefine.models 		import *
from app.RepaymentSchedule.models 	import *
from app.tools.mktloan import getInterestMultiCurrency #setPrincipalCollection
import app.tools.thread.mktsetting 			as mktsetting
import app.tools.thread.mktkey 				as mktkey
import app.tools.thread.mktaccounting 		as mktaccounting
import app.tools.thread.mktbjstat 			as mktbjstat

import mktpdcollection 	as mktpdcollection

# Method for update loan outstanding amount by ID
def setUpdateOutstandingAmount(LoanContractObj,ThreadS=ThreadS):
	try:

		if LoanContractObj:
			PDID 		=	"PD" + str(LoanContractObj.ID)
			ODAmount 	=	mktpdcollection.getTotODAmount(PDID,ThreadS=ThreadS)
			LoanContractObj.OutstandingAmount = float(LoanContractObj.Amount) + float(ODAmount)
			ThreadS.add(LoanContractObj)
		
	except:
		ThreadS.rollback()
		mktbjstat.makeLogFileOnError('Y')
		raise

def updateScheduleStatus(LoanID,CollectionDate,RepStatus,PaidAmount=0,ThreadS=ThreadS):
	'''
	Repayment Status has 4 level: 1, 2, 3, 4
	0: Not Yet Due 			(Orange)
	1: Past Due 			(Red)
	2: Partial Paid 		(Orange)
	3: Fully Paid On Time 	(Green)
	4: Fully Paid But Late 	(Blue)

	'''	
	# ThreadObj   =   mktthread.ConGuard()
	# ThreadS     =   ThreadObj.ThreadS	
	Rep_Schedule = ThreadS.query(MKT_REP_SCHEDULE).\
				   filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
				   filter(MKT_REP_SCHEDULE.CollectionDate == str(CollectionDate)).\
				   first()
	if Rep_Schedule:
		Rep_Schedule.RepStatus 		= RepStatus
		Rep_Schedule.PartPaidAmt 	= float(Rep_Schedule.PartPaidAmt) + float(PaidAmount)
		ThreadS.add(Rep_Schedule)

def setPrincipalCollection(AccSetting,LoanObj,Principal,AccountID,AccCategory,Currency,
							Transaction,TranDate,AssetClass,Reference,Note='',ManualCollectID='',ThreadS=ThreadS):
	"""
		Created By : Sovankiry Rim / Last Update: 16 September 2016
		Case book accounting for principal collection

			Debit Draw Down Account 		Principal Collection 		xxxx

				Credit -  LO Category 		Principal Collection 					xxxx

	"""
	try:

		if Principal > 0:

			Branch 		= LoanObj.Branch
			LoanID 		= LoanObj.ID
			CustomerID 	= LoanObj.ContractCustomerID

			# Get GL Key from setting
			Settingk1	= AccSetting.GL_KEY1
			Settingk2 	= AccSetting.GL_KEY2
			Settingk3 	= AccSetting.GL_KEY3
			Settingk4 	= AccSetting.GL_KEY4
			Settingk5 	= AccSetting.GL_KEY5
			Settingk6 	= AccSetting.GL_KEY6
			Settingk7 	= AccSetting.GL_KEY7
			Settingk8 	= AccSetting.GL_KEY8
			Settingk9 	= AccSetting.GL_KEY9

			k1 = mktkey.getResultKey(Settingk1, LoanID, CustomerID)
			k2 = mktkey.getResultKey(Settingk2, LoanID, CustomerID)
			k3 = mktkey.getResultKey(Settingk3, LoanID, CustomerID)
			k4 = mktkey.getResultKey(Settingk4, LoanID, CustomerID)
			k5 = mktkey.getResultKey(Settingk5, LoanID, CustomerID)
			k6 = mktkey.getResultKey(Settingk6, LoanID, CustomerID)
			k7 = mktkey.getResultKey(Settingk7, LoanID, CustomerID)
			k8 = mktkey.getResultKey(Settingk8, LoanID, CustomerID)
			k9 = mktkey.getResultKey(Settingk9, LoanID, CustomerID)


			# Debit Drawdown Account 
			DateTimeNow = mktdate.getDateTimeNow()
			Category 	= AccCategory
			DrCr 		= "Dr"
			Mode 		= ""

			GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
			# Debit Customer Account
			print 'p1 '*9
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				AccountID,				# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Principal), 	# Amount
				"LC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				Reference, 				# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=ManualCollectID 	# UserReference
				,ThreadS=ThreadS
			)
			print 'p2 '*9

			# Credit Loan Category
			Category 	= LoanObj.Category
			DrCr 		= "Cr"
			Mode 		= "Direct"

			GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
			# Cradit LC Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Principal), 	# Amount
				"LC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				Reference, 				# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=ManualCollectID	# UserReference
				,ThreadS=ThreadS
			)
			print 'p3 '*9
			print Reference,'principal was collected. Amount',mktmoney.formatNumber(float(Principal))
			print 'p4 '*9
				
	except Exception, e:

		raise