from app.tools.mktgl import calculateDrCrAmount,updateConsoleCurrentDate,updateConsolePrevYear,updateConsoleBackDate,updateConsolePreCurrentPrevMonth,getNewConsoleBalance,mktmessage

from app.mktcore.imports 			import *
from flask import flash,Markup
from app.Category.models 			import MKT_CATEGORY
from app.ConsolBalance.models 		import MKT_CONSOL_BALANCE
from app.GLBalance.models 			import MKT_GL_BALANCE,MKT_GL_BALANCE_BACKUP
from app.GL.models 					import *
from app.Branch.models 				import MKT_BRANCH
from app.Currency.models 			import MKT_CURRENCY
from app.FinancialReport.models 	import *
from app import ThreadS

def setConsolBalance(GL_KEYS, Branch, Currency, Amount, Category, DrCr, Module, TranDate, LCYAmount,ThreadS=''):
	
	try:
		BalType 		= 	ThreadS.query(MKT_CATEGORY).get(Category)
		from app.Dates.models import MKT_DATES

		BankDate = ThreadS.query(MKT_DATES).get("SYSTEM")
		BankDateObj 	= BankDate
		
		if not BankDateObj.SystemDate:
			mktmessage.setLogError("Bank date not found in system date")

		TranDate            =   datetime.strptime(str(TranDate),'%Y-%m-%d').date()
		BankDate            =   datetime.strptime(str(BankDateObj.SystemDate),'%Y-%m-%d').date()
		NextMonthEnd        =   datetime.strptime(str(BankDateObj.NextMonthEnd),'%Y-%m-%d').date()
		LastMonthEnd        =   datetime.strptime(str(BankDateObj.LastMonthEnd),'%Y-%m-%d').date()
		PrevLastMonthEnd    =   datetime.strptime(str(BankDateObj.PrevLastMonthEnd),'%Y-%m-%d').date()
		NextYearEnd    		=   datetime.strptime(str(BankDateObj.NextYearEnd),'%Y-%m-%d').date()
		LastYearEnd    		=   datetime.strptime(str(BankDateObj.LastYearEnd),'%Y-%m-%d').date()
		
		StartMonthOfYearEnd	=	datetime.strptime('%s-%s-%s'%(LastYearEnd.year,LastYearEnd.month,'01'),'%Y-%m-%d').date()
		EndMonthOfYearEnd 	=	LastYearEnd

		if BalType:

			BalType = 	BalType.BalanceType
			GL_KEYS = 	GL_KEYS.strip()

			
			ConBal 	= 	ThreadS.query(MKT_CONSOL_BALANCE).with_for_update().\
						filter(MKT_CONSOL_BALANCE.ID == str(GL_KEYS)).\
						filter(MKT_CONSOL_BALANCE.Branch == str(Branch)).\
						first()

			if not ConBal:
				NewConsoleBalance = getNewConsoleBalance(GL_KEYS, Branch, Currency)
				ThreadS.add(NewConsoleBalance)
				
				ConBal 	= 	ThreadS.query(MKT_CONSOL_BALANCE).with_for_update().\
							filter(MKT_CONSOL_BALANCE.ID == str(GL_KEYS)).\
							filter(MKT_CONSOL_BALANCE.Branch == str(Branch)).\
							first()

				'''	*************************************
					* Start updating console balance    *
					*************************************'''
				
			BranchObj 	=	ThreadS.query(MKT_BRANCH).get(Branch)

			if BranchObj:
				"""	Report Lock setting '100' for default mean prevent post accounting for previouse month and year 
					status lock '0' mean lock and '1' mean unlock
					First number '1' is lock status for current month
					Second number '0' is lock status for previous month
					Third number '0' is lock status for previous year	"""
				ReportLocked 		=	BranchObj.ReportLocked

				if ReportLocked and len(ReportLocked) == 5:
					CurrentMonthLock 	=	ReportLocked[0]
					PreviousMonthLock 	=	ReportLocked[1]
					PreviousYearLock 	=	ReportLocked[2]
					PostedPrevMonth 	=	ReportLocked[3]
					PostedPrevYear 		=	ReportLocked[4]
					
					# Check if it is current transaction  
					if TranDate > LastYearEnd and TranDate <= PrevLastMonthEnd:
						ConBal = updateConsolePreCurrentPrevMonth(ConBal, Amount, LCYAmount, BalType, DrCr)

					elif TranDate > LastMonthEnd and TranDate <= NextMonthEnd:
						if CurrentMonthLock == "0":
							flash(msg_error + "Branch %s was locked current month transaction." %Branch)
							mktmessage.setLogError("Branch %s was locked current month transaction." %Branch)

						else:
							ConBal = updateConsoleCurrentDate(ConBal, Amount, LCYAmount, BalType, DrCr)

					# Check if it is transaction for previous year 
					elif TranDate >= StartMonthOfYearEnd and TranDate <= EndMonthOfYearEnd:
						if PreviousYearLock == "0":
							flash(msg_error + "Branch %s was locked previous year transaction." %Branch)
							mktmessage.setLogError("Branch %s was locked previous year transaction." %Branch)

						else:
							IsFirstMonthOfYear 	=	False
							FirstMonthOfYear 	= 	LastYearEnd + relativedelta(months=1)
							
							if BankDate.month == FirstMonthOfYear.month:
								IsFirstMonthOfYear 	=	True

							ConBal = updateConsolePrevYear(ConBal, Amount, LCYAmount, BalType, DrCr, IsFirstMonthOfYear)
							BranchObj.ReportLocked = "%s%s%s%s1"%(CurrentMonthLock,PreviousMonthLock,PreviousYearLock,PostedPrevMonth)
							ThreadS.add(BranchObj)
							

					# Check if it is transaction for previous month 
					elif TranDate <= LastMonthEnd and TranDate > PrevLastMonthEnd:
						if PreviousMonthLock == "0":
							flash(msg_error + "Branch %s was locked previous month transaction." %Branch)
							mktmessage.setLogError("Branch %s was locked previous month transaction." %Branch)

						else:
							ConBal = updateConsoleBackDate(ConBal, TranDate, Amount, LCYAmount, BalType, DrCr)
							BranchObj.ReportLocked = "%s%s%s1%s"%(CurrentMonthLock,PreviousMonthLock,PreviousYearLock,PostedPrevYear)
							ThreadS.add(BranchObj)

					else:
						flash(msg_error + "Transaction Date allows current month and previous month only.")
						mktmessage.setLogError("Transaction Date allows current month and previous month only.")

				else:
					mktmessage.setLogError('ReportLocked is incorrect')

			else:
				mktmessage.setLogError("Branch %s not found." %Branch)

			ThreadS.add(BranchObj)
			
			
		else:
			mktmessage.setLogError('Category not found.')

	except Exception, e:
		raise
		mktmessage.setLogError(str(e))
