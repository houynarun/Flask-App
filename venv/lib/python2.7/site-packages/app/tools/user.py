from flask 						import session, redirect, render_template, flash
from werkzeug.security 			import check_password_hash
from app.User.models 			import MKT_USER
from app.Menu.models 			import MKT_MENU_ITEM, MKT_MENU
from app.Module.models 			import MKT_FORM
from sqlalchemy 				import *
from app.Role.models 			import MKT_ROLE
from app.Branch.models 			import MKT_BRANCH
from app.CashAccount.models 	import MKT_CASH_ACCOUNT
from app.Account.models 		import MKT_ACCOUNT
from app.Setting.models 		import MKT_SETTING
from app.LoginUser.models 		import *
from app.Officer.models			import *
from app.UserLocation.models 	import *
from app.mktcore.wtfimports 	import *
from app import db
from app.mktcore.globalfunction	import *

import mktparam 				as mktparam
import mktsetting 				as mktsetting
import mktdate 					as mktdate

import time, calendar
from datetime 					import datetime
import getpass
from flask.ext.login 				import login_user, logout_user
import os

def isLogIn(LogInName, Password = None):
	if Password:
		user = MKT_USER.query.filter_by(LogInName=LogInName).first()
		if user.Password != '':
			if check_password_hash(user.Password, Password):
				return user
			else:
				return False
		else:
			return False
	else:
		user = MKT_USER.query.filter_by(LogInName=LogInName).first()
		if user:
			session['getLogInName'] = user.LogInName
			session['getID'] = user.ID
			checkResetPassword()
			return user
		else:
			session.clear()
			return False

def checkToResetPassword():
	if session.get('getID'):
		return True
	else:
		return False

def checkResetPassword():
	if session.has_key('getID'):
		return True
	else:
		session.clear()
		flash("Please check your username")
		return render_template("login.html")

def setLogOut():
	if 'getLogInID' in session:
		session.pop('getLogInID', None)

	if 'getLogInName' in session:
		session.pop('getLogInName', None)

	if 'getID' in session:
		session.pop('getID', None)

	session.clear()
	flash('You were logged out')
	return redirect("Morakot/Login")

def getUser(UserID=''):
	if UserID:
		user = MKT_USER.query.get(UserID)
	else:
		user = MKT_USER.query.get(session['getLogInID'])

	session["RestrictBranch"] = user.RestrictBranch
	session["AccessBranch"] = user.AccessBranch
	return user

def getVaultInfo(Currency, UserID=""):
	try:
		
		AccID 			= ""
		TellerParam 	= mktparam.getTellerParam()
		if 'getLogInID' in session:

			if UserID:
				VaultID = getUser(UserID).CashAccount
			else:
				VaultID = getUser().CashAccount

			CashObj = MKT_CASH_ACCOUNT.query.get(VaultID)

			if CashObj:
				Category 	= 	TellerParam.VaultCategory
				AccID 		= 	str(Currency) + str(Category) + str(VaultID)

		VaultObj = MKT_ACCOUNT.query.get(AccID)

		return VaultObj

	except Exception, e:
		return "%s" %e

def getMenuOutput():
	MenuItem = getMenuItem()
	return MenuItem

def getAccessMenu():

	Menu 		= 	getUser().Menu
	Menu 		=	Menu.split()

	if 'SwitchMenu' in session:
		ID = session['SwitchMenu']
	else:
		ID = Menu[0]

	return ID

def getAccessMenuList():

	ID 	=	getUser().Menu
	ID 	=	ID.split()

	MenuObj = 	MKT_MENU.query.\
				filter(MKT_MENU.ID.in_(ID)).\
				all()

	return [MenuObj, ID]

def getMenuItem():

	ID 	=	getAccessMenu()
	# ID 	=	ID[0]

	MenuItem 	= 	MKT_MENU_ITEM.query.\
					order_by(asc(MKT_MENU_ITEM.ItemID)).\
					filter(MKT_MENU_ITEM.ID == ID).\
					filter(MKT_MENU_ITEM.Parents == "").\
					filter(MKT_MENU_ITEM.Active == 'Y')

	return MenuItem.all()

def getSubMenuItem():

	ID 	=	getAccessMenu()
	# ID 	=	ID[0]

	MenuItem 	= 	MKT_MENU_ITEM.query.\
					order_by(asc(MKT_MENU_ITEM.ItemID)).\
					filter(MKT_MENU_ITEM.ID == ID).\
					filter(MKT_MENU_ITEM.Active == 'Y')

	return MenuItem.all()

def getFormURL():
	if checkContentType() == "json" or "API" in request.url:
		return MKT_FORM.query.filter(MKT_FORM.EnableAPI=="Y")
	form = MKT_FORM.query
	return form

def getPosition():
	RoleID = getUser().Role
	Role = MKT_ROLE.query.get(RoleID).Description
	return Role

def getBranch(ChangeBranch =""):

	if ChangeBranch != "" : # execute when user changes branch
		return MKT_BRANCH.query.get(ChangeBranch)

	BranchID = getUser().AccessBranch.split() # CHANGE
	if len(BranchID) > 0:
		BranchID = BranchID[0]
		if BranchID == "ALL" :
			Branch = MKT_BRANCH.query.first()
		else :
			Branch = MKT_BRANCH.query.get(BranchID)
	else:
		Branch = MKT_BRANCH.query.first()

	session["ChangeBranch"] = Branch.ID

	return Branch

def getMultiBranch(BranchList):
	try:
		BranchList = BranchList.split()
		return 	MKT_BRANCH.query.\
				order_by(MKT_BRANCH.ID.asc()).\
				filter(MKT_BRANCH.ID.in_(BranchList)).\
				all()

	except:
		raise


from random import choice


def saveLoginUser(UserID="", Role="", Branch="", LogInTime="", LogInDate="", UrandomKey="" , ApiSecurityKey=''):
	"""
	Returns a securely generated random string.

	The default length of 12 with the a-z, A-Z, 0-9 character set returns
	a 71-bit value. log_2((26+26+10)^12) =~ 71 bits.
	"""
	try:
		AllowedChar 	= 'I love MorakotVB !@#$%^&*(-_=+)Mr.SovankiryRim(^_^)'
		UrandomKey 		= os.urandom(24).encode('hex')
		SessionSecurity = '%s$$%s'% (AllowedChar,UrandomKey)
		SessionSecurity = ''.join(choice(AllowedChar) for i in SessionSecurity)

		session['MKTSecurity'] 	= SessionSecurity
		Status 						= "AUTH"
		Curr 						= "0"

		DateTimeNow 	= mktdate.getDateTimeNow()
		user = MKT_LOGIN_USER.query.filter_by(UserID=UserID).first()

		if user:
			user.Status 		= Status
			user.Curr 			= Curr
			user.Inputter 		= UserID
			user.Createdon 		= DateTimeNow
			user.Authorizer 	= UserID
			user.Authorizeon 	= DateTimeNow
			user.Branch 		= Branch
			user.LogInTime 		= LogInTime
			user.LogInDate 		= LogInDate

		else:
			user 	= 	MKT_LOGIN_USER(
							Status=Status,
							Curr=Curr,
							Inputter=UserID,
							Createdon=DateTimeNow,
							Authorizer=UserID,
							Authorizeon=DateTimeNow,
							Branch=Branch,
							UserID=UserID,
							Role=Role,
							LogInTime=LogInTime,
							LogInDate=LogInDate
							
						)
		
		user.SessionSecurity 	= SessionSecurity
		user.ApiSecurity 		= ApiSecurityKey
		db.session.add(user)
		db.session.commit()
		return user

	except:
		db.session.rollback()
		raise

def saveUserLocation(UserID=""):
	try:
		Data 			= request.get_json()
		Latitude 		= Data.get('Latitude')
		Longitude		= Data.get('Longitude')
		DateTimeNow 	= mktdate.getDateTimeNow()
		UserLocation 	= MKT_USER.query.get(UserID)
		if UserLocation:
			if Latitude and Longitude:
				if UserLocation.LastLocation:
					if  UserLocation.LastLocation:
						UserLocation.LastLocationDate = DateTimeNow
						UserLocation.LastLocation =str(Latitude)+" "+str(Longitude)
						db.session.add(UserLocation)
						db.session.commit()
				else:
					UserLocation.LastLocationDate = DateTimeNow
					UserLocation.LastLocation =str(Latitude)+" "+str(Longitude)
					db.session.add(UserLocation)
					db.session.commit()
			elif UserLocation.LastLocation == None:
				UserLocation.LastLocation =str(Latitude)+" "+str(Longitude)
				db.session.add(UserLocation)
				db.session.commit()
		return True

	except Exception as e:
		db.session.rollback()
		return False

def updateLastLogin(UserID=None):
	try:
		user = MKT_USER.query.get(UserID)

		if user:
			SettingObj = mktsetting.getSetting()
			if SettingObj:
				attempt = int(SettingObj.ATTEMPS)
			else:
				attempt = int(3)
			dat 	= datetime.now()
			tim 	= '%s:%s:%s'% (dat.hour, dat.minute, dat.second)
			d 		= '%s-%s-%s'% (dat.year, dat.month, dat.day)

			user.DateLastLogin 	= d
			user.TimeLastLogin 	= tim
			user.Attempts 		= attempt

			db.session.add(user)
			db.session.commit()

	except:
		print "error in updateLastLogin."
		db.session.rollback()
		db.session.close()

def checkAttemptsPasswordWrong(LogInName=None):
	user = MKT_USER.query.filter_by(LogInName=LogInName).first()
	numOfAttempt = 0
	if user:
		user.Attempts = user.Attempts - 1
		db.session.add(user)
		db.session.commit()
		numOfAttempt = user.Attempts
	return numOfAttempt

def addMonth(source, months):
	Month = source.month - 1 + months
	Year = source.year + Month / 12
	Month = Month % 12 + 1
	Day = min(source.day, calendar.monthrange(Year, Month)[1])
	return datetime(Year, Month, Day)

def getSearchUser():
	search = request.args.get('q')
	NAMES = []
	from mkttool 	import isRequestAll
	if isRequestAll():
		a = MKT_USER.query.all()
	else:
		a = MKT_USER.query.\
			filter(or_(MKT_USER.ID.like('%'+search.upper()+'%'), MKT_USER.DisplayName.like('%'+search+'%'))).\
			all()
	for row in a:
		dic = { "id":row.ID, "text":row.ID + " - " + row.DisplayName }
		NAMES.append(dic)

	app.logger.debug(NAMES)
	return jsonify(items = NAMES)

def setDBCommit():
	return db.session.commit()

def checkLoginTime(From=None, To=None):
	
	try:
		CurrentDate = datetime.now()
		CurrentTime = '%s:%s:00'% (CurrentDate.hour, CurrentDate.minute)
		# StrCurrDate = '%s-%s-%s'% (CurrentDate.year, CurrentDate.month, CurrentDate.day)
		CurrTime 	= 	str(CurrentTime)
		(H, M, S) 	= 	CurrTime.split(":")
		TimeNow 	= 	int(H) * 3600 + int(M) * 60
		
		if not From and not To:
			return True

		else:
			
			if From:
				(H1, M1) 	= 	From.split(":")
				intFrom 	= int(H1) * 3600 + int(M1) * 60
				
				if int(intFrom) > int(TimeNow):
					# flash(str(intFrom) + " " + str(TimeNow))
					flash("Now you can't login, Please wait until %s" %From)
					return False

			if To:
				(H2, M2) 	= 	To.split(":")
				intTo 		= int(H2) * 3600 + int(M2) * 60

				if int(intTo) < int(TimeNow):
					# flash(str(intTo) + " " + str(TimeNow))
					flash("Time is over for login. You can login from %s to %s" %(From, To))
					return False

			return True

	except:
		flash("Something wrong, Please check...")
		return False

# Validate password with administrator setting
def checkPasswordRule(password):
	try:

		PasswordLength = mktsetting.getSetting().PASSWORD_LENGTH if mktsetting.getSetting().PASSWORD_LENGTH else "6"
		PasswordLength = PasswordLength.strip()
		PasswordLength = int(PasswordLength)

		UpperLater = mktsetting.getSetting().PASSWORD_CAP if mktsetting.getSetting().PASSWORD_CAP else "0"
		UpperLater = UpperLater.strip()
		UpperLater = int(UpperLater)

		LowerLater = mktsetting.getSetting().PASSWORD_LOW if mktsetting.getSetting().PASSWORD_LOW else "0"
		LowerLater = LowerLater.strip()
		LowerLater = int(LowerLater)

		NumberLater = mktsetting.getSetting().PASSWORD_NUM if mktsetting.getSetting().PASSWORD_NUM else "0"
		NumberLater = NumberLater.strip()
		NumberLater = int(NumberLater)
		
		check = True

		if len(password) < int(PasswordLength):
			flash(msg_error + "Your password must be bigger than or equal %s digits" %PasswordLength)
			# return redirect(url_for("setPassword"))
			check = False

		Result = [row.isupper() for row in str(password)]
		UpperNum = 0
		for row in Result:
			if row:
				UpperNum += 1

		if int(UpperNum) < int(UpperLater):
			flash(msg_error + "Password required upper later %s character(s)." %UpperLater)
			# return redirect(url_for("setPassword"))
			check = False

		Result = [row.islower() for row in str(password)]
		LowerNum = 0
		for row in Result:
			if row:
				LowerNum += 1

		if int(LowerNum) < int(LowerLater):
			flash(msg_error + "Password required lower later %s character(s)." %LowerLater)
			# return redirect(url_for("setPassword"))
			check = False

		Result = [row.isdigit() for row in str(password)]
		DigitNum = 0
		for row in Result:
			if row:
				DigitNum += 1

		if int(DigitNum) < int(NumberLater):
			flash(msg_error + "Password required number %s digit(s)." %NumberLater)
			# return redirect(url_for("setPassword"))
			check = False

		return check

	except:
		flash(msg_error + "Something wrong, Please check...")
		return False

def getAccessBranch():

	#get branch access from user
	BranchAccess = getUser().AccessBranch
	if 'ALL' in BranchAccess :
		query = MKT_BRANCH.query.order_by(MKT_BRANCH.ID.asc()).all()
	else :
		itemsplit = BranchAccess.split()

		query = MKT_BRANCH.query.filter(MKT_BRANCH.ID.in_(itemsplit)).order_by(MKT_BRANCH.ID.asc()).all()

	return query

def checkAccessBrach(BranchList):
	try:

		BranchAccess 	= 	getUser().AccessBranch
		OOPBranch 		=	""
		if 'ALL' in BranchAccess:
			{"Check":True, "Branch":OOPBranch}
		else:
			MyAccBranch = 	BranchAccess.split()
			BranchList 	=	BranchList.split()
			
			for Branch in BranchList:
				# for Access in MyAccBranch:
				if Branch.upper() in MyAccBranch:
					OOPBranch = ""
				else:
					OOPBranch = Branch
					break

		if OOPBranch:
			return {"Check":False, "Branch":OOPBranch}
		else:
			return {"Check":True, "Branch":OOPBranch}

	except:
		raise

def getCurrentBranch():
	if "ChangeBranch" in session:

		return session["ChangeBranch"]
	else:
		return getBranch().ID

def getSystemStatus():
	try:

		Status = "1"

		Seting = mktsetting.getSetting()

		if Seting:

			Status = Seting.SYSTEM_STATUS if Seting.SYSTEM_STATUS else "1"

		return Status

	except:
		raise

def setSysOffAndOnline(SytemStatus = 0):
	try:
		# if SystemStatus = 0 ==> System Offline.
		# if SystemStatus = 1 ==> System Online.
		Setting 	= MKT_SETTING.query.get("SYSTEM")
		Setting.SYSTEM_STATUS = str(SytemStatus)
		db.session.add(Setting)
		db.session.commit()
		
	except Exception, e:
		raise

def getUserRole(ID):
	try:

		Role = ""
		User = getUser(ID)

		return User.Role

	except:
		raise



def logoutAllUser(ID):
	try:
		record = db.session.query(MKT_LOGIN_USER).filter(MKT_LOGIN_USER.UserID != ID).delete()
		if record:
			db.session.commit()
	except:
		db.session.rollback()
		raise



def attempLogin():
	try:

		LoginName 	= raw_input("Login name: ")
		# If user type exit or \q will exit
		if LoginName in ['\q','exit','EXIT']:
			return True
		Password 	= getpass.getpass("Password: ")
		User = MKT_USER.query.filter_by(LogInName=LoginName).first()

		if User:

			if check_password_hash(User.Password, Password):

				with app.test_request_context():
					# DO NOT MOVE THIS IMPORT ABOVE getUser() FUNCTION
					# Because checkAccess also using getUser() so I can't find getUser()
					from app.mktcore.accessright import checkAccess
					session['getLogInID'] = User.ID
					getCheck = checkAccess("/Morakot/EOD/","Search")

					if getCheck != True:

						session.pop('getLogInID', None)
						print msg_permission

					else:

						login_user(User)
						print session['getLogInID']
						return User
			else:
				print "Username or Password is incorrect."
		else:
			print "Username or Password is incorrect."

	except Exception, e:
		db.session.rollback()
		print '%s %s' % (msg_error, e)
		return False


def attempLogout():
	try:
		with app.test_request_context():
			if 'getLogInID' in session:
				loggedOut = MKT_LOGIN_USER.query.filter_by(UserID=session['EOD_USER_ID']).first()
				if loggedOut:
					db.session.delete(loggedOut)
					db.session.commit()

			logout_user()
			session.clear()

	except:
		db.session.rollback()
		raise

def getUserOfficerID():
	UserLogin 	 	= session['getLogInID']
	OfficerID 		= ""
	OfficerObj 		= MKT_OFFICER.query.filter(MKT_OFFICER.UserID==UserLogin).first()
	if OfficerObj:
		OfficerID = OfficerObj.ID
	return OfficerID