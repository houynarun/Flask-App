from app.mktcore.imports 				import *

import app.tools.mktdate 				as mktdate
import app.tools.mktloanamendment		as mktloanamendment
import app.tools.mktkey					as mktkey
import app.tools.mktsetting 			as mktsetting
import app.tools.mktaccounting			as mktaccounting
import app.tools.mktparam 				as mktparam
import app.tools.mktloan 				as mktloan
import app.tools.mktdb					as mktdb

from app.LoanContract.models			import MKT_LOAN_CONTRACT
from app.ScheduleDefine.models			import MKT_SCHED_MANUAL, MKT_SCHED_DEFINE
from app.Account.models					import MKT_ACCOUNT
from app.LoanProduct.models				import MKT_LOAN_PRODUCT


def getLCInterestUpdate():

	ManualRepLCList 	= db.session.query(MKT_SCHED_MANUAL.ID,MKT_SCHED_MANUAL.LoanID).\
											filter(MKT_SCHED_MANUAL.CollectionDate == str(mktdate.getBankDate()) )
	
	if not ManualRepLCList:
		print "No Loan to update interest today."
		return
			
	for ManualRepLC in ManualRepLCList.all():
		
		#Get the last index of the ID which is equal to installment number
		CurrInstallment 	= int(ManualRepLC.ID[-1])
	
		#Get the next installment ID which is "LoanID + Current Installment+1"
		NextInstallmentID 	= ManualRepLC.LoanID + str(CurrInstallment+1)

		LCManualSched		= MKT_SCHED_MANUAL.query.get(NextInstallmentID)
		
		#Loan has no more schedule, Reached Maturity Date
		if not LCManualSched:
			continue

		updateLCInterest(ManualRepLC.LoanID, LCManualSched.InterestRate)

	db.session.commit()


def updateLCInterest(LCID = "", NewIntRate = "", CommitDB=False):

	LCObj		= MKT_LOAN_CONTRACT.query.get(LCID)

	if not LCObj:
		print "Loan Contract not found!"
		return

	if not NewIntRate:
		print "New Interest for %s not found!" % (LCID)
		return

	#Keep old Data in HIST before update
	mktloanamendment.moveLoanDataToHist(LoanID=LCID)

	LCObj.InterestRate = NewIntRate

	db.session.add(LCObj)

	print "Updated Interest for %s" % (LCID)	

	if CommitDB:
		db.session.commit()

def collectCurrInt(LCID, IntAmount, TranDate, AccSetting = "", Note=""):

	LCObj = MKT_LOAN_CONTRACT.query.get(LCID)

	if not LCObj:
		return False, "Loan Contract not found."

	ID 					= LCObj.ID
	CustomerID			= LCObj.ContractCustomerID
	Suspend 			= LCObj.Suspend
	AssClass			= LCObj.AssetClass
	Currency 			= LCObj.Currency
	LPID				= LCObj.LoanProduct
	LoanType			= LCObj.LoanType
	Branch 				= LCObj.Branch
	DateTimeNow			= mktdate.getDateTimeNow()
	AccID				= LCObj.Account
	ReportingRateObj 	= mktaccounting.getReportingRateObj()
	PDParamObj 			= mktparam.getPDParam() # Get Re-payment Order.

	AccSetting 	= AccSetting if AccSetting else mktsetting.getAccSetting()

	# Get GL Key from setting
	Settingk1	= AccSetting.GL_KEY1
	Settingk2 	= AccSetting.GL_KEY2
	Settingk3 	= AccSetting.GL_KEY3
	Settingk4 	= AccSetting.GL_KEY4
	Settingk5 	= AccSetting.GL_KEY5
	Settingk6 	= AccSetting.GL_KEY6
	Settingk7 	= AccSetting.GL_KEY7
	Settingk8 	= AccSetting.GL_KEY8
	Settingk9 	= AccSetting.GL_KEY9

	k1 = mktkey.getResultKey(Settingk1, ID, CustomerID)
	k2 = mktkey.getResultKey(Settingk2, ID, CustomerID)
	k3 = mktkey.getResultKey(Settingk3, ID, CustomerID)
	k4 = mktkey.getResultKey(Settingk4, ID, CustomerID)
	k5 = mktkey.getResultKey(Settingk5, ID, CustomerID)
	k6 = mktkey.getResultKey(Settingk6, ID, CustomerID)
	k7 = mktkey.getResultKey(Settingk7, ID, CustomerID)
	k8 = mktkey.getResultKey(Settingk8, ID, CustomerID)
	k9 = mktkey.getResultKey(Settingk9, ID, CustomerID)

	AccObj = MKT_ACCOUNT.query.get(AccID)

	if not AccObj:
		return False, "Account not found."

	AccBal 		= float(AccObj.AvailableBal)
	AccCate		= AccObj.AccCategory

	LPObj = MKT_LOAN_PRODUCT.query.get(LPID)

	if not LPObj:
		return False, "Loan Product not found."

	if float(IntAmount) > float(AccBal):
		return False, "Account does not have enough balance to collect interest."


	#Posting Dr for DD with Int.Income for Int Collection

	DrCr		= 'Dr'
	Mode 		= ''
	Transaction	= AccSetting.InterestTran
	GL_KEYS		= mktaccounting.getConsolKey(AccCate, Currency, "", "LC", "", "", "", "", "", "", "", "", "")

	#Debit Customer Account
	mktaccounting.postAccounting(
					"AUTH", 			#Status
					"0",				#Curr
					"System", 			#Inputter
					DateTimeNow,		#Createdon
					"System",			#Authorizer
					DateTimeNow,		#Authorizedon
					"",					#AEID
					AccID, 				#Account
					AccCate,			#Category
					Currency,			#Currency
					DrCr,				#Debit or Credit
					Decimal(IntAmount), #Amount
					"LC",				#Module
					Transaction,		#Transaction
					TranDate,			#TransactionDate
					ID,					#Reference
					Note,				#Note
					"",					#JNID
					Branch,				#Branch
					GL_KEYS,			#GL_KEYS
					Mode,				#Mode check to insert journal for category
	)

	#Cr Accrued Interest Receivable Reversal

	Category 	= LPObj.IntReceivableCate.strip()
	Mode 		= "Direct"
	DrCr 		= "Cr"

	if not Transaction:
		return False, "Accrued interest reversal transaction not found."

	GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
	mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(IntAmount), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
		)

	if LCObj.Suspend.upper() == "Y":
		Status, Msg = clearSuspendInt(LCObj, IntAmount, TranDate, Transaction)

		if not Status:
			return Status, Msg

	updateAccrIntLC(ID,IntAmount)

	return True, "%s Interest has been collected." % (ID)


def clearSuspendInt(LCObj, IntAmount, TranDate, Transaction, AccSetting = "", Note=""):
	ID 					= LCObj.ID
	CustomerID			= LCObj.ContractCustomerID
	Suspend 			= LCObj.Suspend
	AssClass			= LCObj.AssetClass
	Currency 			= LCObj.Currency
	LPID				= LCObj.LoanProduct
	LoanType			= LCObj.LoanType
	Branch 				= LCObj.Branch
	DateTimeNow			= mktdate.getDateTimeNow()
	AccID				= LCObj.Account
	ReportingRateObj 	= mktaccounting.getReportingRateObj()
	PDParamObj 			= mktparam.getPDParam() # Get Re-payment Order.

	AccSetting 	= AccSetting if AccSetting else mktsetting.getAccSetting()

	# Get GL Key from setting
	Settingk1	= AccSetting.GL_KEY1
	Settingk2 	= AccSetting.GL_KEY2
	Settingk3 	= AccSetting.GL_KEY3
	Settingk4 	= AccSetting.GL_KEY4
	Settingk5 	= AccSetting.GL_KEY5
	Settingk6 	= AccSetting.GL_KEY6
	Settingk7 	= AccSetting.GL_KEY7
	Settingk8 	= AccSetting.GL_KEY8
	Settingk9 	= AccSetting.GL_KEY9

	k1 = mktkey.getResultKey(Settingk1, ID, CustomerID)
	k2 = mktkey.getResultKey(Settingk2, ID, CustomerID)
	k3 = mktkey.getResultKey(Settingk3, ID, CustomerID)
	k4 = mktkey.getResultKey(Settingk4, ID, CustomerID)
	k5 = mktkey.getResultKey(Settingk5, ID, CustomerID)
	k6 = mktkey.getResultKey(Settingk6, ID, CustomerID)
	k7 = mktkey.getResultKey(Settingk7, ID, CustomerID)
	k8 = mktkey.getResultKey(Settingk8, ID, CustomerID)
	k9 = mktkey.getResultKey(Settingk9, ID, CustomerID)

	AccObj = MKT_ACCOUNT.query.get(AccID)

	if not AccObj:
		return False, "Can not find Account."

	AccCate		= AccObj.AccCategory

	LPObj = MKT_LOAN_PRODUCT.query.get(LPID)

	if not LPObj:
		return False, "Can not find Loan Product."

	if not Note:
		Note = "Interest income has been moved from suspend"

	Category 	= PDParamObj.SuspendCrCat

	if not Category:
		return False, "Suspend Credit category not found."

	GL_KEYS		= mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
	Mode 		= "Direct"
	DrCr		= "Dr"

	mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					AccID,					# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(IntAmount), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
	)

	DicEquivalent, IntCurrency, IntIncome = mktloan.getInterestMultiCurrency(AccSetting, ReportingRateObj, Branch, Currency, IntAmount)

	Category 	= LPObj.IntIncomeCate.strip()

	if not Category:
		return False, "Interest income category not found."

	GL_KEYS 	= mktaccounting.getConsolKey(Category, IntCurrency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
	Mode 		= "Direct"
	DrCr 		= "Cr"

	mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					AccID,					# Account
					Category,				# Category
					IntCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(IntAmount), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
	)

	return True, "Interest in suspend has been reversed."

def updateAccrIntLC(LCID="", DeductAmount=0):

	LCObj 	= MKT_LOAN_CONTRACT.query.get(LCID)
	
	ReportingRateObj 	= mktaccounting.getReportingRateObj()


	if not LCObj:
		return False, "Loan Contract not found."

	if DeductAmount <= 0:
		return False, "Deduct Amount must be bigger than 0."

	try:
		DeductAmount 		= Decimal(DeductAmount)
	except:
		return False, "Deduct Amount must be number."

	IntIncEarned 		= Decimal(LCObj.IntIncEarned)		#Interest Income Earned
	AccrInterest		= Decimal(LCObj.AccrInterest)		#Accrued Interest Receivable
	AccrCurrentInt		= Decimal(LCObj.AccrCurrentInt)		#Accr Current Installment
	AccrIntCurrMonth 	= Decimal(LCObj.AccrIntCurrMonth)	#Accr Int Current Month
	AccrIntPreMonth		= Decimal(LCObj.AccrIntPreMonth)	#Accr Int Previous Month

	if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":

		FCYIntIncEarned 	= Decimal(LCObj.FCYIntIncEarned) 	#FCY Interest Income Earned

	Currency 			= LCObj.Currency

	DictUpdate 			= {}

	AccrInterest 	= AccrInterest - DeductAmount
	AccrCurrentInt 	= AccrCurrentInt - DeductAmount

	if DeductAmount > AccrIntPreMonth:
		AccrIntPreMonth = 0
		AccrIntCurrMonth = AccrIntCurrMonth + AccrIntPreMonth - DeductAmount
	else:
		AccrIntPreMonth = AccrIntPreMonth - DeductAmount

	if LCObj.Suspend == "Y":
		LCYDecutAmount = DeductAmount * Decimal(ReportingRateObj.get(Currency))
		IntIncEarned = IntIncEarned + LCYDecutAmount

		if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":

			FCYIntIncEarned = FCYIntIncEarned + DeductAmount

	DictUpdate.update({	"AccrInterest": AccrInterest,
						"IntIncEarned": IntIncEarned,
						"AccrCurrentInt": AccrCurrentInt,
						"AccrIntCurrMonth": AccrIntCurrMonth,
						"AccrIntPreMonth": AccrIntPreMonth
						})
	
	if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
		DictUpdate.updated({"FCYIntIncEarned": FCYIntIncEarned})


	mktdb.updateRecord(MKT_LOAN_CONTRACT, [MKT_LOAN_CONTRACT.ID == LCID], DictUpdate)

	return True, "%s Accrued Interest has been updated" % (LCID)