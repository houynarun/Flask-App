from app.mktcore.imports            import *
from app.Module.models              import *
from flask 							import request,get_flashed_messages
from werkzeug                       import secure_filename
from datetime 						import datetime
# from app.BatchUpload.models         import *
from app.Upload.exportimport 	 	import *
from app.Teller.bank 				import *
from app.Teller.cheque 				import *
from app.Teller.deposit 			import *
from app.Teller.expense 			import *
from app.Teller.forms 				import *
from app.Teller.income 				import *
from app.Teller.withdrawal 			import *
from app.Teller.others 				import *
from app.FundTransfer.forms 		import *
from app.FundTransfer.fundadvance 	import *
from app.FundTransfer.funddeposit 		import *
from app.FundTransfer.fundsettlement 	import *
from app.FundTransfer.fundtransfer_II	import *
from app.FundTransfer.fundwithdrawal 	import *
from app.FundTransfer.pf_expense 		import *
from app.PD.penalty 					import *
from app.JournalEntry.forms 		import *
from app.MultiJournalII.forms 		import *
from app.DataEnquiry.models 		import *
from openpyxl 					import load_workbook
import os,sys
import app.mktcore.autoid           as mktautoid
import app.tools.mktdb              as mktdb
import app.tools.mkttool            as mkttool
import app.tools.mktsetting         as mktsetting
import app.tools.mktaudit           as mktaudit
import app.tools.mktdate 			as mktdate
import mktapirequest
from openpyxl import Workbook
from openpyxl.comments import Comment
import csv,ast,json

import csv,json
import requests
from app.mktcore.authentication import getToken

	
class CLS_BATCH_UPLOAD(object):
	"""docstring for BatchUpload"""

	def uploadFileToDir(self,File="",AllowFile=[],FileType=""):
		"""
		Definition :
			this func use to upload file to directory 
		Param:
			- File 
				- type :string
				- def : your file name
			- AllowFile
				- type :list
				- def :extension of file that allow
		Return:
			-True :success upload file
			-False: fail upload file
		"""
		try:
			if File:
				AllowFile   =   mkttool.getAllowedFile(File.filename,ext=AllowFile)
				SecureFile  =   secure_filename(File.filename)
				Status      =   True
				if AllowFile and SecureFile:
					AttachmentFolder    =   mktsetting.getAppSetting('AttachmentFolder')
					Date                =   datetime.now()
					FormatDate          =   Date.strftime("%y%m%d%H%M%S")
					Ext                 =   SecureFile.split('.')[-1] # get file extension
					FileName            =   SecureFile.split('.')[0]  # get file name
					SecureFile          =   "%s_%s.%s" % (FormatDate,FileName, Ext)#format file name
					File.save(os.path.join(AttachmentFolder,SecureFile))
					Status  =   True
					Msg     =   SecureFile
				else:
					Msg     ="File is an invalid type or unsafe."
					Status  =   False
				return Status,Msg #status true ,Msg is file name for insert table
		except Exception as e:
			raise e
	def getAuditTrailInau(self):
		'''
		Get INAU Audit Trail
		'''

		Audit       = mktaudit.getAuditrail()
		Audit.update({'Authorizer':''})
		Audit.update({'Authorizeon':''})
		Audit.update({'Status':'INAU'})
		Audit.update({'Curr':'-1'})
		return Audit

	def insertBatchUpload(self,FileUpload="",FileUpload1="",FileUpload2="",Module="",
							   Form="",Table="",ImportMode="",UploadType=""):
		"""
			- def:
				save record into batch upload table
			- param:
				- FileUpload type(FileStorage):
				- FileUpload1 type(FileStorage):Debit file
				- FileUpload2 type(FileStorage):Credit file
				- UploadType:
					- 1 = Batch upload
					- 2 = Data Enquiry
					- 3 = Import/Export
					- 99= Other
				-----
			-return:
				-True :success insert
				-False: fial insert
			**Note:
				we want to use kwargs as param but have problem with FileStorage type
		"""
		try:
			Status,Msg  =   self.uploadFileToDir(FileUpload)
			if Status:
				"""Block generate autho id of Batch Authoirze"""
				ID          =   mktautoid.getAutoID("FRM_BATCH_UPLOAD")
				"""check type table is a list or not"""
				if isinstance(Table,(list,)):
					"""Block separate table by space before insert to table"""
					NewTable=""
					for Row in Table:
						NewTable+="%s "%Row
				else:
					NewTable =  Table
				RowDict ={
							"ID":ID,
							"Module":Module,
							"Form":Form,
							"Table":NewTable,
							"ImportMode":ImportMode,
							"UploadType":UploadType,
							"FileUpload":Msg,
						}
				if FileUpload1 and FileUpload2:
					Status1,Msg1    =   self.uploadFileToDir(FileUpload1)
					Status2,Msg2    =   self.uploadFileToDir(FileUpload2)
					if Status1 and Status2:
						RowDict.update({"FileUpload1":Msg1,
										"FileUpload2":Msg2})
					else:
						return False

				"""Block check authorize or un authorize record"""
				FormObj     =   MKT_FORM.query.filter(MKT_FORM.URL=='BatchUpload_I').first()
				LevelAuth   =   0
				if FormObj:
					LevelAuth   =   FormObj.NAuthorize
				"""Block insert table"""
				if LevelAuth==0:
					mktdb.insertTable(MKT_BATCH_UPLOAD,RowDict)
				else:
					AuditTrialInau = self.getAuditTrailInau()
					RowDict.update(AuditTrialInau)
					mktdb.insertTable(MKT_BATCH_UPLOAD_INAU,RowDict)
				db.session.commit()
				return True
			else:
				return False
		except Exception as e:
			db.session.rollback()
			raise
	def getAbsPath(self,ID):
		"""
			def:
				read local file
			param:
				- "ID"= Batch upload ID
			return :
				- if file is found return file
				- else return msg.
		"""
		BatchObj            =   MKT_BATCH_UPLOAD_INAU.query.get(ID)
		if not BatchObj:
			BatchObj            =   MKT_BATCH_UPLOAD.query.get(ID)
			if not BatchObj and "@" in ID:
				HistID 	=	ID.split("@")[0]
				BatchObj            =   MKT_BATCH_UPLOAD_HIST.query.get(HistID)
		if BatchObj:
			FileUpload      =   BatchObj.FileUpload
			FileUploadDr    =   BatchObj.FileUpload1
			FileUploadCr    =   BatchObj.FileUpload2
			DictFile 		=	{"FileUpload":self.checkFilePath(FileName=FileUpload),
								 "FileUploadDr":"",
								 "FileUploadCr":""}
			if FileUploadDr:
				ExistFileDr =	self.checkFilePath(FileName=FileUploadDr)
				DictFile.update({"FileUploadDr":ExistFileDr})
			if FileUploadCr:
				ExistFileCr =	self.checkFilePath(FileName=FileUploadCr)
				DictFile.update({"FileUploadCr":ExistFileCr})
			return True, DictFile
		else:
			Msg = "File not found"
			return False,  Msg
	def checkFilePath(self,FileName="",Dir=""):
		Temp =	Dir
		if not Dir:
			Dir = mktsetting.getAppSetting('AttachmentFolder')
		if Dir[-1]!="/":
				Dir =Dir+"/"
				
		if FileName:
			
			FullPath 	=	Dir+FileName
			isHasFile   =   os.path.exists(FullPath)
			if isHasFile:
				return FullPath
			else:
				return ""
		else:
			return Dir if Temp else ""
	def getLocalDictCSV(self,FullPath,UploadType=""):
		"""
			def:
				read csv file and arrage to list of dictionary by user give the absolute path via parameter
			param:
				-FullPath:
					- type (str):the absolute parth of file.Ex. /home/dell/Documents/file.csv
			return:
				-If emptype file:
					reutrn False,Msg
				-If File not fount:
					return False,Msg
				-If exist file:
					return True,List of Dictionary

		"""
		try:
			if os.path.exists(FullPath):
				with open(FullPath) as csvfile:
					DictCSV = list(csv.DictReader(csvfile))
					if DictCSV:
						return True,DictCSV
					else:
						Msg = "Your file is blank"
						return False,Msg
			else:
				Msg ="File not found"
				return False,Msg
		except Exception as e:
			raise
	def str_to_class(self,str):
		return getattr(sys.modules[__name__], str)

	def writeCSV(self,ListDict,ID="",Resource="AUTH",DefaultName=""):
		"""
			def:
				write file to local directory as csv
			param:
				- ListDict:
					-type(List) :list of diction 
				- ID :
					-type(str):BatchUpload ID
				- Resource= refere to table live or inau
					-type(str):"AUTH"=LIVE,"INAU"=Input not Authorize
				- DefaultName:
					-type(str):will use to concate name
			*Note:
				if not ID => filename=DefaultName+DateTaime
				if has ID and has record =>FileName = DefaultName+DefaultName
					-But not have DefaultName will use "error" to concate

		"""
		try:
			Date                =   datetime.now()
			FormatDate          =   Date.strftime("%y%m%d%H%M%S")
			AttachmentFolder    =   mktsetting.getAppSetting('AttachmentFolder')
			FileName 			=	""
			OrgFile 		= 	""
			if ID:
				if Resource=="INAU":
					BatchObj =	MKT_BATCH_UPLOAD_INAU.query.get(ID)
				else:
					BatchObj =	MKT_BATCH_UPLOAD.query.get(ID)
				if BatchObj:
					FileName = BatchObj.FileUpload.split(".")[0]
					OrgFile  = BatchObj.FileUpload
					Ext 	 = BatchObj.FileUpload.split(".")[1]
					if not DefaultName:
						FileName="error"+FileName
			else:
				FileName =	FormatDate
			if DefaultName:
				FileName =	DefaultName +"_"+FileName

			Dir 		=	self.checkFilePath(Dir=AttachmentFolder)
			FullPath 	=	Dir+"%s.%s"%(FileName,Ext)
			if ListDict:
				with open(FullPath, 'w') as file:  # Just use 'w' mode in 3.x
					write = csv.DictWriter(file, ListDict[0].keys())
					write.writeheader()
					for RowDict in ListDict:
						write.writerow(RowDict)
				
		except Exception as e:
			raise
	def writeComment(self,Workbook,ListDict="",FullPath="",RowIndex="",ColumnIndex=""):
		for Sheet in Workbook.worksheets:
			No = 1 
			Message = ""
			for Item in ListDict:
				for Key , Value in Item.iteritems():
					Message += "%s:%s , "%(Key,Value)
				Message ="%s. %s."%(No,Message)
				No +=1
			mkttool.insertCommentToExcel(Sheet,Message, RowIndex, ColumnIndex)
			Workbook.save(FullPath)

	def getRegisterFormUrl(self):
		ExtendClass 	= 	mktsetting.ExtendModule()
		"""JE URL"""
		JE				=	ExtendClass.getUrlExtend(Module="JournalEntry")
		"""Fund Url"""
		FundTransfer	=	ExtendClass.getUrlExtend(Module="FundTransfer")
		FundAdvance		=	ExtendClass.getUrlExtend(Module="FundAdvance")
		FundDeposit		=	ExtendClass.getUrlExtend(Module="FundDeposit")
		FundWithdrawal	=	ExtendClass.getUrlExtend(Module="FundWithdrawal")
		FundSettlement	=	ExtendClass.getUrlExtend(Module="FundSettlement")
		FundPFExpense	=	ExtendClass.getUrlExtend(Module="PFExpense")
		"""Teller Url"""
		DepositBank 		=	ExtendClass.getUrlExtend(Module="DepositBank")
		WithdrawalBank 		=	ExtendClass.getUrlExtend(Module="WithdrawalBank")
		DepositCheque  		= 	ExtendClass.getUrlExtend(Module="DepositCheque")
		WithdrawalCheque  	= 	ExtendClass.getUrlExtend(Module="WithdrawalCheque")
		Deposit 			=	ExtendClass.getUrlExtend(Module="Deposit")
		Expense 			=	ExtendClass.getUrlExtend(Module="ExpensePosting")
		Income 				=	ExtendClass.getUrlExtend(Module="IncomePosting")
		Form 				=	ExtendClass.getUrlExtend(Module="TillToTill")
		Others 				=	ExtendClass.getUrlExtend(Module="CashPosition")
		Withdrawal 			= 	ExtendClass.getUrlExtend(Module="Withdrawal")
		GatewayTransfer 	= 	ExtendClass.getUrlExtend(Module="GatewayTransfer")
		Penalty 			= 	ExtendClass.getUrlExtend(Module="Penalty")
		"""Multi Journal"""
		MultiJournalII 		= 	ExtendClass.getUrlExtend(Module="MultiJournalII")
		FormUrl 	=	{
							"FRM_JOURNAL_ENTRY"		: JE,
							"FRM_FUND_TRANSFER"		: FundTransfer,
							"FRM_FUND_ADVANCE" 		: FundAdvance,
							"FRM_FUND_DEPOSIT" 		: FundDeposit,
							"FRM_FUND_WITHDRAWAL" 	: FundWithdrawal,
							"FRM_FUND_SETTLEMENT" 	: FundSettlement,
							"FRM_PF_EXPENSE" 		: FundPFExpense,

							"FRM_DEPOSIT_BANK" 		: DepositBank,
							"FRM_WITHDRAWAL_BANK" 	: WithdrawalBank,
							"FRM_DEPOSIT_CHEQUE" 	: DepositCheque,
							"FRM_WITHDRAWAL_CHEQUE" : WithdrawalCheque,
							"FRM_DEPOSIT"			: Deposit,
							"FRM_EXPENSE_POSTING"	: Expense,
							"FRM_TELLER"			: Form,
							"FRM_INCOME_POSTING" 	: Income,
							"FRM_WITHDRAWAL" 		: Withdrawal,
							"FRM_MULTI_JOURNAL_II" 	: MultiJournalII,
							"FRM_GATEWAY_TRANSFER" 	: GatewayTransfer,
							"FRM_PENALTY"			: Penalty,
						}

		return FormUrl
	def clearTable(self,TableName):
		getTableModel(TableName).query.delete()

	def bindFormAndTemplate(self,Form,Dict,Audit="",headers=""):
		"""
		def :
			- In this function,we need to check to make sure that each columns of uploaded template 
			  are match with class form's attribute (or fields).
			- In case, form and template not match field will remove out 
		param:
			-Form :
				- type (str): the class name 
			-Dict: 
				- type (Dict):the dictionary that is converted from uploaded template
		return :
			- new dict
		"""
		from app.tools.mktpaymentgateway import CLS_PAYMENT_INFO
		# print "FormUrl",Form
		FormUrlRegister 	=	self.getRegisterFormUrl()
		host 				=	request.url.split("/Morakot")[0]
		FormUrl 			=	FormUrlRegister.get(Form)
		url 				=	"%s/Morakot/API/%s/New/Operation/"%(host,FormUrl) # api url
		# print "url--->",url,request.headers
		ReResult ,SatusCode = 	 mktapirequest.api_request.postAuthorize(url=url,headers=headers)
		# print "r_status",SatusCode
		if SatusCode ==200:
		
			Status,ListAttr 	=  self.getFormProp(ReResult)
			ReResult 			=  eval(ReResult)
			AuthorizationKey 	=  request.headers['AuthorizationKey']
			headers.update({'AuthorizationKey':AuthorizationKey})

			# print "AuthorizationKey",AuthorizationKey

			AuditKey= ["ID","Inputter","Branch","Createdon","Status","Curr","Authorizer","Authorizeon"]
			if Audit=="Y":
				
				for Key in AuditKey:
					ListKey = [item for item in Dict.keys() if Key in item]

					for Attr in ListKey:
						if Attr !=Key and Attr !="Currency":
							del Dict[Attr]
			else:
				for Attr in Dict.keys():
					""" if """
					if Attr not in ListAttr and Attr not in AuditKey :
						# remove attr that is not form's attr
						del Dict[Attr]
			#append attr to dict
			if Status:
				for Attr in ListAttr:
					# in case there are missing attr for from's attribute will append
					if Attr not in Dict.keys():
						Dict.update({Attr:""})
			# auto complete hot field
			PaymentInfoObj 		=	CLS_PAYMENT_INFO()
			DictHotField  	 = PaymentInfoObj.getHotField(url=url,data=Dict,headers=headers) # auto complete for hot field,Dict
			if DictHotField:
				Dict.update(DictHotField)

		return Dict
	def getFormProp(self,Response):
		"""
			-translate form to prop
			- Param
				- Response : http response
			-return 
				-Result = True,List[Attribute]
				or
				-Result= False,"Message"
		"""
		if Response :
			Data = eval(Response)
			ListAttr = []
			# loop to get attribut name (class attribute)
			for Row in Data.get("data",{}).get("properties"):
				ListAttr.append(Row.get("name"))
			# loop field name in tab
			Tab = Data.get("data").get("tab")
			if Tab:
				for Content in Tab:
					for Row in Content.get("content",{}):
						Name = Row.get("name")
						ListAttr.append(Name)
			Result= True,ListAttr

		else:
			Result = False,"%s there are not quite right."%Code
		return Result

	def errorRecord(self,Dict,ErrDict):
		""" impress error field """
		for Key in ErrDict.keys():
			Dict.update({Key:"%s %s"%(Dict.get(Key,""),ErrDict.get(Key,""))})
		return Dict
	def matchMultiJournal(self,MJID,List=""):
		Count 	= 1
		NewDict = {}
		for Dict in List:
			ID 	=	Dict.get("ID")
			if MJID==ID:
				if Count ==1:
					NewDict.update(Dict)
				else:
					for Key,Value in Dict.items():
						NewDict.update({"%s_%s"%(Key,Count):Value})
				Count+=1

		return NewDict
	def mergeMulitJournal(self,Dict="",DictDr="",DictCr=""):
		if DictDr:
			Dict.update(DictDr)
		if DictCr:
			Dict.update(DictCr)
		return Dict

	def getNAuthorize(self,URL):
		FormObj = MKT_FORM.query.filter(MKT_FORM.URL==URL).first()
		return int(FormObj.NAuthorize) if FormObj else 0

	def batchAuthorize(self,ID):
		try:
			Result 				= 	True,""
			FormUrlRegister 	=	self.getRegisterFormUrl()
			Audit 				= 	self.getAuditTrailInau()
			BatchObj 			= 	MKT_BATCH_UPLOAD.query.get(ID)
			ListRecErr			=   []
			ListRecSuccess 		=	[]
			ResultDict 			= 	{'Success':[],'Fail':[]}
			host 				=	request.url.split("/Morakot")[0]
			NAuthorize 			= 	self.getNAuthorize(URL='BatchAuthorize')
			if BatchObj:
				Inputter 	=	BatchObj.Inputter
				Form 		= 	BatchObj.Form
				FormUrl 	=	FormUrlRegister.get(Form)
				Module 		= 	BatchObj.Module
				UploadType 	= 	BatchObj.UploadType
				if FormUrl:
					Audit.update({"Inputter":Inputter})
					Chk,ListAbsPath =	self.getAbsPath(ID)
					FileUpload 	=	ListAbsPath.get("FileUpload")
					Model 		=	BatchObj.Table
					if Module=="Multi Journal":
						"""Multi journal has 3 file. Multi journal,multi journal debit, multi journal credit"""
						FileUploadDr 		= ListAbsPath.get("FileUploadDr")
						FileUploadCr 		= ListAbsPath.get("FileUploadCr")
						StatusDr, ListDr 	= self.getLocalDictCSV(FileUploadDr)
						StatusCr, ListCr 	= self.getLocalDictCSV(FileUploadCr)
						Model  				= Model.split()[0]
					Status,ListDict = self.getLocalDictCSV(FileUpload,UploadType=UploadType)
					if Status and isinstance(ListDict, (list,)):

						BaseUrl 	=	"%s/Morakot/API/%s/"%(host,FormUrl) # api url
						RemoveAudit =	"" #removing audit from dict
						"""get attributes of class. ListDict= [{"Branch":'HO',..}]"""
						for Dict in ListDict:

							Token 		=  	request.headers['AuthorizationKey']
							# print "session",session
							headers = {	
										'authorizationkey': Token,
										'accept': "application/json",
										'content-type': "application/json"
										}

							"""Get Auto ID"""
							# AutoID = mktautoid.getAutoID(Form)
							"""block form post """
							if Module=="Multi Journal":
								MJID	= Dict.get("ID")
								RemoveAudit ="Y"
								DictDr	= self.matchMultiJournal(MJID,List=ListDr)
								DictCr  = self.matchMultiJournal(MJID,List=ListCr)
								Dict 	= self.mergeMulitJournal(Dict=Dict,DictCr=DictCr,DictDr=DictDr)

							Branch = Dict.get("Branch")
							Audit.update({"Branch":Branch})# overrite branch in audit trail
							Dict.update(Audit)
							# Dict.update({"ID":AutoID})

							SelfInputter = "System" if NAuthorize == 0 else Inputter
							NewDict 	 = self.bindFormAndTemplate(Form,Dict,Audit=RemoveAudit,headers=headers) # auto complete missing field
							AutoID 		 = NewDict.get("ID")
							PostUrl 	 = BaseUrl+"?accept=override"# accept= override is atomaically accept
							# print "New Dict",NewDict
							"""set branch,inputter in request header to override branch and inputter of autorizer"""
							
							MsgResponse ,status_code = mktapirequest.api_request.postForm(url=PostUrl,data=NewDict,Branch=Branch,Inputter=SelfInputter,headers=headers)
							
							print "request response",MsgResponse
							# print "status_code",status_code
							if status_code==200:
								"""block authorize record"""

								"""Authorize url. in case form has accept override it's automaically accept"""
								UrlAuth 	=	BaseUrl+"Authorize/%s/?accept=override"%AutoID
								
								"""post authorize record"""
								AuthResponse, status = mktapirequest.api_request.postAuthorize(url=UrlAuth,headers=headers)

								# print "Auth",AuthResponse
								if status in [400,401,406]:
									"""somethings quite right"""

									if AuthResponse:
										""" impListDictress error field """

										""" cast unicode form to real dictionary"""
										NewMsgResponse  = eval(AuthResponse)

										""" get response message """
										MsgDict 		= NewMsgResponse.get("message")
										ErrDict 		= self.errorRecord(Dict, MsgDict)

										ListRecErr.append(ErrDict)
										ResultDict.update({'Fail':ListRecErr})
										Result 		= True, ResultDict

								elif status == 200:	
									"""success response"""

									NewMsgResponse  = eval(AuthResponse)
									MsgDict 		= NewMsgResponse.get("message")
									StaticMsg		= MsgDict.get("message")

									if not StaticMsg:
										# StaticMsg is none mean not success authorize
										# error around Before authorize method
										# delete eorr record in inau 
										self.deleteFialedAuthorize(Model,ID,FormType=Module)
										# update error record to dictionary
										MsgDict.update({"message":"Error, please check your defined static method before record authorize"})
										ErrDict 		= self.errorRecord(Dict, MsgDict)
										ListRecErr.append(ErrDict)

									else:
										# append success record
										# remove unicode 
										ListRecSuccess.append(AutoID.encode('ascii','ignore'))
													
							elif status_code==500:
								self.deleteFialedAuthorize(Model,ID,FormType=Module) # remove inau record
								ResultDict.update({"Fail":'Status 500 : Internal server erorr'})
								Result = True, ResultDict

							elif status_code in [400,401, 406]:
								"""Failed request , authoriNewMsgResponseze record not success"""
								if MsgResponse:
									""" delete error reocord"""
									self.deleteFialedAuthorize(Model,ID,FormType=Module)

									""" cast unicode form to exactly dict """
									NewMsgResponse  = eval(MsgResponse)

									"""get message response"""
									MsgDict 		= NewMsgResponse.get("message")

									""" append error message to dictionary"""
									ErrDict 		= self.errorRecord(Dict, MsgDict)
									ListRecErr.append(ErrDict)
									
							if ListRecErr:
								"""has record erorr"""
								ResultDict.update({'Fail':ListRecErr})
								Result = True, ResultDict

								"""add error record to file error"""
								self.writeCSV(ListRecErr,ID=ID,Resource="AUTH",DefaultName="error")

						if ListRecSuccess:
							# Result = True,ListRecErr
							ResultDict.update({"Success":ListRecSuccess})
							Result = True,ResultDict

					else:
						Result = False, "Your file has no records. Please check and try again."
				else:
					Result = False, "Please provide specifict form to execute."

				#update batchupload status
				if not Result[0] or len(ListRecErr) > 0:
					BatchStatus = '2'
				else:
					BatchStatus = '1'
					
				BatchObj.BatchStatus = BatchStatus
				db.session.add(BatchObj)
				db.session.commit()

			else:
				Result = False, "Batch upload has no record."
			return Result

		except Exception as e:
			return False, str(e)
			raise
	def getDataEnquiryMapping(self,Dict,UploadType=""):
		"""mapping field with config """

		if UploadType=="2":
			"""map field with wing """
			Field = mktsetting.getAppSetting("DE_WING_MAP_FIELD")
		elif UploadType=="3":
			Field = mktsetting.getAppSetting("DE_TRUE_MAP_FIELD")
		"""map field with true money"""
		NewDict = {}
		ListDict = self.convertStar(Field)
		for item in ListDict:
			for Key ,Value in item.iteritems():
				Value = Dict.get(Value) if Value in Dict.keys() else Value
				NewDict.update({Key:str(Value)})
		NewDict.update({"TranDate":str(mktdate.getBankDate())})
		return NewDict

	def convertStar(self,value):
		"""split star in app setting for multi value"""
		List = value.split("\n")
		ListDict = []
		for item in List:
			if item:
				ListKeyValue =item.split("*")
				ListDict.append({ListKeyValue[0]:ListKeyValue[1].split("\r")[0]})
		return ListDict
	def deleteFialedAuthorize(self,LIVE,ID,FilterField='',FormType=""):
		""" delete recored in inau , in case accour erorr while authorize"""
		try:
			if FilterField:
				if FormType=="Multi Journal":
					for Table in LIVE.split():
						db.session.query(eval(Table)).filter(getattr(eval(Table),FilterField)==ID).delete()
				else:
					db.session.query(eval(LIVE)).filter(getattr(eval(LIVE),FilterField)==ID).delete()
			else:
				if FormType=="Multi Journal":
					for Table in LIVE.split():
						db.session.query(eval(Table)).filter_by(ID=ID).delete()
				else:
					db.session.query(eval(LIVE)).filter_by(ID=ID).delete()
			db.session.commit()
		except Exception, e:
			print "deleteAUTH error: %s"%e
			db.session.rollback()
			raise
	def flashMessage(self,Message,ID=""):
		"""set message from response"""
		ListMsg  = []

		if Message[0]:
			""" flash success record"""
			ListSuccess = Message[1].get("Success")
			ListFail = Message[1].get("Fail")
			if ListSuccess :
				
				Msg = " %s records has been executed successfully.%s"%(len(ListSuccess),ListSuccess)
				ListMsg.append(Msg)
			else:
				Msg = Markup("There are <span class='text-danger text-bold'>0 </span>record was authorize")
				ListMsg.append(Msg)
			if ListFail:
				Fail=Markup("<span class='text-danger text-bold'>There are %s records unsuccessful executed.</span> Please go to batch upload %s for download error file and upload it again." %(len(ListFail),ID))
				ListMsg.append(Fail)
			# else:
			# 	flash("Records has been executed successfully.")
		else:
			Fail = msg_error+"%s" % Message[1]
			ListMsg.append(Fail)

		return ListMsg

batchupload  =  CLS_BATCH_UPLOAD()
