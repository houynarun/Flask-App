from flask 							import flash
from app.mktcore.imports 			import *
from ... 							import app, db
from sqlalchemy 					import *
from decimal 						import *
from datetime 						import datetime, date, timedelta
import time
import calendar

# from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.LoanContract.models 				import *
from app.LoanProduct.models 				import *
from app.LoanAmendment.models 				import *
from app.RepaymentSchedule.models 			import *
from app.ScheduleDefine.models 				import *
from app.SavingPlan.models 					import *
from app.Company.models 					import *
from app.Currency.models 					import *
from app.AccProduct.models 					import *
from app.Tax.models 						import * 
from app.Setting.models 					import *

import app.tools.loantools.rescheduletools 	as mktreschedule
import app.tools.mktdb 						as mktdb
import app.tools.mktsetting 	as mktsetting
import app.tools.mktaccounting  as mktaccounting
import app.tools.mktdate 		as mktdate
import app.tools.mktdb 			as mktdb

@app.route('/Morakot/SavingPlanScheduleDefine/<Operation>/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def SavingPlanScheduleDefine(Operation=''):
	try:
		ListError 		= 	[]
		SavingPlanObj 	= 	""
		ID 				= 	request.args.get('ID') if 'ID' in request.args else ''
		Resource 		=	request.args.get('Resource') if 'Resource' in request.args else 'INAU'
		CompanyObj		=	""
		CurrencyObj		=	""
		ScheduleObj 	= 	""

		SavingPlanObj = MKT_SAVING_PLAN_INAU.query.get(ID)
		if not SavingPlanObj:
			SavingPlanObj = MKT_SAVING_PLAN.query.get(ID)

		DictData = {}
		ListData = []
		if SavingPlanObj:
			CompanyObj		=	MKT_COMPANY.query.first()
			CurrencyObj		=	MKT_CURRENCY.query.get(SavingPlanObj.Currency)		
			LoanID 			= 	SavingPlanObj.LoanID	
			if Operation == "New":
				#1. calculate amount to save for each month and interest to get after capitalize
				ListData =  getScheduleFixSavingAmount(SavingPlanObj=SavingPlanObj,LoanID=LoanID)
				#2. Save Data to MKT_SAVING_PLAN_SCH_DEFINE
				if saveSchedule(ListData=ListData,Resource=Resource,SPID=ID):
					flash("Schedule was automatic saved.")
				
			if Resource == "INAU":				
				ScheduleObj = MKT_SAVING_PLAN_SCHED_INAU.query.\
										filter(MKT_SAVING_PLAN_SCHED_INAU.SPID==ID).\
										order_by(MKT_SAVING_PLAN_SCHED_INAU.No.asc())
			else:
				ScheduleObj = MKT_SAVING_PLAN_SCHED.query.\
										filter(MKT_SAVING_PLAN_SCHED.SPID==ID).\
										order_by(MKT_SAVING_PLAN_SCHED.No.asc())

			BankDate = mktdate.getBankDate()
			SavingObj 		=	db.session.query(MKT_SAVING_PLAN,
											 MKT_SAVING_PLAN_SCHED
											 ).\
											join(
												MKT_SAVING_PLAN_SCHED, 
												MKT_SAVING_PLAN_SCHED.SPID == MKT_SAVING_PLAN.ID
											).\
											filter(MKT_SAVING_PLAN.MaturityDate >= str(BankDate)).\
											filter(MKT_SAVING_PLAN_SCHED.CollectionDate == str(BankDate)).\
											filter(MKT_SAVING_PLAN.NextRunDate == str(BankDate))

		return render_template('saving/savingplan_define.html',
										SavingPlanID  = ID,
										SavingPlanObj = SavingPlanObj,
										ListError=ListError,
										mktdate=mktdate,
										CompanyObj=CompanyObj,
										CurrencyObj=CurrencyObj,
										DictData=DictData,
										toMoney= mktmoney.toMoney,
										float=float,
										len=len,
										ScheduleObj=ScheduleObj)
	except Exception, e:
		raise

def getScheduleFixSavingAmount(**kwargs):
	SavingPlanObj = kwargs.get("SavingPlanObj","")
	LoanID 		  = kwargs.get("LoanID","")
	ListData = []
	if SavingPlanObj:
		Term 			= 	float(SavingPlanObj.Term)
		FirstDate 		= 	SavingPlanObj.FirstDate
		MaturityDate 	= 	SavingPlanObj.MaturityDate
		TargetAmount 	= 	SavingPlanObj.TargetAmount
		AccProduct 		=	SavingPlanObj.AccProduct
		SavingAccount 	=	SavingPlanObj.SavingAccount
		GeneralAccount 	=	SavingPlanObj.GeneralAccount
		Currency 		=	SavingPlanObj.Currency
		TargetAmount 	=	SavingPlanObj.TargetAmount
		MaturityDate 	= 	SavingPlanObj.MaturityDate

		Balance 		=	0
		CollectionDate	=	""
		NumberOfDay 	=	0
		InterestAmount	=	0
		InterestRate 	=	0
		TaxAmount		=	0
		TaxRate 		=	0

		AccProductObj 	=  	MKT_ACC_PRODUCT.query.get(AccProduct)
		SavingAccountObj = 	MKT_ACCOUNT.query.get(SavingAccount)
		CurrencyObj     = 	MKT_CURRENCY.query.get(Currency)
		if SavingAccountObj:
			InterestRate = SavingAccountObj.InterestRate

		if AccProductObj:
			TaxObj = MKT_TAX.query.get(AccProductObj.Tax)
			TaxRate = TaxObj.Rate

		SavingPerInstallment 		= 	getSavingPerInstallment(TargetAmount=float(TargetAmount),Term=int(Term))
		SavingPerInstallment 		= 	mktmoney.toMoney(float(SavingPerInstallment),CurrencyObj)
		SavingPerInstallment 		= 	float(SavingPerInstallment.replace(",",""))

		if LoanID:
			ScheduleObj = getLCSchedule(LoanID=LoanID,Date=mktdate.getBankDate())
			ScheduleObj = ScheduleObj.all()
		No = 1
		for index in range(int(Term)):
			if No == int(Term):
				SavingPerInstallment = float(TargetAmount) - float(Balance) 		

			Balance 		+=SavingPerInstallment
			Balance 		= mktmoney.toMoney(float(Balance),CurrencyObj)
			Balance 		= float(Balance.replace(",",""))

			CollectionDate 	= mktdate.getNextMonth(mktdate.getDateISO(FirstDate),int(index))
			DateTo			= mktdate.getNextMonth(mktdate.getDateISO(FirstDate),int(index)+1)
			DateFrom  		= mktdate.getNextMonth(mktdate.getDateISO(FirstDate),int(index))

			if LoanID:
				CollectionDate 	= mktdate.getDateISO(ScheduleObj[index].CollectionDate)
				DateFrom 	   	= CollectionDate
				if No == int(Term):
					DateTo 			= mktdate.getDateISO(MaturityDate)		  
				else:					  
					DateTo 			= mktdate.getDateISO(ScheduleObj[index+1].CollectionDate)

			NumberOfDay 	= mktreschedule.getNumberOfDay(DateFrom=DateFrom,DateTo=DateTo,InterestDayBasis=3)
			InterestAmount 	= mktreschedule.getInterestAmount(RatePerYear=float(InterestRate),OutstandingAmount=float(Balance),InterestDayBasis=3,DateFrom=DateFrom,DateTo=DateTo)
			
			InterestAmount 		= mktmoney.toMoney(float(InterestAmount),CurrencyObj)
			InterestAmount 		= float(InterestAmount.replace(",",""))


			TaxAmount 		= float(InterestAmount)*float(TaxRate)/100
			TaxAmount 		= mktmoney.toMoney(float(TaxAmount),CurrencyObj)
			TaxAmount 		= float(TaxAmount.replace(",",""))

			ListData.append({"No"						: No,
							 "CollectionDate"			: str(CollectionDate),
							 "FormatCollectionDate"		: str(CollectionDate),
							 "Amount"					: SavingPerInstallment,
							 "Interest"					: InterestAmount,
							 "Tax"						: TaxAmount,
							 "Balance"					: Balance,
							 "NumDay"					: NumberOfDay
							 })
			No+=1

	return ListData

def getSavingPerInstallment(**kwargs):
	TargetAmount = kwargs.get("TargetAmount",0)
	Term 		 = kwargs.get("Term",0)
	SavingPerInstallment = 0
	if Term > 0:
		SavingPerInstallment = TargetAmount/Term
	return SavingPerInstallment

def saveSchedule(**kwargs):
	try:
		ListData = kwargs.get("ListData")
		Resource = kwargs.get("Resource")
		SPID 	 = kwargs.get("SPID")

		MainTable = ""	
		if Resource == "INAU":
			MainTable = MKT_SAVING_PLAN_SCHED_INAU
			# Record 	= db.session.query(MKT_SAVING_PLAN_SCHED_INAU).filter_by(SPID=SPID).delete()
		else:
			# Record 	= db.session.query(MKT_SAVING_PLAN_SCHED).filter_by(SPID=SPID).delete()
			MainTable = MKT_SAVING_PLAN_SCHED

		#delete previous schedule
		Record 	= db.session.query(MainTable).filter_by(SPID=SPID).delete()	
		#add new schedule to schedule define
		InsertData = {}
		for item in ListData:
			item.update({"ID"		:	"%s%s" % (SPID,item.get("No")),
						 "SPID"		: 	SPID,
						 "RepStatus": 	'0'})

			if item.get("FormatCollectionDate"): item.pop("FormatCollectionDate")

			mktdb.insertTable(MainTable,item)

		db.session.commit()
		return True
	except Exception as e:
		db.session.rollback()
		return False
	else:
		pass
	finally:
		pass	

def getLoanInformation(**kwargs):
	LoanID = kwargs.get("LoanID")
	Date   = kwargs.get("Date","")

	result = {}
	LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	ScheduleObj = getLCSchedule(LoanID=LoanID,Date=Date)

	if ScheduleObj.first():
		#term
		result.update({"Term":ScheduleObj.count()})
		#first date
		FirstInstallment = ScheduleObj.first()
		result.update({"FirstDate":FirstInstallment.CollectionDate})
		#maturity date
		result.update({"MaturityDate":LoanObj.MaturityDate})

	return result

def getLCSchedule(**kwargs):
	LoanID = kwargs.get("LoanID")
	Date   = kwargs.get("Date","")

	ScheduleObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID)
	if Date:
		ScheduleObj = ScheduleObj.filter(MKT_REP_SCHEDULE.CollectionDate >= str(Date))

	ScheduleObj = ScheduleObj.order_by(asc(MKT_REP_SCHEDULE.CollectionDate))
		
	return ScheduleObj

def setNumDayDue(PDDateObj,SystemBankDate):
	try:
		if PDDateObj.OutPrincipalDue > 0:
			From 			= PDDateObj.DueDate
			To 				= SystemBankDate
			NumOfDay 		= mktdate.getDateDiff(From, To)
			PDDateObj.NumDayDue 	= NumOfDay + 1
			db.session.add(PDDateObj)

		return ""

	except:
		db.session.rollback()
		raise

def setPostAccounting(**kwargs):
	for i in range(0, 2):
		if i == 0:
			DrCr 		= 	"Dr"
			Mode 		= 	kwargs.get("DrMode")
			Category 	= 	kwargs.get("DrCategory")
			Account 	= 	kwargs.get("DrAccount")
			Currency	= 	kwargs.get("DrCurrency","")
			Amount 		= 	kwargs.get("DrAmount","")
		else:
			DrCr 		= 	"Cr"
			Mode 		= 	kwargs.get("CrMode")
			Category 	= 	kwargs.get("CrCategory")
			Account 	= 	kwargs.get("CrAccount")
			Currency 	=	kwargs.get("CrCurrency","")
			Amount 		= 	kwargs.get("CrAmount","")

		Transaction = kwargs.get("Transaction")
		TranDate 	= kwargs.get("TranDate")
		Module 	 	= kwargs.get("Module")
		Reference 	= kwargs.get("Reference")
				
		Branch 		= kwargs.get("Branch")
		Note 		= kwargs.get("Note")
		UserReference= kwargs.get("UserReference")
		Inputter 	 = kwargs.get("Inputter")
		LCYAmount 	= kwargs.get("LCYAmount",0)

		if not Currency:
			Currency	= kwargs.get("Currency")

		if not Amount:
			Amount 		= kwargs.get("Amount")
		
		GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", Module, "", "", "", "", "", "", "", "", "")
		DateTimeNow = mktdate.getDateTimeNow()

		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			Inputter,				# Inputter
			DateTimeNow, 			# Createdon
			Inputter,				# Authorizer
			DateTimeNow,			# Authorizeon
			"", 					# AEID
			Account,				# Account
			Category,				# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(Amount), 		# Amount
			Module,					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			Reference, 				# Reference
			Note, 					# Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			Mode, 					# Mode check to insert Journal for category,
			UserReference=UserReference,		# User Reference,
			LCYAmount=LCYAmount
		)

def getSavingParam(ID="SYSTEM"):
	ParamObj = MKT_TERM_DEPOSIT_SETTING.query.get(ID)
	return ParamObj

def getSavingPenalty(**kwargs):
	'''
	Penalty Calculation based on config for each installment
	'''
	PDDetailObj 	= kwargs.get("PDDetailObj")

	Param 			= getSavingParam()
	PenType 		= Param.PenType  		#P:Percentage Base, F:Fixed Base
	PenaltyRate 	= Param.PenaltyRate		#USD0.03 KHR0.03	
	PenCalBase      = Param.PenCalBase 		#PR IN
	PenOption 	    = Param.PenOption 		#A: Automatic collect,M:Maunal Collect
	AllowOverInt    = Param.AllowOverInt    #Y: Penalty can over estimate interest, #N: Penalty cannot over estimate interest.

	PenaltyAmount 	= 0
	EstimateInterest= 0
	Currency 		= ""
	SPID 			= ""

	PastDueID 		= PDDetailObj.ID
	PastDueObj 		= MKT_SAVING_PAST_DUE.query.get(PastDueID)
	if PastDueObj:
		SPID = PastDueObj.SPID
		Currency = PastDueObj.Currency
		CollectionDate = PDDetailObj.DueDate
		EstimateInterest = getEstimateInterest(SPID=SPID,CollectionDate=CollectionDate)

	if PenType == "P":
		CalBaseAmount = 0
		CalBase = PenCalBase.split()
		for item in CalBase:
			if item == "PR":
				CalBaseAmount = float(CalBaseAmount) + float(PDDetailObj.OutPrincipalDue)
			elif item == "IN":
				CalBaseAmount = float(CalBaseAmount) + float(EstimateInterest)

		Rate = getPenaltyRate(Currency=Currency,PenaltyRate=PenaltyRate)
		PenaltyAmount = float(CalBaseAmount) * float(Rate) / float(100)

	elif PenType == "F":
		Rate = getPenaltyRate(Currency=Currency,PenaltyRate=PenaltyRate)
		PenaltyAmount = float(Rate)

	elif PenType == "C":
		pass

	PenaltyAmount = mktmoney.toMoney(float(PenaltyAmount),mktmoney.getCurrencyObj(Currency))
	PenaltyAmount = float(str(PenaltyAmount).replace(',',''))

	return PenaltyAmount

def getEstimateInterest(**kwargs):
	SPID = kwargs.get("SPID")
	CollectionDate = kwargs.get("CollectionDate")

	EstimateInterest = 0
	ScheduleObj = MKT_SAVING_PLAN_SCHED.query.\
						filter(MKT_SAVING_PLAN_SCHED.SPID==SPID).\
						filter(MKT_SAVING_PLAN_SCHED.CollectionDate==CollectionDate).\
						first()
	if ScheduleObj:
		EstimateInterest = ScheduleObj.Interest	

	return EstimateInterest

def getPenaltyRate(**kwargs):
	Currency = kwargs.get("Currency")
	PenaltyRate = kwargs.get("PenaltyRate") #USD0.03 KHR0.03
	Rate = 0
	PenaltyRate = PenaltyRate.split()
	for item in PenaltyRate:
		if Currency in item:
			Rate = item[3:]
			break

	return float(Rate)

def setPDPenalty(**kwargs):
	'''
	For calculate penalty pd
	'''
	try:

		PDDateObj = kwargs.get("PDDateObj")	
		if PDDateObj:	
			if PDDateObj.OutPrincipalDue > 0:		
				Param 			= getSavingParam()
				AllowOverInt 	= Param.AllowOverInt
				ID 				= PDDateObj.ID
				PDObj 			= MKT_SAVING_PAST_DUE.query.get(ID)			
				PenaltyAmount 	= getSavingPenalty(PDDetailObj=PDDateObj)				
				if AllowOverInt == "N":
					EstimateInterest = getEstimateInterest(SPID=PDObj.SPID,CollectionDate=PDDateObj.DueDate)
					RemainAmount 	 = float(EstimateInterest) - float(PDDateObj.PenaltyDue)
					if RemainAmount < float(PenaltyAmount):
						PenaltyAmount = RemainAmount
					if RemainAmount < 0:
						PenaltyAmount = 0

				#update pd date table
				PDDateObj.OutPenaltyDue = float(PDDateObj.OutPenaltyDue) + float(PenaltyAmount)
				PDDateObj.PenaltyDue    = float(PDDateObj.PenaltyDue) + float(PenaltyAmount)
				PDDateObj.OutODAmount 	= float(PDDateObj.OutODAmount) + float(PenaltyAmount)
				PDDateObj.TotODAmount 	= float(PDDateObj.TotODAmount) + float(PenaltyAmount)
				db.session.add(PDDateObj)

				#update pd main table
				PDObj = MKT_SAVING_PAST_DUE.query.get(ID)
				PDObj.TotPenaltyDue = float(PDObj.TotPenaltyDue) + float(PenaltyAmount) 
				PDObj.TotODAmount = float(PDObj.TotODAmount) + float(PenaltyAmount)
				db.session.add(PDObj)

		else:
			print "There are no pd to update penalty"

	except Exception as e:
		db.session.rollback()
		raise
	else:
		pass
	finally:
		pass	

def setSavingPDCollection(**kwargs):
	'''
	For collect Saving PD
	'''
	try:
		BankDate 	= 	mktdate.getBankDate()
		NextRunDate = 	mktdate.getNextDay(BankDate,1)
		#Collect PastDue	
		PastDueObj 		=	db.session.query(MKT_SAVING_PD_DATE,
											 MKT_SAVING_PAST_DUE,
											 MKT_SAVING_PLAN
											 ).\
											join(MKT_SAVING_PAST_DUE,
												 MKT_SAVING_PAST_DUE.ID == MKT_SAVING_PD_DATE.ID
											).\
											join(MKT_SAVING_PLAN,
												 MKT_SAVING_PLAN.ID == MKT_SAVING_PAST_DUE.SPID).\
											filter(MKT_SAVING_PLAN.MaturityDate >= str(BankDate)).\
											filter(MKT_SAVING_PD_DATE.OutODAmount > 0).\
											filter(MKT_SAVING_PD_DATE.NextRunDate == str(BankDate)).\
											order_by(MKT_SAVING_PD_DATE.PDID.asc())
				
		print "Collect saving PD ..."		
		if PastDueObj.first():			
			Param 			= getSavingParam()
			CollectionOrder = ['PR','PE']
			PenaltyTran 	= Param.PenaltyTran
			PenOption 		= Param.PenOption

			if PenOption == "M":#manual
				if 'PE' in CollectionOrder:
					CollectionOrder.remove('PE')

			for row in PastDueObj:
				PDDateObj 	= 	row[0]
				PDObj 		=	row[1]
				SPObj 		=	row[2]

				SavingAccount 	=	SPObj.SavingAccount
				GeneralAccount	=	SPObj.GeneralAccount
				Branch 			=	SPObj.Branch
				Currency 		=	SPObj.Currency
				ID 				=	PDObj.ID
				PD_ID 			=	PDDateObj.PDID				
				SavingAccObj	= 	MKT_ACCOUNT.query.get(SavingAccount)
				GeneralAccObj	= 	MKT_ACCOUNT.query.get(GeneralAccount)				
				Balance 		=	GeneralAccObj.Balance

				TotODAmount 	=	PDObj.TotODAmount
				TotPrincipalDue =	PDObj.TotPrincipalDue
				TotPenaltyDue 	=	PDObj.TotPenaltyDue

				OutODAmount 	= 	PDDateObj.OutODAmount
				OutPrincipalDue = 	PDDateObj.OutPrincipalDue
				OutPenaltyDue	= 	PDDateObj.OutPenaltyDue
				
				for item in CollectionOrder:
					GeneralAccObj	= 	MKT_ACCOUNT.query.get(GeneralAccount)
					Balance 		=	GeneralAccObj.Balance
					DateTimeNow 	= 	mktdate.getDateTimeNow()
					CollectAmount 	= 	0
					TotFieldName 	= 	""
					OutFieldName 	= 	""
					ODAmount 		= 	0 #PD Principal or PDPenalty
					if float(Balance) <= 0: break					
					if item == "PR":
						ODAmount 		= 	PDDateObj.OutPrincipalDue
						Transaction 	= 	Param.SavingPDTran #Saving PD Collection
						Note 			= 	"Collect pd from saving plan."
						DrAccount 		= 	GeneralAccount
						DrCategory 		= 	GeneralAccObj.AccCategory
						CrAccount 		= 	SavingAccount
						CrCategory 		= 	SavingAccObj.AccCategory
						DrMode			=	"Indirect"
						CrMode			=	"Indirect"

						TotFieldName = "TotPrincipalDue"
						OutFieldName = "OutPrincipalDue"

						if not DrCategory or not CrCategory:
							# Call method for error message
							error_msg = "Account category not found."
							mktmessage.setLogError(error_msg)

					if item == "PE":
						ODAmount 		= 	PDDateObj.OutPenaltyDue
						Transaction 	= 	PenaltyTran
						Note 			=	"Collect penalty pd form saving plan."
						DrAccount 		= 	GeneralAccount
						DrCategory 		= 	GeneralAccObj.AccCategory
						CrAccount 		= 	""
						CrCategory 		= 	Param.PenaltyCat
						DrMode			=	"Indirect"
						CrMode			=	"Direct"

						TotFieldName = "TotPenaltyDue"	
						OutFieldName = "OutPenaltyDue"

						if not DrCategory:
							# Call method for error message
							error_msg = "Account category not found."
							mktmessage.setLogError(error_msg)	

						if not CrCategory:
							# Call method for error message
							error_msg = "Saving Penalty category not found."				

					#check balance in general account
					if Balance >= ODAmount:
						CollectAmount = ODAmount
					else:
						CollectAmount = Balance

					PostData = {"Branch"		: 	Branch,
								"Transaction"	:	Transaction,
								"TranDate" 		:	str(BankDate),
								"Module"		:	"SP",
								"Reference"		: 	SPObj.ID,
								"Amount"		:	Decimal(CollectAmount),
								"Currency"		:	Currency,
								"Note"			:	Note,
								"DrAccount"		:	DrAccount,
								"DrCategory"	:	DrCategory,
								"DrMode"		:	DrMode,
								"CrAccount"		:	CrAccount,
								"CrCategory"	:	CrCategory,					
								"CrMode"		:	CrMode}

					# print "Post accounting for pd amount %s " % CollectAmount
					setPostAccounting(**PostData)

					PastDueData = {}
					#update TotODAmount in saving PD
					TotODAmount   =	float(TotODAmount) - float(CollectAmount)
					exec("%s = float(%s) - float(%s)" % (TotFieldName,TotFieldName,"CollectAmount"))
					PastDueData.update({"TotODAmount": TotODAmount,
										"TotPrincipalDue": TotPrincipalDue,
										"TotPenaltyDue": TotPenaltyDue})
					mktdb.updateRecord(MKT_SAVING_PAST_DUE, [MKT_SAVING_PAST_DUE.ID == ID], PastDueData)				

					#update saving pd date record
					OutODAmount = float(OutODAmount) - float(CollectAmount)
					exec("%s = float(%s) - float(%s)" % (OutFieldName,OutFieldName,"CollectAmount"))
					PDData = {"OutPrincipalDue": OutPrincipalDue,
							  "OutPenaltyDue": OutPenaltyDue,
							  "OutODAmount": OutODAmount}
					#print "Update addon pastdue"
					mktdb.updateRecord(MKT_SAVING_PD_DATE, [MKT_SAVING_PD_DATE.ID == ID,
															MKT_SAVING_PD_DATE.PDID == PD_ID], PDData)

				
				#set number of day late
				PDDateObj = MKT_SAVING_PD_DATE.query.\
										filter(MKT_SAVING_PD_DATE.ID == ID,
											   MKT_SAVING_PD_DATE.PDID == PD_ID).first()
				setNumDayDue(PDDateObj=PDDateObj,SystemBankDate=BankDate)	

				#set penalty amount
				PDDateObj = MKT_SAVING_PD_DATE.query.\
										filter(MKT_SAVING_PD_DATE.ID == ID,
											   MKT_SAVING_PD_DATE.PDID == PD_ID).first()
				setPDPenalty(PDDateObj=PDDateObj)	

				#update next run date of pd record
				mktdb.updateRecord(MKT_SAVING_PD_DATE, [MKT_SAVING_PD_DATE.ID == ID,
															MKT_SAVING_PD_DATE.PDID == PD_ID], {"NextRunDate": NextRunDate})			

			db.session.commit()
				
		else:
			print "No saving PD to collect."

	except Exception as e:
		db.session.rollback()
		raise
	else:
		pass
	finally:
		pass		

def setSavingCollection(**kwargs):
	try:
		BankDate 	= 	mktdate.getBankDate()
		NextRunDate = 	mktdate.getNextDay(BankDate,1)

		print "Collect saving ..."
		SavingObj 		=	db.session.query(MKT_SAVING_PLAN,
											 MKT_SAVING_PLAN_SCHED
											 ).\
											join(
												MKT_SAVING_PLAN_SCHED, 
												MKT_SAVING_PLAN_SCHED.SPID == MKT_SAVING_PLAN.ID
											).\
											filter(MKT_SAVING_PLAN.MaturityDate >= str(BankDate)).\
											filter(MKT_SAVING_PLAN_SCHED.CollectionDate == str(BankDate)).\
											filter(MKT_SAVING_PLAN.NextRunDate == str(BankDate))

		SavingList = []
		if SavingObj.first():
			Param 			= getSavingParam()
			for row in SavingObj:
				SPObj 		= row[0]
				SCHEDObj 	= row[1]

				SavingList.append(SPObj.ID)
				SavingAccount 	=	SPObj.SavingAccount
				GeneralAccount	=	SPObj.GeneralAccount

				Branch 			=	SPObj.Branch
				Currency 		=	SPObj.Currency
				ID 				=	SPObj.ID

				GeneralAccObj	= 	MKT_ACCOUNT.query.get(GeneralAccount)
				SavingAccObj	= 	MKT_ACCOUNT.query.get(SavingAccount)
				Balance 		=	GeneralAccObj.Balance
				DateTimeNow 	= 	mktdate.getDateTimeNow()
				Branch 			=	SPObj.Branch

				CollectAmount 	= 	0
				PastDueAmount 	=	0

				#Calculate Collection Value, Collection mean amount (addon) that need to collect from customer. 
				#It calculate based on cofig
				Collection 		= 	Decimal(SCHEDObj.Amount)
				if Balance >= Collection:
					CollectAmount = Collection
				else:
					CollectAmount = Balance
					PastDueAmount = Collection - Balance

				Transaction = Param.SavingTran #Saving Collection
				#post accounting
				PostData = {"Branch"		: 	Branch,
							"Transaction"	:	Transaction,
							"TranDate" 		:	str(BankDate),
							"Module"		:	"SP",
							"Reference"		: 	SPObj.ID,
							"Amount"		:	Decimal(CollectAmount),
							"Currency"		:	Currency,
							"Note"			:	"Collect from saving plan",
							"DrAccount"		:	GeneralAccount,
							"DrCategory"	:	GeneralAccObj.AccCategory,
							"DrMode"		:	"Indirect",
							"CrAccount"		:	SavingAccount,
							"CrCategory"	:	SavingAccObj.AccCategory,
							"CrMode"		:	"Indirect"}

				# print "Post Accounting for amount %s " % CollectAmount
				setPostAccounting(**PostData)
				
				#Create saving pd and saving pd date
				if PastDueAmount > 0:
					#check if PD exist
					PDObj = MKT_SAVING_PAST_DUE.query.\
										filter(MKT_SAVING_PAST_DUE.SPID==ID).first()
					PenaltyAmount = 0
					if not PDObj:
						PastDueID = "%s%s" % ("PD",ID)
						PastDueData = {"ID" 			:	PastDueID,
									   "SPID"			:	SPObj.ID,
									   "Customer" 		: 	SPObj.CustomerID,
									   "Currency"		:	Currency,
									   "Category" 		: 	"",
									   "TotODAmount"	:	Decimal(PastDueAmount),
									   "TotPrincipalDue":	Decimal(PastDueAmount),
									   "TotPenaltyDue"  :	Decimal(PenaltyAmount),
									   "Inputter"		: 	"System",
									   "Createdon" 		: 	mktdate.getDateTimeNow(),
									   "Authorizer" 	: 	"System",
									   "Authorizeon"	:	mktdate.getDateTimeNow(),
									   "Status"			: 	"AUTH",
									   "Curr"			:	"0",
									   "Branch"			:	Branch,
									   }

						ObjInsert 	= MKT_SAVING_PAST_DUE(**PastDueData)
						db.session.add(ObjInsert)						

					else:#update saving PD
						#update TotODAmount in saving PD
						PastDue   =	Decimal(PDObj.TotODAmount) + Decimal(PastDueAmount) +  Decimal(PenaltyAmount)
						TotPrincipalDue = Decimal(PDObj.TotPrincipalDue) + Decimal(PastDueAmount)
						TotPenaltyDue = Decimal(PDObj.TotPenaltyDue) + Decimal(PenaltyAmount)
						PastDueData = {"TotODAmount": PastDue,"TotPrincipalDue": TotPrincipalDue,"TotPenaltyDue": TotPenaltyDue}
						mktdb.updateRecord(MKT_SAVING_PAST_DUE, [MKT_SAVING_PAST_DUE.ID == PDObj.ID], PastDueData)

					#create pd date
					PDObj = MKT_SAVING_PAST_DUE.query.filter(MKT_SAVING_PAST_DUE.SPID==ID).first()
					PastDueID = "%s%s" % (PDObj.ID,SCHEDObj.No)
					PastDueData = {"ID" 			:	PDObj.ID,
								   "PDID"			:	PastDueID,
								   "DueDate" 		: 	SCHEDObj.CollectionDate,
								   "NumDayDue"		:	1,
								   "ODStatus" 		: 	"",
								   "TotODAmount"	:	Decimal(PastDueAmount) + Decimal(PenaltyAmount),
								   "OutODAmount"	:	Decimal(PastDueAmount) + Decimal(PenaltyAmount),
								   "PrincipalDue"	:	Decimal(PastDueAmount),
								   "OutPrincipalDue":	Decimal(PastDueAmount),
								   "PenaltyDue"		:	Decimal(PenaltyAmount),
								   "OutPenaltyDue" 	:	Decimal(PenaltyAmount),
								   "NextRunDate"	:	str(NextRunDate),
								   "Inputter"		: 	"System",
								   "Createdon" 		: 	mktdate.getDateTimeNow(),
								   "Authorizer" 	: 	"System",
								   "Authorizeon"	:	mktdate.getDateTimeNow(),
								   "Status"			: 	"AUTH",
								   "Curr"			:	"0",
								   "Branch"			:	Branch,
								   }

					ObjInsert 	= MKT_SAVING_PD_DATE(**PastDueData)
					db.session.add(ObjInsert)

				#update NextRunDate
				SchData = {"NextRunDate" : str(NextRunDate)}
				mktdb.updateRecord(MKT_SAVING_PLAN, [MKT_SAVING_PLAN.ID == SPObj.ID], SchData)
			
		else:
			print "There no saving to collect."			
		#update NextRunDate
		#print "Update Next Run date %s " % str(NextRunDate)
		SchData = {"NextRunDate" : str(NextRunDate)}
		mktdb.updateRecord(MKT_SAVING_PLAN, [MKT_SAVING_PLAN.ID not in SavingList], SchData)
		db.session.commit()

	except Exception as e:
		db.session.rollback()
		raise
	else:
		pass
	finally:
		pass		
