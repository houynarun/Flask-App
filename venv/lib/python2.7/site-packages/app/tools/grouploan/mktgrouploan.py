from app.mktcore.wtfimports import *
from app.mktcore.imports 			import *
from ... import app
import app.tools.mktmoney as mktmoney
from  app.mktcore.globalfunction  import ConvertForm
from app.mktcore.autoid import dellockrecord, dellockrecordbyuser

import os
	
def renderCustomJsonFormat(data_custom='', **kwargs):
	Message 	= {"message":[""]}
	Status  	= ""
	FormID  	= ""
	Header 		= request.endpoint
	Operation 	= kwargs.get("operation",'')
	FormType 	= 'MainForm'

	if Operation:
		FormType = 'Form'

	#It work when Posting data only
	if kwargs.get("RedirectUrl"):
		#get_flashed_messages() use for get all flash message ex: flash("This is flash message","success")
		Status = StatusCodes.ok()
		if get_flashed_messages(category_filter=["error"]):
			Status = StatusCodes.bad_request()
		Message 	= {"message":list(set(get_flashed_messages()))}
		RedirectUrl = kwargs.get("RedirectUrl").replace("/Morakot/",'')
		if "API" in kwargs.get("RedirectUrl"):
			RedirectUrl = kwargs.get("RedirectUrl").replace("/Morakot/API/",'')
		Name = RedirectUrl.split("/")[0]
		TypeUrl = kwargs.get('type_url','MainForm')
		return jsonify(redirect="/"+RedirectUrl,message=Message,name=Name,header=Header,type_url=TypeUrl,status=Status,token=getToken()),Status

	#Get status from form (Status use for check and create toolbar)
	if kwargs.get("form"):
		Status = kwargs.get("form").Status.data
		FormID = kwargs.get('g_id' , "")

	StatusCode 		= StatusCodes.ok() #Default status code is 200(Success)
	ButtonAction 	= []
	TabBar 			= []
	URL 			= kwargs.get("action","")
	
	#Create defualt more actions bar
	ListTabBar = ['ListAuth','ListLive','ListHist'] 
	if Operation not in ListTabBar:
		TabBar=tb.tabBar(url=URL)

	FormReadOnly = False
	hidEdit = kwargs.get("hidEdit")

	if kwargs.get("form"):
		FormReadOnly = kwargs.get("form").formReadOnly()
	
	if kwargs.get("li_html"):
		ButtonAction = tb.actionButton(listObj=zip(*kwargs.get("li_html"))[0],url = URL)
	#When form is form readonly
	if ((Operation=="Search") and FormReadOnly == "AUTH" and Status == 'AUTH') or '@' in FormID:
		ButtonAction[:] = [d for d in ButtonAction if d.get('text') != "Edit"]
	
	if hidEdit == False and FormReadOnly != 'AUTH':
		ButtonAction.append({"text":"Edit",
					"url":URL.replace("/Morakot",'')+"Edit",
					"icon":"edit",
					'method':'get',
					'type_url':'Form',
					'color':'#2EA3F2'})		

	if Status == "AUTH":
		if Operation != 'Edit' and Header == "GenerateDisbursement":
			Reverse = 	{"text":"Reverse Record",
						"url":URL.replace("/Morakot",'')+"Reverse",
						"icon":"undo",
						'method':'get',
						'type_url':'Form',
						'color':'#F0AD4E'
						}
			ButtonAction.append(Reverse)
		ButtonAction[:] = [d for d in ButtonAction if d.get('text') != "Authorize" and d.get('text') !="Delete"]
	
	#When form read only is true
	if (Status and FormReadOnly == True) or ('@' in FormID) :
		ButtonAction = []

	if Operation == '':    			
		ButtonAction[:] = [d for d in ButtonAction if d.get('text') != "Edit"]

	ButtonFab 	=	{}		
	if len(ButtonAction) > 1:
		ButtonFab 		=  {
						"icon": "more-vert",
						"color": "#FFFFFF",
						"button": ButtonAction
						}
		ButtonAction 	= {}
	else:
		if len(ButtonAction) == 1 and (not '@' in FormID):
			ButtonAction[0].update({'color':'#FFFFFF'})
			ButtonAction = ButtonAction[0]
		else:
			ButtonAction = {}
	ToolBar = {
		"button_action":ButtonAction,
		"tab_bar":TabBar,
		"search":{
			"text":"Record ID",
			"url":URL.replace("/Morakot",'')+"Search",
			"icon":"search",
			'method':'get',
			'type_url':'Form',
			'color':''},
		'cancel':{
				"text": "Cancel",
				"url":URL.replace("/Morakot",'')+"Cancel",
				"icon":"undo",
				'method':'get',
				'color':'',
				'type_url':'Form'
				},
		'button_fab':ButtonFab
			}

	#get flask form validation
	if kwargs.get('form' , "") != "":
		if kwargs.get('form',None).errors:
			Message 	= kwargs.get('form',None).errors
			StatusCode 	= StatusCodes.not_acceptable()
			return jsonify({"message":Message , "static_method_type":"","data":{},'token':getToken(),"tool_bar":ToolBar,"header":Header, 'status' : StatusCode}),StatusCode

	#When method GET and has flash message
	if get_flashed_messages():
		Message 	= {"message":list(set(get_flashed_messages(category_filter=["error"])))} 
		#filter from flash message that error message
		if get_flashed_messages(category_filter=["error"]):
			if kwargs.get("StaticMethodType",""):
				Message.update({
					"static_method_type":kwargs.get("StaticMethodType","")
					})

			StatusCode = StatusCodes.not_acceptable()
		else:
			#filter from flash message that success message
			Message = { 
			"message":list(set(get_flashed_messages())),
			"static_method_type":""
			}

	#Get all properties of form as dictionary
	Data =	ConvertForm.getFormAttr(FormObject=kwargs.get("form"),Operation=kwargs.get("operation") , FormType = FormType , Header=kwargs.get('header' , '') , CustomButton = kwargs.get('custom_button',{}))
	
	#When if querys: it must be operation ListLive ListINAU or ListHist 
	if kwargs.get("querys"):
		Result,Status = Pagination.list(**kwargs)
		Result.update({"header":Header,'type':'List','token':getToken()})
		return jsonify(Result),Status

	if kwargs.get('customToolbar'):
		ToolBar = kwargs.get('customToolbar')
		if ToolBar[0] == 'BlankList':
			ToolBar = []

	if data_custom:
		if data_custom.get('ListError'):
			StatusCode = StatusCodes.not_acceptable()
			for row in	data_custom.get('ListError'):
				Message.update({ row[0]:[row[1]]})
	
	for idx, tab in enumerate(Data['tab']):
		Data['tab'][idx]["content_custom"] = {}

	# Insert custom list to tab.
	CustomConfigs	= kwargs.get('custom_config',{})
	Sections 		= CustomConfigs.get('Sections',{})
	DisabledField	= CustomConfigs.get('DisabledField',{})
	MoneyField		= CustomConfigs.get('MoneyField',{})
	GParams 		= CustomConfigs.get('GParams',[])
	GUrl			= CustomConfigs.get('GUrl','')

	for Param in GParams:
		GUrl += '%s=%s&' % (Param,Param)
	if Header in ('LoanCollection','GenerateDisbursement'):
		Data['button'].update({
			'button_tab': {
				'index': 0,
				'redirect_index': 1,
				'color': '#1b80c2',
				'icon': 'th',
				'method': 'get',
				'param': GParams,
				'title': "Generate",
				'type_url': 'Form',
				'url': GUrl
			}
		})
	Data['tab'].insert(0,getCustomTab(name=Header, content_custom={
		'custom_action': {
			'color':'', 'icon':'plus', 'method':'get', 'param':[], 
			'title': 'Add Loan Contract',  'type_url': '',  'url': '', 
			'modal': getCustomTab(name='Add Loan Contract', content=getAddLoanContractContent(Header))
		},
		'result': getCustomResult(kwargs.get('ResultObj'),DisabledField=DisabledField, Sections=Sections, MoneyField=MoneyField)
	}))
	Disabled = kwargs.get('disabled') == 'disabled'
	Data['properties'] = getCustomProperties(Data['properties'], Header, Disabled)

	return jsonify( status = StatusCode,token = getToken(), message = Message, data = Data,header=Header,record_id=kwargs.get('g_id' , "") , 
					tool_bar = ToolBar,type=FormType,body=kwargs.get('body',[]), total_record=kwargs.get("total_record",0),total_page=kwargs.get("total_page",0),
					current_page=kwargs.get("current_page",0)),StatusCode

def getAddLoanContractContent(Header):
	Content = []
	if Header == "GenerateDisbursement":
		Content = [
			getColumnDict(name="LoanID", label="Loan ID/Customer", type="RemoteSelectFields", 
				remote_url_for="/Morakot/DisbursementSheet/Search?Currency=Currency&q=",
				hot_field=[getHotField(action='/Morakot/DisbursementSheet/AddLoanContract?LoanID=LoanID',
					param=['LoanID'], set_value_to=[{'Customer':'Customer', 'type': 'Data'}, {'Currency':'Currency', 'type': 'Data'},
						{'ValueDate':'ValueDate', 'type': 'Data'}, {'Account':'Account', 'type': 'Data'},
						{'Amount':'Amount', 'type': 'Data'}, {'COMAmount':'COMAmount', 'type': 'Data'},
						{'Balance':'Balance', 'type': 'Data'}])]),
			getColumnDict(name="Customer", label="Customer", set_visible=True),
			getColumnDict(name="Currency", label="Currency", set_visible=True),
			getColumnDict(name="ValueDate", label="ValueDate"),
			getColumnDict(name="Account", label="Account"),
			getColumnDict(name="Amount", label="Amount", disabled=True),
			getColumnDict(name="COMAmount", label="Compulsory Saving", disabled=True),
			getColumnDict(name="Balance", label="Available Balance")]
	elif Header == "LoanCollection":
		Content = [getColumnDict(name="Officer", label="Add Officer", type="RemoteSelectFields", 
				remote_url_for="/Morakot/LoanCollection/Search?Currency=Currency&q=",
				hot_field=[getHotField(action='/Morakot/LoanCollection/AddLoanContract?LoanID=LoanID',
					param=['Officer'], set_value_to=[{'Customer':'Customer', 'type': 'Data'}, {'Currency':'Currency', 'type': 'Data'},
						{'ValueDate':'ValueDate', 'type': 'Data'}, {'Account':'Account', 'type': 'Data'},
						{'Amount':'Amount', 'type': 'Data'}, {'COMAmount':'COMAmount', 'type': 'Data'},
						{'Balance':'Balance', 'type': 'Data'}])])]

	return Content

def getCustomProperties(Props, Header, Disabled):
	Properties	= []
	VBID		= "ContractVB" if Header=="LoanCollection" else "VBID"
	Group		= "VBGroup" if Header=="LoanCollection" else "Group"
	for Index, Property in enumerate(Props):
		if(Property['name']=='ValueDate'):
			ValueDate = Property.get('default').split(" ")
			Properties.append(getColumnDict(name="CollectionDateStart" if Header=="LoanCollection" else "ValueDateStart", label="Start Date", type="DateField", set_width=3, disabled=Disabled, default=ValueDate[0] if len(ValueDate) == 2 else ""))
			Properties.append(getColumnDict(name="CollectionDateEnd" if Header=="LoanCollection" else "ValueDateEnd", label="End Date", type="DateField", set_width=3, disabled=Disabled, default=ValueDate[1] if len(ValueDate) == 2 else ""))
		# elif(Property['name']==VBID):
		# 	Properties.append(getColumnDict(name=VBID, label="Village Bank/Centre", type="RemoteSelectFields", set_width=4, disabled=Disabled, remote_url_for="/FilterVB/?Officer=Officer&q=", remote_url_param=["Officer"], default=Property['default']))
		# elif(Property['name']==Group):
		# 	Properties.append(getColumnDict(name=Group, label="Group", type="RemoteSelectFields", set_width=4, disabled=Disabled, remote_url_for="/FilterGroup/?%s=%s&q=" % (VBID,VBID), remote_url_param=[VBID], default=Property['default']))
		else:
			Properties.append(Property)

	return Properties

def getCustomResult(ResultObj=[], **kwargs):
	Sections 		= kwargs.get('Sections',[])
	DisabledField	= kwargs.get('DisabledField',{})
	MoneyField		= kwargs.get('MoneyField', {})
	Results			= []
	if ResultObj:
		for Index, Result in enumerate(ResultObj):
			Results.append({
				'id': Result.get('ID',Result.get('LoanID','')),
				'checked': False,
				'sections': Sections,
				'columns': [getColumnDict(name=Key, label=Key, default=str(Result.get(Key,'')),disabled=DisabledField.get(Key,True), money_field=MoneyField.get(Key,{})) for Key in Result if Key != "ChargeDict"]
			})	
	return Results

def getColumnDict(**kwargs):
	return {
			'name': kwargs.get('name', ''),
			'choices':  kwargs.get('choices', []),
			'type':  kwargs.get('type', 'TextField'),
			'label':kwargs.get('label',  ''),
			'required': kwargs.get('required',''),
			'remote_url_for': kwargs.get('remote_url_for', ''),
			'remote_url_param': kwargs.get('remote_url_param', []),
			'default': kwargs.get('default', ''),
			'file': kwargs.get('file', {}),
			'set_visible':  kwargs.get('set_visible', False),
			'set_width': kwargs.get('set_width', ''),
			'disabled': kwargs.get('disabled', True),
			'hot_field': kwargs.get('hot_field', []),
			'hot_select_field': kwargs.get('hot_select_field', []),
			'money_field': kwargs.get('money_field', {}),
			'link': kwargs.get('link', { 'url':'', 'type_url':''})
			}

def getCustomTab(**kwargs):
	return {
		'content': kwargs.get('content',[]),
		'content_custom': kwargs.get('content_custom',{}) ,
		'button_tab': kwargs.get('button_tab',{}),
		'iframe_props':kwargs.get('iframe_props',{}),
		'index': kwargs.get('index','1'),
		'is_iframe': kwargs.get('is_iframe',False),
		'multi_value': kwargs.get('multi_value',False),
		'name': kwargs.get('name','')
	}

def getMoneyField(Currency, Money):
	return {
		"param": [Currency, Money],
		"action":"/toMktmoney?Currency=%s&Money=%s"%(Currency, Money),
		"set_value_to":["TotalDisbursement"]
	}

def getHotField(**kwargs):
	return {
			'action': kwargs.get('action',''),
			'disabled': kwargs.get('disabled',[]),
			'event': kwargs.get('event','change'),
			'focus': kwargs.get('focus',''),
			'param': kwargs.get('param',[]),
			'set_value_to': kwargs.get('set_value_to', [])
		}
