import sys
from app.mktcore.wtfimports 	import *
from app.Setting.models 		import MKT_SETTING, MKT_TERM_DEPOSIT_SETTING
from app.Dates.models 			import MKT_DATES
from sqlalchemy 				import or_
from .. 						import app, db

from app.AccSetting.models 		import MKT_ACCOUNTING_SETTING
from app.Category.models 		import MKT_CATEGORY
from app.GL.models 				import MKT_GL_MAPPING
from app.Setting.models 		import MKT_APP_SETTING,MKT_NOTIFICATION_SETTING
import os
import jinja2
import mktdate 		as mktdate
from sqlalchemy 	import create_engine,inspect
import importlib

VB_PATH = app.config.get("CURRENT_PATH")

class Struct(object):

	def __init__(self, **entries):
		self.__dict__.update(entries)

def getSetting():
	try:
		Setting = MKT_SETTING.query.get("SYSTEM")
		return Setting
	except Exception, e:	
		return []

def getListOfTable():
	engine 		= create_engine(app.config['SQLALCHEMY_DATABASE_URI'])
	inspector 	= inspect(engine)
	ListTable 	= []

	for table_name in inspector.get_table_names():
		ListTable.append(str(table_name))
	engine.session.close()
	return ListTable

def getTASetting():

	ListTable = getListOfTable()

	Setting = ""
	if 'MKT_TERM_DEPOSIT_SETTING' in ListTable:
		Setting = MKT_TERM_DEPOSIT_SETTING.query.get("SYSTEM")

	return Setting

def getBankDate():
	try:

		BankDate = MKT_DATES.query.get("SYSTEM")
		if BankDate:
			CurrentDate = BankDate.SystemDate
		else:
			BankDate = {'SystemDate':str(mktdate.getDateISO())}
			CurrentDate = Struct(**BankDate)
		
		return CurrentDate

	except:
		db.session.rollback()
		raise

def setFirstRecordDate():
	try:

		BankDate = MKT_DATES(
					ID 				=	'SYSTEM'
				)
		return BankDate
		
	except:
		raise

def setFirstRecordAccSetting():
	try:

		DateTime = mktdate.getDateTimeNow()

		BankDate = MKT_ACCOUNTING_SETTING(
					Status			= 	'AUTH',
					Curr 			= 	'0',
					Inputter 		= 	'System',
					Createdon 		= 	DateTime,
					Authorizer 		= 	'System',
					Authorizeon 	= 	DateTime,
					ID 				=	'SYSTEM'
				)
		return BankDate
		
	except:
		raise

def getBankDateObj():
	try:

		BankDate = MKT_DATES.query.get("SYSTEM")
		if not BankDate:
			BankDate = setFirstRecordDate()
			db.session.add(BankDate)
			db.session.commit()
		
		return BankDate

	except:
		raise

def getAccSetting():
	try:

		Setting = ""
		ListTable = getListOfTable()

		if 'MKT_ACCOUNTING_SETTING' in ListTable:

			Setting = MKT_ACCOUNTING_SETTING.query.get("SYSTEM")
			
		return Setting

	except:
		pass

def getExcludedCategories():
	try:

		Setting 		=	getSetting()
		ExcludedCat 	=	Setting.JOURNAL_ENTRY_EXCLUDED
		ExcludedCat 	=	ExcludedCat.split()

		Results 		=	[]

		if len(ExcludedCat) > 0:

			for item in ExcludedCat:
				
				Results.append(item)

		CheckGL 		=	db.session.query(
								MKT_GL_MAPPING.ID
							).\
							join(
								MKT_CATEGORY,
								MKT_CATEGORY.ID == MKT_GL_MAPPING.ID
							).\
							filter(
								MKT_GL_MAPPING.SubGL != ''
							).\
							all()

		if CheckGL:

			for item in CheckGL:

				Results.append(item.ID)

		return Results

	except:
		raise

def getAppSetting(App, Condition=""):
	try:
		ListTable 	= getListOfTable()
		Value 		= 	""
		if 'MKT_APP_SETTING' in ListTable:
			if Condition == "ALL":
				return MKT_APP_SETTING.query

			else:
				AppSettingObj 	=	MKT_APP_SETTING.query.get(App)
				if AppSettingObj:
					Value = AppSettingObj.Value
		return Value

	except Exception, e:
		return ''

def formatSetting(**kwargs):
	Setting = kwargs['Setting'] if 'Setting' in kwargs else ''
	ListSetting = Setting.splitlines()
	DictSetting = {}
	for row in ListSetting:
		KeyObj = row.split('*')
		if KeyObj and len(KeyObj) == 2:
			DictSetting.update({KeyObj[0]:KeyObj[1]})
	return DictSetting

def insertAppSetting(**kwargs):
	AuditTrial = {  'Status'		: 	"AUTH",
					'Curr' 			: 	"0",
					'Inputter' 		:	"System",
					'Createdon' 	: 	mktdate.getDateTimeNow(),
					'Authorizer'	:   "System",
					'Authorizeon'	: 	mktdate.getDateTimeNow(),
					'Branch'		:	'HO'}
					
	kwargs.update(AuditTrial)
	InsertObj = MKT_APP_SETTING(**kwargs)
	db.session.add(ObjInsert)
	return InsertObj


def getSystemTimeOut():
	try:
		SettingObj = getSetting()
		if SettingObj:
			TimeOut = int(SettingObj.TIME_OUT)
		else:
			TimeOut = int(15)
	except Exception, e:
		TimeOut = int(15)

	return TimeOut

def isInitFileExist(**kwargs):
	""" You can check ```__init__.py``` in folder or absolute path of file
		
		Example 1: Check in direcotry
		>>>isInitFileExist(Directory='/var/wwww/vb/localdev')
		>>>If the directory has file __init__.py, it will be return True
		
		Example 2: It will be check in absolute path of file
		>>>isInitFileExist(Directory='/var/wwww/vb/localdev/urlregister.py')
	"""
	Directory = kwargs.get('Directory','')
	if Directory.find('.') != -1: #: Find dot (".") Mean that Directory check is file
		"""
			>>> Directory = '/vb/local/a.py'
			>>> Directory.split('/')[:-1]
			['', 'vb', 'local']
			>>> '/'.join(Directory.split('/')[:-1])
			'/vb/local'
			>>> '/'.join(Directory.split('/')[:-1]) +'/__init__.py'
			'/vb/local/__init__.py'
			>>>
		"""
		InitDir = '/'.join(Directory.split('/')[:-1])
		InitDir = InitDir +'/__init__.py'
	else:
		InitDir = Directory+'/__init__.py'
	if os.path.exists(InitDir):
		return True
	return False

def isImportFileExist(**kwargs):
	""" Check  import file is exsits and __init__.py is exsits
		Warning: Donot provide full path
		>>>isImportFileExist(ImportFile='localdev.tools.mktextend')
		>>>isImportFileExist(ImportFile='app.tools.mktsetting')
	"""
	PhysicalPath = VB_PATH + kwargs.get('ImportFile').replace('.','/') + '.py'
	# Check file in path is existing
	if os.path.exists(PhysicalPath):
		return isInitFileExist(Directory=PhysicalPath)
	return False

def importClassRunTime(**kwargs):
	""" Import class from python file
		Example 1: I want to import file from ```localdev.tools.mktextend``` with class ```ExtendModuleEx```
		>>>importClassRunTime(ImportFile='localdev.tools.mktextend', ClassName='ExtendModuleEx')
	"""
	ImportFile = kwargs.get('ImportFile')
	ClassName  = kwargs.get('ClassName')
	
	if isImportFileExist(FileName=ImportFile,**kwargs):
		ImportModule  = __import__(ImportFile, fromlist=[ClassName])
		if hasattr(ImportModule,ClassName):
			return getattr(ImportModule, ClassName)
	return None

class ExtendModule(object):
	"""docstring for ExtendModule"""
	
	LOCAL_DEVELOP_NAME 	= 'localdev'
	LOCAL_DEVELOP_DIR  	= VB_PATH + LOCAL_DEVELOP_NAME 
	FILE_ROOT 			= 'urlregister'
	FILE_ROOT_EXTENSION = FILE_ROOT+'.py'

	def getDashboardUnauth(self):
		"""  Usage for configuration dashboard unauthroize.
		Syntax  : {'TITLE' : ['NEW_URL', 'MODULE_INAU', CONDITION]}
		Example :
			DashboardConf 	= {
			 'Collateral Detail':      ['CollateralDetailEx',        'MKT_COLLATERAL_DE_INAU' ],
			 'Customer':               ['CustomerEx',                'MKT_CUSTOMER_INAU' ],
			}
		"""
		return {}
	# @classmethod
	def setListUrlExtend(self):
		"""  Usage for set list of url that extend from mktcore.
		Syntax  : { "OLD_URL" : ['NEW_URL','TITLE']} 
		Example :
			{'Customer':['CustomerEx','Customer']}

		"""
		return {}

	def getLocalDirecotry(self,**kwargs):

		Direcotry  = getAppSetting('LOCAL_REGISTER_PATH').split('.')
		try:
			return VB_PATH + 'local/'+ Direcotry[1]
		except Exception:
			return ''

	def setConfigNotification(self):
		""" Usage for configuration notification if new module doesn't add to configuration, system will not notify to user 

		# Path : Title
		Syntax : ConfigNotification = {
					'Branch'				:'Branch',
					'Customer'				:'Customer'			}
		"""
		return {}

	def setFuncTempBuilder(self, **kwargs):
		"""
			* This function must be overrided.
			set Customer functions for template builder
		"""

		return {}

	def getUrlExtend(self, **kwargs):
		""" Translator Url from extend module

		"""
		DictModule = self.setListUrlExtend()
		Module   = kwargs['Module'] if 'Module' in kwargs else ''
		if Module:
			ExtendModule = DictModule.get(Module)
			if ExtendModule:
				return ExtendModule[0]

		"""
		Translate Url from extend module with Dict of paramator
			DictUrl: {"LC": "LoanContract","FA": "FundAdvance"}
		"""
		DictUrl   = kwargs['DictUrl'] if 'DictUrl' in kwargs else ''

		if DictUrl:
			# print "DictUrl ", DictUrl
			for key, value in DictUrl.iteritems():
				# print "Key ", key
				# print "Value ", value
				ExtendModule = DictModule.get(value)
				if ExtendModule:
					DictUrl.update({"%s" % key: ExtendModule[0]})

			return DictUrl

		return Module

	def getNotificationExtend(self,**kwargs):
		"""
			ConfigNotification = {
			'Branch':'Branch',
		"""
		DictModule = self.setListUrlExtend()

		NotifyConf = kwargs['NotifyConf'] if 'NotifyConf' in kwargs else ''
		ExtendConfigNotify = self.setConfigNotification()
		if ExtendConfigNotify:
			NotifyConf.update(ExtendConfigNotify)
		if NotifyConf:
			DictNotify = {}
			for key,value in DictModule.iteritems():
				if key in NotifyConf:
					NotifyConf.pop(key,None)
				NotifyConf.update({str(value[0]):str(value[1])})
		return NotifyConf

	def getLocalDirectory(self,**kwargs):

		Direcotry  = getAppSetting('LOCAL_REGISTER_PATH').split('.')
		try:
			return VB_PATH + 'local/'+ Direcotry[1]
		except Exception:
			return ''

	def getLocalPath(self, **kwargs):
		""" Get local path from local project """
		return getAppSetting('LOCAL_REGISTER_PATH')

	def loadBatchJob(self, **kwargs):
		""" load batch job file from local customization and local development"""
		try:
			BatchJobName 	= kwargs.get('BatchJob')
			
			if BatchJobName:
				ImportFile 	= ''
				LocalPath 	= self.getLocalPath()
				FileName 	='BatchJob/%s.py' % BatchJobName

				# load batch job file from local customization
				if LocalPath and self.isFileInLocal(FileName=FileName, CheckInit=True):
					ImportFile = "%s.BatchJob.%s" % (LocalPath, BatchJobName)
				# else:
				# 	print 'File local batch job not found %s'%FileName

				#: load batch job file from localdev 
				if self.isFileInLocal(FileName=FileName, LocalDev=True, CheckInit=True):
					ImportFile = "%s.BatchJob.%s" % (self.LOCAL_DEVELOP_NAME, BatchJobName)
				# else:
				# 	print 'File localdev batch job not found %s'%FileName

				if ImportFile:
					exec("from %s import *"% ImportFile)
					sys.modules.pop(ImportFile) #Remove from memory

		except Exception as e:
			raise

	def loadCustomTemp(self,**kwargs):
		"""
			load template html from local project
		"""
		try:
			LocalDirecotry = self.LOCAL_DEVELOP_DIR if kwargs.get('LocalDev') else self.getLocalDirectory()
			if LocalDirecotry:
				TemplatePath = '%s/templates'% LocalDirecotry
				if self.isExistDirectory(TemplatePath):
				
					TemplateLoader = jinja2.ChoiceLoader([
							app.jinja_loader,jinja2.FileSystemLoader([TemplatePath])])

					app.jinja_loader = TemplateLoader #Add template loader

		except Exception, e:
			raise
			# print 'Warning, Class ExtendModule: %s'%e 

	def setupEnvironment(self, **kwargs):
		""" Run compile local dev 
			1. Create folder root of local dev ```vb/localdev``` and ```vb/localdev/tools```
			2. Create ```__init__.py```
			3. Create urlregister.py
			+ How to use:
			>>>setupEnvironment()
		"""
		print 'Checking configuration...'
		if kwargs.get('LocalDev'):
			if not self.isLocalDevEnable():
				print 'Local development was not enabled...'
				print 'Faild to setup..'
				return ''
		else:
			if not self.getLocalDirectory():
				print 'Local customization was not enabled...'
				print 'Faild to setup..'
				return ''

		RootDir = self.LOCAL_DEVELOP_DIR if kwargs.get('LocalDev') else self.getLocalDirectory()
		print 'Create directory and file: %s'%RootDir
		
		# Create root folder of local development
		self.setCreateFile(RootDir+'/urlregister.py')
		self.setCreateFile(RootDir+'/__init__.py')
		# Create folder ```tools```
		self.setCreateFile(RootDir+'/tools/__init__.py')
		self.setCreateFile(RootDir+'/tools/mktextend.py')
		self.setCreateFile(RootDir+'/tools/mktreport.py')
		# Create Batch Job
		self.setCreateFile(RootDir+'/BatchJob/__init__.py')
		print 'Setup enviroment was successfully...'

	def setCreateDirectory(self, Directory):
		try:
			if not self.isExistDirectory(Directory):
				os.makedirs(Directory)
				# print "Directory was created."
			return True
		except Exception, e:
			print '%s'%e
			return False

	def setCreateFile(self, PathFile):
		Directory = '/'.join(PathFile.split('/')[:-1])
		# Check for create directory
		if not self.isExistDirectory(Directory):
			self.setCreateDirectory(Directory)

		# Check for file is exist
		if not self.isExistDirectory(PathFile):
			ObjFile = open(PathFile, 'w+')
			ObjFile.close()

	def isExistDirectory(self, Directory):
		if os.path.exists(Directory):
			return True
		return False

	def isFileInLocal(self, **kwargs):
		""" Check file in local project is exsit in directory it's will return true

			Args:
				kwargs (dict):
						- FileName : It's the name of file that you want to check 
						- LocalDev : Ture mean that you want check in direcotry localdev
						- Directory : Mean that you can change direcotry to check it.
			Return:
				- If already exsit will return True else False

		Example 1: Check file urlregister.py in local (vb/local)
			>>>isFileInLocal(FileName='urlregister.py') #: It will be return True if already exsiting

		Example 2: You want to check urlregister.py in local dev (vb/localdev)
			>>>isFileInLocal(FileName='urlregister.py',LocalDev=True)

		Example 3: You want check in direcotry ```vb/local/FirstFinance/tools/mktreport.py```
			>>>isFileInLocal(FileName='tools/mktreport.py')

		Example 4: You want check in direcotry ```vb/localdev/tools/mktreport.py```
			>>>isFileInLocal(FileName='tools/mktreport.py',LocalDev=True)
		"""
		try:
			FileName 	= kwargs.get('FileName')
			Directory 	= kwargs.get('Directory')
			CheckInit 	= kwargs.get('CheckInit')
			if not Directory:

				#:Check parameter if localdev provide, it will be check in directory localdev
				#:self.LOCAL_DEVELOP_DIR = '/var/www/vb/localdev'
				#:self.getLocalDirectory = '/var/www/vb/local/FirstFinance'
				Directory =  self.LOCAL_DEVELOP_DIR if kwargs.get('LocalDev') else self.getLocalDirectory()

			if FileName:
				Directory 	= '%s/%s'%(Directory,FileName)
				
				if self.isExistDirectory(Directory):# Check Exist directory
					if CheckInit:
						return isInitFileExist(Directory=Directory)
					return True # Found file
			return False

		except Exception, e:
			raise
		else:
			pass
		finally:
			pass

	def isLocalDevEnable(self):
		""" Check localdev is using by client
			the result will be return
				>>> ExtendModuleObj.isLocalDevEnable()
				>>> True  #Mean that user using local developement
				>>> False #Mean not using
		"""
		if getAppSetting('LOCAL_DEVELOP') == 'Y':
			return True
		return False

	def setRunTimeImport(self, **kwargs):
		""" Run time import file python
		1. Check file import if exsits to import
		2. Check ```__init__.py``` file 
		3. Import file
		
		Example 1: I want import file from vb/local/FirstFinance/urlregister.py
			>>> setRunTimeImport(Path='local.FirstFinance', Import='urlregister')

		Example 2: I want import multi file the same directory from 
					vb/local/FirstFinance/urlregister.py
					vb/local/FirstFinance/run.py
			>>> setRunTimeImport(Path='local.FirstFinance', ListImport=['urlregister','run'])
		"""
		try:
			Path 		=	kwargs.get('Path',self.getLocalPath())
			Import 		=	kwargs.get('Import') 
			ListImport	=	kwargs.get('ListImport',[Import]) 
			if kwargs.get('LocalDev'):
				Path = self.LOCAL_DEVELOP_DIR
			if Path:
				for row in ListImport:

					#: Covert import file stype python to physical path
					ImportFile = "%s.%s" % (Path, row)
					PhysicalPath = VB_PATH + ImportFile.replace('.','/') + '.py'
					# print 'Physical Path',PhysicalPath

					# Check file in path is existing
					if self.isExistDirectory(PhysicalPath):
						#: Import file
						globals().update(importlib.import_module(ImportFile).__dict__)
					# else:
					# 	print 'file not found for import.'
		except Exception as e:
			raise
	
	def importLocalRoot(self, **kwargs):
		""" Import local customization
			1. Import urlregister from local project
			2. load tempalte from local project
			3. Import urlregister from local dev
			4. load tempalte from local dev
		>>> 
		"""
		try:
			LocalPath 		= self.getLocalPath() #: Call Path of Local Customization

			# Check Path Of Local Customization was configuration and File urlregister was created.
			if LocalPath:
				#: Import file urlregister from local customization
				self.setRunTimeImport(Path=LocalPath, Import=self.FILE_ROOT)

				#: Local custom template jinja from local customization
				self.loadCustomTemp()

			if self.isLocalDevEnable() and self.isFileInLocal(FileName='__init__.py', LocalDev=True):
				#: Import file urlregister from local customization
				# print "import local dev"
				self.setRunTimeImport(Path=self.LOCAL_DEVELOP_NAME, Import=self.FILE_ROOT)
				#: Local custom template jinja from local customization
				self.loadCustomTemp(LocalDev=True)
			# else:
			# 	print 'not run LocalDev'

		except Exception as e:
			print "e",e
			raise

LOCAL_REGISTER_PATH = getAppSetting('LOCAL_REGISTER_PATH')
ClassLocal  		= importClassRunTime(ImportFile=LOCAL_REGISTER_PATH + '.tools.mktextend', ClassName='ExtendModuleEx')
ClassLocalDev  		= importClassRunTime(ImportFile='localdev.tools.mktextend', ClassName='ExtendModuleEx')

#: Check local customization is configuration
if ClassLocal and LOCAL_REGISTER_PATH:

	class ExtendModule(ClassLocal,ExtendModule):
		""" My code will be inherent class from local customization and class itself.
		Example: If you want to understand how it work copy my example code below and run it.
			=================================================================
			class You(object): #ExtendModule
				def Skill(self):
					return {'Skill':'IT'}

			class Brother(object): #ClassLocal
				def run(self):
					return {'Brother':'Brother'}

			class Sister(object):#ClassLocalDev
				def run(self):
					
					return {'Sister':'Sister'}

			class You(Brother,You):
				def run(self):
					Dict = super(You, self).run()
					Dict.update(Sister().run())
					return Dict

			print Brother().run()
			print Sister().run()
			print You().run()
			print You().Skill()
			===================================================================
			{'Brother': 'Brother'}
			{'Sister': 'Sister'}
			{'Sister': 'Sister', 'Brother': 'Brother'}
			{'Skill': 'IT'}

		"""
		def getDashboardUnauth(self):
			Dict = super(ExtendModule,self).getDashboardUnauth()
			if ClassLocalDev:
				Dict.update(ClassLocalDev().getDashboardUnauth())
			return Dict

		def setFuncTempBuilder(self, **kwargs):
			Dict = super(ExtendModule,self).setFuncTempBuilder()
			if ClassLocalDev:
				Dict.update(ClassLocalDev().setFuncTempBuilder())
			return Dict

		def setConfigNotification(self, **kwargs):
			Dict = super(ExtendModule,self).setConfigNotification()
			if ClassLocalDev:
				Dict.update(ClassLocalDev().setConfigNotification())
			return Dict

#: Check local dev is enable and class was created
elif ClassLocalDev and ExtendModule().isLocalDevEnable():
	class ExtendModule(ClassLocalDev,ExtendModule):
		""" If local customization not using, I will inherent from local dev only"""
		def getDashboardUnauth(self):
			return super(ExtendModule,self).getDashboardUnauth()

		def setFuncTempBuilder(self):
			return super(ExtendModule,self).setFuncTempBuilder()

		def setConfigNotification(self):
			return super(ExtendModule,self).setConfigNotification()

def getNotificationSetting():
	ListTable = getListOfTable()
	Setting = ""
	if 'MKT_NOTIFICATION_SETTING' in ListTable:
		Setting = MKT_NOTIFICATION_SETTING.query.get("SYSTEM")

	return Setting

def getLocalRegisterPath():
	LOCAL_URL_PATH 	= getAppSetting('LOCAL_REGISTER_PATH')
	return LOCAL_REGISTER_PATH if LOCAL_REGISTER_PATH else ''

def getUrlSetting():
	Domain 		= getAppSetting("DOMAIN")
	Protocol 	= getAppSetting("PROTOCOL")
	Url 		= "%s://%s"%(Protocol,Domain)
	if not  Domain and not Protocol:
		print "realy not"
		return ""
	return Url
