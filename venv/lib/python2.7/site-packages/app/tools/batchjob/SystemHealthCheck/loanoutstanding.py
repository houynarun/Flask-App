from 	systemhealthcheck 			import  * 
from 	app.LoanContract.models 	import MKT_LOAN_CONTRACT
from 	app.Branch.models 			import MKT_BRANCH
from 	app.ConsolBalance.models 	import MKT_CONSOL_BALANCE
from 	app.Currency.models 		import MKT_CURRENCY


# import app.tools.mktsetting as mktsetting
import app.tools.mktmoney as mktmoney

import app.tools.mktaccounting as mktaccounting


class ValidateLoanOutstanding(SystemHealthCheck):

	def __init__(self):
		self.ItemName 		= 	"ValidateLoanOutstanding"
		self.Title 			= 	"Total Loan Outstanding"
		self.Status 		= 	"F"
		self.Level 			= 	"Warning"
		self.Code			=	"LOA-W001"
		self.Description	= 	""
		self.ErrorDetail 	= 	{}
		self.Suggestion 	= 	'N'


	@staticmethod
	def runValidate(self):
		AccSetting = mktsetting.getAccSetting()
		BranchObj = MKT_BRANCH.query.all()
		CurrencyObj = MKT_CURRENCY.query.all()
		

		LoanContractObj = db.session.query(MKT_LOAN_CONTRACT.Branch, MKT_LOAN_CONTRACT.Currency, MKT_LOAN_CONTRACT.Category,
											MKT_LOAN_CONTRACT.MoreThanOneYear, MKT_LOAN_CONTRACT.AssetClass,
											func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('TotalLoanOutstanding'))
		
		if AccSetting.GL_KEY1 == "":
			LoanContractObj = db.session.query(MKT_LOAN_CONTRACT.Branch, MKT_LOAN_CONTRACT.Currency, MKT_LOAN_CONTRACT.Category,
											MKT_LOAN_CONTRACT.AssetClass, func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('TotalLoanOutstanding'))

		LoanContractObj = LoanContractObj.filter(MKT_LOAN_CONTRACT.OutstandingAmount>0, MKT_LOAN_CONTRACT.DisbursedStat=='Y' ).\
										order_by(
												MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.Category,
												MKT_LOAN_CONTRACT.MoreThanOneYear if AccSetting.GL_KEY1 else "",
												MKT_LOAN_CONTRACT.AssetClass).\
										group_by(
												MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.Category,
												MKT_LOAN_CONTRACT.MoreThanOneYear if AccSetting.GL_KEY1 else "",
												MKT_LOAN_CONTRACT.AssetClass)

		TotalError = 0
		# compare value
		for row in BranchObj:
			Message = []
			CurrencyDic 		= 	{}
			BranchError 		= 	0
			for col in CurrencyObj:
				LoanContractByBranch 	= 	LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch==row.ID,MKT_LOAN_CONTRACT.Currency==col.ID).all()
				if LoanContractByBranch:
					for LoanContract in LoanContractByBranch:
						# MergeKey  = LoanContract.Category + "." + LoanContract.Currency + "." + LoanContract.AssetClass + "." +\
						#  			LoanContract.MoreThanOneYear + "........"
						LCMoreThanOneYear	= LoanContract.MoreThanOneYear if AccSetting.GL_KEY1 else ""
						GL_KEYS 			= mktaccounting.getConsolKey(LoanContract.Category, LoanContract.Currency , LoanContract.AssetClass, "LC", LCMoreThanOneYear )

					
						ConsoleObj = db.session.query(MKT_CONSOL_BALANCE.ID, (MKT_CONSOL_BALANCE.Balance).label('TotalConsolOutstanding')).\
									 filter(MKT_CONSOL_BALANCE.ID == GL_KEYS,
											MKT_CONSOL_BALANCE.Branch == row.ID,
											MKT_CONSOL_BALANCE.Currency==col.ID).first()

						TotalLoanOutstanding = LoanContract.TotalLoanOutstanding
						TotalConsolOutstanding = ConsoleObj.TotalConsolOutstanding if ConsoleObj else 0

						if str(round(TotalLoanOutstanding, 2)) != str(round(TotalConsolOutstanding, 2)):
							CurrencyObject = 	mktmoney.getCurrencyObj(col.ID)
							Amount = float(TotalLoanOutstanding) - float(TotalConsolOutstanding)
							TotalAmount = mktmoney.toMoney(Amount, CurrencyObject)


							Msg = "Category:%s, Class: %s, More than one year: %s, Different Amount from Consol: %s %s" % (LoanContract.Category,LoanContract.AssetClass,\
																		LoanContract.MoreThanOneYear, TotalAmount, col.ID)
							Message.append(Msg)

							BranchError += len(Message)
							ID = ConsoleObj.ID if ConsoleObj else ""
							CurrencyDic.update({
								ID :{
									'Message': Message,
									'Total': len(Message)
								},
								'Total': BranchError
							})
						Message = []

			if CurrencyDic:
				TotalError += int(CurrencyDic.get('Total', 0))
				self.ErrorDetail.update({
									row.ID: CurrencyDic,
									'Total': TotalError
								})
		return self.ErrorDetail
