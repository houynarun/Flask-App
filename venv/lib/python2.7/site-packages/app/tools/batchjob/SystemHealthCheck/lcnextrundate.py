from 	systemhealthcheck 			import  * 
from 	app.LoanContract.models 	import MKT_LOAN_CONTRACT
from 	app.Branch.models 			import MKT_BRANCH
from 	app.Currency.models 		import MKT_CURRENCY


class ValidateLCNextRunDate(SystemHealthCheck):
	def __init__(self):
		self.ItemName 		= 	"ValidateLCNextRunDate"
		self.Title 			= 	"Loan Contract Next Run Date"
		self.Status 		= 	"F"
		self.Level 			= 	"Critical"
		self.Code 			= 	"LOA-C001"
		self.Description	= 	""
		self.ErrorDetail 	= 	{}
		self.Suggestion 	= 	'N'

	@staticmethod
	def runValidate(self):
		BankDate 	=	mktdate.getBankDate()
		BranchObj 	=	MKT_BRANCH.query.all()
		CurrencyObj = 	MKT_CURRENCY.query.all()
		LCObj 		=	MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.NextRunDate < str(BankDate),
														MKT_LOAN_CONTRACT.DisbursedStat == 'Y',
														MKT_LOAN_CONTRACT.MaturityDate >= str(BankDate),
														MKT_LOAN_CONTRACT.OutstandingAmount > 0)
		TotalError = 0
		for row in BranchObj:
			CurrencyDic = {}
			BranchError = 0
			for col in CurrencyObj:
				LCObjByBranch = LCObj.filter(MKT_LOAN_CONTRACT.Branch == row.ID, MKT_LOAN_CONTRACT.Currency == col.ID)
				if LCObjByBranch.all():
					LoanID = ["%s (%s)"%(item.ID,item.NextRunDate) for item in LCObjByBranch]
					Message = LoanID
					BranchError += len(Message)
					CurrencyDic.update({
										col.ID: {
											'Message': Message,
											'Total': len(Message)
										},
										'Total': BranchError
									})

			if CurrencyDic:
				TotalError += int(CurrencyDic.get('Total', 0))
				self.ErrorDetail.update({
									row.ID: CurrencyDic,
									'Total': TotalError
								})
		return self.ErrorDetail
