from systemhealthcheck      	import *
from app.Branch.models      	import MKT_BRANCH
from app.AccProduct.models 		import MKT_ACC_PRODUCT
from app.Account.models 		import MKT_ACCOUNT
from app.ConsolBalance.models 	import MKT_CONSOL_BALANCE
from app.Currency.models 		import MKT_CURRENCY

import app.tools.mktgl as mktgl
import app.tools.mktmoney as mktmoney


class ValidateAccountBalance(SystemHealthCheck):
	def __init__(self):
		self.ItemName = "ValidateAccountBalance"
		self.Title = "Total Account Balance"
		self.Status = "F"
		self.Level = "Warning"
		self.Code = "ACC-W001"
		self.Description = ""
		self.ErrorDetail = {}
		self.Suggestion = "N"

	@staticmethod
	def runValidate(self):
		AccSetting 		= mktsetting.getAccSetting()
		BranchObj 		= MKT_BRANCH.query.all()
		CurrencyObj 	= MKT_CURRENCY.query.all()
		




		AccountObj = db.session.query(MKT_ACCOUNT.Currency,
										  MKT_ACCOUNT.Branch,
										  MKT_ACC_PRODUCT.ID,
										  func.sum(MKT_ACCOUNT.Balance).label('TotalAccountBalance')).\
										  filter(MKT_ACCOUNT.AccStatus == 'O').\
										  join(MKT_ACC_PRODUCT, MKT_ACCOUNT.AccProduct==MKT_ACC_PRODUCT.ID ).\
										  group_by(MKT_ACCOUNT.Currency,
													MKT_ACCOUNT.Branch,
													MKT_ACC_PRODUCT.ID
												   )

		

				 

		TotalError = 0
		for row in BranchObj:
			Message = []
			CurrencyDic 		= 	{}
			BranchError 		= 	0
			for col in CurrencyObj:
				AccObjByBranch 	= 	AccountObj.filter(MKT_ACCOUNT.Branch==row.ID , MKT_ACCOUNT.Currency==col.ID).all()
				for item in AccObjByBranch:
					AccProductObj 	= db.session.query(MKT_ACC_PRODUCT).\
												 filter(MKT_ACC_PRODUCT.ID==item.ID).first()

					ConsoleObj = db.session.query(
												MKT_CONSOL_BALANCE.ID,
												MKT_CONSOL_BALANCE.Branch,
												MKT_CONSOL_BALANCE.Currency,
												func.sum(MKT_CONSOL_BALANCE.Balance).label('TotalConsolBalance')).\
									filter(MKT_CONSOL_BALANCE.ID.like('%'+AccProductObj.CategoryList+'%')).\
									group_by(MKT_CONSOL_BALANCE.ID,
										     MKT_CONSOL_BALANCE.Branch,
											 MKT_CONSOL_BALANCE.Currency
											 )
					ConsoleObjByBranch 	= 	ConsoleObj.filter(MKT_CONSOL_BALANCE.Branch==row.ID , MKT_CONSOL_BALANCE.Currency==col.ID).first()

					if ConsoleObjByBranch:

						TotalAccountBalance = item.TotalAccountBalance
						TotalConsolBalances  = ConsoleObjByBranch.TotalConsolBalance

				
						if str(round(TotalAccountBalance, 2)) != str(round(TotalConsolBalances, 2)):
							CurrencyObject = 	mktmoney.getCurrencyObj(col.ID)
							Amount = (float(TotalAccountBalance)-float(TotalConsolBalances))
							TotalAmount = mktmoney.toMoney(Amount, CurrencyObject)
							Msg = "Account (%s: %s) Balance different amount from Consol: %s %s."\
								% (AccProductObj.ID,AccProductObj.Description,TotalAmount, col.ID)
							Message.append(Msg)
							BranchError += len(Message)
							CurrencyDic.update({
								ConsoleObjByBranch.ID: {
									'Message': Message,
									'Total': len(Message)
								},
								'Total': BranchError
							})
						Message = []

			if CurrencyDic:
				TotalError += int(CurrencyDic.get('Total', 0))
				self.ErrorDetail.update({
					row.ID: CurrencyDic,
					'Total': TotalError
				})

		return self.ErrorDetail


	@staticmethod
	def runSuggestSolution(sefl, Category = '', Branch = '', ItemName = ''):
		return {}
