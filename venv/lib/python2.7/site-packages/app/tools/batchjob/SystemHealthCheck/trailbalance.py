from 	systemhealthcheck 			import  *
from 	app.Branch.models 			import MKT_BRANCH
from 	app.GLBalance.models    	import MKT_GL_BALANCE
from 	app.GL.models 				import MKT_GL_MAPPING
import app.tools.mktmoney 			as 	   mktmoney
import app.tools.mktsetting			as	mktsetting

class ValidateTrailBalance(SystemHealthCheck):
	def __init__(self):
		self.ItemName 		= 	"ValidateTrailBalance"
		self.Title 			= 	"Trail Balance"
		self.Status 		= 	"F"
		self.Level 			= 	"Critical"
		self.Code 			= 	"ACG-C002"
		self.Description	= 	""
		self.ErrorDetail 	= 	{}
		self.Suggestion 	= 	'N'

	@staticmethod
	def runValidate(self):
		AccSetting 	= 	mktsetting.getAccSetting()
		BranchObj 	=	MKT_BRANCH.query.all()
		Currency 	= 	AccSetting.BaseCurrency
		GLObj 		=	db.session.query(MKT_GL_BALANCE.Branch,
										 MKT_GL_MAPPING.BalanceType,
										 func.sum(MKT_GL_BALANCE.LCYBalance).label('TotalGLBalance')).\
									join(MKT_GL_MAPPING, MKT_GL_BALANCE.ID == MKT_GL_MAPPING.ID).\
									filter(MKT_GL_MAPPING.SubGL == '').\
									group_by( MKT_GL_BALANCE.Branch,
											  MKT_GL_MAPPING.BalanceType
											 )
		CurrencyObj = 	mktmoney.getCurrencyObj(Currency)

		TotalError = 0
		for row in BranchObj:
			CurrencyDic = {}
			BranchError = 0
			Message = []
			GLObjByBranch = GLObj.filter(MKT_GL_BALANCE.Branch==row.ID).all()
			if GLObjByBranch:
				TotalCredit 	=	0
				TotalDebit 		=	0
				for GLObject in GLObjByBranch:
					if GLObject.BalanceType == 'Cr':
						TotalCredit = GLObject.TotalGLBalance
					if GLObject.BalanceType == 'Dr':
						TotalDebit 	= GLObject.TotalGLBalance

				if str(round(TotalCredit, 2)) != str(round(TotalDebit, 2)):
					Amount = (float(TotalDebit)-float(TotalCredit))
					# Check balance between TotalDebit and TotalCredit, if variant is less than 0.05, system healt check will not raise error.
					if abs(Amount) > (float(mktsetting.getAppSetting('BALANCE_ERROR_TRESHOLD')) or 0.05):
						TotalAmount = mktmoney.toMoney(Amount, CurrencyObj)
						Msg		= 	"Total Debit and Credit Ending Balance is not equal: %s %s" % (TotalAmount, Currency)
						Message.append(Msg)
						BranchError += 	len(Message)
						CurrencyDic.update({
											Currency:{
													'Message': Message,
													'Total': len(Message)
												},
												'Total': BranchError
											})
										
			if CurrencyDic:
				TotalError += int(CurrencyDic.get('Total', 0))
				self.ErrorDetail.update({
							row.ID  : CurrencyDic,
							'Total' : TotalError
						})

		return self.ErrorDetail
