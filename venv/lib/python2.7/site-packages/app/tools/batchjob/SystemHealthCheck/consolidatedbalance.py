from 	systemhealthcheck 			import  * 
from 	app.Branch.models 			import MKT_BRANCH
from 	app.ConsolBalance.models 	import MKT_CONSOL_BALANCE
from 	app.Currency.models 		import MKT_CURRENCY
from 	app.Category.models 		import MKT_CATEGORY
from 	app.Journal.models 			import MKT_JOURNAL



class ValidateConsolidatedBalance(SystemHealthCheck):

	def __init__(self):
		self.ItemName 		= 	"ValidateConsolidatedBalance"
		self.Title 			= 	"Consolidated Balance"
		self.Status 		= 	"F"
		self.Level 			= 	"Critical"
		self.Code 			= 	"ACG-C001"
		self.Description	= 	""
		self.ErrorDetail 	= 	{}
		self.Suggestion     =   'Y'

	@staticmethod
	def runValidate(self):
		AccSetting 		= 	mktsetting.getAccSetting()
		CategoryObj 	= 	MKT_CATEGORY.query
		# Revaluation 	= 	AccSetting.Revaluation
		Currency 		= 	AccSetting.BaseCurrency
		BaseCurrencyObj = 	mktmoney.getCurrencyObj(AccSetting.BaseCurrency)
		BranchObj 		= 	MKT_BRANCH.query
		CurrencyObj 	= 	MKT_CURRENCY.query.all()

		TotalError = 0
		for row in BranchObj:
			# Default value by zero
			Balance 			= 0
			CurrentMonthBal 	= 0
			CurrentPrevMonthBal = 0
			PrevMonthBal 		= 0
			YTDBal 				= 0
			Branch 				= str(row.ID)

			ConsoleObj 	= MKT_CONSOL_BALANCE.query.filter(MKT_CONSOL_BALANCE.Branch == Branch).\
											order_by(MKT_CONSOL_BALANCE.ID).\
											all()
			if ConsoleObj:

				for col in ConsoleObj:

					Category = col.ID.split('.')[0]

					CategoryType = CategoryObj.get(Category)

					if CategoryType:

						BalanceType = CategoryType.BalanceType
						Description = CategoryType.Description
						
						# Don't using Decimal
						if BalanceType == "Dr":
							Balance 				+= col.LCYBalance
							CurrentMonthBal 		+= col.LCYCurrentMonthBal
							CurrentPrevMonthBal 	+= col.LCYCurrentPrevMonthBal
							PrevMonthBal 			+= col.LCYPrevMonthBal
							YTDBal 					+= col.LCYYTDBal
						
						else:
							Balance 				-= col.LCYBalance
							CurrentMonthBal 		-= col.LCYCurrentMonthBal
							CurrentPrevMonthBal 	-= col.LCYCurrentPrevMonthBal
							PrevMonthBal 			-= col.LCYPrevMonthBal
							YTDBal 					-= col.LCYYTDBal


			Balance 			= float(mktmoney.toMoney(float(Balance), BaseCurrencyObj).replace(',',''))
			CurrentMonthBal 	= float(mktmoney.toMoney(float(CurrentMonthBal), BaseCurrencyObj).replace(',',''))
			CurrentPrevMonthBal = float(mktmoney.toMoney(float(CurrentPrevMonthBal), BaseCurrencyObj).replace(',',''))
			PrevMonthBal 		= float(mktmoney.toMoney(float(PrevMonthBal), BaseCurrencyObj).replace(',',''))
			YTDBal 				= float(mktmoney.toMoney(float(YTDBal), BaseCurrencyObj).replace(',',''))

			CurrencyDic = {}
			BranchError = 0
			Message = []

			# All balance doesn't equal zero, We are adding log file.
			if Balance != 0 or CurrentMonthBal != 0 or CurrentPrevMonthBal != 0 or PrevMonthBal != 0 or YTDBal != 0 :
				Msg = "Balance %s, CurrentMonthBal %s, CurrentPrevMonthBal %s, PrevMonthBal %s YTDBal %s "\
							%(Balance, CurrentMonthBal, CurrentPrevMonthBal, PrevMonthBal, YTDBal)
				Message.append(Msg)
				BranchError += len(Message)
				CurrencyDic.update({
									Currency: {
										'Message': Message,
										'Total': len(Message)
									},
									'Total': BranchError
									})


			if CurrencyDic:
				TotalError += int(CurrencyDic.get('Total', 0))
				self.ErrorDetail.update({
									row.ID: CurrencyDic,
									'Total': TotalError
								})

		return self.ErrorDetail

	@staticmethod
	def runSuggestSolution(**kwargs):
		Message = []
		MessageSuggestion = {}
		AccSetting          =   mktsetting.getAccSetting()
		Currency 			= 	AccSetting.BaseCurrency
		CurrencyObj 		= 	mktmoney.getCurrencyObj(Currency)
		Branch  =  kwargs.get('Branch','')
		JournalObjByDr = db.session.query(MKT_JOURNAL.Branch,
									  MKT_JOURNAL.DebitCredit,
									  MKT_JOURNAL.Reference,
									  func.sum(MKT_JOURNAL.Amount).label('DrAmount')).\
									  filter(MKT_JOURNAL.Branch == Branch,
											 MKT_JOURNAL.DebitCredit == 'Dr').\
									  group_by(MKT_JOURNAL.Branch,
												MKT_JOURNAL.DebitCredit,
												MKT_JOURNAL.Reference,
										   )
		JournalObjByCr =  db.session.query(MKT_JOURNAL.Branch,
									  MKT_JOURNAL.DebitCredit,
									  MKT_JOURNAL.Reference,
									  func.sum(MKT_JOURNAL.Amount).label('CrAmount')).\
									  filter(MKT_JOURNAL.Branch == Branch,
											 MKT_JOURNAL.DebitCredit == 'Cr').\
									  group_by(MKT_JOURNAL.Branch,
												MKT_JOURNAL.DebitCredit,
												MKT_JOURNAL.Reference,
										   )

		ListDebit  	= 	[Row.Reference for Row in JournalObjByDr.all()]
		ListCrebit  	= 	[Row.Reference for Row in JournalObjByCr.all()]

		if ListDebit and ListCrebit:
			for Row in JournalObjByDr.all():
				if Row.Reference in ListCrebit:
					CreditObject = JournalObjByCr.filter(MKT_JOURNAL.Reference==Row.Reference).first()
					TotalDebit 	=	Row.DrAmount
					TotalCredit = 	CreditObject.CrAmount
					if  str(round(TotalDebit, 2))  != str(round(TotalCredit, 2)):
						DrAmount = mktmoney.toMoney(float(TotalDebit), CurrencyObj)
						CrAmount = mktmoney.toMoney(float(TotalCredit), CurrencyObj)
						Msg = 'Reference: %s , Debit Amount: %s %s, Credit Amount: %s %s'\
									%(Row.Reference,DrAmount,Currency,CrAmount,Currency)
						Message.append(Msg)
				else:
					DrAmount = mktmoney.toMoney(float(Row.DrAmount), CurrencyObj)
					CrAmount = mktmoney.toMoney(float(0), CurrencyObj)
					Msg = 'Reference: %s , Debit Amount: %s %s, Credit Amount: %s %s'\
								%(Row.Reference,DrAmount,Currency,CrAmount,Currency)
					Message.append(Msg)


			for Row in JournalObjByCr.all():
				if Row.Reference not in ListDebit:
					DrAmount = mktmoney.toMoney(float(0), CurrencyObj)
					CrAmount = mktmoney.toMoney(float(Row.CrAmount), CurrencyObj)
					Msg = 'Reference: %s , Debit Amount: %s %s, Credit Amount: %s %s'\
								%(Row.Reference,DrAmount,Currency,CrAmount,Currency)
					Message.append(Msg)

			if Message:
				MessageSuggestion.update({
				'Message':Message,
				'Status': "True"
				})

		return MessageSuggestion
