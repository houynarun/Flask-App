from systemhealthcheck import *
from app.StandingOrder.models import MKT_STANDING_ORDER
from app.Branch.models import MKT_BRANCH
from app.Currency.models import MKT_CURRENCY


class ValidateSOMaturityDate(SystemHealthCheck):

	def __init__(self):
		self.ItemName = "ValidateSOMaturityDate"
		self.Title = "Standing Order Maturity Date"
		self.Status = "F"
		self.Level = "Critical"
		self.Code = "ACG-C005"
		self.Description = ""
		self.ErrorDetail = {}
		self.Suggestion = 'N'

	@staticmethod
	def runValidate(self):
		BankDate = mktdate.getBankDate()
		BranchObj = MKT_BRANCH.query.all()
		CurrencyObj = MKT_CURRENCY.query.all()
		SOObj = MKT_STANDING_ORDER.query.filter(MKT_STANDING_ORDER.MaturityDate == None,
													MKT_STANDING_ORDER.OutstandingAmount > 0)

		TotalError = 0
		for row in BranchObj:
			CurrencyDic = {}
			BranchError = 0
			for col in CurrencyObj:

				Message = []
				SOObjByBranch = SOObj.filter(
					MKT_STANDING_ORDER.Branch == row.ID, MKT_STANDING_ORDER.Currency == col.ID)

				if SOObjByBranch.all():
					LoanID = ["%s (%s)"%(item.ID,item.MaturityDate) for item in SOObjByBranch]
					Message = LoanID
					BranchError += len(Message)
					CurrencyDic.update({
						col.ID: {
							'Message': Message,
							'Total': len(Message)
						},
						'Total': BranchError
					})

			if CurrencyDic:
				TotalError += int(CurrencyDic.get('Total', 0))
				self.ErrorDetail.update({
										row.ID: CurrencyDic,
										'Total': TotalError
										})
		return self.ErrorDetail
