# from    systemhealthcheck import *
# import  os
# import  psutil


# class ValidateHardDiskSpace(SystemHealthCheck):

# 	def __init__(self):
# 		self.ItemName = "ValidateHardDiskSpace"
# 		self.Title = "Check Hard Disk space and RAM usage"
# 		self.Status = "F"
# 		self.Level = "Warning"
# 		self.Code = "SYS-W001"
# 		self.Description = ""
# 		self.ErrorDetail = {}

# 	@staticmethod
# 	def runValidate(self):
# 		Disk = os.statvfs("/")
#         TotalBytes = float(Disk.f_bsize*Disk.f_blocks)
#         TotalHardDisk = (TotalBytes/1024/1024/1024)
#         TotalHardDiskUsed = (TotalHardDisk/1024/1024/1024)
#         TotalAvailSpaceNonRoot = float(disk.f_bsize*disk.f_bavail)
#         HardDiskAvailable = (TotalAvailSpaceNonRoot/1024/1024/1024)
#         HardDiskThreshold = (HardDiskAvailable/TotalHardDisk)*100


#         TotalMemory = psutil.virtual_memory().total/2.**30
#         TotalMemoryAvailable = psutil.virtual_memory().available/2.**30
#         TotalMemoryUsed = psutil.virtual_memory().used/2.**30
#         MeomoryThreshold = (TotalMemoryAvailable/TotalMemory)*100

#         if HardDiskThreshold <= 10 and MeomoryThreshold <= 10:
#             pass


# 		TotalError = 0
# 		for row in BranchObj:
# 			# Default value by zero
# 			Balance = 0
# 			CurrentMonthBal = 0
# 			CurrentPrevMonthBal = 0
# 			PrevMonthBal = 0
# 			YTDBal = 0
# 			Branch = str(row.ID)

# 			ConsoleObj = MKT_CONSOL_BALANCE.query.\
#                             filter(MKT_CONSOL_BALANCE.Branch == Branch).\
#                             order_by(MKT_CONSOL_BALANCE.ID).\
#                             all()
# 			if ConsoleObj:

# 				for col in ConsoleObj:

# 					Category = col.ID.split('.')[0]

# 					CategoryType = CategoryObj.get(Category)

# 					if CategoryType:

# 						BalanceType = CategoryType.BalanceType
# 						Description = CategoryType.Description

# 						# Don't using Decimal
# 						if BalanceType == "Dr":
# 							Balance += col.LCYBalance
# 							CurrentMonthBal += col.LCYCurrentMonthBal
# 							CurrentPrevMonthBal += col.LCYCurrentPrevMonthBal
# 							PrevMonthBal += col.LCYPrevMonthBal
# 							YTDBal += col.LCYYTDBal

# 						else:
# 							Balance -= col.LCYBalance
# 							CurrentMonthBal -= col.LCYCurrentMonthBal
# 							CurrentPrevMonthBal -= col.LCYCurrentPrevMonthBal
# 							PrevMonthBal -= col.LCYPrevMonthBal
# 							YTDBal -= col.LCYYTDBal

# 			# print 'Console ',Branch,'Balance',Balance,'CurrentMonthBal',CurrentMonthBal,'CurrentPrevMonthBal',CurrentPrevMonthBal,'PrevMonthBal',PrevMonthBal,'YTDBal',YTDBal
# 			# if Revaluation == "N":
# 			Balance = float(mktmoney.toMoney(
# 				float(Balance), BaseCurrencyObj).replace(',', ''))
# 			CurrentMonthBal = float(mktmoney.toMoney(
# 				float(CurrentMonthBal), BaseCurrencyObj).replace(',', ''))
# 			CurrentPrevMonthBal = float(mktmoney.toMoney(
# 				float(CurrentPrevMonthBal), BaseCurrencyObj).replace(',', ''))
# 			PrevMonthBal = float(mktmoney.toMoney(
# 				float(PrevMonthBal), BaseCurrencyObj).replace(',', ''))
# 			YTDBal = float(mktmoney.toMoney(
# 				float(YTDBal), BaseCurrencyObj).replace(',', ''))

# 			CurrencyDic = {}
# 			BranchError = 0
# 			for col in CurrencyObj:
# 				Message = []
# 				# All balance doesn't equal zero, We are adding log file.
# 				if Balance != 0 or CurrentMonthBal != 0 or CurrentPrevMonthBal != 0 or PrevMonthBal != 0 or YTDBal != 0:
# 					Msg = "Balance %s, CurrentMonthBal %s, CurrentPrevMonthBal %s, PrevMonthBal %s YTDBal %s "\
#                                             % (Balance, CurrentMonthBal, CurrentPrevMonthBal, PrevMonthBal, YTDBal)
# 					Message.append(Msg)
# 					BranchError += len(Message)
# 					CurrencyDic.update({
#                                             col.ID: {
#                                                 'Message': Message,
#                                                 'Total': len(Message)
#                                             },
#                                             'Total': BranchError
#                                         })

# 			if CurrencyDic:
# 				TotalError += int(CurrencyDic.get('Total', 0))
# 				self.ErrorDetail.update({
#                                     row.ID: CurrencyDic,
#                                     'Total': TotalError
#                                 })

# 		return self.ErrorDetail
