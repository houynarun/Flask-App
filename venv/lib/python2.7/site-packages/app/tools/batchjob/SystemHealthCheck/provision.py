from systemhealthcheck      	import *
from app.Branch.models      	import MKT_BRANCH
from app.Provisioning.models 	import MKT_PROVISION
from app.ConsolBalance.models 	import MKT_CONSOL_BALANCE
from app.Currency.models 		import MKT_CURRENCY
from app.AssetClass.models 		import MKT_ASSET_CLASS, MKT_ASSET_CLASS_PRO
from app.LoanContract.models 	import MKT_LOAN_CONTRACT
from app.Category.models 		import MKT_CATEGORY

import app.tools.mktgl as mktgl
import app.tools.mktmoney as mktmoney
import app.tools.mktpdcollection as mktpdcollection


class ValidateProvision(SystemHealthCheck):
	def __init__(self):
		self.ItemName = "ValidateProvision"
		self.Title = "Provision"
		self.Status = "F"
		self.Level = "Warning"
		self.Code = "LOA-W004"
		self.Description = ""
		self.ErrorDetail = {}
		self.Suggestion = 'N'

	@staticmethod
	def runValidate(self):
		AccSetting 		= mktsetting.getAccSetting()
		BranchObj 		= MKT_BRANCH.query.all()
		CurrencyObj 	= MKT_CURRENCY.query.all()

		#Get all ProResv category from assete class
		AssetClassObjByProResvCat  = db.session.query(MKT_ASSET_CLASS.ProResvCat).group_by(MKT_ASSET_CLASS.ProResvCat).all()
		#Get object of loan
		LoanContractObj = db.session.query(MKT_LOAN_CONTRACT).filter(
											MKT_LOAN_CONTRACT.OutstandingAmount>0,
										    MKT_LOAN_CONTRACT.DisbursedStat=='Y' )					 


		TotalError = 0
		for row in BranchObj:
			Message = []
			CurrencyDic 		= 	{}
			BranchError 		= 	0
			
			#loop all ProResv category from  AssetClassObjByProResvCat object
			for ProResvCatObj in AssetClassObjByProResvCat:
				for col in CurrencyObj:
					TotalLoanGeneralProvision = 0
					TotalConsolGeneralProvisionAmount = 0
					DetailAsseteClass = {}
					ProvisionAmount = {}

					#get all assete class ID by ProResv category
					AssetClassObjID = db.session.query(MKT_ASSET_CLASS.ID).filter(MKT_ASSET_CLASS.ProResvCat==ProResvCatObj.ProResvCat).all()



					for AssetClassID in AssetClassObjID:
						#Get all loan contract by assete class branch and currency
						
						if len(AssetClassID.ID.split("-")) > 1:
							LoanContractObjByAsset = LoanContractObj.filter(MKT_LOAN_CONTRACT.AssetClass == AssetClassID.ID.split("-")[0] , 
																			MKT_LOAN_CONTRACT.Branch == row.ID,
																			MKT_LOAN_CONTRACT.Currency==col.ID,
																			MKT_LOAN_CONTRACT.LoanProduct== AssetClassID.ID.split("-")[1]).all()
						else:
							LoanContractObjByAsset = LoanContractObj.filter(MKT_LOAN_CONTRACT.AssetClass == AssetClassID.ID, 
																			MKT_LOAN_CONTRACT.Branch == row.ID,
																			MKT_LOAN_CONTRACT.Currency==col.ID).all()

						if LoanContractObjByAsset:
							for item in LoanContractObjByAsset:

								if not len(AssetClassID.ID.split("-")) > 1:

									AssByProduct 		= MKT_ASSET_CLASS.query.get(item.AssetClass + "-" + item.LoanProduct)

									if AssByProduct:
										continue

								NumDayDue 			= mktpdcollection.getNumDayDue('PD'+item.ID)
								CalProvisionAmount 	= 0

								# CalProvisionAmount = mktpdcollection.getProvisioningAmount(AssClass=item.AssetClass,
								# 					 TotPrincipalDue=item.OutstandingAmount,
								# 					 LoanType=item.LoanType,MoreThanOneYear=item.MoreThanOneYear, 
								# 					 NumDayDue=NumDayDue, ClassifiedMode='')

								LCAssetID 	= item.AssetClass + "-" + item.LoanProduct


								AssetProObj = MKT_ASSET_CLASS_PRO.query.\
											  filter(MKT_ASSET_CLASS_PRO.ID == str(LCAssetID)).\
											  filter(MKT_ASSET_CLASS_PRO.LoanType == str(item.LoanType)).\
											  filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(item.MoreThanOneYear)).\
											  first()



								if not AssetProObj:
									AssetProObj = MKT_ASSET_CLASS_PRO.query.\
												  filter(MKT_ASSET_CLASS_PRO.ID == str(item.AssetClass)).\
												  filter(MKT_ASSET_CLASS_PRO.LoanType == str(item.LoanType)).\
												  filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(item.MoreThanOneYear)).\
												  first()

								if AssetProObj:
									CalProvisionAmount = (Decimal(item.OutstandingAmount) * Decimal(AssetProObj.ProvPerc)) / 100

								LoanType = 'Normal'
								if item.LoanType == 'R':
									LoanType = 'Restructured'

								GetKey = "Class: %s, More than one year: %s ,Type: %s"%(item.AssetClass,item.MoreThanOneYear,LoanType)

								ProvisionAmount = DetailAsseteClass.get(GetKey,0) 


								DetailAsseteClass.update({
										GetKey: ProvisionAmount + CalProvisionAmount

									})

								TotalLoanGeneralProvision += CalProvisionAmount

					ConsoleObj = db.session.query(MKT_CONSOL_BALANCE.ID,(MKT_CONSOL_BALANCE.Balance).label('TotalConsolGeneralProvision')).\
							filter(MKT_CONSOL_BALANCE.ID.like('%'+ProResvCatObj.ProResvCat+'%') ,
																  MKT_CONSOL_BALANCE.Branch == row.ID,
																  MKT_CONSOL_BALANCE.Currency==col.ID).first()
					#Get ProResv category
					CategoryObj 	= 	db.session.query(MKT_CATEGORY.BalanceType).filter(MKT_CATEGORY.ID==ProResvCatObj.ProResvCat).first()	
					#Check BalanceType if Dr 
					if CategoryObj.BalanceType == 'Dr':
						TotalLoanGeneralProvision = TotalLoanGeneralProvision*(-1)

					if ConsoleObj:
						TotalConsolGeneralProvisionAmount = float(ConsoleObj.TotalConsolGeneralProvision)


					if str(round(TotalLoanGeneralProvision, 2)) != str(round(TotalConsolGeneralProvisionAmount, 2)):

						CurrencyObject = 	mktmoney.getCurrencyObj(col.ID)
						Amount = (float(TotalLoanGeneralProvision)-float(TotalConsolGeneralProvisionAmount))

						TotalAmount = "Different Amount from Consol: %s %s" % (mktmoney.toMoney(Amount, CurrencyObject), col.ID)

						for key, value in DetailAsseteClass.iteritems():
							Msg = "%s, Amount: %s %s" % (key, mktmoney.toMoney(value, CurrencyObject), col.ID)
							Message.append(Msg)

						BranchError += len(Message)
						ID = ConsoleObj.ID if ConsoleObj else ""
						CurrencyDic.update({
								ID :{
								'Message': Message,
								'Total': len(Message),
								'DiffAmount':TotalAmount
							},
							'Total': BranchError
						})
					Message = []
			if CurrencyDic:
				TotalError += int(CurrencyDic.get('Total', 0))
				self.ErrorDetail.update({
					row.ID: CurrencyDic,
					'Total': TotalError
				})

		return self.ErrorDetail
