# Created by Sovankiry Rim
# Date: 07 April 2017
# Modify Date : 01 September 2017
'''
	Overview 
	This process of Accr Interest and Interest capitalization of IBA Account 
'''
from decimal import *
from app.Account.models 	import *
from app.AccProduct.models 	import *
from app.Category.models 	import *

import app.tools.loantools.rescheduletools 	as mktreschedule
import app.tools.mktsetting 	as mktsetting
import app.tools.mktaccounting  as mktaccounting
import app.tools.mktdate 		as mktdate
import app.tools.mktmoney 		as mktmoney
import app.tools.mktgl 			as mktgl



def setInterBranchProcessing():
	# Accr Interest Process
	try:
		DueFromBranch 	= '605'
		DueToHO 		= '606'
		BankDateObj 	= mktsetting.getBankDateObj()
		AccSetting 		= mktsetting.getAccSetting()

		SystemBankDate 	= BankDateObj.SystemDate
		NextSystemDate 	= BankDateObj.NextSystemDate
		DueHOBalanceType= 'Cr'
		# at HO
		AccountObj =	MKT_ACCOUNT.query.filter(MKT_ACCOUNT.AccProduct.in_([DueToHO,DueFromBranch])).\
										filter(MKT_ACCOUNT.InterestRate != "0").\
										filter(MKT_ACCOUNT.NextAccrDate == str(SystemBankDate)).\
										filter(MKT_ACCOUNT.AccStatus == 'O').\
										filter(MKT_ACCOUNT.Blocked == "N").\
										order_by(MKT_ACCOUNT.AccProduct.asc())
		if AccountObj.first():
			print "Inter Branch Accr Processing ..."

			for row in AccountObj:

				AccProduct 		= row.AccProduct
				AccProductObj 	= MKT_ACC_PRODUCT.query.get(AccProduct)

				if AccProductObj:
					#Find Balance Type
					if AccProduct == DueToHO:
						Category = AccProductObj.CategoryList
						CategroyObj = MKT_CATEGORY.query.get(Category)
						if CategroyObj:
							DueHOBalanceType = CategroyObj.BalanceType

					RatePerYear = float(row.InterestRate) if row.InterestRate else 0
					
					if RatePerYear > 0:
						Capitalization  = False # Mean that not Capitalization by default
						InterestDayBasis= int(AccProductObj.IntDayBasis)
						Balance 		= float(row.Balance)
						Branch 			= row.Branch
						Currency 		= row.Currency
						Account 		= row.ID
						TranDate 		= str(SystemBankDate)

						# Get Interest Per Day
						InterestPerDay 	= Decimal(mktreschedule.getInterestPerDay(RatePerYear, Balance, InterestDayBasis, SystemBankDate))
						

						# Interest Accrual Basis  
						if int(AccProductObj.IntAccrBasis) == 1 : # Daily

							# Call function set Accr Interest Of Inte Branch Account
							setAccrInterBranch(AccSetting,AccProductObj,DueFromBranch,DueToHO,
												Branch,Account,AccProduct,Currency,InterestPerDay,TranDate,DueHOBalanceType)

						elif int(AccProductObj.IntAccrBasis) == 3 : # Monthly

							if mktgl.isMonthEnd(BankDateObj): 
								# Call function set Accr Interest Of Inte Branch Account
								setAccrInterBranch(AccSetting,AccProductObj,DueFromBranch,DueToHO,
													Branch,Account,AccProduct,Currency,InterestPerDay,TranDate,DueHOBalanceType)
						
						# Update relative field
						row.AccrIntBooked 	= abs(InterestPerDay)
						row.AccrInterest 	= Decimal(row.AccrInterest) + InterestPerDay
						row.AccrCurMonth 	= Decimal(row.AccrCurMonth) + InterestPerDay
						row.AccrCurCapital  = Decimal(row.AccrCurCapital) + InterestPerDay
						row.NextAccrDate 	= NextSystemDate
						db.session.add(row)
						print "%s accrual interest has been updated successfully." %Account

						# Interest Capitalization Basis
						IntCapitalize =  Decimal(row.AccrCurCapital)
						if int(AccProductObj.IntCapitalization) == 1: # Daily

							# Call function set Accr Interest Of Inte Branch Account
							setCapitalizeInterBranch(AccSetting,AccProductObj,DueFromBranch,DueToHO,
													Branch,Account,AccProduct,Currency,IntCapitalize,TranDate,DueHOBalanceType)

							Capitalization = True

						elif int(AccProductObj.IntCapitalization) == 3: # Monthly

							if mktgl.isMonthEnd(BankDateObj):
								# Call function set Accr Interest Of Inte Branch Account
								setCapitalizeInterBranch(AccSetting,AccProductObj,DueFromBranch,DueToHO,
													Branch,Account,AccProduct,Currency,IntCapitalize,TranDate,DueHOBalanceType)
								Capitalization = True
						
						# Case Capitalization need to reset to zero
						if Capitalization:
							print "%s capitalization has been updated successfully." %Account
							row.AccrInterest 	= 0
							row.AccrCurMonth 	= 0
							row.AccrCurCapital  = 0
							db.session.add(row)

				else:
					print 
				
			db.session.commit()
			print ''
	except Exception as e:
		db.session.rollback()
		raise
	else:
		pass
	finally:
		pass
		

def setAccrInterBranch(AccSetting,AccProductObj,DueFromBranch,DueToHO,
							Branch,Account,AccProduct,Currency,Amount,TranDate,DueHOBalanceType):
	"""
		Function use for get category for booking accounting with accr inter branch.
		+ at HO :
		+ Positive Balance : Branch Own Head Office

			Debit 	AIR-Due from branches 		xxxx
				Credit Int.Income from branches 		xxxx

		+ Negative Balance : Head Office Own Branch

			Debit 	Acc Payable 	xxxx
				Credit Int.Expense 			xxxx

		+ at Branches :
			+ Positive Balance

				Debit 	Int.Expense to HO 		xxxx
					Credit Acc Payable to HO 		xxxx

			+ Negative Balance

				Debit 	Acc Payable to HO 	xxxx
					Credit Int.Expense to HO			xxxx
		"""
	try:
		#Case Due from branch at HO
		if AccProduct == DueFromBranch:
			DicResult = getInterBranchCategory( AccSetting=AccSetting, AccProductObj=AccProductObj,
									BalanceType=DueHOBalanceType, Opearation="Accrued Daily",
									isHeadOffice=True, Amount=Amount)

		#Case Due To HO at branch
		if AccProduct == DueToHO:

			DicResult = getInterBranchCategory( AccSetting=AccSetting, AccProductObj=AccProductObj,
									BalanceType=DueHOBalanceType, Opearation="Accrued Daily",
									isHeadOffice=False, Amount=Amount)
		
		DrCategory 	= DicResult.get('DrCategory')
		CrCategory 	= DicResult.get('CrCategory')
		Transaction = DicResult.get('Transaction')

		DrGLKey 	= mktaccounting.getConsolKey(DrCategory, Currency)
		CrGLKey 	= mktaccounting.getConsolKey(CrCategory, Currency)

		Amount 			= abs(Amount)
		Mode 			= "Direct"
		DateTimeNow 	= mktdate.getDateTimeNow()

		# Debit
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			"System",				# Inputter
			DateTimeNow, 			# Createdon
			"System",				# Authorizer
			DateTimeNow,			# Authorizeon
			"", 					# AEID
			"",						# Account
			DrCategory,				# Category
			Currency,				# Currency
			"Dr",					# DrCr
			Decimal(Amount), 		# Amount
			"AC",					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			Account, 				# Reference
			"Inter-Branch Accrued", # Note
			"", 					# JNID
			Branch,					# Branch
			DrGLKey,				# GL_KEYS
			Mode 					# Mode check to insert Journal for category
		)

		# Credit
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			"System",				# Inputter
			DateTimeNow, 			# Createdon
			"System",				# Authorizer
			DateTimeNow,			# Authorizeon
			"", 					# AEID
			"",						# Account
			CrCategory,				# Category
			Currency,				# Currency
			"Cr",					# DrCr
			Decimal(Amount), 		# Amount
			"AC",					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			Account, 				# Reference
			"Inter-Branch Accrued", # Note
			"", 					# JNID
			Branch,					# Branch
			CrGLKey,				# GL_KEYS
			Mode 					# Mode check to insert Journal for category
		)
		
	except Exception as e:
		db.session.rollback()
		raise
	
def setCapitalizeInterBranch(AccSetting,AccProductObj,DueFromBranch,DueToHO,
							Branch,Account,AccProduct,Currency,Amount,TranDate,DueHOBalanceType):
	#Function use for get category booking accounting of capitalization inter branch
	try:
		"""
		+ at HO :
			+ Positive Balance

				Debit 	IBA-Due from branches 		xxxx
					Credit AIR-Due from branches 		xxxx

			+ Negative Balance: ( Must zero after capitalization )

				Debit 	AIR-Due from branches 	xxxx
					Credit IBA-Due from branches 		xxxx

		+ at Branches :
			+ Positive Balance

				Debit 	Acc Payable to HO 		xxxx
					Credit IBA Due to HO 				xxxx

			+ Negative Balance

				Debit 	IBA Due to HO  			xxxx
					Credit Acc Payable to HO			xxxx
		"""
		Amount 	= mktmoney.toMoney(float(Amount),mktmoney.getCurrencyObj(Currency))
		Amount 	= float(Amount.replace(',',''))
		#Case Due from branch at HO
		if AccProduct == DueFromBranch:
			DicResult = getInterBranchCategory( AccSetting=AccSetting, AccProductObj=AccProductObj,
						BalanceType=DueHOBalanceType, Opearation="Interest Capitalization",
						isHeadOffice=True, Amount=Amount)

		#Case Due To HO at branch
		if AccProduct == DueToHO:

			DicResult = getInterBranchCategory( AccSetting=AccSetting, AccProductObj=AccProductObj,
						BalanceType=DueHOBalanceType, Opearation="Interest Capitalization",
						isHeadOffice=False, Amount=Amount)

		DrCategory 	= DicResult.get('DrCategory')
		CrCategory 	= DicResult.get('CrCategory')
		DrMode 		= DicResult.get('DrMode')
		CrMode 		= DicResult.get('CrMode')
		Transaction = DicResult.get('Transaction')

		DrGLKey 	= mktaccounting.getConsolKey(DrCategory, Currency)
		CrGLKey 	= mktaccounting.getConsolKey(CrCategory, Currency)

		Amount 			= abs(Amount)
		DateTimeNow 	= mktdate.getDateTimeNow()

		# Debit
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			"System",				# Inputter
			DateTimeNow, 			# Createdon
			"System",				# Authorizer
			DateTimeNow,			# Authorizeon
			"", 					# AEID
			Account,				# Account
			DrCategory,				# Category
			Currency,				# Currency
			"Dr",					# DrCr
			Decimal(Amount), 		# Amount
			"AC",					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			Account, 				# Reference
			"Interest Capitalization",# Note
			"", 					# JNID
			Branch,					# Branch
			DrGLKey,				# GL_KEYS
			DrMode 					# Mode check to insert Journal for category
		)

		# Credit
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			"System",				# Inputter
			DateTimeNow, 			# Createdon
			"System",				# Authorizer
			DateTimeNow,			# Authorizeon
			'', 					# AEID
			Account,				# Account
			CrCategory,				# Category
			Currency,				# Currency
			"Cr",					# DrCr
			Decimal(Amount), 		# Amount
			"AC",					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			Account, 				# Reference
			"Interest Capitalization",# Note
			"", 					# JNID
			Branch,					# Branch
			CrGLKey,				# GL_KEYS
			CrMode 					# Mode check to insert Journal for category
		)
	except Exception as e:
		raise
	else:
		pass
	finally:
		pass

def getInterBranchCategory(**kwargs):
	"""
	Example : getInterBranchCategory( AccSetting=AccSetting, AccProductObj=AccProductObj,
			 
	2.How it work
		There two type of Inter Branch Account Payable and Accrued Receivable in system Morakot VB
		2.1. Debit Balance Of Due To HO
			Mean that you are mapping GL Due To HO in Debit Balance.
			GL Description 			Balance Type 		Account Type 			Using In
			--------------			------------		-------------			-------
			Due from branches 		Debit 				Account Receivable 		Head Office
			Due To HO 				Debit 				Asset 					Branches

		2.2. Credit Balance Of Due To HO
			Mean that you are mapping GL Due To HO in Credit Balance.
			GL Description 			Balance Type 		Account Type 			Using In
			--------------			------------		-------------			-------
			Due from branches 		Debit 				Account Receivable 		Head Office
			Due To HO 				Credit 				Account Payable			Branches

	"""
	AccSetting 		= kwargs['AccSetting']
	AccProductObj 	= kwargs['AccProductObj']
	BalanceType 	= kwargs['BalanceType']
	Opearation 		= kwargs['Opearation']
	isHeadOffice 	= kwargs['isHeadOffice']
	Amount 			= kwargs['Amount']

	AccrReceivableCat 	= AccProductObj.AccrReceivableCat
	IntIncomeCat 		= AccProductObj.IntIncomeCat
	IntExpenseCat 		= AccProductObj.IntExpenseCat
	IntPayableCat 		= AccProductObj.IntPayableCat
	IBACategory 		= AccProductObj.CategoryList

	AccrIntReceiTran 	= AccSetting.DrAccrIntTran #Accrued Interest Receivable Booking
	AccrPayableTran 	= AccSetting.AccrIntTran #Accrued interest Payable
	IntExpenTran 		= AccSetting.IntPayaTran #Interest Expense
	DictResult = {}
	if BalanceType == "Dr":# Debit Balance Of Due To HO
		if Amount > 0: # a) Branches Own Head Office
			if Opearation == "Accrued Daily":

				if isHeadOffice:# Head Office
					DictResult.update({
						'DrCategory':AccrReceivableCat,
						'CrCategory':IntIncomeCat,
						'DrMode':'Direct',
						'CrMode':'Direct',
						'Transaction':AccrIntReceiTran,
						})
				else:# Branches
					DictResult.update({
						'DrCategory':AccrReceivableCat,
						'CrCategory':IntIncomeCat,
						'DrMode':'Direct',
						'CrMode':'Direct',
						'Transaction':AccrIntReceiTran,
						})

			elif Opearation == "Interest Capitalization":

				if isHeadOffice:# Head Office
					DictResult.update({
						'DrCategory':IBACategory,
						'CrCategory':AccrReceivableCat,
						'DrMode':'',
						'CrMode':'Direct',
						'Transaction':IntExpenTran,
						})
				else:# Branches
					DictResult.update({
						'DrCategory':IBACategory,
						'CrCategory':AccrReceivableCat,
						'DrMode':'',
						'CrMode':'Direct',
						'Transaction':IntExpenTran,
						})

		else:#b) Head Office Own Branches
			if Opearation == "Accrued Daily":

				if isHeadOffice:# Head Office
					DictResult.update({
						'DrCategory':IntExpenseCat,
						'CrCategory':IntPayableCat,
						'DrMode':'Direct',
						'CrMode':'Direct',
						'Transaction':AccrPayableTran,
						})
				else:# Branches
					DictResult.update({
						'DrCategory':IntExpenseCat,
						'CrCategory':IntPayableCat,
						'DrMode':'Direct',
						'CrMode':'Direct',
						'Transaction':AccrPayableTran,
						})
					

			elif Opearation == "Interest Capitalization":

				if isHeadOffice:# Head Office
					DictResult.update({
						'DrCategory':IntPayableCat,
						'CrCategory':IBACategory,
						'DrMode':'Direct',
						'CrMode':'',
						'Transaction':IntExpenTran,
						})
				else:# Branches
					DictResult.update({
						'DrCategory':IntPayableCat,
						'CrCategory':IBACategory,
						'DrMode':'Direct',
						'CrMode':'',
						'Transaction':IntExpenTran,
						})


	elif BalanceType == "Cr":# Credit Balance Of Due To HO

		if Amount > 0: # a) Branches Own Head Office
			if Opearation == "Accrued Daily":

				if isHeadOffice:# Head Office
					DictResult.update({
						'DrCategory':AccrReceivableCat,
						'CrCategory':IntIncomeCat,
						'DrMode':'Direct',
						'CrMode':'Direct',
						'Transaction':AccrIntReceiTran,
						})
				else:# Branches
					DictResult.update({
						'DrCategory':IntExpenseCat,
						'CrCategory':IntPayableCat,
						'DrMode':'Direct',
						'CrMode':'Direct',
						'Transaction':AccrPayableTran,
						})

			elif Opearation == "Interest Capitalization":

				if isHeadOffice:# Head Office
					DictResult.update({
						'DrCategory':IBACategory,
						'CrCategory':AccrReceivableCat,
						'DrMode':'',
						'CrMode':'Direct',
						'Transaction':IntExpenTran,
						})
				else:# Branches
					DictResult.update({
						'DrCategory':IntPayableCat,
						'CrCategory':IBACategory,
						'DrMode':'Direct',
						'CrMode':'',
						'Transaction':IntExpenTran,
						})

		else:#b) Head Office Own Branches
			if Opearation == "Accrued Daily":

				if isHeadOffice:# Head Office
					DictResult.update({
						'DrCategory':IntExpenseCat,
						'CrCategory':IntPayableCat,
						'DrMode':'Direct',
						'CrMode':'Direct',
						'Transaction':AccrPayableTran,
						})
				else:# Branches
					DictResult.update({
						'DrCategory':AccrReceivableCat,
						'CrCategory':IntIncomeCat,
						'DrMode':'Direct',
						'CrMode':'Direct',
						'Transaction':AccrIntReceiTran,
						})

			elif Opearation == "Interest Capitalization":

				if isHeadOffice:# Head Office
					DictResult.update({
						'DrCategory':IntPayableCat,
						'CrCategory':IBACategory,
						'DrMode':'Direct',
						'CrMode':'',
						'Transaction':IntExpenTran,
						})
				else:# Branches
					DictResult.update({
						'DrCategory':IBACategory,
						'CrCategory':AccrReceivableCat,
						'DrMode':'',
						'CrMode':'Direct',
						'Transaction':IntExpenTran,
						})
	else:
		raise ValueError('Cateogry Due To HO: Balance Type not found.')

	return DictResult