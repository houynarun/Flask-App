from app.AssetClass.models 		import *
from app.LoanContract.models 	import *
from app.PD.models 				import *
from app 						import db
from sqlalchemy 					import or_, func
from datetime 									import date, datetime, timedelta

import app.tools.mktdate 						as mktdate
import app.tools.mktloan 						as mktloan
import app.tools.mktsetting 					as mktsetting

def setLoanWatchDay():
	"""
		Method to calculate WatchDay of loan contract. 
		WatchDay is calculated using following formular:
		if NextMonthEnd == SystemDate:
			if PastDueObj:
				=>LoanObj.WatchDay = AssetObj.WatchDay
		else:
			LoanWatchDay -= 1 if LoanWatchDay > 0 else 0
			if LoanObj.WatchDay == 0 and LoanObj.AssetClass > 0:
				LoanObj.WatchDay=AssetObj.WatchDay

		Raises:
			Exception: raise all exceptions
	"""
	BankDateObj 	= mktdate.getBankDateObj()
	NextMonthEnd 	= datetime.strptime(str(BankDateObj.NextMonthEnd), "%Y-%m-%d").date()
	SystemDate 		= datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date()
	# This configuration in MKT_ASSET_CLASS.
	# {'PR ':' TotPrincipalDue', 'IN ':'TotInterestDue', 'PE':'TotPenaltyDue', 'CH':'TotChargeDue'}

	LoanList = db.session.query(MKT_LOAN_CONTRACT).\
							join(MKT_PAST_DUE, MKT_LOAN_CONTRACT.ID==MKT_PAST_DUE.LoanID).\
							filter(or_(MKT_PAST_DUE.TotPrincipalDue>0, MKT_PAST_DUE.TotInterestDue>0 , MKT_PAST_DUE.TotChargeDue>0, MKT_LOAN_CONTRACT.WatchDay!='0')).\
							all()
	AssetClassList = db.session.query(MKT_ASSET_CLASS)
	AssetClassProList = db.session.query(MKT_ASSET_CLASS_PRO)
	try:
		if LoanList:

			for LoanObj in LoanList:

				LoanPDID = 'PD%s' %LoanObj.ID
				AssetClass = '%s-%s' %(LoanObj.AssetClass, LoanObj.LoanProduct)
				# getting AssetClassLoanPD which has configuration AmountType.
				AssetClassLoanPD = AssetClassList.filter(MKT_ASSET_CLASS.ID==AssetClass).first()
				if not AssetClassLoanPD:
					AssetClassLoanPD = AssetClassList.filter(MKT_ASSET_CLASS.ID==LoanObj.AssetClass).first()
				AmountType = AssetClassLoanPD.AmountType

				#this setting is reset option of watch day
				#value could be
				#1. MonthEnd => reset watch day in end of month in case day late not yet settle
				#2. 5 		 => reset watch day when late over 5 days and not yet settle pd. this option can be other number its measurable is day.
				WATCHDAY_RESET_GRACE_PERIOD = mktsetting.getAppSetting('WATCHDAY_RESET_GRACE_PERIOD')
				if not WATCHDAY_RESET_GRACE_PERIOD:
					WATCHDAY_RESET_GRACE_PERIOD = "MonthEnd"

				#this block for calculate first loan late based on amount type config in asset class
				PastDueDateObj = db.session.query(MKT_PD_DATE).\
										filter(MKT_PD_DATE.ID==LoanPDID)
				
				if AmountType.split():
					AmountTypeList = AmountType.split()
					ListCondition = []
					if 'PR' in AmountTypeList:
						ListCondition.append(MKT_PD_DATE.OutPriAmount > 0)
					if 'IN' in AmountTypeList:
						ListCondition.append(MKT_PD_DATE.OutIntAmount > 0)
					if 'PE' in AmountTypeList:
						ListCondition.append(MKT_PD_DATE.OutPenAmount > 0)
					if 'CH' in AmountTypeList:
						ListCondition.append(MKT_PD_DATE.OutChgAmount > 0)

					PastDueDateObj = PastDueDateObj.filter(or_(*ListCondition)).\
										order_by(MKT_PD_DATE.DueDate.asc()).first()
				#end

				DueDate = str(PastDueDateObj.DueDate) if PastDueDateObj else ''
				SysDate = str(SystemDate)
				FirstDueDate = str(LoanObj.FirstDueDate)
				LoanWatchDay = int(LoanObj.WatchDay)		

				#calculate day late for check whether it over grace period
				NumDayLate = ""
				if DueDate:
					NumDayLate = mktdate.getDateDiff(DueDate,SysDate)

				# print "**" * 50
				# print "NumDayLate ", NumDayLate

				#for Restructure Loan and Normal Loan
				#for set First late day to loan contract
				#used for both grace period
				if not LoanObj.FirstDueDate and LoanObj.AssetClass!='0':
					LoanObj.FirstDueDate = DueDate 

				#1. decrement watch day for loan have pd
				#2. reset watch day
				#case loan not yet pay all pd, need to decrement watch day or not based on grace period configuration
				if WATCHDAY_RESET_GRACE_PERIOD == "MonthEnd":
					#case loan late in month, still decrement watch day 
					#Loan Late in month should be decrement. 
					#used for mode grace period = MonthEnd
					if DueDate[:7] == SysDate[:7] and DueDate[:7] == FirstDueDate[:7]:
						# When the WatchDay equal to 0 mean that AssetClass should be class 0.
						LoanWatchDay -= 1 if LoanWatchDay > 0 else 0
						LoanObj.WatchDay = LoanWatchDay if int(LoanObj.WatchDay)-1 > 0 else '0'

					if NextMonthEnd == SystemDate:
						if PastDueDateObj:
							# getting MKT_ASSET_CLASS_PRO which configuration WatchDay.
							AssetObj = AssetClassProList.filter(MKT_ASSET_CLASS_PRO.LoanType==LoanObj.LoanType).\
											filter(MKT_ASSET_CLASS_PRO.ID==AssetClass).\
											filter(LoanObj.MoreThanOneYear==MKT_ASSET_CLASS_PRO.MoreThanOneYear).\
											first()
							if not AssetObj:
								AssetObj = AssetClassProList.filter(MKT_ASSET_CLASS_PRO.LoanType==LoanObj.LoanType).\
												filter(MKT_ASSET_CLASS_PRO.ID==LoanObj.AssetClass).\
												filter(LoanObj.MoreThanOneYear==MKT_ASSET_CLASS_PRO.MoreThanOneYear).\
												first()
							# reset the loan's WatchDay depend on the Asset Class Pro.
							LoanObj.WatchDay = AssetObj.WatchDay

				else:
					#case grace period not yet over will decrement watch day
					#used for mode grace period = 5
					if NumDayLate:
						if int(NumDayLate) <= int(WATCHDAY_RESET_GRACE_PERIOD):
							LoanWatchDay -= 1 if LoanWatchDay > 0 else 0
							LoanObj.WatchDay = LoanWatchDay if int(LoanObj.WatchDay)-1 > 0 else '0'
						else:
							# getting MKT_ASSET_CLASS_PRO which configuration WatchDay.
							AssetObj = AssetClassProList.filter(MKT_ASSET_CLASS_PRO.LoanType==LoanObj.LoanType).\
											filter(MKT_ASSET_CLASS_PRO.ID==AssetClass).\
											filter(LoanObj.MoreThanOneYear==MKT_ASSET_CLASS_PRO.MoreThanOneYear).\
											first()
							if not AssetObj:
								AssetObj = AssetClassProList.filter(MKT_ASSET_CLASS_PRO.LoanType==LoanObj.LoanType).\
												filter(MKT_ASSET_CLASS_PRO.ID==LoanObj.AssetClass).\
												filter(LoanObj.MoreThanOneYear==MKT_ASSET_CLASS_PRO.MoreThanOneYear).\
												first()
							# reset the loan's WatchDay depend on the Asset Class Pro.
							LoanObj.WatchDay = AssetObj.WatchDay
				
				#decrement watch day for loan do not have pd
				#case when loan paid all pd, and need to decrement watchday in contract	
				#used for both grace period
				if not PastDueDateObj:
					# When the WatchDay equal to 0 mean that AssetClass should be class 0.
					LoanWatchDay -= 1 if LoanWatchDay > 0 else 0
					LoanObj.WatchDay = LoanWatchDay
					#FirstDueDate will always update to system date so that block late in month still decrement could work...
					LoanObj.FirstDueDate = SysDate if int(LoanObj.WatchDay)-1 > 0 else ''

				#case have pd and watch day = 0 and asset class > 0 
				#use for update watch day to loan contract based on its asset class
				#use in case loan contract asset class move to class that should set watch day
				#Ex: move from class 11 to 20, will set watch day here...
				#used for both grace period
				if LoanObj.WatchDay == '0' and LoanObj.AssetClass > '0':
					AssetObj = AssetClassProList.filter(MKT_ASSET_CLASS_PRO.LoanType==LoanObj.LoanType).\
										filter(MKT_ASSET_CLASS_PRO.ID==AssetClass).\
										filter(LoanObj.MoreThanOneYear==MKT_ASSET_CLASS_PRO.MoreThanOneYear).\
										first()
					if not AssetObj:
						AssetObj = AssetClassProList.filter(MKT_ASSET_CLASS_PRO.LoanType==LoanObj.LoanType).\
										filter(MKT_ASSET_CLASS_PRO.ID==LoanObj.AssetClass).\
										filter(LoanObj.MoreThanOneYear==MKT_ASSET_CLASS_PRO.MoreThanOneYear).\
										first()
					LoanObj.WatchDay=AssetObj.WatchDay

				db.session.add(LoanObj)

			db.session.commit()
	except Exception as e:
		db.session.rollback()
		raise

