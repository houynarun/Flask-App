from app.mktcore.imports 			import *
from flask 							import request,Response
from datetime 						import datetime 
import decimal 						
from app.tools.mktbatchupload 		import batchupload
from app.Account.models 			import *
from app.Customer.models 			import *
from app.PaymentGateway.models 		import *
from app.Currency.models 			import *
from app.PaymentGateway.models 		import *
from app.PaymentGateway.forms 		import FRM_PAYMENT_GATEWAY
from app.mktcore.authentication 	import getToken
import app.tools.mktmoney 			as mktmoney
import app.tools.mktsetting 		as mktsetting
import app.tools.mktautoid 			as mktautoid
from app.tools.mktapirequest 		import api_request
import requests,json
import app.tools.mktaudit 			as mktaudit
import app.tools.mktdate 			as mktdate
import app.tools.mktdb 				as mktdb
from urllib import urlencode
import urlparse 
import socket
import threading
import logging


class CLS_PAYMENT_INFO(object):
	"""docstring for CLS_PAYMENT_INFO
	- base class for payment agents
	- query all payment info 
	- record history of client requests into table payment gateway
	- response data to clients request
	"""
	SSL_VERIFY = mktsetting.getAppSetting("SSL_VERIFY")
	SSL_VERIFY = False if SSL_VERIFY=='N' else True
	def getPayment(self,Dict):
		pass

	def postPayment(self,Dict):
		"""
		- def : save history of clients request to table, response data to client requesting
		-Param:
			- param type tuple
			Dict ={
					"GatewayType":"",
					"DictGateway":""
			}
			- Status= ""

		"""
		Dict ,Status = Dict
		GatewayType  = Dict.get("GatewayType")
		DictGateway  = Dict.get("DictGateway",{})

		DictResult 	 = Dict.get("DictResponse") # response request data
		Branch 		 = DictGateway.get("Branch",'Unknown')
		# define audit trail
		Audit 	=	{ 	"Branch"		: Branch,
						"Inputter"		: "System",
						"Curr"			: "-1",
						"Authorizeon"	: mktdate.getDateTimeNow(),
						"Createdon"		: mktdate.getDateTimeNow(),
						"Authorizer"	: "System",
						"Status"		: "AUTH"}
		DictGateway.update(Audit)		

		# request header
		headers = {	
					'AuthorizationKey'	: request.headers['AuthorizationKey'],
					'Accept'       		: "application/json",
					'Content-Type'		: "application/json"}

		host 	=	self.getApiBaseUrl()
		UrlGateway = host+"PaymentGateway/"
		
		#post to form payment gateway record
		Message,Code=api_request.postForm(url= UrlGateway,data=DictGateway,headers=headers,Branch=Branch)
		
		if Code !=200:
			Message = self.formatMessage(Message)
			if GatewayType=="Wing":
				"""
				update fail status and message for Wing respnose
				"""
				DictResult.update({"response_code":Code,
								  "response_message":Message})
			elif GatewayType =="Payment":
				"""
				update fail status and message for Payment respnose
				"""
				DictResult.update({"StatusCode":Code,
								  "Message":Message})

		return DictResult,Code

	def postAndAuthorize(self,url="",data="",headers="",GatewayID=""):
		"""
		-def : manage posting form and authorize and also manage fail or success request
		-param:
			- url : - posting url . ex http://192.158.1.11:5000/Morakot/DepositBank/
					- Authorize url ex http://192.158.1.11:5000/Morakot/DepositBank/Authorize/CU00222/
			- data : use for posting
			- headers : use for access permission
		- return :
			- type (dict):
			{
				"StatusCode":200 or 4xx (unexpectd fail),
				"Message":Transaction successfuly
			}
		"""
		Branch 			= 	data.get("Branch","") #to override branch
		Inputter 		= 	data.get("Inputter")# to override inputter
		ID 				= 	data.get("ID") # payment gateway ID
		GatewayStatus 	= 	"" # 1 success ,2 fail
		DictResult 		= 	{}
		Message,Code	= 	api_request.postForm(url= url,data=data,headers=headers,Branch=Branch,Inputter=Inputter)
		if Code == 200:
			"""
			successfuly insert record to table
			"""
			Message 		= self.formatMessage(Message)
			GatewayStatus 	= 2 # success
			DictResult.update({"StatusCode":Code,
							   "Message":Message})
		else:
			"""
			fail insert record to table
			"""
			GatewayStatus = 3 # fail
			Message 	  = self.formatMessage(Message)
			DictResult.update({"StatusCode":Code,
								"Message":"%s"%Message})
		try:
			# move record to hist
			# Curr = mktaudit.moveAUTHtoHIST(MKT_PAYMENT_GATEWAY,MKT_PAYMENT_GATEWAY_HIST,GatewayID)

			# update gateway status
			Record = {"GatewayStatus":GatewayStatus,
					  "Attribute8":Message}
			mktdb.updateRecord(MKT_PAYMENT_GATEWAY,[MKT_PAYMENT_GATEWAY.ID==GatewayID],Record)
			db.session.commit()
			# move success record from MKT_PAYMENT_GATEWAY to MKT_PAYMENT_GATEWAY_RESERVE
			if GatewayStatus==2:
				PaymentGatewayObj = MKT_PAYMENT_GATEWAY.query.get(GatewayID)
				if PaymentGatewayObj:
					Data = {}
					Data.update(PaymentGatewayObj.__dict__)
					if "_sa_instance_state" in Data.keys():
						del Data['_sa_instance_state']
					# copy record to MKT_PAYMENT_GATEWAY_RESERVE
					PaymentReserveObj = MKT_PAYMENT_GATEWAY_RESERVE(**Data)
					db.session.add(PaymentReserveObj)
					# del record from MKT_PAYMENT_GATEWAY
					mktdb.deleteRecord(MKT_PAYMENT_GATEWAY,[MKT_PAYMENT_GATEWAY.ID==GatewayID])
					db.session.commit()
		except Exception as e:
			db.session.rollback()
			print e

		return DictResult

	def formatMessage(self,Message):
		"""
		-def : extract message from http request 
		"""
		Dict 	= 	eval(Message)
		if Dict.get("message").get("message"):
			Message = Dict.get("message").get("message")[0]
		else:
			# require field
			Message = []
			for Key ,Value in Dict.get("message").iteritems():
				Message.append("%s: %s"%(Key,str(Value)))
		
		return Message

	def responseFormat(self,data,status):
		"""
		- def : formate response data
		"""
		response 	 = Response(response=json.dumps(data),
								status=status,
								mimetype="application/json")
		return response


	def getPaymentInfo(self,Account):
		"""
			- def : provide three informations such as Account , Loan , Customer inforamtion by provide account id.  
			- param : 
				- kwargs = {
							"Where":{ ColumnName:Value}
							"Table":"MKT_ACCOUNT"}
			- rtype:
					{
						"AccountInfo":{"ID":"DD01","Branch":"HO",}
						"LoanInfo": {"ID":"LC01","Branch":"HO"}
						"CustomerInfo":{"ID":"CU001","Branch":"HO"}
					}
		"""

		ID 			= 	Account #drawdown account id
		ID 			= self.getDDAMapping(ID)
		IsActive 	= True
		AccObj 		= 	db.session.query(MKT_ACCOUNT).filter(MKT_ACCOUNT.ID==ID).first()
		WingOptionResponse= mktsetting.getAppSetting('WING_OPTION_RESPONSE') # setting for success/fail respont when dda not found in system
		WingOptionDDAClose = mktsetting.getAppSetting('WING_OPTION_DDA_CLOSE') if mktsetting.getAppSetting('WING_OPTION_DDA_CLOSE') else 'Y' # settign for syccess/fail respont when dda have in system but status closed.
		if AccObj:
			if WingOptionDDAClose=='N':
				if AccObj.AccStatus=='O':
					CustomerInfoDict = 	None
					CustomerID 	 =	AccObj.CustomerList
					CusObj 		 = 	db.session.query(MKT_CUSTOMER).filter(MKT_CUSTOMER.ID==CustomerID).first()
					if CusObj:
						CustomerInfoDict = self.queryObjToDict(CusObj)

					Dict = {"AccountInfo":self.queryObjToDict(AccObj),
							"CustomerInfo":CustomerInfoDict}
					Status = True
				else:
					IsActive = False
					Dict = {"AccountInfo":{"ID":Account},
							"CustomerInfo":"",
							"IsActive":IsActive}
					Status = False
			else:
				CustomerInfoDict = 	None
				CustomerID 	 =	AccObj.CustomerList
				CusObj 		 = 	db.session.query(MKT_CUSTOMER).filter(MKT_CUSTOMER.ID==CustomerID).first()
				if CusObj:
					CustomerInfoDict = self.queryObjToDict(CusObj)

				Dict = {"AccountInfo":self.queryObjToDict(AccObj),
							"CustomerInfo":CustomerInfoDict}
				Status = True
		else:
			"""return none"""
			Dict = {"AccountInfo":{"ID":Account},
					"CustomerInfo":""}
			Status = False
			if WingOptionResponse=='Y':
				Status = True

		return Dict,Status
	def getDDAMapping(self,ACCID):
		"""
		-Def:
		this function is used for mapping old DDA with New DDA.
		it meant that for some MFI or Bank they have changed from old Customer'DDA to new DDA to adjust with System but customer still using old DDA.

		-Para:
		ACCID = refter Account ID
		-Return:
			1. if ACCID not found in mapping 
			return ACCID
			2. if ACCID found in mapping
			return NewDDA
		"""

		DDAMapping = mktsetting.getAppSetting("DDA_MAPPING")
		if DDAMapping:
			DDAList = DDAMapping.split('\r')
			for DDA in DDAList:
				DDA = DDA.replace('\n','')
				DDA = DDA.split('*')
				if ACCID ==DDA[0]:
					DDA= DDA[1]
					return DDA
				else:
					DDA = ACCID
		else:
			DDA = ACCID
		return DDA

	def queryObjToDict(self,Obj):
		"""
		convert query obj to dictonary and return dictionary of row
		"""
		Dict = Obj.__dict__
		if '_sa_instance_state' in Dict:
			del Dict['_sa_instance_state']
		return Dict
	
	def gatewayID(self):
		GatewayID 	= mktautoid.getAutoID("FRM_PAYMENT_GATEWAY")
		return GatewayID

	def getGatewayMapping(self,GatewayType="",Opreation=""):
		"""
		-def : looking form mapping by configuring setting and for all payment gateway from Wing ,True Money or Morakot Payment use the same form mapping
		-params:
			- GatewayType: use to be come a ID for getting gateway mapping setting.it comes from param of Url
							/Morakot/API/PaymentGateway/<string:GatewayType>
						Ex. URL
							prefix= GatewayType
							- /Morakot/API/PaymentGateway/TrueMoney
								- prefix 					= "TrueMoney"
								- TureMoneyGatewayMappingID = prefix.upper()+"_GATEWAY_MAPPING"
							- /Morakot/API/PaymentGateway/Wing
								- prefix 					= "Wing"
								- WingGatewayMappingID 		= prefix.upper()+"_GATEWAY_MAPPING"
						Note: please keep prefix and GatewayType the same string
		sign : Borin
		"""
		if Opreation=="D":
			GatewayType="Deposit" # get form deposit mapping
		else:
			GatewayType="Withdrawal" # get form withdrawal mapping
		Gateway = mktsetting.getAppSetting(GatewayType.upper()+'_GATEWAY_MAPPING')
		Gateway = self.splitStarFromFieldMapping(Gateway)
		return Gateway

	def splitStarFromFieldMapping(self,value):
		"""
			def : split star out from  app setting mapping field
			param: 
				- value type(string): ex."ID*reference
										  Name*CustomerName
										 "
			rtype:
				-type(Dict)
				-ex.{'ID':'referency',
					 'Name':'CustomerName'}
		sign : Borin

		"""

		List = value.split("\n")
		Dict = {}
		for item in List:
			if item:
				ListKeyValue =item.split("*")
				Dict.update({ListKeyValue[0]:ListKeyValue[1].split("\r")[0]})
		return Dict

	def getMappingData(self,ID,GatewayType,Currency="",Audit="",FormUrl="",Source= "AUTH",headers=""):
		"""
		-def : look up mapping
		- param:
			- ID : payment gateway id
			- GatewayType : string that use to conate with "_GATEWAY_MAPPING" to get app setting maaping 
			- Currency : use to get currency obj,
			- Form : use to get form url
			- headers: use in htt request to use api
		- return :
			- type (Dict): dict result of form ,so we use this result to insert vai api 
		"""
		SystemDate	 	=	mktdate.getBankDate()
		CurrencyObj 	= 	MKT_CURRENCY.query.get(Currency)
		Host 			=   mktsetting.getUrlSetting()+"/Morakot/API/"
		if Source=="AUTH":
			QueryObj 	=	MKT_PAYMENT_GATEWAY.query.get(ID)
		else:
			QueryObj 	=	MKT_PAYMENT_GATEWAY_INAU.query.get(ID)

		DictResult = {}
		if QueryObj:
			# Dict 	=	self.queryObjToDict(QueryObj)
			Dict 	= QueryObj.__dict__
			DictMapping = self.getGatewayMapping(GatewayType,QueryObj.Operation)

			if DictMapping:
				for Key,Value in DictMapping.iteritems():
					if Value in Dict.keys():
						#Value is key of Dict
						Value = Dict.get(Value) 
					if isinstance(Value,decimal.Decimal):
						Value 	= mktmoney.toMoney(float(Value),CurrencyObj)	 # Json not support Decimal format
					DictResult.update({Key:Value})
			else:
				return None
		else:
			return None
		Audit.update({"Authorizer":""}) # Authorizer contain value so that we need cast to null 
		DictResult.update({
						   "TranDate":str(SystemDate)})
		DictResult.update(Audit) # updae audit trail
		
		Url  	=	Host+"%s/New"% FormUrl # url new form ,example /Morakokt/API/Customer/New
		DictHotField 	=	self.getHotField(url= Url,data=DictResult,headers= headers) # get hot field value 
		DictResult.update(DictHotField) # update hot field value to form dictionary
		return DictResult

	def generateSessionKey(self,Prefix="MKT"):
		"""
		def - generate key
		"""
		Date                =   datetime.now()
		FormatDate          =   Date.strftime("%y%m%d%H%M%S")

		return Prefix+FormatDate

	def getDictPaymentGateway(self):
		"""
		this defalut dictionary contain field of form payment gateway
		"""
		Dict = {
							"ID":self.gatewayID(),
							"Account"		: "",
							"Reference"		: "",
							"Amount"		: "",
							"Currency"		: "",
							"GatewayStatus"	: "",
							"GatewayType"	: "",
							"Mobile1"		: "",
							"Session"		: "",
							"Purpose" 		: "",
							"Attribute1"	: "",
							"Attribute2"	: "",
							"Attribute3"	: "",
							"Attribute4"	: "",
							"Attribute5"	: "",
							"Attribute6"	: "",
							"Attribute7"	: "",
							"Attribute8"	: ""
							}
		return Dict

	def getHotField(self,url="",data="",headers=""):
		"""
		def - get value for hot field, in this case if each field that existing value it not take value form other hot filed
		param 
			- url : url for getting form properties
			- headers : use to access api
			- data : some field of form has data but some hot field not yet.
		return:
			- rtype : Dict
			- return value : value of hot field. 

		"""
		Data ,StatusCode = 	api_request.postAuthorize(url=url,headers=headers) # get from property
		DictResult 		 = {}
		if StatusCode==200:
			Data 		 	 =	eval(Data)
			
			DictProperty 	 = 	Data.get("data",{}).get("properties")
			ID  			 =	Data.get('record_id')
			# Host 			 =  request.url.split("/Morakot")[0]+"/Morakot"
			Host 			 =  mktsetting.getUrlSetting()+"/Morakot/API/" if mktsetting.getUrlSetting() else request.url.split('Morakot')[0]+"Morakot/API"
			print "url --------------------->",Host
			for Row in DictProperty:
				HotField 	=	Row.get("hot_field")
				if HotField:
					SetValueTo 	= HotField[0].get('set_value_to')
					Action 		= HotField[0].get("action") 
					Action 		= Host + self.getParamFromUrl(Action,data) # url to get hot field value
					Result		= requests.request("GET",Action,headers=headers,verify=self.SSL_VERIFY)
					Result 		= eval(Result.text)

					# loop field that gonna pass
					for Item in SetValueTo:
						# hot field is type data
						if Item.get("type")=="Data":
							for Key,Value in Item.iteritems():
								if Key!="type":
									Value 	=	Result.get(Value,"") # get value from Result
									if not data.get(Key):
										DictResult.update({Key:Value})
			DictResult.update({"ID":ID})

		return DictResult

	def getParamFromUrl(self,Url,Data):
		"""
		url for getting hot field value
		"""
		Url 	 	= urlparse.urlparse(Url)
		DictParam 	= urlparse.parse_qs(Url.query) # get query param from url
		Param 		= {}	
		for Key,Value in DictParam.iteritems():
			Value  = Data.get(Value[0])
			Param.update({Key:Value})

		Query 	= urlencode(Param) # encode query field
		Action = Url.path+"?"+Query # append url param
		return Action

	def getFormUrl(self,GatewayType):
		UrlRegister = batchupload.getRegisterFormUrl()
		Form  	=	mktsetting.getAppSetting("PAYMENT_GATEWAY_FORM") # looking up the form name that gonna use with payment gateway
		Form  	= UrlRegister.get(Form) # get url of form anme
		return Form # return form's url

	def getApiBaseUrl(self):
		"""
		return :
			- url
		ex. http://localhost:3300/Morakot/API/
		"""
		Domain = mktsetting.getUrlSetting()
		# IP =  socket.gethostbyname(socket.gethostname())
		host = "%s/Morakot/API/"%Domain
		return host

	def getQueuePayment(self,ID=""):
		"""
		-Def: executing queue payment.
		-Param:
			-ID : Payment Gateway ID
		- Return:
			- rtype :
				Dict
		"""
		try:
			SettingObj 	  = mktsetting.getSetting()
			SYSTEM_STATUS = int(SettingObj.SYSTEM_STATUS)
			Result = True,""			
			if SYSTEM_STATUS==1: # Systme online
				# select Queue record				
				PaymentGatewayObj =		db.session.query(MKT_PAYMENT_GATEWAY).\
													filter(MKT_PAYMENT_GATEWAY.GatewayStatus.in_(['1','4']),
														  MKT_PAYMENT_GATEWAY.Purpose=='2').\
													order_by(MKT_PAYMENT_GATEWAY.ID).\
													limit(5)
				if PaymentGatewayObj.first():
					Username = mktsetting.getAppSetting("GATEWAY_USER") if mktsetting.getAppSetting("GATEWAY_USER") else "System"
					headers ={	
								'Accept'       		: "application/json",
								'Content-Type'		: "application/json"}

					Audit 	=	{ 	"Branch"		: "",
								"Inputter"		: Username,
								"Curr"			: "-1",
								"Authorizer"	: Username,
								"Status"		: "AUTH"}

					for Row in PaymentGatewayObj:
						Audit.update({
								"Authorizeon"	: mktdate.getDateTimeNow(),
								"Createdon"		: mktdate.getDateTimeNow()
								})
						Token 			= self.getRequestLogin()
						headers.update({"AuthorizationKey":Token})
						GatewayID 		= Row.ID
						GatewayType 	= self.getGatewayType(Row.GatewayType)
						FormUrl 		= self.getFormUrl(GatewayType)						
						AccObj 			=	MKT_ACCOUNT.query.get(Row.Account)
						if AccObj:
							Audit.update({"Branch":AccObj.Branch})
						else:
							Audit.update({"Branch":Row.Branch})
						Data 	= self.getMappingData(GatewayID,GatewayType,Currency=Row.Currency,FormUrl=FormUrl,Audit=Audit,headers=headers)
						Url 	= self.getApiBaseUrl()+FormUrl+"/?accept=override" # set auto accept override
						Result  = self.postAndAuthorize(url=Url,data=Data,headers=headers,GatewayID=GatewayID)
						Result = True, Result
				else:
					Result = True, "\tNo record found."
					
			return Result
			
		except Exception, e:
			print str(e)
			db.session.rollback()
			db.session.close()
			return False, str(e)
		finally:
			# print "finally"
			db.session.close()

	def getRequestLogin(self):
		"""
		Get token
		"""
		Username = mktsetting.getAppSetting("GATEWAY_USER")
		Password = mktsetting.getAppSetting("GATEWAY_PASSWORD")
		url 	= self.getApiBaseUrl()+"Login" # route to get token

		payload = {
					"LogInName":Username,
					"Password":Password}

		headers = {"Content-Type":"application/json",
					"Accept":"application/json"}
		r = requests.request("POST",url,data= json.dumps(payload),headers=headers,verify=self.SSL_VERIFY).text
		r = eval(r)
		token = r.get("token")
		return token

	def getGatewayType(self,Value):
		"""
			define client payment
		"""

		DictGatewayType = {
							"1":"Wing",
							"2":"TrueMoney",
							"3":"Payment"
							}
		return DictGatewayType.get(Value)
