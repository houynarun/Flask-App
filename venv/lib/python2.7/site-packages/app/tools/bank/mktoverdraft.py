
from app.mktcore.imports 	import *
from app import app,db
from sqlalchemy import or_
from sqlalchemy.orm.session import make_transient
from decimal 					import *
from app.Officer.models 		import MKT_OFFICER
from app.Customer.models 		import *
from app.Account.models 		import *
from app.CashAccount.models 	import *
from app.Branch.models 			import *

from app.AssetClass.models 			import *
from app.AccProduct.models			import *
from app.OverdraftContract.models 	import *

import app.mktcore.autoid 					as mktautoid
import app.tools.mktdate					as mktdate
import app.tools.user 						as mktuser
import app.tools.mktsetting 				as mktsetting
import app.tools.mktparam 					as mktparam
import app.tools.mktdb 						as mktdb
import app.tools.mktaudit 					as mktaudit
import app.tools.mktpdcollection 			as mktpdcollection
import app.tools.mktmoney 					as mktmoney
import app.tools.mktloan 					as mktloan
import app.tools.mktkey 					as mktkey
import app.tools.mktbjstat					as mktbjstat
import app.tools.mktaccounting 				as mktaccounting
import app.tools.mktteller 					as mktteller
import app.tools.loantools.rescheduletools 	as mktreschedule

class OVERDRAFT():
	"""docstring for OVERDRAFT"""
	def __init__(self):
		# super(OVERDRAFT, self).__init__()
		self.BankDateObj 		=	mktdate.getBankDateObj()
		self.AccSetting 		= 	mktsetting.getAccSetting()
		self.BankDate 			=	self.BankDateObj.SystemDate
		self.PDParamObj 		= 	mktparam.getPDParam()
		self.TranDate 			=	self.BankDate
		self.AssetClassObj 		=	MKT_ASSET_CLASS.query
		self.ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
		self.AccProduct 		=	None
		self.ODSuspendCat 		= 	mktsetting.getAppSetting('ODSuspendCat')
		self.ODCapitalizeTran	= 	mktsetting.getAppSetting('ODCapitalizeTran')
		self.ODClassChangeTran	= 	mktsetting.getAppSetting('ODClassChangeTran')
		self.DateTimeNow 		= 	mktdate.getDateTimeNow()

	def getODContract(self, BankDate):
		return MKT_OVERDRAFT_CONTRACT.query.filter(MKT_OVERDRAFT_CONTRACT.NextRunDate == BankDate).\
				filter(MKT_OVERDRAFT_CONTRACT.ValueDate <= BankDate)

	'''
		Set daily overdraft accrual
		Overdraft will do accrual every day by posting
			Dr 	Accrual Interest Recievable
				Cr 	Interest Income/In Suspend

		It will capitalize base on contract(Monthly,Weekly,...) by posting 
			Dr 	Overdraft Account
				Cr 	Interest Income/In Suspend

		In case contract reach or over maturity date if account has enought balance it'll 
		collect interest and move contract to historical record else contract will classify to other class 
		base on number of day late.

	'''
	def setAccrODAccount(self, EOD=1, Counter=''):
		try:
			AccProductObj	=	MKT_ACC_PRODUCT.query
			Transaction 	= 	self.AccSetting.DrAccrIntTran
			ODCObj 			=	self.getODContract(self.BankDate)

			if ODCObj:
				Settingk1			= 	self.AccSetting.GL_KEY1
				Settingk2 			= 	self.AccSetting.GL_KEY2
				Settingk3 			= 	self.AccSetting.GL_KEY3
				Settingk4 			= 	self.AccSetting.GL_KEY4
				Settingk5 			= 	self.AccSetting.GL_KEY5
				Settingk6 			= 	self.AccSetting.GL_KEY6
				Settingk7 			= 	self.AccSetting.GL_KEY7
				Settingk8 			= 	self.AccSetting.GL_KEY8
				Settingk9 			= 	self.AccSetting.GL_KEY9
				JobStatus 			=	[]
				NumberOfRecord		=	ODCObj.count()
				ODSuspendCat 		= 	mktsetting.getAppSetting('ODSuspendCat')
				ODCapitalizeTran	= 	mktsetting.getAppSetting('ODCapitalizeTran')
				ODClassChangeTran	= 	mktsetting.getAppSetting('ODClassChangeTran')

				if Counter:
					return NumberOfRecord

				for od in ODCObj:
					if EOD:
						JobStatus 	=	mktbjstat.updateCompletedJobStatus('AccrualODAccount', NumberOfRecord, JobStatus)
					
					ID 				=	od.ID
					Branch 			=	od.Branch
					Account 		=	od.Account
					AccountObj 		=	MKT_ACCOUNT.query.get(Account)
					AccountBal 		=	AccountObj.Balance if AccountObj else 0
					AccountCat 		=	AccountObj.AccCategory

					CustomerID 		=	od.CustomerID
					AssetClass 		=	od.AssetClass
					NumDayDue 		=	od.NumDayDue
					MaturityDate  	=	od.MaturityDate
					ValueDate 		=	od.ValueDate
					InterestRate 	=	od.InterestRate
					Currency 		=	od.Currency
					IntCapitalize 	=	od.IntCapitalize
					AccountType 	=	od.AccountType
					Suspend 		=	od.Suspend
					Outstanding		=	od.OutstandingAmount
					CurrencyObj  	=	mktmoney.getCurrencyObj(Currency)
					self.AccProduct = 	AccProductObj.get(od.AccProduct)
					AccrReceivableCat 	= 	self.AccProduct.AccrReceivableCat	
					IntIncomeCat 		= 	self.AccProduct.IntIncomeCat
					InterestDayBasis   	=	self.AccProduct.IntDayBasis
					self.DateTimeNow 	= 	mktdate.getDateTimeNow()

					k1 = mktkey.getResultKey(Settingk1, ID, CustomerID) if Settingk1 else ''
					k2 = mktkey.getResultKey(Settingk2, ID, CustomerID) if Settingk2 else ''
					k3 = mktkey.getResultKey(Settingk3, ID, CustomerID) if Settingk3 else ''
					k4 = mktkey.getResultKey(Settingk4, ID, CustomerID) if Settingk4 else ''
					k5 = mktkey.getResultKey(Settingk5, ID, CustomerID) if Settingk5 else ''
					k6 = mktkey.getResultKey(Settingk6, ID, CustomerID) if Settingk6 else ''
					k7 = mktkey.getResultKey(Settingk7, ID, CustomerID) if Settingk7 else ''
					k8 = mktkey.getResultKey(Settingk8, ID, CustomerID) if Settingk8 else ''
					k9 = mktkey.getResultKey(Settingk9, ID, CustomerID) if Settingk9 else ''

					DoAccrual = True if od.Accrual == "Y" else False

					StopAccrOnMaturityDate = mktsetting.getAppSetting('StopAccrODOnMaturityDate')
					if MaturityDate < self.BankDate and StopAccrOnMaturityDate == "Y":
						DoAccrual = False

					GL_Receivable 	= 	mktaccounting.getConsolKey(AccrReceivableCat, Currency, AssetClass, "AC", "", k2, k3, k4, k5, k6, k7, k8, k9)
					InterestPerDay  = 	0
					if DoAccrual:
						if Transaction:
							InterestPerDay 	= 	mktreschedule.getInterestPerDay(float(InterestRate), float(Outstanding), float(InterestDayBasis), self.BankDate)
							Mode 			= 	"Direct"
							DrCr 			= 	"Dr"
							Note 			=	"Accrued on balance %s"%mktmoney.toMoney(float(Outstanding), CurrencyObj)
							# Debit Accrued Interest Receivable Category
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								self.DateTimeNow, 			# Createdon
								"System",				# Authorizer
								self.DateTimeNow,			# Authorizeon
								"", 					# AEID
								"",						# Account
								AccrReceivableCat,		# Category
								Currency,				# Currency
								DrCr,					# DrCr
								Decimal(InterestPerDay),# Amount
								"AC",					# Module
								Transaction, 			# Transaction
								self.BankDate, 				# TransactionDate
								ID, 					# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_Receivable,			# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
								UserReference=ID
							)

							#Get Category Int.Income or Interest In Suspend
							Category,GL_KEYS,IntCurrency,IntIncome = mktloan.getCategoryIntIncome(self.ReportingRateObj,self.PDParamObj,self.AccProduct,self.AccSetting,
																						Branch,Suspend,Currency,InterestPerDay,AssetClass,
																						"", k2, k3, k4, k5, k6, k7, k8, k9)
							
							Mode 		= "Direct"
							DrCr 		= "Cr"
							# Credit Interest Income Category
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								self.DateTimeNow, 			# Createdon
								"System",				# Authorizer
								self.DateTimeNow,			# Authorizeon
								"", 					# AEID
								"",						# Account
								Category,				# Category
								IntCurrency,			# Currency
								DrCr,					# DrCr
								Decimal(IntIncome), 	# Amount
								"AC",					# Module
								Transaction, 			# Transaction
								self.BankDate, 				# TransactionDate
								ID, 					# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
								UserReference=ID
							)

							od.AccrIntPerDay	= 	Decimal(InterestPerDay)
							od.AccrInterest 	+= 	Decimal(InterestPerDay)
							od.AccrIntCurrMonth += 	Decimal(InterestPerDay)
							AccountObj.AccrInterest += 	Decimal(InterestPerDay)
							
							if Suspend == "N":
								od.IntIncEarned	+= 	Decimal(InterestPerDay)
							
							if self.BankDate == self.BankDateObj.NextMonthEnd:
								od.AccrIntPreMonth 	= 	od.AccrIntCurrMonth
								od.AccrIntCurrMonth = 	0

							print '%s accrued %s'%(od.ID,InterestPerDay)

					od.NextRunDate = self.BankDateObj.NextSystemDate

					Capitalizeation = False
					if IntCapitalize == '1': #Daily
						Capitalizeation = True
						
					if IntCapitalize == '2' and self.BankDate == self.BankDateObj.NextWeekend: #Weekly
						Capitalizeation = True

					if IntCapitalize == '3' and self.BankDate == self.BankDateObj.NextMonthEnd: #Monthly
						Capitalizeation = True
						
					if IntCapitalize == '4' and self.BankDate == self.BankDateObj.NextYearEnd: #Yearly
						Capitalizeation = True

					if IntCapitalize == '5' and self.BankDate == MaturityDate: #Maturity Daty
						Capitalizeation = True
					''''''
					if Capitalizeation:
						AccGLKey 	= 	mktaccounting.getConsolKey(AccountCat, Currency, AssetClass, "AC", "", k2, k3, k4, k5, k6, k7, k8, k9)
						Mode 		= 	"InDirect"
						DrCr 		= 	"Dr"
						Capital 	=	Decimal(mktmoney.toMoney(float(od.AccrInterest), CurrencyObj).replace(',',''))
						DiffCapital =	Capital - od.AccrInterest

						# Debit Overdraft Account
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							self.DateTimeNow, 			# Createdon
							"System",				# Authorizer
							self.DateTimeNow,			# Authorizeon
							"", 					# AEID
							Account,				# Account
							AccountCat,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							Decimal(Capital),		# Amount
							"AC",					# Module
							self.ODCapitalizeTran, 			# Transaction
							self.BankDate, 				# TransactionDate
							ID, 					# Reference
							"", 					# Note
							"", 					# JNID
							Branch,					# Branch
							AccGLKey,			# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
							UserReference=ID
						)

						Mode 			= 	"Direct"
						DrCr 			= 	"Cr"
						# Credit Accrued Interest Receivable Category
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							self.DateTimeNow, 			# Createdon
							"System",				# Authorizer
							self.DateTimeNow,			# Authorizeon
							"", 					# AEID
							"",						# Account
							AccrReceivableCat,		# Category
							Currency,				# Currency
							DrCr,					# DrCr
							Decimal(od.AccrInterest),		# Amount
							"AC",					# Module
							self.ODCapitalizeTran, 			# Transaction
							self.BankDate, 				# TransactionDate
							ID, 					# Reference
							"", 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_Receivable,			# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
							UserReference=ID
						)

						self.adjustIncome(ID,Branch,Suspend,Currency,DiffCapital,AssetClass)
						od.IntIncEarned	+= 	Decimal(DiffCapital)

						self.moveIntSuspendToIntIncome(ID,od.Suspend,AssetClass,Branch,Currency,Capital)
						if od.Suspend == "Y":
							od.IntIncEarned	+= 	Decimal(od.AccrInterest)

						# OffBalAmount = self.getOffBalAmount(od,AccountBal,Capital)
						# self.postOffBalanceSheet(ID,OffBalAmount,Currency,Branch,TranDate='',IsWithdraw=True)

						# if ODSuspendCat and AccountBal < 0:
						# 	if abs(AccountBal) >= Capital:
						# 		self.postSuspendBalance(Branch, self.DateTimeNow, False, AccountCat,Currency, ODSuspendCat, Capital, self.TranDate, ODCapitalizeTran, ID, '', AccGLKey,UserReference=ID)
						# 	else:
						# 		self.postSuspendBalance(Branch, self.DateTimeNow, False, AccountCat,Currency, ODSuspendCat, abs(AccountBal), self.TranDate, ODCapitalizeTran, ID, '', AccGLKey,UserReference=ID)

						od.AccrInterest 		=	0
						# od.OffBalanceSheet 		-= OffBalAmount 
						# od.OutstandingAmount 	+= OffBalAmount 
						od.CapitalizedAmount	+=	Capital
						AccountObj.AccrInterest = 	0
						# self.bookProvision(od,od.OutstandingAmount,AssetClass,AssetClass)

						print '%s capitalize %s'%(od.ID,Capital)
						db.session.add(AccountObj)
						db.session.add(od)

					'''In case contract reach or over maturity date we'll check if account has enought balance we'll 
					collect interest and move contract to historical record else contract will classify to other class 
					base on number of day late. '''
					if self.BankDate >= MaturityDate: 
						if (AccountObj.Balance + od.AccrInterest) <= 0:  
							AccGLKey 	= 	mktaccounting.getConsolKey(AccountCat, Currency, AssetClass, "AC", "", k2, k3, k4, k5, k6, k7, k8, k9)
							Mode 		= 	"InDirect"
							DrCr 		= 	"Dr"
							Capital 	=	Decimal(mktmoney.toMoney(float(od.AccrInterest), CurrencyObj).replace(',',''))
							DiffCapital =	Capital - od.AccrInterest
							# Debit overdraft account
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								self.DateTimeNow, 			# Createdon
								"System",				# Authorizer
								self.DateTimeNow,			# Authorizeon
								"", 					# AEID
								Account,				# Account
								AccountCat,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								Decimal(Capital),# Amount
								"AC",					# Module
								ODCapitalizeTran, 			# Transaction
								self.BankDate, 				# TransactionDate
								ID, 					# Reference
								"", 					# Note
								"", 					# JNID
								Branch,					# Branch
								AccGLKey,			# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
								UserReference=ID
							)

							Mode 			= 	"Direct"
							DrCr 			= 	"Cr"
							# Credit Accrued Interest Receivable Category
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								self.DateTimeNow, 			# Createdon
								"System",				# Authorizer
								self.DateTimeNow,			# Authorizeon
								"", 					# AEID
								"",						# Account
								AccrReceivableCat,		# Category
								Currency,				# Currency
								DrCr,					# DrCr
								Decimal(od.AccrInterest),# Amount
								"AC",					# Module
								ODCapitalizeTran, 			# Transaction
								self.BankDate, 				# TransactionDate
								ID, 					# Reference
								"", 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_Receivable,			# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
								UserReference=ID
							)

							self.adjustIncome(ID,Branch,Suspend,Currency,DiffCapital,AssetClass)
							od.IntIncEarned	+= 	Decimal(DiffCapital)
							self.moveIntSuspendToIntIncome(ID,od.Suspend,AssetClass,Branch,Currency,Capital)

							# OffBalAmount = self.getOffBalAmount(od,AccountBal,Capital)
							# self.postOffBalanceSheet(ID,od.LimitedAmount,Currency,Branch,IsWithdraw=True)

							# if ODSuspendCat and AccountBal < 0:
							# 	if abs(AccountBal) >= Capital:
							# 		self.postSuspendBalance(Branch, self.DateTimeNow, False, AccountCat,Currency, ODSuspendCat, Capital, self.TranDate, self.ODCapitalizeTran, ID, '', AccGLKey,UserReference=ID)
							# 	else:
							# 		self.postSuspendBalance(Branch, self.DateTimeNow, False, AccountCat,Currency, ODSuspendCat, abs(AccountBal), self.TranDate, self.ODCapitalizeTran, ID, '', AccGLKey,UserReference=ID)

							mktaudit.moveAUTHtoHIST(MKT_OVERDRAFT_CONTRACT, MKT_OVERDRAFT_CONTRACT_HIST, ID)
							od.IntIncEarned			+= 	Decimal(od.AccrInterest)
							od.AccrInterest 		=	0
							AccountObj.AccrInterest	=	0
							od.CapitalizedAmount 	+=	Capital
							# od.OutstandingAmount 	+= 	OffBalAmount 
							# od.OffBalanceSheet 		-= 	OffBalAmount 
							# self.bookProvision(od,od.OutstandingAmount,AssetClass,AssetClass)
							db.session.add(AccountObj)
							db.session.add(od)

							# make_transient(od)
							mktaudit.moveAUTHtoHIST(MKT_OVERDRAFT_CONTRACT, MKT_OVERDRAFT_CONTRACT_HIST, ID)
							mktaudit.deleteAUTH(MKT_OVERDRAFT_CONTRACT,ID)

						else:
							'''Case account reach maturity date and has no enought balance '''
							od.NumDayDue 	= 	int(od.NumDayDue)+1
							NewAssetClass	=	mktpdcollection.getLoanAssetClass(od.NumDayDue, AccountType, 'N','%sA'%self.AccProduct.ID)
							od.AssetClass 	= 	NewAssetClass
							if AssetClass != NewAssetClass:
								self.changeClassOD(od,Outstanding,AccountCat,AccrReceivableCat,Suspend,AssetClass,NewAssetClass)						

							db.session.add(AccountObj)
							db.session.add(od)

					db.session.commit()

		except Exception as e:
			db.session.rollback()
			mktbjstat.makeLogFileOnError('Y')
			raise 

	def getOffBalAmount(self,od,AccountBal,Capital):
		try:
			OffBalAmount = 0
			if od.LimitedAmount >= (od.OutstandingAmount+Capital):
				OffBalAmount = Capital
			elif od.LimitedAmount < (od.OutstandingAmount+Capital):
				OffBalAmount = od.LimitedAmount - od.OutstandingAmount
			if AccountBal < 0 and (Capital + AccountBal) >= 0:
				OffBalAmount = Capital + AccountBal

			return OffBalAmount

		except Exception as e:
			raise

	def changeClassOD(self,od,Outstanding,AccountCat,AccrReceivableCat,Suspend,AssetClass,NewAssetClass,AccProductObj=''):
		try:
			print '%s changed class from %s to %s'%(od.ID,AssetClass,NewAssetClass)
			self.moveODToNewClass(AccountCat,od,AssetClass,NewAssetClass)
			self.moveAIRAccountToNewClass(AccrReceivableCat,Suspend,od,AssetClass,NewAssetClass,AccProductObj=AccProductObj)
			if Suspend != od.Suspend: od.IntIncEarned -= od.AccrInterest								
			# book provision
			self.bookProvision(od,Outstanding,AssetClass,NewAssetClass)
		except Exception as e:
			raise 

	def bookProvision(self,od,Outstanding,AssetClass,NewAssetClass):
		try:
			ProAssetClassObj= 	self.AssetClassObj.filter(MKT_ASSET_CLASS.ID.ilike('%-' + '%sA'%self.AccProduct.ID)).first()
			ProAssetClass	= 	'%s-%sA'%(AssetClass,self.AccProduct.ID) if ProAssetClassObj else AssetClass
			NewAssetClassObj= 	self.AssetClassObj.get(ProAssetClass)
			ProResvCat 		= 	NewAssetClassObj.ProResvCat
			ProvExpCat 		= 	NewAssetClassObj.ProvExpCat
			# Reverse Old Provisioning
			mktpdcollection.reverseProvisioning(od.ID, AssetClass, ProResvCat, ProvExpCat, od.Currency, "", self.TranDate, od.Branch, self.AccSetting, self.ReportingRateObj)

			ProAssetClass	= 	'%s-%sA'%(NewAssetClass,self.AccProduct.ID) if ProAssetClassObj else NewAssetClass
			NewAssetClassObj= 	self.AssetClassObj.get(ProAssetClass)
			ProResvCat 		= 	NewAssetClassObj.ProResvCat
			ProvExpCat 		= 	NewAssetClassObj.ProvExpCat
			ProvisionAmount = 	mktpdcollection.getProvisioningAmount(ProAssetClass, Outstanding, od.AccountType, 'N', od.NumDayDue)
			# Booking Provisioning To New Class
			mktpdcollection.provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, "", od.Currency, self.TranDate, od.ID, od.Branch, NewAssetClass, self.AccSetting, self.ReportingRateObj)
			
		except Exception as e:
			raise

	def adjustIncome(self, ID,Branch,Suspend,Currency,Amount,AssetClass,AccProduct='',Transaction='',
					k1='', k2='', k3='', k4='', k5='', k6='', k7='', k8='', k9=''):
		try:
			if AccProduct: self.AccProduct = AccProduct
			if not Transaction : Transaction = self.ODCapitalizeTran 
			Category,GL_KEYS,IntCurrency,IntIncome = mktloan.getCategoryIntIncome(self.ReportingRateObj,self.PDParamObj,self.AccProduct,self.AccSetting,
															Branch,Suspend,Currency,abs(Amount),AssetClass,
															"", k2, k3, k4, k5, k6, k7, k8, k9)
			Mode 		= "Direct"
			DrCr 		= "Dr"
			if Amount > 0: 
				DrCr 	=	"Cr"
			# Debit Interest Income Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				self.DateTimeNow, 			# Createdon
				"System",				# Authorizer
				self.DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				Category,				# Category
				IntCurrency,			# Currency
				DrCr,					# DrCr
				Decimal(IntIncome), 	# Amount
				"AC",					# Module
				Transaction, 			# Transaction
				self.TranDate, 				# TransactionDate
				ID, 					# Reference
				"", 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=ID
			)

		except Exception as e:
			raise 

	def moveAIRAccountToNewClass(self,AccrReceivableCat,Suspend,od,AssetClass,NewAssetClass,AccProductObj='',
								k1='', k2='', k3='', k4='', k5='', k6='', k7='', k8='', k9=''):
		try:

			GL_Receivable 	= 	mktaccounting.getConsolKey(AccrReceivableCat, od.Currency, NewAssetClass, "AC", "", k2, k3, k4, k5, k6, k7, k8, k9)
			Mode 			= 	"Direct"
			DrCr 			= 	"Dr"
			Transaction 	=	self.ODClassChangeTran
			if AccProductObj: 	self.AccProduct = AccProductObj
			# Debit Accrued Interest Receivable Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				self.DateTimeNow, 			# Createdon
				"System",				# Authorizer
				self.DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				AccrReceivableCat,		# Category
				od.Currency,				# Currency
				DrCr,					# DrCr
				od.AccrInterest,		# Amount
				"AC",					# Module
				Transaction, 			# Transaction
				self.TranDate, 				# TransactionDate
				od.ID, 					# Reference
				"", 					# Note
				"", 					# JNID
				od.Branch,					# Branch
				GL_Receivable,			# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=od.ID
			)

			GL_Receivable 	= 	mktaccounting.getConsolKey(AccrReceivableCat, od.Currency, AssetClass, "AC", "", k2, k3, k4, k5, k6, k7, k8, k9)
			Mode 			= 	"Direct"
			DrCr 			= 	"Cr"

			# Credit Accrued Interest Receivable Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				self.DateTimeNow, 			# Createdon
				"System",				# Authorizer
				self.DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				AccrReceivableCat,		# Category
				od.Currency,				# Currency
				DrCr,					# DrCr
				od.AccrInterest,		# Amount
				"AC",					# Module
				Transaction, 			# Transaction
				self.TranDate, 				# TransactionDate
				od.ID, 					# Reference
				"", 					# Note
				"", 					# JNID
				od.Branch,					# Branch
				GL_Receivable,			# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=od.ID
			)

			NewSuspend 	=	self.getSuspendStatus(self.AssetClassObj, NewAssetClass, self.AccProduct.ID)
			if Suspend == 'N' or Suspend != NewSuspend: 

				Category,GL_KEYS,IntCurrency,IntIncome = mktloan.getCategoryIntIncome(self.ReportingRateObj,self.PDParamObj,self.AccProduct,self.AccSetting,
																od.Branch,Suspend,od.Currency,od.AccrInterest,AssetClass,
																"", k2, k3, k4, k5, k6, k7, k8, k9)
				Mode 		= "Direct"
				DrCr 		= "Dr"
				# Debit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					self.DateTimeNow, 			# Createdon
					"System",				# Authorizer
					self.DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					IntCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(IntIncome), 	# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					self.TranDate, 				# TransactionDate
					od.ID, 					# Reference
					"", 					# Note
					"", 					# JNID
					od.Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					UserReference=od.ID
				)

				od.Suspend  =	NewSuspend
				db.session.add(od)

				Category,GL_KEYS,IntCurrency,IntIncome = mktloan.getCategoryIntIncome(self.ReportingRateObj,self.PDParamObj,self.AccProduct,self.AccSetting,
																od.Branch,NewSuspend,od.Currency,od.AccrInterest,NewAssetClass,
																"", k2, k3, k4, k5, k6, k7, k8, k9)
				Mode 		= "Direct"
				DrCr 		= "Cr"
				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					self.DateTimeNow, 			# Createdon
					"System",				# Authorizer
					self.DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					IntCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(IntIncome), 	# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					self.TranDate, 				# TransactionDate
					od.ID, 					# Reference
					"", 					# Note
					"", 					# JNID
					od.Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					UserReference=od.ID
				)
			
		except Exception as e:
			raise 

	def moveODToNewClass(self,Category,od,AssetClass,NewAssetClass, k1='', k2='', k3='', k4='', k5='', k6='', k7='', k8='', k9=''):
		try:

			GL_Receivable 	= 	mktaccounting.getConsolKey(Category, od.Currency, NewAssetClass, "AC", "", k2, k3, k4, k5, k6, k7, k8, k9)
			Mode 			= 	"Direct"
			DrCr 			= 	"Dr"
			# Debit Accrued Interest Receivable Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				self.DateTimeNow, 			# Createdon
				"System",				# Authorizer
				self.DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				Category,		# Category
				od.Currency,				# Currency
				DrCr,					# DrCr
				od.OutstandingAmount,		# Amount
				"AC",					# Module
				self.ODClassChangeTran, # Transaction
				self.TranDate, 			# TransactionDate
				od.ID, 					# Reference
				"", 					# Note
				"", 					# JNID
				od.Branch,					# Branch
				GL_Receivable,			# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=od.ID
			)

			GL_Receivable 	= 	mktaccounting.getConsolKey(Category, od.Currency, AssetClass, "AC", "", k2, k3, k4, k5, k6, k7, k8, k9)
			Mode 			= 	"Direct"
			DrCr 			= 	"Cr"

			# Credit Accrued Interest Receivable Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				self.DateTimeNow, 			# Createdon
				"System",				# Authorizer
				self.DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				Category,		# Category
				od.Currency,				# Currency
				DrCr,					# DrCr
				od.OutstandingAmount,		# Amount
				"AC",					# Module
				self.ODClassChangeTran,	# Transaction
				self.TranDate, 			# TransactionDate
				od.ID, 					# Reference
				"", 					# Note
				"", 					# JNID
				od.Branch,					# Branch
				GL_Receivable,			# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=od.ID
			)
			
		except Exception as e:
			raise 

	def moveIntSuspendToIntIncome(self, ID,Suspend,AssetClass,Branch,Currency,AccrInterest,IntIncomeCat=''):
		try:
			if Suspend == "Y":
				# Transaction = self.AccSetting.CrAccrIntTran
				Transaction = self.ODCapitalizeTran
				if not Transaction:
					# Call method for error message
					error_msg = "Accrued interest reversal transaction not found."
					mktmessage.setLogError(error_msg)

				else:

					Category 	= self.PDParamObj.SuspendCrCat
					if not Category:
						# Call method for error message
						error_msg = "Suspend credit category not found."
						mktmessage.setLogError(error_msg)

					GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
					Mode 		= "Direct"
					DrCr 		= "Dr"
					Note 		= ""
					# Debit Interest Income Category
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						self.DateTimeNow, 			# Createdon
						"System",				# Authorizer
						self.DateTimeNow,			# Authorizeon
						"", 					# AEID
						"",						# Account
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Decimal(AccrInterest), 		# Amount
						"AC",					# Module
						Transaction, 			# Transaction
						self.TranDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						UserReference=ID
					)

					DicEquivalent,IntCurrency,IntIncome = mktloan.getInterestMultiCurrency(self.AccSetting,self.ReportingRateObj,Branch,Currency,AccrInterest)
					
					Category = self.AccProduct.IntIncomeCat.strip() if not IntIncomeCat else IntIncomeCat
					if not Category:
						# Call method for error message
						error_msg = "Interest income category not found."
						mktmessage.setLogError(error_msg)

					GL_KEYS 	= mktaccounting.getConsolKey(Category, IntCurrency, AssetClass, "AC", "", "", "", "", "", "", "", "", "")
					Mode 		= "Direct"
					DrCr 		= "Cr"
					# Debit Interest Income Category
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						self.DateTimeNow, 			# Createdon
						"System",				# Authorizer
						self.DateTimeNow,			# Authorizeon
						"", 					# AEID
						"",				# Account
						Category,				# Category
						IntCurrency,			# Currency
						DrCr,					# DrCr
						Decimal(IntIncome), 	# Amount
						"AC",					# Module
						Transaction, 			# Transaction
						self.TranDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						UserReference=ID
					)

		except Exception as e:
			raise 

	def getSuspendStatus(self, AssetClassObj, AssetClass, AccProductID):
		try:
			
			AccClassObj 	=	AssetClassObj.get('%s-%sA'%(AssetClass,AccProductID))
			Suspend 		=	'N'
			if not AccClassObj:
				AccClassObj =	AssetClassObj.get(AssetClass)

			if AccClassObj:
				Suspend 	=	'N' if AccClassObj.IncomeRecog == 'Y' else 'Y'	

			return Suspend

		except Exception as e:
			raise 

	def postOffBalanceSheet(self, ID,Amount,Currency,Branch,TranDate='',IsWithdraw=False):
		try:

			Dict = {} 
			OffBalanceSheet = mktsetting.getAppSetting('OffBalanceSheet').splitlines()
			for o in OffBalanceSheet:
				KeyValue = o.split('*')
				Dict.update({KeyValue[0]:KeyValue[1]})

			ContraAcc 		= 	Dict.get('ContraAccountCat','')
			Transaction 	= 	Dict.get('TransactionID','')
			CommitmentCat 	= 	Dict.get('CommitmentCat','')

			if not TranDate:
				TranDate 		= 	str(mktdate.getBankDate())

			for i in [1,2]:
				if i == 1:
					DrCr 		= 	"Dr"
					Category 	=	CommitmentCat if IsWithdraw == False else ContraAcc
				else:
					DrCr 		= 	"Cr"
					Category 	=	ContraAcc if IsWithdraw == False else CommitmentCat
					
				Mode 		= "Direct"
				Note 		= ""
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, '', "AC", '', '', '', '', '', '', '', '', '')
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					self.DateTimeNow, 			# Createdon
					"System",				# Authorizer
					self.DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Amount, 				# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					UserReference=ID
				)

		except Exception as e:
			raise

	def checkODAccount(self,Account,Amount,Category,Currency,DrCr,TransactionDate,Branch):
		Acc = MKT_ACCOUNT.query.get(Account)

		if Acc.MaturityDate and Acc.LimitedAmount: 
			BalanceType 	= 	mktaccounting.getAccBalanceType(Acc.AccCategory)
			Balance = mktaccounting.calculateBalance(Category,Acc.Balance, Amount, DrCr)
			SuspDrCr 		=	''
			SuspendAmount 	= 	0	
			if DrCr == 'Cr':
				IsWithdraw = False
				if  Acc.Balance >= 0 and Balance < 0:
					SuspendAmount 	=	abs(Balance)
				if  Acc.Balance <= 0:
					SuspendAmount 	=	Amount

			if DrCr == 'Dr': 
				IsWithdraw = True
				if  Acc.Balance <= 0 and Balance <= 0:
					SuspendAmount 	=	Amount
				if  Acc.Balance < 0 and Balance > 0:
					SuspendAmount 	=	abs(Acc.Balance)

			OffBalAmount = Amount - SuspendAmount if (Amount - SuspendAmount) > 0 else 0

			ID 			= 	Account
			BankDate 	= 	str(mktdate.getBankDate())
			ProvAmount 		=	Balance if Balance > 0 else 0
			ODCObj 			=	MKT_OVERDRAFT_CONTRACT.query.filter(MKT_OVERDRAFT_CONTRACT.Account==Acc.ID).first()
			GL_KEYS 		= 	mktaccounting.getConsolKey(Acc.AccCategory, Currency, '0', "AC", '', '', '', '', '', '', '', '', '')
			if SuspendAmount:
				SuspDrCr = "Cr" if DrCr != "Dr" else "Dr"

			if ODCObj:
				ID 		= ODCObj.ID
				GL_KEYS = mktaccounting.getConsolKey(Category, Currency, ODCObj.AssetClass, "AC", '', '', '', '', '', '', '', '', '')
				ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
				AccSetting 			= 	mktsetting.getAccSetting()

				AssetClassObj 	= 	MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID.ilike('%-' + '%sA'%ODCObj.AccProduct)).first()
				AssetClass		= 	'%s-%sA'%(ODCObj.AssetClass,ODCObj.AccProduct) if AssetClassObj else ODCObj.AssetClass
				NewAssetClassObj= 	MKT_ASSET_CLASS.query.get(AssetClass)
				ProResvCat 		= 	NewAssetClassObj.ProResvCat
				ProvExpCat 		= 	NewAssetClassObj.ProvExpCat
				ProvisionAmount = 	mktpdcollection.getProvisioningAmount(AssetClass, Balance, ODCObj.AccountType, 'N', ODCObj.NumDayDue)
				# Reverse Old Provisioning
				mktpdcollection.reverseProvisioning(ODCObj.ID, ODCObj.AssetClass, ProResvCat, ProvExpCat, Currency, Account, TransactionDate, Branch, AccSetting, ReportingRateObj)
				# Booking Provisioning To New Class
				mktpdcollection.provisioningBooking(ProvisionAmount, ProvExpCat, ProResvCat, Account, Currency, TransactionDate, ODCObj.ID, Branch, ODCObj.AssetClass, AccSetting, ReportingRateObj)

				ODCObj.OutstandingAmount 	+=  (OffBalAmount if DrCr == BalanceType else -OffBalAmount)
				ODCObj.OffBalanceSheet 		=  	ODCObj.LimitedAmount - ODCObj.OutstandingAmount
				# print 'OffBalanceSheet',OffBalAmount
				self.postOffBalanceSheet(ODCObj.ID,OffBalAmount,Currency,Branch,TransactionDate,IsWithdraw)

			return SuspendAmount,SuspDrCr,Amount,GL_KEYS,ID
					
	def updateODBalance(self, TellerObj, Module, Deposit=True):
		try:
			TranDate 		=	TellerObj.TranDate
			Tran 			=	TellerObj.Transaction
			Module 			= 	Module
			TranDate 		= 	TellerObj.TranDate
			ID 				= 	TellerObj.ID
			Ref 			= 	TellerObj.ID
			Note 			= 	TellerObj.Note
			Amo 			=	TellerObj.Amount if TellerObj.Amount else 0

			if Deposit:
				if ID[-1:] != 'R' :
					CrAccount 		=	TellerObj.TCrAccount
					CrCurrency 		=	TellerObj.CrCurrency
					CrCategory 		=	TellerObj.CrCategory

					DrAccount 		=	TellerObj.TDrAccount
					DrCurrency 		=	TellerObj.DrCurrency
					DrCategory 		=	TellerObj.DrCategory

					ODAccount 		=	CrAccount
					ODCurrency 		=	CrCurrency
					ODCategory 		=	CrCategory

					DrCrOD 			= 	'Cr'
					IsDeposit 		=	True
					# print 'deposit'

				else:
					# print 'withdraw'
					DrAccount 		=	TellerObj.TCrAccount
					DrCurrency 		=	TellerObj.CrCurrency
					DrCategory 		=	TellerObj.CrCategory

					CrAccount 		=	TellerObj.TDrAccount
					CrCurrency 		=	TellerObj.DrCurrency
					CrCategory 		=	TellerObj.DrCategory

					ODAccount 		=	DrAccount
					ODCurrency 		=	DrCurrency
					ODCategory 		=	DrCategory

					DrCrOD 			= 	'Dr'
					IsDeposit 		=	False
			else:
				if ID[-1:] != 'R' :
					CrAccount 		=	TellerObj.TCrAccount
					CrCurrency 		=	TellerObj.CrCurrency
					CrCategory 		=	TellerObj.CrCategory

					DrAccount 		=	TellerObj.TDrAccount
					DrCurrency 		=	TellerObj.DrCurrency
					DrCategory 		=	TellerObj.DrCategory

					ODAccount 		=	DrAccount
					ODCurrency 		=	DrCurrency
					ODCategory 		=	DrCategory

					DrCrOD 			= 	'Dr'
					IsDeposit 		=	False
					# print 'withdraw'

				else:
					# print 'deposit'
					DrAccount 		=	TellerObj.TCrAccount
					DrCurrency 		=	TellerObj.CrCurrency
					DrCategory 		=	TellerObj.CrCategory

					CrAccount 		=	TellerObj.TDrAccount
					CrCurrency 		=	TellerObj.DrCurrency
					CrCategory 		=	TellerObj.DrCategory

					ODAccount 		=	CrAccount
					ODCurrency 		=	CrCurrency
					ODCategory 		=	CrCategory

					DrCrOD 			= 	'Cr'
					IsDeposit 		=	True

			Audit 		= mktaudit.getAuditrail()
			Inputter	= TellerObj.Inputter
			Createdon 	= TellerObj.Createdon
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= TellerObj.Branch
			GL_KEYS 	= ''
			Amount  	= 0
			SuspendAmount = 0

			if CrAccount[:2] != 'OD':
				CheckBalance1 	= 	mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr")
				if CheckBalance1:
					flash(msg_error + CheckBalance1)
					return False
			
			if DrAccount[:2] != 'OD':
				CheckBalance2 	= 	mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr")
				if CheckBalance2:
					flash(msg_error + CheckBalance2)
					return False

			if ODAccount[:2] == 'OD':
				SuspendAmount,SuspDrCr,Amount,GL_KEYS,UserRef = self.checkODAccount(ODAccount,Amo,ODCategory,ODCurrency,DrCrOD,TranDate,Branch)
				
				if IsDeposit:
					CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,Amo,Module,Tran,TranDate,Ref,Note,CrGLKey=GL_KEYS,UserReference=UserRef)
				else:
					CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,Amo,Module,Tran,TranDate,Ref,Note,DrGLKey=GL_KEYS,UserReference=UserRef)
				if not CheckAccounting[0]:
					flash(CheckAccounting[1])
					return False

				if SuspendAmount:
					ODSuspendCat 	= 	mktsetting.getAppSetting('ODSuspendCat')

					if ODSuspendCat:
						self.postSuspendBalance(Branch,Authorizeon, IsDeposit, ODCategory,ODCurrency, ODSuspendCat, SuspendAmount, TranDate, Tran, ID, Note, GL_KEYS,UserReference=UserRef)

		except Exception as e:
			raise e

	def postSuspendBalance(self,Branch, Authorizeon, IsDeposit, ODCategory,ODCurrency, ODSuspendCat, SuspendAmount, TranDate, Tran, ID, Note, GL_KEYS,UserReference=''):
		try:
			Mode 		= "Direct"
			for x in [0,1]:
				if IsDeposit:
					if not x:
						KEY = GL_KEYS
						Category = ODCategory
						DrCr = 'Dr'
					else:
						DrCr = 'Cr'
						Category = ODSuspendCat
						KEY = mktaccounting.getConsolKey(Category, ODCurrency, '', "AC", '', '', '', '', '', '', '', '', '')
				else:
					if not x:
						DrCr = 'Dr'
						Category = ODSuspendCat
						KEY = mktaccounting.getConsolKey(Category, ODCurrency, '', "AC", '', '', '', '', '', '', '', '', '')
					else:
						DrCr = 'Cr'
						Category = ODCategory
						KEY = GL_KEYS

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					Authorizeon, 			# Createdon
					"System",				# Authorizer
					Authorizeon,			# Authorizeon
					"", 					# AEID
					"",				# Account
					Category,				# Category
					ODCurrency,				# Currency
					DrCr,					# DrCr
					SuspendAmount, 				# Amount
					"AC",					# Module
					Tran, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					KEY,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					UserReference=UserReference
				)

		except Exception as e:
			raise e

	def validateODAccount(self,Acc,TranDate,Amount,DrCr,Currency):
		try:
			BankDate 	= str(mktdate.getBankDate())
			if Acc.MaturityDate and Acc.LimitedAmount: 
				if DrCr == 'Dr':
					CurrencyObj = mktmoney.getCurrencyObj(Currency)
					if Acc.MaturityDate >= BankDate:
						AccBal = Acc.Balance + Decimal(Amount)
						if AccBal > Acc.LimitedAmount:
							return 'The limit is exceed for this OD account. The remaining limit is %s.'%(mktmoney.toMoney(float(Acc.LimitedAmount-Acc.Balance), CurrencyObj, 2))

					elif -Acc.Balance < Decimal(Amount):
						return "The account doesn't have sufficient amount. The remaining amount is %s."%(mktmoney.toMoney(float(-Acc.Balance), CurrencyObj, 2))
			else:
				return "This OD account isn't assigned with any contract yet."

			if str(TranDate) != BankDate:
				return "OD transaction date can not differenct from system date."

			return ''

		except Exception as e:
			raise

	def postingOD(self,Account,Amount,Category,Currency,DrCr,TransactionDate,Branch,Authorizeon,Transaction,Note):
		try:
			SuspendAmount,SuspDrCr,Amount,GL_KEYS,ID = self.checkODAccount(Account,Amount,Category,Currency,DrCr,TransactionDate,Branch)
			
			if SuspendAmount:
				ODSuspendCat	=	mktsetting.getAppSetting('ODSuspendCat')
				
				if ODSuspendCat:
					IsDeposit	=	True if DrCr == 'Cr' else False
					self.postSuspendBalance(Branch, Authorizeon, IsDeposit, Category, Currency, ODSuspendCat, SuspendAmount, TransactionDate, Transaction, ID, Note, GL_KEYS)
			return GL_KEYS
			
		except Exception as e:
			raise
