from flask 						import flash, Markup
from .. 						import db
from app.mktcore.wtfimports 	import *
from app.LoanApplication.models import *
from app.Currency.models 		import MKT_CURRENCY
from app.LoanProduct.models 	import MKT_LOAN_PRODUCT
from app.LoanRuleDetail.models 	import MKT_LOAN_RULE_DE
from app.LoanContract.models 	import MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT_INAU
from app.Customer.models 		import MKT_CUSTOMER
from app.LoanContract.models 	import MKT_LOAN_CONTRACT
from app.AccProduct.models 		import MKT_ACC_PRODUCT
from app.AccRuleDetail.models 	import MKT_ACC_RULE_DE
from sqlalchemy 				import *
from decimal 					import *
from datetime 					import datetime, date, timedelta

import app.tools.user 							as mktuser
import app.tools.mktmoney 						as mktmoney
import app.tools.mktdate 						as mktdate
import app.tools.loantools.rescheduletools 		as mktschedule
import app.tools.mktsetting 				as mktsetting

def getSearchLoanApplication(LoanAppID=""):

	Branch 	= 	mktuser.getBranch(session["ChangeBranch"]).ID
	search 	= 	request.args.get("q")
	action 	= 	request.args.get('action') if 'action' in request.args else ""
	NAMES 	= 	[]
	Status 	= 	['3'] # approved status
	Record 	= 	db.session.query(MKT_LOAN_APPLICATION.ID)

	
	if action != "view":
		Record = Record.\
				outerjoin( MKT_CUSTOMER, MKT_CUSTOMER.ID == MKT_LOAN_APPLICATION.LNCustomerID).\
				filter( or_(
							MKT_CUSTOMER.ID.like('%'+search.upper()+'%'),
							MKT_LOAN_APPLICATION.ID.like('%'+search.upper()+'%'),
							func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+search.upper()+'%'), 
							func.upper(MKT_CUSTOMER.LastNameEn).like('%'+search.upper()+'%'),
							func.concat(func.upper(MKT_CUSTOMER.LastNameEn),' ',func.upper(MKT_CUSTOMER.FirstNameEn)).like('%'+search.upper()+'%'),
							func.concat(func.upper(MKT_CUSTOMER.FirstNameEn),' ',func.upper(MKT_CUSTOMER.LastNameEn)).like('%'+search.upper()+'%'),
							)
						).\
				filter(MKT_LOAN_APPLICATION.AppStatus.in_(Status)).\
				filter(MKT_LOAN_APPLICATION.Branch == Branch).\
				filter(~MKT_LOAN_APPLICATION.ID.in_(db.session.query(MKT_LOAN_CONTRACT.LoanApplicationID))).\
				filter(~MKT_LOAN_APPLICATION.ID.in_(db.session.query(MKT_LOAN_CONTRACT_INAU.LoanApplicationID)))
		try:
			#################################################################################
			## FirstFinance Customization has TypeOfLoan field
			## Search loan application will filter out all top up loan application
			## if error has not such attribute, it will skip filter and run code in exception
			#################################################################################

			TypeOfLoan = "2" # Type of loan TopUp
			SplitAmount = "N" # Use only loan application that has exact split loan amount from main borrower
			Record = Record.filter(MKT_LOAN_APPLICATION.TypeOfLoan != TypeOfLoan,
									MKT_LOAN_APPLICATION.SplitAmount != SplitAmount)
		except AttributeError as e:
			Record = Record
			print "Error in mktloanapplication: %s"%e
		except Exception as e:
			raise(Exception(e))
	else:
		search = search.strip()
		Record = Record.filter(MKT_LOAN_APPLICATION.ID == search)

	CustomerObj = MKT_CUSTOMER.query
	LoanAppObj 	= MKT_LOAN_APPLICATION.query
	for row in Record:
		CustomerName = ""
		AppObj = LoanAppObj.get(row.ID)
		if AppObj:
			CusObj = CustomerObj.get(AppObj.LNCustomerID)
			if CusObj:
				CustomerName = CusObj.LastNameEn + CusObj.FirstNameEn
		dic = {"id":row.ID, "text":row.ID + " - " + CustomerName}
		NAMES.append(dic)

	# app.logger.debug(NAMES)
	return jsonify(items = NAMES)

def isMigrationMode():

	MigrationMode 	= mktsetting.getAppSetting('MigrationMode')

	if MigrationMode == 'Y':
		return True
	else:
		return False

def isUploadSchedule():

	UploadSchedule 	= mktsetting.getAppSetting('UploadSchedule')

	if UploadSchedule == 'Y':
		return True
	else:
		return False

def getMKTMoney(Amount=0, Currency=None):
	CurrencyObj = MKT_CURRENCY.query.get(Currency)
	return mktmoney.toMoney(float(Amount), CurrencyObj, 2)

def checkMaxMinAmount(Amount=None, FieldName='', Currency='', LoanProduct=''):

	Rule = None

	LoanProductObj = MKT_LOAN_PRODUCT.query.get(LoanProduct)

	if LoanProductObj:

		RuleID = str(LoanProductObj.Rule) + str(Currency)
		Rule = MKT_LOAN_RULE_DE.query.get(RuleID)

		if not Rule:
			raise ValidationError("Loan Product Rule not found: %s" % RuleID)

	else:

		raise ValidationError("Loan Product not found")

	if Amount:

		if Amount < Decimal(Rule.MinAmount) or Amount > Decimal(Rule.MaxAmount):
			raise ValidationError(Markup("%s must between %s and %s for %s" % 
				(FieldName, getMKTMoney(Rule.MinAmount, Currency), getMKTMoney(Rule.MaxAmount, Currency), LoanProductObj.Description)))


def checkMaxMinTerm(Term, Currency, LoanProduct):
	try:
		LP = MKT_LOAN_PRODUCT.query.get(LoanProduct)
		# print Term
		if LP:
			RuleID = str(LP.Rule) + str(Currency)
			Rule = MKT_LOAN_RULE_DE.query.get(RuleID)
			if Rule:
				Min = float(Rule.MinTerm) if Rule.MinTerm else float(0)
				Max = float(Rule.MaxTerm) if Rule.MaxTerm else float(0)
				if Min:
					if Min > float(0) and Max > float(0):
						if Term < float(Min) or Term > float(Max):
							raise ValidationError("Term must between %s and %s." %(Min, Max))
					
					else:
						if Term < float(Min):
							raise ValidationError("Term must start from %s and up." %Min)
	except:
		raise

def checkMaxMinTermAccProduct(Term, Currency, AccProduct):
	try:
		AP = MKT_ACC_PRODUCT.query.get(AccProduct)
		if AP:
			RuleID = str(AP.Rule) + str(Currency)
			Rule = MKT_ACC_RULE_DE.query.get(RuleID)
			print "RuleDe",RuleID
			if Rule:
				Min = float(Rule.MinTerm) if Rule.MinTerm else float(0)
				Max = float(Rule.MaxTerm) if Rule.MaxTerm else float(0)
				if Min:
					if Min > float(0) and Max > float(0):
						if Term < float(Min) or Term > float(Max):
							raise ValidationError("Term must between %s and %s." %(Min, Max))
					
					else:
						if Term < float(Min):
							raise ValidationError("Term must start from %s and up." %Min)
	except:
		raise

def checkAuthorizeApp(AppID="", INAU="INAU"):
	try:
		if INAU == "INAU":
			App = MKT_LOAN_APPLICATION_INAU.query.get(AppID)
		else:
			App = MKT_LOAN_APPLICATION.query.get(AppID)

		if not App:
			flash(msg_error + " Loan application not found.")
			return False

		else:
			if not App.ReviewedBy:
				App.ReviewedBy = str(mktuser.getUser().ID)
				App.ReviewedDate = str(mktdate.getBankDate())

			AppStatus = ['1','2'] # 1:Applied , 2:Reviewed, 3:Approved
			"""
				For check AppStatus in loan Application. If AppStatus in ['1','2'] it will update to number 3 when user Authorized else not update.
			"""
			if App.AppStatus in AppStatus:
				App.AppStatus = '3'
				App.ApprovedBy = str(mktuser.getUser().ID)
				App.ApprovedDate = str(mktdate.getBankDate())

			db.session.add(App)
			return True

	except:
		db.session.rollback()
		raise

def getNumberOfInstallment(Term, Frequency, FreqType, ValueDate):
	try:

		if Frequency and FreqType and Term:
			Term = float(Term)
			StartDate 	=	ValueDate
			Terms 		=	float(Term)
			EndDate 	=	mktschedule.getNextMonth(StartDate, float(Terms))
			if int(FreqType) == 1:

				Value1 = round(float(Term))

			elif int(FreqType) == 2:

				dateformat 			= 	"%Y-%m-%d"
				date1 				= 	datetime.strptime(str(StartDate), dateformat)
				date2 				= 	datetime.strptime(str(EndDate), dateformat)
				diff				= 	date2 - date1
				NumberOfWeeks, Days = 	divmod(diff.days, 7)
				Value1 				=	NumberOfWeeks

			else:
				dateformat 			= 	"%Y-%m-%d"
				date1 				= 	datetime.strptime(str(StartDate), dateformat)
				date2 				= 	datetime.strptime(str(EndDate), dateformat)
				diff				= 	date2 - date1
				Value1 				=	diff.days

			return int(Value1) / int(Frequency) if int(Frequency) > 0 else 1

		else:

			return ""

	except:
		raise

def validateTermAndInstallment(Term, Installment, Frequency, FreqType, ValueDate):
	try:

		if Frequency and FreqType and Installment and Term:
			Term = float(Term)

			StartDate 	=	ValueDate
			Term = float(Term)
			EndDate 	=	mktschedule.getNextMonth(StartDate, int(Term))

			if int(FreqType) == 1:

				getInstallment 	= 	getNumberOfInstallment(Term, Frequency, FreqType, ValueDate)

				if int(getInstallment) == int(Installment):
					return "OK"
				else:
					return "Installment must be %s not %s." %(getInstallment, Installment)

			elif int(FreqType) == 2:

				getInstallment 		=	getNumberOfInstallment(Term, Frequency, FreqType, ValueDate)

				if int(Installment) == int(getInstallment):
					return "OK"
				else:
					return "Installment must be %s not %s." %(getInstallment, Installment)
			elif int(FreqType) == 3:
				return "OK"
				
		else:
			return "OK"

	except:
		raise
