# -*- coding: utf-8 -*-

'''
Created Date: 17 October 2016
Author: Sophiarith + Sovankiry Rim

All Right Reserved Morakot Technology
Description : 

	Using for data migration

	1. Load Loan Oustanding and Disbursement.
	2. Load Draw Down Balance
	3. Loan Accr Interest
	4. Load Provisioning
	5. Update AIR and II for Loan Contract


'''
import app.tools.mktaccounting 			as mktaccounting
import app.tools.mktsetting 			as mktsetting
import app.tools.mktmessage             as mktmessage
import app.tools.mktautoid 				as mktautoid
import app.tools.mktaudit 				as mktaudit
import app.tools.mktparam 				as mktparam
import app.tools.mktdate 				as mktdate
import app.tools.mktpdcollection 		as mktpdcollection
import app.tools.mktkey 				as mktkey
import app.tools.mktloan 				as mktloan
import app.tools.loantools.rescheduletools	as rescheduletools
import app.tools.mktmoney 					as mktmoney
import app.tools.mktloanaccrual				as mktloanaccrual

from app.AssetClass.models 				import *
from app.Account.models 				import *
from app.AccProduct.models 				import *
from app.LoanContract.models 			import *
from app.FundTransfer.models 			import *
from app.LoanProduct.models 			import *
from app.RepaymentSchedule.models		import *
from app.PD.models 						import *
from app.ScheduleDefine.models 			import *
from app.Currency.models 				import *
from sqlalchemy 						import *
from app.Provisioning.models 			import *
from app.JournalEntry.models 			import *

from decimal 							import Decimal,ROUND_HALF_UP
from .. 								import app, db
from app.Upload.exportimport 			import getTableModel
import app.tools.mkttool 				as mkttool


# DEFAULT_MODE = "1"
# BAD_DOUBFUL_CAT = "67110"
"""
	DEFAULT_MODE: variable 
		Value (str):
			1 = Previous configuration
				- TranDate: LastMonthEnd
				- etc.

			2 = New configuration 
				- TranDate: BankDate (SystemDate)
				- etc.
"""

# loadLoanOutstanding('BTM',DefaultMode='2'):
# loadLoanOutstanding(Branch,**kwargs):
def loadLoanOutstanding(Branch,**kwargs):
	
	try:
		LoanContractObj =	MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
													filter(MKT_LOAN_CONTRACT.Branch == Branch).\
													order_by(MKT_LOAN_CONTRACT.Branch,MKT_LOAN_CONTRACT.ID)
		AccSetting 		= 	mktsetting.getAccSetting()
		AccountObj 		=	MKT_ACCOUNT.query
		MoreThan1Year	=	AccSetting.GL_KEY1

		# Transaction 	= 	AccSetting.DisbursedTran
		Transaction 	= 	"34"
		BankDateObj 	= 	mktdate.getBankDateObj()
		TranDate 		= 	BankDateObj.LastMonthEnd
		DateTimeNow 	= 	mktdate.getDateTimeNow()

		DEFAULT_MODE = kwargs.get("DefaultMode") if "DefaultMode" in kwargs else ""
		if DEFAULT_MODE == "2":
			One_day		=	mktdate.timedelta(days=1) # one day
			TranDate	=	datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date() - One_day
				
		if not Transaction:
			raise 'Error no transaction'
		
		Counter = 1
		if LoanContractObj:
			for lc in LoanContractObj:
				Category 		=	lc.Category
				Currency 		=	lc.Currency
				AssetClass 		=	lc.AssetClass
				MoreThanOneYear =	lc.MoreThanOneYear
				Outstanding 	=	lc.OutstandingAmount
				Account 		=	lc.Account
				Branch 			=	lc.Branch
				LoanID 			=	lc.ID
				DDAccountObj 	= 	AccountObj.get(Account)
				if not DDAccountObj:
					raise ValueError('Loan contract %s account not found'%LoanID)
				DDAccountCat 	= 	DDAccountObj.AccCategory
				if MoreThan1Year:
					GL_KEYS		= 	mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC", MoreThanOneYear)
				else:
					GL_KEYS		= 	mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC")

				DrCr 			=	"Dr"
				Mode 			=	"Direct"

				print Counter,Account,Category,Currency,Outstanding,Transaction,TranDate,LoanID
				Counter += 1

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Outstanding), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					LoanID,					# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				GL_KEYS 		= 	mktaccounting.getConsolKey(DDAccountCat, Currency)
				DrCr 			=	"Cr"
				Mode 			=	""
					
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					DDAccountCat,			# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Outstanding), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					LoanID,					# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)			
				
			db.session.commit()	

	except Exception, e:
		db.session.rollback()
		raise

# openBalance('BTM', DrCategory='40550001', CrCategory='40520001',DefaultMode='2')
# openBalance(Branch, DrCategory='', CrCategory='',DefaultMode='')
def openBalance(Branch, PaidUpCapitalCat='29670009', **kwargs):
	try:

		Transaction 	= 	"34"
		BankDateObj 	= 	mktdate.getBankDateObj()
		TranDate 		= 	BankDateObj.LastMonthEnd
		DateTimeNow 	= 	mktdate.getDateTimeNow()
		TellerParam 	= 	mktparam.getTellerParam()
		VaultCategory   =	TellerParam.VaultCategory
		AccountObj 		=	MKT_ACCOUNT.query

		DrCategory = kwargs.get("DrCategory") if "DrCategory" in kwargs else ""
		CrCategory = kwargs.get("CrCategory") if "CrCategory" in kwargs else ""

		DEFAULT_MODE = kwargs.get("DefaultMode") if "DefaultMode" in kwargs else ""
		if DEFAULT_MODE == "2":
			One_day		=	mktdate.timedelta(days=1) # one day
			TranDate	=	datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date() - One_day
		
		LoanObj = 	db.session.query(
						MKT_LOAN_CONTRACT.Branch,
						MKT_LOAN_CONTRACT.Currency,
						func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Outstanding')
					).filter(MKT_LOAN_CONTRACT.Branch==Branch).group_by(MKT_LOAN_CONTRACT.Branch,MKT_LOAN_CONTRACT.Currency)


		for l in LoanObj:

			Branch 			=	l.Branch
			Currency 		=	l.Currency
			
			VaultAccObj 	= 	AccountObj.filter(MKT_ACCOUNT.Currency == Currency).\
									filter(MKT_ACCOUNT.Branch == Branch).\
									filter(MKT_ACCOUNT.AccCategory == VaultCategory).\
									order_by(MKT_ACCOUNT.ID.asc()).first()
				
			VaultAccount 	=	VaultAccObj.ID

			Note 			=	'Data Migration'
			Reference 		=	''
			Mode 			=	"InDirect"
			DrCr 			=	"Dr"

			Amount 			= 	l.Outstanding
			print Branch, Currency, Amount
				
			if DrCategory and CrCategory:
				VaultCategory 	=	DrCategory
				VaultAccount 	=	''
				Mode 			=	"Direct"

			else:
				CrCategory 		=	PaidUpCapitalCat

			CrGL_KEYS 		= 	mktaccounting.getConsolKey(CrCategory, Currency)
			DrGL_KEYS 		= 	mktaccounting.getConsolKey(VaultCategory, Currency)
			JEID 			=	mktautoid.getAutoID('FRM_JOURNAL_ENTRY')
			setNewJournalEnty(JEID, DateTimeNow,Branch,VaultCategory,CrCategory,VaultAccount,'',Currency,Amount,Transaction,TranDate, Reference,Note)
			Reference 		=	JEID
			# print VaultCategory,'ppppppppppp'
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				VaultAccount,				# Account
				VaultCategory,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amount), 	# Amount
				"LC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				Reference,				# Reference
				Note,					# Note
				"", 					# JNID
				Branch,					# Branch
				DrGL_KEYS,				# GL_KEYS
				Mode 					# Mode check to insert Journal for category
			)
	
			DrCr 			=	"Cr"
			Account 		=	''
			Mode 			=	"Direct"
			# print CrCategory,'ccccccccppppppppppp'

			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				CrCategory,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amount), 	# Amount
				"LC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				Reference,				# Reference
				Note,					# Note
				"", 					# JNID
				Branch,					# Branch
				CrGL_KEYS,				# GL_KEYS
				Mode 					# Mode check to insert Journal for category
			)

			db.session.commit()

	except Exception as e:
		raise
# loadWithdrawalDisbursement(Branch,DefaultMode='2',CrCategory='40550001')
# loadWithdrawalDisbursement(Branch,DefaultMode='2',CrCategory='')
def loadWithdrawalDisbursement(Branch,**kwargs):
	try:
		LoanContractObj =	MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
													filter(MKT_LOAN_CONTRACT.Branch == Branch).\
													order_by(MKT_LOAN_CONTRACT.Branch,MKT_LOAN_CONTRACT.ID)
		AccSetting 		= 	mktsetting.getAccSetting()
		AccountObj 		=	MKT_ACCOUNT.query
		TellerParam 	= 	mktparam.getTellerParam()
		VualtCategory   =	TellerParam.VaultCategory
		Transaction 	= 	TellerParam.WitTransaction
		DateTimeNow 	= 	mktdate.getDateTimeNow()

		BankDateObj 	= 	mktdate.getBankDateObj()
		BankDate 		= 	BankDateObj.SystemDate
		TranDate 		= 	BankDateObj.LastMonthEnd

		CrCategory = kwargs.get("CrCategory") if "CrCategory" in kwargs else ""
		DEFAULT_MODE = kwargs.get("DefaultMode") if "DefaultMode" in kwargs else ""
		if DEFAULT_MODE == "2":
			One_day		=	mktdate.timedelta(days=1) # one day
			TranDate	=	datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date() - One_day

		Counter 		= 	1

		if LoanContractObj:
			for lc in LoanContractObj:
				Outstanding 	=	lc.OutstandingAmount
				if Outstanding == 0:
					continue
				
				Category 		=	lc.Category
				Currency 		=	lc.Currency
				AssetClass 		=	lc.AssetClass
				MoreThanOneYear =	lc.MoreThanOneYear
				Account 		=	lc.Account
				Branch 			=	lc.Branch
				LoanID 			=	lc.ID

				DDAccountObj 	= 	AccountObj.get(Account)
				if not DDAccountObj:
					raise ValueError('Loan contract %s account not found'%LoanID)
				DDAccountCat 	= 	DDAccountObj.AccCategory

				if CrCategory:
					VaultAccount 	=	''
					VualtCategory 	=	CrCategory
					
				else:
					VaultAccObj 	= 	AccountObj.filter(MKT_ACCOUNT.Currency == Currency).\
										filter(MKT_ACCOUNT.Branch == Branch).\
										filter(MKT_ACCOUNT.AccCategory == VualtCategory).\
										order_by(MKT_ACCOUNT.ID.asc()).first()
										
					VaultAccount 	=	VaultAccObj.ID

				FWID 			=	mktautoid.getAutoID('FRM_FUND_WITHDRAWAL')

				setNewFundTransferRecord(FWID, Outstanding, Branch, Account, DDAccountCat, VaultAccount, VualtCategory, Currency, Transaction, TranDate, LoanID, "Data Migration", "System", DateTimeNow, "System", DateTimeNow)

				print Counter,Account,Category,Currency,Outstanding,Transaction,TranDate,LoanID
				Counter += 1
				
				GL_KEYS 		= 	mktaccounting.getConsolKey(DDAccountCat, Currency)
				DrCr 			=	"Dr"
				Mode 			=	""

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					DDAccountCat,			# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Outstanding), 	# Amount
					"FW",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					FWID,					# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				GL_KEYS 		= 	mktaccounting.getConsolKey(VualtCategory, Currency)
				DrCr 			=	"Cr"
				Mode 			=	""
				if CrCategory:
					Mode 		=	"Direct"

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					VaultAccount,			# Account
					VualtCategory,			# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Outstanding), 	# Amount
					"FW",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					FWID,					# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)			
			db.session.commit()
			
	except Exception, e:
		raise

# loadDrawDownBalance('BTM',DefaultMode='2',DrCategory='40550001')
# loadDrawDownBalance(Branch,DefaultMode='2',DrCategory='')
def loadDrawDownBalance(Branch,**kwargs):
	try:
		AccountObj 		=	MKT_ACCOUNT.query
		DDAccountObj 	=	AccountObj.filter(MKT_ACCOUNT.AccProduct == '101').\
										filter(MKT_ACCOUNT.Branch == Branch).\
										filter(MKT_ACCOUNT.Balance != 0)
		TellerParam 	= 	mktparam.getTellerParam()
		VualtCategory   =	TellerParam.VaultCategory
		Transaction 	= 	TellerParam.DepTransaction
		DateTimeNow 	= 	mktdate.getDateTimeNow()
		BankDateObj 	= 	mktdate.getBankDateObj()
		BankDate 		= 	BankDateObj.SystemDate
		TranDate 		= 	BankDateObj.LastMonthEnd
		Counter 		= 	1
		LoanContractObj = 	MKT_LOAN_CONTRACT.query

		DrCategory = kwargs.get("DrCategory") if "DrCategory" in kwargs else ""
		DEFAULT_MODE = kwargs.get("DefaultMode") if "DefaultMode" in kwargs else ""
		if DEFAULT_MODE == "2":
			One_day		=	mktdate.timedelta(days=1) # one day
			TranDate	=	datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date() - One_day

		if DDAccountObj:
			for a in DDAccountObj:
				Balance 		=	a.Balance
				Category 		=	a.AccCategory
				Currency 		=	a.Currency
				Account 		=	a.ID
				Branch 			=	a.Branch

				LoanID 			=	''	 
				LoanRecordObj 	=	LoanContractObj.filter(MKT_LOAN_CONTRACT.Account == Account).first()
				if LoanRecordObj:
					LoanID 	=	LoanRecordObj.ID

				# update Account Balance to zero
				a.Balance 		=	0
				a.AvailableBal	=	0
				db.session.add(a)
				
				if DrCategory:
					VaultAccount 	=	''
					VualtCategory	=	DrCategory

				else:
					VaultAccObj 	= 	AccountObj.filter(MKT_ACCOUNT.Currency == Currency).\
										filter(MKT_ACCOUNT.Branch == Branch).\
										filter(MKT_ACCOUNT.AccCategory == VualtCategory).\
										order_by(MKT_ACCOUNT.ID.asc()).first()

					VaultAccount 	=	VaultAccObj.ID

				FDID 			=	mktautoid.getAutoID('FRM_FUND_DEPOSIT')
				
				setNewFundTransferRecord(FDID, Balance, Branch, VaultAccount, VualtCategory, Account, Category, Currency, Transaction, TranDate, LoanID, "Data Migration", "System", DateTimeNow, "System", DateTimeNow)
				
				print Counter,Account,Category,Currency,Balance,Transaction,TranDate
				Counter += 1
				
				GL_KEYS 		= 	mktaccounting.getConsolKey(VualtCategory, Currency)
				DrCr 			=	"Dr"
				Mode 			=	""
				if DrCategory:
					Mode 		=	"Direct"

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					VaultAccount,				# Account
					VualtCategory,			# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Balance), 	# Amount
					"FD",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					FDID,					# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				GL_KEYS 		= 	mktaccounting.getConsolKey(Category, Currency)
				DrCr 			=	"Cr"
				Mode 			=	""

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Balance), 	# Amount
					"FD",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					FDID,					# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)
			db.session.commit()
		
	except Exception, e:
		raise e

# loadProvisioning('BTM',DefaultMode='2')
def loadProvisioning(Branch,**kwargs):
	"""
		Load Booking Provisioning with Current Year Profit
	"""
	try:
		LoanContractObj 	= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
													filter(MKT_LOAN_CONTRACT.Branch == Branch).\
													order_by(MKT_LOAN_CONTRACT.Branch,MKT_LOAN_CONTRACT.ID)
		AccSetting 			= mktsetting.getAccSetting()
		ReportingRateObj 	= mktaccounting.getReportingRateObj()
		AssetClassObj 		= MKT_ASSET_CLASS.query
		BankDateObj 	= 	mktdate.getBankDateObj()
		BankDate 		= 	BankDateObj.SystemDate
		TranDate 		= 	BankDateObj.LastMonthEnd
		mkt 				= '{:14},'*8

		DEFAULT_MODE = kwargs.get("DefaultMode") if "DefaultMode" in kwargs else ""
		if DEFAULT_MODE == "2":
			One_day		=	mktdate.timedelta(days=1) # one day
			TranDate	=	datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date() - One_day

		print mkt.format('No','Branch','LoanID','DayDue','Out','Provision','Current Cls','New Cls')
		Counter 			= 	1
		for row in LoanContractObj:
			ID 					= 	row.ID
			AssetClass 			= 	row.AssetClass
			LoanType 			=	row.LoanType
			LoanProduct 		=	row.LoanProduct
			MoreThanOneYear 	=	row.MoreThanOneYear
			OutstandingAmount 	= 	row.OutstandingAmount
			Currency 			= 	row.Currency
			Branch 				= 	row.Branch
			Account 			= 	row.Account
			PDID 				= 	"PD" + str(ID)
			MinAssetClass 		= getattr(row,'MinAssetClass','')
			NumDayDue 			= 	mktpdcollection.getNumDayDue(PDID)
			if NumDayDue:
				NumDayDue = int(NumDayDue)

			NewAssetClass 		= 	mktpdcollection.getLoanAssetClass(NumDayDue, LoanType, MoreThanOneYear,LoanProduct)
			
			ProAssetClassObj= 	AssetClassObj.filter(MKT_ASSET_CLASS.ID.ilike('%-' + LoanProduct)).first()
			ProAssetClass	= 	'%s-%s'%(NewAssetClass,LoanProduct) if ProAssetClassObj else NewAssetClass

			# Provisioning Booking to New Class ClassID-ProductID
			ProvisionAmount = 	mktpdcollection.getProvisioningAmount(ProAssetClass, OutstandingAmount, LoanType, MoreThanOneYear, NumDayDue)
			# print "Get Provisioning"
			if ProvisionAmount > 0 :
				
				print mkt.format(Counter,Branch,ID,NumDayDue,OutstandingAmount,ProvisionAmount,AssetClass,NewAssetClass)
				Counter+=1

				LoanAssetClass 	= AssetClassObj.get(ProAssetClass)
				if LoanAssetClass:
					ProResvCat 	= LoanAssetClass.ProResvCat
				else:
					print "Loan %s AssetClass not found."% ID

				# Booking Provisioning To New Class
				"""
					Notes By : Sovankiry / Last Update: 09 October 2016
					Refer to loan provisioning booking that book when loan change class
					 
						Debit - Bad & Doubfull Debts 							Loan Loss Provision Booking		xxxx

						   Credit - Less Reserve for Specific loan loss 		Loan Loss Provision Booking  				xxxx
				"""
	
				# ReportingRate 			= ReportingRateObj.get(Currency) 
				LCYCurrency,LCYAmount 	= mktaccounting.setLCYAmount(ReportingRateObj,AccSetting,Currency,ProvisionAmount)

				DrCr  		= 'Dr'
				Category 	= AccSetting.CurrYearCat
				if BankDateObj.LastSystemDate == BankDateObj.LastYearEnd:
					Category 	= AccSetting.PriorYearCat

				if DEFAULT_MODE == "2":
					Category 	= LoanAssetClass.ProvExpCat

				Transaction = "34"
				GL_KEYS 	= mktaccounting.getConsolKey(Category, LCYCurrency, "", "", "", "", "", "", "", "", "", "", "")
				DateTimeNow = mktdate.getDateTimeNow()
				Mode 		= "Direct"
				Note 		= "Data Migration"

				# Debit 
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					LCYCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(LCYAmount), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				# Define new parameter
				DateTimeNow = mktdate.getDateTimeNow()
				DrCr 		= "Cr"
				Mode 		= "Direct"
				Category 	= ProResvCat
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "", "", "", "", "", "", "", "", "", "")
				
				# Credit 
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,			# Currency
					DrCr,					# DrCr
					Decimal(ProvisionAmount),# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				PROV = MKT_PROVISION.query.\
						filter(MKT_PROVISION.LOANID == ID).\
						filter(MKT_PROVISION.ASSETID == AssetClass).\
						first()

				if not PROV:
					# Update Auditrail
						
					PROV = MKT_PROVISION(
								Status		= 	"AUTH",
								Curr 		= 	"0",
								Inputter	= 	"System",
								Createdon 	= 	DateTimeNow,
								Authorizer 	= 	"System",
								Authorizeon	= 	DateTimeNow,
								Branch 		=	Branch,
								LOANID 		= 	ID,
								ASSETID 	=	AssetClass,
								TranDate 	=	TranDate,
								Amount 		=	LCYAmount,

							)

				PROV.ASSETID 	= AssetClass
				PROV.TranDate 	= TranDate
				PROV.Amount 	= LCYAmount
				db.session.add(PROV)

				
		print "Booking provisioning completed 100%"	
		db.session.commit()
	except Exception, e:
		raise
	else:
		pass
	finally:
		pass

def loadAccruedInterest(Branch,**kwargs):
	try:
		LoanContractObj =	MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
													filter(MKT_LOAN_CONTRACT.AccrInterest > 0).\
													filter(MKT_LOAN_CONTRACT.Branch == Branch).\
													order_by(MKT_LOAN_CONTRACT.Branch,MKT_LOAN_CONTRACT.ID)
		LoanProductObj  = 	MKT_LOAN_PRODUCT.query
		AccSetting 		= 	mktsetting.getAccSetting()
		MoreThan1Year	=	AccSetting.GL_KEY1

		AccountObj 		=	MKT_ACCOUNT.query
		TellerParam 	= 	mktparam.getTellerParam()
		Transaction 	= 	"34"
		DateTimeNow 	= 	mktdate.getDateTimeNow()
		BankDateObj 	= 	mktdate.getBankDateObj()
		BankDate 		= 	BankDateObj.SystemDate
		TranDate 		= 	BankDateObj.LastMonthEnd
		Counter 		= 	1
		ReportingRateObj= mktaccounting.getReportingRateObj()
		AssetClassObj	= 	MKT_ASSET_CLASS.query

		DEFAULT_MODE = kwargs.get("DefaultMode") if "DefaultMode" in kwargs else ""
		if DEFAULT_MODE == "2":
			One_day		=	mktdate.timedelta(days=1) # one day
			TranDate	=	datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date() - One_day

		if LoanContractObj:
			for lc in LoanContractObj:
				LoanID 			=	lc.ID
				Branch 			=	lc.Branch
				Account 		=	lc.Account
				Currency 		=	lc.Currency
				AssetClass 		=	lc.AssetClass
				AccrInterest 	=	lc.AccrInterest
				MoreThanOneYear =	lc.MoreThanOneYear

				LoanProduct  	=	lc.LoanProduct
				ProductObj 		=	LoanProductObj.get(LoanProduct)
				AIRCat 			=	ProductObj.IntReceivableCate
				LCYCurrency,LCYAmount 	= mktaccounting.setLCYAmount(ReportingRateObj,AccSetting,Currency,AccrInterest)
				CurrentYearCat	=	AccSetting.CurrYearCat
				if BankDateObj.LastSystemDate == BankDateObj.LastYearEnd:
					CurrentYearCat 	= AccSetting.PriorYearCat

				LoanClassObj 	=	AssetClassObj.get(AssetClass)
				if LoanClassObj.IncomeRecog == 'N':
					SuspendCrCat= mktparam.getPDParam().SuspendCrCat
					DrCurrency	= Currency
					DrAmount	= AccrInterest
					CrCurrency	= Currency
					CrAmount	= AccrInterest
					DrCategory	= AIRCat
					CrCategory	= SuspendCrCat

					if MoreThan1Year:
						DrGL_KEYS 	= mktaccounting.getConsolKey(DrCategory, DrCurrency, AssetClass, "LC", MoreThanOneYear)
					else:
						DrGL_KEYS 	= mktaccounting.getConsolKey(DrCategory, DrCurrency, AssetClass, "LC")

					CrGL_KEYS 	= mktaccounting.getConsolKey(CrCategory, CrCurrency)
				else:
					DrCurrency	= Currency
					CrCurrency	= LCYCurrency
					DrAmount	= AccrInterest
					CrAmount	= LCYAmount
					DrCategory	= AIRCat
										
					if MoreThan1Year:
						DrGL_KEYS 	= mktaccounting.getConsolKey(DrCategory, DrCurrency, AssetClass, "LC", MoreThanOneYear)
					else:
						DrGL_KEYS 	= mktaccounting.getConsolKey(DrCategory, DrCurrency, AssetClass, "LC")

					CrCategory	= CurrentYearCat
					CrGL_KEYS 	= mktaccounting.getConsolKey(CrCategory, CrCurrency)

					if DEFAULT_MODE == "2":
						CrCategory	= ProductObj.IntIncomeCate
						if MoreThan1Year:
							CrGL_KEYS 	= mktaccounting.getConsolKey(CrCategory, CrCurrency, AssetClass, "LC", MoreThanOneYear)	
						else:
							CrGL_KEYS 	= mktaccounting.getConsolKey(CrCategory, CrCurrency, AssetClass, "LC")	

				print Counter,Branch,LoanID,Account,AIRCat,Currency,AccrInterest,Transaction,TranDate
				Counter += 1

				DrCr 			=	"Dr"
				Mode 			=	"Direct"

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					DrCategory,				# Category
					DrCurrency,				# Currency
					DrCr,					# DrCr
					Decimal(DrAmount), 		# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					LoanID,					# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					DrGL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				DrCr 			=	"Cr"
				Mode 			=	"Direct"

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					CrCategory,			# Category
					CrCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(CrAmount), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					LoanID,					# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					CrGL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)	

			db.session.commit()
		
	except Exception, e:
		raise e
	
def updateAccruedInterest(Branch,**kwargs):
	"""
		Update Accr Interest and Interest Income Earned
		Accr Interest = PD.Interest + Accr Int Current Installment

		Loan Collection Date 	: 20 th
		Current Bank Date 		: 5 th,	Nov

			   September 		    October				 November
		<-------------------> <-------------------> <------------------->

			   20th 	   30th		  20th	    30th		5th
		--------|-----------|-----------|---------|---------|-----------
										<------------------->
									   Accr Current Installment

									   <---------->
									 Accr Prev Month
												  <---------->
												 Accr Current Month

	"""

	try:
		LoanProductObj 	=	MKT_LOAN_PRODUCT.query
		LoanContractObj =	MKT_LOAN_CONTRACT.query.\
							filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
							order_by(MKT_LOAN_CONTRACT.Branch,MKT_LOAN_CONTRACT.ID)
							# filter(MKT_LOAN_CONTRACT.ID.in_(['LC50722001549','LC80327026885']))
		
		if Branch:
			LoanContractObj 	=	LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch == Branch)
			
		Counter 	= 	1
		BankDate 	= 	str(mktdate.getBankDate())
		mkt 		= 	'{:10},'*8	
		AccSetting 			= mktsetting.getAccSetting()
		ReportingRateObj 	= mktaccounting.getReportingRateObj()
		DEFAULT_MODE 	=	kwargs.get("DefaultMode") if "DefaultMode" in kwargs else ""
		OneDayOff		=	kwargs.get("OneDayOff") if "OneDayOff" in kwargs else ""

		if OneDayOff=='Yes':
			# start block for calculate AIR less than one day
			One_day		=	mktdate.timedelta(days=1) # one day
			BankDateOri	=	str(datetime.strptime(str(BankDate), "%Y-%m-%d").date() - One_day)
			# end block
		if LoanContractObj:
			print mkt.format('No','Branch','LoanID','OldIntIncEarned','OldAccrInterest','NewIntIncEarned','NewAccrInterest','AccrIntPreMonth')

			AccrIntCurrMonth = 0 # Because Migration on day 1 of month.
			for lc in LoanContractObj:
				Branch 			= 	lc.Branch
				LoanID 			=	lc.ID
				Currency		=	lc.Currency

				SumInterestObj 	= 	db.session.query(
										func.sum(MKT_REP_SCHEDULE.Interest).label('SumInterest')
									).\
									filter(MKT_REP_SCHEDULE.CollectionDate < BankDate).\
									filter(MKT_REP_SCHEDULE.LoanID == LoanID).first()

				SumInterest 	=	0
				if SumInterestObj and SumInterestObj.SumInterest:
					SumInterest = 	SumInterestObj.SumInterest
									
				if OneDayOff=='Yes':
					AccrCurrentInt,InterestPerDay	=	getAccrCurrentInt(lc, BankDateOri)
				else:
					AccrCurrentInt,InterestPerDay	=	getAccrCurrentInt(lc, BankDate)
				# AccrCurrentInt = Decimal(mktmoney.formatNumber(AccrCurrentInt,0,2))
				IntIncEarned  	=	SumInterest + AccrCurrentInt

				if DEFAULT_MODE == "2":
					if OneDayOff:
						AccrIntCurrMonth = Decimal(getAccrCurrentMonth(lc,InterestPerDay,BankDateOri))
					else:
						AccrIntCurrMonth = Decimal(getAccrCurrentMonth(lc,InterestPerDay,BankDate))

				PDInterest 		=	getPDInterest(LoanID)
				AccrInterest 	=	AccrCurrentInt + PDInterest
				AccrIntPreMonth =	getAccrPrevMonth(AccrCurrentInt,AccrIntCurrMonth)

				# if int(lc.AssetClass) > 15 :
				# 	lc.Suspend = "Y"
				# else:
				# 	lc.Suspend = "N"
				
				if lc.Suspend == "Y":

					IntIncEarned 	= IntIncEarned - AccrInterest

				print mkt.format(Counter,Branch, LoanID,lc.IntIncEarned ,lc.AccrInterest, IntIncEarned, AccrInterest, AccrIntPreMonth)
				Counter+=1
				LCYCurrency,LCYAmount 	= mktaccounting.setLCYAmount(ReportingRateObj,AccSetting,Currency,IntIncEarned)

				lc.IntIncEarned 	= 	LCYAmount
				lc.AccrInterest 	= 	AccrInterest
				lc.AccrCurrentInt 	=	AccrCurrentInt
				lc.AccrIntPreMonth 	= 	AccrIntPreMonth
				lc.AccrIntCurrMonth = 	AccrIntCurrMonth
				lc.AccrIntPerDay 	= 	InterestPerDay
				db.session.add(lc)

			db.session.commit()	

	except Exception, e:           
		raise 

def validateIIandAIR(Branch = ''):
	try:
		LoanProductObj 	=	MKT_LOAN_PRODUCT.query
		LoanContractObj =	MKT_LOAN_CONTRACT.query.\
							filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
							order_by(MKT_LOAN_CONTRACT.Branch,MKT_LOAN_CONTRACT.ID)
		
		if Branch:
			LoanContractObj 	=	LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch == Branch)
			
		BanKDate 	= 	str(mktdate.getBankDate())
		Counter 	= 	1
		mkt 		= 	'{:10}'*4	

		if LoanContractObj:
			for lc in LoanContractObj:
				LoanID 			=	lc.ID
				LCIntIncEarned 	=	lc.IntIncEarned
				LCAccrInterest  =	lc.AccrInterest

				ProductObj 		=	LoanProductObj.filter(MKT_LOAN_PRODUCT.ID == lc.LoanProduct).first()
				InterestDayBasis=	ProductObj.IntAccrBasis
				LoanBalance  	=	mktloan.getLoanBalance(lc)

				SumInterestObj 	= 	db.session.query(
										func.sum(MKT_REP_SCHEDULE.Interest).label('SumInterest')
									).\
									filter(MKT_REP_SCHEDULE.CollectionDate <= BanKDate).\
									filter(MKT_REP_SCHEDULE.LoanID == LoanID).first()

				SumInterest 	=	0
				if SumInterestObj and SumInterestObj.SumInterest:
					SumInterest = 	SumInterestObj.SumInterest
									
				
				AccrCurrentInt,InterestPerDay	=	getAccrCurrentInt(lc, BanKDate)
				IntIncEarned  	=	SumInterest + Decimal(AccrCurrentInt)

				PDInterest 		=	getPDInterest(LoanID)
				AccrInterest 	=	AccrCurrentInt + PDInterest

				print '============== %s =============='%Counter
				Counter += 1

				print mkt.format(LoanID, IntIncEarned, SumInterest, AccrCurrentInt, PDInterest)

				if AccrInterest != LCAccrInterest:
					print 'Incurrect AccrInterest', AccrInterest, LCAccrInterest

				if float(LCIntIncEarned) != IntIncEarned:
					print 'Error: LCIntIncEarned %s IntIncEarned %s [SumInterest%s AccrCurrentInt%s]'%(LCIntIncEarned, IntIncEarned, SumInterest, AccrCurrentInt)

	except Exception, e:
		raise 

def valideLoanSchedule(Branch=''):
	try:
		LoanContractObj =	MKT_LOAN_CONTRACT.query
		
		if Branch:
			LoanContractObj 	=	LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch == Branch)
			
		Counter 	= 	1

		if LoanContractObj:
			for lc in LoanContractObj:
				LoanID 			=	lc.ID
				ScheduleObj 	=	MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == LoanID).first()
				
				print '============== %s =============='%Counter
				Counter += 1

				if not ScheduleObj:
					print 'Loan %s no schedule'%LoanID

	except Exception, e:
		raise e

def setNewFundTransferRecord(ID, Amount, Branch, DrAcc, DrCat, CrAcc, CrCat, Currency, Tran, TranDate, Ref, Note, Inputter, Createdon, Authorizer, Authorizeon):
	try:
		Data = {	
					'Inputter'		:Inputter,
					'Curr'			:'0',
					'Status'		:'AUTH',
					'Createdon'		:Createdon,
					'Authorizer'	:Authorizer,
					'Authorizeon'	:Authorizeon,
					'Branch'		:Branch,
					'ID'			:ID,
					'DrAccount'		:DrAcc,
					'DrCategory'	:DrCat,
					'DrCurrency'	:Currency,
					'CrAccount'		:CrAcc,
					'CrCategory'	:CrCat,
					'CrCurrency' 	:Currency,
					'Amount'		:Amount,
					'Transaction'	:Tran,
					'TranDate'		:TranDate,
					'Reference'		:Ref,
					'Note'			:Note
				}
		
		Record 	= 	MKT_FUND_TRANSFER(**Data)
		
		db.session.add(Record)

	except Exception, e:
		raise e

def setNewJournalEnty(ID,Createdon, Branch, DebitCategory, CreditCategory, DrAccount, CrAccount, Currency, Amount, Transaction, TransactionDate, Ref, Note):
	try:
		

		Data = {	
					'Inputter'		:'System',
					'Curr'			:'0',
					'Status'		:'AUTH',
					'Createdon'		:Createdon,
					'Authorizer'	:'System',
					'Authorizeon'	:Createdon,
					'Branch'		:Branch,
					'ID'			:ID,
					'DebitCategory'	:DebitCategory,
					'CreditCategory':CreditCategory,
					'DrAccount'		:DrAccount,
					'CrAccount'		:CrAccount,
					'Currency' 		:Currency,
					'Amount'		:Amount,
					'Transaction'	:Transaction,
					'TransactionDate':TransactionDate,
					'Reference'		:Ref,
					'Note'			:Note
				}
		
		Record 	= 	MKT_JOURNAL_ENTRY(**Data)

		db.session.add(Record)

	except Exception as e:
		raise e

def getAccrCurrentInt(LoanContract,BankDate):
	"""
		Accrued Current Intstallment = Accrued Prev Month + Accrued Current Month
	"""
	ID 					= LoanContract.ID
	CurrencyObj 		= MKT_CURRENCY.query
	ProductID 			= LoanContract.LoanProduct
	Product 			= MKT_LOAN_PRODUCT.query.get(ProductID)
	InterestDayBasis 	= int(Product.IntDayBasis)
	InterestRate 		= float(LoanContract.IRR) if LoanContract.IRR else float(LoanContract.InterestRate)
	ValueDate 			= LoanContract.ValueDate
	Currency 			= LoanContract.Currency
	LoanBalance 		= mktloan.getLoanBalance(LoanContract)
	
	ScheduleObj 		= MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == ID).\
													filter(MKT_REP_SCHEDULE.CollectionDate < BankDate).\
													order_by(MKT_REP_SCHEDULE.CollectionDate.desc()).first()
		
	DateTo 				= BankDate
	if ScheduleObj:
		DateFrom 	= ScheduleObj.CollectionDate
	else:
		DateFrom 	= ValueDate
		# if DateFrom >= DateTo:
		# 	One_day		=	mktdate.timedelta(days=1) # one day
		# 	DateFrom	=	str(datetime.strptime(str(DateTo), "%Y-%m-%d").date() - One_day)

	print InterestRate,LoanBalance,InterestDayBasis,DateFrom,DateTo,'ooooooooooooooo'
	InterestPerDay 	= rescheduletools.getInterestPerDay(InterestRate,LoanBalance,InterestDayBasis,DateFrom)
	CurrentInterest = rescheduletools.getInterestAmount(InterestRate,LoanBalance,InterestDayBasis,DateFrom,DateTo)
	CurrentInterest = Decimal(CurrentInterest)

	return CurrentInterest,InterestPerDay

def getPDInterest(LoanID):

	InterestDue 		= 	0
	PastDueObj 			= 	MKT_PAST_DUE.query.filter(MKT_PAST_DUE.LoanID == LoanID).first()
	if PastDueObj:
		InterestDue 	= 	PastDueObj.TotInterestDue

	return InterestDue

def getAccrPrevMonth(AccrCurrentInt,AccrIntCurrMonth):
	"""
		Accrued Prev Month = Accrued Current Installment - Accrued Current Month


	"""
	AccrIntPreMonth 	= 	AccrCurrentInt - AccrIntCurrMonth
	return AccrIntPreMonth

def getAccrCurrentMonth(LoanObj,InterestPerDay,BankDate):
	try:
		Product             =   MKT_LOAN_PRODUCT.query.get(LoanObj.LoanProduct)
		InterestDayBasis    =   int(Product.IntDayBasis)

		ScheduleObj = 	MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == LoanObj.ID).\
						filter(MKT_REP_SCHEDULE.CollectionDate < BankDate).\
						order_by(MKT_REP_SCHEDULE.CollectionDate.desc()).first()

		CollectionDate = LoanObj.ValueDate
		if ScheduleObj:
			CollectionDate = ScheduleObj.CollectionDate
		
		if CollectionDate <  '%s-01'%BankDate[:7]:
			CollectionDate = '%s-01'%BankDate[:7]

		CollectionDate = datetime.strptime(CollectionDate, "%Y-%m-%d").date()
		BankDate = datetime.strptime(BankDate, "%Y-%m-%d").date()
		Days = rescheduletools.getNumberOfDay(InterestDayBasis,CollectionDate,BankDate)
		return Days*InterestPerDay

	except Exception as e:
		raise 
### Validate use for datamigration
def setValidationMsg(**kwargs):
	#Create Message Of Validation
	DictMessage = kwargs.get('DictMessage')
	Field  		= kwargs.get('Field')
	Message 	= kwargs.get('Message')
	
	if not Message[0]:
		PrevMessage = DictMessage.get(Field,'')
		if PrevMessage:
			TextMessage = " ".join([PrevMessage,Message[1]])
		else:
			TextMessage = Message[1]
		DictMessage.update({Field:TextMessage})
	return DictMessage

def exeFunctionValidate(**kwargs):
	"""
		Using for execute function of validation and return dictionary of validation
		DictRecord 	: Dict of Record
		Required 	: List Of Field Validate Required
		FormatDate 	: List Of Field Validate Format date
		RecordFound : List Of Field Validate Invalid Choices
		Number 		: List Of Field Lookup table
		Length 		: List Of Field check min Length and max Length
		LookupSum 	: List Of field that Using for check the whatever of amount must be equal sum of field in table.
		Param 7 : ....

		Resule => Dict = {	'ID':'Field is required' }

	"""
	DictMessage = {}
	DebugMode 	= kwargs.get('DebugMode',False)
	DictRecord 	= kwargs.get('DictRecord',{})
	Required 	= kwargs.get('Required',[])
	FormatDate	= kwargs.get('FormatDate',[])
	RecordFound = kwargs.get('RecordFound',[])
	Number      = kwargs.get('Number',[])
	Prefix 		= kwargs.get('Prefix',[])
	Length      = kwargs.get('Length',[])
	LookupSum 	= kwargs.get('LookupSum',[])
	LookupConcat= kwargs.get('LookupConcat',[])

	InvalidChoies    = kwargs.get('InvalidChoies',[])
	RecordFoundMulti = kwargs.get('RecordFoundMulti',[])

	IDNumber    = kwargs.get('IDNumber',[])
	Mobile   	= kwargs.get('Mobile',[])
	Email       = kwargs.get('Email',[])

	CompareValue = kwargs.get("CompareValue",[])
	# Call check Required field
	for row in Required:
		Field 		= row
		Value 		= DictRecord.get(Field)
		Message 	= mkttool.checkRequired(Value=Value)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check FormatDate field
	for row in FormatDate:
		Field 		= row
		Value 		= DictRecord.get(Field)
		Message 	= mkttool.checkFormatDate(Value=Value)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check Record found in system 
	for row in RecordFound: # [('Province',MKT_PROVINCCE,ID), ....]

		Field 		= row[0] # Column Of Excel that you want to check
		Table 		= row[1] # Table lookup
		LookupField = row[2] if len(row) > 2 else ''
		Value 		= DictRecord.get(Field)

		Message 	= mkttool.checkRecordFound(Value=Value, Table=Table, Field=LookupField)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check Number only field
	for row in Number:
		Field 		= row
		Value 		= DictRecord.get(Field)
		Message 	= mkttool.checkNumberOnly(Value=Value)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check Prefix field
	for row in Prefix: # [('CU','ID'),('DD','ID')....]
		Prefix 		= row[0] # Profix
		Field 		= row[1] # Field
		Value 		= DictRecord.get(Field)
		Message 	= mkttool.checkPrefix(Prefix=Prefix, Value=Value)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check Prefix field
	for row in Length: # [('YearEmployed','4','4'), ...]
		Field 		= row[0] # Field
		Min 		= row[1] # Min
		Max 		= row[2] # Max

		Value 		= DictRecord.get(Field)
		Message 	= mkttool.checkLength(Value=Value, Min=Min, Max=Max)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check ListChoice field
	for row in InvalidChoies: # [("Salutation", ("Mr","Mrs","Miss")), ...]

		Field 		= row[0] # Field
		List 		= row[1] # List of Choice value

		Value 		= DictRecord.get(Field)
		Message 	= mkttool.checkValidList(List=List, Value=Value)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check RecordFoundMulti field
	for row in RecordFoundMulti: # [("MKT_DISTRICT", "ID", "Province", "DistrictOfBirth", "ProvinceOfBirth"), ...]
		LookupTable = row[0]
		LookupField1= row[1]
		LookupField2= row[2]
		Field1 		= row[3]
		Field2 		= row[4]

		Value1 		= DictRecord.get(Field1)
		Value2 		= DictRecord.get(Field2)
		Message 	= mkttool.checkRecordFoundMulti(Table=LookupTable, Field1=LookupField1, Field2=LookupField2, Value1=Value1, Value2=Value2)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field1, Message=Message)

	# Call check Record found in system 
	for row in IDNumber: # [("IDNumber", "IDType"), ("SpoNationalID", "SpouseIDType"), ...]
		Field 		= row[0] # Column Of Excel that you want to check
		IDType 		= row[1] # 
		Value 		= DictRecord.get(Field)
		IDTypeValue = DictRecord.get(IDType)

		Message 	= mkttool.checkIDNumber(IDNumber=Value, IDType=IDTypeValue)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check Mobile Field
	for row in Mobile:
		Field 		= row
		Value 		= DictRecord.get(Field)
		Message 	= mkttool.checkMobile(Value=Value)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check Email Field
	for row in Email:
		Field 		= row
		Value 		= DictRecord.get(Field)
		Message 	= mkttool.checkEmail(Value=Value)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check LookupSum Field
	for row in LookupSum: #[ ('TotalInterest', 'MKT_REP_SCHEDULE', 'Interest', {'LoanID':'ID'} )]
		Field 		= row[0]
		Table 		= row[1]
		FieldLookup = row[2]
		Dict 		= row[3] if len(row) > 3 else {}

		DictCondition = {}
		for item in Dict:
			DictCondition.update({item : DictRecord.get(Dict[item])})

		Value 		= DictRecord.get(Field)
		Message 	= mkttool.checkLookupSum(Table=Table, Field=FieldLookup, Value=Value, DictCondition=DictCondition )
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check Lookup concat Field
	for row in LookupConcat: #[ ("AccName", "MKT_CUSTOMER", ["LastNameEn","FirstNameEn"], {"ID": "CustomerList"}, " "), ... ]
		Field 		= row[0]
		Table 		= row[1]
		FieldLookup = row[2]
		Dict 		= row[3] if len(row) > 3 else {}
		Punctuation	= row[4] if len(row) > 4 else " "

		DictCondition = {}
		for item in Dict:
			DictCondition.update({item : DictRecord.get(Dict[item])})

		Value 		= DictRecord.get(Field)
		Message 	= mkttool.checkLookupConcat(Table=Table, Fields=FieldLookup, Value=Value, DictCondition=DictCondition, Punctuation=Punctuation)
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field, Message=Message)

	# Call check compare NextRunDate to BankDate
	for row in CompareValue:
		"""
			1. Comparing between two columns:
				CompareValue("ValueDate","<","MaturityDate")
			2. Comparing to bankdate, third argument must be "BankDate"
				CompareValue("NextRunDate",">=","BankDate")
			=> Check function checkCompareValue() for more syntax.
		"""
		Field1 		= row[0]
		Condition 	= row[1]
		Field2 		= row[2]

		Value1 		= DictRecord.get(Field1,"")
		Value2 		= DictRecord.get(Field2, str(mktdate.getBankDate()))

		Message 	= mkttool.checkCompareValue(Field1 = Field1, Value1=Value1, Condition = Condition, Field2 = Field2, Value2 = Value2 )
		DictMessage = setValidationMsg( DictMessage=DictMessage, Field=Field1, Message=Message)


	if DebugMode:
		if DictMessage:
			print DictRecord.get('ID'),DictMessage
		else:
			print DictRecord.get('ID'),'Complete ...'


	return DictMessage

def checkLoanBalance(ID,LoanBalance,LoanOutstanding,BankDate):

	ScheduleObj 		= MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == ID).\
													filter(MKT_REP_SCHEDULE.CollectionDate < BankDate).\
													order_by(MKT_REP_SCHEDULE.CollectionDate.desc()).first()
	if ScheduleObj:
		CheckLoanBalance = ScheduleObj.Balance
		if LoanBalance != CheckLoanBalance:
			return '%s,%s,'%(LoanBalance,CheckLoanBalance)
	else:
		if LoanBalance != LoanOutstanding:
			return '%s,%s,'%(LoanBalance,LoanOutstanding)
	return ''
def checkSchdule(ID):
	ScheduleObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == ID).\
										order_by(MKT_REP_SCHEDULE.CollectionDate.desc()).first()
	if not ScheduleObj:
		return "Y"
	return ''
def VerifyMigration(Branch=''):
	try:
		BankDate 	= str(mktdate.getBankDate())
		LoanObj 	= MKT_LOAN_CONTRACT.query
		if Branch:
			LoanObj = LoanObj.filter(MKT_LOAN_CONTRACT.Branch == Branch)
		LoanObj = LoanObj.order_by(MKT_LOAN_CONTRACT.Branch.asc(),
									MKT_LOAN_CONTRACT.ID.asc())
		if LoanObj:
			TotalRecord = LoanObj.count()
			Zero 		= Decimal(0)
			RowError 	= '%s'
			Index = 1
			DateTimeNow 	= 	mktdate.getDateTimeNow()
			#Header
			Header = 'Branch,LoanID,LoanBalance,Sys-LoanBalance,LoanOutstanding,Sys-LoanOutstanding,Not Schedule'
			File = app.config.get("CURRENT_PATH")+'Verify_Migration_%s.csv'%DateTimeNow
			mkttool.setCreateFile(File)
			mkttool.setWriteFile(File, Header, Overwirte=False)

			for row in LoanObj:
				Branch 			= row.Branch
				ID 				= row.ID
				MessageError 	= '%s,%s,'%(Branch,ID)
				PrincipalDue 	= Zero
				LoanOutstanding = Decimal(row.OutstandingAmount)
				LoanBalance 	= Decimal(row.Amount)
				PDObj 			= MKT_PAST_DUE.query.get('PD%s'%ID)
				if PDObj:
					PrincipalDue = Decimal(PDObj.TotPrincipalDue)
				CheckOutstanding = LoanBalance + PrincipalDue

				CheckLoanBalanceObj = checkLoanBalance(ID,LoanBalance,LoanOutstanding, BankDate)
				if CheckLoanBalanceObj:
					MessageError+=CheckLoanBalanceObj
				
				if LoanOutstanding != CheckOutstanding:
					MessageError += '%s,%s,'%(LoanOutstanding, CheckOutstanding)

				MessageError += checkSchdule(ID)

				
				mkttool.setWriteFile(File, MessageError, Overwirte=False)
				
				print '%s,%s,%s'%(Index,Branch,ID)
				Index 	+= 1
		print 'Output file :%s'%File
		print ''
	except Exception as e:
		raise
	else:
		pass
	finally:
		pass

# VerifyMigration()

def copyData(Table,Record):
	try:
		Dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(Table)
		for item in Mapper.attrs:						
			FieldInTable.append(item.key)

		for col in FieldInTable:
			Dic.update({col:getattr(Record,col)})
		
		return Dic

	except Exception as e:
		raise

def updateContractDataRelation(Branch=''):
	'''use for First Finance to update loan co borrower, guarantor, collateral from LA to LC'''
	try:

		LCObj = MKT_LOAN_CONTRACT.query
		if Branch:
			LCObj 	=	LCObj.filter(MKT_LOAN_CONTRACT==Branch)

		for lc in LCObj:
			print lc.ID
			if lc.LoanApplicationID:
				LAObj = MKT_LOAN_APPLICATION.query.get(lc.LoanApplicationID)
				if LAObj:
					GuarantorObj = MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID==LAObj.ID).all()
					for g in GuarantorObj:
						GDict = copyData(MKT_GUARANTOR,g)
						GDict.update({'ID':lc.ID})
						db.session.add(MKT_GUARANTOR(**GDict))

					CollateralObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LAObj.ID).all()
					for c in CollateralObj:
						CDict = copyData(MKT_LOAN_COLLATERAL,c)
						CDict.update({'ID':lc.ID})
						db.session.add(MKT_LOAN_COLLATERAL(**CDict))

					CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LAObj.ID).all()
					for b in CoBorrowerObj:
						BDict = copyData(MKT_LOAN_CO_BORROWER,b)
						BDict.update({'ID':lc.ID})
						db.session.add(MKT_LOAN_CO_BORROWER(**BDict))
				else:
					print '%s has no Loan Application ID %s'%(lc.ID,lc.LoanApplicationID)
					
			else:
				print '%s has no Loan Application ID'%lc.ID
			
		db.session.commit()
		
	except Exception as e:
		raise

def updateContractInfo(Branch=''):
	'''
	Update contract outstanding, total interest, asset class, and suspend
	Update schedule payment status, and partial amount
	'''
	try:
		LCObj = MKT_LOAN_CONTRACT.query
		if Branch:
			LCObj 	=	LCObj.filter(MKT_LOAN_CONTRACT.Branch==Branch)

		SystemDate = str(mktdate.getBankDate())
		updatePDNextRunDate(SystemDate,Branch)

		for l in LCObj:
			PDObj 		= 	MKT_PAST_DUE.query.get('PD%s'%l.ID)
			ScheduleObj =   MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==l.ID).\
							filter(MKT_REP_SCHEDULE.CollectionDate < SystemDate).\
							order_by(MKT_REP_SCHEDULE.CollectionDate.desc()).first()

			ScheduleObj7 =   MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==l.ID).\
							filter(MKT_REP_SCHEDULE.CollectionDate == SystemDate).\
							order_by(MKT_REP_SCHEDULE.CollectionDate.desc()).first()

			if ScheduleObj7:
				LoanBalance =	ScheduleObj7.Balance
				if ScheduleObj:
					LoanBalance =	ScheduleObj.Balance

				if ScheduleObj7.Principal < 0:
					LoanBalance =	ScheduleObj7.Balance

				l.Amount 	= 	LoanBalance

			OutstandingAmount 	= 	l.Disbursed
			if ScheduleObj:
				OutstandingAmount 	= 	ScheduleObj.Balance
			if PDObj:
				OutstandingAmount 	= 	PDObj.TotPrincipalDue + OutstandingAmount

			ScheduleObj2 	= 	db.session.query(func.sum(MKT_REP_SCHEDULE.Interest).label('TotalInterest')).\
								filter(MKT_REP_SCHEDULE.LoanID==l.ID).first()
			
			MoreThanOneYear = 'N'
			if int(l.FreqType) == 1:
				if int(l.Term) > 12:
					MoreThanOneYear = 'Y'
			if int(l.FreqType) == 2:
				if int(l.Term) > 52:
					MoreThanOneYear = 'Y'
			if int(l.FreqType) == 3:
				if int(l.Term) > 366:
					MoreThanOneYear = 'Y'

			PDDateObj 	= 	MKT_PD_DATE.query.filter(MKT_PD_DATE.ID=='PD%s'%l.ID).\
							filter(MKT_PD_DATE.NextRunDate==SystemDate).\
							filter(or_(MKT_PD_DATE.OutPriAmount>0, MKT_PD_DATE.OutIntAmount>0,MKT_PD_DATE.OutChgAmount>0)).\
							order_by(cast(MKT_PD_DATE.NumDayDue,Integer).desc()).first() 

			NumDayDue 	=	0
			if PDDateObj:
				NumDayDue 	=	PDDateObj.NumDayDue

			AssetClass 		=	mktpd.getLoanAssetClass(NumDayDue, l.LoanType, MoreThanOneYear)

			Suspend = 'N'
			AssetClassObj 	=	MKT_ASSET_CLASS.query.get(AssetClass)
			if AssetClassObj.IncomeRecog == 'N':
				Suspend = 'Y'

			ScheduleObj4 	= 	db.session.query(MKT_REP_SCHEDULE.CollectionDate).\
								filter(MKT_REP_SCHEDULE.LoanID==l.ID).\
								order_by(MKT_REP_SCHEDULE.CollectionDate.desc()).first() 

			if ScheduleObj4 and ScheduleObj4.CollectionDate != l.MaturityDate:
				l.MaturityDate 	=	ScheduleObj4.CollectionDate 

			l.Suspend 			= 	Suspend
			l.AssetClass 		= 	AssetClass
			l.NextRunDate 		= 	SystemDate
			l.TotalInterest 	= 	ScheduleObj2.TotalInterest
			l.OutstandingAmount = 	OutstandingAmount
			l.MoreThanOneYear   = 	MoreThanOneYear
			db.session.add(l)
			print l.ID, l.TotalInterest, l.OutstandingAmount, AssetClass, Suspend, NumDayDue

			ScheduleObj3 = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == l.ID).filter(MKT_REP_SCHEDULE.CollectionDate < SystemDate)
			for s in ScheduleObj3:
				PartPaidAmt = 	0
				PDDateObj1 	= 	MKT_PD_DATE.query.filter(MKT_PD_DATE.DueDate == s.CollectionDate).\
								filter(MKT_PD_DATE.ID == 'PD%s'%l.ID).first()
				TotalAmount = 	s.Principal + s.Interest + s.Charge if s.Principal >= 0 else s.Interest + s.Charge 

				if PDDateObj1:
					TotalAmount += PDDateObj1.PenaltyDue
					TotalPDAmount 	= 	PDDateObj1.OutPriAmount+PDDateObj1.OutIntAmount+PDDateObj1.OutChgAmount+PDDateObj1.OutPenAmount
					PartPaidAmt 	= 	TotalAmount - TotalPDAmount
					s.PartPaidAmt 	= 	PartPaidAmt
					
					# if PartPaidAmt == 0:
					# 	s.RepStatus = '4'
					if PartPaidAmt > 0:
						s.RepStatus = '2'
					if TotalAmount == TotalPDAmount:
						s.RepStatus = '1'
					if PartPaidAmt < 0:
						print 'Incorrect PD',s.CollectionDate,l.ID

				else:
					s.RepStatus = '3'
					s.PartPaidAmt = TotalAmount
					
				db.session.add(s)
			ScheduleObj6 = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == l.ID).filter(MKT_REP_SCHEDULE.CollectionDate >= SystemDate)
			for s in ScheduleObj6:
				s.RepStatus 	= 	0
				s.PartPaidAmt 	= 	0

				# if s.CollectionDate == SystemDate:
				# 	s.RepStatus 	= 	3
				# 	s.PartPaidAmt 	= 	s.Principal + s.Interest + s.Charge

				db.session.add(s)

			# ScheduleObj5 	= 	MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == l.ID).\
			# 					order_by(MKT_REP_SCHEDULE.CollectionDate.desc())
			# Obj1  	=	1
			# Obj2  	=	2
			# Count = 0
			# for s in ScheduleObj5:
			# 	Count += 1
			# 	if Count == 1: Obj1 = s
			# 	if Count == 2: Obj2 = s
			# 	if Count > 2: break

			# Obj1.Principal = Obj2.Balance
			# db.session.add(Obj1)
			'''
			ScheduleObj5 	= 	MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == l.ID)
			CurrencyObj 	=	mktmoney.getCurrencyObj(l.Currency)
			LoanBalance 	=	l.Disbursed
			TotalPrincipal 	=	0
			for s in ScheduleObj5:
				Interest 	= 	Decimal(mktmoney.toMoney(float(l.Interest),CurrencyObj).replace(',',''))
				Principal 	= 	Decimal(mktmoney.toMoney(float(l.Principal),CurrencyObj).replace(',',''))
				TotalPrincipal 	+=	Principal
				LoanBalance -=	Principal
				s.Principal =	Principal
				s.Interest 	=	Interest
				s.Balance 	=	LoanBalance 
				db.session.add(s) 

			if l.Disbursed != TotalPrincipal:
				DiffAmount 	=	l.Disbursed - TotalPrincipal
				s.Principal +=	DiffAmount 
			db.session.add(s) 
			'''
		db.session.commit()

	except Exception as e:
		raise 

def updatePDNextRunDate(SystemDate,Branch=''):
	try:
		PDDateObj = MKT_PD_DATE.query
		if Branch:
			PDDateObj = PDDateObj.filter(MKT_PD_DATE.Branch==Branch)
			
		for p in PDDateObj:
			p.NextRunDate = SystemDate
			db.session.add(p)

		db.session.commit()

	except Exception as e:
		raise 

def loadAIRtoAIRDetail(Branch='',**kwargs):
	try:
		LCObj = MKT_LOAN_CONTRACT.query
		if Branch:
			LCObj 	=	LCObj.filter(MKT_LOAN_CONTRACT.Branch==Branch)

		SystemDate = str(mktdate.getBankDate())

		LoanProductObj  = 	MKT_LOAN_PRODUCT.query
		AccSetting 		= 	mktsetting.getAccSetting()
		AccountObj 		=	MKT_ACCOUNT.query
		TellerParam 	= 	mktparam.getTellerParam()
		Transaction 	= 	"34"
		DateTimeNow 	= 	mktdate.getDateTimeNow()
		BankDateObj 	= 	mktdate.getBankDateObj()
		BankDate 		= 	BankDateObj.SystemDate
		TranDate 		= 	BankDateObj.LastMonthEnd
		Counter 		= 	1
		ReportingRateObj= mktaccounting.getReportingRateObj()

		DEFAULT_MODE = kwargs.get("DefaultMode") if "DefaultMode" in kwargs else ""
		if DEFAULT_MODE == "2":
			TranDate = BankDateObj.SystemDate

		if LCObj:
			for lc in LCObj:
				LoanID 			=	lc.ID
				Branch 			=	lc.Branch
				Account 		=	lc.Account
				Currency 		=	lc.Currency
				AssetClass 		=	lc.AssetClass
				AccrInterest 	=	lc.AccrInterest
				MoreThanOneYear =	lc.MoreThanOneYear
				InterestRate    =	lc.InterestRate
				BaseAmount 		=	lc.Amount

				LoanProduct  	=	lc.LoanProduct
				ProductObj 		=	LoanProductObj.get(LoanProduct)
				AIRCat 			=	ProductObj.IntReceivableCate
				LCYCurrency,LCYAmount 	= mktaccounting.setLCYAmount(ReportingRateObj,AccSetting,Currency,AccrInterest)
				CurrentYearCat	=	AccSetting.CurrYearCat
				if BankDateObj.LastSystemDate == BankDateObj.LastYearEnd:
					CurrentYearCat 	= AccSetting.PriorYearCat

				if int(AssetClass) > 10:
					SuspendCrCat= mktparam.getPDParam().SuspendCrCat
					DrCurrency	= Currency
					DrAmount	= AccrInterest
					CrCurrency	= Currency
					CrAmount	= AccrInterest
					DrCategory	= AIRCat
					CrCategory	= SuspendCrCat
					DrGL_KEYS 	= mktaccounting.getConsolKey(DrCategory, DrCurrency, AssetClass, "LC", MoreThanOneYear)
					CrGL_KEYS 	= mktaccounting.getConsolKey(CrCategory, CrCurrency)
				else:
					DrCurrency	= Currency
					CrCurrency	= LCYCurrency
					DrAmount	= AccrInterest
					CrAmount	= LCYAmount
					DrCategory	= AIRCat					
					DrGL_KEYS 	= mktaccounting.getConsolKey(DrCategory, DrCurrency, AssetClass, "LC", MoreThanOneYear)

					CrCategory	= CurrentYearCat
					CrGL_KEYS 	= mktaccounting.getConsolKey(CrCategory, CrCurrency)

					if DEFAULT_MODE == "2":
						CrCategory	= ProductObj.IntIncomeCate
						CrGL_KEYS 	= mktaccounting.getConsolKey(CrCategory, CrCurrency, AssetClass, "LC", MoreThanOneYear)	

				print 'Loading AIR...', Counter,Branch,LoanID,Account,AIRCat,Currency,AccrInterest,Transaction,TranDate
				Counter += 1

				mktloanaccrual.setLoanAccrualPosting(DrCategory, DrGL_KEYS, DrCurrency, DrAmount,CrCategory,CrGL_KEYS,CrCurrency,CrAmount, \
							Transaction, TranDate, LoanID, DateTimeNow, Branch, InterestRate, BaseAmount, LoanID, Description="")
				
			db.session.commit()	
	except Exception as e:
		raise

def runMigrate(Branch, PaidUpCapitalCat='99810001'):
	loadLoanOutstanding(Branch,DefaultMode='2')
	openBalance(Branch, PaidUpCapitalCat=PaidUpCapitalCat, DefaultMode='2')
	loadWithdrawalDisbursement(Branch,DefaultMode='2')
	loadDrawDownBalance(Branch,DefaultMode='2')
	updateAccruedInterest(Branch,DefaultMode='2')
	loadAccruedInterest(Branch,DefaultMode='2')
	loadProvisioning(Branch,DefaultMode='2')
	loadAIRtoAIRDetail(Branch,DefaultMode='2')


def loadAccrSaving(Branch=''):
	try:
		BankDateObj 	= 	mktdate.getBankDateObj()
		SystemDate 		= 	BankDateObj.SystemDate
		LastMonthEnd 	=	BankDateObj.LastMonthEnd
		One_day			=	mktdate.timedelta(days=1) # one day
		TranDate		=	datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date() - One_day

		AccountObj 	= 	MKT_ACCOUNT.query.\
						filter(MKT_ACCOUNT.NextAccrDate == str(SystemDate)).\
						filter(MKT_ACCOUNT.AccStatus == 'O').\
						filter(MKT_ACCOUNT.InterestRate != "0").\
						filter(MKT_ACCOUNT.Dormant == "N").\
						filter(MKT_ACCOUNT.ClosingDate == "").\
						filter(MKT_ACCOUNT.Blocked == "N").\
						filter(MKT_ACCOUNT.AccProduct.in_(['901']))
		if Branch:
			AccountObj 	=	AccountObj.filter(MKT_ACCOUNT.Branch == Branch)

		for a in AccountObj:
			print a.ID
			AccProductObj 		=	MKT_ACC_PRODUCT.query.get(a.AccProduct)
			IntDayBasis 		=	int(AccProductObj.IntDayBasis)
			IntExpenseCat 		=	AccProductObj.IntExpenseCat
			IntPayableCat 		=	AccProductObj.IntPayableCat
			IntAccrBasis 		=	int(AccProductObj.IntAccrBasis)
			IntCapitalization 	=	int(AccProductObj.IntCapitalization)

			Branch		=	a.Branch
			Currency	=	a.Currency
			AccountID	=	a.ID
			Balance 	=	float(a.Balance)
			RatePerYear =	float(a.InterestRate)
			
			DateFrom	=	OpenDate

			NumOfDay 	=	rescheduletools.getNumberOfDay(IntDayBasis, DateFrom, SystemDate)
			IntPerDay 	=	rescheduletools.getInterestPerDay(RatePerYear, Balance, IntDayBasis, SystemDate)
			Interest	=	float(IntPerDay) * float(NumOfDay)
			
			a.AccrInterest	=	Interest
			a.AccrCurMonth	=	IntPerDay
			a.AccrIntBooked	=	Interest-IntPerDay
			a.AccrCurCapital=	Interest
			db.session.add(a)

			Category 	= IntExpenseCat
			if not Category:
				# Call method for error message
				error_msg 	= "Interest expense category not found."
				TrueOrFalse = mktmessage.msgError(EOD, error_msg)

			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
			DateTimeNow = mktdate.getDateTimeNow()
			Transaction = mktsetting.getAccSetting().AccrIntTran
			Mode 		= "Direct"
			DrCr 		= "Dr"

			if Transaction:
				# Debit Accrued Interest Receivable Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Interest), 		# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate,				# TransactionDate
					AccountID,				# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				Category 	= IntPayableCat
				if not Category:
					# Call method for error message
					error_msg = "Interest payable category not found."
					TrueOrFalse = mktmessage.msgError(EOD, error_msg)

				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
				Transaction = mktsetting.getAccSetting().IntPayaTran
				Mode 		= "Direct"
				DrCr 		= "Cr"

				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Interest), 		# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate,				# TransactionDate
					AccountID,				# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)
		db.session.commit()
	except Exception as e:
		db.session.rollback()
		raise

def loadAccOutstanding(Branch=''):
	try:
		BankDateObj 	= 	mktdate.getBankDateObj()
		SystemDate 		= 	BankDateObj.SystemDate
		LastMonthEnd 	=	BankDateObj.LastMonthEnd
		One_day			=	mktdate.timedelta(days=1) # one day
		TranDate		=	datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date() - One_day

		AccountObj 	= 	MKT_ACCOUNT.query.\
						filter(MKT_ACCOUNT.AccProduct.in_(['101','901','902']))
						# filter(MKT_ACCOUNT.NextAccrDate == str(SystemDate)).\
						# filter(MKT_ACCOUNT.ClosingDate == "").\
						# filter(MKT_ACCOUNT.Blocked == "N")
						# filter(MKT_ACCOUNT.AccStatus == 'O').\
						# filter(MKT_ACCOUNT.Dormant == "N").\
						# filter(MKT_ACCOUNT.InterestRate != "0").\
		if Branch:
			AccountObj 	=	AccountObj.filter(MKT_ACCOUNT.Branch == Branch)

		TellerParam 	= 	mktparam.getTellerParam()
		VualtCategory   =	TellerParam.VaultCategory
		Transaction 	= 	TellerParam.DepTransaction
		DateTimeNow 	= 	mktdate.getDateTimeNow()

		for a in AccountObj:
			Branch		=	a.Branch
			Currency	=	a.Currency
			AccountID	=	a.ID
			Balance 	=	float(a.Balance)
			print a.ID,Balance
			Category	=	a.AccCategory
			VaultAccObj 	= 	MKT_ACCOUNT.query.filter(MKT_ACCOUNT.Currency == Currency).\
								filter(MKT_ACCOUNT.Branch == Branch).\
								filter(MKT_ACCOUNT.AccCategory == VualtCategory).\
								order_by(MKT_ACCOUNT.ID.asc()).first()
			
			VaultAccount 	=	VaultAccObj.ID
			a.Balance 		=	0
			a.AvailableBal	=	0
			db.session.add(a)

			FDID 		=	mktautoid.getAutoID('FRM_FUND_DEPOSIT')
			setNewFundTransferRecord(FDID, Balance, Branch, VaultAccount, VualtCategory, AccountID, Category, Currency, Transaction, TranDate, AccountID, "Data Migration", "System", DateTimeNow, "System", DateTimeNow)
				
			Category 	= VualtCategory
			if not Category:
				# Call method for error message
				error_msg 	= "Vualt expense category not found."
				TrueOrFalse = mktmessage.msgError(EOD, error_msg)

			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
			Mode 		= "InDirect"
			DrCr 		= "Dr"

			if Transaction:
				# Debit Accrued Interest Receivable Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					VaultAccount,						# Account
					VualtCategory,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Balance), 		# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate,				# TransactionDate
					AccountID,				# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				Category	=	a.AccCategory
				if not Category:
					# Call method for error message
					error_msg = "Interest payable category not found."
					TrueOrFalse = mktmessage.msgError(EOD, error_msg)

				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
				Mode 		= "InDirect"
				DrCr 		= "Cr"

				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					AccountID,						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Balance), 		# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate,				# TransactionDate
					AccountID,				# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)
		db.session.commit()
	except Exception as e:
		db.session.rollback()
		raise

def updateTotalInterest(Branch=''):
	try:
		if Branch:
			LCObj	=	MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.Branch==Branch)
		else:
			LCObj	=	MKT_LOAN_CONTRACT.query


		for l in LCObj:
			ScheduleObj		=	db.session.query(func.sum(MKT_REP_SCHEDULE.Interest).label('TotalInterest')).\
								filter(MKT_REP_SCHEDULE.LoanID==l.ID).first()
			if ScheduleObj:
				l.TotalInterest =	ScheduleObj.TotalInterest
				db.session.add(l)
			else:
				print 'Schedule not found for loan %s'%l.ID

		db.session.commit()

	except Exception as e:
		raise

def authorizeFundTransfer(Branch=''):
	try:
		if Branch:
			FTObj = MKT_FUND_TRANSFER_INAU.query.filter(MKT_FUND_TRANSFER_INAU.Branch==Branch)

		else:
			FTObj = MKT_FUND_TRANSFER_INAU.query

		DateTimeNow 	= 	mktdate.getDateTimeNow()
		
		for f in FTObj:
			
			Module = f.Module
			for i in range(2):
				if i==0:
					Category 	=	f.DrCategory
					AccountID 	=	f.DrAccount
					Currency 	=	f.DrCurrency
					DrCr 		=	"Dr"
					GL_KEYS 	=	f.DrGLKey if f.DrGLKey else mktaccounting.getConsolKey(Category, Currency, "", Module, "", "", "", "", "", "", "", "", "")

				else:
					Category 	=	f.CrCategory
					Currency 	=	f.CrCurrency
					AccountID 	=	f.CrAccount
					DrCr 		=	"Cr"
					GL_KEYS 	=	f.CrGLKey if f.CrGLKey else mktaccounting.getConsolKey(Category, Currency, "", Module, "", "", "", "", "", "", "", "", "")
					
				Mode	= 	"InDirect" if AccountID else "Direct"
				Amount	= 	f.Amount
				Branch 	= 	f.Branch
				Note 	= 	f.Note
				TranDate 	= 	f.TranDate
				Reference 	= 	f.ID
				Transaction = 	f.Transaction

				print "AUTH", "0", "System", DateTimeNow, "System", DateTimeNow, "", AccountID, Category, Currency, DrCr, Amount, Module, Transaction, TranDate, Reference, Note, "", Branch, GL_KEYS, Mode 

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					AccountID,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					Module,					# Module
					Transaction, 			# Transaction
					TranDate,				# TransactionDate
					Reference,				# Reference
					Note,					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

			mktaudit.moveINAUtoAUTH(MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,f.ID,Inputter='System',Createdon=DateTimeNow,Authorizer='System',Authorizeon=DateTimeNow,Curr="0")
			mktaudit.deleteINAU(MKT_FUND_TRANSFER_INAU,f.ID)

		db.session.commit()

	except Exception as e:
		raise

from app.Holiday.models import *

def generateMifidaSchedule(Branch=''):
	'''
	Generate Schedule for Mifida
	Requirement need to have in loan contract 
	- Disbursed
	- OutstandingAmount
	- TotalInterest
	- FirstCollectionDate
	- Installment
	'''
	try:
		if Branch:
			LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.Branch == Branch)
			# filter(MKT_LOAN_CONTRACT.ID=='LCM000002977')

		else:
			LoanObj = MKT_LOAN_CONTRACT.query

		BankDateObj 	= 	mktdate.getBankDateObj()
		SystemDate 		=	BankDateObj.SystemDate
		CurrentSDate 	=	datetime.strptime(str(SystemDate), "%Y-%m-%d").date()

		InterestDict 	=	{	'001':15, '002':7.5, '003':15, '004':7.5, '005':7.5, 
								'006':0, '007':0, '008':7.5, '009':15, '010':10, 
								'011':30}
		MonthList 		=	{
								1:'January',
								2:'February',
								3:'March',
								4:'April',
								5:'May',
								6:'June',
								7:'July',
								8:'August',
								9:'September',
								10:'October',
								11:'November',
								12:'December'
							}

		for l in LoanObj:
			print l.ID
			DisbursedAmount 	=	float(l.Disbursed)
			OutstandingAmount	=	float(l.OutstandingAmount)
			TotalInterest 		=	float(l.TotalInterest)
			FirstCollectionDate =	l.FirstCollectionDate
			Installment 		=	float(l.Installment)
			LoanProduct			=	l.LoanProduct
			Balance 			=	DisbursedAmount
			CollectionDate 		=	datetime.strptime(str(FirstCollectionDate), "%Y-%m-%d").date()
			PCDate 				=	datetime.strptime(str(l.ValueDate), "%Y-%m-%d").date()
			CollectedAmount 	=	0

			#Decimal('0.7325').quantize(Decimal('.001'), rounding=ROUND_HALF_UP)
			Sround 				=	1
			Principal_Br 		=	DisbursedAmount/Installment
			Principal			=	float(Decimal(str(Principal_Br/Sround)).quantize(Decimal('0'), rounding=ROUND_HALF_UP)*Sround)
			Principal_D			=	(Principal_Br - Principal) * int(Installment)

			# Interest_Br			=	TotalInterest/Installment
			# Interest			=	float(Decimal(str(Interest_Br/Sround)).quantize(Decimal('0'), rounding=ROUND_HALF_UP)*Sround)
			# Interest_D			=	(Interest_Br - Interest) * int(Installment)
			Interest 			=	Principal * InterestDict[LoanProduct] / 100
			Weekday				=	datetime.strptime(str(CollectionDate), "%Y-%m-%d").date().weekday()

			# print('Weekday',Weekday)
			LoanProductObj 		=	MKT_LOAN_PRODUCT.query.get(LoanProduct)
			PeriodDay			=	mktdate.timedelta(days=7) # 7 days

			if LoanProductObj:
				if str(l.FreqType) == '1':
					FCDate =	datetime.strptime(str(CollectionDate), "%Y-%m-%d").date()
					Day 	=	FCDate.day

				if str(l.FreqType) == '2': 
					PeriodDay	=	mktdate.timedelta(days=7) # 7 days
					if l.Branch == 'HAN01' and CollectionDate.month == 7 and CollectionDate.day in [30,31] and CollectionDate.year == 2018:
						CollectionDate = datetime.strptime('%s-%s-%s'%(CollectionDate.year,CollectionDate.month+1,9), "%Y-%m-%d").date()
						while CollectionDate.weekday() != Weekday:
							CollectionDate = CollectionDate + mktdate.timedelta(days=1)
						
						# print CollectionDate,'CollectionDate 30 31'

					if l.Branch == 'HAN01' and CollectionDate.month == 8 and CollectionDate.day in range(1,9) and CollectionDate.year == 2018:
						CollectionDate = datetime.strptime('%s-%s-%s'%(CollectionDate.year,CollectionDate.month,9), "%Y-%m-%d").date()
						while CollectionDate.weekday() != Weekday:
							CollectionDate = CollectionDate + mktdate.timedelta(days=1)

					if CollectionDate.day in [16,17,18] and CollectionDate.month == 4: 
						CollectionDate	=	CollectionDate + PeriodDay

					CollectionDate1 =	datetime.strptime(str(CollectionDate), "%Y-%m-%d").date()

			for i in range(0,int(Installment)):
				if i == int(Installment)-1:
					# Interest 	+=	Interest_D
					Principal 	+=	Principal_D
					l.MaturityDate = CollectionDate
					db.session.add(l)

				CollectedAmount 	+=	Principal
				Balance 	-=	Principal
				ScheduleObj =	MKT_REP_SCHEDULE()
				Status 		=	0
				PartPaidAmt =	0

				if SystemDate > str(CollectionDate):
					Status 		=	3
					PartPaidAmt =	Principal + Interest
					ExOutAmount = DisbursedAmount - CollectedAmount
					if OutstandingAmount > ExOutAmount:
						Status 	=	1
						PDPri 	=	Principal
						PDInt 	=	Interest
						DiffAmount = OutstandingAmount - ExOutAmount

						if DiffAmount >= Principal:
							PDPri 	=	Principal
							PartPaidAmt =	0
						else:
							PartPaidAmt =	(Principal-DiffAmount) + Interest
							Status 	=	2
							PDPri 	=	DiffAmount
							PDInt 	=	0

				createPDDateRecord(l.ID, PDPri, PDInt, CollectionDate, SystemDate,l)
				NumDay 	=	(CollectionDate - PCDate).days
				PCDate 	=	CollectionDate
				No 		=	i+1
				ScheduleObj.ID 				=	'%s%s'%(l.ID,No)
				ScheduleObj.LoanID 			=	l.ID
				ScheduleObj.No 				=	No
				ScheduleObj.CollectionDate 	=	CollectionDate
				ScheduleObj.Principal 		=	Principal
				ScheduleObj.Interest 		=	Interest
				ScheduleObj.Charge 			=	0
				ScheduleObj.Balance 		=	Balance
				ScheduleObj.NumDay			=	NumDay
				ScheduleObj.RepStatus		=	Status
				ScheduleObj.PartPaidAmt 	=	PartPaidAmt
				ScheduleObj.Branch			=	Branch
				
				db.session.add(ScheduleObj)

				if str(l.FreqType) == '1':
					if FCDate.month == 12:
						Month	=	1
						Year 	=	FCDate.year+1
					else:
						Year	=	FCDate.year
						Month	=	FCDate.month + 1

					CollectionDate	=	datetime.strptime('%s-%s-%s'%(Year,Month,Day), "%Y-%m-%d").date()

				else:
					CollectionDate	=	datetime.strptime(str(CollectionDate), "%Y-%m-%d").date()
					# print(CollectionDate - CollectionDate1,CollectionDate ,CollectionDate1)
					if CollectionDate - CollectionDate1 < mktdate.timedelta(days=5):
						CollectionDate	=	datetime.strptime(str(CollectionDate1), "%Y-%m-%d").date() + PeriodDay
					else:
						CollectionDate	=	datetime.strptime(str(CollectionDate), "%Y-%m-%d").date() + PeriodDay

					CollectionDate1 =	CollectionDate

				CheckHoliday 	=	True

				# print CollectionDate,'===== CollectionDate =====',i
				while CheckHoliday:
					# print CollectionDate,'CollectionDate while'
					if l.Branch == 'HAN01' and CollectionDate.month == 7 and CollectionDate.day in [30,31] and CollectionDate.year == 2018:
						# print CollectionDate,'CollectionDate 30 31'
						CollectionDate = datetime.strptime('%s-%s-%s'%(CollectionDate.year,CollectionDate.month+1,9), "%Y-%m-%d").date()
						while CollectionDate.weekday() != Weekday:
							CollectionDate = CollectionDate + mktdate.timedelta(days=1)
						
					if l.Branch == 'HAN01' and CollectionDate.month == 8 and CollectionDate.day in range(1,9) and CollectionDate.year == 2018:
						# print CollectionDate,'CollectionDate 1-8'
						CollectionDate = datetime.strptime('%s-%s-%s'%(CollectionDate.year,CollectionDate.month,9), "%Y-%m-%d").date()
						while CollectionDate.weekday() != Weekday:
							CollectionDate = CollectionDate + mktdate.timedelta(days=1)

					if CollectionDate.month == 4 and CollectionDate.year == 2018 and CollectionDate.day in range(16,19):
						CollectionDate = datetime.strptime('%s-%s-%s'%(CollectionDate.year,CollectionDate.month,19), "%Y-%m-%d").date()
						while CollectionDate.weekday() != Weekday:
							CollectionDate = CollectionDate + mktdate.timedelta(days=1)

					if CollectionDate.month == 4 and CollectionDate.year == 2019 and CollectionDate.day in range(14,18):
						CollectionDate = datetime.strptime('%s-%s-%s'%(CollectionDate.year,CollectionDate.month,18), "%Y-%m-%d").date()
						while CollectionDate.weekday() != Weekday:
							CollectionDate = CollectionDate + mktdate.timedelta(days=1)

					if CollectionDate.weekday() > 4:
						# print Weekday,CollectionDate,'>4'
						CollectionDate	=	CollectionDate + mktdate.timedelta(days=1)
						CheckHoliday	=	True

					else:
						if CollectionDate > CurrentSDate:
							if CollectionDate.year == 2019 and CollectionDate.day in [15,16,17] and CollectionDate.month == 4:
								CollectionDate 	=	CollectionDate + PeriodDay

							Holiday 	=	MKT_HOLIDAY.query.get(str(CollectionDate.year))
							if Holiday:
								DayList	=	getattr(Holiday,MonthList[CollectionDate.month]).split()
									
								if DayList and str(CollectionDate.day).zfill(2) in DayList:
									# print Weekday,CollectionDate,str(CollectionDate.day).zfill(2)
									CollectionDate	=	CollectionDate + mktdate.timedelta(days=1)
									CheckHoliday	=	True
								
								else:
									CheckHoliday	=	False
									
							else:
								CheckHoliday	=	False
								
								S = 1
								while CollectionDate.weekday() != Weekday:
									CollectionDate	=	CollectionDate + mktdate.timedelta(days=1)
									S = 0

								if S:
									CheckHoliday	=	False
								else:
									CheckHoliday	=	True
						
						else:
							CheckHoliday	=	False


			createPastDueRecord(l)
			
		db.session.commit()
	except Exception as e:
		raise 

def createPastDueRecord(LoanObj):
	try:
		PDObj 		=	db.session.query(
							MKT_PD_DATE.ID,
							func.sum(MKT_PD_DATE.OutAmount).label('OutAmount'),
							func.sum(MKT_PD_DATE.OutPriAmount).label('OutPriAmount'),
							func.sum(MKT_PD_DATE.OutIntAmount).label('OutIntAmount'),
							func.sum(MKT_PD_DATE.OutPenAmount).label('OutPenAmount'),
							func.sum(MKT_PD_DATE.OutChgAmount).label('OutChgAmount')
						).\
						filter(MKT_PD_DATE.ID == 'PD%s'%LoanObj.ID).\
						group_by(MKT_PD_DATE.ID).first()

		if PDObj:
			PastDueObj = MKT_PAST_DUE()
			PastDueObj.ID 				=	'PD%s'%LoanObj.ID
			PastDueObj.LoanID 			=	LoanObj.ID
			PastDueObj.Branch 			=	LoanObj.Branch
			PastDueObj.Customer 		=	LoanObj.ContractCustomerID
			PastDueObj.Currency 		=	LoanObj.Currency
			PastDueObj.Category 		=	LoanObj.Category
			PastDueObj.TotODAmount 		=	PDObj.OutAmount
			PastDueObj.TotPrincipalDue 	=	PDObj.OutPriAmount
			PastDueObj.TotInterestDue 	=	PDObj.OutIntAmount
			PastDueObj.TotPenaltyDue 	=	PDObj.OutPenAmount
			PastDueObj.TotChargeDue 	=	PDObj.OutChgAmount
			db.session.add(PastDueObj)

	except Exception as e:
		raise

def createPDDateRecord(ID,PDPri, PDInt, CollectionDate, SystemDate, l):
	try:
		PDDateObj 	=	MKT_PD_DATE()
		DateFrom 	=	datetime.strptime(str(CollectionDate), "%Y-%m-%d").date()
		DateTo 		=	datetime.strptime(str(SystemDate), "%Y-%m-%d").date()
		NumDayDue 	=	mktdate.getDatediff360(DateFrom,DateTo)
		OutAmount	=	PDPri + PDInt

		PDDateObj.ID			=	'PD%s'%ID
		PDDateObj.PDID			=	('PD%s%s'%(ID,str(CollectionDate)[2:])).replace('-','')
		PDDateObj.DueDate		=	CollectionDate
		PDDateObj.Branch		=	l.Branch
		PDDateObj.ChargeDue		=	0
		db.session.add(PDDateObj)

	except Exception as e:
		raise

def generateSchedule(LiveRecord=False,LoanID='',BaseDateKey=0):
	try:
		if LiveRecord:
			LoanObj = MKT_LOAN_CONTRACT.query
			ScheduleTable = MKT_REP_SCHEDULE
			Status = "AUTH"
			ScheduleDefineTable	=	MKT_SCHED_DEFINE

		else:
			Status = "INAU"
			ScheduleDefineTable	=	MKT_SCHED_DEFINE_INAU
			LoanObj = MKT_LOAN_CONTRACT_INAU.query
			ScheduleTable = MKT_REP_SCHEDULE_INAU
		
		if LoanID != '':
			LoanObj = LoanObj.get(LoanID)
		
		for l in LoanObj:
			print l.ID
			Branch 				=	l.Branch
			Inputter 			=	l.Inputter
			Createdon 			=	l.Createdon
			Authorizer 			=	l.Authorizer
			Authorizeon 		=	l.Authorizeon
			Product 			= 	MKT_LOAN_PRODUCT.query.get(l.LoanProduct)
			RepaymentMode 		= 	int(Product.RepMode) if Product.RepMode else 1
			InterestDayBasis 	= 	int(Product.IntDayBasis) if Product else 0
			FwdBwdKey 			=	int(Product.FWDBWDKey) if Product else FwdBwdKey
			
			if not BaseDateKey:
				BaseDateKey 		= 	int(Product.BaseDateKey) if Product else 0

			FrequencyP 			=	1
			FrequencyI 			=	1
			ScheduleDefineObj	=	ScheduleDefineTable.query.get(l.ID)

			if ScheduleDefineObj:
				FrequencyP = ScheduleDefineObj.PrincipalFreq
				FrequencyI = ScheduleDefineObj.InterestFreq

			# 12000.0 2018-05-31 24.0 1 1 12 2 2 1 USD 1 1 1 1 KH 2018-07-23 False   False {}
			# 12000.0 2018-05-31 24   1 1 12 2 2 1 USD 1 1 1 1 KH 2018-07-23 False   False {}

			print l.Disbursed, l.ValueDate, l.InterestRate, l.FreqType, l.Frequency, l.Installment, InterestDayBasis, FwdBwdKey, '1', l.Currency, BaseDateKey, '1', '1', '1', 'KH', l.FirstCollectionDate, False, '', '', False, {}
			Schedule = rescheduletools.getScheduleDeclining(
								float(l.Disbursed),
								l.ValueDate,
								float(l.InterestRate),
								int(l.FreqType),
								int(l.Frequency),
								int(l.Installment),
								InterestDayBasis,
								FwdBwdKey,
								'1',#HolidayOption
								l.Currency,
								BaseDateKey,
								FrequencyP,#FrequencyP
								FrequencyI,#FrequencyI
								1,#RepaymentMode
								'KH',
								l.FirstCollectionDate,#FirstInstallmentDate
								False,#Use IRR
								'',#PaymentHoliday
								'',#NumOfHolidayInstallment
								False,#OptWaiveInterest
								ParamCharge={}
						)

			TotalInterest 	= 0
			for row in Schedule:
				ID 				= l.ID
				LoanID 			= l.ID
				Principal 		= ""
				Interest 		= ""
				Balance 		= ""
				NumDay 			= 0
				RepStatus 		= 0
				PartPaidAmt 	= 0
				No 				= int(row['InstallmentNo'])
				ID 				= str(ID) + str(No)
				MaturityDate 	= row['CollectionDate']
				CollectionDate 	= row['CollectionDate']
				Charge 			= str(row['Charge'].replace(",", ""))
				Principal 		= str(row['Principal'].replace(",", ""))
				Interest 		= str(row['Interest'].replace(",", ""))
				Balance 		= str(row['Balance'].replace(",", ""))
				NumDay 			= str(row['NumberOfDay'])
				TotalInterest 	+= float(Interest)


				RepSchedule = ScheduleTable(
								Status 			=	Status,
								Curr 			= 	"0",
								Inputter 		=	Inputter,
								Createdon 		= 	Createdon,
								Authorizer 		= 	Authorizer,
								Authorizeon 	= 	Authorizeon,
								ID 				= 	ID,
								LoanID 			= 	LoanID,
								No 				= 	No,
								CollectionDate 	=	CollectionDate,
								Principal 		= 	Principal,
								Interest 		= 	Interest,
								Balance 		= 	Balance,
								NumDay 			= 	NumDay,
								RepStatus 		= 	RepStatus,
								PartPaidAmt 	= 	PartPaidAmt,
								Branch 			=	Branch,
								Charge 			=	Charge
							)

				db.session.add(RepSchedule)

			l.MaturityDate 	= MaturityDate
			l.TotalInterest	= TotalInterest
			db.session.add(l)

		db.session.commit()

	except Exception as e:
		raise 

def loadMifidaSaving(Branch='', SCategory=''):
	try:
		TellerParam 	= 	mktparam.getTellerParam()
		VaultCategory   =	TellerParam.VaultCategory
		BankDateObj 	= 	mktdate.getBankDateObj()
		SystemDate 		= 	BankDateObj.SystemDate
		LastMonthEnd 	=	BankDateObj.LastMonthEnd
		One_day			=	mktdate.timedelta(days=1) # one day
		TranDate		=	datetime.strptime(str(BankDateObj.SystemDate), "%Y-%m-%d").date()

		if Branch:
			AccountObj 	= 	MKT_ACCOUNT.query.\
						filter(MKT_ACCOUNT.NextAccrDate == str(SystemDate)).\
						filter(MKT_ACCOUNT.AccStatus == 'O').\
						filter(MKT_ACCOUNT.InterestRate != "0").\
						filter(MKT_ACCOUNT.Dormant == "N").\
						filter(MKT_ACCOUNT.ClosingDate == "").\
						filter(MKT_ACCOUNT.Blocked == "N").\
						filter(MKT_ACCOUNT.Branch == Branch)
		else:
			AccountObj 	= 	MKT_ACCOUNT.query.\
							filter(MKT_ACCOUNT.NextAccrDate == str(SystemDate)).\
							filter(MKT_ACCOUNT.AccStatus == 'O').\
							filter(MKT_ACCOUNT.InterestRate != "0").\
							filter(MKT_ACCOUNT.Dormant == "N").\
							filter(MKT_ACCOUNT.ClosingDate == "").\
							filter(MKT_ACCOUNT.Blocked == "N")

		for a in AccountObj:
			print a.ID
			AccProductObj 		=	MKT_ACC_PRODUCT.query.get(a.AccProduct)
			IntDayBasis 		=	int(AccProductObj.IntDayBasis)
			IntExpenseCat 		=	AccProductObj.IntExpenseCat
			IntPayableCat 		=	AccProductObj.IntPayableCat
			AccCategory			=	AccProductObj.CategoryList
			AccrInterest 		=	a.AccrInterest
			Balance 			=	a.Balance

			Branch				=	a.Branch
			Currency			=	a.Currency
			AccountID			=	a.ID
			if SCategory:
				VaultCategory   = 	SCategory
				VaultAccount 	=	''

			else:
				VaultAccObj 		=	MKT_ACCOUNT.query.filter(MKT_ACCOUNT.Currency == Currency).\
										filter(MKT_ACCOUNT.Branch == Branch).\
										filter(MKT_ACCOUNT.AccCategory == VaultCategory).\
										order_by(MKT_ACCOUNT.ID.asc()).first()
					
				VaultAccount 		=	VaultAccObj.ID

			Transaction =	"62"
			GL_KEYS 	= mktaccounting.getConsolKey(VaultCategory, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
			DateTimeNow = mktdate.getDateTimeNow()
			
			Mode 		= "InDirect"
			DrCr 		= "Dr"

			if SCategory:
				Mode 			=	"Direct"

			if Transaction:
				# Debit Accrued Interest Receivable Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					VaultAccount,			# Account
					VaultCategory,			# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Balance), 		# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate,				# TransactionDate
					AccountID,				# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				GL_KEYS 	= mktaccounting.getConsolKey(AccCategory, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
				Mode 		= "InDirect"
				DrCr 		= "Cr"

				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					AccountID,						# Account
					AccCategory,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Balance), 		# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate,				# TransactionDate
					AccountID,				# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

			Category 	= IntExpenseCat
			if not Category:
				# Call method for error message
				error_msg 	= "Interest expense category not found."
				TrueOrFalse = mktmessage.msgError(EOD, error_msg)

			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
			DateTimeNow = mktdate.getDateTimeNow()
			# Transaction = mktsetting.getAccSetting().AccrIntTran
			Transaction = 23

			Mode 		= "Direct"
			DrCr 		= "Dr"

			if Transaction:
				# Debit Accrued Interest Receivable Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(AccrInterest), 		# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate,				# TransactionDate
					AccountID,				# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				Category 	= IntPayableCat
				if not Category:
					# Call method for error message
					error_msg = "Interest payable category not found."
					TrueOrFalse = mktmessage.msgError(EOD, error_msg)

				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
				# Transaction = mktsetting.getAccSetting().IntPayaTran
				Mode 		= "Direct"
				DrCr 		= "Cr"

				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(AccrInterest), 		# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate,				# TransactionDate
					AccountID,				# Reference
					"Data Migration",		# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

			a.Balance = Balance
			a.AvailableBal = Balance
			db.session.add(a)
		db.session.commit()

	except Exception as e:
		raise
def authorizeFundTransfer(Branch=''):	
    try:
        if Branch:
            FTObj = MKT_FUND_TRANSFER_INAU.query.filter(MKT_FUND_TRANSFER_INAU.Branch==Branch)

        else:
            FTObj = MKT_FUND_TRANSFER_INAU.query

        DateTimeNow     =     mktdate.getDateTimeNow()
        
        for f in FTObj:
            
            Module = f.Module
            for i in range(2):
                if i==0:
                    Category     =    f.DrCategory
                    AccountID     =    f.DrAccount
                    Currency     =    f.DrCurrency
                    DrCr         =    "Dr"
                    GL_KEYS     =    f.DrGLKey if f.DrGLKey else mktaccounting.getConsolKey(Category, Currency, "", Module, "", "", "", "", "", "", "", "", "")

                else:
                    Category     =    f.CrCategory
                    Currency     =    f.CrCurrency
                    AccountID     =    f.CrAccount
                    DrCr         =    "Cr"
                    GL_KEYS     =    f.CrGLKey if f.CrGLKey else mktaccounting.getConsolKey(Category, Currency, "", Module, "", "", "", "", "", "", "", "", "")
                    
                Mode    =     "InDirect" if AccountID else "Direct"
                Amount    =     f.Amount
                Branch     =     f.Branch
                Note     =     f.Note
                TranDate     =     f.TranDate
                Reference     =     f.ID
                Transaction =     f.Transaction

                print "AUTH", "0", "System", DateTimeNow, "System", DateTimeNow, "", AccountID, Category, Currency, DrCr, Amount, Module, Transaction, TranDate, Reference, Note, "", Branch, GL_KEYS, Mode 

                mktaccounting.postAccounting(
                    "AUTH",                 # Status
                    "0",                     # Curr
                    "System",                # Inputter
                    DateTimeNow,             # Createdon
                    "System",                # Authorizer
                    DateTimeNow,            # Authorizeon
                    "",                     # AEID
                    AccountID,                # Account
                    Category,                # Category
                    Currency,                # Currency
                    DrCr,                    # DrCr
                    Decimal(Amount),         # Amount
                    Module,                    # Module
                    Transaction,             # Transaction
                    TranDate,                # TransactionDate
                    Reference,                # Reference
                    Note,                    # Note
                    "",                     # JNID
                    Branch,                    # Branch
                    GL_KEYS,                # GL_KEYS
                    Mode                     # Mode check to insert Journal for category
                )

            mktaudit.moveINAUtoAUTH(MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,f.ID,Inputter='System',Createdon=DateTimeNow,Authorizer='System',Authorizeon=DateTimeNow,Curr="0")
            mktaudit.deleteINAU(MKT_FUND_TRANSFER_INAU,f.ID)

        db.session.commit()

    except:
        raise
