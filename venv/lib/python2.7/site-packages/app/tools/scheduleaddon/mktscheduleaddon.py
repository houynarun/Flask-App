from app 								import db
from app.RepaymentSchedule.models 		import *
from app.Account.models 				import *
from app.ScheduleAddon.models 			import *
from app.LoanContract.models 			import *
import app.tools.mktdate 				as mktdate
import app.tools.mktdb 					as mktdb
import app.tools.mktaccounting 			as mktaccounting
import app.tools.mktmoney				as mktmoney
import app.tools.loantools.rescheduletools 		as mktreschedule
from decimal import *

def setScheduleAddonProcess():
	'''
		Collect Additional Payment such as Insurance, Saving when run eod etc.	
		============================================================
		Process Flow
		============================================================
			1. Collect PastDue for schedule addon if exist
			2. Collect Addon on collection date
	'''
	try:
		print "Schedule Addon..."
		BankDate 	= 	mktdate.getBankDate()
		NextRunDate = 	mktdate.getNextDay(BankDate,1)

		#Collect PastDue	
		PastDueObj 		=	db.session.query(MKT_SCHEDULE_ADDON.ID,
												 MKT_SCHEDULE_ADDON.CustomerID,
												 MKT_SCHEDULE_ADDON.LoanID,
												 MKT_SCHEDULE_ADDON.ActualCollection,
												 MKT_SCHEDULE_ADDON.PastDue,
												 MKT_SCHEDULE_ADDON.AddonType,
												 MKT_SCHEDULE_ADDON.Currency,
												 MKT_LOAN_CONTRACT.Account,
												 MKT_LOAN_CONTRACT.Branch,
												 MKT_SCHEDULE_ADDON_PD.ID.label("PD_ID"),
												 MKT_SCHEDULE_ADDON_PD.CollectionDate,
												 MKT_SCHEDULE_ADDON_PD.PastDue.label("PD_PastDue"),
												 MKT_SCHEDULE_ADDON_PD.PDOutstanding,
												 MKT_SCHEDULE_ADDON_PARAM.ID.label("ParamID"),
												 MKT_SCHEDULE_ADDON_PARAM.CollectionTran.label("CollectionTran"),
												 MKT_SCHEDULE_ADDON_PARAM.PDCollectionTran.label("PDCollectionTran"),
												 MKT_SCHEDULE_ADDON_PARAM.Category.label("Category"),
												 MKT_SCHEDULE_ADDON_PARAM.Mode.label("Mode"),
												 MKT_SCHEDULE_ADDON_PARAM.Description.label("Description")).\
											join(
												MKT_LOAN_CONTRACT,
												MKT_LOAN_CONTRACT.ID == MKT_SCHEDULE_ADDON.LoanID
											).\
											join(
												MKT_SCHEDULE_ADDON_PD,
												MKT_SCHEDULE_ADDON_PD.ID == MKT_SCHEDULE_ADDON.ID+MKT_SCHEDULE_ADDON.AddonType  
											).\
											join(
												MKT_SCHEDULE_ADDON_PARAM,
												MKT_SCHEDULE_ADDON_PARAM.ID == MKT_SCHEDULE_ADDON.AddonType
											).\
											filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
											filter(MKT_SCHEDULE_ADDON_PD.PDOutstanding > 0).\
											filter(MKT_SCHEDULE_ADDON_PD.NextRunDate == str(BankDate)).\
											order_by(MKT_SCHEDULE_ADDON_PARAM.CollectionOrder.asc())

		# print "PastDueObj ", PastDueObj.count()
		
		print "1. Collect Past Due Addon..."

		if PastDueObj.all():
  			for row in PastDueObj:
  				CurrencyObj 	= 	mktmoney.getCurrencyObj(row.Currency)
  				AddonObj 		= 	MKT_SCHEDULE_ADDON.query.get(row.ID)
  				LoanID 			= 	row.LoanID
				Category  		= 	row.Category
				CollectionTran	= 	row.CollectionTran
				PDCollectionTran= 	row.PDCollectionTran

  				PDOutstanding 	=	row.PDOutstanding
  				PastDue 		=	AddonObj.PastDue
  				Account 	  	=	row.Account
  				Currency		=	row.Currency
  				PD_ID 			=	row.PD_ID
  				ID				=	row.ID
  				AddonType 		=	row.AddonType
  				ActualCollection= 	AddonObj.ActualCollection
  				Branch			= 	row.Branch
  				CollectionDate  = 	row.CollectionDate

  				AccountObj		= 	MKT_ACCOUNT.query.get(Account)
  				Balance 		=	AccountObj.Balance

  				CollectAmount 	= 	0

  				if Balance >= PDOutstanding:
  					CollectAmount = PDOutstanding
				else:
					CollectAmount = Balance

				# print "Collect PD %s %s with amount %s \n" % (PD_ID, PDOutstanding, CollectAmount)

				#post accounting
				PostData = {"Branch"		: 	row.Branch,
							"Transaction"	:	PDCollectionTran,
							"TranDate" 		:	str(BankDate),
							"Module"		:	"LC",
							"Reference"		: 	row.LoanID,
							"Amount"		:	Decimal(CollectAmount),
							"Currency"		:	Currency,
							"Note"			:	"Collection from PD of %s " % row.Description,
							"Account"		:	Account,
							"DrCategory"	:	AccountObj.AccCategory,#DrawDown
							"CrCategory"	:	Category,#Other Non Interest Income
							"DrMode"		:	"Indirect",
							"CrMode"		:	"Direct",
							"UserReference" : 	ID}

				# print "Post accounting for pd amount %s " % CollectAmount
				postAccountingAddOn(**PostData)

				SchDeData = {}
				#update (widthdraw) CollectAmount from PDOutstanding of MKT_SCHEDULE_ADDON_PD, PastDue of MKT_SCHEDULE_ADDON
				#update PastDue of MKT_SCHEDULE_ADDON
				PastDue   =	PastDue - CollectAmount
				ActualCollection = ActualCollection + CollectAmount
				SchDeData.update({"PastDue" : PastDue,
							 	  "ActualCollection": ActualCollection})

				# print "Update addon"
				mktdb.updateRecord(MKT_SCHEDULE_ADDON, [MKT_SCHEDULE_ADDON.ID == ID], SchDeData)

				#insert collect amount to MKT_SCHEDULE_ADDON_COLLECT
				if CollectAmount > 0:					
					CollectID 	= "%s%s" % (ID,AddonType)
					CollectData = {"ID" 			:	CollectID,
								   "CollectionDate"	:	str(BankDate),
								   "Amount"			:	Decimal(CollectAmount),
								   "Inputter"		: 	"System",
								   "Createdon" 		: 	mktdate.getDateTimeNow(),
								   "Authorizer" 	: 	"System",
								   "Authorizeon"	:	mktdate.getDateTimeNow(),
								   "Status"			: 	"AUTH",
								   "Curr"			:	"0",
								   "Branch"			:	Branch,
								   "CustomerID" 	: 	row.CustomerID,
								   "LoanID"			: 	row.LoanID,
								   "Currency"		:	Currency,
								   "Note"			:	"PD Collect"}

					print "%s - %s Past due collection with amount %s." % (LoanID, row.Description,
								mktmoney.toMoney(float(CollectAmount),CurrencyObj))

					ObjInsert 	= MKT_SCHEDULE_ADDON_COLLECT(**CollectData)
					db.session.add(ObjInsert)	

				#if enough collection update paid date
				PDOutstanding = PDOutstanding - CollectAmount
				PDData = {"PDOutstanding" : PDOutstanding,
						  "NextRunDate"   : str(NextRunDate)}

				if PDOutstanding == 0:
					PDData.update({"PaidDate" : str(BankDate)})

				# print "Update addon pastdue"
				mktdb.updateRecord(MKT_SCHEDULE_ADDON_PD, [MKT_SCHEDULE_ADDON_PD.ID == PD_ID,
														   MKT_SCHEDULE_ADDON_PD.CollectionDate == CollectionDate], PDData)

				#commit
				db.session.commit()
		else:
			print "There are no past due to collect."

		
		print "\n2. Collect Addon..."
		AddOnObj 		=	db.session.query(MKT_SCHEDULE_ADDON.ID,
												 MKT_SCHEDULE_ADDON.CustomerID,
												 MKT_SCHEDULE_ADDON.LoanID,
												 MKT_SCHEDULE_ADDON.ActualCollection,
												 MKT_SCHEDULE_ADDON.PastDue,
												 MKT_SCHEDULE_ADDON.AddonType,
												 MKT_SCHEDULE_ADDON.Currency,
												 MKT_SCHEDULE_ADDON_DE.DetailID,
												 MKT_SCHEDULE_ADDON_DE.Value,
												 MKT_SCHEDULE_ADDON_DE.StartInstallment,
												 MKT_SCHEDULE_ADDON_DE.EndInstallment,
												 MKT_LOAN_CONTRACT.Account,
												 MKT_LOAN_CONTRACT.Branch,
												 MKT_LOAN_CONTRACT.OutstandingAmount,
												 MKT_LOAN_CONTRACT.Disbursed,
												 MKT_REP_SCHEDULE.CollectionDate,
												 MKT_REP_SCHEDULE.NumDay,
												 MKT_REP_SCHEDULE.Balance,
												 MKT_REP_SCHEDULE.No,
												 MKT_SCHEDULE_ADDON_PARAM.ID.label("ParamID"),
												 MKT_SCHEDULE_ADDON_PARAM.CollectionTran.label("CollectionTran"),
												 MKT_SCHEDULE_ADDON_PARAM.PDCollectionTran.label("PDCollectionTran"),
												 MKT_SCHEDULE_ADDON_PARAM.Category.label("Category"),
												 MKT_SCHEDULE_ADDON_PARAM.Mode.label("Mode"),
												 MKT_SCHEDULE_ADDON_PARAM.Description.label("Description")).\
											join(
												MKT_SCHEDULE_ADDON_DE, 
												MKT_SCHEDULE_ADDON_DE.ID == MKT_SCHEDULE_ADDON.ID
											).\
											join(
												MKT_LOAN_CONTRACT,
												MKT_LOAN_CONTRACT.ID == MKT_SCHEDULE_ADDON.LoanID
											).\
											join(
												MKT_REP_SCHEDULE,
												MKT_REP_SCHEDULE.LoanID == MKT_SCHEDULE_ADDON.LoanID
											).\
											join(
												MKT_SCHEDULE_ADDON_PARAM,
												MKT_SCHEDULE_ADDON_PARAM.ID == MKT_SCHEDULE_ADDON.AddonType
											).\
											filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
											filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
											filter(MKT_REP_SCHEDULE.CollectionDate == str(BankDate)).\
											filter(MKT_SCHEDULE_ADDON.NextRunDate == str(BankDate)).\
											filter(MKT_SCHEDULE_ADDON_DE.StartInstallment <= MKT_REP_SCHEDULE.No).\
											filter(MKT_SCHEDULE_ADDON_DE.EndInstallment >= MKT_REP_SCHEDULE.No).\
											order_by(MKT_SCHEDULE_ADDON_PARAM.CollectionOrder.asc())


		# print "AddOnObj ", AddOnObj.count()

		SchAddOnList = []

		if AddOnObj.all():
			for row in AddOnObj:
				
				SchAddOnList.append(row.ID)
				Category  		= 	row.Category
				CollectionTran	= 	row.CollectionTran
				PDCollectionTran= 	row.PDCollectionTran

				Mode 			=	row.Mode #1=Fixed Amount, 2=Charge Percentage of loan outstanding, 3=#Calculate the same interest,Actual Number Of Day
				Value 			=	row.Value
				CollectionDate  =	row.CollectionDate
  				Account 	  	=	row.Account
  				Currency		=	row.Currency
  				ID				=	row.ID
  				DetailID 		=	row.DetailID
  				AddonType 		=	row.AddonType
  				ActualCollection=	row.ActualCollection if row.ActualCollection else 0
  				Branch 			=	row.Branch
  				CurrencyObj 	= 	mktmoney.getCurrencyObj(Currency)
  				AccountObj		= 	MKT_ACCOUNT.query.get(Account)
  				Balance 		=	AccountObj.Balance

  				CollectAmount 	= 	0
  				PastDueAmount 	=	0

  				#Calculate Collection Value, Collection mean amount (addon) that need to collect from customer. 
  				#It calculate based on cofig
  				Condition 		=	{"Type"				: int(Mode),
  									 "Percentage"		: Value,
  									 "FixAmount"		: Value,
  									 "LoanOutstanding"	: row.Disbursed,
  									 "NumberOfDay"		: row.NumDay,
  									 "LoanBalance"		: row.Balance,
  									 "ChargeRate"		: Value
  									}
				# print "Condition ", Condition
  				Collection 		=	mktreschedule.calculateCharge(**Condition)
  				Collection 		= 	mktmoney.toMoney(float(Collection), CurrencyObj)
				Collection 		= 	str(Collection).replace(',', '')
				Collection 		= 	Decimal(Collection)
  				# print "Collection ", Collection

  				if Balance >= Collection:
  					CollectAmount = Collection
				else:
					CollectAmount = Balance
					PastDueAmount = Collection - Balance


				#post accounting
				PostData = {"Branch"		: 	row.Branch,
							"Transaction"	:	CollectionTran,
							"TranDate" 		:	str(BankDate),
							"Module"		:	"LC",
							"Reference"		: 	row.LoanID,
							"Amount"		:	Decimal(CollectAmount),
							"Currency"		:	Currency,
							"Note"			:	"Collection from %s " % row.Description,
							"Account"		:	Account,
							"DrCategory"	:	AccountObj.AccCategory,#DrawDown
							"CrCategory"	:	Category,#Other Non Interest Income
							"DrMode"		:	"Indirect",
							"CrMode"		:	"Direct",
							"UserReference" : 	ID}

				# print "Post Accounting for amount %s " % CollectAmount
				postAccountingAddOn(**PostData)

				#insert collect amount to MKT_SCHEDULE_ADDON_COLLECT
				if CollectAmount > 0:					
					CollectID 	= "%s%s" % (ID,AddonType)
					CollectData = {"ID" 			:	CollectID,
								   "CollectionDate"	:	CollectionDate,
								   "Amount"			:	Decimal(CollectAmount),
								   "Inputter"		: 	"System",
								   "Createdon" 		: 	mktdate.getDateTimeNow(),
								   "Authorizer" 	: 	"System",
								   "Authorizeon"	:	mktdate.getDateTimeNow(),
								   "Status"			: 	"AUTH",
								   "Curr"			:	"0",
								   "Branch"			:	Branch,
								   "CustomerID"		:	row.CustomerID,
								   "LoanID"			:	row.LoanID,
								   "Currency"		:	Currency,
								   "Note"			:	""}

					print "%s - %s collection with amount %s." % (row.LoanID,row.Description,
								mktmoney.toMoney(float(CollectAmount),CurrencyObj))

					ObjInsert 	= MKT_SCHEDULE_ADDON_COLLECT(**CollectData)
					db.session.add(ObjInsert)

				SchDeData = {}
				#Create pastdue
				if PastDueAmount > 0:

					PastDueID = "%s%s" % (ID,AddonType)
					PastDueData = {"ID" 			:	PastDueID,
								   "CollectionDate"	:	CollectionDate,
								   "PastDue" 		: 	Decimal(PastDueAmount),
								   "PDOutstanding"	:	Decimal(PastDueAmount),
								   "NextRunDate" 	: 	str(NextRunDate),
								   "Inputter"		: 	"System",
								   "Createdon" 		: 	mktdate.getDateTimeNow(),
								   "Authorizer" 	: 	"System",
								   "Authorizeon"	:	mktdate.getDateTimeNow(),
								   "Status"			: 	"AUTH",
								   "Curr"			:	"0",
								   "Branch"			:	Branch,
								   "CustomerID"		:	row.CustomerID,
								   "LoanID"			:	row.LoanID,
								   "Currency"		: 	Currency}

					
					print "%s - %s past due with amount %s." % (row.LoanID,
												row.Description,
												mktmoney.toMoney(float(PastDueAmount),CurrencyObj))

					# print "Insert PastDue "
					# mktdb.insertTable(MKT_SCHEDULE_ADDON_PD,PastDueData)
					ObjInsert 		= MKT_SCHEDULE_ADDON_PD(**PastDueData)
					db.session.add(ObjInsert)

					#Update pastdue to MKT_SCHEDULE_ADDON
					PastDue = row.PastDue if row.PastDue else 0
					PastDue = Decimal(PastDue) + Decimal(PastDueAmount)					
					SchDeData.update({"PastDue" : PastDue})

				#update value to actual amount & pastdue
				ActualCollection   =	ActualCollection + CollectAmount
				SchDeData.update({"ActualCollection" : ActualCollection})

				# print "Update addon"
				mktdb.updateRecord(MKT_SCHEDULE_ADDON, [MKT_SCHEDULE_ADDON.ID == ID], SchDeData)
				# print "Update addon next run date"
				#update NextRunDate
				SchData = {"NextRunDate" : str(NextRunDate)}
				mktdb.updateRecord(MKT_SCHEDULE_ADDON, [MKT_SCHEDULE_ADDON.ID == ID], SchData)
			#commit
			db.session.commit()
		else:
			print "There are no collection addon to collect."

		#update NextRunDate
		# print "Update Next Run date %s " % str(NextRunDate)
		SchData = {"NextRunDate" : str(NextRunDate)}		
		mktdb.updateRecord(MKT_SCHEDULE_ADDON, [MKT_SCHEDULE_ADDON.ID not in SchAddOnList], SchData)		
		#commit
		db.session.commit()

	except Exception as e:
		db.session.rollback()
		raise

def postAccountingAddOn(**kwargs):
	for i in range(0, 2):
		if i == 0:
			DrCr 		= 	"Dr"
			Mode 		= 	kwargs.get("DrMode")
			Category 	= 	kwargs.get("DrCategory")
			Account 	= 	kwargs.get("Account")
		else:
			DrCr 		= 	"Cr"
			Mode 		= 	kwargs.get("CrMode")
			Category 	= 	kwargs.get("CrCategory")
			Account 	= 	""

		Transaction = kwargs.get("Transaction")
		TranDate 	= kwargs.get("TranDate")
		Module 	 	= kwargs.get("Module")
		Reference 	= kwargs.get("Reference")
		Amount 		= kwargs.get("Amount")
		Currency	= kwargs.get("Currency")
		Branch 		= kwargs.get("Branch")
		Note 		= kwargs.get("Note")
		UserReference= kwargs.get("UserReference")
		
		GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", Module, "", "", "", "", "", "", "", "", "")
		DateTimeNow = mktdate.getDateTimeNow()

		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			"System",				# Inputter
			DateTimeNow, 			# Createdon
			"System",				# Authorizer
			DateTimeNow,			# Authorizeon
			"", 					# AEID
			Account,				# Account
			Category,				# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(Amount), 		# Amount
			Module,					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			Reference, 				# Reference
			Note, 					# Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			Mode,					# Mode check to insert Journal for category,
			UserReference=UserReference
		)