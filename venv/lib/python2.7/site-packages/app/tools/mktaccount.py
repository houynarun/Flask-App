from flask 							import session,request,jsonify
from .. 							import app, db
from app.mktcore.imports 			import *
from app.Account.models 			import MKT_ACCOUNT, MKT_ACCOUNT_INAU
from app.Currency.models 			import MKT_CURRENCY
from app.AccProduct.models 			import MKT_ACC_PRODUCT
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.AccRuleDetail.models 		import MKT_ACC_RULE_DE
from app.InterestRate.models 		import MKT_INTEREST_RATE
from app.Tax.models 				import MKT_TAX
from app.FundTransfer.models 		import MKT_FUND_TRANSFER
from app.AccEntry.models 			import MKT_ACC_ENTRY
from app.LoanContract.models 		import *



from decimal 						import *
from sqlalchemy 					import or_, func

import app.tools.mktmoney 			as mktmoney
import app.tools.mktparam 			as mktparam
import app.tools.user 				as mktuser
import app.tools.mkttool 			as mkttool
import mktsetting 					as mktsetting
import mktaccounting 				as mktaccounting
import mktdate 						as mktdate
import mktaudit 					as mktaudit
import mktteller 					as mktteller
import app.mktcore.autoid 			as mktautoid
import mktdb 						as mktdb

def getSearchAccount(FilterBranch=True):
	DefaultBranch 	= mktuser.getCurrentBranch()
	search 			= request.args.get('q')
	action 			= request.args.get('action') if 'action' in request.args else ""
	NAMES 			= []
	FilterCondition = []
	#check if search text all in space
	if not search.isspace():
		search = search.strip()
		if not search is None:
			if action == "view":
				FilterCondition.append(MKT_ACCOUNT.ID == search)
			else:
				FilterCondition.append(or_(MKT_ACCOUNT.ID.like('%'+search.upper()+'%'),func.upper(MKT_ACCOUNT.AccName).like('%'+search.upper()+'%')))
				FilterCondition.append(MKT_ACCOUNT.AccStatus != "C")
				# Inter branch we can choose acc cross the branch
				if FilterBranch:
					FilterCondition.append(MKT_ACCOUNT.Branch==DefaultBranch)

			Acc = 	MKT_ACCOUNT.query.filter(*FilterCondition).order_by(MKT_ACCOUNT.ID)
			for row in Acc:
				dic = {"id":row.ID, "text":"%s - %s" %(row.ID,row.AccName)}
				NAMES.append(dic)

	# app.logger.debug(NAMES)
	return jsonify(items = NAMES)

def isAllowReverseAccount(ID):
	
	AccEntryObj = MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Account==ID).all()
	LoanContract = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.Account == ID).all()
	LoanContractINAU = MKT_LOAN_CONTRACT_INAU.query.filter(MKT_LOAN_CONTRACT_INAU.Account == ID).all()

	if AccEntryObj or LoanContract or LoanContractINAU :
		return False,"%s Record not allow to reverse." %(msg_warning)
	else:
		return True,''

def checkMaxMinBalance(AccID=None):
	Acc = MKT_ACCOUNT.query.get(AccID)
	if Acc:
		AccProductID = str(Acc.AccProduct)
		AccProduct = MKT_ACC_PRODUCT.query.get(AccProductID)
		if AccProduct:
			AccRuleID = str(AccProduct.Rule) + str(Acc.Currency)
			AccRule = MKT_ACC_RULE_DE.query.get(AccRuleID)
			if AccRule:
				return AccRule
	else:
		return False

def checkMaxMinDebitAmountunt(DrAccount, Currency, Amount):
	try:
		BalDebit = MKT_ACCOUNT.query.get(DrAccount)
		CurrencyObj = MKT_CURRENCY.query.get(Currency)

		if BalDebit:
			if Decimal(BalDebit.Balance) == 0:
				flash("Debit account#%s is %s" %(DrAccount, mktmoney.toMoney(float(BalDebit.Balance), CurrencyObj, 2)))
			elif Decimal(BalDebit.Balance) < Amount:
				flash("The amount must be smaller than debit account#%s balance %s" %(DrAccount, mktmoney.toMoney(float(BalDebit.Balance), CurrencyObj, 2)))
			else:
				Rule = checkMaxMinBalance(DrAccount)
				if Rule:
					if Decimal(BalDebit.Balance) - Amount < Decimal(Rule.MinBalance):
						flash("Debit account#%s reaches minimum balance %s" %(DrAccount, mktmoney.toMoney(float(Rule.MinBalance), CurrencyObj, 2)))
	except:
		raise

def checkMaxMinCreditAmountunt(CrAccount, Currency, Amount):
	try:
		Acc = MKT_ACCOUNT.query.get(CrAccount)
		CurrencyObj = MKT_CURRENCY.query.get(Currency)

		MinB = ""
		MaxB = ""

		if Acc:
			AccProductID = str(Acc.AccProduct)
			AccProduct = MKT_ACC_PRODUCT.query.get(AccProductID)
			if AccProduct:
				AccRuleID = str(AccProduct.Rule) + str(Acc.Currency)
				AccRule = MKT_ACC_RULE_DE.query.get(AccRuleID)
				if AccRule:
					MinB = Decimal(AccRule.MinBalance)
					MaxB = Decimal(AccRule.MaxBalance)
					if Amount + Decimal(Acc.Balance) < MinB:
						flash("Credit account#%s required minimum balance %s" %(CrAccount, mktmoney.toMoney(float(MinB), CurrencyObj, 2)))
					if Amount + Decimal(Acc.Balance) > MaxB:
						flash("Credit account#%s reaches maximum balance %s" %(CrAccount, mktmoney.toMoney(float(MaxB), CurrencyObj, 2)))
	except:
		raise

def getSearchTillAccount():
	TellerParam 	= mktparam.getTellerParam()
	TillAccPro 		= ""
	VaultAccPro 	= ""
	DefaultBranch 	= mktuser.getCurrentBranch()
	if TellerParam:
		VaultAccPro = TellerParam.VaultAccPro
		TillAccPro  = TellerParam.TillAccPro
	
	search 	= request.args.get('q')
	action 	= request.args.get('action') if 'action' in request.args else ""
	NAMES 	= []
	FilterCondition = []
	
	#check if search text all in space
	if not search.isspace():
		search = search.strip()
		if not search is None:
			
			if action == "view":
				FilterCondition.append(MKT_ACCOUNT.ID == search)
			else:
				FilterCondition.append(or_(MKT_ACCOUNT.ID.like('%'+search.upper()+'%'),func.upper(MKT_ACCOUNT.AccName).like('%'+search.upper()+'%')))

			if 'TELLER' in session and not action:
				if session['TELLER'] == 'TT':
					# print "in session teller"
					Acc = MKT_ACCOUNT.query.filter(*FilterCondition).\
												filter(MKT_ACCOUNT.AccProduct==TillAccPro).\
												filter(MKT_ACCOUNT.AccStatus != "C").\
												filter(MKT_ACCOUNT.Branch==DefaultBranch).\
												order_by(MKT_ACCOUNT.ID)
				else:
					Acc = 	MKT_ACCOUNT.query.filter(*FilterCondition).\
												filter(MKT_ACCOUNT.AccStatus != "C").\
												filter(MKT_ACCOUNT.Branch==DefaultBranch).\
												order_by(MKT_ACCOUNT.ID)
					# print "not session teller"
			else:
				
				Acc = 	MKT_ACCOUNT.query.filter(*FilterCondition).\
												filter(MKT_ACCOUNT.AccStatus != "C").\
												filter(MKT_ACCOUNT.Branch==DefaultBranch).\
												order_by(MKT_ACCOUNT.ID)
				
			for row in Acc:
				dic = {"id":row.ID, "text":row.ID+" - "+row.AccName}
				NAMES.append(dic)

	# app.logger.debug(search)
	return jsonify(items = NAMES)

def updateAccountBranch(ID,Branch):
	try:
		UpdateBranch = MKT_ACCOUNT.query.get(ID)
		if UpdateBranch:
			UpdateBranch.Branch = Branch
			db.session.add(UpdateBranch)
			
	except:
		db.session.rollback()
		raise
		return False

def getAccount(ID):

	Acc=[]
	QueryObj 	= 	MKT_ACCOUNT.query.get(ID)
	if QueryObj :
		Acc = QueryObj
	return Acc
	
#Shortage -
def getShortageAccount(Currency='',Branch=''):
	TellerParam = mktparam.getTellerParam()
	Acc=''
	if TellerParam:
		Acc 	= 	MKT_ACCOUNT.query.filter_by(Currency 	= 	Currency,
												AccProduct 	= 	TellerParam.ShortageAccPro,
												Branch 		= 	Branch ).\
												first()

	return Acc

#Surplus +
def getSurplusAccount(Currency='',Branch=''):
	TellerParam = mktparam.getTellerParam()
	Acc=''
	if TellerParam:
		Acc 	= 	MKT_ACCOUNT.query.filter_by(Currency 	= 	Currency,
												AccProduct 	= 	TellerParam.SurplusAccPro,
												Branch 		= 	Branch ).\
												first()

	return Acc

def getSuspendAccount(Currency='',Branch=''):
	TellerParam = mktparam.getTellerParam()
	Acc=''
	if TellerParam:
		Acc 	= 	MKT_ACCOUNT.query.filter_by(Currency 	= 	Currency,
												AccProduct 	= 	TellerParam.SuspendAccPro,
												Branch 		= 	Branch ).\
												first()

	return Acc

def isSuspendAccount():
	CurrentBranch 	= mktuser.getCurrentBranch()
	TellerParam 	= mktparam.getTellerParam()
	if TellerParam:
		SuspendAccPro = TellerParam.SuspendAccPro
		if not SuspendAccPro:
			return False,"Please configuration Teller Parameter first."
		else:
			Acc 	= 	MKT_ACCOUNT.query.filter_by(
												AccProduct 	= 	TellerParam.SuspendAccPro,
												Branch 		= 	CurrentBranch ).\
												first()
			if not Acc:
				return False,"Please create Suspend account first."
			else:
				del Acc
				return True, "Pass"

	else:
		return False,"Please configuration Teller Parameter first."

def checkInterestRate(Mod, ID, InputRate, CurrencyKey):
	
	if Mod == "AC":
		Result = MKT_ACC_PRODUCT.query.get(ID)

	else:
		Result = MKT_LOAN_PRODUCT.query.get(ID)

	Msg = None
	if Result:

		IntKey = Result.InterestKey
		IntKey = IntKey + str(CurrencyKey)
		getIntKey = MKT_INTEREST_RATE.query.get(IntKey)

		if getIntKey:

			getRate = getIntKey.Rate
			getRate = getRate.split()
			NumofRate = len(getRate)

			if NumofRate == 2:
				# InputRate = InputRate.split()
				if float(InputRate) < float(getRate[0]) or float(InputRate) > float(getRate[1]):
					Msg = "Rate value must between %s to %s." %(getRate[0], getRate[1])
		else:
			if InputRate and Mod == "AC":
				Msg = "Account Product %s does not set interest rate." % Result.Description

	return Msg

def setCloseAccount(ID, UserID="", Resource="INAU"):
	try:

		FWID 	=	mktautoid.getAutoID('FRM_FUND_WITHDRAWAL')
		# Check 	= 	mktteller.isUserVaultAccount()

		# if not Check[0]:
		# 	return [False, "%s" %Check[1]]

		Audit 			= 	mktaudit.getAuditrail()
		Inputter		= 	Audit['Inputter']
		Createdon 		= 	Audit['Createdon']
		Authorizer 		= 	Audit['Authorizer']
		Authorizeon		= 	Audit['Authorizeon']
		Setting 		=	mktsetting.getAccSetting()

		# if Resource == 'AUTH':

		AccObj 	=	db.session.query(
						MKT_ACCOUNT.ID,
						MKT_ACCOUNT.CustomerList,
						MKT_ACCOUNT.Currency,
						MKT_ACCOUNT.AccrCurMonth,
						MKT_ACCOUNT.AccrCurCapital,
						MKT_ACCOUNT.AccrIntBooked,
						MKT_ACCOUNT.Balance,
						MKT_ACCOUNT.AccCategory,
						MKT_ACCOUNT.Branch,
						MKT_ACCOUNT.Tax,
						MKT_ACCOUNT.AccProduct,
						MKT_ACC_PRODUCT.ClosingWithAccr,
						MKT_ACC_PRODUCT.IntExpenseCat,
						MKT_ACC_PRODUCT.IntPayableCat
					).\
					join(
						MKT_ACC_PRODUCT,
						MKT_ACC_PRODUCT.ID == MKT_ACCOUNT.AccProduct
					).\
					filter(MKT_ACCOUNT.ID == ID).\
					first()

		# else:

		# 	AccObj 	=	db.session.query(
		# 				MKT_ACCOUNT_INAU.ID,
		# 				MKT_ACCOUNT_INAU.CustomerList,
		# 				MKT_ACCOUNT_INAU.Currency,
		# 				MKT_ACCOUNT_INAU.AccrCurMonth,
		# 				MKT_ACCOUNT_INAU.AccrCurCapital,
		# 				MKT_ACCOUNT_INAU.Balance,
		# 				MKT_ACCOUNT_INAU.AccCategory,
		# 				MKT_ACCOUNT_INAU.Branch,
		# 				MKT_ACCOUNT_INAU.Tax,
		# 				MKT_ACCOUNT_INAU.AccProduct,
		# 				MKT_ACC_PRODUCT.ClosingWithAccr,
		# 				MKT_ACC_PRODUCT.IntExpenseCat,
		# 				MKT_ACC_PRODUCT.IntPayableCat
		# 			).\
		# 			join(
		# 				MKT_ACC_PRODUCT,
		# 				MKT_ACC_PRODUCT.ID == MKT_ACCOUNT_INAU.AccProduct
		# 			).\
		# 			filter(MKT_ACCOUNT_INAU.ID == ID).\
		# 			first()
		if not AccObj:
			return False, "Account#%s not found." %ID

		Account 		=	AccObj.ID
		ClosingAccTran 	=	Setting.CloseAccTran if Setting else ""
		Currency 		=	AccObj.Currency
		AccrCurMonth 	=	Decimal(AccObj.AccrCurMonth) if AccObj.AccrCurMonth else Decimal(0)
		AccrIntBooked 	=	Decimal(AccObj.AccrIntBooked) if AccObj.AccrIntBooked else Decimal(0)
		AccrCurCapital 	=	Decimal(AccObj.AccrCurCapital) if AccObj.AccrCurCapital else Decimal(0)
		Balance 		=	Decimal(AccObj.Balance) if AccObj.Balance else Decimal(0)
		AccCategory 	=	AccObj.AccCategory
		Branch 			=	AccObj.Branch
		Tax 			=	AccObj.Tax
		CustomerID 		=	AccObj.CustomerList
		ClosingWithAccr =	AccObj.ClosingWithAccr
		IntExpenseCat 	=	AccObj.IntExpenseCat
		IntPayableCat 	=	AccObj.IntPayableCat
		AccrCurMonthAmt =	AccrCurMonth

		ReverseAccrBooked = 0
		if ClosingWithAccr == 'Y':
			ReverseAccrBooked 	= AccrIntBooked
			Amount 				= Balance + AccrIntBooked
			AccrIntBooked 		= 0
			IntExpAmt 			= 0
			AccrCurCapital 		= 0

		elif ClosingWithAccr == 'M':
			ReverseAccrBooked 	= AccrCurMonth
			Amount 				= Balance + (AccrIntBooked - AccrCurMonth if AccrIntBooked > AccrCurMonth else AccrIntBooked)
			AccrCurCapital 		= AccrIntBooked - AccrCurMonth if AccrIntBooked > AccrCurMonth else AccrIntBooked
			IntExpAmt 			= 0

		else:
			Amount 				= Balance
			AccrCurMonthAmt =	Decimal(0)
			IntExpAmt 		=	Decimal(AccrCurCapital) - Decimal(AccrIntBooked)

		# Debit Exspense, Debit Payables, Credit Client's A/C
		GL_KEYS 	= 	mktaccounting.getConsolKey(IntExpenseCat, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
		DateTimeNow = 	mktdate.getDateTimeNow()
		Transaction = 	ClosingAccTran
		TranDate 	= 	str(mktdate.getBankDate())
		Mode 		= 	"Direct"
		DrCr 		= 	"Dr"

		# Debit Int Exspense
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			Inputter,				# Inputter
			Createdon, 				# Createdon
			Authorizer,				# Authorizer
			Authorizeon,			# Authorizeon
			"", 					# AEID
			"",						# Account
			IntExpenseCat,			# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(IntExpAmt), 	# Amount
			"AC",					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			ID, 					# Reference
			"", 					# Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			Mode, 					# Mode check to insert Journal for category
			""
		)

		GL_KEYS 	= 	mktaccounting.getConsolKey(IntPayableCat, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
		DateTimeNow = 	mktdate.getDateTimeNow()
		Mode 		= 	"Direct"
		DrCr 		= 	"Dr"

		# Debit Int Payables
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			Inputter,				# Inputter
			Createdon, 				# Createdon
			Authorizer,				# Authorizer
			Authorizeon,			# Authorizeon
			"", 					# AEID
			"",						# Account
			IntPayableCat,			# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(AccrIntBooked), 	# Amount
			"AC",					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			ID, 					# Reference
			"", 					# Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			Mode, 					# Mode check to insert Journal for category
			""
		)

		GL_KEYS 	= 	mktaccounting.getConsolKey(AccCategory, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
		DateTimeNow = 	mktdate.getDateTimeNow()
		Mode 		= 	""
		DrCr 		= 	"Cr"

		# Credit Client's A/C
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			Inputter,				# Inputter
			Createdon, 				# Createdon
			Authorizer,				# Authorizer
			Authorizeon,			# Authorizeon
			"", 					# AEID
			Account,				# Account
			AccCategory,			# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(AccrCurCapital), 	# Amount
			"AC",					# Module
			Transaction, 			# Transaction
			TranDate, 				# TransactionDate
			ID, 					# Reference
			"", 					# Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			Mode, 					# Mode check to insert Journal for category
			"Yes"
		)

		if ReverseAccrBooked:
			for i in range(0, 2):
				if i == 0:
					Category 	= IntPayableCat
					GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
					DateTimeNow = mktdate.getDateTimeNow()
					Transaction = mktsetting.getAccSetting().AccrIntTran
					Mode 		= "Direct"
					DrCr 		= "Cr"
					DrCr 		= "Dr"
				else:
					Category 	= IntExpenseCat
					GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
					DateTimeNow = mktdate.getDateTimeNow()
					Transaction = mktsetting.getAccSetting().IntPayaTran
					Mode 		= "Direct"
					DrCr 		= "Cr"

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					Authorizeon,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,			# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(ReverseAccrBooked), 	# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					"", 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					"Yes"
				)

		# Calculate tax for saving account
		if Tax:
			TaxObj 		= MKT_TAX.query.get(Tax)
			TaxRate 	= 0
			TaxCategory = ""
			TaxPayment 	= 0

			if TaxObj:

				TaxRate 	= TaxObj.Rate
				TaxCategory = TaxObj.Category
				TaxPayment 	= (float(AccrCurCapital) * float(TaxRate)) / float(100)
				Transaction = Setting.TaxTran if Setting else ""

				GL_KEYS 	= mktaccounting.getConsolKey(AccCategory, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
				DateTimeNow = mktdate.getDateTimeNow()
				Mode 		= ""
				DrCr 		= "Dr"

				# Debit Client's A/C
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					Authorizeon,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					AccCategory,			# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(TaxPayment), 	# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					"", 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					"Yes"
				)

				GL_KEYS 	= mktaccounting.getConsolKey(TaxCategory, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
				DateTimeNow = mktdate.getDateTimeNow()
				Mode 		= "Direct"
				DrCr 		= "Cr"

				# Credit Tax Payables Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					Authorizeon,			# Authorizeon
					"", 					# AEID
					"",						# Account
					TaxCategory,			# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(TaxPayment), 	# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					"", 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					""
				)

		# Make withdrawal from client's A/C
		# NewObj 	=	MKT_ACCOUNT.query.get(ID)
		if not AccObj:
			return False, "Account#%s not found." %ID

		# Amount 		=	Decimal(AccObj.Balance) if AccObj.Balance else Decimal(0)

		DrAcc 		=	AccObj.ID
		DrCat 		=	AccObj.AccCategory
		TellerParam =	mktparam.getTellerParam()
		VaultObj 	=	mktuser.getVaultInfo(Currency, UserID)
		if not VaultObj:
			return False, "User don't have vault account." %ID

		# CrAcc 		=	"KHR10200000004"
		# CrCat 		=	"10200"
		CrAcc 		=	VaultObj.ID
		CrCat 		=	TellerParam.VaultCategory if TellerParam else ""

		if not CrCat:
			return False, "Vault category not found." %ID

		Tran 		=	Setting.CloseAccTran if Setting else ""
		Ref 		=	ID
		Note 		=	"Closed account %s." %ID
		# Add new record to fund withdrawal(MKT_FUND_TRANSFER)
		if Decimal(Amount) > 0:
			TWObj 		= 	setTTNewRecord(FWID, Amount, Branch, DrAcc, DrCat, CrAcc, CrCat, Currency, Tran, TranDate, Ref, Note, Inputter, Createdon, Authorizer, Authorizeon)

		# Post transaction fund withdrawal
		GL_KEYS 	= mktaccounting.getConsolKey(DrCat, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
		DateTimeNow = mktdate.getDateTimeNow()
		Mode 		= ""
		DrCr 		= "Dr"

		# Debit Client's A/C
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			Inputter,				# Inputter
			Createdon, 				# Createdon
			Authorizer,				# Authorizer
			Authorizeon,			# Authorizeon
			"", 					# AEID
			DrAcc,					# Account
			DrCat,					# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(Amount), 		# Amount
			"FW",					# Module
			Tran, 					# Transaction
			TranDate, 				# TransactionDate
			FWID, 					# Reference
			"", 					# Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			Mode, 					# Mode check to insert Journal for category
			"Yes"
		)

		GL_KEYS 	= mktaccounting.getConsolKey(CrCat, Currency, "", "AC", "", "", "", "", "", "", "", "", "")
		DateTimeNow = mktdate.getDateTimeNow()
		Mode 		= ""
		DrCr 		= "Cr"

		# Credit Vault's A/C
		mktaccounting.postAccounting(
			"AUTH", 				# Status
			"0", 					# Curr
			Inputter,				# Inputter
			Createdon, 				# Createdon
			Authorizer,				# Authorizer
			Authorizeon,			# Authorizeon
			"", 					# AEID
			CrAcc,					# Account
			CrCat,					# Category
			Currency,				# Currency
			DrCr,					# DrCr
			Decimal(Amount), 		# Amount
			"FW",					# Module
			Tran, 					# Transaction
			TranDate, 				# TransactionDate
			FWID, 					# Reference
			"", 					# Note
			"", 					# JNID
			Branch,					# Branch
			GL_KEYS,				# GL_KEYS
			Mode, 					# Mode check to insert Journal for category
			"Yes"
		)

		# db.session.commit()

		# NewObj 	=	MKT_ACCOUNT.query.get(ID)
		# # print "Balance %s" %Amount
		# # print "Fund Withdrawal %s" %FWID
		# # print "Dr Acc %s" %DrAcc
		# # print "Finish close"
		# # Update account
		# NewObj.AccrInterest 	=	0
		# NewObj.AccrCurMonth 	=	0
		# NewObj.AccrCurCapital 	=	0
		# NewObj.Balance 			=	0
		# NewObj.AvailableBal 	=	0

		# db.session.add(NewObj)

		return True, ""

	except Exception, e:
		raise
		db.session.rollback()
		return [False, "%s" %e]

def setTTNewRecord(ID, Amount, Branch, DrAcc, DrCat, CrAcc, CrCat, Currency, Tran, TranDate, Ref, Note, Inputter, Createdon, Authorizer, Authorizeon):
	try:
		# Insert record to Fund Transfer
		InsertRecord = {	
							'Inputter'		:Inputter,
							'Createdon'		:Createdon,
							'Authorizer'	:Authorizer,
							'Authorizeon'	:Authorizeon,
							'Branch'		:Branch,
							'ID'			:ID,
							'DrAccount'		:DrAcc,
							'DrCategory'	:DrCat,
							'DrCurrency'	:Currency,
							'CrAccount'		:CrAcc,
							'CrCategory'	:CrCat,
							'CrCurrency' 	:Currency,
							'Amount'		:Amount,
							'Transaction'	:Tran,
							'TranDate'		:TranDate,
							'Reference'		:Ref,
							'Note'			:Note
						}
		mktdb.insertTable(MKT_FUND_TRANSFER, InsertRecord)

		return [True, ""]

	except Exception, e:
		return [False, "%s" %e]

def searchProvidentAccount():

	DefaultBranch 	= mktuser.getCurrentBranch()
	search 			= request.args.get('q')
	action 			= request.args.get('action') if 'action' in request.args else ""
	NAMES 			= []
	FilterCondition = []
	#check if search text all in space
	if not search.isspace():
		search = search.strip()
		if not search is None:
			if action == "view":
				FilterCondition.append(MKT_ACCOUNT.ID == search)
			else:
				FilterCondition.append(or_(MKT_ACCOUNT.ID.like('%' + search.upper() + '%'),func.upper(MKT_ACCOUNT.AccName).like('%'+search.upper()+'%')))
				FilterCondition.append(MKT_ACCOUNT.AccStatus != "C")
				FilterCondition.append(MKT_ACCOUNT.Branch==DefaultBranch)

			Acc = 	MKT_ACCOUNT.query.filter(*FilterCondition).all()

			for row in Acc:
				dic = {"id":row.ID, "text":"%s - %s" %(row.ID, row.AccName)}
				NAMES.append(dic)

	# app.logger.debug(NAMES)
	return jsonify(items = NAMES)

from app.Branch.models import MKT_BRANCH

def validateCurrency(Currency):
	CurrencyObj = MKT_CURRENCY.query.get(Currency)
	if not CurrencyObj:
		raise ValueError('Currency %s not found.'%Currency)

def setVaultAccount(Currency,NumberOfAccount=1):
	try:
		validateCurrency(Currency) 
		TellerParam = mktparam.getTellerParam()
		if TellerParam:

			AccProduct 	= TellerParam.VaultAccPro
			AccCategory = TellerParam.VaultCategory

			if AccProduct and AccCategory:
				Curr 		= '0'
				Inputter	= 'System'
				Createdon 	= mktdate.getDateTimeNow()
				Authorizer 	= 'System'
				Authorizeon	= mktdate.getDateTimeNow()
				# Branch 		= Audit['Branch']
				BranchObj 	= MKT_BRANCH.query

				for row in BranchObj:
					Branch 		= row.ID
					i = 0
					for i in range(0 , NumberOfAccount):
						i += 1
						CashID 		= '%sV%02d'%(Branch,i)
						ID 			= "%s%s%s"%(Currency,AccCategory,CashID) # KHR11111HOV01
						AccObj = MKT_ACCOUNT.query.get(ID)
						AccName 	= "Cash in Vault %02d at %s"%(i,Branch)
						if not AccObj:
							mktaccounting.insert_MKT_ACC(
													Curr,					#Curr
													Inputter, 				#Inputter
													Createdon,				#Createdon
													Authorizer,				#Authorizer
													Authorizeon,			#Authorizeon
													Branch,					#Branch
													ID,# ID
													AccName,				# AccName
													Currency,				# Currency
													AccProduct, 			# AccProduct
													AccCategory				# AccCategory
													)
							CashObj 		= MKT_CASH_ACCOUNT.query.get(CashID)
							if not CashObj:

								kwargs 			= {	'ID'			:CashID,
													'Type'			:'V',
													'Currency'		:Currency,
													'Account'		:ID,
													'CashBranch'	:Branch,
													'Branch'		:'HO',
													'Description'	:AccName,
													'Curr'			:Curr,
													'Status'		:'AUTH',
													'Inputter'		:Inputter,
													'Createdon'		:Createdon,
													'Authorizer'	:Authorizer,
													'Authorizeon'	:Authorizeon
													}
								CashObj 		= MKT_CASH_ACCOUNT(**kwargs)
								
							else:
								CashObj.Currency 	= '%s %s'%(CashObj.Currency,Currency)
								CashObj.Account 	= '%s %s'%(CashObj.Account,ID)
							db.session.add(CashObj)
							print "Cash in Vault %s branch %s was created successfully."%(CashID,Branch)
				db.session.commit()
				print "Cleaning..."

			else:
				print "Please config Vault Account Product."
		else:
			print "TellerParam not config."
			
	except Exception, e:
		db.session.rollback()
		raise

def setTillAccount(Currency,NumberOfAccount=1):
	try:
		TellerParam = mktparam.getTellerParam()
		if TellerParam:

			AccProduct 	= TellerParam.TillAccPro
			AccCategory = TellerParam.TillCategory

			if AccProduct and AccCategory:
				Curr 		= '0'
				Inputter	= 'System'
				Createdon 	= mktdate.getDateTimeNow()
				Authorizer 	= 'System'
				Authorizeon	= mktdate.getDateTimeNow()
				# Branch 		= Audit['Branch']
				BranchObj 	= MKT_BRANCH.query

				for row in BranchObj:
					Branch 		= row.ID

					for i in range(0 , NumberOfAccount):
						i += 1
						CashID 		= '%sT%02d'%(Branch,i)						
						ID 			= "%s%s%s"%(Currency,AccCategory,CashID) # KHR11111HOT01
						AccObj = MKT_ACCOUNT.query.get(ID)
						AccName 	= "Cash in Till %02d at %s"%(i,Branch)
						if not AccObj:
							mktaccounting.insert_MKT_ACC(
													Curr,					#Curr
													Inputter, 				#Inputter
													Createdon,				#Createdon
													Authorizer,				#Authorizer
													Authorizeon,			#Authorizeon
													Branch,					#Branch
													ID,# ID
													AccName,				# AccName
													Currency,				# Currency
													AccProduct, 			# AccProduct
													AccCategory				# AccCategory
													)
							CashObj 		= MKT_CASH_ACCOUNT.query.get(CashID)
							if not CashObj:

								kwargs 			= {	'ID'			:CashID,
													'Type'			:'T',
													'Currency'		:Currency,
													'Account'		:ID,
													'Branch'		:'HO',
													'CashBranch'	:Branch,
													'Description'	:AccName,
													'Curr'			:Curr,
													'Status'		:'AUTH',
													'Inputter'		:Inputter,
													'Createdon'		:Createdon,
													'Authorizer'	:Authorizer,
													'Authorizeon'	:Authorizeon
													}
								CashObj 		= MKT_CASH_ACCOUNT(**kwargs)
								
							else:
								CashObj.Currency 	= '%s %s'%(CashObj.Currency,Currency)
								CashObj.Account 	= '%s %s'%(CashObj.Account,ID)
							db.session.add(CashObj)
							print "Cash in Till %s branch %s was created successfully."%(CashID,Branch)

				db.session.commit()
				print "Cleaning..."

			else:
				print "Please config Till Account Product."
		else:
			print "TellerParam not config."

	except Exception, e:
		db.session.rollback()
		raise

def setAccSuspend(Currency):
	try:
		TellerParam = mktparam.getTellerParam()
		if TellerParam:

			AccProduct 	= TellerParam.SuspendAccPro
			AccCategory = TellerParam.SuspendCategory
			if AccProduct and AccCategory:
				Curr 		= '0'
				Inputter	= 'System'
				Createdon 	= mktdate.getDateTimeNow()
				Authorizer 	= 'System'
				Authorizeon	= mktdate.getDateTimeNow()
				# Branch 		= Audit['Branch']
				BranchObj 	= MKT_BRANCH.query

				for row in BranchObj:
					Branch 		= row.ID
					ID 			= "%s%s%s"%(Currency,AccCategory,Branch)
					AccObj = MKT_ACCOUNT.query.get(ID)
					if not AccObj:
						AccName 	= "Suspend for Cleaning Account at %s"%Branch
						mktaccounting.insert_MKT_ACC(
												Curr,					#Curr
												Inputter, 				#Inputter
												Createdon,				#Createdon
												Authorizer,				#Authorizer
												Authorizeon,			#Authorizeon
												Branch,					#Branch
												ID,# ID
												AccName,				# AccName
												Currency,				# Currency
												AccProduct, 			# AccProduct
												AccCategory				# AccCategory
												)
						print "Suspend account for branch %s was created successfully."%Branch
				db.session.commit()
				print "Cleaning..."
			else:
				print "Please config Suspend Account Product."
		else:
			print "TellerParam not config."
	except Exception, e:
		db.session.rollback()
		raise
	
def setAccShortage(Currency):
	try:
		TellerParam = mktparam.getTellerParam()
		if TellerParam:

			AccProduct 	= TellerParam.ShortageAccPro
			AccCategory = TellerParam.ShortageCategory

			if AccProduct and AccCategory:
				Curr 		= '0'
				Inputter	= 'System'
				Createdon 	= mktdate.getDateTimeNow()
				Authorizer 	= 'System'
				Authorizeon	= mktdate.getDateTimeNow()
				# Branch 		= Audit['Branch']
				BranchObj 	= MKT_BRANCH.query

				for row in BranchObj:
					Branch 		= row.ID
					ID 			= "%s%s%s"%(Currency,AccCategory,Branch)
					AccObj = MKT_ACCOUNT.query.get(ID)
					if not AccObj:
						AccName 	= "Cash Shortage Till at %s"%Branch
						mktaccounting.insert_MKT_ACC(
												Curr,					#Curr
												Inputter, 				#Inputter
												Createdon,				#Createdon
												Authorizer,				#Authorizer
												Authorizeon,			#Authorizeon
												Branch,					#Branch
												ID,# ID
												AccName,				# AccName
												Currency,				# Currency
												AccProduct, 			# AccProduct
												AccCategory				# AccCategory
												)
						print "Cash Shortage branch %s was created successfully."%Branch
				db.session.commit()
				print "Cleaning..."

			else:
				print "Please config Shortage Account Product."
		else:
			print "TellerParam not config."
	except Exception, e:
		db.session.rollback()
		raise

def setAccSurplus(Currency):
	try:
		
		TellerParam = mktparam.getTellerParam()
		if TellerParam:

			AccProduct 	= TellerParam.SurplusAccPro
			AccCategory = TellerParam.SurplusCategory
			
			if AccProduct and AccCategory:

				Curr 		= '0'
				Inputter	= 'System'
				Createdon 	= mktdate.getDateTimeNow()
				Authorizer 	= 'System'
				Authorizeon	= mktdate.getDateTimeNow()
				# Branch 		= Audit['Branch']
				BranchObj 	= MKT_BRANCH.query

				for row in BranchObj:
					Branch 		= row.ID
					ID 			= "%s%s%s"%(Currency,AccCategory,Branch)
					AccObj = MKT_ACCOUNT.query.get(ID)
					if not AccObj:
						AccName 	= "Cash Surplus Till at %s"%Branch
						mktaccounting.insert_MKT_ACC(
												Curr,					#Curr
												Inputter, 				#Inputter
												Createdon,				#Createdon
												Authorizer,				#Authorizer
												Authorizeon,			#Authorizeon
												Branch,					#Branch
												ID,# ID
												AccName,				# AccName
												Currency,				# Currency
												AccProduct, 			# AccProduct
												AccCategory				# AccCategory
												)
						print "Cash Surplus branch %s was created successfully."%Branch
				db.session.commit()
				print "Cleaning..."

			else:
				print "Please config Surplus Account Product."
		else:
			print "TellerParam not config."
	except Exception, e:
		db.session.rollback()
		raise

def setDueFromBranch(Currency,Product='605',HO='HO'):
	# IBA-Due From Branch
	try:
		LoanProductObj = MKT_ACC_PRODUCT.query.get(Product)
		if LoanProductObj:

			AccProduct 	= LoanProductObj.ID
			AccCategory = LoanProductObj.CategoryList
			
			if AccProduct and AccCategory:

				Curr 		= '0'
				Inputter	= 'System'
				Createdon 	= mktdate.getDateTimeNow()
				Authorizer 	= 'System'
				Authorizeon	= mktdate.getDateTimeNow()
				# Branch 		= Audit['Branch']
				BranchObj 	= MKT_BRANCH.query.filter(MKT_BRANCH.ID != HO)

				for row in BranchObj:
					Branch 		= row.ID
					ID 			= "%s%s%s"%(Currency,AccCategory,Branch)
					AccObj = MKT_ACCOUNT.query.get(ID)
					if not AccObj:
						AccName 	= "%s at %s"%(LoanProductObj.Description,Branch)
						mktaccounting.insert_MKT_ACC(
												Curr,					#Curr
												Inputter, 				#Inputter
												Createdon,				#Createdon
												Authorizer,				#Authorizer
												Authorizeon,			#Authorizeon
												HO,						#Branch
												ID,						# ID
												AccName,				# AccName
												Currency,				# Currency
												AccProduct, 			# AccProduct
												AccCategory				# AccCategory
												)
						print "%s at %s branch was created successfully."%(LoanProductObj.Description,Branch)
				db.session.commit()
				print "Cleaning..."

			else:
				print "Category %s not found"%AccCategory
		else:
			print "Account Product %s not found."%Product
	except Exception, e:
		db.session.rollback()
		raise

def setDueHeadOffice(Currency, Product='606',HO='HO'):
	# IBA-Due To HO
	try:
		LoanProductObj = MKT_ACC_PRODUCT.query.get(Product)
		if LoanProductObj:

			AccProduct 	= LoanProductObj.ID
			AccCategory = LoanProductObj.CategoryList
			
			if AccCategory:

				Curr 		= '0'
				Inputter	= 'System'
				Createdon 	= mktdate.getDateTimeNow()
				Authorizer 	= 'System'
				Authorizeon	= mktdate.getDateTimeNow()
				# Branch 		= Audit['Branch']
				BranchObj 	= MKT_BRANCH.query.filter(MKT_BRANCH.ID != HO)

				for row in BranchObj:
					Branch 		= row.ID
					ID 			= "%s%s%s"%(Currency,AccCategory,Branch)
					AccObj = MKT_ACCOUNT.query.get(ID)
					if not AccObj:
						AccName 	= "%s"%(LoanProductObj.Description)
						mktaccounting.insert_MKT_ACC(
												Curr,					#Curr
												Inputter, 				#Inputter
												Createdon,				#Createdon
												Authorizer,				#Authorizer
												Authorizeon,			#Authorizeon
												Branch,					#Branch
												ID,# ID
												AccName,				# AccName
												Currency,				# Currency
												AccProduct, 			# AccProduct
												AccCategory				# AccCategory
												)
						print "%s in branch %s was created successfully."%(LoanProductObj.Description,Branch)
				db.session.commit()
				print "Cleaning..."

			else:
				print "Category %s not found"%AccCategory
		else:
			print "Account Product %s not found."%Product
	except Exception, e:
		db.session.rollback()
		raise