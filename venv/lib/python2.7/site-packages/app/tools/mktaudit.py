'''
Created Date: 01 Apr 2015
Author: Sovankiry Rim

Modified by: Sovankiry
Modified Date: 30 Sep 2015
All Right Reserved Morakot Technology
Description : mktaudit refer to function for audit
'''
from app.mktcore.imports 		import *
from flask 						import session,flash
from .. 						import app, db
from app.AutoID.models 			import *
import app.tools.mktdate 		as mktdate
import app.tools.user 			as mktuser
import app.tools.mktparam 		as mktparam
from sqlalchemy 				import inspect,or_, and_,func, Integer, desc, asc
from datetime 					import datetime, date, timedelta
import time
from sqlalchemy.sql.expression 		import cast
from app.LoanContract.models 		import *
# How to use getAuditrail()
'''

Audit = getAuditrail()
Status = Audit['Status']
Curr = Audit['Curr']
Inputter = Audit['Inputter']
Createdon = Audit['Createdon']
Authorizer = Audit['Authorizer']
Authorizeon = Audit['Authorizeon']
Branch = Audit['Branch']

'''

def getAuditrail():
	Dic = {}
	Dic.update({'Status'	: 	"AUTH"})
	Dic.update({'Curr' 		: 	"0"})
	Dic.update({'Inputter' 	:	mktuser.getUser().ID})
	Dic.update({'Createdon' : 	mktdate.getDateTimeNow()})
	Dic.update({'Authorizer' : 	mktuser.getUser().ID})
	Dic.update({'Authorizeon': 	mktdate.getDateTimeNow()})
	Dic.update({'Branch'	:mktuser.getBranch(session["ChangeBranch"]).ID})
	# Dic.update({'BranchDescription':mktuser.getBranch(session["ChangeBranch"]).Description})
	return Dic



#How to use function moveAUTHtoHIST()
'''
LIVE : refer to table live example : MKT_ACCOUNT
HIST : refer to table History example : MKT_ACCOUNT_HIST
Mode : 0 = INAU ; 1 = RNAU
Don't use paramter LIVE and HIST to string. need class
Example :

Transaction is INAU to AUTH :

	moveAUTHtoHIST(MKT_ACCOUNT,MKT_ACCOUNT_HIST,'AC200001',0,Inputter,Createdon,Authorizer,Authorizeon)

Transaction is RNAU to REVE :

	moveAUTHtoHIST(MKT_ACCOUNT,MKT_ACCOUNT_HIST,'AC200001',1,Inputter,Createdon,Authorizer,Authorizeon)

'''

def moveAUTHtoHIST(LIVE,HIST,ID, FilterField='',Curr=''):
	try:
		dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(LIVE)
		for item in Mapper.attrs:						
			FieldInTable.append(item.key)

		if Curr =='':
			HistObj = db.session.query(func.substring(HIST.ID,'@(.*)').label('Version')).\
					  filter(HIST.ID.like( ID + '%')).\
					  order_by(desc(cast(func.regexp_replace(HIST.ID, "(.*)@","","g"),Integer))).first()
					  
			Curr 	= str(int(HistObj.Version)+1) if HistObj else '0'
			
		else:
			Curr = str(Curr) 
			
		
		if FilterField:
			QueryObj = LIVE.query.filter(getattr(LIVE, FilterField) == ID)
		else:
			QueryObj = LIVE.query.filter(LIVE.ID==ID)

	
		for row in QueryObj:
			for col in FieldInTable:
				if col =='ID':
					dic.update({col:str(getattr(row,col)) + '@' + Curr})
				else:
					dic.update({col:getattr(row,col)})

			AddHistObj = HIST(**dic)
			db.session.add(AddHistObj)
		
		return Curr

	except Exception, e:
		print "moveAUTHtoHIST error: %s"%e
		db.session.rollback()
		raise

def moveINAUtoHIST(INAU,HIST,ID, FilterField='',Curr=''):
	try:
		dic             = {}
		FieldInTable     = []
		Mapper             = inspect(INAU)
		for item in Mapper.attrs:                        
			FieldInTable.append(item.key)

		if Curr =='':
			HistObj = db.session.query(func.substring(HIST.ID,'@(.*)').label('Version')).\
					  filter(HIST.ID.like( ID + '%')).\
					  order_by(desc(cast(func.regexp_replace(HIST.ID, "(.*)@","","g"),Integer))).first()
					  
			Curr     = str(int(HistObj.Version)+1) if HistObj else '0'
			
		else:
			Curr = str(Curr) 
			
		
		if FilterField:
			QueryObj = INAU.query.filter(getattr(INAU, FilterField) == ID)
		else:
			QueryObj = INAU.query.filter(INAU.ID==ID)

	
		for row in QueryObj:
			for col in FieldInTable:
				if col =='ID':
					dic.update({col:str(getattr(row,col)) + '@' + Curr})
				else:
					dic.update({col:getattr(row,col)})

			AddHistObj = HIST(**dic)
			db.session.add(AddHistObj)
		
		return Curr

	except Exception, e:
		print "moveINAUtoHIST error: %s"%e
		db.session.rollback()
		raise

def moveAUTHDetailtoHIST(MainTable,LIVE,HIST,ID,FilterField=''):
	try:
		dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(LIVE)
		for item in Mapper.attrs:						
			FieldInTable.append(item.key)
		
		LiveObj = MainTable.query.get(ID)
		if LiveObj:
			Curr = str(LiveObj.Curr)
		else:
			Curr = '0'

		if FilterField:
			QueryObj = LIVE.query.filter(getattr(LIVE, FilterField) == ID)
		else:
			QueryObj = LIVE.query.filter(LIVE.ID==ID)

	
		for row in QueryObj:
			for col in FieldInTable:
				if col =='ID':
					dic.update({col:str(getattr(row,col)) + '@' + Curr})
				else:
					dic.update({col:getattr(row,col)})

			AddHistObj = HIST(**dic)
			db.session.add(AddHistObj)

	except Exception, e:
		print "moveAUTHDetailtoHIST error: %s"%e
		db.session.rollback()
		raise

'''

# this function are move live record to history and not increment curr
def moveAUTHtoHIST(LIVE,HIST,ID):
	try:
		dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(LIVE)
		for item in Mapper.attrs:						
			FieldInTable.append(item.key)
		QueryObj = LIVE.query.filter(LIVE.ID==ID)
		for row in QueryObj:
			for col in FieldInTable:
				dic.update({col:getattr(row,col)})

		AddHistObj = HIST(**dic)
		db.session.add(AddHistObj)

	except Exception, e:
		db.session.rollback()
		raise
'''

def moveAUTHtoINAU(LIVE,INAU,ID,Inputter='',Createdon='', Status='INAU', Curr='0',MoveDataField={}):

	try:
		TellerParam = mktparam.getTellerParam()
		RevTran		= TellerParam.RevTransaction
		dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(LIVE)
		for item in Mapper.attrs:						
			FieldInTable.append(item.key)

		QueryObj = LIVE.query.filter(LIVE.ID==ID)

		if QueryObj.all() :

			for row in QueryObj:
				for col in FieldInTable:
					dic.update({col:getattr(row,col)})

				dic.update({'Status':Status})
				dic.update({'Curr':Curr})
				if Status=="INAU":
					dic.update({'ID':ID+'R'})
				if 'Transaction' in dic:
					dic.update({'Transaction':RevTran})
				dic.update({'Inputter':Inputter})
				dic.update({'Createdon':Createdon})
				dic.update({'Authorizer':''})
				dic.update({'Authorizeon':''})
				for col in MoveDataField:
					Date = getattr(row,MoveDataField[col])
					dic.update({col:Date})
					Date = getattr(row,col)
					dic.update({MoveDataField[col]:Date})
				AddINAUObj = INAU(**dic)
				db.session.add(AddINAUObj)
		else:
			print "The record %s cannot move to un-authorize. Module %s"%(ID,LIVE.__name__)
			

	except Exception, e:
		print "moveAUTHtoINAU error: %s"%e
		db.session.rollback()
		raise


def moveINAUtoAUTH(LIVE,INAU,ID,Inputter='',Createdon='',Authorizer='',Authorizeon='', FilterField='',Curr=""):

	try:
		dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(INAU)
		for item in Mapper.attrs:						
			FieldInTable.append(item.key)

		if FilterField:
			QueryObj = INAU.query.filter(getattr(INAU, FilterField) == ID)
		else:
			QueryObj = INAU.query.filter(INAU.ID==ID)

		if QueryObj.all() :
			for row in QueryObj:
				for col in FieldInTable:
					dic.update({col:getattr(row,col)})
				if Curr:
					dic.update({'Curr':Curr})
				dic.update({'Status':'AUTH'})
				dic.update({'Inputter':Inputter})
				dic.update({'Createdon':Createdon})
				dic.update({'Authorizer':Authorizer})
				dic.update({'Authorizeon':Authorizeon})
				AddLiveObj = LIVE(**dic)
				# print 'Now move INAU to AUTH '
				db.session.add(AddLiveObj)
				# print 'Start add session INAU to AUTH '
		else:
			print "The record %s cannot move to live. Module %s"%(ID,INAU.__name__)
			# db.session.rollback()
			# raise

	except Exception, e:
		print "moveINAUtoAUTH error: %s"%e
		db.session.rollback()
		raise

def getCurrRecord(Table,arg):
	QueryObj = Table.query.filter(*arg).first()
	if QueryObj:
		Curr = str(int(QueryObj.Curr)+1)
	else:
		Curr = "0"
	return Curr

#check duplicate ID
def isDuplicate(AUTH,INAU="",HIST="",ID="",FilterAUTH=[],FilterINAU=[]):
	if FilterAUTH:
		obj_query=AUTH.query.filter(*FilterAUTH).all()
	else:
		obj_query=AUTH.query.filter(AUTH.ID==ID).all()

	if obj_query:
		return True,msg_warning+" %s already exists in live record."%ID

	if FilterINAU:
		obj_query=INAU.query.filter(*FilterINAU).all()
	else:
		obj_query=INAU.query.filter(INAU.ID==ID).all()
	if obj_query:
		return True,msg_warning+" %s already exists in un-authorize record."%ID


	return False,""

#check Restore ID
def isRestoreID(AUTH,INAU,HIST,ID):
	QueryObj = AUTH.query.get(ID)
	if not QueryObj:
		
		QueryObj = HIST.query.get("%s@0"%ID)
		if QueryObj:
			obj_subquery = HIST.query.filter(HIST.ID.like("%s@%%"%ID)).all()
			# "You're restoring a record from history with curr No: " + str(session["Curr"])
			return True,str(len(obj_subquery)) 
	return False,""

def setReverseToLive(LIVE,INAU,ID,Inputter='',Createdon='',Authorizer='',Authorizeon='',FilterField=''):

	try:
		TellerParam = mktparam.getTellerParam()
		RevTran		= TellerParam.RevTransaction

		dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(INAU)
		for item in Mapper.attrs:						
			FieldInTable.append(item.key)

		if FilterField:
			QueryObj = LIVE.query.filter(getattr(LIVE, FilterField) == ID)
		else:
			QueryObj = LIVE.query.filter(LIVE.ID==ID)

		if QueryObj :
			for row in QueryObj:
				for col in FieldInTable:
					dic.update({col:getattr(row,col)})

				dic.update({'Status':'AUTH'})
				dic.update({'Inputter':Inputter})
				dic.update({'Createdon':Createdon})
				dic.update({'Authorizer':Authorizer})
				dic.update({'Authorizeon':Authorizeon})
				dic.update({'ID':ID+'R'})
				if 'Transaction' in dic:
					dic.update({'Transaction':RevTran}) 
				ReverseObj = LIVE(**dic)
				# print 'Now move INAU to AUTH '
				db.session.add(ReverseObj)
				# print 'Start add session INAU to AUTH '
		else:
			print "The record %s cannot setReverseToLive. Module %s"%(ID,LIVE.__name__)
			
	except Exception, e:
		print "setReverseToLive error: %s"%e
		db.session.rollback()
		raise

def deleteAUTH(LIVE,ID,FilterField=''):
	try:
		if FilterField:
			db.session.query(LIVE).filter(getattr(LIVE,FilterField)==ID).delete()
		else:
			db.session.query(LIVE).filter_by(ID=ID).delete()
	except Exception, e:
		print "deleteAUTH error: %s"%e
		db.session.rollback()
		raise

def deleteINAU(INAU,ID,FilterField=''):
	try:
		if FilterField:
			db.session.query(INAU).filter(getattr(INAU,FilterField)==ID).delete()
		else:
			db.session.query(INAU).filter_by(ID=ID).delete()
	except  Exception, e:
		print "deleteINAU error: %s"%e
		db.session.rollback()
		raise

def deleteRecord(Table, args, SyncSession = False):
	try:
		if SyncSession:
			db.session.query(Table).filter(*args).delete(synchronize_session='fetch')
		else:
			db.session.query(Table).filter(*args).delete()
	except Exception as e:
		print "delete record error: %s"%e
		db.session.rollback()
		raise

def setRestoreRecord(HIST,LIVE,ID,FilterField=''):
	try:
		LiveID = ID.split('@')
		LiveID = LiveID[0]
		dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(HIST)
		for item in Mapper.attrs:
			FieldInTable.append(item.key)
		if FilterField:
			QueryObj = HIST.query.filter(getattr(HIST, FilterField) == ID)
		else:
			QueryObj = HIST.query.filter(HIST.ID==ID)

		if QueryObj.all() :
			for row in QueryObj:
				for col in FieldInTable:
					dic.update({col:getattr(row,col)})
				Curr = int(row.Curr) +1
				dic.update({'ID':LiveID})
				dic.update({'Status':'AUTH'})

				AddLiveObj = LIVE(**dic)
				# print 'Now move INAU to AUTH '
				db.session.add(AddLiveObj)
				# print 'Start add session INAU to AUTH '
			QueryObj.delete()
		else:
			print "Restore record not found."
	except  Exception, e:
		print "setRestoreRecord error: %s"%e
		db.session.rollback()
		raise

'''
# use for copying data from one table to other table with same fields
Ex.
copyData(MKT_GL_BALANCE,MKT_GL_BALANCE_BACKUP,{'GLYear':'2016','GLMonth':'01','GLDay':'31'})
copyData(MKT_GL_BALANCE_BACKUP,MKT_GL_BALANCE)
'''
def copyData(Source,Destination, ExtraField = {}, LoanID = []):
	try:
		if LoanID:
			Sources = Source.query.filter(Source.ID.in_(LoanID))
			Keys 	= db.inspect(Destination).columns.keys()
		else:
			Sources = Source.query
			# print Source
			Keys 	= db.inspect(Destination).columns.keys()
		for rec in Sources:
			Data = {}
			for col in Keys:
				if hasattr(rec,col):
					Data.update({col:getattr(rec,col)})

			Data.update(ExtraField)
			db.session.add(Destination(**Data))

		return True, 'Copying data is successfuly'

	except Exception, e:
		db.session.rollback()
		raise
		return False, "Copying data error: %s" %e
