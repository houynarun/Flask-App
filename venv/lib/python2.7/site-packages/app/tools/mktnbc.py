
# -*- coding: utf-8 -*-
import collections, calendar
import app.tools.mktaccounting  as mktaccounting
import app.tools.mktmonthend    as mktmonthend
import app.tools.mktsetting     as mktsetting
import app.tools.mktmessage     as mktmessage
import app.tools.mktmoney       as mktmoney
import app.tools.mktdate        as mktdate
import app.tools.mktgl          as mktgl
import app.tools.mkttool        as mkttool
from decimal                import *

from app.mktcore.imports        import *
# from app.NBCExchangeRate.models import MKT_NBC_EXCHANGE_RATE
from app.GLBalance.models       import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
from app.Currency.models        import *
from app.NBCReport.models       import *
# Block import for excel 
try:  
	
	from openpyxl.writer.excel import save_virtual_workbook
except Exception, e:
	print e
from flask import make_response, Flask
import os
# end block
def getDefaultLang():
	try:

		Setting = mktsetting.getAppSetting("NBCLanguage")

		if Setting == "KH" :
			from app.Language.language_KH import Language
		else:
			from app.Language.language_EN import Language

		return Language

	except Exception, e:
		raise

def getNetIncome(Currency, Branch, Period, GLTable='', GLObj=''):
	GetSetting  =   mktmonthend.getTransferSetting()
	Amount      =   0
	if GetSetting:
		ReportID    =  'N002' #GetSetting['SenderReportID']
		LineValue   =   '60'#GetSetting['SenderLineValue']
		Amount =   mktgl.getReportSubTotal(ReportID, LineValue, Currency, Branch, Period, GLTable=GLTable, GLObj=GLObj, FCY=False, NBC=True)    
	
	return Amount

def getDisplayRate(Rate1, Rate2, IsMonth=False):
	DisplayRate =   ''
	if Rate1 or Rate2:
		if IsMonth:
			Rate1 = mktmoney.formatNumber(float(Rate1) / 12 )
			Rate2 = mktmoney.formatNumber(float(Rate2) / 12 )

		DisplayRate = Rate1 + '%' if Rate1 == Rate2 else Rate1 + '% - ' + Rate2 + '%'
		DisplayRate = '%s / Month'%DisplayRate if IsMonth else '%s / Year'%DisplayRate

	return DisplayRate

def getRate(RateList, IsMonth = False):
	try:
		Rate = ''
		if len(RateList) > 0:
			RateList = map(float, RateList)
			RateMin  = min(RateList)/12 if IsMonth else min(RateList)
			RateMax  = max(RateList)/12 if IsMonth else max(RateList)
			Rate    =   str(RateMin)+'%' if RateMin == RateMax else str(RateMin)+'% - ' + str(RateMax)+'%'
			Rate    =   '%s / Year'%Rate
		return  Rate

	except Exception, e:
		raise e

def getAmtByLineNumber(LineNumber, LineObj, Prefix):
	try:
		Amount      =   0
		Condition   =   []

		if LineNumber.find('>') != -1:

			StrValue    =   LineNumber.split('>')
			FirstValue  =   int(StrValue[0])
			SecondValue =   int(StrValue[1]) + 1

			for item in range(FirstValue, SecondValue):
				Condition.append(str(item))
		else:
			Condition   =   str(LineNumber).split()

		# print LineNumber, Condition,'ccccccc'
		if len(Condition) > 0:

			for item in Condition:
				Option = "+"
				if item.find('-') != -1:
					Option = "-"
					item = item.replace("-", "")

				KeyObj  =   "%s%s" %(Prefix, item)
				# print "I. Option: %s. KeyObj: %s." %(Option, KeyObj)
				if KeyObj in LineObj:
					if "+" in Option:
						# print '++++'
						Amount += float(LineObj[KeyObj])
					else:
						# print '----'
						Amount -= float(LineObj[KeyObj])
		# print "Amount %s." %Amount
		return Amount

	except Exception, e:
		return 0
def getRateByCurrency(L, Currency):
	try:

		Rate  = ""
		Rate1 = ""
		Rate2 = ""
		Rate  = []

		if L:
			for item in L:
				if item['Currency'] == Currency:
					RateObj = str(item['Rate']).split()
					if len(RateObj) == 2:
						Rate1 = RateObj[0]
						Rate2 = RateObj[1]

						Rate1 = float(Rate1) / float(12)
						Rate2 = float(Rate2) / float(12)

					else:
						Rate1 = RateObj[0]
						Rate1 = float(Rate1) / float(12)

					Rate.append(Rate1)
					Rate.append(Rate2)

		InterestRate    =   ""
		if len(Rate) > 0:
			InterestRate = "%s%s - %s%s" %(min(Rate), "%", max(Rate), "%")

		return InterestRate

	except:
		raise

def getTotalByList(L):
	try:
		NumOfRecord     =   Decimal(0)

		if len(L) > 0:
			for item in L:
				NumOfRecord += Decimal(item)
				# print item
		return NumOfRecord

	except:
		raise

def getCompanyName():
	try:

		CompanyObj  = mkttool.getCompany()
		CompanyName = "Morakot MFI"
		if CompanyObj:
			CompanyName = CompanyObj.CompanyName

		return CompanyName

	except:
		raise


def getOrderNumberKh(Type, Number):
	OrderNumber     =   {
							"KH":{  '1':u'១', '2':u'២', '3':u'៣', '4':u'៤', '5':u'៥', 
									'6':u'៦', '7':u'៧', '8':u'៨', '9':u'៩', '10':u'១០'},
							"EN":{  '1':u'1', '2':u'2', '3':u'3', '4':u'4', '5':u'5', 
									'6':u'6', '7':u'7', '8':u'8', '9':u'9', '10':u'10'},
						}
	return OrderNumber[Type][Number]

def getDivAmount(Amount):
	try:

		return float(Amount) / 1000000

	except Exception, e:
		raise


def getAmountInRiels(ID, Period=0, Branch="ALL", GLTable='', GLObj=''):
	try:
		# print "GL ID %s" %ID
		Amount = mktgl.getGLValue(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj)

		return getDivAmount(float(Amount))

	except:
		raise

def getOutBaseCurrency(ID, Period=0, Branch="ALL", GLTable='', GLObj=''):
	try:

		Amount          =   mktgl.getGLValue(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj)
		ReportingRate   =   mktsetting.getAppSetting('NBCExchangeRate')
		Amount          *=  float(ReportingRate)

		return getDivAmount(float(Amount))

	except:
		raise
def getLineValue(LineNumber, LineObj):
	try:
		return LineObj[LineNumber]
	except Exception, e:
		return 0

def getDisplayReportingRate(Year='', Month='', Period=''):
	if Year and Month:
		CYear    =  Year
		CMonth   =  Month
	else:
		BankDate =  mktdate.getBankDate()
		CYear    =  BankDate.year
		CMonth   =  BankDate.month
	if not Period: Period = 6 
	if int(Period) in [1, 2, 4, 5]:
		if int(CMonth) == 1:
			CMonth   =   12
			CYear    -=  1
		else:
			CMonth   = int(CMonth) - 1
	
	CurrencyDic         =   getNBCExchangeRate(CYear, CMonth)
	if not CurrencyDic:
		return '' 
	return CurrencyDic.get('USD','')

def getNBCExchangeRate(Year, Month):
	try:
		# get exchange rate from other currency into Khmer
		Day         =   calendar.monthrange(int(Year),int(Month))[1]
		Month       =   Month if int(Month) > 9 else '0%s'%int(Month)
		RateDate    =   '%s-%s-%s'%(Year, Month, Day)
		#print RateDate
		CurrencyObj =   db.session.query(MKT_CURRENCY.ID).all()
		CurrencyDic =   {}
		for c in CurrencyObj:
			Rate    =   mktaccounting.getReportingRate(c.ID, RateDate, 'OtherRate1')
			if Rate == None or Rate=='':
				Rate    =   '0' 
				flash(msg_error+'Incorrect NBC Exchange Rate setting ')
			
			CurrencyDic.update({c.ID:Decimal(Rate.replace(',',''))})
		# print CurrencyDic, CurrencyObj
		return CurrencyDic
		
	except Exception, e:
		raise e

def getNBCLineDetail(ID, Branch, Period, GLTable='', GLObj='', Year='', Month=''):
    try:

        Dic             =   {}
        LineFormat      =   {'B':'Bold', 'I':'Italic', 'N':'Normal', 'BI':'Bold'}
        LineDetailObj   =   MKT_NBC_REPORT_DE.query.\
                            order_by(MKT_NBC_REPORT_DE.LineNumber.asc()).\
                            filter(MKT_NBC_REPORT_DE.Report == ID).\
                            all()

        AppSetting          =   mktsetting.getAppSetting
        ReportingRate       =   float(AppSetting('NBCExchangeRate'))
        NBCCurrentYearLine  =   AppSetting('NBCCurrentYearLine')
        BaseCurrency        =   mktsetting.getAccSetting().BaseCurrency
        CurrencyDic         =   getNBCExchangeRate(Year, Month)
        if not CurrencyDic:
            flash(msg_error+"NBC Exchange Rate isn't defined") 
            return Dic

        OneMillion          =   1000000
        LocationSetting     = mktsetting.getAppSetting('LANGUAGE')
        if LocationSetting == 'MYANMAR':
            OneMillion = 1
        YTDPeriod = 3
        if Period == 0 or Period == 1:
            YTDPeriod = 2

        CurrencyObj = MKT_CURRENCY.query
        if LineDetailObj:

            for item in LineDetailObj:
                if item.LineType == 'LD':
                    TAmountKHR          =   0
                    TOtherAmountKHR     =   0
                    TYTDAmountKHR       =   0
                    TOtherYTDAmountKHR  =   0
                    TAmountUSD          =   0
                    TOtherAmountUSD     =   0
                    TYTDAmountUSD       =   0
                    TOtherYTDAmountUSD  =   0
                    Kargs               =   {'GLTable':GLTable, 'GLObj':GLObj, 'FCY':False}

                    for c in CurrencyObj:
                        Currency    =   c.ID
                        Rate        =   CurrencyDic.get(str(BaseCurrency),1)
                        Amount          =   Decimal(mktgl.getGLValue(item.LineValue,Branch,Period,Currency, **Kargs))
                        OtherAmount     =   Decimal(mktgl.getGLValue(item.OtherLineValue,Branch,Period,Currency, **Kargs))
                        YTDAmount       =   Decimal(mktgl.getGLValue(item.LineValue,Branch,YTDPeriod,Currency, **Kargs))
                        OtherYTDAmount  =   Decimal(mktgl.getGLValue(item.OtherLineValue,Branch,YTDPeriod,Currency, **Kargs))
                        # print Amount, OtherAmount, YTDAmount, OtherYTDAmount,'uuuuu',item.LineValue,'other',item.OtherLineValue
                        AmountKHR       =   Amount * Rate 
                        OtherAmountKHR  =   OtherAmount * Rate
                        YTDAmountKHR    =   YTDAmount * Rate
                        OtherYTDAmountKHR   =   OtherYTDAmount * Rate
                        # print AmountKHR, OtherAmountKHR, YTDAmountKHR, OtherYTDAmountKHR, Currency, Rate
                        try:
                            AmountUSD       =   AmountKHR / CurrencyDic['USD'] if AmountKHR else 0
                            OtherAmountUSD  =   OtherAmountKHR / CurrencyDic['USD'] if OtherAmountKHR else 0
                            YTDAmountUSD    =   YTDAmountKHR / CurrencyDic['USD'] if YTDAmountKHR else 0
                            OtherYTDAmountUSD   =   OtherYTDAmountKHR / CurrencyDic['USD'] if OtherYTDAmountKHR else 0
                        except Exception, e:
                            AmountUSD           = 0
                            OtherAmountUSD      = 0
                            YTDAmountUSD        = 0
                            OtherYTDAmountUSD   = 0

                        AmountKHR           =   AmountKHR / OneMillion if AmountKHR != 0 else 0
                        OtherAmountKHR      =   OtherAmountKHR / OneMillion if OtherAmountKHR != 0 else 0
                        YTDAmountKHR        =   YTDAmountKHR / OneMillion if YTDAmountKHR != 0 else 0
                        OtherYTDAmountKHR   =   OtherYTDAmountKHR / OneMillion if OtherYTDAmountKHR != 0 else 0
                        # print AmountKHR, OtherAmountKHR, YTDAmountKHR, OtherYTDAmountKHR, item.LineDescription
                        TAmountKHR          +=  AmountKHR
                        TOtherAmountKHR     +=  OtherAmountKHR
                        TYTDAmountKHR       +=  YTDAmountKHR
                        TOtherYTDAmountKHR  +=  OtherYTDAmountKHR
                        TAmountUSD          +=  AmountUSD
                        TOtherAmountUSD     +=  OtherAmountUSD
                        TYTDAmountUSD       +=  YTDAmountUSD
                        TOtherYTDAmountUSD  +=  OtherYTDAmountUSD
                        AmountLine          =   'Amount%s%s'%(Currency,item.LineNumber)
                        Dic.update({AmountLine: Dic.get(AmountLine, 0) + OtherAmountKHR})
                        if Currency == 'KHR' : Dic.update({AmountLine: Dic.get(AmountLine, 0) + AmountKHR})

                    Dic.update({'AmtUSD_%s'%item.LineNumber     : (TAmountUSD + TOtherAmountUSD) })
                    Dic.update({'AmtKHR_%s'%item.LineNumber     : TAmountKHR })
                    Dic.update({'AmtOth_%s'%item.LineNumber     : TOtherAmountKHR })
                    Dic.update({'TotalKHR_%s'%item.LineNumber   : (TAmountKHR + TOtherAmountKHR) })
                    Dic.update({'YTD_%s'%item.LineNumber        : (TYTDAmountKHR + TOtherYTDAmountKHR) })
                    # Dic.update({'AmtOthUSD_%s'%item.LineNumber    : OtherAmountUSD })
            
            for item in LineDetailObj:
                if (int(item.LineNumber) == int(NBCCurrentYearLine)) and ID != 'N002' :
                    Dic = updateCurrentYearLine(item, Dic, CurrencyObj, CurrencyDic, BaseCurrency, Period, Branch, GLTable, GLObj, Year, Month)

                if item.LineType in ['ST','GH']:
                    Dic = updateDicValue(item, Dic, CurrencyObj)
            
            for item in LineDetailObj:
                if item.LineType in ['ST','GH']:    
                    Dic = updateDicValue(item, Dic, CurrencyObj)
        
        return Dic

    except Exception, e:
        raise

def updateCurrentYearLine(item, Dic, CurrencyObj, CurrencyDic, BaseCurrency, Period, Branch, GLTable='', GLObj='', Year='', Month=''):

	IncomePeriod = 0
	if Period in [2]:
		IncomePeriod = 1
		
	OneMillion  =   1000000
	AppSetting  =   mktsetting.getAppSetting
	IncomeData  =   getNBCLineDetail('N002', Branch, IncomePeriod, GLTable=GLTable, GLObj=GLObj, Year=Year, Month=Month)
	IncomeLine  =   AppSetting('NBCNetIncomeLine')

	AmountUSD       =   Decimal(Dic['AmtUSD_%s'%item.LineNumber])
	AmountKHR       =   Decimal(Dic['AmtKHR_%s'%item.LineNumber])
	OtherAmountKHR  =   Decimal(Dic['AmtOth_%s'%item.LineNumber])
	TotalAmountKHR  =   Decimal(Dic['TotalKHR_%s'%item.LineNumber])
	YTDAmountKHR    =   Decimal(Dic['YTD_%s'%item.LineNumber])
	# print AmountUSD, AmountKHR, OtherAmountKHR, TotalAmountKHR, YTDAmountKHR
	# print float(IncomeData['AmtUSD_%s'%IncomeLine]), float(IncomeData['AmtKHR_%s'%IncomeLine]), float(IncomeData['AmtOth_%s'%IncomeLine])

	TAmountKHR  =   Decimal(IncomeData['AmtKHR_%s'%IncomeLine])
	TAmountUSD  =   Decimal(IncomeData['AmtUSD_%s'%IncomeLine])
	TAmountOth  =   Decimal(IncomeData['AmtOth_%s'%IncomeLine])
	TTotalAmountKHR  =   Decimal(IncomeData['TotalKHR_%s'%IncomeLine])
	# print TAmountKHR, TAmountUSD, TAmountOth
	TempDic     =   {}
	for c in CurrencyObj:
		TempDic.update({'Amount%s%s'%(c.ID,item.LineNumber):getLineValue('Amount%s%s'%(c.ID,item.LineNumber),IncomeData)})

	if int(Period) == 0 or int(Period) == 3 or int(Period) == 6 :
		NewAmountUSD        =  TAmountUSD+AmountUSD
		NewAmountKHR        =  TAmountKHR+AmountKHR
		NewOtherAmountKHR   =  TAmountOth + OtherAmountKHR
		NewTAmountKHR       =  TTotalAmountKHR + TotalAmountKHR
		for c in CurrencyObj:
			AmountFCY   =   getLineValue('Amount%s%s'%(c.ID,item.LineNumber),TempDic) + getLineValue('Amount%s%s'%(c.ID,item.LineNumber),Dic)
			Dic.update({'Amount%s%s'%(c.ID,item.LineNumber) : AmountFCY })

	else :
		NewAmountUSD        =  AmountUSD
		NewAmountKHR        =  AmountKHR
		NewOtherAmountKHR   =  OtherAmountKHR
		NewTAmountKHR       =  TotalAmountKHR

	Dic.update({'AmtUSD_%s'%item.LineNumber:NewAmountUSD})
	Dic.update({'AmtKHR_%s'%item.LineNumber:NewAmountKHR})
	Dic.update({'AmtOth_%s'%item.LineNumber:NewOtherAmountKHR})
	Dic.update({'TotalKHR_%s'%item.LineNumber:NewTAmountKHR})

	return Dic


def updateDicValue(item, Dic, CurrencyObj):
	AmountKHR           =   getAmtByLineNumber(item.LineValue, Dic, "AmtKHR_")
	OtherAmountKHR      =   getAmtByLineNumber(item.OtherLineValue, Dic, "AmtOth_")
	LineValue           =   item.LineValue if item.LineValue else item.OtherLineValue
	AmountUSD           =   getAmtByLineNumber(LineValue, Dic, "AmtUSD_")
	Total               =   getAmtByLineNumber(LineValue, Dic, "TotalKHR_")
	YTD                 =   getAmtByLineNumber(LineValue, Dic, "YTD_")

	for c in CurrencyObj:
		Dic.update({'Amount%s%s'%(c.ID,item.LineNumber) : getAmtByLineNumber(item.OtherLineValue, Dic, "Amount%s"%c.ID) })

	# print item.LineNumber, AmountUSD, AmountKHR, OtherAmountKHR, Total, YTD,'aaaaaaaaaaa'
	Dic.update({'AmtUSD_%s'%item.LineNumber     : AmountUSD })
	Dic.update({'AmtKHR_%s'%item.LineNumber     : AmountKHR })
	Dic.update({'AmtOth_%s'%item.LineNumber     : OtherAmountKHR })
	Dic.update({'TotalKHR_%s'%item.LineNumber   : Total })
	Dic.update({'YTD_%s'%item.LineNumber        : YTD })
	return Dic

def getNBCDetail(ID, Period, Branch="ALL", ReportedDate="", Year='', Month=''):
	try:

		if not ReportedDate:
			ReportedDate    =   mktdate.getBankDate()

		getAccSetting   =   mktsetting.getAccSetting()
		BaseCurrency    =   getAccSetting.BaseCurrency
		ReportingRate   =   getDisplayReportingRate(Year, Month, Period)
		NBC_REPORT      =   MKT_NBC_REPORT.query.get(ID)
		LineFormat      =   {'B':'Bold', 'I':'Italic', 'N':'Normal', 'BI':'Bold'}
		ReportHeader    =   {}
		ColumnHeader    =   {'Color':'#CCFFCC'}
		Data            =   []
		Type            =   '1'
		Template        =   "1"

		if NBC_REPORT:
			Language        =   getDefaultLang()
			ReportHeader.update({'Form': NBC_REPORT.ID})
			ReportHeader.update({'Title': NBC_REPORT.ReportTitle})
			ReportHeader.update({'ReportName': NBC_REPORT.ReportName})
			ReportHeader.update({'CompanyName': NBC_REPORT.CompanyName})
			ReportHeader.update({'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000'))})

			Template = NBC_REPORT.Template

		NBC_REPORT_DE   =   MKT_NBC_REPORT_DE.query.\
							order_by(MKT_NBC_REPORT_DE.LineNumber.asc()).\
							filter(MKT_NBC_REPORT_DE.Report == ID).\
							all()

		Condition = []
		if Year and Month:
			GLTable   = MKT_GL_BALANCE_BACKUP
			Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month]
		else:
			GLTable   = MKT_GL_BALANCE
			BankDate    =   mktdate.getBankDate()
			Year    =   BankDate.year
			Month   =   BankDate.month
		# check to recalculate year and month to get currency
		if Period in [1, 2, 4, 5]:
			if int(Month) == 1:
				Month   =   12
				Year    -=  1
			else:
				Month   = int(Month) - 1

		GLObj       =   GLTable.query.filter(*Condition)
		DataList    =   getNBCLineDetail(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj, Year=Year, Month=Month)

		if NBC_REPORT_DE:
			i = 1

			for item in NBC_REPORT_DE:

				Dic = {}

				OtherLineValue = item.OtherLineValue if item.OtherLineValue else ""
				# print item.LineType,item.LineNumber,getLineValue("AmtUSD_%s" %item.LineNumber, DataList)
				if item.LineType == "CH":

					AmountInDollar      =   getLineValue("AmtUSD_%s" %item.LineNumber, DataList)
					AmountInRields      =   getLineValue("AmtKHR_%s" %item.LineNumber, DataList)
					OtherAmount         =   getLineValue("AmtOth_%s" %item.LineNumber, DataList)
					TotalTotalInRiels   =   getLineValue("TotalKHR_%s" %item.LineNumber, DataList)
					YTDBalance          =   getLineValue("YTD_%s" %item.LineNumber, DataList)

					Dic.update({'LineNumber':int(item.LineNumber)})
					Dic.update({'Description':item.LineDescription})
					Dic.update({'LineType':item.LineType})
					Dic.update({'LineFormat':LineFormat[item.Format]})
					Dic.update({'RowBGColor':item.RowBGColor})
					Dic.update({'AmountInDollars':AmountInDollar})
					Dic.update({'AmountInRiels':AmountInRields})
					Dic.update({'OtherAmount':OtherAmount})
					Dic.update({'TotalInRiels':TotalTotalInRiels})
					Dic.update({'YTDBalance':YTDBalance})
					Dic.update({'Header':i})

					i += 1

				elif item.LineType == "ST" or item.LineType == "GH":

					AmountInDollar      =   getLineValue("AmtUSD_%s" %item.LineNumber, DataList)
					AmountInRields      =   getLineValue("AmtKHR_%s" %item.LineNumber, DataList)
					OtherAmount         =   getLineValue("AmtOth_%s" %item.LineNumber, DataList)
					TotalTotalInRiels   =   getLineValue("TotalKHR_%s" %item.LineNumber, DataList)
					YTDBalance          =   getLineValue("YTD_%s" %item.LineNumber, DataList)

					Dic.update({'LineNumber':int(item.LineNumber)})
					Dic.update({'Description':item.LineDescription})
					Dic.update({'LineType':item.LineType})
					Dic.update({'LineFormat':LineFormat[item.Format]})
					Dic.update({'RowBGColor':item.RowBGColor})
					Dic.update({'AmountInDollars':AmountInDollar})
					Dic.update({'AmountInRiels':AmountInRields})
					Dic.update({'OtherAmount':OtherAmount})
					Dic.update({'TotalInRiels':TotalTotalInRiels})
					Dic.update({'YTDBalance':YTDBalance})
					Dic.update({'Header':i})

					# print "Line GL + ST %s." %AmountInRields
				
				else:
					OtherLineValue = item.OtherLineValue if item.OtherLineValue else ""
					Dic.update({'LineNumber':int(item.LineNumber)})
					Dic.update({'Description':item.LineDescription})
					Dic.update({'LineType':item.LineType})
					Dic.update({'LineFormat':LineFormat[item.Format]})
					Dic.update({'RowBGColor':item.RowBGColor})
					# print item.LineValue
					AmountInDollar      =   getLineValue("AmtUSD_%s" %item.LineNumber, DataList)
					AmountInRields      =   getLineValue("AmtKHR_%s" %item.LineNumber, DataList)
					OtherAmount         =   getLineValue("AmtOth_%s" %item.LineNumber, DataList)
					TotalTotalInRiels   =   getLineValue("TotalKHR_%s" %item.LineNumber, DataList)
					YTDBalance          =   getLineValue("YTD_%s" %item.LineNumber, DataList)

					Dic.update({'AmountInDollars':AmountInDollar})
					Dic.update({'AmountInRiels':AmountInRields})
					Dic.update({'OtherAmount':OtherAmount})
					Dic.update({'TotalInRiels':TotalTotalInRiels})
					Dic.update({'YTDBalance':YTDBalance})
					Dic.update({'Header':i})

				Dic = collections.OrderedDict(sorted(Dic.items()))
				Data.append(Dic)

		Data = sorted(Data, key=lambda Data: Data['LineNumber'])

		Result  =   {
			'ReportHeader'  : ReportHeader,
			'ColumnHeader'  : ColumnHeader,
			'Data'          : Data,
			'Type'          : Type,
			'ReportingRate' : ReportingRate 
		}

		return [Result, Template]

	except:
		raise

# NBC Version 2 Edition
# By Mr.Sovankiry Rim and Kimchhorng Seang

BG_HEADER_COLOR     = '#93CDDD' # Code Color of backgroud color of header
BG_BODY_COLOR       = '#DBEEF4' # Code Color of backgroud color of body
EXCLUDE_KEY_FORMAT  = ['Type','LineType','Indent','RowBGColor','LineFormat','Colspan'] # Exclude column of formating
OneMillion          = 1000000

def setTableHeader(**kwargs):

	TableHeader = kwargs.get('TableHeader',{})
	Text        = kwargs.get('Text','')
	Rowspan     = kwargs.get('Rowspan','')
	Colspan     = kwargs.get('Colspan','')
	RowIndex    = kwargs.get('RowIndex',1)
	Class       = kwargs.get('Class','')
	Style       = kwargs.get('Style','')

	ListHeader  = TableHeader.get(RowIndex,[])
	if mkttool.isFloat(Text):
		Text = str(Text)
   
	Rowspan = ""  if Rowspan == 0 else Rowspan
	Colspan = ""  if Colspan == 0 else Colspan
	ListHeader.append(
						{'Text':Text,
						'Rowspan':Rowspan,
						'Colspan':Colspan,
						'Class':Class,
						'Style':Style})
	TableHeader.update({RowIndex:ListHeader})

	return TableHeader

def getHeaderReport(**kwarg):
	Title           = kwarg.get('Title','')
	ReportName      = kwarg.get('ReportName','')
	Form            = kwarg.get('Form','')
	SubTitleReport  = kwarg.get('SubTitleReport','')
	NetWorth        = kwarg.get('NetWorth',"")

	CompanyObj      =   mkttool.getCompany()
	CompanyName     =   CompanyObj.CompanyName
	BankDate        =   mktdate.getBankDate()
	ReportedDate    =   mktdate.getDateISO(mktdate.getLastDayPrevMonth(BankDate))
	Year            =   ReportedDate.year
	Month           =   ReportedDate.month
	CurrencyDic     =   getNBCExchangeRate(Year, Month)

	ReportHeader    =   {   'Title'         : Title,
							'ReportName'    : ReportName,
							'CompanyName'   : CompanyObj.LocalName+'\n'+CompanyName ,
							'AsOf'          : mktdate.formatDate(ReportedDate,'%d %B %Y'),
							'ReportedDate'  : str(ReportedDate),
							'NetWorth'      : NetWorth,
							'Form'          : Form,
							'ReportingRate' : CurrencyDic.get("USD",0),
							'SubTitleReport':SubTitleReport,
							'ColumnHeader'  : BG_HEADER_COLOR,
							'DicExchangeRate':CurrencyDic,
							'EXCLUDE_KEY_FORMAT':EXCLUDE_KEY_FORMAT,}

	return ReportHeader
"""
	This function is the same getNBCDetail() but version 2
"""
def getNBCLineReport(ID, Period, Branch="ALL", ReportedDate="", Year='', Month='',Audit='1'):
    try:
        CompanyObj = mkttool.getCompany()
        CompanyName = CompanyObj.CompanyName

        if not ReportedDate:
            ReportedDate    =   mktdate.getBankDate()

        NBC_REPORT      =   MKT_NBC_REPORT.query.get(ID)
        LineFormat      =   {'B':'Bold', 'I':'Italic', 'N':'Normal', 'BI':'Bold'}
        ReportHeader    =   {}
        ColumnHeader    =   {'Color':BG_HEADER_COLOR}
        Data            =   []
        Type            =   '1'
        Template        =   "1"

        if NBC_REPORT:
           
            ReportHeader.update({'Form': NBC_REPORT.ID})
            ReportHeader.update({'Title': NBC_REPORT.ReportTitle})
            ReportHeader.update({'ReportName': NBC_REPORT.ReportName})
            ReportHeader.update({'CompanyName': CompanyName})
            ReportHeader.update({'AsAt': ReportedDate})

            Template = NBC_REPORT.Template

        NBC_REPORT_DE   =   MKT_NBC_REPORT_DE.query.\
                            order_by(MKT_NBC_REPORT_DE.LineNumber.asc()).\
                            filter(MKT_NBC_REPORT_DE.Report == ID).\
                            all()

        Condition = []
        if Year and Month:
            GLTable   = MKT_GL_BALANCE_BACKUP
            Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month,GLTable.Audit == Audit]
        else:
            GLTable   = MKT_GL_BALANCE
            BankDate    =   mktdate.getBankDate()
            Year    =   BankDate.year
            Month   =   BankDate.month
        # check to recalculate year and month to get currency
        if Period in [1, 2, 4, 5]:
            if Month == 1:
                Month   =   12
                Year    -=  1
            else:
                Month   -=  1

        GLObj       =   GLTable.query.filter(*Condition)
        DataList    =   getNBCLineDetail(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj, Year=Year, Month=Month)

        if NBC_REPORT_DE:
            i = 1

            for item in NBC_REPORT_DE:

                Dic = {}

                OtherLineValue = item.OtherLineValue if item.OtherLineValue else ""
                # print item.LineType,item.LineNumber,getLineValue("AmtUSD_%s" %item.LineNumber, DataList)
                if item.LineType == "CH":

                    AmountInDollar      =   getLineValue("AmtUSD_%s" %item.LineNumber, DataList)
                    AmountInRields      =   getLineValue("AmtKHR_%s" %item.LineNumber, DataList)
                    OtherAmount         =   getLineValue("AmtOth_%s" %item.LineNumber, DataList)
                    TotalTotalInRiels   =   getLineValue("TotalKHR_%s" %item.LineNumber, DataList)
                    YTDBalance          =   getLineValue("YTD_%s" %item.LineNumber, DataList)

                    Dic.update({'LineNumber':int(item.LineNumber)})
                    Dic.update({'Description':item.LineDescription})
                    Dic.update({'LineType':item.LineType})
                    Dic.update({'LineFormat':LineFormat[item.Format]})
                    Dic.update({'RowBGColor':item.RowBGColor})
                    Dic.update({'AmountInDollars':AmountInDollar})
                    Dic.update({'AmountInRiels':AmountInRields})
                    Dic.update({'OtherAmount':OtherAmount})
                    Dic.update({'TotalInRiels':TotalTotalInRiels})
                    Dic.update({'YTDBalance':YTDBalance})
                    Dic.update({'Header':i})
                    Dic.update({'Indent':item.Indent})

                    i += 1

                elif item.LineType == "ST" or item.LineType == "GH":

                    AmountInDollar      =   getLineValue("AmtUSD_%s" %item.LineNumber, DataList)
                    AmountInRields      =   getLineValue("AmtKHR_%s" %item.LineNumber, DataList)
                    OtherAmount         =   getLineValue("AmtOth_%s" %item.LineNumber, DataList)
                    TotalTotalInRiels   =   getLineValue("TotalKHR_%s" %item.LineNumber, DataList)
                    YTDBalance          =   getLineValue("YTD_%s" %item.LineNumber, DataList)

                    Dic.update({'LineNumber':int(item.LineNumber)})
                    Dic.update({'Description':item.LineDescription})
                    Dic.update({'LineType':item.LineType})
                    Dic.update({'LineFormat':LineFormat[item.Format]})
                    Dic.update({'RowBGColor':item.RowBGColor})
                    Dic.update({'AmountInDollars':AmountInDollar})
                    Dic.update({'AmountInRiels':AmountInRields})
                    Dic.update({'OtherAmount':OtherAmount})
                    Dic.update({'TotalInRiels':TotalTotalInRiels})
                    Dic.update({'YTDBalance':YTDBalance})
                    Dic.update({'Header':i})
                    Dic.update({'Indent':item.Indent})


                    # print "Line GL + ST %s." %AmountInRields
                
                else:
                    OtherLineValue = item.OtherLineValue if item.OtherLineValue else ""
                    Dic.update({'LineNumber':int(item.LineNumber)})
                    Dic.update({'Description':item.LineDescription})
                    Dic.update({'LineType':item.LineType})
                    Dic.update({'LineFormat':LineFormat[item.Format]})
                    Dic.update({'RowBGColor':item.RowBGColor})
                    # print item.LineValue
                    AmountInDollar      =   getLineValue("AmtUSD_%s" %item.LineNumber, DataList)
                    AmountInRields      =   getLineValue("AmtKHR_%s" %item.LineNumber, DataList)
                    OtherAmount         =   getLineValue("AmtOth_%s" %item.LineNumber, DataList)
                    TotalTotalInRiels   =   getLineValue("TotalKHR_%s" %item.LineNumber, DataList)
                    YTDBalance          =   getLineValue("YTD_%s" %item.LineNumber, DataList)

                    Dic.update({'AmountInDollars':AmountInDollar})
                    Dic.update({'AmountInRiels':AmountInRields})
                    Dic.update({'OtherAmount':OtherAmount})
                    Dic.update({'TotalInRiels':TotalTotalInRiels})
                    Dic.update({'YTDBalance':YTDBalance})
                    Dic.update({'Header':i})
                    Dic.update({'Indent':item.Indent})


                Dic = collections.OrderedDict(sorted(Dic.items()))
                Data.append(Dic)

        Data = sorted(Data, key=lambda Data: Data['LineNumber'])
        ReportingRate   =   mktsetting.getAppSetting('NBCExchangeRate')

        Result  =   {
            'ReportHeader'  : ReportHeader,
            'ColumnHeader'  : ColumnHeader,
            'Data'          : Data,
            'Type'          : Type,
            'ReportingRate' : ReportingRate 
        }

        return [Result, Template]

    except:
        raise

def getNBCLineValue(LineNumber, LineObj):
	try:
		Result = {}
		for row in LineObj:
			if str(row.get("LineNumber","")) == LineNumber:
				Result.update({'AmountInRiels' : row.get("AmountInRiels",0),
							  'OtherAmount'   : row.get("OtherAmount",0),
							  'TotalInRiels'  : row.get("TotalInRiels",0)})

		return Result

	except Exception as e:
		raise

class SheetNotFound(Exception):
	pass

class WorkbookNotFound(Exception):
	pass


def getSheet(workbook, sheetname):
	'''
	Get sheet in workbook by sheetname

	:param workbook: Workbook object
	:param sheetname: name of sheet
	:return Worksheet object
	'''
	if workbook:

		if sheetname not in workbook.sheetnames:
			raise SheetNotFound('%s sheet not found in workbook [%s]' %(sheetname, ", ".join(workbook.sheetnames)))
		else:
			return workbook[sheetname]
	else:
		raise WorkbookNotFound('Workbook not found')

def removeOtherWorksheet(workbook, sheetname):
	if workbook:
		for sheet in workbook.sheetnames:
			if sheet != sheetname:
				workbook.remove(workbook[sheet])
		return workbook[sheetname]
	else:
		raise WorkbookNotFound('Workbook not found')

def setWriteWorkSheet(sheet, data=None):
	'''
	Write data to Worksheet

	:param sheet: Worksheet object
	:param data: dict of data {'A1': 'data'}
	:return None
	'''
	if sheet:

		if isinstance(data, dict):

			for key, value in data.iteritems():

				sheet[key] = value

def getExcelFile(workbook, filename='Default'):
	'''
	Make repsonse to download workbook

	:param workbook: Workbook object
	:param filename: filename of download file default to Default
	:return Response object

	Code Example : 

	def example():
 
	  
		workbook = load_workbook(FILENAME, keep_links=False)

		bs_sheet = getSheet(workbook, '1-BS')

		setWriteWorkSheet(bs_sheet, {'F13': 'local_test'})

		workbook.save('example.xlsx')


	@app.route('/')
	def flask_example():

		workbook = load_workbook(FILENAME, keep_links=False)

		bs_sheet = getSheet(workbook, '1-BS')

		setWriteWorkSheet(bs_sheet, {'F13':'flask_example'})

		response = getExcelFile(workbook)

		return response

	'''
	response = None

	if workbook:
		response = make_response(save_virtual_workbook(workbook))
		response.headers['Cache-Control'] = 'no-cache'
		response.headers["Content-Disposition"] = "attachment; filename=%s.xlsx" % filename
		response.headers["Content-type"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=utf-8"

	return response
