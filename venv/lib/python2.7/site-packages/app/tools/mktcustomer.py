from app.mktcore.wtfimports 	import *
from app 						import app,db
from app.Customer.models 		import MKT_CUSTOMER, MKT_CUSTOMER_INAU
from app.LoanProduct.models 	import MKT_LOAN_PRODUCT
from sqlalchemy 				import or_,func
from app.Province.models 		import MKT_PROVINCE
from app.District.models 		import MKT_DISTRICT
from app.Commune.models 		import MKT_COMMUNE
from app.Village.models 		import MKT_VILLAGE
from app.RestrictBranch.models 	import MKT_RESTRICT_BRANCH
from app.Officer.models			import MKT_OFFICER

import app.tools.mktdate 		as mktdate
import app.tools.user as mktuser
import app.tools.mkttool as mkttool
import mktaddress as mktaddress

def getSearchCustomer(AsGurantor=None, FilterCurrentBranch=True, IncludeINAU='N', FilterBlock=False):
	""" 
		getSearchCustomer() is a function to query Customer and return as json.
		Used as query factory of select field in Collateral, Account, Loan Application, and Loan Contract.

		# Check Restricted or Cross Branch
		Customer Cross Branch if no model MKT_CUSTOMER in RestrictBranch
	"""

	CurrentBranch 	= mktuser.getCurrentBranch()
	search 			= request.args.get('q') if request.args.get('q') else ""
	action 			= request.args.get('action') if 'action' in request.args else ""
	AllowPutID 		= request.args.get('AllowPutID') if 'AllowPutID' in request.args else ""
	NAMES 			= []
	FilterCondition = []
	RestrictedObj 	= MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()

	FilterConditionINAU = []

	if not AsGurantor:
		if not search.isspace():
			search = search.strip()
			if not search is None:

				if action == "view":
					FilterCondition.append(MKT_CUSTOMER.ID == search)
					FilterConditionINAU.append(MKT_CUSTOMER_INAU.ID == search)
				else:
					LikeCondition = [ 
						or_(MKT_CUSTOMER.ID.like('%'+search.upper()+'%'), 
						func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+search.upper()+'%'),
						func.upper(MKT_CUSTOMER.LastNameEn).like('%'+search.upper()+'%'),
						func.concat(func.upper(MKT_CUSTOMER.LastNameEn),' ',func.upper(MKT_CUSTOMER.FirstNameEn)).like('%'+search.upper()+'%'),
						func.concat(func.upper(MKT_CUSTOMER.FirstNameEn),' ',func.upper(MKT_CUSTOMER.LastNameEn)).like('%'+search.upper()+'%')
						)]

					LikeConditionINAU = [ 
						or_(MKT_CUSTOMER_INAU.ID.like('%'+search.upper()+'%'), 
						func.upper(MKT_CUSTOMER_INAU.FirstNameEn).like('%'+search.upper()+'%'),
						func.upper(MKT_CUSTOMER_INAU.LastNameEn).like('%'+search.upper()+'%'),
						func.concat(func.upper(MKT_CUSTOMER_INAU.LastNameEn),' ',func.upper(MKT_CUSTOMER_INAU.FirstNameEn)).like('%'+search.upper()+'%'),
						func.concat(func.upper(MKT_CUSTOMER_INAU.FirstNameEn),' ',func.upper(MKT_CUSTOMER_INAU.LastNameEn)).like('%'+search.upper()+'%')
						)]

					FilterCondition.extend(LikeCondition)
					FilterConditionINAU.extend(LikeConditionINAU)

					if RestrictedObj and FilterCurrentBranch:
						FilterCondition.append(MKT_CUSTOMER.Branch == CurrentBranch)
						FilterConditionINAU.append(MKT_CUSTOMER_INAU.Branch == CurrentBranch)

					if FilterBlock:
						FilterCondition.append(MKT_CUSTOMER.Block == "N")
						FilterConditionINAU.append(MKT_CUSTOMER_INAU.Block == "N")

	else:
		LikeCondition = [ 
						or_(MKT_CUSTOMER.ID.like('%'+search.upper()+'%'), 
						func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+search.upper()+'%'),
						func.upper(MKT_CUSTOMER.LastNameEn).like('%'+search.upper()+'%'),
						func.concat(func.upper(MKT_CUSTOMER.LastNameEn),' ',func.upper(MKT_CUSTOMER.FirstNameEn)).like('%'+search.upper()+'%'),
						func.concat(func.upper(MKT_CUSTOMER.FirstNameEn),' ',func.upper(MKT_CUSTOMER.LastNameEn)).like('%'+search.upper()+'%')
						)]

		LikeConditionINAU = [ 
						or_(MKT_CUSTOMER_INAU.ID.like('%'+search.upper()+'%'), 
						func.upper(MKT_CUSTOMER_INAU.FirstNameEn).like('%'+search.upper()+'%'),
						func.upper(MKT_CUSTOMER_INAU.LastNameEn).like('%'+search.upper()+'%'),
						func.concat(func.upper(MKT_CUSTOMER_INAU.LastNameEn),' ',func.upper(MKT_CUSTOMER_INAU.FirstNameEn)).like('%'+search.upper()+'%'),
						func.concat(func.upper(MKT_CUSTOMER_INAU.FirstNameEn),' ',func.upper(MKT_CUSTOMER_INAU.LastNameEn)).like('%'+search.upper()+'%')
						)]

		FilterCondition.extend(LikeCondition)
		FilterConditionINAU.extend(LikeConditionINAU)

		FilterCondition.append(MKT_CUSTOMER.AsGurantor == str(AsGurantor))
		FilterConditionINAU.append(MKT_CUSTOMER_INAU.AsGurantor == str(AsGurantor))

		if RestrictedObj and FilterCurrentBranch:
			FilterCondition.append(MKT_CUSTOMER.Branch == CurrentBranch)
			FilterConditionINAU.append(MKT_CUSTOMER_INAU.Branch == CurrentBranch)

		if FilterBlock:
			FilterCondition.append(MKT_CUSTOMER.Block == "N")
			FilterConditionINAU.append(MKT_CUSTOMER_INAU.Block == "N")

	if mkttool.isRequestAll():
		UserOfficerID = mktuser.getUserOfficerID()
		FilterCondition.append(MKT_CUSTOMER.Officer == UserOfficerID)
		FilterConditionINAU.append(MKT_CUSTOMER_INAU.Officer == UserOfficerID)

	CustomerObj = MKT_CUSTOMER.query.filter(*FilterCondition).order_by(MKT_CUSTOMER.ID.asc())
	CustomerINAUObj = MKT_CUSTOMER_INAU.query.filter(*FilterConditionINAU).order_by(MKT_CUSTOMER_INAU.ID.asc())

	if CustomerObj.first() or CustomerINAUObj.first():

		for row in CustomerObj:
			Label = row.ID + " - " + row.LastNameEn + " " + row.FirstNameEn
			dic = {"id":row.ID, "text": Label}
			NAMES.append(dic)
			# app.logger.debug(NAMES)

		if IncludeINAU == "Y":
			for row in CustomerINAUObj:
				Label = row.ID + " - " + row.LastNameEn + " " + row.FirstNameEn
				dic = {"id":row.ID, "text": Label}
				NAMES.append(dic)


	else:
		if AllowPutID == "Y":
			dic = {"id":search, "text": search}
			NAMES.append(dic)

	return jsonify(items = NAMES)

def checkAge(CustomerID=None):
	try:

		Customer = MKT_CUSTOMER.query.get(CustomerID)

		if Customer:

			Age = int(mktdate.getAge(Customer.DateOfBirth))
			LoanProduct = request.form['LoanProduct']
			LP = MKT_LOAN_PRODUCT.query.get(LoanProduct) # LP = LoanProduct record

			if LP:
				if LP.MaxAge and Age > int(LP.MaxAge):
					raise ValidationError("Customer's age must younger than or equal %s" %LP.MaxAge)

				if LP.MinAge and Age < int(LP.MinAge):
					raise ValidationError("Customer's age must older than or equal %s" %LP.MinAge)

	except:
		raise

def getCustomerAddress(ID='', Locale='en'):
	try:
		Address = ""
		CustomerObj = MKT_CUSTOMER.query.get(ID)
		if CustomerObj:
			Province 	= CustomerObj.Province
			District 	= CustomerObj.District
			Commune 	= CustomerObj.Commune
			Village 	= CustomerObj.Village
			HouseNo 	= CustomerObj.HouseNo
			Street 		= CustomerObj.Street

			Address = mktaddress.getAddress(Province,District,Commune,Village,HouseNo,Street,Locale=Locale)

		return Address

	except Exception, e:
		raise

