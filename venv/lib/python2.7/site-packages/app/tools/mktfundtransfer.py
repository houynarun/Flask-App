from app.mktcore.wtfimports 			import *
from .. 								import app, db
from decimal 							import *

import app.tools.mktdate 				as mktdate
import app.tools.user 					as mktuser
import app.tools.mktaccounting 			as mktaccounting
import mktmessage 						as mktmessage
import mkttool 							as mkttool
import app.tools.mktsetting 			as mktsetting

from app.Branch.models 					import MKT_BRANCH
from datetime 							import datetime, date, timedelta

def authFundTransfer(ID, Amount, DrAcc, DrCat, DrCur, CrAcc, CrCat, CrCur,
					 Tran, TranDate, Noted, Branch="", Module="", Mode1="", Mode2="",
					 k1="", k2="", k3="", k4="", k5="", k6="", k7="", k8="", k9=""):
	try:

		for i in range(0, 2):
			if i == 0:
				Account 	= DrAcc
				Category 	= DrCat
				Currency 	= DrCur
				DrCr 		= "Dr"
				Mode 		= Mode1
			else:
				Account 	= CrAcc
				Category 	= CrCat
				Currency 	= CrCur
				DrCr 		= "Cr"
				Mode 		= Mode2

			print "%s - %s - %s - %s - %s - %s" %(Account, Category, Currency, DrCr, Mode, Amount)

			DateTimeNow = mktdate.getDateTimeNow()

			GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "", k1, k2, k3, k4, k5, k6, k7, k8, k9)
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amount), 		# Amount
				"JE",					# Module
				Tran, 					# Transaction
				TranDate, 				# TransactionDate
				ID, 					# Reference
				Noted, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode 					# Mode check to insert Journal for category
			)

		return True

	except:
		db.session.rollback()
		raise
		return False

# def checkPreMonthDateTransaction(TranDate):
# 	try:

# 		SystemBankDate 	= 	mktdate.getBankDate()
# 		SystemBankDate 	= 	datetime.strptime(str(SystemBankDate),'%Y-%m-%d').date()
# 		CheckPrevMonth 	=	mktdate.getNextMonth(SystemBankDate, -1)
# 		PrevMonth 		=	CheckPrevMonth.month
# 		PrevYear 		=	CheckPrevMonth.year
# 		TranDate 		= 	datetime.strptime(str(TranDate),'%Y-%m-%d').date()
# 		TranMonth 		=	TranDate.month
# 		TranYear 		=	TranDate.year
# 		Branch 			= 	mktuser.getBranch(session["ChangeBranch"]).ID
# 		Msg 			=	""

# 		if int(PrevMonth) == int(TranMonth) and int(PrevYear) == int(TranYear):

# 			ObjBranch = MKT_BRANCH.query.get(Branch)

# 			if ObjBranch:

# 				ReportLocked = ObjBranch.ReportLocked if ObjBranch.ReportLocked else "N"

# 				if str(ReportLocked).upper() == 'Y':

# 					Msg = "Branch %s was locked previous month transaction." %Branch

# 			else:

# 				Msg = "Branch %s not found." %Branch

# 		return Msg

# 	except:
# 		raise

def checkPreMonthDateTransaction(TranDate):
	try:

		BankDateObj 		= 	mktdate.getBankDateObj()
		TranDate            =   datetime.strptime(str(TranDate),'%Y-%m-%d').date()
		BankDate            =   datetime.strptime(str(BankDateObj.SystemDate),'%Y-%m-%d').date()
		NextMonthEnd        =   datetime.strptime(str(BankDateObj.NextMonthEnd),'%Y-%m-%d').date()
		LastMonthEnd        =   datetime.strptime(str(BankDateObj.LastMonthEnd),'%Y-%m-%d').date()
		PrevLastMonthEnd    =   datetime.strptime(str(BankDateObj.PrevLastMonthEnd),'%Y-%m-%d').date()
		NextYearEnd    		=   datetime.strptime(str(BankDateObj.NextYearEnd),'%Y-%m-%d').date()
		LastYearEnd    		=   datetime.strptime(str(BankDateObj.LastYearEnd),'%Y-%m-%d').date()
		StartMonthOfYearEnd	=	datetime.strptime('%s-%s-%s'%(LastYearEnd.year,LastYearEnd.month,'01'),'%Y-%m-%d').date()
		EndMonthOfYearEnd 	=	LastYearEnd

		Branch 				= 	mktuser.getCurrentBranch()
		Msg 				=	""

		BranchObj 	=	MKT_BRANCH.query.get(Branch)
		if BranchObj:
			ReportLocked 		=	BranchObj.ReportLocked

			if ReportLocked and len(ReportLocked) == 5:
				CurrentMonthLock 	=	ReportLocked[0]
				PreviousMonthLock 	=	ReportLocked[1]
				PreviousYearLock 	=	ReportLocked[2]
				PostedPrevMonth 	=	ReportLocked[3]
				# if TranDate > LastMonthEnd and TranDate <= NextMonthEnd:
				if TranDate > LastMonthEnd:
					if CurrentMonthLock == "0":
						Msg = "Current month transaction in branch %s was locked." %Branch
					if TranDate > NextMonthEnd:
						#Not Allow user post future date to next month
						AllowPostFuture = mktsetting.getAppSetting('TELLER_FUTURE_DATE')
						if AllowPostFuture:
							Msg = "System not allow post future date %s."%TranDate

				elif TranDate >= StartMonthOfYearEnd and TranDate <= EndMonthOfYearEnd:
					if PreviousYearLock == "0":
						Msg = "Previous year transaction branch %s was locked. Please contact your system administrator to unlock previous year." %Branch

				elif TranDate <= LastMonthEnd and TranDate > PrevLastMonthEnd:
					if PreviousMonthLock == "0":
						Msg = "Previous month transaction branch %s was locked. Please contact your system administrator to unlock previous month." %Branch

				elif TranDate > NextMonthEnd:
					Msg = "Transaction Date isn't allowed forward over current month."
					
				else:
					Msg = "Transaction Date isn't allowed backward over current month."
			else:
				mktmessage.setLogError('ReportLocked is incorrect')

		else:
			Msg = "Branch %s not found." %Branch

		return Msg

	except Exception, e:
		raise e
