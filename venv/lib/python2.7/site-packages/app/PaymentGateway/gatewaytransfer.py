from wtforms 						import DecimalField, IntegerField
from app.mktcore.wtfimports 		import *
from app.FundTransfer.forms 		import *
from app.Account.models 			import *

class FRM_GATEWAY_TRANSFER(FRM_FUND_TRANSFER):	
	DrAccount 		= 	RemoteTextField(getLanguage("Dr Account"))
	DrCategory 		= 	QuerySelectField(requiredlabel("Dr Category","*"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'',
							validators=[validators.Required()]
						)
	DrCurrency 		= 	QuerySelectField(requiredlabel(getLanguage("Dr Currency"), "*"),
	                        query_factory=loadCurrency,
	                        get_label=u'ID',
	                        allow_blank=loadDefaultCurrency(),
	                        blank_text=u'--None--',
	                        validators=[validators.Required()]
                        )
	CrAccount 		= 	RemoteTextField(getLanguage("Cr Account"))
	CrCategory 		= 	QuerySelectField(requiredlabel(getLanguage("Cr Category"),"*"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'',
							validators=[validators.Required()]
						)
	CrCurrency 		= 	QuerySelectField(requiredlabel(getLanguage("Cr Currency"), "*"),
	                        query_factory=loadCurrency,
	                        get_label=u'ID',
	                        allow_blank=loadDefaultCurrency(),
	                        blank_text=u'--None--',
	                        validators=[validators.Required()]
                        )

	Amount 			= 	DecimalField(requiredlabel(getLanguage("Amount"), "*"), [validators.Required()], default=0)
	Transaction 	= 	QuerySelectField(requiredlabel(getLanguage("Transaction"), "*"),
							query_factory=loadTransaction,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("Choose Transaction"),
							validators=[validators.Required()]
						)

	TranDate 		= 	DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()], default=loadCurrentDate)
	Reference 		= 	TextField(getLanguage("Reference"))
	#2018-06-05 - Inter-Branch - open these block when there inter-branch module
	TargetBranch 	=	QuerySelectField('Target Branch',
							query_factory=mktaccounting.loadBranch,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)
	TargetBranchDrCr = SelectField("Target Branch Dr/Cr",
							choices=[('', '--None--'),('Dr', 'Debit'),('Cr', 'Credit')],
						 	coerce=str)
	#end
	Note 			= 	TextAreaField(requiredlabel(getLanguage("Note"),"*"),[validators.Required()])

	ExchangeRate 	= TextField(requiredlabel('Exchange Rate','*'),description='1-Detail',
												validators=[validators.Required(),
															mktteller.customValidateExchangeRate])

	LCYAmount 		= TextField(requiredlabel('LCY Amount','*'),description='1-Detail',
											validators=[validators.Required(),
														mktteller.customValidateLCYAmount])
	
	DrGLKey 		= TextField('Debit GL Key', description='1-Detail')
	CrGLKey 		= TextField('Credit GL Key', description='1-Detail')
	Module 			= TextField("Module", default="FTG")

	def validate_TargetBranchDrCr(form,field):
		pass

	def validate_TargetBranch(form,field):
		pass

	@staticmethod
	def setVisible():
		return [('TargetBranch'),('TargetBranchDrCr')]

	@staticmethod
	def listField():
		Fields = ["ID", "DrAccount", "DrCategory","DrCurrency","CrAccount", "CrCategory","CrCurrency", "Amount", "LCYAmount", "Reference","TranDate","Note","Branch"]

		return Fields, ["ID*LK*FTG"]

	def validate_CrAccount(form,field):

		CrAccount 	= request.form['CrAccount']
		AccountObj 	=	MKT_ACCOUNT.query.get(CrAccount)
		if AccountObj:
			AccStatus	= AccountObj.AccStatus
			if AccStatus=='C':
				raise ValidationError("%s was colsed."%CrAccount)

	def validate_DrAccount(form,field):

		DrAccount 	= request.form['DrAccount']
		AccountObj 	=	MKT_ACCOUNT.query.get(DrAccount)
		if AccountObj:
			AccStatus	= AccountObj.AccStatus
			if AccStatus=='C':
				raise ValidationError("%s was colsed."%DrAccount)