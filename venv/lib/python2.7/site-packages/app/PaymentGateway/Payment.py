from app.tools.mktpaymentgateway 	import CLS_PAYMENT_INFO
from app.Currency.models 			import *

import app.DataEnquiry.views 		as dataenquiry 
import app.tools.mktdate 			as mktdate
import app.tools.mktsetting 		as mktsetting


class CLS_PAYMENT_GATEWAY(CLS_PAYMENT_INFO):
	"""docstring for CLS_PAYMENT_GATEWAY"""
	def __init__(self):
		super(CLS_PAYMENT_INFO, self).__init__()

	def gatewayResponse(self,**kwarge):
		"""
		-return :
			StatusCode : define that validate is successs or not
		"""
		CurrentDate = mktdate.getDateTimeNow()
		GatewayType = kwarge.get("GatewayType")
		Dict 		= kwarge.get("DictRequest") # wing reauest data
		DictResult 	= {}
		StatusCode  = 200
		Transaction = ""
		Message 	= "Transaction is successfully "
		DictGateway = self.getDictPaymentGateway() #Dict use to post to form payment gateway
		ListMessage , StatusData = self.validateData(Dict)
		Account  			=	Dict.get("Account")
		DictGateway.update({"Account" 		: Account,
							"Currency"		: Dict.get("Currency"),
							"Amount"		: Dict.get("Amount"),
							"Attribute2"	: "Payment at %s"%CurrentDate,
							"Reference"		: Dict.get("Reference"),
							"Purpose"		: Dict.get("Purpose"),
							"Operation"		: Dict.get("Operation"),
							"GatewayType"	: 3
							})

		# check data is correct format 
		if StatusData:
			Account 			= dataenquiry.formatDrawdownAccount(Account)
			DictPayment,Status 	= self.getPaymentInfo(Account)
			AccountInfo   		= DictPayment.get("AccountInfo")
			# check drawdwon is exist
			if Status:
				DDACurrency 	= AccountInfo.get("Currency")
				Currency 		= Dict.get("Currency")
				if Currency!= DDACurrency:
					StatusCode 	= 406
					Message   	= "Currency is invalid choise"

				GatewayStatus = 1 # queue record
				DictGateway.update({
									"Account":Account,
									"Branch":AccountInfo.get("Branch")
									})
			else:
				StatusCode    = 406 # Bad request
				Message 	  = "ID: %s not found in system."%Account[2:]
				GatewayStatus = 3 # fail
		else:
			StatusCode = 406 # Bad request
			Message    = ListMessage
			GatewayStatus = 3 # fail

		DictGateway.update({"GatewayStatus":GatewayStatus})

		DictResponse = {"Account" 		: Dict.get("Account"),
						 "StatusCode"	: StatusCode,
						 "Message"		: Message,
						 "Reference"	: Dict.get("Reference"),
						 "Amount"		: Dict.get("Amount"),
						 "Operation"	: Dict.get('Operation')}

		DictResult.update({"DictResponse":DictResponse,
						   "DictGateway":DictGateway,
						   "GatewayType":GatewayType,
						   "Transaction":Transaction})

		return DictResult,StatusCode
	def validateData(self,RequestDict):
		"""
		- def : validate request format and request data from client request
		- param:
			- RequestDict : the data that client request
		- return 
			-rtype (dict):
		"""
		DictResult 	= {
						"Amount"	:"",
						"Currency"	:"",
						"Account"	:"",
						"Operation"		:"",
						"Reference" :"",
						"Purpose"   :""
					}

		ListMessage = []
		Status 		= True
		""" check validate key in json  """
		for k,v in DictResult.iteritems():
			if k not in RequestDict.keys() or not RequestDict.get(k):
				ListMessage.append('%s : is required'%k)
				Status  = False
		""" check data is correct format ex. Currency : USD, not usd or usa """
		if Status:
			Account 	= RequestDict.get("Account")
			Amount 		= RequestDict.get("Amount")
			Currency 	= RequestDict.get("Currency")
			Reference 	= RequestDict.get("Reference")

			Operation  		= RequestDict.get("Operation") # Type could be D or W (Deposit or Withdrawal)
			CurrencyObj = MKT_CURRENCY.query.get(Currency)

			MsgReq 		= "This field is required"
			MsgInvalid  = "is invalid format"

			if not Operation in ['D','W']:
				Status  = False
				ListMessage.append("Operation: %s is invalid choise" % Operation)


			try:
				Amount = float(Amount)
			except Exception as e:
				Status  = False
				ListMessage.append("Amount: %s %s" % (Amount,MsgInvalid))

		return ListMessage,Status
