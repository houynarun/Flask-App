# -*- coding: utf-8 -*-
from sqlalchemy import or_
from app.mktcore.imports 	import *
from .models 				import *

from flask 					import session,jsonify,flash,template_rendered,Response
from flask.ext.login 		import login_required
# from sqlalchemy.sql 		import func

import app.tools.user 				as mktuser
import app.tools.mktreport 			as mktreport
import app.tools.mktsetting 		as mktsetting
import app.tools.mktdb 				as mktdb
import app.tools.mktnotification 	as mktnotification
import app.tools.mktdate 			as mktdate

from app.User.models 		import *
from app.LoginUser.models 	import *
from app.Role.models 	import *
from datetime import datetime  
from datetime import timedelta 
import ast 
from app.UserLocationTracker.models import * 


from .forms import * 
registerCRUD(admin, '/Notification', 'Notification', FRM_NOTIFICATION, [MKT_NOTIFICATION])
registerCRUD(admin, '/NotificationFlow', 'NotificationFlow', FRM_NOTIFICATION_FLOW, [MKT_NOTIFICATION_FLOW])
#mony email and sms 2018-05-16
registerCRUD(admin, '/NotificationGateway', 'NotificationGateway',FRM_NOTIFICATION_GATEWAY, [MKT_NOTIFICATION_GATEWAY])
registerCRUD(admin, '/NotificationTemplate', 'NotificationTemplate',FRM_NOTIFICATION_TEMPLATE, [MKT_NOTIFICATION_TEMPLATE])
registerCRUD(admin, '/NotificationExec', 'NotificationExec',FRM_NOTIFICATION_EXEC, [MKT_NOTIFICATION_EXEC])
#end


# # Example call
# @app.route("/Morakot/Push")
# def publish():
# 	# mktnotification.setPushNotify()
# 	mktnotification.setClearNotify()
# 	return "OK"

# @app.route('/Morakot/SSE')
# def page():
#     debug_template = """
#     <!DOCTYPE html>
#     <html>

#         <head>
#             <script type="text/javascript" src="//code.jquery.com/jquery-1.8.0.min.js"></script>
#             <script type="text/javascript">
#                 $(document).ready(
#                         function() {
#                             sse = new EventSource('/Morakot/Stream');
#                             sse.onmessage = function(e) {
#                                 console.log('A message has arrived!');
#                                 var strdata = JSON.stringify(eval('('+e.data+')'));
#                                 var data = JSON.parse(strdata);
#                                 $('#output').append('<li>'+strdata+'</li>');

                            	
#                             }

#                         })

#             </script>
#         </head>

#         <body>

#             <h2>Demo</h2>
#             <ul id="output">

#             </ul>

#         </body>

#     </html>
#     """
#     return(debug_template)

# SettingObj 				= mktsetting.getSetting()
# SettingNotify 			= True if SettingObj.Notification == "TRUE" else False
# if SettingNotify:
# 	SettingNotifyInterval	= int (SettingObj.NotificationInterval) if SettingObj.NotificationInterval else 0
# else:
# 	SettingNotifyInterval 	= int(SettingObj.TIME_OUT if SettingObj.TIME_OUT else 15)*60

SettingObj 		= mktsetting.getSetting()

@app.route('/Morakot/Stream')
@app.route('/Morakot/API/Stream')
@login_required
def routeStream():
	try:
		"""
			Improve interval stream
			last update : 03 Mar 2017
			update by 	: Sovankiry Rim

		"""
		Dic 			= {}
		SettingNotify 	= True if SettingObj.Notification == "TRUE" else False
		Interval 		= int (SettingObj.NotificationInterval) if SettingObj.NotificationInterval else 0
		Interval *= 1000
		if SettingNotify:
			Dic.update(mktnotification.setPushNotify())
		else:
			# Multiply by 1000 to conver to milisecond
			Interval= (int(SettingObj.TIME_OUT if SettingObj.TIME_OUT else 15)*60) *1000

		# Call Check session log-out
		Dic.update(sessionStreamLogOut())

		if "API" in request.url or checkContentType()=="json":
			Session = False
			if Dic.get("Session","") == "True":
				Session = True
			# Stream user data here
			# Host = request.url.split('/Morakot')[0]
			# url  = "%s/Morakot/ViewUserLocation/"%(Host)
			# headers = {
			# 	'authorizationkey': getToken(),
			# 	'content-type': "application/json",
			# 	'accept': "application/json"
			# 	}
			# response = requests.request("GET", url, headers=headers)
			# data = response.json()
			Dic = {
					"count"			:	int(Dic.get("Count",0)),
					"check"			:	Dic.get("Check",""),
					"mute"			:	Dic.get("Mute",""),
					"session"		:	Session,
					'set_request'	:	Interval,
					'authorize'		:	Dic.get('Authorize'),
					'unauthorize'	:	Dic.get('Unauthorize'),
					'inbox'			:	Dic.get('Inbox')
					# 'map'	:{
					# 	"view_user_location"		:data,
					# 	"view_user_location_history":GetAllUserHistory()
					# }
				}
			return jsonify(data=Dic)

		return Response(mktnotification.event_stream(Dic, Interval),mimetype='text/event-stream')
	except Exception as e:
		raise
	else:
		pass
	finally:
		pass
# This is used to pass user location history by stream request
def GetAllUserHistory():
	UserList = []
	UserHistDict = {}
	Host 	= request.url.split('/Morakot')[0]
	url  	= "%s/Morakot/FindUserLocationHistory/"%(Host)
	headers = {
				'authorizationkey': getToken(),
				'content-type': "application/json",
				'accept'	  : "application/json"
				}				
	UserHistoryObj = db.session.query(MKT_USER_LOCATION_TRACKER.UserID).distinct(MKT_USER_LOCATION_TRACKER.UserID).all()
	if UserHistoryObj:
		for user in UserHistoryObj:
			UserList.append(user.UserID)
	if UserList:
		for user in UserList:
			querystring = {"ID":user}
			response = requests.request("GET", url, headers=headers,params=querystring)
			data = response.json()
			UserKey = ''.join(e for e in user if e.isalnum())
			UserKey = UserKey.lower()	
			UserHistDict.update({UserKey:data})
	return UserHistDict
'''
@app.route('/Morakot/NumberOfNotification', methods=['GET'])
@login_required
def getNumberOfNotification():

	Count 		= '0'
	Check 		= ''
	Session 	= 'False'
	if 'getLogInID' in session:

		DefaultBranch 	= mktuser.getCurrentBranch()
		ObjUser 		= mktuser.getUser()
		CurrentUser 	= ObjUser.ID
		MuteNotification= "Y" if ObjUser.Notification == None or ObjUser.Notification == "" else ObjUser.Notification
		getNow 			= datetime.now()
		TimeOut 		= int(mktsetting.getSetting().TIME_OUT if mktsetting.getSetting().TIME_OUT else 15)
		PlusExpireTime 	= getNow - timedelta(minutes=TimeOut)
		LoginUserObj 	= MKT_LOGIN_USER.query.filter(MKT_LOGIN_USER.LastTimeActivity <=  PlusExpireTime).\
										filter(MKT_LOGIN_USER.UserID==CurrentUser).all()
		if LoginUserObj:

			session.clear()
			flash("Session time-out.")
			Session 	= 'False'
		else:
			Session 	= 'True'
			Check 			= 'New'
			Notification 	= MKT_NOTIFICATION.query.\
							filter(MKT_NOTIFICATION.Branch==DefaultBranch).\
							filter(MKT_NOTIFICATION.Inputter!=CurrentUser)
			Count = 0
			for row in Notification:
				#if user read already doesn't count
				if not CurrentUser in row.Read.split():
					Count += 1
			Count = str(Count)
			if 'Notification' in session:
				if Count == session['Notification']:
					Check = 'Old'
			session['Notification']=Count

	return jsonify(Session=Session,Count=Count,Check=Check,MuteNotification=MuteNotification)
'''

@app.route('/Morakot/NotificationMessageConfig/<getID>', methods=['GET'])
@app.route('/Morakot/API/NotificationMessageConfig/<getID>', methods=['GET'])
@login_required
def routeNotificationMessageConfig(getID=''):
	CurrentUser 	= mktuser.getUser().ID
	if getID:
		if CurrentUser:
			QueryObj = MKT_USER.query.\
						filter(MKT_USER.ID==CurrentUser).all()
			try:
				if QueryObj:
					for row in QueryObj:
						#update which user read
						if getID == "True":
							row.Notification = "Y"
							db.session.add(row)
						else:
							row.Notification = "N"
							db.session.add(row)
					db.session.commit()
					db.session.close()
					return "True"
			except Exception:
				db.session.rollback()
				db.session.close()
				return "False"
# When click one by one
@app.route('/Morakot/NotificationMessageRead/<getID>', methods=['GET'])
@app.route('/Morakot/API/NotificationMessageRead/<getID>', methods=['GET'])
@login_required
def routeNotificationMessageRead(getID=''):
	CurrentUser 	= mktuser.getUser().ID
	try:
		if getID:
			if CurrentUser:
				QueryObj = MKT_NOTIFICATION.query.\
							filter(MKT_NOTIFICATION.ID==getID).all()
				if QueryObj:
					for row in QueryObj:
						ReadDetail ='' if  row.ReadDetail == None else str(row.ReadDetail)
						#update which user read
						if not CurrentUser in ReadDetail.split():
							row.ReadDetail = '%s %s'%(ReadDetail,CurrentUser)
							db.session.add(row)
					db.session.commit()
					db.session.close()
					return "True"
	except Exception, e:
		db.session.rollback()
		db.session.close()
		return "False"

# When click box update all
@app.route('/Morakot/NotificationMessageUpdateCount', methods=['GET'])
@app.route('/Morakot/API/NotificationMessageUpdateCount', methods=['GET'])
@login_required
def routeNotificationMessageUpdateCount(getID=''):
	try:
		mktnotification.setReadNotify()
		return ""
	except Exception as e:
		raise


@app.route('/Morakot/NotificationMessageMore', methods=['GET'])
@app.route('/Morakot/API/NotificationMessageMore', methods=['GET'])
@login_required
@checkLogOutSession
@checkLogOutTime
def getNotificationMessageMore():
	Notification 	= []
	PerPage      	= int(request.args.get("limit",15))
	Page         	= int(request.args.get("offset",1))
	EventCode 		= mktnotification.getEventCode()
	DefaultBranch 	= mktuser.getCurrentBranch()
	CurrentUser 	= mktuser.getUser().ID
	UserNotification= mktuser.getUser().Notification
	QueryObj 		= db.session.query(MKT_NOTIFICATION.GlobalID,
										MKT_NOTIFICATION.Inputter,
										MKT_NOTIFICATION.Branch,
										MKT_NOTIFICATION.Createdon,
										MKT_NOTIFICATION.ID,
										MKT_NOTIFICATION.Title,
										MKT_NOTIFICATION.Path,
										MKT_NOTIFICATION.Description,
										MKT_NOTIFICATION.ReadDetail,
										MKT_USER.ProfilePicture,
										MKT_USER.DisplayName).\
					join(MKT_USER,MKT_USER.ID==MKT_NOTIFICATION.Inputter).\
					filter(MKT_NOTIFICATION.Branch==DefaultBranch).\
					order_by(MKT_NOTIFICATION.Createdon.desc())

	if "API" in request.url:
		NotificationList = []
		NotificationDict = {}		
		TotalRecord = 	QueryObj.count()
		TotalPage 	= 	(TotalRecord/PerPage)
		if TotalRecord%PerPage != 0 :
			TotalPage 	= 	(TotalRecord/PerPage)+1
		if Page <= 0 :
			Page = 1
		if Page > TotalPage:
			Page = TotalPage
		Title = ""
		NewQueryObj = QueryObj.limit(PerPage).offset((Page - 1) * PerPage).all()
		for row in NewQueryObj:

			ProfilePicture  = row.ProfilePicture
			if ProfilePicture is None:
				ProfilePicture = ""
			DisplayName 	= row.DisplayName
			Description 	= EventCode[row.Description]
			URL = "/%s/?ID=%s"%(row.Path,row.GlobalID)

			
			NotificationList.append({
						"title":row.Title,

						"data":[{
							"profile":str(ProfilePicture),
							"record_id":row.GlobalID,
							"description":Description,
							"display_name":DisplayName,
							"createdon":row.Createdon,
							"url":URL,
							"read_url":"/NotificationMessageRead/"+row.GlobalID}]
				})


		#Group by data of notification
		TempTitle = ""
		NotificationResule = []
		Length = -1
		for row in NotificationList:
			Length += 1
			Value = row.get("data")
			Title = row.get("title")
			if TempTitle != Title:
				if str(len(NotificationList)-1)==str(Length):
					NotificationDict.update({
								Title:NotificationDict.get(Title,[])+Value
							})
					for key,value in NotificationDict.items():
						NotificationResule.append({
							"title":key,
							"data":value
							})
				else:	
					if NotificationDict:
						NotificationDict.update({
								Title:NotificationDict.get(Title,[])+Value
							})
						for key,value in NotificationDict.items():
							NotificationResule.append({
								"title":key,
								"data":value
								})
						NotificationDict = 	{}
						TempTitle 		 =	''
					else:
						NotificationDict.update({
								Title:Value,
							})
						TempTitle = Title
			else:
				NotificationDict.update({
						Title:NotificationDict.get(Title,[])+Value,
						})	
				if str(len(NotificationList)-1)==str(Length):
					for key,value in NotificationDict.items():
						NotificationResule.append({
							"title":key,
							"data":value
							})
		#End group by notification
			
		return jsonify(data=NotificationResule,type='List',header="Notification" , message={"message":[""]},total_page=TotalPage,total_record=TotalRecord,current_page=Page),StatusCodes.ok()

	return render_template('notification/more.html',
							UserNotification=UserNotification,
							QueryObj=QueryObj.limit(3000),
							EventCode=EventCode)

# Notification view for mobile
@app.route('/Morakot/NotificationMessageMobile', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNotificationMessageMobile():
	Notification=[]
	EventCode 		= mktnotification.getEventCode()
	DefaultBranch 	= mktuser.getCurrentBranch()
	CurrentUser 	= mktuser.getUser().ID
	UserNotification= mktuser.getUser().Notification
	QueryObj 		= db.session.query(MKT_NOTIFICATION.GlobalID,
										MKT_NOTIFICATION.Inputter,
										MKT_NOTIFICATION.Branch,
										MKT_NOTIFICATION.Createdon,
										MKT_NOTIFICATION.ID,
										MKT_NOTIFICATION.Title,
										MKT_NOTIFICATION.Path,
										MKT_NOTIFICATION.Description,
										MKT_NOTIFICATION.ReadDetail,
										MKT_USER.ProfilePicture,
										MKT_USER.DisplayName).\
					join(MKT_USER,MKT_USER.ID==MKT_NOTIFICATION.Inputter).\
					filter(MKT_NOTIFICATION.Branch==DefaultBranch).\
					order_by(MKT_NOTIFICATION.Createdon.desc()).limit(50)
	return render_template('notification/notificationMobile.html',
							UserNotification=UserNotification,
							QueryObj=QueryObj,
							EventCode=EventCode)

@app.route('/Morakot/NotificationMessageBox', methods=['GET'])
@app.route('/Morakot/API/NotificationMessageBox', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNotificationMessageBox():
	SettingObj 		= mktsetting.getSetting()
	SettingNotify 	= True if SettingObj.Notification == "TRUE" else False

	EventCode 		= mktnotification.getEventCode()
	ObjUser 		= mktuser.getUser()
	CurrentUser 	= ObjUser.ID
	Notification 	= mktnotification.getNotifyAccess(ExcludeRead=False)
	if Notification:
		Notification=Notification.order_by(MKT_NOTIFICATION.Createdon.desc()).limit(70).all()
	if "API" in request.url:
		NotificationList = []
		for row in Notification:
			ProfilePicture = mktreport.VLOOKUP(['MKT_USER','ID',row.Inputter,'ProfilePicture']).strip()
			DisplayName 	= mktreport.VLOOKUP(['MKT_USER','ID',row.Inputter,'DisplayName'])
			Description 	= EventCode[row.Description]
			URL = "/%s/?ID=%s"%(row.Path,row.GlobalID)

			if  Description == "Direct":
				Description = row.Message
			NotificationList.append({
						"profile":ProfilePicture,
						"title":row.Title,
						"record_id":row.GlobalID,
						"description":Description,
						"display_name":DisplayName,
						"createdon":row.Createdon,
						"url":URL,
						"read_url":"/NotificationMessageRead/"+row.GlobalID
				})
		return jsonify(data=NotificationList , message={"message":[""]}),StatusCodes.ok()
		

	return render_template('notification/notification.html',
							VLOOKUP=mktreport.VLOOKUP,
							Notification=Notification,
							EventCode=EventCode,
							CurrentUser=CurrentUser)


# def getNotification


def getNotification(Code='' , url = ''):
	PerPage      			= int(request.args.get("limit",15))
	Page         			= int(request.args.get("offset",1))
	#Pagination for first loop (gorup_by date)
	FirstIndextPage 		= int(request.args.get("offset",1))
	ModuleName 				= request.args.get('name','')
	DateSearch 				= request.args.get('date','')
	EventCode 				= mktnotification.getEventCode()
	DefaultBranch 			= mktuser.getCurrentBranch()
	CurrentUser 			= mktuser.getUser().ID
	UserNotificationMode 	= 'Y'
	UserNotification		= mktuser.getUser().Notification
	HideNotification 		= mktuser.getUser().HideNotification.split(',')

	Today 			 		= datetime.now()
	Yesterday 		 		= Today - timedelta(days=1)
	if UserNotification:
		UserNotificationMode = UserNotification	
	QueryObj 		= db.session.query(MKT_NOTIFICATION.GlobalID,
										MKT_NOTIFICATION.AppName,
										MKT_NOTIFICATION.Clear,
										MKT_NOTIFICATION.Inputter,
										MKT_NOTIFICATION.Branch,
										MKT_NOTIFICATION.Createdon,
										MKT_NOTIFICATION.ID,
										MKT_NOTIFICATION.Title,
										MKT_NOTIFICATION.Path,
										MKT_NOTIFICATION.Description,
										MKT_NOTIFICATION.ReadDetail,
										MKT_NOTIFICATION.Message,
										MKT_USER.ProfilePicture,
										MKT_USER.DisplayName,
										MKT_USER.HideNotification).\
					join(MKT_USER,MKT_USER.ID==MKT_NOTIFICATION.Inputter).\
					filter(MKT_NOTIFICATION.Branch==DefaultBranch,
						   MKT_NOTIFICATION.Description.in_(Code)
						  )
	if ModuleName and DateSearch:
		if DateSearch == 'today':
			DateSearch = str(Today.date())
		elif DateSearch == 'yesterday':
			DateSearch = str(Yesterday.date())

		QueryObj 	= QueryObj.filter(MKT_NOTIFICATION.AppName==ModuleName ,
									MKT_NOTIFICATION.Createdon.like(DateSearch+'%') 
									)
	TotalRecord = 	QueryObj.count()
	TotalPage 	= 	(TotalRecord/PerPage)
	if TotalRecord%PerPage != 0 :
		TotalPage 	= 	(TotalRecord/PerPage)+1
	if Page <= 0 :
		Page = 1
	if Page > TotalPage:
		Page = TotalPage
	
	if PerPage>TotalRecord:
		PerPage = TotalRecord
	Data = {
			'notification_update_count'	:	'/NotificationMessageUpdateCount',
			'message'					:	{'message':['']},
			'current_page'				:	1,
			'type'						:	'Notification',
			'total_page'				:	TotalPage,
			'total_record'				:	TotalRecord,
			'current_page'				:	Page,
			'per_page'					:	PerPage,
			'user_notification_mode'	:	UserNotificationMode,
			'notification_confi' 		:	'/NotificationMessageConfig'
			}
	NotificationList = []
	DataDictAllDay   = {}
	ClearURLByDate 	 = {}
	if ModuleName and DateSearch:
		NewQueryObject = 	QueryObj.order_by(MKT_NOTIFICATION.Createdon.desc()).\
									limit(PerPage).offset((Page - 1) * PerPage).all()
		Title 				= ''
		NotificationList 	= []
		DataMorning 		= []
		DataEverning 		= []
		for row in NewQueryObject:
			if row.Path not in HideNotification:
				CreateDate 		= datetime.strptime(str(row.Createdon),'%Y-%m-%d %H:%M:%S')
				CreateDate = datetime.strptime(str(row.Createdon),'%Y-%m-%d %H:%M:%S')
				CheckClear = str(row.Clear).split()
				ClearURLByDate.update({str(CreateDate.date()):ClearURLByDate.get(str(CreateDate.date()) , []) + [row.ID]})
				if CurrentUser not in CheckClear:
					Title 			= row.Title	
					Read 			= False
					if row.ReadDetail:
						Read = chkRead(Obj=row.ReadDetail,Value=CurrentUser)

					ProfilePicture  = row.ProfilePicture
					if ProfilePicture is None:
						ProfilePicture = ""

					DisplayName 	= row.DisplayName
					Description 	= EventCode[row.Description]
					URL = "/%s/?ID=%s"%(row.Path,row.GlobalID)	
					Duration , OriginalDateTime = getDuration(StartDate=CreateDate,EndDate=Today)
					
					NotificationDict = {
											'module':row.AppName,
											'notification_id':row.ID,
											"profile":str(ProfilePicture),
											"record_id":row.GlobalID,
											"description":Description,
											"display_name":DisplayName,
											"createdon":row.Createdon,
											"url":URL,
											'read':Read,
											'clear_url':'/ClearNotification/'+str([row.ID]),
											'duration':Duration,
											'original_date':OriginalDateTime,
											"read_url":"/NotificationMessageRead/"+str(row.ID)
										}

					if CreateDate.hour>12:
						DataEverning.append(NotificationDict)
					else:
						DataMorning.append(NotificationDict)

		Data.update({'title':'',
					 'data':[{
						'data':[
								{'title':'Everning','data':DataEverning , 'count':len(DataEverning)},
								{'title':'Morning','data':DataMorning , 'count':len(DataMorning)}
								],
						'title':Title,
						'count':2,
						'clear_url':'/ClearNotification/'+str(ClearURLByDate.get(DateSearch,''))
					}]})
		return Data
		# return Data
	else:
		NewQueryObject = 	QueryObj.order_by(MKT_NOTIFICATION.Createdon.desc()).limit(3000).all()
		for row in NewQueryObject:
			if row.Path not in HideNotification:
				CreateDate = datetime.strptime(str(row.Createdon),'%Y-%m-%d %H:%M:%S')
				CheckClear = str(row.Clear).split()
				type_url 	= 'Custom' if row.AppName == 'Custom' else 'Form'
				ClearURLByDate.update({CreateDate.date():ClearURLByDate.get(CreateDate.date() , []) + [row.ID]})
				if CurrentUser not in CheckClear:
					Read 			= False
					if row.ReadDetail:
						Read = chkRead(Obj=row.ReadDetail,Value=CurrentUser)

					ProfilePicture  = row.ProfilePicture
					if ProfilePicture is None:
						ProfilePicture = ""
					Message = row.Message if not row.Message == None else ''
					DisplayName 	= row.DisplayName
					Description 	= EventCode[row.Description]
					if not Description:
						Description = Message
					URL = "/%s/?ID=%s"%(row.Path,row.GlobalID)	
					Duration,OriginalDateTime  = getDuration(StartDate=CreateDate,EndDate=Today)
					NotificationDict = {
									"title":row.Title,
									'url':url,							
									"data":[{
										'type_url': type_url,
										'module':row.AppName,
										'notification_id':row.ID,
										"profile":str(ProfilePicture),
										"record_id":row.GlobalID,
										"description":Description,
										"display_name":DisplayName,
										"createdon":row.Createdon,
										"url":URL,
										'clear_url':'/ClearNotification/'+str([row.ID]),
										'read':Read,
										'duration':Duration,
										'original_date':OriginalDateTime,
										"read_url":"/NotificationMessageRead/"+str(row.ID)
										}]
									}		
					DataDictAllDay.update({
							CreateDate.date():DataDictAllDay.get(CreateDate.date() , []) + [NotificationDict]
						})
		
		if DataDictAllDay:
			for key,value in sorted(DataDictAllDay.items(),reverse=True):		
				Title = str(key)				
				if Today.date() == key:
					Title = 'Today'
				elif Yesterday.date() == key:
					Title = 'Yesterday'
				DataList = formatDataNotification( Data = value , day =str(key))
				if Title != 'Today' and Title != 'Yesterday':
					Title = mktdate.toDateShort(Date=str(key))
				NotificationList.append({
					'data':DataList,
					'title':Title,
					'count':len(value),
					'clear_url':'/ClearNotification/'+str(ClearURLByDate.get(key))
					})
		if checkContentType() == 'json' or 'API' in request.url:
			EndNotificationData = NotificationList	
			if NotificationList:    				
				if FirstIndextPage == 1:
					EndNotificationData = NotificationList[0:2]
				else:
					if len(NotificationList) <= FirstIndextPage:
						EndNotificationData = []
						FirstIndextPage 	=  len(NotificationList)
					else:
						EndNotificationData = [NotificationList[FirstIndextPage]]
				Data.update({
					'total_page':len(NotificationList),
					'current_page':FirstIndextPage
				})
		else:
			EndNotificationData = NotificationList
		Data.update({
			'data':EndNotificationData,
			'title':''
		})
		return Data


@app.route('/Morakot/NotificationUnauthorize', methods=['GET'])
@app.route('/Morakot/API/NotificationUnauthorize', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNotificationUnauthorize():
	EventCode 	= ['100','300','501','600']
	Data 		= {'header':'Unauthorize'}
	Data.update(getNotification(Code=EventCode,url='NotificationUnauthorize'))
	if checkContentType() == 'json' or 'API' in request.url:
		return jsonify(Data)
	
	return render_template('notification/notif.html',**Data)

@app.route('/Morakot/NotificationAuthorize', methods=['GET'])
@app.route('/Morakot/API/NotificationAuthorize', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNotificationAuthorize():
	EventCode 	= ['101','200','301','601','602']
	Data 		= {'header':'Authorize'}
	Data.update(getNotification(Code=EventCode,url='NotificationAuthorize'))
	if checkContentType() == 'json' or 'API' in request.url:
		return jsonify(Data)
	return render_template('notification/notif.html',**Data)


@app.route('/Morakot/NotificationInbox', methods=['GET'])
@app.route('/Morakot/API/NotificationInbox', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNotificationInbox():
	EventCode 	= ['Direct']
	Data 		= {'header':'Inbox'}
	Data.update(getNotification(Code=EventCode,url='NotificationInbox'))
	if checkContentType() == 'json' or 'API' in request.url:
		return jsonify(Data)
	return render_template('notification/notif.html',**Data)
	
@app.route('/Morakot/ShowNotifi', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def h():
	EventCode 	= ['101','200','301','601','602']
	Data 		= {'header':'Authorize'}
	Data.update(getNotification(Code=EventCode,url='NotificationAuthorize'))
	return render_template('notification/mo.html',**Data)


@app.route('/Morakot/ClearNotification/<clear>', methods=['GET'])
@app.route('/Morakot/API/ClearNotification/<clear>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def setClearNotification(clear):
	try:
		Data =ast.literal_eval(clear)
		for row in Data:
			Ob = MKT_NOTIFICATION.query.get(row)
			Clear = Ob.Clear.split() if Ob.Clear else ''
			if Clear and mktuser.getUser().ID not in Clear:
				Ob.Clear += ' '+mktuser.getUser().ID
			else:
				Ob.Clear  = mktuser.getUser().ID
		db.session.commit()
		return jsonify(data=[],message={'message':['']}),200
		
	except Exception as e:
		print e
		return jsonify(data=[],message={'message':[{'identifier':str(e)}]}),500
	finally:
		db.session.close()

def formatDataNotification(Data = [] , day = ''):
	DataDict  	= {}
	DataList  	= []
	OrderModule = []
	Url 		= ''
	for row in Data:
		Url 	= row.get('url')
		if row.get('title') not in OrderModule:
			OrderModule.append(row.get('title'))
		DataDict.update({
				row.get('title'):DataDict.get(row.get('title') , []) + row.get('data')
			})
	for row in OrderModule:
		value 		= DataDict.get(row)
		NewValue 	= value
		if len(value) > 5:
			NewValue = value[0:5]
		Name  = NewValue[0].get('module')
		url   = '/%s?name=%s&date=%s'%(Url,Name,day)
		DataList.append({
			'title' :row,
			'data'  :NewValue,
			'count' :len(value),
			'module':Name,
			'url':url
		})
	return DataList

def chkRead(Obj='',Value=''):
	if Value in Obj.split():
		return True
	return False

def getDuration(StartDate = '' , EndDate = ''):
	StartDateHour 	= StartDate.hour
	EndDateHour 	= EndDate.hour
	Hour 			= str(StartDateHour) + ":" + str(StartDate.minute) +" AM"
	if StartDateHour>12:
		Hour = 	str(StartDateHour/12)+":" + str(StartDate.minute) +" PM"
	OriginalDateTime = str(mktdate.toDateShort(Date=str(StartDate.date()))) + " at %s"%str(Hour)

	# print "P==>",OriginalDateTime
	Date 			= EndDate - StartDate
	days, seconds 	= Date.days, Date.seconds
	hours 			= days * 24 + seconds // 3600
	minutes 		= (seconds % 3600) // 60 
	Result 			= 'just now'


	if minutes>0:
		Result 	= str(minutes)+' minutes ago'
	if hours>0:
		Result  = str(hours)+' hours ago'
		# if StartDateHour<12 and EndDateHour>12:
		# 	Result = '1 day'
	if days>0 and days < 365 :
		Result 	= str(days)+' days ago'
		if days>30:
			Result = OriginalDateTime
		
		# if StartDateHour<12 and EndDateHour>12:
		# 	Result = '1 day'
	# elif days>=365:
	# 	Result 	= str(days%365)+'years ago'

	return Result,OriginalDateTime

@app.route('/Morakot/API/RecordLog',methods=['GET','POST'])
@app.route('/Morakot/RecordLog',methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def getRecordLog():
	DictConfNotification = mktnotification.getConfigNotification()
	FormObj 	 =	db.session.query(MKT_FORM.URL).\
										filter(~MKT_FORM.URL.contains('/'))

	# this block is add module title for unregister module 
	if FormObj:
		for Row in FormObj:
			Title = Row.URL
			if Title not in DictConfNotification.keys():
				DictConfNotification.update({Title:Title})

	if request.method == 'GET':
		Branch 	=	mktuser.getCurrentBranch()
		Date 	= 	mktdate.getDateISO()
		return render_template('notification/log.html',Branch=Branch,Date=Date,Module =DictConfNotification)
	else:
		UserID 				= 	request.form['UserID'] 
		GlobalID 			= 	request.form['GlobalID']
		UnusedID 			= 	request.form['UnusedID'] 
		Module 				= 	request.form['Module']
		Date 				= 	request.form['Date']
		Branch 				= 	request.form['Branch']

		NotificationDict 	= 	{}
		NotificationList 	= 	[]
		MessageNotification = 	mktnotification.getEventCode()
		QueryObj 			= 	db.session.query(MKT_NOTIFICATION.Branch,
												 MKT_NOTIFICATION.Status,
												 MKT_NOTIFICATION.Inputter,
												 MKT_NOTIFICATION.Createdon,
												 MKT_NOTIFICATION.GlobalID,
												 MKT_NOTIFICATION.Title,
												 MKT_NOTIFICATION.Description)
				 							
		if UserID:
			UserList 		= 	UserID.split()
			QueryObj 		= 	QueryObj.filter(MKT_NOTIFICATION.Inputter.in_(UserList))

		if GlobalID:
			QueryObj 		= 	QueryObj.filter(MKT_NOTIFICATION.GlobalID==GlobalID)

		if Module:
			QueryObj 		= 	QueryObj.filter(MKT_NOTIFICATION.Title==Module)
												
		if Branch:
			ListBranch   	=	Branch.split()
			QueryObj 		= 	QueryObj.filter(MKT_NOTIFICATION.Branch.in_(ListBranch))

		if Date:
			DateList 		= 	Date.split()
			if len(DateList)==2:
				QueryObj 	= 	QueryObj.filter(func.split_part(MKT_NOTIFICATION.Createdon," ",1).label('Createdon')>=DateList[0],
												func.split_part(MKT_NOTIFICATION.Createdon," ",1).label('Createdon')<=DateList[1])
			else:
				QueryObj 	= 	QueryObj.filter(func.split_part(MKT_NOTIFICATION.Createdon," ",1).label('Createdon').in_(DateList))
		
		if UnusedID=='Y':
			TempObj 		= 	db.session.query(MKT_NOTIFICATION.GlobalID).\
													group_by(MKT_NOTIFICATION.GlobalID).having(func.count("GlobalID")==1).subquery()

			QueryObj 		= 	QueryObj.filter(MKT_NOTIFICATION.GlobalID.in_(TempObj),
												MKT_NOTIFICATION.Description=='703')
		# limit and order
		if QueryObj.first():
			QueryObj = QueryObj.order_by(MKT_NOTIFICATION.Title,MKT_NOTIFICATION.Createdon).\
								limit(2000)

		for Notification in QueryObj:
			NotificationDict	= 	{
										'1':Notification.Branch,
										'2':Notification.Status,
										'3':Notification.Inputter,
										'4':Notification.Createdon,
										'5':Notification.GlobalID,
										'6':Notification.Title,
										'7':MessageNotification.get(Notification.Description)
									}
			NotificationList.append(NotificationDict)

		
		return render_template('notification/log.html',
								NotificationList	= NotificationList,
								UserID 				= str(UserID),
								Date				= str(Date),
								GlobalID 			= GlobalID,
								UnusedID 			= UnusedID,
								Branch 				= Branch,
								Module 				= DictConfNotification,
								SelectedModule 		=  Module)

#mony email and sms 2018-05-16
@app.route('/Morakot/NotificationExecLog', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def NotificationExecLog():
	ID 	= 	request.args.get('ID') if 'ID' in request.args else '' #ID Notification execute
	NotiStatus = mktnotification.getNotificationLogStatus(ID)
	
	return render_template('notification/notification_logs.html',
							NotiStatus=NotiStatus)
#end
