from flask 						import flash,Markup,render_template_string, render_template
from app.mktcore.wtfimports import *
from .models import *
import time
from app.Role.models import MKT_ROLE
from app.Module.models import MKT_FORM
import app.tools.mktsetting 	as mktsetting
import app.tools.mktnotification as mktnotification
from app.tools.mktpredefinefunction import PRE_DEFINE
from app.tools.mktmail 			import MAIL
import app.tools.mktdate as mktdate
import app.tools.mkttool as mkttool
import app.tools.mktdb 	as mktdb
import app.tools.mktnotificationgateway as mktnotificationgateway
import app.mktcore.autoid 		as mktautoid
import app.tools.mktapirequest 		as api_request
from app.Customer.models import *
from app.User.models import *
import app.tools.mktmoney 			as mktmoney

NOTIFY_GATEWAY  = mktnotificationgateway.CLS_NOTIFICATION_GATEWAY()

def loadRole():
	return MKT_ROLE.query.order_by(MKT_ROLE.ID.asc())

# get all form in project
def loadForm():

	result = []
	ListTable = mktsetting.getListOfTable()
	if 'MKT_FORM' in ListTable:
		FormObj = MKT_FORM.query
		for row in FormObj:
			result.append((row.FormID, row.FormDesc))

		result.sort(key=lambda tup: tup[1])
		result.insert(0, ('','--None--'))
	return result
def loadCurrentDate():
	return 	mktdate.getDateISO()

def loadNotifyTool():
	return MKT_NOTIFICATION_TEMPLATE.query.filter(MKT_NOTIFICATION_TEMPLATE.Enable=="Y")

def custom_NotifyDate(form,field):

	NotifyDate = request.form['NotifyDate']

	if NotifyDate:
		# clear out processing errors
		field.errors[:] = []

		CheckFormatDate = mktdate.isDateISO(NotifyDate)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

	else:
		# clear out processing errors
		field.errors[:] = []

		# raise ValidationError("This field is required.")


#class branch form
class FRM_NOTIFICATION(exform):

	GlobalID = TextField(requiredlabel("GlobalID", "*"), [validators.Required()])
	Description = TextField(requiredlabel("Description", "*"), [validators.Required()])
	Title = TextField(requiredlabel("Title", "*"), [validators.Required()])
	Path = TextField(requiredlabel("Path", "*"), [validators.Required()])
	AppName = TextField(requiredlabel("AppName", "*"), [validators.Required()])
	Read  = TextField("Read")
	ReadDetail  = TextField("ReadDetail")

class FRM_NOTIFICATION_FLOW(exform):

	Role = QuerySelectField(requiredlabel('Role','*'),
							query_factory=loadRole,
							validators=[validators.Required()],
							get_label=lambda a: a.ID + " - " + a.Description,
							)
	Form = SelectField(requiredlabel('Form', '*'),
							choices = loadForm,
							validators = [validators.Required()])
	Notify= TextField(requiredlabel("Notify", "*"), [validators.Required()])

#mony email and sms 2018-05-16
class FRM_NOTIFICATION_GATEWAY(exform):
	Subject				=	TextField(requiredlabel("Subject","*"),[validators.Required()],default="")
	Message 			= 	TextAreaField(requiredlabel("Message","*"),[validators.Required()],default="")
	To 					=	TextField(requiredlabel("To","*"),[validators.Required()],default="")
	NotifyType			=	SelectField(requiredlabel("Send By","*"),[validators.Required()],
								choices=[('1', 'SMS'),('2', 'Email')],
							 	coerce=str,
							 	default=1)
	NotifyStatus		=	SelectField(requiredlabel("Status","*"),[validators.Required()],
								choices=[('1','Queue'),('2', 'Success'),('3', 'Fail'),('4','Retry')],
							 	coerce=str,
							 	default=1)
	
	Date				=	DateField(requiredlabel(getLanguage("Date"), "*"), [validators.Required()], default=loadCurrentDate)
	Time 				= 	TextField("Universal Time",default="")
	Note 				=	TextAreaField("Note")
	ResultDateTime		= 	TextField("Fail/Success Date Time")
	Error 				=	TextAreaField("Message Error")
	
	
	def validate_To(form,field):
		To 			= form.To.data
		NotifyType 	= form.NotifyType.data
		if int(NotifyType) == 1:
			# Phone validation
			if To:
				if len(To) < 3:
					raise ValidationError("Invalid mobile phone number. Ex: 012xxxxxx")
				CheckMobileNumber, Msg = mkttool.isMobile(To)
				if not CheckMobileNumber:
					raise ValidationError(Msg)
		else:
			Chk, Msg = mkttool.checkEmail(To)
			if not Chk:
				raise ValidationError(Msg)

	def validate_NotifyStatus(form,field):
		NotifyStatus = form.NotifyStatus.data
		if int(NotifyStatus)==2:
			raise ValidationError("Could not choose success")

	def validate_Time(form,field):
		Msg = mktdate.validateUTC(form.Time.data,AllowBlank=True)
		if not Msg[0]:
			raise ValidationError(Msg[1])

	def validate_Date(form,field):
		Date 		=	form.Date.data
		CurrDate 	=	mktdate.getDateISO()# current date
		if Date< CurrDate:
			raise ValidationError("Date not allow to choose pre-date.")

	@staticmethod
	def setDisable():
		ID 					= request.form["ID"] if request.method == "POST" else g.formID
		NotifyGatewayObj	= MKT_NOTIFICATION_GATEWAY.query.get(ID)
		ListDisable 		= []
		if not NotifyGatewayObj:
			NotifyGatewayINAUObj	= MKT_NOTIFICATION_GATEWAY_INAU.query.get(ID)
			if not NotifyGatewayINAUObj:
				ListDisable.append(('NotifyStatus'))

		ListDisable.append(('ResultDateTime'))
		return ListDisable

	@staticmethod
	def formReadOnly():
		ID 					= request.form["ID"] if request.method == "POST" else g.formID
		NotifyGatewayObj	= MKT_NOTIFICATION_GATEWAY.query.get(ID)
		Result 				= False
		if NotifyGatewayObj:
			NotifyStatus 	= 	NotifyGatewayObj.NotifyStatus
			if int(NotifyStatus)==2: # 1 success
				Result = "AUTH"
		return Result

class FRM_NOTIFICATION_TEMPLATE(exform):
	Description 		= 	TextField(requiredlabel("Description","*"),[validators.Required()],default="")
	Tool 				= 	TextField(requiredlabel("Tool","*"),[validators.Required()],default="")
	ToolParam 			= 	TextAreaField("Tool Param")
	NotifyType			=	SelectField(requiredlabel("Send By","*"),[validators.Required()],
								choices=[('1', 'SMS'),('2', 'Email')],
							 	coerce=str,
							 	default='1')
	Subject				=	TextField(requiredlabel("Subject","*"),[validators.Required()],default="")
	Message 			= 	TextAreaField(requiredlabel("Message","*"),[validators.Required()],default="")
	NotifyDate			=	DateField("Notify Date",
								format='%Y-%m-%d',
								default="",
								validators=[custom_NotifyDate])
	NotifyTime 			= 	TextField("Notify Time")
	Note 				=	TextAreaField("Note")
	Enable				=	SelectField(requiredlabel("Enable","*"),[validators.Required()],
								choices=[('Y', 'Yes'),('N', 'No')],
							 	coerce=str,
							 	default='Y')

class FRM_NOTIFICATION_EXEC(exform):
	Template 			= 	QuerySelectField(requiredlabel("Notify Template","*"),
							query_factory=loadNotifyTool,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()]
						)
	NotifyDate			=	DateField("Notify Date",
								format='%Y-%m-%d',
								default=mktdate.getDateISO(),
								validators=[custom_NotifyDate])
	NotifyTime 			= 	TextField("Notify Time")
	Note 				=	TextAreaField("Note")

	NotifyIFrame = MKTIframe("Notification",dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, description='1-Notification List')

	@staticmethod
	def urlParam():
		ID 			= request.form["ID"] if request.method == "POST" else g.formID 
		dicParam	= [{"IframeName":"NotifyIFrame", "iframeUrl":"/Morakot/NotifyExecList/",'Resource' : 'Status'}]
		return dicParam	

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def redirectAfterInsert():
		ID 			= request.form['ID']
		NumOfAuth 	= g.getNAuthorize
		if int(NumOfAuth) == 0:
			Auth = NOTIFY_GATEWAY.executeNotify(ExecuteID=ID)
			if not Auth[0]:
				flash(msg_error + Auth[1])
		return "Morakot/NotificationExec/?ID=%s" % ID

	@staticmethod
	def redirectAuthorize():
		ID 			= g.formID
		Auth = NOTIFY_GATEWAY.executeNotify(ExecuteID=ID)
		if not Auth[0]:
			flash(msg_error + Auth[1])
		return "Morakot/NotificationExec/?ID=%s" % ID
#end

def executeNotify(**kwargs):
	try:
		Result 		= 	True,""
		ExecuteID 	= 	kwargs.get("ExecuteID")
		Resource	=	kwargs.get("Resource")
		TemplateID  = 	kwargs.get("TemplateID")
		NotifyDate 	= 	kwargs.get("NotifyDate","")
		NotifyTime 	= 	kwargs.get("NotifyTime","")

		if Resource == "INAU":
			TABLE 	= 	MKT_NOTIFICATION_EXEC_INAU
		else:
			TABLE 	= 	MKT_NOTIFICATION_EXEC

		ExecuteObj  = 	TABLE.query.get(ExecuteID)
		if ExecuteObj:
			TemplateID = ExecuteObj.Template
			NotifyDate = ExecuteObj.NotifyDate
			NotifyTime = ExecuteObj.NotifyTime

		if TemplateID:
			#1. find list of contact to insert
			#2. translate template
			#3. insert to notify gateway
			TemplateObj 	= MKT_NOTIFICATION_TEMPLATE.query.get(TemplateID)
			NotifyResult 	= getNotifyRecords(TemplateID=TemplateID)

			if NotifyResult[0]:	#True
				NotifyDict = NotifyResult[1]
				if NotifyDict:
					"""
					{
						"Recipients" 	:Recipients,
						"RecipientsData":RecipientsData,
						"CommonData"	:CommonData
					 }
				 	"""
				 	Recipients 		= NotifyDict.get("Recipients")
				 	RecipientsData 	= NotifyDict.get("RecipientsData")
				 	CommonData 		= NotifyDict.get("CommonData")
				 	References 		= NotifyDict.get("References","")
				 	# print "Reference ", References
				 	index = 0
				 	for recipient in Recipients:
				 		Recipient = getRecipientInfo(RecipientID=recipient)
				 		RecipientData = RecipientsData.get(recipient)

				 		AutoID 		= mktautoid.getAutoID("FRM_NOTIFICATION_GATEWAY")
						Subject = render_template_string(TemplateObj.Subject,
											Recipient=Recipient,
											RecipientData=RecipientData,
											CommonData=CommonData,
											formatMoney=formatMoney,
											formatNumber=mktmoney.formatNumber) 
						Message = render_template_string(TemplateObj.Message,
											Recipient=Recipient,
											RecipientData=RecipientData,
											CommonData=CommonData,
											formatMoney=formatMoney,
											formatNumber=mktmoney.formatNumber)    
						NotifyStatus = '1' #Queue
						NotifyType = TemplateObj.NotifyType
						Date = NotifyDate if NotifyDate else TemplateObj.NotifyDate
						Time = NotifyTime if NotifyTime else TemplateObj.NotifyTime
						ExecuteID = "%s" % ExecuteID
						Reference = ""
						if References:
							Reference = References[index]

						To 	 = getContact(NotifyType=NotifyType,RecipientID=recipient)
						
						PostData = {}
						PostData.update({"Subject": Subject,"Message": Message,"NotifyStatus":NotifyStatus,
										 "NotifyType": NotifyType,"Date":Date,"Time":Time,"ExecuteID":ExecuteID,
										 "Reference": Reference,
										 "To": To,
										 "ID": AutoID})
						
						insertNotifyGateway(data=PostData)
						db.session.commit()

						index = index + 1

			else: # False
				Result = False, NotifyResult[1]

		else:
			print "No template to execute ..."

		return Result

	except Exception, e:	
		return False, str(e)

def getNotifyParamDict(**kwargs):
	"""
	Notify Param Syntax:
		VariableName1=Value
		VariableName2=Value
		Value canbe anyting. Program need to split or anything by their own
	This Param like setting of that particular notify script
	Result:
		return Dict of Param name with value
	Example:
		>>>> getNotifyParam(Param='PRE_NOTIFY_DAY=2')
		>>>> {"PRE_NOTIFY_DAY": '2'}
	"""
	Result = {}
	Param = kwargs.get("Param")
	if Param:
		ParamList = Param.split("\n")
		for param in ParamList:
			VariableName = param.split("=")[0].strip()
			Value 		 = param.split("=")[1].strip()
			Result.update({VariableName: Value})

	return Result	

def getNotifyRecords(**kwargs):
	Result 			= True,{}
	TemplateID 		= kwargs.get("TemplateID")
	TemplateName   	= kwargs.get("TemplateName")
	TemplateParam 	= kwargs.get("TemplateParam")
	NotifyType 	 	= kwargs.get("NotifyType","")

	TemplateObj = MKT_NOTIFICATION_TEMPLATE.query.get(TemplateID)
	if TemplateObj:
		TemplateName = TemplateObj.Tool
		TemplateParam = TemplateObj.ToolParam
		NotifyType = TemplateObj.NotifyType
	# print TemplateName 
	# print TemplateParam
	try:
		ImportFile = "import app.NotificationScript.%s as mktnotifyscript" % TemplateName	
		exec(ImportFile)
	except Exception as e:
		#Result = False, str(e)			
		ExtendModuleObj = mktsetting.ExtendModule()
		LocalPath = ExtendModuleObj.getLocalPath()
		ImportFile = "import %s.NotificationScript.%s as mktnotifyscript" % (LocalPath,TemplateName)
		exec(ImportFile)

	try:			
		ParamDict = getNotifyParamDict(Param=TemplateParam)
		ParamDict.update({"NotifyType": NotifyType})
		ResultDict = mktnotifyscript.NOTIFY.getRecords(**ParamDict)
		# print "Result ", len(ResultDict.get("Recipients"))
		Result = True, ResultDict

	except Exception as e:
		Result = False, str(e)	
	else:
		pass
	finally:
		pass
			

	return Result	

def getRecipientInfo(**kwargs):
	Result 		= {"Mobile":"",
					"Email":"",
					"FirstNameEn":"",
					"LastNameEn":"",
					"FirstNameKh":"",
					"LastNameKh":""
				}
	RecipientID = kwargs.get("RecipientID")
	Obj = MKT_CUSTOMER.query.get(RecipientID)
	if Obj:
		Result.update({"Mobile": Obj.Mobile1})
		Result.update({"Email": Obj.Email})
		Result.update({"FirstNameEn": Obj.FirstNameEn})
		Result.update({"LastNameEn": Obj.LastNameEn})
		Result.update({"FirstNameKh": Obj.FirstNameKh})
		Result.update({"LastNameKh": Obj.LastNameKh})
	else:
		Obj = MKT_USER.query.get(RecipientID)
		if Obj:
			Result.update({"Mobile": Obj.Mobile1})
			Result.update({"Email": Obj.Email})
			Result.update({"FirstNameEn": Obj.DisplayName})
			Result.update({"LastNameEn": Obj.DisplayName})
			Result.update({"FirstNameKh": Obj.DisplayName})
			Result.update({"LastNameKh": Obj.DisplayName})

	return Result

def getContact(**kwargs):
	Result = ''
	NotifyType 		= kwargs.get("NotifyType")
	RecipientID    	= kwargs.get("RecipientID")
	RecInfo = getRecipientInfo(RecipientID=RecipientID)

	if NotifyType == '1':#sms
		Result = RecInfo.get("Mobile")
	elif NotifyType == '2':#email
		Result = RecInfo.get("Email")

	return Result

def insertNotifyGateway(**kwargs):
	try:		
		data 	= 	kwargs.get("data",{})	
		mktdb.insertTable(MKT_NOTIFICATION_GATEWAY,data)
	except Exception as e:
		pass

def formatMoney(Amount,Currency):
	return mktmoney.toMoney(float(Amount),mktmoney.getCurrencyObj(Currency))

@app.route('/Morakot/NotifyExecList/',methods=['GET'])
def getNotifyExecList():
	ID 	= 	request.args.get('ID') if 'ID' in request.args else ''
	GatewayObj = MKT_NOTIFICATION_GATEWAY.query.\
			filter(MKT_NOTIFICATION_GATEWAY.ExecuteID==ID).\
			order_by(MKT_NOTIFICATION_GATEWAY.ID.asc())
	return render_template('notification/notification_gateway_list.html',
							ID=ID,
							GatewayObj=GatewayObj)

@app.route("/Morakot/TestSend")
def testSend():
	NOTIFY_GATEWAY.setNotificationGateway()
	return "Success"
