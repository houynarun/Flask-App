from app.mktcore.wtfimports import *
from app.Customer.models 	import MKT_CUSTOMER
from .models 				import *
from .. 					import app, db
import time
from app.Currency.models 		import *
from app.AutoID.models		import MKT_AUTOID

import app.tools.user 		as mktuser
import app.tools.mktroute 	as mktroute
from app.tools.mktsetting 	import getAppSetting,getAccSetting
from app.LoanApplication.models 	import *
import app.tools.mktsetting 	as mktsetting

ExtendClass 			= 	mktsetting.ExtendModule()
CollateralDetalLink 	= 	ExtendClass.getUrlExtend(Module="CollateralDetail")

class FRM_COLLATERAL(exform):

	CustomerID 		= 	RemoteTextField(requiredlabel(getLanguage("Customer"), "*"), [validators.Required()])
	Description 	= 	TextAreaField(requiredlabel(getLanguage("Description"), "*"), [validators.Required(), validators.length(max=300)])
	if getAppSetting('ENABLE_LOS_FEATURE')=='Y':
		Currency 					= 	TextField('Currency',description='1-Total Collateral Value')
		PurchasePrice 				= 	TextField(getLanguage("Purchased Price"),description='1-Total Collateral Value')
		ValuationPrice 				= 	TextField('Valuation Price',description='1-Total Collateral Value')
		ForceSale 					= 	TextField('Force Sale Value',description='1-Total Collateral Value')

		def __init__(self, *args, **kwargs):
			super(FRM_COLLATERAL, self).__init__(*args, **kwargs)
			self.Currency.default=getAccSetting().BaseCurrency


	if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
		Active 		= 	SelectField("Active",
							choices=[('Y', 'Yes'),
									 ('N', 'No')],
							coerce=str
						)

	@staticmethod
	def setVisible():
		control_list=[]

		if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
			control_list += ["Active"]

  		return control_list

	
	@staticmethod
	def moneyField():
		if getAppSetting('ENABLE_LOS_FEATURE')=='Y':
			return [["ValuationPrice","Currency"],
					["ForceSale","Currency"],
					["PurchasePrice","Currency"],
					["MinCollateralValue","Currency"]]
		return []

	@staticmethod
	def IsAcceptOverride():
		Override 	= False
		Branch 		= mktuser.getCurrentBranch()
		Msg 		= ""
		ID 			= request.form['ID']
		Customer 	= request.form["CustomerID"]
		CustomerObj = MKT_CUSTOMER.query.get(Customer)
		
		if CustomerObj.Branch != Branch:
			Override 	= True
			Msg 		= "Customer <a href='javascript:void(0)' onClick=CustomClickView('Customer','Customer/?ID=%s')><u>%s</u></a> is from different Branch <b>%s</b>. " %(Customer, Customer, CustomerObj.Branch)

		Msg += " Do you want to procceed?"

		return Override, Msg

	@staticmethod
	def hotField():
		hotfield 		=[]
		fielddisplay 	= 	"$('#Description').text(data.CustomerName)"
		varname			=	"CustomerList:$('#CustomerID').val()"
		fun 			=	["CustomerID", varname, fielddisplay, "/Morakot/CustomerNameBySelected", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setDisable():
		return ['Currency','ValuationPrice','ForceSale','PurchasePrice']
	
	@staticmethod
	def listField():
		Branch 		= mktuser.getCurrentBranch()
		ListField = ['ID','CustomerID','Description']
		return ListField,["Branch*EQ*"+Branch]

	@staticmethod
	def redirectAfterInsert():
		AuthLevel 	= g.getNAuthorize
		if AuthLevel == 0 :
			return "/Morakot/"+CollateralDetalLink+"/New/Operation/?CollID="+request.form['ID']

	@staticmethod
	def redirectAuthorize():
		ID 				= g.formID


		DetailSysID 	= MKT_AUTOID.query.get("FRM_COLLATERAL_DE_EX")

		#If can not find auto ID by Ex then perform standard form
		if not DetailSysID:
			DetailSysID = MKT_AUTOID.query.get("FRM_COLLATERAL_DE")

		#If no Auto ID on both Ex and standard then return None
		if not DetailSysID:
			return None

		CollateralObj 	= db.session.query(
										MKT_COLLATERAL_HIST.ID).\
										filter(MKT_COLLATERAL_HIST.ID.ilike(ID+'%')).first()
		
		#If in HIST exist then it means that edit, then return none
		if CollateralObj:
			return None

		return "/Morakot/"+CollateralDetalLink+"/New/Operation/?CollID="+ID

	@staticmethod
	def reverseRec():
		ID 					= g.formID  # ID Collateral
		CollateralDe 		= MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==ID).first()
		LoanApplication 	= db.session.query(MKT_LOAN_COLLATERAL.Collateral).\
												join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID==MKT_LOAN_COLLATERAL.ID).\
												filter(MKT_LOAN_COLLATERAL.Collateral==ID).first()
		if CollateralDe or LoanApplication:
			return False,'Not allow to reverse.'
		return True,''
