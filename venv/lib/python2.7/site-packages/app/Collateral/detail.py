from wtforms 							import SelectMultipleField
from app.mktcore.wtfimports import *
from app.mktcore.imports 		import *
from .models import *
from .. import app, db
import time
from datetime import date, datetime, timedelta

from app.Currency.models 			import *
from app.CollateralType.models 		import *
from app.Branch.models 				import *
from app.Province.models			import *
from app.District.models			import *
from app.Commune.models				import *
from app.Village.models				import *

import app.tools.user 				as mktuser
import app.tools.mktroute 			as mktroute
import app.tools.mktdate 			as mktdate
import app.tools.mktaddress 		as mktaddress
import app.tools.mktaccounting 			as mktaccounting
from app.tools.mktloan 				import *
from app.CoPropertyType.models 		import *

def getRecord():
	try:
		result = MKT_COLLATERAL_DE_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_COLLATERAL_DE.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'Province'			:str(row.Province)})
				Dict.update({'District'			:str(row.District)})
				Dict.update({'Commune'			:str(row.Commune)})
				Dict.update({'Village'			:str(row.Village)})
			return Dict
		else:
			return Dict

	except:
		raise

def loadCollateral(ID=''):
	CurrentBranch = mktuser.getCurrentBranch()
	if ID:
		return MKT_COLLATERAL.query.get(ID)
	return MKT_COLLATERAL.query.filter(MKT_COLLATERAL.Branch==CurrentBranch)

def loadCollateralType():
	return MKT_COLLATERAL_TYPE.query

def loadBranch():
	Branch = mktuser.getUser().Branch
	return MKT_BRANCH.query.filter_by(ID=Branch)

def loadCurrency(Default = False):
	AccSetting 	= mktsetting.getAccSetting() #Get Acccounting Setting
	Currency 	= AccSetting.BaseCurrency

	if Default:
		return MKT_CURRENCY.query.get(Currency)

	else:
		return MKT_CURRENCY.query.order_by(asc(MKT_CURRENCY.ID)).all()

def loadProvince():
	return mktaddress.getProvince()

def loadDistrict():
	if request.method == 'POST':
		Province = request.form["Province"]
	else:
		if len(getRecord())>0:
			print "filter district"
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])  
		else:
			print "no filter"
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

def loadCommune():
	if request.method == 'POST':
		District=request.form["District"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['Commune'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return mktaddress.getLoadCommune(District)

def loadVillage():
	if request.method == 'POST':
		Commune=request.form["Commune"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['Village'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)

def loadPropertyType():
	return MKT_PROPERTY_TYPE.query

def loadYear():
	Year = [('','--Choose Year--')]

	CurrentYear = mktdate.formatDate(str(mktdate.getBankDate()),"YYYY")

	for i in range(int(CurrentYear)+5,1995,-1):
		Year.append((str(i),str(i)))

	return Year

class FRM_COLLATERAL_DE(exform):
	CollateralID 	= RemoteTextField(requiredlabel(getLanguage("Collateral"), "*"),
										dicRemote={'url':'/Morakot/SearchCollateral'},
										default=lambda:request.args.get("CollID"),
										validators=[validators.Required()]
						)
	CollateralStatus	=  SelectField("Status",
								choices=[('_None','--None--'),('1','Received'),('2','Withdrawn')],
								coerce=str,
								default ='1'
							)
	ReceivedDate 	= 	DateField(getLanguage("Received Date"),
							format='%Y-%m-%d'
						)
	ReceivedBy 		= 	TextField("Received By", [validators.length(max=35)])
	
	WithdrawalDate 	= 	DateField("Withdrawal Date",
							format='%Y-%m-%d'
						)
	
	WithdrawalBy 	= 	TextField("Withdrawal By", [validators.length(max=35)])

	Description 		= 	TextAreaField(getLanguage("Property Description"))

	# Tab 1-Collateral Details
	CollateralType 	= 	QuerySelectField(requiredlabel(getLanguage("Collateral Type"), "*"),
						query_factory=loadCollateralType,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("None"),
						validators=[validators.Required()],
						description='1-Collateral Details'
					)
	PropertyType 	= 	QuerySelectField('Property Type',
									query_factory=loadPropertyType, 
									get_label='Description',
									allow_blank=True,
									blank_text=u'--Choose Property Type--',
									description='1-Collateral Details'
								)
	
	IssuedDate 		= 	DateField(getLanguage("Issued Date"),
							format='%Y-%m-%d',
							default=mktdate.getDateISO(),
							validators=[validators.Optional()],
							description='1-Collateral Details'
						)

	IssuedPlace 	= 	TextField(getLanguage("Issued Place"),[validators.length(max=50)],description='1-Collateral Details')
	IssuedBy 		= 	TextField(getLanguage("Issued By"),[validators.length(max=100)],description='1-Collateral Details')
	CollateralNumber= 	TextField("Collateral Number", [validators.length(max=25)],description='1-Collateral Details')

	Province 		= 	QuerySelectField(getLanguage('Province'),
							query_factory=loadProvince, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Province--',
							description='1-Collateral Details'
						)

	District 		= 	QuerySelectField(getLanguage('District'),
							query_factory=loadDistrict, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose District--',
							description='1-Collateral Details'
						)

	Commune 		=	QuerySelectField(getLanguage('Commune'),
							query_factory=loadCommune, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Commune--',
							description='1-Collateral Details'
						)

	Village 		=	QuerySelectField(getLanguage('Village'),
							query_factory=loadVillage, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Village--',
							description='1-Collateral Details'
						)
	HouseNo 		= 	TextField("House No",
							description="1-Collateral Details")

	StreetNo 		= 	TextField("Street",
							description="1-Collateral Details")

	Location 		= LocationField("Collateral Location",description="1-Collateral Details")

	# Tab 2-Collateral Values
	Currency 		= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							default=lambda:loadCurrency(Default=True),
							validators=[validators.Required(),
							],
							description='2-Collateral Values'
						)
	PurchasePrice 	= 	TextField(getLanguage("Purchased Price"),default='0',description='2-Collateral Values')
	ValuationPrice 	= 	TextField(requiredlabel(getLanguage("Valuation Price"),'*'),default='0',description='2-Collateral Values',validators=[validators.Required()])
	ForceSaleValue 	= 	TextField('Force Sale Value', description="2-Collateral Values")
	Valuer 			= 	TextField(getLanguage("Valuer"), [validators.length(max=50)],description='2-Collateral Values')

	# Tab 3-Ownershi
	OwnershipType 		=	SelectField('Ownership Type', 
								choices=[('1', 'Owned By Customer'),('2', 'Owned By Other')],
								coerce=str,
								description='3-Ownership')

	OwnerName 			= 	TextField('Owner Name',
								description='3-Ownership')
	OwnerSpouseName 	= 	TextField('Owner Spouse Name',
								description='3-Ownership')
	RelationIndicator 	= 	QuerySelectField("Relation Indicator",
								query_factory=loadRelationIndicators,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--%s--' %getLanguage("None"),
								description="3-Ownership"
							)

	#For Leasing 
	if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
		PlateNumber		=	TextField('Plate Number',
								description='2-Vehical Details')
		FrameNo			= 	TextField('Frame No',
								description='2-Vehical Details')
		EngineNo		= 	TextField('Engine No',
								description='2-Vehical Details')
		Color 			=	TextField('Color',
								description='2-Vehical Details')
		Brand			=	TextField('Brand',
								description='2-Vehical Details')
		Model 			=	TextField('Model',
								description='2-Vehical Details')
		HorsePower		=	TextField('Horse Power',
								description='2-Vehical Details')
		Year			=	SelectField('Year',
								coerce=str,
								description='2-Vehical Details')
	
	def __init__(self, *args, **kwargs):
		
		super(FRM_COLLATERAL_DE, self).__init__(*args, **kwargs)
		
		if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
			self.Year.choices = loadYear()

	def validate_ReceivedDate(form,field):
		ReceivedDate = field.data
		CollateralStatus = form.CollateralStatus.data
		if CollateralStatus != '_None':
			if CollateralStatus == '1' and not ReceivedDate:
				field.errors[:] = ''
				raise ValidationError('This field is required.')
		field.errors[:] = ''

	
	def validate_ReceivedBy(form,field):
		ReceivedBy = field.data
		CollateralStatus = form.CollateralStatus.data
		if CollateralStatus != '_None':
			if CollateralStatus == '1' and not ReceivedBy:
				field.errors[:] = ''
				raise ValidationError('This field is required.')
		field.errors[:] = ''

	def validate_WithdrawalDate(form,field):
		WithdrawalDate = field.data
		CollateralStatus = form.CollateralStatus.data
		if CollateralStatus != '_None':
			if CollateralStatus == '2' and not WithdrawalDate:
				field.errors[:] = ''
				raise ValidationError('This field is required.')
		field.errors[:] = ''

	
	def validate_WithdrawalBy(form,field):
		WithdrawalBy = field.data
		CollateralStatus = form.CollateralStatus.data
		if CollateralStatus != '_None':
			if CollateralStatus=='2' and not WithdrawalBy:
				field.errors[:] = ''
				raise ValidationError('This field is required.')
		field.errors[:] = ''

	def validate_ValuationPrice(form,field):
		ValuationPrice = float(field.data.replace(',',''))
		if ValuationPrice <=0.00:
			raise ValidationError('This field is required.')

	@staticmethod
	def setDisable():
		if request.form:
			OwnershipType = str(request.form['OwnershipType'])
			if OwnershipType != "1":
				return []

		return [('OwnerName'), ('OwnerSpouseName')]

	@staticmethod
	def moneyField():
		return [['PurchasePrice','Currency'], ['ValuationPrice','Currency'],['ForceSaleValue','Currency']]

	@staticmethod
	def setWidth():
		control_list = [('IssuedDate', len3),('ReceivedDate',len3),('WithdrawalDate',len3),
						('Currency',len2)]

		return control_list


	@staticmethod
	def listField():
		Fields = ["ID", "CollateralID","Currency", "CollateralType", "PurchasePrice", "ValuationPrice", "CollateralNumber","ReceivedDate","WithdrawalDate"]

		return Fields

	@staticmethod
	def formatMoney(): # for listField 
		return ["PurchasePrice","ValuationPrice",'ForceSaleValue'],"Currency"
		
	@staticmethod
	def hotSelectField():
		hotfield=[]


		fielddisplay="District,#Commune, #Village"
		varname="ProvinceID:$('#Province').val()"
		fun=["Province", varname ,fielddisplay, "/Morakot/DistrictID", "change"]
		hotfield.append(fun)

		fielddisplay="Commune, #Village"
		varname="DistrictID:$('#District').val()"
		fun=["District", varname ,fielddisplay, "/Morakot/CommuneID", "change"]
		hotfield.append(fun)

		fielddisplay="Village"
		varname="CommuneID:$('#Commune').val()"
		fun=["Commune", varname ,fielddisplay, "/Morakot/VillageID", "change"]
		hotfield.append(fun)

		fielddisplay="PropertyType"
		varname="CollateralType:$('#CollateralType').val()"
		fun=["CollateralType", varname ,fielddisplay, "/Morakot/GetProOfCollateralType", "click"]
		hotfield.append(fun)

		

		return hotfield

	@staticmethod
	def hotField():
		hotfield=[]

		fielddisplay =  "$('input[name=OwnerName]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=OwnerName]').val(data.OwnerName);"
		fielddisplay += "$('input[name=OwnerSpouseName]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=OwnerSpouseName]').val(data.OwnerSpouseName);"
		fielddisplay += "$('input[name=RelationIndicator]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=RelationIndicator]').val(data.RelationIndicator);"

		varname  = "OwnershipType:$('#OwnershipType').val()"
		varname += ",OwnerName:$('#OwnerName').val()"
		varname += ",OwnerSpouseName:$('#OwnerSpouseName').val()"
		varname += ",RelationIndicator:$('#RelationIndicator').val()"

		fun = ["OwnershipType", varname, fielddisplay, "/Morakot/CollateralOwnership", "change"]
		hotfield.append(fun)


		return hotfield

	@staticmethod
	def redirectAuthorize():

		ID   					= g.formID
		CollateralObj 			= MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.ID==ID).first()
		CollateralID 			= CollateralObj.CollateralID
		CollateralDeObj 		= MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==CollateralID).\
								  filter(MKT_COLLATERAL_DE.CollateralStatus=='1').\
								  all()

	  	# CollateralDeObj 		= MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==CollateralID).\
	  	# 							all()

		ValuationPrice 			= 0
		ForceSale 				= 0
		PurchasePrice 			= 0
		MinCollateralValue		= 0
		Currency 				= ''
		ReportingRateObj 		= mktaccounting.getReportingRateObj()
		AccSetting 				= mktsetting.getAccSetting()
		BaseCurrency 			= AccSetting.BaseCurrency

		if CollateralDeObj:
			for row in CollateralDeObj:
				ExchangeRate 			=  float(ReportingRateObj[row.Currency])
				ValuationPrice 			+= (float(row.ValuationPrice)*ExchangeRate)
				ForceSale 				+= (float(row.ForceSaleValue)*ExchangeRate)
				PurchasePrice 			+= (float(row.PurchasePrice)*ExchangeRate)
				
				if row.PurchasePrice and row.PurchasePrice <= row.ValuationPrice:
					MinCollateralValue 	+= (float(row.PurchasePrice)*ExchangeRate)
				else:
					MinCollateralValue 	+= (float(row.ValuationPrice)*ExchangeRate)

			try:

				mktdb.updateRecord(
					MKT_COLLATERAL,
					[MKT_COLLATERAL.ID==CollateralID],
					{'Currency':BaseCurrency,'ForceSale':ForceSale,'PurchasePrice':PurchasePrice,'ValuationPrice':ValuationPrice,'MinCollateralValue':MinCollateralValue}
					)
				db.session.commit()
			except:
				db.session.rollback()
				raise
		else:
			try:
				mktdb.updateRecord(
					MKT_COLLATERAL,
					[MKT_COLLATERAL.ID==CollateralID],
					{'Currency':BaseCurrency,'ForceSale':0,'PurchasePrice':0,'ValuationPrice':0,'MinCollateralValue':0}
					)
				db.session.commit()
			except:
				db.session.rollback()
				raise
		return None

	@staticmethod
	def beforeAuthorize():
		# Record need to authorized after reverse
		ID 					= g.formID  # ID Collateral Detail
		ValuationPrice 		= 0
		ForceSale 			= 0
		PurchasePrice 		= 0

		CollateralDeINAU = MKT_COLLATERAL_DE_INAU.query.filter(MKT_COLLATERAL_DE_INAU.ID==ID).\
														filter(MKT_COLLATERAL_DE.CollateralStatus=='1').first()

		if CollateralDeINAU:
			Status = CollateralDeINAU.Status
			if Status == "RNAU": 	# Check if record is reverse unauthorized
				CollateralID 		= CollateralDeINAU.CollateralID
				ValuationPrice 		= toBaseCurrency(float(CollateralDeINAU.ValuationPrice),CollateralDeINAU.Currency)
				ForceSale 			= toBaseCurrency(float(CollateralDeINAU.ForceSaleValue),CollateralDeINAU.Currency)
				PurchasePrice		= toBaseCurrency(float(CollateralDeINAU.PurchasePrice),CollateralDeINAU.Currency)

				if PurchasePrice and PurchasePrice <= ValuationPrice:
					MinCollateralValue 	= (float(PurchasePrice))
				else:
					MinCollateralValue 	= (float(ValuationPrice))


				CollateralObj = MKT_COLLATERAL.query.filter(MKT_COLLATERAL.ID==CollateralID).first()

				if CollateralObj:

					NewValuationPrice 		= float(CollateralObj.ValuationPrice) - float(ValuationPrice)
					NewForceSale 			= float(CollateralObj.ForceSale) - float(ForceSale)
					NewPurchasePrice 		= float(CollateralObj.PurchasePrice) - float(PurchasePrice)
					NewMinCollateralValue 	= float(CollateralObj.MinCollateralValue) - float(MinCollateralValue)

					try:
						mktdb.updateRecord(
							MKT_COLLATERAL,
							[MKT_COLLATERAL.ID==CollateralID],
							{'ForceSale':NewForceSale,'PurchasePrice':NewPurchasePrice,'ValuationPrice':NewValuationPrice,'MinCollateralValue':NewMinCollateralValue}
							)
					except:
						db.session.rollback()
						raise
		return True
		



	@staticmethod
	def redirectAfterInsert():
		NumOfAuth = g.getNAuthorize
		if NumOfAuth == 0:
			ID   					= request.form['ID']
			CollateralObj 			= MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.ID==ID).first()
			CollateralID 			= CollateralObj.CollateralID
			CollateralDeObj 		= MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==CollateralID).\
									  filter(MKT_COLLATERAL_DE.CollateralStatus=='1').\
									  all()

		  	# CollateralDeObj 		= MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==CollateralID).\
		  	# 							all()

			ValuationPrice 			= 0
			ForceSale 				= 0
			PurchasePrice 			= 0
			MinCollateralValue		= 0
			Currency 				= ''
			ReportingRateObj 		= mktaccounting.getReportingRateObj()

			if CollateralDeObj:
				for row in CollateralDeObj:
					ExchangeRate 			=  float(ReportingRateObj[row.Currency])
					ValuationPrice 			+= (float(row.ValuationPrice)*ExchangeRate)
					ForceSale 				+= (float(row.ForceSaleValue)*ExchangeRate)
					PurchasePrice 			+= (float(row.PurchasePrice)*ExchangeRate)
					
					if row.PurchasePrice and row.PurchasePrice <= row.ValuationPrice:
						MinCollateralValue 	+= (float(row.PurchasePrice)*ExchangeRate)
					else:
						MinCollateralValue 	+= (float(row.ValuationPrice)*ExchangeRate)

				try:
					mktdb.updateRecord(
						MKT_COLLATERAL,
						[MKT_COLLATERAL.ID==CollateralID],
						{'ForceSale':ForceSale,'PurchasePrice':PurchasePrice,'ValuationPrice':ValuationPrice,'MinCollateralValue':MinCollateralValue}
						)
					db.session.commit()
				except:
					db.session.rollback()
					raise
			else:
				try:
					mktdb.updateRecord(
						MKT_COLLATERAL,
						[MKT_COLLATERAL.ID==CollateralID],
						{'ForceSale':0,'PurchasePrice':0,'ValuationPrice':0,'MinCollateralValue':0}
						)
					db.session.commit()
				except:
					db.session.rollback()
					raise
		return None


	@staticmethod
	def reverseRec():
		# Record need to authorized after reverse
		NumOfAuth = g.getNAuthorize
		if NumOfAuth == 0:
			ID 					= g.formID  # ID Collateral Detail
			ValuationPrice 		= 0
			ForceSale 			= 0
			PurchasePrice 		= 0

			CollateralDe = MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.ID==ID).\
						   filter(MKT_COLLATERAL_DE.CollateralStatus=='1').first()

			if CollateralDe:
				CollateralID 		= CollateralDe.CollateralID
				ValuationPrice 		= toBaseCurrency(float(CollateralDe.ValuationPrice),CollateralDe.Currency)
				ForceSale 			= toBaseCurrency(float(CollateralDe.ForceSaleValue),CollateralDe.Currency)
				PurchasePrice		= toBaseCurrency(float(CollateralDe.PurchasePrice),CollateralDe.Currency)

				if PurchasePrice and PurchasePrice <= ValuationPrice:
					MinCollateralValue 	= (float(PurchasePrice))
				else:
					MinCollateralValue 	= (float(ValuationPrice))


				CollateralObj = MKT_COLLATERAL.query.filter(MKT_COLLATERAL.ID==CollateralID).first()
				if CollateralObj:

					NewValuationPrice 		= float(CollateralObj.ValuationPrice) - float(ValuationPrice)
					NewForceSale 			= float(CollateralObj.ForceSale) - float(ForceSale)
					NewPurchasePrice 		= float(CollateralObj.PurchasePrice) - float(PurchasePrice)
					NewMinCollateralValue 	= float(CollateralObj.MinCollateralValue) - float(MinCollateralValue)
					try:
						mktdb.updateRecord(
							MKT_COLLATERAL,
							[MKT_COLLATERAL.ID==CollateralID],
							{'ForceSale':NewForceSale,'PurchasePrice':NewPurchasePrice,'ValuationPrice':NewValuationPrice,'MinCollateralValue':NewMinCollateralValue}
							)


					except Exception as e:
						db.session.rollback()
						raise
		return True,''

@app.route("/Morakot/CollateralOwnership", methods=['GET'])
@app.route("/Morakot/API/CollateralOwnership", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getCollateralOwnership():
	RelationIndicator 	= 	request.args.get('RelationIndicator')
	OwnerSpouseName 	= 	request.args.get('OwnerSpouseName')
	OwnershipType 		= 	request.args.get('OwnershipType')
	OwnerName 			= 	request.args.get('OwnerName')
	Bool 				= 	False
	
	if OwnershipType == '1':
		RelationIndicator 	= 	''
		OwnerSpouseName 	= 	''
		OwnerName 			= 	''
		Bool 				= 	True

	return jsonify(
			RelationIndicator 	= RelationIndicator,
			OwnerSpouseName 	= OwnerSpouseName,
			OwnershipType 		= OwnershipType,
			OwnerName 			= OwnerName,
			Bool 				= Bool
		)

@app.route("/Morakot/GetProOfCollateralType", methods=['GET'])
@app.route("/Morakot/API/GetProOfCollateralType", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getProOfCollateralType():
	CollateralType =	request.args.get('CollateralType')
	dic = {}
	result = MKT_PROPERTY_TYPE.query.filter(MKT_PROPERTY_TYPE.CollateralType==CollateralType).all()
	for row in  result:
		dic[row.ID] = row.ID + ' - ' + row.Description

	return jsonify(results=dic)
