# -*- coding: utf-8 -*-
from app.mktcore.wtfimports import *
from wtforms 				import  IntegerField
from flask 					import Markup
from .models import *

def loadQuestion():
	return MKT_SURVEY_QUESTIONS.query 

def getControlList(ControlID=""):
	controls_list 	= request.form
	ListControl		= [item for item in controls_list if ControlID in item]
	ListControl.sort()
	TotalControl 	= len(ListControl)
	return ListControl,TotalControl

def validateDuplicate(AnswerID):
	ListAnswerID, TotalAnswerID = getControlList("AnswerID")
	FilteredList 	= [None,"","__None"]
	AllAnswerID 	= []
	for nub in range(0,TotalAnswerID):
		AllAnswerID.append(request.form[ListAnswerID[nub]])
	AllAnswerID = [x for x in AllAnswerID if x not in FilteredList]
	DupAnswerID= [x for x in AllAnswerID if AllAnswerID.count(x) > 1]
	return DupAnswerID
	
def custom_AnswerID(form,field):
	AnswerType 	= request.form['AnswerType']
	ListAnswerID, TotalAnswerID	= getControlList("AnswerID")
	if AnswerType != "3":
		for i in range(0,TotalAnswerID):
			if field.name == ListAnswerID[i]:
				AnswerID = request.form[ListAnswerID[i]]
				CheckAnswerID 	= AnswerID.isdigit()
				if not AnswerID:
					raise ValidationError("This field is required.")
				else: 
					Validate = validateDuplicate(AnswerID)
					if AnswerID in Validate:
						raise ValidationError(Markup("duplicated with AnswerID(s) <b>%s</b>."%AnswerID))
				if not CheckAnswerID and AnswerID != "":
					raise ValidationError("Input number only!!!.")

def custom_Answer(form,field):
	AnswerType 	= request.form['AnswerType']
	ListAnswer, TotalAnswer	= getControlList("Answer")
	if AnswerType != "3":
		for i in range(0,TotalAnswer):
			if field.name == ListAnswer[i]:
				Answer = request.form[ListAnswer[i]]
				if not Answer:
					raise ValidationError("This field is required.")

def custom_Score(form,field):
	AnswerType 	= request.form['AnswerType']
	ListScore, TotalScore	= getControlList("Score")
	if AnswerType != "3":
		for i in range(0,TotalScore):
			if field.name == ListScore[i]:
				Score = request.form[ListScore[i]]
				CheckScore 	= Score.isdigit()
				if not Score:
					raise ValidationError("This field is required.")
				if not CheckScore and Score != "":
					raise ValidationError("Input number only!!!.")

class FRM_QUESTION_ANSWER(exform):

	Question 	=	TextAreaField(requiredlabel("Question", "*"), [validators.Required(), validators.Length(max=300)])
	AnswerType 	= 	SelectField(requiredlabel("Answer Type","*"),
							validators=[validators.Required()], 
							choices=[('1', 'Radio Button'),
									 ('2', 'Check Box'),
									 ('3', 'Free Text')],
							coerce=str)
	AnswerID 	= 	TextField(requiredlabel("Answer ID","*"),description='1-Answer',validators=[custom_AnswerID])
	Answer 		=	TextAreaField(requiredlabel("Answer", "*"),description='1-Answer',validators=[custom_Answer])
	Score 		=	TextField(requiredlabel("Score","*"),description='1-Answer',validators=[custom_Score])

	@staticmethod
	def isMultiValue():
		return ['1-Answer']
