from app.mktcore.wtfimports 		import *
from .models 						import *
from app.Customer.models 			import *
from app.Officer.models 			import *
from app.LoanApplication.models 	import *

import app.tools.mktaudit 	as mktaudit


def loadCustomer(ID=''):
	return MKT_CUSTOMER.query
def loadOfficer(ID=''):
	return MKT_OFFICER.query
def loadQuestionnaire():
	return MKT_SURVEY_QUESTIONNAIRE.query

#After Save record will be look up value from table store
def getRecord():
	try:
		result = MKT_SURVEY.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_SURVEY_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict = row.__dict__
			return Dict
		else:
			return Dict
	except:
		raise

def loadLoanApplication():  #define function
	if request.method == 'POST':
		CustomerID = request.form["Customer"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_LOAN_APPLICATION_INAU.query.filter_by(LNCustomerID=Record['Customer'])  
		else:
			return MKT_LOAN_APPLICATION_INAU.query.filter_by(LNCustomerID='')

	return MKT_LOAN_APPLICATION_INAU.query.filter_by(LNCustomerID=CustomerID) # tablename.query


class FRM_SURVEY(exform):
	Customer 		= 	QuerySelectField('Customer',
							 query_factory=loadCustomer, 
							 get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							 allow_blank=True,
							 blank_text='--None--',
							 )
	LoanApplication =	QuerySelectField("Loan Application",
											query_factory	= loadLoanApplication,
											get_label		= lambda a: a.ID,
											allow_blank 	= True,
											blank_text		='--None--',)
	Officer 		=	QuerySelectField('Survey Officer',
							 query_factory=loadOfficer, 
							 get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
							 allow_blank=True,
							 blank_text='--None--',
							 )
	SurveyDate 		=	DateField(requiredlabel("Survey Date", "*"),
							 validators=[validators.Required()])
	Questionnaire 	= 	QuerySelectField(requiredlabel('Survey Questionnaire',"*"),
							 query_factory=loadQuestionnaire, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='--None--',
							 validators=[validators.Required()])
	Remark  		= 	TextAreaField('Remark',[validators.length(max=140)])
	Iframe 				= MKTIframe("View Followup Detail",
								dicIframe={'width':'100%','height':'730px','frameborder':'0'},
								description='1-Survey')
	@staticmethod
	def urlParam():
		dicParam =''
		Questionnaire =""
		if request.method == 'GET':
			ID = g.formID
			SurveyObj 	  = 	MKT_SURVEY.query.get(ID)
			SurveyHistObj = 	MKT_SURVEY_HIST.query.get(ID)
			if SurveyObj:
				Questionnaire = SurveyObj.Questionnaire
			if SurveyHistObj:
				Questionnaire = SurveyHistObj.Questionnaire
			dicParam = [{"IframeName":"Iframe", "iframeUrl":"/Morakot/SurveyDetail/"+Questionnaire,'Resource' : 'Status'}]
		return dicParam
	@staticmethod
	def reverseRec():
		try:
			ID    =   g.formID
			SurveyDeObj = MKT_SURVEY_DE.query.filter(MKT_SURVEY_DE.ID==ID)
			if SurveyDeObj:
				mktaudit.moveAUTHtoHIST(MKT_SURVEY_DE, MKT_SURVEY_DE_HIST, ID)
				mktaudit.deleteAUTH(MKT_SURVEY_DE, ID, "ID")
				return True,""
			else:
				return False,""
		except Exception as e:
			raise e
	
	@staticmethod
	def hotSelectField():
		
		hotfield 	 	= []
		fielddisplay 	= "LoanApplication"
		varname  		= "CustomerID:$('#Customer').val()"
		fun 			= ["Customer", varname, fielddisplay, "/Morakot/LoanIDByCustomer", "change"]
		
		hotfield.append(fun)
		return hotfield