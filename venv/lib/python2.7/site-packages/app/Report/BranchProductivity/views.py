from app.mktcore.imports 			import *
from sqlalchemy 					import *
import sqlalchemy
from sqlalchemy.sql.expression 		import cast
from decimal 						import *
import sys

from app.Customer.models			import *
from app.Branch.models				import *
from app.LoanContract.models 		import *
from app.PD.models					import *
from app.Currency.models 			import *
from app.AssetClass.models 			import *

import app.tools.mktaccounting		as mktaccounting
import app.tools.mkttool 			as mkttool
import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney
import app.tools.mktsetting 		as mktsetting


@app.route("/Morakot/Report/BranchProductivity", methods = ['GET'])
@checkLogOutSession
@checkLogOutTime
def getBranchProductivity():
	Company 			= 	mkttool.getCompany().CompanyName
	BankDate 			= 	mktdate.getBankDate()
	BranchObj 			= 	MKT_BRANCH.query.order_by(MKT_BRANCH.ID.asc())
	#Base Currency
	AccSetting 			= 	mktsetting.getAccSetting()
	if AccSetting:
		BaseCurrency = AccSetting.BaseCurrency
	BaseCurrencyObj = mktmoney.getCurrencyObj(BaseCurrency)
	CurrencyObj 		= 	MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())
	ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
	#Asset Class
	AssetClassObj 		=	MKT_ASSET_CLASS.query.\
									filter(~MKT_ASSET_CLASS.ID.contains('-')).\
									filter(MKT_ASSET_CLASS.ID != '0').\
									order_by(MKT_ASSET_CLASS.ID)
	LoanClass 			= 	request.args.get('LoanClass') if request.args else AssetClassObj.first().ID

	# CustomerObj 		= 	db.session.query(	MKT_CUSTOMER.Branch,
	# 											func.count(MKT_CUSTOMER.ID).label('CountCustomer') # Number of clients
	# 											).\
	# 									group_by(MKT_CUSTOMER.Branch)

	LoanContractObj 	= 	db.session.query(	MKT_LOAN_CONTRACT.Branch, 
												MKT_LOAN_CONTRACT.Currency,
												func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('SumOutAmount') # Total Outstanding Amount
												).\
										filter(MKT_LOAN_CONTRACT.OutstandingAmount > Decimal(0)).\
										filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
										order_by(	MKT_LOAN_CONTRACT.Branch, 
													MKT_LOAN_CONTRACT.Currency).\
										group_by(	MKT_LOAN_CONTRACT.Branch, 
													MKT_LOAN_CONTRACT.Currency)
	LoanContractID 		=	db.session.query(	MKT_LOAN_CONTRACT.ID).\
										filter(MKT_LOAN_CONTRACT.OutstandingAmount > Decimal(0)).\
										filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y")
	LoanContract 		= 	db.session.query(MKT_LOAN_CONTRACT.Branch,
												func.count(distinct(MKT_LOAN_CONTRACT.ContractCustomerID)).label('CountBorrower')).\
												group_by(MKT_LOAN_CONTRACT.Branch)
	PastDueObj			= 	db.session.query(	MKT_PAST_DUE.Branch, 
												MKT_PAST_DUE.Currency,
												func.count(MKT_PAST_DUE.ID).label('CountLoanArrear'), # Number of loan in arrear
												func.sum(MKT_PAST_DUE.TotPrincipalDue).label('SumPrincipalDue'), # Total Principal Due
												func.sum(MKT_PAST_DUE.TotInterestDue).label('SumInterestDue') # Total Interest Due
												).\
										filter(or_(	MKT_PAST_DUE.TotPrincipalDue > Decimal(0), 
													MKT_PAST_DUE.TotInterestDue > Decimal(0))
													).\
										order_by(	MKT_PAST_DUE.Branch, 
													MKT_PAST_DUE.Currency).\
										group_by(	MKT_PAST_DUE.Branch, 
													MKT_PAST_DUE.Currency)
	PAR = LoanContractObj.filter(cast(MKT_LOAN_CONTRACT.AssetClass, sqlalchemy.Integer) >= int(LoanClass))
	LCID = LoanContractID.filter(cast(MKT_LOAN_CONTRACT.AssetClass, sqlalchemy.Integer) >= int(LoanClass)).all()
	PD  = PastDueObj.filter(MKT_PAST_DUE.LoanID.in_(LCID))

	# print 'CurrencyObj', CurrencyObj
	# print 'ReportingRateObj %r' %ReportingRateObj
	# print 'LoanContractObj %r' %LoanContractObj.all()
	# print 'PARAmount %r' %PAR.all()
	# print 'PastDueObj %r' %PastDueObj.all()
	Result 	= {}
	# TotalClient = 0
	TotalLoan = 0
	TotalOutstandingAmount = 0
	TotalParAmount = 0
	TotalLoanInArrear = 0
	TotalLoanAmountInArrear = 0
	TotalBorrower = 0
	
	for branch in BranchObj.all():
		# Filter by branch
		# CusInBranch = CustomerObj.filter(MKT_CUSTOMER.Branch == branch.ID).first() 			#Customer by Branch
		ContractInBranch = LoanContract.filter(MKT_LOAN_CONTRACT.Branch == branch.ID).first()
		ParInBranch = PAR.filter(MKT_LOAN_CONTRACT.Branch == branch.ID)						#ParAmount by Branch
		LCInBranch 	= LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch == branch.ID)			#Loan Contract Amount by Branch
		PDInBranch 	= PD.filter(MKT_PAST_DUE.Branch == branch.ID)							#Past Due by Branch
		LCIDInBranch = LoanContractID.filter(MKT_LOAN_CONTRACT.Branch == branch.ID).all()	#Number of Loan Contract in Branch

		# NumberOfClient 		= CusInBranch.CountCustomer if CusInBranch else 0
		NumberOfBorrower 	= ContractInBranch.CountBorrower if ContractInBranch else 0
		NumberOfLoan 		= len(LCIDInBranch)
		NumberOfLoanArrear 	= PDInBranch.first().CountLoanArrear if PDInBranch.first() else 0#Number of Loan Arrear by Branch
		#print ' ***************'
		#print 'Branch'
		#print '\tCustomer', CusInBranch.CountCustomer
		#print '\tParAmount', ParInBranch.first()
		#print '\tLoanContract',LCInBranch.first(), '\n\tPastDue', PDInBranch.first()
		#print '\tNumber of loan arrear', LoanArrearInBranch

		# Reset value to 0
		OutstandingAmount 	= Decimal(0)
		ParAmount 			= Decimal(0)
		LoanAmountInArrear 	= Decimal(0)

		# Filter by currency
		for currency in CurrencyObj.all():
			# Reset value to 0 for the next loop
			OutAmountInCurrency 	= 0
			ParAmountInCurrency 			= 0
			PrincipalDueInCurrency 		= 0
			InterestDueInCurrency 		= 0
			TotalPrincipalDue 	= Decimal(0)
			TotalInterestDue  	= Decimal(0)

			# Par Amount by Currency
			ParInCurrency = ParInBranch.filter(MKT_LOAN_CONTRACT.Currency == currency.ID).first() if ParInBranch.first() else []
			# Loan Contract Amount by Currency
			LCInCurrency  = LCInBranch.filter(MKT_LOAN_CONTRACT.Currency == currency.ID).first() if LCInBranch.first() else []
			# Past Due by Currency
			PDInCurrency  = PDInBranch.filter(MKT_PAST_DUE.Currency == currency.ID).first() if PDInBranch.first() else []
			#print '\tCurrency' ,currency.ID
			#print '\t\tLoanContract:', LCInCurrency
			#print '\t\tParAmount:', ParInCurrency
			#print '\t\tPastDue:', PDInCurrency
			# Calculate Total Outstanding Amount/ Loan Portfolio
			if LCInCurrency:
				ExchangeRate 			= ReportingRateObj[LCInCurrency.Currency]
				OutAmountInCurrency 	= LCInCurrency.SumOutAmount
				OutstandingAmount 		+= (OutAmountInCurrency * ExchangeRate)
				# Calculate Total PAR Amount
				if ParInCurrency:
					ParAmountInCurrency 	= ParInCurrency.SumOutAmount 			# Use SumOutAmount with filter AssetClass != 0
					ParAmount 				+= (ParAmountInCurrency * ExchangeRate)
				# Calculate Total Arrear Outstanding
				if PDInCurrency:
					ExchangeRate 			= ReportingRateObj[PDInCurrency.Currency]
					PrincipalDueInCurrency 	= PDInCurrency.SumPrincipalDue
					InterestDueInCurrency  	= PDInCurrency.SumInterestDue
					TotalPrincipalDue 		= PrincipalDueInCurrency * ExchangeRate
					TotalInterestDue 		= InterestDueInCurrency * ExchangeRate
					LoanAmountInArrear 		+= TotalPrincipalDue + TotalInterestDue

			#print '\t\tTotalPrincipalDue', TotalPrincipalDue
			#print '\t\tTotalInterestDue', TotalInterestDue
		#Calculate Percentage
		if OutstandingAmount != 0:
			ParPercentage 		= (ParAmount / OutstandingAmount) * 100
			PercentageArrear 	= (LoanAmountInArrear / OutstandingAmount) * 100
		else:
			ParPercentage 		= 0.0
			PercentageArrear 	= 0.0
		#Update dictionary in loop branch
		Result.update({
			branch.ID :{
				'BranchID' 			: branch.ID,
				'BranchName' 		: branch.Description,
				# '#OfClient' 		: NumberOfClient, 	# Number of clients in branch
				'#OfBorrower'		: NumberOfBorrower,
				'#OfLoan'			: NumberOfLoan,		# Number of all loans in branch
				'#OfLoanInArrear' 	: NumberOfLoanArrear, # Number of loan arrear in branch
				'LoanPortfolio' 	: mktmoney.toMoney(float(OutstandingAmount),BaseCurrencyObj), 	# Total outstanding amount of all loan
				'PARAmount' 		: mktmoney.toMoney(float(ParAmount),BaseCurrencyObj), 			# Total PAR amount filter by AssetClass
				'PAR%' 				: mktmoney.formatNumber(ParPercentage), 	# (PARAmount/LoanPortfolio)*100
				'LoanAmountInArrear': mktmoney.toMoney(float(LoanAmountInArrear),BaseCurrencyObj), 	# Total Loan Amount in Arrear
				'%OfArrear' 		: mktmoney.formatNumber(PercentageArrear) 	# (LoanAmountInArrear/LoanPortfolio)*100
			}
		})
		#print '\tTotalOutstandingAmount', TotalOutstandingAmount
		#print '\tTotalParAmount', TotalParAmount
		#print '\tTotalArrearOutstanding', TotalArrearOutstanding
		#print ''
		#print '\tParPercentage', ParPercentage
		#print '\tPercentageArrear', PercentageArrear
		#print ''

		#Calculate Total in loop branch
		# TotalClient 				+= NumberOfClient
		TotalBorrower 				+= NumberOfBorrower
		TotalLoan 					+= NumberOfLoan
		TotalOutstandingAmount 		+= OutstandingAmount
		TotalParAmount 				+= ParAmount
		TotalLoanInArrear 			+= NumberOfLoanArrear
		TotalLoanAmountInArrear 	+= LoanAmountInArrear

	#Calculate Total percentage outside loop and create a dictionary of Total
	
	TotalParPercentage 		= (TotalParAmount / TotalOutstandingAmount) * 100 if TotalOutstandingAmount != 0 else 0
	TotalPercentageOfArrear = (TotalLoanAmountInArrear / TotalOutstandingAmount) * 100 if TotalOutstandingAmount != 0 else 0

	Total = {
			# '#OfClient' 		: TotalClient,
			'#OfBorrower'       : TotalBorrower,
			'#OfLoan'			: TotalLoan,
			'LoanPortfolio' 	: mktmoney.toMoney(float(TotalOutstandingAmount),BaseCurrencyObj),
			'PARAmount' 		: mktmoney.toMoney(float(TotalParAmount),BaseCurrencyObj),
			'PAR%' 				: mktmoney.formatNumber(TotalParPercentage),
			'#OfLoanInArrear' 	: TotalLoanInArrear,
			'LoanAmountInArrear': mktmoney.toMoney(float(TotalLoanAmountInArrear),BaseCurrencyObj),
			'%OfArrear' 		: mktmoney.formatNumber(TotalPercentageOfArrear)
		}

	Result = {
		'Company' 		: Company,
		'BankDate'		: str(BankDate),
		'BaseCurrency' 	: BaseCurrency,
		'Result'  		: Result,
		'Total'			: Total
	}
	# return jsonify(Result = Result)

	return render_template("report/branchproductivity/branch_productivity.html", 
							Result = Result,
							Branch = BranchObj,
							AssetClass = AssetClassObj,
							LoanClass = LoanClass)






