#!/usr/bin/python
# -*- coding: utf-8 -*-
from app.mktcore.imports 			import *
from .forms 						import *
from sqlalchemy 					import *
from flask import session
import app.tools.mktreport 			as mktreport
import app.tools.mktprocedure 		as mktprocedure
import app.Report.master 			as masterreport
import ast
import importlib
from sqlalchemy.sql import func

@app.route("/Morakot/Report/Procedure/")
@app.route("/Morakot/Report/Procedure/<getID>", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeProcedureReport(getID=''):
	try:
			# Block check access right
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/Procedure/%s"%getID,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		Module = __import__("app.urlregister")
		ReportRow 		= []
		ListError 		= []
		Oprs 			= {}
		kwargs 			= {}
		DictCriteria 	= {}
		urlRequest 		= ''
		Report 			= "" # Report obj
		Criteria 		= ""
		HeaderTable 	= "" # Column head
		Result 			= "" # table body
		RowFormat 		= ""
		if getID:
			Report = MKT_REPORT.query.get(str(getID))
			if Report:
				Parameter 		= str(Report.FuntionName).replace('\r','') # this field is used for store param of function
				RowObj   		= str(Report.Row).replace('\r','') # this field used to format field
				Criteria 		=  mktprocedure.getCriteria(Parameter) # get parameter of function
				StrParam 		= ''
				urlRequest =	request.args

				for itemCriteria in Criteria:
					if request.args.get(itemCriteria):
						StrParam 		+= "'%s'"%request.args.get(itemCriteria)+"," # concate param
						kwargs.update({itemCriteria:request.args.get(itemCriteria)})
					else:
						StrParam += '""'+"," # if has param but don't have value
				StrParam = StrParam[0:-1] # remvoe the last comma ','
				
				#Block check access branch
				if request.args:
					if "Branch" in request.args:

						CheckAccessBranch = masterreport.validationAccessBranch({'Branch': [('', request.args.get("Branch"))]},Criteria)
					else:
						CheckAccessBranch = masterreport.validationAccessBranch(kwargs,Criteria)
					if CheckAccessBranch:
						ListError.append(CheckAccessBranch)

				Source 			= str(Report.Source) # procedure name
				HeaderTable 	= Report.ReportHeader.replace('\r','').split('\n') # report name
				HeaderTable 	= filter(None,HeaderTable) # the column of report, Remove empty strings from a list
				ReportRow 		= mktreport.getRowObj(Parameter)  # Example value [{"Branch":"S"}]
				RowFormat 	    = mktreport.getRowObj(RowObj)
				# print "ReportRow1",ReportRow1
				if Criteria:
					# for procedure that has param
					ProcedureName = "func.%s(%s)"%(Source,StrParam) #ex. getLoan("LoanID","LoanStatus")
				else:
					# for procedure that don't have param
					ProcedureName = 'func.%s()'%Source

				ProcedureObj    = db.session.query(eval(ProcedureName)) # select store procedure
				Result 			= mktprocedure.getProcedureResult(ProcedureObj,RowFormat,HeaderTable) # return lists of a list result

				# FormatedResult  = mktprocedure.getFomatField(Result,RowFormat)

			else:
				flash(msg_error+"Report not found!")
		return render_template("report/procedure.html",
								getID 		= getID,
								Criteria 	= Criteria,
								kwargs 		= kwargs,
								ReportRow   = ReportRow,
								ListError   = ListError,
								Report 		= Report,
								urlRequest 	= urlRequest,
								HeaderTable = HeaderTable,
								Result 		= Result,
								RowFormat 	= RowFormat)
	except Exception as e:
		print "Error",e
		return render_template("report/procedure.html",
								ListError= [e])
	else:
		pass
	finally:
		db.session.close()
