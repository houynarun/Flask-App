from app.mktcore.imports 		import *
from app.tools.mktcustomreport 	import *
from decimal 					import Decimal

import app.tools.user 			as mktuser
import app.tools.mktmoney 		as mktmoney
import app.tools.mktsetting 	as mktsetting
import app.tools.mktnbc			as mktnbc
import app.tools.mktdate 		as mktdate
import app.FinancialReport.views as FinancialReport

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	Branch 			=   TextField("Branch")

@app.route('/Morakot/Report/FRDBalanceSheet', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFRDBalanceSheet():
	try:
		Branch 		= request.args.get('Branch','ALL')
		Period 		= request.args.get('Period', '6')
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		Result 			=	getReportFRD01(Branch=Branch, Period=Period)
		FilterOption 	=	""
		AsOf 			= FinancialReport.getFormatPeriod(Period)
		PeriodDict 		= { '0':'Current Month',
							'1':'Current Previous Month',
							'2':'Previous Month',
							'3':'Year to Date',
							'4':'Current Previous Year',
							'5':'Previous Year',
							'6':'As of Today'}
		ReportingPeriod 	= PeriodDict[Period]

		return render_template('frdreport/frdbalancesheet.html',
								Result 				= Result,
								AsOf 				= AsOf,
								ReportingPeriod 	= ReportingPeriod,
								Branch 				= Branch,
								Period 				= Period)
	except:
		raise

def getReportFRD01(**kwargs):
	Branch 			= 	kwargs.get("Branch",'ALL')
	Period 			= 	kwargs.get("Period",'6')
	BankDateObj 	= 	mktdate.getBankDateObj()
	BankDate 		= 	BankDateObj.SystemDate
	BaseCurrency 	= 	mktsetting.getAccSetting().BaseCurrency
	ID 				= 	'N001'
	Result 			=	mktnbc.getNBCLineReport(ID, Period, Branch, ReportedDate='', Year='', Month='')
	Data 			= 	Result[0].get("Data",[])
	RecordRow 		= []

	for item in Data:
		row = dict(item)
		Description = row.get("Description","")
		AmountInRiel= row.get("AmountInRiels",0)
		OtherAmount = row.get("OtherAmount",0)
		LineFormat 	= row.get("LineFormat")
		LineType 	= row.get("LineType")
		style 		= ""
		ListNo = str(Description).split()[0] if str(Description).split() else ''
		try:
			No = ListNo
			ListNo = float(ListNo[0])
		except Exception, e:
			No = ''
		if len(No) != 0:
			Description = Description[len(No):]

		TotalAmount = float("%.2f" % AmountInRiel) + float("%.2f" % OtherAmount)
		if LineType == 'CH':
			RecordRow.append({	1: {"Value":Description}
						})
		else:
			RecordRow.append({	1: {"Value":No},
								2: {"Value":Description},
								3: {"Value":mktmoney.formatNumber(TotalAmount, 1, 0) if Description else '-'}
							})

	return RecordRow