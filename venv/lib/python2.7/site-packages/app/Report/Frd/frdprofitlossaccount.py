from app.mktcore.imports 		import *
from app.tools.mktcustomreport 	import *
from decimal 					import Decimal
from app.GLBalance.models       import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP


import app.tools.user 			as mktuser
import app.tools.mktmoney 		as mktmoney
import app.tools.mktsetting 	as mktsetting
import app.tools.mktnbc			as mktnbc
import app.tools.mktdate 		as mktdate
import app.FinancialReport.views as FinancialReport


class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	Branch 			=   TextField("Branch")

@app.route('/Morakot/Report/FRDProfitLossAccount', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFRDProfitLossAccount():
	try:
		Branch 		= request.args.get('Branch','ALL')
		Period 		= request.args.get('Period','6')
		Month  		= request.args.get("Month") 	if 'Month' 	in request.args 	else ""
		Year    	= request.args.get("Year") 		if 'Year' 	in request.args 	else ""
		Audit   	= request.args.get("Audit") 	if 'Audit' 	in request.args 	else "1"
		GroupMonth 	= None       
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		GroupYear   	=   db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)
		if Year:
			GroupMonth = db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
									group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
                           			filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Result 			=	getReportFRD01(Branch=Branch,Period=Period,Year=Year,Month=Month,Audit=Audit)
		AuditedStatus   =   mkttool.getAudited(Year, Month)['Audit']

		# print "Result",Result
		Parameters 		= 	{"Branch": Branch}
		FilterOption 	=	""
		AsOf 			= FinancialReport.getFormatPeriod(Period)

		PeriodDict 		= { '0':'Current Month',
							'1':'Current Previous Month',
							'2':'Previous Month',
							'3':'Year to Date',
							'4':'Current Previous Year',
							'5':'Previous Year',
							'6':'As of Today'}
		ReportingPeriod 	= PeriodDict[Period]

		return render_template('frdreport/frdprofitlossaccount.html',
								Result 				= Result,
								AsOf 				= AsOf,
								ReportingPeriod 	= ReportingPeriod,
								Branch 				= Branch,
								Period 				= Period,
								GroupYear 			= GroupYear,
								GroupMonth 			= GroupMonth,
								Month 				= Month,
								Year 				= Year,
								Audit 				= Audit,
								AuditedStatus 		= AuditedStatus)
	except:
		raise

def getReportFRD01(**kwargs):
	Branch 			= 	kwargs.get("Branch",'ALL')
	Period 			= 	kwargs.get("Period",'6')
	Month   		=   kwargs.get("Month")
	Year 		   	= 	kwargs.get("Year")
	Audit 			= 	kwargs.get("Audit")
	BankDateObj 	= 	mktdate.getBankDateObj()
	BankDate 		= 	BankDateObj.SystemDate
	BaseCurrency    = 	mktsetting.getAccSetting().BaseCurrency
	ID = 'N002'
	Result 			=	mktnbc.getNBCLineReport(ID, Period , Branch, ReportedDate='', Year=Year, Month=Month, Audit=Audit)
	Data 			= 	Result[0].get("Data",[])
	RecordRow 		= []
	DivideBy 		= 1000000 # 1M
	for item in Data:

		row = dict(item)
		Description = row.get("Description","")
		YTDBalance 	= row.get("YTDBalance",0)
		YTDBalance 	= float(YTDBalance)/ DivideBy if YTDBalance else YTDBalance # to display amount in million
		LineType 	= row.get("LineType")

		ListNo = str(Description).split()[0] if str(Description).split() else ''
		try:
			No = ListNo
			ListNo = float(ListNo[0])
		except Exception, e:
			No = ''
		if len(No) != 0:
			Description = Description[len(No):]

		RecordRow.append({	1: {"Value":No},
							2: {"Value":Description if Description else '-'},
							3: {"Value":mktmoney.formatNumber(YTDBalance, 1, 3) }
						})
	return RecordRow