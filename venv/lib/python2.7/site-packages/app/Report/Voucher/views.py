from app.mktcore.imports 			import *

from app.JournalEntry.models 		import *
from app.Category.models 			import *
from app.Currency.models 			import *
from app.MultiJournal.models 		import *
from app.MultiJournalII.models 		import *
from app.VoucherType.models 		import *
from app.Journal.models 			import *
from app.Transaction.models 		import *
from app.Company.models 			import *
from app.FundTransfer.models 		import *
from app.ForeignExchange.models 	import *
from app.Teller.models 				import *
from app.GL.models 					import MKT_GL_MAPPING_DE
from app.IncomeExpenseBooking.models 	import *
import copy
import app.tools.mktmoney 			as mktmoney
import app.tools.mktdate 			as mktdate
import app.tools.user 				as mktuser
import app.tools.mktsetting 		as mktsetting
import app.tools.mktaccounting 		as mktaccounting
import collections


import app.tools.mktsetting 	as mktsetting
ExtendClass 			= 	mktsetting.ExtendModule()
ACC_ENTRY_MODULE_PREFIX =	ExtendClass.getUrlExtend(DictUrl=ACC_ENTRY_MODULE_PREFIX)

@app.route("/Morakot/Voucher/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeVoucher():
	'''
		Voucher
		1. Search all record in INAU Table
		2. If not found in INAU, will search in LIVE Table
		3. If not found in LIVE, will search in HIST Table
		4. If not found in all this three tables, will search in JOURNAL Table
		5. If not found in JOURNAL, Message: Record not found.

		Update: * Kimchhorng: Dec 2, 2016
	'''
	#CASH RECEIPT VOUCHER
	ErrorMsg = []
	DicResult = {}
	# Block check access right
	getCheck 	= checkAccess ("/Morakot/Voucher/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("report/voucher/voucher.html",ErrorMsg=ErrorMsg)
	
	ID 				= request.args.get("ID").strip() if "ID" in request.args else ""
	VoucherType 	= request.args.get("VoucherType").strip() if "VoucherType" in request.args else ""
	ShowGLID 		= request.args.get("ShowGLID").strip() if "ShowGLID" in request.args else ""
	ShowLogo	 	= request.args.get("ShowLogo").strip() if "ShowLogo" in request.args else "No"
	ShowPrintedBy	= request.args.get("ShowPrintedBy").strip() if "ShowPrintedBy" in request.args else "No"
	ShowReceivedBy 	= request.args.get("ShowReceivedBy").strip() if "ShowReceivedBy" in request.args else "No"
	ShowReviewedBy	= request.args.get("ShowReviewedBy").strip() if "ShowReviewedBy" in request.args else "No"
	ShowFooterData	= request.args.get("ShowFooterData").strip() if "ShowFooterData" in request.args else "No"
	CurrencyObj 	= MKT_CURRENCY.query
	BankDate 		= mktdate.getBankDate()
	Company			= MKT_COMPANY.query.get('SYSTEM')
	VoucherTypeObj 	= MKT_VOUCHER_TYPE.query
	User    		=   mktuser.getUser()
	Teller 			= ['DP','WD','TT','IP','EP','CB','CC','WB','WC'] # Teller
	FundTransfer 	= ['FD','FW','FA','FT','FS'] # FundTransfer
	ForeignExchange = ['BF','SF'] # Foregin Exchange

	if request.args:
		#Multi Journal
		if ID[0:2] == 'MJ': 
			DicResult, VoucherType = getVoucherMultiJournal(ID)
			VoucherType = request.args.get("VoucherType").strip() if "VoucherType" in request.args else VoucherType
		#Journal Entry (No check reverse)
		elif ID[0:2] == 'JE': 
			QueryObj 	= getJournalEntry(ID)
			if ID[-1:] == 'R':
				DicResult 	= getVoucherNotAutoReverse(ID, QueryObj) if QueryObj else getVoucherJournal(ID)
			else:
				DicResult 	= getVoucherAutoReverse(ID, QueryObj) if QueryObj else getVoucherJournal(ID)
		#Fund Transfer (No check reverse)
		elif ID[0:2] in FundTransfer: 
			QueryObj 	= getQueryObj (ID, MKT_FUND_TRANSFER, MKT_FUND_TRANSFER_INAU, MKT_FUND_TRANSFER_HIST)
			if ID[-1:] == 'R':
				DicResult 	= getVoucherNotAutoReverse(ID, QueryObj) if QueryObj else getVoucherJournal(ID)
			else:
				DicResult 	= getVoucherAutoReverse(ID, QueryObj) if QueryObj else getVoucherJournal(ID)
		#Foreign Exchange (Check reverse)
		elif ID[0:2] in ForeignExchange:
			QueryObj 	= getQueryObj(ID, MKT_FOREIGN_EXCHANGE, MKT_FOREIGN_EXCHANGE_INAU, MKT_FOREIGN_EXCHANGE_HIST)
			if ID[-1:] == 'R':
				DicResult 	= getVoucherNotAutoReverse(ID, QueryObj) if QueryObj else getVoucherJournal(ID)
			else:
				DicResult 	= getVoucherAutoReverse(ID, QueryObj) if QueryObj else getVoucherJournal(ID)
		# Teller (Check reverse)
		elif ID[0:2] in Teller:
			QueryObj 	= getTellerObj(ID)
			if ID[-1:] == 'R':
				DicResult 	= getVoucherNotAutoReverse(ID, QueryObj) if QueryObj else getVoucherJournal(ID)
			else:
				DicResult 	= getVoucherAutoReverse(ID, QueryObj) if QueryObj else getVoucherJournal(ID)
		#Journal
		else:
			DicResult = getVoucherJournal(ID)

	return render_template("report/voucher/voucher.html",
							ErrorMsg 		= ErrorMsg,
							DicResult		= DicResult,
							float			= float,
							Company 		= Company,
							Prefix 			= ACC_ENTRY_MODULE_PREFIX,
							toMoney 		= mktmoney.toMoney,
							formatNumber	= mktmoney.formatNumber,
							CurrencyObj 	= CurrencyObj,
							ID 				= ID,
							PrintBy 		= User.DisplayName,
							PrintDate 		= str(BankDate),
							VoucherTypeObj	= VoucherTypeObj,
							VoucherType 	= VoucherType,
							ShowGLID 		= ShowGLID,
							ShowLogo		= ShowLogo,
							ShowPrintedBy 	= ShowPrintedBy,
							ShowReceivedBy  = ShowReceivedBy,
							ShowReviewedBy 	= ShowReviewedBy,
							ShowFooterData	= ShowFooterData,
							)

def getDisplayName(User):
	UserObj = MKT_USER.query.get(User)
	if UserObj:
		DisplayName = UserObj.DisplayName
	else:
		DisplayName = User
	return DisplayName

def getCategory(ID):
	CategoryObj = MKT_CATEGORY.query.get(ID)
	if CategoryObj:
		Category = CategoryObj.Description
	else:
		Category = ""
	return Category

def getGLID(GLKey):
	GLObj 	= MKT_GL_MAPPING_DE.query.filter(MKT_GL_MAPPING_DE.ConsolKey == GLKey).first()
	GLID 	= ""
	if GLObj:
		GLID = GLObj.ID
	
	return GLID

def getQueryObj(ID, Live, Inau, Hist):
	QueryObj = Inau.query.get(ID)
	if not QueryObj:
		QueryObj = Live.query.get(ID)
	if not QueryObj:
		QueryObj = Hist.query.filter(Hist.ID.ilike(str(ID)+'%')).first()
	return QueryObj

def getTellerObj(ID, **kwargs):

	QueryObj = db.session.query(MKT_TELLER_INAU.TranDate,
								MKT_TELLER_INAU.DrCategory,
								MKT_TELLER_INAU.CrCategory,
								MKT_TELLER_INAU.TDrAccount.label('DrAccount'),
								MKT_TELLER_INAU.TCrAccount.label('CrAccount'),
								MKT_TELLER_INAU.DrCurrency,
								MKT_TELLER_INAU.CrCurrency,
								MKT_TELLER_INAU.Amount,
								MKT_TELLER_INAU.Note,
								MKT_TELLER_INAU.Branch,
								MKT_TELLER_INAU.Authorizer,
								MKT_TELLER_INAU.Inputter).\
						filter(MKT_TELLER_INAU.ID == ID).first()
	if not QueryObj:
		QueryObj = db.session.query(MKT_TELLER.TranDate,
									MKT_TELLER.DrCategory,
									MKT_TELLER.CrCategory,
									MKT_TELLER.TDrAccount.label('DrAccount'),
									MKT_TELLER.TCrAccount.label('CrAccount'),
									MKT_TELLER.DrCurrency,
									MKT_TELLER.CrCurrency,
									MKT_TELLER.Amount,
									MKT_TELLER.Note,
									MKT_TELLER.Branch,
									MKT_TELLER.Authorizer,
									MKT_TELLER.Inputter).\
							filter(MKT_TELLER.ID == ID).first()
	if not QueryObj:
		QueryObj = db.session.query(MKT_TELLER_HIST.TranDate,
									MKT_TELLER_HIST.DrCategory,
									MKT_TELLER_HIST.CrCategory,
									MKT_TELLER_HIST.TDrAccount.label('DrAccount'),
									MKT_TELLER_HIST.TCrAccount.label('CrAccount'),
									MKT_TELLER_HIST.DrCurrency,
									MKT_TELLER_HIST.CrCurrency,
									MKT_TELLER_HIST.Amount,
									MKT_TELLER_HIST.Note,
									MKT_TELLER_HIST.Branch,
									MKT_TELLER_HIST.Authorizer,
									MKT_TELLER_HIST.Inputter).\
							filter(MKT_TELLER_HIST.ID.ilike(str(ID)+'%')).first()
	return QueryObj

def getJournalEntry(ID,**kwargs ):
	QueryObj = db.session.query(MKT_JOURNAL_ENTRY_INAU.TransactionDate.label("TranDate"),
								MKT_JOURNAL_ENTRY_INAU.DebitCategory.label("DrCategory"),
								MKT_JOURNAL_ENTRY_INAU.CreditCategory.label("CrCategory"),
								MKT_JOURNAL_ENTRY_INAU.DrAccount,
								MKT_JOURNAL_ENTRY_INAU.CrAccount,
								MKT_JOURNAL_ENTRY_INAU.Currency.label("DrCurrency"),
								MKT_JOURNAL_ENTRY_INAU.Currency.label("CrCurrency"),
								MKT_JOURNAL_ENTRY_INAU.Amount,
								MKT_JOURNAL_ENTRY_INAU.Note,
								MKT_JOURNAL_ENTRY_INAU.Branch,
								MKT_JOURNAL_ENTRY_INAU.Authorizer,
								MKT_JOURNAL_ENTRY_INAU.Inputter).\
						filter(MKT_JOURNAL_ENTRY_INAU.ID == ID).first()
	if not QueryObj:
		QueryObj = db.session.query(MKT_JOURNAL_ENTRY.TransactionDate.label("TranDate"),
									MKT_JOURNAL_ENTRY.DebitCategory.label("DrCategory"),
									MKT_JOURNAL_ENTRY.CreditCategory.label("CrCategory"),
									MKT_JOURNAL_ENTRY.DrAccount,
									MKT_JOURNAL_ENTRY.CrAccount,
									MKT_JOURNAL_ENTRY.Currency.label("DrCurrency"),
									MKT_JOURNAL_ENTRY.Currency.label("CrCurrency"),
									MKT_JOURNAL_ENTRY.Amount,
									MKT_JOURNAL_ENTRY.Note,
									MKT_JOURNAL_ENTRY.Branch,
									MKT_JOURNAL_ENTRY.Authorizer,
									MKT_JOURNAL_ENTRY.Inputter).\
							filter(MKT_JOURNAL_ENTRY.ID == ID).first()
	if not QueryObj:
		QueryObj = db.session.query(MKT_JOURNAL_ENTRY_HIST.TransactionDate.label("TranDate"),
									MKT_JOURNAL_ENTRY_HIST.DebitCategory.label("DrCategory"),
									MKT_JOURNAL_ENTRY_HIST.CreditCategory.label("CrCategory"),
									MKT_JOURNAL_ENTRY_HIST.DrAccount,
									MKT_JOURNAL_ENTRY_HIST.CrAccount,
									MKT_JOURNAL_ENTRY_HIST.Currency.label("DrCurrency"),
									MKT_JOURNAL_ENTRY_HIST.Currency.label("CrCurrency"),
									MKT_JOURNAL_ENTRY_HIST.Amount,
									MKT_JOURNAL_ENTRY_HIST.Note,
									MKT_JOURNAL_ENTRY_HIST.Branch,
									MKT_JOURNAL_ENTRY_HIST.Authorizer,
									MKT_JOURNAL_ENTRY_HIST.Inputter).\
							filter(MKT_JOURNAL_ENTRY_HIST.ID.ilike(str(ID)+'%')).first()
	return QueryObj

# Functions to get DictResult
def getVoucherMultiJournal(ID,**kwargs):
	Authorizer 		= ''
	Authorizeon 	= ''
	Inputter 		= ''
	Createdon 		= ''
	VoucherType 	= ''

	QueryObj 	= []
	DebitObj 	= []
	CreditObj	= []
	DicResult 	= {}
	IDHist 		= ''
	ID 			= str(ID).strip()
	CurrencyObj = MKT_CURRENCY.query
	# Un-authorize
	QueryObj 	= MKT_MULTI_JOURNAL_II_INAU.query.get(ID)
	DebitTable 	= MKT_MULTI_DEBIT_II_INAU
	CreditTable = MKT_MULTI_CREDIT_II_INAU

	if not QueryObj:
		#live
		QueryObj = MKT_MULTI_JOURNAL_II.query.get(ID)
		DebitTable 	= MKT_MULTI_DEBIT_II
		CreditTable = MKT_MULTI_CREDIT_II

	if not QueryObj:
		#Hist
		IDHist 		= '%s@0'%ID
		QueryObj 	= MKT_MULTI_JOURNAL_II_HIST.query.get(IDHist)
		DebitTable 	= MKT_MULTI_DEBIT_II_HIST
		CreditTable = MKT_MULTI_CREDIT_II_HIST

	if IDHist:
		ID = IDHist

	DebitObj = db.session.query(DebitTable.ID,
								DebitTable.DebitCategory,
								DebitTable.DebitTransaction,
								DebitTable.DebitAmount,
								MKT_CATEGORY.Description.label("CategoryName"),
								DebitTable.DebitNote).\
						filter(DebitTable.ID==ID).\
						join(MKT_CATEGORY,MKT_CATEGORY.ID == DebitTable.DebitCategory).\
						order_by(DebitTable.DRID.asc())

	CreditObj = db.session.query(CreditTable.ID,
								CreditTable.CreditCategory,
								CreditTable.CreditTransaction,
								CreditTable.CreditAmount,
								MKT_CATEGORY.Description.label("CategoryName"),
								CreditTable.CreditNote).\
						filter(CreditTable.ID==ID).\
						join(MKT_CATEGORY,MKT_CATEGORY.ID == CreditTable.CreditCategory).\
						order_by(CreditTable.CRID.asc())
	
	if QueryObj:
		VoucherTypeObj 	= MKT_VOUCHER_TYPE.query.get(str(QueryObj.VoucherType))
		if VoucherTypeObj:
			VoucherType = VoucherTypeObj.ID
		FirstRecord = QueryObj
		Authorizer 	= getDisplayName(FirstRecord.Authorizer)
		if Authorizer:
			Authorizeon = FirstRecord.Authorizeon
		Inputter 	= getDisplayName(FirstRecord.Inputter)
		if Inputter:
			Createdon 	= FirstRecord.Createdon

		RecordRow = []
		TotalDebit = float(0)
		TotalCredit = float(0)
		for row in DebitObj:
			RecordCol = {'TranDate'		:QueryObj.TranDate,
						'CategoryID'	:row.DebitCategory,
						'CategoryName'	:row.CategoryName,
						'DrAcc'			:'',
						'CrAcc'			:'',
						'Currency'		:QueryObj.Currency,
						'DrAmount'		:row.DebitAmount,
						'CrAmount'		:0,
						'Description'	:row.DebitNote,
						'GLID'			:getGLID(mktaccounting.getConsolKey(row.DebitCategory, QueryObj.Currency))
						}
			RecordRow.append(RecordCol)
			TotalDebit += float(row.DebitAmount)

		for row in CreditObj:
			RecordCol = {'TranDate'		:QueryObj.TranDate,
						'CategoryID'	:row.CreditCategory,
						'CategoryName'	:row.CategoryName,
						'DrAcc'			:'',
						'CrAcc'			:'',
						'Currency'		:QueryObj.Currency,
						'DrAmount'		:0,
						'CrAmount'		:row.CreditAmount,
						'Description'	:row.CreditNote,
						'GLID'			:getGLID(mktaccounting.getConsolKey(row.CreditCategory, QueryObj.Currency))
						}
			RecordRow.append(RecordCol)
			TotalCredit += float(row.CreditAmount) 
		TotalDebit = mktmoney.toMoney(float(TotalDebit),CurrencyObj.get(QueryObj.Currency))
		TotalCredit = mktmoney.toMoney(float(TotalCredit),CurrencyObj.get(QueryObj.Currency))
		DicResult = {
				'Result' 		: RecordRow,
				'Authorizer' 	: Authorizer,
				'Authorizeon' 	: Authorizeon,
				'Inputter'		: Inputter,
				'Createdon'		: Createdon,
				'Reference'		: ID,
				'Branch' 		: QueryObj.Branch,
				'Date'			: QueryObj.TranDate,
				'Currency'		: QueryObj.Currency,
				'TotalDebit'	: TotalDebit,
				'TotalCredit'	: TotalCredit
		}
	else:
		flash(msg_warning+"%s Record not found."%ID)
	return DicResult, VoucherType

def getVoucherJournal(ID,**kwargs):
	Authorizer 	= ""
	Authorizeon = ""
	Inputter	= ""
	Createdon	= ""
	CurrencyObj = MKT_CURRENCY.query
	AccSetting 	= mktsetting.getAccSetting()
	DicResult 	= {}
	if AccSetting:
		PositionCat 	=	AccSetting.PositionCat
		EquivalentCat 	=	AccSetting.EquivalentCat
		CheckList 		= [ AccSetting.ChargeTran, 
							AccSetting.InterestTran, 
							AccSetting.PrincipalTran,
							AccSetting.DisbursedTran,
							AccSetting.CrAccrIntTran 
						  ]
	if ID[0:2] == 'LC':

		QueryObj = db.session.query(MKT_JOURNAL).\
					filter(MKT_JOURNAL.Transaction.in_(CheckList)).\
					filter(MKT_JOURNAL.Reference.in_([ID,'PD'+ID])).\
					order_by(MKT_JOURNAL.TransactionDate.asc(), MKT_JOURNAL.ID.asc())
	else:
		QueryObj = db.session.query(MKT_JOURNAL).filter(MKT_JOURNAL.Reference==ID).\
					order_by(MKT_JOURNAL.TransactionDate.asc(), MKT_JOURNAL.ID.asc())

	QueryObj = QueryObj.filter(~MKT_JOURNAL.CategoryID.in_([PositionCat,EquivalentCat]))
	DebitObj  = QueryObj.filter(MKT_JOURNAL.DebitCredit=='Dr').all()
	CreditObj = QueryObj.filter(MKT_JOURNAL.DebitCredit=='Cr').all()
	# When ID is "", click on show button will show nothing.
	if ID: 
		try:
			if QueryObj:
				FirstRecord = QueryObj.first()
				Authorizer 	= getDisplayName(FirstRecord.Authorizer)
				if Authorizer:
					Authorizeon = FirstRecord.TransactionDate
				Inputter 	= getDisplayName(FirstRecord.Inputter)
				if Inputter:
					Createdon 	= FirstRecord.TransactionDate
				
			RecordRow = []
			TotalDebit = 0
			TotalCredit = 0
			# Debit 
			for row in DebitObj:
				RecordCol = {'TranDate'		:row.TransactionDate,
							'CategoryID'	:row.CategoryID,
							'CategoryName'	:getCategory(row.CategoryID),
							'DrAcc'			:'',
							'CrAcc'			:'',
							'Currency'		:row.Currency,
							'DrAmount'		:row.Amount,
							'CrAmount'		:0,
							'Description'	:row.Description,
							'GLID'			:getGLID(mktaccounting.getConsolKey(row.CategoryID, row.Currency))
							}
				RecordRow.append(RecordCol)
				TotalDebit += float(RecordCol['DrAmount'])
				TotalDebit = mktmoney.toMoney(float(TotalDebit),CurrencyObj.get(RecordCol['Currency']))
			# Credit
			for row in CreditObj:
				RecordCol = {'TranDate'		:row.TransactionDate,
							'CategoryID'	:row.CategoryID,
							'CategoryName'	:getCategory(row.CategoryID),
							'DrAcc'			:'',
							'CrAcc'			:'',
							'Currency'		:row.Currency,
							'DrAmount'		:0,
							'CrAmount'		:row.Amount,
							'Description'	:row.Description,
							'GLID'			:getGLID(mktaccounting.getConsolKey(row.CategoryID, row.Currency))
							}
				RecordRow.append(RecordCol)
				TotalCredit += float(RecordCol['CrAmount'])
				TotalCredit = mktmoney.toMoney(float(TotalCredit),CurrencyObj.get(RecordCol['Currency']))

			DicResult = {
					'Result' 		: RecordRow,
					'Authorizer' 	: Authorizer,
					'Authorizeon' 	: Authorizeon,
					'Inputter'		: Inputter,
					'Createdon'		: Createdon,
					'Reference'		: ID,
					'Branch'		: FirstRecord.Branch,
					'Date'			: FirstRecord.TransactionDate,
					'Currency'		: FirstRecord.Currency,
					'TotalDebit'	: TotalDebit,
					'TotalCredit'	: TotalCredit
			}
		except:
			flash(msg_warning+"%s Record not found."%ID)
	return DicResult

def getVoucherAutoReverse(ID, QueryObj, **kwargs):
	'''
		Journal Entry:	JE
		Fund Transfer:	'FD','FW','FA','FT','FS'
		These module will auto reverse fields when reverse record. 
	'''
	Authorizer 		= ""
	Authorizeon 	= ""
	Inputter		= ""
	Createdon		= ""
	CurrencyObj 	= MKT_CURRENCY.query
	RecordRow 	= []
	DicResult 	= {}
	# Check Audit trail
	if QueryObj:
		Authorizer 	= getDisplayName(QueryObj.Authorizer)
		if Authorizer:
			Authorizeon = QueryObj.TranDate
		Inputter 	= getDisplayName(QueryObj.Inputter)
		if Inputter:
			Createdon 	= QueryObj.TranDate

		ResultDebit = {	'TranDate'		:	QueryObj.TranDate,
						'CategoryID'	:	QueryObj.DrCategory,
						'CategoryName'	:	getCategory(QueryObj.DrCategory),
						'DrAcc'			:	'',
						'CrAcc'			:	'',
						'Currency'		:	QueryObj.DrCurrency,
						'DrAmount'		:	QueryObj.Amount,
						'CrAmount'		:	0,
						'Description'	:	QueryObj.Note,
						'Account'		: 	QueryObj.DrAccount,
						'GLID'			:	getGLID(mktaccounting.getConsolKey(QueryObj.DrCategory, QueryObj.DrCurrency))
						}

		ResultCredit = {'TranDate'		:	QueryObj.TranDate,
						'CategoryID'	:	QueryObj.CrCategory,
						'CategoryName'	:	getCategory(QueryObj.CrCategory),
						'DrAcc'			:	'',
						'CrAcc'			:	'',
						'Currency'		:	QueryObj.CrCurrency,
						'DrAmount'		:	0,
						'CrAmount'		:	QueryObj.Amount,
						'Description'	:	QueryObj.Note,
						'Account'		: 	QueryObj.CrAccount,
						'GLID'			:	getGLID(mktaccounting.getConsolKey(QueryObj.CrCategory, QueryObj.CrCurrency))
					}

		# For Foreign Exchange: In BF CreditAmount is ExchangeAmount, and in SF DebitAmount is ExchangeAmount
		if ID[0:2] == 'BF':
			ResultCredit.update({'CrAmount': QueryObj.ExchangeAmount})
		elif ID[0:2] == 'SF':
			ResultDebit.update({'DrAmount': QueryObj.ExchangeAmount})
		# Calculate Total based on type of currency
		TotalDebit = mktmoney.toMoney(float(ResultDebit['DrAmount']),CurrencyObj.get(ResultDebit['Currency']))
		TotalCredit = mktmoney.toMoney(float(ResultCredit['CrAmount']),CurrencyObj.get(ResultCredit['Currency']))

		RecordRow.append(ResultDebit)
		RecordRow.append(ResultCredit)

		if ID[0:2] in ['IP','EP']:
			IEPObj 	= getQueryObj (ID, MKT_INCOME_EXPENSE_BOOKING, MKT_INCOME_EXPENSE_BOOKING_INAU, MKT_INCOME_EXPENSE_BOOKING_HIST)

			if IEPObj:
				IPResultCredit = {}
				EPResultCredit = {}
				IPResultDebit = {}
				EPResultDebit = {}

				if ID[0:2] == 'IP':
					IPResultCredit.update({
						'CategoryID'	: 	IEPObj.IncomeExpenseCat,
						'Description'	: 	IEPObj.Note,
						'CrAmount'		:	IEPObj.Amount,
						'DrAmount'		:	0,
						'Currency'		:	IEPObj.Currency,
						'Account'		: 	'',
						'CategoryName'	:	getCategory(IEPObj.IncomeExpenseCat)
						})
					IPResultDebit = copy.deepcopy(ResultCredit)
					IPResultDebit.update({'CrAmount': 0,'DrAmount': ResultCredit.get('CrAmount')})

					RecordRow.append(IPResultDebit)
					RecordRow.append(IPResultCredit)
				
				elif ID[0:2] == 'EP':
					EPResultDebit.update({
						'CategoryID'	: 	IEPObj.IncomeExpenseCat,
						'Description'	: 	IEPObj.Note,
						'DrAmount'		:	IEPObj.Amount,
						'CrAmount'		:	0,
						'Currency'		:	IEPObj.Currency,
						'Account'		: 	'',
						'CategoryName'	:	getCategory(IEPObj.IncomeExpenseCat)
						})
					EPResultCredit = copy.deepcopy(ResultDebit)
					EPResultCredit.update({'CrAmount': ResultDebit.get('DrAmount'),'DrAmount': 0})

					RecordRow.append(EPResultDebit)
					RecordRow.append(EPResultCredit)

				TotalDebit = mktmoney.toMoney(float(ResultDebit['DrAmount'])*2,CurrencyObj.get(ResultDebit['Currency']))
				TotalCredit = mktmoney.toMoney(float(ResultCredit['CrAmount'])*2,CurrencyObj.get(ResultCredit['Currency']))
		
		DicResult = {
				'Result' 		: RecordRow,
				'Authorizer' 	: Authorizer,
				'Authorizeon' 	: Authorizeon,
				'Inputter'		: Inputter,
				'Createdon'		: Createdon,
				'Reference'		: ID,
				'Branch' 		: QueryObj.Branch,
				'Date'			: QueryObj.TranDate,
				'Currency'		: QueryObj.DrCurrency,
				'TotalDebit'	: TotalDebit,
				'TotalCredit'	: TotalCredit
		}
	# raise
	return DicResult

def getVoucherNotAutoReverse(ID, QueryObj, **kwargs):
	'''
		Foreign Exchange: 	'BF','SF'
		Teller Function:  	'DP','WD','TT','IP','EP','CB','CC','WB','WC'
		These module will not reverse fields when reverse record. So Credit becomes Debit and Debit becomes Credit.
	'''
	Authorizer 		= ""
	Authorizeon 	= ""
	Inputter		= ""
	Createdon		= ""
	CurrencyObj 	= MKT_CURRENCY.query
	RecordRow 	= []
	DicResult	= {}
	# Check Audit trail
	if QueryObj:
		Authorizer 	= getDisplayName(QueryObj.Authorizer)
		if Authorizer:
			Authorizeon = QueryObj.TranDate
		Inputter 	= getDisplayName(QueryObj.Inputter)
		if Inputter:
			Createdon 	= QueryObj.TranDate	
	
		ResultDebit = {	'TranDate'		:	QueryObj.TranDate,
						'CategoryID'	:	QueryObj.CrCategory,
						'CategoryName'	:	getCategory(QueryObj.CrCategory),
						'DrAcc'			:	'',
						'CrAcc'			:	'',
						'Currency'		:	QueryObj.CrCurrency,
						'DrAmount'		:	QueryObj.Amount,
						'CrAmount'		:	0,
						'Description'	:	QueryObj.Note,
						'Account'		: 	QueryObj.CrAccount,
						'GLID'			:	getGLID(mktaccounting.getConsolKey(QueryObj.CrCategory, QueryObj.CrCurrency))
						}

		ResultCredit = {'TranDate'		:	QueryObj.TranDate,
						'CategoryID'	:	QueryObj.DrCategory,
						'CategoryName'	:	getCategory(QueryObj.DrCategory),
						'DrAcc'			:	'',
						'CrAcc'			:	'',
						'Currency'		:	QueryObj.DrCurrency,
						'DrAmount'		:	0,
						'CrAmount'		:	QueryObj.Amount,
						'Description'	:	QueryObj.Note,
						'Account'		: 	QueryObj.DrAccount,
						'GLID'			:	getGLID(mktaccounting.getConsolKey(QueryObj.DrCategory, QueryObj.DrCurrency))
						} 
		# When reversing, For Foreign Exchange: In BF DebitAmount is ExchangeAmount, and in SF CreditAmount is ExchangeAmount
		if ID[0:2] == 'BF':
			ResultDebit.update({'DrAmount': QueryObj.ExchangeAmount})
		elif ID[0:2] == 'SF':
			ResultCredit.update({'CrAmount': QueryObj.ExchangeAmount})
		# Calculate Total based on type of currency
		TotalDebit = mktmoney.toMoney(float(ResultDebit['DrAmount']),CurrencyObj.get(ResultDebit['Currency']))
		TotalCredit = mktmoney.toMoney(float(ResultCredit['CrAmount']),CurrencyObj.get(ResultCredit['Currency']))

		RecordRow.append(ResultDebit)
		RecordRow.append(ResultCredit)
		DicResult = {
				'Result' 		: RecordRow,
				'VoucherType'	: '',
				'Authorizer' 	: Authorizer,
				'Authorizeon' 	: Authorizeon,
				'Inputter'		: Inputter,
				'Createdon'		: Createdon,
				'Reference'		: ID,
				'Branch' 		: QueryObj.Branch,
				'Date'			: QueryObj.TranDate,
				'Currency'		: QueryObj.DrCurrency,
				'TotalDebit'	: TotalDebit,
				'TotalCredit'	: TotalCredit
		}
	return DicResult


