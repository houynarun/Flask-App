from app.mktcore.imports 		import *
import app.tools.mktmessage 	as mktmessage
import app.tools.mktdate		as mktdate
import app.tools.mktcharge 		as mktcharge
import app.tools.mktaddress 	as mktaddress
import app.tools.user 			as mktuser
from app.LoanContract.models 	import *
from app.AccEntry.models 		import *
from decimal 					import Decimal
from app.tools.mktcustomreport   import *
import app.tools.mktmoney 		as mktmoney
from app.Officer.models 		import *
from app.LoanProduct.models 	import *
from app.Customer.models 		import *
import app.tools.mktsetting     as mktsetting
import app.resource.report.mktuserfunction as mktuserfunction
from app.LoanAmendment.models 	import *
from app.RepaymentSchedule.models import *
from app.PD.models 				import *
from sqlalchemy 				import or_
import app.tools.mktmoney as mktmoney


class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	OfficerID 			=   TextField("Officer ID")
	ProductID 			=	TextField("Product ID")
	ValueDate      		=   DateTextField("ValueDate")
	CloseDate  			= 	DateTextField("CloseDate")

@app.route('/Morakot/Report/ClosedLoans', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getClosedLoans():
	""" Route to view each report """
	try:		
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		OfficerID 		=	request.args.get("OfficerID") if "OfficerID" in request.args else ""
		ProductID 		=	request.args.get("ProductID") if "ProductID" in request.args else ""
		ValueDate 		= 	request.args.get("ValueDate") if "ValueDate" in request.args else ""
		CloseDate  		= 	request.args.get("CloseDate") if "CloseDate" in request.args else ""
		Result 			=	getClosedLoansReport(Branch=Branch,OfficerID=OfficerID,ProductID=ProductID,ValueDate=ValueDate,CloseDate=CloseDate)
		Parameters 		= 	{"Branch": Branch,"OfficerID":OfficerID,"ProductID":ProductID,"ValueDate":ValueDate,"CloseDate":CloseDate}
		FilterOption 	=	""

		SearchForm      =   FRM_CUSTOM_REPORT_SEARCH_EX()

		return CUSTOM_REPORT.getCustomReportTemplate(Parameters     =   Parameters,
													Result          =   Result,
													FilterOption    =   FilterOption,
													SearchForm      =   SearchForm)	
	except:
		raise

@app.route('/Morakot/Report/ClosedLoans/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getClosedLoansExport():
	""" Route to view each report """
	try:
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else ""
		OfficerID 		=	request.args.get("OfficerID") if "OfficerID" in request.args else ""
		ProductID 		=	request.args.get("ProductID") if "ProductID" in request.args else ""
		ValueDate 		= 	request.args.get("ValueDate") if "ValueDate" in request.args else "" 
		CloseDate 		=   request.args.get("CloseDate") if "CloseDate" in request.args else "" 

		Result 			=	getClosedLoansReport(Branch=Branch,OfficerID=OfficerID,ProductID=ProductID,ValueDate=ValueDate,CloseDate=CloseDate)
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="ClosedLoansReport")

		return response

	except Exception as e:
		raise

def getClosedLoansReport(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch")
		OfficerID 		= 	kwargs.get("OfficerID")
		ProductID 		= 	kwargs.get("ProductID")
		ValueDate 		=	kwargs.get("ValueDate")
		CloseDate 		= 	kwargs.get("CloseDate")
		
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Closed Loans Report"})
		ReportHeader.update({"Parameters": kwargs})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
											Rowspan=0,Cols8pan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'OfficerID', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'CustomerID', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'DDA ID', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'LC ID', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'ProductID', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'ProductName', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="G")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'ValueDate', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'MaturityDate', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'DisbursedAmount', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="J")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Term', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="K")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'InterestRate', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="L")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'IRR', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="M")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'TotalInstallment', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="N")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Installment Paid', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="O")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Date of Terminate', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="P")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Waive Interest', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="Q")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Penalty Paid on Loan Late', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="R")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Penalty Paid on Pre-Terminate', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="S")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Charge on Schedule Paid', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="T")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Interest Paid', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="U")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Principal Paid', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="V")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Total Paid Amount', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center text-bold",ExcelCol="W")

		Data = getRecordRow(**kwargs)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getAllClosedLoan(**kwargs):
	Branch 			 = 	kwargs.get("Branch")
	OfficerID 		 = 	kwargs.get("OfficerID")
	ProductID 		 = 	kwargs.get("ProductID")
	ValueDate 		 =	kwargs.get("ValueDate")
	CloseDate 		 = 	kwargs.get("CloseDate")

	ClosedLoanObj	 = 	db.session.query(MKT_CLOSED_LOAN.Branch,
									   MKT_CLOSED_LOAN.ContractCustomerID,
									   MKT_CLOSED_LOAN.Account,
									   MKT_CLOSED_LOAN.ID,
									   MKT_CLOSED_LOAN.ContractOfficerID,
									   MKT_CLOSED_LOAN.LoanProduct,
									   MKT_CLOSED_LOAN.ValueDate,
									   MKT_CLOSED_LOAN.MaturityDate,
									   MKT_CLOSED_LOAN.Term,
									   MKT_CLOSED_LOAN.ApprovedAmount,
									   MKT_CLOSED_LOAN.Disbursed,
									   MKT_CLOSED_LOAN.InterestRate,
									   MKT_CLOSED_LOAN.IRR,
									   MKT_CLOSED_LOAN.Currency,
									   MKT_CLOSED_LOAN.Installment,
									   MKT_LOAN_AMENDMENT.WaiveInterest,
									   MKT_LOAN_AMENDMENT.Operation,
									   MKT_LOAN_AMENDMENT.AmendDate).\
									   join(MKT_LOAN_AMENDMENT,MKT_LOAN_AMENDMENT.LoanID==MKT_CLOSED_LOAN.ID).\
									   filter(MKT_LOAN_AMENDMENT.Operation=='TMN').\
									   order_by(MKT_CLOSED_LOAN.ID)
	if Branch:
		Branch = Branch.split()
		ClosedLoanObj	 	= ClosedLoanObj if 'ALL' in Branch else ClosedLoanObj.\
							 				filter(MKT_CLOSED_LOAN.Branch.in_(Branch))
	if OfficerID:
		ClosedLoanObj	 	= ClosedLoanObj.filter(MKT_CLOSED_LOAN.ContractOfficerID==OfficerID)
	if ProductID:
		ClosedLoanObj	 	= ClosedLoanObj.filter(MKT_CLOSED_LOAN.LoanProduct==ProductID)
	if ValueDate:
		ValueDate = ValueDate.split()
		if len(ValueDate)==2:
			ClosedLoanObj 	= 	ClosedLoanObj.filter(MKT_CLOSED_LOAN.ValueDate>=ValueDate[0],
												   		   MKT_CLOSED_LOAN.ValueDate<=ValueDate[1])
		else:
			ClosedLoanObj 	= 	ClosedLoanObj.filter(MKT_CLOSED_LOAN.ValueDate.in_(ValueDate))
	if CloseDate:
		CloseDate 	= CloseDate.split()
		if len(CloseDate)==2:
    			ClosedLoanObj 	= 	ClosedLoanObj.filter(or_(MKT_CLOSED_LOAN.MaturityDate>=CloseDate[0],MKT_LOAN_AMENDMENT.AmendDate>=CloseDate[0]),
												   		   or_(MKT_CLOSED_LOAN.MaturityDate<=CloseDate[1],MKT_LOAN_AMENDMENT.AmendDate<=CloseDate[1]))
		else:
			ClosedLoanObj 	= 	ClosedLoanObj.filter(or_(MKT_CLOSED_LOAN.MaturityDate.in_(CloseDate),MKT_LOAN_AMENDMENT.AmendDate.in_(CloseDate)))
	return ClosedLoanObj

def getRecordRow(**kwargs):
	'''
		In this method it can do such as:
		* get AccSetting from AppSetting for check description with MKT_ACC_ENTRY that has(InterestTran,PrincipalTran,ChargeTran,PenaltyTran,PenaltyTerminateTran)
		* get all Closed Loan information
		* get Total Number of Installment that paid already from "MKT_REP_SCHEDULE_HIST"
		* get Total Interest Amount from MKT_ACC_ENTRY filter with InterestTran
		* get Total Principal Amount from MKT_ACC_ENTRY filter with PrincipalTran
		* get Total Charge Amount from MKT_ACC_ENTRY filter with ChargeTran
		* get Total Penalty paid late amount from MKT_ACC_ENTRY filter with PenaltyTran
		* get Total Penalty Amount when terminate before schedule from MKT_ACC_ENTRY filter with PenaltyTerminateTran
		* sum total amount need to paid(Interest + Principal + Charge + Penalty + PenaltyTerminate)
		* append all value to RecordRow List for show to Report
		
	'''
	Branch 			= 	kwargs.get("Branch")
	BankDateObj 	= 	mktdate.getBankDateObj()
	BankDate 		= 	BankDateObj.SystemDate
	BaseCurrency    = 	mktsetting.getAccSetting().BaseCurrency
	OfficerID 		=	kwargs.get("OfficerID")
	ProductID		=	kwargs.get("ProductID")
	ValueDate 		=	kwargs.get("ValueDate")
	CloseDate 		=   kwargs.get("CloseDate")
	LoanProduct 	=	db.session.query(MKT_LOAN_PRODUCT)
	AccSetting 		= mktsetting.getAccSetting()
	ChargeTran 		= AccSetting.ChargeTran
	InterestTran 	= AccSetting.InterestTran
	PrincipalTran 	= AccSetting.PrincipalTran
	PenaltyTran 	= AccSetting.PenaltyTran
	ProductName 	= ""
	PenaltyTerminateTran = AccSetting.PenaltyTerminateTran if AccSetting.PenaltyTerminateTran else PenaltyTran
	RecordRow = []
	ListHistID=[]
	if isFirstLoaded(**kwargs):
		ClosedLoanObj = getAllClosedLoan(Branch=Branch,OfficerID=OfficerID,ProductID=ProductID,ValueDate=ValueDate,CloseDate=CloseDate)
		if ClosedLoanObj:
			for Loan in ClosedLoanObj:
				ID = Loan.ID
				ProductName 	= 	LoanProduct.get(Loan.LoanProduct).Description
				if ID.find('@') == -1:
					Count 	= 	MKT_LOAN_CONTRACT_HIST.query.\
								filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(ID + '@%')).count()
					if Count:
						ID  = '%s@%s'%(ID,Count-1)
				SplittedID 	= 	ID.split('@')
				if len(SplittedID) == 2:
					LoanID 	= 	SplittedID[0]
					Version = 	SplittedID[1]
					Schedule 	= 	db.session.query(MKT_REP_SCHEDULE_HIST.No).\
									filter(or_(MKT_REP_SCHEDULE_HIST.RepStatus=='2',MKT_REP_SCHEDULE_HIST.RepStatus=='3',MKT_REP_SCHEDULE_HIST.RepStatus=='4')).\
									filter(MKT_REP_SCHEDULE_HIST.LoanID == LoanID).\
									filter(MKT_REP_SCHEDULE_HIST.ID.like('%@' + Version)).\
									count()
					TotalInterestObj 	= 	db.session.query(func.sum(MKT_ACC_ENTRY.Amount).label('InterestCollect')).\
													filter(MKT_ACC_ENTRY.Reference==LoanID).\
													filter(MKT_ACC_ENTRY.Transaction==InterestTran).first()
					TotalPrincipalObj 	= 	db.session.query(func.sum(MKT_ACC_ENTRY.Amount).label('PrincipalCollect')).\
													filter(MKT_ACC_ENTRY.Reference==LoanID).\
													filter(MKT_ACC_ENTRY.Transaction==PrincipalTran).first()
					TotalChargeObj 	= 	db.session.query(func.sum(MKT_ACC_ENTRY.Amount).label('ChargeCollect')).\
													filter(MKT_ACC_ENTRY.Reference==LoanID).\
													filter(MKT_ACC_ENTRY.Transaction==ChargeTran).first()
					PenaltyLateObj 		= 	db.session.query(func.sum(MKT_ACC_ENTRY.Amount).label('Penalty')).\
													filter(MKT_ACC_ENTRY.Reference=="PD"+LoanID).\
													filter(MKT_ACC_ENTRY.Transaction==PenaltyTran).first()

					PenaltyTerminateObj = 	db.session.query(func.sum(MKT_ACC_ENTRY.Amount).label('PreTerminate')).\
															filter(MKT_ACC_ENTRY.Reference == LoanID).\
															filter(MKT_ACC_ENTRY.Transaction == PenaltyTerminateTran).first()
					InterestPaid 		= 	TotalInterestObj.InterestCollect if TotalInterestObj.InterestCollect else 0
					PrincipalPaid 		= 	TotalPrincipalObj.PrincipalCollect if TotalPrincipalObj.PrincipalCollect else 0
					ChargPaid 			= 	TotalChargeObj.ChargeCollect if TotalChargeObj.ChargeCollect else 0
					PenaltyLate 		= 	PenaltyLateObj.Penalty if PenaltyLateObj.Penalty else 0
					PenaltyTerminate 	=	PenaltyTerminateObj.PreTerminate if PenaltyTerminateObj.PreTerminate else 0
					TotalPaid 			= 	InterestPaid + PrincipalPaid + ChargPaid + PenaltyLate + PenaltyTerminate


				RecordRow.append(({1: {"Value":Loan.Branch},
								   2: {"Value":Loan.ContractOfficerID},
								   3: {"Value":Loan.ContractCustomerID},
								   4: {"Value":Loan.Account},
								   5: {"Value":Loan.ID},
								   6: {"Value":Loan.LoanProduct},
								   7: {"Value":ProductName},
								   8: {"Value":Loan.ValueDate},
								   9: {"Value":Loan.MaturityDate},
								  10: {"Value":mktmoney.toMoney(float(Loan.Disbursed),mktmoney.getCurrencyObj(Loan.Currency))},
								  11: {"Value":Loan.Term},
								  12: {"Value":Loan.InterestRate},
								  13: {"Value":Loan.IRR},
								  14: {"Value":Loan.Installment},
								  15: {"Value":Schedule if Loan.Operation=='TMN' else Loan.Installment},
								  16: {"Value":Loan.AmendDate if Loan.Operation=='TMN' else Loan.MaturityDate},
								  17: {"Value":Loan.WaiveInterest if Loan.WaiveInterest else 0},
								  18: {"Value":mktmoney.toMoney(float(PenaltyLate),mktmoney.getCurrencyObj(Loan.Currency))},
								  19: {"Value":mktmoney.toMoney(float(PenaltyTerminate),mktmoney.getCurrencyObj(Loan.Currency))},
								  20: {"Value":mktmoney.toMoney(float(ChargPaid),mktmoney.getCurrencyObj(Loan.Currency))},
								  21: {"Value":mktmoney.toMoney(float(InterestPaid),mktmoney.getCurrencyObj(Loan.Currency))},
								  22: {"Value":mktmoney.toMoney(float(PrincipalPaid),mktmoney.getCurrencyObj(Loan.Currency))},
								  23: {"Value":mktmoney.toMoney(float(TotalPaid),mktmoney.getCurrencyObj(Loan.Currency))},
								 },{"Class":"text-right","Style":""})) 

	RecordRow.append(({1: {"Value":""},
								   2: {"Value":""},
								   3: {"Value":""},
								   4: {"Value":""},
								   5: {"Value":""},
								   6: {"Value":""},
								   7: {"Value":""},
								   8: {"Value":""},
								   9: {"Value":""},
								  10: {"Value":""},
								  11: {"Value":""},
								  12: {"Value":""},
								  13: {"Value":""},
								  14: {"Value":""},
								  15: {"Value":""},
								  16: {"Value":""},
								  17: {"Value":""},
								  18: {"Value":""},
								  19: {"Value":""},
								  20: {"Value":""},
								  21: {"Value":""},
								  22: {"Value":""},
								  23: {"Value":""},
								 },{"Class":"text-right","Style":""})) 
	return RecordRow

def isFirstLoaded(**kwargs):
	# If it is first loanded, the bellow variables will None
	Branch 			= kwargs.get("Branch")
	ReportedDate 	= kwargs.get("ReportedDate")
	ProductID 		= kwargs.get('ProductID')
	OfficerID 		= kwargs.get('OfficerID')
	CloseDate 		= kwargs.get('CloseDate')

	if (Branch or ReportedDate or ProductID or OfficerID) not in ['', None]:
		return True
	return False
