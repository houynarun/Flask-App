from app.mktcore.imports                                     import *
from app.AccEntry.models                                     import *
from app.LoanContract.models                                 import *
from app.Account.models                                      import *
from app.Customer.models                                     import *
from app.Officer.models                                      import *
from app.LoanProduct.models                                  import *
from app.Journal.models                                      import *
from app.DailyBooking.models                                 import *
from app.LoanWriteOff.models                                 import *
import app.tools.mktsetting                                  as mktsetting
from app.tools.mktcustomreport                               import *
import app.tools.mktparam                                    as mktParam
import app.tools.user                                        as mktuser
import app.tools.mktdate                                     as mktdate
import app.tools.mktmoney                                    as mktmoney
from flask import request
from app.Currency.models                                     	import *
from app.Category.models 										import *
import json

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
		''' Filter Criteria '''
		StartDate                                =        DateTextField("StartDate")
		EndDate                        =        DateTextField("EndDate")

def getSplitData(ListData):

		ListData = str(ListData).replace(',', ' ')
		ListData = ListData.split()

		return ListData

def getLoanContract(**kwargs):

	Branch = kwargs.get('Branch','')

	LoanLive = db.session.query(
								MKT_LOAN_CONTRACT.ID.label('LoanID'),
								MKT_LOAN_CONTRACT.Branch.label('Branch'),
								MKT_LOAN_CONTRACT.ContractCustomerID.label('CustomerID'),
								MKT_LOAN_CONTRACT.LoanProduct.label('LoanProductID'),
								MKT_LOAN_CONTRACT.Disbursed.label('Disbursed'),
								MKT_LOAN_CONTRACT.InterestRate.label('InterestRate'),
								MKT_LOAN_CONTRACT.IRR.label('IRR'),
								MKT_LOAN_CONTRACT.ValueDate.label('ValueDate'),
								MKT_LOAN_CONTRACT.Term.label('Term'),
								MKT_LOAN_CONTRACT.MaturityDate.label('MaturityDate'),
								MKT_LOAN_CONTRACT.AssetClass.label('AssetClass'),
								MKT_LOAN_CONTRACT.Currency.label('Currency'),
								MKT_LOAN_PRODUCT.Description.label('LoanProduct'),
								MKT_CUSTOMER.FirstNameEn.label('FirstNameEn'),
								MKT_CUSTOMER.LastNameEn.label('LastNameEn'),
								).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
								join(MKT_LOAN_PRODUCT, MKT_LOAN_CONTRACT.LoanProduct == MKT_LOAN_PRODUCT.ID)

	LoanHist = db.session.query(
								MKT_LOAN_MATURITY.ID.label('LoanID'),
								MKT_LOAN_CONTRACT_HIST.Branch.label('Branch'),
								MKT_LOAN_CONTRACT_HIST.ContractCustomerID.label('CustomerID'),
								MKT_LOAN_CONTRACT_HIST.LoanProduct.label('LoanProductID'),
								MKT_LOAN_CONTRACT_HIST.Disbursed.label('Disbursed'),
								MKT_LOAN_CONTRACT_HIST.InterestRate.label('InterestRate'),
								MKT_LOAN_CONTRACT_HIST.IRR.label('IRR'),
								MKT_LOAN_CONTRACT_HIST.ValueDate.label('ValueDate'),
								MKT_LOAN_CONTRACT_HIST.Term.label('Term'),
								MKT_LOAN_CONTRACT_HIST.MaturityDate.label('MaturityDate'),
								MKT_LOAN_CONTRACT_HIST.AssetClass.label('AssetClass'),
								MKT_LOAN_CONTRACT_HIST.Currency.label('Currency'),
								MKT_LOAN_PRODUCT.Description.label('LoanProduct'),
								MKT_CUSTOMER.FirstNameEn.label('FirstNameEn'),
								MKT_CUSTOMER.LastNameEn.label('LastNameEn'),
								).\
								join(MKT_LOAN_CONTRACT_HIST,MKT_LOAN_CONTRACT_HIST.ID.ilike(MKT_LOAN_MATURITY.ID + '%')).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT_HIST.ContractCustomerID).\
								join(MKT_LOAN_PRODUCT, MKT_LOAN_PRODUCT.ID==MKT_LOAN_CONTRACT_HIST.LoanProduct).\
								distinct(MKT_LOAN_MATURITY.ID)
	if Branch:
		LoanLive = LoanLive.filter(MKT_LOAN_CONTRACT.Branch==Branch)
		LoanHist = LoanHist.filter(MKT_LOAN_CONTRACT_HIST.Branch==Branch)

	Contract = LoanLive.union(LoanHist).subquery()

	return Contract

def getLoanTran(**kwargs):

	LoanProduct = db.session.query(MKT_LOAN_PRODUCT.IntIncomeCate).all()

	LoanProduct = [l.IntIncomeCate for l in LoanProduct]

	StartDate   = kwargs.get('StartDate','')
	EndDate   = kwargs.get('EndDate','')
	Branch   = kwargs.get('Branch','')

	LoanAIR = db.session.query(
								MKT_AIR_JOURNAL.Branch.label('Branch'),
								MKT_AIR_JOURNAL.Reference.label('Reference'),
								MKT_AIR_JOURNAL.Amount.label('Amount'),
								MKT_AIR_JOURNAL.CategoryID.label('CategoryID'),
								MKT_AIR_JOURNAL.Transaction.label('Transaction'),
								MKT_AIR_JOURNAL.TransactionDate.label('TransactionDate'),
							).\
							filter(MKT_AIR_JOURNAL.CategoryID.in_(LoanProduct)).\
							filter(and_(MKT_AIR_JOURNAL.TransactionDate>=StartDate, MKT_AIR_JOURNAL.TransactionDate<=EndDate))

	LoanJournal = db.session.query(
								MKT_JOURNAL.Branch.label('Branch'),
								MKT_JOURNAL.Reference.label('Reference'),
								case(
									[(
										MKT_JOURNAL.DebitCredit != MKT_CATEGORY.BalanceType,
										(0 - MKT_JOURNAL.Amount)
									)],
								else_=MKT_JOURNAL.Amount
								).label('Amount'),
								MKT_JOURNAL.Reference.label('CategoryID'),
								MKT_JOURNAL.Reference.label('Transaction'),
								MKT_JOURNAL.Reference.label('TransactionDate'),
							).\
							join(MKT_CATEGORY,MKT_CATEGORY.ID==MKT_JOURNAL.CategoryID).\
							filter(MKT_JOURNAL.CategoryID.in_(LoanProduct)).\
							filter(and_(MKT_JOURNAL.TransactionDate>=StartDate, MKT_JOURNAL.TransactionDate<=EndDate)).\
							filter(or_(MKT_JOURNAL.Reference.ilike('LC' + '%'),MKT_JOURNAL.Reference.ilike('PDLC' + '%')))

	if Branch:
		LoanAIR = LoanAIR.filter(MKT_AIR_JOURNAL.Branch==Branch)
		LoanJournal = LoanJournal.filter(MKT_JOURNAL.Branch==Branch)

	JournalObj = LoanAIR.union_all(LoanJournal).subquery()

	JournalObj = db.session.query(
									JournalObj.c.Branch.label('Branch'),
									JournalObj.c.Reference.label('Reference'),
									func.sum(JournalObj.c.Amount).label('InterestEarned'),
								).\
								group_by(JournalObj.c.Reference,JournalObj.c.Branch).\
								subquery()

	JournalObjk =  db.session.query(func.sum(JournalObj.c.InterestEarned)).all()

	return JournalObj

def getDailyBooking(**kwargs):

	StartDate   = kwargs.get('StartDate','')
	EndDate   = kwargs.get('EndDate','')
	Branch   = kwargs.get('Branch','')

	DailyObj =  db.session.query(
								MKT_DAILY_BOOKING.Branch,
								MKT_DAILY_BOOKING.Reference,
								func.sum(MKT_DAILY_BOOKING.BookedAmount).label('AccruedInterest'),
								).\
								group_by(MKT_DAILY_BOOKING.Reference,MKT_DAILY_BOOKING.Branch).\
								filter(and_(MKT_DAILY_BOOKING.TransactionDate>=StartDate, MKT_DAILY_BOOKING.TransactionDate<=EndDate))
	if Branch:
		DailyObj = DailyObj.filter(MKT_DAILY_BOOKING.Branch==Branch)

	DailyObj = DailyObj.subquery()

	return DailyObj

def getPaidInterest(**kwargs):

	StartDate   = kwargs.get('StartDate','')
	EndDate   	= kwargs.get('EndDate','')
	Branch   	= kwargs.get('Branch','')
	PDInterest 	= mktsetting.getAppSetting('PDInterest')
	AccSetting 		= mktsetting.getAccSetting()
	InterestTran 	= AccSetting.InterestTran
	TranList 		= [PDInterest,InterestTran]

	AccEntryObj 	= db.session.query(
										MKT_ACC_ENTRY.Branch,
										MKT_ACC_ENTRY.Reference,
										func.sum(MKT_ACC_ENTRY.Amount).label('PaidInterest'),
									).\
									filter(MKT_ACC_ENTRY.Transaction.in_(TranList)).\
									filter(MKT_ACC_ENTRY.DebitCredit=='Dr').\
									filter(and_(MKT_ACC_ENTRY.TransactionDate>=StartDate, MKT_ACC_ENTRY.TransactionDate<=EndDate)).\
									group_by(MKT_ACC_ENTRY.Branch,MKT_ACC_ENTRY.Reference)
	if Branch:
		AccEntryObj = AccEntryObj.filter(MKT_ACC_ENTRY.Branch==Branch)

	AccEntryObj = AccEntryObj.subquery()

	return AccEntryObj

def getFeePaid(**kwargs):
	
	Branch   = kwargs.get('Branch','')
	FeePaidObj = db.session.query(
									MKT_LOAN_CHARGE.Branch,
									MKT_LOAN_CHARGE.ID,
									func.sum(MKT_LOAN_CHARGE.ChargeEarned + MKT_LOAN_CHARGE.ChargeUnearned).label('FeePaid'),
								).\
								group_by(MKT_LOAN_CHARGE.Branch,MKT_LOAN_CHARGE.ID)
	if Branch:
		FeePaidObj = FeePaidObj.filter(MKT_LOAN_CHARGE.Branch==Branch)

	FeePaidObj = FeePaidObj.subquery()

	return FeePaidObj

def getFeeEarned(**kwargs):
	
	StartDate   = kwargs.get('StartDate','')
	EndDate   	= kwargs.get('EndDate','')
	Branch   	= kwargs.get('Branch','')
	UnearnedCat = mktsetting.getAppSetting('UnEarnedIncomeCat')

	FeeEarnedObj = db.session.query(
									MKT_JOURNAL.Branch,
									MKT_JOURNAL.Reference,
									func.sum(MKT_JOURNAL.Amount).label('FeeEarned'),
								).\
								filter(MKT_JOURNAL.CategoryID==UnearnedCat).\
								filter(MKT_JOURNAL.DebitCredit=='Dr').\
								filter(and_(MKT_JOURNAL.TransactionDate>=StartDate, MKT_JOURNAL.TransactionDate<=EndDate)).\
								group_by(MKT_JOURNAL.Branch,MKT_JOURNAL.Reference)
	if Branch:
		FeeEarnedObj = FeeEarnedObj.filter(MKT_JOURNAL.Branch==Branch)

	FeeEarnedObj = FeeEarnedObj.subquery()

	return FeeEarnedObj

def getAccumFeeEarned(**kwargs):
	
	StartDate   = kwargs.get('StartDate','')
	EndDate   	= kwargs.get('EndDate','')
	Branch   	= kwargs.get('Branch','')
	UnearnedCat = mktsetting.getAppSetting('UnEarnedIncomeCat')

	AccumFeeEarnedObj = db.session.query(
									MKT_JOURNAL.Branch,
									MKT_JOURNAL.Reference,
									func.sum(MKT_JOURNAL.Amount).label('AccumFeeEarned'),
								).\
								filter(MKT_JOURNAL.CategoryID==UnearnedCat).\
								filter(MKT_JOURNAL.DebitCredit=='Dr').\
								filter(MKT_JOURNAL.TransactionDate<=EndDate).\
								group_by(MKT_JOURNAL.Branch,MKT_JOURNAL.Reference)
	if Branch:
		AccumFeeEarnedObj = AccumFeeEarnedObj.filter(MKT_JOURNAL.Branch==Branch)

	AccumFeeEarnedObj = AccumFeeEarnedObj.subquery()

	return AccumFeeEarnedObj

def getContractInfo(**kwargs):

	LoanContract 	= getLoanContract(**kwargs)
	ContractTran 	= getLoanTran(**kwargs)
	DailyObj 		= getDailyBooking(**kwargs)
	AccEntryObj 	= getPaidInterest(**kwargs)
	FeePaidObj 		= getFeePaid(**kwargs)
	FeeEarnedObj 	= getFeeEarned(**kwargs)
	AccumFeeEarnedObj 	= getAccumFeeEarned(**kwargs)

	ContractInfo = db.session.query(
									LoanContract.c.Branch,
									LoanContract.c.LoanID,
									LoanContract.c.CustomerID,
									LoanContract.c.FirstNameEn,
									LoanContract.c.LastNameEn,
									LoanContract.c.LoanProductID,
									LoanContract.c.LoanProduct,
									LoanContract.c.Disbursed,
									LoanContract.c.InterestRate,
									LoanContract.c.IRR,
									LoanContract.c.ValueDate,
									LoanContract.c.Term,
									LoanContract.c.MaturityDate,
									LoanContract.c.AssetClass,
									LoanContract.c.Currency,
									case(
										[(
										ContractTran.c.InterestEarned != None,
										ContractTran.c.InterestEarned
										)],
										else_=0
									).label('InterestEarned'),
									case(
										[(
										DailyObj.c.AccruedInterest != None,
										DailyObj.c.AccruedInterest
										)],
										else_=0
									).label('AccruedInterest'),
									case(
										[(
										AccEntryObj.c.PaidInterest != None,
										AccEntryObj.c.PaidInterest
										)],
										else_=0
									).label('PaidInterest'),
									case(
										[(
										FeePaidObj.c.FeePaid != None,
										FeePaidObj.c.FeePaid
										)],
										else_=0
									).label('FeePaid'),
									case(
										[(
										FeeEarnedObj.c.FeeEarned != None,
										FeeEarnedObj.c.FeeEarned
										)],
										else_=0
									).label('FeeEarned'),
									case(
										[(
										AccumFeeEarnedObj.c.AccumFeeEarned != None,
										AccumFeeEarnedObj.c.AccumFeeEarned
										)],
										else_=0
									).label('AccumFeeEarned'),
									).\
									outerjoin(ContractTran,ContractTran.c.Reference==LoanContract.c.LoanID).\
									outerjoin(DailyObj,DailyObj.c.Reference==LoanContract.c.LoanID).\
									outerjoin(AccEntryObj,AccEntryObj.c.Reference==LoanContract.c.LoanID).\
									outerjoin(FeePaidObj,FeePaidObj.c.ID==LoanContract.c.LoanID).\
									outerjoin(FeeEarnedObj,FeeEarnedObj.c.Reference==LoanContract.c.LoanID).\
									outerjoin(AccumFeeEarnedObj,AccumFeeEarnedObj.c.Reference==LoanContract.c.LoanID).\
									filter(ContractTran.c.Branch==LoanContract.c.Branch).\
									all()

	return ContractInfo

@app.route('/Morakot/Report/InterestIncome', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getInterestIncome():
		""" Route to view each report """
		try:
				ErrorMsg    = []
				DefualtUrl         = CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
				getCheck    = checkAccess(DefualtUrl,"Search")
				if getCheck != True: 
						ErrorMsg.append(msg_error+msg_permission)
						return render_template("permission.html",ErrorMsg=ErrorMsg)
				''' Setup parameters '''
				Branch                         = request.args.get("Branch") if "Branch" in request.args else ""
				EndDate                 = request.args.get("EndDate") if "EndDate" in request.args else""
				StartDate                         = request.args.get("StartDate") if "StartDate" in request.args else""
				Result                         =        getReportHeader(Branch=Branch,EndDate=EndDate,StartDate=StartDate)
				Parameters                 =         {"Branch": Branch,"StartDate": StartDate,"EndDate": EndDate}
				FilterOption         = {'DataTable':True}
				if Branch or EndDate or StartDate:
						FilterOption.update({'Criteria':False})
				else:
						FilterOption.update({'Criteria':True}) # required to enter custom filter first
				SearchForm      =   FRM_CUSTOM_REPORT_SEARCH_EX()
				return CUSTOM_REPORT.getCustomReportTemplate(
																										Parameters     =   Parameters,
																										Result          =   Result,
																										FilterOption    =   FilterOption,
																										SearchForm      =   SearchForm
																										)
		except:
				raise
@app.route('/Morakot/Report/InterestIncome/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getInterestIncomeReportExcel():
		""" Route to view each report """
		try:
				ErrorMsg    = []
				DefualtUrl         = CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
				getCheck    = checkAccess(DefualtUrl,"Search")
				if getCheck != True: 
						ErrorMsg.append(msg_error+msg_permission)
						return render_template("permission.html",ErrorMsg=ErrorMsg)
				''' Setup parameters '''
				Branch                         = request.args.get("Branch") if "Branch" in request.args else ""
				EndDate                 = request.args.get("EndDate") if "EndDate" in request.args else ""
				StartDate                         = request.args.get("StartDate") if "StartDate" in request.args else ""
				Result                         =        getReportHeader(Branch=Branch,EndDate=EndDate,StartDate=StartDate)
				FileName                 = "Interest Income"
				response                 =         CUSTOM_REPORT.exportExcel(Result=Result,FileName=FileName)
				return response
		except Exception as e:
				raise
def getReportHeader(**kwargs):
		try:
				Branch                         = kwargs.get("Branch")
				EndDate                 = kwargs.get("EndDate")
				StartDate                         = kwargs.get('StartDate')
				ReportHeader         =        CUSTOM_REPORT.getReportHeader()
				ReportHeader.update({"ReportTitle": "Interest Income Report"})
				ReportHeader.update({"Parameters": kwargs})
				Data                 = []
				TableHeader = {}
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'LC', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'CU', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Client Name', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Product', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Lease Amt', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Interest Rate', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'IRR', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Dis Date', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Term', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Maturity Date', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Asset Class', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Interest Earned', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="M")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Accumulated Accrued Int', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="N")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Accumulated Paid Int', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="O")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'AIR', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="P")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Fee Paid', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="Q")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Fee Earned', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="R")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Accumulated Fee Earned', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="S")
				TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Unearned Fee', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="T")
				
				Data = getRecordRow(**kwargs)
				Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }
				return Result
		except:
				raise
def getRecordRow(**kwargs):
		RecordRow 			= []
		data 				= getContractInfo(**kwargs)
		TotalIRR 			= Decimal(0)
		TotalInterestEarned = Decimal(0)
		TotalAccruedInterest= Decimal(0)
		TotalPaidInterest 	= Decimal(0)
		TotalAIRInterest 	= Decimal(0)
		TotalFeePaid 		= Decimal(0)
		TotalFeeEarned 		= Decimal(0)
		TotalAccumFeeEarned = Decimal(0)
		TotalUnearnedFee 	= Decimal(0)
		TotalDisbursed 		= Decimal(0)
	
		if data:
			for row in data:

				ClientName 		= '%s %s' %(row.FirstNameEn, row.LastNameEn)
				CurrencyObj     = mktmoney.getCurrencyObj(row.Currency)
				
				LoanProduct 	= row.LoanProduct
				Disbursed 		= row.Disbursed
				InterestRate 	= row.InterestRate
				IRR 			= row.IRR if row.IRR else 0
				ValueDate 		= row.ValueDate
				Term 			= row.Term
				MaturityDate 	= row.MaturityDate
				AssetClass 	= row.AssetClass
				InterestEarned 	= row.InterestEarned
				AccruedInterest = row.AccruedInterest
				PaidInterest 	= row.PaidInterest
				AIRInterest 	= row.AccruedInterest - row.PaidInterest
				FeePaid 		= row.FeePaid
				FeeEarned 		= row.FeeEarned
				AccumFeeEarned 	= row.AccumFeeEarned
				UnearnedFee  	= row.FeePaid -  row.AccumFeeEarned

				TotalDisbursed 			+= Disbursed
				TotalInterestEarned 	+= InterestEarned
				TotalAccruedInterest 	+= AccruedInterest
				TotalPaidInterest 		+= PaidInterest
				TotalAIRInterest 		+= AIRInterest
				TotalFeePaid 			+= FeePaid
				TotalFeeEarned 			+= FeeEarned
				TotalAccumFeeEarned 	+= AccumFeeEarned
				TotalUnearnedFee 		+= UnearnedFee

				RecordRow.append((
										{
										1: {"Value":row.Branch,"Class":"text-center"},
										2: {"Value":row.LoanID,"Class":"text-left"},
										3: {"Value":row.CustomerID}, 
										4: {"Value":ClientName},
										5: {"Value":LoanProduct},
										6: {"Value":str(mktmoney.toMoney(float(Disbursed),CurrencyObj))},
										7: {"Value":str(mktmoney.toMoney(float(InterestRate),CurrencyObj))},
										8: {"Value":str(mktmoney.toMoney(float(IRR),CurrencyObj))},
										9: {"Value":ValueDate},
										10: {"Value":Term},
										11: {"Value":MaturityDate},
										12: {"Value":AssetClass},
										13: {"Value":str(mktmoney.toMoney(float(InterestEarned),CurrencyObj))},
										14: {"Value": str(mktmoney.toMoney(float(AccruedInterest),CurrencyObj))},
										15: {"Value": str(mktmoney.toMoney(float(PaidInterest),CurrencyObj))},
										16: {"Value": str(mktmoney.toMoney(float(AIRInterest),CurrencyObj))},
										17: {"Value": str(mktmoney.toMoney(float(FeePaid),CurrencyObj))},
										18: {"Value": str(mktmoney.toMoney(float(FeeEarned),CurrencyObj))},
										19: {"Value": str(mktmoney.toMoney(float(AccumFeeEarned),CurrencyObj))},
										20: {"Value": str(mktmoney.toMoney(float(UnearnedFee),CurrencyObj))},
										},
										{"Class":"text-center","Style":""}
								))
		# Total Amount
		RecordRow.append((
								{
								1: {"Value":"","Class":"text-center"},
								2: {"Value":"","Class":"text-left"},
								3: {"Value":""}, 
								4: {"Value":""},
								5: {"Value":"Total","Class":"text-bold"},
								6: {"Value":str(mktmoney.toMoney(float(TotalDisbursed),mktmoney.getCurrencyObj('USD'))),"Class":"text-bold"},
								7: {"Value":""},
								8: {"Value":"","Class":"text-bold"},
								9: {"Value":""},
								10: {"Value":""},
								11: {"Value":""},
								12: {"Value":""},
								13: {"Value":str(mktmoney.toMoney(float(TotalInterestEarned),mktmoney.getCurrencyObj('USD'))),"Class":"text-bold"},
								14: {"Value": str(mktmoney.toMoney(float(TotalAccruedInterest),mktmoney.getCurrencyObj('USD'))),"Class":"text-bold"},
								15: {"Value": str(mktmoney.toMoney(float(TotalPaidInterest),mktmoney.getCurrencyObj('USD'))),"Class":"text-bold"},
								16: {"Value": str(mktmoney.toMoney(float(TotalAIRInterest),mktmoney.getCurrencyObj('USD'))),"Class":"text-bold"},
								17: {"Value": str(mktmoney.toMoney(float(TotalFeePaid),mktmoney.getCurrencyObj('USD'))),"Class":"text-bold"},
								18: {"Value": str(mktmoney.toMoney(float(TotalFeeEarned),mktmoney.getCurrencyObj('USD'))),"Class":"text-bold"},
								19: {"Value": str(mktmoney.toMoney(float(TotalAccumFeeEarned),mktmoney.getCurrencyObj('USD'))),"Class":"text-bold"},
								20: {"Value": str(mktmoney.toMoney(float(TotalUnearnedFee),mktmoney.getCurrencyObj('USD'))),"Class":"text-bold"},
								},
								{"Class":"text-center","Style":""}
						))
		return RecordRow
