from app.mktcore.imports 					import *
from app.AccEntry.models 					import *
from app.LoanContract.models 				import *
from app.Account.models 					import *
from app.Customer.models 					import *
from app.Officer.models 					import *
from app.LoanProduct.models 				import *
import app.tools.mktsetting 				as mktsetting
from app.tools.mktcustomreport   		import *
import app.tools.user           		as mktuser
from flask import request
from app.Currency.models 				import *
from app.GL.models 						import *
from app.NBCReport.models 				import *
from app.GLBalance.models 				import *
import app.tools.mkttool as mkttool


class FRM_CUSTOM_REPORT_SEARCH_EX(exform):
	''
	Mapping	= SelectField("Mapping",
			choices=[('N', 'None'), ('M', 'Mapped'), ('NM', 'Not Mapped')],
			coerce=str,
			default='N'
		)
	GLType  = SelectField("GLType",
			choices=[('N', 'None'),('M', 'Main GL'), ('S', 'Sub GL'), ('A', 'ALL')],
			coerce=str,
			default='N'
		)

def getSplitData(ListData):
	ListData = str(ListData).replace(',', ' ')
	ListData = ListData.split()

	return ListData


def getAllGLInfo(**kwargs):

	Mapping 			= kwargs.get("Mapping")
	GLType 			= kwargs.get("GLType")

	GLObj = db.session.query(
								MKT_GL_MAPPING.ID.label('GLID'),
								MKT_NBC_REPORT.ID.label('ReportID'),
								MKT_NBC_REPORT.ReportName.label('ReportName'),
								MKT_NBC_REPORT_DE.ID.label('ReportLine'),
								MKT_NBC_REPORT_DE.LineDescription.label('LineDescription'),
								MKT_NBC_REPORT_DE.OtherLineValue.label('OtherLineValue'),
								MKT_NBC_REPORT_DE.LineValue.label('LineValue'),
								MKT_GL_BALANCE.Balance.label('GLBalance')
							).\
							outerjoin(MKT_NBC_REPORT_DE, or_(MKT_NBC_REPORT_DE.OtherLineValue.ilike('%' + MKT_GL_MAPPING.ID +'%'), MKT_NBC_REPORT_DE.LineValue.ilike('%' + MKT_GL_MAPPING.ID +'%'))).\
							outerjoin(MKT_GL_BALANCE, MKT_GL_BALANCE.ID == MKT_GL_MAPPING.ID).\
							outerjoin(MKT_NBC_REPORT, MKT_NBC_REPORT.ID == MKT_NBC_REPORT_DE.Report)

	if Mapping == 'M':
		GLObj = GLObj.filter(MKT_NBC_REPORT.ReportName != None)
	else:
		GLObj = GLObj.filter(MKT_NBC_REPORT.ReportName == None)

	if GLType == 'M':
		GLObj = GLObj.filter( MKT_GL_MAPPING.SubGL != '')
	elif GLType == 'S':
		GLObj = GLObj.filter( MKT_GL_MAPPING.SubGL == '')

	GLObj = GLObj.all()

	return GLObj

@app.route('/Morakot/Report/NBC/VerifyGL', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getVerifyGLNBC():
	""" Route to view each report """
	try:
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			= request.args.get("Branch") if "Branch" in request.args else ""
		Mapping 	= request.args.get("Mapping") if "Mapping" in request.args else ""
		GLType 	= request.args.get('GLType' if "GLType" in request.args else "")

		Result 			=	getGLReportHeader(Branch=Branch,Mapping=Mapping,GLType=GLType)
		Parameters 		= 	{"Branch": Branch,"ReportedDate": ' '}
		FilterOption 	=	""

		SearchForm      =   FRM_CUSTOM_REPORT_SEARCH_EX()

		return CUSTOM_REPORT.getCustomReportTemplate(
													Parameters     =   Parameters,
													Result          =   Result,
													FilterOption    =   FilterOption,
													SearchForm      =   SearchForm
													)
	except:
		raise

@app.route('/Morakot/Report/NBC/VerifyGL/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getVerifyGLNBCExcel():
	""" Route to view each report """
	try:
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			= request.args.get("Branch") if "Branch" in request.args else ""
		Mapping 	= request.args.get("Mapping") if "Mapping" in request.args else ""
		GLType 	= request.args.get('GLType' if "GLType" in request.args else "")

		Result 			=	getGLReportHeader(Branch=Branch,Mapping=Mapping,GLType=GLType)

		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="GLMapping")

		return response

	except Exception as e:
		raise

def getGLReportHeader(**kwargs):
	try:
		Mapping 			= kwargs.get("Mapping")
		GLType 			= kwargs.get("GLType")

		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "GL Mapping Report"})
		ReportHeader.update({"Parameters": kwargs})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Report ID', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Report Name', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'GL ID', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Report Line', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Line Description', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Other Line Value', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Line Value', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'GL Balance', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		
		Data = getRecordRow(**kwargs)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getRecordRow(**kwargs):

	RecordRow 			= []

	if isFirstLoaded(**kwargs):
		GLList = getAllGLInfo(**kwargs)
		for GLObj in GLList:
			RecordRow.append((
								{
								1: {"Value": GLObj.ReportID if GLObj.ReportID else '-', "Class":"text-center"},
								2: {"Value": GLObj.ReportName if GLObj.ReportName else '-', "Class":"text-left"},
								3: {"Value": GLObj.GLID if GLObj.GLID else '-' , "Class":"text-left"}, 
								4: {"Value": GLObj.ReportLine if GLObj.ReportLine else '-'},
								5: {"Value": GLObj.LineDescription if GLObj.LineDescription else '-', "Class":"text-left"},
								6: {"Value": GLObj.OtherLineValue if GLObj.OtherLineValue else '-'},
								7: {"Value": GLObj.LineValue},
								8: {"Value": GLObj.GLBalance if GLObj.GLBalance else '-'}
								},
								{"Class":"text-right","Style":""}
							))
	RecordRow.append((
						{
						1: {"Value":'',"Class":"text-center"},
						2: {"Value": '',"Class":"text-left"},
						3: {"Value":''}, 
						4: {"Value": ''},
						5: {"Value": ''},
						6: {"Value":''},
						7: {"Value": ''},
						8: {"Value": ''}
						},
						{"Class":"text-center text-bold","Style":""}
					))
	return RecordRow

def isFirstLoaded(**kwargs):
	# If it is first loanded, the bellow variables will None
	Mapping 			= kwargs.get("Mapping")
	GLType 			= kwargs.get("GLType")

	if (Mapping or GLType) not in ['N',None]:
		return True
	return False
