from app.mktcore.imports 			import *
from app.Branch.models 				import MKT_BRANCH
from app.LoanContract.models 		import MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT_HIST
from app.LoanAmendment.models 		import MKT_LOAN_AMENDMENT
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.Currency.models 			import MKT_CURRENCY
from app.PD.models 					import *
from app.Officer.models 			import MKT_OFFICER
from app.Customer.models 			import MKT_CUSTOMER
from app.Company.models 			import MKT_COMPANY
from app.Province.models 			import MKT_PROVINCE
from app.District.models 			import MKT_DISTRICT
from app.Commune.models 			import MKT_COMMUNE
from app.Village.models 			import MKT_VILLAGE
from app.ConsolBalance.models 		import MKT_CONSOL_BALANCE
from app.Currency.models 			import MKT_CURRENCY
from app.AssetClass.models 			import MKT_ASSET_CLASS
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE,MKT_REP_SCHEDULE_HIST
from app.VB.models 					import MKT_VB
from app.Journal.models 			import MKT_JOURNAL
from app.Category.models 			import MKT_CATEGORY
from app.AccProduct.models 			import MKT_ACC_PRODUCT
from app.Transaction.models 		import *

import app.Language.register 		as mktlanguage
import app.RepaymentSchedule.views 	as mktrepayment

import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney
import app.tools.mktreport			as mktreport
import app.tools.mktsetting 		as mktsetting
import app.tools.mkttool 			as mkttool
import app.tools.loantools.rescheduletools 	as rescheduletools
import app.tools.mktaddress 		as mktaddress
import app.tools.mktparam  			as mktparam
import app.tools.mktpdcollection  	as mktpdcollection
import app.tools.user 				as mktuser
import app.tools.mktaccounting		as mktaccounting

import collections
import decimal
import sqlalchemy

from datetime 						import datetime, date, timedelta
from sqlalchemy.sql.expression 		import cast

from app.Report.Loan.loancollection import *
from app.Report.Loan.loandisbursement import *
from app.Report.Loan.closedloans import *

''' Daily Collection Report '''
@app.route("/Morakot/Report/DailyLoanCollection", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDailyCashCollection():
	'''
	Report filter Interest, Principal... from Drawdown Account.
	'''
	# Block check access right
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/Report/DailyLoanCollection/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	BankDate 		= mktdate.getBankDate()
	DefaultBranch 	= mktuser.getCurrentBranch()
	AccSetting 		= mktsetting.getAccSetting() #Get Acccounting Setting
	one_day 		= timedelta(days=1) # one day
	LastBankDate 	= BankDate - one_day #datetime.date(2015, 1, 1)
	CurrencyObj 	= MKT_CURRENCY.query
	DefaultCurrency = AccSetting.BaseCurrency
	StartDate		= request.args.get('StartDate') if request.args else str(LastBankDate)
	EndDate 		= request.args.get('EndDate') if request.args else str(BankDate)
	Branch 			= request.args.get('Branch') if request.args else DefaultBranch
	Currency 		= request.args.get('Currency') if request.args else DefaultCurrency
	DrawdownAccount = None
	ListInterest 	= []
	ListPrincipal 	= []
	ListPenalty 	= []
	ListCBC 		= []
	ListBranch 		= Branch.split()
	ListBranch 		= filter(None,ListBranch)
	
	PDCharge 		= mktsetting.getAppSetting('PDCharge')
	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')
	AccountPayableCBC = mktsetting.getAppSetting('CBCCategoryID')
	if not AccountPayableCBC:
		AccountPayableCBC ='38112'
	
	CBCBalanceType = ""	
	CBCCateogryObj = MKT_CATEGORY.query.get(AccountPayableCBC)
	if CBCCateogryObj:
		CBCBalanceType = CBCCateogryObj.BalanceType

	AccProductObj 	= MKT_ACC_PRODUCT.query.get('101')
	if AccProductObj:
		DrawdownAccount = AccProductObj.CategoryList
		CategoryDDA  = MKT_CATEGORY.query.get(DrawdownAccount)
		if CategoryDDA:
			DDABalanceType = CategoryDDA.BalanceType

	# Add All Transaction PD
	ListInterest.append(PDInterest)
	ListPrincipal.append(PDPrincipal)


	if AccSetting:
		PenaltyTran 	= AccSetting.PenaltyTran
		InterestTran 	= AccSetting.InterestTran
		PrincipalTran 	= AccSetting.PrincipalTran
		AmendmentTran 	= AccSetting.AmendmentTran
		# Add All Transaction Collection
		ListInterest.append(InterestTran)
		ListPenalty.append(PenaltyTran)
		ListPrincipal.append(PrincipalTran)
		ListPrincipal.append(AmendmentTran)
	
	InterestObj = db.session.query(
									MKT_JOURNAL.TransactionDate,
									MKT_JOURNAL.DebitCredit,
									func.sum(MKT_JOURNAL.Amount).label('Amount')).\
									filter(MKT_JOURNAL.Currency==Currency).\
									filter(MKT_JOURNAL.CategoryID==DrawdownAccount).\
									filter(MKT_JOURNAL.Transaction.in_(ListInterest)).\
									filter(MKT_JOURNAL.TransactionDate.between(StartDate,EndDate)).\
									group_by(MKT_JOURNAL.TransactionDate,MKT_JOURNAL.DebitCredit)

	PrincipalObj = db.session.query(
									MKT_JOURNAL.TransactionDate,
									MKT_JOURNAL.DebitCredit,
									func.sum(MKT_JOURNAL.Amount).label('Amount')).\
									filter(MKT_JOURNAL.Currency==Currency).\
									filter(MKT_JOURNAL.CategoryID==DrawdownAccount).\
									filter(MKT_JOURNAL.Transaction.in_(ListPrincipal)).\
									filter(MKT_JOURNAL.TransactionDate.between(StartDate,EndDate)).\
									group_by(MKT_JOURNAL.TransactionDate,MKT_JOURNAL.DebitCredit)

	PenaltyObj = db.session.query(
									MKT_JOURNAL.TransactionDate,
									MKT_JOURNAL.DebitCredit,
									func.sum(MKT_JOURNAL.Amount).label('Amount')).\
									filter(MKT_JOURNAL.Currency==Currency).\
									filter(MKT_JOURNAL.CategoryID==DrawdownAccount).\
									filter(MKT_JOURNAL.Transaction.in_(ListPenalty)).\
									filter(MKT_JOURNAL.TransactionDate.between(StartDate,EndDate)).\
									group_by(MKT_JOURNAL.TransactionDate,MKT_JOURNAL.DebitCredit)

	CBCObj = db.session.query(
									MKT_JOURNAL.TransactionDate,
									MKT_JOURNAL.DebitCredit,
									func.sum(MKT_JOURNAL.Amount).label('Amount')).\
									filter(MKT_JOURNAL.Currency==Currency).\
									filter(MKT_JOURNAL.CategoryID==AccountPayableCBC).\
									filter(MKT_JOURNAL.TransactionDate.between(StartDate,EndDate)).\
									group_by(MKT_JOURNAL.TransactionDate,MKT_JOURNAL.DebitCredit).\
									order_by(MKT_JOURNAL.TransactionDate.asc())

	if not 'ALL' in ListBranch:
		InterestObj 	= InterestObj.filter(MKT_JOURNAL.Branch.in_(ListBranch))
		PrincipalObj 	= PrincipalObj.filter(MKT_JOURNAL.Branch.in_(ListBranch))
		CBCObj 			= CBCObj.filter(MKT_JOURNAL.Branch.in_(ListBranch))
		PenaltyObj 		= PenaltyObj.filter(MKT_JOURNAL.Branch.in_(ListBranch))
		
	# print ''
	# print ''
	# print '------------------'
	# # print 'InterestObj',InterestObj.all()
	# # print 'PrincipalObj',PrincipalObj.all()
	# # print 'CBCObj',CBCObj.all()
	# # print 'PenaltyObj',PenaltyObj.all()
	# print ''

	DicRecord 	= {}
	DicDefault 	= {'Interest':0,'Principal':0,'Penalty':0,'CBC':0}
	Balance 	= 0

	for row in InterestObj:

		DrCr 			= row.DebitCredit
		TransactionDate = row.TransactionDate
		Amount 			= float(row.Amount)
		DicRow 			= DicRecord.get(TransactionDate,{})
		Balance 		= DicRow.get('Interest',0)
		Balance 		= setCalBalance(CBCBalanceType,DrCr,Amount,Balance)
		# print 'TransactionDate',TransactionDate,'DrCr',DrCr,'Amount',Amount,'Balance',Balance

		DicRow.update({'Interest':Balance})
		DicRow = getUpdateDefaultValue(DicDefault,DicRow)
		DicRecord.update({TransactionDate:DicRow})


	for row in PrincipalObj:

		DrCr 			= row.DebitCredit
		TransactionDate = row.TransactionDate
		Amount 			= float(row.Amount)
		DicRow 			= DicRecord.get(TransactionDate,{})
		Balance 		= DicRow.get('Principal',0)
		Balance 		= setCalBalance(CBCBalanceType,DrCr,Amount,Balance)
		# print 'TransactionDate',TransactionDate,'DrCr',DrCr,'Amount',Amount,'Balance',Balance

		DicRow.update({'Principal':Balance})
		DicRow = getUpdateDefaultValue(DicDefault,DicRow)
		DicRecord.update({TransactionDate:DicRow})
		

	for row in CBCObj:

		DrCr 			= row.DebitCredit
		TransactionDate = row.TransactionDate
		Amount 			= float(row.Amount)
		DicRow 			= DicRecord.get(TransactionDate,{})
		Balance 		= DicRow.get('CBC',0)
		Balance 		= setCalBalance(CBCBalanceType,DrCr,Amount,Balance)
		# print 'TransactionDate',TransactionDate,'DrCr',DrCr,'Amount',Amount,'Balance',Balance

		DicRow.update({'CBC':Balance})
		DicRow = getUpdateDefaultValue(DicDefault,DicRow)
		DicRecord.update({TransactionDate:DicRow})
		

	for row in PenaltyObj:
		
		DrCr 			= row.DebitCredit
		TransactionDate = row.TransactionDate
		Amount 			= float(row.Amount)
		DicRow 			= DicRecord.get(TransactionDate,{})
		Balance 		= DicRow.get('Penalty',0)
		Balance 		= setCalBalance(CBCBalanceType,DrCr,Amount,Balance)
		# print 'TransactionDate',TransactionDate,'DrCr',DrCr,'Amount',Amount,'Balance',Balance
		
		DicRow.update({'Penalty':Balance})
		DicRow = getUpdateDefaultValue(DicDefault,DicRow)
		DicRecord.update({TransactionDate:DicRow})

	DicRecord = collections.OrderedDict(sorted(DicRecord.items()))

	return render_template("report/loan/dailyloancollection.html",
							float 				= float,
							toMoney 			= mktmoney.toMoney,
							getCurrencyObj 		= mktmoney.getCurrencyObj(Currency),
							Company  			= mkttool.getCompany(),
							CurrencyObj 		= CurrencyObj,
							StartDate 			= StartDate,
							EndDate 			= EndDate,
							Branch 				= Branch,
							Currency 			= Currency,
							DicRecord 			= DicRecord,
							setPositiveBalance  = setPositiveBalance)

def getUpdateDefaultValue(DefaultDic,Dic):
	for row in DefaultDic:
		if row not in Dic:
			Dic.update({row:DefaultDic[row]})
	return Dic

def setCalBalance(BalanceType,DrCr,Amount,Balance=0):
	try:
		# print Balance
		Balance = float(Balance) + float(Amount) if BalanceType == DrCr else float(Balance) - float(Amount)

		return Balance
	except:
		raise

def setPositiveBalance(Balance):
	return abs(Balance) if Balance < 0 else Balance

''' Loan With Last Deposit Report '''
@app.route("/Morakot/Report/LoanWithLastDeposit", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanWithLastDeposit():
	
	TellerParam 	=	mktparam.getTellerParam()
	CollectionTran 	=	mktsetting.getAccSetting().LoanCollectionTran
	LoanContractObj =	db.session.query(
							MKT_LOAN_CONTRACT.ID,
							MKT_LOAN_CONTRACT.Account,
							MKT_LOAN_CONTRACT.Disbursed,
							MKT_LOAN_CONTRACT.Amount,
							MKT_LOAN_CONTRACT.Currency,
							MKT_LOAN_CONTRACT.ValueDate,
							MKT_LOAN_CONTRACT.OutstandingAmount,
							MKT_CUSTOMER.FirstNameEn,
							MKT_CUSTOMER.FirstNameKh,
							MKT_CUSTOMER.LastNameEn,
							MKT_CUSTOMER.LastNameKh,
							MKT_CUSTOMER.Gender,
							MKT_PROVINCE.Description.label("ProvinceDescription"),
							MKT_DISTRICT.Description.label("DistrictDescription")
						).\
						join(
							MKT_CUSTOMER, 
							MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID
						).\
						join(
							MKT_PROVINCE, 
							MKT_PROVINCE.ID == MKT_CUSTOMER.Province
						).\
						join(
							MKT_DISTRICT, 
							MKT_DISTRICT.ID == MKT_CUSTOMER.District
						).\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
						all()
	
	return render_template('report/loan/loan_with_last_deposit.html', 
				LoanContractObj 	=	LoanContractObj,
				DepTransaction 		=	TellerParam.DepTransaction,
				CurrencyObj 		=	mktmoney.getCurrencyObj,
				toMoney 			=	mktmoney.toMoney,
				getLastRepayAmount  =	getLastRepayAmount,
				CollectionTran 		=	CollectionTran,
				getMaxDayDue 		=	mktpdcollection.getMaxNumDayDue)

def getLastRepayAmount(Account,DepTransaction,CollectionTran):
	AccEntryObj	=	MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Account == Account).\
					filter(MKT_ACC_ENTRY.Transaction.in_([DepTransaction,CollectionTran])).\
					order_by(MKT_ACC_ENTRY.TransactionDate.desc()).first()

	return AccEntryObj

''' Loan Cash Flow Report '''
@app.route("/Morakot/Report/LoanCashFlow", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanCashFlow():
	# Loan Cash Flow Report
	BankDate = mktdate.getBankDate()
	StartDate		= request.args.get('StartDate') if request.args else ''
	EndDate 		= request.args.get('EndDate') if request.args else ''
	DicNextArrearPrior = {}
	# if request.args:
	# 	if not StartDate:
	# 		ListError.append(['StartDate'])

	CollectionDate  = "%s %s"%(StartDate,EndDate)
	CollectionDate 	= CollectionDate.strip()
	CollectionRange = CollectionDate.split()
	ListCondition 	= []
	DicRecord 		= {}


	LoanProduct = MKT_LOAN_PRODUCT.query.order_by(MKT_LOAN_PRODUCT.ID.asc())
	# ExpectedRepayment
	if len(CollectionRange)==2:
		ColLeft, ColRight = CollectionRange[0],CollectionRange[1]
		ListCondition.append(MKT_REP_SCHEDULE.CollectionDate.between(ColLeft, ColRight) )
	else:
		ListCondition.append(MKT_REP_SCHEDULE.CollectionDate==CollectionDate)
	ScheduleObj = db.session.query(func.sum(MKT_REP_SCHEDULE.Interest).label('Interest'),
									func.sum(MKT_REP_SCHEDULE.Principal).label('Principal'),
									func.count(MKT_REP_SCHEDULE.LoanID).label('LoanID'),
									MKT_LOAN_CONTRACT.LoanProduct).filter(*ListCondition).\
							join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_REP_SCHEDULE.LoanID).\
							group_by(MKT_LOAN_CONTRACT.LoanProduct)

	ActualObj = db.session.query(	func.sum(MKT_REP_SCHEDULE.PartPaidAmt).label('PartPaidAmt'),
									func.count(MKT_REP_SCHEDULE.LoanID).label('Count'),
									MKT_LOAN_CONTRACT.LoanProduct).filter(*ListCondition).\
							filter(MKT_REP_SCHEDULE.RepStatus.in_(['2','3'])).\
							join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_REP_SCHEDULE.LoanID).\
							group_by(MKT_LOAN_CONTRACT.LoanProduct,MKT_REP_SCHEDULE.LoanID)
	ListCondition 	= []
	if len(CollectionRange)==2:
		ColLeft, ColRight = CollectionRange[0],CollectionRange[1]
		ListCondition.append(MKT_REP_SCHEDULE_HIST.CollectionDate.between(ColLeft, ColRight) )
	else:
		ListCondition.append(MKT_REP_SCHEDULE_HIST.CollectionDate==CollectionDate)
	NumOfCustExpected = db.session.query(MKT_REP_SCHEDULE_HIST.LoanID).filter(*ListCondition).\
									group_by(MKT_REP_SCHEDULE_HIST.LoanID)
	DicNumOfCustExpected = {}
	for row in NumOfCustExpected:
		Count = 1
		LoanID = str(row.LoanID+"@0")
		LoanHistObj = MKT_LOAN_CONTRACT_HIST.query.get(LoanID)
		if LoanHistObj:
			Key = str(LoanHistObj.LoanProduct)
			if Key in DicNumOfCustExpected:
				CountCustomer = DicNumOfCustExpected[Key] + Count
				DicNumOfCustExpected.update({Key:CountCustomer})
			else:
				DicNumOfCustExpected = {Key:Count}
	
	PDCharge 		= mktsetting.getAppSetting('PDCharge')
	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')
	ListCondition 	= []
	if len(CollectionRange)==2:
		ColLeft, ColRight = CollectionRange[0],CollectionRange[1]
		ListCondition.append(MKT_ACC_ENTRY.TransactionDate.between(ColLeft, ColRight) )
	else:
		ListCondition.append(MKT_ACC_ENTRY.TransactionDate==CollectionDate)
	PDCollectionObj = db.session.query(MKT_ACC_ENTRY.Reference).filter(*ListCondition).\
								filter(MKT_ACC_ENTRY.Transaction.in_([PDCharge,PDInterest,PDPrincipal])).\
								distinct()
	PriorMonth 		= ""
	if StartDate:
		PriorMonth = mktdate.getDateISO(StartDate)
		PriorMonth = str(mktdate.getLastDayPrevMonth(PriorMonth))
	DicArrearPrior = {}
	ArrearPriorMonth = MKT_PD_DATE.query.filter(MKT_PD_DATE.DueDate<=PriorMonth).\
									filter(MKT_PD_DATE.ID.in_(PDCollectionObj.all()))
	for row in ArrearPriorMonth:

		LoanID = row.ID[2:]
		AmountPriorMonth = float(row.TotODAmount) - float(row.OutAmount)
		LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		if LoanObj:
			Key = str(LoanObj.LoanProduct)
			if Key in DicArrearPrior:
				TotalArrearPrior = DicArrearPrior[Key] + AmountPriorMonth
			else:
				TotalArrearPrior = AmountPriorMonth
			DicArrearPrior.update({Key:TotalArrearPrior})
	# print DicArrearPrior
	# 
	# Summary Actual repayment
	# Summary Actual repayment = Current Collection - Cuurent Arrear Prior Month payment + Next Arrear PriorMonth
	# Next Month 
	if StartDate:
		StartNextMonth 	= rescheduletools.getNextMonth(StartDate,1)
		EndNextMonth 	= rescheduletools.getNextMonth(EndDate,1)
		NextColDate 	=  "%s %s"%(StartNextMonth,EndNextMonth)
		NextColDate 	= NextColDate.strip()
		NextColDateRange 	= NextColDate.split()
		# Next Arrear Prior Month payment
		ListCondition 	= []
		if len(NextColDateRange)==2:
			ColLeft, ColRight = NextColDateRange[0],NextColDateRange[1]
			ListCondition.append(MKT_ACC_ENTRY.TransactionDate.between(ColLeft, ColRight) )
		else:
			ListCondition.append(MKT_ACC_ENTRY.TransactionDate==NextColDate)
		NextPDPbj = db.session.query(MKT_ACC_ENTRY.Reference).filter(*ListCondition).\
									filter(MKT_ACC_ENTRY.Transaction.in_([PDCharge,PDInterest,PDPrincipal])).\
									distinct()
		PriorMonth 		= ""
		if StartNextMonth:
			PriorMonth = mktdate.getDateISO(StartNextMonth)
			PriorMonth = str(mktdate.getLastDayPrevMonth(PriorMonth))
		DicNextArrearPrior = {}
		NextArrearPriorMonth = MKT_PD_DATE.query.filter(MKT_PD_DATE.DueDate<=PriorMonth).\
										filter(MKT_PD_DATE.ID.in_(NextPDPbj.all()))
		for row in NextArrearPriorMonth:

			LoanID = row.ID[2:]
			Amount = float(row.TotODAmount) - float(row.OutAmount)
			LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
			if LoanObj:
				Key = str(LoanObj.LoanProduct)
				if Key in DicNextArrearPrior:
					TotalArrearPrior = DicNextArrearPrior[Key] + Amount
				else:
					TotalArrearPrior = Amount
				DicNextArrearPrior.update({Key:TotalArrearPrior})




	AccSetting = mktsetting.getAccSetting()
	if AccSetting:
		ListTransaction = [ AccSetting.InterestTran, 
						  AccSetting.PrincipalTran]
	else:
		ListTransaction = []
		flash(msg_warning+"Interest & Principal Collection transaction not found")

	# Past Due Amount
	ListCondition = []						
	if len(CollectionRange)==2:
		ColLeft, ColRight = CollectionRange[0],CollectionRange[1]
		ListCondition.append(MKT_PD_DATE.DueDate.between(ColLeft, ColRight) )
	else:
		ListCondition.append(MKT_PD_DATE.DueDate==CollectionDate)

	PDObj = db.session.query(func.sum(MKT_PD_DATE.TotODAmount).label('TotODAmount'),
							MKT_LOAN_CONTRACT.LoanProduct).\
							filter(*ListCondition).\
							join(MKT_PAST_DUE,MKT_PAST_DUE.ID==MKT_PD_DATE.ID).\
							join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_PAST_DUE.LoanID).\
							group_by(MKT_LOAN_CONTRACT.LoanProduct)
	
	PriorMonth 		= ""
	if StartDate:
		PriorMonth = mktdate.getDateISO(StartDate)
		PriorMonth = str(mktdate.getLastDayPrevMonth(PriorMonth))

	PriorMonthObj = db.session.query(func.sum(MKT_PD_DATE.TotODAmount).label('TotODAmount'),
							MKT_LOAN_CONTRACT.LoanProduct).\
							filter(MKT_PD_DATE.DueDate<=PriorMonth).\
							join(MKT_PAST_DUE,MKT_PAST_DUE.ID==MKT_PD_DATE.ID).\
							join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_PAST_DUE.LoanID).\
							group_by(MKT_LOAN_CONTRACT.LoanProduct)
	

	# ExpectedRepayment = float(NormalDebt) +  float(DelayedDebt) + float(NewlyDelayed)

	for row in ScheduleObj:
		NormalDebt 	= row.Interest + row.Principal
		if str(row.LoanProduct) in DicNumOfCustExpected:
			ExpectedCustomer 	= row.LoanID + DicNumOfCustExpected[str(row.LoanProduct)]
		else:
			ExpectedCustomer 	= row.LoanID
		DicRow = {'NormalDebt':NormalDebt,'ExpectedCustomer':ExpectedCustomer}
		DicRecord.update({str(row.LoanProduct):DicRow})
	#DelayedDebt
	for row in PriorMonthObj:
		DelayedDebt = row.TotODAmount
		ID = str(row.LoanProduct)
		if ID in DicRecord:
			DicRow = DicRecord[ID]
			DicRow.update({'DelayedDebt':DelayedDebt})
		else:
			DicRow = {'DelayedDebt':DelayedDebt}
		DicRecord.update({ID:DicRow})

	#Newly delayed
	for row in PDObj:
		NewlyDelayed = row.TotODAmount
		ID = str(row.LoanProduct)
		if ID in DicRecord:
			DicRow = DicRecord[ID]
			DicRow.update({'NewlyDelayed':NewlyDelayed})
		else:
			DicRow = {'NewlyDelayed':NewlyDelayed}
		DicRecord.update({ID:DicRow})


	for row in ActualObj:
		ActualAmount = row.PartPaidAmt
		Count = row.Count
		ID = str(row.LoanProduct)
		if ID in DicRecord:
			DicRow = DicRecord[ID]
			DicRow.update({'ActualAmount':ActualAmount,'ActualCustomer':Count})
		else:
			DicRow = {'ActualAmount':ActualAmount,'ActualCustomer':Count}
		DicRecord.update({ID:DicRow})


	DicLoanPaidOff,DicCustomerPaidOff,DicPaidOffPD = getLoanPaidOff(StartDate,EndDate)

	return render_template("report/loan/loan_cashflow.html",
							float 		= float,
							str 		= str,
							hasattr 	= hasattr,
							toMoney 	= mktmoney.toMoney,
							formatNumber=mktmoney.formatNumber,
							CurrencyObj = mktmoney.getCurrencyObj('USD'),
							StartDate 	= StartDate,
							EndDate 	= EndDate,
							BankDate 	= BankDate,
							LoanProduct = LoanProduct,
							DicRecord 	= DicRecord,
							DicLoanPaidOff=DicLoanPaidOff,
							DicCustomerPaidOff=DicCustomerPaidOff,
							DicPaidOffPD=DicPaidOffPD,
							DicArrearPrior=DicArrearPrior,
							DicNextArrearPrior=DicNextArrearPrior
							)

def getLoanPaidOff(StartDate,EndDate):
	DicRecord = {}
	CollectionDate  = "%s %s"%(StartDate,EndDate)
	CollectionDate 	= CollectionDate.strip()
	CollectionRange = CollectionDate.split()
	ListCondition = []
	if len(CollectionRange)==2:
		ColLeft, ColRight = CollectionRange[0],CollectionRange[1]
		ListCondition.append(MKT_ACC_ENTRY.TransactionDate.between(ColLeft, ColRight) )
	else:
		ListCondition.append(MKT_ACC_ENTRY.TransactionDate==CollectionDate)
	
	PDCharge 		= mktsetting.getAppSetting('PDCharge')
	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')
	AccSetting 		= mktsetting.getAccSetting()
	if AccSetting:
		ListTransaction = [ 
							AccSetting.InterestTran, 
							AccSetting.PrincipalTran,
							PDCharge,PDInterest,PDPrincipal]
	else:
		ListTransaction = []
		flash(msg_warning+"Interest & Principal Collection transaction not found")

	Amendment 		= db.session.query(MKT_LOAN_AMENDMENT.LoanID)
	AmendmentHist 	= []
	PDHist 			= []
	for row in Amendment:
		PDAmendmentID 	= str("PD"+row.LoanID)
		AmendmentHist.append(PDAmendmentID)
		PDDATEHistID 	= str(PDAmendmentID+"@0")
		PDHist.append(PDDATEHistID)

	AmendmentHist.extend(Amendment)
	
	PaidOffObj = db.session.query(MKT_ACC_ENTRY.Amount,MKT_ACC_ENTRY.Reference.label('LoanID')).\
							filter(*ListCondition).\
							filter(MKT_ACC_ENTRY.Transaction.in_(ListTransaction)).\
							filter(MKT_ACC_ENTRY.Reference.in_(AmendmentHist))

	# CountPaidOffObj = db.session.query(MKT_ACC_ENTRY.Reference.label('LoanID')).\
	# 						filter(*ListCondition).\
	# 						filter(MKT_ACC_ENTRY.Transaction.in_(ListTransaction)).\
	# 						filter(MKT_ACC_ENTRY.Reference.in_(Amendment))

	# print PaidOffObj.all()
	
	# Past Due Amount
	ListCondition = []						
	if len(CollectionRange)==2:
		ColLeft, ColRight = CollectionRange[0],CollectionRange[1]
		ListCondition.append(MKT_PD_DATE_HIST.DueDate.between(ColLeft, ColRight) )
	else:
		ListCondition.append(MKT_PD_DATE_HIST.DueDate==CollectionDate)

	PDObj = MKT_PD_DATE_HIST.query.filter(*ListCondition)
	
	ListLoanIDPaidOff = []
	for row in PaidOffObj:
		Count  = 1
		Amount = float(row.Amount)
		LoanID = str("%s@0"%row.LoanID.replace('PD',''))
		LoanHistObj = MKT_LOAN_CONTRACT_HIST.query.get(LoanID)
		if LoanHistObj:
			LoanProduct = str(LoanHistObj.LoanProduct)
			ListLoanIDPaidOff.append(LoanID)
			if LoanProduct in DicRecord:
				SumAmount = DicRecord[LoanProduct] + Amount
				DicRecord.update({LoanProduct:SumAmount})
			else:
				DicRecord = {LoanProduct:Amount}

	CountPaidOffObj = db.session.query(func.count(MKT_LOAN_CONTRACT_HIST.LoanProduct).label('Count'),MKT_LOAN_CONTRACT_HIST.LoanProduct).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.in_(ListLoanIDPaidOff)).\
									group_by(MKT_LOAN_CONTRACT_HIST.LoanProduct)
	DicCustomerPaidOff = {}
	for row in CountPaidOffObj:
		Count  = float(row.Count)
		LoanProduct = str(row.LoanProduct)
		if LoanProduct in DicCustomerPaidOff:
			CountCustomer = DicCustomerPaidOff[LoanProduct] + Count
			DicCustomerPaidOff.update({LoanProduct:CountCustomer})
		else:
			DicCustomerPaidOff = {LoanProduct:Count}

	
	DicPaidOffPD = {}
	for row in PDObj:
		
		Amount = float(row.TotODAmount)
		PDID = str(row.ID)[:-2]
		LoanID = str('%s@0'%PDID[2:]) 
		
		LoanHistObj = MKT_LOAN_CONTRACT_HIST.query.get(LoanID)
		if LoanHistObj:
			LoanProduct = str(LoanHistObj.LoanProduct)
			# Paid Off Amount From Past Due
			if LoanProduct in DicPaidOffPD:
				TotalAmount = DicPaidOffPD[LoanProduct] + Amount
				DicPaidOffPD.update({LoanProduct:TotalAmount})
			else:
				DicPaidOffPD = {LoanProduct:Amount}

	return DicRecord,DicCustomerPaidOff,DicPaidOffPD

''' Consolidate Loan Report '''
@app.route("/Morakot/Report/ConsolidateLoan", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeConsolidateLoan():
	# Consolidate loan report
	BankDate = mktdate.getBankDate()
	Currency = db.session.query(MKT_LOAN_CONTRACT.Currency).distinct().all()
	# Header
	LoanProduct = db.session.query(MKT_LOAN_PRODUCT.ID, MKT_LOAN_PRODUCT.Description)
	DicLoanProduct = {}
	for item in LoanProduct:
		DicLoanProduct.update({item.ID:item.Description})

	LoanContract = db.session.query(MKT_LOAN_CONTRACT.Branch,
									MKT_BRANCH.Description,
									MKT_LOAN_CONTRACT.Currency,
									MKT_LOAN_CONTRACT.LoanProduct,
									func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Amount'),
									func.count(MKT_LOAN_CONTRACT.Currency).label('CountNumberOfLoan')
									).\
					filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
					filter(MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
					join(MKT_LOAN_PRODUCT, MKT_LOAN_PRODUCT.ID==MKT_LOAN_CONTRACT.LoanProduct).\
					join(MKT_BRANCH, MKT_BRANCH.ID==MKT_LOAN_CONTRACT.Branch).\
					order_by(MKT_LOAN_CONTRACT.Currency.asc(),
							 MKT_LOAN_CONTRACT.Branch.asc()).\
					group_by(MKT_LOAN_CONTRACT.Branch,
							 MKT_LOAN_CONTRACT.LoanProduct,
							 MKT_LOAN_CONTRACT.Currency,
							 MKT_BRANCH.Description)

	DicLoanContract 		= {}
	DicCountNumberOfLoan 	= {}	# Number of loans in each product type
	DicTotalAmountByPro 	= {}	# Total amount of loans in each product type
	DicTotalNumberByPro 	= {}	# Total number of loan in each product type
	Branch 	 				= {}

	'''
		Add total by types of currency.
		* Kimchhorng: Nov 29, 2016
	'''
	for item in LoanContract:
		# print 'item', item
		DicLoanContract.update({ item.Branch+item.LoanProduct+item.Currency: item.Amount })
		DicCountNumberOfLoan.update({ item.Branch+item.LoanProduct+item.Currency: item.CountNumberOfLoan })
		if item.LoanProduct + item.Currency in DicTotalAmountByPro:
			CurrentAmount = DicTotalAmountByPro[item.LoanProduct+item.Currency]
			CurrentNumber = DicTotalNumberByPro[item.LoanProduct+item.Currency]

			Amount = CurrentAmount+float(item.Amount)
			Number = CurrentNumber+item.CountNumberOfLoan

			DicTotalAmountByPro.update({item.LoanProduct+item.Currency: Amount })
			DicTotalNumberByPro.update({item.LoanProduct+item.Currency: Number })
		else:
			DicTotalAmountByPro.update({item.LoanProduct+item.Currency: float(item.Amount) })
			DicTotalNumberByPro.update({item.LoanProduct+item.Currency: item.CountNumberOfLoan })

	# print 'DicTotalAmountByPro', DicTotalAmountByPro
	# print '-------'
	# print 'DicTotalNumberByPro', DicTotalNumberByPro
	# print '-------'
	# print 'DictTotalAmount', DicTotalAmount
	# print ""
	# print 'DicLoanContract', DicLoanContract
	# print '-------'
	# print 'DicTotalNumber', DicTotalNumber

	Branch = db.session.query(MKT_LOAN_CONTRACT.Branch,
							  MKT_BRANCH.Description).\
					join(MKT_LOAN_PRODUCT, MKT_LOAN_PRODUCT.ID==MKT_LOAN_CONTRACT.LoanProduct).\
					join(MKT_BRANCH, MKT_BRANCH.ID==MKT_LOAN_CONTRACT.Branch).\
					order_by(MKT_LOAN_CONTRACT.Branch.asc()).\
					group_by(MKT_LOAN_CONTRACT.Branch,
							 MKT_BRANCH.Description)

	return render_template("report/loan/consolidate_loan.html",
							float 				= float,
							mktfunction 		= mktreport,
							toMoney 			= mktmoney.toMoney,
							formatNumber		= mktmoney.formatNumber,
							CurrencyObj 		= mktmoney.getCurrencyObj,
							Currency 			= Currency,
							BankDate 			= BankDate,
							LoanProduct 		= LoanProduct,
							DicLoanContract 	= DicLoanContract,
							DicCountNumberOfLoan= DicCountNumberOfLoan,
							DicTotalAmountByPro	= DicTotalAmountByPro,
							DicTotalNumberByPro = DicTotalNumberByPro,
							Branch 				= Branch)


''' Loan Aging Report '''
@app.route("/Morakot/Report/LoanAging", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeLoanAging():
	# Loan Agin Report
	DicRecord 	= {}
	BankDate 	= mktdate.getBankDate()
	Currency 	= db.session.query(MKT_LOAN_CONTRACT.Currency).distinct().all()
	PDObj 		= db.session.query(
									MKT_LOAN_CONTRACT.Branch,
									MKT_LOAN_CONTRACT.Currency,
									MKT_PAST_DUE.ID,
									MKT_LOAN_CONTRACT.OutstandingAmount).\
					join(MKT_PAST_DUE, MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
					filter(MKT_LOAN_CONTRACT.OutstandingAmount > decimal.Decimal(0),
						   MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
					filter(or_(	MKT_PAST_DUE.TotPrincipalDue > decimal.Decimal(0), 
								MKT_PAST_DUE.TotInterestDue > decimal.Decimal(0))
								).\
					group_by(MKT_LOAN_CONTRACT.Branch,
							MKT_LOAN_CONTRACT.Currency,
							MKT_PAST_DUE.ID,
							MKT_LOAN_CONTRACT.OutstandingAmount)
	
	AccSetting 			= 	mktsetting.getAccSetting()

	for row in PDObj:

		CurrencyObj 	= 	mktmoney.getCurrencyObj(row.Currency)
		Amount = decimal.Decimal(row.OutstandingAmount)
		NumDayDue = mktpdcollection.getMaxNumDayDue(row.ID)
		NumDayDue = int(NumDayDue) if NumDayDue else 0

		# Convert amount to base currency
		Amount = Amount * CurrencyObj.ReportingRate

		if NumDayDue <= 30:
			TempAmount 	= DicRecord[row.Branch+'PD30'] if row.Branch+'PD30' in DicRecord  else 0
			DicRecord.update({row.Branch+'PD30': Amount + TempAmount })

			TempSum 	= DicRecord['SumPD30'] if 'SumPD30' in DicRecord  else 0
			DicRecord.update({'SumPD30': Amount + TempSum })

		elif NumDayDue <= 60:
			TempAmount = DicRecord[row.Branch+'PD60'] if row.Branch+'PD60' in DicRecord  else 0
			DicRecord.update({row.Branch+'PD60': Amount + TempAmount })

			TempSum 	= DicRecord['SumPD60'] if 'SumPD60' in DicRecord  else 0
			DicRecord.update({'SumPD60': Amount + TempSum })

		elif NumDayDue <= 90:
			TempAmount = DicRecord[row.Branch+'PD90'] if row.Branch+'PD90' in DicRecord  else 0
			DicRecord.update({row.Branch+'PD90': Amount + TempAmount })

			TempSum 	= DicRecord['SumPD90'] if 'SumPD90' in DicRecord  else 0
			DicRecord.update({'SumPD90': Amount + TempSum })

		elif NumDayDue <= 180:
			TempAmount = DicRecord[row.Branch+'PD180'] if row.Branch+'PD180' in DicRecord  else 0
			DicRecord.update({row.Branch+'PD180': Amount + TempAmount })

			TempSum 	= DicRecord['SumPD180'] if 'SumPD180' in DicRecord  else 0
			DicRecord.update({'SumPD180': Amount + TempSum })

		else:
			TempAmount = DicRecord[row.Branch+'PDUP'] if row.Branch+'PDUP' in DicRecord  else 0
			DicRecord.update({row.Branch+'PDUP': Amount + TempAmount })

			TempSum 	= DicRecord['SumPDUP'] if 'SumPDUP' in DicRecord  else 0
			DicRecord.update({'SumPDUP': Amount + TempSum })
	Branch = db.session.query(
								MKT_PAST_DUE.Branch,
								MKT_BRANCH.Description,
								MKT_PAST_DUE.Currency).\
						join(MKT_BRANCH,MKT_BRANCH.ID==MKT_PAST_DUE.Branch).\
						group_by(MKT_PAST_DUE.Branch,MKT_BRANCH.Description,MKT_PAST_DUE.Currency).\
						distinct(MKT_PAST_DUE.Branch)
	# SumDic = DicRecord
	# for k,v in SumDic.iteritems():
	# 	SumDic[k] =+ v
	# flash(SumDic)

	return render_template("report/loan/loan_aging.html",
						float 		= float,
						mktfunction = mktreport,
						toMoney 	= mktmoney.toMoney,
						CurrencyObj = mktmoney.getCurrencyObj,
						BankDate 	= BankDate,
						DicRecord 	= DicRecord,
						Branch 		= Branch,
						Currency 	= Currency,
						AccSetting 	= AccSetting)

''' 
	Rewrite report CO Performance
	* Kimchhorng: Feb 27, 2017
'''
''' COPerformance Report '''
@app.route("/Morakot/Report/COPerformance/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getCOPerformance():
	''' End result will be a dictionary contain all information like below:
		{COID1:
			{COID1Currency1:
				{
					key1 : value 1,
					key2 : value 2,
					... 
				},
			COID1Currency2:
				{
					key1 : value 1,
					key2 : value 2,
					... 
				},
			# SubTotal for COID1 converted to BaseCurrency
			key1 : value 1,
			key2 : value 2,
			... 
			},
		COID2: {...},
		# GrandTotal for all CO converted to BaseCurrency
		key1 : value1,
		key2 : value2,
		... 
		}
	'''
	try:
		CompanyObj 		=	mktreport.getCompanyObj()
		BankDate 		= 	mktdate.getBankDate()
		Branch 			= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else session["ChangeBranch"]
		BranchList 		=	Branch.split()
		BranchObj 		= 	MKT_BRANCH.query

		## Base Currency
		AccSetting 		= 	mktsetting.getAccSetting()
		if AccSetting:
			BaseCurrency= 	AccSetting.BaseCurrency
		BaseCurrencyObj = 	mktmoney.getCurrencyObj(BaseCurrency)
		CurrencyObj 	= 	MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())
		CheckCurrency 	=	db.session.query(MKT_LOAN_CONTRACT.Currency).order_by(MKT_LOAN_CONTRACT.Currency.asc()).distinct(MKT_LOAN_CONTRACT.Currency)
		ReportingRateObj= 	mktaccounting.getReportingRateObj()

		## Asset Class
		AssetClassObj 	=	MKT_ASSET_CLASS.query.\
										filter(~MKT_ASSET_CLASS.ID.contains('-')).\
										filter(MKT_ASSET_CLASS.ID != '0').\
										order_by(MKT_ASSET_CLASS.ID)
		LoanClass 		= 	request.args.get('LoanClass') if request.args else AssetClassObj.first().ID
		OfficerObj 		=	MKT_OFFICER.query.order_by(MKT_OFFICER.ID)

		CustomerObj 	=	db.session.query(
								MKT_CUSTOMER.ID.label('CustomerID'),
								MKT_LOAN_CONTRACT.Branch,
								MKT_LOAN_CONTRACT.Currency,
								MKT_OFFICER.ID.label('OfficerID'),
							).\
							outerjoin(
								MKT_LOAN_CONTRACT,
								MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
							outerjoin(
								MKT_OFFICER,
								MKT_OFFICER.ID == MKT_LOAN_CONTRACT.ContractOfficerID).\
							filter(
								MKT_LOAN_CONTRACT.DisbursedStat == 'Y',
								MKT_LOAN_CONTRACT.OutstandingAmount > decimal.Decimal(0)
							).\
							group_by(
								MKT_CUSTOMER.ID,
								MKT_LOAN_CONTRACT.Branch,
								MKT_OFFICER.ID,
								MKT_LOAN_CONTRACT.Currency)

		LoanContractObj =	db.session.query(
								MKT_LOAN_CONTRACT.Branch,
								MKT_LOAN_CONTRACT.Currency,
								MKT_OFFICER.ID.label('OfficerID'),
								func.count(MKT_LOAN_CONTRACT.ID).label("NoOfLoan"), # Number of all loan contracts
								func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("OutstandingAmt"), # Total Loan Outstanding of all loans
								func.sum(MKT_LOAN_CONTRACT.Amount).label("LoanBalance"), # Total Loan Balance of all loans
								func.sum(MKT_LOAN_CONTRACT.Disbursed).label("DisbursedAmt") # Total Disbursed Amount of all loans
							).\
							filter(
								MKT_LOAN_CONTRACT.DisbursedStat == 'Y',
								MKT_LOAN_CONTRACT.OutstandingAmount > decimal.Decimal(0)
							).\
							outerjoin(
								MKT_OFFICER,
								MKT_OFFICER.ID == MKT_LOAN_CONTRACT.ContractOfficerID).\
							order_by(	MKT_LOAN_CONTRACT.Branch,
										MKT_OFFICER.ID,
										MKT_LOAN_CONTRACT.Currency).\
							group_by(	MKT_LOAN_CONTRACT.Branch,
										MKT_OFFICER.ID,
										MKT_LOAN_CONTRACT.Currency)
		PastDueObj 		=	db.session.query(
								MKT_LOAN_CONTRACT.Branch,
								MKT_LOAN_CONTRACT.Currency,
								MKT_OFFICER.ID.label('OfficerID'),
								func.count(MKT_LOAN_CONTRACT.ID).label('NoOfPAR'), # Number of loan in arrear
								func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('PARsAmt'), # Total Outstanding of loan arrear
								func.sum(MKT_PAST_DUE.TotPrincipalDue).label("PrincipalArrear"),
								func.sum(MKT_PAST_DUE.TotInterestDue).label('InterestArrear'),
								func.sum(MKT_PAST_DUE.TotPenaltyDue).label("PenaltyArrear") # Total Principal Due of loans arrear
							).\
							outerjoin(
								MKT_PAST_DUE,
								MKT_LOAN_CONTRACT.ID == MKT_PAST_DUE.LoanID).\
							outerjoin(
								MKT_OFFICER,
								MKT_OFFICER.ID == MKT_LOAN_CONTRACT.ContractOfficerID).\
							filter(
								cast(MKT_LOAN_CONTRACT.AssetClass, sqlalchemy.Integer) >= int(LoanClass)
							).\
							order_by(	MKT_LOAN_CONTRACT.Branch,
										MKT_OFFICER.ID,
										MKT_LOAN_CONTRACT.Currency).\
							group_by(	MKT_LOAN_CONTRACT.Branch,
										MKT_OFFICER.ID,
										MKT_LOAN_CONTRACT.Currency)
		LoanContractObj = LoanContractObj if 'ALL' in BranchList else LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		PastDueObj 		= PastDueObj if 'ALL' in BranchList else PastDueObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		CustomerObj	= CustomerObj if 'ALL' in BranchList else CustomerObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		OfficerObj 		= OfficerObj if 'ALL' in BranchList else OfficerObj.filter(MKT_OFFICER.Branch.in_(BranchList))
		BranchObj 		= BranchObj if "ALL" in BranchList else BranchObj.filter(MKT_BRANCH.ID.in_(BranchList))

		## Get all list officer
		ListOfficer 	= [str(item.ID) for item in OfficerObj]

		## 
		DictCO 			= {}
		DictCODetail	= {}
		DictTotal 		= {}


		## -------------------- ##
		## Column: NoOfBorrower ##
		## -------------------- ##
		if CustomerObj.first():
			TotalBorrowers 	= 0
			for row in CustomerObj:
				## Generate dictionary key
				key1 = str(row.OfficerID) if str(row.OfficerID) in ListOfficer else "N/A-%s"%str(row.Branch)
				key2 = str(row.OfficerID) + str(row.Currency) if str(row.OfficerID) in ListOfficer else "N/A-%s"%str(row.Branch) + str(row.Currency)

				NoOfBorrower = CustomerObj.filter(MKT_OFFICER.ID == row.OfficerID, MKT_LOAN_CONTRACT.Currency == row.Currency).count()
				SubTotBorrowers = CustomerObj.filter(MKT_OFFICER.ID == row.OfficerID).count()

				## Note: filter by branch if no OfficerID, so that it will show only N/A officer by branch
				if row.OfficerID not in ListOfficer:
					NoOfBorrower = CustomerObj.filter(MKT_OFFICER.ID == row.OfficerID, MKT_LOAN_CONTRACT.Currency == row.Currency, MKT_LOAN_CONTRACT.Branch == row.Branch).count()
					SubTotBorrowers = CustomerObj.filter(MKT_OFFICER.ID == row.OfficerID, MKT_LOAN_CONTRACT.Branch== row.Branch).count()

				## Update NoOfBorrower by Currency and CO
				DictCODetail.update({key2:{'NoOfBorrower':NoOfBorrower}})
				## Update Sub Total NoOfBorrower by CO
				DictCO.update({key1:{'NoOfBorrower':SubTotBorrowers}})
			## Update Grand Total NoOfBorrower
			TotalBorrowers = CustomerObj.distinct(MKT_CUSTOMER.ID).count()
			DictTotal.update({'NoOfBorrower':TotalBorrowers})


		## ------------------------------------------------------------ ##
		## Columns: NoOfLoan, OutstandingAmt, LoanBalance, DisbursedAmt ##
		## ------------------------------------------------------------ ##
		if LoanContractObj.first():
			TotalNoOfLoan		= 0
			TotalOutstandingAmt = 0
			TotalLoanBal 		= 0
			TotalDisbursedAmt 	= 0

			for row in LoanContractObj:
				## Generate key for dictionary
				key1 = str(row.OfficerID) if str(row.OfficerID) in ListOfficer else "N/A-%s"%str(row.Branch)
				key2 = str(row.OfficerID) + str(row.Currency) if str(row.OfficerID) in ListOfficer else "N/A-%s"%str(row.Branch) + str(row.Currency)

				## Update fields by Currency and CO
				NoOfLoan 		= row.NoOfLoan
				OutstandingAmt 	= row.OutstandingAmt 
				LoanBalance 	= row.LoanBalance
				DisbursedAmt 	= row.DisbursedAmt

				DictCODetail.get(key2,{}).update({
					'NoOfLoan'		: NoOfLoan,
					'OutstandingAmt': OutstandingAmt,
					'LoanBalance'	: LoanBalance,
					'DisbursedAmt'	: DisbursedAmt
				})

				## Update Sub Total fields by CO
				SubTotNoOfLoan 		= 0
				SubTotOutstandingAmt= 0
				SubTotLoanBalance 	= 0
				SubTotDisbursedAmt	= 0

				LCByOfficer 		= LoanContractObj.filter(MKT_OFFICER.ID == row.OfficerID)
				## Filter object by branch if no Officer not found to display when filter by Branch
				if row.OfficerID not in ListOfficer:
					LCByOfficer 		= LCByOfficer.filter(MKT_LOAN_CONTRACT.Branch == row.Branch)

				for col in LCByOfficer:
					ExchangeRate		= float(ReportingRateObj[col.Currency])
					SubTotNoOfLoan 		+= col.NoOfLoan
					SubTotOutstandingAmt+= float(col.OutstandingAmt) * ExchangeRate
					SubTotLoanBalance 	+= float(col.LoanBalance) * ExchangeRate
					SubTotDisbursedAmt	+= float(col.DisbursedAmt) * ExchangeRate
				DictCO.get(key1,{}).update({
					'NoOfLoan'		: SubTotNoOfLoan,
					'OutstandingAmt': SubTotOutstandingAmt,
					'LoanBalance'	: SubTotLoanBalance,
					'DisbursedAmt'	: SubTotDisbursedAmt
				})
				
				## Update Grand Total fields
				ExchangeRate		= float(ReportingRateObj[row.Currency])
				TotalNoOfLoan		+=	row.NoOfLoan
				TotalOutstandingAmt +=	float(row.OutstandingAmt) * ExchangeRate
				TotalLoanBal 		+=	float(row.LoanBalance) * ExchangeRate
				TotalDisbursedAmt 	+=	float(row.DisbursedAmt) * ExchangeRate
			DictTotal.update({
				'NoOfLoan'		: TotalNoOfLoan,
				'OutstandingAmt': TotalOutstandingAmt,
				'LoanBalance'	: TotalLoanBal,
				'DisbursedAmt'	: TotalDisbursedAmt
			})


		## ----------------------------------------------------------- ##
		## Columns: NoOfPAR, PARsAmt, PARsRate, ArreaarAmt, ArrearRate ##
		## ----------------------------------------------------------- ##
		if PastDueObj.first():
			TotalNoOfPAR 			=	0
			TotalPARsAmt 			=	0
			TotalPARsRate 			=	0
			TotalPrincipalArrear 	= 0
			TotalInterestArrear 	= 0
			TotalPenaltyArrear 		= 0
			TotalArrearRate 		=	0

			for row in PastDueObj:
				## Generate key for dictionary
				key1 = str(row.OfficerID) if str(row.OfficerID) in ListOfficer else "N/A-%s"%str(row.Branch)
				key2 = str(row.OfficerID) + str(row.Currency) if str(row.OfficerID) in ListOfficer else "N/A-%s"%str(row.Branch) + str(row.Currency)

				OutstandingAmt 		= DictCODetail.get(key2,{}).get('OutstandingAmt',0)
				SubOutstandingAmt 	= DictCO.get(key1,{}).get('OutstandingAmt',0)
				TotOutstandinAmt 	= DictTotal.get('OutstandingAmt',0)

				## Update fields by Currency and CO
				NoOfPAR 		= row.NoOfPAR
				PARsAmt 		= row.PARsAmt
				PARsRate 		= (float(row.PARsAmt) / float(OutstandingAmt)) * 100 if OutstandingAmt else 0

				PrincipalArrear	= row.PrincipalArrear if row.PrincipalArrear else 0
				InterestArrear	= row.InterestArrear if row.InterestArrear else 0
				PenaltyArrear	= row.PenaltyArrear if row.PenaltyArrear else 0
				ArrearRate 		= (float(PrincipalArrear) / float(OutstandingAmt)) * 100 if OutstandingAmt else 0

				DictCODetail.get(key2,{}).update({
					'NoOfPAR' 			: NoOfPAR,
					'PARsAmt' 			: PARsAmt,
					'PARsRate' 			: PARsRate,
					'PrincipalArrear' 	: PrincipalArrear,
					'InterestArrear' 	: InterestArrear,
					'PenaltyArrear' 	: PenaltyArrear,
					'ArrearRate'		: ArrearRate
				})

				## Update Sub Total fields by CO
				SubTotNoOfPAR 			= 0
				SubTotPARsAmt			= 0
				SubTotPARsRate			= 0
				SubTotPrincipalArrear	= 0
				SubTotInterestArrear	= 0
				SubTotPenaltyArrear		= 0
				SubTotArrearRate		= 0

				PDByOfficer = PastDueObj.filter(MKT_OFFICER.ID == row.OfficerID)
				## Filter object by branch if no Officer not found to display when filter by Branch
				if row.OfficerID not in ListOfficer:
					PDByOfficer = PDByOfficer.filter(MKT_LOAN_CONTRACT.Branch == row.Branch)

				for col in PDByOfficer:
					ExchangeRate	= 	float(ReportingRateObj[col.Currency])
					SubTotNoOfPAR 	+= 	col.NoOfPAR
					SubTotPARsAmt	+= 	float(col.PARsAmt) * ExchangeRate
					SubTotPrincipalArrear	+= 	float(col.PrincipalArrear if col.PrincipalArrear else 0) * ExchangeRate
					SubTotInterestArrear	+= 	float(col.InterestArrear if col.InterestArrear else 0) * ExchangeRate
					SubTotPenaltyArrear		+= 	float(col.PenaltyArrear if col.PenaltyArrear else 0) * ExchangeRate

				SubTotPARsRate		= 	(SubTotPARsAmt / SubOutstandingAmt) * 100 if SubOutstandingAmt else 0
				SubTotArrearRate	= 	(SubTotPrincipalArrear / SubOutstandingAmt) * 100 if SubOutstandingAmt else 0
				DictCO.get(key1,{}).update({
					'NoOfPAR' 			:	SubTotNoOfPAR,
					'PARsAmt' 			:	SubTotPARsAmt,
					'PARsRate' 			:	SubTotPARsRate,
					'PrincipalArrear' 	:	SubTotPrincipalArrear,
					'InterestArrear' 	:	SubTotInterestArrear,
					'PenaltyArrear' 	:	SubTotPenaltyArrear,
					'ArrearRate'		:	SubTotArrearRate
				})

				## Update Grand Total fields
				ExchangeRate			= 	float(ReportingRateObj[row.Currency])
				TotalNoOfPAR 			+=	row.NoOfPAR
				TotalPARsAmt 			+=	float(row.PARsAmt) * ExchangeRate
				TotalPrincipalArrear 	+=	float(row.PrincipalArrear if row.PrincipalArrear else 0) * ExchangeRate
				TotalInterestArrear 	+=	float(row.InterestArrear if row.InterestArrear else 0) * ExchangeRate
				TotalPenaltyArrear 		+=	float(row.PenaltyArrear if row.PenaltyArrear else 0) * ExchangeRate

			TotalPARsRate 		=	(TotalPARsAmt / TotalOutstandingAmt) * 100 if TotalOutstandingAmt else 0
			TotalArrearRate 	=	(TotalPrincipalArrear / TotalOutstandingAmt) * 100 if TotalOutstandingAmt else 0
			DictTotal.update({
				'NoOfPAR' 			:	TotalNoOfPAR,
				'PARsAmt' 			:	TotalPARsAmt,
				'PARsRate' 			:	TotalPARsRate,
				'PrincipalArrear' 	:	TotalPrincipalArrear,
				'InterestArrear' 	:	TotalInterestArrear,
				'PenaltyArrear' 	:	TotalPenaltyArrear,
				'ArrearRate'		:	TotalArrearRate
			})


		## -------------- ##
		## Column: COName ##
		## -------------- ##
		NotAvailableOfficer = ["N/A-%s"%row.ID for row in BranchObj]
		ListOfficer.extend(NotAvailableOfficer)
		if OfficerObj.first():
			for officer in ListOfficer:
				## Generate key for dictionary
				key1 = officer
				NewOfficerObj = OfficerObj.filter(MKT_OFFICER.ID == officer).first()
				## If CO not found, will display name "Unknown"
				COName 	= NewOfficerObj.LastName + " " + NewOfficerObj.FirstName if NewOfficerObj else "Unknown"

				for col in CurrencyObj:
					## Generate key for dictionary
					key2 = officer + str(col.ID)
					DictCO.get(key1,{}).update({key2: DictCODetail.get(key2,{}), 'COName':COName})

				DictTotal.update({key1:DictCO.get(key1,{})})


		return render_template("report/loan/coperformance.html",
								CompanyObj 		=	CompanyObj,
								Branch 			=	Branch,
								BankDate 		=	BankDate,
								AssetClassObj	=	AssetClassObj,
								LoanClass 		=	LoanClass,
								BaseCurrencyObj =	BaseCurrencyObj,
								toMoney 		=	mktmoney.toMoney,
								formatNumber	=	mktmoney.formatNumber,
								DictTotal 		=	DictTotal,
								ListOfficer 	=	ListOfficer,
								CurrencyObj 	=	CurrencyObj,
								CheckCurrency 	=	CheckCurrency,
								float 			=	float
							)

	except Exception, e:
		raise
''' This function is used inside CO Performance Report only '''
def calculateRate(numerator, denominator):
	try:
		numerator 	= decimal.Decimal(numerator)
		denominator = decimal.Decimal(denominator)

		result = (numerator / denominator) * 100
		return result
	except Exception as e:
		raise e

def sumDictionaryAmount(Item, Dict, CheckField, SumField, ExchangeRate=""):
	# print getattr(Item, CheckField), Dict
	if getattr(Item, CheckField) in Dict:
		# print "1"
		CurrentAmount = Dict.get(getattr(Item, CheckField)).get(SumField,0)
		Amount = CurrentAmount + (decimal.Decimal(getattr(Item, SumField)) * decimal.Decimal(ExchangeRate)) if ExchangeRate else CurrentAmount + getattr(Item, SumField)
		# print Amount
	else:
		# print "2"
		Amount = decimal.Decimal(getattr(Item, SumField)) * ExchangeRate if ExchangeRate else getattr(Item, SumField)
	return Amount




def getTotalByList(L, Type='int'):
	try:
		
		Result = 0

		if len(L) > 0:
			for item in L:
				if Type == 'int':
					Result += int(item)
				else:
					Result += float(item)

		return Result

	except Exception, e:
		raise

''' NetworkPerformance Report '''
@app.route("/Morakot/Report/NetworkPerformance/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNetworkPerformance():
	try:
		
		Branch 			= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else session["ChangeBranch"]
		BranchList 		=	Branch.split()
		Currency 		= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		ShowVillageCode = 	request.args.get("ShowVillageCode") if 'ShowVillageCode' in request.args else "No"
		CurrencyList 	=	MKT_CURRENCY.query.all()
		CurrencyObj 	=	mktmoney.getCurrencyObj(Currency)
		Curr 			= 	db.session.query(MKT_LOAN_CONTRACT.Currency).distinct().all()
		StartDate 		=	request.args.get("StartDate") if "StartDate" in request.args else ""
		EndDate 		=	request.args.get("EndDate") if "EndDate" in request.args else mktdate.getBankDate()

		LoanObj 	=	db.session.query(
							MKT_PROVINCE.Description,
							MKT_CUSTOMER.Province,
							func.count(MKT_LOAN_CONTRACT.ID).label("NumberOfLoan"),
							func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("OutstandingAmount")
						).\
						join(
							MKT_CUSTOMER,
							MKT_CUSTOMER.Province == MKT_PROVINCE.ID
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.Currency == Currency).\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0)
		
		''' 
			Fixed if user input in criteria == 'ALL' then LoanObj will not filter Branch
			* Kimchhorng: Dec 05, 2016
		'''
		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_PROVINCE.Description,
							MKT_CUSTOMER.Province
						).\
						all()

		CompanyObj 	=	mktreport.getCompanyObj()
		BranchName 	=	""
		BranchObj 	=	MKT_BRANCH.query.get(Branch)
		if BranchObj:
			BranchName 	=	BranchObj.Description

		ProvinceObj =	MKT_PROVINCE.query.all()

		return render_template("report/loan/network_performance.html",
								CompanyObj 		=	CompanyObj,
								BranchName 		=	BranchName,
								Branch 			=	Branch,
								BranchList 		=	BranchList,
								StartDate 		=	StartDate,
								EndDate 		=	EndDate,
								ProvinceObj 	=	ProvinceObj,
								LoanObj 		=	LoanObj,
								formatNumber 	=	mktmoney.formatNumber,
								CurrencyObj 	=	CurrencyObj,
								Currency 		=	Currency,
								ShowVillageCode = 	ShowVillageCode,
								CurrencyList 	=	CurrencyList,
								toMoney 		=	mktmoney.toMoney,
								float 			=	float,
								int 			=	int,
								getTotalDistrictByProvince 	=	getTotalDistrictByProvince,
								getTotalCommuneByProvince 	=	getTotalCommuneByProvince,
								getTotalVillageByProvince 	=	getTotalVillageByProvince,
								getDistrictDetail 			=	getDistrictDetail,
								getTotalOfGender 			=	getTotalOfGender
							)

	except Exception, e:
		raise

def getTotalDistrictByProvince(Province, BranchList, StartDate="", EndDate=""):
	try:
		
		# Currency 	= 	mktsetting.getAccSetting().BaseCurrency
		Currency 	= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		LoanObj 	=	db.session.query(
							MKT_CUSTOMER.District
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
						filter(MKT_CUSTOMER.Province == Province).\
						filter(MKT_LOAN_CONTRACT.Currency == Currency)
						# filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))

		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_CUSTOMER.District
						)

		return LoanObj.count()

	except Exception, e:
		raise

def getTotalCommuneByProvince(Province, BranchList, StartDate="", EndDate=""):
	try:
		
		# Currency 	= 	mktsetting.getAccSetting().BaseCurrency
		Currency 	= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		LoanObj 	=	db.session.query(
							MKT_CUSTOMER.Commune
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
						filter(MKT_CUSTOMER.Province == Province).\
						filter(MKT_LOAN_CONTRACT.Currency == Currency)
						# filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))

		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_CUSTOMER.Commune
						)

		return LoanObj.count()

	except Exception, e:
		raise

def getTotalVillageByProvince(Province, BranchList, StartDate="", EndDate=""):
	try:
		
		# Currency 	= 	mktsetting.getAccSetting().BaseCurrency
		Currency 	= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		LoanObj 	=	db.session.query(
							MKT_CUSTOMER.Village
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
						filter(MKT_CUSTOMER.Province == Province).\
						filter(MKT_LOAN_CONTRACT.Currency == Currency)
						# filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))

		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_CUSTOMER.Village
						)

		return LoanObj.count()

	except Exception, e:
		raise

def getDistrictDetail(Province, BranchList, StartDate="", EndDate="", ShowVillageCode="No"):
	try:
		
		# Currency 	= 	mktsetting.getAccSetting().BaseCurrency
		Currency 	= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		LoanObj 	=	db.session.query(
							MKT_CUSTOMER.District,
							MKT_DISTRICT.Description,
							func.count(MKT_LOAN_CONTRACT.ID).label("NumberOfLoan"),
							func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("OutstandingAmount")
						).\
						join(
							MKT_DISTRICT,
							MKT_DISTRICT.ID == MKT_CUSTOMER.District
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
						filter(MKT_CUSTOMER.Province == Province).\
						filter(MKT_LOAN_CONTRACT.Currency == Currency)
						# filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))

		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))


		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_CUSTOMER.District,
							MKT_DISTRICT.Description
						).\
						all()

		Output 	=	""

		if LoanObj:

			for item in LoanObj:

				Output 	+=	"<tr>"
				Output 	+=	"<td></td>"
				Output 	+=	"<td>" + item.Description + "</td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getCountCommuneByDistrict(Province, item.District, BranchList, StartDate, EndDate), 2, 0)) + "</td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getCountVillageByDistrict(Province, item.District, BranchList, StartDate, EndDate), 2, 0)) + "</td>"
				if ShowVillageCode == 'Yes':
					Output 	+=	"<td> - </td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getTotalOfGender(Province, item.District, '', '', BranchList, 'Male', StartDate, EndDate) , 2, 0)) + "</td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getTotalOfGender(Province, item.District, '', '', BranchList, 'Female', StartDate, EndDate) , 2, 0)) + "</td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getTotalOfGender(Province, item.District, '', '', BranchList, 'Other', StartDate, EndDate) , 2, 0)) + "</td>"
				Output 	+=	"<td>" + mktmoney.formatNumber(float(item.NumberOfLoan), 2, 0) + "</td>"
				Output 	+=	"<td class='text-right'>" + mktmoney.toMoney(float(item.OutstandingAmount), mktmoney.getCurrencyObj(Currency)) + "</td>"
				Output 	+=	"</tr>"

				Output 	+=	getCommnueDetail(Province, item.District, BranchList, StartDate, EndDate, ShowVillageCode)

		return Output

	except Exception, e:
		raise

def getCommnueDetail(Province, District, BranchList, StartDate="", EndDate="", ShowVillageCode="No"):
	try:
		
		# Currency 	= 	mktsetting.getAccSetting().BaseCurrency
		Currency	= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		LoanObj 	=	db.session.query(
							MKT_CUSTOMER.Commune,
							MKT_COMMUNE.Description,
							func.count(MKT_LOAN_CONTRACT.ID).label("NumberOfLoan"),
							func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("OutstandingAmount")
						).\
						join(
							MKT_COMMUNE,
							MKT_COMMUNE.ID == MKT_CUSTOMER.Commune
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
						filter(MKT_CUSTOMER.Province == Province).\
						filter(MKT_COMMUNE.District == District).\
						filter(MKT_LOAN_CONTRACT.Currency == Currency)
						# filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))

		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_CUSTOMER.Commune,
							MKT_COMMUNE.Description
						).\
						all()

		Output 	=	""

		if LoanObj:

			for item in LoanObj:

				Output 	+=	"<tr>"
				Output 	+=	"<td></td>"
				Output 	+=	"<td></td>"
				Output 	+=	"<td>" + item.Description + "</td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(float(getCountVillageByCommune(Province, District, item.Commune, BranchList, StartDate, EndDate)), 2, 0)) + "</td>"
				if ShowVillageCode == 'Yes':
					Output 	+=	"<td> - </td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getTotalOfGender(Province, District, item.Commune, '', BranchList, 'Male', StartDate, EndDate) , 2, 0)) + "</td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getTotalOfGender(Province, District, item.Commune, '', BranchList, 'Female', StartDate, EndDate) , 2, 0)) + "</td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getTotalOfGender(Province, District, item.Commune, '', BranchList, 'Other', StartDate, EndDate) , 2, 0)) + "</td>"
				Output 	+=	"<td>" + mktmoney.formatNumber(float(item.NumberOfLoan), 2, 0) + "</td>"
				Output 	+=	"<td class='text-right'>" + mktmoney.toMoney(float(item.OutstandingAmount), mktmoney.getCurrencyObj(Currency)) + "</td>"
				Output 	+=	"</tr>"

				Output 	+=	getVillageDetail(Province, District, item.Commune, BranchList, StartDate, EndDate, ShowVillageCode)

		return Output

	except Exception, e:
		raise

def getVillageDetail(Province, District, Commune, BranchList, StartDate="", EndDate="", ShowVillageCode = "No"):
	try:
		
		# Currency 	= 	mktsetting.getAccSetting().BaseCurrency
		Currency 	= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		LoanObj 	=	db.session.query(
							MKT_CUSTOMER.Village,
							MKT_VILLAGE.ID,
							MKT_VILLAGE.Description,
							func.count(MKT_LOAN_CONTRACT.ID).label("NumberOfLoan"),
							func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("OutstandingAmount")
						).\
						join(
							MKT_COMMUNE,
							MKT_COMMUNE.ID == MKT_CUSTOMER.Commune
						).\
						join(
							MKT_VILLAGE,
							MKT_VILLAGE.ID == MKT_CUSTOMER.Village
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
						filter(MKT_CUSTOMER.Province == Province).\
						filter(MKT_COMMUNE.District == District).\
						filter(MKT_VILLAGE.Commune == Commune).\
						filter(MKT_LOAN_CONTRACT.Currency == Currency)
						# filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))

		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_VILLAGE.ID,
							MKT_CUSTOMER.Village,
							MKT_VILLAGE.Description
						).\
						all()

		Output 	=	""

		if LoanObj:

			for item in LoanObj:

				Output 	+=	"<tr>"
				Output 	+=	"<td></td>"
				Output 	+=	"<td></td>"
				Output 	+=	"<td></td>"
				Output 	+=	"<td>" + item.Description + "</td>"
				if ShowVillageCode == 'Yes':
					Output 	+=	"<td>" + item.ID + "</td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getTotalOfGender(Province, District, Commune, item.Village, BranchList, 'Male', StartDate, EndDate) , 2, 0)) + "</td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getTotalOfGender(Province, District, Commune, item.Village, BranchList, 'Female', StartDate, EndDate) , 2, 0)) + "</td>"
				Output 	+=	"<td>" + str(mktmoney.formatNumber(getTotalOfGender(Province, District, Commune, item.Village, BranchList, 'Other', StartDate, EndDate) , 2, 0)) + "</td>"
				Output 	+=	"<td>" + mktmoney.formatNumber(float(item.NumberOfLoan), 2, 0) + "</td>"
				Output 	+=	"<td class='text-right'>" + mktmoney.toMoney(float(item.OutstandingAmount), mktmoney.getCurrencyObj(Currency)) + "</td>"
				Output 	+=	"</tr>"

		return Output

	except Exception, e:
		raise

def getCountCommuneByDistrict(Province, District, BranchList, StartDate="", EndDate=""):
	try:
		
		# Currency 	= 	mktsetting.getAccSetting().BaseCurrency
		Currency 	= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		LoanObj 	=	db.session.query(
							MKT_CUSTOMER.Commune
						).\
						join(
							MKT_COMMUNE,
							MKT_COMMUNE.ID == MKT_CUSTOMER.Commune
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
						filter(MKT_CUSTOMER.Province == Province).\
						filter(MKT_COMMUNE.District == District).\
						filter(MKT_LOAN_CONTRACT.Currency == Currency)
						# filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))

		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_CUSTOMER.Commune
						).\
						count()

		return LoanObj

	except Exception, e:
		raise

def getCountVillageByDistrict(Province, District, BranchList, StartDate="", EndDate="", CheckBaseCurrency="Yes"):
	try:
		
		# Currency 	= 	mktsetting.getAccSetting().BaseCurrency
		Currency	= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		LoanObj 	=	db.session.query(
							MKT_CUSTOMER.Village
						).\
						join(
							MKT_COMMUNE,
							MKT_COMMUNE.ID == MKT_CUSTOMER.Commune
						).\
						join(
							MKT_VILLAGE,
							MKT_VILLAGE.ID == MKT_CUSTOMER.Village
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
						filter(MKT_CUSTOMER.Province == Province).\
						filter(MKT_COMMUNE.District == District).\
						filter(MKT_LOAN_CONTRACT.Currency == Currency)
						# filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))

		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_CUSTOMER.Village
						).\
						count()

		return LoanObj

	except Exception, e:
		raise

# Base Currency and Other Currency
def getCountVillageByCommune(Province, District, Commune, BranchList, StartDate="", EndDate="", CheckBaseCurrency="Yes"):
	try:
		
		# Currency 	= 	mktsetting.getAccSetting().BaseCurrency
		Currency	= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		LoanObj 	=	db.session.query(
							MKT_CUSTOMER.Village
						).\
						join(
							MKT_COMMUNE,
							MKT_COMMUNE.ID == MKT_CUSTOMER.Commune
						).\
						join(
							MKT_VILLAGE,
							MKT_VILLAGE.ID == MKT_CUSTOMER.Village
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
						filter(MKT_CUSTOMER.Province == Province).\
						filter(MKT_COMMUNE.District == District).\
						filter(MKT_VILLAGE.Commune == Commune)
						# filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))

		if CheckBaseCurrency.upper() == "YES":
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.Currency == Currency)
		else:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.Currency != Currency)

		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_CUSTOMER.Village
						).\
						count()

		return LoanObj

	except Exception, e:
		raise

def getTotalOfGender(Province, District, Commune, Village, BranchList, Gender="Female", StartDate="", EndDate=""):
	try:
		
		# Currency 	= 	mktsetting.getAccSetting().BaseCurrency
		Currency 	= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		LoanObj 	=	db.session.query(
							MKT_CUSTOMER.Province,
							func.count(MKT_CUSTOMER.Gender).label('NumberOfGender')
						).\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
						filter(MKT_CUSTOMER.Province == Province).\
						filter(MKT_LOAN_CONTRACT.Currency == Currency).\
						filter(MKT_CUSTOMER.Gender == Gender)

		LoanObj 		= 	LoanObj if 'ALL' in BranchList else LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		if District:
			LoanObj =	LoanObj.\
						filter(MKT_CUSTOMER.District == District)

		if Commune:
			LoanObj =	LoanObj.\
						filter(MKT_CUSTOMER.Commune == Commune)

		if Village:
			LoanObj =	LoanObj.\
						filter(MKT_CUSTOMER.Village == Village)

		if StartDate:
			LoanObj =	LoanObj.\
						filter(MKT_LOAN_CONTRACT.ValueDate.between(str(StartDate), str(EndDate)))

		LoanObj 	=	LoanObj.\
						group_by(
							MKT_CUSTOMER.Province
						).\
						first()

		NumberOfGender 	=	0
		if LoanObj:
			NumberOfGender 	=	LoanObj.NumberOfGender

		return NumberOfGender

	except Exception, e:
		raise

''' Loan Detail Report '''
@app.route("/Morakot/Report/LoanDetail/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanDetail():
	try:

		Branch 			= 	request.args.get("Branch") if 'Branch' in request.args else session["ChangeBranch"]
		BranchList 		=	Branch.split()
		Currency 		= 	mktsetting.getAccSetting().BaseCurrency
		CurrencyObj 	=	mktmoney.getCurrencyObj(Currency)
		StartDate 		=	request.args.get("StartDate") if "StartDate" in request.args else ""
		EndDate 		=	request.args.get("EndDate") if "EndDate" in request.args else mktdate.getBankDate()
		CurrencyList 	=	MKT_CURRENCY.query

		LoanKey 		=	[]
		AccrKey 		=	[]
		IntIncomeKey 	=	[]
		ProvKey 		=	[]

		for item in CurrencyList:

			# Individual Loan
			# Add More Than One Year Key Loan Outstanding
			LoanKey.append("13001.%s.0.Y........"  %item.ID)
			LoanKey.append("13001.%s.10.Y........" %item.ID)
			LoanKey.append("13001.%s.20.Y........" %item.ID)
			LoanKey.append("13001.%s.30.Y........" %item.ID)
			LoanKey.append("13001.%s.40.Y........" %item.ID)
			# Add Less Than One Year Key Loan Outstanding
			LoanKey.append("13001.%s.0.N........"  %item.ID)
			LoanKey.append("13001.%s.10.N........" %item.ID)
			LoanKey.append("13001.%s.20.N........" %item.ID)
			LoanKey.append("13001.%s.30.N........" %item.ID)
			LoanKey.append("13001.%s.40.N........" %item.ID)

			# Group Loan
			# Add More Than One Year Key Loan Outstanding
			LoanKey.append("13002.%s.0.Y........"  %item.ID)
			LoanKey.append("13002.%s.10.Y........" %item.ID)
			LoanKey.append("13002.%s.20.Y........" %item.ID)
			LoanKey.append("13002.%s.30.Y........" %item.ID)
			LoanKey.append("13002.%s.40.Y........" %item.ID)
			# Add Less Than One Year Key Loan Outstanding 
			LoanKey.append("13002.%s.0.N........"  %item.ID)
			LoanKey.append("13002.%s.10.N........" %item.ID)
			LoanKey.append("13002.%s.20.N........" %item.ID)
			LoanKey.append("13002.%s.30.N........" %item.ID)
			LoanKey.append("13002.%s.40.N........" %item.ID)

			# Staff Loan
			# Add More Than One Year Key Loan Outstanding
			LoanKey.append("13003.%s.0.Y........"  %item.ID)
			LoanKey.append("13003.%s.10.Y........" %item.ID)
			LoanKey.append("13003.%s.20.Y........" %item.ID)
			LoanKey.append("13003.%s.30.Y........" %item.ID)
			LoanKey.append("13003.%s.40.Y........" %item.ID)
			# Add Less Than One Year Key Loan Outstanding 
			LoanKey.append("13003.%s.0.N........"  %item.ID)
			LoanKey.append("13003.%s.10.N........" %item.ID)
			LoanKey.append("13003.%s.20.N........" %item.ID)
			LoanKey.append("13003.%s.30.N........" %item.ID)
			LoanKey.append("13003.%s.40.N........" %item.ID)

			# AIR Individual
			# Add Less Than One Year Key Accrual Interest Receivable 
			AccrKey.append("25001.%s.0.N........"  %item.ID)
			AccrKey.append("25001.%s.10.N........" %item.ID)
			AccrKey.append("25001.%s.20.N........" %item.ID)
			AccrKey.append("25001.%s.30.N........" %item.ID)
			AccrKey.append("25001.%s.40.N........" %item.ID)
			# Add More Than One Year Key Accrual Interest Receivable 
			AccrKey.append("25001.%s.0.Y........"  %item.ID)
			AccrKey.append("25001.%s.10.Y........" %item.ID)
			AccrKey.append("25001.%s.20.Y........" %item.ID)
			AccrKey.append("25001.%s.30.Y........" %item.ID)
			AccrKey.append("25001.%s.40.Y........" %item.ID)

			# AIR Group
			# Add Less Than One Year Key Accrual Interest Receivable 
			AccrKey.append("25002.%s.0.N........"  %item.ID)
			AccrKey.append("25002.%s.10.N........" %item.ID)
			AccrKey.append("25002.%s.20.N........" %item.ID)
			AccrKey.append("25002.%s.30.N........" %item.ID)
			AccrKey.append("25002.%s.40.N........" %item.ID)
			# Add More Than One Year Key Accrual Interest Receivable 
			AccrKey.append("25002.%s.0.Y........"  %item.ID)
			AccrKey.append("25002.%s.10.Y........" %item.ID)
			AccrKey.append("25002.%s.20.Y........" %item.ID)
			AccrKey.append("25002.%s.30.Y........" %item.ID)
			AccrKey.append("25002.%s.40.Y........" %item.ID)

			# AIR Staff
			# Add Less Than One Year Key Accrual Interest Receivable 
			AccrKey.append("25003.%s.0.N........"  %item.ID)
			AccrKey.append("25003.%s.10.N........" %item.ID)
			AccrKey.append("25003.%s.20.N........" %item.ID)
			AccrKey.append("25003.%s.30.N........" %item.ID)
			AccrKey.append("25003.%s.40.N........" %item.ID)
			# Add More Than One Year Key Accrual Interest Receivable 
			AccrKey.append("25003.%s.0.Y........"  %item.ID)
			AccrKey.append("25003.%s.10.Y........" %item.ID)
			AccrKey.append("25003.%s.20.Y........" %item.ID)
			AccrKey.append("25003.%s.30.Y........" %item.ID)
			AccrKey.append("25003.%s.40.Y........" %item.ID)

			# IIL Individual
			# Add Less Than One Year Key Interest Income 
			IntIncomeKey.append("53001.%s.0.N........" 	%item.ID)
			IntIncomeKey.append("53001.%s.10.N........" %item.ID)
			IntIncomeKey.append("53001.%s.20.N........" %item.ID)
			IntIncomeKey.append("53001.%s.30.N........" %item.ID)
			IntIncomeKey.append("53001.%s.40.N........" %item.ID)
			# Add Less Than One Year Key Interest Income 
			IntIncomeKey.append("53001.%s.0.Y........" 	%item.ID)
			IntIncomeKey.append("53001.%s.10.Y........" %item.ID)
			IntIncomeKey.append("53001.%s.20.Y........" %item.ID)
			IntIncomeKey.append("53001.%s.30.Y........" %item.ID)
			IntIncomeKey.append("53001.%s.40.Y........" %item.ID)

			# IIL Group
			# Add Less Than One Year Key Interest Income 
			IntIncomeKey.append("53002.%s.0.N........" 	%item.ID)
			IntIncomeKey.append("53002.%s.10.N........" %item.ID)
			IntIncomeKey.append("53002.%s.20.N........" %item.ID)
			IntIncomeKey.append("53002.%s.30.N........" %item.ID)
			IntIncomeKey.append("53002.%s.40.N........" %item.ID)
			# Add Less Than One Year Key Interest Income 
			IntIncomeKey.append("53002.%s.0.Y........" 	%item.ID)
			IntIncomeKey.append("53002.%s.10.Y........" %item.ID)
			IntIncomeKey.append("53002.%s.20.Y........" %item.ID)
			IntIncomeKey.append("53002.%s.30.Y........" %item.ID)
			IntIncomeKey.append("53002.%s.40.Y........" %item.ID)

			# IIL Staff
			# Add Less Than One Year Key Interest Income 
			IntIncomeKey.append("53003.%s.0.N........" 	%item.ID)
			IntIncomeKey.append("53003.%s.10.N........" %item.ID)
			IntIncomeKey.append("53003.%s.20.N........" %item.ID)
			IntIncomeKey.append("53003.%s.30.N........" %item.ID)
			IntIncomeKey.append("53003.%s.40.N........" %item.ID)
			# Add Less Than One Year Key Interest Income 
			IntIncomeKey.append("53003.%s.0.Y........" 	%item.ID)
			IntIncomeKey.append("53003.%s.10.Y........" %item.ID)
			IntIncomeKey.append("53003.%s.20.Y........" %item.ID)
			IntIncomeKey.append("53003.%s.30.Y........" %item.ID)
			IntIncomeKey.append("53003.%s.40.Y........" %item.ID)

			# Add Key Provisioning
			ProvKey.append("17120.%s.........." %item.ID)

		ConsolBalanceObj=	MKT_CONSOL_BALANCE.query.\
							filter(MKT_CONSOL_BALANCE.ID.in_(LoanKey)).\
							filter(MKT_CONSOL_BALANCE.Branch.in_(BranchList)).\
							all()

		AIRObj 			=	MKT_CONSOL_BALANCE.query.\
							filter(MKT_CONSOL_BALANCE.ID.in_(AccrKey)).\
							filter(MKT_CONSOL_BALANCE.Branch.in_(BranchList)).\
							all()

		IntIncomeObj 	=	MKT_CONSOL_BALANCE.query.\
							filter(MKT_CONSOL_BALANCE.ID.in_(IntIncomeKey)).\
							filter(MKT_CONSOL_BALANCE.Branch.in_(BranchList)).\
							all()

		ProvisionObj 	=	MKT_CONSOL_BALANCE.query.\
							filter(MKT_CONSOL_BALANCE.ID.in_(ProvKey)).\
							filter(MKT_CONSOL_BALANCE.Branch.in_(BranchList)).\
							all()

		OutstandingBeg 	=	0
		OutstandingMov 	=	0
		OutstandingEnd 	=	0

		if ConsolBalanceObj:

			for item in ConsolBalanceObj:

				OutstandingBeg += float(item.LCYPrevMonthBal)
				OutstandingMov += float(item.LCYCurrentMonthBal)
				OutstandingEnd += float(item.LCYBalance)

		AIRBeg 			=	0
		AIRMov 			=	0
		AIREnd 			=	0

		if AIRObj:

			for item in AIRObj:

				AIRBeg += float(item.LCYPrevMonthBal)
				AIRMov += float(item.LCYCurrentMonthBal)
				AIREnd += float(item.LCYBalance)

		IntIncomeBeg 	=	0
		IntIncomeMov 	=	0
		IntIncomeEnd 	=	0

		if IntIncomeObj:

			for item in IntIncomeObj:

				IntIncomeBeg += float(item.LCYPrevMonthBal)
				IntIncomeMov += float(item.LCYCurrentMonthBal)
				IntIncomeEnd += float(item.LCYBalance)

		ProvisioningBeg =	0
		ProvisioningMov =	0
		ProvisioningEnd =	0

		if ProvisionObj:

			for item in ProvisionObj:

				ProvisioningBeg += float(item.LCYPrevMonthBal)
				ProvisioningMov += float(item.LCYCurrentMonthBal)
				ProvisioningEnd += float(item.LCYBalance)

		CompanyObj 	=	mktreport.getCompanyObj()
		BranchName 	=	""
		BranchObj 	=	MKT_BRANCH.query.get(Branch)
		if BranchObj:
			BranchName 	=	BranchObj.Description

		return render_template("report/loan/loan_detail.html",
								CompanyObj 		=	CompanyObj,
								BranchName 		=	BranchName,
								Branch 			=	Branch,
								BranchList 		=	BranchList,
								StartDate 		=	StartDate,
								EndDate 		=	EndDate,
								formatNumber 	=	mktmoney.formatNumber,
								CurrencyObj 	=	CurrencyObj,
								Currency 		=	Currency,
								toMoney 		=	mktmoney.toMoney,
								float 			=	float,
								int 			=	int,
								OutstandingBeg 	=	OutstandingBeg,
								OutstandingEnd 	=	OutstandingEnd,
								OutstandingMov 	=	OutstandingMov,
								AIRBeg 			=	AIRBeg,
								AIRMov 			=	AIRMov,
								AIREnd 			=	AIREnd,
								IntIncomeBeg 	=	IntIncomeBeg,
								IntIncomeMov 	=	IntIncomeMov,
								IntIncomeEnd 	=	IntIncomeEnd,
								ProvisioningBeg =	ProvisioningBeg,
								ProvisioningMov =	ProvisioningMov,
								ProvisioningEnd =	ProvisioningEnd
							)

	except Exception, e:
		raise

''' Loan Class Detail Report '''
@app.route("/Morakot/Report/LoanClassDetail/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanClassDetail():
	try:

		Branch 			= 	request.args.get("Branch") if 'Branch' in request.args else session["ChangeBranch"]
		BranchList 		=	Branch.split()
		Currency 		= 	mktsetting.getAccSetting().BaseCurrency
		CurrencyObj 	=	mktmoney.getCurrencyObj(Currency)
		StartDate 		=	request.args.get("StartDate") if "StartDate" in request.args else ""
		EndDate 		=	request.args.get("EndDate") if "EndDate" in request.args else mktdate.getBankDate()
		Period 			=	request.args.get("Period") if "Period" in request.args else "6"
		ClassObj 		=	MKT_ASSET_CLASS.query.\
							order_by(MKT_ASSET_CLASS.ID.asc()).\
							all()

		CompanyObj 	=	mktreport.getCompanyObj()
		BranchName 	=	""
		BranchObj 	=	MKT_BRANCH.query.get(Branch)
		if BranchObj:
			BranchName 	=	BranchObj.Description

		return render_template("report/loan/loan_class_detail.html",
								CompanyObj 		=	CompanyObj,
								BranchName 		=	BranchName,
								Branch 			=	Branch,
								BranchList 		=	BranchList,
								StartDate 		=	StartDate,
								EndDate 		=	EndDate,
								formatNumber 	=	mktmoney.formatNumber,
								CurrencyObj 	=	CurrencyObj,
								Currency 		=	Currency,
								toMoney 		=	mktmoney.toMoney,
								float 			=	float,
								int 			=	int,
								ClassObj 		=	ClassObj,
								Period 			=	Period,
								getOutstandingByClass 	=	getOutstandingByClass,
								getTotalByList 			=	getTotalByList
							)

	except Exception, e:
		raise

def getOutstandingByClass(ID, BranchList=[], Field="LCYBalance"):
	try:
		
		Result 			= 	0

		CurrencyList 	=	MKT_CURRENCY.query

		LoanKey 		=	[]

		for item in CurrencyList:
			
			LoanKey.append("13001.%s.%s.Y........"  %(item.ID, ID))
			LoanKey.append("13001.%s.%s.N........"  %(item.ID, ID))

			LoanKey.append("13002.%s.%s.Y........"  %(item.ID, ID))
			LoanKey.append("13002.%s.%s.N........"  %(item.ID, ID))

			LoanKey.append("13003.%s.%s.Y........"  %(item.ID, ID))
			LoanKey.append("13003.%s.%s.N........"  %(item.ID, ID))

		IntIncomeObj 	=	MKT_CONSOL_BALANCE.query.\
							filter(MKT_CONSOL_BALANCE.ID.in_(LoanKey)).\
							filter(MKT_CONSOL_BALANCE.Branch.in_(BranchList)).\
							all()

		if IntIncomeObj:

			for item in IntIncomeObj:

				if Field == "LCYBalance":
					Result += float(item.LCYBalance)
				elif Field == "LCYPrevMonthBal":
					Result += float(item.LCYPrevMonthBal)
				elif Field == "LCYCurrentMonthBal":
					Result += float(item.LCYCurrentMonthBal)

		return Result

	except Exception, e:
		raise

''' Loan Detail By Product Report '''
@app.route("/Morakot/Report/LoanDetailByProducts/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanDetailByProducts():
	try:

		Branch 			= 	request.args.get("Branch") if 'Branch' in request.args else session["ChangeBranch"]
		BranchList 		=	Branch.split()
		Currency 		= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		CurrencyList 	=	Currency.split()
		CurrencyObj 	=	mktmoney.getCurrencyObj(Currency)

		if not CurrencyObj:
			flash(msg_error + "Currency %s not found." %Currency)

		StartDate 		=	request.args.get("StartDate") if "StartDate" in request.args else ""
		EndDate 		=	request.args.get("EndDate") if "EndDate" in request.args else mktdate.getBankDate()
		Period 			=	request.args.get("Period") if "Period" in request.args else "6"
		
		LoanObj 		=	getLoanDetailByProduct(BranchList, CurrencyList)

		CompanyObj 	=	mktreport.getCompanyObj()
		BranchName 	=	""
		BranchObj 	=	MKT_BRANCH.query.get(Branch)
		if BranchObj:
			BranchName 	=	BranchObj.Description

		return render_template("report/loan/loan_detail_by_product.html",
								CompanyObj 		=	CompanyObj,
								BranchName 		=	BranchName,
								Branch 			=	Branch,
								BranchList 		=	BranchList,
								StartDate 		=	StartDate,
								EndDate 		=	EndDate,
								formatNumber 	=	mktmoney.formatNumber,
								CurrencyObj 	=	CurrencyObj,
								Currency 		=	Currency,
								CurrencyList 	=	CurrencyList,
								toMoney 		=	mktmoney.toMoney,
								float 			=	float,
								int 			=	int,
								Period 			=	Period,
								LoanObj 		=	LoanObj,
								getTotalByList 	=	getTotalByList,
								getDetailProductByFrequency =	getDetailProductByFrequency
							)

	except Exception, e:
		raise

def getDetailProductByFrequency(ID, BranchList, CurrencyList):
	try:
		
		Frequency 		=	{'1':mktlanguage.getLanguage('Monthly'), '2':mktlanguage.getLanguage('Weekly')}
		LoanObj 		=	db.session.query(
								MKT_LOAN_CONTRACT.FreqType,
								func.count(MKT_LOAN_CONTRACT.ID).label("NumberOfLoan"),
								func.count(MKT_LOAN_CONTRACT.Account).label("NumberOfAccount"),
								func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("TotalOutstandingAmt"),
								func.sum(MKT_LOAN_CONTRACT.Disbursed).label("TotalDisbursedAmt"),
								func.sum(MKT_LOAN_CONTRACT.Amount).label("TotalLoanBalance")
							).\
							filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList)).\
							filter(MKT_LOAN_CONTRACT.Currency.in_(CurrencyList)).\
							filter(MKT_LOAN_CONTRACT.LoanProduct == ID).\
							group_by(
								MKT_LOAN_CONTRACT.FreqType
							).\
							order_by(MKT_LOAN_CONTRACT.FreqType.asc()).\
							all()

		Output 		=	""

		if LoanObj:
			for item in LoanObj:
				Output 	+= 	"<tr>"
				Output 	+= 	"<td></td>"
				Output 	+= 	"<td></td>"
				Output 	+= 	"<td>" + Frequency[str(item.FreqType)] + "</td>"
				Output 	+= 	"<td class='text-right' style='padding-right:18px;'>" + mktmoney.formatNumber(float(item.NumberOfLoan), 2, 0) + "</td>"
				Output 	+= 	"<td class='text-right' style='padding-right:18px;'>" + mktmoney.formatNumber(float(item.TotalLoanBalance), 2, 2) + "</td>"
				Output 	+= 	"<td class='text-right' style='padding-right:18px;'>" + mktmoney.formatNumber(float(item.TotalOutstandingAmt), 2, 2) + "</td>"
				Output 	+= 	"<td class='text-right' style='padding-right:18px;'>" + mktmoney.formatNumber(float(item.TotalLoanBalance), 2, 2) + "</td>"
				Output 	+= 	"</tr>"

		return Output

	except Exception, e:
		raise

def getLoanDetailByProduct(BranchList, CurrencyList):
	try:
		
		LoanObj 		=	db.session.query(
								MKT_LOAN_CONTRACT.LoanProduct,
								MKT_LOAN_PRODUCT.Description,
								func.count(MKT_LOAN_CONTRACT.ID).label("NumberOfLoan"),
								func.count(MKT_LOAN_CONTRACT.Account).label("NumberOfAccount"),
								func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("TotalOutstandingAmt"),
								func.sum(MKT_LOAN_CONTRACT.Disbursed).label("TotalDisbursedAmt"),
								func.sum(MKT_LOAN_CONTRACT.Amount).label("TotalLoanBalance")
							).\
							join(
								MKT_LOAN_PRODUCT,
								MKT_LOAN_PRODUCT.ID == MKT_LOAN_CONTRACT.LoanProduct
							).\
							filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList)).\
							filter(MKT_LOAN_CONTRACT.Currency.in_(CurrencyList)).\
							group_by(
								MKT_LOAN_CONTRACT.LoanProduct,
								MKT_LOAN_PRODUCT.Description
							).\
							order_by(MKT_LOAN_CONTRACT.LoanProduct.asc()).\
							all()

		return LoanObj

	except Exception, e:
		raise

''' Loan Schedule By Group Report '''
@app.route("/Morakot/Report/LoanScheduleByGroup/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanScheduleByGroup():
	try:

		Branch 			= 	request.args.get("Branch") if 'Branch' in request.args else session["ChangeBranch"]
		BranchList 		=	Branch.split()
		Currency 		= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		CurrencyList 	=	Currency.split()
		CurrencyObj 	=	mktmoney.getCurrencyObj(Currency)
		Group 			=	request.args.get("Group") if "Group" in request.args else ""
		VB 				=	request.args.get("VB") if "VB" in request.args else ""

		if not CurrencyObj:
			flash(msg_error + "Currency %s not found." %Currency)

		StartDate 		=	request.args.get("StartDate") if "StartDate" in request.args else ""
		EndDate 		=	request.args.get("EndDate") if "EndDate" in request.args else mktdate.getBankDate()
		Period 			=	request.args.get("Period") if "Period" in request.args else "6"
		
		# LoanObj 		=	getLoanByGroup(BranchList, CurrencyList)
		ScheduleObj 	=	""

		CompanyObj 	=	mktreport.getCompanyObj()
		BranchName 	=	""
		CompanyKh 	= ""
		Company 	= ""

		BranchObj 	=	MKT_BRANCH.query.get(Branch)
		if BranchObj:
			BranchName 	=	BranchObj.Description

		if Group:
			
			getCompany 	= mkttool.getCompany()
			if getCompany:
				Company 	= 	getCompany.CompanyName
				CompanyKh 	=	getCompany.LocalName

			ScheduleObj 	=	getScheduleObj(Group, VB)

		VBObj 				=	MKT_VB.query

		Address 		=	""
		InterestRate 	=	""
		Term 			=	""
		ValueDate 		=	""
		MaturityDate 	=	""
		FirstCollection =	""
		OfficerName 	=	""
		OfficerPhone 	= 	""
		VBSingle 		=	MKT_VB.query.get(VB)
		VBName 			=	""

		if VBSingle:
			# print 'VBSingle.VBProvince',VBSingle.VBProvince
			Address = mktaddress.getAddress(VBSingle.VBProvince,
													VBSingle.VBDistrict,
													VBSingle.VBCommune,
													VBSingle.VBVillage,
													'kh')

			# Address =	getVillage(VBSingle.VBVillage) + ", " + getCommune(VBSingle.VBCommune) + ", " + getDistrict(VBSingle.VBDistrict) + ", " + getProvince(VBSingle.VBProvince)
			VBName 	=	VBSingle.Description

		InterestObj 	=	MKT_LOAN_CONTRACT.query.\
							filter(MKT_LOAN_CONTRACT.ContractVB == VB).\
							filter(MKT_LOAN_CONTRACT.Group == Group).\
							filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
							limit(1).\
							first()

		if InterestObj:

			InterestRate 	=	mktrepayment.getRateByFreq(InterestObj.FreqType, InterestObj.Frequency, InterestObj.InterestRate)
			Term 			=	InterestObj.Term
			ValueDate 		=	InterestObj.ValueDate
			MaturityDate 	=	InterestObj.MaturityDate
			LoanID 			=	InterestObj.ID
			OfficerID 		=	InterestObj.ContractOfficerID
			Currency 		= 	InterestObj.Currency
			LoanID 			+=	'1'

			OfficerObj 		=	MKT_OFFICER.query.get(OfficerID)
			if OfficerObj:
				OfficerName =	"%s %s" %(OfficerObj.LastName, OfficerObj.FirstName)
				if OfficerObj.Phone:
					OfficerPhone 	= "%s"%OfficerObj.Phone

			SchObj 			=	MKT_REP_SCHEDULE.query.get(LoanID)
			if SchObj:
				FirstCollection = SchObj.CollectionDate

		if Group and not ScheduleObj:
			flash(msg_warning + "Record not found.")

		return render_template("report/loan/schedule_group.html",
							CompanyObj 		=	CompanyObj,
							BranchName 		=	BranchName,
							Branch 			=	Branch,
							BranchList 		=	BranchList,
							StartDate 		=	StartDate,
							EndDate 		=	EndDate,
							formatNumber 	=	mktmoney.formatNumber,
							CurrencyObj 	=	CurrencyObj,
							Currency 		=	Currency,
							toMoney 		=	mktmoney.toMoney,
							float 			=	float,
							int 			=	int,
							getTotalByList 	=	getTotalByList,
							Company 		=	Company,
							CompanyKh		=	CompanyKh,
							Group 			=	Group,
							VB 				=	VB,
							VBObj 			=	VBObj,
							OfficerName		=   OfficerName,
							OfficerPhone 	= 	OfficerPhone,
							ScheduleObj 	=	ScheduleObj,
							getScheduleObjByGroup =	getScheduleObjByGroup,
							getScheduleObj  = getScheduleObj,
							getTotalDisbursedByVB =	getTotalDisbursedByVB,
							Address 		=	Address,
							InterestRate 	=	InterestRate,
							VBName 			=	VBName,
							Term 			=	Term,
							toDateShort 	=	mktdate.toDateShort,
							mktdate 		= 	mktdate,
							ValueDate 		=	ValueDate,
							MaturityDate 	=	MaturityDate,
							FirstCollection =	FirstCollection
						)

	except Exception, e:
		raise

def getTotalDisbursedByVB(VB, Group):
	try:

		Result 			=	"0"
		LoanObj 		=	db.session.query(
								MKT_LOAN_CONTRACT.ContractVB,
								func.sum(MKT_LOAN_CONTRACT.Disbursed).label("TotalDisbursedAmt"),
							).\
							filter(MKT_LOAN_CONTRACT.ContractVB == VB).\
							filter(MKT_LOAN_CONTRACT.Group == Group).\
							filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
							group_by(
								MKT_LOAN_CONTRACT.ContractVB
							).\
							first()

		if LoanObj:
			Result 	=	LoanObj.TotalDisbursedAmt

		return mktmoney.formatNumber(float(Result), 2, 2)

	except Exception, e:
		raise

def getProvince(ID):
	try:

		Description 	=	""
		ProninceObj 	= 	MKT_PROVINCE.query.get(ID)

		if ProninceObj:
			Description = ProninceObj.Description

		return Description

	except Exception, e:
		raise

def getDistrict(ID):
	try:

		Description 	=	""
		DistrictObj 	= 	MKT_DISTRICT.query.get(ID)
		
		if DistrictObj:
			Description = DistrictObj.Description

		return Description

	except Exception, e:
		raise

def getCommune(ID):
	try:

		Description 	=	""
		CommuneObj 		= 	MKT_COMMUNE.query.get(ID)
		
		if CommuneObj:
			Description = CommuneObj.Description

		return Description

	except Exception, e:
		raise

def getVillage(ID):
	try:

		Description 	=	""
		VillageObj 		= 	MKT_VILLAGE.query.get(ID)
		
		if VillageObj:
			Description = VillageObj.Description

		return Description

	except Exception, e:
		raise

def getLoanByGroup(BranchList, CurrencyList):
	try:
		
		LoanObj 		=	db.session.query(
								MKT_LOAN_CONTRACT.ContractVB,
								MKT_VB.Description,
								func.count(MKT_LOAN_CONTRACT.ID).label("NumberOfLoan"),
								func.count(MKT_LOAN_CONTRACT.Account).label("NumberOfAccount"),
								func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("TotalOutstandingAmt"),
								func.sum(MKT_LOAN_CONTRACT.Disbursed).label("TotalDisbursedAmt"),
								func.sum(MKT_LOAN_CONTRACT.Amount).label("TotalLoanBalance")
							).\
							join(
								MKT_VB,
								MKT_VB.ID == MKT_LOAN_CONTRACT.ContractVB
							).\
							filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList)).\
							filter(MKT_LOAN_CONTRACT.Currency.in_(CurrencyList)).\
							filter(MKT_LOAN_CONTRACT.Group != "").\
							group_by(
								MKT_LOAN_CONTRACT.ContractVB,
								MKT_VB.Description
							).\
							order_by(MKT_LOAN_CONTRACT.ContractVB.asc()).\
							all()

		return LoanObj

	except Exception, e:
		raise


# def getLoanByVillageBank(Group, VB):

# 	try:		
# 		LoanObjByVB 	=	db.session.query(
# 								MKT_LOAN_CONTRACT.ID,
# 								MKT_LOAN_CONTRACT.Currency,
# 								MKT_REP_SCHEDULE.CollectionDate,
# 								MKT_REP_SCHEDULE.Principal,
# 								MKT_REP_SCHEDULE.Interest,
# 								MKT_REP_SCHEDULE.Charge,
# 								MKT_REP_SCHEDULE.Balance,
# 								MKT_CUSTOMER.FirstNameKh,
# 								MKT_CUSTOMER.LastNameKh
# 							).\
# 							join(
# 								MKT_REP_SCHEDULE,
# 								MKT_REP_SCHEDULE.LoanID == MKT_LOAN_CONTRACT.ID
# 							).\
# 							join(
# 								MKT_CUSTOMER,
# 								MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID
# 							).\
# 							filter(MKT_LOAN_CONTRACT.ContractVB == VB).\
# 							filter(MKT_LOAN_CONTRACT.Group == Group).\
# 							filter(MKT_REP_SCHEDULE.CollectionDate == CollectionDate).\
# 							order_by(MKT_LOAN_CONTRACT.ID.asc()).\
# 							all()
# 		return LoanObjByVB
		

#  	except Exception, e:
#  		raise


# def getLoanGroupByVB(VB):
# 	try:
		
# 		LoanObj 		=	db.session.query(
# 								MKT_LOAN_CONTRACT.Group,
# 								func.count(MKT_LOAN_CONTRACT.ID).label("NumberOfLoan"),
# 								func.count(MKT_LOAN_CONTRACT.Account).label("NumberOfAccount"),
# 								func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("TotalOutstandingAmt"),
# 								func.sum(MKT_LOAN_CONTRACT.Disbursed).label("TotalDisbursedAmt"),
# 								func.sum(MKT_LOAN_CONTRACT.Amount).label("TotalLoanBalance")
# 							).\
# 							filter(MKT_LOAN_CONTRACT.ContractVB == VB).\
# 							filter(MKT_LOAN_CONTRACT.Group != "").\
# 							group_by(
# 								MKT_LOAN_CONTRACT.Group
# 							).\
# 							order_by(MKT_LOAN_CONTRACT.Group.asc()).\
# 							all()

# 		Output 		=	""
# 		if LoanObj:
# 			for item in LoanObj:
# 				Output 	+= 	"<tr>"
# 				Output 	+= 	"<td></td>"
# 				Output 	+= 	"<td class='text-right' style='padding-right:18px;'><a href='/Morakot/Report/LoanScheduleByGroup/?Group=" + item.Group + "&VB=" + VB + "'>" + item.Group + "</a></td>"
# 				Output 	+= 	"<td class='text-right' style='padding-right:18px;'>" + mktmoney.formatNumber(float(item.NumberOfLoan), 2, 0) + "</td>"
# 				Output 	+= 	"<td class='text-right' style='padding-right:18px;'>" + mktmoney.formatNumber(float(item.TotalLoanBalance), 2, 2) + "</td>"
# 				Output 	+= 	"<td class='text-right' style='padding-right:18px;'>" + mktmoney.formatNumber(float(item.TotalOutstandingAmt), 2, 2) + "</td>"
# 				Output 	+= 	"<td class='text-right' style='padding-right:18px;'>" + mktmoney.formatNumber(float(item.TotalDisbursedAmt), 2, 2) + "</td>"
# 				Output 	+= 	"</tr>"

# 		return Output

# 	except Exception, e:
# 		raise


# New update for new report layout
def getScheduleObj(Group, VB, LoanID=''):
	try:
		
		
		if LoanID:
			LoanObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
						order_by(MKT_REP_SCHEDULE.CollectionDate.asc())
		else:
			LoanObj 		=	db.session.query(
								MKT_REP_SCHEDULE.CollectionDate,
								func.sum(MKT_REP_SCHEDULE.Principal).label("TotalPrincipal"),
								func.sum(MKT_REP_SCHEDULE.Interest).label("TotalInterest"),
								func.sum(MKT_REP_SCHEDULE.Charge).label("TotalCharge"),
								func.sum(MKT_REP_SCHEDULE.Balance).label("TotalBalance")
							).\
							join(
								MKT_LOAN_CONTRACT,
								MKT_LOAN_CONTRACT.ID == MKT_REP_SCHEDULE.LoanID
							).\
							filter(MKT_LOAN_CONTRACT.ContractVB == VB).\
							filter(MKT_LOAN_CONTRACT.Group == Group).\
							filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
							group_by(
								MKT_REP_SCHEDULE.CollectionDate,
							).\
							order_by(MKT_REP_SCHEDULE.CollectionDate.asc())
		return LoanObj.all()

	except Exception, e:
		raise


# New update for new report layout
def getScheduleObjByGroup(Group, VB):
	try:
		
		LoanObj 		=	db.session.query(
								MKT_LOAN_CONTRACT.ID,
								MKT_LOAN_CONTRACT.Account,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh
							).\
							join(
								MKT_CUSTOMER,
								MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID
							).\
							filter(MKT_LOAN_CONTRACT.ContractVB == VB).\
							filter(MKT_LOAN_CONTRACT.Group == Group).\
							filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
							group_by(MKT_LOAN_CONTRACT.ID,
									MKT_LOAN_CONTRACT.Account,
									MKT_CUSTOMER.FirstNameKh,
									MKT_CUSTOMER.LastNameKh).\
							order_by(MKT_LOAN_CONTRACT.ID.asc()).\
							all()

		return LoanObj

	except Exception, e:
		raise
'''

@app.route("/Morakot/Report/LoanScheduleByGroup/Print/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPrintLoanScheduleByGroup():
	try:
		
		Branch 			= 	request.args.get("Branch") if 'Branch' in request.args else session["ChangeBranch"]
		BranchList 		=	Branch.split()
		Currency 		= 	request.args.get("Currency") if 'Currency' in request.args else mktsetting.getAccSetting().BaseCurrency
		CurrencyList 	=	Currency.split()
		CurrencyObj 	=	mktmoney.getCurrencyObj(Currency)
		Group 			=	request.args.get("Group") if "Group" in request.args else ""
		VB 				=	request.args.get("VB") if "VB" in request.args else ""

		if not CurrencyObj:
			flash(msg_error + "Currency %s not found." %Currency)

		LoanObj 		=	getLoanByGroup(BranchList, CurrencyList)

		CompanyObj 	=	mktreport.getCompanyObj()
		BranchName 	=	""
		BranchObj 	=	MKT_BRANCH.query.get(Branch)
		if BranchObj:
			BranchName 	=	BranchObj.Description

		CompanyKh 	= ""
		Company 	= ""
		getCompany 	= mkttool.getCompany()
		if getCompany:
			Company 	= 	getCompany.CompanyName
			CompanyKh 	=	getCompany.LocalName

		ScheduleObj 	=	getScheduleObj(Group, VB)

		Address 		=	""
		InterestRate 	=	""
		Term 			=	""
		ValueDate 		=	""
		MaturityDate 	=	""
		FirstCollection =	""
		ClientName 		=	""
		OfficerName 	=	""
		VBSingle 		=	MKT_VB.query.get(VB)
		VBName 			=	""
	
		if VBSingle:
			print VBSingle.VBProvince
			Address = mktaddress.getAddress(VBSingle.VBProvince,
													VBSingle.VBDistrict,
													VBSingle.VBCommune,
													VBSingle.VBVillage,
													'kh')
			VBName 	=	VBSingle.Description

		InterestObj 	=	MKT_LOAN_CONTRACT.query.\
							filter(MKT_LOAN_CONTRACT.ContractVB == VB).\
							filter(MKT_LOAN_CONTRACT.Group == Group).\
							limit(1).\
							first()

		if InterestObj:

			InterestRate 	=	mktrepayment.getRateByFreq(InterestObj.FreqType, InterestObj.Frequency, InterestObj.InterestRate)
			Term 			=	InterestObj.Term
			ValueDate 		=	InterestObj.ValueDate
			MaturityDate 	=	InterestObj.MaturityDate
			LoanID 			=	InterestObj.ID
			ClientID 		=	InterestObj.ContractCustomerID
			OfficerID 		=	InterestObj.ContractOfficerID
			LoanID 			+=	'1'

			OfficerObj 		=	MKT_OFFICER.query.get(OfficerID)
			if OfficerObj:
				OfficerName =	"%s %s" %(OfficerObj.LastName, OfficerObj.FirstName)

			CustomerObj 	=	MKT_CUSTOMER.query.get(ClientID)
			if CustomerObj:
				ClientName 	=	"%s %s" %(CustomerObj.LastNameKh, CustomerObj.FirstNameKh)

			SchObj 			=	MKT_REP_SCHEDULE.query.get(LoanID)
			if SchObj:
				FirstCollection = SchObj.CollectionDate

		return render_template("report/loan/print_schedule_group.html",
							CompanyObj 		=	CompanyObj,
							BranchName 		=	BranchName,
							Branch 			=	Branch,
							BranchList 		=	BranchList,
							formatNumber 	=	mktmoney.formatNumber,
							CurrencyObj 	=	CurrencyObj,
							Currency 		=	Currency,
							toMoney 		=	mktmoney.toMoney,
							float 			=	float,
							int 			=	int,
							getTotalByList 	=	getTotalByList,
							Company 		=	Company,
							CompanyKh		=	CompanyKh,
							Group 			=	Group,
							VB 				=	VB,
							ScheduleObj 	=	ScheduleObj,
							getScheduleObjByGroup =	getScheduleObjByGroup,
							toDateShort 	=	mktdate.toDateShort,
							getTotalDisbursedByVB =	getTotalDisbursedByVB,
							Address 		=	Address,
							InterestRate 	=	InterestRate,
							VBName 			=	VBName,
							Term 			=	Term,
							ValueDate 		=	ValueDate,
							MaturityDate 	=	MaturityDate,
							FirstCollection =	FirstCollection,
							ClientName 		=	ClientName,
							OfficerName 	=	OfficerName
						)

	except Exception, e:
		raise

'''
''' Loan Class Detail Listing Report '''
@app.route("/Morakot/Report/LoanClassDetailListing", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanClassDetailListing():
	try:
		# "12020.KHR.10.N........"
		Result 		=	{}
		Branch 		=	session["ChangeBranch"]
		LoanObj 	=	db.session.query(
							MKT_LOAN_CONTRACT.AssetClass,
							MKT_LOAN_CONTRACT.MoreThanOneYear,
							func.sum(MKT_LOAN_CONTRACT.Amount).label("TotalLoanBalance"),
							func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("TotalOutstanding"),
							func.sum(MKT_LOAN_CONTRACT.Disbursed).label("TotalDisbursed")
						).\
						filter(MKT_LOAN_CONTRACT.Branch == Branch).\
						group_by(
							MKT_LOAN_CONTRACT.AssetClass,
							MKT_LOAN_CONTRACT.MoreThanOneYear
						).\
						all()
		Output 	=	""
		if LoanObj:
			for item in LoanObj:
				Output += "Asset Class: %s - %s <br/>" %(item.AssetClass, item.MoreThanOneYear)
				Output += "Disbursed: %s <br/>" %mktmoney.formatNumber(float(item.TotalDisbursed), 2, 0)
				Output += "Outstanding: %s <br/>" %mktmoney.formatNumber(float(item.TotalOutstanding), 2, 0)
				Output += "Balance: %s <br/>" %mktmoney.formatNumber(float(item.TotalLoanBalance), 2, 0)
				Output += "<hr>"
				Result.update({item.AssetClass:{'LoanBalance':str(item.TotalLoanBalance), 'OutstandingAmount':str(item.TotalOutstanding), 'Disbursed':str(item.TotalDisbursed)}})
		
		return "%s" %Output

	except Exception, e:
		raise

@app.route("/Morakot/Report/IIClassDetailListing", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getIIClassDetailListing():
	try:
		# "12020.KHR.10.N........"
		Result 		=	{}
		Branch 		=	"000003"
		LoanObj 	=	db.session.query(
							MKT_LOAN_CONTRACT.AssetClass,
							MKT_LOAN_CONTRACT.MoreThanOneYear,
							func.sum(MKT_LOAN_CONTRACT.IntIncEarned).label("TotalIntIncEarned")
						).\
						filter(MKT_LOAN_CONTRACT.Branch == Branch).\
						group_by(
							MKT_LOAN_CONTRACT.AssetClass,
							MKT_LOAN_CONTRACT.MoreThanOneYear
						).\
						all()
		Output 	=	""
		if LoanObj:
			for item in LoanObj:
				Output += "Asset Class: %s - %s <br/>" %(item.AssetClass, item.MoreThanOneYear)
				Output += "Interest Income: %s <br/>" %mktmoney.formatNumber(float(item.TotalIntIncEarned), 2, 4)
				Output += "<hr>"
		
		return "%s" %Output

	except Exception, e:
		raise

from app.AccEntry.models import MKT_ACC_ENTRY

import app.tools.mktloancollection as mktloancollection
''' Officer Collection Report '''
@app.route("/Morakot/Report/OfficerCollection", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeOfficerCollection():
	getCurrencyObj = []
	ListError 	= []
	Criteria 	= []
	kwargs 		= {}
	AccSetting 		= mktsetting.getAccSetting() #Get Acccounting Setting
	DefaultCurrency = AccSetting.BaseCurrency
	StartDate 	= request.args.get("StartDate")	if "StartDate" 	in request.args else ""
	EndDate 	= request.args.get("EndDate")	if "EndDate" 	in request.args else ""
	Currency 	= request.args.get("Currency")	if "Currency" 	in request.args else DefaultCurrency
	LoanID 		= request.args.get("LoanID") 	if "LoanID" 	in request.args else ""
	LoanProduct = request.args.get("LoanProduct") 	if "LoanProduct" 	in request.args else ""
	CurrentBranch = mktuser.getCurrentBranch()
	Branch = request.args.get("Branch") 	if "Branch" 	in request.args else CurrentBranch
	LoanProductObj = MKT_LOAN_PRODUCT.query

	if request.args:

		if Currency and StartDate and Branch:

			if LoanID:
				Criteria = [MKT_LOAN_CONTRACT.ID.in_(str(LoanID).split())]
			if LoanProduct:
				Criteria = [MKT_LOAN_CONTRACT.LoanProduct==LoanProduct]

			ListBranch = []

			if Branch.upper() == 'ALL':

				BranchObj = MKT_BRANCH.query

				if BranchObj:
					ListBranch = [x.ID for x in BranchObj]

			else:

				ListBranch = Branch.split()

			if ListBranch:
				Criteria.append(MKT_LOAN_CONTRACT.Branch.in_(ListBranch))

			kwargs 	= getOfficerCollection(Currency,StartDate,EndDate,Criteria)

		else:

			if not Currency:
				ListError.append(["Currency","The field is required."])
			if not StartDate:
				ListError.append(["Start Date","The field is required."])
			if not Branch:
				ListError.append(["Branch","The field is required."])


	OfficerObj 	= MKT_OFFICER.query
	CurrencyObj = MKT_CURRENCY.query
	AccSetting = mktsetting.getAccSetting()
	if AccSetting:
		PrincipalTran 	= str(AccSetting.PrincipalTran)
		InterestTran 	= str(AccSetting.InterestTran)

	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')

	return render_template("report/loan/officercollection.html",
							kwargs 			= 	kwargs,
							ListError 		= 	ListError,
							StartDate 		= 	StartDate,
							EndDate 		= 	EndDate,
							Currency 		=  	Currency,
							getOfficerByAccount=mktloancollection.getOfficerByAccount,
							OfficerObj 		= 	OfficerObj,
							CurrencyObj 	= 	CurrencyObj,
							toMoney 		=	mktmoney.toMoney,
							float 			= 	float,
							PrincipalTran 	= 	PrincipalTran,
							InterestTran 	= 	InterestTran,
							LoanID 			= 	LoanID,
							LoanProductObj 	= 	LoanProductObj,
							LoanProduct 	= 	LoanProduct,
							Branch = Branch,
							PDInterest = PDInterest,
							PDPrincipal = PDPrincipal
							)


# MKT_FUND_TRANSFER
# MKT_FUND_TRANSFER_HIST
def getOfficerCollection(Currency="",StartDate="",EndDate="",Criteria=[]):
	
	kwargs = {}
	ListCondition 	= []
	CollectionDate  = "%s %s"%(StartDate,EndDate)
	CollectionDate 	= CollectionDate.strip()
	CollectionRange = CollectionDate.split()

	if len(CollectionRange)==2:
		ColLeft, ColRight = CollectionRange[0],CollectionRange[1]
		ListCondition.append(MKT_REP_SCHEDULE.CollectionDate.between(ColLeft, ColRight) )
	else:
		ListCondition.append(MKT_REP_SCHEDULE.CollectionDate==CollectionDate)

	if Currency:
		
		ListCondition.append(MKT_LOAN_CONTRACT.Currency==Currency)
	
	if Criteria:
		for row in Criteria:
			ListCondition.append(row)
	
	ScheduleObj = db.session.query(MKT_REP_SCHEDULE.ID,
								MKT_REP_SCHEDULE.Principal,
								MKT_REP_SCHEDULE.Interest,
								MKT_LOAN_CONTRACT.ContractOfficerID.label('Officer')).\
							filter(*ListCondition).\
							join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_REP_SCHEDULE.LoanID)
	

	for row in ScheduleObj:
		
		Officer 	= str(row.Officer)
		Principal 	= float(row.Principal) 
		Interest 	= float(row.Interest)
		TotalAmount = Principal+Interest


		if Officer in kwargs:
			Principal 		+= kwargs[Officer]['Principal']
			Interest 		+= kwargs[Officer]['Interest']
			TotalAmount 	+= kwargs[Officer]['TotalAmount']

		kwargs.update({Officer:{'Principal':Principal,'Interest':Interest,'TotalAmount':TotalAmount}})
	
	

	ListCondition = []
	if len(CollectionRange)==2:
		ColLeft, ColRight = CollectionRange[0],CollectionRange[1]
		ListCondition.append(MKT_ACC_ENTRY.TransactionDate.between(ColLeft, ColRight) )
	else:
		ListCondition.append(MKT_ACC_ENTRY.TransactionDate==CollectionDate)

	if Currency:
		ListCondition.append(MKT_ACC_ENTRY.Currency==Currency)

	if Criteria:
		for row in Criteria:
			ListCondition.append(row)

	AccSetting = mktsetting.getAccSetting()
	if AccSetting:
		PrincipalTran 	= AccSetting.PrincipalTran
		InterestTran 	= AccSetting.InterestTran
	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')

	ActualObj 	= db.session.query( MKT_ACC_ENTRY.Transaction,
									func.sum(MKT_ACC_ENTRY.Amount).label('Amount'),
									MKT_LOAN_CONTRACT.ContractOfficerID.label('Officer')).\
							filter(MKT_ACC_ENTRY.Transaction.in_([PDPrincipal,PrincipalTran,PDInterest,InterestTran])).\
							filter(*ListCondition).\
							join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.Account == MKT_ACC_ENTRY.Account).\
							group_by(MKT_ACC_ENTRY.Transaction,MKT_LOAN_CONTRACT.ContractOfficerID).order_by(MKT_LOAN_CONTRACT.ContractOfficerID.desc())#.limit(10)
	DicActual = {}
	for row in ActualObj:
		Officer = str(row.Officer)
		Amount  = float(row.Amount)
		Key = "%s%s"%(Officer,row.Transaction)
		DicActual.update({str(Key):Amount})

	del ScheduleObj,ActualObj

	return {'DicSchedule':kwargs,'DicActual':DicActual}

''' Loan Collection Report'''
@app.route("/Morakot/Report/LoanCollection", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanCollection():
	Branch 			= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else session["ChangeBranch"]
	BranchList 		= 	Branch.split(" ")
	Company 		= 	mkttool.getCompany()
	BankDate 		= 	mktdate.getBankDate()
	one_day 		= 	timedelta(days=1) # one day
	LastBankDate 	= 	BankDate - one_day #datetime.date(2015, 1, 1)
	StartDate		= 	request.args.get('StartDate') if request.args else str(LastBankDate)
	EndDate 		= 	request.args.get('EndDate') if request.args else str(BankDate)
	DepTransaction 	=	mktparam.getTellerParam().DepTransaction
	CollectionTran 	=	mktsetting.getAccSetting().LoanCollectionTran
	BankTransaction = 	mktsetting.getAppSetting('BankDepositTran')
	ChequeTransaction = 	mktsetting.getAppSetting('ChequeDepositTran')
	AccProductObj 	= 	MKT_ACC_PRODUCT.query.get('101')
	if AccProductObj:
		DrawdownAccount = AccProductObj.CategoryList

	CurrencyObj 	=	MKT_CURRENCY.query.all()
	AccEntryObj 	= 	db.session.query(	MKT_ACC_ENTRY.Account,
											MKT_ACC_ENTRY.Branch,
											MKT_ACC_ENTRY.Currency,
											MKT_ACC_ENTRY.Transaction,
											MKT_ACC_ENTRY.TransactionDate,
											MKT_ACC_ENTRY.Note,
											MKT_ACC_ENTRY.Inputter,
											MKT_LOAN_CONTRACT.ID.label('LoanID'),
											MKT_LOAN_CONTRACT.ContractCustomerID,
											MKT_LOAN_CONTRACT.ContractOfficerID).\
										join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.Account == MKT_ACC_ENTRY.Account).\
										filter(	MKT_ACC_ENTRY.Category == DrawdownAccount,
												MKT_ACC_ENTRY.TransactionDate.between(StartDate, EndDate),
												MKT_ACC_ENTRY.Module.in_(['FT','DP','CB','CC','FD']),
												MKT_ACC_ENTRY.Transaction.in_([DepTransaction, CollectionTran, BankTransaction, ChequeTransaction])).\
										order_by(MKT_ACC_ENTRY.Account).\
										distinct(MKT_ACC_ENTRY.Account)

	AccEntryObj 	= 	AccEntryObj if 'ALL' in BranchList else AccEntryObj.filter(MKT_ACC_ENTRY.Branch.in_(BranchList))

	DicResult 		= 	{}

	if AccEntryObj.all():
		for item in AccEntryObj.all():

			CustomerObj 		= 	MKT_CUSTOMER.query.get(item.ContractCustomerID) 
			OfficerObj 			= 	MKT_OFFICER.query.get(item.ContractOfficerID)
			TransactionObj		= 	MKT_TRANSACTION.query.get(item.Transaction)

			ResultCollection	= 	[]
			AccBalance 			= 	getDepositBalance(item.Account, StartDate, EndDate)
			DepositAmt 			= 	AccBalance
			InterestCollection 	= 	0
			PrincipalCollection = 	0
			PenaltyCollection 	= 	0
			ChargeCollection 	= 	0

			PDObj 			= 	MKT_PAST_DUE.query.filter(MKT_PAST_DUE.LoanID == item.LoanID).first()
			if PDObj:
				ResultCollection = getCollection(AccBalance, PDObj)
				AccBalance 			= 	ResultCollection[0]
				PenaltyCollection 	+= 	ResultCollection[1]
				ChargeCollection 	+= 	ResultCollection[2]
				InterestCollection 	+= 	ResultCollection[3]
				PrincipalCollection += 	ResultCollection[4]

			RepScheduleObj 	= 	MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == item.LoanID, 
																MKT_REP_SCHEDULE.CollectionDate >= StartDate).all()
			if RepScheduleObj:
				for col in RepScheduleObj:
					ResultCollection = getCollection(AccBalance, col, False)
					AccBalance 			= 	ResultCollection[0]
					PenaltyCollection 	+= 	ResultCollection[1]
					ChargeCollection 	+= 	ResultCollection[2]
					InterestCollection 	+= 	ResultCollection[3]
					PrincipalCollection += 	ResultCollection[4]

			DicResult.update(
			{ item.Account + item.LoanID + item.Currency:
				{
					'CustomerID'		:	CustomerObj.ID,
					'CustomerName'		:	CustomerObj.LastNameEn + CustomerObj.FirstNameEn,
					'DrawDownAccount'	:	item.Account,
					'LoanContractID'	:	item.LoanID,
					'TranDate'			:	item.TransactionDate,
					'DepositAmt'		:	float(DepositAmt),
					'Principal'			:	float(PrincipalCollection),
					'Interest'			:	float(InterestCollection),
					'Penalty'			:	float(PenaltyCollection),
					'Charge'			:	float(ChargeCollection),
					'Total'				:	float(PrincipalCollection+InterestCollection+PenaltyCollection+ChargeCollection),
					'CollectedBy'		:	TransactionObj.Description,
					'Note'				:	item.Note,
					'COCode'			:	item.ContractOfficerID,
					'COName'			:	OfficerObj.LastName + OfficerObj.FirstName,
					'User'				:	item.Inputter
				}
			})

	# return jsonify(result=DicResult)
	return render_template("report/loan/loancollection.html",
							Branch 			= Branch,
							StartDate 		= StartDate,
							EndDate 		= EndDate,
							Result 			= DicResult,
							AccEntryObj 	= AccEntryObj,
							CurrencyObj 	= CurrencyObj,
							getCurrencyObj 	= mktmoney.getCurrencyObj,
							toMoney 		= mktmoney.toMoney
							)

def getCollection(AccBalance, QueryObj, PD = True):
	'''
		getCollection(AccBalance, QueryObj, PD = True)
		* QueryObj can be PD or RepaymentSchedule
		Function:
			_check repayment order 
	'''
	PDParamObj 			= 	mktparam.getPDParam()
	RepMode 			= 	PDParamObj.RepMethod
	RepOrder 			= 	PDParamObj.RepOrder.split(" ")
	PenaltyOpt 			= 	PDParamObj.PenOption
	AccBalance 			= 	decimal.Decimal(AccBalance)

	InterestCollection 	= 	0
	PrincipalCollection = 	0
	PenaltyCollection 	= 	0
	ChargeCollection 	= 	0

	if PD:
		Penalty 		= 	decimal.Decimal(QueryObj.TotPenaltyDue) if QueryObj.TotODAmount > 0 else decimal.Decimal(0)
		Charge 			= 	decimal.Decimal(QueryObj.TotChargeDue) if QueryObj.TotODAmount > 0 else decimal.Decimal(0)
		Interest 		= 	decimal.Decimal(QueryObj.TotInterestDue) if QueryObj.TotODAmount > 0 else decimal.Decimal(0)
		Principal 		= 	decimal.Decimal(QueryObj.TotPrincipalDue) if QueryObj.TotODAmount > 0 else decimal.Decimal(0)
	else:
		Penalty 		= 	0
		Charge 			= 	decimal.Decimal(QueryObj.Charge)
		Interest 		= 	decimal.Decimal(QueryObj.Interest)
		Principal 		= 	decimal.Decimal(QueryObj.Principal)

	for item in RepOrder:
		if AccBalance > 0:
			if item.upper() == "PE" and RepMode == 'A':
				AccBalance, PenaltyCollection = getPaymentBalance(AccBalance, Penalty)
			if item.upper() == "CH":
				AccBalance, ChargeCollection = getPaymentBalance(AccBalance, Charge)
			if item.upper() == "IN":
				AccBalance, InterestCollection = getPaymentBalance(AccBalance, Interest)
			if item.upper() == "PE":
				AccBalance, PrincipalCollection = getPaymentBalance(AccBalance, Principal)

	return AccBalance, PenaltyCollection, ChargeCollection, InterestCollection, PrincipalCollection

def getPaymentBalance(AccBalance, Value):
	''' 
		getPaymentBalance(AccBalance, Value)
		* Value can be Penalty, Charge, Interest, Penalty 
		Function:
			_find total collection amount of Penalty, Charge, Interest, Penalty 
	'''
	Amount = 0
	if Value > 0:
		if AccBalance >= Value:
			Amount 	= Value
		else:
			Amount 	= AccBalance

	AccBalance 	= AccBalance - Amount
	Value 		= Amount

	return AccBalance, Value

def getDepositBalance(AccID,StartDate,EndDate):
	'''
		getDepositBalance(DrawDownID, StartDate, EndDate)
		Function: 
			_find total deposit balance of a customer before EOD
	'''
	try:
		BeginBalance = 0

		RecordIDList	= MKT_ACC_ENTRY.query.\
							filter(MKT_ACC_ENTRY.Account == str(AccID),
									MKT_ACC_ENTRY.TransactionDate.between(StartDate, EndDate),
									MKT_ACC_ENTRY.Module.in_(['FT','DP','CB','CC','FD'])).all()
		if RecordIDList:
			for row in RecordIDList:
				BegCategory = row.Category
				BalanceType = mktaccounting.getAccBalanceType(BegCategory)
				DrCr 			= row.DebitCredit
				TransactionDate = row.TransactionDate

				if StartDate <= row.TransactionDate <= EndDate:
					BeginBalance = float(BeginBalance) + float(row.Amount) if BalanceType == DrCr else float(BeginBalance) - float(row.Amount)

		return BeginBalance
	except:
		raise
