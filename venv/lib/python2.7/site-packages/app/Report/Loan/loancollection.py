from app.mktcore.imports 					import *
from app.AccEntry.models 					import *
from app.LoanContract.models 				import *
from app.Account.models 					import *
from app.Customer.models 					import *
from app.Officer.models 					import *
from app.LoanProduct.models 				import *
import app.tools.mktsetting 				as mktsetting
from app.tools.mktcustomreport   		import *
import app.tools.user           		as mktuser
from flask import request
from app.Currency.models 				import *

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	ProductID			=	TextField("ProductID")
	OfficerID			=	TextField("OfficerID")
	ReportedDate 		=	DateTextField("Reported Date")

def getSplitData(ListData):
	ListData = str(ListData).replace(',', ' ')
	ListData = ListData.split()

	return ListData

def getPaymentTransactionNumberList():
	PDCharge 		= mktsetting.getAppSetting('PDCharge')
	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')
	AccSetting 		= mktsetting.getAccSetting()
	ChargeTran 		= AccSetting.ChargeTran
	InterestTran 	= AccSetting.InterestTran
	PrincipalTran 	= AccSetting.PrincipalTran
	PenaltyTran 	= AccSetting.PenaltyTran
	PenaltyTerminateTran = AccSetting.PenaltyTerminateTran
	PenaltyAmendmentTran = AccSetting.PenaltyAmendmentTran

	return [PrincipalTran,InterestTran,ChargeTran,PDPrincipal,PDInterest,PDCharge,PenaltyTran,PenaltyTerminateTran,PenaltyAmendmentTran]

def getPaymentTransactionValueNumberDict():
	PDCharge 		= mktsetting.getAppSetting('PDCharge')
	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')
	AccSetting 		= mktsetting.getAccSetting()
	ChargeTran 		= AccSetting.ChargeTran
	InterestTran 	= AccSetting.InterestTran
	PrincipalTran 	= AccSetting.PrincipalTran
	PenaltyTran 	= AccSetting.PenaltyTran
	PenaltyTerminateTran = AccSetting.PenaltyTerminateTran
	PenaltyAmendmentTran = AccSetting.PenaltyAmendmentTran

	return {'PrincipalTran':PrincipalTran,'InterestTran':InterestTran,'ChargeTran':ChargeTran,'PDPrincipal':PDPrincipal,'PDInterest':PDInterest,'PDCharge':PDCharge,'PenaltyTran':PenaltyTran,'PenaltyTerminateTran':PenaltyTerminateTran,'PenaltyAmendmentTran':PenaltyAmendmentTran}

def getPaymentTransactionValueStringDict():
	TranValueNumberDict = getPaymentTransactionValueNumberDict()
	NewTranDict = {}

	for Key in TranValueNumberDict:
		NewTranDict[TranValueNumberDict[Key]] = Key

	return NewTranDict


def getSubQueryAccountEntry(**kwargs):

	Branch 			= kwargs.get("Branch")
	ReportedDate 	= kwargs.get("ReportedDate")
	ProductID 		= kwargs.get('ProductID')
	OfficerID 		= kwargs.get('OfficerID')
	AccountList = db.session.query(
									MKT_ACC_ENTRY.Branch.label('AccBranch'),
									MKT_ACC_ENTRY.Reference,
									MKT_ACC_ENTRY.DebitCredit,
									MKT_ACC_ENTRY.Transaction,
									MKT_ACC_ENTRY.TransactionDate,
									func.sum(MKT_ACC_ENTRY.Amount).label('Amount'),
									func.sum(
										case(whens=((
												MKT_ACC_ENTRY.Transaction == TranValueNumberDict['PrincipalTran'],
												MKT_ACC_ENTRY.Amount
												),),
										else_=0)
										).label('PrincipalTran'),
									func.sum(
										case(whens=((
												MKT_ACC_ENTRY.Transaction == TranValueNumberDict['InterestTran'],
												MKT_ACC_ENTRY.Amount
												),),
										else_=0)
										).label('InterestTran'),
									func.sum(
										case(whens=((
												MKT_ACC_ENTRY.Transaction == TranValueNumberDict['ChargeTran'],
												MKT_ACC_ENTRY.Amount
												),),
										else_=0)
										).label('ChargeTran'),
									func.sum(
										case(whens=((
												MKT_ACC_ENTRY.Transaction == TranValueNumberDict['PDPrincipal'],
												MKT_ACC_ENTRY.Amount
												),),
										else_=0)
										).label('PDPrincipal'),
									func.sum(
										case(whens=((
												MKT_ACC_ENTRY.Transaction == TranValueNumberDict['PDInterest'],
												MKT_ACC_ENTRY.Amount
												),),
										else_=0)
										).label('PDInterest'),
									func.sum(
										case(whens=((
												MKT_ACC_ENTRY.Transaction == TranValueNumberDict['PDCharge'],
												MKT_ACC_ENTRY.Amount
												),),
										else_=0)
										).label('PDCharge'),
									func.sum(
										case(whens=((
												MKT_ACC_ENTRY.Transaction == TranValueNumberDict['PenaltyTran'],
												MKT_ACC_ENTRY.Amount
												),),
										else_=0)
										).label('PenaltyTran'),
									func.sum(
										case(whens=((
												MKT_ACC_ENTRY.Transaction == TranValueNumberDict['PenaltyTerminateTran'],
												MKT_ACC_ENTRY.Amount
												),),
										else_=0)
										).label('PenaltyTerminateTran'),
									func.sum(
										case(whens=((
												MKT_ACC_ENTRY.Transaction == TranValueNumberDict['PenaltyAmendmentTran'],
												MKT_ACC_ENTRY.Amount
												),),
										else_=0)
										).label('PenaltyAmendmentTran'),
								).\
								filter(MKT_ACC_ENTRY.DebitCredit=='Dr').\
								filter(MKT_ACC_ENTRY.Transaction.in_(TransactionCode)).\
								filter(MKT_ACC_ENTRY.Reference.ilike('%'+'LC'+'%')).\
								group_by(MKT_ACC_ENTRY.Branch,MKT_ACC_ENTRY.DebitCredit, MKT_ACC_ENTRY.TransactionDate, MKT_ACC_ENTRY.Transaction,MKT_ACC_ENTRY.Reference).\
								subquery()
	
	if ReportedDate not in ['', None]:
		ReportedDate = getSplitData(ReportedDate)
		if len(ReportedDate) == 2:
			StartDate 		= str(ReportedDate[0])
			EndDate 		= str(ReportedDate[1])
			AccountList = db.session.query(
											AccountList
											).\
											filter(AccountList.c.TransactionDate.between(StartDate,EndDate)).subquery()
		if len(ReportedDate) != 2:
			AccountList = db.session.query(
											AccountList
											).\
											filter(AccountList.c.TransactionDate.in_(ReportedDate)).subquery()
	if Branch not in ['','ALL', None]:
		Branch = getSplitData(Branch)
		AccountList = db.session.query(
										AccountList
										).\
										filter(AccountList.c.AccBranch.in_(Branch)).subquery()

	# Delete transaction to sum it at the same day
	NewAccount = db.session.query(
								AccountList.c.Reference,
								AccountList.c.DebitCredit,
								AccountList.c.TransactionDate,
								func.sum(AccountList.c.Amount).label('Amount'),
								func.sum(AccountList.c.PrincipalTran).label('Principal'),
								func.sum(AccountList.c.InterestTran).label('Interest'),
								func.sum(AccountList.c.ChargeTran).label('Charge'),
								func.sum(AccountList.c.PDPrincipal).label('PDPrincipal'),
								func.sum(AccountList.c.PDInterest).label('PDInterest'),
								func.sum(AccountList.c.PDCharge).label('PDCharge'),
								func.sum(AccountList.c.PenaltyTran).label('PenaltyTran'),
								func.sum(AccountList.c.PenaltyTerminateTran).label('PenaltyTerminateTran'),
								func.sum(AccountList.c.PenaltyAmendmentTran).label('PenaltyAmendmentTran'),
							).\
							group_by(
								AccountList.c.Reference,
								AccountList.c.DebitCredit,
								AccountList.c.TransactionDate,
								).\
							subquery()
	return NewAccount

def getLoanContractLive():
	LoanContract = db.session.query(
										MKT_LOAN_CONTRACT.ID.label('ID'),
										MKT_LOAN_CONTRACT.Branch.label('Branch'),
										MKT_LOAN_CONTRACT.ContractOfficerID.label('OfficerID'),
										MKT_OFFICER.FirstName.label('FirstName'),
										MKT_OFFICER.LastName.label('LastName'),
										MKT_LOAN_CONTRACT.ContractCustomerID.label('CustomerID'),
										MKT_CUSTOMER.FirstNameEn.label('FirstNameEn'),
										MKT_CUSTOMER.LastNameEn.label('LastNameEn'),
										MKT_CUSTOMER.Gender.label('Gender'),
										MKT_ACCOUNT.ID.label('Drawdown'),
										MKT_LOAN_CONTRACT.LoanProduct.label('LoanProduct'),
										MKT_LOAN_PRODUCT.Description.label('Description'),
										MKT_LOAN_CONTRACT.Currency.label('Currency'),
										).\
									join(MKT_OFFICER, MKT_LOAN_CONTRACT.ContractOfficerID == MKT_OFFICER.ID).\
									join(MKT_CUSTOMER, MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
									join(MKT_ACCOUNT, MKT_CUSTOMER.ID == MKT_ACCOUNT.CustomerList).\
									join(MKT_LOAN_PRODUCT, MKT_LOAN_CONTRACT.LoanProduct == MKT_LOAN_PRODUCT.ID)
	return LoanContract

def getLoanContractHist():
	LoanContractHist = db.session.query(
										MKT_CLOSED_LOAN.ID.label('ID'),
										MKT_CLOSED_LOAN.Branch.label('Branch'),
										MKT_CLOSED_LOAN.ContractOfficerID.label('OfficerID'),
										MKT_OFFICER.FirstName.label('FirstName'),
										MKT_OFFICER.LastName.label('LastName'),
										MKT_CLOSED_LOAN.ContractCustomerID.label('CustomerID'),
										MKT_CUSTOMER.FirstNameEn.label('FirstNameEn'),
										MKT_CUSTOMER.LastNameEn.label('LastNameEn'),
										MKT_CUSTOMER.Gender.label('Gender'),
										MKT_ACCOUNT.ID.label('Drawdown'),
										MKT_CLOSED_LOAN.LoanProduct.label('LoanProduct'),
										MKT_LOAN_PRODUCT.Description.label('Description'),
										MKT_CLOSED_LOAN.Currency.label('Currency'),
										).\
									join(MKT_OFFICER, MKT_CLOSED_LOAN.ContractOfficerID == MKT_OFFICER.ID).\
									join(MKT_CUSTOMER, MKT_CLOSED_LOAN.ContractCustomerID == MKT_CUSTOMER.ID).\
									join(MKT_ACCOUNT, MKT_CUSTOMER.ID == MKT_ACCOUNT.CustomerList).\
									join(MKT_LOAN_PRODUCT, MKT_CLOSED_LOAN.LoanProduct == MKT_LOAN_PRODUCT.ID)
	return LoanContractHist

def getSubQueryAllLoanCotract():

	LoanContractLive = getLoanContractLive()
	LoanContractHist = getLoanContractHist()
	LoanContract = LoanContractLive.union(LoanContractHist).subquery()
	LoanContract = db.session.query(LoanContract).distinct(LoanContract.c.ID).subquery()
	return LoanContract

def getAllLoanCollection(**kwargs):
	global TransactionCode
	global TranValueStringDict
	global TranValueNumberDict

	TransactionCode = getPaymentTransactionNumberList()
	TranValueStringDict 		= getPaymentTransactionValueStringDict()
	TranValueNumberDict 		= getPaymentTransactionValueNumberDict()
	Branch 			= kwargs.get("Branch")
	ReportedDate 	= kwargs.get("ReportedDate")
	ProductID 		= kwargs.get('ProductID')
	OfficerID 		= kwargs.get('OfficerID')

	NewAccount 		= getSubQueryAccountEntry(**kwargs)
	LoanContract 	= getSubQueryAllLoanCotract()

	LoanCollection = db.session.query(
								NewAccount.c.DebitCredit,
								NewAccount.c.TransactionDate,
								func.sum(NewAccount.c.Amount).label('Amount'),
								func.sum(NewAccount.c.Principal).label('Principal'),
								func.sum(NewAccount.c.Interest).label('Interest'),
								func.sum(NewAccount.c.Charge).label('Charge'),
								func.sum(NewAccount.c.PDPrincipal).label('PDPrincipal'),
								func.sum(NewAccount.c.PDInterest).label('PDInterest'),
								func.sum(NewAccount.c.PDCharge).label('PDCharge'),
								func.sum(NewAccount.c.PenaltyTran).label('PenaltyTran'),
								func.sum(NewAccount.c.PenaltyTerminateTran).label('PenaltyTerminateTran'),
								func.sum(NewAccount.c.PenaltyAmendmentTran).label('PenaltyAmendmentTran'),
								LoanContract
								).\
								join(LoanContract, NewAccount.c.Reference.ilike('%' + LoanContract.c.ID)).\
								group_by(
									NewAccount.c.DebitCredit,NewAccount.c.TransactionDate,
									LoanContract.c.ID,
									LoanContract.c.Branch,
									LoanContract.c.FirstName,
									LoanContract.c.LastName,
									LoanContract.c.FirstNameEn,
									LoanContract.c.LastNameEn,
									LoanContract.c.Gender,
									LoanContract.c.LoanProduct,
									LoanContract.c.Description,
									LoanContract.c.Currency,
									LoanContract.c.OfficerID,
									LoanContract.c.CustomerID,
									LoanContract.c.Drawdown
									).\
								order_by(LoanContract.c.Branch, LoanContract.c.FirstName, LoanContract.c.LastName,LoanContract.c.Drawdown,LoanContract.c.ID,NewAccount.c.TransactionDate.asc()).subquery()
	
	if ProductID not in ['', None]:
		ProductID = getSplitData(ProductID)
		LoanCollection = db.session.query(
										LoanCollection
										).\
										filter(LoanCollection.c.LoanProduct.in_(ProductID)).subquery()

	if OfficerID not in ['', None]:
		OfficerID = getSplitData(OfficerID)
		LoanCollection = db.session.query(
										LoanCollection
										).\
										filter(LoanCollection.c.OfficerID.in_(OfficerID)).subquery()

	if Branch not in ['','ALL', None]:
		Branch = getSplitData(Branch)
		LoanCollection = db.session.query(
										LoanCollection
										).\
										filter(LoanCollection.c.Branch.in_(Branch)).subquery()
	
	LoanCollection = db.session.query(LoanCollection).all()

	return LoanCollection

@app.route('/Morakot/Report/LoanCollectionReport', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanCollectionReport():
	""" Route to view each report """
	try:
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			= request.args.get("Branch") if "Branch" in request.args else ""
		ReportedDate 	= request.args.get("ReportedDate") if "ReportedDate" in request.args else ""
		ProductID 	= request.args.get('ProductID' if "ProductID" in request.args else "")
		OfficerID 		= request.args.get('OfficerID' if "OfficerID" in request.args else "")

		Result 			=	getLoanCollectionReportHeader(Branch=Branch,ReportedDate=ReportedDate,ProductID=ProductID,OfficerID=OfficerID)
		Parameters 		= 	{"Branch": Branch,"ReportedDate": ReportedDate}
		FilterOption 	=	""

		SearchForm      =   FRM_CUSTOM_REPORT_SEARCH_EX()

		return CUSTOM_REPORT.getCustomReportTemplate(
													Parameters     =   Parameters,
													Result          =   Result,
													FilterOption    =   FilterOption,
													SearchForm      =   SearchForm
													)
	except:
		raise

@app.route('/Morakot/Report/LoanCollectionReport/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanCollectionReportExcel():
	""" Route to view each report """
	try:
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			= request.args.get("Branch") if "Branch" in request.args else ""
		ReportedDate 	= request.args.get("ReportedDate") if "ReportedDate" in request.args else ""
		ProductID 	= request.args.get('ProductID' if "ProductID" in request.args else "")
		OfficerID 		= request.args.get('OfficerID' if "OfficerID" in request.args else "")

		Result 			=	getLoanCollectionReportHeader(Branch=Branch,ReportedDate=ReportedDate,ProductID=ProductID,OfficerID=OfficerID)

		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="LoanCollectionReport")

		return response

	except Exception as e:
		raise

def getLoanCollectionReportHeader(**kwargs):
	try:
		Branch 			= kwargs.get("Branch")
		ReportedDate 	= kwargs.get("ReportedDate")
		ProductID 		= kwargs.get('ProductID')
		OfficerID 		= kwargs.get('OfficerID')

		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Loan Collection Report"})
		ReportHeader.update({"Parameters": kwargs})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Officer ID', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'CO Name', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'CU ID', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Customer Name', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Sex', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'DDA ID', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'LC ID', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Product ID', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Product Name', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Currency', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Collection Date', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Principal Collected', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="M")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Interest Collected', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="N")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Schedule Fee Collected', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="O")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'PDPrincipal', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="P")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'PDInterest', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="Q")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'PDCharge', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="R")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Penalty Loan Late', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="S")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Penalty Pre-Termination', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="T")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Penalty Principal Reduction', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="U")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Total Cash Collected', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="V")
		
		Data = getRecordRow(**kwargs)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getRecordRow(**kwargs):

	RecordRow 			= []
	TotalPrincipal 		= 0
	TotalInterest 		= 0
	TotalCharge 		= 0
	TotalPDPrincipal 	= 0
	TotalPDInterest 	= 0
	TotalPDCharge 		= 0
	TotalPenaltyTran 	= 0
	TotalPenaltyPreTerm = 0
	TotalPenaltyAmend 	= 0
	TotalAmount 		= 0
	if isFirstLoaded(**kwargs):
		LoanCollection = getAllLoanCollection(**kwargs)
		for LoanObj in LoanCollection:
			OfficerName = '%s %s' %(LoanObj.LastName, LoanObj.FirstName)
			CustomerName = '%s %s' %(LoanObj.LastNameEn, LoanObj.FirstNameEn)
			TotalPrincipal 		+= LoanObj.Principal
			TotalInterest 		+= LoanObj.Interest
			TotalCharge 		+= LoanObj.Charge
			TotalPDPrincipal 	+= LoanObj.PDPrincipal
			TotalPDInterest 	+= LoanObj.PDInterest
			TotalPDCharge 		+= LoanObj.PDCharge
			TotalPenaltyTran 	+= LoanObj.PenaltyTran
			TotalPenaltyPreTerm += LoanObj.PenaltyTerminateTran
			TotalPenaltyAmend 	+= LoanObj.PenaltyAmendmentTran
			TotalAmount 		+= LoanObj.Amount
			RecordRow.append((
								{
								1: {"Value": LoanObj.Branch, "Class":"text-center"},
								2: {"Value": LoanObj.OfficerID, "Class":"text-left"},
								3: {"Value": OfficerName, "Class":"text-left"}, 
								4: {"Value": LoanObj.CustomerID},
								5: {"Value": CustomerName, "Class":"text-left"},
								6: {"Value": LoanObj.Gender},
								7: {"Value": LoanObj.Drawdown},
								8: {"Value": LoanObj.ID},
								9: {"Value": LoanObj.LoanProduct},
								10: {"Value": LoanObj.Description},
								11: {"Value": LoanObj.Currency},
								12: {"Value": LoanObj.TransactionDate},
								13: {"Value": LoanObj.Principal},
								14: {"Value": LoanObj.Interest},
								15: {"Value": LoanObj.Charge},
								16: {"Value": LoanObj.PDPrincipal},
								17: {"Value": LoanObj.PDInterest},
								18: {"Value": LoanObj.PDCharge},
								19: {"Value": LoanObj.PenaltyTran},
								20: {"Value": LoanObj.PenaltyTerminateTran},
								21: {"Value": LoanObj.PenaltyAmendmentTran},
								22: {"Value": LoanObj.Amount},
								},
								{"Class":"text-right","Style":""}
							))
	RecordRow.append((
						{
						1: {"Value":'',"Class":"text-center"},
						2: {"Value": '',"Class":"text-left"},
						3: {"Value":''}, 
						4: {"Value": ''},
						5: {"Value": ''},
						6: {"Value":''},
						7: {"Value": ''},
						8: {"Value": ''},
						9: {"Value": ''},
						10: {"Value":''},
						11: {"Value": ''},
						12: {"Value": ''},
						13: {"Value": TotalPrincipal},
						14: {"Value": TotalInterest},
						15: {"Value": TotalCharge},
						16: {"Value": TotalPDPrincipal},
						17: {"Value": TotalPDInterest},
						18: {"Value": TotalPDCharge},
						19: {"Value": TotalPenaltyTran},
						20: {"Value": TotalPenaltyPreTerm},
						21: {"Value": TotalPenaltyAmend},
						22: {"Value": TotalAmount},
						},
						{"Class":"text-center text-bold","Style":""}
					))
	return RecordRow

def isFirstLoaded(**kwargs):
	# If it is first loanded, the bellow variables will None
	Branch 			= kwargs.get("Branch")
	ReportedDate 	= kwargs.get("ReportedDate")
	ProductID 		= kwargs.get('ProductID')
	OfficerID 		= kwargs.get('OfficerID')

	if (Branch or ReportedDate or ProductID or OfficerID) not in ['', None]:
		return True
	return False
