from flask                  import Flask, request, redirect, send_from_directory, url_for, g, after_this_request
from app.mktcore.imports    import *
from decimal                import *
from sqlalchemy             import *
from ..                     import app
from app.urlregister        import *

from app.Branch.models      import *
from app.Upload.exportimport import insertTableFromCSV, getAuditTrailInau

import os, sys
import csv
import app.tools.mktmoney   as mktmoney
import app.tools.mktdate    as mktdate
import app.tools.mkttool    as mkttool
import app.tools.mktdb      as mktdb
import app.tools.user       as mktuser
import app.tools.loantools.rescheduletools  as rescheduletools

from app.PD.models import *
from app.Branch.models import *
from app.Officer.models import *
from app.Account.models import *
from app.Customer.models import *
from app.Category.models import *
from app.Currency.models import *
from app.AssetClass.models import *
from app.LoanProduct.models import *
from app.InterestRate.models import *
from app.LoanContract.models import *
from app.RepaymentSchedule.models import *
import app.tools.mktdate as mktdate
import app.tools.mkttool as mkttool
import app.tools.user    as mktuser

from sqlalchemy         import *
from csv        import *

# Import Validation
import Customer.views       as Customer
import Collateral.views     as Collateral
import Account.views        as Account
import LoanContract.views   as LoanContract
import ScheduleDefine.views as ScheduleDefine
import RepaymentSchedule.views as RepaymentSchedule
import PastDue.views        as PastDue

# Global variable declaration

TEMP_FOLDER = "/tmp/data-migration/"
TEMP_CSV    = "%sCSV/"%TEMP_FOLDER
TableList   = {
                'Customer'          :'MKT_CUSTOMER',
                'Collateral'        :'MKT_COLLATERAL',
                'CollateralDetail'  :'MKT_COLLATERAL_DE',
                'Drawdown'          :'MKT_ACCOUNT',
                'Saving'            :'MKT_ACCOUNT',
                'LoanContract'      :'MKT_LOAN_CONTRACT',
                'Guarantor'         :'MKT_GUARANTOR',
                'CoBorrower'        :'MKT_LOAN_CO_BORROWER',
                'LoanCollateral'    :'MKT_LOAN_COLLATERAL',
                'ScheduleDefine'    :'MKT_SCHED_DEFINE',
                'RepaymentSchedule' :'MKT_REP_SCHEDULE',
                'PastDue'           :'MKT_PAST_DUE',
                'PastDueDate'       :'MKT_PD_DATE'
            }

@app.route("/Morakot/DataMigration", methods=['GET', 'POST'])
@app.route("/Morakot/API/DataMigration", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def DataMigration():
    FieldRequired   = []
    ErrorCheck      = []
    Msg             = ""

    if request.method == 'POST':
        Files = request.files.getlist('file')
        mkttool.setDirectory(TEMP_FOLDER)

        # Upload file
        try:
            if Files:
                for file in Files:
                    CheckFile   = getAllowedExcelFile(file.filename)[0]
                    Msg         = getAllowedExcelFile(file.filename)[1]

                    if CheckFile:
                        FileName    = file.filename.replace(" ", "")
                        FileName    = secure_filename(FileName)

                        if os.path.exists(TEMP_FOLDER + FileName):
                            os.remove(os.path.abspath(TEMP_FOLDER + FileName))

                        file.save(os.path.abspath(TEMP_FOLDER + FileName))
                        print 'save file'
                        ErrorCheck, Msg = setValidateProcess(file, TableList, ErrorCheck)
                        """
                            If there are any errors in Excel file after first data validation,
                                it will return excel file back with comment on cell that has error.
                            If not it will insert to database and start the second validation processes.
                        """
                        if not ErrorCheck:
                            db.session.commit()
                            return "", 200

                        else:
                            db.session.rollback()
                            db.session.close()
                            ErrorCheck = []
                            return msg_error + " %s"%Msg, 400
                    else:
                        return msg_error + " %s"%Msg, 400

        except Exception as e:
            return msg_error + " %s"%e, 400

    return render_template("datamigration/datamigration.html")


@app.route("/Morakot/DataMigration/FailedResult", methods = ['GET', 'POST'])
@app.route("/Morakot/DataMigration/API/FailedResult", methods = ['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def SendFailedResult():
    getZipFile(TEMP_FOLDER)
    return send_from_directory("/tmp/", "DataMigration.zip")


@app.route("/Morakot/DataMigration/PassedResult", methods = ['GET', 'POST'])
@app.route("/Morakot/DataMigration/API/PassedResult", methods = ['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def SendPassedResult():
    getZipFile(TEMP_CSV)
    return send_from_directory("/tmp/", "DataMigration.zip")


@app.route("/Morakot/DataMigration/CleanData", methods = ['GET', 'POST'])
@app.route("/Morakot/API/DataMigration/CleanData", methods = ['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def CleanData():
    setCleanUpProcess(TableList)
    return redirect(url_for("DataMigration"))


def setValidateProcess(File, TableList, ListError = []):
    '''
        Start Validation Processes
        ========================
        1. Export excel sheets as csv format
        2. Validate data in csv
        3. Import csv data to table
        4. Custom validate after insert
    '''
    
    DictValidate = {
                    'Customer'          :'Customer.validateCustomer(row)',
                    'Collateral'        :'Collateral.validateCollateral(row)',
                    'CollateralDetail'  :'Collateral.validateCollateralDetail(row)',
                    'Drawdown'          :'Account.validateDrawdown(row)',
                    'Saving'            :'Account.validateSaving(row)',
                    'LoanContract'      :'LoanContract.validateLoanContract(row)',
                    'Guarantor'         :'LoanContract.validateGuarantor(row)',
                    'CoBorrower'        :'LoanContract.validateCoBorrower(row)',
                    'LoanCollateral'    :'LoanContract.validateLoanCollateral(row)',
                    'ScheduleDefine'    :'ScheduleDefine.validateScheduleDefine(row)',
                    'RepaymentSchedule' :'RepaymentSchedule.validateRepaymentSchedule(row)',
                    'PastDue'           :'PastDue.validatePastDue(row)',
                    'PastDueDate'       :'PastDue.validatePastDueDate(row)'
                    }
    # DictCustomValidate = {
    #                         'RepaymentSchedule' :   "",
    #                         'PastDue'           :   ""
    #                     }

    # 1. Export excel sheets as csv format
    DictSheet   = getCSVFromExcel(File)

    # 2. Validate length and type of data in all CSV files (First Phase)
    Workbook    = load_workbook(File)
    Msg         = ""


    for sheet in Workbook.worksheets:
        SheetName           = sheet.title.replace(" ","")
        FilePath            = '%s%s.csv'%(TEMP_CSV, SheetName)
        Table               = mkttool.getClassModel(TableList.get(SheetName, ""))
        DictColumnLetter    = DictSheet.get(SheetName, {})

        if Table:
            TableColumns    = mkttool.getModelAttributes(Table)
            TableName       = Table.__tablename__
            with open(FilePath) as file:
                DictCSV = mkttool.getDictCSV(file)

                RowIndex = 3 # Start row index at 2 for all excel files to validate
                
                # Write column header for Validate Status
                Status = "ValidateStatus"
                NextColumnLetter = DictColumnLetter.get("NextColumnLetter")
                mkttool.writeToExcel(sheet, Status, "1", NextColumnLetter)

                for row in DictCSV:
                    Comments = validateDataLength(row, Table, TableColumns)
                    if Comments:
                        Status = "FAILED"
                        for key, value in Comments.iteritems():
                            ColumnIndex = DictColumnLetter.get(key)
                            mkttool.insertCommentToExcel(sheet, value, RowIndex, ColumnIndex)
                            mkttool.writeToExcel(sheet, Status, RowIndex, NextColumnLetter)
                        ListError.append(Comments)
                    else:
                        Comments = eval(DictValidate.get(SheetName))
                        if Comments:
                            Status = "FAILED"
                            for key, value in Comments.iteritems():
                                ColumnIndex = DictColumnLetter.get(key)
                                mkttool.insertCommentToExcel(sheet, value, RowIndex, ColumnIndex)
                                mkttool.writeToExcel(sheet, Status, RowIndex, NextColumnLetter)
                            ListError.append(Comments)
                        else:
                            Status = "PASSED"
                            mkttool.writeToExcel(sheet, Status, RowIndex, NextColumnLetter)

                    RowIndex += 1

                # 3. Insert data to database
                if not ListError:
                    Audit   = getAuditTrailInau()
                    Success, Msg = insertTableFromCSV(TableName, DictCSV, Audit, FormName='',Committed=True)
                else:
                    Msg     = "Error found in this file."

            file.close()

        else:
             Msg = "No table available for this sheet."

    Workbook.save('%s%s'%(TEMP_FOLDER, File.filename))
    Workbook.close()

    return ListError, Msg

def setCleanUpProcess(TableList):
    '''
        Start Clean up Processes
        ========================
        1. Clear data from database
        2. Zip file
        2. Delete temp directory
    '''
    try:
        cleanUpFromDatabase(TableList)
        mkttool.setDeleteDirectory(TEMP_FOLDER)
        mkttool.setDeleteFile("/tmp/DataMigration.zip")
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        db.session.close()
        raise e
    finally:
        pass

def getAllowedExcelFile(FileName):
    '''
        Check file extension to allow only excel format. 
    '''

    AllowFile   = set(['xls','xlsx'])
    Allowed     = True
    Msg         = ""
    if '.' in FileName and FileName.rsplit('.', 1)[1] in AllowFile:
        if not FileName[0].isdigit():
            Allowed = False
            Msg     = "Invalid File Name. File name start with number."
    else:
        Allowed = False
        Msg     = "Invalid file format. Allow excel file only."
    return Allowed, Msg

def getCSVFromExcel(File, ExcludeRow=""):
    '''
        Convert every sheet in excel to 
    '''
    FileName    = File.filename.replace(" ","")
    FileName    = '%s%s'%(TEMP_FOLDER,FileName)
    DestDir     = TEMP_CSV
    DictSheet   = mkttool.convertExcelToCSV(FileName, ExcludeRow = "2", DestDir = DestDir)

    return DictSheet

def getZipFile(Source, Dest = "/tmp/"):
    """
        Get zip file from TEMP_FOLDER
    """
    ListFile = mkttool.getListDirectory(Source, Mode = 2)
    NewListFile = []

    for file in ListFile:
        NewListFile.append("%s%s"%(Source,file))

    ZipFileName = "%s%s"%(Dest, "DataMigration.zip")
    File = mkttool.setZip(NewListFile, ZipFileName)

    return File

def validateDataLength(row, Table, TableColumns):
    """
        Validate datatype and length of data compare to model attributes
    """
    Comments    = {}
    for key, value in TableColumns.iteritems():
        Length      = value.get("Length")
        DataType    = value.get("Type")#Data Type from database
        FieldValue  = row.get(key)
        Message     = ""
        if FieldValue:
            # Check Data Type between data and database
            if DataType == "string":
                # Check maximum length of field
                if len(FieldValue) > Length:

                    Message = "Value %s is bigger than maximum length %s."%(FieldValue, Length)
            
            elif DataType == "numeric":
                if not mkttool.isFloat(FieldValue):
                    Message = "Value %s type is not Numeric." %FieldValue
                else:
                    if len(FieldValue) > Length:
                        Message = "Value %s is bigger than maximum length %s."%(FieldValue, Length)
            if Message:
                Comments.update({key: Message})
    return Comments

def cleanUpFromDatabase(TableList):
    """
        Clear data from database
    """
    CSVList = mkttool.getListDirectory(TEMP_CSV, Mode = 2)

    for file in CSVList:
        FileName = file.split(".")[0]

        if FileName in TableList:
            FilePath = '%s%s'%(TEMP_CSV,file)
            Table = mkttool.getClassModel(TableList.get(FileName, ""))

            if Table:
                TableName = Table.__tablename__
                with open(FilePath) as file:
                    DictCSV = mkttool.getDictCSV(file)
                    for row in DictCSV:
                        ID = row.get("ID","")
                        mktdb.deleteRecord(Table, [getattr(Table, "ID") == str(ID)])


@app.route("/Morakot/CheckMigrationData/", methods=['GET','POST'])
@app.route("/Morakot/API/CheckMigrationData/", methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def CheckMigrationDate():
    try:
        # print request.args
        # print request.form.get('Branch')
        Branch  =   request.form.get('Branch') if 'Branch' in request.form else mktuser.getBranch(session["ChangeBranch"]).ID
        BranchList = MKT_BRANCH.query
        if Branch == "ALL":
            Branch = []
            for b in BranchList:
                Branch.append(b.ID)
        else:
            Branch = Branch.split()

        if request.method == 'POST':
            print request.method
            Data    =   checkLoanData(Branch)

            Date            =   datetime.now()
            SystemDate      =   mktdate.getBankDate()
            CurrentTime     =   '%s:%s:%s'% (Date.hour, Date.minute, Date.second)

            
            StrIO = StringIO.StringIO()
            CSVWrite = csv.writer(StrIO)
            for l in Data.splitlines():
                CSVWrite.writerow(l.split(',')) 
        
            # We need to modify the response, so the first thing we 
            # need to do is create a response out of the CSV string
            response = make_response(StrIO.getvalue())
            # This is the key: Set the right header for the response
            # to be downloaded, instead of just printed on the browser
            response.headers['Cache-Control'] = 'no-cache'
            response.headers["Content-Disposition"] = "attachment; filename=%s_%s_%s.csv"%('_'.join(Branch),SystemDate,CurrentTime)
            response.headers["Content-type"] = "text/csv; charset=utf-8"
            return response
            return render_template('datamigration/migration.html', BranchList=BranchList)

        else:
            return render_template('datamigration/migration.html', BranchList=BranchList)


    except Exception as e:
        raise

def checkLoanData(Branch):
    try:
        DateTimeNow     =   mktdate.getDateTimeNow()
        DateTimeNow     =   ''

        BranchObj       =   MKT_BRANCH.query
        BranchList      =   []
        for b in BranchObj:
            BranchList.append(b.ID)

        AssetClassObj   =   MKT_ASSET_CLASS.query
        AssetClass      =   []
        for a in AssetClassObj:
            AssetClass.append(a.ID)

        AssetClassIncome    =   []
        AssetClassSuspend   =   []
        for ai in AssetClassObj:
            if ai.IncomeRecog == 'Y':
                AssetClassIncome.append(ai.ID)
            else:
                AssetClassSuspend.append(ai.ID)

        LoanProductObj  =   MKT_LOAN_PRODUCT.query
        LoanProduct     =   []
        for p in LoanProductObj:
            LoanProduct.append(p.ID)

        CurrencyObj     =   MKT_CURRENCY.query
        CurrencyList    =   []
        for c in CurrencyObj:
            CurrencyList.append(c.ID)

        OfficerObj  =   MKT_OFFICER.query
        OfficerList     =   []
        for o in OfficerObj:
            OfficerList.append(o.ID)

        File = VB_PATH+'Verify_Migration_%s.csv'%DateTimeNow
        Header = 'Branch,ID,ApprovedAmount,Disbursed,OutstandingAmount,Amount,AssetClass,Suspend,ValueDate,MaturityDate,NextRunDate,Account'
        # mkttool.setCreateFile(File)
        # mkttool.setWriteFile(File, Header, Overwirte=True)

        SystemDate = str(mktdate.getBankDate())
        LoanObj =   MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))
        Count   =   0
        TotalContract = LoanObj.count()
        ErrorMsgs = Header
        for l in LoanObj:
            Count   +=  1
            print 'Checking Loan Data [%s]'%Count,' \r',
            if Count == TotalContract: print 'Checking Loan Data [%s]'%Count

            ScheduleObj =   MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==l.ID).\
                            filter(MKT_REP_SCHEDULE.CollectionDate < SystemDate).\
                            order_by(MKT_REP_SCHEDULE.CollectionDate.desc()).first()
            SLoanBalance    =   0
            LoanBalance     =   l.Amount
            ErrorMsg    = '%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s'%(l.Branch,l.ID,l.ApprovedAmount,l.Disbursed,l.OutstandingAmount,l.Amount,l.AssetClass,l.Suspend,l.ValueDate,l.MaturityDate,l.NextRunDate,l.Account)
            IsError     = False

            if ScheduleObj:
                # check loan balance
                if LoanBalance !=ScheduleObj.Balance:
                    Diff = '[L:%s S:%s D:%s]'%(LoanBalance,ScheduleObj.Balance,LoanBalance-ScheduleObj.Balance)
                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Incorrect loan balance %s'%Diff),True

                SLoanBalance =  ScheduleObj.Balance
                PDObj = MKT_PAST_DUE.query.get('PD%s'%l.ID)
                PDPrincipal = 0
                if PDObj:
                    PDPrincipal = PDObj.TotPrincipalDue

                # check loan outstanding
                if l.OutstandingAmount != (PDPrincipal+SLoanBalance):
                    Diff = '[L:%s S:%s D:%s]'%(l.OutstandingAmount, (PDPrincipal+SLoanBalance),l.OutstandingAmount-(PDPrincipal+SLoanBalance))
                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Incorrect loan outstanding %s'%Diff),True

            # check loan customer
            CustomerObj =   MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID == l.ContractCustomerID).\
                            filter(MKT_CUSTOMER.Branch==l.Branch).first()

            if not CustomerObj:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Customer not found'),True
            # check loan draw down account
            AccountObj  =   MKT_ACCOUNT.query.filter(MKT_ACCOUNT.ID == l.Account).\
                            filter(MKT_CUSTOMER.Branch==l.Branch).first()
            if not AccountObj:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Draw down not found %s'%l.Account),True

            if AccountObj and AccountObj.Currency != l.Currency:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Draw down currency %s not match with loan %s'%(AccountObj.Currency,l.Currency)),True
            # check customer of account and customer of loan
            if AccountObj and CustomerObj:
                CustomerList = AccountObj.CustomerList
                if CustomerList != l.ContractCustomerID:
                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan and Account customer ID is not the same'),True

            # check loan contract ID
            if len(l.ID) != 13:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan ID lenght(%s) is not equal 13'%len(l.ID)),True

            if l.ID[:2] != 'LC':
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan ID is not start with LC'%len(l.ID)),True

            # check decimal place
            DecimalPlace = str(l.OutstandingAmount).split('.')
            if len(DecimalPlace) > 1 and len(str(int(DecimalPlace[1][::-1]))) > 2:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan Outstanding Decimal Place %s is more than 2'%DecimalPlace[1]),True

            DecimalPlace = str(l.Amount).split('.')
            if len(DecimalPlace) > 1 and len(str(int(DecimalPlace[1][::-1]))) > 2:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan Amount Decimal Place %s is more than 2'%DecimalPlace[1]),True

            DecimalPlace = str(l.Disbursed).split('.')
            if len(DecimalPlace) > 1 and len(str(int(DecimalPlace[1][::-1]))) > 2:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan Disbursed Decimal Place %s is more than 2'%DecimalPlace[1]),True

            DecimalPlace = str(l.ApprovedAmount).split('.')
            if len(DecimalPlace) > 1 and len(str(int(DecimalPlace[1][::-1]))) > 2:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan ApprovedAmount Decimal %s Place is more than 2'%DecimalPlace[1]),True
                
            if l.OutstandingAmount < l.Amount:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan Outstanding cannot less than Loan Balance'),True

            if l.OutstandingAmount > l.Disbursed:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan Outstanding cannot greater than Loan Disbursed Amount'),True

            if l.ApprovedAmount < l.Disbursed:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan Approved Amount cannot less than Loan Disbursed Amount'),True

            if l.LoanProduct not in LoanProduct:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan LoanProduct(%s) not found in System'%l.LoanProduct),True

            else:
                LPObj = LoanProductObj.get(l.LoanProduct)
                
                if LPObj.LNCategory != l.Category:
                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan Category and Product Category is not matched'),True
                
                Interest = float(l.InterestRate)
                if Interest > 28:
                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Interest Rate is greater than 18'),True

                InterestObj = MKT_INTEREST_RATE.query.get('%s%s'%(LPObj.Rule,l.Currency))
                if InterestObj:
                    InterestList = InterestObj.Rate.split()
                    if len(InterestList) == 2:
                        if Interest < float(InterestList[0]) or Interest > float(InterestList[1]):
                            ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Interest Rate %s not in range %s'%(Interest, InterestObj.Rate)),True
                    elif len(InterestList) == 1:
                        if Interest != float(InterestList[0]):
                            ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Interest Rate %s not in range %s'%(Interest, InterestObj.Rate)),True
                    

            CategoryObj = MKT_CATEGORY.query.get(l.Category)
            if not CategoryObj:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan Category not found in System'),True

            ErrorMsg,IsError = isErrorExist(l.LoanType,['R','N'],IsError,ErrorMsg,'Loan type incorrect')
            ErrorMsg,IsError = isErrorExist(l.Penalty,['Y','N'],IsError,ErrorMsg,'Loan Penalty incorrect')
            ErrorMsg,IsError = isErrorExist(l.Suspend,['Y','N'],IsError,ErrorMsg,'Loan Suspend incorrect')
            ErrorMsg,IsError = isErrorExist(l.DisbursedStat,['Y','N'],IsError,ErrorMsg,'Loan DisbursedStat incorrect')
            ErrorMsg,IsError = isErrorExist(l.MoreThanOneYear,['Y','N'],IsError,ErrorMsg,'Loan MoreThanOneYear incorrect')
            ErrorMsg,IsError = isErrorExist(l.Branch,BranchList,IsError,ErrorMsg,'Loan Branch incorrect')
            ErrorMsg,IsError = isErrorExist(l.Currency,CurrencyList,IsError,ErrorMsg,'Loan Currency not found in System')
            ErrorMsg,IsError = isErrorExist(l.AssetClass,AssetClass,IsError,ErrorMsg,'Loan AssetClass not found in System')
            ErrorMsg,IsError = isErrorExist(l.ContractOfficerID,OfficerList,IsError,ErrorMsg,'Officer %s not found in System'%l.ContractOfficerID)

            if l.FreqType == '1':
                if (int(l.Term) > 12 and l.MoreThanOneYear == 'N') or (int(l.Term) < 12 and l.MoreThanOneYear == 'Y'):
                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Term = %s not match MoreThanOneYear = %s'%(l.Term,l.MoreThanOneYear)),True
            
            if l.FreqType == '2':
                if (int(l.Term) > 52 and l.MoreThanOneYear == 'N') or (int(l.Term) < 52 and l.MoreThanOneYear == 'Y'):
                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Term = %s not match MoreThanOneYear = %s'%(l.Term,l.MoreThanOneYear)),True
            
            if l.FreqType == '3':
                if (int(l.Term) > 366 and l.MoreThanOneYear == 'N') or (int(l.Term) < 366 and l.MoreThanOneYear == 'Y'):
                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Term = %s not match MoreThanOneYear = %s'%(l.Term,l.MoreThanOneYear)),True
                
            if l.DisbursedStat != 'Y':
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'DisbursedStat not equal Y'),True

            AssetClassRecord = MKT_ASSET_CLASS_PRO.query.filter(MKT_ASSET_CLASS_PRO.ID==l.AssetClass).\
                                filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear==l.MoreThanOneYear).\
                                filter(MKT_ASSET_CLASS_PRO.LoanType==l.LoanType).first()
            # check asset class
            if AssetClassRecord:
                PDObj = MKT_PD_DATE.query.filter(MKT_PD_DATE.ID=='PD%s'%l.ID).\
                        filter(MKT_PD_DATE.NextRunDate==SystemDate).\
                        filter(or_(MKT_PD_DATE.OutPriAmount>0, MKT_PD_DATE.OutIntAmount>0)).\
                        order_by(cast(MKT_PD_DATE.NumDayDue,sqlalchemy.Integer).desc()).first()

                if PDObj:
                    if AssetClassRecord.OverdueTo == 'Up':
                        if float(AssetClassRecord.OverdueFr) > float(PDObj.NumDayDue):
                            ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'NumDayDue %s is incorrect for AssetClass %s'%(PDObj.NumDayDue,l.AssetClass)),True

                    elif float(AssetClassRecord.OverdueFr) > float(PDObj.NumDayDue) or float(AssetClassRecord.OverdueTo) < float(PDObj.NumDayDue):
                        ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'NumDayDue %s is incorrect for AssetClass %s'%(PDObj.NumDayDue,l.AssetClass)),True


            if (l.AssetClass in AssetClassIncome and l.Suspend != 'N') or (l.AssetClass in AssetClassSuspend and l.Suspend != 'Y'):
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Suspend or AssetClass class is incorrect'),True
            
            # if l.IRR:
            #     IRR = rescheduletools.getIRR(l.Disbursed,float(l.InterestRate),l.FreqType,l.Installment)
            #     if l.IRR != IRR[0]:
            #         ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'IRR is incorrect'),True

            ValueDate       = checkFormatDate(Value=l.ValueDate)
            MaturityDate    = checkFormatDate(Value=l.MaturityDate)
            NextRunDate     = checkFormatDate(Value=l.NextRunDate)
            if not (ValueDate[0] and MaturityDate[0] and NextRunDate[0]):
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Invalid format date YYYY-MM-DD'),True

            if l.ValueDate > l.MaturityDate:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Value Date cannot greater than Maturity Date'),True

            if l.ValueDate > SystemDate:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Value Date is greater than System Date'),True

            if l.NextRunDate != SystemDate:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'NextRunDate is not equal System Date'),True

            ScheduleObj =   MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==l.ID).\
                            order_by(MKT_REP_SCHEDULE.CollectionDate.desc()).first()
            if ScheduleObj:
                if ScheduleObj.CollectionDate != l.MaturityDate:
                    if ScheduleObj.CollectionDate > l.MaturityDate: 
                        Note = 'L:%s < S:%s'%(l.MaturityDate,ScheduleObj.CollectionDate) 
                    else:
                        Note =  'L:%s > S:%s'%(l.MaturityDate,ScheduleObj.CollectionDate)

                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Maturity Date of loan contact and schedule is not matched %s'%Note),True
            else:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Schedule not found'),True

            ScheduleObj =   db.session.query(
                                func.count(MKT_REP_SCHEDULE.LoanID).label('Count'),
                                func.sum(MKT_REP_SCHEDULE.Interest).label('Interest'),
                                func.sum(MKT_REP_SCHEDULE.Principal).label('Principal'),
                            ).filter(MKT_REP_SCHEDULE.LoanID==l.ID).\
                            group_by(MKT_REP_SCHEDULE.LoanID).first()

            if ScheduleObj:
                if int(l.Installment) != ScheduleObj.Count:
                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan Installment %s and schedule %s is not matched'%(l.Term, ScheduleObj.Count)),True
                
                if int(l.FreqType) == 1:
                    if int(l.Term) != ScheduleObj.Count:
                        ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Loan term %s and schedule %s is not matched'%(l.Term, ScheduleObj.Count)),True
                 
                if ScheduleObj.Interest != l.TotalInterest:
                    Diff = '[L:%s S:%s D:%s]'%(l.TotalInterest,ScheduleObj.Interest,ScheduleObj.Interest-l.TotalInterest)
                    ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Total Interest of loan contact and schedule is not matched %s'%(Diff)),True

                # if ScheduleObj.Principal != l.Disbursed:
                #     Diff = '[L:%s S:%s D:%s]'%(l.Disbursed,ScheduleObj.Principal,ScheduleObj.Principal-l.Disbursed)
                #     ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Total Principal schedule and disbursed amount is not matched %s'%(Diff)),True

            else:
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Schedule not found'),True

            ScheduleObj1 = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==l.ID)
            TotalPrincipal = 0
            for s in ScheduleObj1:
                TotalPrincipal += abs(s.Principal)
            if TotalPrincipal != l.Disbursed:
                Diff = '[L:%s S:%s D:%s]'%(l.Disbursed,TotalPrincipal,TotalPrincipal-l.Disbursed)
                ErrorMsg,IsError = '%s,%s'%(ErrorMsg,'Total Principal schedule and disbursed amount is not matched %s'%(Diff)),True

            if IsError:
                # mkttool.setWriteFile(File, ErrorMsg, Overwirte=False)
                ErrorMsgs = '%s\n%s'%(ErrorMsgs,ErrorMsg)
    
        ErrorMsgs = '%s\n%s'%(ErrorMsgs,checkSchedule(Branch))
        ErrorMsgs = '%s\n%s'%(ErrorMsgs,checkPD(Branch,SystemDate))
        ErrorMsgs = '%s\n%s'%(ErrorMsgs,checkCustomer(Branch))

        return ErrorMsgs
        # mkttool.setWriteFile(File, ErrorMsg, Overwirte=False)

    except Exception as e:
        raise 

def isErrorExist(Item,ListItem,Status,ErrorMsg,Msg):
    return ('%s,%s'%(ErrorMsg,Msg),True) if Item not in ListItem else (ErrorMsg,Status)


def checkSchedule(Branch):
    try:
        print 'Checking Repayment Schedule....'
        ErrorMsg = '%s,%s,%s,%s,%s,%s,%s'%('LoanID','CollectionDate','Principal','Interest','Charge','RepStatus','PaidAmount')
        Status = {
                    '0': 'not yet due',
                    '1': 'past due',
                    '2': 'partail paid',
                    '3': 'fully paid',
                    '4': 'fully paid but late'
                }
        SystemDate = str(mktdate.getBankDate())
        LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))
        for l in LoanObj:
            ScheduleObj =   MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==l.ID)

            if ScheduleObj:
                for s in ScheduleObj:
                    ErrorMsg1 = ''
                    IsError = False
                    PDDateObj = MKT_PD_DATE.query.filter(MKT_PD_DATE.DueDate==s.CollectionDate).\
                                filter(MKT_PD_DATE.ID=='PD%s'%l.ID).first()

                    if PDDateObj:
                        if s.RepStatus == '2':
                            TotPenaltyDue = PDDateObj.OutPriAmount+PDDateObj.OutIntAmount+PDDateObj.OutPenAmount+PDDateObj.OutChgAmount
                            TotalDueAmount = s.Principal+s.Interest+s.Charge+PDDateObj.PenaltyDue
                            if s.PartPaidAmt != (TotalDueAmount - TotPenaltyDue):
                                ErrorMsg1 = '%s, P %s %s, I %s %s, PE %s %s, C %s, Diff %s'%('Schedule or PD is incorrect',PDDateObj.OutPriAmount,PDDateObj.PrincipalDue ,PDDateObj.OutIntAmount,PDDateObj.InterestDue, PDDateObj.OutPenAmount,PDDateObj.PenaltyDue,PDDateObj.OutChgAmount,TotalDueAmount - TotPenaltyDue)
                                IsError = True
                                print l.ID, s.CollectionDate, s.Principal, PDDateObj.OutPriAmount, s.Interest, PDDateObj.OutIntAmount
                        
                        if s.RepStatus == '4':
                            if PDDateObj.OutPriAmount !=0 or PDDateObj.OutIntAmount !=0 or PDDateObj.OutPenAmount != 0 or PDDateObj.OutChgAmount != 0:
                                ErrorMsg1 = '%s, P %s, I %s, PE %s, C %s'%('Schedule or PD is incorrect',PDDateObj.OutPriAmount,PDDateObj.OutIntAmount,PDDateObj.OutPenAmount,PDDateObj.OutChgAmount)
                                # ErrorMsg1 = '%s'%('Schedule or PD is incorrect')
                                IsError = True
                                print l.ID, s.CollectionDate, s.Principal, PDDateObj.OutPriAmount, s.Interest, PDDateObj.OutIntAmount
                        
                        if s.RepStatus == '1':
                            if s.Charge != PDDateObj.OutChgAmount or s.Principal != PDDateObj.OutPriAmount or s.Interest != PDDateObj.OutIntAmount:
                                ErrorMsg1 = '%s, P %s, I %s, PE %s, C %s'%('Schedule or PD is incorrect',PDDateObj.OutPriAmount,PDDateObj.OutIntAmount,PDDateObj.OutPenAmount,PDDateObj.OutChgAmount)
                                # ErrorMsg1 = '%s'%('Schedule or PD is incorrect')
                                IsError = True
                                print l.ID, s.CollectionDate, s.Principal, PDDateObj.OutPriAmount, s.Interest, PDDateObj.OutIntAmount
                        
                        if s.RepStatus in ['1','2']:
                            if int(PDDateObj.NumDayDue) != mktdate.getDateDiff(s.CollectionDate,SystemDate):
                                ErrorMsg1 = '%s,%s'%(ErrorMsg1,'NumDayDue is incorrect')
                                IsError = True

                    else:
                        if s.RepStatus in ['1','2','4']:
                            print l.ID, s.CollectionDate, 'no pd 2'
                            ErrorMsg1 = '%s'%('PD is not found')
                            IsError = True
                    
                    if IsError == True:
                        ErrorMsg = '%s\n%s,%s,%s,%s,%s,%s,%s,%s,%s'%(ErrorMsg,l.Branch,l.ID,s.CollectionDate,s.Principal,s.Interest,s.Charge,s.RepStatus,s.PartPaidAmt,ErrorMsg1)

            else:
                print l.ID, 'Schedule not found'
                IsError = True
                ErrorMsg = '%s,\n%s,%s'%(ErrorMsg,l.ID,'Loan has no schedule')

        return ErrorMsg

    except Exception as e:
        raise

def checkFormatDate(**kwargs):
    if kwargs.get('Value'):
        if mktdate.isDateISO(kwargs.get('Value')):

            return True,""
        else:
            return False,"Invalid format date YYYY-MM-DD."
    else:
        return True,""

def checkPD(Branch,SystemDate):
    try:
        print 'Checking Past Due record ...'
        SystemDate = mktdate.getBankDate()
        ErrorMsg = '%s,%s,%s,%s,%s,%s,%s'%('LoanID','CollectionDate','Principal','Interest','Charge','RepStatus','PaidAmount')
        PastDueObj = MKT_PAST_DUE.query.filter(MKT_PAST_DUE.Branch.in_(Branch))
        ErrorMsg1 = ''
        for pd in PastDueObj:
            IsError = False
            PDDateObj = db.session.query(
                            MKT_PD_DATE.ID,
                            MKT_PD_DATE.Branch,
                            func.sum(MKT_PD_DATE.OutAmount).label('TOutAmount'),
                            func.sum(MKT_PD_DATE.OutIntAmount).label('TInterest'),
                            func.sum(MKT_PD_DATE.OutPriAmount).label('TPrincipal'),
                            func.sum(MKT_PD_DATE.OutPenAmount).label('TPenalty'),
                            func.sum(MKT_PD_DATE.OutChgAmount).label('TCharge'),
                        ).filter(MKT_PD_DATE.ID==pd.ID).\
                        group_by(MKT_PD_DATE.ID,MKT_PD_DATE.Branch).first()
            if PDDateObj:
                if pd.TotODAmount != PDDateObj.TOutAmount or pd.TotPrincipalDue!= PDDateObj.TPrincipal or\
                    pd.TotInterestDue != PDDateObj.TInterest or pd.TotPenaltyDue != PDDateObj.TPenalty or\
                    pd.TotChargeDue != PDDateObj.TCharge:
                    ErrorMsg1 = '%s\n%s, T %s %s, P %s %s, I %s %s, PE %s %s, C %s %s'%(ErrorMsg1,'Total PD is incorrect',
                                pd.TotODAmount, PDDateObj.TOutAmount, 
                                pd.TotPrincipalDue, PDDateObj.TPrincipal,
                                pd.TotInterestDue, PDDateObj.TInterest,
                                pd.TotPenaltyDue, PDDateObj.TPenalty,
                                pd.TotChargeDue, PDDateObj.TCharge)
                    
            else:
                print pd.ID, 'PD Date not found'
                ErrorMsg1 = '%s\n%s,%s,%s,%s,%s,%s,%s'%(ErrorMsg1,pd.Branch,pd.ID,pd.TotODAmount,pd.TotPrincipalDue,pd.TotInterestDue,pd.TotPenaltyDue,pd.TotChargeDue)
                ErrorMsg1 = '%s,%s'%(ErrorMsg1,'PD Date not found')

            if pd.ID[:2] != 'PD':
                ErrorMsg1 = '%s,%s'%(ErrorMsg1,'PD not start with PD')

            ErrorMsg1 = '\n%s'%(ErrorMsg1)
            PDDObj = MKT_PD_DATE.query.filter(MKT_PD_DATE.ID==pd.ID)

            if PDDObj:
                LoanContractObj     =   MKT_LOAN_CONTRACT.query.get(pd.LoanID)
                Product             =   MKT_LOAN_PRODUCT.query.get(LoanContractObj.LoanProduct)
                InterestDayBasis    =   int(Product.IntDayBasis)

                for p in PDDObj:
                    DueDate  =  checkFormatDate(Value=p.DueDate)
                    if not DueDate[0]:
                        ErrorMsg1 = '%s,%s'%(ErrorMsg1,DueDate[0])
                    else:
                        Days = rescheduletools.getNumberOfDay(InterestDayBasis,datetime.strptime(p.DueDate, "%Y-%m-%d").date(),SystemDate)
                        # Days = mktdate.getDatediff360(datetime.strptime(p.DueDate, "%Y-%m-%d").date(),SystemDate)
                        if int(Days) != int(p.NumDayDue):
                            ErrorMsg1 = '%s,%s'%(ErrorMsg1,'NumDayDue %s is incorrect for %s DueDate %s it should %s'%(p.NumDayDue,pd.ID,p.DueDate,Days))

        return '%s%s'%(ErrorMsg,ErrorMsg1) if ErrorMsg1 else ''


    except Exception as e:
        raise e

def checkCustomer(Branch):
    try:
        print 'Checking Customer....'
        ErrorMsg = '%s,%s,%s,%s,%s'%('ID','FirstName','LastName','Gender','DateOfBirth')
        CustomerObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.Branch.in_(Branch))
        for c in CustomerObj:
            IsError = False
            ErrorMsg1 =''
            if c.ID[:2]!='CU':
                ErrorMsg1,IsError = '%s,%s'%(ErrorMsg,'Customer ID %s not start with CU'%c.ID),True
            
            if (not c.FirstNameEn) or (not c.LastNameEn):
                ErrorMsg1,IsError = '%s,%s'%(ErrorMsg,'Customer LastNameEn and FirstNameEn cannot blank'%c.ID),True

            DateOfBirth  = checkFormatDate(Value=c.DateOfBirth)
            if not DateOfBirth[0]:
                ErrorMsg1,IsError = '%s,%s'%(ErrorMsg,'Customer DateOfBirth is incorrect'%c.DateOfBirth),True

            if c.IssueDate:
                IssueDate  = checkFormatDate(Value=c.IssueDate)
                if not IssueDate[0]:
                    ErrorMsg1,IsError = '%s,%s'%(ErrorMsg,'IssueDate is incorrect'%c.IssueDate),True

            if c.ExpiryDate:
                ExpiryDate  = checkFormatDate(Value=c.ExpiryDate)
                if not ExpiryDate[0]:
                    ErrorMsg1,IsError = '%s,%s'%(ErrorMsg,'ExpiryDate is incorrect'%c.ExpiryDate),True
            
            if not c.IDType:
                ErrorMsg1,IsError = '%s,%s'%(ErrorMsg,'Customer IDType cannot empty'),True

            ErrorMsg1,IsError = isErrorExist(c.Salutation,['Mr','Miss','Mrs'],IsError,ErrorMsg1,'Incorrect Salutation')


            if IsError:
                ErrorMsg = '%s,\n%s,%s'%(ErrorMsg,'%s,%s,%s,%s,%s'%(c.ID,c.FirstNameEn,c.LastNameEn,c.Gender,c.DateOfBirth),ErrorMsg1)

        
    except Exception as e:
        raise e