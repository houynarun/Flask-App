# -*- coding: utf-8 -*-
from app.mktcore.wtfimports import *
from .models import *
from app.mktcore.imports import *
from app.CustomerActType.models import *
from app.Customer.models 		import *
from flask 						import g

def loadCustomerActivityType():
	return MKT_CUSTOMER_ACT_TYPE.query

# @app.route('/Morakot/RemoteLoadCustomer/')
# @app.route('/Morakot/API/RemoteLoadCustomer/')
# def loadCustomer():
# 	Action 			=	request.args.get('action')
# 	search 			=	request.args.get('q')
# 	return MKT_CUSTOMER.query

def loadCustomerAct():
	RecordID 		= ''
	CustomerID 		= request.form.get('Customer')
	if request.method == 'GET':
		RecordID = g.formID	
	ListCustomerAct = []
	ObjCustomerAct 	= []
	ObjCustomerActOne = MKT_CUSTOMER_ACT.query.get(RecordID)
	if ObjCustomerActOne:
		ListCustomerAct.append(ObjCustomerActOne.CustomerAct)
		ObjCustomerAct = MKT_CUSTOMER_ACT.query.filter(MKT_CUSTOMER_ACT.ID.in_(ListCustomerAct)).\
												filter(MKT_CUSTOMER_ACT.Customer==ObjCustomerActOne.Customer)
	else:
		ObjCustomerAct = MKT_CUSTOMER_ACT.query.filter(MKT_CUSTOMER_ACT.Customer==CustomerID,
												   MKT_CUSTOMER_ACT.AcStatus=='N').\
											filter(or_(MKT_CUSTOMER_ACT.CustomerAct=='',
													MKT_CUSTOMER_ACT.CustomerAct==None)).all()

	return ObjCustomerAct


@app.route('/Morakot/HotSelectToCustomerAct')
@app.route('/Morakot/API/HotSelectToCustomerAct')
def hotSelectToCustomerAct():
	CustomerID 		= request.args.get('CustomerID','')
	ObjCustomerAct = MKT_CUSTOMER_ACT.query.filter(MKT_CUSTOMER_ACT.Customer==CustomerID,
												   MKT_CUSTOMER_ACT.AcStatus=='N').\
											filter(or_(MKT_CUSTOMER_ACT.CustomerAct=='',
													MKT_CUSTOMER_ACT.CustomerAct==None)).all()
	Dict = {}
	for row in  ObjCustomerAct:
		Dict[row.ID] = '%s - %s'%(row.ID,row.ActivityDescr[0:30] if len(row.ActivityDescr)<30 else row.ActivityDescr[0:30] + '.....'  )

	return jsonify(results=Dict)


def getCountCustomerAct(CustomerID):
	Count = MKT_CUSTOMER_ACT.filter(MKT_CUSTOMER_ACT.Customer==CustomerID).count()


@app.route('/Morakot/HotCustomerAct')
@app.route('/Morakot/API/HotCustomerAct')
def hotCustomerAct():
	CustomerAct = request.args.get('CustomerAct')
	ObjCustomerAct = MKT_CUSTOMER_ACT.query.get(CustomerAct)
	Customer = ''
	CustomerDesc = ''
	ActivityType = ''
	FollowUpDate = ''
	ActivityTypeDesc = ''
	CountActNo 	 = MKT_CUSTOMER_ACT.query.filter(MKT_CUSTOMER_ACT.CustomerAct==CustomerAct).count()+1
	if ObjCustomerAct:
		ObjCustomer = MKT_CUSTOMER.query.get(ObjCustomerAct.Customer)
		ObjCustomerActType = MKT_CUSTOMER_ACT_TYPE.query.get(ObjCustomerAct.ActivityType)
		Customer 	= ObjCustomer.ID
		CustomerDesc = ObjCustomer.LastNameEn + " - " + ObjCustomer.FirstNameEn
		ActivityType = ObjCustomerActType.ID
		ActivityTypeDesc = ObjCustomerActType.Description
		FollowUpDate = ObjCustomerAct.FollowUpDate


	return jsonify(Customer=Customer,CountActNo=CountActNo,CustomerDesc=CustomerDesc,ActivityType=ActivityType,ActivityTypeDesc=ActivityTypeDesc,FollowUpDate=FollowUpDate)


@app.route('/Morakot/ClearActNo')
def hotClearActNo():
	ClearActNo = ''
	return jsonify(ClearActNo=ClearActNo)


class FRM_CUSTOMER_ACT(exform):
	Customer 		=	RemoteTextField(requiredlabel('Customer','*'),dicRemote={'url':'/Morakot/CustomerID'},validators=[validators.Required()])
	# Customer 		=	QuerySelectField(requiredlabel('Customer','*'),query_factory=loadCustomer, 
	# 						 get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
	# 						 allow_blank=True,
	# 						 blank_text='',
	# 						 validators=[validators.Required()])

	FollowUpDate 	= 	DateField(requiredlabel('Follow Up Date','*'), validators=[validators.Required()])
	ActivityType 	= 	QuerySelectField(requiredlabel('Activity Type','*'),query_factory=loadCustomerActivityType, 
							 get_label=lambda a: a.ID + " - " + a.Description,
							 allow_blank=True,
							 blank_text='',
							 validators=[validators.Required()])
	ActivityDescr 	= 	TextAreaField('Activity Description')
	AcStatus 	  	= 	SelectField('Activity Status',
							 choices=[('N','Not Completed'),('Y', 'Completed')],
							 coerce=str)

	@staticmethod
	def listField():
		ListField = ['Customer','FollowUpDate','ActivityType','ActivityDescr','AcStatus']
		return ListField,["ActNo*EQ*0"]



class FRM_UPDATE_CUSTOMER_ACT(exform):
	Customer 		=	RemoteTextField(requiredlabel('Customer','*'),dicRemote={'url':'/Morakot/CustomerID'},validators=[validators.Required()])

	CustomerAct 	=	QuerySelectField('Customer Activity',query_factory=loadCustomerAct, 
							 get_label=lambda a: a.ID + " - " +a.ActivityDescr[0:30],
							 allow_blank=True,
							 blank_text='--None--',
							 validators=[validators.Required()])

	ActivityType 	= 	QuerySelectField('Activity Type',query_factory=loadCustomerActivityType, 
							 get_label=lambda a: a.ID + " - " + a.Description,
							 allow_blank=True,
							 blank_text='',
							 validators=[validators.Required()])
	DateOfActivity 	= 	DateField(requiredlabel("Date Of Activity", "*"), validators=[validators.Required()])
	AcStatus 	 	= 	SelectField('Activity Status',
							 choices=[('N','Not Completed'),('Y', 'Completed')],
							 coerce=str)
	RootCause 		=	SelectField('Root Cause',
							 choices=[('__None','--None--'),('1', 'Disable Loan'),('2','Bad Character'),('3','Financial Issue')],
							 coerce=str)
	Comment			=	TextAreaField('Comment')
	FollowUpDate 	= 	DateField('Follow Up Date',description='1-Next Follow Up')
	ActivityDescr 	= 	TextAreaField('Activity Description',description='1-Next Follow Up')
	ActNo			=	TextField('#Activity',description='1-Next Follow Up')


	def validate_FollowUpDate(form,field):
		AcStatus = form.AcStatus.data
		FollowUpDate = field.data
		if AcStatus == 'Y':
			if FollowUpDate:
				field.errors[:] = ''
				raise ValidationError('Not allow to set next follow up date!')
			else:
				field.errors[:] = ''
		else:
			if not FollowUpDate:
				field.errors[:] = ''
				raise ValidationError('This field is required.')

	def validate_ActivityDescr(form,field):
		AcStatus 		= form.AcStatus.data
		ActivityDescr 	= field.data
		if AcStatus == 'N' and ActivityDescr=='':
			raise ValidationError('This field is required.')
	@staticmethod
	def listField():
		ListField = ['Customer','DateOfActivity','RootCause','Comment','ActivityDescr']
		return ListField,["ActNo*NE*0"]


	@staticmethod
	def setDisable():
		return ['ActNo','ActivityType']

	@staticmethod
	def hotField():
		hotfield = []
		fielddisplay = "$('#DateOfActivity').val(data.FollowUpDate);$('#ActNo').val(data.CountActNo)"
		fielddisplay += ";$('#ActivityType').select2('data', {'id':data.ActivityType,'text':data.ActivityTypeDesc})"
		varname = "CustomerAct:$('#CustomerAct').val()"
		fun = ['CustomerAct', varname, fielddisplay,'/Morakot/HotCustomerAct','change']
		hotfield.append(fun)


		fielddisplay = "$('#ActNo').val(data.ClearActNo)"
		varname = "CustomerAct:$('#CustomerAct').val()"
		fun = ['Customer', varname, fielddisplay,'/Morakot/ClearActNo','change']
		hotfield.append(fun)
		return hotfield

	@staticmethod
	def redirectAfterInsert():
		AcStatus = request.form['AcStatus']
		ID 		 = request.form['ID']
		ObjCustomerAct = MKT_CUSTOMER_ACT.query.get(ID)
		if ObjCustomerAct:
			# GetCountCustomerAct = getCountCustomerAct()
			# ObjCustomerAct.AcStatus = AcStatus
			CustomerAct = ObjCustomerAct.CustomerAct
			ObjCustomerAct = MKT_CUSTOMER_ACT.query.get(CustomerAct)
			if ObjCustomerAct:
				ObjCustomerAct.AcStatus = AcStatus #Update main customer status when user choose complete or not complete.
				db.session.add(ObjCustomerAct)
				db.session.commit()

		return None


	@staticmethod
	def hotSelectField():
		hotfield = []
		fielddisplay = "CustomerAct"
		varname = "CustomerID:$('#Customer').val()"
		fun = ['Customer', varname, fielddisplay,'/Morakot/HotSelectToCustomerAct','click']
		hotfield.append(fun)

		return hotfield


