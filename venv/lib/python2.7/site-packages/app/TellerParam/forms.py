from app.mktcore.wtfimports import *
from .models import *
import time

from app.AccProduct.models 	import *
from app.Transaction.models import *
from app.Category.models 	import *

@app.route('/Morakot/TellerParamAccPro', methods=['GET'])
def getTellerParamAccPro():
	AccPro = request.args.get('AccPro')
	Category = ""
	if AccPro != "__None":
		row = MKT_ACC_PRODUCT.query.get(str(AccPro))
		if row:
			Category = row.CategoryList

	return jsonify(Category=Category)


def loadAccProduct():
	return MKT_ACC_PRODUCT.query

def loadTransaction():
	return MKT_TRANSACTION.query

class FRM_TELLER_PARAM(exform):

	TillAccPro 		= QuerySelectField(requiredlabel('Till Account Product', '*'),
									query_factory=loadAccProduct,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'',
									validators=[validators.Required()])

	TillCategory 	= TextField(requiredlabel("Till Category", "*"), [validators.Required()])
	
	VaultAccPro 	= QuerySelectField(requiredlabel('Vault Account Product', '*'),
									query_factory=loadAccProduct,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'',
									validators=[validators.Required()])

	VaultCategory 	= TextField(requiredlabel("Vault Category", "*"), [validators.Required()])

	WalletAccPro 	= QuerySelectField('Wallet Account Product',
									query_factory=loadAccProduct,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'')
	WalletCategory 	= TextField("Wallet Category")	

	SuspendAccPro 	= QuerySelectField('Suspend Account Product',
									query_factory=loadAccProduct,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'')
	SuspendCategory 	= TextField("Suspend Category")	

	OpenTillTran 	= QuerySelectField(requiredlabel('Open Till Transaction Code','*'),
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'',
									validators=[validators.Required()])

	CloseTillTran 	= QuerySelectField(requiredlabel('Close Till Transaction Code','*'),
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'',
									validators=[validators.Required()])

	DepTransaction 	= QuerySelectField(requiredlabel('Deposit Transaction Code','*'),
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'',
									validators=[validators.Required()])

	WitTransaction 	= QuerySelectField(requiredlabel('Withdrawal Transaction Code','*'),
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'',
									validators=[validators.Required()])

	TTransaction 	= QuerySelectField(requiredlabel('Till To Till Transaction Code','*'),
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'',
									validators=[validators.Required()])

	RevTransaction 	= QuerySelectField(requiredlabel('Reverse Transaction Code','*'),
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'',
									validators=[validators.Required()])
	
	IncomeTran 		= QuerySelectField('Teller Income Tran',
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'')

	ExpenseTran 	= QuerySelectField('Teller Expense Tran',
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'')

	IncomeBookingTran	= QuerySelectField('Income Booking Tran',
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'')

	ExpenseBookingTran	= QuerySelectField('Expense Booking Tran',
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'')

	UnBalance		= SelectField(requiredlabel('Allow Till Closing with UnBalanced',"*"),
									choices=[('',''),('N', 'No'),('Y', 'Yes')],
									coerce=str,
									validators=[validators.Required()])

	SurplusAccPro 	= QuerySelectField('Till Surplus Account Product',
									query_factory=loadAccProduct,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'')
	SurplusCategory = TextField("Surplus Category")

	ShortageAccPro 	= QuerySelectField('Till Shortage Account Product',
									query_factory=loadAccProduct,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'')
	ShortageCategory = TextField("Shortage Category")

	def validate_SurplusCategory(form, field):
		
		SurplusCategory = form.SurplusCategory.data
		if SurplusCategory:
			CategoryObj = MKT_CATEGORY.query.get(SurplusCategory)
			if CategoryObj:
				BalanceType = str(CategoryObj.BalanceType)
				if BalanceType == "Dr":
					raise ValidationError("Surplus category incorrent balance type.")

	def validate_ShortageCategory(form, field):

		ShortageCategory = form.ShortageCategory.data
		if ShortageCategory:
			CategoryObj = MKT_CATEGORY.query.get(ShortageCategory)
			if CategoryObj:
				BalanceType = str(CategoryObj.BalanceType)
				if BalanceType == "Cr":
					raise ValidationError("Shortage category incorrent balance type.")
	@staticmethod
	def setWidth():
		control_list = [('TillCategory', len3),
						('OpenTillTran', len3),
						('CloseTillTran', len3),
						('VaultCategory', len3),
						('DepTransaction', len3),
						('WitTransaction', len3),
						('TTransaction'	, len3),
						('UnBalance'	, len1),
						('SurplusCategory',len3),
						('ShortageCategory',len3),
						('WalletCategory',len3),
						('SuspendCategory',len3)
						]

		return control_list

	@staticmethod
	def setDisable():
		return [('TillCategory'),('VaultCategory'),('SurplusCategory'),('ShortageCategory'),('WalletCategory'),('SuspendCategory')]

	@staticmethod
	def beforeInsert():

		ParamID = str(request.form['ID'])
		if ParamID.upper() !="SYSTEM":
			raise ValidationError("Must always use SYSTEM as ID")
			return False

		elif ParamID =='system':
			raise ValidationError("ID is Capital letter. Example SYSTEM")
			return False



		return True

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay = "$('#TillCategory').val(data.Category)"
		varname = "AccPro:$('#TillAccPro').val()"
		fun = ["TillAccPro", varname, fielddisplay, "/Morakot/TellerParamAccPro", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#SurplusCategory').val(data.Category)"
		varname = "AccPro:$('#SurplusAccPro').val()"
		fun = ["SurplusAccPro", varname, fielddisplay, "/Morakot/TellerParamAccPro", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#ShortageCategory').val(data.Category)"
		varname = "AccPro:$('#ShortageAccPro').val()"
		fun = ["ShortageAccPro", varname, fielddisplay, "/Morakot/TellerParamAccPro", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#VaultCategory').val(data.Category)"
		varname = "AccPro:$('#VaultAccPro').val()"
		fun = ["VaultAccPro", varname, fielddisplay, "/Morakot/TellerParamAccPro", "change"]
		hotfield.append(fun)

		
		fielddisplay = "$('#WalletCategory').val(data.Category)"
		varname = "AccPro:$('#WalletAccPro').val()"
		fun = ["WalletAccPro", varname, fielddisplay, "/Morakot/TellerParamAccPro", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#SuspendCategory').val(data.Category)"
		varname = "AccPro:$('#SuspendAccPro').val()"
		fun = ["SuspendAccPro", varname, fielddisplay, "/Morakot/TellerParamAccPro", "change"]
		hotfield.append(fun)

		return hotfield