# -*- coding: utf-8 -*-
from app.mktcore.imports 		import *
from flask import jsonify, redirect, flash, render_template, url_for, request
import app.tools.mktaudit 		as mktaudit
import app.tools.mkttool 		as mkttool
import app.tools.mktdate		as mktdate
import app.tools.user 			as mktuser
import json

from .utils import render_listitem, toListFromObj

from app.Module.models 			import *
from app.Menu.models 			import *

AuditTrial = {  'Status'		: 	"AUTH",
				'Curr' 			: 	"0",
				'Inputter' 		:	"System",
				'Createdon' 	: 	mktdate.getDateTimeNow(),
				'Authorizer'	:   "System",
				'Authorizeon'	: 	mktdate.getDateTimeNow(),
				'Branch'		:	'HO'}

# @app.route("/Morakot/GetExistingMenu", methods=['GET','POST'])
def getExistingMenu(MenuID):

	# print "MENU ID iS ",MenuID
	MenuItemObj = db.session.query(
									MKT_MENU_ITEM.ItemID,
								    MKT_MENU_ITEM.ItemDesc,
								    MKT_MENU_ITEM.Form,
								    MKT_MENU.ID,
								    MKT_MENU_ITEM.Parents,
								    MKT_MENU_ITEM.Icon,
								    MKT_MENU_ITEM.Active,
								    MKT_MENU_ITEM.ID
								   ).\
							join(MKT_MENU, MKT_MENU.ID==MKT_MENU_ITEM.ID).\
							filter(MKT_MENU.ID==MenuID).\
							order_by(MKT_MENU_ITEM.ItemID.asc()).\
							all()
	if not MenuItemObj:
		MenuItemObj = db.session.query(
										MKT_MENU_ITEM_HIST.ItemID,
									    MKT_MENU_ITEM_HIST.ItemDesc,
									    MKT_MENU_ITEM_HIST.Form,
									    MKT_MENU_HIST.ID,
									    MKT_MENU_ITEM_HIST.Parents,
									    MKT_MENU_ITEM_HIST.Icon,
									    MKT_MENU_ITEM_HIST.Active,
									    MKT_MENU_ITEM_HIST.ID
									   ).\
								join(MKT_MENU_HIST, MKT_MENU_HIST.ID==MKT_MENU_ITEM_HIST.ID).\
								filter(MKT_MENU_HIST.ID==MenuID).\
								order_by(MKT_MENU_ITEM_HIST.ItemID.asc()).\
								all()

	NewList		  	= toListFromObj(MenuItemObj,0,7) # Convert query result type: list of tuples to list of list. from starting element to end element

	if MenuItemObj:

		ordered_list = render_listitem(NewList)

		return ordered_list

	return ''


@app.route("/Morakot/MenuBuilder", methods=['GET','POST'])
@app.route("/Morakot/MenuBuilder/", methods=['GET','POST'])
# @checkLogOutSession
# @checkLogOutTime
def MenuBuilder():

	classToolbar 	= mkttool.clsToolbar()
	li_html 		= classToolbar.getToolbarevent("Cancel")

	return render_template('menubuilder/index.html',
							li_html=li_html)

def setMenuBuilder(**kwargs):
	try:
		Opeartion 	= kwargs['Opeartion']
		# print kwargs
		if Opeartion == "New":
			return setNewMenu(**kwargs)

		elif Opeartion == "Edit":
			return setEditMenu(**kwargs)

		elif Opeartion == "Delete":
			return setDeleteMenu(**kwargs)
		else:
			return jsonify(msg="Opeation type not found"),400

	except Exception as e:
		raise
	else:
		pass
	finally:
		pass

def setNewMenu(**kwargs):
	""" Usage for create new menu """
	try:
		MenuID 		= str(kwargs['MenuID'])
		MenuName 	= kwargs['MenuName']
		MenuItem 	= kwargs['MenuItem']
		# print 'MenuID :',MenuID
		# print 'MenuName :',MenuName
		# print 'MenuItem :',MenuItem
		# # print ''
		# print "MENU ID IN EDIT MENU IS %s and type: %s"%(MenuID,type(MenuID))
		MenuObj = MKT_MENU.query.get(MenuID)
		if MenuObj:
			# flash("Menu ID is already exists: %s" %MenuID)
			msg = "Menu ID is already exists: %s" %MenuID
			return jsonify(error=True,msg=msg), 400
		else:
			Dict = {'ID':MenuID,
					'Description':MenuName}
			Dict.update(AuditTrial)
			ObjInsert 		= MKT_MENU(**Dict)
			db.session.add(ObjInsert)
		if not MenuItem:
			return jsonify(error=True,msg="Menu item is required"), 400
		else:
			for row in MenuItem:
				row = dict(row)

				# print "ItemID is ", len(row.get('ItemID'));
				# print "Active Item is : ",row.get('Active')
				Dict = {"ID"        : MenuID,
						"ItemID"    : row.get('ItemID'),
						"ItemDesc"  : row.get('ItemDesc'),
						"Icon"      : row.get('Icon'),
						"Form"      : row.get('Form'),
						"Parents"   : row.get('Parents'),
						"Active"    : row.get('Active','Y')}
				# print "Dict: ", Dict
				Dict.update(AuditTrial)
				ObjInsert 		= MKT_MENU_ITEM(**Dict)
				db.session.add(ObjInsert)
			db.session.commit()
			flash("Record was added successfully, record id: %s" %MenuID)
			# return jsonify(msg="Menu was added successfully"), 200
			return True
	except Exception as e:
		raise
	else:
		pass
	finally:
		pass

def setEditMenu(**kwargs):
	""" Usage for update menu """
	try:
		MenuID 		= kwargs['MenuID']
		MenuName 	= kwargs['MenuName']
		MenuItem 	= kwargs['MenuItem']

		MenuObj = MKT_MENU.query.get(MenuID)
		if MenuObj:
			MenuObj.ID = MenuID
			MenuObj.Description = MenuName
			db.session.add(MenuObj)
			if not MenuItem:
				return jsonify(error=True,msg='Menu item is required'), 400
			else:
				MenuItemObj 	= db.session.query(MKT_MENU_ITEM.ID).filter(MKT_MENU_ITEM.ID == MenuID).delete(synchronize_session='fetch')
				for row in MenuItem:
					row = dict(row)
					# print "Length ITEMID %s on edited: %s"%(row.get('ItemID'),len(row.get('ItemID')));
					# print "Active Item edited is : ",row.get('Active')
					Dict = {"ID"        : MenuID,
							"ItemID"    : row.get('ItemID'),
							"ItemDesc"  : row.get('ItemDesc'),
							"Icon"      : row.get('Icon'),
							"Form"      : row.get('Form'),
							"Parents"   : row.get('Parents'),
							"Active"    : row.get('Active','Y')}
					Dict.update(AuditTrial)
					ObjInsert 		= MKT_MENU_ITEM(**Dict)
					db.session.add(ObjInsert)
				db.session.commit()
				flash("Record was updated successfully, record id: %s" %MenuID)
				return True
		else:
			return False
	except Exception as e:
		raise
	else:
		pass
	finally:
		pass

def setDeleteMenu(**kwargs):
	""" Usage for delete menu by ID """
	try:
		MenuID 		= kwargs['MenuID']
		MenuName 	= kwargs['MenuName']
		MenuItem 	= kwargs['MenuItem']
		MenuObj 		= db.session.query(MKT_MENU.ID).filter(MKT_MENU.ID == MenuID)
		MenuItemObj 	= db.session.query(MKT_MENU_ITEM.ID).filter(MKT_MENU_ITEM.ID == MenuID)
		if MenuObj.first() and MenuItemObj.first():
			MenuObj.delete(synchronize_session='fetch')
			MenuItemObj.delete(synchronize_session='fetch')
			db.session.commit()
			flash("Record was deleted successfully, record id: %s" %MenuID)
			return jsonify(msg="Menu was deleted successfully"), 200
		else:
			return jsonify(msg='Menu not found for delete.'), 400
	except Exception as e:
		raise
	else:
		pass
	finally:
		pass

def isInUsed(MenuID):
	check = False
	msg = '<b>Unable to delete Menu!</b> Menu ID: %s is currentyly in used by '%MenuID

	if MenuID=='99':
		check = True
		msg   = '<b>Unable to delete Adminstrator Menu</b>'
		return check,msg

	MenuObj = MKT_USER.query.filter_by(Menu=MenuID).all()
	if MenuObj:
		check = True
		for item in MenuObj:
			msg += item.ID+' '
	return check,msg



@app.route("/Morakot/MenuBuilder/ListLive/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def listMenu():
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/MenuBuilder/","ListLive")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	classToolbar = mkttool.clsToolbar()
	li_html 	 = classToolbar.getToolbarevent("Cancel")
	MENU 		 = MKT_MENU.query.all()
	return render_template('menubuilder/listlive.html', menu = MENU, li_html=li_html)

@app.route("/Morakot/MenuBuilder/ListHist/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def listHistMenu():
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/MenuBuilder/","ListHist")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	classToolbar = mkttool.clsToolbar()
	li_html 	 = classToolbar.getToolbarevent("Cancel")
	MENU 		 = MKT_MENU_HIST.query.all()
	return render_template('menubuilder/listhist.html', menu = MENU, li_html=li_html, is_hist = True)

@app.route("/Morakot/MenuBuilder/Edit/<ID>", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def editMenu(ID):

	classToolbar = mkttool.clsToolbar()
	li_html 	 = classToolbar.getToolbarevent("Cancel")
	
	if request.method == 'POST':


		# ID = kwargs.get('MenuID')
		# MENU 			 = MKT_MENU.query.get(ID)
		# print "new Menu is "
		# print "HERE I AM IN EDIT ROUTE:"
		MenuID 		= str(request.json['MenuID'])
		MenuName 	= request.json['MenuName']
		MenuItem 	= request.json['MenuItem']

		dic = {'MenuID':MenuID,'MenuName':MenuName,'MenuItem':MenuItem}

		if MenuName=='' or not MenuItem:
			return 'Menu Name and Menu Item is required', 400

		if setEditMenu(**dic):
			return jsonify(msg="Menu was updated successfully"), 200
		else:
			return jsonify(msg='Menu not found for edit.'), 400

	else:

		MenuObjByID = MKT_MENU.query.get(ID)
		if not MenuObjByID:
			flash(msg_error+"ID '%s' does not exist!"%ID)
			return redirect('/Morakot/MenuBuilder/')

		MenuName 	 = MenuObjByID.Description
		FormObj 	 =  MKT_FORM.query.order_by(MKT_FORM.FormDesc.asc()).all()
		ModuleObj 	 =  MKT_MODULE.query.all()
		MenuObj 	 =  MKT_MENU.query.order_by(MKT_MENU.ID.asc()).all()

		classToolbar 	= mkttool.clsToolbar()
		li_html 		= classToolbar.getToolbarevent("Cancel")

		Forms = {}
		for mol in ModuleObj:
			molID = mol.ID 
			Desc = mol.Description
			FormObj = MKT_FORM.query.filter(MKT_FORM.ID==molID).all()
			items = FormObj
			if items:
				for item in items:
					formid = item.ID 
					formdesc = item.FormDesc
					Forms.update({molID:{'Description':Desc,'formid':formid,'formdesc':formdesc}})

		li_html = classToolbar.getToolbarevent("Edit")

		ordered_list = getExistingMenu(ID)

		# print 'ordered_list: ',ordered_list

		return render_template('menubuilder/edit.html',
								MKT_FORM=MKT_FORM,
								Forms=FormObj,
								Module=ModuleObj,
								MenuObj=MenuObj,
								Formss=Forms,
								li_html=li_html,
								ordered_list=ordered_list,
								MenuName=MenuName,
								g_id=ID)

@app.route("/Morakot/MenuBuilder/<ID>")
@checkLogOutSession
@checkLogOutTime
def viewMenu(ID):

	# classToolbar = mkttool.clsToolbar()
	# li_html 	 = classToolbar.getToolbarevent("Cancel")
	
	MenuObjByID  = MKT_MENU.query.get(ID)
	if not MenuObjByID:
		MenuObjByID  = MKT_MENU_HIST.query.get(ID)
	if not MenuObjByID:
		flash(msg_error+"ID '%s' does not exist!"%ID)
		return redirect('/Morakot/MenuBuilder/')

	MenuName 	 =  MenuObjByID.Description
	FormObj 	 =  MKT_FORM.query.order_by(MKT_FORM.FormDesc.asc()).all()
	ModuleObj 	 =  MKT_MODULE.query.all()
	MenuObj 	 =  MKT_MENU.query.order_by(MKT_MENU.ID.asc()).all()

	Forms = {}
	for mol in ModuleObj:
		molID = mol.ID 
		Desc = mol.Description
		FormObj = MKT_FORM.query.filter(MKT_FORM.ID==molID).all()
		items = FormObj
		if items:
			for item in items:
				formid = item.ID 
				formdesc = item.FormDesc
				Forms.update({molID:{'Description':Desc,'formid':formid,'formdesc':formdesc}})

	classToolbar 	= mkttool.clsToolbar()
	li_html 		= classToolbar.getToolbarevent("Show")

	ordered_list = getExistingMenu(ID)

	# print 'ordered_list: ',ordered_list

	return render_template('menubuilder/edit.html',
							MKT_FORM=MKT_FORM,
							Forms=FormObj,
							Module=ModuleObj,
							MenuObj=MenuObj,
							Formss=Forms,
							li_html=li_html,
							ordered_list=ordered_list,
							MenuName=MenuName,
							g_id=ID,
							unsortable="unsortable")

@app.route("/Morakot/MenuBuilder/New/", methods=['GET', 'POST'])
@app.route("/Morakot/MenuBuilder/New/<ID>", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def setNewMenuBuilder(ID=""):
	# ErrorMsg 	= []
	# getCheck 	= checkAccess ("/Morakot/TemplateBuilder/","New")
	# if getCheck != True: 
	# 	ErrorMsg.append(msg_error+msg_permission)
	# 	return render_template("permission.html",ErrorMsg=ErrorMsg)

	if not ID:
		flash(msg_error+"Please Enter ID!")
		return redirect('/Morakot/MenuBuilder/')

	elif request.method == 'POST':
		# ID = kwargs.get('MenuID')
		MENU 			 = MKT_MENU.query.get(ID)
		MenuID 		= str(request.json['MenuID'])
		MenuName 	= request.json['MenuName']
		MenuItem 	= request.json['MenuItem']

		if MenuName=='' or not MenuItem:
			return 'Menu Name and Menu Item is required', 400

		dic = {'MenuID':MenuID,'MenuName':MenuName,'MenuItem':MenuItem}

		if setNewMenu(**dic):
			return jsonify(msg="Menu was created successfully"), 200
		else:
			return jsonify(msg='Menu not found for edit.'), 400
	else:

		classToolbar = mkttool.clsToolbar()
		li_html 	 = classToolbar.getToolbarevent(Operation="New")

		MenuObj = MKT_MENU.query.get(ID)
		if MenuObj:
			flash(msg_error+"ID '%s' is already in use!"%ID)
			return redirect('/Morakot/MenuBuilder/')


		FormObj 	 =  MKT_FORM.query.order_by(MKT_FORM.FormDesc.asc()).all()
		ModuleObj 	 =  MKT_MODULE.query.all()
		MenuObj 	 =  MKT_MENU.query.order_by(MKT_MENU.ID.asc()).all()

		g_id=ID
		g_readonly='readonly'

		Forms = {}
		for mol in ModuleObj:
			ID = mol.ID 
			Desc = mol.Description
			FormObj = MKT_FORM.query.filter(MKT_FORM.ID==ID).all()
			items = FormObj
			if items:
				for item in items:
					formid = item.ID 
					formdesc = item.FormDesc
					Forms.update({ID:{'Description':Desc,'formid':formid,'formdesc':formdesc}})


		return render_template('menubuilder/new.html',
								MKT_FORM=MKT_FORM,
								Forms=FormObj,
								Module=ModuleObj,
								MenuObj=MenuObj,
								Formss=Forms,
								g_readonly=g_readonly,
								g_id=g_id,
								li_html=li_html)



		# if IDObj :
		# 	flash(msg_error+"ID '%s' is already in use!"%ID)
		# 	return redirect('/Morakot/TemplateBuilder/')
		# return render_template('templatebuilder/new.html', li_html=li_html, g_id=g_id, g_readonly='readonly')

@app.route("/Morakot/MenuBuilder/Delete/<ID>", methods=['POST'])
@checkLogOutSession
@checkLogOutTime
def deleteMenu(ID):
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/MenuBuilder/","Delete")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	if isInUsed(ID)[0]:
		flash(msg_error+isInUsed(ID)[1])
		return redirect('/Morakot/MenuBuilder/%s'%ID)

	MENU = MKT_MENU.query.filter_by(ID = ID)
	MENU_ITEM = MKT_MENU_ITEM.query.filter_by(ID = ID)
	if MENU.count():
		mktaudit.moveAUTHtoHIST(MKT_MENU,MKT_MENU_HIST,ID)
	 	MENU.delete()
	 	mktaudit.moveAUTHtoHIST(MKT_MENU_ITEM,MKT_MENU_ITEM_HIST,ID)
	 	MENU_ITEM.delete()
		db.session.commit()
		flash('Menu with ID %s was deleted.'%ID)
	else:
		flash(msg_error+'Menu with ID %s cannot found for deletion.'%ID)

	return redirect('/Morakot/MenuBuilder/')
