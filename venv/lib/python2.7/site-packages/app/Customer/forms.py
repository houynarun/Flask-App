# -*- coding: utf-8 -*-
from app.mktcore.wtfimports import *
from .models import *
import time

from sqlalchemy 			import func

from app.Country.models		import *
from app.Province.models	import *
from app.District.models	import *
from app.Commune.models		import *
from app.Village.models		import *
from app.Business.models	import *
from app.Education.models	import *
from app.IdType.models		import *
from app.Position.models	import *
from app.Sector.models		import *
from app.Industry.models	import *
from app.Branch.models		import *
from app.Officer.models		import *
from app.Currency.models 	import *
from app.Education.models 	import *
from app.CustomerType.models 	import *
from app.PotentialCustomer.models 	import *
from app.VB.models 			import *

import app.tools.mktaddress 	as mktaddress
import app.tools.mktofficer 	as mktofficer
import app.tools.mktdate 		as mktdate
import app.tools.mkttool 		as mkttool
import app.tools.mktsetting 	as mktsetting
from app.tools.mktroute		import *
from app.tools.user 		import *
from app.LoanContract.models 	import *
from app.tools.mktsetting 	import getAppSetting

import re 


ExtendClass 			= 	mktsetting.ExtendModule()
PO_CUSTOMER_LINK 		= 	ExtendClass.getUrlExtend(Module="POCustomer")
CUSTOMER_LINK 			=	ExtendClass.getUrlExtend(Module="Customer")

def isCBCEnquiry():

	CBCEnquiry	= mktsetting.getAppSetting('CBCEnquiry')

	if CBCEnquiry == 'Y':
		return True
	else:
		return False

def isRequiredCBCLabel(Label):

	if isCBCEnquiry():
		return requiredlabel(Label, "*")
	else:
		return  Label


"""
 Check name is khmer name or english name
 Return True if there is english character in it
 Return False if there is only unicode
"""
def checkName(Name):
	# Match character from a to z and A to Z
	pattern = r'[A-Za-z]'

	if re.search(pattern, Name, flags=0):

		return True

	else:

		return False

#function
def getRecord():
	try:
		result = MKT_CUSTOMER_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_CUSTOMER.query.filter_by(ID=g.formID).all()
		elif not result:
			result = MKT_CUSTOMER_HIST.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'ProvinceOfBirth'	:str(row.ProvinceOfBirth)})
				Dict.update({'DistrictOfBirth'	:str(row.DistrictOfBirth)})
				Dict.update({'CommuneOfBirth'	:str(row.CommuneOfBirth)})
				Dict.update({'Province'			:str(row.Province)})
				Dict.update({'District'			:str(row.District)})
				Dict.update({'Commune'			:str(row.Commune)})
				Dict.update({'Village'			:str(row.Village)})
				Dict.update({'Sector'			:str(row.Sector)})
				Dict.update({'Industry'			:str(row.Industry)})
				Dict.update({'Branch'			:str(row.Branch)})
				Dict.update({'Officer'			:str(row.Officer)})


				Dict.update({'EmployerProvince'			:str(row.EmployerProvince)})
				Dict.update({'EmployerDistrict'			:str(row.EmployerDistrict)})
				Dict.update({'EmployerCommune'			:str(row.EmployerCommune)})
				Dict.update({'EmployerVillage'			:str(row.EmployerVillage)})
				Dict.update({'VBID'						:str(row.VBID)})
			return Dict
		else:
			return Dict

	except Exception as e:
		return jsonify(message={'message':[str(e)]}),500

def loadProvinceOfBirth():
	return mktaddress.getProvince()

def loadDistrictOfBirth():  #define function

	if request.method == 'POST':
		Province = request.form["ProvinceOfBirth"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['DistrictOfBirth'])  
		else:
			return MKT_DISTRICT.query.filter_by(ID='').order_by(MKT_DISTRICT.Description.asc()).all()

	return mktaddress.getLoadDistrict(Province)

def loadCommuneOfBirth():  #define function
	if request.method == 'POST':
		District=request.form["DistrictOfBirth"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['CommuneOfBirth'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').order_by(MKT_COMMUNE.Description.asc()).all()

	return mktaddress.getLoadCommune(District)

def loadProvince():
	return mktaddress.getProvince()

def loadDistrict():
	if request.method == 'POST':
		Province = request.form["Province"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])  
		else:
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

def loadCommune():
	if request.method == 'POST':
		District=request.form["District"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['Commune'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return mktaddress.getLoadCommune(District)

def loadVillage():
	if request.method == 'POST':
		Commune=request.form["Commune"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['Village'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)

def loadEmpProvince():
	return mktaddress.getProvince()

def loadEmpDistrict():
	if request.method == 'POST':
		Province = request.form["EmployerProvince"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['EmployerDistrict'])  
		else:
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

def loadEmpCommune():
	if request.method == 'POST':
		District=request.form["EmployerDistrict"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['EmployerCommune'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return mktaddress.getLoadCommune(District)

def loadEmpVillage():
	if request.method == 'POST':
		Commune=request.form["EmployerCommune"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['EmployerVillage'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)

def loadBranch(ID=''):
	if ID:
		QueryString = MKT_BRANCH.query.filter(MKT_BRANCH.ID == ID).one()
	else:
		QueryString = MKT_BRANCH.query
	return QueryString

def loadOfficer(ID=''):  #define function 
	return MKT_OFFICER.query.filter_by(Branch=getCurrentBranch(),Active='Y').order_by(MKT_OFFICER.ID.asc())

def loadCountry(ID =''):  #define function 
	if ID:
		QueryString = MKT_COUNTRY.query.filter(MKT_COUNTRY.ID==ID).one()
	else:
		QueryString = MKT_COUNTRY.query.order_by(MKT_COUNTRY.Description.asc(),MKT_COUNTRY.Nationality.asc())

	return QueryString# tablename.query

def loadBusiness():  #define function 
	return MKT_BUSINESS.query # tablename.query

# def loadEducation():  #define function 
# 	return MKT_EDUCATION.query# tablename.query

def loadIdType():  #define function 
	return MKT_ID_TYPE.query # tablename.query

def loadPosition():  #define function 
	return MKT_POSITION.query.order_by(asc(MKT_POSITION.Description)).filter(MKT_POSITION.PositionType.in_(['E','B'])) # tablename.query

def loadSector():  #define function 
	return MKT_SECTOR.query # tablename.query

def loadIndustry():  #define function 
	return MKT_INDUSTRY.query.order_by(asc(MKT_INDUSTRY.Description)) # tablename.query

def loadEducationLevel():
	return MKT_EDUCATION.query.order_by(MKT_EDUCATION.ID.asc()) 

def loadCustomerType():
	return MKT_CUSTOMER_TYPE.query.order_by(MKT_CUSTOMER_TYPE.ID.asc()) 

def isCheckYear(value): #define function 
	lenghtOfStr=len(value)#Check lenght
	if (lenghtOfStr==4):
		try:
			ConvertToInt = int(value)
		except ValueError:
			raise ValidationError("%s is not year" % value)
	elif not lenghtOfStr==0:
		raise ValidationError("%s is not year" % value)

def validateIDNumber(ID, IDType, IDNumber):
	IDTypeObj 	= MKT_ID_TYPE.query.get(IDType)

	if IDTypeObj:
		Description = IDTypeObj.Description
		CheckIDNumber = mkttool.isIDNumber(IDType,IDNumber)
		if not CheckIDNumber[0]:
			MinLength 		= CheckIDNumber[1]['MinLength']
			MaxLength 		= CheckIDNumber[1]['MaxLength']
			FirstChar 		= CheckIDNumber[1]['FirstChar']
			SecondChar 		= CheckIDNumber[1]['SecondChar']
			ThirdChar 		= CheckIDNumber[1]['ThirdChar']
			DicFunction 	= {"B":"alphabet and numeric","N":"numeric","*":"*",'S':'alphabet, numeric and ( / - . )'}

			if SecondChar == 'P*':
				raise ValidationError("Invalid %s. The character between %s to %s, first and second character must have 1 number and 1 character."\
						%(Description,MinLength,MaxLength))

			if MinLength == MaxLength:
				raise ValidationError("Invalid %s. The character must be %s long, Second character is %s and Third character is %s."\
						%(Description,MaxLength,DicFunction[SecondChar],DicFunction[ThirdChar]))
			else:
				raise ValidationError("Invalid %s. The character between %s to %s, Second character is %s and Third character is %s."\
						%(Description,MinLength,MaxLength,DicFunction[SecondChar],DicFunction[ThirdChar]))


		CustomerObj 	=	MKT_CUSTOMER.query.get(ID)
		if not CustomerObj:
			IDTypeList 	= ['B','F','R'] # exclude this IDType when checking duplicate
			IDNumberObj 	=	MKT_CUSTOMER.query.\
								filter(MKT_CUSTOMER.IDType == IDType).\
								filter(~MKT_CUSTOMER.IDType.in_(IDTypeList)).\
								filter(MKT_CUSTOMER.IDNumber == IDNumber).\
								filter(MKT_CUSTOMER.ID != ID).\
								first()

			if IDNumberObj:
				raise ValidationError(Markup("The ID number %s is already used. Please check customer <a href='javascript:void(0)'' onClick=CustomClickView('%s-%s','%s?ID=%s')>%s</a>."\
											%(IDNumber, CUSTOMER_LINK, IDNumberObj.ID, CUSTOMER_LINK ,IDNumberObj.ID, IDNumberObj.ID)))

"""
Get Salutation and generate Gender
"""
@app.route('/Morakot/SalutationID',methods=['GET'])
@app.route('/Morakot/API/SalutationID',methods=['GET'])
def getSalutation():
	Dict 		= {}
	Salutation 	= request.args.get('SalutationID')

	if Salutation=='Mr':
		Dict.update({"gender": "Male"})
	if Salutation=='Mrs':
		Dict.update({"gender": "Female"})
	if Salutation=='Miss':
		Dict.update({"gender": "Female"})
	if Salutation=='Other':
		Dict.update({"gender": "Other"})

	return jsonify(Dict)


@app.route('/Morakot/CustomerSpouse', methods=['GET'])
@app.route('/Morakot/API/CustomerSpouse', methods=['GET'])
# @app.route('/Morakot/Salutation', methods=['GET'])
def getCustomerSpouse():
	dic = False
	Choices = request.args.get('MaritalStatus') # 1 = Married

	app.logger.debug(Choices)
	if Choices != "1":
		dic = True
	else:
		dic = False
	return jsonify(Bool=dic)

def loadVBID():
	return MKT_VB.query

def loadGroupID():
	if request.method == 'POST':
		VBID = request.form["VBID"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_GROUP.query.filter_by(VBID=Record['VBID'])
		else:
			return MKT_GROUP.query.filter_by(VBID='').all()
	return MKT_GROUP.query.filter_by(VBID=VBID)

def loadCurrency():
	return MKT_CURRENCY.query
#Block Custom validate

def custom_DateOfBirth(form,field):

	DateOfBirth = request.form['DateOfBirth']

	if DateOfBirth:
		# clear out processing errors
		field.errors[:] = []

		CheckFormatDate = mktdate.isDateISO(DateOfBirth)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

	else:
		# clear out processing errors
		field.errors[:] = []

		raise ValidationError("This field is required.")

def custom_SpoDateOfBirth(form, field):
	SpoDateOfBirth = request.form["SpoDateOfBirth"] if request.method == 'POST' else ""
	if SpoDateOfBirth:
		field.errors[:] = []
		CheckFormatDate = mktdate.isDateISO(SpoDateOfBirth)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

	else:
		# clear out processing errors
		field.errors[:] = []
		# raise ValidationError("This field is required.")

def custom_SpouseIDIssueDate(form, field):
	SpouseIDIssueDate = request.form["SpouseIDIssueDate"] if request.method == 'POST' else ""
	if SpouseIDIssueDate:
		field.errors[:] = []
		CheckFormatDate = mktdate.isDateISO(SpouseIDIssueDate)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
	else:
		field.errors[:] = []
		# raise ValidationError("This field is required.")

def custom_IssueDate(form, field):
	IssueDate = request.form["IssueDate"] if request.method == 'POST' else ""
	ExpiryDate = request.form["ExpiryDate"] if request.method == 'POST' else ""

	if IssueDate:
		field.errors[:] = []
		CheckFormatDate = mktdate.isDateISO(IssueDate)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		if ExpiryDate:
			if IssueDate >= ExpiryDate:
				raise ValidationError("IssueDate date must be smaller than expiry date!")

	else:
		field.errors[:] = []
		raise ValidationError("This field is required.")

def custom_ExpiryDate(form, field):
	ExpiryDate = request.form["ExpiryDate"] if request.method == 'POST' else ""
	IssueDate = request.form["IssueDate"] if request.method == 'POST' else ""
	if ExpiryDate:
		field.errors[:] = []
		CheckFormatDate = mktdate.isDateISO(ExpiryDate)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		if IssueDate:
			if  ExpiryDate <= IssueDate:
				raise ValidationError("Expiry date must be bigger than IssueDate date!")


	else:
		field.errors[:] = []
		# raise ValidationError("This field is required.")

def custom_GroupMember(form, field):
	MaxMember = 0
	GroupID 			= request.form['GroupID']
	ID 					= request.form['ID']
	# Count number of customer in group 
	GroupMemberObj 		= db.session.query(MKT_CUSTOMER.ID).\
									 filter(MKT_CUSTOMER.GroupID == GroupID).\
									 filter(MKT_CUSTOMER.ID != ID).all()
	# Count number of customer inau in group 
	GroupMemberINAUObj 	= db.session.query(MKT_CUSTOMER_INAU.ID).\
									 filter(MKT_CUSTOMER_INAU.GroupID == GroupID).\
									 filter(MKT_CUSTOMER_INAU.ID != ID).all()
	Member = GroupMemberObj + GroupMemberINAUObj
	# Count member both Customer Live and INAU filter by groupid
	MaxMember = len(list(set(Member)))
	if MaxMember:
		GroupObj 	= db.session.query(MKT_GROUP.MaxMember).filter(MKT_GROUP.ID == GroupID).first()
		if GroupObj:
			if int(MaxMember) >= int(GroupObj.MaxMember):
				raise ValidationError('%s can have %s maximum member.'%(GroupID,MaxMember))

def getPotentialCustomerID():
	Branch 	= 	mktuser.getBranch(session["ChangeBranch"]).ID
	UserID		= 	session["getLogInID"]
	search	=		request.args.get("q") if request.args.get("q") else ""
	action 	= 	request.args.get('action')
	ListCustomerID = [row.PotentialCustomer for row in MKT_CUSTOMER.query.all()]
	NAMES 	= 	[]
	Record 	= 	db.session.query(MKT_PO_CUSTOMER.FirstNameEn,
								 MKT_PO_CUSTOMER.LastNameEn,
								 MKT_PO_CUSTOMER.ID,
								 MKT_PO_CUSTOMER_STATUS.Deal,
								 MKT_PO_CUSTOMER_STATUS.Closed
				).join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID==MKT_PO_CUSTOMER.POStatus).\
				filter(MKT_PO_CUSTOMER.Branch == Branch).\
				filter(MKT_PO_CUSTOMER_STATUS.Deal=='Yes',MKT_PO_CUSTOMER_STATUS.Closed=='No').\
				filter(or_(MKT_PO_CUSTOMER.ID.ilike('%'+search+'%'),
					MKT_PO_CUSTOMER.FirstNameEn.ilike('%'+search+'%'),
					MKT_PO_CUSTOMER.LastNameEn.ilike('%'+search+'%'),
					MKT_PO_CUSTOMER.FirstNameKh.ilike('%'+search+'%'),
					MKT_PO_CUSTOMER.LastNameKh.ilike('%'+search+'%'),
				))
	if action == 'view':
		Record = Record.all()
	elif mkttool.isRequestAll():
		Record = Record.all()
	else:
		Record = Record.filter(~MKT_PO_CUSTOMER.ID.in_(ListCustomerID)).all()
	for row in Record:
		dic = {"id":row.ID, "text":'%s - %s %s'%(row.ID,row.LastNameEn, row.FirstNameEn)}
		NAMES.append(dic)


	# app.logger.debug(NAMES)
	return jsonify(items = NAMES)

@app.route("/Morakot/PotentialCustomer", methods=['GET'])
@app.route("/Morakot/API/PotentialCustomer", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def PotentialCustomer():
	return getPotentialCustomerID()


# def loadPotentialCust():
# 	return MKT_PO_CUSTOMER.queryMonthlyIncome
#class CUSTOMER form
class FRM_CUSTOMER(exform):
	CusType  		= SelectField(requiredlabel(('Customer Type'),"*"),
							choices=[('IN', 'Individual'),('NIN', 'Non-Individual')],
							coerce=str,
							validators=[validators.Required()],
							default="IN")
	VBID 			= 	RemoteTextField("Village Bank")
	GroupID 		= 	QuerySelectField('Group',
							query_factory=loadGroupID,
							get_label=lambda a: a.ID + " - " + a.GroupName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[custom_GroupMember])

	PotentialCustomer 	= 	RemoteTextField("Potential Customer")
	FirstNameEn 	=	TextField(requiredlabel("%s (%s)" %(getLanguage("First Name"), getLanguage("English")),"*"),[validators.Required()])
	LastNameEn 		=	TextField(requiredlabel("%s (%s)" %(getLanguage("Last Name"), getLanguage("English")),"*"),[validators.Required()])
	FirstNameKh 	=	TextField("%s (%s)" %(getLanguage("First Name"), "Local"))
	LastNameKh 		=	TextField("%s (%s)" %(getLanguage("Last Name"), "Local"))

	Salutation 		=	SelectField(getLanguage("Salutation"),
							 choices=[('Mrs', 'Mrs'),('Mr', 'Mr'),('Miss','Miss')],
							 coerce=str)
	Gender 			=	SelectField(requiredlabel(getLanguage("Gender"),"*"),
							 choices=[('Female', 'Female'),('Male', 'Male'),('Other','Other')],
							 coerce=str,
							 validators=[validators.Required()])
	DateOfBirth 	=	DateField(requiredlabel(getLanguage("Date of Birth"), "*"),
							format='%Y-%m-%d',
							validators=[custom_DateOfBirth])

	CountryOfBirth 	=	QuerySelectField(getLanguage('Country of Birth'),query_factory=loadCountry, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='',
							 default=lambda:loadCountry('KH'),
							 validators=[validators.Required()])
	Nationality		=   QuerySelectField(getLanguage('Nationality'),query_factory=loadCountry, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='',
							 default=lambda:loadCountry('KH'),
							 validators=[validators.Required()])
	ProvinceOfBirth =	QuerySelectField('Province of Birth',query_factory=loadProvinceOfBirth, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Province of Birth--')
	DistrictOfBirth =	QuerySelectField(getLanguage('District of Birth'),query_factory=loadDistrictOfBirth, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose District of Birth--')
	CommuneOfBirth 	=	QuerySelectField('Commune of Birth',query_factory=loadCommuneOfBirth, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Commune of Birth--')
	AsGurantor 		=	SelectField(requiredlabel(getLanguage('As Guarantor'),"*"),
							 choices=[('N', 'No'),('Y', 'Yes')],
							 coerce=str,
							 validators=[validators.Required()])
	
	MaritalStatus 	=	SelectField(requiredlabel(getLanguage('Marital Status'),'*'),
							 choices=[('1', 'Married'),
									('2', 'Single'),
									('3','Divorced'),
									('4','Widow'),
									('5','Widower'),
									('6','Separated'),
									('7','Defacto'),
									('8','Unknown')],
							 coerce=str,
							 validators=[validators.Required(),validators.Length(max=20)])
	Resident 		=	SelectField(getLanguage('Resident'),
							 choices=[('Y', 'Yes'),('N', 'No')],
							 coerce=str,
							 validators=[validators.Required()])

	# --Family Info --
	HouseOwnership 		=	SelectField('House Ownership',
								choices=[('', '--None--'),
										('1', 'Owner'),
										('2', 'Family'),
										('3', 'Sibling'),
										('4', 'Others Relative'),
										('5', 'Friend'),
										('6', 'Rental'),
										('7', 'Other')
										],
								coerce=str
							)

	NumberOfMember 		=	TextField('# Family Member',
								validators=[validators.Length(max=3)])
	ActiveMember 		=	TextField('# Income Generator',
								validators=[validators.Length(max=3)])

	Officer         = RemoteTextField(requiredlabel("Loan Officer", "*"),
								dicRemote={'url':'/Morakot/SearchOfficer'},
								validators=[validators.Required()]
						)
	EducationLevel 	=	QuerySelectField('Education Level',
								query_factory=loadEducationLevel, 
								get_label='Description',
								allow_blank=True,
								blank_text=u'--None--'
							)
	Officer 		= RemoteTextField(requiredlabel(getLanguage("Officer"), "*"),
								dicRemote={'url':'/Morakot/SearchOfficer'},
								validators=[validators.Required()]
						)
	
	# --Contact and Address--
	Province 		= 	QuerySelectField(requiredlabel('Province','*'),query_factory=loadProvince, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Province--',
							 validators=[validators.Required()],
							 description="1-%s" %getLanguage('Current Address and Contact'))
	District 		= 	QuerySelectField(requiredlabel(getLanguage('District'),'*'),query_factory=loadDistrict, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose District--',
							 validators=[validators.Required()],
							 description="1-%s" %getLanguage('Current Address and Contact'))
	Commune 		=	QuerySelectField(requiredlabel('Commune','*'),query_factory=loadCommune, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Commune--',
							 validators=[validators.Required()],
							 description="1-%s" %getLanguage('Current Address and Contact'))

	Village 		=	QuerySelectField(requiredlabel('Village','*'),
							 query_factory=loadVillage, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Village--',
							 validators=[validators.Required()],
							 description="1-%s" %getLanguage('Current Address and Contact'))
	City 			=	TextField("City",description="1-%s" %getLanguage('Current Address and Contact'))
	HouseNo 		=	TextField("House No",
							description="1-%s" %getLanguage('Current Address and Contact'),
							validators=[validators.Length(max=25)])
	Street 		   =	TextField('Street',
							description="1-%s" %getLanguage('Current Address and Contact'),
							validators=[validators.Length(max=40)])
	Mobile1 		=	TextField(requiredlabel(getLanguage("Mobile Phone 1"),'*'),
							 validators=[validators.Required()],
							 description="1-%s" %getLanguage('Current Address and Contact'))
	Mobile2 		=	TextField(getLanguage("Mobile Phone 2"), description="1-%s" %getLanguage('Current Address and Contact'))
	Mobile3 		=	TextField("Mobile Phone 3", description="1-%s" %getLanguage('Current Address and Contact'))
	Email 			= 	TextField(getLanguage("Email"), [validators.Optional(),validators.Email(message=u'Invalid email address.')],
							 description="1-%s" %getLanguage('Current Address and Contact'))

	# --Spouse Info--

	SpoFirstNameEn 	=	TextField("%s (%s)" %(getLanguage("First Name"), getLanguage("English")),description="2-%s" %'Spouse Info')
	SpoLastNameEn 	=	TextField("%s (%s)" %(getLanguage("Last Name"), getLanguage("English")),description="2-%s" %'Spouse Info')
	SpoFirstNameKh 	=	TextField("%s (%s)" %(getLanguage("First Name"), "Local"),description="2-%s" %'Spouse Info')
	SpoLastNameKh 	=	TextField("%s (%s)" %(getLanguage("Last Name"), "Local"),description="2-%s" %'Spouse Info')
	SpoDateOfBirth 	=	DateField("Spouse Date of Birth",
							 description="2-%s" %'Spouse Info',
							 validators=[custom_SpoDateOfBirth]
							)
	SpouseNationality		=   QuerySelectField('Spouse Nationality',
							 query_factory=loadCountry, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='',
							 default=lambda:loadCountry('KH'),
							 description="2-%s" %'Spouse Info')

	SpoOccupation 	=	QuerySelectField(getLanguage('Occupation'),query_factory=loadPosition, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='--None--',
							 description="2-%s" %'Spouse Info'
							)
	SpoOccupationRemark =	TextAreaField("Occupation Remark",
							 description="2-%s" %'Spouse Info')
	SpouseIDType 		=	QuerySelectField('ID Type of Spouse',
								query_factory=loadIdType, 
								get_label='Description',
								allow_blank=True,
								blank_text='--None--',
								description="2-Spouse Info"
							)
	SpoNationalID 			=	TextField("ID Number",description="2-%s" %'Spouse Info')


	SpouseIDIssueDate		=	DateField("Issue Date Of ID Type", validators=[custom_SpouseIDIssueDate], description="2-Spouse Info")


	


	# --Employment Detail--
	EmployerType 	=	SelectField(requiredlabel('Employment Type',"*"),
							 choices=[('C', 'Current'),('P', 'Previous')],
							 coerce=str,
							 validators=[validators.Required()],
							 description="3-%s" %getLanguage('Employment Details'))

	# --Classification--
	Sector 			=	QuerySelectField(requiredlabel(getLanguage('Sector'),'*'),query_factory=loadSector, 
							 get_label=lambda a: a.ID + " - " + a.Description,
							 allow_blank=True,
							 blank_text='--None--',
							 validators=[validators.Required()],
							 description="4-%s" %getLanguage('Classification'))
	
	Industry 		=	QuerySelectField(requiredlabel(getLanguage('Industry'),'*'),query_factory=loadIndustry, 
							 get_label=lambda a: a.Description,
							 allow_blank=True,
							 blank_text='--None--',
							 validators=[validators.Required()],
							 description="4-%s" %getLanguage('Classification'))
	
	ACMember 		=	SelectField(requiredlabel(getLanguage('AC Member'),"*"),
							 choices=[('Y', 'Yes'),('N', 'No')],
							 coerce=str,
							 validators=[validators.Required()],
							 description="4-%s" %getLanguage('Classification'))




	SelfEmployed 	=	SelectField(requiredlabel(getLanguage('Self-Employed'),"*"),
							 choices=[('N', 'No'),('Y', 'Yes')],
							 coerce=str,
							 validators=[validators.Required()],
							 description="3-%s" %getLanguage('Employment Details'))
	
	Position 		=	QuerySelectField(requiredlabel('Occupation', '*'),query_factory=loadPosition, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='--None--',
							 description="3-%s" %getLanguage('Employment Details'))
	PositionRemark	=	TextAreaField("Occupation Remark",
							 description="3-%s" %('Employment Details'))

	LengthOfService =	TextField(isRequiredCBCLabel("Length Of Service(M)"),
							 validators=[validators.Length(max=3)],
							 description="3-%s" %getLanguage('Employment Details'))

	CompanyName 	=	TextField(getLanguage("Company Name"),
							description="3-%s" %getLanguage('Employment Details'),
							validators=[validators.Length(max=35)])

	CompanyBusiness =	TextField(getLanguage("Company Business"),
							description="3-%s" %getLanguage('Employment Details'),
							validators=[validators.Length(max=50)])

	EmployerName 	=	TextField(isRequiredCBCLabel("Employer Name"),
							description="3-%s" %getLanguage('Employment Details'),
							validators=[validators.Length(max=50)])

	EmployerAddressType = SelectField(isRequiredCBCLabel('Employer AddressType'),
						  choices=[('WORK', 'Work'),
								   ('RESID', 'Residential'),
								   ('POST', 'Correspondence'),
								   ('U', 'Unknown')
								  ],
						  coerce=str,
						  validators=[validators.Required()],
						  description="3-%s" %getLanguage('Employment Details'),
						  default='WORK')

	EmployerProvince = QuerySelectField(isRequiredCBCLabel('Employer Province'),query_factory=loadEmpProvince,
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Province--',
							 description="3-%s" %getLanguage('Employment Details'))

	EmployerDistrict = QuerySelectField(isRequiredCBCLabel('Employer District'),query_factory=loadEmpDistrict,
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose District--',
							 description="3-%s" %getLanguage('Employment Details'))

	EmployerCommune = QuerySelectField(isRequiredCBCLabel('Employer Commune'),query_factory=loadEmpCommune,
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Commune--',
							 description="3-%s" %getLanguage('Employment Details'))

	EmployerVillage = QuerySelectField(isRequiredCBCLabel('Employer Village'),query_factory=loadEmpVillage,
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Village--',
							 description="3-%s" %getLanguage('Employment Details'))

	EmployerAddress =	TextField('Employer Address',
							description="3-%s" %getLanguage('Employment Details'),
							validators=[validators.Optional(),validators.Length(max=150)])

	Currency 		= 	QuerySelectField(getLanguage('Currency'),query_factory=loadCurrency, 
							 get_label='ID',
							 allow_blank=False,
							 blank_text='--None--',
							 description="3-%s" %getLanguage('Employment Details'))

	MonthlyIncome 		=	TextField(isRequiredCBCLabel("Total Monthly Salary/Income"),
							description="3-%s" %getLanguage('Employment Details'),
							validators=[validators.Required()])

	YearEmployed 	=	TextField(getLanguage("Years Employed"),
							description="3-%s" %getLanguage('Employment Details'),
							validators=[validators.Length(max=4)])

	

	# --Identification--
	IDType 			=	QuerySelectField(requiredlabel(getLanguage('ID Type'),'*'),
							 query_factory=loadIdType, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='--None--',
							 validators=[validators.Required()],
							 description="8-%s" %getLanguage('Identification Document'))
	
	IDNumber 		=	TextField(requiredlabel(getLanguage("ID Number"),"*"),
							 validators=[validators.Required()],
							 description="8-%s" %getLanguage('Identification Document'))
	
	IssuePlace 		=	TextField(requiredlabel(getLanguage("Issue Place"),'*'),
							 description="8-%s" %getLanguage('Identification Document'),
							 validators=[validators.Length(max=35),validators.Required()],)
	
	IssueDate 		=	DateField(requiredlabel(getLanguage("Issue Date"),'*'),
							 description="8-%s" %getLanguage('Identification Document'),
							 validators=[custom_IssueDate])
	
	ExpiryDate 		=	DateField(getLanguage("Expiry Date"),
							 description="8-%s" %getLanguage('Identification Document'),
							 validators=[custom_ExpiryDate])
	#NonIndividual
	NonIndNameOfEntity   	= TextField("Name of Entity",
							 description='61-Non-Individual Info')
	NonIndAbbreviationName 	= TextField("Abbreviation Name",
							description='61-Non-Individual Info')
	NonIndRegisteredYear  	= TextField("Registered Year",
							description='61-Non-Individual Info')
	NonIndAddress  			= TextAreaField("Address ",
							description='61-Non-Individual Info')
	# Secondary
	IDType2 				=	QuerySelectField('ID Type (Secondary)',
									 query_factory=loadIdType,
									 get_label='Description',
									 allow_blank=True,
									 blank_text='--None--',
									 description="8-%s" %getLanguage('Identification Document'))
	IDNumber2 				=	TextField("ID Number",
									 description="8-%s" %getLanguage('Identification Document'),
									 validators=[validators.Length(max=50)])
	IssuePlace2				=	TextField("Issue Place", 
									description="8-%s" %getLanguage('Identification Document'),
									validators=[validators.Length(max=35)])
	IssueDate2 				=	DateField("Issue Date", description="8-%s" %getLanguage('Identification Document'))
	ExpiryDate2				=	DateField("Expiry Date", description="8-%s" %getLanguage('Identification Document'))
	
	# Third
	IDType3 				=	QuerySelectField('ID Type (Third)',
									 query_factory=loadIdType,
									 get_label='Description',
									 allow_blank=True,
									 blank_text='--None--',
									 description="8-%s" %getLanguage('Identification Document'))
	IDNumber3 				=	TextField("ID Number",
									 description="8-%s" %getLanguage('Identification Document'),
									 validators=[validators.Length(max=50)])
	IssuePlace3				=	TextField("Issue Place", 
									description="8-%s" %getLanguage('Identification Document'),
									validators=[validators.Length(max=35)])
	IssueDate3 				=	DateField("Issue Date", description="8-%s" %getLanguage('Identification Document'))
	ExpiryDate3				=	DateField("Expiry Date", description="8-%s" %getLanguage('Identification Document'))

	# Location customer
	LastLocation 		=	LocationField("Customer Location",
									 description="80-Location")
	# --Block--
	Block 			=	SelectField(getLanguage('Block'),
							choices=[('N', 'No'),('Y', 'Yes')],
							coerce=str,
							default='N',
							description="81-%s" %getLanguage('Block')
						)
	
	BlockReason 	=	TextAreaField("Block Reason",
						description="81-%s" %getLanguage('Block'),
						validators=[validators.Length(max=100)])

	if getAppSetting('ENABLE_LOS_FEATURE')=='Y':

		# Tab Income Detail
		Currency 				= 	QuerySelectField(getLanguage('Currency'),query_factory=loadCurrency,
										get_label='ID',
										allow_blank=False,
										blank_text='--None--',
										description="6-%s" %"Income and Expense")

		PrimaryFreq 			= SelectField(requiredlabel(getLanguage("Frequency"), "*"),
										choices=[	('1', '1. %s' %('Monthly')),
													('2', '2. %s' %("Quarterly")),
													('3', '3. %s' %("Semester")),
													('4', '4. %s' %("Annually"))],
										description="6-%s" %"Income and Expense",
										coerce=str,
										validators=[validators.Required()]
									)
		PrimaryInc				= TextField(requiredlabel("Primary Income", "*"),
										description="6-%s" %"Income and Expense",
										validators=[validators.Required()])
		SecondaryInc 			= TextField("Secondary Income",
										description="6-%s" %"Income and Expense",
										validators=[validators.Optional()])
		MonthlyIncome 			= TextField("Total Net Income",
										description="6-%s" %"Income and Expense",
										validators=[validators.Optional()])
		HouseholdExp			= TextField("Household Expenses",
										description="6-%s" %"Income and Expense",
										validators=[validators.Required()])
		PersonalExp				= TextField("Personal Expenses",
										description="6-%s" %"Income and Expense",
										validators=[validators.Optional()])
		TotalExpenses			= TextField("Total Expenses",
										description="6-%s" %"Income and Expense",
										validators=[validators.Optional()])
		
		# Tab Asset and Liability Detail
		AssetType			 	= TextField("Asset Type",
										description="7-%s" %"Asset and Liability",
										validators=[validators.Length(max=50)])
		EstimatedValue	 		= TextField("Estimated Value",
										description="7-%s" %"Asset and Liability",
										validators=[validators.Optional()])
		BankAccountType 		= TextField("Bank Account Type",
										description="7-%s" %"Asset and Liability",
										validators=[validators.Length(max=10)])
		SavingBal		 		= TextField("Saving Balance",
										description="7-%s" %"Asset and Liability",
										validators=[validators.Optional()])
		LenderName				= TextField(("Name of Lender(1)"),
										description="7-%s" %"Asset and Liability",
										validators=[validators.Length(max=50), validators.Optional()])
		OutstandingBal 			= TextField(("Outstanding Balance"),
										description="7-%s" %"Asset and Liability",
										validators=[validators.Optional()])
		MonthlyRep 				= TextField(("Monthly Repayment"),
										description="7-%s" %"Asset and Liability",
										validators=[validators.Optional()])
		LenderName2				= TextField(("Name of Lender(2)"),
										description="7-%s" %"Asset and Liability",
										validators=[validators.Length(max=50)])
		OutstandingBal2 		= TextField(("Outstanding Balance"),
										description="7-%s" %"Asset and Liability",
										)
		MonthlyRep2 			= TextField(("Monthly Repayment"),
										description="7-%s" %"Asset and Liability",
										)

		# Tab Previous Employment
		PrevEmpName 			=	TextField(("Employer Name (1)"),
										description="5-%s" %('Prev Employment'),
										validators=[validators.Length(max=50)])
		PrevYearStarted			=	TextField(("Years Started"),
										description="5-%s" %('Prev Employment'),
										validators=[validators.Length(max=5)])
		PrevYearEnded			=	TextField(("Years Ended"),
										description="5-%s" %('Prev Employment'),
										validators=[validators.Length(max=5)])
		PrevReason				=	TextAreaField("Reason for leaving",
										description="5-%s" %('Prev Employment'),
										validators=[validators.Optional()])

		PrevEmpName2			=	TextField(("Employer Name (2)"),
										description="5-%s" %('Prev Employment'),
										validators=[validators.Length(max=50)])
		PrevYearStarted2		=	TextField(("Years Started"),
										description="5-%s" %('Prev Employment'),
										validators=[validators.Length(max=5)])
		PrevYearEnded2			=	TextField(("Years Ended"),
										description="5-%s" %('Prev Employment'),
										validators=[validators.Length(max=5)])
		PrevReason2				=	TextAreaField("Reason for leaving",
										description="5-%s" %('Prev Employment'),
										validators=[validators.Optional()])

		PrevEmpName3 			=	TextField(("Employer Name (3)"),
										description="5-%s" %('Prev Employment'),
										validators=[validators.Length(max=50)])
		PrevYearStarted3		=	TextField(("Years Started"),
										description="5-%s" %('Prev Employment'),
										validators=[validators.Length(max=5)])
		PrevYearEnded3			=	TextField(("Years Ended"),
										description="5-%s" %('Prev Employment'),
										validators=[validators.Length(max=5)])
		PrevReason3				=	TextAreaField("Reason for leaving",
										description="5-%s" %('Prev Employment'),
										validators=[validators.Optional()])





	
	# def validate_PotentialCustomer(form, field):
	# 	ID = field.value

	def validate_FirstNameEn(form, field):
		Msg 		= 	""
		ListID 		= 	""
		ID 			=	request.form['ID'] if request.method == "POST" else ""
		DateOfBirth =	request.form['DateOfBirth'] if request.method == "POST" else ""
		FirstNameEn =	request.form['FirstNameEn'] if request.method == "POST" else ""
		LastNameEn 	=	request.form['LastNameEn'] if request.method == "POST" else ""
		Gender 		=	request.form['Gender'] if request.method == "POST" else ""
		FullName 	=	"%s %s" %(LastNameEn, FirstNameEn)

		"""
			Exact duplicate customer: (Name, Gender, and DOB) or ID is the same. 
				=> This will not allow customer creation to be saved and suggest to use the existing one.
				Example:
				No 	Name 		Gender 		DOB 			Identification
				----------------------------------------------------------------------------
				1 	Jonh Sena 	Male 		1980-02-10		010123456
				2	Sena Jonh	Male 		1980-02-10		010987654
				3	Jonh Sena 	Male 		1980-09-09		010123456
			
			=> Customer 1 and 2 are duplicated because Name, Gender and DOB are the same
			=> Customer 1 and 3 are duplicated because ID are the same
			----------------------------------------------------------------------------
			=> Customer 2 and 3 are potential duplicated becuase only Name and Gender are the same
			* For potential duplicate customer, see staticmethod IsAcceptOverride()
		"""
		CustomerObj 	=	MKT_CUSTOMER.query.\
							filter(
									or_(
										and_(
											func.upper(MKT_CUSTOMER.FirstNameEn)==FirstNameEn.upper(),
											func.upper(MKT_CUSTOMER.LastNameEn)==LastNameEn.upper()
										),
										and_(
											func.upper(MKT_CUSTOMER.FirstNameEn)==LastNameEn.upper(),
											func.upper(MKT_CUSTOMER.LastNameEn)==FirstNameEn.upper(),
										)
									),
									MKT_CUSTOMER.Gender == Gender,
									MKT_CUSTOMER.DateOfBirth == DateOfBirth,
									MKT_CUSTOMER.ID != ID
								).first()

		POCustomerObj	=	MKT_PO_CUSTOMER.query.\
							filter(
									or_(
										and_(
											func.upper(MKT_PO_CUSTOMER.FirstNameEn)==FirstNameEn.upper(),
											func.upper(MKT_PO_CUSTOMER.LastNameEn)==LastNameEn.upper()
										),
										and_(
											func.upper(MKT_PO_CUSTOMER.FirstNameEn)==LastNameEn.upper(),
											func.upper(MKT_PO_CUSTOMER.LastNameEn)==FirstNameEn.upper(),
										)
									),
									MKT_PO_CUSTOMER.Gender == Gender
								).first()

		if CustomerObj:
			if CustomerObj.Block == "N":
				ListID += '<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a> ' %(CUSTOMER_LINK,CustomerObj.ID,CUSTOMER_LINK,CustomerObj.ID,CustomerObj.ID)

			if ListID:
				
				Br = "<br>" if Msg else ''
				Override 	= 	True
				CustomerInfo= "Customer <b>%s %s, %s, %s</b> is created on <b>%s</b> by User <b>%s</b> at Branch <b>%s</b>."\
							 %(CustomerObj.LastNameEn, CustomerObj.FirstNameEn, CustomerObj.Gender, CustomerObj.DateOfBirth, CustomerObj.Createdon, CustomerObj.Inputter, CustomerObj.Branch)
				Msg 		+= 	'%s The customer you are trying to create is already existed. Please check customer %s.<br> %s<br>' %(Br, ListID,CustomerInfo)

			ListID = ''
			if CustomerObj.Block == "Y":
				ListID += '<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a> ' %(CUSTOMER_LINK,CustomerObj.ID,CUSTOMER_LINK,CustomerObj.ID,CustomerObj.ID)

			if ListID:
				Override 	= 	True
				CustomerInfo= "Customer <b>%s %s, %s, %s</b> is created on <b>%s</b> by User <b>%s</b> at Branch <b>%s</b>."\
							 %(CustomerObj.LastNameEn, CustomerObj.FirstNameEn, CustomerObj.Gender, CustomerObj.DateOfBirth, CustomerObj.Createdon, CustomerObj.Inputter, CustomerObj.Branch)
				Msg 		+= 	'The customer you are trying to create is already existed in blacklist. Please check customer %s.<br> %s<br>' %(ListID,CustomerInfo)

		if POCustomerObj:
			ListID = ''
			if POCustomerObj.Block == "Y":
				ListID += '<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a> ' %(PO_CUSTOMER_LINK,POCustomerObj.ID,PO_CUSTOMER_LINK,POCustomerObj.ID,POCustomerObj.ID)

			if ListID:
				Override 	= 	True
				CustomerInfo= "Potential Customer <b>%s %s, %s</b> is created on <b>%s</b> by User <b>%s</b> at Branch <b>%s</b>."\
							 %(POCustomerObj.LastNameEn, POCustomerObj.FirstNameEn, POCustomerObj.Gender, POCustomerObj.Createdon, POCustomerObj.Inputter, POCustomerObj.Branch)
				Msg 		+= 	'The customer you are trying to create is existed in potential customer blacklist. Please check potential customer %s.<br> %s<br>' %(ListID,CustomerInfo)	


		#Validate English only
		FirstNameEn 		= field.data.strip() 
		if not mkttool.checkNameEn(FirstNameEn):
			Msg += 'Please enter English character only.'

		if Msg:
			raise ValidationError(Markup(Msg))

	def validate_LastNameEn(form, field):
		LastNameEn = field.data.strip()
		if not mkttool.checkNameEn(LastNameEn):
			raise ValidationError('Please enter English character only')

	def validate_IssueDate2(form,field):
		if not field.data:
			field.errors[:] = ''			
	def validate_ExpiryDate2(form,field):
		if not field.data:
			field.errors[:] = ''

	def validate_IssueDate3(form,field):
		if not field.data:
			field.errors[:] = ''			
	def validate_ExpiryDate3(form,field):
		if not field.data:
			field.errors[:] = ''


	def validate_FirstNameKh(form, field):
		FirstNameKh = field.data.strip()
		if FirstNameKh:
			if mkttool.checkNameKh(FirstNameKh):
				raise ValidationError('Please enter Khmer character only')

		# if FirstNameKh:
		# 	if mkttool.isCharacter(FirstNameKh):
		# 		raise ValidationError('Please enter Khmer character only')

	def validate_LastNameKh(form, field):
		LastNameKh = field.data.strip()
		if LastNameKh:
			if mkttool.checkNameKh(LastNameKh):
				raise ValidationError('Please enter Khmer character only')

	
	def validate_MonthlyIncome(form, field):
		MonthlyIncome = field.data

		if isCBCEnquiry():
			if float(MonthlyIncome) <= 0:
				raise ValidationError('Total Monthly Salary/Income must be bigger than 0')


	def validate_PayrollDate(form,field):
		PayrollDate = form.PayrollDate.data
		if PayrollDate:
			if len(PayrollDate)>2:
				raise ValidationError("Invalid format Day Ex: 12")


	def validate_Mobile1(form,field):
		Mobile1 = form.Mobile1.data
		if Mobile1:
			if len(Mobile1) < 3:
				raise ValidationError("Invalid mobile phone number. Ex: 012xxxxxx")
			CheckMobileNumber, Msg = mkttool.isMobile(Mobile1)
			if not CheckMobileNumber:
				raise ValidationError(Msg)


	#Spouse Validation

	def validate_SpoLastNameEn(form, field):
		SpoLastNameEn = field.data.strip()
		if not mkttool.checkNameEn(SpoLastNameEn):
			raise ValidationError('Please enter English character only')

	def validate_SpoFirstNameEn(form, field):
		SpoFirstNameEn = field.data.strip()
		if not mkttool.checkNameEn(SpoFirstNameEn):
			raise ValidationError('Please enter English character only')

	def validate_SpouseIDType(form,field):
		SpoNationalID 	= form.SpoNationalID.data
		SpouseIDType	= str(request.form['SpouseIDType'])
				
		if SpoNationalID and SpouseIDType == '__None':
			raise ValidationError('This field is required.')


	def validate_SpoNationalID(form,field):
		SpoNationalID 	= form.SpoNationalID.data
		SpouseIDType	= str(request.form['SpouseIDType'])
		ID 				= request.form['ID']
		validateIDNumber(ID, SpouseIDType, SpoNationalID)


	def validate_IDNumber(form,field):
		IDNumber 	= form.IDNumber.data
		IDType 		= str(request.form['IDType'])
		ID 			= request.form['ID']
		validateIDNumber(ID, IDType, IDNumber)


	def validate_YearEmployed(form,field):
		if request.form.get('YearEmployed'):
			print 'is year? ',request.form.get('YearEmployed')
			isCheckYear(form.YearEmployed.data)


	def validate_BlockReason(form, field):

		Block 		=	request.form.get('Block')
		BlockReason =	request.form.get('BlockReason')

		if Block == 'Y':
			if not BlockReason:
				raise ValidationError("This field is required.")
		else:
			if BlockReason:
				raise ValidationError("This field must be blank.")

	def validate_LengthOfService(form,field):
		LengthOfService = form.LengthOfService.data
		if LengthOfService:
			if not mkttool.isInteger(LengthOfService):
				raise ValidationError("Must be number for monthly basis counting.")
				
		if isCBCEnquiry():
			if not LengthOfService:
				raise ValidationError("This field is required.")

	# def validate_EmployerAddress(form,field):
	# 	FieldData = request.form['EmployerAddress']
	# 	if isAllowCBCEnquiry == "Y":
	# 		if not FieldData:
	# 			raise ValidationError("This field is required.")
	
	def validate_NumberOfMember(form,field):
		FieldData = request.form.get('NumberOfMember')
		try:
			if FieldData:
				int(FieldData)
		except:
			raise ValidationError("This field allows only numeric only.")
	
	def validate_ActiveMember(form,field):
		FieldData = request.form.get('ActiveMember')
		try:
			if FieldData:
				int(FieldData)
		except:
			raise ValidationError("This field allows only numeric only.")
	
	def validate_Position(form,field):
		FieldData = request.form.get('Position')
		if isCBCEnquiry():
			if not FieldData or FieldData == '__None':
				raise ValidationError("This field is required.")

	def validate_EmployerName(form,field):
		FieldData = request.form.get('EmployerName',"")
		if isCBCEnquiry():
			if not FieldData or FieldData == '__None':
				raise ValidationError("This field is required.")

	def validate_EmployerProvince(form,field):
		FieldData = request.form.get('EmployerProvince',"")
		if isCBCEnquiry():
			if not FieldData or FieldData == '__None':
				raise ValidationError("This field is required.")

	def validate_EmployerDistrict(form,field):
		FieldData = request.form.get('EmployerDistrict',"")
		if isCBCEnquiry():
			if not FieldData or FieldData == '__None':
				raise ValidationError("This field is required.")

	def validate_EmployerCommune(form,field):
		FieldData = request.form.get('EmployerCommune')
		if isCBCEnquiry():
			if not FieldData or FieldData == '__None':
				raise ValidationError("This field is required.")

	def validate_EmployerVillage(form,field):
		FieldData = request.form.get('EmployerVillage')
		if isCBCEnquiry():
			if not FieldData or FieldData == '__None':
				raise ValidationError("This field is required.")
	def validate_NonIndNameOfEntity(form,field):
		CusType 	 = request.form.get('CusType')
		NameOfEntity = request.form.get('NonIndNameOfEntity')
		if CusType=="NIN":
			if not NameOfEntity:
				raise ValidationError('This field is required in Non-Individual Info customer')
	def validate_NonIndAbbreviationName(form,field):
		CusType 	 = request.form.get('CusType')
		AbbreviationName = request.form.get('NonIndAbbreviationName')
		if CusType=="NIN":
			if not AbbreviationName:
				raise ValidationError('This field is required in Non-Individual Info customer')
	def validate_NonIndRegisteredYear(form,field):
		CusType 	 = request.form.get('CusType')
		RegisteredYear = request.form.get('NonIndRegisteredYear')
		if CusType=="NIN":
			if not RegisteredYear:
				raise ValidationError('This field is required in Non-Individual Info customer')
	def	validate_NonIndAddress(form,field):
		CusType = request.form.get('CusType')
		NoneIndiAddress = request.form.get('NonIndAddress')
		if CusType=="NIN":
			if not NoneIndiAddress:
				raise ValidationError('This field is required in Non-Individual Info customer')
	@staticmethod
	def setVisible():
		ListField = [("ACMember"), ("CustomerType"), ("YearEmployed"), ("CompanyName")]

		POCusObj = MKT_PO_CUSTOMER.query.first()
		GroupObj = MKT_GROUP.query.first()

		if not GroupObj:
			ListField.append(('VBID'))
			ListField.append(('GroupID'))

		if not POCusObj:
			ListField.append(('PotentialCustomer'))

		return ListField

	@staticmethod
	def setDisable():
		Fields = []
		if request.form:
			MaritalStatus = str(request.form['MaritalStatus'])
			if MaritalStatus != "1" and MaritalStatus != "":
				Fields = [	('SpoFirstNameEn'),
							('SpoLastNameEn'),
							('SpoFirstNameKh'),
							('SpoLastNameKh'),
							('SpoDateOfBirth'),
							('SpoNationalID')]
		return Fields

	@staticmethod
	def listField():
		Fields = ["ID", "LastNameEn", "FirstNameEn", "LastNameKh", "FirstNameKh", 
				  "Gender", "DateOfBirth", "Branch", "Officer","ProvinceOfBirth"]
		return Fields

	@staticmethod
	def importantField():
		return ['ID','LastNameEn','FirstNameEn']

	@staticmethod
	def moneyField():
		controls_list 	= [	("PrimaryInc", "Currency"), ("SecondaryInc", "Currency"), ("HouseholdExp", "Currency"),
							("PersonalExp", "Currency"), ("TotalExpenses", "Currency"),
							("EstimatedValue", "Currency"), ("SavingBal", "Currency"), ("OutstandingBal", "Currency"),
							("MonthlyRep", "Currency"), ("OutstandingBal2", "Currency"), ("MonthlyRep2", "Currency")]
		return [["MonthlyIncome","Currency"],
				["AverageMonthlyInc","Currency"],
				["AverageMonthlyExp","Currency"]]+controls_list

	@staticmethod
	def reverseRec():
		ID = g.formID
		OutstandingAmount = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ContractCustomerID==ID).first()
		if OutstandingAmount:
			Outstanding = int(OutstandingAmount.OutstandingAmount)
			if Outstanding > 0:
				return True,msg_error+"Customer has loan active. Can not reverse"	
		return True,""


	@staticmethod
	def formatMoney():

		return ["MonthlyIncome", "AverageMonthlyInc", "AverageMonthlyExp", "PrimaryInc", "SecondaryInc",
				"HouseholdExp", "PersonalExp", "TotalExpenses", "EstimatedValue", "SavingBal",
				"OutstandingBal", "MonthlyRep", "OutstandingBal2", "MonthlyRep2"], "Currency"

	# @staticmethod
	# def setVisible():
	# 	listVisibleField = []
	# 	ShowFieldList 		= mktsetting.getAppSetting('CustomerField').splitlines()
	# 	if ShowFieldList:
	# 		ShowFieldList.extend(list_exclude)
	# 		form = FRM_CUSTOMER()
	# 		listVisibleField = [ (str(row.id) )for row in form if not row.id in ShowFieldList]
	# 	# for f in form:
	# 	# 	print "id",f.id
	# 	# print 'listVisibleField:',listVisibleField
	# 	# print ShowFieldList
	# 	return listVisibleField #these fields are visible, but data still accessible


	@staticmethod
	def setWidth():
		control_list = [("Salutation", len3),
						("Gender", len3),
						("AsGurantor", len1),
						("Resident",len1),
						("SelfEmployed",len1),
						("DateOfBirth", len3),
						("HouseNo", len3),
						("SpoDateOfBirth",len3),
						('SpouseIDIssueDate',len3),
						("MaritalStatus", len2),
						("LengthOfService", len1),
						("CompanyHouseNo", len3),
						("PayrollDate", len3),
						("NumberBusinessAct", len1),
						("MemberOccupyActivity", len1),
						("ActivityExperPeriod", len1),
						("NumberOfLoanUsed", len1),
						("YearEmployed", len1),
						('HouseOwnership',len3),
						('NumberOfMember',len1)
						]
		return control_list

	@staticmethod
	def hotSelectField():
		hotfield=[]

		fielddisplay="DistrictOfBirth,#CommuneOfBirth"
		varname="ProvinceID:$('#ProvinceOfBirth').val()"
		fun=["ProvinceOfBirth", varname ,fielddisplay, "/Morakot/DistrictID", "change"]
		hotfield.append(fun)

		fielddisplay="CommuneOfBirth"
		varname="DistrictID:$('#DistrictOfBirth').val()"
		fun=["DistrictOfBirth", varname ,fielddisplay, "/Morakot/CommuneID", "change"]
		hotfield.append(fun)

		fielddisplay="District,#Commune,#Village"
		varname="ProvinceID:$('#Province').val()"
		fun=["Province", varname ,fielddisplay, "/Morakot/DistrictID", "change"]
		hotfield.append(fun)

		fielddisplay="Commune,#Village"
		varname="DistrictID:$('#District').val()"
		fun=["District", varname ,fielddisplay, "/Morakot/CommuneID", "change"]
		hotfield.append(fun)

		fielddisplay="Village"
		varname="CommuneID:$('#Commune').val()"
		fun=["Commune", varname ,fielddisplay, "/Morakot/VillageID", "change"]
		hotfield.append(fun)

		fielddisplay="EmployerDistrict,#EmployerCommune,#EmployerVillage"
		varname="ProvinceID:$('#EmployerProvince').val()"
		fun=["EmployerProvince", varname ,fielddisplay, "/Morakot/DistrictID", "change"]
		hotfield.append(fun)

		fielddisplay="EmployerCommune,#EmployerVillage"
		varname="DistrictID:$('#EmployerDistrict').val()"
		fun=["EmployerDistrict", varname ,fielddisplay, "/Morakot/CommuneID", "change"]
		hotfield.append(fun)

		fielddisplay="EmployerVillage"
		varname="CommuneID:$('#EmployerCommune').val()"
		fun=["EmployerCommune", varname ,fielddisplay, "/Morakot/VillageID", "change"]
		hotfield.append(fun)

		# fielddisplay="Officer"
		# varname="BranchID:$('#Branch').val()"
		# fun=["Branch", varname ,fielddisplay, "/Morakot/loadOfficerByBranch", "click"]
		# hotfield.append(fun)

		fielddisplay="Industry"
		varname="SectorID:$('#Sector').val()" 
		fun=["Sector", varname ,fielddisplay, "/Morakot/loadIndustryBySector", "change"]
		hotfield.append(fun)

		# fielddisplay="Gender"
		# varname="Salutation:$('#Salutation').val()"
		# fun=["Salutation", varname ,fielddisplay, "/Morakot/CustomergetGender", "change"]
		# hotfield.append(fun)

		fielddisplay="GroupID"
		varname="VBID:$('#VBID').val()" 
		fun=["VBID", varname ,fielddisplay, "/Morakot/GroupID", "click"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotField():
		hotfield=[]

		fielddisplay 	= "$('#FirstNameEn').val(data.FirstNameEn)"
		fielddisplay 	+= "; $('#LastNameEn').val(data.LastNameEn)"
		fielddisplay 	+= "; $('#FirstNameKh').val(data.FirstNameKh)"
		fielddisplay 	+= "; $('#LastNameKh').val(data.LastNameKh)"
		fielddisplay 	+= "; $('#Gender').select2('data', {'id':data.Gender,'text':data.Gender})"
		fielddisplay 	+= "; $('#Mobile1').val(data.Mobile1)"
		fielddisplay 	+= "; $('#Mobile2').val(data.Mobile2)"
		fielddisplay 	+= "; $('#Mobile3').val(data.Mobile3)"
		fielddisplay 	+= "; $('#Email').val(data.Email)"

		fielddisplay 	+= "; $('#Salutation').select2('data',{'id':data.Salutation,'text':data.Salutation})"
		# fielddisplay 	+= ";$('#Officer').select2('data', {'id':data.MarketingOfficer,'text':data.Officer});"
	
		if checkContentType()=='html' and not 'API' in request.url :
			fielddisplay 	+= ";$('#Province').append('<option value='+data.Province+'>'+data.ProvinceDesc+'</option>')"
			fielddisplay 	+= ";$('#District').append('<option value='+data.District+'>'+data.DistrictDesc+'</option>')"
			fielddisplay 	+= ";$('#Commune').append('<option value='+data.Commune+'>'+data.CommuneDesc+'</option>')"
			fielddisplay 	+= ";$('#Village').append('<option value='+data.Village+'>'+data.VillageDesc+'</option>')"
			

		fielddisplay 	+= ";$('#HouseNo').val(data.HouseNo)"
		fielddisplay 	+= ";$('#Street').val(data.Street)"
		fielddisplay 	+= ";$('#Province').select2('data', {'id':data.Province,'text':data.ProvinceDesc})"
		fielddisplay 	+= ";$('#District').select2('data', {'id':data.District,'text':data.DistrictDesc})"
		fielddisplay 	+= ";$('#Commune').select2('data', {'id':data.Commune,'text':data.CommuneDesc})"
		fielddisplay 	+= ";$('#Village').select2('data', {'id':data.Village,'text':data.VillageDesc})"
		varname 		= "PotentialCustomerID:$('#PotentialCustomer').val()"
		fun 			= ["PotentialCustomer", varname, fielddisplay, "/Morakot/GetPotentialCustomer", "change" ]
		hotfield.append(fun)

		fielddisplay = "$('#Gender').select2('data', {'id':data.gender,'text':data.gender})"
		varname = "SalutationID:$('#Salutation').val()"
		fun = ['Salutation', varname, fielddisplay,'/Morakot/SalutationID','change']
		hotfield.append(fun)

		# fielddisplay = "$('#SpoOccupation').prop('disabled', data.Bool); "
		# fielddisplay = "$('input[name=CoNationalID]').attr('readonly', data.Bool); "
		fielddisplay = "$('input[name=SpoFirstNameEn]').attr('readonly', data.Bool); "
		fielddisplay += "$('input[name=SpoLastNameEn]').attr('readonly', data.Bool); "
		fielddisplay += "$('input[name=SpoFirstNameKh]').attr('readonly', data.Bool); "
		fielddisplay += "$('input[name=SpoLastNameKh]').attr('readonly', data.Bool); "
		fielddisplay += "$('input[name=SpoDateOfBirth]').attr('readonly', data.Bool); "
		fielddisplay += "$('input[name=SpoNationalID]').attr('readonly', data.Bool); "


		varname = "MaritalStatus:$('#MaritalStatus').val()"
		fun = ["MaritalStatus", varname, fielddisplay, "/Morakot/CustomerSpouse", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Officer').select2('data', {'id':data.OfficerID,'text':data.OfficerName})"

		fielddisplay 	+= ";$('#ProvinceOfBirth').append('<option value='+data.ProvinceID+'>'+data.ProvinceDesc+'</option>')"
		fielddisplay 	+= ";$('#DistrictOfBirth').append('<option value='+data.DistrictID+'>'+data.DistrictDesc+'</option>')"
		fielddisplay 	+= ";$('#CommuneOfBirth').append('<option value='+data.CommuneID+'>'+data.CommuneDesc+'</option>')"
		fielddisplay 	+= ";$('#ProvinceOfBirth').select2('data', {'id':data.ProvinceID,'text':data.ProvinceDesc})"
		fielddisplay 	+= ";$('#DistrictOfBirth').select2('data', {'id':data.DistrictID,'text':data.DistrictDesc})"
		fielddisplay 	+= ";$('#CommuneOfBirth').select2('data', {'id':data.CommuneID,'text':data.CommuneDesc})"

		fielddisplay 	+= ";$('#Province').append('<option value='+data.ProvinceID+'>'+data.ProvinceDesc+'</option>')"
		fielddisplay 	+= ";$('#District').append('<option value='+data.DistrictID+'>'+data.DistrictDesc+'</option>')"
		fielddisplay 	+= ";$('#Commune').append('<option value='+data.CommuneID+'>'+data.CommuneDesc+'</option>')"
		fielddisplay 	+= ";$('#Village').append('<option value='+data.VillageID+'>'+data.VillageDesc+'</option>')"
		fielddisplay 	+= ";$('#Province').select2('data', {'id':data.ProvinceID,'text':data.ProvinceDesc})"
		fielddisplay 	+= ";$('#District').select2('data', {'id':data.DistrictID,'text':data.DistrictDesc})"
		fielddisplay 	+= ";$('#Commune').select2('data', {'id':data.CommuneID,'text':data.CommuneDesc})"
		fielddisplay 	+= ";$('#Village').select2('data', {'id':data.VillageID,'text':data.VillageDesc})"
		varname = "VBID:$('#VBID').val(), GroupID:$('#GroupID').val()"
		fun = ["GroupID", varname, fielddisplay, "/Morakot/AddressFromVB", "change"]
		hotfield.append(fun)

		# auto complete net total income
		fielddisplay 	= "$('#MonthlyIncome').val(data.NetTotalIncome);"
		varname 		=  "PrimaryFreq:$('#PrimaryFreq').val(),\
							PrimaryIncome:$('#PrimaryInc').val(),\
							SecondaryFreq:$('#SecondaryFreq').val(),\
							SecondaryIncome:$('#SecondaryInc').val(),\
							Currency:$('#Currency').val()"
		fun 			= ["PrimaryInc", varname, fielddisplay, "/Morakot/GetNetTotalIncome", "blur"]
		hotfield.append(fun)

		fun 			= ["SecondaryInc", varname, fielddisplay, "/Morakot/GetNetTotalIncome", "blur"]
		hotfield.append(fun)

		fun 			= ["PrimaryFreq", varname, fielddisplay, "/Morakot/GetNetTotalIncome", "change"]
		hotfield.append(fun)

		fun 			= ["SecondaryFreq", varname, fielddisplay, "/Morakot/GetNetTotalIncome", "change"]
		hotfield.append(fun)

		fun 			= ["Currency", varname, fielddisplay, "/Morakot/GetNetTotalIncome", "change"]
		hotfield.append(fun)

		# set hotfield for yes or no
		fielddisplay 	= "$('#SelfEmployed').select2('data', {'id':data.ID,'text':data.Desc})"
		varname 		= "SourceOfIncome:$('#SourceOfIncome').val()"
		fun 			= ['SourceOfIncome', varname, fielddisplay, "/Morakot/GetSelfEmployed", "change"]
		hotfield.append(fun)

		# auto complete total expense
		fielddisplay 	= "$('#TotalExpenses').val(data.TotalExpenses);"
		varname 		=  "Household:$('#HouseholdExp').val(),\
							Personal:$('#PersonalExp').val(),\
							Currency:$('#Currency').val()"
		fun 			= ["HouseholdExp", varname, fielddisplay, "/Morakot/GetTotalExpenses", "blur"]
		hotfield.append(fun)

		fun 			= ["PersonalExp", varname, fielddisplay, "/Morakot/GetTotalExpenses", "blur"]
		hotfield.append(fun)

		fun 			= ["Currency", varname, fielddisplay, "/Morakot/GetTotalExpenses", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def IsAcceptOverride():

		Override 	= False
		Msg 		= ""
		ID 			= request.form['ID']
		DateOfBirth = request.form['DateOfBirth']
		CurrentAge = mktdate.getAge(DateOfBirth)
		if CurrentAge < 18:
			Override 	= True
			Msg 		= "This customer is too young only %s years old. " %CurrentAge
		
		FirstNameEn 	=	request.form['FirstNameEn']
		LastNameEn 		=	request.form['LastNameEn']
		Gender 			=	request.form['Gender']
		ListID 			=	""
		FullName 		=	"%s %s" %(LastNameEn, FirstNameEn)

		""" 
			Potential Duplicate Customer:
				1. Name and Gender is the same
				2. Name and DOB is the same
			=> This will allow user to accept override
			Example:
				No 	Name 		Gender 		DOB 			Identification
				---------------------------------------------------------------------
				1 	Jonh Sena 	Male 		1980-02-10		010123456
				2	Sena Jonh	Female 		1980-02-10		010987654
				3	Jonh Sena 	Male 		1980-09-09		010123987
			
			=> Customer 1 and 2 is similar because Name and DOB are the same
			=> Customer 1 and 3 is duplicate because Name and Gender are the same
			---------------------------------------------------------------------
			* For exact duplicate customer, see custom_Customer()
		"""
		CustomerObj 	=	MKT_CUSTOMER.query.\
							filter(
									or_(
										and_(
											or_(
												and_(
													func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+FirstNameEn.upper()+'%'),
													func.upper(MKT_CUSTOMER.LastNameEn).like('%'+LastNameEn.upper()+'%')
												),
												and_(
													func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+LastNameEn.upper()+'%'),
													func.upper(MKT_CUSTOMER.LastNameEn).like('%'+FirstNameEn.upper()+'%'),
												)
											),
											MKT_CUSTOMER.Gender == Gender,
										),
										and_(
											or_(
												and_(
													func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+FirstNameEn.upper()+'%'),
													func.upper(MKT_CUSTOMER.LastNameEn).like('%'+LastNameEn.upper()+'%')
												),
												and_(
													func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+LastNameEn.upper()+'%'),
													func.upper(MKT_CUSTOMER.LastNameEn).like('%'+FirstNameEn.upper()+'%'),
												)
											),
											MKT_CUSTOMER.DateOfBirth == DateOfBirth
										)
									)
								).\
							filter(MKT_CUSTOMER.ID != ID).\
							order_by(MKT_CUSTOMER.Authorizeon.desc()).\
							limit(5)

		if CustomerObj.first():

			for item in CustomerObj:
				if item.Block == "N":
					ListID += '<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a> ' %(CUSTOMER_LINK,item.ID,CUSTOMER_LINK,item.ID,item.ID)

			if ListID:
				
				Br = "<br>" if Msg else ''
				Override 	= 	True
				Msg 		+= 	'%sThe customer you are trying to create is similar to customer(s) %s.<br>' %(Br, ListID)

			ListID = ''
			for item in CustomerObj:
				if item.Block == "Y":
					ListID += '<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a> ' %(CUSTOMER_LINK,item.ID,CUSTOMER_LINK,item.ID,item.ID)

			if ListID:
				Override 	= 	True
				Msg 		+= 	'The customer you are trying to create is similar to black-list customer(s) %s.<br>' %(ListID)

		Msg += "Do you want to procceed?"
