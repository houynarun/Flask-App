from app.mktcore.imports 	import *
from .forms 				import *
from .forms_my 				import *
from app.CustomerType.views import *
from app.Collateral.models  import *
from app.PotentialCustomer.views import *
from .creditsummary 			import *
from app.mktcore.globalfunction import StatusCodes
from app.mktcore.authentication import GetAPIReturnFormat,MesssageStandard

import app.tools.mktsetting 			as mktsetting

LocationSetting 	= mktsetting.getAppSetting('LANGUAGE')

if LocationSetting == 'MYANMAR':
	registerCRUD(admin, '/Customer', 'Customer',FRM_CUSTOMER_MY, [MKT_CUSTOMER])
else:
	registerCRUD(admin, '/Customer', 'Customer',FRM_CUSTOMER, [MKT_CUSTOMER])

@app.route('/Morakot/GetAllOfficerCustomer/', methods=['GET'])
@app.route('/Morakot/API/GetAllOfficerCustomer/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def GetAllOfficerCustomer():
	UserLogin 	 = session['getLogInID']
	CustomerList = []
	CustomerDict = {}
	CustomerData = {}
	CustomerListData = []
	ApiStatus 		 = ""
	Messages  		 = [""]
	OfficerObj 		 = MKT_OFFICER.query.filter(MKT_OFFICER.UserID==UserLogin).first()
	if OfficerObj:
		CustomerObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.Officer==OfficerObj.ID).all()
		if CustomerObj:
			for cu in CustomerObj:
				if cu.LastLocation:
					CustomerList.append(cu.ID)
	if CustomerList:
		for CustomerID in CustomerList:
			CustomerQuery = MKT_CUSTOMER.query.get(CustomerID)
			LocationSplit = CustomerQuery.LastLocation.split()
			Longitude 	  = float(LocationSplit[1])
			Latitude 	  = float(LocationSplit[0])
			Province = ""
			District = ""
			Commune  = ""
			Village  = ""
			ProvinceObj = MKT_PROVINCE.query.get(CustomerQuery.Province)
			if ProvinceObj:
				Province = ProvinceObj.Description
			DistrictObj = MKT_DISTRICT.query.get(CustomerQuery.District)
			if DistrictObj:
				District = DistrictObj.Description
			CommuneObj = MKT_COMMUNE.query.get(CustomerQuery.Commune)
			if CommuneObj:
				Commune = CommuneObj.Description
			VillageObj = MKT_VILLAGE.query.get(CustomerQuery.Village)
			if VillageObj:
				Village = VillageObj.Description
			ApiStatus 		 = StatusCodes.ok()			
			CustomerListData.append({
				"id"           :CustomerID,
				"first_name_en":CustomerQuery.FirstNameEn,		
				"last_name_en" :CustomerQuery.LastNameEn,
				"gender"       :CustomerQuery.Gender,
				"date_of_birth":CustomerQuery.DateOfBirth,
				"current_address":str(Province+", "+District+", "+Commune+", "+Village),
				"phone"        :CustomerQuery.Mobile1,
				"longitude"	   :Longitude,
				"latitude"     :Latitude,
				"url"		   :"/Customer/?ID="+CustomerID,
				"type_url" 	   :"Form"
			})
		CustomerDict.update({"customers":CustomerListData})
		CustomerDict.update(GetUrlDict())
		CustomerData.update({"customer":CustomerDict})
	if not ApiStatus:
		ApiStatus = StatusCodes.not_found()
		Messages  = ["No customer has been found."]
		CustomerDict.update({"customers":CustomerListData})
		CustomerDict.update(GetUrlDict())
		CustomerData.update({"customer":CustomerDict})
	return GetAPIReturnFormat(Header="Get all customer by officer",Data=CustomerData,RecordID="",Status=ApiStatus,Type="Map",Message=Messages)

@app.route('/Morakot/FindCustomers/', methods=['GET'])
@app.route('/Morakot/API/FindCustomers/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def FindCustomers():
	# AllCustomer,OfficerCustomer
	CustomerID 	= request.args.get('ID','')
	CustomerListData 	= []
	CustomerDict 		= {}
	CustomerData 		= {}
	ApiStatus = ""
	Messages  = [""]
	CustomerObj = MKT_CUSTOMER.query.get(CustomerID)
	if CustomerObj: 
		Province = ""
		District = ""
		Commune  = ""
		Village  = ""
		ProvinceObj = MKT_PROVINCE.query.get(CustomerObj.Province)
		if ProvinceObj:
			Province = ProvinceObj.Description
		DistrictObj = MKT_DISTRICT.query.get(CustomerObj.District)
		if DistrictObj:
			District = DistrictObj.Description
		CommuneObj = MKT_COMMUNE.query.get(CustomerObj.Commune)
		if CommuneObj:
			Commune = CommuneObj.Description
		VillageObj = MKT_VILLAGE.query.get(CustomerObj.Village)
		if VillageObj:
			Village = VillageObj.Description
		
		if CustomerObj.LastLocation:
			LocationSplit = CustomerObj.LastLocation.split()
			Longitude 	  = float(LocationSplit[1])
			Latitude 	  = float(LocationSplit[0])
			ApiStatus = StatusCodes.ok()
			CustomerListData.append({
				"id"           :CustomerID,
				"first_name_en":CustomerObj.FirstNameEn,		
				"last_name_en" :CustomerObj.LastNameEn,
				"gender"       :CustomerObj.Gender,
				"date_of_birth":CustomerObj.DateOfBirth,
				"current_address":str(Province+", "+District+", "+Commune+", "+Village),
				"phone"        :CustomerObj.Mobile1,
				"longitude"	   :Longitude,
				"latitude"     :Latitude,
				"url"		   :"/Customer/?ID="+CustomerID,
				"type_url" 	   :"Form"
			})
			CustomerDict.update({"customers":CustomerListData})
			CustomerDict.update(GetUrlDict())
			CustomerData.update({"customer":CustomerDict})
		else:
			ApiStatus = StatusCodes.not_found()
			Messages = ["Customer has no location."]
			CustomerDict.update({"customers":CustomerListData})
			CustomerDict.update(GetUrlDict())
			CustomerData.update({"customer":CustomerDict})
	if not ApiStatus:
		ApiStatus = StatusCodes.not_found()
		Messages = ["No customer has been found."]
		CustomerDict.update({"customers":CustomerListData})
		CustomerDict.update(GetUrlDict())
		CustomerData.update({"customer":CustomerDict})
	return GetAPIReturnFormat(Header="Filter Customer",Data=CustomerData,RecordID="",Status=ApiStatus,Type="Map",Message=Messages)

@app.route('/Morakot/SearchCustomerOfficer/', methods=['GET'])
@app.route('/Morakot/API/SearchCustomerOfficer/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def SearchCustomerOfficer():
	# AllCustomer,OfficerCustomer
	DefaultBranch 	= mktuser.getCurrentBranch()
	SearchBy		= request.args.get('Search')
	search 			= request.args.get('q')
	action 			= request.args.get('action') if 'action' in request.args else ""
	NAMES 			= []
	FilterCondition = []
	UserLogin 	 	= session['getLogInID']
	OfficerID 		= ""
	OfficerObj 		= MKT_OFFICER.query.filter(MKT_OFFICER.UserID==UserLogin).first()
	if OfficerObj:
		OfficerID = OfficerObj.ID
	if not search.isspace():
		search = search.strip()
		if not search is None:
			if action == "view":
				FilterCondition.append(MKT_CUSTOMER.ID == search)
			else:
				if SearchBy=="AllCustomer":
					FilterCondition.append(or_(MKT_CUSTOMER.ID.like('%'+search.upper()+'%'),func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+search.upper()+'%'),func.upper(MKT_CUSTOMER.LastNameEn).like('%'+search.upper()+'%')))
				elif SearchBy =="OfficerCustomer":
					FilterCondition.append(MKT_CUSTOMER.Officer==OfficerID)
					FilterCondition.append(or_(MKT_CUSTOMER.ID.like('%'+search.upper()+'%'),func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+search.upper()+'%'),func.upper(MKT_CUSTOMER.LastNameEn).like('%'+search.upper()+'%')))
			CustomerObj = 	MKT_CUSTOMER.query.filter(*FilterCondition).order_by(MKT_CUSTOMER.ID)
			for row in CustomerObj:
				dic = {"id":row.ID, "text":"%s - %s %s" %(row.ID,row.FirstNameEn,row.LastNameEn)}
				NAMES.append(dic)
	# app.logger.debug(NAMES)
	return jsonify(items = NAMES)

def GetUrlDict():
	DictUrl = {}
	DictUrl.update({
		"url_filter" 			:"/GetAllOfficerCustomer/",
		"url_find"				:"/FindCustomers/?ID=",
		"url_search"            :"/SearchCustomerOfficer/?Search=&q=",
		"filter_params"			:[
								  {"label":"Officer Customers","value":"OfficerCustomer"},
								  {"label":"All Customers","value":"AllCustomer"}
								]
		})
	return DictUrl