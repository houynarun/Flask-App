from app 	import db
from datetime import datetime


from app.mktcore.imports 					import *
from app.Workflow.PreSetting.models 		import * 
from app.Workflow.Signatory.models			import *
from app.Workflow.Approved.models		    import *
from app.Workflow 							import mktapirequest
from app.Upload.exportimport 				import *
from app.mktcore.formmodel 					import * 
from flask 									import redirect
from collections 							import OrderedDict
from app.Workflow.Methods					import *
from sqlalchemy 							import or_,and_
import datetime
import app.tools.mktnotification 	 		as mktnotification
import app.tools.mktdate	 				as mktdate
import app.tools.mktaudit 					as mktaudit
import app.tools.user 						as mktuser
import app.tools.mktsetting 				as mktsetting
import app.tools.mktaddress 				as mktaddress
import app.tools.mktmoney 					as mktmoney
from   app.tools.mktloan 					import toBaseCurrency
from   app.tools.loantools.rescheduletools	import getRepaymentAnnuity
# import app.tools.mktloan 					as mktloan
import requests
from app.mktcore.globalfunction				import *
from app.mktcore.customform 				import *
from app.Customer.models 					import *
from app.Collateral.models 					import *
from app.CoPropertyType.models 				import *
from app.CollateralType.models 				import *
from app.LoanProduct.models 				import *
from app.RepaymentSchedule.models 			import *
from app.Position.models	import *
from app.Country.models 					import *
from app.Education.models 					import *
from app.Position.models 					import *
from app.IdType.models 						import *
from app.PD.models 							import *
from app.LoanPurpose.models 				import MKT_LOAN_PURPOSE
from app.tools.mktsetting 					import getAccSetting
try:
	BasedCurrency 	= getAccSetting().BaseCurrency
except Exception as e:
	BaseCurrency = ''


class FRM_CUSTOMER_INFORMATION(exform):
	pass

class CLS_Customer_Information(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):
		ID 				=	request.args.get('ID')
		LoanApplicationObj 		= 	MKT_LOAN_APPLICATION_INAU.query.get(ID)
		self.form 				= 	FRM_CUSTOMER_INFORMATION
		self.customType 		= 	'Custom'


		#Customer
		CustomerObjDict 		= 	{}
		CuTotalNetIncome 		=	0

		#Collateral 
		CollateralDic 			= 	{}
		CoMinCollateralValue 	=	0
		CoMinCollateralValueFormat = '$0'

		#LoanContractActiveDic
		LoanContractActiveDic 	= 	{}
		TotalMonthlyRepaymentAll = '$0'

		# LoanContractInactiveDic
		LoanContractInactiveDic = 	{}

		#Loan Application
		LoanApplicationDic 		= 	{}
		LAApprovedAmount 		=	0
		TotalMonthlyRepaymentApplication = 0
		CurrentApproveAmount 	=	0
		CurrentMonthlyRep   	=	0


		SystemBankDate 			= 	str(mktdate.getBankDate())

		if LoanApplicationObj:
			CurrentApproveAmount 	=	toBaseCurrency(float(LoanApplicationObj.Amount),LoanApplicationObj.Currency)
			CurrentInterestRate 	=	LoanApplicationObj.InterestRate
			CurrentTerm 			=	LoanApplicationObj.Term
			CurrentMonthlyRep 		=	getRepaymentAnnuity(Principal = CurrentApproveAmount, Interest = CurrentInterestRate, Tenor = CurrentTerm)
			#Customer Information
			CustomerInfoObj 	= MKT_CUSTOMER.query.get(LoanApplicationObj.LNCustomerID)
			MaritalStatus = {
								'1': 'Married',
								'2': 'Single',
								'3':'Divorced',
								'4':'Widow',
								'5':'Widower',
								'6':'Separated',
								'7':'Defacto',
								'8':'Unknown'
							}
			if CustomerInfoObj:
				#Customer Information

				ObjCountry 			=	MKT_COUNTRY.query.get(CustomerInfoObj.CountryOfBirth)
				CuIDTypeObj			=	MKT_ID_TYPE.query.get(CustomerInfoObj.IDType)
				CuEducationObj 		=	MKT_EDUCATION.query.get(CustomerInfoObj.EducationLevel)
				CuOccupationObj		=	MKT_POSITION.query.get(CustomerInfoObj.Position)
				CustomerInfoDic 	=	{}
				CuName 				= 	'%s - %s'%(CustomerInfoObj.FirstNameEn ,CustomerInfoObj.LastNameEn)
				CuAge 				= 	mktdate.getAge(DOB=CustomerInfoObj.DateOfBirth)
				CuAddress 			= 	mktaddress.getAddress(ProvinceID = CustomerInfoObj.Province,
											DistrictID = CustomerInfoObj.District,
											CommuneID  = CustomerInfoObj.Commune,
											VillageID  = CustomerInfoObj.Village,
											HouseNo    = CustomerInfoObj.HouseNo,
											Street     = CustomerInfoObj.Street)
				CuCity 				=	CustomerInfoObj.City
				CuCountry			=	ObjCountry.Description if ObjCountry.Description else 'N/A'
				CuPhone 			=	CustomerInfoObj.Mobile1 if CustomerInfoObj.Mobile1 else 'N/A'
				CuIDType			=	CuIDTypeObj.Description if CuIDTypeObj.Description else 'N/A'
				CuNationality 		=	CuCountry
				CuIDNumber 			=	CustomerInfoObj.IDNumber 
				CuMaritalStatus		=	MaritalStatus.get(CustomerInfoObj.MaritalStatus,'N/A')
				CuFamilyMember		=	CustomerInfoObj.NumberOfMember if CustomerInfoObj.NumberOfMember else 'N/A'
				CuEducation			=	CuEducationObj.Description if CuEducationObj else 'N/A'
				CuOccupation 		=	CuOccupationObj.Description if CuOccupationObj else 'N/A'
				CuIncome 			=	mktmoney.toMoney(float(CustomerInfoObj.MonthlyIncome), 
																mktmoney.getCurrencyObj(CustomerInfoObj.Currency), 1)
				CuExpenses 			=	mktmoney.toMoney(float(CustomerInfoObj.TotalExpenses), 
																mktmoney.getCurrencyObj(CustomerInfoObj.Currency), 1)
				CuTotalNetIncome 	=	float(CustomerInfoObj.MonthlyIncome)-float(CustomerInfoObj.TotalExpenses)
				CuNetIncome 		= 	mktmoney.toMoney(CuTotalNetIncome, 
														mktmoney.getCurrencyObj(CustomerInfoObj.Currency), 1)

				CustomerInfoDic.update({
					'cu_name':CuName,'cu_age':CuAge,'cu_address':CuAddress,'cu_city':CuCity,
					'cu_country':CuCountry,'cu_id_type':CuIDType,'cu_nationality':CuNationality,
					'cu_marital_status':CuMaritalStatus,'cu_family_member':CuFamilyMember,
					'cu_education':CuEducation,'cu_occupation':CuOccupation,'cu_income':CuIncome,
					'cu_expenses':CuExpenses,'cu_net_income':CuNetIncome,'phone':CuPhone,'cu_id_number':CuIDNumber,
					'cu_link':'/CustomerCentre/?ID=%s'%CustomerInfoObj.ID
					})
				#End Customer Information

				#Assets and Liabilties

				#Assets
				CuAssetsDic 		=	{}
				CuAssetsType 		=	CustomerInfoObj.AssetType if CustomerInfoObj.AssetType else 'N/A'
				CuEstimatedValue 	=	mktmoney.toMoney(float(CustomerInfoObj.EstimatedValue), mktmoney.getCurrencyObj(CustomerInfoObj.Currency), 1)
				CuBankAccountType 	=	CustomerInfoObj.BankAccountType if CustomerInfoObj.BankAccountType else 'N/A'
				CuSavingBal			=	mktmoney.toMoney(float(CustomerInfoObj.SavingBal), mktmoney.getCurrencyObj(CustomerInfoObj.Currency), 1)
				CuTotalAssets 		= 	mktmoney.toMoney(float(CustomerInfoObj.SavingBal)+float(CustomerInfoObj.EstimatedValue), mktmoney.getCurrencyObj(CustomerInfoObj.Currency), 1)

				CuAssetsDic.update({
					'cu_assets_type':CuAssetsType,
					'cu_estimated_value':CuEstimatedValue,
					'cu_bank_account_type':CuBankAccountType,
					'cu_saving_bal':CuSavingBal,
					'cu_total_assets':CuTotalAssets
					})
				#End Assets

				#Liability
				CuLiabilityDic		=	{}
				CuLenderName1 		=	CustomerInfoObj.LenderName if CustomerInfoObj.LenderName else 'N/A'
				CuOutstandingBal1	=	mktmoney.toMoney(float(CustomerInfoObj.OutstandingBal), mktmoney.getCurrencyObj(CustomerInfoObj.Currency), 1)
				CuLenderName2 		=	CustomerInfoObj.LenderName2 if CustomerInfoObj.LenderName2 else 'N/A'
				CuOutstandingBal2	=	mktmoney.toMoney(float(CustomerInfoObj.OutstandingBal2), mktmoney.getCurrencyObj(CustomerInfoObj.Currency), 1)
				CuTotalLiabilities 	=	 mktmoney.toMoney(float(float(CustomerInfoObj.OutstandingBal)+float(CustomerInfoObj.OutstandingBal2)), mktmoney.getCurrencyObj(CustomerInfoObj.Currency), 1)
				CuLiabilityDic.update({
					'cu_lender_name1':CuLenderName1,'cu_lender_name2':CuLenderName2,
					'cu_outstanding_bal1':CuOutstandingBal1,'cu_outstanding_bal2':CuOutstandingBal2,
					'cu_total_liabilities':CuTotalLiabilities
					})
				#End Liability
				#End Assets and Liabilties
				CustomerObjDict.update({'customer_information':CustomerInfoDic,'assets_liability':{'assets':CuAssetsDic,'liability':CuLiabilityDic}})
			#End Customer Information


			#Collateral 
			ListCollateralDe 		= []
			LoanCollateralObj		= MKT_LOAN_COLLATERAL_INAU.query.filter(MKT_LOAN_COLLATERAL_INAU.ID==ID).first()
			ObjMainCollateralDic 	= {}
			if LoanCollateralObj:
				CollateralDe 	=	MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==LoanCollateralObj.Collateral,
																	MKT_COLLATERAL_DE.CollateralStatus == '1').all()
				for row in CollateralDe:
					OwnershipType 		=	row.OwnershipType
					CoCollateralNumber 	= 	row.CollateralNumber
					
					ObjCollateralType 	=	MKT_COLLATERAL_TYPE.query.get(row.CollateralType)
					ObjPropertyType 	=	MKT_PROPERTY_TYPE.query.get(row.PropertyType)
					CoCollateralType 	=	ObjCollateralType.Description if ObjCollateralType else 'N/A'
					CoPropertyType 		=	ObjPropertyType.Description if ObjPropertyType else 'N/A'
					CoAddress 			=	mktaddress.getAddress(ProvinceID = row.Province,
												DistrictID = row.District,
												CommuneID  = row.Commune,
												VillageID  = row.Village,
												HouseNo    = row.HouseNo,
												Street     = row.StreetNo) if row.Province else 'N/A'
					CoCollateralDePurchasePrice  = 	mktmoney.toMoney(float(row.PurchasePrice), mktmoney.getCurrencyObj(row.Currency), 1)
					CoCollateralDeValuationPrice =	mktmoney.toMoney(float(row.ValuationPrice), mktmoney.getCurrencyObj(row.Currency), 1)
					CoCollateralDeForceSaleValue = 	mktmoney.toMoney(float(row.ForceSaleValue), mktmoney.getCurrencyObj(row.Currency), 1)
					CoValuer 					 =	row.Valuer if row.Valuer else 'N/A'
					#Owner by customer
					if OwnershipType == '1':

						CustomerObjByCollateral = db.session.query(MKT_CUSTOMER.FirstNameEn,MKT_CUSTOMER.LastNameEn).\
															join(MKT_COLLATERAL,MKT_COLLATERAL.CustomerID==MKT_CUSTOMER.ID).\
															filter(MKT_COLLATERAL.ID==row.CollateralID).first()
						CoOwnerName 	    = 	CustomerObjByCollateral.FirstNameEn +' - '+CustomerObjByCollateral.LastNameEn \
												if CustomerObjByCollateral else 'N/A'
					# Owner by other
					else:
						CoOwnerName 		=	row.OwnerName if row.OwnerName else 'N/A'


					ObjCollateralDeDic 	=	{
							'co_collaterarl_number':CoCollateralNumber,'co_owner_name':CoOwnerName,
							'co_collateral_type':CoCollateralType,'co_property':CoPropertyType,'co_address':CoAddress,
							'co_purchase_price':CoCollateralDePurchasePrice,'co_valuation_price':CoCollateralDeValuationPrice,
							'co_force_sale':CoCollateralDeForceSaleValue,'co_valuer':CoValuer,
							'co_link':'/CollateralDetail/?ID=%s'%row.ID,'co_id':row.ID
					}

					ListCollateralDe.append(ObjCollateralDeDic)

				#Main Collateral
				CoNumberOfCollateral 	= 	len(ListCollateralDe)
				ObjMainCollateral 		= 	MKT_COLLATERAL.query.get(LoanCollateralObj.Collateral)
				CoDescription 			=	ObjMainCollateral.Description if ObjMainCollateral.Description else 'N/A'
				CoPurchasePrice 		=	mktmoney.toMoney(float(ObjMainCollateral.PurchasePrice), mktmoney.getCurrencyObj(ObjMainCollateral.Currency), 1)
				CoValuationPrice		=	mktmoney.toMoney(float(ObjMainCollateral.ValuationPrice), mktmoney.getCurrencyObj(ObjMainCollateral.Currency), 1)
				CoForceSale 			=	mktmoney.toMoney(float(ObjMainCollateral.ForceSale), mktmoney.getCurrencyObj(ObjMainCollateral.Currency), 1)
				CoMinCollateralValue 	=	ObjMainCollateral.MinCollateralValue
				CoMinCollateralValueFormat = mktmoney.toMoney(float(CoMinCollateralValue), mktmoney.getCurrencyObj(ObjMainCollateral.Currency), 1)
				ObjMainCollateralDic.update({
					'co_description':CoDescription,'co_length':CoNumberOfCollateral,
					'co_purchase_price':CoPurchasePrice,'co_valuation_price':CoValuationPrice,
					'co_force_sale':CoForceSale
					})
				#End MainCollateral
				CollateralDic.update({'main_collateral':ObjMainCollateralDic,'collateral_de':ListCollateralDe})
			#End Collateral







			#Loan Active
			DictLoanActiveHeader 	= {}
			DictLoanPastDueHeader 	= {}
			ListLoanContractActive 	= []
			ListLoanContractPastDue	= []
			LoanStatus 				= ['SMT','APV', 'DSB', 'TPU','DDT']
			PDLoanID 				= [row.LoanID for row in MKT_PAST_DUE.query.filter(MKT_PAST_DUE.Customer==LoanApplicationObj.LNCustomerID)]
			LoanContractObjActive 	= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ContractCustomerID==LoanApplicationObj.LNCustomerID,
																 MKT_LOAN_CONTRACT.OutstandingAmount > 0,
																 MKT_LOAN_CONTRACT.LoanStatus.in_(LoanStatus)).all()
															# filter(~MKT_LOAN_CONTRACT.ID.in_(PDLoanID)).all()

			LoanContractObjPastDue 	= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ContractCustomerID==LoanApplicationObj.LNCustomerID,
																 MKT_LOAN_CONTRACT.OutstandingAmount > 0,
																 MKT_LOAN_CONTRACT.LoanStatus.in_(LoanStatus)).\
															filter(MKT_LOAN_CONTRACT.ID.in_(PDLoanID)).all()

			ListLoanContractActive  = getLoanContractActive(LoanContractObjActive,'Active','Active')
			ListLoanContractPastDue = getLoanContractActive(LoanContractObjPastDue,'Past Due','Active')

			#Active
			LoanContractActiveSumApprovedAmountObj 	=  db.session.query(MKT_LOAN_CONTRACT.Currency,
																func.sum(MKT_LOAN_CONTRACT.ApprovedAmount).label('ApprovedAmount'),
																func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('OutstandingAmount'),
																).filter(MKT_LOAN_CONTRACT.ContractCustomerID==LoanApplicationObj.LNCustomerID,
																 MKT_LOAN_CONTRACT.OutstandingAmount > 0,
																 MKT_LOAN_CONTRACT.LoanStatus.in_(LoanStatus)).\
																group_by(MKT_LOAN_CONTRACT.Currency).all()
																#filter(~MKT_LOAN_CONTRACT.ID.in_(PDLoanID)).
			LoApprovedAmount 		= 0
			LoOutstandingAmount 	= 0
			for row in LoanContractActiveSumApprovedAmountObj:
				LoApprovedAmount 	+= toBaseCurrency(float(row.ApprovedAmount),row.Currency)
				LoOutstandingAmount	+= toBaseCurrency(float(row.OutstandingAmount),row.Currency)

			LoanContractActiveSumApprovedAmount 	= mktmoney.toMoney(float(LoApprovedAmount), mktmoney.getCurrencyObj(BasedCurrency), 1)
			LoanContractActiveSumOutstandingAmount 	= mktmoney.toMoney(float(LoOutstandingAmount), mktmoney.getCurrencyObj(BasedCurrency), 1)

			DictLoanActiveHeader.update({
				'lo_act_count_loan':len(ListLoanContractActive),
				'lo_contract_active_sum_approved_amount':LoanContractActiveSumApprovedAmount,
				'lo_contract_active_sum_outstanding_amount':LoanContractActiveSumOutstandingAmount
				})
			#End Active

			#PastDue
			# LoanContractPastDueSumApprovedAmountObj 	=  db.session.query(MKT_LOAN_CONTRACT.ID,MKT_LOAN_CONTRACT.Currency,
			# 													func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('OutstandingAmount'),
			# 													).filter(MKT_LOAN_CONTRACT.ContractCustomerID==LoanApplicationObj.LNCustomerID,
			# 													 MKT_LOAN_CONTRACT.OutstandingAmount > 0,
			# 													 MKT_LOAN_CONTRACT.LoanStatus.in_(LoanStatus)).\
			# 													filter(MKT_LOAN_CONTRACT.ID.in_(PDLoanID)).group_by(MKT_LOAN_CONTRACT.Currency,MKT_LOAN_CONTRACT.ID).all()
			# new update PD
			LoanContractPastDueSumApprovedAmountObj 	=  db.session.query(MKT_LOAN_CONTRACT.ID,MKT_LOAN_CONTRACT.Currency,
																func.sum(MKT_PAST_DUE.TotODAmount).label('OutstandingAmount'),
																).\
																join(MKT_CUSTOMER, MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
																join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
																filter(MKT_LOAN_CONTRACT.ContractCustomerID==LoanApplicationObj.LNCustomerID,
																 MKT_LOAN_CONTRACT.OutstandingAmount > 0,
																 MKT_LOAN_CONTRACT.LoanStatus.in_(LoanStatus)).\
																filter(MKT_LOAN_CONTRACT.ID.in_(PDLoanID)).group_by(MKT_LOAN_CONTRACT.Currency,MKT_LOAN_CONTRACT.ID).all()

			LoanContractPastDueID 		=	[row.ID for row in LoanContractPastDueSumApprovedAmountObj]
			LoMaxDueDateObj 				=	db.session.query(MKT_PD_DATE.NumDayDue).\
														join(MKT_PAST_DUE,MKT_PAST_DUE.ID==MKT_PD_DATE.ID).\
														filter(MKT_PAST_DUE.LoanID.in_(LoanContractPastDueID)).\
														order_by(MKT_PD_DATE.NumDayDue.desc()).first()
			LoMaxDueDate 				= LoMaxDueDateObj.NumDayDue if LoMaxDueDateObj else 0
			LoOutstandingPastDueAmount 	= 0
			for row in LoanContractPastDueSumApprovedAmountObj:
				LoOutstandingPastDueAmount	+= toBaseCurrency(float(row.OutstandingAmount),row.Currency)

			LoanContractPastDueSumOutstandingAmount 	= mktmoney.toMoney(float(LoOutstandingPastDueAmount), mktmoney.getCurrencyObj(BasedCurrency), 1)
			LoanContractOutstandingAmountPercent 		= (LoOutstandingPastDueAmount/LoOutstandingAmount)*100 if LoOutstandingPastDueAmount>0 and LoOutstandingAmount>0 else 0
			DictLoanPastDueHeader.update({
				'lo_act_count_loan_arrear':len(ListLoanContractPastDue),'lo_act_max_day_due':LoMaxDueDate,
				'lo_contract_pastdue_sum_outstanding_amount':'%s  (%s%%)'%(LoanContractPastDueSumOutstandingAmount,int(LoanContractOutstandingAmountPercent))
				})
			#End PastDue





			if ListLoanContractActive or ListLoanContractPastDue:
				LoanContractActiveDic.update({
					'dict_loan_active_header':DictLoanActiveHeader,'list_loan_contract_active':ListLoanContractActive,
					'list_loan_lontract_past_due':ListLoanContractPastDue,'dict_loan_active_arrear_header':DictLoanPastDueHeader
					})

			#End Loan Active







			#Loan Inactive
			InactiveLoanStatus 			= {'WOF': 'Written-off','MRT':'Matured','TMN':'Paid-off'}
			LoanContractObjInactive 	= MKT_CLOSED_LOAN.query.filter(MKT_CLOSED_LOAN.ContractCustomerID==
																		LoanApplicationObj.LNCustomerID).all()
			
			ListLoanContractInactive  	= getLoanContractActive(LoanContractObjInactive,'','Inactive')
			CountLoanContractInactive 	= db.session.query(MKT_CLOSED_LOAN.LoanStatus,func.count(MKT_CLOSED_LOAN.LoanStatus).label('CountLoanStatus')).\
														   filter(MKT_CLOSED_LOAN.ContractCustomerID==LoanApplicationObj.LNCustomerID).\
														   group_by(MKT_CLOSED_LOAN.LoanStatus).all()
			SumLoanContractInactive 	= db.session.query(MKT_CLOSED_LOAN.Currency,func.sum(MKT_CLOSED_LOAN.Disbursed).label('Disbursed')).\
														   filter(MKT_CLOSED_LOAN.ContractCustomerID==LoanApplicationObj.LNCustomerID).\
														   group_by(MKT_CLOSED_LOAN.Currency).all()

			SumLoanContractInactiveByWrittenOff 	= db.session.query(MKT_CLOSED_LOAN.Currency,func.sum(MKT_CLOSED_LOAN.Disbursed).label('Disbursed')).\
														   filter(MKT_CLOSED_LOAN.ContractCustomerID==LoanApplicationObj.LNCustomerID,
														   	MKT_CLOSED_LOAN.LoanStatus=='WOF').group_by(MKT_CLOSED_LOAN.Currency).all()

			SumLoanContractInactiveMatured 	= db.session.query(MKT_CLOSED_LOAN.Currency,func.sum(MKT_CLOSED_LOAN.Disbursed).label('Disbursed')).\
														   filter(MKT_CLOSED_LOAN.ContractCustomerID==LoanApplicationObj.LNCustomerID,
														   		MKT_CLOSED_LOAN.LoanStatus=='MRT').\
														   group_by(MKT_CLOSED_LOAN.Currency).all()
			SumLoanContractInactivePaidOff 	= db.session.query(MKT_CLOSED_LOAN.Currency,func.sum(MKT_CLOSED_LOAN.Disbursed).label('Disbursed')).\
														   filter(MKT_CLOSED_LOAN.ContractCustomerID==LoanApplicationObj.LNCustomerID,
														   	MKT_CLOSED_LOAN.LoanStatus=='TMN').\
														   group_by(MKT_CLOSED_LOAN.Currency).all()
			ListLoanContractInactiveCount  = []
			ListLoanContractInactiveSum    = []
			DictLoanContractInactiveHeader = {}
			SumTotalLoanContractInactiveHeader  = 0
			TotalCountLoanContractInactive = 0
			for row in CountLoanContractInactive:
				ListLoanContractInactiveCount.append({
					'key':'Loan '+InactiveLoanStatus.get(row.LoanStatus),
					'value':row.CountLoanStatus,
					'urls':[],
					'color':''
					})
				TotalCountLoanContractInactive += row.CountLoanStatus
			DictLoanContractInactiveHeader.update({
				'count_loan_contract_inactive':ListLoanContractInactiveCount,
				'total_count_loan_contract_inactive':TotalCountLoanContractInactive
				})
			
			#Sum by status write off
			SumLoanContractInactiveByWrittenOffAmount = 0
			for row in SumLoanContractInactiveByWrittenOff:
				SumLoanContractInactiveByWrittenOffAmount += toBaseCurrency(float(row.Disbursed),row.Currency)
			if SumLoanContractInactiveByWrittenOffAmount>0:
				ListLoanContractInactiveSum.append({'key':'Written-off Amount','urls':[],'color':'','value':mktmoney.toMoney(float(SumLoanContractInactiveByWrittenOffAmount), mktmoney.getCurrencyObj(BasedCurrency), 1)})
			
			#Sum by status Matured
			SumLoanContractInactiveMaturedAmount = 0
			for row in SumLoanContractInactiveMatured:
				SumLoanContractInactiveMaturedAmount += toBaseCurrency(float(row.Disbursed),row.Currency)
			if SumLoanContractInactiveMaturedAmount >0:
				ListLoanContractInactiveSum.append({'key':'Matured Amount','urls':[],'color':'','value':mktmoney.toMoney(float(SumLoanContractInactiveMaturedAmount), mktmoney.getCurrencyObj(BasedCurrency), 1)})
			
			#Sum by status Paid Off
			SumLoanContractInactivePaidOffAmount = 0
			for row in SumLoanContractInactivePaidOff:
				SumLoanContractInactivePaidOffAmount += toBaseCurrency(float(row.Disbursed),row.Currency)
			if SumLoanContractInactivePaidOffAmount>0 :
				ListLoanContractInactiveSum.append({'key':'Paid Off Amount','urls':[],'color':'','value':mktmoney.toMoney(float(SumLoanContractInactivePaidOffAmount), mktmoney.getCurrencyObj(BasedCurrency), 1)})
			
			

			#Sum total 
			for row in SumLoanContractInactive:
				SumTotalLoanContractInactiveHeader	+= toBaseCurrency(float(row.Disbursed),row.Currency)
			SumTotalLoanContractInactiveHeader 	= mktmoney.toMoney(float(SumTotalLoanContractInactiveHeader), mktmoney.getCurrencyObj(BasedCurrency), 1)
			

			DictLoanContractInactiveHeader.update({
				'sum_loan_contract_inactive':ListLoanContractInactiveSum,
				'sum_total_loan_contract_inactive':SumTotalLoanContractInactiveHeader
				})

			if ListLoanContractInactive:
				LoanContractInactiveDic.update({
					'dic_loan_inactive_header':DictLoanContractInactiveHeader,'list_loan_contract_inactive':ListLoanContractInactive
					})

			#End Loan Inactive






			
			#Loan Application
			ListLoanApplicationRecord 	= [row.LoanApplicationID for row in MKT_LOAN_CONTRACT.query.all() ]
			LoanAppliObj 				= MKT_LOAN_APPLICATION.query.filter(~MKT_LOAN_APPLICATION.ID.in_(ListLoanApplicationRecord)).\
															filter(MKT_LOAN_APPLICATION.AppStatus=='3',
																   MKT_LOAN_APPLICATION.LNCustomerID==LoanApplicationObj.LNCustomerID
																).all()
			ListLoanApplication 	=	[]
			if LoanAppliObj:
				for row in LoanAppliObj:
					LaLoanProductObj 	=	MKT_LOAN_PRODUCT.query.get(row.LoanProduct)	
					LaLoanPurposeObj 	=	MKT_LOAN_PURPOSE.query.get(row.LoanPurpose)
					LaLoanProduct 		=	LaLoanProductObj.Description if LaLoanProductObj else 'N/A'
					LaAppliedAmount 	=	mktmoney.toMoney(float(row.AppliedAmount), mktmoney.getCurrencyObj(row.Currency), 1)
					LaTerm 				=	row.Term
					LaInterestRate 		=	row.InterestRate
					LaAppliedDate 		=	row.Authorizeon
					LaPurpose 			=	LaLoanPurposeObj.Description if LaLoanPurposeObj else 'N/A'
					LaNumOfCoBorrower 	=	MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==row.ID).count()
					LaNumOfGuarantor 	=	MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID==row.ID).count()
					DictLoanApplication 	=	{
						'la_status': 'Approved','la_loan_product':LaLoanProduct,
						'la_applied_amount':LaAppliedAmount,'la_term':LaTerm,
						'la_interest_rate':LaInterestRate,'la_applied_date':LaAppliedDate,
						'la_loan_purpose':LaPurpose,'la_num_of_co_borrower':LaNumOfCoBorrower,
						'la_num_of_co_guarantor':LaNumOfGuarantor
					}
					ListLoanApplication.append(DictLoanApplication)

					TotalMonthlyRepaymentApplication 	+= getRepaymentAnnuity(Principal = row.Amount, Interest = row.InterestRate, Tenor = row.Term)


				SumLAAppliedAmountObj = db.session.query(MKT_LOAN_APPLICATION.Currency,
														func.sum(MKT_LOAN_APPLICATION.Amount).label('Amount'),
														func.sum(MKT_LOAN_APPLICATION.AppliedAmount).label('AppliedAmount')).\
																filter(~MKT_LOAN_APPLICATION.ID.in_(ListLoanApplicationRecord)).\
																filter(MKT_LOAN_APPLICATION.AppStatus=='3',
																   MKT_LOAN_APPLICATION.LNCustomerID==LoanApplicationObj.LNCustomerID
																).group_by(MKT_LOAN_APPLICATION.Currency).all()

				LAAppliedAmount 	=	0
				for row in SumLAAppliedAmountObj:
					LAAppliedAmount += toBaseCurrency(float(row.AppliedAmount),row.Currency)
					LAApprovedAmount += toBaseCurrency(float(row.Amount),row.Currency)

				SumLAAppliedAmount 		=	mktmoney.toMoney(float(LAAppliedAmount), mktmoney.getCurrencyObj(BasedCurrency), 1)
				LoanApplicationDic.update({
					'dict_loan_application_header':{'la_count':len(ListLoanApplication),
													'la_total_applied_amount':SumLAAppliedAmount
												   },
					'list_loan_application':ListLoanApplication
					})

			#End 
















		LoanToValue 					=	'0%'
		MonthlyRepaymentNDI 			=	'0%'
		#For API
		#Customer Information
		BodyListAPI 					=	[]
		CustomerInfoObjAPI = CustomerObjDict.get('customer_information',{})
		HeaderCustomerInfoAPI = {}
		HeaderCustomerlLeftAPI 	=	[]
		if CustomerInfoObjAPI:
			CustomerNameAPI 			= 	CustomerInfoObjAPI.get('cu_name','')
			Key 						=	{'label':'Name:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerNameAPI.upper(),'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})

			CustomerAgeAPI 				= 	CustomerInfoObjAPI.get('cu_age','')
			Key 						=	{'label':'Age:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerAgeAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})

			CustomerPhoneAPI 				= 	CustomerInfoObjAPI.get('phone','')
			Key 						=	{'label':'Phone:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerPhoneAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})

			CustomerAddressAPI 				= 	CustomerInfoObjAPI.get('cu_address','')
			Key 						=	{'label':'Address:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerAddressAPI,'color':'','url':{},'bold':False}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})


			CustomerNationalityAPI 				= 	CustomerInfoObjAPI.get('cu_nationality','')
			Key 						=	{'label':'Nationality:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerNationalityAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})


			CustomerIDTypeAPI 			=	CustomerInfoObjAPI.get('cu_id_type','')
			CustomerIDNumberAPI 		= 	CustomerInfoObjAPI.get('cu_id_number','')
			Key 						=	{'label':CustomerIDTypeAPI+':','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerIDNumberAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})


			CustomerMaritalStatusAPI 	= 	CustomerInfoObjAPI.get('cu_marital_status','')
			Key 						=	{'label':'Marital Status:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerMaritalStatusAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})


			CustomerFamilyMemberAPI 	= 	CustomerInfoObjAPI.get('cu_family_member','')
			Key 						=	{'label':'Family Member:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerFamilyMemberAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})


			CustomerEducationAPI 	= 	CustomerInfoObjAPI.get('cu_education','')
			Key 						=	{'label':'Education:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerEducationAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})


			CustomerOccupationAPI 	= 	CustomerInfoObjAPI.get('cu_occupation','')
			Key 						=	{'label':'Occupation:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerOccupationAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})


			CustomerLinkAPI 	= 	CustomerInfoObjAPI.get('cu_link','')
			Key 						=	{'label':'History:','color':'','url':{},'bold':False}
			Value 						=	{'label':'Link','color':'','url':{'url':CustomerLinkAPI,'type_url':'Custom'},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})


			CustomerIncomeAPI 			= 	CustomerInfoObjAPI.get('cu_income','')
			Key 						=	{'label':'Income:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerIncomeAPI,'color':'','url':{},'bold':False}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})


			CustomerExpensesAPI 			= 	CustomerInfoObjAPI.get('cu_expenses','')
			Key 						=	{'label':'Expenses:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerExpensesAPI,'color':'','url':{},'bold':False}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})

			CustomerNetIncomeAPI 			= 	CustomerInfoObjAPI.get('cu_net_income','')
			Key 						=	{'label':'Net Income:','color':'','url':{},'bold':False}
			Value 						=	{'label':CustomerNetIncomeAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})

			LoanToValue 				=	str(round((float(LoOutstandingAmount)+float(LAApprovedAmount) + float(CurrentApproveAmount))/float(CoMinCollateralValue),2)*100)+'%' if CoMinCollateralValue>0 else '0%'
			Key 						=	{'label':'Loan To Value:','color':'','url':{},'bold':False}
			Value 						=	{'label':LoanToValue,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})

			MinCollateralValue 			=	CustomerInfoObjAPI.get('cu_min_to_value','')
			Key 						=	{'label':'Min Collateral Value:','color':'','url':{},'bold':False}
			Value 						=	{'label':MinCollateralValue,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})
			
			HeaderCustomerInfoAPI.update({'left':HeaderCustomerlLeftAPI,'right':[]})


			BodyListAPI.append({
								'icon':'','name':'CustomerInfo','title': 'Customer Information','type':'Summary','data':[],'most_data':False,'expand':True,'header':HeaderCustomerInfoAPI
							})


		#Assets and Liability
		CustomerAssetsObjAPI = CustomerObjDict.get('assets_liability').get('assets') if CustomerObjDict.get('assets_liability') else {}
		CustomerLiabilityObjAPI = CustomerObjDict.get('assets_liability').get('liability') if CustomerObjDict.get('assets_liability') else {}
		HeaderCustomerInfoAssetsAndLiabilityAPI = {}
		if CustomerAssetsObjAPI:
			HeaderCustomerlLeftAssetsAPI 	= 	[]
			Key 							=	{'label':'Assets'.upper(),'color':'','url':{},'bold':True}
			Value 							=	{'label':'','color':'','url':{},'bold':False}
			HeaderCustomerlLeftAssetsAPI.append({'key':Key,'value':Value})


			CustomerAssetsTypeAPI 			= 	CustomerAssetsObjAPI.get('cu_assets_type','')
			CustomerEstimatedValueAPI 		= 	CustomerAssetsObjAPI.get('cu_estimated_value','')
			Key 							=	{'label':CustomerAssetsTypeAPI+':','color':'','url':{},'bold':False}
			Value 							=	{'label':CustomerEstimatedValueAPI,'color':'','url':{},'bold':False}
			HeaderCustomerlLeftAssetsAPI.append({'key':Key,'value':Value})

			CustomerBankAccountTypeAPI 		= 	CustomerAssetsObjAPI.get('cu_bank_account_type','')
			CustomerSavingBalanceAPI 		= 	CustomerAssetsObjAPI.get('cu_saving_bal','')
			Key 							=	{'label':CustomerBankAccountTypeAPI+':','color':'','url':{},'bold':False}
			Value 							=	{'label':CustomerSavingBalanceAPI,'color':'','url':{},'bold':False}
			HeaderCustomerlLeftAssetsAPI.append({'key':Key,'value':Value})


			CustomerTotalAssetsAPI 			= 	CustomerAssetsObjAPI.get('cu_total_assets','')
			Key 							=	{'label':'Total Assets:','color':'','url':{},'bold':False}
			Value 							=	{'label':CustomerTotalAssetsAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlLeftAssetsAPI.append({'key':Key,'value':Value})



			HeaderCustomerlRightLiabilityAPI = []

			Key 							=	{'label':'Liabilities'.upper(),'color':'','url':{},'bold':True}
			Value 							=	{'label':'','color':'','url':{},'bold':False}
			HeaderCustomerlRightLiabilityAPI.append({'key':Key,'value':Value})

			CustomerLenderName1API 			= 	CustomerLiabilityObjAPI.get('cu_lender_name1','')
			CustomerOutstanding1API 		= 	CustomerLiabilityObjAPI.get('cu_outstanding_bal1','')
			Key 							=	{'label':CustomerLenderName1API+':','color':'','url':{},'bold':False}
			Value 							=	{'label':CustomerOutstanding1API,'color':'','url':{},'bold':False}
			HeaderCustomerlRightLiabilityAPI.append({'key':Key,'value':Value})


			CustomerLenderName2API 			= 	CustomerLiabilityObjAPI.get('cu_lender_name2','')
			CustomerOutstanding2API 		= 	CustomerLiabilityObjAPI.get('cu_outstanding_bal2','')
			Key 							=	{'label':CustomerLenderName2API+':','color':'','url':{},'bold':False}
			Value 							=	{'label':CustomerOutstanding2API,'color':'','url':{},'bold':False}
			HeaderCustomerlRightLiabilityAPI.append({'key':Key,'value':Value})

			CustomerTotalLiabilityAPI 		= 	CustomerLiabilityObjAPI.get('cu_total_liabilities','')
			Key 							=	{'label':'Total Liabilities:','color':'','url':{},'bold':False}
			Value 							=	{'label':CustomerTotalLiabilityAPI,'color':'','url':{},'bold':True}
			HeaderCustomerlRightLiabilityAPI.append({'key':Key,'value':Value})


			HeaderCustomerInfoAssetsAndLiabilityAPI.update({'left':HeaderCustomerlLeftAssetsAPI,'right':HeaderCustomerlRightLiabilityAPI})
			BodyListAPI.append({
								'icon':'','name':'AssetsAndLiability','title': 'Assets and Liabilties','type':'Summary','data':[],'most_data':False,'expand':True,'header':HeaderCustomerInfoAssetsAndLiabilityAPI
							})


		#End Customer Information



		#Collateral
		HeaderCollateralAPI 			=	{}
		ObjHeaderCollateralAPI 			=	CollateralDic.get('main_collateral',{})
		ObjBodyCollateralAPI 			=	CollateralDic.get('collateral_de',[])
		ListBodyCollateralAPI 			=	[]
		
		if ObjHeaderCollateralAPI:
			#Header left
			HeaderCollateralLeftAPI 	=	[]
			TitleNumberOfCollateralAPI 	= 	'Number of Collateral:'
			NumberOfCollateralAPI 		= 	ObjHeaderCollateralAPI.get('co_length')
			Key 						=	{'label':TitleNumberOfCollateralAPI,'color':'','url':{},'bold':False}
			Value 						=	{'label':NumberOfCollateralAPI,'color':'','url':{},'bold':True}
			HeaderCollateralLeftAPI.append({'key':Key,'value':Value})

			TitleDescription 			= 	ObjHeaderCollateralAPI.get('co_description')
			Key 						=	{'label':TitleDescription,'color':'','url':{},'bold':False}
			Value 						=	{'label':'','color':'','url':{},'bold':False}
			HeaderCollateralLeftAPI.append({'key':Key,'value':Value})
			#Header right
			HeaderCollateralRightAPI 	=	[]
			TitleCoPurchasePriceAPI		= 	'Total Purchase Price:'
			CoPurchasePriceAPI 			= 	ObjHeaderCollateralAPI.get('co_purchase_price')
			Key 						=	{'label':TitleCoPurchasePriceAPI,'color':'','url':{},'bold':False}
			Value 						=	{'label':CoPurchasePriceAPI,'color':'','url':{},'bold':True}
			HeaderCollateralRightAPI.append({'key':Key,'value':Value})
			
			TitleCoValuationPrice 		= 	'Total Valuation Price:'
			CoValuationPrice 			= 	ObjHeaderCollateralAPI.get('co_valuation_price')
			Key 						=	{'label':TitleCoValuationPrice,'color':'','url':{},'bold':False}
			Value 						=	{'label':CoValuationPrice,'color':'','url':{},'bold':True}
			HeaderCollateralRightAPI.append({'key':Key,'value':Value})
			
			TitleCoForceSale 			= 	'Total Forces Price:'
			CoCoForceSale 				= 	ObjHeaderCollateralAPI.get('co_force_sale')
			Key 						=	{'label':TitleCoForceSale,'color':'','url':{},'bold':False}
			Value 						=	{'label':CoCoForceSale,'color':'','url':{},'bold':True}
			HeaderCollateralRightAPI.append({'key':Key,'value':Value})

			HeaderCollateralAPI.update({'left':HeaderCollateralLeftAPI,'right':HeaderCollateralRightAPI})
		#Body 
		for row in ObjBodyCollateralAPI:
			CoColumnAPI 		= 	[]
			TitleCoCollateralNumberAPI 				= 	'Collateral Number:'
			CoCollateralNumberAPI 					=	row.get('co_collaterarl_number')
			CoColumnAPI.append({'key':TitleCoCollateralNumberAPI,'value':CoCollateralNumberAPI,'color':'','urls':[]})

			TitleCoOwnerNameAPI 					=	'Owner:'
			CoOwnerNameAPI 							=	row.get('co_owner_name')
			CoColumnAPI.append({'key':TitleCoOwnerNameAPI,'value':CoOwnerNameAPI,'color':'','urls':[]})

			TitleCoCollateralTypeAPI				=	'Collateral Type:'
			CoCollateralTypeAPI 					=	row.get('co_collateral_type')
			CoColumnAPI.append({'key':TitleCoCollateralTypeAPI,'value':CoCollateralTypeAPI,'color':'','urls':[]})
			
			TitleCoPropertyTypeAPI 					=	'Property Type:'
			CoPropertyTypeAPI 						=	row.get('co_property')
			CoColumnAPI.append({'key':TitleCoPropertyTypeAPI,'value':CoPropertyTypeAPI,'color':'','urls':[]})

			TitleCoAddressAPI 						=	'Address:'
			CoAddressAPI 							=	row.get('co_address')

			TitleCoCollateralDePurchasePriceAPI 	=	'Purchase Price:'
			CoCollateralDePurchasePriceAPI 			= 	row.get('co_purchase_price')
			CoColumnAPI.append({'key':TitleCoCollateralDePurchasePriceAPI,'value':CoCollateralDePurchasePriceAPI,'color':'','urls':[]})

			TitleCoCollateralDeValuationPriceAPI 	=	'Valuation Price:'
			CoCollateralDeValuationPriceAPI 		=	row.get('co_valuation_price')
			CoColumnAPI.append({'key':TitleCoCollateralDeValuationPriceAPI,'value':CoCollateralDeValuationPriceAPI,'color':'','urls':[]})

			TitleCoCollateralDeForceSaleValueAPI 	=	'Forces Price:'
			CoCollateralDeForceSaleValueAPI 		=	row.get('co_force_sale')
			CoColumnAPI.append({'key':TitleCoCollateralDeForceSaleValueAPI,'value':CoCollateralDeForceSaleValueAPI,'color':'','urls':[]})

			TitleCoValuerAPI 						=	'Valuer:'
			CoValuerAPI 							=	row.get('co_valuer')
			CoColumnAPI.append({'key':TitleCoValuerAPI,'value':CoValuerAPI,'color':'','urls':[]})

			TitleCoCollateralLinkAPI 				=	'View Details:'
			CoCollateralLinkAPI 					=	row.get('co_link')
			CoCollateralIDAPI 						=	row.get('co_id')
			CoColumnAPI.append({'key':TitleCoCollateralLinkAPI,'value':CoCollateralIDAPI,'color':'','urls':[{'url':CoCollateralLinkAPI,'type_url':'Form','icon':''}]})

			CoColumnAPI.append({'key':TitleCoAddressAPI,'value':CoAddressAPI,'color':'','urls':[]})
			ListBodyCollateralAPI.append({
				'columns':CoColumnAPI,
				'urls':[],
				'important':[]
				})
		if ListBodyCollateralAPI:
			BodyListAPI.append({
								'icon':'','name':'Collateral','title': 'Collateral','type':'Summary','data':ListBodyCollateralAPI,'most_data':False,'expand':True,'header':HeaderCollateralAPI
							})
		#End Collateral

		#Loan Contract
		HeaderLoanContractAPI			=	{}
		ObjHeaderLoanActiveAPI 			=	LoanContractActiveDic.get('dict_loan_active_header',[])
		ObjHeaderLoanPastdueAPI 		=	LoanContractActiveDic.get('dict_loan_active_arrear_header',[])
		if ObjHeaderLoanActiveAPI or ObjHeaderLoanPastdueAPI:
			#Header left
			HeaderLoanContractLeftAPI 	=	[]
			TitleCountActiveLoanAPI 	= 	'Active Loan:'
			CountActiveLoanAPI 			= 	ObjHeaderLoanActiveAPI.get('lo_act_count_loan')
			Key 						=	{'label':TitleCountActiveLoanAPI,'color':'','url':{},'bold':False}
			Value 						=	{'label':CountActiveLoanAPI,'color':'','url':{},'bold':True}
			HeaderLoanContractLeftAPI.append({'key':Key,'value':Value})
			

			TitleTotalApprovedAmountAPI = 	'Total Approved Amount:'
			TotalApprovedAmountAPI 		= 	ObjHeaderLoanActiveAPI.get('lo_contract_active_sum_approved_amount')
			Key 						=	{'label':TitleTotalApprovedAmountAPI,'color':'','url':{},'bold':False}
			Value 						=	{'label':TotalApprovedAmountAPI,'color':'','url':{},'bold':True}
			HeaderLoanContractLeftAPI.append({'key':Key,'value':Value})
			
			TitleTotalOutstandingAmountAPI = 	'Total Outstanding Amount:'
			TotalOutstandingAmountAPI	= 	ObjHeaderLoanActiveAPI.get('lo_contract_active_sum_outstanding_amount')
			Key 						=	{'label':TitleTotalOutstandingAmountAPI,'color':'','url':{},'bold':False}
			Value 						=	{'label':TotalOutstandingAmountAPI,'color':'','url':{},'bold':True}
			HeaderLoanContractLeftAPI.append({'key':Key,'value':Value})
			
			#Header right
			HeaderLoanContractRightAPI 	=	[]
			TitleLoanInArrearAPI		= 	'Loan in arrear:'
			LoanInArrearAPI 			= 	ObjHeaderLoanPastdueAPI.get('lo_act_count_loan_arrear')
			Key 						=	{'label':TitleLoanInArrearAPI,'color':'','url':{},'bold':False}
			Value 						=	{'label':LoanInArrearAPI,'color':'','url':{},'bold':True}
			HeaderLoanContractRightAPI.append({'key':Key,'value':Value})
			
			TitleLoanOutstandingInArrearAPI = 	'Loan Outstanding in arrear:'
			LoanOutstandingInArrearAPI	= 	ObjHeaderLoanPastdueAPI.get('lo_contract_pastdue_sum_outstanding_amount')
			Key 						=	{'label':TitleLoanOutstandingInArrearAPI,'color':'','url':{},'bold':False}
			Value 						=	{'label':LoanOutstandingInArrearAPI,'color':'','url':{},'bold':True}
			HeaderLoanContractRightAPI.append({'key':Key,'value':Value})
			
			TitleMaxDayDueAPI			= 	'Max day due:'
			MaxDayDueAPI 				= 	ObjHeaderLoanPastdueAPI.get('lo_act_max_day_due')
			Key 						=	{'label':TitleMaxDayDueAPI,'color':'','url':{},'bold':False}
			Value 						=	{'label':MaxDayDueAPI,'color':'','url':{},'bold':True}
			HeaderLoanContractRightAPI.append({'key':Key,'value':Value})

			HeaderLoanContractAPI.update({'left':HeaderLoanContractLeftAPI,'right':HeaderLoanContractRightAPI})
		

		#Body 
		ObjBodyLoanContractActiveAPI 	=	LoanContractActiveDic.get('list_loan_contract_active',[])
		ObjBodyLoanContractPastDueAPI 	=	LoanContractActiveDic.get('list_loan_lontract_past_due',[])
		ListBodyContractAPI 			=	[]
		CoColorStatus 			=	'#46ac46'
		
		ListBodyContractActiveAPI = formatLoanContractAPI(ObjData=ObjBodyLoanContractActiveAPI,ColorStatus=CoColorStatus)
		ListBodyContractPastDueAPI = formatLoanContractAPI(ObjData=ObjBodyLoanContractPastDueAPI,ColorStatus='')
		TotalMonthlyRepaymentAll 	=	float(ListBodyContractActiveAPI.get('total_monthly_repayment')+float(TotalMonthlyRepaymentApplication)+float(CurrentMonthlyRep))
		TotalMonthlyRepaymentAll 	= 	mktmoney.toMoney(float(TotalMonthlyRepaymentAll), mktmoney.getCurrencyObj(BasedCurrency), 1)
		MonthlyRepaymentNDI 	=	str(round(float(ListBodyContractActiveAPI.get('total_monthly_repayment')+float(TotalMonthlyRepaymentApplication)+float(CurrentMonthlyRep))/float(CuTotalNetIncome))*100)+'%' if CuTotalNetIncome>0 else '0%'
		TempLoanContractActiveAPI = ListBodyContractAPI.append(ListBodyContractActiveAPI.get('data')) if ListBodyContractActiveAPI.get('data') else ''
		TempLoanContractPastDueAPI = ListBodyContractAPI.append(ListBodyContractPastDueAPI.get('data')) if ListBodyContractPastDueAPI.get('data') else ''

		if ListBodyContractAPI:
			BodyListAPI.append({
								'icon':'','name':'LoanContract','title': 'Loan Contracts(Active)','type':'Summary','data':ListBodyContractActiveAPI,'most_data':False,'expand':True,'header':HeaderLoanContractAPI
							})
		# #End Loan Contract



		#Loan Contract Inactive
		HeaderLoanContractInactiveAPI	=	{}
		ObjHeaderLoanInactiveAPI 		=	LoanContractInactiveDic.get('dic_loan_inactive_header',[])
		if ObjHeaderLoanInactiveAPI:
			#Header left
			HeaderLoanContractInactiveLeftAPI 			= 	[]
			ObjHeaderLoanContractInactiveLeftAPI 		=	ObjHeaderLoanInactiveAPI.get('count_loan_contract_inactive',[])
			for row in ObjHeaderLoanContractInactiveLeftAPI:				
				Key 						=	{'label':row.get('key'),'color':'','url':{},'bold':False}
				Value 						=	{'label':row.get('value'),'color':'','url':{},'bold':True}
				HeaderLoanContractInactiveLeftAPI.append({'key':Key,'value':Value})
			Key 						=	{'label':'Total:','color':'','url':{},'bold':False}
			Value 						=	{'label':ObjHeaderLoanInactiveAPI.get('total_count_loan_contract_inactive',0),'color':'','url':{},'bold':True}
			HeaderLoanContractInactiveLeftAPI.append({'key':Key,'value':Value})
			
			
			#Header right
			HeaderLoanContractInactiveRightAPI 			=	[]
			ObjHeaderLoanContractInactiveRightAPI 		=	ObjHeaderLoanInactiveAPI.get('sum_loan_contract_inactive',[])
			for row in ObjHeaderLoanContractInactiveRightAPI:
				Key 						=	{'label':row.get('key'),'color':'','url':{},'bold':False}
				Value 						=	{'label':row.get('value'),'color':'','url':{},'bold':True}
				HeaderLoanContractInactiveRightAPI.append({'key':Key,'value':Value})

			Key 						=	{'label':'Total:','color':'','url':{},'bold':False}
			Value 						=	{'label':ObjHeaderLoanInactiveAPI.get('sum_total_loan_contract_inactive',0),'color':'','url':{},'bold':True}
			HeaderLoanContractInactiveRightAPI.append({'key':Key,'value':Value})
			
			HeaderLoanContractInactiveAPI.update({'left':HeaderLoanContractInactiveLeftAPI,'right':HeaderLoanContractInactiveRightAPI})
		#Body 
		ObjBodyLoanContractActiveAPI 	=	LoanContractInactiveDic.get('list_loan_contract_inactive',[])
		ListBodyContractInactiveAPI = formatLoanContractAPI(ObjData=ObjBodyLoanContractActiveAPI,ColorStatus='').get('data',[]) + formatLoanContractAPI(ObjData=ObjBodyLoanContractPastDueAPI,ColorStatus='').get('data',[])
	
		if ListBodyContractInactiveAPI:
			BodyListAPI.append({
								'icon':'','name':'LoanContract','title': 'Loan Contracts(Inactive)','type':'Summary','data':ListBodyContractInactiveAPI,'most_data':False,'expand':True,'header':HeaderLoanContractInactiveAPI
							})
		#End Loan Contract Inactive


		#Loan Application
		HeaderLoanApplicationAPI	=	{}
		ObjHeaderLoanApplicationAPI =	LoanApplicationDic.get('dict_loan_application_header',[])
		if ObjHeaderLoanApplicationAPI:
			#Header left
			HeaderLoanApplicationLeftAPI 		=	[]
			Key 								=	{'label':'Loan Application:','color':'','url':{},'bold':False}
			Value 								=	{'label':ObjHeaderLoanApplicationAPI.get('la_count'),'color':'','url':{},'bold':True}
			HeaderLoanApplicationLeftAPI.append({'key':Key,'value':Value})
			
			
			#Header right
			HeaderLoanApplicationRightAPI 		=	[]
			Key 								=	{'label':'Total Applied Amount:','color':'','url':{},'bold':False}
			Value 								=	{'label':ObjHeaderLoanApplicationAPI.get('la_total_applied_amount',0),'color':'','url':{},'bold':True}
			HeaderLoanApplicationRightAPI.append({'key':Key,'value':Value})
			

			HeaderLoanApplicationAPI.update({'left':HeaderLoanApplicationLeftAPI,'right':HeaderLoanApplicationRightAPI})
		#Body 
		ObjBodyLoanApplicationAPI 	=	LoanApplicationDic.get('list_loan_application',[])
		ListBodyLoanApplicationAPI  = 	[]
		for row in ObjBodyLoanApplicationAPI:
			CoColumnAPI 	=	[]

			CoColumnAPI.append({'key':'Status:','value':row.get('la_status'),'color':'','urls':[]})
			CoColumnAPI.append({'key':'Loan Product:','value':row.get('la_loan_product'),'color':'','urls':[]})
			CoColumnAPI.append({'key':'Applied Amount:','value':row.get('la_applied_amount'),'color':'','urls':[]})
			CoColumnAPI.append({'key':'Terms (months):','value':row.get('la_term'),'color':'','urls':[]})
			CoColumnAPI.append({'key':'Interest Rate (per year):','value':row.get('la_interest_rate'),'color':'','urls':[]})
			CoColumnAPI.append({'key':'Applied Date:','value':row.get('la_applied_date'),'color':'','urls':[]})
			CoColumnAPI.append({'key':'Purpose:','value':row.get('la_loan_purpose'),'color':'','urls':[]})
			CoColumnAPI.append({'key':'Number Of Co Borrower:','value':row.get('la_num_of_co_borrower'),'color':'','urls':[]})
			CoColumnAPI.append({'key':'Number Of Guarantor:','value':row.get('la_num_of_co_guarantor'),'color':'','urls':[]})
			
			ListBodyLoanApplicationAPI.append({
				'columns':CoColumnAPI,
				'urls':[],
				'important':[]
				})

		
	
		if ListBodyLoanApplicationAPI:
			BodyListAPI.append({
								'icon':'','name':'LoanApplication','title': 'Loan Applications','type':'Summary','data':ListBodyLoanApplicationAPI,'most_data':False,'expand':True,'header':HeaderLoanApplicationAPI
							})

		#End Loan Application
		#End API


		self.body = {'header':[],'data':BodyListAPI}
		CustomerObjDict.update({'loan_to_value':LoanToValue})
		CustomerObjDict.update({'monthly_repayment_to_ndi':MonthlyRepaymentNDI})
		CustomerObjDict.update({'cu_min_to_value':CoMinCollateralValueFormat})
		CustomerObjDict.update({'cu_total_monthly_repayment':TotalMonthlyRepaymentAll})
		
		self.kwargs = 	{

							'customer_obj_dict':CustomerObjDict,
							'collateral_obj_dict':CollateralDic,
							'loan_contract_active_dic':LoanContractActiveDic,
							'loan_contract_inactive_dic':LoanContractInactiveDic,
							'loan_application_dic':LoanApplicationDic

						}

		#: Update By Kiry
		Key 						=	{'label':'Total Repayment:','color':'','url':{},'bold':False}
		Value 						=	{'label':TotalMonthlyRepaymentAll,'color':'','url':{},'bold':True}
		HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})

		Key 						=	{'label':'DSCR:','color':'','url':{},'bold':False}
		Value 						=	{'label':MonthlyRepaymentNDI,'color':'','url':{},'bold':True}
		HeaderCustomerlLeftAPI.append({'key':Key,'value':Value})

		#End



		self.recordID = ID
		return True
	
def getLoanContractActive(LoanContractObjActive,LoActStatus,Inactive):
	ListLoanContractActive = []
	SystemBankDate 			= str(mktdate.getBankDate())
	InactiveLoanStatus 			= {'WOF': 'Written-off','MRT':'Matured','TMN':'Paid-off'}
	for row in 	LoanContractObjActive:
		LoActLoanProductObj 	=	MKT_LOAN_PRODUCT.query.get(row.LoanProduct)	
		ObjRep 					= 	MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==row.ID,MKT_REP_SCHEDULE.CollectionDate>=SystemBankDate).order_by\
									(MKT_REP_SCHEDULE.CollectionDate).first()
		LoActMonRepPrincipal 	=	float(ObjRep.Principal) if ObjRep else 0
		LoActMonRepInterest		= 	float(ObjRep.Interest) if ObjRep else 0
		LoActMonRepCharge 		= 	float(ObjRep.Charge) if ObjRep else 0
		if Inactive=='Inactive':
			LoActStatus = InactiveLoanStatus.get(row.LoanStatus)
		LoActLoanProduct 		=	LoActLoanProductObj.Description if LoActLoanProductObj else 'N/A'
		LoActApprovedAmount 	=	mktmoney.toMoney(float(row.ApprovedAmount), mktmoney.getCurrencyObj(row.Currency), 1)
		LoActDisbursed 			=	mktmoney.toMoney(float(row.Disbursed), mktmoney.getCurrencyObj(row.Currency), 1)
		LoActOutstandingAmount	=	mktmoney.toMoney(float(row.OutstandingAmount), mktmoney.getCurrencyObj(row.Currency), 1)
		LoActTerm 				=	row.Term
		LoActInstallment		=	row.Installment 
		LoActInterestRate 		=	row.InterestRate
		MonthlyRepayment 		=	float(LoActMonRepPrincipal+LoActMonRepInterest+LoActMonRepCharge)
		LoActMonthlyRepAmount 	= 	mktmoney.toMoney(MonthlyRepayment, mktmoney.getCurrencyObj(row.Currency), 1)
		LoActValueDate 			=	row.ValueDate
		LoActFirstCollectionDate = 	row.FirstCollectionDate if row.FirstCollectionDate else 'N/A'
		LoActMaturityDate 		=	row.MaturityDate
		LoActViewHistory 		=	'/LoanCentre/?ID=%s'%row.ID
		LoActDic 	= 	{
			'lo_act_status':LoActStatus,'lo_act_loan_product':LoActLoanProduct,'lo_act_view_history':LoActViewHistory,
			'lo_act_approved_amount':LoActApprovedAmount,'lo_act_disbured':LoActDisbursed,
			'lo_act_outstanding_amount':LoActOutstandingAmount,'lo_act_term':LoActTerm,'monthly_repayment':MonthlyRepayment,
			'lo_act_installment':LoActInstallment,'lo_act_interest_rate':LoActInterestRate,
			'lo_act_monthly_rep':LoActMonthlyRepAmount,'lo_act_value_date':LoActValueDate,
			'lo_act_first_collaction_date':LoActFirstCollectionDate,'lo_act_maturity_date':LoActMaturityDate
		}

		ListLoanContractActive.append(LoActDic)
	return ListLoanContractActive

def formatLoanContractAPI(ObjData=[],ColorStatus=''):
	ListBodyContractAPI = []
	TotalMonthlyRepayment 	=	0
	for row in ObjData:
		
		ContractColumnAPI 		= 	[]
		TitleConStatusAPI 		= 	'Status:'
		ConStatusAPI  			=	row.get('lo_act_status')
		ContractColumnAPI.append({'key':TitleConStatusAPI,'value':ConStatusAPI,'color':ColorStatus,'urls':[]})

		TitleLoActLoanProduct 					=	'Loan Product:'
		LoActLoanProduct 						=	row.get('lo_act_loan_product')
		ContractColumnAPI.append({'key':TitleLoActLoanProduct,'value':LoActLoanProduct,'color':'','urls':[]})

		TitleLoActApprovedAmount				=	'Approved Amount:'
		LoActApprovedAmount 					=	row.get('lo_act_approved_amount')
		ContractColumnAPI.append({'key':TitleLoActApprovedAmount,'value':LoActApprovedAmount,'color':'','urls':[]})
		
		TitleLoActDisbursed 					=	'Disbursed Amount:'
		LoActDisbursed 							=	row.get('lo_act_disbured')
		ContractColumnAPI.append({'key':TitleLoActDisbursed,'value':LoActDisbursed,'color':'','urls':[]})

		TitleLoActOutstandingAmount				=	'Outstanding Amount:'
		LoActOutstandingAmount					=	row.get('lo_act_outstanding_amount')
		ContractColumnAPI.append({'key':TitleLoActOutstandingAmount,'value':LoActOutstandingAmount,'color':'','urls':[]})

		TitleLoActTerm 		=	'Term (months):'
		LoActTerm 			= 	row.get('lo_act_term')
		ContractColumnAPI.append({'key':TitleLoActTerm,'value':LoActTerm,'color':'','urls':[]})

		TitleLoActInstallment 	=	'Installment:'
		LoActInstallment 		=	row.get('lo_act_installment')
		ContractColumnAPI.append({'key':TitleLoActInstallment,'value':LoActInstallment,'color':'','urls':[]})

		TitleLoActInterestRate 	=	'Interest Rate (per year):'
		LoActInterestRate 		=	row.get('lo_act_interest_rate')
		ContractColumnAPI.append({'key':TitleLoActInterestRate,'value':LoActInterestRate,'color':'','urls':[]})

		TitleLoActMonthlyRepAmount						=	'Monthly Repayment:'
		LoActMonthlyRepAmount 							=	row.get('lo_act_monthly_rep')
		ContractColumnAPI.append({'key':TitleLoActMonthlyRepAmount,'value':LoActMonthlyRepAmount,'color':'','urls':[]})

		TitleLoActValueDate 			=	'Value Date:'
		LoActValueDate 					=	row.get('lo_act_value_date')
		ContractColumnAPI.append({'key':TitleLoActValueDate,'value':LoActValueDate,'color':'','urls':[]})

		TitleLoActMaturityDate 			=	'Maturity Date:'
		LoActMaturityDate 					=	row.get('lo_act_maturity_date')
		ContractColumnAPI.append({'key':TitleLoActMaturityDate,'value':LoActMaturityDate,'color':'','urls':[]})

		TitleLoActViewHistory 			=	'View History:'
		LoActViewHistory 					=	row.get('lo_act_view_history')
		ContractColumnAPI.append({'key':TitleLoActViewHistory,'value':'Link','color':'','urls':[{'url':LoActViewHistory,'type_url':'Custom','icon':''}]})
		TotalMonthlyRepayment += row.get('monthly_repayment',0)

		ListBodyContractAPI.append({
			'columns':ContractColumnAPI,
			'urls':[],
			'important':[]
			})
	return {'data':ListBodyContractAPI,'total_monthly_repayment':TotalMonthlyRepayment}

			
registerCRUD(admin, '/CreditSummary', 'CreditSummary',FRM_CUSTOMER_INFORMATION, [],template="customer/credit_summary.html",form_type='Custom',custom_form_data=CLS_Customer_Information)
