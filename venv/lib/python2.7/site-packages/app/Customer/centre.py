from app.mktcore.imports 			import *
from app.mktcore.wtfimports import *
from .models 						import *
import app.tools.mktmoney 			as mktmoney
import app.tools.mktdate 			as mktdate
import app.tools.mktaddress 		as mktaddress
import app.tools.mktsetting 		as mktsetting

from app.Account.models 			import MKT_ACCOUNT
from app.Account.forms 				import FRM_ACCOUNT
from app.AccEntry.models 			import MKT_ACC_ENTRY
from app.Transaction.models 		import MKT_TRANSACTION
from app.AccProduct.models 			import MKT_ACC_PRODUCT
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.Branch.models 				import MKT_BRANCH
from app.Province.models 			import MKT_PROVINCE
from app.District.models 			import MKT_DISTRICT
from app.Commune.models 			import MKT_COMMUNE
from app.Village.models 			import MKT_VILLAGE
from app.Officer.models 			import MKT_OFFICER
from app.PD.models 					import MKT_PAST_DUE,MKT_PD_DATE
from app.Category.models 			import MKT_CATEGORY
from app.LoanApplication.models 	import *
from app.Collateral.models			import *
from app.CollateralType.models 		import *
from reports 						import *
from app.PotentialCustomer.models 	import *
from app.mktcore.customform 		import *
from app.mktcore.globalfunction 	import StatusCodes
from app.mktcore.authentication import GetAPIReturnFormat,MesssageStandard
import app.tools.mktloan 			as mktloan

ExtendClass 			= 	mktsetting.ExtendModule()
ACC_ENTRY_MODULE_PREFIX =	ExtendClass.getUrlExtend(DictUrl=ACC_ENTRY_MODULE_PREFIX)


class FRM_CUSTOMER_CENTRE(exform):
	SearchCustomerID = RemoteTextField("Search Customer ID Or Name")



class CLS_CustomerCentre(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):
		FormAccount 	= FRM_ACCOUNT()
		Customer 		= ''
		CustomerTest    = ''
		Account 		= ''
		Loan 			= ''
		RecentActive    = ''
		PastDue 		= ''
		getCustID    	= request.args.get('ID').strip() if request.args.get('ID') else ""
		session['TELLER'] = ''
		DicModule 		= ACC_ENTRY_MODULE_PREFIX
		CollateralDetailObj=''
		CollateralType=''
		AllowPutID 		= "Y" # For Search Customer Centre
		LoanApplicationObj = '' # For Loan Applicatio Information
		AppStatus 		   = ''
		toMoney=mktmoney.toMoney
		CurrencyObj = mktmoney.getCurrencyObj
		if getCustID:
			Customer = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID==getCustID).all()
			CustomerTest = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID==getCustID).first()

			if Customer:

				Account  = MKT_ACCOUNT.query.filter_by(CustomerList=getCustID)
				Account = db.session.query(MKT_ACCOUNT.ID,MKT_ACCOUNT.AccName,MKT_ACC_PRODUCT.Description.label('AccProductDescription'),MKT_ACCOUNT.Currency,MKT_ACCOUNT.Balance).\
													join(MKT_ACC_PRODUCT, MKT_ACCOUNT.AccProduct == MKT_ACC_PRODUCT.ID).\
													filter(MKT_ACCOUNT.CustomerList==str(getCustID)).\
													filter(MKT_ACCOUNT.AccStatus=='O').\
													filter(MKT_ACCOUNT.CustomerList==str(getCustID))
				CollateralDetailObj=db.session.query(MKT_COLLATERAL_DE).\
										join(MKT_COLLATERAL,MKT_COLLATERAL.ID==MKT_COLLATERAL_DE.CollateralID).\
										join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_COLLATERAL.CustomerID).\
										filter(MKT_CUSTOMER.ID==getCustID).all()
				CollateralType=db.session.query(MKT_COLLATERAL_TYPE)

				BankdDate = str(mktdate.getBankDate())

				Loan = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ContractCustomerID == getCustID).\
												filter(MKT_LOAN_CONTRACT.MaturityDate >= BankdDate)

				ListAcc =[]
				for row in Account:
					ListAcc.append(str(row.ID))

				RecentActive = MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Account.in_(ListAcc)).\
												order_by(MKT_ACC_ENTRY.ID.desc()).limit(10)
				# if RecentActive.count()!=0:
				# 	RecentActive = reversed(RecentActive.all())
				# else:
				# 	RecentActive = ''

				PastDue = MKT_PAST_DUE.query.filter(MKT_PAST_DUE.Customer==getCustID,MKT_PAST_DUE.TotODAmount>0)

				# Customer Loan Information
				LoanApplicationObj 	= db.session.query(MKT_LOAN_APPLICATION.ID,
														MKT_LOAN_APPLICATION.AppDate,
														MKT_LOAN_APPLICATION.LNCustomerID,
														MKT_LOAN_APPLICATION.Currency,
														MKT_LOAN_APPLICATION.Amount,
														MKT_LOAN_APPLICATION.InterestRate,
														MKT_LOAN_APPLICATION.LoanProduct,
														MKT_LOAN_APPLICATION.Cycle,
														MKT_LOAN_APPLICATION.Term,
														MKT_LOAN_APPLICATION.AppStatus).\
														filter(MKT_LOAN_APPLICATION.LNCustomerID==getCustID).all()

				LoanApplicationHISTObj 	= db.session.query(MKT_LOAN_APPLICATION_HIST.AppDate,
															MKT_LOAN_APPLICATION_HIST.Currency,
															MKT_LOAN_APPLICATION.LNCustomerID,
															MKT_LOAN_APPLICATION_HIST.Amount,
															MKT_LOAN_APPLICATION_HIST.InterestRate,
															MKT_LOAN_APPLICATION_HIST.LoanProduct,
															MKT_LOAN_APPLICATION_HIST.Cycle,
															MKT_LOAN_APPLICATION_HIST.Term,
															MKT_LOAN_APPLICATION_HIST.AppStatus,
															MKT_LOAN_APPLICATION_HIST.ID,func.split_part(MKT_LOAN_APPLICATION_HIST.ID,"@",1).label("test")).\
															filter(MKT_LOAN_APPLICATION_HIST.LNCustomerID==getCustID).\
															filter(MKT_LOAN_APPLICATION_HIST.AppStatus.in_(['4','5','6'])).\
															distinct("test").all()
				LoanApplicationObj.extend(LoanApplicationHISTObj)

				AppStatus 		= {
										'0':'New', 
										'1':'Submitted', 
										'2':'Reviewed',
										'3':'Approved',
										'4':'Rejected',
										'5':'Cancelled',
										'6':'Closed'
									}

			else:
				flash(msg_warning+"%s record not found!"%getCustID)





		if checkContentType() == 'json' or 'API' in request.url:
			#Start API

			BodyList 		= []
			BodyDict 		= {}
			MostData 		= True
			self.customButton =	{
								'title':'Show',
								'type':'Hidden',
								'method':'get',
								'url':'/CustomerCentre/?ID=SearchCustomerID',
								'param':['SearchCustomerID'],
								'icon':'',
								'type_url':'Custom',
								'color':'#1b80c2'
								}		

			#Customer Body
			if CustomerTest:
				self.customType = 'Custom'
				self.customButton = {}
				CustomerDic  	= {}
				CusID 			= getLanguage('ID')
				CusName 		= getLanguage('Customer Name')
				CusGender 		= getLanguage('Gender')
				CusDOB 			= getLanguage('Date of Birth')
				CusTelePhone 	= getLanguage('Telephone')
				CusAddress 		= getLanguage('Address')
				CusBranch 		= getLanguage('Branch') 
				CusOffice 		= getLanguage('Officer')
				ValueCusName 	= CustomerTest.LastNameEn + " " + CustomerTest.FirstNameEn + " / " + CustomerTest.LastNameKh + " " + CustomerTest.FirstNameKh
				ValueCusGender 	= CustomerTest.Gender
				ValueCusDateOfBirth = CustomerTest.DateOfBirth
				ValueCusTelephone = CustomerTest.Mobile1 + " " + CustomerTest.Mobile2
				ValueCusAddress = mktaddress.getAddress(
														ProvinceID = CustomerTest.Province,
														DistrictID = CustomerTest.District,
														CommuneID  = CustomerTest.Commune,
														VillageID  = CustomerTest.Village,
														HouseNo    = CustomerTest.HouseNo,
														Street     = CustomerTest.Street,

										)
				ValueCusBranch =	CustomerTest.Branch + '-' + lookupTable('MKT_BRANCH','ID','Description',CustomerTest.Branch)
				ValueCusOffice =	CustomerTest.Officer + '-' + lookupTable('MKT_OFFICER','ID','LastName',CustomerTest.Officer) + lookupTable('MKT_OFFICER','ID','FirstName',CustomerTest.Officer)


				CustomerList 	= [ {'label':CusID,'value':CustomerTest.ID,'urls':[{'url':"/Customer/?ID="+CustomerTest.ID,'type_url':'Form','icon':''}]},
									{'label':CusName,'value':ValueCusName,'urls':[]},
									{'label':CusGender,'value':ValueCusGender,'urls':[]},
									{'label':CusDOB,'value':ValueCusDateOfBirth,'urls':[]},
									{'label':CusTelePhone,'value':ValueCusTelephone,'urls':[]},
									{'label':CusAddress,'value':ValueCusAddress,'urls':[]},
									{'label':CusBranch,'value':ValueCusBranch,'urls':[]},
									{'label':CusOffice,'value':ValueCusOffice,'urls':[]}]

				CustomerDic.update({
									'icon':'','name':'Customer','title': 'General','type':'List','data':CustomerList,'most_data':MostData
								})
				BodyList.append(CustomerDic)

				#End Customer Body

				# Start Account

				if Account.count() != 0:
					AccountDic 	= {}
					AccountList = []
					Column 		= []
					for row in Account:
						ConverMoney 	= 	toMoney(float(row.Balance),CurrencyObj(row.Currency) )
						AccountID 		=	{'key':getLanguage('Account'),'value':row.ID}
						AccountName		=	{'key':getLanguage('Name') ,'value':row.AccName}
						AccountType 	=	{'key':getLanguage('Type')  ,'value':row.AccProductDescription}
						AccountCurrency	=	{'key':getLanguage('Currency') ,'value':row.Currency} 
						AccountBalance	=	{'key':getLanguage('Balance') ,'value':ConverMoney}  
						Column 			= 	[AccountID,AccountName,AccountType,AccountCurrency,AccountBalance]
						ImportantField 	= 	[AccountID,AccountName,AccountBalance]
						AccountList.append({'columns':Column,
											'urls':[
													{'url':"/Account/?ID="+row.ID,'type_url':'Form','icon':'th-list'},
													{'url':"/AccountStatement/?ID="+row.ID,'type_url':'Custom','icon':'file-o'}
												],
											'important':ImportantField
											})
					AccountDic.update({
								'icon':'','name':'Account','title': 'Account','type':'Table','data':AccountList,'most_data':False,'expand':False
							})

					BodyList.append(AccountDic)
				else:
					BodyList.append({
								'icon':'','name':'Account','title': 'Account','type':'Table','data':[],'most_data':False,'expand':False
							})

				# End Account

				# Start Collateral Detail
				if CollateralDetailObj:
					CollateralDetailDic 	= 	{}
					CollateralDetailList 	= 	[]
					Column 					=	[]
					for row in CollateralDetailObj:
						CollaNumber 			=	{'key':'Collateral Number','value':row.CollateralNumber}
						CollaType				=	{'key':'Collateral Type','value':CollateralType.get(row.CollateralType).Description}
						Currency 				=	{'key':'Currency','value':row.Currency}
						PurchasePrice 			=	{'key':'Purchase Price','value':toMoney(float(row.PurchasePrice),CurrencyObj(row.Currency))}
						ValuationPrice 			=	{'key':'Valuation Price','value':toMoney(float(row.ValuationPrice),CurrencyObj(row.Currency))}
						IssueDate 				=	{'key':'Issue Date','value':row.IssuedDate}
						ReceivedDate 			=	{'key':'Received Date','value':row.ReceivedDate}
						WithdrawalDate 			=	{'key':'Withdrawal Date','value':row.WithdrawalDate}
						PropertyDescription 	=	{'key':'Property Description','value':row.Description}
						ImportantField 			= 	[CollaNumber,Currency,PurchasePrice]
						Column 					= 	[CollaNumber,CollaType,Currency,PurchasePrice,ValuationPrice,IssueDate,ReceivedDate,WithdrawalDate,PropertyDescription]
						if row.Location !=None:
							Location 			=	{'key':'Collateral Location','value':row.Location}
							Column.append(Location)
							CollateralDetailList.append({
													'columns':Column,
													'urls':[{'url':"/ViewCollateralDetailLocation/?Location="+row.Location,'type_url':'Map','icon':'map-marker'}
														],
													'important':ImportantField
													})
						else:
							CollateralDetailList.append({
														'columns':Column,
														'urls':[{'url':"/CollateralDetail/?ID="+row.ID,'type_url':'Form','icon':''}],
														'important':ImportantField
														})
					CollateralDetailDic.update({
								'icon':'file-text-o','name':'CollateralDetail','title': 'Collateral','type':'Table','data':CollateralDetailList,'most_data':MostData,'expand':False
							})
					BodyList.append(CollateralDetailDic)
				else:
					BodyList.append({
								'icon':'file-text-o','name':'CollateralDetail','title': 'Collateral','type':'Table','data':[],'most_data':False,'expand':False
							})

				#End Collateral Detail

				# Start Loan Application
				if len(LoanApplicationObj) != 0:
					LoanApplicationDic 	= {}
					LoanApplicationList = []
					Column 				= []
					Important 			= True
					for row in LoanApplicationObj:
						LAAccount 				= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList == row.LNCustomerID).first()
						LoanApplicationID 		=	{'key':'Loan Application ID','value':row.ID,'important':Important}
						ApplicationDate 		=	{'key':'Application Date' ,'value':row.AppDate,'important':Important}
						Currency 				=	{'key':'Currency'  ,'value':row.Currency,'important':Important}
						ApprovedAmount 			=	{'key':'Approved Amount' ,'value':toMoney(float(row.Amount),CurrencyObj(row.Currency)),'important':Important} 
						IntRateYear 			=	{'key':'Int Rate/Year' ,'value':toMoney(float(row.InterestRate),CurrencyObj(row.Currency)),'important':Important} 
						Term 					=	{'key':'Term','value':row.Term,'important':Important}
						LoanProduct 			=	{'key':'Loan Product' ,'value':lookupTable('MKT_LOAN_PRODUCT','ID','Description',row.LoanProduct),'important':Important}
						Cycle 					=	{'key':'Cycle'  ,'value':row.Cycle,'important':Important} 
						Status 					=	{'key':'Status','value':AppStatus[row.AppStatus],'important':Important}
						# ContractOfficerID 		=	{'key':'ContractOfficerID' ,'value':row.ContractOfficerID,'important':Important}
						Column 					= 	[LoanApplicationID,ApplicationDate,Currency,ApprovedAmount,IntRateYear,Term,LoanProduct,Cycle,Status]
						ImportantField 			= 	[LoanApplicationID,Currency,ApprovedAmount]
						LoanApplicationList.append({
													'columns':Column,
													'urls':[{'url':"/Account/?ID="+LAAccount.ID if LAAccount else '','type_url':'Form','icon':'th-list'},
															{'url':"/AccountStatement/?CustomID="+LAAccount.ID if LAAccount else '','type_url':'Custom','icon':'file-o'}],
													'important':ImportantField
													})
					LoanApplicationDic.update({
								'icon':'th-list','name':'LoanApplication','title': 'Loan Application','type':'Table','data':LoanApplicationList,'most_data':MostData,'expand':False
							})
					BodyList.append(LoanApplicationDic)
				else:
					BodyList.append({
								'icon':'th-list','name':'LoanApplication','title': 'Loan Application','type':'Table','data':[],'most_data':False,'expand':False
							})
    					

				# End Loan Application

				# Start Loan Contract - Info'
				if Loan.count() != 0:
					LoanContractDic 	= {}
					LoanContractList = []
					Column 				= []
					for row in Loan:
						ContractID 			=	{'key':getLanguage('Contract ID'),'value':row.ID}
						LoanProduct 		=	{'key':getLanguage('Loan Product'),'value':lookupTable('MKT_LOAN_PRODUCT','ID','Description',row.LoanProduct)}
						Currency 			=	{'key':getLanguage('Currency'),'value':row.Currency}
						Disbursed 			=	{'key':getLanguage('Disbursed'),'value':toMoney(float(row.Disbursed),CurrencyObj(row.Currency))} 
						OutstandingAmount 	=	{'key':getLanguage('Outstanding Amount'),'value':toMoney(float(row.OutstandingAmount),CurrencyObj(row.Currency))} 
						ValueDate 			=	{'key':getLanguage('Value Date'),'value':row.ValueDate}
						MaturityDate 		=	{'key':getLanguage('Maturity Date'),'value':row.MaturityDate}
						InterestRate 		=	{'key':getLanguage('Interest Rate'),'value':row.InterestRate} 
						Branch 				=	{'key':getLanguage('Branch'),'value':lookupTable('MKT_BRANCH','ID','Description',row.Branch)}
						Officer 			=	{'key':getLanguage('Officer'),'value':row.ContractOfficerID}

						CurrInstallment 	=  	mktloan.getCurrInstallment(row.ID)
						NextPayment			=	{'key':'Next Payment','value':toMoney(CurrInstallment.get("TotalAmount"),CurrencyObj(row.Currency))} # will return 0 number if recored of repayemnt scedule not found
						DueDate 			=	{'key':'Due Date','value':CurrInstallment.get("DuePaymentDate")} # will return empty string if recored of repayemnt scedule not found

						PercentagePayment 	= 	mktloan.getPercentagePayment(DisbursedAmount=row.Disbursed,OutstandingAmount=row.OutstandingAmount)
						Progress 			= 	{"key":'Progress','value':PercentagePayment}
						TotODAmount 		= 	{"key":'TotODAmount','value':toMoney(mktloan.getTotPDAmount(row.ID),CurrencyObj(row.Currency))}
						Column 				= 	[ContractID,LoanProduct,Currency,Disbursed,OutstandingAmount,ValueDate,MaturityDate,InterestRate,Branch,Officer,NextPayment,DueDate,Progress,TotODAmount]
						ImportantField 		=	[ContractID,Currency,OutstandingAmount]
						LoanContractList.append({'columns':Column,
												'urls':[{
															'url':"/LoanContract/?ID="+row.ID,
															'type_url':'Form',
															'icon':''
														},
														{
															'url':"/LoanCentre/?ID="+row.ID,
															'type_url':'Custom',
															'icon':'th-list'
														},
														{
															'url':"/RepaymentSchedule/?ID="+row.ID,
															'type_url':'Custom',
															'icon':'calendar'
														}],
												'important':ImportantField   
												})
					LoanContractDic.update({
								'icon':'th-list',
								'name':'LoanContract',
								'title':'Loan Contract',
								'type':'Table',
								'data':LoanContractList,
								'most_data':MostData,
								'expand':False
							})
					BodyList.append(LoanContractDic)
				else:
					BodyList.append({
								'icon':'th-list',
								'name':'LoanContract',
								'title':'Loan Contract',
								'type':'Table',
								'data':[],
								'most_data':False,
								'expand':False
							})	

				# End Loan Contract - Info'

				# Start Recent Activites
				if RecentActive:
					RecentActivitesDic 	= {}
					RecentActivitesList = []
					Column 				= []
					for row in RecentActive:
						Date 			=	{'key':getLanguage('Date'),'value':row.TransactionDate}
						ReAccount 		=	{'key':getLanguage('Account'),'value':row.Account}
						Description 	=	{'key':getLanguage('Description'),'value':lookupTable('MKT_TRANSACTION','ID','Description',row.Transaction)}
						Reference		=	{'key':getLanguage('Reference'),'value':row.Reference} 
						Amount 			=	{'key':getLanguage('Amount'),'value':toMoney(float(row.Amount),CurrencyObj(row.Currency),2 )} 
						Column 			= 	[Date,ReAccount,Description,Reference,Amount]
						ImportantField 	= 	[Date,Description,Amount]
						RecentActivitesList.append({
												'columns':Column,
												'urls':[{'url':'/'+DicModule.get(row.Module)+'/?ID='+row.Reference,'type_url':'Form','icon':''}],
												'important':ImportantField
												})
					RecentActivitesDic.update({
								'icon':'history',
								'name':'RecentActivites',
								'title':'Recent Activites',
								'type':'Table',
								'data':RecentActivitesList,
								'most_data':MostData,
								'expand':False
							})
					BodyList.append(RecentActivitesDic)

				# End Recent Activites

				# Start Past-Due Payment
				if PastDue.count() != 0:
					PastDueDic 	= {}
					PastDueList = []
					Column 				= []
					for row in PastDue:
						ID 			=	{'key':getLanguage('ID'),'value':row.ID}
						Currency 	=	{'key':getLanguage('Currency'),'value':row.Currency}
						Amount 		=	{'key':getLanguage('Amount'),'value':toMoney(float(row.TotODAmount),CurrencyObj(row.Currency))}
						Pricipal	=	{'key':getLanguage('Pricipal'),'value':toMoney(float(row.TotPrincipalDue),CurrencyObj(row.Currency))} 
						Interest	=	{'key':getLanguage('Interest'),'value':toMoney(float(row.TotInterestDue),CurrencyObj(row.Currency))} 
						Penalty		=	{'key':getLanguage('Penalty'),'value':toMoney(float(row.TotPenaltyDue),CurrencyObj(row.Currency))} 
						Column 		= [ID,Currency,Amount,Pricipal,Interest,Penalty]
						ImportantField = [ID,Currency,Amount]
						PastDueList.append({
											'columns':Column,
											'urls':[{'url':'/PD/?ID='+row.ID,'type_url':'Form','icon':''}],
											'important':ImportantField
										})
					
					PastDueDic.update({
								'icon':'',
								'name':'Past-Due-Payment',
								'title':'Past-Due Payment',
								'type':'Table',
								'data':PastDueList,
								'most_data':MostData,
								'expand':False
							})
					BodyList.append(PastDueDic)
				else:
					BodyList.append({
								'icon':'',
								'name':'Past-Due-Payment',
								'title':'Past-Due Payment',
								'type':'Table',
								'data':[],
								'most_data':False,
								'expand':False
							})
    					

				# End Past-Due Payment


				# View Document
				# ViewDocumentUrl = 'View/Document/?ID=%s&Type=%s&Reference=%s'%(getCustID,'','')
				ViewDocumentUrl = 'Document/?ID=%s'%getCustID
				BodyList.append({
								'icon':'paperclip',
								'name':'ViewDocument',
								'title':'View Document',
								'type':'Single',
								'data':[],
								'url':ViewDocumentUrl,
								'method':'get',
								'type_url':'Custom'
							})
				# End View Document
				# View Customer Location
				ViewCustomerLocation = '/FindCustomer/?ID=%s'%getCustID
				BodyList.append({
								'icon':'map-marker',
								'name':'ViewCustomerLocation',
								'title':'View Customer Location',
								'type':'Single',
								'data':[],
								'url':ViewCustomerLocation,
								'method':'get',
								'type_url':'Map'
							})
				# End View Customer
			BodyDict.update({
				'header':[],'data':BodyList
				})
			setattr(FRM_CUSTOMER_CENTRE,'SearchCustomerID',RemoteTextField('Search Customer ID or Name',default=getCustID))
			if BodyList:
				delattr(FRM_CUSTOMER_CENTRE,'SearchCustomerID')
			self.body 		= BodyDict
			self.recordID 	= getCustID
			self.header 	= 'Customer Centre'
		self.kwargs 	=	{
					'toMoney':mktmoney.toMoney,
					'float':float,
					'CurrencyObj' : mktmoney.getCurrencyObj,
					'formatDate':mktdate.formatDate,
					'lookupTable' : lookupTable,
					'getAddress' : mktaddress.getAddress,
					'getCustID':getCustID,
					'Customer':Customer,
					'Account':Account,
					'Loan':Loan,
					'RecentActive':RecentActive,
					'PastDue':PastDue,
					'DicModule' : DicModule,
					'FormAccount' :FormAccount,
					'LoanApplicationObj' : LoanApplicationObj,
					'AppStatus':AppStatus,
					'CollateralDetailObj':CollateralDetailObj,
					'AllowPutID':AllowPutID,
					'CollateralType':CollateralType
				}
		self.form 		= FRM_CUSTOMER_CENTRE
		return True


		#End API

# print  lookupTable('MKT_VILLAGE','ID','Description',row.Village)
def lookupTable(TableName,Field,FieldLookUp,Value):
	if Value:
		karwgs = {Field:Value}
		QueryTable = eval(TableName).query.filter_by(**karwgs)
		if not QueryTable:
			return ""
		else:
			for row in QueryTable:
				if getattr(row,FieldLookUp):
					return getattr(row,FieldLookUp)
				else:
					return ""
	else:
		return ""

@app.route("/Morakot/BlackList", methods=['GET'])
@app.route("/Morakot/API/BlackList", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def BlackList():
	Start 			= time.time()
	EndTime = "0"
	# Block check access right
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/BlackList/","Delete")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	ID    	= request.args.get('ID').strip() if request.args.get('ID') else ""
	
	ResultObj = []
	CustomerObj = []
	QueryObj = MKT_PO_CUSTOMER.query.get(ID)
	if not QueryObj:
		QueryObj = MKT_CUSTOMER.query.get(ID)

	FullName 	 		= 	""
	Mobile1 	 		= 	""
	Mobile2 	 		= 	""
	Gender 		 		= 	""	
	DateOfBirth	 		= 	""	

	if QueryObj:		
		FirstNameEn 	= 	QueryObj.FirstNameEn #OR Like
		LastNameEn 		= 	QueryObj.LastNameEn #OR
		Mobile1 		= 	QueryObj.Mobile1 #OR
		Mobile2 		= 	QueryObj.Mobile2 #OR
		Gender 			= 	QueryObj.Gender #AND

		DateOfBirth 	= 	QueryObj.DateOfBirth if hasattr(QueryObj, 'DateOfBirth') else ''
		IDType		 	= 	QueryObj.IDType if hasattr(QueryObj, 'IDType') else ''
		IDNumber	 	= 	QueryObj.IDNumber if hasattr(QueryObj, 'IDNumber') else ''

		FullName 		=	"%s %s" %(LastNameEn, FirstNameEn)

		MobileList      =	[Mobile1,Mobile2]

		#Check in customer table MKT_CUSTOMER	
		CustomerObj     = 	MKT_CUSTOMER.query.filter(MKT_CUSTOMER.Block == 'Y')
		POCustomerObj   =	MKT_PO_CUSTOMER.query.filter(MKT_PO_CUSTOMER.Block == 'Y')

		ExistListID		= 	[]
		ExistPOListID	= 	[]

		MobileObj 		= 	[]
		MobilePOObj 	= 	[]

		### check mobile 
		for item in MobileList:
			MobileNumber = item
			if MobileNumber != "":
				MobileObj 		= 	CustomerObj.\
											filter(or_(MKT_CUSTOMER.Mobile1==MobileNumber,
													   MKT_CUSTOMER.Mobile2==MobileNumber)).\
											filter(MKT_CUSTOMER.ID!=ID)

				for row in MobileObj:
					ExistListID.append(row.ID)

				MobilePOObj		= 	POCustomerObj.\
											filter(or_(MKT_PO_CUSTOMER.Mobile1==MobileNumber,
													   MKT_PO_CUSTOMER.Mobile2==MobileNumber)).\
											filter(MKT_PO_CUSTOMER.ID!=ID)

				for row in MobilePOObj:
					ExistPOListID.append(row.ID)

		### check name , gender, dob
		CustomerObj				= 	CustomerObj.\
										filter(
												or_(
													and_(
														func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+FirstNameEn.upper()+'%'),
														func.upper(MKT_CUSTOMER.LastNameEn).like('%'+LastNameEn.upper()+'%')
													),
													and_(
														func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+LastNameEn.upper()+'%'),
														func.upper(MKT_CUSTOMER.LastNameEn).like('%'+FirstNameEn.upper()+'%'),
													)
												),
												and_(or_(MKT_CUSTOMER.Gender == Gender,
													 MKT_CUSTOMER.DateOfBirth == DateOfBirth))
											)
		if ExistListID:
			CustomerObj			= 	CustomerObj.filter(~MKT_CUSTOMER.ID.in_(ExistListID))

		POCustomerObj 		=	POCustomerObj.\
										filter(
												or_(
													and_(
														func.upper(MKT_PO_CUSTOMER.FirstNameEn).like('%'+FirstNameEn.upper()+'%'),
														func.upper(MKT_PO_CUSTOMER.LastNameEn).like('%'+LastNameEn.upper()+'%')
													),
													and_(
														func.upper(MKT_PO_CUSTOMER.FirstNameEn).like('%'+LastNameEn.upper()+'%'),
														func.upper(MKT_PO_CUSTOMER.LastNameEn).like('%'+FirstNameEn.upper()+'%'),
													)
												),
												MKT_PO_CUSTOMER.Gender == Gender,
											)
		if ExistPOListID:
			POCustomerObj			= 	POCustomerObj.filter(~MKT_PO_CUSTOMER.ID.in_(ExistPOListID))


		ResultObj = CustomerObj.all()	
		ResultObj.extend(POCustomerObj)
		ResultObj.extend(MobileObj)
		ResultObj.extend(MobilePOObj)

		EndTime = time.time() - Start

	else:
		if 'ID' in request.args and ID=="":
			flash(msg_warning+"Please input Record ID")


	return render_template("customer/blacklist.html",
							ResultObj=ResultObj,
							QueryObj=QueryObj,
							ID=ID,
							FullName=FullName,
							Mobile1=Mobile1,
							Mobile2=Mobile2,
							Gender=Gender,
							DateOfBirth=DateOfBirth,
							mktaddress=mktaddress,
							formatNumber = mktmoney.formatNumber,
							EndTime=EndTime,
							)

@app.route("/Morakot/CustomerRecordID", methods=['GET'])
@app.route("/Morakot/API/CustomerRecordID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CustomerRecordID():
	search 				= request.args.get('q')
	action 				= request.args.get('action') if 'action' in request.args else ""
	NAMES 				= []
	FilterCondition 	= []
	FilterCondition1 	= []

	FilterCondition.append(or_(or_(MKT_CUSTOMER.ID.like('%'+search.upper()+'%'), func.upper(MKT_CUSTOMER.FirstNameEn).like('%'+search.upper()+'%')), func.upper(MKT_CUSTOMER.LastNameEn).like('%'+search.upper()+'%')))
	CustomerObj = MKT_CUSTOMER.query.filter(*FilterCondition).order_by(MKT_CUSTOMER.ID.asc()).all()

	if CustomerObj:
		for row in CustomerObj:
			dic = {"id":row.ID, "text":row.ID + " - " + row.LastNameEn + " " + row.FirstNameEn}
			NAMES.append(dic)
			# app.logger.debug(NAMES)

	FilterCondition1.append(or_(or_(MKT_PO_CUSTOMER.ID.like('%'+search.upper()+'%'), func.upper(MKT_PO_CUSTOMER.FirstNameEn).like('%'+search.upper()+'%')), func.upper(MKT_PO_CUSTOMER.LastNameEn).like('%'+search.upper()+'%')))
	POCustomerObj = MKT_PO_CUSTOMER.query.filter(*FilterCondition1).order_by(MKT_PO_CUSTOMER.ID.asc()).all()

	if POCustomerObj:
		for row in POCustomerObj:
			dic = {"id":row.ID, "text":row.ID + " - " + row.LastNameEn + " " + row.FirstNameEn}
			NAMES.append(dic)
			# app.logger.debug(NAMES)

	return jsonify(items = NAMES)

@app.route("/Morakot/FindCustomer/", methods=['GET'])
@app.route("/Morakot/API/FindCustomer/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def FindCustomer():
	CustomerDict  = {}
	CustomerList  = []
	Location 	  = ""
	Longitude 	  = None
	Latitude 	  = None
	CusID 		  = request.args.get('ID')
	Status 		  = StatusCodes()
	CustomerObj   = MKT_CUSTOMER.query.get(CusID)
	Province = ""
	District = ""
	Commune  = ""
	Village  = ""
	if CustomerObj:
		ProvinceObj = MKT_PROVINCE.query.get(CustomerObj.Province)
		if ProvinceObj:
			Province = ProvinceObj.Description
		DistrictObj = MKT_DISTRICT.query.get(CustomerObj.District)
		if DistrictObj:
			District = DistrictObj.Description
		CommuneObj = MKT_COMMUNE.query.get(CustomerObj.Commune)
		if CommuneObj:
			Commune = CommuneObj.Description
		VillageObj = MKT_VILLAGE.query.get(CustomerObj.Village)
		if VillageObj:
			Village = VillageObj.Description
		Location = CustomerObj.LastLocation
		if Location:
			try:
				LocationSplit = Location.split(' ')
				Longitude 	  = float(LocationSplit[1])
				Latitude 	  = float(LocationSplit[0])
			except Exception as e:
				raise e
			CustomerList.append({
								"current_address": str(Province+", "+District+", "+Commune+", "+Village),
								"date_of_birth": CustomerObj.DateOfBirth,
								"first_name_en": CustomerObj.FirstNameEn,
								"last_name_en": CustomerObj.LastNameEn,
								"gender": CustomerObj.Gender,
								"id": CustomerObj.ID,
								"longitude":Longitude,
								"latitude":Latitude,
								"phone": CustomerObj.Mobile1,
								"type_url": "Form",
								"url": "/Customer/?ID="+CustomerObj.ID
								})
		CustomerDict.update({"customer": {
								"customers":CustomerList,
								"url_filter":"/GetAllOfficerCustomer/",
								"url_find":"/FindCustomers/?ID=",
								"url_search":"/SearchCustomerOfficer/?Search=&q=",
								"filter_params":[]}
							})
		return GetAPIReturnFormat(Header="View Customer Location",Data=CustomerDict,RecordID=CusID,Status=Status.ok(),Type="Map")
	return MesssageStandard(Messages=['No customer location has been found...'],Statuscode=Status.not_found())


@app.route("/Morakot/ViewCollateralDetailLocation/", methods=['GET'])
@app.route("/Morakot/API/ViewCollateralDetailLocation/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ViewCollateralDetailLocation():
	LocationList  = [] 	  
	LocationDict  = {}
	Location 	  = request.args.get('Location')
	Longitude 	  = None
	Latitude 	  = None
	Status 		  = StatusCodes()
	if Location !=None:
		try:
			LocationSplit = Location.split(' ')
			Longitude 	  = float(LocationSplit[1])
			Latitude 	  = float(LocationSplit[0])
		except Exception as e:
			raise e
		LocationList.append({
							 "longitude"	:Longitude,
							 "latitude"		:Latitude
							 })
		LocationDict.update({"Collateral"	:
								{
								  "Location":LocationList
								}
							})
		return GetAPIReturnFormat(Header="View Collateral Detail Location",Data=LocationDict,RecordID="",Status=Status.ok(),Type="Map")
	return MesssageStandard(Messages=['No location has been found...'],Statuscode=Status.not_found())

registerCRUD(admin, '/CustomerCentre', 'CustomerCentre',FRM_CUSTOMER_CENTRE, [MKT_CUSTOMER_CENTRE],template="customer/centre.html",form_type='MainCustom',custom_form_data=CLS_CustomerCentre)
