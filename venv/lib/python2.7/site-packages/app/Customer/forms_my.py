# -*- coding: utf-8 -*-
from app.mktcore.wtfimports 		import *
from .models 						import *
from .forms 						import *
from app.VillageII.models 			import *
import math

import app.tools.mktaddress 	as mktaddress

def getRecord():
	try:
		result = MKT_CUSTOMER_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_CUSTOMER.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'VillageII'			:str(row.VillageII)})
				Dict.update({'EmployerVillageII'	:str(row.EmployerVillageII)})
			return Dict
		else:
			return Dict

	except:
		raise

def loadVillageII():
	if request.method == 'POST':
		Village=str(request.args.get("Village"))
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE_II.query.filter_by(ID=Record['VillageII'])
		else:
			return MKT_VILLAGE_II.query.filter_by(ID='').all()

	return mktaddress.getLoadVillageII(Village)

def loadEmpVillageII():
	if request.method == 'POST':
		Village=str(request.args.get("EmployerVillage"))
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE_II.query.filter_by(ID=Record['EmployerVillageII'])
		else:
			return MKT_VILLAGE_II.query.filter_by(ID='').all()

	return mktaddress.getLoadVillageII(Village)

class FRM_CUSTOMER_MY(FRM_CUSTOMER):

	VBID 			= 	RemoteTextField("Centre/Village Bank")
	GroupID 		= 	QuerySelectField('Group',
							query_factory=loadGroupID,
							get_label=lambda a: a.ID + " - " + a.GroupName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[custom_GroupMember])

	PotentialCustomer 	= 	RemoteTextField("Potential Customer")

	FirstNameEn 	=	TextField(requiredlabel("%s (%s)" %(getLanguage("Name"), getLanguage("English")),"*"),[validators.Required()])
	LastNameEn 		=	TextField(requiredlabel("%s (%s)" %("Father Name", getLanguage("English")),"*"))
	FatherNameEn    =   TextField(requiredlabel("%s (%s)" %("Father Name", getLanguage("English")),"*"),[validators.Required()])
	FirstNameKh 	=	TextField("%s (%s)" %(getLanguage("Name"), "Myanmar"))
	LastNameKh 		=	TextField("%s (%s)" %("Father Name", "Myanmar"))
	FatherNameLocal =   TextField("%s (%s)" %("Father Name", "Myanmar"))

	Salutation 		=	SelectField(getLanguage("Salutation"),
							 choices=[('Mrs', 'Mrs'),('Mr', 'Mr'),('Miss','Miss')],
							 coerce=str)
	Gender 			=	SelectField(requiredlabel(getLanguage("Gender"),"*"),
							 choices=[('Female', 'Female'),('Male', 'Male'),('Other','Other')],
							 coerce=str,
							 validators=[validators.Required()])
	DateOfBirth 	=	DateField(requiredlabel(getLanguage("Date of Birth"), "*"),
							format='%Y-%m-%d',
							validators=[custom_DateOfBirth])

	CountryOfBirth 	=	QuerySelectField(getLanguage('Country of Birth'),query_factory=loadCountry, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='',
							 default=lambda:loadCountry('MM'),
							 validators=[validators.Required()])
	Nationality		=   QuerySelectField(getLanguage('Nationality'),query_factory=loadCountry, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='',
							 default=lambda:loadCountry('MM'),
							 validators=[validators.Required()])
	ProvinceOfBirth =	QuerySelectField('Province/Division/State of Birth',query_factory=loadProvinceOfBirth, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Province/Division/State--')
	DistrictOfBirth =	QuerySelectField(getLanguage('District of Birth'),query_factory=loadDistrictOfBirth, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose District--')
	CommuneOfBirth 	=	QuerySelectField('Commune/Township of Birth',query_factory=loadCommuneOfBirth, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Commune/Township--')
	AsGurantor 		=	SelectField(requiredlabel(getLanguage('As Guarantor'),"*"),
							 choices=[('N', 'No'),('Y', 'Yes')],
							 coerce=str,
							 validators=[validators.Required()])
	MaritalStatus 	=	SelectField(requiredlabel(getLanguage('Marital Status'),'*'),
							 choices=[('1', 'Married'),
							 		('2', 'Single'),
							 		('3','Divorced'),
							 		('4','Widow'),
							 		('5','Widower'),
							 		('6','Separated'),
							 		('7','Defacto'),
							 		('8','Unknown')],
							 coerce=str,
							 validators=[validators.Required()])
	Resident 		=	SelectField(getLanguage('Resident'),
							 choices=[('Y', 'Yes'),('N', 'No')],
							 coerce=str,
							 validators=[validators.Required()])

	Officer         = RemoteTextField(requiredlabel("Loan Officer", "*"),
								dicRemote={'url':'/Morakot/SearchOfficer'},
								validators=[validators.Required()]
						)
	EducationLevel 	=	QuerySelectField('Education Level',
								query_factory=loadEducationLevel, 
								get_label='Description',
								allow_blank=True,
								blank_text=u'--None--'
							)

	# --Contact and Address--
	Province 		= 	QuerySelectField(requiredlabel('Province/Division/State','*'),query_factory=loadProvince, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Province/Division/State--',
							 validators=[validators.Required()],
							 description="1-%s" %getLanguage('Current Address and Contact'))
	District 		= 	QuerySelectField(requiredlabel('District','*'),query_factory=loadDistrict, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose District--',
							 validators=[validators.Required()],
							 description="1-%s" %getLanguage('Current Address and Contact'))
	Commune 		=	QuerySelectField(requiredlabel('Commune/Township','*'),query_factory=loadCommune, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Commune/Township--',
							 validators=[validators.Required()],
							 description="1-%s" %getLanguage('Current Address and Contact'))
	Village 		=	QuerySelectField('Town/Village Tracts',query_factory=loadVillage, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Town/Village Tracts--',
							 description="1-%s" %getLanguage('Current Address and Contact'))
	VillageII 		=	QuerySelectField('Ward/Village',query_factory=loadVillageII, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Ward/Village--',
							 description="1-%s" %getLanguage('Current Address and Contact'))
	City 			=	TextField("City",description="1-%s" %getLanguage('Current Address and Contact'))
	HouseNo 		=	TextField("House No",
							description="1-%s" %getLanguage('Current Address and Contact'),
							validators=[validators.Length(max=25)])
	Street 		   =	TextField('Street',
							description="1-%s" %getLanguage('Current Address and Contact'),
							validators=[validators.Length(max=40)])
	Mobile1 		=	TextField(getLanguage("Mobile Phone 1"),
							 description="1-%s" %getLanguage('Current Address and Contact'))
	Mobile2 		=	TextField(getLanguage("Mobile Phone 2"), description="1-%s" %getLanguage('Current Address and Contact'))
	Email 			= 	TextField(getLanguage("Email"), [validators.Optional(),validators.Email(message=u'Invalid email address.')],
							 description="1-%s" %getLanguage('Current Address and Contact'))

	# --Spouse Info--

	SpoFirstNameEn  	 =	TextField("%s (%s)" %("Name","English"),description="2-%s" %'Spouse Info')
	SpoLastNameEn 	     =	TextField("%s (%s)" %("Father Name", getLanguage("English")),description="2-%s" %'Spouse Info')
	FaSpouseLastNameEn   =  TextField("%s (%s)" %("Father Name", getLanguage("English")),description="2-%s" %'Spouse Info')
	SpoFirstNameKh 	     =	TextField("%s (%s)" %("Name","Myanmar"),description="2-%s" %'Spouse Info')
	SpoLastNameKh 	     =	TextField("%s (%s)" %("Father Name", "Myanmar"),description="2-%s" %'Spouse Info')
	FaSpouseLastNameLocal=  TextField("%s (%s)" %("Father Name", "Myanmar"),description="2-%s" %'Spouse Info')
	SpoDateOfBirth       =	DateField("Spouse Date of Birth",
							 description="2-%s" %'Spouse Info',
							 validators=[custom_SpoDateOfBirth]
							)
	SpouseNationality		=   QuerySelectField('Spouse Nationality',
							 query_factory=loadCountry, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='',
							 default=lambda:loadCountry('MM'),
							 description="2-%s" %'Spouse Info')

	SpoOccupation 	=	QuerySelectField(getLanguage('Occupation'),query_factory=loadPosition, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='--None--',
							 description="2-%s" %'Spouse Info'
							)
	SpoOccupationRemark =	TextAreaField("Occupation Remark",
							 description="2-%s" %'Spouse Info')
	SpouseIDType 		=	SelectField("ID Type of Spouse",
							choices=[('', '--None--'),('1', 'No National ID'),('2', 'National ID')],
							coerce=str,
							description="2-Spouse Info"
							)
	SpoNationalID 			=	TextField("# Of ID Type",description="2-%s" %'Spouse Info')


	SpouseIDIssueDate		=	DateField("Issue Date Of ID Type", validators=[custom_SpouseIDIssueDate], description="2-Spouse Info")


	# --Family Info --
	HouseOwnership 		=	SelectField('House Ownership',
								choices=[('', '--None--'),
										('1', 'Owner'),
								 		('2', 'Family'),
								 		('3', 'Sibling'),
								 		('4', 'Others Relative'),
								 		('5', 'Friend'),
								 		('6', 'Rental'),
								 		('7', 'Other')
								 		],
								coerce=str,
								description="3-Family Details"
							)

	NumberOfMember 		=	TextField('# Family Member', description="3-Family Details",
								validators=[validators.Length(max=3)])
	ActiveMember 		=	TextField('# Income Generator', description="3-Family Details",
								validators=[validators.Length(max=3)])


	# --Employment Detail--
	EmployerType 	=	SelectField(requiredlabel('Employment Type',"*"),
							 choices=[('C', 'Current'),('P', 'Previous')],
							 coerce=str,
							 validators=[validators.Required()],
							 description="4-%s" %getLanguage('Employment Details'))

	SelfEmployed 	=	SelectField(requiredlabel(getLanguage('Self-Employed'),"*"),
							 choices=[('N', 'No'),('Y', 'Yes')],
							 coerce=str,
							 validators=[validators.Required()],
							 description="4-%s" %getLanguage('Employment Details'))
	
	Position 		=	QuerySelectField(requiredlabel('Occupation', '*'),query_factory=loadPosition, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='--None--',
							 description="4-%s" %getLanguage('Employment Details'))
	PositionRemark	=	TextAreaField("Occupation Remark",
							 description="4-%s" %('Employment Details'))

	LengthOfService =	TextField(isRequiredCBCLabel("Length Of Service(M)"),
							 validators=[validators.Length(max=3)],
							 description="4-%s" %getLanguage('Employment Details'))

	CompanyName 	=	TextField(getLanguage("Company Name"),
							description="4-%s" %getLanguage('Employment Details'),
							validators=[validators.Length(max=35)])

	CompanyBusiness =	TextField(getLanguage("Company Business"),
							description="4-%s" %getLanguage('Employment Details'),
							validators=[validators.Length(max=50)])

	EmployerName 	=	TextField(isRequiredCBCLabel("Employer Name"),
							description="4-%s" %getLanguage('Employment Details'),
							validators=[validators.Length(max=50)])

	EmployerAddressType = SelectField(isRequiredCBCLabel('Employer AddressType'),
						  choices=[('WORK', 'Work'),
						  		   ('RESID', 'Residential'),
					  			   ('POST', 'Correspondence'),
						  		   ('U', 'Unknown')
						  		  ],
						  coerce=str,
						  validators=[validators.Required()],
						  description="4-%s" %getLanguage('Employment Details'),
						  default='WORK')

	EmployerProvince = QuerySelectField(isRequiredCBCLabel('Employer Province/Division/State'),query_factory=loadEmpProvince,
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Province/Division/State--',
							 description="4-%s" %getLanguage('Employment Details'))

	EmployerDistrict = QuerySelectField(isRequiredCBCLabel('Employer District'),query_factory=loadEmpDistrict,
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose District--',
							 description="4-%s" %getLanguage('Employment Details'))

	EmployerCommune = QuerySelectField(isRequiredCBCLabel('Employer Commune/Township'),query_factory=loadEmpCommune,
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Commune/Township--',
							 description="4-%s" %getLanguage('Employment Details'))

	EmployerVillage = QuerySelectField(isRequiredCBCLabel('Employer Town/Village Tracts'),query_factory=loadEmpVillage,
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Town/Village Tracts--',
							 description="4-%s" %getLanguage('Employment Details'))

	EmployerVillageII = QuerySelectField('Employer Ward/Village',query_factory=loadEmpVillageII,
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Ward/Village--',
							 description="4-%s" %getLanguage('Employment Details'))

	EmployerAddress =	TextField('Employer Address',
							description="4-%s" %getLanguage('Employment Details'),
							validators=[validators.Optional(),validators.Length(max=150)])

	Currency 		= 	QuerySelectField(getLanguage('Currency'),query_factory=loadCurrency, 
							 get_label='ID',
							 allow_blank=False,
							 blank_text='--None--',
							 description="4-%s" %getLanguage('Employment Details'))

	MonthlyIncome 		=	TextField(isRequiredCBCLabel("Total Monthly Salary/Income"),
							description="4-%s" %getLanguage('Employment Details'),
							validators=[validators.Required()])

	YearEmployed 	=	TextField(getLanguage("Years Employed"),
							description="4-%s" %getLanguage('Employment Details'),
							validators=[validators.Length(max=4)])

	# --Classification--
	Sector 			=	QuerySelectField(requiredlabel(getLanguage('Sector'),'*'),query_factory=loadSector, 
							 get_label=lambda a: a.ID + " - " + a.Description,
							 allow_blank=True,
							 blank_text='--None--',
							 validators=[validators.Required()],
							 description="5-%s" %getLanguage('Classification'))
	
	Industry 		=	QuerySelectField(requiredlabel(getLanguage('Industry'),'*'),query_factory=loadIndustry, 
							 get_label=lambda a: a.ID + " - " + a.Description,
							 allow_blank=True,
							 blank_text='--None--',
							 validators=[validators.Required()],
							 description="5-%s" %getLanguage('Classification'))
	
	ACMember 		=	SelectField(requiredlabel(getLanguage('AC Member'),"*"),
							 choices=[('Y', 'Yes'),('N', 'No')],
							 coerce=str,
							 validators=[validators.Required()],
							 description="5-%s" %getLanguage('Classification'))

	CustomerType 	=	QuerySelectField('Customer Type',
							query_factory=loadCustomerType, 
							get_label='Description',
							allow_blank=True,
							blank_text='--None--',
							description="5-%s" %getLanguage('Classification')
						)

	# --Identification--
	IDType 			=	SelectField(requiredlabel(getLanguage('ID Type'),'*'),
							choices=[('', '--None--'),('1', 'No National ID'),('2', 'National ID')],
							coerce=str,
							validators=[validators.Required()],
							description="8-%s" %getLanguage('Identification Document'))

	IDNumber 		=	TextField(getLanguage("ID Number"),
							 description="8-%s" %getLanguage('Identification Document'))
	
	IssuePlace 		=	TextField(requiredlabel(getLanguage("Issue Place"),'*'),
							 description="8-%s" %getLanguage('Identification Document'))
	
	IssueDate 		=	DateField(requiredlabel(getLanguage("Issue Date"),'*'),
		 					[validators.Optional()],
							 description="8-%s" %getLanguage('Identification Document'))
	
	ExpiryDate 		=	DateField(getLanguage("Expiry Date"),
							 description="8-%s" %getLanguage('Identification Document'),
							 validators=[custom_ExpiryDate])
	
	# --Block--
	Block 			=	SelectField(getLanguage('Block'),
							choices=[('N', 'No'),('Y', 'Yes')],
							coerce=str,
							default='N',
							description="9-%s" %getLanguage('Block')
						)
	
	BlockReason 	=	TextAreaField("Block Reason",
						description="9-%s" %getLanguage('Block'),
						validators=[validators.Length(max=100)])


	def validate_FirstNameEn(form, field):
		Msg 		= 	""
		ListID 		= 	""
		ID 			=	request.form['ID'] if request.method == "POST" else ""
		DateOfBirth =	request.form['DateOfBirth'] if request.method == "POST" else ""
		FirstNameEn =	request.form['FirstNameEn'] if request.method == "POST" else ""
		LastNameEn 	=	request.form['LastNameEn'] if request.method == "POST" else ""
		Gender 		=	request.form['Gender'] if request.method == "POST" else ""
		FullName 	=	"%s %s" %(LastNameEn, FirstNameEn)

		"""
			Exact duplicate customer: (Name, Gender, and DOB) or ID is the same. 
				=> This will not allow customer creation to be saved and suggest to use the existing one.
				Example:
				No 	Name 		Gender 		DOB 			Identification
				----------------------------------------------------------------------------
				1 	Jonh Sena 	Male 		1980-02-10		010123456
				2	Sena Jonh	Male 		1980-02-10		010987654
				3	Jonh Sena 	Male 		1980-09-09		010123456
			
			=> Customer 1 and 2 are duplicated because Name, Gender and DOB are the same
			=> Customer 1 and 3 are duplicated because ID are the same
			----------------------------------------------------------------------------
			=> Customer 2 and 3 are potential duplicated becuase only Name and Gender are the same
			* For potential duplicate customer, see staticmethod IsAcceptOverride()
		"""
		CustomerObj 	=	MKT_CUSTOMER.query.\
							filter(
									or_(
										and_(
											func.upper(MKT_CUSTOMER.FirstNameEn)==FirstNameEn.upper(),
											func.upper(MKT_CUSTOMER.LastNameEn)==LastNameEn.upper()
										),
										and_(
											func.upper(MKT_CUSTOMER.FirstNameEn)==LastNameEn.upper(),
											func.upper(MKT_CUSTOMER.LastNameEn)==FirstNameEn.upper(),
										)
									),
									MKT_CUSTOMER.Gender == Gender,
									MKT_CUSTOMER.DateOfBirth == DateOfBirth,
									MKT_CUSTOMER.ID != ID
								).first()

		POCustomerObj	=	MKT_PO_CUSTOMER.query.\
							filter(
									or_(
										and_(
											func.upper(MKT_PO_CUSTOMER.FirstNameEn)==FirstNameEn.upper(),
											func.upper(MKT_PO_CUSTOMER.LastNameEn)==LastNameEn.upper()
										),
										and_(
											func.upper(MKT_PO_CUSTOMER.FirstNameEn)==LastNameEn.upper(),
											func.upper(MKT_PO_CUSTOMER.LastNameEn)==FirstNameEn.upper(),
										)
									),
									MKT_PO_CUSTOMER.Gender == Gender
								).first()

		if CustomerObj:
			if CustomerObj.Block == "N":
				ListID += '<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a> ' %(CUSTOMER_LINK,CustomerObj.ID,CUSTOMER_LINK,CustomerObj.ID,CustomerObj.ID)

			if ListID:
				
				Br = "<br>" if Msg else ''
				Override 	= 	True
				CustomerInfo= "Customer <b>%s %s, %s, %s</b> is created on <b>%s</b> by User <b>%s</b> at Branch <b>%s</b>."\
							 %(CustomerObj.LastNameEn, CustomerObj.FirstNameEn, CustomerObj.Gender, CustomerObj.DateOfBirth, CustomerObj.Createdon, CustomerObj.Inputter, CustomerObj.Branch)
				Msg 		+= 	'%s The customer you are trying to create is already existed. Please check customer %s.<br> %s<br>' %(Br, ListID,CustomerInfo)

			ListID = ''
			if CustomerObj.Block == "Y":
				ListID += '<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a> ' %(CUSTOMER_LINK,CustomerObj.ID,CUSTOMER_LINK,CustomerObj.ID,CustomerObj.ID)

			if ListID:
				Override 	= 	True
				CustomerInfo= "Customer <b>%s %s, %s, %s</b> is created on <b>%s</b> by User <b>%s</b> at Branch <b>%s</b>."\
							 %(CustomerObj.LastNameEn, CustomerObj.FirstNameEn, CustomerObj.Gender, CustomerObj.DateOfBirth, CustomerObj.Createdon, CustomerObj.Inputter, CustomerObj.Branch)
				Msg 		+= 	'The customer you are trying to create is already existed in blacklist. Please check customer %s.<br> %s<br>' %(ListID,CustomerInfo)

		if POCustomerObj:
			ListID = ''
			if POCustomerObj.Block == "Y":
				ListID += '<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a> ' %(PO_CUSTOMER_LINK,POCustomerObj.ID,PO_CUSTOMER_LINK,POCustomerObj.ID,POCustomerObj.ID)

			if ListID:
				Override 	= 	True
				CustomerInfo= "Potential Customer <b>%s %s, %s</b> is created on <b>%s</b> by User <b>%s</b> at Branch <b>%s</b>."\
							 %(POCustomerObj.LastNameEn, POCustomerObj.FirstNameEn, POCustomerObj.Gender, POCustomerObj.Createdon, POCustomerObj.Inputter, POCustomerObj.Branch)
				Msg 		+= 	'The customer you are trying to create is existed in potential customer blacklist. Please check potential customer %s.<br> %s<br>' %(ListID,CustomerInfo)	


		#Validate English only
		FirstNameEn 		= field.data.strip() 
		if not mkttool.checkNameEn(FirstNameEn):
			Msg += 'Please enter English character only.'

		if Msg:
			raise ValidationError(Markup(Msg))

	def validate_LastNameEn(form, field):
		LastNameEn = field.data.strip()

		if not mkttool.checkNameEn(LastNameEn):
			raise ValidationError('Please enter English character only')

	def validate_FirstNameKh(form, field):
		FirstNameKh = field.data.strip()

		if FirstNameKh:
			if mkttool.checkNameKh(FirstNameKh):
				raise ValidationError('Please enter Myanmar character only')

	def validate_LastNameKh(form, field):
		LastNameKh = field.data.strip()

		if LastNameKh:
			if mkttool.checkNameKh(LastNameKh):
				raise ValidationError('Please enter Myanmar character only')

	def validate_Mobile1(form,field):
		Mobile1 = form.Mobile1.data
		if Mobile1:
			try:
				number = int(Mobile1)
			except:
				raise ValidationError('Invalid mobile phone number. Ex: 012xxxxxx')

	def validate_Mobile2(form,field):
		Mobile2 = form.Mobile2.data
		if Mobile2:
			try:
				number = int(Mobile2)
			except:
				raise ValidationError('Invalid mobile phone number. Ex: 012xxxxxx')

	def validate_IDNumber(form,field):
		ID 			= str(request.form.get('ID'))
		IDNumber 	= str(request.form.get('IDNumber'))
		IDType 		= str(request.form.get('IDType'))
		if IDType == '2':
			if not IDNumber:
				raise ValidationError('This field is required.')
			# format ID Number of Myanmar: 11/SATANA(N)084968

			CusIDNumber = MKT_CUSTOMER.query.\
									filter(MKT_CUSTOMER.ID!=ID).\
									filter(MKT_CUSTOMER.IDNumber.ilike(IDNumber)).all()
			if not CusIDNumber:
				CusIDNumber = MKT_CUSTOMER.query.\
										filter(MKT_CUSTOMER_INAU.ID!=ID).\
										filter(MKT_CUSTOMER_INAU.IDNumber == IDNumber).all()

			if CusIDNumber:
				Branch = ''
				Branch = ", ".join(str(row.Branch) for row in CusIDNumber)
				raise ValidationError('This ID Number %s is already used in branch %s'%(IDNumber, Branch))

	@staticmethod
	def setVisible():
		base 			= super(FRM_CUSTOMER_MY, FRM_CUSTOMER_MY).setVisible()
		ListField = [("ACMember"), ("CustomerType"), ("YearEmployed"), ("CompanyName"),
					 ("IssuePlace"), ("IssueDate"), ("ExpiryDate"),("LastNameEn"),("LastNameKh"),("SpoLastNameEn"),("SpoLastNameKh")]
		ListField.extend(base)
		return ListField

	@staticmethod
	def hotSelectField():
		base 			= super(FRM_CUSTOMER_MY, FRM_CUSTOMER_MY).hotSelectField()
		hotfield=[]

		fielddisplay="VillageII"
		varname="VillageID:$('#Village').val()"
		fun=["Village", varname ,fielddisplay, "/Morakot/VillageIIID", "click"]
		hotfield.append(fun)

		fielddisplay="EmployerVillageII"
		varname="VillageID:$('#EmployerVillage').val()"
		fun=["EmployerVillage", varname ,fielddisplay, "/Morakot/VillageIIID", "click"]
		hotfield.append(fun)

		hotfield.extend(base)
		return hotfield

	@staticmethod
	def listField():
		Fields = ["ID", "FatherNameEn", "FirstNameEn", "FatherNameLocal", "FirstNameKh", 
				  "Gender", "DateOfBirth", "Branch", "Officer"]
		return Fields