from flask 						import Flask, request, jsonify, make_response
from app.mktcore.imports 		import *
from werkzeug 					import secure_filename

from app.Customer.models 		import *
from app.Account.models 		import *
from app.LoanContract.models 	import *
from app.DataEnquiry.models 	import *
from app.Report.models 			import *
from app.FundTransfer.models 	import MKT_FUND_TRANSFER
from app.Upload.exportimport 	import insertTableFromCSV, getAuditTrailInau, getTableModel
from openpyxl 					import load_workbook

import app.tools.mkttool 		as mkttool
import app.tools.mktdb 			as mktdb
import app.tools.mktaudit 		as mktaudit
import os

# Report: Wing & True Money 
def formatDrawdownAccount(Account, Prefix='DD', Digit=6, Fill='0'):
	""" Use for format account number if user input DD1 => DD000001 or DD125 => DD00125
	By default account is 6 digit  """
	# "{0:06}".format(123) = > 000123
	# strFormat 	= 	"{Text:{Fill}{Digit}}".format(Text=Account,Fill=Fill,Digit=Digit)
	strFormat 		= 	'{:'+ Fill +'>' + str(Digit) + '}'
	if Account[:2] == "DD":
		Account 	=  'DD' + strFormat.format(Account[2:])
	else:
		Account 	=  'DD' + strFormat.format(Account)

	return Account

def getFileExtension(Filename):
	if not Filename:
		return ''
	_, Ext = os.path.splitext(Filename)
	return Ext


def convertCellData(ConfigDict, Worksheet, LastRow):
	ValueList = []
	ColumnNames = [i['ColumnName'] for _, i in ConfigDict.iteritems()]
	Cells = []
	for Key, Value in ConfigDict.iteritems():
		ColumnValue = Value.get('Value', '')
		if not ColumnValue:
			raise ValueError('Column %s not found' % Key)
		Cells.append(ColumnValue)

	for Cell in Cells:
		CellValues = []
		for i in xrange(Cell.row + 1, LastRow):
			CellObject = Worksheet.cell(row=i, column=Cell.col_idx)
			CellValues.append(CellObject.value)

		ValueList.append(CellValues)

	Data = map(list, zip(*ValueList))

	ListDict = []

	for row in Data:
		d = dict(zip(ColumnNames, row))
		ListDict.append(d)

	return ListDict


def getTableColumns(Table):
	Columns = []
	CoreColumns = ['Branch', 'Status', 'Curr', 'Inputter', 'Createdon', 'Authorizer', 'Authorizeon']
	for Column in Table.__table__.columns:
		if Column.key not in CoreColumns:
			Columns.append(Column.key)
	return Columns


def findRowIndex(Worksheet, SearchString):
	for i in xrange(1, Worksheet.max_row):
		for j in xrange(1, Worksheet.max_column):
			cell = Worksheet.cell(row=i, column=j)
			if cell.value == SearchString:
				return cell.row
	raise ValueError('Can not find "%s" in sheet "%s"' % (SearchString, Worksheet.title))


def getActiveSheet(File):
	wb = load_workbook(filename=File)
	if len(wb.worksheets) > 1:
		raise ValueError('There are more than 1 sheet %s' % ' '.join('"{0}"'.format(w) for w in wb.sheetnames))
	return wb.active


def getCSVDict(File, ImportOpt):

	Config = ''

	if ImportOpt == 'T':
		Config = mktsetting.getAppSetting('DETrue')
		LastRowOffsetConfig = mktsetting.getAppSetting('DETrueLastOff')
		LastRowValueConfig = mktsetting.getAppSetting('DETrueLastValue')

	if ImportOpt == 'W':
		Config = mktsetting.getAppSetting('DEWing')
		LastRowOffsetConfig = mktsetting.getAppSetting('DEWingLastOff')
		LastRowValueConfig = mktsetting.getAppSetting('DEWingLastValue')

	if not Config:
		raise ValueError('No configuration for option %s' % ImportOpt)

	Lines = Config.split('\n')

	ConfigDict = {}

	Worksheet = getActiveSheet(File)
	DataEnquiryColumns = getTableColumns(MKT_DATA_ENQUIRY)

	if LastRowOffsetConfig:
		try:
			LastRowOffset = int(LastRowOffsetConfig)
		except ValueError as e:
			raise ValueError('Error Config Last Row Offset must be an Integer %s' % LastRowOffsetConfig)
	else:
		LastRowOffset = 0

	if LastRowValueConfig:
		LastRowIndex = findRowIndex(Worksheet, LastRowValueConfig)
	else:
		LastRowIndex = Worksheet.max_row

	LastRow = LastRowIndex - LastRowOffset

	if LastRow <= 0:
		raise ValueError(
			('Error Config Last Row Index - Last Row Offset must be equal 1 or bigger')
			('%s - %s = %s') % (LastRowIndex, LastRowOffset, LastRow)
		)


	for Line in filter(None, Lines):
		Values = Line.rstrip().split('*')
		if len(Values) > 2:
			raise ValueError('Error Config %s' % Line)
		Key, ColumnName = Values
		# raise
		if ColumnName not in DataEnquiryColumns:
			raise ValueError('No column %s in Data Enquiry' % ColumnName)
		ConfigDict.update({
			Key: {
				'ColumnName': ColumnName
			}
		})

	for i in xrange(1, LastRow):
		for j in xrange(1, Worksheet.max_column):
			Cell = Worksheet.cell(row=i, column=j)
			if Cell.value in ConfigDict:
				ConfigDict[Cell.value]['Value'] = Cell


	Data = convertCellData(ConfigDict, Worksheet, LastRow)

	return Data


def parseRequest(request):


	JsonData = request.get_json()
	Data = JsonData['data']
	ReportID = JsonData['report_id']
	ImportOpt = JsonData['import_opt']
	FormName = ''
	TableName = ''

	if ImportOpt == 'W':
		FormName = mktsetting.getAppSetting('DEWingFormName')
		TableName = mktsetting.getAppSetting('DEWingTableName')

	if ImportOpt == 'T':
		FormName = mktsetting.getAppSetting('DETrueFormName')
		TableName = mktsetting.getAppSetting('DETrueTableName')

	if ImportOpt == 'N':
		return jsonify(msg='Can not save to system with Import Option %s' % ImportOpt), 400

	if not TableName:
		return jsonify(msg='Error config Table Name not yet set'), 400

	if 'INAU' not in TableName.upper():
		return jsonify(msg='Error config can not import to live table "%s"' % TableName), 400

	if not FormName:
		return jsonify(msg='Error config Form Name not yet set'), 400

	if not Data:
		return jsonify(msg='Error no data'), 400

	if not ReportID:
		return jsonify(msg='Error no report'), 400

	if len(Data) == 1:
		if len(Data[0]) > 1:
			if Data[0][0] == 'No data available in table':
				return jsonify(msg='No data'), 400


	ReportObj = MKT_REPORT.query.get(ReportID)

	ColumnNames = ReportObj.ReportHeader.splitlines()

	ColumnNames = filter(None, ColumnNames)

	ListDict = []

	for row in Data:
		d = dict(zip(ColumnNames, row))
		ListDict.append(d)

	ListDuplicated = []
	LiveTableName = TableName.replace('_INAU', '')

	for row in ListDict:
		Obj = getTableModel(LiveTableName).query.filter_by(Reference=row['Reference'])
		if Obj.first():
			ListDuplicated.append(row['Reference'])

	if ListDuplicated:
		msg = 'Reference %s already exist in system' % (' '.join(ListDuplicated))
		return jsonify(msg=msg), 400

	ListDuplicatedInau = []

	for row in ListDict:
		Obj = getTableModel(TableName).query.filter_by(Reference=row['Reference'])
		if Obj.first():
			ListDuplicatedInau.append(row['Reference'])

	if ListDuplicatedInau:
		msg = 'Reference %s already exist in system' % (' '.join(ListDuplicatedInau))
		return jsonify(msg=msg), 400

	Audit = getAuditTrailInau()

	try:
		insertTableFromCSV(
				TableName=TableName, DictCSV=ListDict,
				FormName=FormName, Audit=Audit
			)
		msg = 'Data was imported successfully.'
	except Exception, e:
		db.session.rollback()
		msg = e.message


	return jsonify(msg=msg)


@app.route("/Morakot/SaveDataEnquiry", methods=['POST'])
@app.route("/Morakot/API/SaveDataEnquiry", methods=['POST'])
@checkLogOutSession
@checkLogOutTime
def saveDataEnquiry():
	if request.method == 'POST':
		try:
			return parseRequest(request)
		except Exception, e:
			return jsonify(msg=e.message), 400


@app.route("/Morakot/DataEnquiry", methods=['GET', 'POST'])
@app.route("/Morakot/API/DataEnquiry", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def DataEnquiry():
	FieldRequired =[]
	CustomerObj 	= MKT_CUSTOMER.query
	AccountObj 		= MKT_ACCOUNT.query
	LoanContractObj = MKT_LOAN_CONTRACT.query
	DataEnquiryObj 	= MKT_DATA_ENQUIRY.query.order_by(MKT_DATA_ENQUIRY.Notes)
	ReportObj		= MKT_REPORT.query
	DicError 		= {}
	ListModule 		= {	'CU': CustomerObj, 
						'DD': AccountObj, 
						'LC': LoanContractObj}
	Audit 			= mktaudit.getAuditrail()
	Report 			= request.args.get('Report') if request.args else ""
	ImportOpt 		= request.args.get('ImportOpt') if request.args else "N"

	ReportID 		= ''
	ImportOption 	= mktsetting.getAppSetting('DE_IMPORT_OPTION')
	OptionDict 		= {}
	for line in ImportOption.splitlines():
		option = line.split("*")
		OptionDict.update({str(option[0]):str(option[1])})

	if request.method == 'POST':

		File = request.files['file']
		ImportOpt = request.form['ImportOpt']
		FileName = secure_filename(File.filename)
		FileExt = getFileExtension(FileName)
		AllowExt = ['.csv', '.xlsx']
		TableName = ""
		FormName = ""
		
		if ImportOpt == 'W':
			FormName = mktsetting.getAppSetting('DEWingFormName')
			TableName = mktsetting.getAppSetting('DEWingTableName')

		if ImportOpt == 'T':
			FormName = mktsetting.getAppSetting('DETrueFormName')
			TableName = mktsetting.getAppSetting('DETrueTableName')

		if not File:
			FieldRequired.append(('File Upload','This field is required.'))
		elif FileExt.lower() in AllowExt:

			DictCSV = []

			if (ImportOpt == 'W' or ImportOpt == 'T') and FileExt.lower() == '.xlsx':
				try:
					if ImportOpt == 'W':
						ReportID = mktsetting.getAppSetting('DEWingReport')

					if ImportOpt == 'T':
						ReportID = mktsetting.getAppSetting('DETrueReport')

					if not ReportID:
						raise ValueError('Error configuation Report ID not yet set with import option: %s' % ImportOpt)

					DictCSV = getCSVDict(File, ImportOpt)
				except ValueError as e:
					flash('%s %s' % (msg_error, e.message))
			elif ImportOpt == 'N' and FileExt.lower() == '.csv':
				ReportID = mktsetting.getAppSetting('DENormal')
				DictCSV = mkttool.getDictCSV(File)
			else:
				flash(msg_error + 'Incorrect file format')

			if DictCSV:
				db.session.query(MKT_DATA_ENQUIRY).delete()
				if TableName:
					LiveTableName = TableName.replace('_INAU', '')

				for row in DictCSV:
					# Validate Data in File CSV
					if row.get('Reference', None):
						Reference = row.get('Reference')
						Field1 	  = row.get('Field1',None) # Amount
						Field2 	  = row.get('Field2',None) # Currency
						Field3 	  = row.get('Field3') # Transaction ID
						if TableName:
							Obj 	  = getTableModel(LiveTableName).query.filter_by(Reference=str(Field3))
							InauObj   = getTableModel(TableName).query.filter_by(Reference=str(Field3))

						if ImportOpt in ['W','T']:
							Reference = formatDrawdownAccount(str(Reference))
							row.update({'Reference':Reference})

						if row['Reference'][:2] in ListModule:

							kwargs = {'Currency':Field2,'Amount':Field1}
							DicError.update({row['Reference'] : validateLookUpValue(ListModule[row['Reference'][:2]], row['Reference'],**kwargs)})
						else:
							DicError.update({row['Reference'] : 'RECORD NOT EXIST'})

						## check duplicate reference ID
						Status = True
						if TableName and (Obj.first() or InauObj.first()):#check in live and inau table 
							Status = False
							flash(msg_error+ 'Reference %s already exist in system'%Field3)
													
						# Inserting Notes, Branch, Audit to MKT_DATA_ENQUIRY
						row.update({'Notes':DicError[row['Reference']]})
						Branch = row.get('Branch', None)
						if Audit:
							row.update(Audit)
						if Branch:
							row.update({'Branch':Branch})
						row.pop('', None)
						if Status:
							mktdb.insertTable(MKT_DATA_ENQUIRY,row)

				db.session.commit()
				flash('Data source was imported successfully.')
			else:
				flash(msg_error + "File has no record.")
		else:
			flash(msg_error + "Allow file %s only." % ' '.join(AllowExt))

	return render_template("dataenquiry/dataenquiry.html",
							FieldRequired 	= FieldRequired,
							DataEnquiryObj 	= DataEnquiryObj,
							ReportObj 		= ReportObj,
							Report 			= Report,
							ImportOpt 		= ImportOpt,
							ReportID 		= ReportID,
							OptionDict 		= OptionDict)

def validateLookUpValue(QueryObj, Value, Message = "",**kwargs):
	Message = ''
	# Value = Account ID
	Currency 			= kwargs.get('Currency','')
	Amount 				= kwargs.get('Amount','')

	if not QueryObj.get(Value):
		Message = '%s RECORD NOT EXIST'%Value
	else:
		''' 
			Validate currency
			Not Empty, and match with account in MKT_ACCOUNT
		'''
		if not Currency:
			Message ='CURRENCY IS MISSING'
		else:
			AccountObj 	= QueryObj.filter(MKT_ACCOUNT.Currency==Currency).filter(MKT_ACCOUNT.ID==Value).first()
			if not AccountObj:
				Message = "CURRENCY IS NOT MATCHED IN ACCOUNT ID %s"%Value
		'''
			Validate Amount:
			Amount not empty and must bigger than 0 and must be a number
		'''
		print "Amount is: %s and is None? %s "%(Amount,Amount=='None')

		try:
			Amount = float(Amount)
		except Exception as e:
			Message += 'AMOUNT IS NOT A NUMBER' if Message =='' else ', AMOUNT IS NOT A NUMBER'

		if Amount is None:
			Message += 'AMOUNT IS MISSING' if Message =='' else ', AMOUNT IS MISSING'
		elif Amount < 0:
			Message += "AMOUNT IS LESS THAN 0" if Message =='' else ', AMOUNT IS LESS THAN 0'

	return Message
