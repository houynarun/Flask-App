# Created by Kiry 
# Date: 27 January 2015
# All Right Reserved Morakot Technology

from flask import request, url_for, render_template,flash,redirect
from app.mktcore.imports            import *

import app.tools.loantools.rescheduletools as scheduletools # import funtion Reschedule
import app.tools.loantools.nonworkingday   as work  #import funtion from nonworking
import app.tools.mktdate as mktdate
import app.tools.mktmoney as mktmoney
import app.tools.mkttool  as mkttool



@app.route("/Morakot/ScheduleTest", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeSchedule():
    
    DisburseAmount  = 1200 #DisburseAmount
    ValueDate       = '2015-01-01' #ValueDate
    Rate            = 24 #Rate
    FrequencyType   = 1 #Frequency Type 1= by Month ; 2= by Week
    Frequency       = 1 #Frequency 2 mean every two months
    Term            = 12#Term
    InterestDayBasis= 2 #InterestDayBasis 1=360 ; 2=365 ; 3=366
    FwdBwdKey       = 1 #FwdBwdKey  1=Move to back but within month; 2=Move to forward but within month; 3=Move to back day; 4=Move to forward day
    HolidayOption   = 1 #Holiday Option 1=Saturday + Sunday + Holiday ; 2=Sunday + Holiday; 3=Holiday only
    Currency        = 'USD' #Currency USD,KHR, THB
    BaseDateKey     = 1# 1 =Collection date refer to value date; 2= refer to Previous date
    FrequencyP      = 1 # Frequency Principle
    FrequencyI      = 1 # Frequency Interest
    RepaymentMode   = 1 # 1=Declining ; 2= Annuity ; 3=Flat
    FirstDate       = ""
    PaymentHoliday  = 0
    NumOfHolidayInstallment = 0
    WaiveInterest=""
    CriteriaRequired = True
    AnnuityAmount = 0
    if request.args:
        DisburseAmount      = float(request.args.get('DisburseAmount').replace(',',''))
        Currency            = str(request.args.get('Currency'))
        ValueDate           = str(request.args.get('ValueDate'))
        Rate                = float(request.args.get('Rate'))
        FrequencyType       = int(request.args.get('FrequencyType'))
        Frequency           = int(request.args.get('Frequency'))
        Term                = int(request.args.get('Term'))
        InterestDayBasis    = int(request.args.get('InterestDayBasis'))
        FwdBwdKey           = int(request.args.get('FwdBwdKey'))
        HolidayOption       = int(request.args.get('HolidayOption'))
        BaseDateKey         = int(request.args.get('BaseDateKey'))
        FrequencyP          = int(request.args.get('FrequencyP'))
        FrequencyI          = int(request.args.get('FrequencyI'))
        RepaymentMode       = int(request.args.get('RepaymentMode'))
        FirstDate           = str(request.args.get('FirstDate'))
        PaymentHoliday      = int(request.args.get('PaymentHoliday'))
        NumOfHolidayInstallment     = int(request.args.get('NumOfHolidayInstallment'))
        WaiveInterest               = str(request.args.get('WaiveInterest'))
        AnnuityAmount       = float(request.args.get('AnnuityAmount').replace(',',''))

        if WaiveInterest == "Y":
            OptWaiveInterest = True
        else:
            OptWaiveInterest = False
    # Add The above Value to List

    ParameterList = {
    'DisburseAmount':DisburseAmount,
    'Currency':Currency,
    'ValueDate':ValueDate,
    'Rate':Rate,
    'FrequencyType':FrequencyType,
    'Frequency':Frequency,
    'Term':Term,
    'InterestDayBasis':InterestDayBasis,
    'FwdBwdKey':FwdBwdKey,
    'HolidayOption':HolidayOption,
    'BaseDateKey':BaseDateKey,
    'FrequencyP':FrequencyP,
    'FrequencyI':FrequencyI,   
    'RepaymentMode':RepaymentMode,        
    'FirstDate':FirstDate,
    'PaymentHoliday':PaymentHoliday,
    'NumOfHolidayInstallment':NumOfHolidayInstallment,
    'WaiveInterest':WaiveInterest,
    'AnnuityAmount':AnnuityAmount
    }


    Schedule=''

    #try:
    if request.args:

        if DisburseAmount !=0:
            if RepaymentMode==1 or RepaymentMode==3  :
                Schedule=scheduletools.getScheduleDeclining(DisburseAmount,ValueDate,Rate,FrequencyType,
                                Frequency,Term,InterestDayBasis,FwdBwdKey,
                                HolidayOption,Currency,BaseDateKey,
                                FrequencyP,FrequencyI,RepaymentMode,None,FirstDate,False,PaymentHoliday,NumOfHolidayInstallment,OptWaiveInterest)
            elif RepaymentMode==2:
                Schedule=scheduletools.getScheduleAnnuity(DisburseAmount,ValueDate,Rate,FrequencyType,
                                Frequency,Term,Currency)

            elif RepaymentMode == 4: # IRR
                Schedule=scheduletools.getScheduleDeclining(DisburseAmount,ValueDate,Rate,FrequencyType,
                                Frequency,Term,InterestDayBasis,FwdBwdKey,
                                HolidayOption,Currency,BaseDateKey,
                                FrequencyP,FrequencyI,RepaymentMode,None,FirstDate,True,PaymentHoliday,NumOfHolidayInstallment,OptWaiveInterest)
      
            elif RepaymentMode == 5: #Annuity actual number day
                Schedule=scheduletools.getScheduleActualNumDay(DisburseAmount=DisburseAmount,ValueDate=ValueDate,Rate=Rate,FrequencyType=FrequencyType,
                            Frequency=Frequency,Term=Term,InterestDayBasis=InterestDayBasis, 
                            FwdBwdKey=FwdBwdKey,RepaymentMode=RepaymentMode,HolidayOption=HolidayOption,Currency=Currency,
                            BaseDateKey=BaseDateKey, AnnuityAmount=AnnuityAmount,Locale=None,
                            FirstDate=FirstDate,AccrCurrentInt=0, PaymentHoliday=PaymentHoliday,NumOfHolidayInstallment=NumOfHolidayInstallment,
                            OptWaiveInterest=OptWaiveInterest,ParamCharge={})
        else:
            flash(msg_warning+"Disburse Amount is required.")
    # except Exception as exe:
    #     flash(msg_error+exe.message)



    HeaderTable     =['No','Collection Date','Principal','Interest','Charge','Total Amount','Balance','NumberOfDay']
    ColumnTable     =['InstallmentNo', 'CollectionDate', 'Principal', 'Interest','Charge', 'TotalAmount','Balance','NumberOfDay']

    HeaderSchedule  =[['Value Date :',ValueDate],['Disburse Amount:',DisburseAmount],['Currency',Currency],
                    ['Rate','%r'%Rate],['Frequency Type',FrequencyType],['Frequency',Frequency],
                    ['FwdBwdKey','Back within month' if FwdBwdKey==1 else 'Forward within month' if FwdBwdKey==2 else 'Back' if FwdBwdKey==3 else'Forward'],
                    ['Term',Term],['InterestDayBasis',InterestDayBasis],['Frequency Principle',FrequencyP]
                    ]

    return render_template('scheduletest.html',
                        ParameterList=ParameterList,
                        HeaderTable=HeaderTable,
                        ColumnTable=ColumnTable,
                        Schedule=Schedule,
                        DisburseAmount=DisburseAmount,
                        CriteriaRequired=CriteriaRequired,
                        urlRequest=request.args,
                        getattr=getattr)