from wtforms 					import DecimalField
from app.mktcore.wtfimports import *
from .models import *
import time
import app.tools.mktmoney 		as mktmoney
import app.tools.mkttool		as mkttool
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktdate 		as mktdate
import app.tools.mktaudit 		as mktaudit
from decimal import *

def custom_GreaterZero(form, field):

	Value = field.data
	if Value:
		if mkttool.isString(Value):
			raise ValidationError("%s This field must be in numeric format."%Value)

		if float(Value) <= float(0):
			raise ValidationError("%s This field must be bigger than zero."%Value)

#class CURRENCY form
class FRM_CURRENCY(exform):

	Description=TextField(requiredlabel("Description","*"),validators=[validators.Required()])
	BuyRate=TextField(requiredlabel("Buy Rate","*"),validators=[validators.Required(),custom_GreaterZero])
	SellRate=TextField(requiredlabel("Sell Rate","*"),validators=[validators.Required(),custom_GreaterZero])
	MidRate=TextField(requiredlabel("Mid Rate","*"),validators=[validators.Required(),custom_GreaterZero])
	ReportingRate=TextField(requiredlabel("Reporting Rate","*"), validators=[validators.Required(),custom_GreaterZero])
	OtherRate1=TextField("Other Rate 1",validators=[custom_GreaterZero])
	OtherRate2=TextField("Other Rate 2",validators=[custom_GreaterZero])
	OtherRate3=TextField("Other Rate 3",validators=[custom_GreaterZero])
	RndMode=SelectField(requiredlabel('Rounding Mode',"*"),
							 choices=[('',''),('1','Up'),('2', 'Down'),('3','Natural')],
							 coerce=str,
							 validators=[validators.Required()])

	SmallestRndTo=SelectField(requiredlabel('Smallest Round To',"*"),
							 choices=[('1','1'),('10','10'),('50','50'),('100', '100'),
							          ('1000','1000'),('10000','10000')],
							 coerce=str,
							 validators=[validators.Required()])

	DecimalPlace=SelectField(requiredlabel('Decimal Place',"*"),
							 choices=[('',''),('0', '0'),('1', '1'),('2', '2'),('3','3'),('4', '4'),('5','5'),
							 ('6', '6'),('7', '7'),('8','8'),('9', '9'),('10','10'),('11', '11'),
							 ('12', '12'),('13','13'),('14', '14'),('15','15')],
							 coerce=str,
							 validators=[validators.Required()])
	ThoSeparator=TextField(requiredlabel("Thousand Separator","*"),[validators.Required()])
	DecSeparator=TextField(requiredlabel("Decimal Separator","*"),[validators.Required()])
	CurrencySign=TextField(requiredlabel("Currency Sign","*"),[validators.Required()])

	def validate_ThoSeparator(form,field):

		if len(form.ThoSeparator.data)>1:
			raise ValidationError("%s Thousand Separator is only one letter." % form.ThoSeparator.data)
		else:
			if (form.ThoSeparator.data)==',' or (form.ThoSeparator.data)=='.':
				pass
			else:
				raise ValidationError('%s Thousand Separator can be "," or "." ' % form.ThoSeparator.data)

	def validate_CurrencySign(form,field):
		
		if len(form.CurrencySign.data)>1:
			raise ValidationError("%s Currency Sign is only one letter." % form.CurrencySign.data)

	@staticmethod
	def listField():

		Fields = ["ID", "Description", "BuyRate", "SellRate", "MidRate",
				  "ReportingRate", "RndMode", "SmallestRndTo","DecimalPlace"]
		return Fields

	@staticmethod
	def setWidth():
		control_list = [("BuyRate", len3),
						("SellRate", len3),
						("MidRate", len3),
						("RndMode", len1),
						("SmallestRndTo", len1),
						("DecimalPlace", len1),
						("ThoSeparator", len1),
						("DecSeparator", len1),
						("CurrencySign", len1),
						("ReportingRate", len3),
						('NBCExchangeRate',len3)
						]
		return control_list

	@staticmethod
	def reverseRec():
		return True, "%s Record not allow to reverse." %(msg_warning)

	@staticmethod
	def beforeInsert():
		try:
			
			AuthLevel 	= g.getNAuthorize

			if AuthLevel == 0:

				Currency 		= request.form['ID']
				BuyRate 		= request.form['BuyRate']
				SellRate 		= request.form['SellRate']
				MidRate 		= request.form['MidRate']
				ReportingRate 	= request.form['ReportingRate']
				OtherRate1 		= request.form['OtherRate1']
				OtherRate2 		= request.form['OtherRate2']
				OtherRate3 		= request.form['OtherRate3']

				SystemDate 		= str(mktdate.getBankDate())

				Audit 		= mktaudit.getAuditrail()
				Inputter	= Audit['Inputter']
				Createdon 	= Audit['Createdon']
				Authorizer 	= Audit['Authorizer']
				Authorizeon	= Audit['Authorizeon']
				Branch 		= Audit['Branch']
				Status 		= Audit['Status']
				Curr 		= Audit['Curr']
				
				# Call function 
				UpdateExchangeRate = mktaccounting.setExchangeRate(
														Status 			=	Status,
														Curr 			=	Curr,
														Inputter 		=	Inputter,
														Createdon 		=	Createdon,
														Authorizer 		= 	Authorizer,
														Authorizeon		=	Authorizeon,
														Branch			=	Branch,
														Currency		=	Currency,
														SystemDate		=	SystemDate,
														BuyRate			=	BuyRate,
														SellRate		=	SellRate,
														MidRate			=	MidRate,
														ReportingRate	=	ReportingRate,
														OtherRate1 		= 	OtherRate1,
														OtherRate2 		= 	OtherRate2,
														OtherRate3 		= 	OtherRate3
														)
				if not UpdateExchangeRate[0]:
					flash(UpdateExchangeRate[1])
					return False
			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()
			return False
	
	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			ID 			= 	g.formID
			QueryObj 	=	MKT_CURRENCY_INAU.query.get(ID)
			
			if not QueryObj:

				flash(msg_error + "Currency %s not found." %ID)
				return False
			else:
				Currency 		= ID
				BuyRate 		= QueryObj.BuyRate
				SellRate 		= QueryObj.SellRate
				MidRate 		= QueryObj.MidRate
				ReportingRate 	= QueryObj.ReportingRate
				OtherRate1 		= QueryObj.OtherRate1
				OtherRate2 		= QueryObj.OtherRate2
				OtherRate3 		= QueryObj.OtherRate3
				SystemDate 		= str(mktdate.getBankDate())

				Audit 		= mktaudit.getAuditrail()
				Inputter	= QueryObj.Inputter
				Createdon 	= QueryObj.Createdon
				Authorizer 	= Audit['Authorizer']
				Authorizeon	= Audit['Authorizeon']
				Branch 		= QueryObj.Branch
				Status 		= QueryObj.Status
				Curr 		= QueryObj.Curr
				
				# Call function 
				UpdateExchangeRate = mktaccounting.setExchangeRate(
														Status 			=	Status,
														Curr 			=	Curr,
														Inputter 		=	Inputter,
														Createdon 		=	Createdon,
														Authorizer 		= 	Authorizer,
														Authorizeon		=	Authorizeon,
														Branch			=	Branch,
														Currency		=	Currency,
														SystemDate		=	SystemDate,
														BuyRate			=	BuyRate,
														SellRate		=	SellRate,
														MidRate			=	MidRate,
														ReportingRate	=	ReportingRate,
														OtherRate1 		= 	OtherRate1,
														OtherRate2 		= 	OtherRate2,
														OtherRate3 		= 	OtherRate3
														)
				if not UpdateExchangeRate[0]:
					flash(UpdateExchangeRate[1])
					return False

			return True
		except Exception, e:
			db.session.rollback()
			db.session.close()
			raise

def loadCurrency():
	return MKT_CURRENCY.query

def loadDefaultCurrency():
	return mktaccounting.getDefaultCurrency()

class FRM_CURRENCY_DE(exform):

	Currency=QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
	                        query_factory=loadCurrency,
	                        get_label=u'ID',
	                        allow_blank=loadDefaultCurrency(),
	                        blank_text=u'--None--',
	                        validators=[validators.Required()]
                        )
	BuyRate=TextField(requiredlabel("Buy Rate","*"),[validators.Required()])
	SellRate=TextField(requiredlabel("Sell Rate","*"),[validators.Required()])
	MidRate=TextField(requiredlabel("Mid Rate","*"),[validators.Required()])
	ReportingRate=TextField(requiredlabel("Reporting Rate","*"),[validators.Required()])
	OtherRate1=TextField("Other Rate 1")
	OtherRate2=TextField("Other Rate 2")
	OtherRate3=TextField("Other Rate 3")
	ReportingRate=TextField(requiredlabel("Reporting Rate","*"),[validators.Required()])
	SystemDate=DateField(requiredlabel("System Date", "*"), [validators.Required()])

	@staticmethod
	def setWidth():
		control_list = [("BuyRate", len3),
						("SellRate", len3),
						("MidRate", len3),
						("SystemDate", len3),
						("ReportingRate", len3),
						("OtherRate1", len3),
						("OtherRate2", len3),
						("OtherRate3", len3),
						]
		return control_list

	def validate_BuyRate(form,field):
		Value = form.BuyRate.data
		if mkttool.isString(Value):
			raise ValidationError("%s This field must be in numeric format."%Value)

	def validate_SellRate(form,field):
		Value = form.SellRate.data
		if mkttool.isString(Value):
			raise ValidationError("%s This field must be in numeric format."%Value)

	def validate_MidRate(form,field):
		Value = form.MidRate.data
		if mkttool.isString(Value):
			raise ValidationError("%s This field must be in numeric format."%Value)
			
	def validate_ReportingRate(form,field):
		Value = form.ReportingRate.data
		if mkttool.isString(Value):
			raise ValidationError("%s This field must be in numeric format."%Value)
