from wtforms 					import DecimalField
from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *

from app.Tax.models 			import MKT_TAX
from app.Charge.models 			import MKT_CHARGE
from app.Currency.models 		import MKT_CURRENCY
from app.Category.models 		import MKT_CATEGORY
import app.tools.mktsetting 	as mktsetting
import time

def loadCategory():
	return MKT_CATEGORY.query.order_by(MKT_CATEGORY.ID.asc())

def loadTax():
	return MKT_TAX.query.all()


class FRM_CHARGE_RATE(exform):

	Description 	= 	TextField(requiredlabel("Description", "*"), [validators.Required()])
	ChargeMode 		= 	SelectField(requiredlabel("Charge Mode", "*"),
							choices=[('', '---None---'),
									 ('1', 'Up-front Fee'),
									 ('2', 'Regular Fee')],
							coerce=str,
							default="1",
							validators=[validators.Required()]
						)
	RegularFeeType		= 	SelectField("Regular Fee Type",
							choices=[('', '---None---'),
									 ('1', 'Fixed Amount'),
									 ('3', 'Rate Base'),
									 ('2', 'Percentage of Loan Outstanding'),
									 ('4', 'Percentage of Disburse Amount'),
									 ('5', 'Percentage of Approved amount'),
									 ('6', 'Percentage of Loan Balance'),
									 ('99','CUSTOM')],
							default="",
							coerce=str,
						)
	RateFixed 		= 	SelectField(requiredlabel("Rate/Fixed", "*"),
							choices=[('R', 'Rate'),
									 ('F', 'Fixed')],
							coerce=str,
							validators=[validators.Required()]
						)

	if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
		Tax 		= QuerySelectField('Tax',
										query_factory=loadTax,
										get_label=u'Description',
										allow_blank=True,
										blank_text=u'--None--'
									)

	Value 			= 	TextField(requiredlabel("Value","*"),validators=[validators.Required()])
	MinimumAmount 	= 	TextField("Minimum Amount",default='0')

	IncomeCat 		=	QuerySelectField(requiredlabel("Income Category",'*'),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	
	ReceiveCat 		=	QuerySelectField("Receivable Category",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)

	ChargeSuspendCat=	QuerySelectField("Charge Suspend Category",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)
	Amortize 		= 	SelectField(requiredlabel("Amortization", "*"),
							choices=[('Y', 'Yes'),
									 ('N', 'No')],
							default='N',
							coerce=str,
							validators=[validators.Required()]
						)

	def validate_ChargeMode(form, field):
		ID = request.form['ID']
		ChargeMode = request.form['ChargeMode']
		if ChargeMode == '2':
			MainCharge = ID[:-3]
			# raise ValidationError(MainCharge)
			checkID = MKT_CHARGE_RATE.query.get(ID)
			if not checkID:
				ChargeObj = MKT_CHARGE_RATE.query.\
					   filter(MKT_CHARGE_RATE.ChargeMode == form.ChargeMode.data).\
					   first()
			else:
				ChargeObj = MKT_CHARGE_RATE.query.\
					   filter(MKT_CHARGE_RATE.ID == ID).\
					   filter(MKT_CHARGE_RATE.ChargeMode == form.ChargeMode.data).\
					   filter(MKT_CHARGE_RATE.ChargeMode != checkID.ChargeMode).\
					   first()

			if ChargeObj:
				if ChargeObj.ID[:-3] != MainCharge:
					raise ValidationError("Regular fee is already exists.")
			else:
				if checkID:
					ChargeObj = MKT_CHARGE_RATE.query.\
										filter(MKT_CHARGE_RATE.ChargeMode == form.ChargeMode.data).\
										filter(MKT_CHARGE_RATE.ChargeMode != checkID.ChargeMode).\
										first()
					if ChargeObj:
						raise ValidationError("Regular fee is already exists.")

	def validate_RegularFeeType(form, field):
		RegularFeeType = request.form['RegularFeeType']
		ChargeMode = request.form['ChargeMode']
		if ChargeMode == "2":#Regular Fee
			if not RegularFeeType:
				raise ValidationError('This field is required.')
		else:
			if RegularFeeType:
				raise ValidationError('This field must be blank if charge mode Front fee.')


	@staticmethod
	def setWidth():
		control_list= [('RateFixed', len1)]
		return control_list

	@staticmethod
	def beforeInsert():
		ID = request.form['ID']
		if len(ID) != 6:
			raise ValidationError(" Invalid format ID.")
		else:
			ID = ID[:3]
			Interest = MKT_CHARGE.query.get(ID)
			if Interest:
				ID = request.form['ID'][-3:]
				Currency = MKT_CURRENCY.query.get(ID)
				if Currency:
					return True
				else:
					raise ValidationError(" The currency key#%s does not exist" %ID)
					return False
			else:
				raise ValidationError(" The charge key#%s does not exist" %ID)
				return False