from wtforms 						import SelectMultipleField
from app.mktcore.wtfimports 		import *
from app.mktcore.imports 			import *
from models import *

from app.Currency.models 			import *
from app.CollateralType.models 		import *
from app.Branch.models 				import *
from app.Province.models			import *
from app.District.models			import *
from app.Commune.models				import *
from app.Village.models				import *
from app.Collateral.models			import *
from app.Customer.models 			import *
from app.RelationIndicators.models  import *
from app.LoanApplication.models 	import MKT_LOAN_COLLATERAL
from app.tools.mktloan 				import *
from app.Account.models 			import *

import app.tools.user 				as mktuser
import app.tools.mktroute 			as mktroute
import app.tools.mktdate 			as mktdate
import app.tools.mktaddress 		as mktaddress
import app.tools.mktaudit 			as mktaudit
import app.tools.mktautoid          as mktAutoID
import app.tools.mktsetting 		as mktsetting
import app.tools.mktaccounting 		as mktaccounting

def getRecord():
	try:
		result = MKT_FORECLOSED_PROPERTY_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_FORECLOSED_PROPERTY.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'Province'			:str(row.Province)})
				Dict.update({'District'			:str(row.District)})
				Dict.update({'Commune'			:str(row.Commune)})
				Dict.update({'Village'			:str(row.Village)})
				Dict.update({'CollateralID'		:str(row.CollateralID)})
				Dict.update({'CollateralDetailID':str(row.CollateralDetailID)})
			return Dict
		else:
			return Dict

	except:
		raise

def loadCollateral():
	return MKT_COLLATERAL.query

def loadCollateralDetail():
	if request.method == 'POST':
		Collateral = request.form["CollateralID"]
		return MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID == Collateral)
	else:
		if len(getRecord())>0:
			Record = getRecord()
			CollateralObj = MKT_FORECLOSED_PROPERTY.query.filter(MKT_FORECLOSED_PROPERTY.CollateralDetailID==Record['CollateralDetailID'])
			if CollateralObj.first():
				return CollateralObj
			else:
				return MKT_COLLATERAL_DE.query.filter_by(CollateralID=Record['CollateralID'])
		else:	
			return MKT_COLLATERAL_DE.query.filter_by(CollateralID='')
	return MKT_COLLATERAL_DE.query

def loanBankDate():
	return mktdate.getBankDate()

def loadCustomer():
	return MKT_CUSTOMER.query

def loadBranch():
	Branch = mktuser.getUser().Branch
	return MKT_BRANCH.query.filter_by(ID=Branch)

def loadCurrency():
	return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def loadRelationIndicators():
	return MKT_RELATION_INDICATORS.query

def loadProvince():
	return mktaddress.getProvince()

def loadDistrict():
	if request.method == 'POST':
		Province = request.form.get("Province")
	else:
		if len(getRecord())>0:
	
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])  
		else:
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

def loadCommune():
	if request.method == 'POST':
		District=request.form.get("District")
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['Commune'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return mktaddress.getLoadCommune(District)

def loadVillage():
	if request.method == 'POST':
		Commune=request.form.get("Commune")
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['Village'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)


# def loadCollateralItem():
# 	return MKT_COLLATERAL_ITEM.query

		
class FRM_FORECLOSED_PROPERTY_TRANSFER(exform):
	LoanID 			= 	HiddenField(requiredlabel('Loan Contract ID', "*"), [validators.Required()])
	CollateralID 	= 	QuerySelectField(requiredlabel(getLanguage("Collateral"), "*"),
							query_factory=loadCollateral,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()]
						)
	CollateralDetailID  = QuerySelectField(requiredlabel(("Collateral Detail"), "*"),
							query_factory=loadCollateralDetail,
							get_label=lambda a: a.ID,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()]
						)
	FCOperation 		= SelectField(requiredlabel(('Operation'), '*'),
									choices=[('','--None--'),
											 ('1',"1-Transfer to Foreclosed"),
											 ('2',"2-Sale"),
											 ('3',"3-Revalued")],
									coerce=str,
									validators=[validators.Required()],
									default='1'
									)
	FCStatus 			= SelectField(requiredlabel(('Status'), '*'),
									choices=[('','--None--'),
											 ('1',"Transfered"),
											 ('2',"Sold"),
											 ('3',"Revalued")],
									coerce=str,
									validators=[validators.Required()],
									default	= '1'
									)
	FCDate	 			= DateField(requiredlabel("Transaction Date","*"),
							format='%Y-%m-%d',
							validators=[validators.Required()],
							default=loanBankDate
						)
	ForeclosedValue		= TextField(requiredlabel("Foreclosed Value","*"),validators=[validators.Required()])
	Remark 				= 	TextAreaField(requiredlabel("Remark", "*"), [validators.Required(),validators.Length( max=50)])
	
	CollateralType 	= 	TextField("Collateral Type",description='2-Collateral Detail')
	# CollateralItemID 	= 	QuerySelectField(requiredlabel(("Collateral Item"), "*"),
	# 							query_factory=loadCollateralItem,
	# 							get_label=u'Description',
	# 							allow_blank=True,
	# 							blank_text=u'--%s--' %getLanguage("None"),
	# 							validators=[validators.Required()],
	# 							description='2-Collateral Detail'
	# 							)

	Currency 		= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()],
							description='2-Collateral Detail'
						)
	CollateralNumber= 	TextField("Collateral Number", [validators.length(max=25)],description='2-Collateral Detail')

	Province 		= 	QuerySelectField(getLanguage('Province'),
							query_factory=loadProvince, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Province--',
							description='2-Collateral Detail'
						)

	District 		= 	QuerySelectField(getLanguage('District'),
							query_factory=loadDistrict, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose District--',
							description='2-Collateral Detail'
						)

	Commune 		=	QuerySelectField(getLanguage('Commune'),
							query_factory=loadCommune, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Commune--',
							description='2-Collateral Detail'
						)

	Village 		=	QuerySelectField(getLanguage('Village'),
							query_factory=loadVillage, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Village--',
							description='2-Collateral Detail'
						)
	IssuedDate 		= 	DateField(getLanguage("Issued Date"),
						format='%Y-%m-%d',
						default=mktdate.getDateISO(),
						validators=[validators.Optional()],
						description='2-Collateral Detail'
					)
	IssuedPlace 	= 	TextField(getLanguage("Issued Place"),[validators.length(max=50)],description='2-Collateral Detail')
	IssuedBy 		= 	TextField(getLanguage("Issued By"),[validators.length(max=100)],description='2-Collateral Detail')
	ReceivedDate 	= 	DateField(getLanguage("Received Date"),
							format='%Y-%m-%d',
							validators=[validators.Optional()],
							description='2-Collateral Detail'
						)
	ReceivedBy 		= 	TextField("Received By", [validators.length(max=35)],description='2-Collateral Detail')
	
	Description 		= 	TextAreaField(getLanguage("Property Description"),description='2-Collateral Detail')

	OwnershipType 			=	SelectField('Ownership Type', 
								choices=[('1', 'Owned By Customer'),('2', 'Owned By Other')],
								coerce=str,
								description="3-%s" %'Ownership')

	OwnerName 				= 	TextField('Owner Name',
								description="3-%s" %'Ownership')

	# OwnerPhone 				= 	TextField('Owner Phone',
								# description="3-%s" %'Ownership')

	OwnerSpouseName 		= 	TextField('Owner Spouse Name',
								description="3-%s" %'Ownership')
	RelationIndicator 		= 	SelectField("Relation Indicator",
								choices=[('', '--None--'), ('1', 'Spouse'), ('2', 'Son/Daughter'), ('3', 'Relative'), ('4', 'Parent'), ('5', 'Friend')],
								coerce=str,
								default='__None',
								description="3-%s" %'Ownership'
								)
	Valuer 					= 	TextField(requiredlabel("Valuer","*"),description="1-%s" %('Collateral Value'))
	# ValuerDetail 			= 	TextAreaField(requiredlabel("Valuer Info","*"),description="1-%s" %('Collateral Value'))
	PurchasePrice 			= 	TextField(("Purchased Price"),description="1-%s" %('Collateral Value'))
	ValuationPrice 			= 	TextField(requiredlabel("Valuation Price","*"),validators=[validators.Required()],description="1-%s" %('Collateral Value'))
	# MarketPrice 			= 	TextField(requiredlabel("Market Price","*"),validators=[validators.Required()],description="1-%s" %('Collateral Value'))
	# HotPrice 				= 	TextField(requiredlabel("Hot Price","*"),validators=[validators.Required()],description="1-%s" %('Collateral Value'))

	# PawnPrice 				= 	TextField(requiredlabel("Pawn Price","*"),description="1-%s" %('Collateral Value'),default=0)
	# PawnPercentage 			= 	TextField("Pawn Percentage(%)",description="1-%s" %('Collateral Value'),default=100)
	# PercentageBase 			= 	SelectField(requiredlabel("Percentage Base", "*"),description="1-%s" %('Collateral Value'),choices=[('1', '1-Hot price'),('2', '2-Purchase price'),('3', '3-Market price'),('4', '4-Valuation price')],coerce=str)
	def validate_ForeclosedValue(form,field):
		try:
			ForeclosedValue = request.form["ForeclosedValue"]
			if ForeclosedValue == "0" or Decimal(ForeclosedValue)< 0:
				raise ValidationError("Foreclosed value cannot equal 0 or smaller than 0")
		except Exception as e:
			raise ValidationError("%s" %e)

	def validate_CollateralID(form,field):
		try:
			CollateralID 	= request.form['CollateralID']
			Operation  		= request.form['FCOperation']
			# CollateralItem 	= request.form['CollateralItemID']
			LoanID			= request.form['LoanID']

			# ExtendClass 			= 	mktsetting.ExtendModule()
			# LOAN_CONTRACT_LINK 		= 	ExtendClass.getUrlExtend(Module="LoanContract")
			# if Operation =="1":
			# 	LoanCollateralObj = db.session.query(MKT_LOAN_COLLATERAL).join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_LOAN_COLLATERAL.ID).\
			# 													filter(MKT_LOAN_COLLATERAL.Collateral == CollateralID)
			# 	if 	LoanCollateralObj.first():
			# 		LCSMmg = ""
			# 		for Row in LoanCollateralObj:
			# 			LCSMmg 	+=	"<li><a href='javascript:void(0)'' onClick=CustomClickView('Ticket-%s','%s?ID=%s')>%s</a></li>"%(Row.ID,LOAN_CONTRACT_LINK,Row.ID,Row.ID)
						
			# 		raise ValidationError(Markup('There is Ticket(s) ID below is accessing collateral ID %s:<ul>%s</ul>You need to terminate above Ticket first to be able foreclosing collateral.'%(Collateral,LCSMmg)))
			
			# DictCat = FRM_FORECLOSED_PROPERTY_TRANSFER.getCategoryForAccounting(CollateralItem=CollateralItem, LoanID=LoanID)
			DictCat = FRM_FORECLOSED_PROPERTY_TRANSFER.getCategoryForAccounting(LoanID=LoanID)


			for key, value in DictCat.iteritems():
				if not value and key=="DebitCategory":
					# raise ValidationError("Missing mapping inventory category in collateral product define of ID %s."%CollateralItem)
					raise ValidationError("Foreclosed Property Category in App Setting does not found!")
				elif not value:
					raise ValidationError("The collateral is not relative to loan contract. you can not transfer to inventory.")
		except Exception as e:
			raise e
	def validate_FCDate(form,field):
		try:

			Holiday 	= mktHoliday.getHoliday()
			FCDate 		= request.form['FCDate']

			CheckFormatDate = mktdate.isDateISO(FCDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
				
			FCDate 	= datetime.strptime(str(FCDate),'%Y-%m-%d').date()
			check 		= mktDay.isNonWorkingDay(FCDate, Holiday)
			
			if check:
				raise ValidationError("Value date must be different holiday.")

			systemDate 	= 	mktdate.getBankDate()
			StrSysteDate=	str(systemDate).split("-")
			StrFCDate=	str(FCDate).split("-")

			SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
			ValueMonth 	=	"%s%s" %(StrFCDate[0], StrFCDate[1])

			if int(ValueMonth) < int(SysMonth):
				raise ValidationError("Value date must be different previous month.")

		except:
			raise
	
	@staticmethod
	def setDisable():
		control_list = []
		ID 			= request.form["ID"] if request.method == "POST" else g.formID 
		Operation   = ""
		# disable = [('OwnerName'), 
		# 			('OwnerSpouseName'),
		# 			('FCStatus'),('CollateralItemID'),('Currency'),('PurchasePrice'),('ValuationPrice'),
		# 			('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
		# 			('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
		# 			('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('FCOperation'),
		# 			('HotPrice'),('PawnPrice'),('MarketPrice'),('PawnPercentage'),('OwnerPhone'),('PercentageBase')]
		disable = [('OwnerName'), 
					('OwnerSpouseName'),
					('FCStatus'),('Currency'),('PurchasePrice'),('ValuationPrice'),
					('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
					('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
					('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('FCOperation')]
		if request.method == "POST":
			control_list = disable
		else:
			control_list = disable
		return control_list
		
	@staticmethod
	def formReadOnly():
		return "AUTH"
	@staticmethod
	def moneyField():
		return [['PurchasePrice','Currency'],['ForeclosedValue','Currency']]

	@staticmethod
	def setWidth():
		control_list = [('IssuedDate', len3),('ReceivedDate',len3),('WithdrawalDate',len3),
						('Currency',len2)]

		return control_list

	@staticmethod
	def setVisible():
		# control_list = ['FCOperation','FCStatus','CollateralTypeID']
		# control_list = ['FCOperation','FCStatus']
		control_list = ['FCOperation','FCStatus','CollateralType']


		return control_list
		
	@staticmethod
	def listField():
		Fields = ["ID", "CollateralID","CollateralDetailID","FCStatus","FCOperation","ForeclosedValue","Currency", "CollateralType", "PurchasePrice","ValuationPrice"]

		return Fields,["FCStatus*EQ*1"]

	@staticmethod
	def formatMoney(): # for listField 
		return ["PurchasePrice","ValuationPrice"],"Currency"

	@staticmethod
	def hotSelectField():
		hotfield=[]

		fielddisplay="District,#Commune, #Village"
		varname="ProvinceID:$('#Province').val()"
		fun=["Province", varname ,fielddisplay, "/Morakot/DistrictID", "click"]
		hotfield.append(fun)

		fielddisplay="Commune, #Village"
		varname="DistrictID:$('#District').val()"
		fun=["District", varname ,fielddisplay, "/Morakot/CommuneID", "click"]
		hotfield.append(fun)

		fielddisplay="Village"
		varname="CommuneID:$('#Commune').val()"
		fun=["Commune", varname ,fielddisplay, "/Morakot/VillageID", "click"]
		hotfield.append(fun)


		fielddisplay="CollateralDetailID, #CollateralDetailID"
		varname="CollateralID:$('#CollateralID').val()"
		fun=["CollateralID", varname ,fielddisplay, "/Morakot/getCollateralDetail", "click"]
		hotfield.append(fun)

		fielddisplay="CollateralID"
		varname="LoanID:$('#LoanID').val()"
		fun=["LoanID", varname ,fielddisplay, "/Morakot/CollateralByLoan", "click"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotField():
		hotfield=[]

		fielddisplay =  "$('input[name=OwnerName]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=OwnerName]').val( data.OwnerName);"
		fielddisplay += "$('input[name=OwnerSpouseName]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=OwnerSpouseName]').val(data.OwnerSpouseName);"
		fielddisplay += "$('input[name=RelationIndicator]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=RelationIndicator]').val(data.RelationIndicator);"

		varname  = "OwnershipType:$('#OwnershipType').val()"
		varname += ",OwnerName:$('#OwnerName').val()"
		varname += ",OwnerSpouseName:$('#OwnerSpouseName').val()"
		varname += ",RelationIndicator:$('#RelationIndicator').val()"

		fun = ["OwnershipType", varname, fielddisplay, "/Morakot/CollateralOwnership", "change"]
		hotfield.append(fun)

		# fielddisplay = "$('#CollateralItemID').select2('data', {'id':data.CollateralItem.ID,'text':data.CollateralItem.Value});"
		fielddisplay += "$('#Currency').select2('data', {'id':data.Currency.ID,'text':data.Currency.Value});"
		fielddisplay += "$('#PurchasePrice').val(data.PurchasedPrice);$('#ValuationPrice').val(data.ValuationPrice);"
		# fielddisplay += "$('#HotPrice').val(data.HotPrice);$('#PawnPrice').val(data.PawnPrice);"

		fielddisplay += "$('#CollateralType').val(data.CollateralType);"
		# fielddisplay += "$('#MarketPrice').val(data.MarketPrice);$('#PawnPercentage').val(data.PawnPercentage);"
		# fielddisplay += "$('#PercentageBase').select2('data', {'id':data.PercentageBase.ID,'text':data.PercentageBase.Value});"
		fielddisplay += "$('#IssuedDate').val(data.IssuedDate);$('#IssuedPlace').val(data.IssuedPlace);$('#IssuedBy').val(data.IssuedBy);"
		
		# fielddisplay += "$('#Description').val(data.Description);$('#Valuer').val(data.Valuer);$('#ValuerDetail').val(data.ValuerInfo);"
		fielddisplay += "$('#Description').val(data.Description);$('#Valuer').val(data.Valuer);"
		
		fielddisplay += "$('#ReceivedDate').val(data.ReceivedDate);$('#ReceivedBy').val(data.ReceivedBy);"
		fielddisplay += "$('#CollateralNumber').val(data.CollateralNumber);$('#OwnerName').val(data.OwnerName);$('#OwnerPhone').val(data.OwnerPhone);$('#OwnerSpouseName').val(data.OwnerSpouseName);"
		
		fielddisplay += "$('#Province').append('<option value='+data.ProvinceID+'>'+data.Province+'</option>')"
		fielddisplay += ",$('#District').append('<option value='+data.District.ID+'>'+data.District.Value+'</option>')"
		fielddisplay += ",$('#Commune').append('<option value='+data.Commune.ID+'>'+data.Commune.Value+'</option>')"
		fielddisplay += ",$('#Village').append('<option value='+data.Village.ID+'>'+data.Village.Value+'</option>')"

		fielddisplay += ",$('#Province').select2('data', {'id':data.Province.ID,'text':data.Province.Value})"
		fielddisplay += ",$('#District').select2('data', {'id':data.District.ID,'text':data.District.Value})"
		fielddisplay += ",$('#Commune').select2('data', {'id':data.Commune.ID,'text':data.Commune.Value})"
		fielddisplay += ",$('#Village').select2('data', {'id':data.Village.ID,'text':data.Village.Value});"

		fielddisplay += "$('#RelationIndicator').append('<option value='+data.RelationIndicator.ID+'>'+data.RelationIndicator.Value+'</option>')"
		fielddisplay += ",$('#RelationIndicator').select2('data', {'id':data.RelationIndicator.ID,'text':data.RelationIndicator.Value});"

		fielddisplay += "$('#OwnershipType').select2('data', {'id':data.OwnershipType.ID,'text':data.OwnershipType.Value});"
		fielddisplay += "$('#ForeclosedValue').val(data.ForeclosedValue);"
		varname  	 = "CollateralDetailID:$('#CollateralDetailID').val(),CollateralID:$('#CollateralID').val()"
		fun 		 = ["CollateralDetailID", varname, fielddisplay, "/Morakot/getAllCollateralInfoByID", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def isCollateralDetailExist(CollateralID = ''):
		IsExist = False
		CollateralDetailObj = MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID == CollateralID).first()
		if CollateralDetailObj:
			IsExist = True
		return IsExist

	@staticmethod
	def updateMainCollateralStatus(CollateralID = '',Active='',Commit=True):
		UpdateStatus = "Not success"
		CollateralObj = MKT_COLLATERAL.query.get(CollateralID)
		if CollateralObj:
			CollateralObj.Active = Active
			# CollateralObj.CollateralStatus = Status
			if Commit:
				db.session.commit()
				db.session.flush()
			UpdateStatus = "Success"
		return UpdateStatus

	@staticmethod
	def redirectAfterInsert():
		AuthLevel 	= g.getNAuthorize
		ID 			= request.form["ID"] if request.method == "POST" else g.formID 
		if AuthLevel == 0:
			CollateralDetailID = request.form['CollateralDetailID']
			CollateralID 	   = request.form['CollateralID']
			# move collateral to history
			try:
				# Transfer
				db.session.commit()
				mktaudit.moveAUTHtoHIST(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE_HIST,CollateralDetailID)
				mktaudit.deleteAUTH(MKT_COLLATERAL_DE,CollateralDetailID)
				db.session.commit()
				db.session.flush()
				CheckExist = FRM_FORECLOSED_PROPERTY_TRANSFER.isCollateralDetailExist(CollateralID=CollateralID)
				if CheckExist == False:
					FRM_FORECLOSED_PROPERTY_TRANSFER.updateMainCollateralStatus(CollateralID=CollateralID,Active="N")
				# Post Accounting
			except Exception as e:
				raise e

	@staticmethod
	def beforeAuthorize():
		try:	
			ID 				= request.form["ID"] if request.method == "POST" else g.formID 
			ForeclosedObj  	= MKT_FORECLOSED_PROPERTY_INAU.query.get(ID)
			if ForeclosedObj:
				if ForeclosedObj.Status =="INAU":
					# move collateral to history
					CollateralID = ForeclosedObj.CollateralID
					mktaudit.moveAUTHtoHIST(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE_HIST,ForeclosedObj.CollateralDetailID)
					mktaudit.deleteAUTH(MKT_COLLATERAL_DE,ForeclosedObj.CollateralDetailID)

					# DictAccounting = FRM_FORECLOSED_PROPERTY_TRANSFER.getCategoryForAccounting(LoanID=ForeclosedObj.LoanID,
					# 											   CollateralItem=ForeclosedObj.CollateralItemID)
					
					DictAccounting = FRM_FORECLOSED_PROPERTY_TRANSFER.getCategoryForAccounting(LoanID=ForeclosedObj.LoanID)

					DictAccounting.update(dict( TranDate 	= str(mktdate.getBankDate()),
												Transaction = mktsetting.getAppSetting('MKT_FORECLOSED_TRANS'),
												Reference 	= ForeclosedObj.CollateralID,
												ID 			= ForeclosedObj.ID,
												Note 		= "Move collateral to inventory.",
												Module 		= "CFC",
												Amount 		= ForeclosedObj.ForeclosedValue,
												Currency 	= mktsetting.getAccSetting().BaseCurrency
												)
										)

					CheckAcc = FRM_FORECLOSED_PROPERTY_TRANSFER.postForecloseAccounting(**DictAccounting)
					if not CheckAcc[0]:
						flash(msg_error+CheckAcc[1])
						return False

					CheckExist = FRM_FORECLOSED_PROPERTY_TRANSFER.isCollateralDetailExist(CollateralID=CollateralID)

					if CheckExist == False:

						FRM_FORECLOSED_PROPERTY_TRANSFER.updateMainCollateralStatus(CollateralID=CollateralID,Active="N")

					db.session.commit()
					db.session.flush()
		except Exception, e:
			raise e
			return False
	@staticmethod
	def reverseRec():
		ForeclosedID	= 	g.formID
		CollateralDetailID = ""
		ForeclosedObj 	= 	MKT_FORECLOSED_PROPERTY.query.get(ForeclosedID)
		if ForeclosedObj:
			CollateralDetailID = ForeclosedObj.CollateralDetailID

			CollateralDetailObj = MKT_COLLATERAL_DE_HIST.query.filter(MKT_COLLATERAL_DE_HIST.ID.like('%'+CollateralDetailID+'%')).\
										  order_by(MKT_COLLATERAL_DE_HIST.ID.desc()).first()	
			# Select record in history take before last 
			if CollateralDetailObj:
				ColDe = {}
				ColDe = CollateralDetailObj.__dict__
				ColDe.update({"ID":CollateralDetailID})

				if '_sa_instance_state' in ColDe:
					del ColDe['_sa_instance_state']
				if '_labels' in ColDe:
					del ColDe['_labels']
				mktdb.insertTable(MKT_COLLATERAL_DE,ColDe)
				FRM_FORECLOSED_PROPERTY_TRANSFER.updateMainCollateralStatus(CollateralID=ForeclosedObj.CollateralID,Active="Y")
			return True,""
		else:
			return False,"There is a problem with this transaction!"

	@staticmethod
	def getCategoryForAccounting(**kwargs):
		""" find account and category for post accounting in foreclose property
		Parameter:
		Return Value:
			{"DebitCategory":''}
		"""
		try:
			DebitCategory 	= ""
			CreditCategory 	= ""
			CreditAccount 	= ""
			# CollateralItem 	= kwargs.get("CollateralItem")
			LoanID 			= kwargs.get("LoanID")
			
			ForeclosedPropertyCate = mktsetting.getAppSetting("FORECLOSED_CATE")

			if ForeclosedPropertyCate:
				DebitCategory = ForeclosedPropertyCate
				
				# print 'CollateralItem'
				# CollateralProduct = MKT_COLLATERAL_ITEM.query.get(CollateralItem)
				# if CollateralProduct:
				# 	DebitCategory = CollateralProduct.InventoryCategory
				# print 'DebitCategory',DebitCategory

			LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)

			if LoanObj:
				CreditAccount 	= LoanObj.Account
				AccountObj 		= MKT_ACCOUNT.query.get(CreditAccount)
				if AccountObj:
					CreditCategory = AccountObj.AccCategory

			return dict(DebitCategory 	= DebitCategory,
						CreditCategory 	= CreditCategory,
						CreditAccount 	= CreditAccount)
		except Exception as e:
			raise e

	@staticmethod
	def postForecloseAccounting(**kwargs):
		try:
			# print 'post accounting'
			Audit 			= mktaudit.getAuditrail()
			Inputter		= Audit['Inputter']
			Createdon 		= Audit['Createdon']
			Authorizer 		= Audit['Authorizer']
			Authorizeon		= Audit['Authorizeon']
			Branch 			= Audit['Branch']
			
			DebitCategory 	= kwargs.get('DebitCategory')
			DebitAccount 	= kwargs.get('DebitAccount')
			CreditCategory	= kwargs.get('CreditCategory')
			CreditAccount	= kwargs.get('CreditAccount')

			TranDate		= kwargs.get('TranDate')
			Transaction		= kwargs.get('Transaction')
			UserReference 	= kwargs.get('Reference','')
			Reference 		= kwargs.get('ID','')
			Note			= kwargs.get('Note','')
			Module 			= kwargs.get('Module','')

			Amount			= kwargs.get('Amount')
			Currency 		= kwargs.get('Currency')
			
			for i in range(0, 2):
				if i == 0:
					DrCr 		= 	"Dr"
					Category 	= 	DebitCategory
					Account 	= 	DebitAccount
					Mode 		= 	"Direct" if not Account else ''

				else:

					DrCr 		= 	"Cr"
					Category 	= 	CreditCategory
					Account 	= 	CreditAccount
					Mode 		= 	"Direct" if not Account else ''
				
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
				DateTimeNow = mktdate.getDateTimeNow()

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					Module,					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					Reference, 				# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					UserReference=UserReference
				)
				# print "Start booking #%s -%s"%(i+1,DrCr)
			# print 'finish post accounting'
			return True,''
		except Exception as e:
			db.session.rollback()
			db.session.close()
			return False,msg_error+'%s'%e