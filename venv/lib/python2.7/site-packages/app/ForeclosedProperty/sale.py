from wtforms 						import SelectMultipleField
from app.mktcore.wtfimports 		import *
from app.mktcore.imports 			import *
from models import *

from app.Currency.models 			import *
from app.CollateralType.models 		import *
from app.Branch.models 				import *
from app.Province.models			import *
from app.District.models			import *
from app.Commune.models				import *
from app.Village.models				import *
from app.Collateral.models			import *
from app.Customer.models 			import *
from app.RelationIndicators.models  import *
from app.LoanApplication.models 	import MKT_LOAN_COLLATERAL
from app.tools.mktloan 				import *

import app.tools.user 				as mktuser
import app.tools.mktroute 			as mktroute
import app.tools.mktdate 			as mktdate
import app.tools.mktaddress 		as mktaddress
import app.tools.mktaudit 			as mktaudit
import app.tools.mktautoid          as mktAutoID
import app.mktcore.globalfunction 	as globalfunction

def getRecord():
	try:
		result = MKT_FORECLOSED_PROPERTY_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_FORECLOSED_PROPERTY.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'Province'			:str(row.Province)})
				Dict.update({'District'			:str(row.District)})
				Dict.update({'Commune'			:str(row.Commune)})
				Dict.update({'Village'			:str(row.Village)})
				# Dict.update({'CollateralID'		:str(row.CollateralID)})
				# Dict.update({'CollateralDetailID':str(row.CollateralDetailID)})
			return Dict
		else:
			return Dict

	except:
		raise

# def loadCollateral():
# 	return MKT_COLLATERAL.query

# def loadCollateralDetail():
# 	if request.method == 'POST':
# 		Collateral = request.form["CollateralID"]
# 		return MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID == Collateral)
# 	else:
# 		if len(getRecord())>0:
# 			Record = getRecord()
# 			CollateralObj = MKT_FORECLOSED_PROPERTY.query.filter(MKT_FORECLOSED_PROPERTY.CollateralDetailID==Record['CollateralDetailID'])
# 			if CollateralObj.first():
# 				return CollateralObj
# 			else:
# 				return MKT_COLLATERAL_DE.query.filter_by(CollateralID=Record['CollateralID'])
# 		else:	
# 			return MKT_COLLATERAL_DE.query.filter_by(CollateralID='')
# 	return MKT_COLLATERAL_DE.query

def loanBankDate():
	return mktdate.getBankDate()

def loadCustomer():
	return MKT_CUSTOMER.query

def loadBranch():
	Branch = mktuser.getUser().Branch
	return MKT_BRANCH.query.filter_by(ID=Branch)

def loadCurrency():
	return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def loadRelationIndicators():
	return MKT_RELATION_INDICATORS.query

def loadProvince():
	return mktaddress.getProvince()

def loadDistrict():
	if request.method == 'POST':
		Province = request.form.get("Province")
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])  
		else:
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

def loadCommune():
	if request.method == 'POST':
		District=request.form.get("District")
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['Commune'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return mktaddress.getLoadCommune(District)

def loadVillage():
	if request.method == 'POST':
		Commune=request.form.get("Commune")
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['Village'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)

def loadCategory():

	JOURNAL_ENTRY_EXCLUDED = mktsetting.getExcludedCategories()
	CategoryObj = MKT_CATEGORY.query.filter(~MKT_CATEGORY.ID.in_(JOURNAL_ENTRY_EXCLUDED))
	return 	CategoryObj
def loadForeclosedTransfered():
	return MKT_FORECLOSED_PROPERTY.query.filter_by(FCStatus= '1')

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

# def loadCollateralItem():
# 	return MKT_COLLATERAL_ITEM.query

class FRM_FORECLOSED_PROPERTY_SALE(exform):

	ForeclosedTransferID =  QuerySelectField(requiredlabel(("Foreclosed Property"), "*"),
							query_factory=loadForeclosedTransfered,
							get_label=lambda a: a.ID+"-"+a.Remark,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()]
						)
	FCOperation 		= SelectField(requiredlabel(('Operation'), '*'),
									choices=[('','--None--'),
											 ('1',"1-Transfer to Foreclosed"),
											 ('2',"2-Sale"),
											 ('3',"3-Revalued")],
									coerce=str,
									validators=[validators.Required()],
									default='2'
									)
	FCStatus 			= SelectField(requiredlabel(('Status'), '*'),
									choices=[('','--None--'),
											 ('1',"Transfered"),
											 ('2',"Sold"),
											 ('3',"Revalued")],
									coerce=str,
									validators=[validators.Required()],
									default	= '2'
									)
	FCDate	 			= DateField(requiredlabel("Transaction Date","*"),
							format='%Y-%m-%d',
							validators=[validators.Required()],
							default=loanBankDate
						)
	ForeclosedValue		= TextField(requiredlabel("Foreclosed Value","*"),validators=[validators.Required()])
	SaleValue			= TextField(requiredlabel("Sale Value","*"),validators=[validators.Required()])
	GainLoss			= TextField("Gain/Loss")

	PaymentMethod 		=  SelectField(requiredlabel(('Payment Mode'), '*'),
									choices=[('','--None--'),
											 ('1',"1-By Cash"),
											 ('2',"2-By Bank")],
									coerce=str,
									validators=[validators.Required()],
									default=''
									)
	SaleAcc 			= HiddenField("Cash Account/Bank")
	SaleCategory 		= QuerySelectField(requiredlabel("Cash Account/Bank Category","*"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'',
							validators=[validators.Required()]
						)

	CrAccount 			= HiddenField("Cr Account")

	CrCategory 			= QuerySelectField(requiredlabel("Inventory Category","*"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'',
							validators=[validators.Required()]
						)

	Remark 				= 	TextAreaField(requiredlabel("Remark", "*"), [validators.Required(),validators.Length( max=50)])
	
	CollateralType 	= 	TextField("Collateral Type",description='2-Collateral Detail')
	# CollateralItemID 	= 	QuerySelectField(requiredlabel(("Collateral Item"), "*"),
	# 							query_factory=loadCollateralItem,
	# 							get_label=u'Description',
	# 							allow_blank=True,
	# 							blank_text=u'--%s--' %getLanguage("None"),
	# 							validators=[validators.Required()],
	# 							description='2-Collateral Detail'
	# 							)

	Currency 		= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()],
							description='2-Collateral Detail'
						)
	CollateralNumber= 	TextField("Collateral Number", [validators.length(max=25)],description='2-Collateral Detail')

	Province 		= 	QuerySelectField(getLanguage('Province'),
							query_factory=loadProvince, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Province--',
							description='2-Collateral Detail'
						)

	District 		= 	QuerySelectField(getLanguage('District'),
							query_factory=loadDistrict, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose District--',
							description='2-Collateral Detail'
						)

	Commune 		=	QuerySelectField(getLanguage('Commune'),
							query_factory=loadCommune, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Commune--',
							description='2-Collateral Detail'
						)

	Village 		=	QuerySelectField(getLanguage('Village'),
							query_factory=loadVillage, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Village--',
							description='2-Collateral Detail'
						)
	IssuedDate 		= 	DateField(getLanguage("Issued Date"),
						format='%Y-%m-%d',
						default=mktdate.getDateISO(),
						validators=[validators.Optional()],
						description='2-Collateral Detail'
					)
	IssuedPlace 	= 	TextField(getLanguage("Issued Place"),[validators.length(max=50)],description='2-Collateral Detail')
	IssuedBy 		= 	TextField(getLanguage("Issued By"),[validators.length(max=100)],description='2-Collateral Detail')
	ReceivedDate 	= 	DateField(getLanguage("Received Date"),
							format='%Y-%m-%d',
							validators=[validators.Optional()],
							description='2-Collateral Detail'
						)
	ReceivedBy 		= 	TextField("Received By", [validators.length(max=35)],description='2-Collateral Detail')
	
	Description 		= 	TextAreaField(getLanguage("Property Description"),description='2-Collateral Detail')

	OwnershipType 			=	SelectField('Ownership Type', 
								choices=[('1', 'Owned By Customer'),('2', 'Owned By Other')],
								coerce=str,
								description="3-%s" %'Ownership')

	OwnerName 				= 	TextField('Owner Name',
								description="3-%s" %'Ownership')

	# OwnerPhone 				= 	TextField('Owner Phone',
	# 							description="3-%s" %'Ownership')

	OwnerSpouseName 		= 	TextField('Owner Spouse Name',
								description="3-%s" %'Ownership')
	RelationIndicator 		= 	SelectField("Relation Indicator",
								choices=[('', '--None--'), ('1', 'Spouse'), ('2', 'Son/Daughter'), ('3', 'Relative'), ('4', 'Parent'), ('5', 'Friend')],
								coerce=str,
								default='__None',
								description="3-%s" %'Ownership'
								)
	Valuer 					= 	TextField(requiredlabel("Valuer","*"),description="1-%s" %('Collateral Value'))
	# ValuerDetail 			= 	TextAreaField(requiredlabel("Valuer Info","*"),description="1-%s" %('Collateral Value'))
	PurchasePrice 			= 	TextField(("Purchased Price"),description="1-%s" %('Collateral Value'))
	ValuationPrice 			= 	TextField(requiredlabel("Valuation Price","*"),validators=[validators.Required()],description="1-%s" %('Collateral Value'))
	# MarketPrice 			= 	TextField(requiredlabel("Market Price","*"),validators=[validators.Required()],description="1-%s" %('Collateral Value'))
	# HotPrice 				= 	TextField(requiredlabel("Hot Price","*"),validators=[validators.Required()],description="1-%s" %('Collateral Value'))

	# PawnPrice 				= 	TextField(requiredlabel("Pawn Price","*"),description="1-%s" %('Collateral Value'),default=0)
	# PawnPercentage 			= 	TextField("Pawn Percentage(%)",description="1-%s" %('Collateral Value'),default=100)
	# PercentageBase 			= 	SelectField(requiredlabel("Percentage Base", "*"),description="1-%s" %('Collateral Value'),choices=[('1', '1-Hot price'),('2', '2-Purchase price'),('3', '3-Market price'),('4', '4-Valuation price')],coerce=str)
	
	def validate_GainLoss(form,field):
    		try:
			SaleValue = request.form['SaleValue']
			ForeclosedValue   = request.form['ForeclosedValue']
			GainLossValue 	  = request.form['GainLoss']
			Currency 	 	  = request.form['Currency']
			GainLoss		  = float(SaleValue) - float(ForeclosedValue)
			
			CurrencyObj = MKT_CURRENCY.query.get(Currency)
			GainLoss = mktmoney.toMoney(float(GainLoss), CurrencyObj)
			GainLoss = float(str(GainLoss).replace(",",""))

			if float(GainLossValue) != float(GainLoss):
				raise ValidationError('Gain/Loss value is incorrect.')
		except Exception as e:
			raise e

	def validate_ForeclosedValue(form,field):
		try:
			ForeclosedValue = request.form["ForeclosedValue"]
			if ForeclosedValue == "0" or Decimal(ForeclosedValue)< 0:
				raise ValidationError("Foreclosed value cannot equal 0 or smaller than 0")
		except Exception as e:
			raise ValidationError("%s" %e)

	def validate_FCOperation(form,field):
		try:
			ForeclosedTransferID = request.form['ForeclosedTransferID']
			ForeclosedObj 	= MKT_FORECLOSED_PROPERTY.query.get(ForeclosedTransferID)
			LoanObj 		= MKT_LOAN_CONTRACT.query
			if ForeclosedObj:
				LoanCollateralObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.Collateral ==ForeclosedObj.CollateralID).first()
				if 	LoanCollateralObj:
					LoanObj=LoanObj.get(LoanCollateralObj.ID)
					if LoanObj:
						raise ValidationError('Loan ID#%s is still active, you cannot sale this collateral.'%(LoanCollateralObj.ID))

		except Exception as e:
			raise e
	def validate_FCDate(form,field):
		try:

			Holiday 	= mktHoliday.getHoliday()
			FCDate 		= request.form['FCDate']

			CheckFormatDate = mktdate.isDateISO(FCDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
				
			FCDate 	= datetime.strptime(str(FCDate),'%Y-%m-%d').date()
			check 		= mktDay.isNonWorkingDay(FCDate, Holiday)
			
			if check:
				raise ValidationError("Value date must be different holiday.")

			systemDate 	= 	mktdate.getBankDate()
			StrSysteDate=	str(systemDate).split("-")
			StrFCDate=	str(FCDate).split("-")

			SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
			ValueMonth 	=	"%s%s" %(StrFCDate[0], StrFCDate[1])

			if int(ValueMonth) < int(SysMonth):
				raise ValidationError("Value date must be different previous month.")

		except:
			raise
	def validate_SaleValue(field,form):
		try:
			SaleValue = request.form['SaleValue']
			Operation = request.form['FCOperation']
			if Operation =="2":
				if float(SaleValue) == 0 or float(SaleValue) < 0 :
					raise ValidationError('Sale value cannot lower than 0 or equal 0')
		except Exception as e:
			raise e
	def validate_SaleAcc(field,form):
		try:
			SaleAccount 	= request.form['SaleAcc']  if 'SaleAcc' in request.form else ''
			Currency 		= request.form['Currency']  if 'Currency' in request.form else ''
			if SaleAccount !=0:
				AccObj = MKT_ACCOUNT.query.get(SaleAccount)
				if AccObj :
					AccCurrency = AccObj.Currency
					if AccCurrency != Currency:
						raise ValidationError("Account Currency #%s and Currency #%s do not match."%(AccCurrency,Currency))
		except Exception as e:
			raise e

	@staticmethod
  	def setVisible():
  		control_list = ['FCOperation','FCStatus','CollateralType','CrAccount']
  		return control_list

	@staticmethod
	def setDisable():
		control_list = []
		# disable = [('OwnerName'),
		# 			('OwnerSpouseName'),
		# 			('FCStatus'),('CollateralItemID'),('PercentageBase'),('Currency'),('PurchasePrice'),('ValuationPrice'),
		# 			('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
		# 			('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
		# 			('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('FCOperation'),
		# 			('HotPrice'),('PawnPrice'),('MarketPrice'),('PawnPercentage'),('OwnerPhone'),('GainLoss')]
		disable = [('OwnerName'),
					('OwnerSpouseName'),
					('FCStatus'),('Currency'),('PurchasePrice'),('ValuationPrice'),
					('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
					('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
					('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('FCOperation'),
					('GainLoss')]
		if request.method == "POST":
			control_list = disable
		else:
			control_list = disable
		
		return control_list


	@staticmethod
	def moneyField():
		return [['PurchasePrice','Currency'],['ForeclosedValue','Currency'],['SaleValue','Currency']]

	@staticmethod
	def setWidth():
		control_list = [('IssuedDate', len3),('ReceivedDate',len3),('WithdrawalDate',len3),
						('Currency',len2)]

		return control_list

	@staticmethod
	def listField():
		Fields = ["ID", "ForeclosedTransferID","FCStatus","FCOperation","ForeclosedValue","SaleValue","GainLoss","Currency", "PaymentMethod", "SaleAccount","Remark"]

		return Fields,["FCStatus*EQ*2"]

	@staticmethod
	def formatMoney(): # for listField 
		return ["PurchasePrice","ValuationPrice"],"Currency"
		
	@staticmethod
	def hotSelectField():
		hotfield=[]

		fielddisplay="District,#Commune, #Village"
		varname="ProvinceID:$('#Province').val()"
		fun=["Province", varname ,fielddisplay, "/Morakot/DistrictID", "click"]
		hotfield.append(fun)

		fielddisplay="Commune, #Village"
		varname="DistrictID:$('#District').val()"
		fun=["District", varname ,fielddisplay, "/Morakot/CommuneID", "click"]
		hotfield.append(fun)

		fielddisplay="Village"
		varname="CommuneID:$('#Commune').val()"
		fun=["Commune", varname ,fielddisplay, "/Morakot/VillageID", "click"]
		hotfield.append(fun)

		fielddisplay="CollateralDetailID, #CollateralDetailID"
		varname="CollateralID:$('#CollateralID').val()"
		fun=["CollateralID", varname ,fielddisplay, "/Morakot/getCollateralDetail", "click"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def isCollateralDetailExist(CollateralID = ''):
		IsExist = False
		CollateralDetailObj = MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID == CollateralID).first()
		if CollateralDetailObj:
			IsExist = True
		return IsExist

	@staticmethod
	def redirectAfterInsert():
		AuthLevel 		= g.getNAuthorize
		ID 				= request.form["ID"] if request.method == "POST" else g.formID 
		PaymentMethod 	= request.form['PaymentMethod']
		SaleCategory  	= request.form['SaleCategory']
		SaleAccount   	= request.form['SaleAcc']
		Currency 	  	= request.form['Currency']
		Remark  	  	= request.form['Remark']
		Branch 		  	= mktuser.getCurrentBranch()
		CurrentUser   	= session['getLogInID']
		CrCategory 		= request.form['CrCategory']
		CrAccount 		= request.form['CrAccount']
		GainCate 	   	= mktsetting.getAppSetting('FORECLOSED_GAIN_CATE')
		LossCate 	   	= mktsetting.getAppSetting('FORECLOSED_LOSS_CATE')
		Transaction   	= mktsetting.getAppSetting('FORECLOSED_TRANS')
		VATOnOff 		= mktsetting.getAppSetting("FORECLOSED_VAT_ON_OFF")
		ForeclosedValue = request.form['ForeclosedValue']
		SaleValue 		= request.form['SaleValue']
		BankDate 		= mktdate.getBankDate()
		Amount 					= 0
		VATAmount 				= 0
		Note 					= ""
		CollateralID 			= ""
		CollateralDetailID 		= ""
		ForeclosedTransferID 	= request.form['ForeclosedTransferID']
		TotalForeclosed 		= Decimal(SaleValue)- Decimal(ForeclosedValue)

		if AuthLevel == 0:
			ForeclosedTransferObj = MKT_FORECLOSED_PROPERTY.query.get(ForeclosedTransferID)
			if ForeclosedTransferObj:
				CollateralDetailID = ForeclosedTransferObj.CollateralDetailID
				CollateralID 	   = ForeclosedTransferObj.CollateralID
			
			# move collateral to history
			try:
				# move collateral to hist
				mktaudit.moveAUTHtoHIST(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE_HIST,CollateralDetailID)
				mktaudit.deleteAUTH(MKT_COLLATERAL_DE,CollateralDetailID)
				# db.session.commit()
				db.session.flush()

				CheckExist = FRM_FORECLOSED_PROPERTY_SALE.isCollateralDetailExist(CollateralID=CollateralID)
				if CheckExist == False:
					# db.session.commit()
					mktaudit.moveAUTHtoHIST(MKT_COLLATERAL,MKT_COLLATERAL_HIST,CollateralID)
					mktaudit.deleteAUTH(MKT_COLLATERAL,CollateralID)
					# db.session.commit()
					# db.session.flush()

				# Post Accounting
				for i in range(0, 2):
					if i == 0:
						DrCr = "Dr"
						Mode = ""
						Category = SaleCategory
						Amount 	 = Decimal(SaleValue)
						Account  = SaleAccount
						GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "FP","", "", "", "", "", "", "", "", "")
					else:
						DrCr = "Cr"
						Mode = ""
						Category = CrCategory
						Amount   = Decimal(ForeclosedValue)
						Account  = CrAccount
						GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "FP", "", "", "", "", "", "", "", "", "")

					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						CurrentUser,			# Inputter
						BankDate, 				# Createdon
						CurrentUser,			# Authorizer
						BankDate,				# Authorizeon
						"", 					# AEID
						Account,				# getSearchAccount
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Amount, 				# Amount
						"LC",					# Module
						Transaction, 			# Transaction
						BankDate, 				# TransactionDate
						ID, 					# Reference
						"", 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode 					# Mode check to insert Journal for category
					)
				if TotalForeclosed > 0:
					for i in range(0, 2):
						if i == 0:
							TaxRate  = 0
							#Verify
							TaxID    = mktsetting.getAppSetting('FORECLOSED_VAT')
							TaxObj   = MKT_TAX.query.get(TaxID)
							if TaxObj:
								VATCate = TaxObj.Category
								TaxRate = TaxObj.Rate
							if VATOnOff=='Y':
								VATAmount   = (Decimal(TotalForeclosed) * Decimal(TaxRate))/110
							DrCr = "Cr"
							Mode = ""
							Category = GainCate
							Account  = SaleAccount
							Note 	 = Remark
							Amount 	 = Decimal(TotalForeclosed) - Decimal(VATAmount)
							GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "FP","", "", "", "", "", "", "", "", "")
						else:
							if VATOnOff=='N':
								break	
							DrCr = "Cr"
							Mode = ""
							Category = VATCate
							Amount   = VATAmount
							Account  = SaleAccount
							Note 	 = "VAT amount"
							GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "FP", "", "", "", "", "", "", "", "", "")
						
						Amount   = mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency))
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							CurrentUser,			# Inputter
							BankDate, 				# Createdon
							CurrentUser,			# Authorizer
							BankDate,				# Authorizeon
							"", 					# AEID
							Account,				# getSearchAccount
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							Amount, 				# Amount
							"FP",					# Module
							Transaction, 			# Transaction
							BankDate, 				# TransactionDate
							ID, 					# Reference
							"", 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode 					# Mode check to insert Journal for category
						)
				elif TotalForeclosed < 0:
					DrCr = "Cr"
					Mode = ""
					Category = LossCate
					Amount   = Decimal(abs(TotalForeclosed))
					Amount   = mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency))
					Account  = SaleAccount
					Note 	 = Remark
					GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "FP", "", "", "", "", "", "", "", "", "")

					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						CurrentUser,			# Inputter
						BankDate, 				# Createdon
						CurrentUser,			# Authorizer
						BankDate,				# Authorizeon
						"", 					# AEID
						Account,				# getSearchAccount
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Amount, 				# Amount
						"FP",					# Module
						Transaction, 			# Transaction
						BankDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode 					# Mode check to insert Journal for category
					)
				# End post
				db.session.commit()
			except Exception as e:
				db.session.rollback()
				raise e
	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def updateForeclosedStatus(ForeclosedID,Status):
		ForeclosedObj = MKT_FORECLOSED_PROPERTY.query.get(ForeclosedID)
		if ForeclosedObj:
			ForeclosedObj.FCOperation = Status
			ForeclosedObj.FCStatus 	  = Status
			# db.session.commit()
			# db.session.flush()

	@staticmethod
	def beforeAuthorize():
		try:
			ID 				= request.form["ID"] if request.method == "POST" else g.formID 
			ForeclosedObj   = MKT_FORECLOSED_PROPERTY_INAU.query.get(ID)
			if ForeclosedObj:
				PaymentMethod 	= ForeclosedObj.PaymentMethod
				SaleCategory  	= ForeclosedObj.SaleCategory # Dr ategory
				SaleAccount   	= ForeclosedObj.SaleAcc 	# Dr Account
				Currency 	  	= ForeclosedObj.Currency
				Branch 		  	= ForeclosedObj.Branch
				CurrentUser   	= session['getLogInID']
				# ForeclosedCate 	= mktsetting.getAppSetting('FORECLOSED_CATE')
				CrCategory 		= ForeclosedObj.CrCategory
				CrAccount 		= ForeclosedObj.CrAccount
				GainCate 	   	= mktsetting.getAppSetting('FORECLOSED_GAIN_CATE')
				LossCate 	   	= mktsetting.getAppSetting('FORECLOSED_LOSS_CATE')
				Transaction   	= mktsetting.getAppSetting('FORECLOSED_TRANS')
				ForeclosedValue = ForeclosedObj.ForeclosedValue
				SaleValue 		= ForeclosedObj.SaleValue
				Remark 			= ForeclosedObj.Remark
				BankDate 		= mktdate.getBankDate()
				Amount 			= 0
				VATAmount 		= 0
				Note 			= ""
				CollateralID 	= ""
				CollateralDetailID = ""

				ForeclosedTransferObj = MKT_FORECLOSED_PROPERTY.query.get(ForeclosedObj.ForeclosedTransferID)
				if ForeclosedTransferObj:
					CollateralDetailID = ForeclosedTransferObj.CollateralDetailID
					CollateralID 	   = ForeclosedTransferObj.CollateralID

				TotalForeclosed = Decimal(ForeclosedObj.GainLoss)
				# move collateral to history

				# update statustransfer to sale 
				FRM_FORECLOSED_PROPERTY_SALE.updateForeclosedStatus(ForeclosedID=ForeclosedObj.ForeclosedTransferID,Status='2')
				# move collateral to hist
				# db.session.commit()
				mktaudit.moveAUTHtoHIST(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE_HIST,CollateralDetailID)
				mktaudit.deleteAUTH(MKT_COLLATERAL_DE,CollateralDetailID)
				# db.session.commit()
				# db.session.flush()
				CheckExist = FRM_FORECLOSED_PROPERTY_SALE.isCollateralDetailExist(CollateralID=CollateralID)
				if CheckExist == False:
					# db.session.commit()
					mktaudit.moveAUTHtoHIST(MKT_COLLATERAL,MKT_COLLATERAL_HIST,CollateralID)
					mktaudit.deleteAUTH(MKT_COLLATERAL,CollateralID)
					# db.session.commit()
					# db.session.flush()
				# Post Accounting
				for i in range(0, 2):
					if i == 0:
						DrCr = "Dr"
						Mode = ""
						Category = SaleCategory
						Amount 	 = Decimal(SaleValue)
						Account  = SaleAccount
						GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "FP","", "", "", "", "", "", "", "", "")
					else:
						DrCr = "Cr"
						Mode = ""
						Category = CrCategory
						Amount   = Decimal(ForeclosedValue)
						Account  = CrAccount
						GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "FP", "", "", "", "", "", "", "", "", "")

					if not Account:
						Mode = "Direct"
					
					Amount   = 	mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency))
					Amount   = 	Decimal(str(Amount).replace(",",""))
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						CurrentUser,			# Inputter
						BankDate, 				# Createdon
						CurrentUser,			# Authorizer
						BankDate,				# Authorizeon
						"", 					# AEID
						Account,				# getSearchAccount
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Amount, 				# Amount
						"LC",					# Module
						Transaction, 			# Transaction
						BankDate, 				# TransactionDate
						ID, 					# Reference
						"", 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode 					# Mode check to insert Journal for category
					)
				if TotalForeclosed > 0:
					DrCr = "Cr"
					Mode = ""
					Category = GainCate
					Account  = SaleAccount
					Note 	 = Remark
					Amount 	 = Decimal(TotalForeclosed)
					GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "FP","", "", "", "", "", "", "", "", "")
					
					Amount   = 	mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency))
					Amount   = 	Decimal(str(Amount).replace(",",""))
					if not Account:
						Mode = "Direct"

					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						CurrentUser,			# Inputter
						BankDate, 				# Createdon
						CurrentUser,			# Authorizer
						BankDate,				# Authorizeon
						"", 					# AEID
						Account,				# getSearchAccount
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Decimal(Amount), 			# Amount
						"FP",					# Module
						Transaction, 			# Transaction
						BankDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode 					# Mode check to insert Journal for category
					)
				elif TotalForeclosed < 0:
					DrCr = "Dr"
					Mode = ""
					Category = LossCate
					Amount   = Decimal(abs(TotalForeclosed))
					Note 	 = Remark
					Account  = SaleAccount
					GL_KEYS  = mktaccounting.getConsolKey(Category, Currency, "", "FP", "", "", "", "", "", "", "", "", "")
					Amount   = 	mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency))
					Amount   = 	Decimal(str(Amount).replace(",",""))
					if not Account:
						Mode = "Direct"

					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						CurrentUser,			# Inputter
						BankDate, 				# Createdon
						CurrentUser,			# Authorizer
						BankDate,				# Authorizeon
						"", 					# AEID
						Account,				# getSearchAccount
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Amount, 				# Amount
						"FP",					# Module
						Transaction, 			# Transaction
						BankDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode 					# Mode check to insert Journal for category
					)
				# End post
				db.session.commit()
		except Exception as e:
			db.session.rollback()
			raise e 
			
	@staticmethod
	def hotField():
		hotfield=[]

		fielddisplay =  "$('input[name=OwnerName]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=OwnerName]').val( data.OwnerName);"
		fielddisplay += "$('input[name=OwnerSpouseName]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=OwnerSpouseName]').val(data.OwnerSpouseName);"
		fielddisplay += "$('input[name=RelationIndicator]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=RelationIndicator]').val(data.RelationIndicator);"

		varname  = "OwnershipType:$('#OwnershipType').val()"
		varname += ",OwnerName:$('#OwnerName').val()"
		varname += ",OwnerSpouseName:$('#OwnerSpouseName').val()"
		varname += ",RelationIndicator:$('#RelationIndicator').val()"

		fun = ["OwnershipType", varname, fielddisplay, "/Morakot/CollateralOwnership", "change"]
		hotfield.append(fun)

		fielddisplay = ""
		# fielddisplay = "$('#CollateralItemID').select2('data', {'id':data.CollateralItem.ID,'text':data.CollateralItem.Value});"
		fielddisplay += "$('#CollateralType').val(data.CollateralType);"
		fielddisplay += "$('#Currency').select2('data', {'id':data.Currency.ID,'text':data.Currency.Value});"
		fielddisplay += "$('#PurchasePrice').val(data.PurchasedPrice);$('#ValuationPrice').val(data.ValuationPrice);"
		# fielddisplay += "$('#HotPrice').val(data.HotPrice);$('#PawnPrice').val(data.PawnPrice);"
		# fielddisplay += "$('#MarketPrice').val(data.MarketPrice);$('#PawnPercentage').val(data.PawnPercentage);"
		# fielddisplay += "$('#PercentageBase').select2('data', {'id':data.PercentageBase.ID,'text':data.PercentageBase.Value});"
		fielddisplay += "$('#IssuedDate').val(data.IssuedDate);$('#IssuedPlace').val(data.IssuedPlace);$('#IssuedBy').val(data.IssuedBy);"
		
		# fielddisplay += "$('#Description').val(data.Description);$('#Valuer').val(data.Valuer);$('#ValuerDetail').val(data.ValuerInfo);"
		fielddisplay += "$('#Description').val(data.Description);$('#Valuer').val(data.Valuer);"

		fielddisplay += "$('#ReceivedDate').val(data.ReceivedDate);$('#ReceivedBy').val(data.ReceivedBy);"
		
		# fielddisplay += "$('#CollateralNumber').val(data.CollateralNumber);$('#OwnerName').val(data.OwnerName);$('#OwnerPhone').val(data.OwnerPhone);$('#OwnerSpouseName').val(data.OwnerSpouseName);"
		fielddisplay += "$('#CollateralNumber').val(data.CollateralNumber);$('#OwnerName').val(data.OwnerName);$('#OwnerSpouseName').val(data.OwnerSpouseName);"

		fielddisplay += "$('#Province').append('<option value='+data.ProvinceID+'>'+data.Province+'</option>')"
		fielddisplay += ",$('#District').append('<option value='+data.District.ID+'>'+data.District.Value+'</option>')"
		fielddisplay += ",$('#Commune').append('<option value='+data.Commune.ID+'>'+data.Commune.Value+'</option>')"
		fielddisplay += ",$('#Village').append('<option value='+data.Village.ID+'>'+data.Village.Value+'</option>')"

		fielddisplay += ",$('#Province').select2('data', {'id':data.Province.ID,'text':data.Province.Value})"
		fielddisplay += ",$('#District').select2('data', {'id':data.District.ID,'text':data.District.Value})"
		fielddisplay += ",$('#Commune').select2('data', {'id':data.Commune.ID,'text':data.Commune.Value})"
		fielddisplay += ",$('#Village').select2('data', {'id':data.Village.ID,'text':data.Village.Value});"

		fielddisplay += "$('#RelationIndicator').append('<option value='+data.RelationIndicator.ID+'>'+data.RelationIndicator.Value+'</option>')"
		fielddisplay += ",$('#RelationIndicator').select2('data', {'id':data.RelationIndicator.ID,'text':data.RelationIndicator.Value});"

		fielddisplay += "$('#OwnershipType').select2('data', {'id':data.OwnershipType.ID,'text':data.OwnershipType.Value});"
		fielddisplay += "$('#ForeclosedValue').val(data.ForeclosedValue);$('#ForeclosedValue').focus();$('#SaleValue').focus();"
		varname  	 = "ForeclosedTransferID:$('#ForeclosedTransferID').val()"
		fun 		 = ["ForeclosedTransferID", varname, fielddisplay, "/Morakot/getAllCollateralInfoByID", "change"]
		hotfield.append(fun)


		fielddisplay 	= 	"$('#SaleCategory').select2('data', {'id':data.Category,'text':data.CategoryDesc});"
		varname 		= "Account:$('#SaleAcc').val(),Currency:$('#Currency').val(),TranDate:$('#FCDate').val()"
		fun 			= ["SaleAcc", varname, fielddisplay, "/Morakot/FundTransferHotField", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#GainLoss').val(data.GainLoss);"
		varname  	 = "SaleValue:$('#SaleValue').val(),ForeclosedValue:$('#ForeclosedValue').val(),Currency:$('#Currency').val()"
		fun 		 = ["SaleValue", varname, fielddisplay, "/Morakot/getGainLossBySaleValue", "blur"]
		hotfield.append(fun)

		fielddisplay = "$('#GainLoss').val(data.GainLoss);"
		varname  	 = "SaleValue:$('#SaleValue').val(),ForeclosedValue:$('#ForeclosedValue').val(),Currency:$('#Currency').val()"
		fun 		 = ["ForeclosedValue", varname, fielddisplay, "/Morakot/getGainLossByForeclosedValue", "blur"]
		hotfield.append(fun)


		return hotfield

	@staticmethod
	def reverseRec():
		flash(msg_error + " Record not allow to reverse.")
		return False, ""

	@staticmethod
	def formReadOnly():
		return "AUTH"

@app.route("/Morakot/SaleAcc", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def SaleAcc():
	return mktaccount.getSearchAccount()