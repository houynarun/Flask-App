from app.mktcore.wtfimports 	import *
from flask 						import flash
from decimal 					import *
from wtforms 					import DecimalField, IntegerField
from .models 					import *
from app.mktcore.imports 		import *

from app.Currency.models		import MKT_CURRENCY
from app.Transaction.models 	import MKT_TRANSACTION
from app.AccSetting.models		import MKT_ACCOUNTING_SETTING
from app.Category.models 		import *

import app.tools.mktdate 			as mktdate
import app.tools.mktaccounting 		as mktaccounting
import app.tools.mktmoney 			as mktmoney
import app.tools.mktaudit 			as mktaudit
import app.tools.mktteller 			as mktteller
import app.tools.mktsetting 		as mktsetting
import app.tools.mktfundtransfer 	as mktfundtransfer
import app.tools.mkttool 			as mkttool
import app.mktcore.globalfunction 	as globalfunction

@app.route("/Morakot/ForeignExchangeAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ForeignExchangeAccount():
	AccSetting 	= mktsetting.getAccSetting()
	if AccSetting:
		BaseCurrency = AccSetting.BaseCurrency
	ForeignCurrency = request.args.get('ForeignCurrency') if 'ForeignCurrency' in request.args else ''
	Amount 	 	 	= request.args.get('Amount') if 'Amount' in request.args else 0
	ExchangeAmount 	= request.args.get('ExchangeAmount') if 'ExchangeAmount' in request.args else 0
	DrCr 			= request.args.get('DrCr') if 'DrCr' in request.args else ''
	InputCurrency 	= request.args.get('InputCurrency') if 'InputCurrency' in request.args else ''
	ExchangeRate 	= ""
	DrAccount 		= ""
	DrCategory 		= ""
	DrCurrency 		= ""
	CrAccount 		= ""
	CrCategory 		= ""
	CrCurrency 		= ""
	Transaction 	= ""

	Audit 		    = mktaudit.getAuditrail()
	Inputter		= Audit['Inputter']

	if ForeignCurrency:
		FXAccount 	= mktteller.getFXAccount(Inputter,ForeignCurrency,DrCr)
	
		DrAccount = FXAccount['DrAcc']
		DrCategory= FXAccount['DrCat']
		DrCurrency= FXAccount['DrCur']
		CrAccount = FXAccount['CrAcc']
		CrCategory= FXAccount['CrCat']
		CrCurrency= FXAccount['CrCur']
		CurrencyObj = MKT_CURRENCY.query.get(ForeignCurrency)
		if CurrencyObj:
			Amount =float(Amount.replace(',',''))
			ExchangeAmount =float(ExchangeAmount.replace(',',''))
			# Buy Currency
			if DrCr == "Dr":
				ExchangeRate 	= float(CurrencyObj.BuyRate)
				Transaction 	= mktsetting.getAppSetting('BuyForeignTran')
				# 1: Foreign Currency
				if InputCurrency=='1':
					ExchangeAmount = Decimal(ExchangeRate) * Decimal(Amount)
				# 2: Base Currency
				elif InputCurrency=='2':
					Amount = Decimal(ExchangeAmount) / Decimal(ExchangeRate)
				Amount 	= mktmoney.toMoney(float(Amount),mktmoney.getCurrencyObj(ForeignCurrency))
				ExchangeAmount = mktmoney.toMoney(float(ExchangeAmount),mktmoney.getCurrencyObj(BaseCurrency))
			# Sell Currency
			else:
				ExchangeRate 	= float(CurrencyObj.SellRate)
				Transaction 	= mktsetting.getAppSetting('SellForeignTran')
				# 2: Base Currency
				if InputCurrency=='1':
					Amount = Decimal(ExchangeAmount) * Decimal(ExchangeRate)
				# 1: Foreign Currency
				elif InputCurrency=='2':
					ExchangeAmount = Decimal(Amount) / Decimal(ExchangeRate)
			
				Amount 	= mktmoney.toMoney(float(Amount),mktmoney.getCurrencyObj(BaseCurrency))
				ExchangeAmount = mktmoney.toMoney(float(ExchangeAmount),mktmoney.getCurrencyObj(ForeignCurrency))

	return jsonify(	ExchangeRate	=	ExchangeRate,
					Transaction 	=	Transaction,
					Amount 			= 	Amount,
					ExchangeAmount 	=	ExchangeAmount,
					DrAccount 		= 	DrAccount,
					DrCategory 		= 	DrCategory,
					DrCurrency 		= 	DrCurrency,
					CrAccount 		= 	CrAccount,
					CrCategory 		= 	CrCategory,
					CrCurrency 		= 	CrCurrency)

@app.route("/Morakot/ForeignExchangeAmount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ForeignExchangeAmount():
	try:
		AccSetting 	= mktsetting.getAccSetting()
		if AccSetting:
			BaseCurrency 	= AccSetting.BaseCurrency
		DrCr 			= request.args.get('DrCr') if 'DrCr' in request.args else ''
		Currency 		= str(request.args.get('Currency')) 	if 'Currency' in request.args else ''
		Amount 	 	 	= request.args.get('Amount') 	if 'Amount' in request.args else 0
		ExchangeAmount 	= request.args.get('ExchangeAmount') if 'ExchangeAmount' in request.args else 0
		TranDate 		= request.args.get('TranDate') 	if 'TranDate' in request.args else ""
		ExchangeRate 	= request.args.get('ExchangeRate') if 'ExchangeRate' in request.args else ""
		InputCurrency 		= request.args.get('InputCurrency')
		LCYAmount 		= 0
		LCYExchangeAmount= 0
		print BaseCurrency
		if Currency:
			CurrencyObj 	= MKT_CURRENCY.query.get(Currency)
			BaseCurrencyObj 	= MKT_CURRENCY.query.get(BaseCurrency)

			if CurrencyObj:
				Amount 			= globalfunction.wordAmount(Amount)
				if Amount:
					Amount 				= mktmoney.toMoney(Amount,CurrencyObj if DrCr=='Dr' else BaseCurrencyObj)
					Amount 				= Decimal(str(Amount).replace(',',''))
				else:
					Amount = 0
				ExchangeAmount 			= globalfunction.wordAmount(ExchangeAmount)
				if ExchangeAmount:
					ExchangeAmount 		= mktmoney.toMoney(ExchangeAmount,BaseCurrencyObj if DrCr=='Dr' else CurrencyObj)
					ExchangeAmount 		= Decimal(str(ExchangeAmount).replace(',',''))
				else:
					ExchangeAmount = 0

				if not ExchangeRate:
					ExchangeRate 	= str(mktaccounting.getReportingRate(Currency,TranDate))
				# Buy Currency
				if DrCr == "Dr":
					# InputCurrency Foreign currency
					if InputCurrency=='1':
						LCYExchangeAmount 		= Decimal(ExchangeRate) * Decimal(Amount)
						LCYExchangeAmount 		= mktmoney.toMoney(float(LCYExchangeAmount),mktmoney.getCurrencyObj(BaseCurrency ))
						LCYAmount 				= mktmoney.toMoney(float(Amount),mktmoney.getCurrencyObj(Currency))
					# InputCurrency Base Currency
					elif InputCurrency=='2':
						LCYAmount 				= Decimal(ExchangeAmount) / Decimal(ExchangeRate)
						LCYAmount 				= mktmoney.toMoney(float(LCYAmount),mktmoney.getCurrencyObj(Currency))
						LCYExchangeAmount		= mktmoney.toMoney(float(ExchangeAmount),mktmoney.getCurrencyObj(BaseCurrency));
				# Buy Currency
				else:
					# InputCurrency Foreign currency
					if InputCurrency=='2':
						LCYExchangeAmount 		= Decimal(Amount) / Decimal(ExchangeRate)
						LCYExchangeAmount 		= mktmoney.toMoney(float(LCYExchangeAmount),mktmoney.getCurrencyObj(Currency))
						LCYAmount 				= mktmoney.toMoney(float(Amount),mktmoney.getCurrencyObj(BaseCurrency));
					# InputCurrency Base Currency
					elif InputCurrency=='1':
						LCYAmount 				= Decimal(ExchangeAmount) * Decimal(ExchangeRate)
						LCYAmount 				= mktmoney.toMoney(float(LCYAmount),mktmoney.getCurrencyObj(BaseCurrency))
						LCYExchangeAmount 		= mktmoney.toMoney(float(ExchangeAmount),mktmoney.getCurrencyObj(Currency))
		return jsonify(	ExchangeRate 				=	str(ExchangeRate),
						LCYAmount 					=	str(LCYAmount),
						LCYExchangeAmount 			= 	str(LCYExchangeAmount))
	except Exception, e:
		print e
		return jsonify(LCYAmount='0')

@app.route("/Morakot/InputCurrency", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getInputCurrency():
	InputCurrency 			= 	request.args.get('InputCurrency')
	Amount 				= 	request.args.get('Amount')
	ExchangeAmount 		= 	request.args.get('ExchangeAmount')
	BoolAmount 			= 	False
	BoolExchangeAmount 	= 	False
	# Disable Amount
	if InputCurrency == '1':
		ExchangeAmount 			= '0'
		BoolExchangeAmount 				= True
		Amount 			= '0'
		BoolAmount 				= 	False
	# Disable ExchangeAmount
	elif InputCurrency =='2':
		ExchangeAmount 			= '0'
		BoolExchangeAmount 				= False
		Amount 			= '0'
		BoolAmount 				= 	True
	return jsonify(
			Amount 				= Amount,
			ExchangeAmount 		= ExchangeAmount,
			BoolAmount 			= BoolAmount,
			BoolExchangeAmount 	= BoolExchangeAmount
		)

def loadCurrentDate():
	return 	mktdate.getBankDate()

def loadCurrency(Default=False):
	AccSetting 	= mktsetting.getAccSetting() #Get Acccounting Setting
	BaseCurrency 	= AccSetting.BaseCurrency
	if Default:
		return MKT_CURRENCY.query.get(BaseCurrency)
	else:
		Currency = MKT_CURRENCY.query.filter(MKT_CURRENCY.ID != BaseCurrency)
		return Currency

def loadCurrencyID(Default=False):
	AccSetting 	= mktsetting.getAccSetting() #Get Acccounting Setting
	if AccSetting:
		BaseCurrency 	= AccSetting.BaseCurrency
		ID 				= BaseCurrency
		if Default:
			ID = MKT_CURRENCY.query.get(BaseCurrency).ID
			return ID
		else:
			Currency = MKT_CURRENCY.query.filter(MKT_CURRENCY.ID != BaseCurrency)
			ID 	= Currency.first().ID
			return ID
	else:
		return ''

def loadCategory():
	JOURNAL_ENTRY_EXCLUDED = mktsetting.getExcludedCategories()
	CategoryObj = MKT_CATEGORY.query.filter(~MKT_CATEGORY.ID.in_(JOURNAL_ENTRY_EXCLUDED))
	return 	CategoryObj

def loadDefaultCurrency():
	return mktaccounting.getDefaultCurrency()

def loadTransaction():
	return MKT_TRANSACTION.query

class FRM_BUY_FOREIGN(exform):
	InputCurrency 	=	SelectField('Input Currency', 
								choices=[('1', 'Foreign Currency'),('2', 'Base Currency')],
								coerce=str,
								description='')
	DrAccount 		= 	TextField(requiredlabel("Dr Account", "*"))
	DrCategory 		= 	TextField(requiredlabel("Dr Category", "*"))
	DrCurrency 		= 	QuerySelectField(requiredlabel("Foreign Currency", "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=loadDefaultCurrency(),
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	ExchangeRate 	= 	TextField(requiredlabel("Exchange Rate", "*"))
	CrAccount 		= 	TextField(requiredlabel("Cr Account", "*"))
	CrCategory 		= 	TextField(requiredlabel("Cr Category", "*"))
	CrCurrency 		= 	TextField(requiredlabel("Cr Currency", "*"))
	Amount 			= 	DecimalField(requiredlabel("Foreign Currency Amount " , "*"), [validators.Required()], default=0)
	ExchangeAmount 	= 	TextField(requiredlabel("Exchange Amount", "*"))
	Transaction 	= 	TextField(requiredlabel("Transaction", "*"))
	TranDate 		= 	DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()], default=loadCurrentDate)
	Reference 		= 	TextField(getLanguage("Reference"))
	Note 			= 	TextAreaField(requiredlabel(getLanguage("Note"),"*"),[validators.Required()])

	def validate_DrCurrency(form, field):

		DrAccount 	=	request.form['DrAccount']
		DrCurrency 	=	request.form['DrCurrency']
		DrCategory 	=	request.form['DrCategory']
		CrAccount 	=	request.form['CrAccount']
		CrCurrency 	=	request.form['CrCurrency']
		CrCategory 	=	request.form['CrCategory']
		AccSetting 		= 	mktsetting.getAccSetting()
		LocalCurrency 	= 	AccSetting.BaseCurrency
		if DrCurrency:
			if not DrAccount:
				raise ValidationError("Vault/Till account doesn't have in currency %s"%DrCurrency)
			if not CrAccount:
				raise ValidationError("Vault/Till account doesn't have in currency %s for exchange."%LocalCurrency)

	def validate_Amount(form, field):

		Amount 		=	str(form.Amount.data)
		Amount 		= 	Amount.replace(',','')
		DrAccount 	=	request.form['DrAccount']
		DrCurrency 	=	request.form['DrCurrency']
		if DrAccount:
			
			CheckBalance2 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amount), "Dr")
			if CheckBalance2:
				raise ValidationError(CheckBalance2)

	def validate_ExchangeAmount(form, field):

		Amount 		=	str(form.ExchangeAmount.data)
		Amount 		= 	Amount.replace(',','')
		CrAccount 	=	request.form['CrAccount']
		CrCurrency 	=	request.form['CrCurrency']
		
		if CrAccount:
			
			if Decimal(Amount) == 0:
				raise ValidationError("Must be more than zero.")

			CheckBalance1 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amount), "Cr")
			if CheckBalance1:
				raise ValidationError(CheckBalance1)

	def validate_TranDate(form, field):

		TranDate 	= request.form['TranDate']
		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	@staticmethod
	def setDisable():
		control_list=['ExchangeAmount']
		if request.method == "POST":
			InputCurrency = request.form['InputCurrency']
			if InputCurrency == '1':
				control_list=['ExchangeAmount']
			elif InputCurrency =='2':
				control_list=['Amount']
		if request.method == "GET":
			ID 					= 	g.formID
			ForeignExchange		=	MKT_FOREIGN_EXCHANGE_INAU.query.get(ID)
			if ForeignExchange:
				if ForeignExchange.ID[:2]=='BF':
					if ForeignExchange.InputCurrency=='1': # Give
						control_list=['ExchangeAmount']
					else: # Get
						control_list=['Amount']
		return control_list

	@staticmethod
	def setVisible():
		control_list=['DrAccount','DrCategory','CrAccount','CrCategory','CrCurrency','Transaction']
		return control_list

	@staticmethod
	def moneyField():
		return [("Amount","DrCurrency"),('ExchangeAmount','CrCurrency')]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCategory',len2),
						('CrCurrency',len3),('DrCurrency',len3),('InputCurrency',len3)	]

		return control_list

	@staticmethod
	def listField():

		Fields = ["ID", "DrCurrency", "Amount", "ExchangeRate","TranDate", "Reference","Note"]

		return Fields,["ID*LK*BF"]

	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"DrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def formReadOnly():

		return "AUTH"

	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeNewID ():
		Check = mktteller.isUserCashAccount()
		if not Check[0]:
			return True,Check[1]
		else:
			#Mean that user have cash account.
			return False,''

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#ExchangeAmount').val(data.ExchangeAmount);$('#DrAccount').val(data.DrAccount);$('#DrCategory').val(data.DrCategory);$('#CrAccount').val(data.CrAccount);$('#CrCategory').val(data.CrCategory);$('#CrCurrency').val(data.CrCurrency);$('#Transaction').val(data.Transaction);$('#Amount').val(data.Amount);"

		varname 		= "ForeignCurrency:$('#DrCurrency').val(),Amount:$('#Amount').val(),ExchangeRate:$('#ExchangeRate').val(),InputCurrency:$('#InputCurrency').val(),ExchangeAmount:$('#ExchangeAmount').val(),DrCr:'Dr'"
		fun 			= ["DrCurrency", varname, fielddisplay, "/Morakot/ForeignExchangeAccount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeAmount').val(data.LCYExchangeAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val(),InputCurrency:$('#InputCurrency').val(),DrCr:'Dr'"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/ForeignExchangeAmount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Amount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),ExchangeAmount:$('#ExchangeAmount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val(),InputCurrency:$('#InputCurrency').val(),DrCr:'Dr'"
		fun 			= ["ExchangeAmount", varname, fielddisplay, "/Morakot/ForeignExchangeAmount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeAmount').val(data.LCYExchangeAmount);$('#Amount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val(),InputCurrency:$('#InputCurrency').val(),ExchangeAmount:$('#ExchangeAmount').val(),DrCr:'Dr'"
		fun 			= ["ExchangeRate", varname, fielddisplay, "/Morakot/ForeignExchangeAmount", "change"]
		hotfield.append(fun)

		# Disable and Enable Amount or Exchange in BuyForeign Currency
		fielddisplay =  "$('input[name=ExchangeAmount]').attr('readonly', data.BoolExchangeAmount);"
		fielddisplay += "$('input[name=ExchangeAmount]').val( data.ExchangeAmount);"
		fielddisplay += "$('input[name=Amount]').attr('readonly', data.BoolAmount);"
		fielddisplay += "$('input[name=Amount]').val( data.Amount);"

		varname  = "InputCurrency:$('#InputCurrency').val()"
		varname += ",Amount:$('#Amount').val()"
		varname += ",ExchangeAmount:$('#ExchangeAmount').val()"

		fun = ["InputCurrency", varname, fielddisplay, "/Morakot/InputCurrency", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeInsert():

		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel

		if AuthLevel == 0 :
	
			
			Amo 			= Decimal(request.form['Amount'])
			ExchangeRate 	= request.form['ExchangeRate']
			ExchangeAmount 	= Decimal(request.form['ExchangeAmount'])
			Tran 			= request.form['Transaction']
			TranDate 		= request.form['TranDate']
			Ref  			= request.form['ID']
			Note  			= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']
			Status 		= Audit['Status']
			Curr 		= Audit['Curr']
			Module 		= "BF"
			Mode 		= ""
			DrCr 		= "Dr"
			DrAcc 		= request.form['DrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['CrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,ExchangeAmount)
			if not CheckAccounting[0]:
				db.session.rollback()
				db.session.close()
				flash(CheckAccounting[1])
				return False

		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			# AuthLevel 	= g.getNAuthorize
			# print 'beforeAuthorize: %s'% AuthLevel
			# ID 			= g.formID
			ID 				= 	g.formID
			BuyForeign 		=	MKT_FOREIGN_EXCHANGE_INAU.query.get(ID)
			
			if not BuyForeign:

				flash(msg_error + "Buy Foreign %s not found." %ID)
				return False

			else:

				Branch 		= 	BuyForeign.Branch
				Amount 		=	BuyForeign.Amount if BuyForeign.Amount else 0
				ExchangeAmount	=	BuyForeign.ExchangeAmount if BuyForeign.ExchangeAmount else 0
				
				if ID[-1:] == 'R':
					DrAccount 	=	BuyForeign.CrAccount
					DrCategory 	= 	BuyForeign.CrCategory
					DrCurrency 	=	BuyForeign.CrCurrency
					CrAccount 	=	BuyForeign.DrAccount
					CrCategory 	= 	BuyForeign.DrCategory
					CrCurrency 	=	BuyForeign.DrCurrency
				else:
					DrAccount 	=	BuyForeign.DrAccount
					DrCategory 	= 	BuyForeign.DrCategory
					DrCurrency 	=	BuyForeign.DrCurrency
					CrAccount 	=	BuyForeign.CrAccount
					CrCategory 	= 	BuyForeign.CrCategory
					CrCurrency 	=	BuyForeign.CrCurrency
				
				
				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency, 
																Amount=Amount, LCYAmount=ExchangeAmount, Module='BF')
				if not Check[0]:
					#Catch error
					flash(msg_error + Check[1])
					db.session.rollback()
					db.session.close()
					return False

				CheckAccounting = mktteller.setAuthorize('BF',MKT_FOREIGN_EXCHANGE,MKT_FOREIGN_EXCHANGE_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True

		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False


	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 				= 	g.formID
			BuyForeign 		=	MKT_FOREIGN_EXCHANGE.query.get(ID)
			
			if not BuyForeign:

				return True, "%s Buy Foreign %s not found." %(msg_error, ID)

			else:

				Branch 		= 	BuyForeign.Branch
				Amount 		=	BuyForeign.Amount if BuyForeign.Amount else 0
				ExchangeAmount	=	BuyForeign.ExchangeAmount if BuyForeign.ExchangeAmount else 0
				DrAccount 	=	BuyForeign.CrAccount
				DrCategory 	= 	BuyForeign.CrCategory
				DrCurrency 	=	BuyForeign.CrCurrency
				CrAccount 	=	BuyForeign.DrAccount
				CrCategory 	= 	BuyForeign.DrCategory
				CrCurrency 	=	BuyForeign.DrCurrency
				
				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency, 
															Amount=Amount, LCYAmount=ExchangeAmount,Module="BF")
				if not Check[0]:
					#Catch error
					db.session.rollback()
					db.session.close()
					return True,Check[1]

				Check = mktteller.validationReverse(MKT_FOREIGN_EXCHANGE,MKT_FOREIGN_EXCHANGE_INAU,ID)
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('ForeignExchange',AuthLevel,'BF',MKT_FOREIGN_EXCHANGE,MKT_FOREIGN_EXCHANGE_INAU,ID,Inputter,Createdon)
					
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

class FRM_SELL_FOREIGN(exform):
	InputCurrency 	=	SelectField('Input Currency', 
							choices=[('2', 'Base Currency'),('1', 'Foreign Currency')],
							coerce=str,
							description='')
	DrAccount 		= 	TextField(requiredlabel("Dr Account", "*"))
	DrCategory 		= 	TextField(requiredlabel("Dr Category", "*"))
	DrCurrency 		= 	TextField(requiredlabel("Dr Currency", "*"))
	CrAccount 		= 	TextField(requiredlabel("Cr Account", "*"))
	CrCategory 		= 	TextField(requiredlabel("Cr Category", "*"))
	CrCurrency 		= 	QuerySelectField(requiredlabel("Foreign Currency", "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=loadDefaultCurrency(),
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	ExchangeRate 	= 	TextField(requiredlabel("Exchange Rate", "*"))
	Amount 			= 	DecimalField(requiredlabel("Amount", "*"), [validators.Required()], default=0)
	ExchangeAmount 	= 	TextField(requiredlabel("Foreign Exchange Amount", "*"))
	Transaction 	= 	TextField(requiredlabel("Transaction", "*"))
	TranDate 		= 	DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()], default=loadCurrentDate)
	Reference 		= 	TextField(getLanguage("Reference"))
	Note 			= 	TextAreaField(requiredlabel(getLanguage("Note"),"*"),[validators.Required()])

	def validate_DrCurrency(form, field):
		DrAccount 	=	request.form['DrAccount']
		DrCurrency 	=	request.form['DrCurrency']
		DrCategory 	=	request.form['DrCategory']
		CrAccount 	=	request.form['CrAccount']
		CrCurrency 	=	request.form['CrCurrency']
		CrCategory 	=	request.form['CrCategory']
		if CrCurrency:
			if not CrAccount:
				raise ValidationError("Vault/Till account doesn't have in currency %s"%CrCurrency)
	def validate_Amount(form, field):
		Amount 		=	str(form.Amount.data)
		Amount 		= 	Amount.replace(',','')
		CrAccount 	=	request.form['CrAccount']
		CrCurrency 	=	request.form['CrCurrency']

		if CrAccount:
		
			CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amount), "Cr")
			if CheckBalance2:
				raise ValidationError(CheckBalance2)

	def validate_ExchangeAmount(form, field):

		Amount 		=	str(form.ExchangeAmount.data)
		Amount 		= 	Amount.replace(',','')
		DrAccount 	=	request.form['DrAccount']
		DrCurrency 	=	request.form['DrCurrency']
			
		if DrAccount:
		
			if Decimal(Amount) == 0:
				raise ValidationError("Must be more than zero.")

			CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amount), "Dr")
			if CheckBalance1:
				raise ValidationError(CheckBalance1)


	def validate_TranDate(form, field):
		TranDate 	= request.form['TranDate']
		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	@staticmethod
	def setDisable():
		control_list=['ExchangeAmount']
		if request.method == "POST":
			InputCurrency = request.form['InputCurrency']
			if InputCurrency == '1':
				control_list=['Amount']
			elif InputCurrency =='2':
				control_list=['ExchangeAmount']
		if request.method == "GET":
			ID 					= 	g.formID
			ForeignExchange		=	MKT_FOREIGN_EXCHANGE_INAU.query.get(ID)
			if ForeignExchange:
				if ForeignExchange.ID[:2]=='SF':
					if ForeignExchange.InputCurrency=='1': # Give
						control_list=['Amount']
					else: # Get
						control_list=['ExchangeAmount']
		return control_list

	@staticmethod
	def setVisible():
		control_list=['DrAccount','DrCategory','CrAccount','CrCategory','DrCurrency','Transaction']
		return control_list

	@staticmethod
	def moneyField():
		return [("Amount","DrCurrency"),('ExchangeAmount','CrCurrency')]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCategory',len3),
						('CrCurrency',len3),('InputCurrency',len3)]
		return control_list

	@staticmethod
	def listField():

		Fields = ["ID", "CrCurrency", "Amount", "ExchangeRate","TranDate", "Reference","Note"]

		return Fields,["ID*LK*SF"]

	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"CrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeNewID ():
		Check = mktteller.isUserCashAccount()
		if not Check[0]:
			return True,Check[1]
		else:
			#Mean that user have cash account.
			return False,''
			
	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate),$('#ExchangeAmount').val(data.ExchangeAmount),$('#DrAccount').val(data.DrAccount),$('#DrCategory').val(data.DrCategory),$('#CrAccount').val(data.CrAccount),$('#CrCategory').val(data.CrCategory),$('#DrCurrency').val(data.DrCurrency),$('#Transaction').val(data.Transaction),$('#Amount').val(data.Amount);;"
		varname 		= "ForeignCurrency:$('#CrCurrency').val(),Amount:$('#Amount').val(),ExchangeRate:$('#ExchangeRate').val(),InputCurrency:$('#InputCurrency').val(),ExchangeAmount:$('#ExchangeAmount').val(),DrCr:'Cr'"
		fun 			= ["CrCurrency", varname, fielddisplay, "/Morakot/ForeignExchangeAccount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeAmount').val(data.LCYExchangeAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val(),InputCurrency:$('#InputCurrency').val(),DrCr:'Cr'"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/ForeignExchangeAmount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Amount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),ExchangeAmount:$('#ExchangeAmount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val(),InputCurrency:$('#InputCurrency').val(),DrCr:'Cr'"
		fun 			= ["ExchangeAmount", varname, fielddisplay, "/Morakot/ForeignExchangeAmount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeAmount').val(data.LCYExchangeAmount);$('#Amount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val(),InputCurrency:$('#InputCurrency').val(),ExchangeAmount:$('#ExchangeAmount').val(),DrCr:'Cr'"
		fun 			= ["ExchangeRate", varname, fielddisplay, "/Morakot/ForeignExchangeAmount", "change"]
		hotfield.append(fun)

		# Disable and Enable Amount or Exchange in SellBuyForeign Currency
		fielddisplay =  "$('input[name=ExchangeAmount]').attr('readonly', data.BoolAmount);"
		fielddisplay += "$('input[name=ExchangeAmount]').val( data.Amount);"
		fielddisplay += "$('input[name=Amount]').attr('readonly', data.BoolExchangeAmount);"
		fielddisplay += "$('input[name=Amount]').val( data.ExchangeAmount);"

		varname  = "InputCurrency:$('#InputCurrency').val()"
		varname += ",Amount:$('#Amount').val()"
		varname += ",ExchangeAmount:$('#ExchangeAmount').val()"

		fun = ["InputCurrency", varname, fielddisplay, "/Morakot/InputCurrency", "change"]
		hotfield.append(fun)

		return hotfield
		
	@staticmethod
	def beforeInsert():

		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel

		if AuthLevel == 0 :
	
			
			Amo 			= Decimal(request.form['Amount'])
			ExchangeRate 	= request.form['ExchangeRate']
			ExchangeAmount 	= Decimal(request.form['ExchangeAmount'])
			Tran 			= request.form['Transaction']
			TranDate 		= request.form['TranDate']
			Ref  			= request.form['ID']
			Note  			= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']
			Status 		= Audit['Status']
			Curr 		= Audit['Curr']
			Module 		= "SF"
			Mode 		= ""
			DrCr 		= "Cr"
			DrAcc 		= request.form['DrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['CrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']
			
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode,ExchangeAmount)
			
			if not CheckAccounting[0]:
				db.session.rollback()
				db.session.close()
				flash(CheckAccounting[1])
				return False

		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			# AuthLevel 	= g.getNAuthorize
			# print 'beforeAuthorize: %s'% AuthLevel
			# ID 			= g.formID
			ID 				= 	g.formID
			SellForeign 		=	MKT_FOREIGN_EXCHANGE_INAU.query.get(ID)
			
			if not SellForeign:

				flash(msg_error + "Sell Foreign %s not found." %ID)
				return False

			else:

				Branch 		= 	SellForeign.Branch
				Amount 		=	SellForeign.Amount if SellForeign.Amount else 0
				ExchangeAmount	=	SellForeign.ExchangeAmount if SellForeign.ExchangeAmount else 0
				
				if ID[-1:] == 'R':
					DrAccount 	=	SellForeign.CrAccount
					DrCategory 	= 	SellForeign.CrCategory
					DrCurrency 	=	SellForeign.CrCurrency
					CrAccount 	=	SellForeign.DrAccount
					CrCategory 	= 	SellForeign.DrCategory
					CrCurrency 	=	SellForeign.DrCurrency
				else:
					DrAccount 	=	SellForeign.DrAccount
					DrCategory 	= 	SellForeign.DrCategory
					DrCurrency 	=	SellForeign.DrCurrency
					CrAccount 	=	SellForeign.CrAccount
					CrCategory 	= 	SellForeign.CrCategory
					CrCurrency 	=	SellForeign.CrCurrency
				
				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,
																Amount=Amount, LCYAmount=ExchangeAmount,Module="SF")
				if not Check[0]:
					#Catch error
					flash(msg_error + Check[1])
					db.session.rollback()
					db.session.close()
					return False

				CheckAccounting = mktteller.setAuthorize('SF',MKT_FOREIGN_EXCHANGE,MKT_FOREIGN_EXCHANGE_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True

		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 				= 	g.formID
			SellForeign 		=	MKT_FOREIGN_EXCHANGE.query.get(ID)
			
			if not SellForeign:

				return True, "%s Sell Foreign %s not found." %(msg_error, ID)

			else:

				Branch 		= 	SellForeign.Branch
				Amount 		=	SellForeign.Amount if SellForeign.Amount else 0
				ExchangeAmount 	=	SellForeign.ExchangeAmount if SellForeign.ExchangeAmount else 0
				DrAccount 	=	SellForeign.CrAccount
				DrCategory 	= 	SellForeign.CrCategory
				DrCurrency 	=	SellForeign.CrCurrency
				CrAccount 	=	SellForeign.DrAccount
				CrCategory 	= 	SellForeign.DrCategory
				CrCurrency 	=	SellForeign.DrCurrency

				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency, 
															Amount=Amount, LCYAmount=ExchangeAmount,Module='SF')
				if not Check[0]:
					#Catch error
					db.session.rollback()
					db.session.close()
					return True,Check[1]

				Check = mktteller.validationReverse(MKT_FOREIGN_EXCHANGE,MKT_FOREIGN_EXCHANGE_INAU,ID)
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('ForeignExchange',AuthLevel,'SF',MKT_FOREIGN_EXCHANGE,MKT_FOREIGN_EXCHANGE_INAU,ID,Inputter,Createdon)
					
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e