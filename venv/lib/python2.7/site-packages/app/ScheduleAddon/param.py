from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *

from app.Category.models 		import *
from app.Transaction.models 	import *
import app.tools.mktteller			as mktteller


@app.route("/Morakot/ScheduleAddon/SetDisable", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ScheduleAddonSetDisable():
	Mode 		= request.args.get('Mode') if 'Mode' in request.args else ''
	Disable 	= False
	if Mode in ['1','2']:
		Disable = True
	return jsonify(Disable=Disable)

def loadCategory():
	return MKT_CATEGORY.query

def loadTransaction():
	return MKT_TRANSACTION.query



# def custom_CalBase(form,field):
# 	Mode = request.form["Mode"]
# 	CalBase = request.form["CalBase"]
# 	if Mode == "3": #Fix Amount
# 		if not CalBase:
# 			raise ValidationError("This field is required.")

class FRM_SCHEDULE_ADDON_PARAM(exform):
	Description 		= TextField(requiredlabel("Description","*"), validators=[validators.Required()])
	LocalDesc 			= TextField("Local Description")
	Mode 				= SelectField(requiredlabel("Mode","*"),
								choices=[('', '---None---'),
										 ('1', 'Fix Amount'),
										 ('2', 'Percentage of Disbursement'),
										 ('3', 'Rate Base'),
										 ],
								default="",
								coerce=str,
								validators=[validators.Required()])
	CalBase 			= TextField("Calculation Base")
	Default 			= TextAreaField(requiredlabel("Default Value","*"),
									validators=[validators.Required()])
	MinMaxValue 		= TextAreaField("Min Max Value")
	CollectionTran 		= QuerySelectField(requiredlabel("Collection Transaction","*"),
											query_factory=loadTransaction,
											get_label=lambda obj:"%s - %s"%(obj.ID,obj.Description),
											allow_blank=True,
											blank_text=u"---Choose Transaction---",
											validators=[validators.Required()])
	PDCollectionTran 	= QuerySelectField(requiredlabel("PD Collection Transaction","*"),
											query_factory=loadTransaction,
											get_label=lambda obj:"%s - %s"%(obj.ID,obj.Description),
											allow_blank=True,
											blank_text=u"---Choose Transaction---",
											validators=[validators.Required()])
	Category 			= QuerySelectField(requiredlabel("Category","*"),
											query_factory=loadCategory,
											get_label=lambda obj:"%s - %s"%(obj.ID,obj.Description),
											allow_blank=True,
											blank_text=u"---Choose Category---",
											validators=[validators.Required()])
	CollectionOrder 	= TextField(requiredlabel("Collection Order","*"),
									validators=[validators.Required()])

	def validate_Default(form,field):
		Default = request.form['Default'] if request.form['Default'] else ""
		for line in Default.splitlines():
			Value = line.split(" ")
			if len(Value) != 2:
				raise ValidationError("Invalid Default Value format. Format: USD 5 KHR 20000")

	def validate_CollectionOrder(form,field):
		try:
			CollectionOrder = request.form['CollectionOrder']
			CollectionOrder = float(CollectionOrder)
		except Exception, e:
			raise ValidationError("This field must be in numeric format.")

	def validate_MinMaxValue(form,field):
		MinMaxValue = request.form['MinMaxValue'] if request.form['MinMaxValue'] else ""
		for line in MinMaxValue.splitlines():
			Value = line.split(" ")
			if len(Value) != 3:
				raise ValidationError("Invalid MinMax Value format. Format: USD 1 10 KHR 4000 40000")

	def validate_Category(form,field):
		Category = request.form["Category"]
		if mktteller.isCashCateogry(Category=Category):
			raise ValidationError("Not allow Cash Category.")

	@staticmethod
	def setVisible():
		ListControl = ["CalBase"]
		return ListControl

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay = "$('#CalBase').attr('readonly',data.Disable);$('#CalBase').val('')"
		varname 	 = "Mode:$('#Mode').val()"
		fun 		 = ["Mode", varname, fielddisplay, "/Morakot/ScheduleAddon/SetDisable","change"]
		hotfield.append(fun)

		return hotfield