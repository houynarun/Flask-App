from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *
from app.Currency.models 		import *
from app.LoanContract.models 	import *
from app.Category.models 		import *
from app.Transaction.models 	import *

import app.tools.mktdate 		as mktdate
import app.tools.user 			as mktuser
import app.tools.mktsetting   	as mktsetting

ExtendClass 			= 	mktsetting.ExtendModule()
ADDON_LINK 				=	ExtendClass.getUrlExtend(Module="ScheduleAddon")

# Schedule Addon
@app.route("/Morakot/ScheduleAddon/GetLoanID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ScheduleAddonGetLoanID():
	Customer 		= request.args.get('CustomerID')
	CurrentBranch 	= mktuser.getCurrentBranch()

	ListLoanID 		= []
	# SchedAddonObj 	= MKT_SCHEDULE_ADDON.query.all()
	# SchedAddonInauObj = MKT_SCHEDULE_ADDON_INAU.query.all()
	# SchedAddonObj.extend(SchedAddonInauObj)
	# if SchedAddonObj:
	# 	ListLoanID = [item.LoanID for item in SchedAddonObj]

	LoanObj 		= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ContractCustomerID == Customer,\
													~MKT_LOAN_CONTRACT.ID.in_(ListLoanID),\
													MKT_LOAN_CONTRACT.Branch == CurrentBranch).all()

	LoanInauObj 	= MKT_LOAN_CONTRACT_INAU.query.filter(MKT_LOAN_CONTRACT_INAU.ContractCustomerID == Customer,\
													~MKT_LOAN_CONTRACT_INAU.ID.in_(ListLoanID),
													MKT_LOAN_CONTRACT_INAU.Branch == CurrentBranch).all()
	LoanObj.extend(LoanInauObj)
	dic = {}
	if LoanObj:
		for row in LoanObj:
			dic[row.ID] = row.ID

	return jsonify(results=dic)


@app.route("/Morakot/ScheduleAddon/GetCurrency", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ScheduleAddonGetCurrency():
	Currency 	= ''
	Account 	= ''
	ApprovedAmount = ""
	LoanID 		= request.args.get('LoanID') if 'LoanID' in request.args else ''
	if LoanID:
		LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		if not LoanObj:
			LoanObj = MKT_LOAN_CONTRACT_INAU.query.get(LoanID)
			
		if LoanObj:
			Currency 		= LoanObj.Currency

	return jsonify(Currency=Currency)

@app.route("/Morakot/ScheduleAddon/GetCollection", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ScheduleAddonGetCollection():
	Type 		= request.args.get('Type') if 'Type' in request.args else ''
	Currency 	= request.args.get('Currency') if request.args.get('Currency') else ""
	Amount 		= 0
	if Type:
		ScheduleAddonObj = getScheduleAddonParam(Type)
		if ScheduleAddonObj:
			Default = ScheduleAddonObj.Default
			for line in Default.splitlines():
				Value = line.split(" ")
				try:
					LineCurrency 	= Value[0]
					LineAmount 		= Value[1]
					if LineCurrency == Currency:
						Amount = LineAmount
				except:
					Amount = 0

	return jsonify(Value = Amount,TotalAmount=0)

def getScheduleAddonParam(Type):
	SchedParamObj = MKT_SCHEDULE_ADDON_PARAM.query.get(Type)
	return SchedParamObj

def getControlList(ControlID=""):
	controls_list 	= request.form
	ListControl		= [item for item in controls_list if eval(ControlID)]
	ListControl.sort()
	TotalControl 	= len(ListControl)
	return ListControl,TotalControl

def loadLoanContract():

	if request.method == 'POST':
		CustomerID = request.form["CustomerID"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			CustomerID = Record['CustomerID']
		else:
			CustomerID = ""

	LoanObj = MKT_LOAN_CONTRACT.query.filter_by(ContractCustomerID=CustomerID).all()
	LoanInauObj = MKT_LOAN_CONTRACT_INAU.query.filter_by(ContractCustomerID=CustomerID).all()
	LoanObj.extend(LoanInauObj)

	return LoanObj

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def loadAddonType(ID = ""):
	if ID:
		return MKT_SCHEDULE_ADDON_PARAM.query.get(ID)
	else:
		return MKT_SCHEDULE_ADDON_PARAM.query

#After Save record will be look up value from table store
def getRecord():
	try:
		result = MKT_SCHEDULE_ADDON.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_SCHEDULE_ADDON_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict = row.__dict__
			return Dict
		else:
			return Dict
	except:
		raise

def getNextRunDate():
	BankDate = mktdate.getBankDate()
	return str(BankDate)

# def custom_AddonType(form, field):
# 	ListAddonType, TotalAddonType = getControlList('"AddonType" in item')
# 	SchedAddonParamObj 	= MKT_SCHEDULE_ADDON_PARAM.query
# 	Description 		= "This addon"
# 	ListValue 	= [request.form[item] for item in ListAddonType]
# 	DupValue 	= [str(item) for item in ListValue if ListValue.count(item) > 1]
# 	AddonType 	= request.form[field.name]

# 	for i in range(0,TotalAddonType):
# 		if field.name == ListAddonType[i]:
# 			if AddonType in DupValue:
# 				if DupValue:
# 					ID = request.form[ListAddonType[i]]
# 					SchedAddonParamObj = SchedAddonParamObj.get(ID)
# 					Description = SchedAddonParamObj.Description
# 					raise ValidationError(Markup("(Addon Type %s) <b>%s</b> type is already used. Please choose other type."%(i+1,Description)))

def custom_Value(form, field):
	ListValue, TotalValue = getControlList("'Value' in item")
	ListType, TotalType = getControlList("'AddonType' in item")
	Type 		= request.form['AddonType'] if request.form['AddonType'] else ""
	Currency 	= request.form['Currency'] if request.form['Currency'] else ""

	for i in range(0,TotalValue):
		if field.name == ListValue[i]:
			Value = request.form[ListValue[i]]
			# Type = request.form[ListType[i]]

			SchedParamObj = getScheduleAddonParam(Type)
			if SchedParamObj:
				MinMaxValue = SchedParamObj.MinMaxValue
				if MinMaxValue:
					for line in MinMaxValue.splitlines():
						LineValue 	= line.split(" ")
						LineCurrency= LineValue[0]
						MinValue 	= LineValue[1]
						MaxValue 	= LineValue[2]
						if LineCurrency == Currency:
							if not (float(MinValue) <= float(Value) <= float(MaxValue)):
								raise ValidationError("(Value %s) Value must be in range of %s to %s"%(i+1,MinValue, MaxValue))


class FRM_SCHEDULE_ADDON(exform):
	CustomerID 		= RemoteTextField(requiredlabel("Customer","*"),
								validators=[validators.Required()])
	LoanID 			= QuerySelectField(requiredlabel("Loan Contract","*"),
									query_factory = loadLoanContract,
									get_label 	= "ID",
									allow_blank=True,
									blank_text=u"",
									validators=[validators.Required()])
	Currency 		= TextField(requiredlabel("Currency","*"), validators=[validators.Required()])
	AddonType 		= QuerySelectField(requiredlabel("Addon Type","*"),
									query_factory = loadAddonType,
									get_label 	= "Description",
									default=lambda:loadAddonType("100"),
									allow_blank=True,
									blank_text=u"---Choose Addon Type---",
									validators 	= [validators.Required()])

	NextRunDate 	= TextField("Next Run Date", default=getNextRunDate)
	ActualCollection= TextField("Actual Collection",default=0)
	PastDue 		= TextField("Past Due",default=0)

	# Tab Detail
	Value 			= TextField(requiredlabel("Value (Fixed/Percentage)", "*"),
							description="1-Detail",
							validators=[validators.Required(),custom_Value])

	StartInstallment= TextField(requiredlabel("Start Installment", "*"),
							description="1-Detail",
							validators=[validators.Required()])

	EndInstallment  = TextField(requiredlabel("End Installment", "*"),
							description="1-Detail",
							validators=[validators.Required()])

	def validate_LoanID(form, field):
		LoanID 		= request.form['LoanID']
		AddonType 	= request.form['AddonType']
		ID 			= request.form["ID"]
		ScheduleAddonObj = MKT_SCHEDULE_ADDON.query.filter(MKT_SCHEDULE_ADDON.LoanID == LoanID,\
															MKT_SCHEDULE_ADDON.AddonType == AddonType,\
															MKT_SCHEDULE_ADDON.ID != ID).first()
		if not ScheduleAddonObj:
			ScheduleAddonObj = MKT_SCHEDULE_ADDON_INAU.query.filter(MKT_SCHEDULE_ADDON_INAU.LoanID == LoanID,\
															MKT_SCHEDULE_ADDON_INAU.AddonType == AddonType,\
															MKT_SCHEDULE_ADDON_INAU.ID != ID).first()
		if ScheduleAddonObj:
			ScheduleAddonID = ScheduleAddonObj.ID
			raise ValidationError(Markup("This Loan Contract %s with addon %s is already used. Please use this record \
								<a href='javascript:void(0)' onClick=CustomClickView('Schedule&nbspAddon-%s','%s/?ID=%s')> %s</a>"\
								%(LoanID,AddonType,ScheduleAddonID,ADDON_LINK,ScheduleAddonID,ScheduleAddonID)))


	@staticmethod
	def isMultiValue():
		ListControl = ["1-Detail"]
		return ListControl

	@staticmethod
	def setVisible():
		ListControl=["NextRunDate"]
		return ListControl

	@staticmethod
	def setDisable():
		ListControl = ["PastDue","NextRunDate","Currency","ActualCollection"]
		return ListControl

	# @staticmethod
	# def moneyField():
	# 	ListControl = [["TotalAmount","Currency"]]
	# 	return ListControl

	@staticmethod
	def hotSelectField():
		hotfield  		= []
		fielddisplay 	= "LoanID"
		varname 		= "CustomerID:$('#CustomerID').val()"
		fun 			= ["CustomerID", varname, fielddisplay, "/Morakot/ScheduleAddon/GetLoanID", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotField():
		hotfield 		= []
		fielddisplay 	= "$('#TotalAmount').val(data.TotalAmount);$('#Value').val(data.Value)"
		varname 		= "Type:$('#AddonType').val(),Currency:$('#Currency').val()"
		fun 			= ["AddonType", varname, fielddisplay, "/Morakot/ScheduleAddon/GetCollection", "change"]
		hotfield.append(fun)
		fielddisplay 	= "$('#Currency').val(data.Currency)"
		varname 		= "LoanID:$('#LoanID').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/ScheduleAddon/GetCurrency", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setWidth():
		ListControl 	= [("TotalAmount",len2),("Value",len2),("Currency",len2)]
		return ListControl


	@staticmethod
	def reverseRec():
		ID = g.formID
		AddonObj = MKT_SCHEDULE_ADDON.query.\
							filter(MKT_SCHEDULE_ADDON.ID == ID).first()

		if AddonObj.ActualCollection > 0 or AddonObj.PastDue > 0:
			return False, ''
		else:
			return True, ''
