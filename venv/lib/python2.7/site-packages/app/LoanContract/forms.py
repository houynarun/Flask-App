from flask 							import g, flash
from wtforms 						import DecimalField, IntegerField
from wtforms.validators 			import StopValidation
from app.mktcore.wtfimports 		import *
from .models 						import *
import time
from decimal 						import *
from .. 							import app, db
from datetime 						import datetime, date, timedelta
from sqlalchemy 					import *

import app.tools.mktloanapplication 		as mktloanapp
import app.tools.mktcustomer 				as mktcustomer
import app.tools.mktaccount					as mktaccount
import app.tools.user 						as mktuser
import app.tools.mktdate	 				as mktdate
import app.tools.mktofficer 				as mktofficer
import app.tools.mktmoney 					as mktmoney
import app.tools.mktaccounting 				as mktaccounting
import app.tools.mktloan 					as mktloan
import app.tools.loantools.nonworkingday 	as mktDay
import app.tools.loantools.rescheduletools 	as mktreschedule
import app.tools.mktholiday 				as mktHoliday
import app.tools.mktkey 					as mktkey
import app.tools.mktpdcollection			as mktpd
import app.tools.mktrepayment 				as mktrepayment
import app.tools.mktaudit 					as mktaudit
import app.tools.mktnotification 			as mktnotification
import app.tools.mktcharge 					as mktcharge
import app.mktcore.globalfunction 			as globalfunction
import app.tools.mktloanamendment 			as mktloanamendment
import app.tools.mktsetting 				as mktsetting

from app.tools.mktvb 				import *
from app.tools.mktroute 			import *
from app.Account.models 			import MKT_ACCOUNT
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.LoanPurpose.models 		import MKT_LOAN_PURPOSE
from app.VB.models 					import MKT_VB
from app.Officer.models 			import MKT_OFFICER
from app.Branch.models 				import MKT_BRANCH
from app.Charge.models 				import MKT_CHARGE
from app.LoanApplication.models 	import MKT_LOAN_APPLICATION, MKT_LOAN_COLLATERAL, MKT_GUARANTOR
from app.InterestRate.models 		import MKT_INTEREST_RATE
from app.ChargeRate.models 			import MKT_CHARGE_RATE
from app.LoanRuleDetail.models		import MKT_LOAN_RULE_DE
from app.Customer.models 			import MKT_CUSTOMER
from app.SourceOfFund.models 		import MKT_SOURCE_OF_FUND
from app.Currency.models 			import MKT_CURRENCY
from app.AssetClass.models 			import MKT_ASSET_CLASS
from app.Collateral.models 			import MKT_COLLATERAL
from app.LoanContract.models 		import MKT_LOAN_CHARGE, MKT_LOAN_CHARGE_INAU
from app.ScheduleAddon.models 		import *
from app.Sector.models 				import *
from app.Industry.models 			import *
from app.Ownership.models 			import *
from app.RepaymentSchedule.models 	import *
from app.ScheduleDefine.models 		import *
from app.LoanApplication.forms 		import getLoadCollateral
from app.PDParameter.models 		import *
from app.Vendor.Vendor.models		import MKT_VENDOR
from app.tools.mktloan 				import *
from app.tools.mktroute		        import *
from app.VB.models 					import *
def getRecord():
	try:
		result = MKT_LOAN_CONTRACT.query.get(g.formID)
		if not result:
			result = MKT_LOAN_CONTRACT_INAU.query.get(g.formID)
			if result:
				return [result.Account, result.ContractVB, result.Group]

			else:
				return []
		else:
			return [result.Account, result.ContractVB, result.Group]

	except:
		raise

def getRecordLoanApp():
	try:
		result = MKT_LOAN_CONTRACT.query.get(g.formID)
		if not result:
			result = MKT_LOAN_CONTRACT_INAU.query.get(g.formID)
			if result:
				return [result.LoanApplicationID]

			else:
				return []
		else:
			return [result.LoanApplicationID]

	except:
		raise

def isNBCRequired():
	NBCRequired	= mktsetting.getAppSetting('NBCContract') if mktsetting.getAppSetting('NBCContract') else 'N'
	if NBCRequired == 'Y':
		return True
	else:
		return False

def isRequiredNBCTab(Label):

	if isNBCRequired():
		return requiredlabel(Label, "*")
	else:
		return  requiredlabel(Label,"")

class RequiredValidator(object):

	def __call__(self,form,field):
		if isNBCRequired():
			if field.data == None:
				raise ValidationError('This field is required.')
		else :
			return

def getLoanAppInfo(LoanAppID):
	try:
		query = MKT_LOAN_APPLICATION.query.get(LoanAppID)
		return query
	except Exception as e:
		return jsonify(message={'message':[str(e)]}),500

@app.route("/Morakot/API/LoanApplicationID", methods=['GET'])
@app.route("/Morakot/LoanApplicationID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def LoanApplicationID():
	return mktloanapp.getSearchLoanApplication()

@app.route("/Morakot/API/ContractCustomerID", methods=['GET'])
@app.route("/Morakot/ContractCustomerID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ContractCustomerID():
	return mktcustomer.getSearchCustomer()

@app.route("/Morakot/API/ContractAccountID", methods=['GET'])
@app.route("/Morakot/ContractAccountID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ContractAccountID():
	return mktaccount.getSearchAccount()

@app.route("/Morakot/API/ContractVB", methods=['GET'])
@app.route("/Morakot/ContractVB", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ContractVB():
	return getSearchVB()

@app.route("/Morakot/API/LoanApplicationInfo", methods=['GET'])
@app.route("/Morakot/LoanApplicationInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanApplicationInfo():
	try:
		LoanAppID 		= request.args.get('LoanAppID')
		Amount 			= "0"
		Term 			= "0"
		FreqType 		= "1"
		Frequency 		= "0"
		FreqDesc 		= "1.Monthly"
		Installment 	= 0
		LNCustomerID 	= ""
		LoanProduct 	= ""
		Category 		= ""
		InterestRate 	= ""
		Currency 		= ""
		ProDesc 		= ""
		OnOff 			= ""
		OnOff1 			= ""
		Group 			= ""
		Group_Desc 		= ""
		VBID 			= ""
		VB_Desc 		= ""
		CustomerName 	= ""
		LoanPurpose 	= ""
		PurDesc 		= ""
		SourceOfFund 	= ""
		SouDesc 		= ""
		MoreThanOneYear = "N"
		ContractOfficerID = ""
		OfficerName 	= ""

		Account 		= 	""
		AccountName 	= 	""

		#For Leasing	
		Vendor 					= ""
		VendorName 				= ""
		AssetPrice				= ""
		DownPayment				= ""
		VATInput				= ""
		VATOutputOnLoan			= ""
		VATOutputOnDownPayment	= ""
		TaxExpense 				= ""
		AssetDescription		= ""



		query = MKT_LOAN_APPLICATION.query.get(LoanAppID)
		if query:

			CurrencyObj 	= MKT_CURRENCY.query.get(query.Currency)
			Amount 			= str(mktmoney.toMoney(float(query.Amount), CurrencyObj))
			Term 			= str(query.Term) if query.Term else "0"
			
			if float(Term) > 12:
				MoreThanOneYear = "Y"

			Frequency 		= str(query.Frequency)
			Installment 	= str(query.Installment)
			LNCustomerID 	= query.LNCustomerID

			Cus = MKT_CUSTOMER.query.get(LNCustomerID)
			if Cus:
				CustomerName 	= 	LNCustomerID + " - " + Cus.LastNameEn + " " + Cus.FirstNameEn

				AccountID 		= 	MKT_ACCOUNT.query.\
									filter(MKT_ACCOUNT.CustomerList == LNCustomerID)

				if AccountID.count() >= 1:
					for item in AccountID:
						Account 		= 	item.ID
						AccountName 	=	item.ID

				ContractOfficerID 	= Cus.Officer
				Officer = MKT_OFFICER.query.get(ContractOfficerID)
				if Officer:
					OfficerName = "%s - %s - %s"%(Officer.ID,Officer.LastName,Officer.FirstName)

			LoanProduct  			= query.LoanProduct
			ProDesc 				= MKT_LOAN_PRODUCT.query.get(LoanProduct).Description
			Category 				= query.Category
			InterestRate 			= str(query.InterestRate)
			InterestRate 			= InterestRate.split()
			InterestRate 			= InterestRate[0]
			Currency 				= query.Currency
			Vendor 					= query.Vendor
			AssetPrice				= str(query.AssetPrice)
			DownPayment				= str(query.DownPayment)
			VATInput				= str(query.VATInput)
			VATOutputOnLoan			= str(query.VATOutputOnLoan)
			VATOutputOnDownPayment	= str(query.VATOutputOnDownPayment)
			print query.TaxExpense, "<----- TaxExpense"
			TaxExpense 				= str(query.TaxExpense)
			
			AssetDescription		= query.AssetDescription

			if Vendor:
				VendorObj 	= MKT_VENDOR.query.get(Vendor)
				if VendorObj:
					VendorName 	= VendorObj.VendorName

			# Guarantor 		= MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID == LoanAppID).all()
			# if Guarantor:
			# 	OnOff 		= "display: none;"

			# Collateral 		= MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID == LoanAppID).all()
			# if Collateral:
			# 	OnOff1 		= "display: none;"

			Group 			= query.Group
			
			VBID 			= query.VBID
			if not VBID:
				VBID 	=	"__None"
				Group 	=	"__None"

				VB_Desc 	=	"Select ContractVB"
				Group_Desc 	=	"Select Group"
			else:
				VB = MKT_VB.query.get(VBID)
				if VB:
					VB_Desc = VB.Description

			FreqType = query.FreqType
			if FreqType == "1":
				FreqDesc = "1.Monthly"
			elif FreqType == "2":
				FreqDesc = "2.Weekly"
			elif FreqType == "3":
				FreqDesc = "3.Daily"

			LoanPurpose = query.LoanPurpose
			if not LoanPurpose:
				LoanPurpose = 	"__None"
				PurDesc 	= 	"--None--"
			else:
				LP = MKT_LOAN_PURPOSE.query.get(LoanPurpose)
				if LP:
					PurDesc = LP.Description

			SourceOfFund = query.SourceOfFund
			if not SourceOfFund:
				SourceOfFund 	=	"__None"
				SouDesc 		=	"--None--"
			else:
				SF = MKT_SOURCE_OF_FUND.query.get(SourceOfFund)
				if SF:
					SouDesc = SF.Description
		return jsonify(Amount=Amount, Installment=Installment, Term=Term, Frequency=Frequency,
					   LNCustomerID=LNCustomerID, CustomerName=CustomerName,
					   LoanProduct=LoanProduct, ProDesc=ProDesc, Category=Category,
					   InterestRate=InterestRate, Currency=Currency, OnOff=OnOff,
					   Group=Group,Group_Desc=Group_Desc, VBID=VBID, VB_Desc=VB_Desc, FreqType=FreqType,
					   FreqDesc=FreqDesc, LoanPurpose=LoanPurpose, PurDesc=PurDesc,
					   SourceOfFund=SourceOfFund, SouDesc=SouDesc, MoreThanOneYear=MoreThanOneYear,
					   Account=Account, AccountName=AccountName, ContractOfficerID=ContractOfficerID, 
					   OfficerName=OfficerName, OnOff1=OnOff1, Vendor=Vendor, AssetPrice=AssetPrice,
					   DownPayment=DownPayment, VATInput=VATInput, VATOutputOnLoan=VATOutputOnLoan,
					   VATOutputOnDownPayment=VATOutputOnDownPayment, TaxExpense=TaxExpense,
					   AssetDescription=AssetDescription, VendorName=VendorName)
	except Exception as e:
		return jsonify(message={'message':[str(e)]}),500

@app.route("/Morakot/API/ContractCurrencyInfo", methods=['GET'])
@app.route("/Morakot/ContractCurrencyInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getContractCurrencyInfo():
	try:
		AccountID 		= request.args.get("AccountID")
		LoanProduct 	= request.args.get("LoanProduct")
		query 			= MKT_ACCOUNT.query.get(AccountID)
		Currency 		= ""
		InterestRate 	= "0"
		LoanAppID 		= request.args.get('LoanAppID') if 'LoanAppID' in request.args else ""

		if query:
			Currency 		= str(query.Currency)
			RateID 			= LoanProduct + Currency
			rate 			= MKT_INTEREST_RATE.query.get(RateID)
			InterestRate	= str(rate.Rate) if rate else "0"
			InterestRate 	= InterestRate.split()[0]

		LC_App = getLoanAppInfo(LoanAppID)
		if LC_App:
			InterestRate 	= str(LC_App.InterestRate)
			InterestRate 	= InterestRate.split()
			InterestRate 	= InterestRate[0]

		return jsonify(Currency=Currency, InterestRate=InterestRate)
	except Exception as e:
		return jsonify(message={'message':[str(e)]}),500

@app.route("/Morakot/SectorByCustomer", methods=['GET'])
@app.route("/Morakot/API/SectorByCustomer", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSectorByCustomer():
	try:
		Customer 	= request.args.get("Customer")
		print "Customer:",Customer
		CustomerObj = MKT_CUSTOMER.query.get(Customer)
		if CustomerObj:
			SectorID		= CustomerObj.Sector
			IndustryID 		= CustomerObj.Industry
			print "IndustryID:",IndustryID
			SectorObj 		= MKT_SECTOR.query.get(SectorID)
			IndustryObj 	= MKT_INDUSTRY.query.get(IndustryID)
			SectorDesc 		= str(SectorID) + " - "+SectorObj.Description
			IndustryDesc 	= str(IndustryID) +" - "+ IndustryObj.Description

		return jsonify(SectorID		= SectorID,
						IndustryID	= IndustryID,
						SectorDesc	= SectorDesc,
						IndustryDesc= IndustryDesc
						)
	except:
		raise

@app.route("/Morakot/API/LoanProductInfo", methods=['GET'])
@app.route("/Morakot/LoanProductInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanProductInfo():
	try:
		ProductID 		= request.args.get("LoanProduct")
		Currency 		= request.args.get("Currency")
		Category 		= ""
		InterestRate 	= ""
		LoanAppID 		= request.args.get('LoanAppID') if 'LoanAppID' in request.args else ""
		
		row = MKT_LOAN_PRODUCT.query.get(ProductID)
		if row:
			Category 		= str(row.LNCategory)
			RateID 			= str(row.InterestKey) + str(Currency)
			rate 			= MKT_INTEREST_RATE.query.get(RateID)
			InterestRate 	= str(rate.Rate) if rate else "0"
			InterestRate 	= InterestRate.split()
			
			if len(InterestRate) > 1:
				InterestRate 	= InterestRate[1]
			else:
				InterestRate 	= InterestRate[0]

		LC_App = getLoanAppInfo(LoanAppID)
		if LC_App:
			InterestRate 	= str(LC_App.InterestRate)

		return jsonify(Category=Category, InterestRate=InterestRate)
	except Exception as e:
		return jsonify(message={'message':[str(e)]}),500

@app.route("/Morakot/API/ChargeKeyInfo", methods=['GET'])
@app.route("/Morakot/ChargeKeyInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getChargeKeyInfo():
	try:
		ChargeKeyID = request.args.get("ChargeKeyID")
		ChargeKey 	= ChargeKeyID
		Currency 	= request.args.get("Currency")
		RateFixed 	= ""
		Charge 		= ""
		ChargePerInstallment= 0
		ChargePerDay		= 0
		ChargeLastBooked	= 0
		ChargeEarned 	= 0
		ChargeUnearned 	= 0
		ChargeKeyID = str(ChargeKeyID) + str(Currency)
		# print "%s" %ChargeKeyID
		row 		= MKT_CHARGE_RATE.query.get(ChargeKeyID)
		if row:
			RateFixed 	= str(row.RateFixed) if row else ""
			Charge 		= str(row.Value).strip() if row.Value else "0"
			ChargeList  = Charge.split()
			ChargeList  = filter(None,ChargeList)

			if len(ChargeList) > 1:
				Charge = ChargeList[1]
			else:
				Charge = ChargeList[0]

		return jsonify( RateFixed=RateFixed, Charge=str(Charge), ChargeLastBooked=str(ChargeLastBooked), 
						ChargePerDay=str(ChargePerDay), ChargePerInstallment=str(ChargePerInstallment), 
						ChargeEarned=str(ChargeEarned), ChargeUnearned=str(ChargeUnearned))
	except Exception as e:
		return jsonify(message={'message':[str(e)]}),500

@app.route("/Morakot/API/SetOutStandingAmount", methods=['GET'])
@app.route("/Morakot/SetOutStandingAmount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def setOutStandingAmount():
	try:
		Amount = request.args.get("Disbursed")
		Currency = request.args.get("Currency")
		WordAmount = globalfunction.wordAmount(Amount)

		if WordAmount:
			Amount = WordAmount
		else:
			Amount = 0

		CurrencyObj = MKT_CURRENCY.query.get(Currency)
		Amount = mktmoney.toMoney(float(Amount), CurrencyObj)

		return jsonify(Amount=Amount)
	except Exception as e:
		return jsonify(message={'message':[str(e)]}),500

@app.route("/Morakot/API/CheckMoreThanOneYear", methods=['GET'])
@app.route("/Morakot/CheckMoreThanOneYear", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getMoreThanOneYear():
	try:
		Term = request.args.get("Term")
		if float(Term) > 12:
			MoreThanOneYear = "Y"
		else:
			MoreThanOneYear = "N"

		return jsonify(MoreThanOneYear=str(MoreThanOneYear))

	except Exception as e:
		return jsonify(message={'message':[str(e)]}),500

def loadAccount():
	try:
		AccountObj 	= MKT_ACCOUNT.query.filter_by(ID='0').filter(MKT_ACCOUNT.AccStatus == 'O').all()
		Branch 		= mktuser.getCurrentBranch()
		if request.method == 'POST':
			CustomerID = request.form["ContractCustomerID"]
			if CustomerID:
				AccountObj 	= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList == CustomerID).\
												filter(MKT_ACCOUNT.AccStatus == 'O').\
												filter(MKT_ACCOUNT.AccProduct == '101')
		else:
			if len(getRecord()) > 0:
				AccountObj 	= MKT_ACCOUNT.query.filter_by(ID=getRecord()[0]).filter(MKT_ACCOUNT.AccStatus == 'O').all()

		return AccountObj
	except:
		raise

def loadLoanProduct():
	return mktloan.loadLoanProduct()

def loadSector():
	return MKT_SECTOR.query

def loadIndustry():  #define function 
	return MKT_INDUSTRY.query # tablename.query

def loadOwnership():
	return MKT_OWNERSHIP.query


def loadSector():
	return MKT_SECTOR.query

def loadIndustry():  #define function 
	return MKT_INDUSTRY.query # tablename.query

def loadOwnership():
	return MKT_OWNERSHIP.query


def laodLoanPurpose():
	return MKT_LOAN_PURPOSE.query

def loadVB():
	return MKT_VB.query

def loadGroupID():
	if request.method == 'POST':
		VBID = request.form["ContractVB"]
	else:
		if len(getRecord())>0:
			Record = getRecord()[1]
			return MKT_GROUP.query.filter_by(VBID=Record)
		else:
			return MKT_GROUP.query.filter_by(VBID='').all()
	return MKT_GROUP.query.filter_by(VBID=str(VBID))

def loadOfficer():
	return mktofficer.loadOfficer()

def loadCharge():
	return MKT_CHARGE.query

def loadSourceOfFund():
	return MKT_SOURCE_OF_FUND.query

def loadAssetClass():
	Ass = MKT_ASSET_CLASS.query.\
		  order_by(MKT_ASSET_CLASS.ID.asc()).\
		  first()
	Asset = ""
	if Ass:
		Asset = str(Ass.ID).split('-')[0]

	return str(Asset)

def loanBankDate():
	return mktdate.getBankDate()

def loadGuarantor():
	Branch 			= 	mktuser.getCurrentBranch()
	RestrictedObj 	= 	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()
	AsGurantor 		=	MKT_CUSTOMER.query.\
						filter(MKT_CUSTOMER.AsGurantor == 'Y').\
						filter(MKT_CUSTOMER.Block == 'N').\
						order_by(MKT_CUSTOMER.ID.asc())
	if RestrictedObj:
		AsGurantor 	=	AsGurantor.filter(MKT_CUSTOMER.Branch == Branch)

	return AsGurantor

def loadCoBorrower():
	Branch 			= 	mktuser.getCurrentBranch()
	RestrictedObj 	= 	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()
	CoBorrower 		= 	MKT_CUSTOMER.query.\
						filter(MKT_CUSTOMER.Block == 'N').\
						order_by(MKT_CUSTOMER.ID.asc())
	if RestrictedObj:
		CoBorrower 	=	CoBorrower.filter(MKT_CUSTOMER.Branch == Branch)

	return CoBorrower

def loadCollateral():
	Customer = request.form["ContractCustomerID"] if request.method == 'POST' else ""
	if Customer:
		return MKT_COLLATERAL.query.filter(MKT_COLLATERAL.CustomerID == Customer)
	else:
		return MKT_COLLATERAL.query

def loadSector():  #define function 
	return MKT_SECTOR.query # tablename.query

def loadLoanPenalty():
	status = "Y"
	LoanPenalty  = mktsetting.getAppSetting('ENABLE_PENALTY')
	if LoanPenalty:
		status = LoanPenalty
	return status
def loadVendor():
	return MKT_VENDOR.query

def custom_FirstCollectionDate(form,field):
	FirstCollection = request.form["FirstCollectionDate"] if request.method == 'POST' else ""
	ValueDate 		= request.form["ValueDate"] if request.method == 'POST' else ""
	# FirstCollection = form.FirstCollectionDate.data

	BankDate = mktdate.getBankDate()

	LoanProduct 	= form.LoanProduct.data
	if FirstCollection and ValueDate:
		CheckFormatDate = mktdate.isDateISO(FirstCollection)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
			
		ValueDate 		= datetime.strptime(str(ValueDate),'%Y-%m-%d').date()
		FirstCollection = datetime.strptime(str(FirstCollection),'%Y-%m-%d').date()

		# Holiday 	= mktHoliday.getHoliday()
		# check 		= mktDay.isNonWorkingDay(FirstCollection, Holiday)
		# if check:
		# 	raise ValidationError("Date must be different holiday.")

		if FirstCollection <= ValueDate:
			raise ValidationError("Date must be bigger than value date.")

		if FirstCollection < BankDate:
			raise ValidationError("Date must be bigger than bank Date")

	else:
		
		# clear out processing errors
		field.errors[:] = []
		
		if hasattr(LoanProduct,'ID'):
			LoanProduct = LoanProduct.ID
			LoanProductObj = MKT_LOAN_PRODUCT.query.get(LoanProduct)
			if LoanProductObj:
				BaseDateKey = LoanProductObj.BaseDateKey
				if BaseDateKey == "3":
					raise ValidationError("This field is required.")
		
		# Stop further validators running
		raise StopValidation()

def custom_Charge(form, field):
	Currency 	=	request.form['Currency']
	ListChargeKey,TotalChargeKey 	=	mkttool.getControlList('ChargeKey')
	ListCharge,TotalCharge 			=	mkttool.getControlList('Charge')
	Charge=''

	for i in range(0,TotalCharge):

		if field.name == ListCharge[i]:
			ChargeKey = request.form[ListChargeKey[i]]
			Charge 	  = request.form[ListCharge[i]]

			if ChargeKey and ChargeKey != '__None':
				# mkttool.custom_RequiredField(form, field)
				if not Charge:
					raise ValidationError("#%s This field is required."%(i+1))
				ChargeKeyID = str(ChargeKey) + str(Currency)
				# print "%s" %ChargeKeyID

				ChargeObj 		= MKT_CHARGE_RATE.query.get(ChargeKeyID)
				if ChargeObj:
					
					if not mkttool.isFloat(Charge):
						raise ValidationError('Charge must be number.')
					Data = Decimal(Charge)
					ChargeMode 	= ChargeObj.ChargeMode
					RateFixed 	= str(ChargeObj.RateFixed) if ChargeObj else ""
					Charge 		= str(ChargeObj.Value).strip() if ChargeObj.Value else "0"
					ChargeList  = Charge.split()
					ChargeList  = filter(None,ChargeList)

					if len(ChargeList) > 1:
						MaxCharge = Decimal(ChargeList[1])
						MinCharge = Decimal(ChargeList[0])
						if MinCharge <= Data <= MaxCharge:
							pass
						else:
							raise ValidationError('%s - Charge value must be between %s to %s.'%(ChargeObj.Description,MinCharge,MaxCharge))
					else:
						Charge = ChargeList[0]

					if ChargeMode == '1' or ChargeMode == None:
						if RateFixed == 'R':
							if Data >= Decimal(100):
								raise ValidationError('%s - Charge value must be less than 100%% '% (ChargeObj.Description))

class FRM_LOAN_CONTRACT(exform):
	LoanStatus 		= 	SelectField(requiredlabel("Loan Status","*"),
							choices=[('SMT', 'Submitted'), ('APV', 'Approved'), ('DSB', 'Disbursed'), ('TPU', 'Topped-up'), ('DDT', 'Deducted'), ('TMN', 'Paid-off'), ('WOF', 'Written-off'), ('MRT', 'Matured')],
							coerce=str,
							default='SMT',
							validators=[validators.Required()]
						)
	LoanApplicationID 	= 	RemoteTextField(getLanguage("Loan Application"))
	ContractCustomerID 	= 	RemoteTextField(requiredlabel(getLanguage("Customer"), "*"), [validators.Required()])
	Account 			= 	QuerySelectField(requiredlabel(getLanguage("Drawdown Account"), "*"),
								query_factory=loadAccount,
								get_label=u'ID',
								allow_blank=True,
								blank_text=u'--%s--' %getLanguage("None"),
								validators=[validators.Required()]
							)

	Currency 		= 	TextField(requiredlabel(getLanguage("Currency"), "*"))
	
	if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":

		Vendor 			= QuerySelectField(requiredlabel("Vendor", "*"),
							query_factory=loadVendor,
							get_label=u'VendorName',
							allow_blank=True,
							blank_text='--Choose Vendor--',
							validators=[validators.Required()]
						)
		AssetPrice		= TextField(requiredlabel('Asset Price', '*'),
							validators=[validators.Required()],
							default=0
						)
		DownPayment 	= TextField(requiredlabel('Down Payment', '*'),
							validators=[validators.Required()],
							default=0
						)
		VATInput 		= TextField(requiredlabel('VAT Input', '*'),
							validators=[validators.Required()],
							default=0,
							description='5-VAT'
						)
		VATOutputOnLoan	= TextField(requiredlabel('VAT Output On Loan', '*'),
							validators=[validators.Required()],
							default=0,
							description='5-VAT')
		VATOutputOnDownPayment = TextField('VAT Output On Down Payment',
							default=0,
							description='5-VAT') 
		TaxExpense		= TextField('Tax Expense',
							default=0,
							description='5-VAT')
		AssetDescription= TextAreaField('Asset Description',
							description='6-Asset')
		VATCollectionOption 		= 	SelectField("VAT Collection",
											choices=[("Y","Yes"),("N","No")],
											coerce=str,
											default='Y',
											description='5-VAT'
										)

	ApprovedAmount	= 	DecimalField("Approved Amount", default=0)
	Disbursed 		= 	DecimalField(requiredlabel(getLanguage("Disbursed"), "*"), [validators.Required()])
	Amount 			= 	TextField(requiredlabel(getLanguage("Loan Balance"), "*"), [validators.Required()], default=0)
	OutstandingAmount 	=	TextField(requiredlabel(getLanguage("Loan Outstanding"), "*"), [validators.Required()], default=0)
	ValueDate 		= 	DateField(requiredlabel(getLanguage("Value Date"), "*"), [validators.Required()], default=loanBankDate)
	FirstCollectionDate =	DateField("First Collection Date", [custom_FirstCollectionDate])
	Cycle 			= 	IntegerField(requiredlabel(getLanguage("Cycle"), "*"), [validators.Required()], default=1)
	MaturityDate 	= 	DateField(getLanguage("Maturity Date"), [validators.Optional()])

	LoanProduct 	= 	QuerySelectField(requiredlabel(getLanguage("Loan Product"), "*"),
							query_factory=loadLoanProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()]
						)

	Category 		= 	TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	InterestRate 	= 	TextField(requiredlabel(getLanguage("Interest Rate"), "*"), [validators.Required()])
	IRR 			= 	TextField("IRR")
	FreqType 		= 	SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
							choices=[('1', '1. %s' %getLanguage('Monthly')), 
									 ('2', '2. %s' %getLanguage("Weekly")),
									 ('3', '3. %s' % "Daily")],
							coerce=str,
							validators=[validators.Required()]
						)

	Frequency 		= 	IntegerField(requiredlabel(getLanguage("Frequency"), "*"), [validators.Required('This field required greater than 0')], default=1)
	Term 			= 	TextField(requiredlabel("%s (%s)" %(getLanguage("Term"), getLanguage("Month")), "*"), [validators.Required()])
	Installment 	= 	IntegerField(requiredlabel(getLanguage("Installment"), "*"), [validators.Required()])

	DeliqMode 		= 	SelectField(requiredlabel(getLanguage('Deliquency Mode'), '*'),
							choices=[('3', '3. %s' %getLanguage("Semi-Automatic")),
									 ('2', '2. %s' %getLanguage("Automatic")),
									 ('1', '1. %s' %getLanguage("Manual"))],
							coerce=str,
							validators=[validators.Required()]
						)

	LoanPurpose 	= 	QuerySelectField(getLanguage("Loan Purpose"),
							query_factory=laodLoanPurpose,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
						)

	ContractVB 		= 	RemoteTextField(getLanguage("Village Bank"))
	Group 			= 	QuerySelectField('Group',
							query_factory=loadGroupID,
							get_label=lambda a: a.ID + " - " + a.GroupName,
							allow_blank=True,
							blank_text=u'--None--')

	SourceOfFund 	= 	QuerySelectField(getLanguage("Source of Fund"),
							query_factory=loadSourceOfFund,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
						)

	LoanType 		= 	SelectField(requiredlabel(getLanguage('Loan Type'), '*'),
							choices=[('N', '%s' %getLanguage("Normal")),
									 ('R', '%s' %getLanguage("Restructured"))],
							coerce=str,
							default='N'
						)
	
	AssetClass 		= 	TextField(requiredlabel(getLanguage("Asset Class"), "*"), [validators.Required()], default=loadAssetClass)

	MoreThanOneYear = 	TextField(requiredlabel(getLanguage("More Than One Year"), "*"), [validators.Required()], default='N')

	TotalInterest 	= 	DecimalField(getLanguage("Total Interest"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	IntIncEarned 	= 	DecimalField(getLanguage("Interest Income Earned"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	
	if mktsetting.getAppSetting("LOCAL_REGISTER_PATH") == "local.Maxima":
	
		FCYIntIncEarned = 	DecimalField("FCY/LCY Interest Income Earned", [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	
	AccrIntPerDay 	= 	DecimalField(getLanguage("Accrued Interest Per Day"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrInterest 	= 	DecimalField(getLanguage("Accrued Interest Receivable"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrCurrentInt 	= 	DecimalField(getLanguage("Accr Current Installment"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrIntCurrMonth = 	DecimalField(getLanguage("Accr Int Current Month"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrIntPreMonth = 	DecimalField(getLanguage("Accr Int Previous Month"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	Suspend 		= 	TextField(getLanguage("Suspend"), default='N', description="1-%s" %getLanguage("Interest"))
	DisbursedStat 	= 	TextField(requiredlabel(getLanguage("Disbursed Status"), "*"), [validators.Required()], default='N')   
	ContractOfficerID = RemoteTextField(requiredlabel("Loan Officer", "*"),
								dicRemote={'url':'/Morakot/SearchOfficer'},
								validators=[validators.Required()]
						)
	ChargeKey 	= 	QuerySelectField(getLanguage("Charge Key"),
						query_factory=loadCharge,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--None--',
						description=u'2-%s' %getLanguage("Loan Charge")
					)

	RateFixed 			= 	TextField(getLanguage("Rate") + "/" + getLanguage("Fixed"), description=u'2-%s' %getLanguage("Loan Charge"))
	Charge 				= 	TextField(getLanguage("Charge"),
								validators=[custom_Charge], 
								default=0,
								description=u'2-%s' %getLanguage("Loan Charge"))

	ChargePerInstallment= 	TextField("Charge Per Installment", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargePerDay		=   TextField("Charge Per Day", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargeLastBooked	=   TextField("Charge Last Booked", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	
	ChargeEarned 		= 	TextField("Charge Earned", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargeUnearned 		= 	TextField("Charge Unearn", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	# AccrCurrent 		= 	TextField("Accr Current Installment", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	Guarantor 			= 	RemoteTextField(getLanguage("Guarantor"),description="3-%s" %getLanguage("Guarantor"))
	GTRelationIndicator = 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description="3-%s" %getLanguage("Guarantor")
						)
	Type 				= SelectField("Type",
								choices=[('G', 'Guarantor'), ('R', 'Referrer'), ('S', 'Successor')],
								coerce=str,
								default='G',
								description="3-%s" %getLanguage("Guarantor")
							)

	Penalty 			= TextField(getLanguage("Penalty"), default=loadLoanPenalty)
	Collateral 			= RemoteTextField(getLanguage("Collateral"),
								dicRemote={'url':'/Morakot/SearchCollateral'},
								description="4-%s" %getLanguage("Collateral")
						)
	CoBorrowerID 	  =   RemoteTextField(getLanguage("Co-Borrower"),description="5-%s" %getLanguage("Co-Borrower"))
	RelationIndicator = 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description="5-%s" %"Co-Borrower"
						)
	Sector 			= 	QuerySelectField(isRequiredNBCTab("Sector"),
							query_factory=loadSector,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="6-%s" %"NBC",
							validators=[RequiredValidator()]
						)
	Industry 		=	QuerySelectField(isRequiredNBCTab("Industry"),
							query_factory=loadIndustry, 
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text='--None--',
							description="6-%s" %"NBC",
							validators=[RequiredValidator()]
					)
	Ownership 		= 	QuerySelectField(isRequiredNBCTab("Ownership"),
							query_factory=loadOwnership,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="6-%s" %"NBC",
							validators=[RequiredValidator()]
					)


	# Iframe				=	MKTIframe("View Repayment",dicIframe={'width':'100%','height':'1000','frameborder':'0'}, description='6-Reapyment Schedule')

	def validate_Frequency(form, field):
		try:
			"""
			Frequency must be bigger than zero and smaller or equal ApprovedAmount
			"""
			Frequency 		= Decimal(form.Frequency.data)

			if Frequency <= 0:
				raise ValidationError("Frequency must be greater than zero.")
		except:
			raise

	def validate_Currency(form, field):
		LoanAppID 	= request.form['LoanApplicationID'] if request.method == "POST" else ""
		Currency 	= request.form['Currency'] if request.method == "POST" else ""

		LoanAppObj 	= MKT_LOAN_APPLICATION.query.get(LoanAppID)
		if LoanAppObj:
			LoanAppCurrency = LoanAppObj.Currency

			if Currency != LoanAppCurrency:
				raise ValidationError("Please choose drawdown account for currency %s"%LoanAppCurrency)


	def validate_Guarantor(form, field):
		try:

			if request.form['Guarantor']:
				
				Guarantor 		= 	[]
				controls_list 	= 	request.form
				ListGuarantor	= 	[item for item in controls_list if "Guarantor_" in item or item=='Guarantor']
				print "list Guarantor: ",ListGuarantor
				ListGuarantor.append("ContractCustomerID")
				ListGuarantor.sort()
				TotalGuarantor =	len(ListGuarantor)
				print "2. ListGuarantor: ",ListGuarantor
				for nub in range(0,TotalGuarantor):
					Guarantor.append(request.form[ListGuarantor[nub]])
				print "3. Guarantor: ",Guarantor
				DuplicateAcc   = [x for x in Guarantor if Guarantor.count(x) > 1]
				print "DuplicateAcc: ",DuplicateAcc
				if DuplicateAcc:
					raise ValidationError("Must not be the same as customer#%s"%DuplicateAcc[0])
				
		except Exception, e:
			raise ValidationError("%s" %e)
		
	def validate_ChargeKey(form, field):
		if request.form['ChargeKey']:
				
			ChargeKey 		= 	[]
			controls_list 	= 	request.form
			ListChargeKey	= 	[item for item in controls_list if "ChargeKey" in item]
			ListChargeKey.sort()
			TotalChargeKey =	len(ListChargeKey)

			for nub in range(0,TotalChargeKey):
				ChargeKey.append(request.form[ListChargeKey[nub]])

			DuplicateItem   = [x for x in ChargeKey if ChargeKey.count(x) > 1]
			if DuplicateItem:
				ChangeKeyObj = MKT_CHARGE.query.get(DuplicateItem[0])
				ChangeKeyDesc = ChangeKeyObj.Description if ChangeKeyObj else ''
				raise ValidationError("%s are duplicated."%ChangeKeyDesc)

	def validate_RateFixed(form, field):
			
		ChargeKey 	=	request.form['ChargeKey']
		RateFixed 	=	request.form['RateFixed']
		
		if ChargeKey and ChargeKey != '__None':
			if not RateFixed:
				raise ValidationError('This field is required.')

	def validate_ContractCustomerID(form, field):
		try:

			CustomerID = form.ContractCustomerID.data
			mktcustomer.checkAge(CustomerID)

			CusObj 	=	MKT_CUSTOMER.query.get(CustomerID)

			if CusObj:

				Block 	=	CusObj.Block
				if Block == 'Y':
					BlockReason 	=	CusObj.BlockReason
					raise ValidationError("The customer %s was blocked, reason: %s." %(CustomerID, BlockReason))

		except:
			raise

	def validate_Disbursed(form, field):
		try:
			"""
			Disbursed Amount must be bigger than zero and smaller or equal ApprovedAmount			
			"""
			ApprovedAmount 		= Decimal(form.ApprovedAmount.data)
			Disbursed 			= Decimal(form.Disbursed.data)

			if Disbursed < 0:
				raise ValidationError("Disbursed must be greater than zero.")
			else:
				if Disbursed > ApprovedAmount:
					raise ValidationError("Disbursed must be less than or equal Approved Amount.")

		except:
			raise

	def validate_Amount(form, field):

		Amount = field.data

		if mkttool.isFloat(Amount):
			if Amount == 0:
				raise ValidationError("Loan Balance must be bigger than zero")
			if mktloanapp.isMigrationMode():

				Amount = Decimal(field.data)
				Disbursed = Decimal(form.Disbursed.data)
				Currency = form.Currency.data

				if Amount > Disbursed:
					raise ValidationError("Loan Balance %s must be smaller than Disbursed %s" %
						(mktloanapp.getMKTMoney(Amount, Currency), mktloanapp.getMKTMoney(Disbursed, Currency)))
		else:
			raise ValidationError("Loan Balance must be bigger than zero")


	def validate_OutstandingAmount(form, field):

		Amount = field.data

		if mkttool.isFloat(Amount):
			if float(Amount) == 0:
				raise ValidationError("Outstanding Amount must be bigger than zero")
		else:
			raise ValidationError("Outstanding Amount must be bigger than zero")


	def validate_ValueDate(form, field):
		try:

			Holiday 	= mktHoliday.getHoliday()
			ValueDate 	= request.form['ValueDate']

			CheckFormatDate = mktdate.isDateISO(ValueDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
				
			ValueDate 	= datetime.strptime(str(ValueDate),'%Y-%m-%d').date()
			check 		= mktDay.isNonWorkingDay(ValueDate, Holiday)
			
			if check:
				raise ValidationError("Value date must be different holiday.")

			systemDate 	= 	mktdate.getBankDate()
			StrSysteDate=	str(systemDate).split("-")
			StrValueDate=	str(ValueDate).split("-")

			SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
			ValueMonth 	=	"%s%s" %(StrValueDate[0], StrValueDate[1])

			if int(ValueMonth) < int(SysMonth):
				raise ValidationError("Value date must be different previous month.")

		except:
			raise

	def validate_Term(form, field):
		try:

			Term 		= float(form.Term.data)
			Currency 	= form.Currency.data
			LoanProduct = request.form['LoanProduct']
			# Call function to check Maximum and Minimum Term
			mktloanapp.checkMaxMinTerm(Term, Currency, LoanProduct)

		except:
			raise

	def validate_Installment(form, field):

		Term 		= form.Term.data
		Installment = form.Installment.data

		if Installment:
			try:
				int(Installment)
			except:
				raise ValidationError("This field must be in numeric format.")

		Frequency 	= request.form['Frequency']
		FreqType 	= request.form['FreqType']
		AppDate 	= request.form['ValueDate']

		Check 		= mktloanapp.validateTermAndInstallment(Term, Installment, Frequency, FreqType, AppDate)
		
		if Check not in "OK":
			raise ValidationError(Check)

	def validate_LoanProduct(form, field):
		try:

			Currency 	= form.Currency.data
			LoanProduct = request.form['LoanProduct']
			LP 			= MKT_LOAN_PRODUCT.query.get(LoanProduct)
			
			if LP:

				RuleID 	= str(LP.Rule) + str(Currency)
				Rule 	= MKT_LOAN_RULE_DE.query.get(RuleID)
				
				if not Rule:
					raise ValidationError("Loan product rule detail not define.")
		
		except:
			raise

	def validate_InterestRate(form, field):
		LoanPro 	= request.form['LoanProduct']
		CurrencyKey = form.Currency.data
		InputRate 	= form.InterestRate.data

		try:

			InputRate = float(InputRate)

		except:

			raise ValidationError("This field must be in numeric format.")

		Msg = mktaccount.checkInterestRate("LC", LoanPro, InputRate, CurrencyKey)

		if Msg:
			raise ValidationError(Msg)

	def validate_CoBorrowerID(form, field):
		try:

			if request.form['CoBorrowerID']:
				
				CoBorrower 		= 	[]
				controls_list 	= 	request.form
				ListCoBorrower	= 	[item for item in controls_list if "CoBorrowerID" in item]
				ListCoBorrower.append("ContractCustomerID")
				ListCoBorrower.sort()
				TotalCoBorrower =	len(ListCoBorrower)

				for nub in range(0,TotalCoBorrower):
					CoBorrower.append(request.form[ListCoBorrower[nub]])

				DuplicateAcc   = [x for x in CoBorrower if CoBorrower.count(x) > 1]
				if DuplicateAcc:
					raise ValidationError("Must not be the same as customer#%s"%DuplicateAcc[0])

		except Exception, e:
			raise ValidationError("%s" %e)

	def validate_ApprovedAmount(form, field):
		try:
			Amount 		= Decimal(form.Amount.data)
			ApprovedAmount 	= Decimal(form.ApprovedAmount.data)
			Currency 	= form.Currency.data
			LoanProduct = request.form.get('LoanProduct') if 'LoanProduct' in request.form else ""
			Account = request.form.get('Account') if 'Account' in request.form else ""
			# Call function to check Maximum and Minimum Disbursed Amount
			mktaccounting.checkMaxMinBalance(Account, Currency, Amount, 'Cr')
			mktloanapp.checkMaxMinAmount(ApprovedAmount, 'Approved Amount', Currency, LoanProduct)

		except:
			raise

	@staticmethod
	def setVisible():
		control_list = ['Penalty','LoanStatus']

		if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
			control_list += ['TaxExpense']

		return control_list

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#ContractCustomerID').select2('data', {'id':data.LNCustomerID,'text':data.CustomerName}),$('#Amount').val(data.Amount),$('#Disbursed').val(data.Amount),$('#OutstandingAmount').val(data.Amount),$('#Installment').val(data.Installment),$('#Term').val(data.Term),$('#Frequency').val(data.Frequency)"
		fielddisplay 	+= ",$('#LoanProduct').select2('data', {'id':data.LoanProduct,'text':data.ProDesc}),$('#Category').val(data.Category),$('#InterestRate').val(data.InterestRate),$('#ContractVB').select2('data', {'id':data.VBID,'text':data.VB_Desc})"
		fielddisplay 	+= ",$('#FreqType').select2('data', {'id':data.FreqType,'text':data.FreqDesc})"
		fielddisplay 	+= ",$('#LoanPurpose').select2('data', {'id':data.LoanPurpose,'text':data.PurDesc})"
		fielddisplay 	+= ",$('#SourceOfFund').select2('data', {'id':data.SourceOfFund,'text':data.SouDesc})"
		fielddisplay 	+= ",$('#ContractOfficerID').select2('data', {'id':data.ContractOfficerID,'text':data.OfficerName})"
		fielddisplay 	+= ",$('#Currency').val(data.Currency),$('#Group').val(data.Group),$('#ApprovedAmount').val(data.Amount)"
		fielddisplay 	+= ",$('a[href=#3-Guarantor]').attr('style', data.OnOff),$('div#3-Guarantor').attr('style', data.OnOff)"
		fielddisplay 	+= ",$('a[href=#4-Collateral]').attr('style', data.OnOff1),$('div#4-Collateral').attr('style', data.OnOff1)"
		fielddisplay 	+= ",$('#MoreThanOneYear').val(data.MoreThanOneYear)"
		fielddisplay 	+= ";$('#Account').append('<option value='+data.Account+'>'+data.AccountName+'</option>')"
		fielddisplay 	+= ";$('#Account').select2('data', {'id':data.Account,'text':data.AccountName})"
		
		if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
			fielddisplay 	+= ",$('#Vendor').select2('data', {'id':data.Vendor,'text':data.VendorName})"
			fielddisplay 	+= ",$('#AssetPrice').val(data.AssetPrice)"
			fielddisplay 	+= ",$('#DownPayment').val(data.DownPayment)"
			fielddisplay 	+= ",$('#VATInput').val(data.VATInput)"
			fielddisplay 	+= ",$('#VATOutputOnLoan').val(data.VATOutputOnLoan)"
			fielddisplay 	+= ",$('#VATOutputOnDownPayment').val(data.VATOutputOnDownPayment)"
			fielddisplay 	+= ",$('#TaxExpense').val(data.TaxExpense)"
			fielddisplay 	+= ",$('#AssetDescription').val(data.AssetDescription)"

		# fielddisplay 	+= ",$('#Account').select2('data', {'id':data.Account,'text':data.AccountName})"
		varname 		= "LoanAppID:$('#LoanApplicationID').val()"
		fun 			= ["LoanApplicationID", varname, fielddisplay, "/Morakot/LoanApplicationInfo", "change" ]
		# hotfield.append(fun)
		# varname 		= "CustomerID:$('#ContractCustomerID').val()"
		# fun 			= ["LoanApplicationID", varname, fielddisplay, "/Morakot/LoanApplicationAccountInfo", "change", "ContractCustomerID" ]
		hotfield.append(fun)

		if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
			fielddisplay 	=("$('#AssetPrice').val(data.AssetPrice);")
			fielddisplay 	+=("$('#DownPayment').val(data.DownPayment);")
			fielddisplay 	+=("$('#ApprovedAmount').val(data.ApprovedAmount);")
			fielddisplay 	+=("$('#Disbursed').val(data.Disbursed);")
			fielddisplay 	+=("$('#Amount').val(data.Amount);")
			fielddisplay 	+=("$('#OutstandingAmount').val(data.OutstandingAmount);")
			fielddisplay 	+=("$('#VATInput').val(data.VATInput);")
			fielddisplay 	+=("$('#VATOutputOnLoan').val(data.VATOutputOnLoan);")
			fielddisplay 	+=("$('#VATOutputOnDownPayment').val(data.VATOutputOnDownPayment);")
			fielddisplay 	+=("$('#TaxExpense').val(data.TaxExpense);")

			varname 		= ("AssetPrice:$('#AssetPrice').val(),")
			varname 		+= ("Vendor:$('#Vendor').val(),")
			varname 		+= ("DownPayment:$('#DownPayment').val(),")
			varname 		+= ("Currency:$('#Currency').val(),")
			varname 		+= ("LoanProduct:$('#LoanProduct').val()")

			fun 			= ["AssetPrice", varname, fielddisplay, "/Morakot/LoanAssetPrice", "blur"]
			hotfield.append(fun)

			fun 			= ["DownPayment", varname, fielddisplay, "/Morakot/DownPayment", "blur"]
			hotfield.append(fun)

			fun 			= ["Vendor", varname, fielddisplay, "/Morakot/vendor", "change"]
			hotfield.append(fun)

			fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/vendor", "change"]
			hotfield.append(fun)

			# fielddisplay	= 	("$('#Amount').val(data.Amount);")
			fielddisplay	= 	("$('#VATInput').val(data.VATInput);")
			fielddisplay	+=	("$('#VATOutputOnLoan').val(data.VATOutputOnLoan);")
			fielddisplay	+=	("$('#TaxExpense').val(data.TaxExpense);")

			varname 		=	("AppliedAmount:$('#ApprovedAmount').val(),")
			varname 		+=	("VATInput:$('#VATInput').val(),")
			varname 		+=	("Vendor:$('#Vendor').val(),")
			varname 		+= 	("Currency:$('#Currency').val()")


			fun 			=	["ApprovedAmount", varname, fielddisplay, "/Morakot/AppliedAmountTax", "blur"]
			hotfield.append(fun)

		fielddisplay 	= "$('#Currency').val(data.Currency), $('#InterestRate').val(data.InterestRate)"
		varname 		= "AccountID:$('#Account').val(), LoanProduct:$('#LoanProduct').val(), LoanAppID:$('#LoanApplicationID').val()"
		fun 			= ["Account", varname, fielddisplay, "/Morakot/ContractCurrencyInfo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Category').val(data.Category);$('#InterestRate').val(data.InterestRate)"
		varname 		= "LoanProduct:$('#LoanProduct').val(), Currency:$('#Currency').val(), LoanAppID:$('#LoanApplicationID').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/LoanProductInfo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#RateFixed').val(data.RateFixed); $('#Charge').val(data.Charge)"
		fielddisplay 	+=";$('#ChargePerInstallment').val(data.ChargePerInstallment)"
		fielddisplay 	+=";$('#ChargePerDay').val(data.ChargePerDay)"
		fielddisplay 	+=";$('#ChargeEarned').val(data.ChargeEarned)"
		fielddisplay 	+=";$('#ChargeUnearned').val(data.ChargeUnearned)"
		fielddisplay 	+=";$('#ChargeLastBooked').val(data.ChargeLastBooked)"
		varname 		= "ChargeKeyID:$('#ChargeKey').val(), Currency:$('#Currency').val()"
		fun 			= ["ChargeKey", varname, fielddisplay, "/Morakot/ChargeKeyInfo", "change"]
		hotfield.append(fun)

		fielddisplay_string = "$('#Amount').val(data.Amount);"

		# if not mktloanapp.isMigrationMode():
		fielddisplay_string += "$('#OutstandingAmount').val(data.Amount)"

		fielddisplay 	= (fielddisplay_string)
		varname 		= ("Disbursed:$('#Disbursed').val(), Currency:$('#Currency').val()")
		fun 			= ["Disbursed", varname, fielddisplay, "/Morakot/SetOutStandingAmount", "blur"]
		hotfield.append(fun)

		fielddisplay_string = "$('#Disbursed').val(data.Amount);$('#Amount').val(data.Amount);"

		# if not mktloanapp.isMigrationMode():
		fielddisplay_string += "$('#OutstandingAmount').val(data.Amount)"

		fielddisplay 	= (fielddisplay_string)
		varname 		= ("Disbursed:$('#ApprovedAmount').val(), Currency:$('#Currency').val()")
		fun 			= ["ApprovedAmount", varname, fielddisplay, "/Morakot/SetOutStandingAmount", "blur"]
		hotfield.append(fun)

		fielddisplay 	= ("$('#OutstandingAmount').val(data.Amount)")
		varname 		= ("Disbursed:$('#Amount').val(), Currency:$('#Currency').val()")
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/SetOutStandingAmount", "blur"]
		hotfield.append(fun)

		fielddisplay 	= ("$('#MoreThanOneYear').val(data.MoreThanOneYear)")
		varname 		= ("Term:$('#Term').val()")
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CheckMoreThanOneYear", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),ValueDate:$('#ValueDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),ValueDate:$('#ValueDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Frequency", varname, fielddisplay, "/Morakot/CalculateInstallment", "blur"]
		hotfield.append(fun)

		# $('FreqType').val()=='3' ? $('#Installment').prop('disabled',false): $('#Installment').prop('disabled',true)
		fielddisplay 	= "$('#Installment').val(data.Installment);"
		fielddisplay 	+="$('#FreqType').val()==='3' ? $('#Installment').prop('readonly',false) : $('#Installment').prop('readonly',true)"
		varname 		= "Term:$('#Term').val(),ValueDate:$('#ValueDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["FreqType", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		# fielddisplay 	= "$('#CoBorrowerName').val(data.CustomerName);$('#CoBorrowerID').val(data.Customer)"
		# varname 		= "CoBorrowerID:$('#CoBorrowerID').val()"
		# fun 			= ["CoBorrowerID", varname, fielddisplay, "/Morakot/CustomerFullNameByID", "blur"]
		# hotfield.append(fun)	

		fielddisplay 	= "$('#Sector').select2('data',{'id':data.SectorID,'text':data.SectorDesc});$('#Industry').select2('data',{'id':data.IndustryID,'text':data.IndustryDesc})"
		varname 		= "Customer:$('#ContractCustomerID').val()"
		fun 			= ["ContractCustomerID", varname, fielddisplay, "/Morakot/SectorByCustomer", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay 	= "Account"
		varname 		= "CustomerID:$('#ContractCustomerID').val()"
		fun 			= ["ContractCustomerID", varname, fielddisplay, "/Morakot/ContractCustomerInfo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "Collateral"
		varname 		= "CustomerID:$('#ContractCustomerID').val()"
		fun 			= ["ContractCustomerID", varname, fielddisplay, "/Morakot/CollateralByClient", "change"]
		hotfield.append(fun)

		fielddisplay 	="Group"
		varname 		="VBID:$('#ContractVB').val()" 
		fun 			=["ContractVB", varname ,fielddisplay, "/Morakot/GroupID", "click"]
		hotfield.append(fun)

		fielddisplay 	="Industry"
		varname 		="SectorID:$('#Sector').val()" 
		fun 			=["Sector", varname ,fielddisplay, "/Morakot/loadIndustryBySector", "click"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setWidth():
		control_list= [('Currency', len1),
					   ('ValueDate', len3),
					   ('FirstCollectionDate',len3),
					   ('Term', len1),
					   ('Cycle', len1),
					   ('Installment', len1),
					   ('MaturityDate', len3),
					   ('FreqType', len2),
					   ('Frequency', len1),
					   ('DeliqMode', len2),
					   ('NextAccrDate', len3),
					   ('DisbursedStat', len1),
					   ('MoreThanOneYear', len1),
					   ('IRR',len1),
					   ('AssetClass', len1)]

		return control_list

	@staticmethod
	def setDisable():
		Fields = [('Currency'), ('Category'),
				  ('AccrInterest'), ('NextAccrDate'), ('Branch'), ('RateFixed'),
				  ('AccrIntPreMonth'), ('AccrCurrentInt'), ('AccrIntCurrMonth'),
				  ('DisbursedStat'), ('MoreThanOneYear'), ('AssetClass'), ('IntIncEarned'), ('AccrIntPerDay'),
				  ('Suspend'), ('Installment'), ('OutstandingAmount'),
				  ('ChargePerInstallment'), ('ChargePerDay'), ('ChargeLastBooked'), ('ChargeEarned'),
				  ('ChargeUnearned'), ('ChargeDescription'), ('LoanStatus')
				]
		# This is for enable MigrationMode
		if not mktloanapp.isMigrationMode():
			Fields.extend([('Amount'), ('TotalInterest'), ('MaturityDate')])

		return Fields

	@staticmethod
	def moneyField():

		moneyFields = [["Amount", "Currency"], ["ApprovedAmount", "Currency"], ["Disbursed", "Currency"], ["TotalInterest", "Currency"], ["AccrInterest", "Currency"], ["AccrIntPreMonth", "Currency"],
				["AccrCurrentInt", "Currency"], ["AccrIntCurrMonth", "Currency"], ["OutstandingAmount", "Currency"],
				["ChargePerInstallment", "Currency"], ["ChargeLastBooked", "Currency"], ["ChargeEarned", "Currency"], ["ChargeUnearned", "Currency"]]

		if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
			moneyFields += [["AssetPrice","Currency"],["DownPayment","Currency"],["VATInput","Currency"],["VATOutputOnLoan","Currency"],["VATOutputOnDownPayment","Currency"],
							["TaxExpense","Currency"]]
		return moneyFields
	@staticmethod
	def formatMoney():
		return ["Amount", "OutstandingAmount", "ChargeUnearned"], "Currency"

	@staticmethod
	def isMultiValue():
		controls_list=["2-Loan Charge", "3-Guarantor", "5-Co-Borrower"]
		return controls_list

	@staticmethod
	def listField():
		return ["ID", "ContractCustomerID", "Account", "Currency", "Amount",
				"OutstandingAmount", "ValueDate", "Term", "LoanProduct"]
				
	# @staticmethod
	# def findinHist():
	# 	return True

	@staticmethod
	def beforeAuthorize():
		try:
			ID 			= g.formID
			Disbursed 	= MKT_LOAN_CONTRACT_INAU.query.get(ID)

			#Validation on Authorization Loan Contract if DD does not have enough amount for charge
			if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":

				DDAccount 	= MKT_ACCOUNT.query.get(Disbursed.Account)
				
				if not DDAccount:
					flash(msg_error + "Drawdown Account does not found.")
					return False 

				Charges 	= MKT_LOAN_CHARGE_INAU.query.filter(MKT_LOAN_CHARGE_INAU.ID == ID).all()

				if Charges:

					TotalChargeAmount = 0.00
					
					for Charge in Charges:

						ChargeRateID 	= Charge.ChargeKey + Disbursed.Currency
						ChargeRate 		= MKT_CHARGE_RATE.query.get(ChargeRateID)

						if not ChargeRate:
							flash(msg_error + "Charge Rate does not found.")
							return False

						if ChargeRate.ChargeMode == "1":
							TotalChargeAmount += float(Charge.ChargeUnearned)


					if float(TotalChargeAmount) > float(DDAccount.AvailableBal):
						flash(msg_error + "Drawdown Account does not have enough balance for charge.")
						return False

			# check repayment schedule for this loan '''
			RepSchedule = MKT_REP_SCHEDULE_INAU.query.\
						  filter(MKT_REP_SCHEDULE_INAU.LoanID == ID).\
						  order_by(MKT_REP_SCHEDULE_INAU.No.asc())

			# update NextRunDate equal to ValueDate of LoanContract
			SchedAddonObj = MKT_SCHEDULE_ADDON.query.filter(MKT_SCHEDULE_ADDON.LoanID == ID).first()
			if not SchedAddonObj:
				SchedAddonObj = MKT_SCHEDULE_ADDON_INAU.query.filter(MKT_SCHEDULE_ADDON.LoanID == ID).first()

				# Check Loan Charge has regular fee or not
				# 1. Check loan has charge or not
				# RepaymentScheduleObj = db.session.query(func.sum(MKT_REP_SCHEDULE_INAU.Charge).label('ChargeAmount')).first()
				RepaymentScheduleObj = db.session.query(func.sum(MKT_REP_SCHEDULE_INAU.Charge).label('ChargeAmount')).\
										filter(MKT_REP_SCHEDULE_INAU.LoanID==ID).\
										first()

				if RepaymentScheduleObj.ChargeAmount > 0:
					# 2. Check loan has regular fee charge or not
					HasRegularFee = False
					REGULAR_FEE   = '2'
					# Loop loan charge 
					LoanChargeObj = db.session.query(MKT_LOAN_CHARGE_INAU).filter(MKT_LOAN_CHARGE_INAU.ID==ID).all()
					ChargRateObj  = db.session.query(MKT_CHARGE_RATE)
					
					if LoanChargeObj:
						Currency = Disbursed.Currency
						for item in LoanChargeObj:
							ChargeKey = item.ChargeKey + Currency # ex. 101USD
							ChargeMode = ChargRateObj.filter(MKT_CHARGE_RATE.ID==ChargeKey).\
										filter(MKT_CHARGE_RATE.ChargeMode==REGULAR_FEE).\
										first()
							
							if ChargeMode:
								HasRegularFee = True
								break

						if HasRegularFee == False:
							flash(msg_error + "Loan Contract does not select fee charge with mode regular fee.")
							return False

			if not Disbursed:
					flash(msg_error + "No record to authorize.")
					return False
			else:
				Audit 		= 	mktaudit.getAuditrail()
				Inputter	= 	Disbursed.Inputter
				Authorizer 	= 	Audit['Authorizer']
				Authorizeon = 	Audit['Authorizeon']
				Status 		= 	Disbursed.Status
				if Inputter.upper() == Authorizer.upper():
					flash(msg_error + " user who authorize must differ from input.")
					return False
				else:
					if Status == "RNAU":
						# mktaudit.deleteAUTH(MKT_SCHED_DEFINE_INAU, ID)
						# mktaudit.deleteAUTH(MKT_REP_SCHEDULE_INAU, ID, "LoanID")
						mktloanamendment.moveLoanDataToHist(ID, KeepRecord = True, Reverse=True,KeepLoanApplication=True)
						return True

					if not RepSchedule.all():
						flash(msg_warning + " Repayment schedule not found for loan %s." %ID)
						return False
					else:
						''' Loop RepSchedule to get Maturity Date, Number of Installment, and Total Interest '''
						TotalInterest 		= 0
						NumberOfInstallment = 0
						for item in RepSchedule.all():
							MaturityDate 		= 	item.CollectionDate
							NumberOfInstallment += 	1
							TotalInterest 		+= 	float(item.Interest)

						BankDate 	= 	mktdate.getBankDate()
						# BankDate 	= 	str(BankDate).replace("-", "")

						ValueDate 	=	Disbursed.ValueDate
						
						# ValueDate 	=	str(ValueDate).replace("-", "")
						StrSysteDate=	str(BankDate).split("-")
						StrValueDate=	str(ValueDate).split("-")

						SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
						ValueMonth 	=	"%s%s" %(StrValueDate[0], StrValueDate[1])

						if int(ValueMonth) < int(SysMonth):
							flash(msg_error + "Not allow to authorize, Loan %s is created since %s." %(ID, ValueDate))
							return False
						
						""" Validate when loan is not authorized after first collection date is already passed."""
						FirstCollectionDate = RepSchedule.first().CollectionDate 
						if Disbursed.DisbursedStat == 'N' and FirstCollectionDate < str(BankDate):
							flash(msg_error + "Not allow to authorize, Loan %s first collection date %s is already passed." %(ID, FirstCollectionDate))
							return False


						''' Update Loan Contract Maturity Date, Installment, and Total Interest '''
						Disbursed.MaturityDate 	= MaturityDate
						Disbursed.TotalInterest = TotalInterest
						Disbursed.Installment 	= NumberOfInstallment

						""" Update NextRundate for Schedule Addon"""
						if SchedAddonObj:
							SchedAddonObj.NextRunDate = ValueDate
							db.session.add(SchedAddonObj)

						''' Authorize Schedule Difine and Repayment Schedule '''
						mktrepayment.setAuthorizeScheduleDefine(ID)
						
						LoanDisburseObj = mktloan.setLCDisbursement(ID, "INAU", 0,
												Authorizer=Authorizer,
												Authorizeon=Authorizeon)

						if not LoanDisburseObj[0]:
							db.session.rollback()
							flash(msg_warning+LoanDisburseObj[1])
							return False

			return True

		except:
			raise
			db.session.rollback()
			raise
			return False

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def beforeDelete():
		LoanID = g.formID
		mktaudit.deleteAUTH(MKT_SCHED_DEFINE_INAU, LoanID)
		mktaudit.deleteAUTH(MKT_REP_SCHEDULE_INAU, LoanID, "LoanID")
		return True

	@staticmethod
	def reverseRec():
		ID = g.formID
		LoanObj = MKT_LOAN_CONTRACT.query.get(ID)
		if LoanObj:
			ValueDate 	= LoanObj.ValueDate
			BankDate 	= str(mktdate.getBankDate())

			ValueDate 		= datetime.strptime(str(ValueDate),'%Y-%m-%d').date()
			BankDate 		= datetime.strptime(str(BankDate),'%Y-%m-%d').date()

			if BankDate < ValueDate :
				Audit 		= mktaudit.getAuditrail()
				Inputter	= Audit['Inputter']
				Createdon 	= Audit['Createdon']
				mktaudit.moveAUTHtoINAU(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT_INAU,ID,Inputter,Createdon, 'RNAU')
				Message = "The record was reversed successfully, record id:%sR in INAU." % ID
				db.session.commit()
				return True,Message

		return True, "%s Record not allow to reverse." %(msg_warning)

	@staticmethod
	def IsAcceptOverride():

		Override 	= False
		Branch 		= mktuser.getCurrentBranch()
		Msg 		= ""
		LoanType 	= request.form['LoanType']
		Customer 	= request.form["ContractCustomerID"]
		CustomerObj = MKT_CUSTOMER.query.get(Customer)
		
		if CustomerObj.Branch != Branch:
			Override 	= True
			Msg 		= "Customer <a href='javascript:void(0)' onClick=CustomClickView('Customer','Customer/?ID=%s')><u>%s</u></a> is from different Branch <b>%s</b>. " %(Customer, Customer, CustomerObj.Branch)
		
		if LoanType.upper() == "R":
			Override 	= True
			Msg 		+= " This is a restructured loan. "

		Msg 		+= "Do you want to procceed?"

		return Override, Msg

	@staticmethod
	def IsAcceptOverrideINAU():
		Override 		= False
		ID 				= g.formID
		Branch 			= mktuser.getCurrentBranch()
		Msg 			= ""
		LoanContractObj = MKT_LOAN_CONTRACT_INAU.query.get(ID)
		Customer 		= LoanContractObj.ContractCustomerID
		CustomerObj 	= MKT_CUSTOMER.query.get(Customer)
		LoanType 		= LoanContractObj.LoanType
		Override 		= False
		Msg 			= ''

		# check repayment schedule for this loan '''
		RepSchedule = MKT_REP_SCHEDULE_INAU.query.\
										filter(MKT_REP_SCHEDULE_INAU.LoanID == ID).\
										order_by(MKT_REP_SCHEDULE_INAU.No.asc()).first()

		# Check loan status reverse RNAU
		if LoanContractObj.Status == 'RNAU':

			return Override, Msg

		if not RepSchedule:
			Validate = True
			Override = True
			Msg = msg_warning+"Loan contract doesn't have repayment schedule. Please save repayment schedule before authroize."
			return Override, Msg, Validate
		else:
			FirstCollectionDate = RepSchedule.CollectionDate
			ValueDate 			= LoanContractObj.ValueDate
			if FirstCollectionDate < ValueDate:
				Validate = True
				Override = True
				Msg = msg_error+"Repayment Schedule first collection date must be bigger than Loan Contract value date. Please generate repayment schedule again."
				return Override, Msg, Validate
		if CustomerObj.Branch != Branch:
			Override 	= True
			Msg 		= "Customer <a href='javascript:void(0)' onClick=CustomClickView('Customer','Customer/?ID=%s')><u>%s</u></a> is from different Branch <b>%s</b>. " %(Customer, Customer, CustomerObj.Branch)
		
		if LoanType.upper() == "R":
			Override 	= True
			Msg 		+= " This is a restructured loan. "
		Msg 		+= "Do you want to procceed?"

		return Override, Msg

	@staticmethod
	def urlParam():
		dicParam= [{"IframeName":"Iframe", "iframeUrl":"/Morakot/RepaymentSchedule/",'Resource' : 'Status'},{"IframeName":"Iframe1", "iframeUrl":"/Morakot/RepaymentSchedule/",'Resource' : 'Status'}]
		return dicParam

	@staticmethod
	def redirectAfterInsert():
		ID 				= 	request.form['ID']
		ValueDate 		= 	request.form['ValueDate']
		LoanType 		= 	request.form['LoanType']
		MoreThanOneYear =	request.form['MoreThanOneYear']
		Installment 	=	request.form['Installment']
		Disbursed 		=	request.form['Disbursed']
		Currency 		=	request.form['Currency']
		LoanProduct		= 	request.form['LoanProduct']
		AssClass 		=	mktpd.getLoanAssetClass(0, LoanType, MoreThanOneYear,LoanProduct)
		AssClass 		= 	str(AssClass).split("-")[0]
	
		AssetClassObj 	=	MKT_ASSET_CLASS.query.get(AssClass)
		Suspend 		=	'N' if AssetClassObj.IncomeRecog == 'Y' else "Y"

		NumOfAuth 		= 	g.getNAuthorize
		Resource 		= 	"INAU"
		event_code 		=	"0"

		# Take update for back date
		IntPerDay 			=	float(0)
		TotalInt 			=	float(0)
		SystemBankDate 		=	ValueDate
		NextSystemDate 		=	str(mktdate.getBankDate())

		Product 			= 	MKT_LOAN_PRODUCT.query.get(LoanProduct)


		NextRunDate 		=	ValueDate
		IntNextRunDate 		= 	NextRunDate.replace("-", "")
		IntDate 			= 	NextSystemDate.replace("-", "")

		if int(IntNextRunDate) <= int(IntDate):
			NextRunDate 	=	NextSystemDate

		if Product:
			InterestDayBasis=	Product.IntDayBasis
			NumOfDay 	= 	mktreschedule.getNumberOfDay(InterestDayBasis, SystemBankDate, NextSystemDate)

			if int(NumOfDay) > 0:
				RatePerYear 		=	request.form['InterestRate']
				OutstandingAmount 	=	request.form['Amount']
				IntPerDay 			= 	mktreschedule.getInterestPerDay(float(RatePerYear), float(OutstandingAmount), int(InterestDayBasis), SystemBankDate)
				TotalInt 			= 	float(IntPerDay) * float(NumOfDay)

		# Update Loan Contract
		Contract = MKT_LOAN_CONTRACT_INAU.query.get(ID)

		if Contract:
			Contract.NextRunDate 		= 	NextRunDate
			Contract.AssetClass 		=	AssClass
			Contract.Suspend 			=	Suspend
			Contract.AccrIntPerDay 		=	float(IntPerDay)
			db.session.add(Contract)

		# Update Loan Charge
		mktcharge.updateLoanCharge(ID, Installment, Disbursed, Currency, "INAU")
		# Delete REP_SCHEDULE_INAU AND SCHED_DEFINE_INAU
		mktrepayment.DeleteScheduleAfterSave(ID)
		# Commit all record
		db.session.commit()
		#Add notification
		Status 			= request.form['Status']
		event_code 		= mktnotification.getCode(Status,NumOfAuth)
		notification 	= mktnotification.getSignal(ID,MKT_LOAN_CONTRACT,Status,event_code,'LoanContract') #ID,Model,Code
		mktnotification.insertNotify(notification)

		if int(event_code) == 300:

			Manual 	= 	MKT_SCHED_MANUAL.query.\
						filter(MKT_SCHED_MANUAL.LoanID == ID).\
						all()

			if Manual:

				return ["/Morakot/ScheduleManual/"+ request.form['ID'] +"?Amendment=No&Resource=" + Resource + "&Edit=Yes" , 'Custom']
		
		return ["/Morakot/ScheduleDefine/?Operation=New&ContractID=" + request.form['ID'] + "&Resource=" + Resource , 'Custom']

class FRM_LOAN_CENTRE(exform):
	pass
