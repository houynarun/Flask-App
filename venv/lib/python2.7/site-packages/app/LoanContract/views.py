# -*- coding: utf-8 -*-
import sys
from app.mktcore.wtfimports import *
from flask 							import flash, session, redirect, url_for
from app.mktcore.imports 			import *
from .forms 						import *
from .forms_my 						import *
from app.LoanApplication.models  	import MKT_GUARANTOR, MKT_GUARANTOR_HIST, MKT_LOAN_COLLATERAL, MKT_LOAN_COLLATERAL_HIST
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from app.PD.models 					import MKT_PAST_DUE, MKT_PD_DATE, MKT_PD_DATE_HIST, MKT_PENALTY
from app.Journal.models 			import MKT_JOURNAL
from app.AccEntry.models 			import MKT_ACC_ENTRY
from app.LoanAmendment.models 		import MKT_LOAN_AMENDMENT
from app.Collateral.models			import *
from app.CollateralType.models		import *
from sqlalchemy 					import *
from app.mktcore.session 			import *
from decimal 						import *
from app.mktcore.customform 		import *
from sqlalchemy import func

import app.tools.mktmoney 			as mktmoney
import app.Customer.centre 			as customer
import app.tools.mktdate 			as mktdate
import app.tools.mktsetting 		as mktsetting
import app.tools.mktmessage 		as mktmessage
import app.tools.mktparam 			as mktparam
import app.tools.mktloanamendment	as mktloanamendment
import app.tools.mktpdcollection	as mktpdcollection
import app.tools.mktcharge 			as mktcharge
import app.tools.mktaddress 		as mktaddress

LocationSetting 	= mktsetting.getAppSetting('LANGUAGE')

if LocationSetting == 'MYANMAR':
	registerCRUD(admin, '/LoanContract', 'LoanContract', FRM_LOAN_CONTRACT_MY, [MKT_LOAN_CONTRACT, MKT_LOAN_CHARGE, MKT_GUARANTOR, MKT_LOAN_COLLATERAL, MKT_LOAN_CO_BORROWER])
else:
	registerCRUD(admin, '/LoanContract', 'LoanContract', FRM_LOAN_CONTRACT, [MKT_LOAN_CONTRACT, MKT_LOAN_CHARGE, MKT_GUARANTOR, MKT_LOAN_COLLATERAL, MKT_LOAN_CO_BORROWER])


class CLS_LoanCentre(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation

	def globalProcess(self):
		try:

			reload(sys)
			sys.setdefaultencoding('utf-8')

			ID 					= request.args.get('ID').strip() if 'ID' in request.args else ""
			Loan 				= MKT_LOAN_CONTRACT.query.get(ID)
			LoanAmendmentObj 	= MKT_LOAN_AMENDMENT.query.filter_by(LoanID = ID).order_by(MKT_LOAN_AMENDMENT.AmendDate)
			EnableChargeSchedule= mktcharge.isConfigChargeRegular()
			SystemDate 			= str(mktdate.getBankDate())

			PD 					= MKT_PAST_DUE.query.get("PD" + str(ID))

			PDDateObj 			= MKT_PD_DATE.query.filter(MKT_PD_DATE.ID == "PD"+str(ID).split("@")[0]) # query only live record

			TotODAmount 		= 0
			TotPrincipalDue 	= 0
			TotInterestDue 		= 0
			TotPenaltyDue 		= 0
			TotChargeDue 		= 0
			PreTermination		= 0
			GRAPenalty 			= 0
			TotalWaivePenalty  	= 0
			TotalWaiveInterest 	= 0
			CollateralDetailObj = None
			GuarantorObj 	= None
			CoBorrowerObj	= None
			CollateralType  = None
			Schedule 		= None
			CollateralDetailObj = []
			CollateralType 		= []
			ListGurantor 		= []
			ListCoBorrower 		= []
			Gurantor 			= {}
			CoBorrower 			= {}
			GurantorCoBorrower 	= {}
			toMoney 			=	mktmoney.toMoney
			self.form 			= FRM_LOAN_CENTRE

			TotalWaivePenalty = 0
			TotalWaiveInterest = 0

			BaseCurrencyObj = mktmoney.getCurrencyObj(mktsetting.getAccSetting().BaseCurrency)
			MostData 		= True
			if Loan:
				self.customType = 'Custom'
				PreTermination	= mktloanamendment.getTerminationPenalty(Loan.ID, Loan.Term, Loan.Installment, Loan.Frequency, Loan.FreqType, Loan.Disbursed, Loan.OutstandingAmount, Loan.LoanProduct)
				PreTermination  = PreTermination[1]
				RepScheduleTable= MKT_REP_SCHEDULE
				Schedule        = MKT_REP_SCHEDULE.query.\
									order_by(MKT_REP_SCHEDULE.No.asc()).\
									filter(MKT_REP_SCHEDULE.LoanID == ID).all()
				
				# Check Collateral, Guarantor and CoBorrower in LIVE
				CollateralDetailObj = db.session.query(MKT_COLLATERAL_DE).\
									join(MKT_COLLATERAL, MKT_COLLATERAL.ID == MKT_COLLATERAL_DE.CollateralID).\
									join(MKT_LOAN_COLLATERAL, MKT_LOAN_COLLATERAL.Collateral == MKT_COLLATERAL.ID).\
									join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID == MKT_LOAN_COLLATERAL.ID).\
									filter(MKT_LOAN_CONTRACT.ID == Loan.ID).all()

				CollateralType  = db.session.query(MKT_COLLATERAL_TYPE)
				Check = False
				try:
					GuarantorObj    = db.session.query(
										MKT_CUSTOMER.ID,
										MKT_CUSTOMER.FirstNameEn,
										MKT_CUSTOMER.LastNameEn,
										MKT_CUSTOMER.Gender,
										MKT_CUSTOMER.Mobile1,
										MKT_CUSTOMER.Mobile2,
										MKT_CUSTOMER.Province,
										MKT_CUSTOMER.District,
										MKT_CUSTOMER.Commune,
										MKT_CUSTOMER.Village,
										MKT_GUARANTOR.GTRelationIndicator).\
										join(MKT_GUARANTOR,MKT_GUARANTOR.Guarantor==MKT_CUSTOMER.ID).\
										join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_GUARANTOR.ID).\
										filter(MKT_LOAN_CONTRACT.ID==Loan.ID).all()
					Check = True
				except Exception as e:
					GuarantorObj    = db.session.query(MKT_CUSTOMER).\
										join(MKT_GUARANTOR,MKT_GUARANTOR.Guarantor==MKT_CUSTOMER.ID).\
										join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_GUARANTOR.ID).\
										filter(MKT_LOAN_CONTRACT.ID==Loan.ID).all()
					Check = False

				CoBorrowerObj   = db.session.query(
									MKT_CUSTOMER.ID,
									MKT_CUSTOMER.FirstNameEn,
									MKT_CUSTOMER.LastNameEn,
									MKT_CUSTOMER.Gender,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.Mobile2,
									MKT_CUSTOMER.Province,
									MKT_CUSTOMER.District,
									MKT_CUSTOMER.Commune,
									MKT_CUSTOMER.Village,
									MKT_LOAN_CO_BORROWER.RelationIndicator).\
									join(MKT_LOAN_CO_BORROWER,MKT_LOAN_CO_BORROWER.CoBorrowerID == MKT_CUSTOMER.ID).\
									join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_LOAN_CO_BORROWER.ID).\
									filter(MKT_LOAN_CONTRACT.ID==Loan.ID).all()
				if GuarantorObj:
					for row in GuarantorObj:
						CountLoan = db.session.query(MKT_GUARANTOR.ID).\
													filter(MKT_GUARANTOR.ID.ilike('LC%')).\
													filter(MKT_GUARANTOR.Guarantor==row.ID).\
													group_by(MKT_GUARANTOR.ID).all()
						if not CountLoan:
							CountLoan = db.session.query(MKT_GUARANTOR_HIST.ID).\
													filter(MKT_GUARANTOR_HIST.ID.ilike('LC%')).\
													filter(MKT_GUARANTOR_HIST.Guarantor==row.ID).\
													group_by(MKT_GUARANTOR_HIST.ID).all()
						GurantorCoBorrower = {	"ID"				:row.ID,
												"CustomerName"		:row.LastNameEn+" "+row.FirstNameEn,
												"Gender"			: row.Gender,
												"Mobile"			: str(row.Mobile1) + ('/'+ str(row.Mobile2) if row.Mobile2 else ''),
												"RelationIndicator"	: row.GTRelationIndicator if Check else '',
												"Address"			: mktaddress.getAddress(row.Province,row.District,row.Commune,row.Village),
												"Loan"				: len(CountLoan),
												"LoanID"			: CountLoan,
												"Type"				: "Guarantor"
											}
						ListGurantor.append(GurantorCoBorrower)
				if CoBorrowerObj:
					for row in CoBorrowerObj:
						CountLoan = db.session.query(MKT_LOAN_CO_BORROWER.ID).\
													filter(MKT_LOAN_CO_BORROWER.ID.ilike('LC%')).\
													filter(MKT_LOAN_CO_BORROWER.CoBorrowerID==row.ID).\
													group_by(MKT_LOAN_CO_BORROWER.ID).all()
						if not CountLoan:
							CountLoan = db.session.query(MKT_LOAN_CO_BORROWER_HIST.ID).\
													filter(MKT_LOAN_CO_BORROWER_HIST.ID.ilike('LC%')).\
													filter(MKT_LOAN_CO_BORROWER_HIST.CoBorrowerID==row.ID).\
													group_by(MKT_LOAN_CO_BORROWER_HIST.ID).all()
						GurantorCoBorrower = {	"ID"				:row.ID,
												"CustomerName"		:row.LastNameEn+" "+row.FirstNameEn,
												"Gender"			: row.Gender,
												"Mobile"			: str(row.Mobile1) +('/' + str(row.Mobile2) if row.Mobile2 else ''),
												"RelationIndicator"	: row.RelationIndicator,
												"Address"			: mktaddress.getAddress(row.Province,row.District,row.Commune,row.Village),
												"Loan"				: len(CountLoan),
												"LoanID"			: CountLoan,
												"Type"				: "Co Borrower"
											}
						ListCoBorrower.append(GurantorCoBorrower)
			else:
				''' get loan info when loan was moved to history, get latest version '''
				RepScheduleTable= MKT_REP_SCHEDULE_HIST
				if ID.find('@') == -1: # if id is not hostory record id we will create history record id
					Count 	= 	MKT_LOAN_CONTRACT_HIST.query.\
								filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(ID + '@%')).count()
					
					if Count:
						ID  = '%s@%s'%(ID,Count-1) # create history record id
				
				SplittedID 	= 	ID.split('@')
				if len(SplittedID) == 2:	# SplittedID lenght = 2 mean it is id of history record
					LoanID 	= 	SplittedID[0] # Loan ID
					Version = 	SplittedID[1] # version of loan history
					Loan 		= 	MKT_LOAN_CONTRACT_HIST.query.get(ID)
					Schedule 	= 	MKT_REP_SCHEDULE_HIST.query.\
									order_by(MKT_REP_SCHEDULE_HIST.No.asc()).\
									filter(MKT_REP_SCHEDULE_HIST.LoanID == LoanID).\
									filter(MKT_REP_SCHEDULE_HIST.ID.like('%@' + Version) ).\
									all()
				# Check Guarantor and CoBorrower in HIST
				CollateralDetailObj = db.session.query(MKT_COLLATERAL_DE).\
									join(MKT_COLLATERAL, MKT_COLLATERAL.ID == MKT_COLLATERAL_DE.CollateralID).\
									join(MKT_LOAN_COLLATERAL_HIST, MKT_LOAN_COLLATERAL_HIST.Collateral == MKT_COLLATERAL.ID).\
									join(MKT_LOAN_CONTRACT_HIST, MKT_LOAN_CONTRACT_HIST.ID == MKT_LOAN_COLLATERAL_HIST.ID).\
									filter(MKT_LOAN_CONTRACT_HIST.ID == ID).all()
				CollateralType  = db.session.query(MKT_COLLATERAL_TYPE)
				Check = False
				try:
					GuarantorObj    = db.session.query(
										MKT_CUSTOMER.ID,
										MKT_CUSTOMER.FirstNameEn,
										MKT_CUSTOMER.LastNameEn,
										MKT_CUSTOMER.Gender,
										MKT_CUSTOMER.Mobile1,
										MKT_CUSTOMER.Mobile2,
										MKT_CUSTOMER.Province,
										MKT_CUSTOMER.District,
										MKT_CUSTOMER.Commune,
										MKT_CUSTOMER.Village,
										MKT_GUARANTOR.GTRelationIndicator).\
										join(MKT_GUARANTOR_HIST,MKT_GUARANTOR_HIST.Guarantor==MKT_CUSTOMER.ID).\
										join(MKT_LOAN_CONTRACT_HIST,MKT_LOAN_CONTRACT_HIST.ID==MKT_GUARANTOR_HIST.ID).\
										filter(MKT_LOAN_CONTRACT_HIST.ID==ID).\
										distinct(MKT_CUSTOMER.ID).all()
					Check = True
				except Exception as e:
					GuarantorObj    = db.session.query(MKT_CUSTOMER).\
										join(MKT_GUARANTOR_HIST,MKT_GUARANTOR_HIST.Guarantor==MKT_CUSTOMER.ID).\
										join(MKT_LOAN_CONTRACT_HIST,MKT_LOAN_CONTRACT_HIST.ID==MKT_GUARANTOR_HIST.ID).\
										filter(MKT_LOAN_CONTRACT_HIST.ID==ID).\
										distinct(MKT_CUSTOMER.ID).all()
					Check = False
				CoBorrowerObj   = db.session.query(
									MKT_CUSTOMER.ID,
									MKT_CUSTOMER.FirstNameEn,
									MKT_CUSTOMER.LastNameEn,
									MKT_CUSTOMER.Gender,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.Mobile2,
									MKT_CUSTOMER.Province,
									MKT_CUSTOMER.District,
									MKT_CUSTOMER.Commune,
									MKT_CUSTOMER.Village,
									MKT_LOAN_CO_BORROWER.RelationIndicator).\
									join(MKT_LOAN_CO_BORROWER_HIST,MKT_LOAN_CO_BORROWER_HIST.CoBorrowerID == MKT_CUSTOMER.ID).\
									join(MKT_LOAN_CONTRACT_HIST,MKT_LOAN_CONTRACT_HIST.ID==MKT_LOAN_CO_BORROWER_HIST.ID).\
									filter(MKT_LOAN_CONTRACT_HIST.ID==ID).\
									distinct(MKT_CUSTOMER.ID).all()
				if GuarantorObj:
					for row in GuarantorObj:					
						CountLoan = db.session.query(func.split_part(MKT_GUARANTOR_HIST.ID,"@",1).label("loanid")).\
												filter(MKT_GUARANTOR_HIST.ID.ilike('LC%')).\
												filter(MKT_GUARANTOR_HIST.Guarantor==row.ID).\
												distinct("loanid").\
												group_by(MKT_GUARANTOR_HIST.ID).all()
						GurantorCoBorrower = {	"ID"				:row.ID,
												"CustomerName"		:row.LastNameEn+" "+row.FirstNameEn,
												"Gender"			: row.Gender,
												"Mobile"			: str(row.Mobile1) + ('/'+ str(row.Mobile2) if row.Mobile2 else ''),
												"RelationIndicator"	: row.GTRelationIndicator if Check else '',
												"Address"			: mktaddress.getAddress(row.Province,row.District,row.Commune,row.Village),
												"Loan"				: len(CountLoan),
												"LoanID"			: CountLoan,
												"Type"				: "Guarantor"
											}
						ListGurantor.append(GurantorCoBorrower)
				if CoBorrowerObj:
					for row in CoBorrowerObj:
						CountLoan = db.session.query(func.split_part(MKT_LOAN_CO_BORROWER_HIST.ID,"@",1).label("loanid")).\
												filter(MKT_LOAN_CO_BORROWER_HIST.ID.ilike('LC%')).\
												filter(MKT_LOAN_CO_BORROWER_HIST.CoBorrowerID==row.ID).\
												distinct("loanid").\
												group_by(MKT_LOAN_CO_BORROWER_HIST.ID).all()
						GurantorCoBorrower = {	"ID"				:row.ID,
												"CustomerName"		:row.LastNameEn+" "+row.FirstNameEn,
												"Gender"			: row.Gender,
												"Mobile"			: str(row.Mobile1) +('/' + str(row.Mobile2) if row.Mobile2 else ''),
												"RelationIndicator"	: row.RelationIndicator,
												"Address"			: mktaddress.getAddress(row.Province,row.District,row.Commune,row.Village),
												"Loan"				: len(CountLoan),
												"LoanID"			: CountLoan,
												"Type"				: "Co Borrower"
											}
						ListCoBorrower.append(GurantorCoBorrower)

			if Schedule:
				LoanID 	= str(Schedule[0].LoanID).split('@')

				LoanID 	= 	LoanID[0]
				ScheduleList = []

				for ScheduleObj in Schedule:
					WaiveInterest = 0
					WaivePenalty = 0
					if ScheduleObj.RepStatus in ['1','2','4']:
						# Get penalty base on loan ID and collection date.
						PenaltyObj = db.session.query(MKT_PENALTY).\
												filter(MKT_PENALTY.LoanID==LoanID).\
												filter(MKT_PENALTY.DueDate==ScheduleObj.CollectionDate).all()
						if PenaltyObj:
							for Pen in PenaltyObj:
								if Pen.Operation == 'W':
									WaivePenalty += Pen.Amount
								elif Pen.Operation == 'WI':
									WaiveInterest += Pen.InterestAmount
					TotalWaivePenalty 	+= WaivePenalty
					TotalWaiveInterest 	+= WaiveInterest

					# set new data member to object ScheduleObj at runtime.
					setattr(ScheduleObj,"WaiveInterest", WaiveInterest)
					setattr(ScheduleObj,"WaivePenalty", WaivePenalty)
					ScheduleList.append(ScheduleObj)
				Schedule = ScheduleList

			if PD:
				GRAPenalty 	= 	0
				PDDate 		= 	db.session.query(func.sum(MKT_PD_DATE.OutPenAmount).label("OutPenAmount")).\
							filter(MKT_PD_DATE.ID == "PD"+str(ID)).\
							filter(MKT_PD_DATE.ODStatus == "GRA").\
							group_by(MKT_PD_DATE.ID).first()
				if PDDate:
					GRAPenalty = PDDate.OutPenAmount

				TotODAmount 	= PD.TotODAmount-GRAPenalty
				TotPrincipalDue = PD.TotPrincipalDue
				TotInterestDue 	= PD.TotInterestDue
				TotPenaltyDue 	= PD.TotPenaltyDue-GRAPenalty
				TotChargeDue 	= PD.TotChargeDue

			RepSchedule =	RepScheduleTable.query.\
							filter(RepScheduleTable.LoanID == ID).\
							filter(RepScheduleTable.RepStatus != "0")

			Installment 	= 	int(RepSchedule.count()) + 1
			Installment 	=	ID + str(Installment)
			NextInstallment =	RepScheduleTable.query.get(Installment)
			CurrentInterest =	0
			if NextInstallment:
				CurrentInterest = NextInstallment.Interest

			TodayInstallment= RepScheduleTable.query.filter(RepScheduleTable.LoanID == ID, RepScheduleTable.CollectionDate == str(SystemDate)).first()
			
			# Args for passing to method 'getLoanPreTerminationDetail(**kwargs)'
			kwargs = {	'GRAPenalty': GRAPenalty }
			OutAmountCustomer = mktloan.getLoanPreTerminationDetail(Loan,PD,TodayInstallment,**kwargs)
			if OutAmountCustomer:
				TotODAmount 	= OutAmountCustomer['PastDue']
				TotPrincipalDue = OutAmountCustomer['PDTotalPrincipal']
				TotInterestDue 	= OutAmountCustomer['InterestDue']
				TotPenaltyDue 	= OutAmountCustomer['PenaltyDue']
				TotChargeDue 	= OutAmountCustomer['ChargeDue']
				AccrCurrInstallment = OutAmountCustomer['AccrCurrentInt']

			if ID and not Loan:
				flash(msg_warning + " Loan contract not found.")

			''' Loan information '''
			DictInfo = {}
			ListInfo = []
			Color 	= ""
			Message = ""
			if LoanAmendmentObj:
				LastAmendDate = ""
				for col in LoanAmendmentObj:
					if col.Operation == 'AMT':
						Mode = "DEDUCT" if col.AddDeduct == '1' else "ADD"

						if col.Amount > 0:
							Message = "LOAN AMENDS %s PRINCIPAL %s ON %s" \
									%(Mode, mktmoney.toMoney(float(col.Amount), mktmoney.getCurrencyObj(Loan.Currency)), col.AmendDate)
						#Capitalize Interest/Penalty 2018-04-11 Mony
						elif col.CapitalizeOption=="Y" and col.CapitalizeAmount >0:
							Message = "LOAN AMENDS CAPITALIZE INTEREST ON %s" % col.AmendDate
						#end
						else:
							Message = "LOAN AMENDS SCHEDULE ON %s" %(col.AmendDate)
						Color 	= '#FCF8E3'
					else:
						Message = "LOAN TERMINATES ON %s" %(col.AmendDate)
						Color 	= '#FFA4A4'

					if LastAmendDate == col.AmendDate:
						ListInfo.append((Message,col.ID))
					else:
						ListInfo = []
						ListInfo.append((Message,col.ID))
						LastAmendDate = col.AmendDate

					DictInfo.update({col.AmendDate:{'ListInfo':ListInfo, 'Color':Color}})

			ACCR_CHARGE_DAILY 	= 	mktsetting.getAppSetting('ACCR_CHARGE_DAILY')
			ChargeRegularObj    = 	[]
			if not ACCR_CHARGE_DAILY:
				ACCR_CHARGE_DAILY = "N"

			if Loan:
				Currency = Loan.Currency
				ChargeRegularObj = mktcharge.getChargeRegularObj(LoanID=ID,Currency=Currency)


            
			if checkContentType() == 'json' or 'API' in request.url:
				BodyList 		= []
				BodyDict 		= {}


				# Start Tool Bar
				self.customButton = {'title':getLanguage('Show'),'type':'Hidden','method':'get','url':'/LoanCentre/?ID=SearchLoanCentreID','param':['SearchLoanCentreID'],'icon':'','type_url':'Custom','color':'#1b80c2'}
						
				# End Tool Bar 

				if Loan:
					self.customButton 	= {}
					Relation			= {'': 'N/A', '1': 'Spouse', '2': 'Son/Daughter', '3': 'Relative', '4': 'Parent', '5': 'Friend'}
					
					Min_Height 			= "430px" 
					Max_Height 			= "430px" 
					Tr_ChargeRecievable = "" 
					Tr_ChargeRate 		= "" 
					Tr_CurrentCharge 	= "" 
					CurrentCharge 		= 0 
					ChargeRecievable 	= 0 
					ChargeRate  	 	= 0 
					if ACCR_CHARGE_DAILY == "Y":
						Min_Height = "470px" 
						Max_Height = "470px" 
						if ChargeRegularObj: 
							CurrentCharge 	= ChargeRegularObj[0].AccrCurrent if ChargeRegularObj[0].AccrCurrent else 0 
							ChargeRecievable = ChargeRegularObj[0].ChargeUnearned 
							ChargeRate  	 	= ChargeRegularObj[0].Charge 
						

						Tr_ChargeRecievable = toMoney(float(ChargeRecievable), mktmoney.getCurrencyObj(Loan.Currency), 1) 
						Tr_ChargeRate    	= str(formatNumber(ChargeRate))
						Tr_CurrentCharge 	= toMoney(float(CurrentCharge), mktmoney.getCurrencyObj(Loan.Currency), 1)

					
					# Start General - Info
					GeneralInfoDict = {}
					GeneralInfoList = []

					LoanID 			= 'Loan ID:'
					CusName 		= 'Customer:'
					AccountName		= 'Account:'
					ValueDate 		= 'Value Date:'
					MaturityDate 	= 'Maturity Date:'
					DisbursedAmount = 'Disbursed Amount:'
					OutstandingAmount = 'Outstanding Amount:'
					InterestRate	= 'Interest Rate:'
					TotalInterestEarned = 'Total Interest Earned:'
					AccruedInterestReceivableBooked='Accrued Interest Receivable Booked:'


					GeneralInfoList 	 = [{'label':LoanID,'value':Loan.ID + '-' + Loan.Branch,'urls':[{'url':"/LoanContract/?ID="+Loan.ID,'type_url':'Form','icon':''}]},
									{'label':CusName,'value':Loan.ContractCustomerID+ ' - '+ customer.lookupTable('MKT_CUSTOMER', 'ID', 'LastNameEn', Loan.ContractCustomerID)+customer.lookupTable('MKT_CUSTOMER', 'ID', 'FirstNameEn', Loan.ContractCustomerID),'urls':[{'url':"/Customer/?ID="+Loan.ContractCustomerID,'type_url':'Form','icon':''}]},
									{'label':AccountName,'value':Loan.Account,'urls':[{'url':"/Account_DD/?ID="+Loan.Account,'type_url':'Form','icon':''}]},
									{'label':ValueDate,'value':Loan.ValueDate,'urls':[]},
									{'label':MaturityDate,'value':Loan.MaturityDate,'urls':[]},
									{'label':DisbursedAmount,'value':toMoney(float(Loan.Disbursed), mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[]},
									{'label':OutstandingAmount,'value':toMoney(float(Loan.OutstandingAmount), mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[]},
									{'label':InterestRate,'value':Loan.InterestRate,'urls':[]},
									{'label':TotalInterestEarned,'value':toMoney(float(Loan.IntIncEarned), BaseCurrencyObj, 1),'urls':[]},
									{'label':AccruedInterestReceivableBooked,'value':toMoney(float(Loan.AccrInterest), mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[]}
									]

					GeneralInfoDict.update({
										'icon':'text-o','name':'GeneralInfo','title':'General','type':'List','data':GeneralInfoList,'most_data':MostData
									})
					BodyList.append(GeneralInfoDict)
					# End General - Info


					# Outstanding Amount from Customer
					OutstandingDict  				= 	{}
					OutstandingList 				= 	[]
					LoanBalance						= 	'Loan Balance:'
					CurrentInstallmentInterest 		= 	'Current Installment Interest:'
					PreTerminationAmount			= 	'Pre-Termination Amount:'
					PastDue 						= 	'Past Due:'
					Principal 						= 	'Principal:'
					Interest 						= 	'Interest:'
					Penalty 						= 	'Penalty:'
					Charge							= 	'Charge:'
					Total 							= 	'Total:'
					AccountBalance					=	'Account Balance:'
					BalanceDue 						= 	'Balance Due From Customer:'
					TotalAccountBalance 			= 	''
					TotalBalanceDue 				= 	''

					if customer.lookupTable('MKT_ACCOUNT', 'ID', 'AvailableBal', Loan.Account) != '':
						TotalAccountBalance 		= toMoney(float(customer.lookupTable('MKT_ACCOUNT', 'ID', 'AvailableBal', Loan.Account)), mktmoney.getCurrencyObj(Loan.Currency), 1)
					else :
						TotalAccountBalance 		= toMoney(float(0), mktmoney.getCurrencyObj(Loan.Currency), 1) 
					if customer.lookupTable('MKT_ACCOUNT', 'ID', 'AvailableBal', Loan.Account) != '':
						TotalBalanceDue 			= toMoney((float(Loan.Amount) + float(AccrCurrInstallment) + float(TotODAmount) + float(PreTermination) + float(CurrentCharge)) - float(customer.lookupTable('MKT_ACCOUNT', 'ID', 'AvailableBal', Loan.Account)), mktmoney.getCurrencyObj(Loan.Currency), 1)
					else:
						TotalBalanceDue = toMoney((float(Loan.Amount) + float(AccrCurrInstallment) + float(TotODAmount) + float(PreTermination) + float(CurrentCharge)), mktmoney.getCurrencyObj(Loan.Currency), 1)

					TotalAmount=toMoney(float(Loan.Amount) + float(AccrCurrInstallment) + float(TotODAmount)+ float(PreTermination) + float(CurrentCharge), mktmoney.getCurrencyObj(Loan.Currency), 1)


					OutstandingList = [{'label':LoanBalance,'value':toMoney(float(Loan.Amount), mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[]},
									{'label':CurrentInstallmentInterest,'value':toMoney(float(AccrCurrInstallment), mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[]},
									{'label':PreTerminationAmount,'value':toMoney(float(PreTermination), mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[]},
									{'label':PastDue,'value':toMoney(float(TotODAmount), mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[{'url':'/PD/?ID=PD'+ID,'icon':'','type_url':'Custom'}]},
									{'label':Principal,'value':toMoney(float(TotPrincipalDue),mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[]},
									{'label':Interest,'value':toMoney(float(TotInterestDue), mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[]},
									{'label':Penalty,'value':toMoney(float(TotPenaltyDue), mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[]},
									{'label':Charge,'value':toMoney(float(TotChargeDue), mktmoney.getCurrencyObj(Loan.Currency), 1),'urls':[]},
									{'label':Total,'value':TotalAmount,'urls':[]},
									{'label':AccountBalance,'value':TotalAccountBalance,'urls':[{'url':'/AccountStatement?ID='+Loan.Account,'icon':'','type_url':'Custom'}]},
									{'label':BalanceDue,'value':TotalBalanceDue,'urls':[]}
									]

					OutstandingDict.update({
										'icon':'text-o','name':'OutstandingAmountfromCustomer','title': 'Outstanding Amount','type':'List','data':OutstandingList,'most_data':MostData
									})
					BodyList.append(OutstandingDict)
					# End Outstanding Amount from Customer

					# Payment History
					if Schedule:
						TotalAmountPaymentHistory 		= {'TotPrincipal':0, 'TotInterest':0, 'TotPenalty':0, 'TotPaidAmt':0 }
						LastCollectionDate = ""
						LastAmendDate = ""
						PaymentHistoryList = []
						PaymentHistoryDict = {}
						TotalCol = 12

						for row in Schedule:
							NumDayLateObj = PDDateObj.filter(MKT_PD_DATE.DueDate == str(row.CollectionDate)).first()
							NumDayLate = NumDayLateObj.NumDayDue if NumDayLateObj else 0
							PenaltyAmount =  mktpdcollection.getPenaltyByDate(row.CollectionDate,'PD'+row.LoanID)
							TotalAmountPaymentHistory = AddDataToList(TotalAmountPaymentHistory, row.Principal, row.Interest, PenaltyAmount, row.PartPaidAmt)
							PaymentStatus = ''
							StatusColor = ''
							if int(row.RepStatus) == 0:
								if row.CollectionDate < str(SystemDate) and int(row.RepStatus)==1:
									PaymentStatus = 'Due Today'
									StatusColor = '#f29f29'
								elif int(str(row.CollectionDate).replace('-', '')) == int(SystemDate.replace('-', '')):
									PaymentStatus = 'Due Today'
									StatusColor = '#39b3d7'
								else:
									PaymentStatus = 'Not Yet Due'
									StatusColor = '#e14430'
							elif int(row.RepStatus) == 1:
								PaymentStatus 	= 'Past Due'
								StatusColor 	= '#f29f29'
							elif int(row.RepStatus) == 2:
								PaymentStatus = 'Partial Paid'
								StatusColor = '#e14430'
							elif int(row.RepStatus) == 3:
								PaymentStatus = 'Fully Paid On Time'
								StatusColor = '#46ac46'
							elif int(row.RepStatus) == 4:
								PaymentStatus = 'Fully Paid But Late'
								StatusColor = '#39b3d7'



							PaymentHistoryID 		=	{'key':'ID',			'value':row.No , 'color':''}
							PaymentHistoryDate 		=	{'key':'Date',			'value':row.CollectionDate, 'color':''}
							PaymentHistoryPrincipal	=	{'key':'Principal',		'value':toMoney(float(row.Principal), mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''}
							PaymentHistoryInterest	=	{'key':'Interest',		'value':toMoney(float(row.Interest), mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''}
							PaymentHistoryPrinInter	=	{'key':'Total',			'value':toMoney(float(row.Interest)+float(row.Principal), mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''}
							PaymentHistoryCharge	=	{'key':'Charge',		'value':toMoney(float(row.Charge), mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''} 
							PaymentHistoryPenalty	=	{'key':'Penalty',		'value':toMoney(float(PenaltyAmount), mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''} 
							PaymentHistoryTotal		=	{'key':'Total',			'value':toMoney(float(row.Principal) + float(row.Interest) + float(row.Charge) + float(PenaltyAmount), mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''} 
							PaymentHistoryStatus	= 	{'key':'Status',		'value':PaymentStatus , 'color':StatusColor}
							DayDue 					= 	{'key':'# of Day Due',	'value':NumDayLate , 'color':''}
							WaivePenalty 			= 	{'key':'Waive Penalty',	'value':toMoney(float(row.WaivePenalty), mktmoney.getCurrencyObj(Loan.Currency), 1), 'color':''}
							WaiveInterest 			=	{'key':'Waive Interest','value':toMoney(float(row.WaiveInterest), mktmoney.getCurrencyObj(Loan.Currency), 1), 'color':''}
							PaidAmount 				=	{'key':'Paid Amount',	'value':toMoney(float(row.PartPaidAmt), mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''}
							LoanBalance 			=	{'key':'Loan Balance',	'value':toMoney(float(row.Balance), mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''}
							NumberOfDay 			= 	{'key':'Number Of Day',	'value':row.NumDay, 'color':''}

							PaymentHistoryColumn 	= 	[PaymentHistoryID,PaymentHistoryDate,PaymentHistoryPrincipal,PaymentHistoryInterest,PaymentHistoryCharge
														,PaymentHistoryPenalty,PaymentHistoryTotal,PaymentHistoryStatus,DayDue,WaivePenalty,WaiveInterest
														,PaidAmount,LoanBalance,NumberOfDay]
							ImportantField 			=	[PaymentHistoryStatus,PaymentHistoryPrincipal,PaymentHistoryInterest,PaymentHistoryPrinInter]
							PaymentHistoryList.append({'columns':PaymentHistoryColumn,'urls':[],'important':ImportantField})

						TotalCharge 	= 0
						if EnableChargeSchedule:
							TotalCharge = sum(row.Charge for row in Schedule)


						TotalAmountEnd 	= toMoney(float(TotalAmountPaymentHistory['TotPrincipal']) + float(TotalAmountPaymentHistory['TotInterest']) + float(str(TotalCharge))+ float(TotalAmountPaymentHistory['TotPenalty']),mktmoney.getCurrencyObj(Loan.Currency),1)

						PaymentHistoryID 		=	{'key':'','value':'' , 'color':''}
						PaymentHistoryDate 		=	{'key':'','value':'', 'color':''}
						PaymentHistoryPrincipal	=	{'key':'Principal','value':toMoney(float(TotalAmountPaymentHistory['TotPrincipal']),mktmoney.getCurrencyObj(Loan.Currency),1), 'color':'#000'}
						PaymentHistoryInterest	=	{'key':'Interest','value':toMoney(float(TotalAmountPaymentHistory['TotInterest']),mktmoney.getCurrencyObj(Loan.Currency),1), 'color':'#000'}
						PaymentHistoryCharge	=	{'key':'Charge','value':toMoney(float(TotalCharge), mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''} 
						PaymentHistoryPenalty	=	{'key':'Penalty','value':toMoney(float(TotalAmountPaymentHistory['TotPenalty']),mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''} 
						PaymentHistoryTotal		=	{'key':'Total','value':TotalAmountEnd, 'color':'#000'} 
						PaymentHistoryStatus	= 	{'key':'Status','value':'Total', 'color':'#000'}
						DayDue 					= 	{'key':'','value':'', 'color':''}

						WaivePenalty 			= 	{'key':'Waive Penalty','value':toMoney(float(TotalWaivePenalty), mktmoney.getCurrencyObj(Loan.Currency), 1), 'color':''}
						WaiveInterest 			=	{'key':'Waive Interest','value':toMoney(float(TotalWaiveInterest), mktmoney.getCurrencyObj(Loan.Currency), 1), 'color':''}
						PaidAmount 				=	{'key':'Paid Amount','value':toMoney(float(TotalAmountPaymentHistory['TotPaidAmt']),mktmoney.getCurrencyObj(Loan.Currency),1), 'color':''}
						LoanBalance 			=	{'key':'Loan Balance','value':toMoney(float(TotalAmountPaymentHistory['TotPaidAmt']), mktmoney.getCurrencyObj(Loan.Currency), 1), 'color':''}
						NumberOfDay 			= 	{'key':'','value':'', 'color':''}

						PaymentHistoryColumn 	= 	[PaymentHistoryID,PaymentHistoryDate,PaymentHistoryPrincipal,PaymentHistoryInterest,PaymentHistoryCharge
													,PaymentHistoryPenalty,PaymentHistoryTotal,PaymentHistoryStatus,DayDue,WaivePenalty,WaiveInterest
													,PaidAmount,LoanBalance,NumberOfDay]

						ImportantField 			=	[PaymentHistoryStatus,PaymentHistoryPrincipal,PaymentHistoryInterest,PaymentHistoryTotal]
						PaymentHistoryList.append({'columns':PaymentHistoryColumn,'urls':[],'important':ImportantField})

						PaymentHistoryDict.update({
										'icon':'','name':'PaymentHistory','title':'Payment History','type':'Table','data':PaymentHistoryList,'most_data':MostData,'expand':False
									})
						BodyList.append(PaymentHistoryDict)
				def setVisible(self):
					return []
				setattr(FRM_LOAN_CENTRE,'setVisible' , setVisible)
					# End Payment History
				if BodyList:
					def setVisible(self):
						return ['All']
					setattr(FRM_LOAN_CENTRE,'setVisible' , setVisible)
						
				BodyDict.update({
				'header':[],'data':BodyList
				})
				self.body 		= BodyDict
				self.recordID 	= ID
				self.header 	= 'Loan Centre'
				setattr(FRM_LOAN_CENTRE,"SearchLoanCentreID" , RemoteTextField('Search Loan ID or Name',default=ID))
				return True
			self.kwargs 	= {  
						'ID'	:	ID,
						'Loan' 	:	Loan,
						'DictInfo': 	DictInfo,
						'toMoney' 	:	mktmoney.toMoney,
						'getCurrencyObj' :	mktmoney.getCurrencyObj,
						'getCurrencySymbol' :	mktmoney.getCurrencySymbol,
						'float' 			:	float,
						'int' 				:	int,
						'str' 				:	str,
						'CurrentInterest' 	:	CurrentInterest,
						'Schedule' 			:	Schedule,
						'AccrCurrInstallment' : AccrCurrInstallment,
						'TotODAmount' 		:	TotODAmount,
						'PreTermination' 	:	PreTermination,
						'TotPrincipalDue' 	:	TotPrincipalDue,
						'TotInterestDue' 	:	TotInterestDue,
						'TotPenaltyDue' 	:	TotPenaltyDue,
						'TotChargeDue' 		:	TotChargeDue,
						'lookupTable' 		:	customer.lookupTable,
						'SystemDate' 		:	SystemDate,
						'getPenaltyByDate' 	:	mktpdcollection.getPenaltyByDate,
						'BaseCurrencyObj' 	: 	BaseCurrencyObj,
						'ACCR_CHARGE_DAILY' :	ACCR_CHARGE_DAILY,
						'ChargeRegularObj' 	:	ChargeRegularObj,
						'formatNumber'		:	mktmoney.formatNumber,
						'EnableChargeSchedule':	EnableChargeSchedule,
						'PDDateObj' 			:	PDDateObj,
						'MKT_PD_DATE' 		:	MKT_PD_DATE,
						'CollateralDetailObj' :	CollateralDetailObj,
						'GuarantorObj'		:	ListGurantor,
						'CoBorrowerObj'		:	ListCoBorrower,
						'CollateralType' 	:	CollateralType,
						'TotalWaivePenalty' : 	TotalWaivePenalty,
						'TotalWaiveInterest' : 	TotalWaiveInterest

						}
			return True
		
		except:
			raise
def AddDataToList(TotalAmount, Principal, Interest, Penalty, PaidAmt):
	return { 
		"TotPrincipal":float(TotalAmount["TotPrincipal"]) + float(Principal),
		"TotInterest":float(TotalAmount["TotInterest"]) + float(Interest),
		"TotPenalty":float(TotalAmount["TotPenalty"]) + float(Penalty),
		"TotPaidAmt":float(TotalAmount["TotPaidAmt"]) + float(PaidAmt)
		}

registerCRUD(admin, '/LoanCentre', 'LoanCentre',FRM_LOAN_CENTRE, [MKT_LOAN_CENTRE],template="schedule/loaninfo.html",form_type='MainCustom',custom_form_data=CLS_LoanCentre)
