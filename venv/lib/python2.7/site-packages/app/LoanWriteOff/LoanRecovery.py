from flask 						import flash, Markup
from wtforms 					import DecimalField, IntegerField
from app.mktcore.wtfimports 	import *
from .models 					import *
from datetime 					import *

from app.tools.mktroute 		import *
from app.Account.models 		import MKT_ACCOUNT
from app.LoanAmendment.models 	import MKT_LOAN_AMENDMENT

import app.tools.mktmoney 		as mktmoney
import app.tools.mktloan 		as mktloan
import app.tools.mktdate	 	as mktdate

@app.route("/Morakot/WrittenOffLoanInfo", methods=['GET'])
def getWrittenOffLoanInfo():
	try:
		LoanID 		= request.args.get("LoanID")
		AccBalance 	= ""
		RecoveryAmt = ""
		Currency 	= ""
		AccountID 	= ""
		AccountName = ""
		TotPrincipal 	= 0
		TotInterest 	= 0
		TotPenalty 		= 0
		TotCharge 		= 0
		PDParamObj 		= 	mktparam.getPDParam()
		row = MKT_WRITE_OFF_DE.query.get(LoanID)
		if row:
			Currency 	= str(row.Currency)
			AccountID 	= row.AccountNumber
			Acc 		= MKT_ACCOUNT.query.get(AccountID)
			if Acc:
				AccBalance 	= mktmoney.toMoney(float(Acc.AvailableBal), mktmoney.getCurrencyObj(Currency))
				AccountName = str(AccountID) + " - " + str(Acc.AccName)

			RecoveryAmt = mktmoney.toMoney(float(row.TotWOFAmount), mktmoney.getCurrencyObj(Currency))
			AccBal 		= float(AccBalance.replace(",", ""))
			RecAmt 		= float(RecoveryAmt.replace(",", ""))
			if AccBal > RecAmt:
				AccBalance = RecoveryAmt

			if PDParamObj:
				FWOFRepOrder = PDParamObj.FWOFRepOrder.split()
				for item in FWOFRepOrder:

					if item == 'PR' and float(row.TotPrincipalDue) > 0:
						Recovery 		= mktloan.getCalculateRecoveryAmount(AccBalance = AccBal, Amount = row.TotPrincipalDue)
						TotPrincipal 	= Recovery.get("TotAmount")
						AccBal 			= Recovery.get("TotAccBal")

					elif item == 'IN' and float(row.TotInterestDue) > 0:
						Recovery 		= mktloan.getCalculateRecoveryAmount(AccBalance = AccBal, Amount = row.TotInterestDue)
						TotInterest 	= Recovery.get("TotAmount")
						AccBal 			= Recovery.get("TotAccBal")

					elif item == 'PE' and float(row.TotPenaltyDue) > 0:
						Recovery 		= mktloan.getCalculateRecoveryAmount(AccBalance = AccBal, Amount = row.TotPenaltyDue)
						TotPenalty 		= Recovery.get("TotAmount")
						AccBal 			= Recovery.get("TotAccBal")

					elif item == 'CH' and float(row.TotChargeDue) > 0:
						Recovery 		= mktloan.getCalculateRecoveryAmount(AccBalance = AccBal, Amount = row.TotChargeDue)
						TotCharge 		= Recovery.get("TotAmount")
						AccBal 			= Recovery.get("TotAccBal")

			TotPrincipal 	= mktmoney.toMoney(float(TotPrincipal), mktmoney.getCurrencyObj(Currency))
			TotInterest 	= mktmoney.toMoney(float(TotInterest), mktmoney.getCurrencyObj(Currency))
			TotPenalty 		= mktmoney.toMoney(float(TotPenalty), mktmoney.getCurrencyObj(Currency))
			TotCharge 		= mktmoney.toMoney(float(TotCharge), mktmoney.getCurrencyObj(Currency))

		return jsonify( AccBalance 		= str(AccBalance),
						RecoveryAmt 	= str(RecoveryAmt),
						TotPrincipal 	= TotPrincipal,
						TotInterest 	= TotInterest,
						TotPenalty 		= TotPenalty,
						TotCharge 		= TotCharge,
						Currency 		= Currency,
						AccountID 		= AccountID,
						AccountName 	= AccountName)
	except:
		raise

@app.route("/Morakot/WrittenOffAccountInfo", methods=['GET'])
def getWrittenOffAccountInfo():
	try:

		AccountID 	= 	request.args.get("AccountID")
		Currency 	= 	request.args.get("Currency")
		RecoveryAmt = 	request.args.get("RecoveryAmt")
		AccBalance 	= 	""
		Acc 		=	MKT_ACCOUNT.query.\
						filter(MKT_ACCOUNT.ID == AccountID).\
						filter(MKT_ACCOUNT.Currency == Currency).\
						first()
		if Acc:
			AccBalance 	= mktmoney.toMoney(float(Acc.AvailableBal), mktmoney.getCurrencyObj(Currency))

			AccBal 		= float(AccBalance.replace(",", ""))
			RecAmt 		= float(RecoveryAmt.replace(",", ""))
			if AccBal > RecAmt:
				AccBalance = RecoveryAmt

		return jsonify(AccBalance=str(AccBalance))

	except:
		raise

def loanBankDate():
	return mktdate.getBankDate()

class FRM_LOAN_RECOVERY(exform):
	LoanID 			=	TextField(requiredlabel("Loan Contract ID", "*"), [validators.Required()])
	AccountID 		=	RemoteTextField(requiredlabel("Drawdown Account","*"), [validators.Required()])
	Currency 		=	TextField(requiredlabel("Currency", "*"), [validators.Required()])
	AccBalance 		=	DecimalField(requiredlabel("Account Balance", "*"), [validators.Required()])
	RecoveryAmt 	=	DecimalField(requiredlabel("Outstanding Amount", "*"), [validators.Required()])
	TotPrincipal 	=	DecimalField("Total Principal Recovered")
	TotInterest 	=	DecimalField("Total Interest Recovered")
	TotPenalty 		=	DecimalField("Total Penalty Recovered")
	TotCharge 		=	DecimalField("Total Charge Recovered")
	TransactionDate = 	DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()], default=loanBankDate)
	Note 			= 	TextAreaField(requiredlabel(getLanguage("Note"),"*"),[validators.Required()])

	def validate_LoanID(form, field):
		LoanID = request.form['LoanID'] if request.method == "POST" else ""
		TerminateObj = MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.LoanID==LoanID).first()
		if TerminateObj:
			raise ValidationError("Cannot recovery because this %s is loan amendment paid-off"%LoanID)

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= ("$('#Currency').val(data.Currency),$('#AccBalance').val(data.AccBalance),$('#RecoveryAmt').val(data.RecoveryAmt)")
		fielddisplay 	+= ",$('#AccountID').select2('data', {'id':data.AccountID,'text':data.AccountName})"
		fielddisplay 	+= ",$('#TotPrincipal').val(data.TotPrincipal),$('#TotInterest').val(data.TotInterest),$('#TotPenalty').val(data.TotPenalty),$('#TotCharge').val(data.TotCharge)"
		varname 		= ("LoanID:$('#LoanID').val()")
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/WrittenOffLoanInfo", "blur"]
		hotfield.append(fun)

		fielddisplay 	= ("$('#AccBalance').val(data.AccBalance)")
		varname 		= ("AccountID:$('#AccountID').val(),Currency:$('#Currency').val(),RecoveryAmt:$('#RecoveryAmt').val()")
		fun 			= ["AccountID", varname, fielddisplay, "/Morakot/WrittenOffAccountInfo", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setWidth():
		return [("Currency", len1)]

	@staticmethod
	def setDisable():
		return [("Currency"), ("AccBalance"), ("RecoveryAmt"), ("TransactionDate"), ("TotPrincipal"), ("TotInterest"), ("TotPenalty"), ("TotCharge")]

	@staticmethod
	def moneyField():
		return [("AccBalance", "Currency"), ("RecoveryAmt", "Currency"), ("TotPrincipal", "Currency"),
				("TotInterest", "Currency"), ("TotPenalty", "Currency"), ("TotCharge", "Currency")]

	@staticmethod
	def formatMoney():
		return ["AccBalance", "RecoveryAmt", "TotPrincipal", "TotInterest", "TotPenalty", "TotCharge"], "Currency"

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def reverseRec():
		return True, "%s Record not allow to reverse." %(msg_warning)

	@staticmethod
	def beforeInsert():
		RecoveryID 		=	request.form['ID']
		ID 				= 	request.form['LoanID']
		TranDate 		= 	request.form['TransactionDate']
		Note 			= 	request.form['Note']
		NumOfAuth 		= 	g.getNAuthorize
		Resource 		= 	"INAU"
		if int(NumOfAuth) == 0:
			mktloan.setLoanRecovery(ID, RecoveryID, TranDate, Note, 0)

		return True

	@staticmethod
	def beforeAuthorize():
		ID 			= g.formID
		Recovery 	= MKT_LOAN_RECOVERY_INAU.query.get(ID)

		PDParamObj 	= mktparam.getPDParam()
		WOFDE 		= MKT_WRITE_OFF_DE.query.filter(MKT_WRITE_OFF_DE.ID == Recovery.LoanID).first()
		TotPrincipal 	= 0
		TotInterest 	= 0
		TotPenalty 		= 0
		TotCharge 		= 0
		if Recovery:
			LoanID 		= Recovery.LoanID
			TranDate 	= Recovery.TransactionDate
			Note 		= Recovery.Note
			WOF 		= MKT_WRITE_OFF_DE.query.get(LoanID)
			AccBalance 	= MKT_ACCOUNT.query.get(WOF.AccountNumber)
			AccBal 		= float(AccBalance.AvailableBal)
			if WOF:
				if PDParamObj:
					FWOFRepOrder = PDParamObj.FWOFRepOrder.split()
					for item in FWOFRepOrder:

						if item == 'PR' and float(WOFDE.TotPrincipalDue) > 0:
							RecoveryAmount 		= mktloan.getCalculateRecoveryAmount(AccBalance = AccBal, Amount = WOFDE.TotPrincipalDue)
							TotPrincipal 	= RecoveryAmount.get("TotAmount")
							AccBal 			= RecoveryAmount.get("TotAccBal")

						elif item == 'IN' and float(WOFDE.TotInterestDue) > 0:
							RecoveryAmount 		= mktloan.getCalculateRecoveryAmount(AccBalance = AccBal, Amount = WOFDE.TotInterestDue)
							TotInterest 	= RecoveryAmount.get("TotAmount")
							AccBal 			= RecoveryAmount.get("TotAccBal")

						elif item == 'PE' and float(WOFDE.TotPenaltyDue) > 0:
							RecoveryAmount 		= mktloan.getCalculateRecoveryAmount(AccBalance = AccBal, Amount = WOFDE.TotPenaltyDue)
							TotPenalty 		= RecoveryAmount.get("TotAmount")
							AccBal 			= RecoveryAmount.get("TotAccBal")

						elif item == 'CH' and float(WOFDE.TotChargeDue) > 0:
							RecoveryAmount 		= mktloan.getCalculateRecoveryAmount(AccBalance = AccBal, Amount = WOFDE.TotChargeDue)
							TotCharge 		= RecoveryAmount.get("TotAmount")
							AccBal 			= RecoveryAmount.get("TotAccBal")

				Recovery.TotPrincipal 	= TotPrincipal
				Recovery.TotInterest 	= TotInterest
				Recovery.TotPenalty 	= TotPenalty
				Recovery.TotCharge 		= TotCharge
				db.session.add(Recovery)

				mktloan.setLoanRecovery(LoanID, ID, TranDate, Note, 0)
				db.session.commit()
				return True
			else:
				flash(msg_error + " Loan %s is no longer available for recovery." %LoanID)
				return False
		else:
			flash(msg_error + " Recovery loan not found.")
			return False

	@staticmethod
	def IsAcceptOverride():
		Msg 			= ''
		isCheck 		= False
		ID 				= request.form['LoanID']
		PDParamObj 		= mktparam.getPDParam()
		FWOFRepOrder = PDParamObj.FWOFRepOrder.split()
		WOFObj = MKT_WRITE_OFF_DE.query.filter(MKT_WRITE_OFF_DE.ID == ID).first()
		if WOFObj:
			if WOFObj.TotPrincipalDue > 0 and 'PR' not in FWOFRepOrder:
				Msg = "<b>Principal</b>), "
				isCheck = True
			if WOFObj.TotInterestDue > 0 and 'IN' not in FWOFRepOrder:
				Msg += "<b>Interest</b>, "
				isCheck = True
			if WOFObj.TotPenaltyDue > 0 and 'PE' not in FWOFRepOrder:
				Msg += "<b>Penalty</b>, "
				isCheck = True
			if WOFObj.TotChargeDue > 0 and 'CH' not in FWOFRepOrder:
				Msg += "<b>Charge</b>, "
				isCheck = True
		return isCheck, "System doesn't recover [%s], if you want to recover Please config FWOF Rep Order in PD PARAM [<b>PR IN PE CH</b>]"% Markup(Msg[:-2])