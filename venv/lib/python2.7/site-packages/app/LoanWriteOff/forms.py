from flask 						import flash
from wtforms 					import DecimalField, IntegerField
from app.mktcore.wtfimports 	import *
from .models 					import *
from datetime 					import *

from app.LoanContract.models 	import MKT_LOAN_CONTRACT
from app.PD.models 				import MKT_PAST_DUE
from app.Customer.models 		import MKT_CUSTOMER

import app.tools.mktdate 					as mktdate
import app.tools.loantools.nonworkingday 	as mktDay
import app.tools.mktholiday 				as mktHoliday
import app.tools.mktparam 					as mktparam
import app.tools.mktloan 					as mktloan
import time

def getLoanInformation():

	if request.method == 'POST':
		ID = request.form['ID']
	else:
		ID = g.formID

	WOFClass= mktparam.getPDParam().WOFClass
	Loan 	= 	db.session.query(MKT_LOAN_CONTRACT.ID, MKT_LOAN_CONTRACT.ContractCustomerID, MKT_LOAN_CONTRACT.Disbursed, MKT_LOAN_CONTRACT.Amount, MKT_LOAN_CONTRACT.Currency, MKT_LOAN_CONTRACT.Branch, MKT_CUSTOMER.LastNameEn, MKT_CUSTOMER.FirstNameEn).\
				join(MKT_CUSTOMER, MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
				filter(MKT_LOAN_CONTRACT.ID == ID).\
				filter(MKT_LOAN_CONTRACT.AssetClass == WOFClass).\
				first()

	return Loan

def loadCustomerID():
	try:

		CustomerID	= 	""
		Loan 		= 	getLoanInformation()
		if Loan:
			CustomerID = Loan.ContractCustomerID
		else:
			if request.method == 'POST':
				ID = request.form['ID']
			else:
				ID = g.formID
			WriteOff = MKT_WRITE_OFF.query.get(ID)
			if not WriteOff:
				if not '@' in ID:
					flash(msg_warning + "This loan contract not allow to write-off.")

		return CustomerID

	except:
		raise

def loadCustomerName():
	try:

		CustomerName	= 	""
		Loan 			= 	getLoanInformation()
		if Loan:
			CustomerName = Loan.LastNameEn + " " + Loan.FirstNameEn

		return CustomerName

	except:
		raise

def loadCurrency():
	try:

		Currency 	= 	""
		Loan 		=	getLoanInformation()
		if Loan:
			Currency = Loan.Currency

		return Currency

	except:
		raise

def loadDisbursed():
	try:

		Disbursed 	= 	"0"
		Loan 		=	getLoanInformation()
		if Loan:
			Disbursed = Loan.Disbursed

		return Disbursed

	except:
		raise

def loadBalance():
	try:

		Balance 	= 	"0"
		Loan 		=	getLoanInformation()
		if Loan:
			Balance = Loan.Amount

		return Balance

	except:
		raise

def loadOverdueAmt():
	try:

		if request.method == 'POST':
			ID = request.form['ID']
		else:
			ID = g.formID

		AccrCurrentInt 	=	0
		LoanObj 	=	MKT_LOAN_CONTRACT.query.get(ID)
		if LoanObj:
			AccrCurrentInt 	=	LoanObj.AccrCurrentInt

		OverdueAmt 	= 	0
		PD 			=	MKT_PAST_DUE.query.get("PD" + ID)
		if PD:
			OverdueAmt = PD.TotODAmount

		return OverdueAmt + AccrCurrentInt

	except:
		raise

def loadBankDate():
	return mktdate.getBankDate()

def loadWOFAmount():
	try:

		TotODAmount = 	loadOverdueAmt()
		Principal	=	loadBalance()
		WOFAmount 	=	float(Principal) + float(TotODAmount)

		return str(WOFAmount)

	except:
		raise

def loadBankDate():
	try:

		return mktdate.getBankDate()

	except:
		raise

def loadBranch():
	try:

		Branch 	= 	""
		Loan 	=	getLoanInformation()
		if Loan:
			Branch = Loan.Branch

		return Branch

	except:
		raise

def closeLoanAppliction(LoanID):
	try:
		LoanAppList = []
		LoanContractObj 	=	MKT_LOAN_CONTRACT.query.get(LoanID)
		LoanAppList.append(LoanContractObj.LoanApplicationID)
		if LoanAppList:
			mktloan.setClosedLoanApplication(LoanAppList)
	except:
		raise

class FRM_WRITE_OFF(exform):

	CustomerID 		=	TextField(requiredlabel("Customer ID", "*"), [validators.Required()], default=loadCustomerID)
	CustomerName 	=	TextField(requiredlabel("Customer Name", "*"), [validators.Required()], default=loadCustomerName)
	Currency 		=	TextField(requiredlabel("Currency", "*"), [validators.Required()], default=loadCurrency)
	Disbursed 		=	TextField(requiredlabel("Disbursed", "*"), [validators.Required()], default=loadDisbursed)
	Balance 		= 	TextField(requiredlabel("Balance", "*"), [validators.Required()], default=loadBalance)
	OverdueAmt 		=	TextField(requiredlabel("Overdue Amount", "*"), [validators.Required()], default=loadOverdueAmt)
	WOFAmount 		=	TextField(requiredlabel("Write-Off Amount", "*"), [validators.Required()], default=loadWOFAmount)
	WOFDate 		= 	TextField(requiredlabel("Write-Off Date", "*"), [validators.Required()], default=loadBankDate)
	WOFType 		= 	SelectField(requiredlabel("Write-Off Type","*"),
							choices=[('WOF', 'Written-Off'), ('TMN', 'Paid-off')],
							coerce=str,
							default='WOF',
							validators=[validators.Required()]
						)
	Branch 			=	TextField(requiredlabel("Branch", "*"), [validators.Required()], default=loadBranch)
	Description 	=	TextAreaField("Description")

	def validate_ValueDate(form, field):
		try:
			Holiday 	= mktHoliday.getHoliday()
			ValueDate 	= request.form['ValueDate']
			ValueDate 	= datetime.strptime(str(ValueDate),'%Y-%m-%d').date()
			check 		= mktDay.isNonWorkingDay(ValueDate, Holiday)
			if check:
				raise ValidationError("Value date must be different holiday.")

			systemDate 	= mktdate.getBankDate()
			systemDate 	= str(systemDate).replace("-", "")
			ValueDate 	= str(ValueDate).replace("-", "")

			if int(systemDate) > int(ValueDate):
				raise ValidationError("Value date must be bigger than or equal to system bank date.")

		except:
			raise

	@staticmethod
	def setWidth():
		return [('CustomerID', len3), ('CustomerName', len3), ('Currency', len1), ('ValueDate', len3)]

	@staticmethod
	def setDisable():
		return [('CustomerID'), ('CustomerName'), ('Currency'), ('Disbursed'),
				('Balance'), ('OverdueAmt'), ('WOFAmount'), ('Branch'),('WOFDate'),
				('WOFType')]

	@staticmethod
	def moneyField():
		return [('Disbursed', 'Currency'), ('Balance', 'Currency'),
				('OverdueAmt', 'Currency'), ('WOFAmount', 'Currency')]

	@staticmethod
	def formatMoney():
		return ["Disbursed", "Balance", "OverdueAmt", "WOFAmount"], "Currency"

	@staticmethod
	def formReadOnly():
		return "AUTH"

	# @staticmethod
	# def formReadOnly():
	# 	return True # default value is False
	
	@staticmethod
	def listField():
		return ["ID", "CustomerID", "CustomerName", "Currency", "Disbursed",
				"Balance", "OverdueAmt", "WOFAmount"]

	@staticmethod
	def beforeAuthorize():
		LoanID = g.formID
		mktloan.setLoanWriteOff(LoanID, 0)
		return True

	@staticmethod
	def reverseRec():
		flash(msg_error + " Record not allow to reverse.")
		return False, ""

	@staticmethod
	def beforeInsert():
		LoanID 			= 	request.form['ID']
		NumOfAuth 		= 	g.getNAuthorize
		Resource 		= 	"INAU"

		if int(NumOfAuth) == 0:
			
			mktloan.setLoanWriteOff(LoanID, 0)
			# closeLoanAppliction(LoanID)

		return True
