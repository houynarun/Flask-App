from flask 						import flash
from wtforms 					import DecimalField, IntegerField
from app.mktcore.wtfimports 	import *
from .models 					import *
from datetime 					import *
import app.tools.mktdb 			as mktdb
import app.tools.mktaudit 		as mktaudit

class FRM_WRITE_OFF_DE(exform):

	CustomerID		=	TextField("Customer ID")
	CustomerName 	=	TextField("Customer Name")
	AccountNumber 	=	TextField("Account Number")
	Currency 		=	TextField("Currency")
	LoanDisbursed 	=	TextField("Loan Disbursed")
	LoanBalance 	=	TextField("Loan Balance")
	TotWOFPrincipal	=	TextField("WOF Principal Amount")
	TotPrincipalDue	=	TextField("Principal Overdue Amount")
	TotWOFInterest 	=	TextField("WOF Interest Amount")
	TotInterestDue 	=	TextField("Interest Overdue Amount")
	TotWOFPenalty 	=	TextField("WOF Penalty Amount")
	TotPenaltyDue 	=	TextField("Penalty Overdue Amount")
	TotWOFCharge 	=	TextField("WOF Charge Amount")
	TotChargeDue 	=	TextField("Charge Overdue Amount")
	TotODAmount 	=	TextField("Total Overdue Amount")
	TotWOFAmount 	=	TextField("Total Write-Off Amount")
	TotalRecoveryAmount = TextField("Total Recovery Amount")
	ValueDate 		=	TextField("Loan Value Date")
	WOFDate 		=	TextField("Write-Off Date")
	LastRecoveryDate=	TextField("Last Recovery Date")
	DefaultDate 	=	TextField("Default Date")
	MaturityDate 	=	TextField("Loan Maturity Date")
	Officer 		=	TextField("Officer ID")

	@staticmethod
	def listField():
		return ["ID", "CustomerID", "CustomerName", "AccountNumber", "Currency", "WOFDate",
				"LoanDisbursed", "LoanBalance", "TotPrincipalDue", "TotInterestDue",
				"TotWOFAmount", 

				]

	@staticmethod
	def setDisable():
		return [("CustomerID"), ("CustomerName"), ("Currency"), ("LoanDisbursed"),
				("LoanBalance"), ("TotPrincipalDue"), ("TotInterestDue"), ("TotPenaltyDue"),
				("TotChargeDue"), ("TotODAmount"), ("TotWOFAmount"), ("ValueDate"),
				("MaturityDate"), ("WOFDate"), ("Officer"), ("AccountNumber"),
				("TotWOFPrincipal"), ("TotWOFInterest"), ("TotWOFPenalty"), ("TotWOFCharge"),
				("TotalRecoveryAmount"),("LastRecoveryDate"),("DefaultDate")]

	@staticmethod
	def moneyField():
		return [("LoanDisbursed", "Currency"), ("LoanBalance", "Currency"), ("TotPrincipalDue", "Currency"),
				("TotInterestDue", "Currency"), ("TotChargeDue", "Currency"), ("TotPenaltyDue", "Currency"),
				("TotODAmount", "Currency"), ("TotWOFAmount", "Currency"), ("TotWOFPrincipal", "Currency"),
				("TotWOFInterest", "Currency"), ("TotWOFPenalty", "Currency"), ("TotWOFCharge", "Currency"),
				("TotODAmount", "Currency"), ("TotWOFAmount", "Currency"), ("TotalRecoveryAmount", "Currency")]

	@staticmethod
	def formatMoney():
		return ["LoanDisbursed", "LoanBalance", "TotPrincipalDue",
				"TotInterestDue", "TotChargeDue", "TotPenaltyDue",
				"TotODAmount", "TotWOFAmount", "TotWOFPrincipal", 
				"TotWOFInterest", "TotWOFPenalty", "TotWOFCharge",
				"TotODAmount", "TotWOFAmount", "TotalRecoveryAmount"], "Currency"

	@staticmethod
	def setDisableforEdit():  # override base class method 
		return [ ('CustomerID'),
				('CustomerName'),
				('AccountNumber'),
				('Currency'),
				('LoanDisbursed'),
				('LoanBalance'),
				('TotPrincipalDue'),
				('TotWOFPrincipal'),
				('TotInterestDue'),
				('TotWOFInterest'),
				('TotPenaltyDue'),
				('TotWOFPenalty'),
				('TotChargeDue'),
				('TotWOFCharge'),
				('TotODAmount'),
				('TotWOFAmount'),
				('ValueDate'),
				('MaturityDate'),
				('WOFDate'),
				('Officer')]

	@staticmethod
	def formReadOnly():
		ID = g.formID
		WriteOffDetail = MKT_WRITE_OFF_DE_INAU.query.get(ID)
		if WriteOffDetail:
			Status = WriteOffDetail.Status
			if Status == "RNAU":
				return False
		return True # default value is False


	@staticmethod
	def beforeNewID ():

		return True,"Not allow new record in list write-off loan, You need to go (Loan Write-Off)"


	@staticmethod
	def beforeAuthorize():
		ID = g.formID
		# mktloan.setLoanWriteOff(ID, 0)
		RemoveLoanWrite(ID,RemoveDetail=True)
		return True

	@staticmethod
	def reverseRec():
		NumOfAuth 	= 	g.getNAuthorize
		ID 			= g.formID
		if int(NumOfAuth) == 0:
			RemoveLoanWrite(ID,RemoveDetail=True)
		return True, ""


def RemoveLoanWrite(ID,RemoveDetail=False):
	try:
		if RemoveDetail:
			mktaudit.moveAUTHtoHIST(MKT_WRITE_OFF,MKT_WRITE_OFF_HIST,ID)
			mktdb.deleteRecord(MKT_WRITE_OFF,[MKT_WRITE_OFF.ID == ID])

	except Exception as e:
		raise e
