from flask 							import flash
from app.mktcore.imports 			import *
# from .models 						import *
from .forms 						import *
from .WriteOffDetails				import *
from .LoanRecovery 					import *
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.PD.models 					import MKT_PAST_DUE

import app.tools.mktmoney 			as mktmoney
import app.Customer.centre 			as customer
import app.tools.mktparam 			as mktparam
import app.tools.user 				as mktuser

registerCRUD(admin, '/LoanWriteOff', 'LoanWriteOff', FRM_WRITE_OFF, [MKT_WRITE_OFF])
registerCRUD(admin, '/LoanWriteOffDetail', 'LoanWriteOffDetail', FRM_WRITE_OFF_DE, [MKT_WRITE_OFF_DE])
registerCRUD(admin, '/LoanRecovery', 'LoanRecovery', FRM_LOAN_RECOVERY, [MKT_LOAN_RECOVERY])

@app.route("/Morakot/LoanWriteOff/Check/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanWriteOff():
	try:

		Branch 		= request.args.get('Branch') if 'Branch' in request.args else mktuser.getBranch(session["ChangeBranch"]).ID
		WOFClass 	= mktparam.getPDParam().WOFClass
		Loan 		= db.session.query(MKT_LOAN_CONTRACT.ID, 
						MKT_LOAN_CONTRACT.Disbursed, 
						MKT_LOAN_CONTRACT.Amount, 
						MKT_LOAN_CONTRACT.AccrCurrentInt, 
						MKT_LOAN_CONTRACT.Currency, 
						MKT_LOAN_CONTRACT.ContractCustomerID).\
			   		  order_by(MKT_LOAN_CONTRACT.ValueDate.asc()).\
			   		  filter(MKT_LOAN_CONTRACT.AssetClass == WOFClass).\
			   		  filter(MKT_LOAN_CONTRACT.Branch == Branch).\
					  all()

		if not Loan:
			flash(msg_warning + " No loan contract for write-off.")

		return render_template("schedule/loanwriteoff.html",
							   Loan 			= Loan,
							   getToODAmount    = getToODAmount,
							   toMoney 			= mktmoney.toMoney,
							   getCurrencyObj 	= mktmoney.getCurrencyObj,
							   getCurrencySymbol= mktmoney.getCurrencySymbol,
							   lookupTable 		= customer.lookupTable,
							   float 			= float)

	except:
		raise

def getToODAmount(ID):
	try:
		PDObj = db.session.query(MKT_PAST_DUE.TotODAmount).filter(MKT_PAST_DUE.ID==ID).first()
		TotODAmount = 0
		if PDObj:
			TotODAmount = PDObj.TotODAmount

		return TotODAmount

	except Exception as e:
		raise e