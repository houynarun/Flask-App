
from app.mktcore.imports        import Decimal, mktmoney, func, and_
import app.tools.mktsetting     as mktsetting
import app.tools.mkttool        as mkttool
import app.tools.mktgl          as mktgl
from app.Currency.models        import *
from app.LoanContract.models 	import *
import app.tools.mktdate            as mktdate
import calendar
import datetime
def getSplitData(ListData):
	ListData = str(ListData).replace(',', ' ')
	ListData = ListData.split()

	return ListData

def getNBCMFIFieldSetting(NBCMFIField=None):

	if not NBCMFIField:
		return {}

	NBCMFIField = mkttool.getDictionaryObj(mktsetting.getAppSetting(NBCMFIField))

	if not NBCMFIField:
		return {}

	for Key in NBCMFIField:
		NBCMFIField[Key] = str(NBCMFIField[Key]).replace('\r','')

	return NBCMFIField

def getGLValueFromField(Branch = "ALL", Period = 2,NBCMFIFieldSetting='',NBCMFIFieldKey='', NBCExchangeRateDict={},**Kargs):

	GLValue = 0
	NBCMFIFieldSetting = getNBCMFIFieldSetting(NBCMFIFieldSetting)
	
	if not NBCMFIFieldSetting.has_key(NBCMFIFieldKey):
		return  Decimal(GLValue)

   
	CurrencyObj     = MKT_CURRENCY.query.all()

	for Currency in CurrencyObj:
		GLVal    = mktgl.getGLValue(NBCMFIFieldSetting[NBCMFIFieldKey], Branch, Period, Currency.ID, **Kargs)
		GLValue    +=   Decimal(GLVal) * Decimal(NBCExchangeRateDict.get(Currency.ID,1)) / 1000000



	GLValue = Decimal(mktmoney.formatNumber(float(GLValue), 1, 2).replace(',',''))
	return  Decimal(GLValue)

def getAmountBeforeLoanReachMaturity(Branch = "ALL"):
	BankDate 	= mktdate.getBankDate()
	now 		= datetime.datetime.now()
	PrevMonth 	= now.month -1
	if PrevMonth == 0:
		PrevMonth = 12
	NumberOfDay = calendar.monthrange(now.year, PrevMonth)[1]
	LoanAmount = db.session.query(
								MKT_LOAN_CONTRACT.Branch,
								MKT_LOAN_CONTRACT.OutstandingAmount.label('OutstandingAmount')
								).\
								filter(
										(func.DATE(MKT_LOAN_CONTRACT.MaturityDate)-func.DATE(BankDate)) <= NumberOfDay,
										(func.DATE(MKT_LOAN_CONTRACT.MaturityDate)-func.DATE(BankDate)) >= 1
									).subquery()

	if Branch != 'ALL':
		LoanAmount = db.session.query(func.sum(LoanAmount.c.OutstandingAmount).label('OutstandingAmount')).\
									filter(LoanAmount.c.Branch.in_(Branch)).\
									subquery()

	LoanAmount = db.session.query(func.sum(LoanAmount.c.OutstandingAmount).label('OutstandingAmount')).all()
	
	if LoanAmount[0][0]:
		return Decimal(mktmoney.formatNumber(float(LoanAmount[0].OutstandingAmount), 0, 2))

	return Decimal(0.00)

