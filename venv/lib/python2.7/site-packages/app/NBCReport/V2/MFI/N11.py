# -*- coding: utf-8 -*-
'''
Report Name: 11 (MONTHLY REPORT ON LOANS TO INSIDERS AND RELATED PARTIES)
'''

from app.mktcore.imports 		import *

import app.tools.mktsetting     as mktsetting
import app.tools.mktmoney       as mktmoney
import app.tools.mktnbc         as mktnbc
import app.tools.mktaddress 	as mktaddress
import app.NBCReport.V1.N016 	as N016
import app.NBCReport.V2.MFI.N05 	as N05

from decimal                    import *

from app.LoanContract.models    import MKT_LOAN_CONTRACT
from app.Customer.models        import MKT_CUSTOMER
from app.Sector.models          import MKT_SECTOR
from app.LoanProduct.models 	import MKT_LOAN_PRODUCT
from app.Collateral.models 		import MKT_COLLATERAL_DE, MKT_COLLATERAL
from app.CollateralType.models 	import MKT_COLLATERAL_TYPE
from app.LoanApplication.models import MKT_LOAN_COLLATERAL
from app.Currency.models 		import MKT_CURRENCY
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP

def getMFI11(ReportID, Branch = "ALL", ReportedDate = "", Period = 2, Month = "", Year = ""):
	''' This function must return result like below:
			Result = {
				'Data': 		Data,
				'Excel': 		Excel,
				'ReportHeader': ReportHeader,
				'TableHeader': 	TableHeader
				}
	'''
	try:
		ID 					= 	"N001" # ID of Report 01 Balance Sheet
		TotalEquityLine 	=	'57'
		Branch = "ALL"

		Condition = []
		if Year and Month:
			GLTable   	= MKT_GL_BALANCE_BACKUP
			Condition 	= [GLTable.GLYear == Year,GLTable.GLMonth == Month]
			CYear 	  	= Year
			CMonth 	  	= Month
		else:
			GLTable   	= MKT_GL_BALANCE
			BankDate  	= mktdate.getBankDate()
			CYear 	  	= BankDate.year
			CMonth 	  	= BankDate.month

		GLObj   		=   GLTable.query.filter(*Condition)

		LineObj 		=	mktnbc.getNBCLineReport(ID, int(Period), Branch, ReportedDate, Year=Year, Month=Month)[0].get("Data",[])
		# TotalNetWorth 	=	mktnbc.getNBCLineValue(TotalEquityLine, LineObj).get('TotalInRiels',0)
		Result001 = N05.getMFI05("ALL", ReportedDate, Period, Year, Month,True)
		TotalNetWorth 	=	Result001

		ReportName 		= 'MONTHLY REPORT ON LOANS TO INSIDERS AND RELATED PARTIES'
		Title 			= u'របាយការណ៍ប្រចាំខែស្តីពី ឥណទានចំពោះអ្នកខាងក្នុង និងសម្ព័ន្ធញ្ញាតិ'
		LoanType		= mktsetting.getAppSetting('NBCInsiderOtherPartyLoan')

		ReportHeader 	=   mktnbc.getHeaderReport(	ReportName 		=	ReportName,
													Title 			=	Title,
													Form 			=	ReportID,
													NetWorth		=	mktmoney.formatNumber(float(TotalNetWorth), 1, 2)
													)
		Result			=   {}
		Data 			= 	[]
		Excel 			= 	{}
		TableHeader 	= 	{}

		TableHeader = mktnbc.setTableHeader(Text=u'ល.រ \n No.', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")		
		
		#-----------------------------------------------------------------------------------#
		TableHeader = mktnbc.setTableHeader(Text=u"អ្នកខ្ចី \n BORROWERS", 
									 Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"គោត្តនាម និងនាម \n Name", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"អាស័យដ្ឋាន \n Address", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")
		#-----------------------------------------------------------------------------------#
		TableHeader = mktnbc.setTableHeader(Text=u"កាលបរិច្ឆេទ \n Loan Date of", 
									 Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"បញ្ចេញឥណទាន \n Disbursement", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"កាលកំណត់ \n Maturity", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

		#-----------------------------------------------------------------------------------#

		TableHeader = mktnbc.setTableHeader(Text=u'ប្រភេទឥណទាន \n Types of Loan *', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")		

		TableHeader = mktnbc.setTableHeader(Text=u'កម្រិតអនុម័ន \n Approved Limit', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")	

		TableHeader = mktnbc.setTableHeader(Text=u'ឥណទានជាក់ស្តែង \n Outstanding Loans', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")		

		TableHeader = mktnbc.setTableHeader(Text=u'អត្រារការប្រាក់ប្រចាំឆ្នាំ \n Yearly Interest Rate (%)', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")	

	 	#-----------------------------------------------------------------------------------#
		TableHeader = mktnbc.setTableHeader(Text=u"វត្ថុធានា \n Collateral", 
									 Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"ប្រភេទ \n Type", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"តម្លៃ \n Value", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

		#-----------------------------------------------------------------------------------#	

		TableHeader = mktnbc.setTableHeader(Text=u'អនុបាតឥណទានធៀបនឹងវត្ថុធានា \n Loan to Value Ratio (%)', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")		

		TableHeader = mktnbc.setTableHeader(Text=u'សរុបឥណទានធំៗធៀបនឹងមូលនិធិផ្ទាល់សុទ្ធ \n Total Exposure / Net Worth (%)', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")	
		#Row3
		for index in range(1,14):
			if index == 7:
				TableHeader = mktnbc.setTableHeader(Text=u'1', 
									 Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")	
			elif index == 8:
				TableHeader = mktnbc.setTableHeader(Text=u'2', 
									 Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")	
		 	elif index == 11:
				TableHeader = mktnbc.setTableHeader(Text=u'3', 
									 Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")	
		 	elif index == 12:
				TableHeader = mktnbc.setTableHeader(Text=u'4 = 1 / 3', 
									 Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")	
			elif index == 13:
				TableHeader = mktnbc.setTableHeader(Text=u'7 = 2 / NW', 
									 Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")	
			else:
				TableHeader = mktnbc.setTableHeader(Text=u'', 
									 Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")	

		Data,Excel,TotOutstanding = getLargeExposureDetail(Branch, ReportHeader, TotalNetWorth, LoanType, ReportID)
		LoanType11			= mktsetting.getAppSetting('NBCInsiderOtherPartyLoan')
		Data11,Excel11,TotOutstanding11 = getLargeExposureDetail(Branch, ReportHeader, TotalNetWorth, LoanType11, "11")
		TotalNetWorth 		= Decimal(mktmoney.formatNumber(TotalNetWorth,1,2).replace(',',''))
		TotOutstanding11 	= Decimal(mktmoney.formatNumber(TotOutstanding11,1,2).replace(',',''))
		TotalNetWorth 		= TotalNetWorth
		ReportHeader 		=   mktnbc.getHeaderReport(	ReportName 		=	ReportName,
														Title 			=	Title,
														Form 			=	ReportID,
														NetWorth		=	mktmoney.formatNumber(float(TotalNetWorth), 1, 2)
														)

		Result.update({'TableHeader':TableHeader,'ReportHeader':ReportHeader,'Data':Data,'Excel':Excel})

		'''
		BORDER_NONE = None
		BORDER_DASHDOT = 'dashDot'
		BORDER_DASHDOTDOT = 'dashDotDot'
		BORDER_DASHED = 'dashed'
		BORDER_DOTTED = 'dotted'
		BORDER_DOUBLE = 'double'
		BORDER_HAIR = 'hair'
		BORDER_MEDIUM = 'medium'
		BORDER_MEDIUMDASHDOT = 'mediumDashDot'
		BORDER_MEDIUMDASHDOTDOT = 'mediumDashDotDot'
		BORDER_MEDIUMDASHED = 'mediumDashed'
		BORDER_SLANTDASHDOT = 'slantDashDot'
		BORDER_THICK = 'thick'
		BORDER_THIN = 'thin'
		'''
		CellSyle = {'G8':'left*thin,FF000000:right*thin,FF000000',
					'K7':'top*medium,FF000000',
					'M8':'right*medium,FF000000',
					'L8':'bottom*thin,FF000000:right*thin,FF000000',
					'I8':'left*thin,FF000000:bottom*thin,FF000000',
					'B25':'bottom*medium,FF000000',
					'C25':'bottom*medium,FF000000',
					'D25':'bottom*medium,FF000000',
					'E25':'bottom*medium,FF000000',
					'F25':'bottom*medium,FF000000'
					}

		return Result, CellSyle

	except Exception as e:
		raise

def getLargeExposureDetail(Branch, ReportHeader, TotalNetWorth, LoanType, ReportID):
	try:
		TotalNetWorth = Decimal(TotalNetWorth)
		RecordRow 	= []
		ExcelRecord 	= {}
		ExcelRecord.update({				
				"D3" : ReportHeader.get('ReportedDate',""),
				"C4" : ReportHeader.get('CompanyName',""),
				"C5" : TotalNetWorth,
				"K6" : Decimal(ReportHeader.get('ReportingRate',0))
			})

		CurrencyDic = ReportHeader['DicExchangeRate'] 
		LoanObj 	= getQueryLargeExposure(Branch,LoanType,TotalNetWorth).all()
		i 			= 1

		SectorObj 			= MKT_SECTOR.query

		NBCLargeExposureLoanTypes 		=	mktsetting.getAppSetting('NBCLargeExposureLoanTypes').splitlines()
		DictSetting = {}
		for item in NBCLargeExposureLoanTypes:
			Value = item.split('*')
			DictSetting.update({Value[0]:Value[1].split()})
		NBCLoanTypeOverDraft 			=	DictSetting.get('Overdraft',[])
		NBCLoanTypeTermLoan 			=	DictSetting.get('TermLoan',[])
		NBCLoanTypeTrustReceipt 		=	DictSetting.get('TrustReceipt',[])
		NBCLoanTypeBillOfExchange 		=	DictSetting.get('BillOfExchange',[])
		NBCLoanTypeFinancingCommitment 	=	DictSetting.get('FinancingCommitment',[])
		NBCLoanTypeGuarantee 			=	DictSetting.get('Guarantee',[])
		NBCLoanTypeOthers 				=	DictSetting.get('Others',[])

		LoanTypeList = [("1","OverDraft", NBCLoanTypeOverDraft),
					 	("2","Term Loan", NBCLoanTypeTermLoan),
					 	("3","Trust Receipt", NBCLoanTypeTrustReceipt),
					 	("4","Bill of Exchange", NBCLoanTypeBillOfExchange),
					 	("5","Financing Commitment", NBCLoanTypeFinancingCommitment),
					 	("6","Guarantee", NBCLoanTypeGuarantee),
					 	("7","Others", NBCLoanTypeOthers)]

		# Default first cell in Excel file (6-Large Exposure)
		CellRow 	= 10
		TotApprovedAmount 	= 0
		TotOutstanding 		= 0
		TotValuationPrice 	= 0
		TotExposureAmount 	= 0
		TotInterestRate		= 0

		for item in LoanObj:
			Currency 		= item.Currency
			ExchangeRate 	= CurrencyDic.get(Currency)

			CustomerName 	= '%s %s - %s %s' %(item.LastNameEn,item.FirstNameEn,item.LastNameKh,item.FirstNameKh)
			Address 		= mktaddress.getAddress(item.Province, item.District, item.Commune, item.Village, Locale='kh')
			ValueDate 		= str(item.ValueDate)
			MaturityDate 	= str(item.MaturityDate)
			LoanProduct		= str(item.LoanProductDescription)
			ApprovedAmount 	= Decimal(item.ApprovedAmount)
			Outstanding     = Decimal(item.OutstandingAmount)
			InterestRate 	= Decimal(item.InterestRate)
			CollateralType 	= item.CollateralDescription if item.CollateralDescription else ''
			ValuationPrice 	= item.ValuationPrice if item.ValuationPrice else 0.00
			ExposureAmount = item.TotalExposure
			CollateralRatio = item.LoanValueRatio if item.LoanValueRatio else 0.00
			TotApprovedAmount 	+= ApprovedAmount
			TotOutstanding 		+= Outstanding
			TotValuationPrice 	+= Decimal(ValuationPrice) 

			# if ReportID == "10":
			# LoanProduct = "Others"
			for loanTypeItem in LoanTypeList:
				if item.LoanProduct in loanTypeItem[2]:
					LoanProductID = loanTypeItem[0]
					LoanProduct = loanTypeItem[1]

			# elif ReportID == "11":
			# 	LoanProduct = LoanProduct

			RecordRow.append({
								1:str(i),
								2:CustomerName,
								3:Address,
								4:ValueDate,
								5:MaturityDate,
								6:LoanProduct,
								7:mktmoney.formatNumber(ApprovedAmount),
								8:mktmoney.formatNumber(Outstanding),
								9:"%s%%" % (InterestRate),
								10:CollateralType,
								11:mktmoney.formatNumber(ValuationPrice) if ValuationPrice != 0 else '-',
								12:'{percent:.2%}'.format(percent=CollateralRatio) if ValuationPrice != 0 else '#DIV/0!',
								13:'{percent:.2%}'.format(percent=ExposureAmount),
								'LineType':'GH',
								'Indent':0,
								'RowBGColor':'',
								'LineFormat':''
							})
			ExcelRecord.update({
					"B%s"%(CellRow) : CustomerName,
					"C%s"%(CellRow) : Address,
					"D%s"%(CellRow) : ValueDate,
					"E%s"%(CellRow) : MaturityDate,
					"F%s"%(CellRow) : LoanProduct,
					"G%s"%(CellRow) : ApprovedAmount,
					"H%s"%(CellRow) : Outstanding,
					"I%s"%(CellRow) : InterestRate/100,
					"J%s"%(CellRow) : CollateralType,
					"K%s"%(CellRow) : ValuationPrice
				})

			i 		+= 1
			CellRow += 1

		# TOTAL
		TotCollateralRatio 	= TotApprovedAmount / TotValuationPrice if TotValuationPrice != 0 else 0
		TotExposureAmount	= TotOutstanding / TotalNetWorth if TotalNetWorth != 0 else 0
		RecordRow.append({
							1:'',
							2:'',
							3:u'សរុប',
							4:u'',
							5:'',
							6:'',
							7:mktmoney.formatNumber(TotApprovedAmount),
							8:mktmoney.formatNumber(TotOutstanding),
							9:'',
							10:'',
							11:mktmoney.formatNumber(TotValuationPrice),
							12:'{percent:.2%}'.format(percent=TotCollateralRatio),
							13:'{percent:.2%}'.format(percent=TotExposureAmount),
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
						})
		return RecordRow,ExcelRecord, TotOutstanding
	except Exception as e:
		raise

def getQueryLargeExposure(Branch, LoanType,TotalNetWorth):

	LoanObj = getLoanContract(TotalNetWorth)
	CollateralObj 	= getCollateral()
	FinalResult 	= db.session.query(
										LoanObj,
										case(
											[(
												CollateralObj.c.ValuationPrice != 0,
												LoanObj.c.ApprovedAmount / CollateralObj.c.ValuationPrice
											)],
										else_=0
										).label('LoanValueRatio'),
										CollateralObj
										).\
										outerjoin(CollateralObj, CollateralObj.c.LoanID==LoanObj.c.ID)

	if LoanType != "ALL":
		LoanType    =   LoanType.split()
		FinalResult     =   FinalResult.\
						filter(LoanObj.c.LoanProduct.in_(LoanType))

	if Branch != "ALL":
		Branch      =   Branch.split()
		FinalResult     =   FinalResult.\
						filter(LoanObj.c.Branch.in_(Branch))
	
	return FinalResult

def getLoanContract(NetWorthAmount):
	ReadAs 			= 1000000
	LoanPartyID 	= mktsetting.getAppSetting('NBCInsiderOtherPartyLoan').split()
	LoanObj = db.session.query(	MKT_LOAN_CONTRACT.Branch,
								MKT_LOAN_CONTRACT.ID,
								MKT_LOAN_CONTRACT.ContractCustomerID,
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_CUSTOMER.Province,
								MKT_CUSTOMER.District,
								MKT_CUSTOMER.Commune,
								MKT_CUSTOMER.Village,
								MKT_LOAN_CONTRACT.LoanProduct,
								MKT_LOAN_PRODUCT.Description.label('LoanProductDescription'),
								MKT_LOAN_CONTRACT.LoanPurpose,
								MKT_LOAN_CONTRACT.Currency,
								(MKT_LOAN_CONTRACT.Disbursed * cast(MKT_CURRENCY.OtherRate1, Float)/ReadAs).label('Disbursed'),
								MKT_LOAN_CONTRACT.ValueDate,
								MKT_LOAN_CONTRACT.MaturityDate,
								MKT_LOAN_CONTRACT.InterestRate,
								(MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float)/ReadAs).label("OutstandingAmount"),
								(MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float)/ReadAs/NetWorthAmount).label("TotalExposure"),
								(MKT_LOAN_CONTRACT.ApprovedAmount * cast(MKT_CURRENCY.OtherRate1, Float)/ReadAs).label('ApprovedAmount')
						).\
						join(MKT_CUSTOMER, MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
						join(MKT_LOAN_PRODUCT, MKT_LOAN_PRODUCT.ID==MKT_LOAN_CONTRACT.LoanProduct).\
						join(MKT_CURRENCY, MKT_CURRENCY.ID==MKT_LOAN_CONTRACT.Currency).\
						filter(MKT_LOAN_CONTRACT.LoanProduct.in_(LoanPartyID)).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat =='Y').subquery()
	return LoanObj

def getCollateral():
	ReadAs 			= 1000000
	CollateralObj = db.session.query(
									MKT_LOAN_COLLATERAL.ID.label('LoanID'),
									MKT_COLLATERAL.ID.label('CollateralID'),
									MKT_COLLATERAL_TYPE.Description.label('CollateralDescription'),
									MKT_COLLATERAL_DE.CollateralType.label('CollateralType'),
									(func.sum(MKT_COLLATERAL_DE.ValuationPrice * cast(MKT_CURRENCY.OtherRate1, Float))/ReadAs).label('ValuationPrice'),
									).\
									join(MKT_COLLATERAL, MKT_COLLATERAL.ID==MKT_LOAN_COLLATERAL.Collateral).\
									join(MKT_COLLATERAL_DE, MKT_COLLATERAL.ID==MKT_COLLATERAL_DE.CollateralID).\
									join(MKT_CURRENCY, MKT_CURRENCY.ID == MKT_COLLATERAL_DE.Currency).\
									outerjoin(MKT_COLLATERAL_TYPE,MKT_COLLATERAL_TYPE.ID==MKT_COLLATERAL_DE.CollateralType).\
									group_by(MKT_LOAN_COLLATERAL.ID, MKT_COLLATERAL.ID,MKT_COLLATERAL_DE.CollateralType,MKT_CURRENCY.OtherRate1,MKT_COLLATERAL_TYPE.Description).\
									subquery()
	return CollateralObj
