# -*- coding: utf-8 -*-
'''
Report Name: LOANS BY INDUSTRY AND OWNERSHIP IN THE ECONOMIC SECTOR
'''

from app.mktcore.imports        import *
import app.tools.mktdate        as mktdate
import app.tools.mktsetting     as mktsetting
import app.tools.mktmoney       as mktmoney
import app.tools.mktnbc         as mktnbc
import app.tools.mktmessage     as mktmessage
from app.LoanContract.models    import *
from app.Customer.models        import MKT_CUSTOMER
from app.Sector.models          import MKT_SECTOR
from decimal                    import *
from app.Currency.models 		import *
from app.LoanProduct.models 	import *
from app.PD.models 				import *
from app.AssetClass.models 		import *

def getSplitData(ListData):
	ListData = str(ListData).replace(',', ' ')
	ListData = ListData.split()

	return ListData

def getMFI17(Branch = "ALL", ReportedDate = ""):
	try:
		Result          = {}
		Data            = []
		Excel           = {}

		ReportHeader    = mktnbc.getHeaderReport(   ReportName      =   u'MONTHLY REPORT ON LOANS BY INDUSTRY AND OWNERSHIP IN THE ECONOMIC SECTOR',
													Title           =   u'របាយការណ៍ប្រចាំខែស្តីពី ឥណទានតាមប្រភេទជំនួញនិងម្ចាស់កម្មសិទ្ធិក្នុងវិស័យសេដ្ខកិច្ច',
													Form            =   '17'
													)

		TableHeader     = {}
		TableHeader     = mktnbc.setTableHeader(Text=u'កម្មសិទ្ធិភាពអាជីវកម្ម\nBy Ownership\n\nប្រភេទជំនួញ\nBy Industry', 
											Rowspan=4,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		# TableHeader     = mktnbc.setTableHeader(Text=u'', 
		#                                     Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#

		TableHeader     = mktnbc.setTableHeader(Text=u'និវេសជន\nResidents', 
											Rowspan=0,Colspan=6,RowIndex=1, TableHeader=TableHeader, Class="text-center")

		TableHeader     = mktnbc.setTableHeader(Text=u'ឥណទានក្រុម\nGroup Loans', 
											Rowspan=0,Colspan=2,RowIndex=2, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'ចំនួនគណនេយ្យ\n# of Accounts', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'សមតុល្យឥណទាន\nOutstanding Amount', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		
		TableHeader     = mktnbc.setTableHeader(Text=u'ឥណទានឯកត្តជន\nIndividual Loans', 
											Rowspan=0,Colspan=2,RowIndex=2, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'ចំនួនគណនេយ្យ\n# of Accounts', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'សមតុល្យឥណទាន\nOutstanding Amount', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		
		TableHeader     = mktnbc.setTableHeader(Text=u'អាជីវកម្មធុនតូច\nSmall Business', 
											Rowspan=0,Colspan=2,RowIndex=2, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'ចំនួនគណនេយ្យ\n# of Accounts', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'សមតុល្យឥណទាន\nOutstanding Amount', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#

		TableHeader     = mktnbc.setTableHeader(Text=u'អនិវេសជន\nNon-Residends', 
											Rowspan=0,Colspan=4,RowIndex=1, TableHeader=TableHeader, Class="text-center")

		TableHeader     = mktnbc.setTableHeader(Text=u'រូបវ័ន្តបុគ្គល\nIndividual', 
											Rowspan=0,Colspan=2,RowIndex=2, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'ចំនួនគណនេយ្យ\n# of Accounts', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'សមតុល្យឥណទាន\nOutstanding Amount', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		
		TableHeader     = mktnbc.setTableHeader(Text=u'និតិបុគ្គល\nLegal Entities', 
											Rowspan=0,Colspan=2,RowIndex=2, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'ចំនួនគណនេយ្យ\n# of Accounts', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'សមតុល្យឥណទាន\nOutstanding Amount', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#

		TableHeader     = mktnbc.setTableHeader(Text=u'សរុបសមតុល្យឥណទាន\nTotal Oustanding Loans', 
											Rowspan=2,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'ចំនួនគណនេយ្យ\n# of Accounts', 
											Rowspan=2,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'សមតុល្យឥណទាន\nOutstanding Amount', 
											Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'1', 
											Rowspan=0,Colspan=0,RowIndex=4, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#

		TableHeader     = mktnbc.setTableHeader(Text=u'សរុបការប្រាក់បង្គរ\nTotal Accrued Interest', 
											Rowspan=3,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'2', 
											Rowspan=0,Colspan=0,RowIndex=4, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#

		TableHeader     = mktnbc.setTableHeader(Text=u'សរុបឥណទានដុល\nTotal Gross Loans', 
											Rowspan=3,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'3 = 1 + 2', 
											Rowspan=0,Colspan=0,RowIndex=4, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#

		TableHeader     = mktnbc.setTableHeader(Text=u'សរុបឥណទានមិនដំណើរការ\nTotal Non-Performing Loans', 
											Rowspan=3,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'4', 
											Rowspan=0,Colspan=0,RowIndex=4, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#

		TableHeader     = mktnbc.setTableHeader(Text=u'សរុបសំវិធានធនពិត\nTotal Specific Provisions', 
											Rowspan=3,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'5', 
											Rowspan=0,Colspan=0,RowIndex=4, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#

		TableHeader     = mktnbc.setTableHeader(Text=u'សរុបឥណទានសុទ្ធ\nTotal Net Loans', 
											Rowspan=3,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'6 = 3 - 5', 
											Rowspan=0,Colspan=0,RowIndex=4, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#

		TableHeader     = mktnbc.setTableHeader(Text=u'ឥណទានរៀបចំឡើងវិញ\nRestructured Loans', 
											Rowspan=3,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader     = mktnbc.setTableHeader(Text=u'7', 
											Rowspan=0,Colspan=0,RowIndex=4, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#

		Excel.update({
			"F4" : ReportHeader.get('ReportedDate',""),
			"C5" : ReportHeader.get('CompanyName',""),
			"R7" : Decimal(ReportHeader.get('ReportingRate',0))
		})

		"""
			CONSTANTS
		"""
		# Resident, For Non-Resident individual entities is Invidual Loan, and legal entities is small business loan
		GroupLoanID         =   mktsetting.getAppSetting('NBCGroupLoanN17').split()
		IndividualID        =   mktsetting.getAppSetting('NBCIndividualLoanN17').split()
		SmallLoanID         =   mktsetting.getAppSetting('NBCSmallBusinessLoanN17').split()

		# Non-performing Loan Class
		NonPerformingClass  =   ['20','30','40']
		ProvisionRate       =   {'20':0.1, '30':0.3, '40':1}
		ListSector          =   {   
									"Financial Institutions":u"គ្រឹះស្ថានហិរញ្ញវត្ថុ",
									"Agriculture"           :u"កសិកម្ម",
									"Manufacturing"         :u'កម្មន្តសាលកម្ម',
									"Trade and Commerce"    :u"ពាណិជ្ជកម្ម",
									"Services"              :u"សេវាកម្ម",
									"Transportation"        :u"ដឹកជញ្ជូន",
									"Construction"          :u"សំណង់",
									"Household/Family"      :u"ក្រុមគ្រួសារ",
									"Other Categories"      :u"ផ្សេងៗ"
								}
		SectorList          =   {   
									u"គ្រឹះស្ថានហិរញ្ញវត្ថុ \n Financial Institutions",
									u"កសិកម្ម \n Agriculture",
									u'កម្មន្តសាលកម្ម \n Manufacturing',
									u"ពាណិជ្ជកម្ម \n Trade and Commerce",
									u"សេវាកម្ម \n Services",
									u"ដឹកជញ្ជូន \n Transportation",
									u"សំណង់ \n Construction",
									"ក្រុមគ្រួសារ \n Household/Family",
									u"ផ្សេងៗ \n Other Categories"
								}
		RowNumber = 12
		SectorDict = {}

		SectorLineDict = {u'Services': 16 , u'TradeandCommerce': 15 , u'Household/Family': 19,
						u'FinancialInstitutions': 12 , u'Transportation': 17 , u'OtherCategories': 20, 
						u'Agriculture': 13 , 'Manufacturing': 14 , u'Construction': 18}
	
		Data                =   [] # Return value

		TotalResGroupLCAmount 		= 0
		TotalResIndLCAmount 	= 0
		TotalResSmBsLCAmount 	= 0
		TotalNoneResIndLCAmount 	= 0
		TotalNoneResLgEntLCAmount 	= 0
		TotalResidentGroupLoanAccount 			= 0
		TotalResidentIndividualLoanAccount 		= 0
		TotalResidentSmallBusinessLoanAccount 	= 0
		TotalNoneResidentIndividualLoanAccount 	= 0
		TotalNoneResidentLegalEntryLoanAccount 	= 0
		SubTotalAccruedInterest 				= 0
		SubTotalGrossLoan 						= 0
		SubTotalRestructuredLoan 				= 0
		TotalNonPerformingLoans 				= 0
		TotalSpecificProvisions 				= 0
		TotalNetLoans 							= 0
		TotalRestructureLoanAmount 				= 0
		FinalResultLoanContract 				= getFinalResultLoanContract()
		RowNumber = 12
		for Sector in SectorList:
			SectorDict.update({((Sector.split('\n'))[1]).replace(' ',''):((Sector.split('\n'))[1]).replace(' ','')})			
			NUM = SectorLineDict[((Sector.split('\n'))[1]).replace(' ','')]
			Excel.update({
								"A%s"%NUM :Sector,
								"C%s"%NUM : '',
								"D%s"%NUM : '',
								"E%s"%NUM : '',
								"F%s"%NUM : '',
								"G%s"%NUM : '',
								"H%s"%NUM : '',
								"I%s"%NUM : '',
								"J%s"%NUM : '',
								"K%s"%NUM : '',
								"L%s"%NUM : '',
								"O%s"%NUM : '',
								"Q%s"%NUM : '',
								"R%s"%NUM : '',
								"T%s"%NUM : ''
							})
			RowNumber = RowNumber + 1
		if FinalResultLoanContract:
			for LoanObj in FinalResultLoanContract:
				SectorDescription 			= LoanObj.SectorDescription if LoanObj.SectorDescription else ''
				ResGroupLCAccount 			= LoanObj.ResGroupLCAccount if LoanObj.ResGroupLCAccount else 0
				ResGroupLCAmount 			= LoanObj.ResGroupLCAmount if LoanObj.ResGroupLCAmount else 0
				ResIndLCAccount 			= LoanObj.ResIndLCAccount if LoanObj.ResIndLCAccount else 0
				ResIndLCOutAmount 			= LoanObj.ResIndLCOutAmount if LoanObj.ResIndLCOutAmount else 0
				ResSmBsLCAccount 			= LoanObj.ResSmBsLCAccount if LoanObj.ResSmBsLCAccount else 0
				ResSmBsLCOutAmount 			= LoanObj.ResSmBsLCOutAmount if LoanObj.ResSmBsLCOutAmount else 0
				NoneResIndLCAccount 		= LoanObj.NoneResIndLCAccount if LoanObj.NoneResIndLCAccount else 0
				NoneResIndLCOutAmount 		= LoanObj.NoneResIndLCOutAmount if LoanObj.NoneResIndLCOutAmount else 0
				NoneResLgEntLCAccount 		= LoanObj.NoneResLgEntLCAccount if LoanObj.NoneResLgEntLCAccount else 0
				NoneResLgEntLCOutAmount 	= LoanObj.NoneResLgEntLCOutAmount if LoanObj.NoneResLgEntLCOutAmount else 0
				TotalNumberOfAccount 		= LoanObj.TotalNumberOfAccount if LoanObj.TotalNumberOfAccount else 0
				TotalOutstandingAmount 		= LoanObj.TotalOutstandingAmount if LoanObj.TotalOutstandingAmount else 0
				TotalAccruedInterest 		= LoanObj.TotalAccruedInterest if LoanObj.TotalAccruedInterest else 0
				TotalGrossLoan 				= LoanObj.TotalGrossLoan if LoanObj.TotalGrossLoan else 0
				NonePerLCOutAmount 			= LoanObj.NonePerLCOutAmount if LoanObj.NonePerLCOutAmount else 0
				TotalSpecProvLCOutAmount 	= LoanObj.TotalSpecProvLCOutAmount if LoanObj.TotalSpecProvLCOutAmount else 0
				TotalNetLoan 				= LoanObj.TotalNetLoan if LoanObj.TotalNetLoan else 0
				TotalRestructureLoanAmount 	= LoanObj.TotalRestructureLoanAmount if LoanObj.TotalRestructureLoanAmount else 0
				

				RowSector = (LoanObj.SectorDescription).replace(' ','')

				if RowSector == SectorDict.get(RowSector):
					num = SectorLineDict.get(RowSector)
					Data.append({
								1:u'%s\n%s' %(SectorDescription,ListSector.get(SectorDescription)) ,
								2:str(ResGroupLCAccount),
								3:mktmoney.formatNumber(float(ResGroupLCAmount), 1, 2),
								4:str(ResIndLCAccount),
								5:mktmoney.formatNumber(float(ResIndLCOutAmount), 1, 2),
								6:str(ResSmBsLCAccount),
								7:mktmoney.formatNumber(float(ResSmBsLCOutAmount), 1, 2),
								8:str(NoneResIndLCAccount),
								9:mktmoney.formatNumber(float(NoneResIndLCOutAmount), 1, 2),
								10:str(NoneResLgEntLCAccount),
								11:mktmoney.formatNumber(float(NoneResLgEntLCOutAmount), 1, 2),
								12:str(TotalNumberOfAccount),
								13:mktmoney.formatNumber(float(TotalOutstandingAmount), 1, 2),
								14:mktmoney.formatNumber(float(TotalAccruedInterest), 1, 2),
								15:mktmoney.formatNumber(float(TotalGrossLoan), 1, 2),
								16:mktmoney.formatNumber(float(NonePerLCOutAmount), 1, 2),
								17:mktmoney.formatNumber(float(TotalSpecProvLCOutAmount), 1, 2),
								18:mktmoney.formatNumber(float(TotalNetLoan), 1, 2),
								19:mktmoney.formatNumber(float(TotalRestructureLoanAmount), 1, 2),
								'LineType':'GH',
								'Indent':0,
								'RowBGColor':'',
								'LineFormat':''
							})
					Excel.update({
								"C%s"%num : float(ResGroupLCAccount),
								"D%s"%num : ResGroupLCAmount,
								"E%s"%num : float(ResIndLCAccount),
								"F%s"%num : ResIndLCOutAmount,
								"G%s"%num : float(ResSmBsLCAccount),
								"H%s"%num : ResSmBsLCOutAmount,
								"I%s"%num : float(NoneResIndLCAccount),
								"J%s"%num : NoneResIndLCOutAmount,
								"K%s"%num : float(NoneResLgEntLCAccount),
								"L%s"%num : NoneResLgEntLCOutAmount,
								"O%s"%num : TotalAccruedInterest,
								"Q%s"%num : NonePerLCOutAmount,
								"R%s"%num : TotalSpecProvLCOutAmount,
								"T%s"%num : TotalRestructureLoanAmount
							})

				

				TotalResGroupLCAmount 		+= LoanObj.ResGroupLCAmount
				TotalResIndLCAmount 	+= LoanObj.ResIndLCOutAmount
				TotalResSmBsLCAmount 	+= LoanObj.ResSmBsLCOutAmount
				TotalNoneResIndLCAmount 	+= LoanObj.NoneResIndLCOutAmount
				TotalNoneResLgEntLCAmount 	+= LoanObj.NoneResLgEntLCOutAmount
				TotalResidentGroupLoanAccount 			+= LoanObj.ResGroupLCAccount
				TotalResidentIndividualLoanAccount 		+= LoanObj.ResIndLCAccount
				TotalResidentSmallBusinessLoanAccount 	+= LoanObj.ResSmBsLCAccount
				TotalNoneResidentIndividualLoanAccount 	+= LoanObj.NoneResIndLCAccount
				TotalNoneResidentLegalEntryLoanAccount 	+= LoanObj.NoneResLgEntLCAccount
				SubTotalAccruedInterest 				+= LoanObj.TotalAccruedInterest
				SubTotalGrossLoan 						+= LoanObj.TotalGrossLoan
				SubTotalRestructuredLoan 				+= LoanObj.TotalRestructureLoanAmount
				TotalNonPerformingLoans 				+= LoanObj.NonePerLCOutAmount
				TotalSpecificProvisions 				+= LoanObj.TotalSpecProvLCOutAmount
				TotalNetLoans 							+= LoanObj.TotalNetLoan
				RowNumber = RowNumber + 1
		else :
			for Sector in SectorList:
				Data.append({
									1:u'%s' %((Sector.split('\n'))[1]),
									2:str(0),
									3:mktmoney.formatNumber(float(0), 1, 2),
									4:str(0),
									5:mktmoney.formatNumber(float(0), 1, 2),
									6:str(0),
									7:mktmoney.formatNumber(float(0), 1, 2),
									8:str(0),
									9:mktmoney.formatNumber(float(0), 1, 2),
									10:str(0),
									11:mktmoney.formatNumber(float(0), 1, 2),
									12:str(0),
									13:mktmoney.formatNumber(float(0), 1, 2),
									14:mktmoney.formatNumber(float(0), 1, 2),
									15:mktmoney.formatNumber(float(0), 1, 2),
									16:mktmoney.formatNumber(float(0), 1, 2),
									17:mktmoney.formatNumber(float(0), 1, 2),
									18:mktmoney.formatNumber(float(0), 1, 2),
									19:mktmoney.formatNumber(float(0), 1, 2),
									'LineType':'GH',
									'Indent':0,
									'RowBGColor':'',
									'LineFormat':''
								})
		TotalAllNumberOfAccount = TotalResidentGroupLoanAccount + TotalResidentIndividualLoanAccount + TotalResidentSmallBusinessLoanAccount + TotalNoneResidentIndividualLoanAccount + TotalNoneResidentLegalEntryLoanAccount
		TotalOutstandingAmount 	= TotalResGroupLCAmount + TotalResIndLCAmount + TotalResSmBsLCAmount + TotalNoneResIndLCAmount + TotalNoneResLgEntLCAmount
		Data.append({
						1:u'សរុបសមតុល្យឥណទាន (១)\nTotal Oustanding Loans (1)',
						2:str(TotalResidentGroupLoanAccount),
						3:mktmoney.formatNumber(float(TotalResGroupLCAmount), 1, 2),
						4:str(TotalResidentIndividualLoanAccount),
						5:mktmoney.formatNumber(float(TotalResIndLCAmount), 1, 2),
						6:str(TotalResidentSmallBusinessLoanAccount),
						7:mktmoney.formatNumber(float(TotalResSmBsLCAmount), 1, 2),
						8:str(TotalNoneResidentIndividualLoanAccount),
						9:mktmoney.formatNumber(float(TotalNoneResIndLCAmount), 1, 2),
						10:str(TotalNoneResidentLegalEntryLoanAccount),
						11:mktmoney.formatNumber(float(TotalNoneResLgEntLCAmount), 1, 2),
						12:str(TotalAllNumberOfAccount),
						13:mktmoney.formatNumber(float(TotalOutstandingAmount), 1, 2),
						14:u'',
						15:u'',
						16:u'',
						17:u'',
						18:u'',
						19:u'',
						'LineType':'GH',
						'Indent':0,
						'RowBGColor':mktnbc.BG_BODY_COLOR,
						'LineFormat':'bold'
					})
		ResGroupLCAccrInt 		= 0
		ResIndLCAccrInt 		= 0
		ResSmBsLCAccrInt 		= 0
		NoneResIndLCAccrInt 	= 0
		NoneResLgEntLCOutAmount = 0
		TotalAccrInterest 		= 0
		FinalResultAccrueInterest 				= getFinalResultAccrueInterestByGroupProduct()
		if FinalResultAccrueInterest:
			for LoanObj in FinalResultAccrueInterest:
				ResGroupLCAccrInt 		= LoanObj.ResGroupLCAccrInt if LoanObj.ResGroupLCAccrInt else 0
				ResIndLCAccrInt 		= LoanObj.ResIndLCAccrInt if LoanObj.ResIndLCAccrInt else 0
				ResSmBsLCAccrInt 		= LoanObj.ResSmBsLCAccrInt if LoanObj.ResSmBsLCAccrInt else 0
				NoneResIndLCAccrInt 	= LoanObj.NoneResIndLCAccrInt if LoanObj.NoneResIndLCAccrInt else 0
				NoneResLgEntLCOutAmount = LoanObj.NoneResLgEntLCAccrInt if LoanObj.NoneResLgEntLCAccrInt else 0
				TotalAccrInterest 		= LoanObj.TotalAccrInterest if LoanObj.TotalAccrInterest else 0
				Data.append({
						1:u'សរុបការប្រាក់បង្គរ (២)\nTotal Accrued IntAmterest (2)',
						2:'<div colspan=2></div>',
						3:mktmoney.formatNumber(float(ResGroupLCAccrInt), 1, 2),
						4:u'',
						5:mktmoney.formatNumber(float(ResIndLCAccrInt), 1, 2),
						6:u'',
						7:mktmoney.formatNumber(float(ResSmBsLCAccrInt), 1, 2),
						8:u'',
						9:mktmoney.formatNumber(float(NoneResIndLCAccrInt), 1, 2),
						10:u'',
						11:mktmoney.formatNumber(float(NoneResLgEntLCOutAmount), 1, 2),
						12:u'',
						13:mktmoney.formatNumber(float(TotalAccrInterest), 1, 2),
						14:mktmoney.formatNumber(float(SubTotalAccruedInterest), 1, 2),
						15:u'',
						16:u'',
						17:u'',
						18:u'',
						19:u'',
						'LineType':'GH',
						'Indent':0,
						'RowBGColor':'',
						'LineFormat':'bold'
					})

				Excel.update({
								"C22" : ResGroupLCAccrInt,
								"E22" : ResIndLCAccrInt,
								"G22" : ResSmBsLCAccrInt,
								"I22" : NoneResIndLCAccrInt,
								"K22" : NoneResLgEntLCOutAmount
							})
				

		SubTotalResidentGroupGrossLoan 			= Decimal(TotalResGroupLCAmount) + Decimal(ResGroupLCAccrInt)
		SubTotalResidentIndividualGrossLoan 	= Decimal(TotalResIndLCAmount) + Decimal(ResIndLCAccrInt)
		SubTotaResidentSmallBusinessGrossLoan 	= Decimal(TotalResSmBsLCAmount) + Decimal(ResSmBsLCAccrInt)
		SubTotalNoneResidentIndividualGrossLoan = Decimal(TotalNoneResIndLCAmount) + Decimal(NoneResIndLCAccrInt)
		SubTotalNoneResidentLegalEntryGrossLoan = Decimal(TotalNoneResLgEntLCAmount) + Decimal(NoneResLgEntLCOutAmount)
		Data.append({
						1:u'សរុបឥណទានដុល (៣ = ១ + ២)\nTotal Gross Loans (3 = 1 + 2)',
						2:u'',
						3:mktmoney.formatNumber(float(SubTotalResidentGroupGrossLoan), 1, 2),
						4:u'',
						5:mktmoney.formatNumber(float(SubTotalResidentIndividualGrossLoan), 1, 2),
						6:u'',
						7:mktmoney.formatNumber(float(SubTotaResidentSmallBusinessGrossLoan), 1, 2),
						8:u'',
						9:mktmoney.formatNumber(float(SubTotalNoneResidentIndividualGrossLoan), 1, 2),
						10:u'',
						11:mktmoney.formatNumber(float(SubTotalNoneResidentLegalEntryGrossLoan), 1, 2),
						12:u'',
						13:u'',
						14:u'',
						15:mktmoney.formatNumber(float(SubTotalGrossLoan), 1, 2),
						16:u'',
						17:u'',
						18:u'',
						19:u'',
						'LineType':'GH',
						'Indent':0,
						'RowBGColor':mktnbc.BG_BODY_COLOR,
						'LineFormat':'bold'
					})
		# NonePerResGroupLCAmount is Total None Perfomening Resident Group Loan Outstanding Amount
		# NonePerResIndLCAmount is Total None Perfomening Resident Individual Loan Outstanding Amount
		# NonePerResSmBsLCAmount is Total None Perfomening Resident SmallBusiness Outstanding Amount
		# NonePerNoneResLgEntLCAmount is Total None Perfomening None Resident Legal Entry Outstanding Amount
		# NonePerNoneResIndLCAmount is Total None Perfomening None Resident Individual Outstanding Amount
		FinalResultNonePerformingLoan = getFinalResultNonePerformingLoan()
		if FinalResultNonePerformingLoan:
			for LoanObj in FinalResultNonePerformingLoan:
				NonePerResGroupLCAmount = LoanObj.NonePerResGroupLCAmount if LoanObj.NonePerResGroupLCAmount else 0
				NonePerResIndLCAmount = LoanObj.NonePerResIndLCAmount if LoanObj.NonePerResIndLCAmount else 0
				NonePerResSmBsLCAmount = LoanObj.NonePerResSmBsLCAmount if LoanObj.NonePerResSmBsLCAmount else 0
				NonePerNoneResLgEntLCAmount = LoanObj.NonePerNoneResLgEntLCAmount if LoanObj.NonePerNoneResLgEntLCAmount else 0
				NonePerNoneResIndLCAmount = LoanObj.NonePerNoneResIndLCAmount if LoanObj.NonePerNoneResIndLCAmount else 0
				Data.append({
						1:u'សរុបឥណទានមិនដំណើរការ (៤)\nTotal Non-Performing Loans (4)',
						2:u'',
						3:mktmoney.formatNumber(float(NonePerResGroupLCAmount), 1, 2),
						4:u'',
						5:mktmoney.formatNumber(float(NonePerResIndLCAmount), 1, 2),
						6:u'',
						7:mktmoney.formatNumber(float(NonePerResSmBsLCAmount), 1, 2),
						8:u'',
						9:mktmoney.formatNumber(float(NonePerNoneResLgEntLCAmount), 1, 2),
						10:u'',
						11:mktmoney.formatNumber(float(NonePerNoneResIndLCAmount), 1, 2),
						12:u'',
						13:u'',
						14:u'',
						15:u'',
						16:mktmoney.formatNumber(TotalNonPerformingLoans, 1, 2),
						17:u'',
						18:u'',
						19:u'',
						'LineType':'GH',
						'Indent':0,
						'RowBGColor':'',
						'LineFormat':'bold'
					})
				Excel.update({
								"C24" : NonePerResGroupLCAmount,
								"E24" : NonePerResIndLCAmount,
								"G24" : NonePerResSmBsLCAmount,
								"I24" : NonePerNoneResLgEntLCAmount,
								"K24" : NonePerNoneResIndLCAmount
							})

		SubTotalResidentNetLoanGroup 	= SubTotalResidentGroupGrossLoan
		SubTotalResidentNetLoanIndiv 	= SubTotalResidentIndividualGrossLoan
		SubTotalResidentNetLoanSmall 	= SubTotaResidentSmallBusinessGrossLoan
		SubTotalNonResidentNetLoanIndiv = SubTotalNoneResidentIndividualGrossLoan
		SubTotalNonResidentNetLoanLegal = SubTotalNoneResidentLegalEntryGrossLoan
		SubTotalProvision 				= 0

		# ProResGroupLCAmount is Total Provision Resident Group Loan Outstanding Amount
		# ProResIndLCAmount is Total Provision Resident Individual Loan Outstanding Amount
		# ProResSmBsCAmount is Total Provision Resident Small Business Outstanding Amount
		# ProNoneResIndLCAmount is Total Provision None Resident Individual Outstanding Amount
		# ProNoneResLgEntLCAmount is Total Provision None Resident Legal Entry Outstanding Amount

		FinalResultProvisionLoan = getFinalResultProvisionLoan()
		if FinalResultProvisionLoan:
			for LoanObj in FinalResultProvisionLoan:
				ProResGroupLCAmount = LoanObj.ProResGroupLCAmount if LoanObj.ProResGroupLCAmount else 0
				ProResIndLCAmount 	= LoanObj.ProResIndLCAmount if LoanObj.ProResIndLCAmount else 0
				ProResSmBsCAmount 	= LoanObj.ProResSmBsCAmount if LoanObj.ProResSmBsCAmount else 0
				ProNoneResIndLCAmount = LoanObj.ProNoneResIndLCAmount if LoanObj.ProNoneResIndLCAmount else 0
				ProNoneResLgEntLCAmount = LoanObj.ProNoneResLgEntLCAmount if LoanObj.ProNoneResLgEntLCAmount else 0
				TotalProvisionOutstandingAmount = LoanObj.TotalProvisionOutstandingAmount if LoanObj.TotalProvisionOutstandingAmount else 0
				Data.append({
						1:u'សរុបសំវធានធនពិត (៥)\nTotal Specific Provisions (5)',
						2:u'',
						3:mktmoney.formatNumber(float(ProResGroupLCAmount), 1, 2),
						4:u'',
						5:mktmoney.formatNumber(float(ProResIndLCAmount), 1, 2),
						6:u'',
						7:mktmoney.formatNumber(float(ProResSmBsCAmount), 1, 2),
						8:u'',
						9:mktmoney.formatNumber(float(ProNoneResIndLCAmount), 1, 2),
						10:u'',
						11:mktmoney.formatNumber(float(ProNoneResLgEntLCAmount), 1, 2),
						12:u'',
						13:u'',
						14:u'',
						15:u'',
						16:u'',
						17:mktmoney.formatNumber(TotalSpecificProvisions, 1, 2),
						18:u'',
						19:u'',
						'LineType':'GH',
						'Indent':0,
						'RowBGColor':'',
						'LineFormat':'bold'
							})
				Excel.update({
								"C25" : ProResGroupLCAmount,
								"E25" : ProResIndLCAmount,
								"G25" : ProResSmBsCAmount,
								"I25" : ProNoneResIndLCAmount,
								"K25" : ProNoneResLgEntLCAmount
							})
				SubTotalResidentNetLoanGroup 	-= ProResGroupLCAmount
				SubTotalResidentNetLoanIndiv 	-= ProResIndLCAmount
				SubTotalResidentNetLoanSmall 	-= ProResSmBsCAmount
				SubTotalNonResidentNetLoanIndiv -= ProNoneResIndLCAmount
				SubTotalNonResidentNetLoanLegal -= ProNoneResLgEntLCAmount
				SubTotalProvision 				-= TotalProvisionOutstandingAmount

		SubTotalNetLoan = Decimal(SubTotalGrossLoan) - Decimal(abs(SubTotalProvision))
		
		Data.append({
				1:u'សរុបឥណទានសុទ្ធ (៦ = ៣​ - ៥)\nTotal Net Loans (6 = 3 - 5)',
				2:u'',
				3:mktmoney.formatNumber(float(SubTotalResidentNetLoanGroup), 1, 2),
				4:u'',
				5:mktmoney.formatNumber(float(SubTotalResidentNetLoanIndiv), 1, 2),
				6:u'',
				7:mktmoney.formatNumber(float(SubTotalResidentNetLoanSmall), 1, 2),
				8:u'',
				9:mktmoney.formatNumber(float(SubTotalNonResidentNetLoanIndiv), 1, 2),
				10:u'',
				11:mktmoney.formatNumber(float(SubTotalNonResidentNetLoanLegal), 1, 2),
				12:u'',
				13:u'',
				14:u'',
				15:u'',
				16:u'',
				17:u'',
				18:mktmoney.formatNumber(float(TotalNetLoans), 1, 2),
				19:u'',
				'LineType':'GH',
				'Indent':0,
				'RowBGColor':mktnbc.BG_HEADER_COLOR,
				'LineFormat':'bold'
			})
		Data.append({
				1:u'សរុបសំវិធានធនទូទៅ (៧)\nTotal General Provision (7)',
				2:u'',
				3:mktmoney.formatNumber(float(0), 1, 2),
				4:u'',
				5:mktmoney.formatNumber(float(0), 1, 2),
				6:u'',
				7:mktmoney.formatNumber(float(0), 1, 2),
				8:u'',
				9:mktmoney.formatNumber(float(0), 1, 2),
				10:u'',
				11:mktmoney.formatNumber(float(0), 1, 2),
				12:u'',
				13:u'',
				14:u'',
				15:u'',
				16:u'',
				17:u'',
				18:mktmoney.formatNumber(float(0), 1, 2),
				19:mktmoney.formatNumber(float(SubTotalRestructuredLoan), 1, 2),
				'LineType':'GH',
				'Indent':0,
				'RowBGColor':'',
				'LineFormat':'bold'
			})
		Excel.update({
				"C27" : '',
				"E27" : '',
				"G27" : '',
				"I27" : '',
				"K27" : ''
			})
		Result.update({'TableHeader':TableHeader,'ReportHeader':ReportHeader,'Data':Data, 'Excel': Excel})

		# CellSyle 	= {}
		# ExcelHeader = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
		# row = 9
		# while row <= 27:			
		# 	for col in range(2,19):
		# 		column 	= "%s%s" % (ExcelHeader[col],row)
		# 		style 	= "bottom*thin,FF000000:top*thin,FF000000:left*thin,FF000000:right*thin,FF000000"
		# 		CellSyle.update({column:style})
		# 	row+=1

		# row_list = [8]
		# for row in row_list:
		# 	for col in range(0,19):
		# 		column 	= "%s%s" % (ExcelHeader[col],row)
		# 		style 	= "top*medium,FF000000"
		# 		CellSyle.update({column:style})

		CellSyle = {'B11':'right*thin,FF000000:bottom*thin,FF000000',
					'D8':'top*medium,FF000000:bottom*thin,FF000000',
					'E8':'top*medium,FF000000',
					'F8':'top*medium,FF000000:bottom*thin,FF000000',
					'G8':'top*medium,FF000000',
					'H8':'top*medium,FF000000:bottom*thin,FF000000',
					'J8':'top*medium,FF000000:bottom*thin,FF000000',
					'K8':'top*medium,FF000000',
					'L8':'top*medium,FF000000:bottom*thin,FF000000',
					'N8':'top*medium,FF000000',

					'M9':'left*thin,FF000000',
					'O9':'left*thin,FF000000:right*thin,FF000000',

					'Q9':'left*thin,FF000000:right*thin,FF000000',

					'S9':'left*thin,FF000000:right*thin,FF000000',

					'T9':'right*medium,FF000000',

					'D11':'left*thin,FF000000:right*thin,FF000000',
					'F11':'left*thin,FF000000:right*thin,FF000000',
					'H11':'left*thin,FF000000:right*thin,FF000000',
					'J11':'left*thin,FF000000:right*thin,FF000000',
					'L11':'left*thin,FF000000:right*thin,FF000000',

					'P10':'left*thin,FF000000:right*thin,FF000000',
					'R10':'left*thin,FF000000:right*thin,FF000000',
					'T10':'left*thin,FF000000:right*medium,FF000000',

					'B13':'top*thin,FF000000:bottom*thin,FF000000',
					'B15':'top*thin,FF000000:bottom*thin,FF000000',
					'B17':'top*thin,FF000000:bottom*thin,FF000000',
					'B19':'top*thin,FF000000:bottom*thin,FF000000',
					'B21':'top*thin,FF000000:bottom*thin,FF000000',
					'B23':'top*thin,FF000000:bottom*thin,FF000000',
					'B25':'top*thin,FF000000:bottom*thin,FF000000',
					'B27':'top*thin,FF000000:bottom*medium,FF000000',

					'D23':'top*thin,FF000000:bottom*thin,FF000000',
					'D25':'top*thin,FF000000:bottom*thin,FF000000',
					'D27':'top*thin,FF000000:bottom*medium,FF000000:right*thin,FF000000',

					'F23':'top*thin,FF000000:bottom*thin,FF000000',
					'F25':'top*thin,FF000000:bottom*thin,FF000000',
					'F27':'top*thin,FF000000:bottom*medium,FF000000:right*thin,FF000000',

					'H23':'top*thin,FF000000:bottom*thin,FF000000',
					'H25':'top*thin,FF000000:bottom*thin,FF000000',
					'H27':'top*thin,FF000000:bottom*medium,FF000000:right*thin,FF000000',

					'J23':'top*thin,FF000000:bottom*thin,FF000000',
					'J25':'top*thin,FF000000:bottom*thin,FF000000',
					'J27':'top*thin,FF000000:bottom*medium,FF000000:right*thin,FF000000',

					'L23':'top*thin,FF000000:bottom*thin,FF000000',
					'L25':'top*thin,FF000000:bottom*thin,FF000000',
					'L27':'top*thin,FF000000:bottom*medium,FF000000:right*thin,FF000000',

					'E27':'bottom*medium,FF000000',
					'F27':'bottom*medium,FF000000',
					'G27':'bottom*medium,FF000000',
					'I27':'bottom*medium,FF000000',
					'K27':'bottom*medium,FF000000',
					'M27':'bottom*medium,FF000000',


					'N23':'top*thin,FF000000:bottom*thin,FF000000',
					'N25':'top*thin,FF000000:bottom*thin,FF000000',
					'N27':'top*thin,FF000000:bottom*medium,FF000000',

					'O24':'top*thin,FF000000:bottom*thin,FF000000',
					'O26':'top*thin,FF000000:bottom*thin,FF000000',
					'O27':'bottom*medium,FF000000',

					'P25':'top*thin,FF000000:bottom*thin,FF000000',
					'P27':'top*thin,FF000000:bottom*medium,FF000000',

					'Q26':'top*thin,FF000000:bottom*thin,FF000000',
					'Q27':'bottom*medium,FF000000',
					'R27':'top*thin,FF000000:bottom*medium,FF000000',

					'Q22':'left*thin,FF000000:right*thin,FF000000',
					'S22':'left*thin,FF000000:right*thin,FF000000',
					'T22':'right*medium,FF000000',

					'R23':'left*thin,FF000000:right*thin,FF000000',
					'T23':'left*thin,FF000000:right*medium,FF000000',

					'S24':'left*thin,FF000000:right*thin,FF000000',
					'T24':'right*medium,FF000000',
					'T25':'left*thin,FF000000:right*medium,FF000000',
					'T26':'right*medium,FF000000',

					}

		return Result, CellSyle
	except:
		raise

def getLoanContract(Branch='ALL',**kwargs):

	GroupLoan = mktsetting.getAppSetting('NBCGroupLoanN17').split()
	IndividualLoan = mktsetting.getAppSetting('NBCIndividualLoanN17').split()
	SmallBusiness = mktsetting.getAppSetting('NBCSmallBusinessLoanN17').split()
	LoanProduct = set(GroupLoan) | set(IndividualLoan) | set(SmallBusiness)

	GroupLoanSector = mktsetting.getAppSetting('NBCGroupLoanSectorN17').split()
	IndividualLoanSector = mktsetting.getAppSetting('NBCIndividualLoanSectorN17').split()
	SmallBusinessSector = mktsetting.getAppSetting('NBCSmallBusinessLoanSectorN17').split()
	LoanSector = set(GroupLoanSector) | set(IndividualLoanSector) | set(SmallBusinessSector)


	if LoanProduct:
		GroupLoanSector = 'None'
		IndividualLoanSector = 'None'
		SmallBusinessSector = 'None'
		LoanSector = ''

	if LoanSector:
		GroupLoan = 'None'
		IndividualLoan = 'None'
		SmallBusiness = 'None'
		LoanProduct = ''

	LoanObj = db.session.query( MKT_LOAN_CONTRACT.Branch.label('Branch'),
								MKT_LOAN_CONTRACT.ID.label('LoanID'),
								MKT_LOAN_CONTRACT.OutstandingAmount.label('OutstandingAmount'),
								MKT_LOAN_CONTRACT.Sector.label('Sector'),
								MKT_SECTOR.Description.label('SectorDescription'),
								case(
									[(
										(MKT_LOAN_CONTRACT.LoanProduct.in_(GroupLoan)),
										'GroupLoan'
									)],
								else_=case(
										[(
											(MKT_LOAN_CONTRACT.LoanProduct.in_(IndividualLoan)),
											'IndividualLoan'
										)],
										else_= case(
										[(
											(MKT_LOAN_CONTRACT.LoanProduct.in_(SmallBusiness)),
											'SmallBusiness'
										)],
										else_= 'LegalEntities'
										)
										)
								).label('LoanType'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(GroupLoan))),
										MKT_LOAN_CONTRACT.ID
									)],
								else_='None'
								).label('ResGroupLCAccount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(GroupLoan))),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float)
									)],
								else_=0
								).label('ResGroupLCAmount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(IndividualLoan))),
										MKT_LOAN_CONTRACT.ID
									)],
								else_='None'
								).label('ResIndLCAccount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(IndividualLoan))),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float)
									)],
								else_=0
								).label('ResIndLCOutAmount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(SmallBusiness))),
										MKT_LOAN_CONTRACT.ID
									)],
								else_='None'
								).label('ResSmBsLCAccount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y',(MKT_LOAN_CONTRACT.LoanProduct.in_(SmallBusiness))),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float)
									)],
								else_=0
								).label('ResSmBsLCOutAmount'),
								case(
									[(
										MKT_CUSTOMER.Resident == 'N',
										MKT_LOAN_CONTRACT.ID
									)],
								else_='None'
								).label('NoneResIndLCAccount'),
								case(
									[(
										MKT_CUSTOMER.Resident == 'N',
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float)
									)],
								else_=0
								).label('NoneResIndLCOutAmount'),
								case(
									[(
										MKT_CUSTOMER.Resident == 'N',
										'None'
									)],
								else_='None'
								).label('NoneResLgEntLCAccount'),
								case(
									[(
										MKT_CUSTOMER.Resident == 'N',
										0
									)],
								else_=0
								).label('NoneResLgEntLCOutAmount'),
								case(
									[(
									or_(MKT_LOAN_CONTRACT.LoanProduct.in_(LoanProduct), MKT_LOAN_CONTRACT.Sector.in_(LoanSector)),
									cast(MKT_LOAN_CONTRACT.AccrInterest, Float)* cast(MKT_CURRENCY.OtherRate1, Float)
									)],
									else_=0
								).label('AccruedInterest'),
								case(
									[(
										MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40']),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) 
									)],
								else_=0
								).label('NonePerLCOutAmount'),
								case(
									[(
										MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40']
										),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) * cast(MKT_ASSET_CLASS_PRO.ProvPerc, Float)/100
									)],
								else_= 0
								).label('SpecProvOutAmount'),
								case(
									[(
										MKT_LOAN_CONTRACT.LoanType == 'R',
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float)
									)],
								else_=0
								).label('RestructureLoanAmount')
							).\
							join(MKT_CURRENCY, MKT_CURRENCY.ID==MKT_LOAN_CONTRACT.Currency).\
							join(MKT_CUSTOMER, MKT_LOAN_CONTRACT.ContractCustomerID==MKT_CUSTOMER.ID).\
							join(MKT_SECTOR, MKT_LOAN_CONTRACT.Sector==MKT_SECTOR.ID).\
							outerjoin(MKT_ASSET_CLASS_PRO, MKT_LOAN_CONTRACT.AssetClass==MKT_ASSET_CLASS_PRO.ID).\
							outerjoin(MKT_PD_DATE, MKT_PD_DATE.ID.ilike("%" + MKT_LOAN_CONTRACT.ID)).\
							filter(or_(MKT_LOAN_CONTRACT.LoanProduct.in_(LoanProduct), MKT_LOAN_CONTRACT.Sector.in_(LoanSector))).\
							filter(MKT_LOAN_CONTRACT.DisbursedStat =='Y').\
							filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
							distinct(MKT_LOAN_CONTRACT.ID).\
							subquery()
	if Branch not in ['','ALL', None]:
		Branch = getSplitData(Branch)
		LoanObj = db.session.query(LoanObj).filter(LoanObj.c.Branch.in_(Branch)).subquery()
	return LoanObj

def getFinalResultLoanContract(Branch='ALL'):

	ReadAs 		= 1000000

	LoanObj = getLoanContract(Branch)

	NewLoanObj = db.session.query(
									LoanObj.c.Sector.label('Sector'),
									LoanObj.c.SectorDescription.label('SectorDescription'),
									func.count(
										case(
											[(
												LoanObj.c.ResGroupLCAccount != 'None',
												LoanObj.c.ResGroupLCAccount
											)])
									).label('ResGroupLCAccount'),
									(func.sum(LoanObj.c.ResGroupLCAmount)/ReadAs).label('ResGroupLCAmount'),
									func.count(
										case(
											[(
												LoanObj.c.ResIndLCAccount != 'None',
												LoanObj.c.ResIndLCAccount
											)])
									).label('ResIndLCAccount'),
									(func.sum(LoanObj.c.ResIndLCOutAmount)/ReadAs).label('ResIndLCOutAmount'),
									func.count(
										case(
											[(
												LoanObj.c.ResSmBsLCAccount != 'None',
												LoanObj.c.ResSmBsLCAccount
											)])
									).label('ResSmBsLCAccount'),
									(func.sum(LoanObj.c.ResSmBsLCOutAmount)/ReadAs).label('ResSmBsLCOutAmount'),
									func.count(
										case(
											[(
												LoanObj.c.NoneResIndLCAccount != 'None',
												LoanObj.c.NoneResIndLCAccount
											)])
									).label('NoneResIndLCAccount'),
									(func.sum(LoanObj.c.NoneResIndLCOutAmount)/ReadAs).label('NoneResIndLCOutAmount'),
									func.count(
										case(
											[(
												LoanObj.c.NoneResLgEntLCAccount != 'None',
												LoanObj.c.NoneResLgEntLCAccount
											)])
									).label('NoneResLgEntLCAccount'),
									(func.sum(LoanObj.c.NoneResLgEntLCOutAmount)/ReadAs).label('NoneResLgEntLCOutAmount'),
									func.count(LoanObj.c.LoanID).label('TotalNumberOfAccount'),
									(func.sum(
											cast(LoanObj.c.ResGroupLCAmount,Float)+
											cast(LoanObj.c.ResIndLCOutAmount,Float)+
											cast(LoanObj.c.ResSmBsLCOutAmount,Float)+
											cast(LoanObj.c.NoneResIndLCOutAmount,Float)+
											cast(LoanObj.c.NoneResLgEntLCOutAmount,Float)
									)/ReadAs).label('TotalOutstandingAmount'),
									(func.sum(LoanObj.c.AccruedInterest)/ReadAs).label('TotalAccruedInterest'),
									(func.sum(
											cast(LoanObj.c.ResGroupLCAmount,Float)+
											cast(LoanObj.c.ResIndLCOutAmount,Float)+
											cast(LoanObj.c.ResSmBsLCOutAmount,Float)+
											cast(LoanObj.c.NoneResIndLCOutAmount,Float)+
											cast(LoanObj.c.NoneResLgEntLCOutAmount,Float)+
											cast(LoanObj.c.AccruedInterest, Float)
									)/ReadAs).label('TotalGrossLoan'),
									(func.sum(LoanObj.c.NonePerLCOutAmount)/ReadAs).label('NonePerLCOutAmount'),
									(func.sum(LoanObj.c.SpecProvOutAmount)/ReadAs).label('TotalSpecProvLCOutAmount'),
									((func.sum(
											cast(LoanObj.c.ResGroupLCAmount,Float)+
											cast(LoanObj.c.ResIndLCOutAmount,Float)+
											cast(LoanObj.c.ResSmBsLCOutAmount,Float)+
											cast(LoanObj.c.NoneResIndLCOutAmount,Float)+
											cast(LoanObj.c.NoneResLgEntLCOutAmount,Float)+
											cast(LoanObj.c.AccruedInterest, Float)
									)- func.sum(cast(LoanObj.c.SpecProvOutAmount, Float)))/ReadAs).label('TotalNetLoan'),
									(func.sum(LoanObj.c.RestructureLoanAmount)/ReadAs).label('TotalRestructureLoanAmount')
								).\
								group_by(LoanObj.c.Sector,LoanObj.c.SectorDescription).\
								all()
	return NewLoanObj

def getAccrueInterestByGroupProduct(Branch='ALL',**kwargs):

	GroupLoan = mktsetting.getAppSetting('NBCGroupLoanN17').split()
	IndividualLoan = mktsetting.getAppSetting('NBCIndividualLoanN17').split()
	SmallBusiness = mktsetting.getAppSetting('NBCSmallBusinessLoanN17').split()
	LoanProduct = set(GroupLoan) | set(IndividualLoan) | set(SmallBusiness)

	GroupLoanSector = mktsetting.getAppSetting('NBCGroupLoanSectorN17').split()
	IndividualLoanSector = mktsetting.getAppSetting('NBCIndividualLoanSectorN17').split()
	SmallBusinessSector = mktsetting.getAppSetting('NBCSmallBusinessLoanSectorN17').split()
	LoanSector = set(GroupLoanSector) | set(IndividualLoanSector) | set(SmallBusinessSector)

	if LoanProduct:
		GroupLoanSector = 'None'
		IndividualLoanSector = 'None'
		SmallBusinessSector = 'None'
		LoanSector = ''

	if LoanSector:
		GroupLoan = 'None'
		IndividualLoan = 'None'
		SmallBusiness = 'None'
		LoanProduct = ''

	LoanObj = db.session.query( MKT_LOAN_CONTRACT.Branch.label('Branch'),
								MKT_LOAN_CONTRACT.ID.label('LoanID'),
								MKT_LOAN_CONTRACT.Sector.label('Sector'),
								MKT_SECTOR.Description.label('SectorDescription'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(GroupLoan))),
										cast(MKT_LOAN_CONTRACT.AccrInterest, Float)* cast(MKT_CURRENCY.OtherRate1, Float)
									)],
								else_=0
								).label('ResGroupLCAccrInt'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(IndividualLoan))),
										cast(MKT_LOAN_CONTRACT.AccrInterest, Float)* cast(MKT_CURRENCY.OtherRate1, Float)
									)],
								else_=0
								).label('ResIndLCAccrInt'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y',(MKT_LOAN_CONTRACT.LoanProduct.in_(SmallBusiness))),
										cast(MKT_LOAN_CONTRACT.AccrInterest, Float)* cast(MKT_CURRENCY.OtherRate1, Float)
									)],
								else_=0
								).label('ResSmBsLCAccrInt'),
								case(
									[(
										MKT_CUSTOMER.Resident == 'N',
										cast(MKT_LOAN_CONTRACT.AccrInterest, Float)* cast(MKT_CURRENCY.OtherRate1, Float)
									)],
								else_=0
								).label('NoneResIndLCAccrInt'),
								case(
									[(
										MKT_CUSTOMER.Resident == 'N',
										0
									)],
								else_=0
								).label('NoneResLgEntLCAccrInt'),
								(cast(MKT_LOAN_CONTRACT.AccrInterest, Float)* cast(MKT_CURRENCY.OtherRate1, Float)).label('AccrInterest')
							).\
							join(MKT_CURRENCY, MKT_CURRENCY.ID==MKT_LOAN_CONTRACT.Currency).\
							join(MKT_CUSTOMER, MKT_LOAN_CONTRACT.ContractCustomerID==MKT_CUSTOMER.ID).\
							join(MKT_SECTOR, MKT_LOAN_CONTRACT.Sector==MKT_SECTOR.ID).\
							filter(or_(MKT_LOAN_CONTRACT.LoanProduct.in_(LoanProduct), MKT_LOAN_CONTRACT.Sector.in_(LoanSector))).\
							filter(MKT_LOAN_CONTRACT.DisbursedStat =='Y').\
							distinct(MKT_LOAN_CONTRACT.ID).\
							subquery()
	if Branch not in ['','ALL', None]:
		Branch = getSplitData(Branch)
		LoanObj = db.session.query(LoanObj).filter(LoanObj.c.Branch.in_(Branch)).subquery()
	return LoanObj

def getFinalResultAccrueInterestByGroupProduct(Branch='ALL'):

	LoanObj 	= getAccrueInterestByGroupProduct(Branch)
	ReadAs 		= 1000000

	NewLoanObj = db.session.query(
									(func.sum(LoanObj.c.ResGroupLCAccrInt)/ReadAs).label('ResGroupLCAccrInt'),
									(func.sum(LoanObj.c.ResIndLCAccrInt)/ReadAs).label('ResIndLCAccrInt'),
									(func.sum(LoanObj.c.ResSmBsLCAccrInt)/ReadAs).label('ResSmBsLCAccrInt'),
									(func.sum(LoanObj.c.NoneResIndLCAccrInt)/ReadAs).label('NoneResIndLCAccrInt'),
									(func.sum(LoanObj.c.NoneResLgEntLCAccrInt)/ReadAs).label('NoneResLgEntLCAccrInt'),
									(func.sum(LoanObj.c.AccrInterest)/ReadAs).label('TotalAccrInterest')
								).\
								all()
	return NewLoanObj

def getNonePerformingLoan(Branch='ALL',*kwargs):

	GroupLoan = mktsetting.getAppSetting('NBCGroupLoanN17').split()
	IndividualLoan = mktsetting.getAppSetting('NBCIndividualLoanN17').split()
	SmallBusiness = mktsetting.getAppSetting('NBCSmallBusinessLoanN17').split()
	AssetClass = ['20','30','40']
	LoanProduct = set(GroupLoan) | set(IndividualLoan) | set(SmallBusiness)

	GroupLoanSector = mktsetting.getAppSetting('NBCGroupLoanSectorN17').split()
	IndividualLoanSector = mktsetting.getAppSetting('NBCIndividualLoanSectorN17').split()
	SmallBusinessSector = mktsetting.getAppSetting('NBCSmallBusinessLoanSectorN17').split()
	LoanSector = set(GroupLoanSector) | set(IndividualLoanSector) | set(SmallBusinessSector)

	if LoanProduct:
		GroupLoanSector = 'None'
		IndividualLoanSector = 'None'
		SmallBusinessSector = 'None'
		LoanSector = ''

	if LoanSector:
		GroupLoan = 'None'
		IndividualLoan = 'None'
		SmallBusiness = 'None'
		LoanProduct = ''

	LoanObj = db.session.query( MKT_LOAN_CONTRACT.Branch.label('Branch'),
								MKT_LOAN_CONTRACT.ID.label('LoanID'),
								MKT_LOAN_CONTRACT.OutstandingAmount.label('OutstandingAmount'),
								MKT_LOAN_CONTRACT.Sector.label('Sector'),
								MKT_SECTOR.Description.label('SectorDescription'),
								MKT_LOAN_CONTRACT.AssetClass.label('AssetClass'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(GroupLoan)),MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40'])),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) 
									)],
								else_=0
								).label('NonePerResGroupLCAmount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(IndividualLoan)),MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40'])),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) 
									)],
								else_=0
								).label('NonePerResIndLCAmount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y',MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40']), (MKT_LOAN_CONTRACT.LoanProduct.in_(SmallBusiness))),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) 
									)],
								else_=0
								).label('NonePerResSmBsLCAmount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'N',MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40'])),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float)
									)],
								else_=0
								).label('NonePerNoneResIndLCAmount'),
								case(
									[(
										MKT_CUSTOMER.Resident == 'N',
										0
									)],
								else_=0
								).label('NonePerNoneResLgEntLCAmount'),
								(
									MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) * cast(MKT_ASSET_CLASS_PRO.ProvPerc, Float)/100
								).label('TotalNonePerOutAmount')
							).\
							join(MKT_CURRENCY, MKT_CURRENCY.ID==MKT_LOAN_CONTRACT.Currency).\
							join(MKT_CUSTOMER, MKT_LOAN_CONTRACT.ContractCustomerID==MKT_CUSTOMER.ID).\
							join(MKT_SECTOR, MKT_LOAN_CONTRACT.Sector==MKT_SECTOR.ID).\
							outerjoin(MKT_ASSET_CLASS_PRO, MKT_LOAN_CONTRACT.AssetClass==MKT_ASSET_CLASS_PRO.ID).\
							outerjoin(MKT_PD_DATE, MKT_PD_DATE.ID.ilike("%" + MKT_LOAN_CONTRACT.ID)).\
							filter(or_(MKT_LOAN_CONTRACT.LoanProduct.in_(LoanProduct),MKT_LOAN_CONTRACT.Sector.in_(LoanSector))).\
							filter(MKT_LOAN_CONTRACT.DisbursedStat =='Y').\
							distinct(MKT_LOAN_CONTRACT.ID).\
							subquery()

	if Branch not in ['','ALL', None]:
		Branch = getSplitData(Branch)
		LoanObj = db.session.query(LoanObj).filter(LoanObj.c.Branch.in_(Branch)).subquery()

	if AssetClass not in ['','ALL', None]:
		LoanObj = db.session.query(LoanObj).filter(LoanObj.c.AssetClass.in_(AssetClass)).subquery()
	return LoanObj

def getFinalResultNonePerformingLoan(Branch='ALL'):
	# GroupLoan = mktsetting.getAppSetting('NBCGroupLoanN17').split()
	# IndividualLoan = mktsetting.getAppSetting('NBCIndividualLoanN17').split()
	# SmallBusiness = mktsetting.getAppSetting('NBCSmallBusinessLoanN17').split()
	# AssetClass = ['20','30','40']
	LoanObj = getNonePerformingLoan(Branch)
	ReadAs 		= 1000000
	NewLoanObj = db.session.query(
									(func.sum(LoanObj.c.NonePerResGroupLCAmount)/ReadAs).label('NonePerResGroupLCAmount'),
									(func.sum(LoanObj.c.NonePerResIndLCAmount)/ReadAs).label('NonePerResIndLCAmount'),
									(func.sum(LoanObj.c.NonePerResSmBsLCAmount)/ReadAs).label('NonePerResSmBsLCAmount'),
									(func.sum(LoanObj.c.NonePerNoneResIndLCAmount)/ReadAs).label('NonePerNoneResIndLCAmount'),
									(func.sum(LoanObj.c.NonePerNoneResLgEntLCAmount)/ReadAs).label('NonePerNoneResLgEntLCAmount'),
									(func.sum(LoanObj.c.TotalNonePerOutAmount)/ReadAs).label('TotalNonePerOutAmount')
								).\
								all()
	return NewLoanObj

def getSpecificProvision(Branch='ALL',**kwargs):
	GroupLoan = mktsetting.getAppSetting('NBCGroupLoanN17').split()
	IndividualLoan = mktsetting.getAppSetting('NBCIndividualLoanN17').split()
	SmallBusiness = mktsetting.getAppSetting('NBCSmallBusinessLoanN17').split()
	AssetClass = ['0','10','20','30','40']
	LoanProduct = set(GroupLoan) | set(IndividualLoan) | set(SmallBusiness)

	GroupLoanSector = mktsetting.getAppSetting('NBCGroupLoanSectorN17').split()
	IndividualLoanSector = mktsetting.getAppSetting('NBCIndividualLoanSectorN17').split()
	SmallBusinessSector = mktsetting.getAppSetting('NBCSmallBusinessLoanSectorN17').split()
	LoanSector = set(GroupLoanSector) | set(IndividualLoanSector) | set(SmallBusinessSector)

	if LoanProduct:
		GroupLoanSector = 'None'
		IndividualLoanSector = 'None'
		SmallBusinessSector = 'None'
		LoanSector = ''

	if LoanSector:
		GroupLoan = 'None'
		IndividualLoan = 'None'
		SmallBusiness = 'None'
		LoanProduct = ''

	LoanObj = db.session.query( MKT_LOAN_CONTRACT.Branch.label('Branch'),
								MKT_LOAN_CONTRACT.ID.label('LoanID'),
								MKT_LOAN_CONTRACT.OutstandingAmount.label('OutstandingAmount'),
								MKT_LOAN_CONTRACT.Sector.label('Sector'),
								MKT_SECTOR.Description.label('SectorDescription'),
								MKT_LOAN_CONTRACT.AssetClass.label('AssetClass'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(GroupLoan)),MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40'])),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) * cast(MKT_ASSET_CLASS_PRO.ProvPerc, Float)/100
									)],
								else_=0
								).label('NonePerResGroupLCAmount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y' , (MKT_LOAN_CONTRACT.LoanProduct.in_(IndividualLoan)),MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40'])),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) * cast(MKT_ASSET_CLASS_PRO.ProvPerc, Float)/100
									)],
								else_=0
								).label('NonePerResIndLCAmount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'Y',MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40']),(MKT_LOAN_CONTRACT.LoanProduct.in_(SmallBusiness))),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) * cast(MKT_ASSET_CLASS_PRO.ProvPerc, Float)/100
									)],
								else_=0
								).label('NonePerResSmBsLCAmount'),
								case(
									[(
										and_(MKT_CUSTOMER.Resident == 'N',MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40'])),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) * cast(MKT_ASSET_CLASS_PRO.ProvPerc, Float)/100
									)],
								else_=0
								).label('NonePerNoneResIndLCAmount'),
								case(
									[(
										MKT_CUSTOMER.Resident == 'N',
										0
									)],
								else_=0
								).label('NonePerNoneResLgEntLCAmount'),
								(
									MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) * cast(MKT_ASSET_CLASS_PRO.ProvPerc, Float)/100
								).label('TotalNonePerOutAmount')
							).\
							join(MKT_CURRENCY, MKT_CURRENCY.ID==MKT_LOAN_CONTRACT.Currency).\
							join(MKT_CUSTOMER, MKT_LOAN_CONTRACT.ContractCustomerID==MKT_CUSTOMER.ID).\
							join(MKT_SECTOR, MKT_LOAN_CONTRACT.Sector==MKT_SECTOR.ID).\
							outerjoin(MKT_ASSET_CLASS_PRO, MKT_LOAN_CONTRACT.AssetClass==MKT_ASSET_CLASS_PRO.ID).\
							outerjoin(MKT_PD_DATE, MKT_PD_DATE.ID.ilike("%" + MKT_LOAN_CONTRACT.ID)).\
							filter(or_(MKT_LOAN_CONTRACT.LoanProduct.in_(LoanProduct),MKT_LOAN_CONTRACT.Sector.in_(LoanSector))).\
							filter(MKT_LOAN_CONTRACT.DisbursedStat =='Y').\
							distinct(MKT_LOAN_CONTRACT.ID).\
							subquery()

	if Branch not in ['','ALL', None]:
		Branch = getSplitData(Branch)
		LoanObj = db.session.query(LoanObj).filter(LoanObj.c.Branch.in_(Branch)).subquery()

	if AssetClass not in ['','ALL', None]:
		LoanObj = db.session.query(LoanObj).filter(LoanObj.c.AssetClass.in_(AssetClass)).subquery()
	return LoanObj

def getFinalResultProvisionLoan(Branch='ALL'):
	
	LoanObj = getSpecificProvision(Branch)
	ReadAs 		= 1000000
	NewLoanObj = db.session.query(
									(func.sum(LoanObj.c.NonePerResGroupLCAmount)/ReadAs).label('ProResGroupLCAmount'),
									(func.sum(LoanObj.c.NonePerResIndLCAmount)/ReadAs).label('ProResIndLCAmount'),
									(func.sum(LoanObj.c.NonePerResSmBsLCAmount)/ReadAs).label('ProResSmBsCAmount'),
									(func.sum(LoanObj.c.NonePerNoneResIndLCAmount)/ReadAs).label('ProNoneResIndLCAmount'),
									(func.sum(LoanObj.c.NonePerNoneResLgEntLCAmount)/ReadAs).label('ProNoneResLgEntLCAmount'),
									(func.sum(LoanObj.c.TotalNonePerOutAmount)/ReadAs).label('TotalProvisionOutstandingAmount')
								).\
								all()
	return NewLoanObj
