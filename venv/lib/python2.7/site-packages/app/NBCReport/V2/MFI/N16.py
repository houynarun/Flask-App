# -*- coding: utf-8 -*-
'''
Report Name: 	MONTHLY REPORT ON LOAN CLASSIFICATION, PROVISIONING AND NON-PERFORMING RATIO				
				
URL 		: 	/Morakot/Report/NBC/N16
'''
from decimal                    import *

from app.mktcore.imports        import *
import app.tools.mktdate        as mktdate
import app.tools.mktsetting     as mktsetting
import app.tools.mktmoney       as mktmoney
import app.tools.mktnbc         as mktnbc
import app.tools.mktmessage     as mktmessage

from app.LoanContract.models 	import *
from app.Customer.models 		import *
from app.IdType.models	 		import *
from app.LoanProduct.models 	import *
from app.Position.models 		import *
from app.Collateral.models 		import *
from app.CollateralType.models 	import *
from app.LoanApplication.models import *
from app.Currency.models 		import *
from app.LoanAmendment.models 	import MKT_LOAN_AMENDMENT
from app.LoanWriteOff.models 	import *
from app.AssetClass.models 		import * 

def getMFI16(Branch = "ALL", ReportedDate = ""):
	try:
		''' This function must return result like below:
			Result = {
				'Data': 		Data,
				'Excel': 		Excel,
				'ReportHeader': ReportHeader,
				'TableHeader': 	TableHeader
				}
		'''
		Result			=   {}
		Data 			= 	[]
		Excel 			= 	{}
		TableHeader 	= 	{}

		TableHeader = mktnbc.setTableHeader(Text=u'ការធ្វើចំណាត់ថ្នាក់\nClassification', 
									 Rowspan=3,Colspan=0,RowIndex=1, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ចំនួនឥណទាន\nNumber of Loans", 
									 Rowspan=3,Colspan=0,RowIndex=1, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ចំនួនទឹកប្រាក់\nAmount", 
									 Rowspan=3,Colspan=0,RowIndex=1, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"សំវិធានធន\nProvisions", 
									 Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"តាមបទបញ្ញត្ត\nRequired", 
									 Rowspan=0,Colspan=2,RowIndex=2, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ភាគរយ\nPercentage", 
									 Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ចំនួនទឹកប្រាក់\nAmount", 
									 Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ចំនួនជាក់ស្តែង\nActual Amount", 
									 Rowspan=2,Colspan=0,RowIndex=2, TableHeader=TableHeader)



		ReportHeader 	=   mktnbc.getHeaderReport(	ReportName 		=	'MONTHLY REPORT ON LOAN CLASSIFICATION, PROVISIONING AND NON-PERFORMING RATIO',
													Title 			=	u'របាយការណ៍ប្រចាំខែស្តីពី ការធ្វើចំណាត់ថ្នាក់ឥណទាន សំវិធានធន និងអនុបាតឥណទានមិនដំណើរការ',
													Form 			=	"16")

		Data, Excel		=	getClassificationDetail(Branch,ReportedDate, ReportHeader)

		Result.update({'ReportHeader':ReportHeader,'TableHeader':TableHeader,'Data':Data,'Excel':Excel})

		CellSyle = {
					'B8':'top*medium,FF000000',
					'C8':'top*medium,FF000000',
					'G8':'top*medium,FF000000',
					'G9':'top*thin,FF000000:left*thin,FF000000:bottom*thin,FF000000',

					'H8':'top*medium,FF000000:right*medium,FF000000',
					
					'D9':'left*thin,FF000000:right*thin,FF000000',
					'D10':'left*thin,FF000000:right*thin,FF000000:bottom*thin,FF000000',

					'B10':'bottom*thin,FF000000',

					'C10':'bottom*thin,FF000000',

					'E10':'bottom*thin,FF000000',

					'H10':'top*thin,FF000000:left*thin,FF000000:right*medium,FF000000:bottom*thin,FF000000',
					'G10':'bottom*thin,FF000000',

					'B12':'top*thin,FF000000',
					'B13':'top*thin,FF000000',
					'B14':'top*thin,FF000000',
					'B15':'top*thin,FF000000',
					'B16':'top*thin,FF000000',
					'B17':'top*thin,FF000000',
					'B22':'top*thin,FF000000',
					'B23':'top*thin,FF000000',
					'B24':'top*thin,FF000000',
					'B25':'top*thin,FF000000',
					'B26':'top*thin,FF000000:bottom*thin,FF000000',

					'C12':'top*thin,FF000000',
					'C13':'top*thin,FF000000',
					'C14':'top*thin,FF000000',
					'C15':'top*thin,FF000000',
					'C16':'top*thin,FF000000',
					'C17':'top*thin,FF000000',
					'C18':'top*thin,FF000000',
					'C19':'top*thin,FF000000',
					'C20':'top*thin,FF000000',
					'C21':'top*thin,FF000000',
					'C22':'top*thin,FF000000',
					'C23':'top*thin,FF000000',
					'C24':'top*thin,FF000000',
					'C25':'top*thin,FF000000',
					'C26':'top*thin,FF000000:bottom*thin,FF000000',
					
					'E24':'top*thin,FF000000:left*thin,FF000000',
					'E25':'top*thin,FF000000:left*thin,FF000000',
					'E26':'top*thin,FF000000:left*thin,FF000000:bottom*medium,FF000000',

					'F24':'top*thin,FF000000:left*thin,FF000000',
					'F25':'top*thin,FF000000:left*thin,FF000000',
					'F26':'top*thin,FF000000:left*thin,FF000000:bottom*medium,FF000000',
					
					'G24':'top*thin,FF000000:left*thin,FF000000',
					'G25':'top*thin,FF000000:left*thin,FF000000',
					'G26':'top*thin,FF000000:left*thin,FF000000:bottom*medium,FF000000',

					'H24':'top*thin,FF000000:left*thin,FF000000:right*medium,FF000000',
					'H25':'top*thin,FF000000:left*thin,FF000000:right*medium,FF000000',
					'H26':'top*thin,FF000000:left*thin,FF000000:right*medium,FF000000:bottom*medium,FF000000',
					}

		return Result, CellSyle
	except:
		raise

def getClassificationDetail(Branch,ReportedDate,ReportHeader):
	try:
		RecordRow 	= []
		ExcelRecord 	= {}
		ExcelRecord.update({				
				"C4" : ReportHeader.get('ReportedDate',""),
				"C6" : ReportHeader.get('CompanyName',""),
				"F7" : Decimal(ReportHeader.get('ReportingRate',0))
			})

		CurrencyDic = 	ReportHeader['DicExchangeRate'] 
		# Default first cell in Excel file ()
		CellRow 	= 11

		Loan		= [
						(("១. ឥណទានមានឥណប្រតិទាន ១ឆ្នាំ ឬតិចជាង ១ឆ្នាំ\n1. Loans of 1 Year or Less","N","សរុប (១)\nTotal (1)"), [("១.១. ស្តង់ដា\n1.1. Standard", ["0", "10"]),
							                                                                                 ("១.២. ក្រោមស្តងដារ ហួសកាលកំណត់សង ៣០ថ្ងៃ\n1.2. Substandard Past Due > 30 Days", ["20"]),
							                                                                                 ("១.៣. សង្ស័យ ហួសកាលកំណត់សង ៦០ថ្ងៃ\n1.3. Doubtful Past Due > 60 Days", ["30"]),
							                                                                                 ("១.៤. បាត់បង់ ហួសកាលកំណត់សង ៩០ថ្ងៃ\n1.4. Loss Past Due > 90 Days", ["40"])]),

						(("២. ឥណទានមានឥណប្រតិទានលើសពី ១ឆ្នាំ\n2. Loans of More Than 1 Year","Y","សរុប(២)\nTotal (2)"), [("១.១. ស្តង់ដា\n1.1. Standard", ["0", "10"]),
							                                                                                 ("១.២. ក្រោមស្តងដារ ហួសកាលកំណត់សង ៣០ថ្ងៃ\n1.2. Substandard Past Due > 30 Days", ["20"]),
							                                                                                 ("១.៣. សង្ស័យ ហួសកាលកំណត់សង ៦០ថ្ងៃ\n1.3. Doubtful Past Due > 60 Days", ["30"]),
							                                                                                 ("១.៤. បាត់បង់ ហួសកាលកំណត់សង ៩០ថ្ងៃ\n1.4. Loss Past Due > 90 Days", ["40"])]) 
					  ]

		TotalLoanNumber				=	0
		TotalOustanding				= 	0
		TotalProvisionAmount		=	0
		TotalProvisionActualAmount	=	0	
		TotalStandardOutstanding	= 	0

	  	for item in Loan:
	  		LoanDurationText	= item[0][0]	
	  		MoreThanOneYear 	= item[0][1]
	  		TotalText			= item[0][2]
	  		#Head
	  		RecordRow.append({
							1:u'%s' % (LoanDurationText.decode('utf-8')),
							2:u'',
							3:u'',
							4:u'',
							5:u'',
							6:u'',
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
						})

  			TotLoanNumber				=	0
  			TotOustanding				= 	0
  			TotProvisionAmount			=	0
  			TotProvisionActualAmount	=	0
  			CellRow+=1
  			i = 1
  			AssetClassDic				= {}

			ASS_PRO = db.session.query(
										MKT_ASSET_CLASS_PRO
										).\
										filter(MKT_ASSET_CLASS_PRO.LoanType == 'N').\
										filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == str(MoreThanOneYear)).\
										all()

			if ASS_PRO:
				for Asset in ASS_PRO:
					AssetClassDic[str(Asset.ID)] = Decimal(Asset.ProvPerc) if Asset.ProvPerc else Decimal(0)

	  		for subItem in item[1]:
	  			AssetClass = subItem[1]

	  	# 		if AssetClass[0] == "20":

				# 	ProvisionPerc 	= 10

				# elif AssetClass[0] == "30":

				# 	ProvisionPerc 	= 30

				# elif AssetClass[0] == "40":

				# 	ProvisionPerc 	= 100
				# else:
				# 	ProvisionPerc 	= 0

				ProvisionPerc = AssetClassDic[str(AssetClass[0])]
				# if MoreThanOneYear == 'N':
				# 	if AssetClass[0] in ['0', '10']:
				# 		ProvisionPerc = 0

				SumLoanObj 			= getQueryClassification(Branch=Branch, CurrencyDic=CurrencyDic, AssetClass=AssetClass,MoreThanOneYear=MoreThanOneYear)	
				LoanNumber 			= Decimal(SumLoanObj[0].TotalNumber) if SumLoanObj[0].TotalNumber != None else 0
				Outstanding 		= Decimal(SumLoanObj[0].SumOutstandingAmount) / mktnbc.OneMillion if SumLoanObj[0].SumOutstandingAmount !=None else 0
				ProvisionAmount		= Outstanding * ProvisionPerc / 100

				'''
					For Role of client Camma he told us that Value of ProvisionActualAmount is equal ProvisionAmount 
					For Role of client Krousa he told us that Value of ProvisionActualAmount is equal Outstanding-ProvisionAmount

				''' 
				ProvisionActualAmount = ProvisionAmount

				TotLoanNumber				+=	LoanNumber
	  			TotOustanding				+= 	Outstanding
	  			TotProvisionAmount			+=	ProvisionAmount
	  			TotProvisionActualAmount	+=	ProvisionActualAmount

	  			if i == 1:
	  				TotalStandardOutstanding+=	Outstanding

	  			RecordRow.append({
								1:u'%s' % (subItem[0].decode('utf-8')),
								2:str(LoanNumber),
								3:mktmoney.formatNumber(Outstanding),
								4:u'%s%s' % (str(ProvisionPerc),"%"),
								5:mktmoney.formatNumber(ProvisionAmount),
								6:mktmoney.formatNumber(ProvisionActualAmount),
								'LineType':'GH',
								'Indent':0,
								'RowBGColor':"",
								'LineFormat':''
							})
	  			ExcelRecord.update({
							"D%s"%(CellRow) : LoanNumber,
							"E%s"%(CellRow) : Outstanding,
							"F%s"%(CellRow) : u'%s%s' % (str(ProvisionPerc),"%"),
							"G%s"%(CellRow) : float(("%.2f" % ProvisionAmount)),
							"H%s"%(CellRow) : ProvisionActualAmount,
						})
	  			CellRow+=1
	  			i+=1
  			TotalLoanNumber				+=	TotLoanNumber
  			TotalOustanding				+= 	TotOustanding
  			TotalProvisionAmount		+=	TotProvisionAmount
  			TotalProvisionActualAmount	+=	TotProvisionActualAmount
	  		#1,2 Total
  			RecordRow.append({
							1:u'%s' % (TotalText.decode('utf-8')),
							2:str(TotLoanNumber),
							3:mktmoney.formatNumber(TotOustanding),
							4:u'',
							5:mktmoney.formatNumber(TotProvisionAmount),
							6:mktmoney.formatNumber(TotProvisionActualAmount),
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
						})
  			CellRow+=1

		#3. Total
		RecordRow.append({
					1:u'៣. សរុប \n 3. TOTAL',
					2:str(TotalLoanNumber),
					3:mktmoney.formatNumber(TotalOustanding),
					4:u'',
					5:mktmoney.formatNumber(TotalProvisionAmount),
					6:mktmoney.formatNumber(TotalProvisionActualAmount),
					'LineType':'GH',
					'Indent':0,
					'RowBGColor':mktnbc.BG_BODY_COLOR,
					'LineFormat':'bold'
				})
		#4. Total Outstanding
		RecordRow.append({
					1:u'៤. សរុបសមតុល្យឥណទាន (៤ = ១ + ២)\n4. Total Loan Outstanding (4 = 1 + 2)',
					2:u'',
					3:u'',
					4:u'',
					5:u'',
					6:mktmoney.formatNumber(TotalOustanding),
					'LineType':'GH',
					'Indent':0,
					'RowBGColor':mktnbc.BG_BODY_COLOR,
					'LineFormat':'bold'
				})
		#5. Total Loan Outstanding Past Due
		TotalPastDue = TotalOustanding - TotalStandardOutstanding
		RecordRow.append({
					1:u'៥. សរុបសមតុល្យឥណទានហួសកាលកំណត់សង ៣០ថ្ងៃ (៥ = ៤ - (១.១ + ២.១))\n5. Total Loan Outstanding Past Due > 30 Days (5 = 4 - (1.1 + 2.1))',
					2:u'',
					3:u'',
					4:u'',
					5:u'',
					6:mktmoney.formatNumber(TotalPastDue),
					'LineType':'GH',
					'Indent':0,
					'RowBGColor':mktnbc.BG_BODY_COLOR,
					'LineFormat':'bold'
				})

		#6.Non-Performing Loan Ratio
		NonPerformRatio = 0
		if TotalOustanding != 0:
			NonPerformRatio = TotalPastDue / TotalOustanding
		NonPerformRatioPerc = NonPerformRatio * 100
		RecordRow.append({
					1:u'៦. អនុបាតឥណទានមិនដំណើរការ (៦ = ៥ / ៤)\n6. Non-Performing Loan Ratio (6 = 5 / 4)',
					2:u'',
					3:u'',
					4:u'',
					5:u'',
					6:mktmoney.formatNumber(NonPerformRatioPerc) + "%",
					'LineType':'GH',
					'Indent':0,
					'RowBGColor':mktnbc.BG_BODY_COLOR,
					'LineFormat':'bold'
				})

		# Loan WriteOff		
		WriteOffYTD 		= 	0
		# End Write Off	
		IDList 	= 	db.session.query(MKT_LOAN_AMENDMENT.LoanID).\
								filter(MKT_LOAN_AMENDMENT.Operation == 'TMN').all()

		# Find Current Period
		EndDate 	=	str(ReportedDate)
		StartDate 	=	"%s01"%EndDate[:-2]
		CurrentPeriodObj 	= 	db.session.query(
									MKT_WRITE_OFF_DE.Currency,
									func.sum(MKT_WRITE_OFF_DE.TotWOFAmount).label('TotWOFAmount')).\
								filter(MKT_WRITE_OFF_DE.WOFDate.between(StartDate, EndDate)).\
								group_by(MKT_WRITE_OFF_DE.Currency)
		if IDList:	
			CurrentPeriodObj = CurrentPeriodObj.filter(~MKT_WRITE_OFF_DE.ID.in_(IDList))

		WriteOffCurrent = 0
		for rowPeriod in CurrentPeriodObj.all():
			WriteOffCurrentObj = rowPeriod.TotWOFAmount
			if WriteOffCurrentObj:
				WriteOffCurrent += WriteOffCurrentObj * CurrencyDic[rowPeriod.Currency]


		WriteOffCurrent /= mktnbc.OneMillion

		# Find YearToDate
		StartYearToDate 	= 	"%s-01-01"%EndDate[:4]
		YearToDateObj 	= 	db.session.query(
								MKT_WRITE_OFF_DE.Currency,
								func.sum(MKT_WRITE_OFF_DE.TotWOFAmount).label('TotWOFAmount')).\
							filter(MKT_WRITE_OFF_DE.WOFDate.between(StartYearToDate, EndDate)).\
							group_by(MKT_WRITE_OFF_DE.Currency)
		if IDList:	
			YearToDateObj = YearToDateObj.filter(~MKT_WRITE_OFF_DE.ID.in_(IDList))

		WriteOffYTDObj = 0
		for rowToDate in YearToDateObj.all():
			WriteOffYTDObj = rowToDate.TotWOFAmount
			if WriteOffYTDObj:
				WriteOffYTD += Decimal(WriteOffYTDObj) * CurrencyDic[rowToDate.Currency]


		WriteOffYTD /= mktnbc.OneMillion

		RecordRow.append({
							1:u'ឥណទានលុបចោល ៖\nLoan Write Off :  ',
							2:u'ក្នុងគ្រា ៖ %s'%mktmoney.formatNumber(WriteOffCurrent, 1, 2),
							3:u'បង្គរពីដើមឆ្នាំ ៖ %s'%mktmoney.formatNumber(WriteOffYTD, 1, 2),
							4:'',
							5:'',
							6:'',
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
							})
		CellRow = 28
		ExcelRecord.update({
						"E%s"%(CellRow) : WriteOffCurrent,
						"H%s"%(CellRow) : WriteOffYTD,
					})
		
		return RecordRow,ExcelRecord
	except Exception, e:
		raise
	else:
		pass
	finally:
		pass

def getQueryClassification(**kwarg):
	Branch 			= kwarg.get("Branch")
	CurrencyDic		= kwarg.get("CurrencyDic")
	AssetClass		= kwarg.get("AssetClass") 
	MoreThanOneYear	= kwarg.get("MoreThanOneYear") 

	if CurrencyDic:

		CurrencyObj = db.session.query(MKT_CURRENCY)

		ApprovedAmountToBaseCurrency 	= case([(MKT_LOAN_CONTRACT.Currency == item.ID, MKT_LOAN_CONTRACT.ApprovedAmount * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("ApprovedAmountBaseCurrency")
		OutstandingAmountToBaseCurrency = case([(MKT_LOAN_CONTRACT.Currency == item.ID, MKT_LOAN_CONTRACT.OutstandingAmount * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("OutstandingAmountBaseCurrency")
		AccrInterestToBaseCurrency	 	= case([(MKT_LOAN_CONTRACT.Currency == item.ID, MKT_LOAN_CONTRACT.AccrInterest * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("AccrInterestBaseCurrency")
		DisbursedToBaseCurrency 		= case([(MKT_LOAN_CONTRACT.Currency == item.ID, MKT_LOAN_CONTRACT.Disbursed * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("DisbursedBaseCurrency")

	
	LoanObj 							= db.session.query(	func.sum(ApprovedAmountToBaseCurrency).label("SumApprovedAmount"),
															func.sum(OutstandingAmountToBaseCurrency).label("SumOutstandingAmount"),
															func.sum(AccrInterestToBaseCurrency).label("SumAccrInterest"),
															func.sum(DisbursedToBaseCurrency).label("SumDisbursed"),
															func.count(MKT_LOAN_CONTRACT.ID).label("TotalNumber") 
															).\
															filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
															filter(MKT_LOAN_CONTRACT.DisbursedStat =='Y')											
	

	if AssetClass:
		LoanObj		= 	LoanObj.\
						filter(MKT_LOAN_CONTRACT.AssetClass.in_(AssetClass))	

	if MoreThanOneYear in ["Y", "N"]:
		LoanObj		= 	LoanObj.\
						filter(MKT_LOAN_CONTRACT.MoreThanOneYear == MoreThanOneYear)

	if Branch != "ALL":
		Branch      =   Branch.split()
		LoanObj     =   LoanObj.\
						filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))

	return LoanObj


