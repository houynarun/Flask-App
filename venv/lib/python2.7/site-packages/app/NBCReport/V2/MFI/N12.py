# -*- coding: utf-8 -*-
'''
Report Name: 	MONTHLY REPORT ON CREDIT CLASSIFICATION
				Standard Loan (Provisioning 0%)"
				
URL 		: 	/Morakot/Report/NBC/N13
'''
from decimal                    import *

from app.mktcore.imports        import *
import app.tools.mktdate        as mktdate
import app.tools.mktsetting     as mktsetting
import app.tools.mktmoney       as mktmoney
import app.tools.mktnbc         as mktnbc
import app.tools.mktmessage     as mktmessage

from app.LoanContract.models 	import *
from app.Customer.models 		import *
from app.IdType.models	 		import *
from app.LoanProduct.models 	import *
from app.Position.models 		import *
from app.Collateral.models 		import *
from app.CollateralType.models 	import *
from app.LoanApplication.models import *
from app.Currency.models 		import *

def getSplitData(ListData):
	ListData = str(ListData).replace(',', ' ')
	ListData = ListData.split()

	return ListData

def getMFI12(Branch = "ALL"):
	try:
		''' This function must return result like below:
			Result = {
				'Data': 		Data,
				'Excel': 		Excel,
				'ReportHeader': ReportHeader,
				'TableHeader': 	TableHeader
				}
		'''
		Result			=   {}
		Data 			= 	[]
		Excel 			= 	{}
		TableHeader 	= 	{}

		TableHeader = mktnbc.setTableHeader(Text=u'ប្រភេទឥណទាន \n Types of Loans', 
									 Rowspan=2,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center")	

		TableHeader = mktnbc.setTableHeader(Text=u'ចំនួនឥណទាន \n Number of Loans', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")	

		TableHeader = mktnbc.setTableHeader(Text=u'កម្រិតអនុម័ន \n Approved Limit', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")	

		TableHeader = mktnbc.setTableHeader(Text=u'ឥណទានជាក់ស្តែង \n Outstanding Loans', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")	

		TableHeader = mktnbc.setTableHeader(Text=u'ការប្រាក់បង្គរ \n Accrued Interest', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")	
		
		#-----------------------------------------------------------------------------------#
		TableHeader = mktnbc.setTableHeader(Text=u"វត្ថុបញ្ចាំ \n Collateral ", 
									 Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"ចលនទ្រព្យ \n Movable Property", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"អចលនទ្រព្យ \n Real Estate", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"ផ្សេងៗ \n Other", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

		#-----------------------------------------------------------------------------------#

		ReportHeader 	=   mktnbc.getHeaderReport(	ReportName 		=	u'MONTHLY REPORT ON CREDIT CLASSIFICATION',
													Title 			=	u'របាយការណ៍ប្រចាំខែស្តីពី ចំណាត់ថ្នាក់ឥណទាន',
													Form 			=	'12',
													SubTitleReport 	=	u'ឥណទានស្តង់ដារ (សំវិធានធន ០%)\n Standard Loan (Provisioning 0%)' )

		Data, Excel, TableHeader =	getStandardLoanDetail(Branch, ReportHeader, TableHeader)

		Result.update({'ReportHeader':ReportHeader,'TableHeader':TableHeader,'Data':Data,'Excel':Excel})

		CellSyle = {
					'B8':'top*medium,FF000000',
					'B9':'bottom*thin,FF000000',
					'C9':'left*thin,FF000000:right*thin,FF000000',
					'E9':'left*thin,FF000000:right*thin,FF000000',
					'H8':'top*medium,FF000000',
					'I8':'top*medium,FF000000:right*medium,FF000000',

					'B17':'bottom*thin,FF000000',
					'B26':'top*thin,FF000000:bottom*thin,FF000000',
					'B27':'bottom*medium,FF000000',

					}

		return Result, CellSyle
	except:
		raise

def getStandardLoanDetail(Branch, ReportHeader, TableHeader):
	try:
		RecordRow 	= []
		ExcelRecord 	= {}
		ExcelRecord.update({				
				"D5" : ReportHeader.get('ReportedDate',""),
				"C6" : ReportHeader.get('CompanyName',""),
				"G7" : Decimal(ReportHeader.get('ReportingRate',0))
			})
		
		CurrencyDic = 	ReportHeader['DicExchangeRate'] 
		# Default first cell in Excel file ()
		CellRow 	= 11		

		GroupLoan 			=	mktsetting.getAppSetting('NBCGroupLoanN12').split()
		SmallBusiness   	=	mktsetting.getAppSetting('NBCSmallBusinessLoanN12').split()
		# For Non-Resident: Individual Entities is Individual Loan and Legal Entities is Small Business for Resident
		NBCIndividual   	=	mktsetting.getAppSetting('NBCIndividualLoanN12').split()
		
		NBCCollateralTypes	= 	mktsetting.getAppSetting('NBCCollateralTypesN12').splitlines()
		DictSetting = {}
		
		for item in NBCCollateralTypes:
			Value = item.split('*')
			DictSetting.update({Value[0]:Value[1].split()})
		NBCMovable 			=	DictSetting.get('Property')
		NBCRealEstate 		=	DictSetting.get('RealEstate')
		NBCOther 			=	DictSetting.get('Other')

		LoanBaseResident 	= 	[("1ឥណទានក្រុម \n Group Loans", GroupLoan),
								 ("2ឥណទានឯកត្តជន \n Individual Loans", NBCIndividual),
								 ("3អាជីវកម្មធុនតូច \n Small Business", SmallBusiness)
								]
 
		LoanBaseNonResident = 	[("1រូបវ័ន្តបុគ្គល \n Individual", NBCIndividual),
								 ("2និតិបុគ្គល \n Legal Entities", SmallBusiness)
								]
		DictData									=	{}
		#Un-Secure
		ListUnSecured								=	[]
		DictUnSecuredTotal 							=	{}
		TotUnSecuredNumber 							= 	0
		TotUnSecuredApprovedAmount 					=	0
		TotUnSecuredOustandingAmount 				=	0
		TotUnSecuredAccrInterest 					=	0
		TotUnSecuredMovable 						= 	0
		TotUnSecuredRealEstate 						= 	0
		TotUnSecuredOther 							= 	0	

		ListUnSecuredResident						=	[]	
		DictUnSecuredResident 						=	{}
		DictUnSecuredResidentTotal 					=	{}
		TotUnSecuredResidentNumber 					= 	0
		TotUnSecuredResidentApprovedAmount 			=	0
		TotUnSecuredResidentOustandingAmount 		=	0
		TotUnSecuredResidentAccrInterest 			=	0
		TotUnSecuredResidentMovable 				= 	0
		TotUnSecuredResidentRealEstate 				= 	0
		TotUnSecuredResidentOther 					= 	0

		ListUnSecuredNonResident					=	[]
		DictUnSecuredNonResident 					=	{}
		DictUnSecuredNonResidentTotal 				=	{}
		TotUnSecuredNonResidentNumber 				= 	0
		TotUnSecuredNonResidentApprovedAmount 		=	0
		TotUnSecuredNonResidentOustandingAmount 	=	0
		TotUnSecuredNonResidentAccrInterest 		=	0
		TotUnSecuredNonResidentMovable 				= 	0
		TotUnSecuredNonResidentRealEstate 			= 	0
		TotUnSecuredNonResidentOther 				= 	0
		
		#Secure
		ListSecured 								=	[]
		DictSecuredTotal 							=	{}
		TotSecuredNumber 							= 	0
		TotSecuredApprovedAmount 					=	0
		TotSecuredOustandingAmount 					=	0
		TotSecuredAccrInterest 						=	0
		TotSecuredMovable 							= 	0
		TotSecuredRealEstate 						= 	0
		TotSecuredOther 							= 	0	

		ListSecuredResident							=	[]	
		DictSecuredResident 						=	{}
		DictSecuredResidentTotal 					=	{}
		TotSecuredResidentNumber 					= 	0
		TotSecuredResidentApprovedAmount 			=	0
		TotSecuredResidentOustandingAmount 			=	0
		TotSecuredResidentAccrInterest 				=	0
		TotSecuredResidentMovable 					= 	0
		TotSecuredResidentRealEstate 				= 	0
		TotSecuredResidentOther 					= 	0

		ListSecuredNonResident						=	[]
		DictSecuredNonResident 						=	{}
		DictSecuredNonResidentTotal 				=	{}
		TotSecuredNonResidentNumber 				= 	0
		TotSecuredNonResidentApprovedAmount 		=	0
		TotSecuredNonResidentOustandingAmount 		=	0
		TotSecuredNonResidentAccrInterest 			=	0
		TotSecuredNonResidentMovable 				= 	0
		TotSecuredNonResidentRealEstate 			= 	0
		TotSecuredNonResidentOther 					= 	0

		'''
			UnSecure Loan
		'''
		#UnSecure - Resident
		for item in LoanBaseResident:
			SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="N", Resident="Y", Type=item[1], IsSum="Y", CurrencyDic=CurrencyDic)

			LoanNumber 			= Decimal(SumLoanObj[0].TotalNumber) if SumLoanObj[0].TotalNumber != None else 0
			ApprovedAmount 		= Decimal(SumLoanObj[0].SumApprovedAmount) / mktnbc.OneMillion if SumLoanObj[0].SumApprovedAmount !=None else 0 
			Outstanding 		= Decimal(SumLoanObj[0].SumOutstandingAmount) / mktnbc.OneMillion if SumLoanObj[0].SumOutstandingAmount !=None else 0
			AccrInterest 		= Decimal(SumLoanObj[0].SumAccrInterest) / mktnbc.OneMillion if SumLoanObj[0].SumAccrInterest !=None else 0 

			Movable 			= 0
			RealEstate 			= 0
			Other 				= 0

			TotUnSecuredResidentNumber			+=  LoanNumber
			TotUnSecuredResidentApprovedAmount 	+=  ApprovedAmount
			TotUnSecuredResidentOustandingAmount+=  Outstanding
			TotUnSecuredResidentAccrInterest 	+=  AccrInterest
			TotUnSecuredResidentMovable 		+=  0
			TotUnSecuredResidentRealEstate 		+=  0
			TotUnSecuredResidentOther 			+=  0

			DictUnSecuredResident.update({item[0]: {"LoanNumber": LoanNumber, "ApprovedAmount": ApprovedAmount,
													"Outstanding": Outstanding, "AccrInterest": AccrInterest,
													"Movable": Movable, "RealEstate": RealEstate, "Other": Other
												    }
										})
			DictUnSecuredResidentTotal.update({"Total": {"Label": "សរុប និវេសជន\nTotal Residents",
															"LoanNumber": TotUnSecuredResidentNumber,
															"ApprovedAmount": TotUnSecuredResidentApprovedAmount,
															"Outstanding": TotUnSecuredResidentOustandingAmount, 
															"AccrInterest": TotUnSecuredResidentAccrInterest,
															"Movable": TotUnSecuredResidentMovable, 
															"RealEstate": TotUnSecuredResidentRealEstate, 
															"Other": TotUnSecuredResidentOther
												    }})			

		ListUnSecuredResident.append(DictUnSecuredResident)
		ListUnSecuredResident.append(DictUnSecuredResidentTotal)

		#UnSecure Non-Resident
		for item in LoanBaseNonResident:
			SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="N", Resident="N", Type=item[1], IsSum="Y", CurrencyDic=CurrencyDic)

			LoanNumber 			= Decimal(SumLoanObj[0].TotalNumber) if SumLoanObj[0].TotalNumber != None else 0
			ApprovedAmount 		= Decimal(SumLoanObj[0].SumApprovedAmount) / mktnbc.OneMillion if SumLoanObj[0].SumApprovedAmount !=None else 0 
			Outstanding 		= Decimal(SumLoanObj[0].SumOutstandingAmount) / mktnbc.OneMillion if SumLoanObj[0].SumOutstandingAmount !=None else 0
			AccrInterest 		= Decimal(SumLoanObj[0].SumAccrInterest) / mktnbc.OneMillion if SumLoanObj[0].SumAccrInterest !=None else 0

			Movable 			= 0
			RealEstate 			= 0
			Other 				= 0

			TotUnSecuredNonResidentNumber			+=  LoanNumber
			TotUnSecuredNonResidentApprovedAmount 	+=  ApprovedAmount
			TotUnSecuredNonResidentOustandingAmount +=  Outstanding
			TotUnSecuredNonResidentAccrInterest 	+=  AccrInterest
			TotUnSecuredNonResidentMovable 			+=  0
			TotUnSecuredNonResidentRealEstate 		+=  0
			TotUnSecuredNonResidentOther 			+=  0

			DictUnSecuredNonResident.update({item[0]: {"LoanNumber": LoanNumber, "ApprovedAmount": ApprovedAmount,
													"Outstanding": Outstanding, "AccrInterest": AccrInterest,
													"Movable": Movable, "RealEstate": RealEstate, "Other": Other
												    }
										})
			DictUnSecuredNonResidentTotal.update({"Total": {"Label": "សរុប អនិវេសជន\nTotal Non-Residents",
													"LoanNumber": TotUnSecuredNonResidentNumber, 
													"ApprovedAmount": TotUnSecuredNonResidentApprovedAmount,
													"Outstanding": TotUnSecuredNonResidentOustandingAmount, 
													"AccrInterest": TotUnSecuredNonResidentAccrInterest,
													"Movable": TotUnSecuredNonResidentMovable,
													"RealEstate": TotUnSecuredNonResidentRealEstate,
													"Other": TotUnSecuredNonResidentOther
												    }})	

		ListUnSecuredNonResident.append(DictUnSecuredNonResident)
		ListUnSecuredNonResident.append(DictUnSecuredNonResidentTotal)

		TotUnSecuredNumber 							= 	TotUnSecuredResidentNumber + TotUnSecuredNonResidentNumber
		TotUnSecuredApprovedAmount 					=	TotUnSecuredResidentApprovedAmount  + TotUnSecuredNonResidentApprovedAmount 
		TotUnSecuredOustandingAmount 				=	TotUnSecuredResidentOustandingAmount  + TotUnSecuredNonResidentOustandingAmount 
		TotUnSecuredAccrInterest 					=	TotUnSecuredResidentAccrInterest  + TotUnSecuredNonResidentAccrInterest 
		TotUnSecuredMovable 						= 	TotUnSecuredResidentMovable + TotUnSecuredNonResidentMovable
		TotUnSecuredRealEstate 						= 	TotUnSecuredResidentRealEstate + TotUnSecuredNonResidentRealEstate
		TotUnSecuredOther 							= 	TotUnSecuredResidentOther  + TotUnSecuredNonResidentOther 

		DictUnSecuredTotal.update({"Total": {"LoanNumber": TotUnSecuredNumber, 
												"ApprovedAmount": TotUnSecuredApprovedAmount,
												"Outstanding": TotUnSecuredOustandingAmount, 
												"AccrInterest": TotUnSecuredAccrInterest,
												"Movable": TotUnSecuredMovable,
												"RealEstate": TotUnSecuredRealEstate,
												"Other": TotUnSecuredOther}})

		ListUnSecured.append({	"និវេសជន\nResidents": ListUnSecuredResident,
								"អនិវេសជន\nNon-Residents": ListUnSecuredNonResident
							 })
		ListUnSecured.append(DictUnSecuredTotal)
		TotSecuredResidentMovable 			= 0
		TotSecuredResidentRealEstate 		= 0
		TotSecuredResidentOther 			= 0

		'''End UnSecure Loan'''

		'''
			Secure Loan
		'''
		#Secure - Resident
		for item in LoanBaseResident:
			SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="Y", Resident="Y", Type=item[1], IsSum="Y", CurrencyDic=CurrencyDic)

			LoanNumber 			= Decimal(SumLoanObj[0].TotalNumber) if SumLoanObj[0].TotalNumber != None else 0
			ApprovedAmount 		= Decimal(SumLoanObj[0].SumApprovedAmount) / mktnbc.OneMillion if SumLoanObj[0].SumApprovedAmount !=None else 0 
			Outstanding 		= Decimal(SumLoanObj[0].SumOutstandingAmount) / mktnbc.OneMillion if SumLoanObj[0].SumOutstandingAmount !=None else 0
			AccrInterest 		= Decimal(SumLoanObj[0].SumAccrInterest) / mktnbc.OneMillion if SumLoanObj[0].SumAccrInterest !=None else 0

			SumMovableObj 		= getQuery(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCMovable,Type=item[1])
			SumRealEstateObj 	= getQuery(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCRealEstate,Type=item[1])
			SumOtherObj			= getQuery(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCOther,Type=item[1])
			
			Movable 			= Decimal(SumMovableObj[0].ValuationPrice) / mktnbc.OneMillion if SumMovableObj[0].ValuationPrice != None else 0
			RealEstate 			= Decimal(SumRealEstateObj[0].ValuationPrice) / mktnbc.OneMillion if SumRealEstateObj[0].ValuationPrice !=None else 0 
			Other 				= Decimal(SumOtherObj[0].ValuationPrice) / mktnbc.OneMillion if SumOtherObj[0].ValuationPrice !=None else 0 
			TotSecuredResidentNumber			+=  LoanNumber
			TotSecuredResidentApprovedAmount 	+=  ApprovedAmount
			TotSecuredResidentOustandingAmount 	+=  Outstanding
			TotSecuredResidentAccrInterest 		+=  AccrInterest
			TotSecuredResidentMovable 			+=  Movable
			TotSecuredResidentRealEstate 		+=  RealEstate
			TotSecuredResidentOther 			+=  Other

			DictSecuredResident.update({item[0]: {"LoanNumber": LoanNumber, "ApprovedAmount": ApprovedAmount,
													"Outstanding": Outstanding, "AccrInterest": AccrInterest,
													"Movable": Movable, "RealEstate": RealEstate, "Other": Other
												    }
										})
			DictSecuredResidentTotal.update({"Total": {"Label": "សរុប និវេសជន\nTotal Residents",
															"LoanNumber": TotSecuredResidentNumber,
															"ApprovedAmount": TotSecuredResidentApprovedAmount,
															"Outstanding": TotSecuredResidentOustandingAmount, 
															"AccrInterest": TotSecuredResidentAccrInterest,
															"Movable": TotSecuredResidentMovable, 
															"RealEstate": TotSecuredResidentRealEstate, 
															"Other": TotSecuredResidentOther
												    }})			

		ListSecuredResident.append(DictSecuredResident)
		ListSecuredResident.append(DictSecuredResidentTotal)

		#Secure Non-Resident
		for item in LoanBaseNonResident:
			SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="Y", Resident="N", Type=item[1], IsSum="Y", CurrencyDic=CurrencyDic)

			LoanNumber 			= Decimal(SumLoanObj[0].TotalNumber) if SumLoanObj[0].TotalNumber != None else 0
			ApprovedAmount 		= Decimal(SumLoanObj[0].SumApprovedAmount) / mktnbc.OneMillion if SumLoanObj[0].SumApprovedAmount !=None else 0
			Outstanding 		= Decimal(SumLoanObj[0].SumOutstandingAmount) / mktnbc.OneMillion if SumLoanObj[0].SumOutstandingAmount !=None else 0 
			AccrInterest 		= Decimal(SumLoanObj[0].SumAccrInterest) / mktnbc.OneMillion if SumLoanObj[0].SumAccrInterest !=None else 0 

			SumMovableObj 		= getQueryCollateral(Branch=Branch, Secured="Y", Resident="N", Type=item[1], IsSum="Y", CollateralType=NBCMovable, CurrencyDic=CurrencyDic)
			SumRealEstateObj 	= getQueryCollateral(Branch=Branch, Secured="Y", Resident="N", Type=item[1], IsSum="Y", CollateralType=NBCRealEstate, CurrencyDic=CurrencyDic)
			SumOtherObj			= getQueryCollateral(Branch=Branch, Secured="Y", Resident="N", Type=item[1], IsSum="Y", CollateralType=NBCOther, CurrencyDic=CurrencyDic)
			
			Movable 			= Decimal(SumMovableObj[0].SumValuationPrice) / mktnbc.OneMillion if SumMovableObj[0].SumValuationPrice !=None else 0 
			RealEstate 			= Decimal(SumRealEstateObj[0].SumValuationPrice) / mktnbc.OneMillion if SumRealEstateObj[0].SumValuationPrice !=None else 0 
			Other 				= Decimal(SumOtherObj[0].SumValuationPrice) / mktnbc.OneMillion if SumOtherObj[0].SumValuationPrice !=None else 0 

			TotSecuredNonResidentNumber				+=  LoanNumber
			TotSecuredNonResidentApprovedAmount 	+=  ApprovedAmount
			TotSecuredNonResidentOustandingAmount 	+=  Outstanding
			TotSecuredNonResidentAccrInterest 		+=  AccrInterest
			TotSecuredNonResidentMovable 			+=  Movable
			TotSecuredNonResidentRealEstate 		+=  RealEstate
			TotSecuredNonResidentOther 				+=  Other

			DictSecuredNonResident.update({item[0]: {"LoanNumber": LoanNumber, "ApprovedAmount": ApprovedAmount,
													"Outstanding": Outstanding, "AccrInterest": AccrInterest,
													"Movable": Movable, "RealEstate": RealEstate, "Other": Other
												    }
										})
			DictSecuredNonResidentTotal.update({"Total": {"Label": "សរុប អនិវេសជន\nTotal Non-Residents",
													"LoanNumber": TotSecuredNonResidentNumber, 
													"ApprovedAmount": TotSecuredNonResidentApprovedAmount,
													"Outstanding": TotSecuredNonResidentOustandingAmount, 
													"AccrInterest": TotSecuredNonResidentAccrInterest,
													"Movable": TotSecuredNonResidentMovable,
													"RealEstate": TotSecuredNonResidentRealEstate,
													"Other": TotSecuredNonResidentOther
												    }})	

		ListSecuredNonResident.append(DictSecuredNonResident)
		ListSecuredNonResident.append(DictSecuredNonResidentTotal)

		TotSecuredNumber 							= 	TotSecuredResidentNumber + TotSecuredNonResidentNumber
		TotSecuredApprovedAmount 					=	TotSecuredResidentApprovedAmount  + TotSecuredNonResidentApprovedAmount 
		TotSecuredOustandingAmount 					=	TotSecuredResidentOustandingAmount  + TotSecuredNonResidentOustandingAmount 
		TotSecuredAccrInterest 						=	TotSecuredResidentAccrInterest  + TotSecuredNonResidentAccrInterest 
		TotSecuredMovable 							= 	TotSecuredResidentMovable + TotSecuredNonResidentMovable
		TotSecuredRealEstate 						= 	TotSecuredResidentRealEstate + TotSecuredNonResidentRealEstate
		TotSecuredOther 							= 	TotSecuredResidentOther  + TotSecuredNonResidentOther 

		DictSecuredTotal.update({"Total": {"LoanNumber": TotSecuredNumber, 
												"ApprovedAmount": TotSecuredApprovedAmount,
												"Outstanding": TotSecuredOustandingAmount, 
												"AccrInterest": TotSecuredAccrInterest,
												"Movable": TotSecuredMovable,
												"RealEstate": TotSecuredRealEstate,
												"Other": TotSecuredOther}})

		ListSecured.append({	"និវេសជន\nResidents": ListSecuredResident,
								"អនិវេសជន\nNon-Residents": ListSecuredNonResident
							 })
		ListSecured.append(DictSecuredTotal)

		'''End UnSecure'''

		DictData.update({"1១. ឥណទានមិនមានវត្ថុបញ្ចំា\n1. Unsecured Loan": ListUnSecured,
						 "2២. ឥណទានមានវត្ថុបញ្ចំា \n 2. Secured Loan": ListSecured 
						 })	

		TotalRow = 0
		#Render Dictionary
		# for Key, Value in DictData.iteritems():	
		# 	CellRow += TotalRow
		# 	RecordRow.append({
		# 					1:u"",
		# 					2:u'%s' % (Key.decode('utf-8')[1:]),
		# 					3:str(Value[1].get("Total").get("LoanNumber")),
		# 					4:mktmoney.formatNumber(Value[1].get("Total").get("ApprovedAmount")),
		# 					5:mktmoney.formatNumber(Value[1].get("Total").get("Outstanding")),
		# 					6:mktmoney.formatNumber(Value[1].get("Total").get("AccrInterest")),
		# 					7:mktmoney.formatNumber(Value[1].get("Total").get("Movable")),
		# 					8:mktmoney.formatNumber(Value[1].get("Total").get("RealEstate")),
		# 					9:mktmoney.formatNumber(Value[1].get("Total").get("Other")),
		# 					'LineType':'GH',
		# 					'Indent':0,
		# 					'RowBGColor':mktnbc.BG_BODY_COLOR,
		# 					'LineFormat':'bold'
		# 				})
		UnsecuredLoanLineDict = {u'GroupLoans': 11, 'IndividualLoans': 12, u'SmallBusiness': 13}
		UnsecuredNoneLoanLineDict = {u'Individual': 15, 'LegalEntities': 16}

		SecuredLoanLineDict = {u'GroupLoans': 19, 'IndividualLoans': 20, u'SmallBusiness': 21}
		SecuredNoneLoanLineDict = {u'Individual': 23, 'LegalEntities': 24,}

		for Key, Value in DictData.iteritems():	
			CellRow += TotalRow
			RecordRow.append({
							1:u"",
							2:u'%s' % (Key.decode('utf-8')[1:]),
							3:str(Value[1].get("Total").get("LoanNumber")),
							4:mktmoney.formatNumber(Value[1].get("Total").get("ApprovedAmount")),
							5:mktmoney.formatNumber(Value[1].get("Total").get("Outstanding")),
							6:mktmoney.formatNumber(Value[1].get("Total").get("AccrInterest")),
							7:mktmoney.formatNumber(Value[1].get("Total").get("Movable")),
							8:mktmoney.formatNumber(Value[1].get("Total").get("RealEstate")),
							9:mktmoney.formatNumber(Value[1].get("Total").get("Other")),
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
						})
			for Key1, Value1 in Value[0].iteritems():
				
				for Key2, Value2 in Value1[0].iteritems():
					RecordRow.append({
								1:u'%s' % (Key1.decode('utf-8')),
								2:u'%s' % (Key2.decode('utf-8')[1:]),
								3:str(Value2.get("LoanNumber")),
								4:mktmoney.formatNumber(Value2.get("ApprovedAmount")),
								5:mktmoney.formatNumber(Value2.get("Outstanding")),
								6:mktmoney.formatNumber(Value2.get("AccrInterest")),
								7:mktmoney.formatNumber(Value2.get("Movable")),
								8:mktmoney.formatNumber(Value2.get("RealEstate")),
								9:mktmoney.formatNumber(Value2.get("Other")),
								'LineType':'GH',
								'Indent':0,
								'RowBGColor':"",
								'LineFormat':''
							})
					if Key1[-10:]=='-Residents':
						''
						NoneResKey = ( Key2.splitlines()[1]).replace(' ','')
						RowNum = CellRow
						if CellRow <18:
							''
							NoneResKey = ( Key2.splitlines()[1]).replace(' ','')
							RowNum = UnsecuredNoneLoanLineDict.get(NoneResKey)
							ExcelRecord.update({
								"C%s"%(RowNum) : Value2.get("LoanNumber"),
								"D%s"%(RowNum) : Value2.get("ApprovedAmount"),
								"E%s"%(RowNum) : Value2.get("Outstanding"),
								"F%s"%(RowNum) : Value2.get("AccrInterest"),
								"G%s"%(RowNum) : Value2.get("Movable"),
								"H%s"%(RowNum) : Value2.get("RealEstate"),
								"I%s"%(RowNum) : Value2.get("Other"),
							})
						else:
							''
							ResKey = ( Key2.splitlines()[1]).replace(' ','')
							RowNum = SecuredNoneLoanLineDict.get(ResKey)
							ExcelRecord.update({
								"C%s"%(RowNum) : Value2.get("LoanNumber"),
								"D%s"%(RowNum) : Value2.get("ApprovedAmount"),
								"E%s"%(RowNum) : Value2.get("Outstanding"),
								"F%s"%(RowNum) : Value2.get("AccrInterest"),
								"G%s"%(RowNum) : Value2.get("Movable"),
								"H%s"%(RowNum) : Value2.get("RealEstate"),
								"I%s"%(RowNum) : Value2.get("Other"),
							})
					else:
						''
						RowNum = CellRow
						if CellRow <15:
							''
							NoneResKey = ( Key2.splitlines()[1]).replace(' ','')
							RowNum = UnsecuredLoanLineDict.get(NoneResKey)
							ExcelRecord.update({
								"C%s"%(RowNum) : Value2.get("LoanNumber"),
								"D%s"%(RowNum) : Value2.get("ApprovedAmount"),
								"E%s"%(RowNum) : Value2.get("Outstanding"),
								"F%s"%(RowNum) : Value2.get("AccrInterest"),
								"G%s"%(RowNum) : Value2.get("Movable"),
								"H%s"%(RowNum) : Value2.get("RealEstate"),
								"I%s"%(RowNum) : Value2.get("Other"),
							})
						else:
							''
							ResKey = ( Key2.splitlines()[1]).replace(' ','')
							RowNum = SecuredLoanLineDict.get(ResKey)
							ExcelRecord.update({
								"C%s"%(RowNum) : Value2.get("LoanNumber"),
								"D%s"%(RowNum) : Value2.get("ApprovedAmount"),
								"E%s"%(RowNum) : Value2.get("Outstanding"),
								"F%s"%(RowNum) : Value2.get("AccrInterest"),
								"G%s"%(RowNum) : Value2.get("Movable"),
								"H%s"%(RowNum) : Value2.get("RealEstate"),
								"I%s"%(RowNum) : Value2.get("Other"),
							})
					# ExcelRecord.update({
					# 	"C%s"%(CellRow) : Value2.get("LoanNumber"),
					# 	"D%s"%(CellRow) : Value2.get("ApprovedAmount"),
					# 	"E%s"%(CellRow) : Value2.get("Outstanding"),
					# 	"F%s"%(CellRow) : Value2.get("AccrInterest"),
					# 	"G%s"%(CellRow) : Value2.get("Movable"),
					# 	"H%s"%(CellRow) : Value2.get("RealEstate"),
					# 	"I%s"%(CellRow) : Value2.get("Other"),
					# })
					CellRow +=1

				RecordRow.append({
							1:u"",
							2:u'%s' % (Value1[1].get("Total").get("Label").decode('utf-8')),
							3:str(Value1[1].get("Total").get("LoanNumber")),
							4:mktmoney.formatNumber(Value1[1].get("Total").get("ApprovedAmount")),
							5:mktmoney.formatNumber(Value1[1].get("Total").get("Outstanding")),
							6:mktmoney.formatNumber(Value1[1].get("Total").get("AccrInterest")),
							7:mktmoney.formatNumber(Value1[1].get("Total").get("Movable")),
							8:mktmoney.formatNumber(Value1[1].get("Total").get("RealEstate")),
							9:mktmoney.formatNumber(Value1[1].get("Total").get("Other")),
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
						})
				CellRow +=1
			TotalRow+=1
		#TotalUnSecure and Secure
		RecordRow.append({
							1:u"",
							2:u'សរុប\nTotal',
							3:str(TotUnSecuredNumber + TotSecuredNumber),
							4:mktmoney.formatNumber(TotUnSecuredApprovedAmount + TotSecuredApprovedAmount),
							5:mktmoney.formatNumber(TotUnSecuredOustandingAmount + TotSecuredOustandingAmount),
							6:mktmoney.formatNumber(TotUnSecuredAccrInterest + TotSecuredAccrInterest),
							7:mktmoney.formatNumber(TotUnSecuredMovable + TotSecuredMovable),
							8:mktmoney.formatNumber(TotUnSecuredRealEstate + TotSecuredRealEstate),
							9:mktmoney.formatNumber(TotUnSecuredOther + TotSecuredOther),
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
						})

		#3. Actual Provisions
		CellRow = 27
		SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="", Resident="", Type="ALL", IsSum="Y", CurrencyDic=CurrencyDic, AssetClass=["20","30","40"])

		LoanNumber 			= Decimal(SumLoanObj[0].TotalNumber) if SumLoanObj[0].TotalNumber != None else 0
		ApprovedAmount 		= Decimal(SumLoanObj[0].SumApprovedAmount) / mktnbc.OneMillion if SumLoanObj[0].SumApprovedAmount !=None else 0 
		Outstanding 		= Decimal(SumLoanObj[0].SumOutstandingAmount) / mktnbc.OneMillion if SumLoanObj[0].SumOutstandingAmount !=None else 0
		AccrInterest 		= Decimal(SumLoanObj[0].SumAccrInterest) / mktnbc.OneMillion if SumLoanObj[0].SumAccrInterest !=None else 0

		SumMovableObj 		= getQueryCollateral(Branch=Branch, Secured="", Resident="", Type="ALL", IsSum="Y", CollateralType=NBCMovable, CurrencyDic=CurrencyDic,  AssetClass=["20","30","40"])
		SumRealEstateObj 	= getQueryCollateral(Branch=Branch, Secured="", Resident="", Type="ALL", IsSum="Y", CollateralType=NBCRealEstate, CurrencyDic=CurrencyDic, AssetClass=["20","30","40"])
		SumOtherObj			= getQueryCollateral(Branch=Branch, Secured="", Resident="", Type="ALL", IsSum="Y", CollateralType=NBCOther, CurrencyDic=CurrencyDic, AssetClass=["20","30","40"])
		
		Movable 			= Decimal(SumMovableObj[0].SumValuationPrice) / mktnbc.OneMillion if SumMovableObj[0].SumValuationPrice !=None else 0 
		RealEstate 			= Decimal(SumRealEstateObj[0].SumValuationPrice) / mktnbc.OneMillion if SumRealEstateObj[0].SumValuationPrice !=None else 0 
		Other 				= Decimal(SumOtherObj[0].SumValuationPrice) / mktnbc.OneMillion if SumOtherObj[0].SumValuationPrice !=None else 0 

		RecordRow.append({
							1:u"",
							2:u'៣. សំវិធានធនពិត\n3. Actual Provisions',
							3:'',
							4:'',
							5:'',
							6:'',
							7:'',
							8:'',
							9:'',
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
						})
		# ExcelRecord.update({	
		# 				"C%s"%(CellRow) : LoanNumber,
		# 				"D%s"%(CellRow) : ApprovedAmount,
		# 				"E%s"%(CellRow) : Outstanding,
		# 				"F%s"%(CellRow) : AccrInterest,
		# 				"G%s"%(CellRow) : Movable,
		# 				"H%s"%(CellRow) : RealEstate,
		# 				"I%s"%(CellRow) : Other,
		# 			})

		return RecordRow,ExcelRecord, TableHeader
	except Exception, e:
		raise
	else:
		pass
	finally:
		pass

def getQueryStandardLoan(**kwarg):

	Branch 		= kwarg.get("Branch")
	Secured 	= kwarg.get("Secured")
	Resident	= kwarg.get("Resident")
	Type		= kwarg.get("Type")
	CurrencyDic	= kwarg.get("CurrencyDic")
	IsSum		= kwarg.get("IsSum")
	AssetClass	= kwarg.get("AssetClass") if kwarg.get("AssetClass") else ["0","15"]

	if CurrencyDic:

		CurrencyObj = db.session.query(MKT_CURRENCY)

		ApprovedAmountToBaseCurrency = case([(MKT_LOAN_CONTRACT.Currency == item.ID, MKT_LOAN_CONTRACT.Disbursed * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("ApprovedAmountBaseCurrency")
		OutstandingAmountToBaseCurrency = case([(MKT_LOAN_CONTRACT.Currency == item.ID, MKT_LOAN_CONTRACT.OutstandingAmount * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("OutstandingAmountBaseCurrency")
		AccrInterestToBaseCurrency = case([(MKT_LOAN_CONTRACT.Currency == item.ID, MKT_LOAN_CONTRACT.AccrInterest * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("AccrInterestBaseCurrency")

	if IsSum == "Y":
		LoanObj = db.session.query(	func.sum(ApprovedAmountToBaseCurrency).label("SumApprovedAmount"),
											func.sum(OutstandingAmountToBaseCurrency).label("SumOutstandingAmount"),
											func.sum(AccrInterestToBaseCurrency).label("SumAccrInterest"),
											func.count(MKT_LOAN_CONTRACT.ID).label("TotalNumber") )
	else:
		LoanObj = db.session.query(	MKT_LOAN_CONTRACT.ID,
											MKT_LOAN_CONTRACT.Currency,
											MKT_LOAN_CONTRACT.LoanProduct,
											MKT_LOAN_PRODUCT.Description.label('LoanProduct'),
											MKT_LOAN_CONTRACT.Account,
											MKT_LOAN_CONTRACT.AssetClass,
											MKT_LOAN_CONTRACT.LoanType,
											MKT_LOAN_CONTRACT.Currency,
											MKT_LOAN_CONTRACT.Disbursed,
											MKT_LOAN_CONTRACT.OutstandingAmount,
											MKT_LOAN_CONTRACT.ApprovedAmount,
											MKT_LOAN_CONTRACT.AccrInterest,	
											MKT_LOAN_COLLATERAL.Collateral.label("CollateralID"),
											ApprovedAmountToBaseCurrency,
											OutstandingAmountToBaseCurrency,
											AccrInterestToBaseCurrency)

	LoanObj	 =   					LoanObj.\
	 									join(
											MKT_CUSTOMER,
											MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID
										).\
										join(
											MKT_LOAN_PRODUCT,
											MKT_LOAN_PRODUCT.ID == MKT_LOAN_CONTRACT.LoanProduct
										).\
										outerjoin(
											MKT_LOAN_COLLATERAL,
											MKT_LOAN_COLLATERAL.ID == MKT_LOAN_CONTRACT.ID
										).\
										filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
										filter(MKT_LOAN_CONTRACT.DisbursedStat =='Y').\
										filter(MKT_LOAN_CONTRACT.AssetClass.in_(AssetClass))
	# 1. Secured Loan									
	if Secured == "Y":
		LoanObj	 =   					LoanObj.\
										filter(MKT_LOAN_COLLATERAL.Collateral != None)
										
	elif Secured == "N":# 2. Un Secured Loan	
		LoanObj	 =   					LoanObj.\
										filter(MKT_LOAN_COLLATERAL.Collateral == None)

	if Resident in ["Y","N"]:
		LoanObj	 =   					LoanObj.\
										filter(MKT_CUSTOMER.Resident == Resident)

	if Type != "ALL":
		LoanObj	 =   					LoanObj.\
										filter(MKT_LOAN_CONTRACT.LoanProduct.in_(Type))

	if Branch != "ALL":
		Branch      =   Branch.split()
		LoanObj     =   LoanObj.\
						filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))

	return LoanObj


def getQueryCollateral(**kwarg):

	Branch 		= kwarg.get("Branch")
	Secured 	= kwarg.get("Secured")
	Resident	= kwarg.get("Resident")
	Type		= kwarg.get("Type")
	CurrencyDic	= kwarg.get("CurrencyDic")
	IsSum		= kwarg.get("IsSum")
	CollateralType = kwarg.get("CollateralType")
	AssetClass	= kwarg.get("AssetClass") if kwarg.get("AssetClass") else ["0","15"]

	if CurrencyDic:

		CurrencyObj = db.session.query(MKT_CURRENCY)

		ValuationPrice = case([(MKT_COLLATERAL_DE.ValuationPrice == None, 0)], else_ = MKT_COLLATERAL_DE.ValuationPrice).label("ValPrice")

		ValuationPriceToBaseCurrency = case([(MKT_LOAN_CONTRACT.Currency == item.ID, ValuationPrice * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("ValuationPriceBaseCurrency")

	if IsSum == "Y":

		LoanObj = db.session.query(	func.sum(ValuationPriceToBaseCurrency).label("SumValuationPrice") )
	else:
		LoanObj = db.session.query(	
											MKT_LOAN_CONTRACT.ID,
											MKT_LOAN_CONTRACT.Currency,
											MKT_LOAN_CONTRACT.LoanProduct,
											MKT_LOAN_PRODUCT.Description.label('LoanProduct'),
											MKT_LOAN_CONTRACT.Account,
											MKT_LOAN_CONTRACT.AssetClass,
											MKT_LOAN_CONTRACT.LoanType,
											MKT_LOAN_CONTRACT.Currency,
											MKT_LOAN_CONTRACT.Disbursed,
											MKT_LOAN_CONTRACT.OutstandingAmount,
											MKT_LOAN_CONTRACT.ApprovedAmount,
											MKT_LOAN_CONTRACT.AccrInterest,	
											MKT_LOAN_COLLATERAL.Collateral.label("CollateralID"),
											MKT_COLLATERAL_DE.ValuationPrice,
											MKT_COLLATERAL_TYPE.Description,
											ValuationPriceToBaseCurrency
										)

	LoanObj	 =   					LoanObj.\
	 									join(
											MKT_CUSTOMER,
											MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID
										).\
										join(
											MKT_LOAN_PRODUCT,
											MKT_LOAN_PRODUCT.ID == MKT_LOAN_CONTRACT.LoanProduct
										).\
										outerjoin(
											MKT_LOAN_COLLATERAL,
											MKT_LOAN_COLLATERAL.ID == MKT_LOAN_CONTRACT.ID
										).\
										outerjoin(
											MKT_COLLATERAL_DE,
											MKT_COLLATERAL_DE.CollateralID == MKT_LOAN_COLLATERAL.Collateral
										).\
										outerjoin(
											MKT_COLLATERAL_TYPE,
											MKT_COLLATERAL_TYPE.ID == MKT_COLLATERAL_DE.CollateralType
										).\
										filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
										filter(MKT_LOAN_CONTRACT.DisbursedStat =='Y').\
										filter(MKT_LOAN_CONTRACT.AssetClass.in_(AssetClass))
	# 1. Secured Loan									
	if Secured == "Y":
		LoanObj	 =   					LoanObj.\
										filter(MKT_LOAN_COLLATERAL.Collateral != None)
										
	elif Secured == "N":# 2. Un Secured Loan	
		LoanObj	 =   					LoanObj.\
										filter(MKT_LOAN_COLLATERAL.Collateral == None)

	if Resident in ["Y","N"]:
		LoanObj	 =   					LoanObj.\
										filter(MKT_CUSTOMER.Resident == Resident)

	if Type != "ALL":
		LoanObj	 =   					LoanObj.\
										filter(MKT_LOAN_CONTRACT.LoanProduct.in_(Type))

	if CollateralType:
		LoanObj	 =   					LoanObj.\
										filter(MKT_COLLATERAL_TYPE.ID.in_(CollateralType))

	if Branch != "ALL":
		Branch      =   Branch.split()
		LoanObj     =   LoanObj.\
						filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))

	return LoanObj

def getQuery(**kwarg):

	Branch 		= kwarg.get("Branch")
	Secured 	= kwarg.get("Secured")
	Resident	= kwarg.get("Resident")
	Type		= kwarg.get("Type")
	CurrencyDic	= kwarg.get("CurrencyDic")
	IsSum		= kwarg.get("IsSum")
	CollateralType = kwarg.get("CollateralType")
	AssetClass	=  ["0","15"]
	
	LoanObj = db.session.query(MKT_LOAN_COLLATERAL.Collateral).\
								join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_LOAN_COLLATERAL.ID).\
								filter(MKT_LOAN_CONTRACT.AssetClass.in_(AssetClass)).\
								filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
								filter(MKT_LOAN_CONTRACT.LoanProduct.in_(Type)).\
								filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').all()
	ColList = list(LoanObj)
	LoanObj = db.session.query((MKT_COLLATERAL_DE.ValuationPrice * cast(MKT_CURRENCY.OtherRate1,Float)).label('ValuationPrice')
								).\
								join(MKT_CURRENCY,MKT_CURRENCY.ID==MKT_COLLATERAL_DE.Currency).\
								join(MKT_COLLATERAL_TYPE,MKT_COLLATERAL_TYPE.ID==MKT_COLLATERAL_DE.CollateralType).\
								filter(MKT_COLLATERAL_DE.CollateralID.in_(ColList)).\
								filter(MKT_COLLATERAL_DE.CollateralType.in_(CollateralType)).\
								filter(or_(MKT_COLLATERAL_DE.WithdrawalDate =='',MKT_COLLATERAL_DE.WithdrawalDate < MKT_COLLATERAL_DE.ReceivedDate)).subquery()

	LoanObj = db.session.query(func.sum(LoanObj.c.ValuationPrice).label('ValuationPrice'))
	
	return LoanObj