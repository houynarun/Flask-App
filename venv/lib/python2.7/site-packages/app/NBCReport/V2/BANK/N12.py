# -*- coding: utf-8 -*-
'''
Report Name: Net Open Position
'''

from app.mktcore.imports 		import *
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
from app.Currency.models		import MKT_CURRENCY

import app.tools.mktdate 		as mktdate
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmoney 		as mktmoney
import app.tools.mktnbc			as mktnbc
import app.tools.mktgl 			as mktgl
import app.tools.mktmessage 	as mktmessage
from decimal 					import Decimal
import app.NBCReport.V2.BANK.BankSetting  as NBCBankSetting

from app.LoanContract.models 	import *
from app.Customer.models 		import *
from app.IdType.models	 		import *
from app.LoanProduct.models 	import *
from app.Position.models 		import *
from app.Collateral.models 		import *
from app.CollateralType.models 	import *
from app.LoanApplication.models import *
from app.Currency.models 		import *

try:
	from app.OverdraftContract.models import *
except ImportError as e:
    print e


def getGLValueForField(Branch = "ALL", Period = 2,NBCBank05Key='', NBCExchangeRateDict={},**Kargs):
	return NBCBankSetting.getGLValueFromField(Branch, Period, "NBCBankN05",NBCBank05Key, NBCExchangeRateDict,**Kargs)


def getBANK12(Branch = "ALL", ReportedDate = "", Period = 2, Month = "", Year = ""):
	''' 
		This function must return result like below:
		Result = {
			'Data': 		Data,
			'Excel': 		Excel,
			'ReportHeader': ReportHeader,
			'TableHeader': 	TableHeader
			}
	'''

	try:
		CurrencyObj			=	MKT_CURRENCY.query
		ReadAs 				= 1000000
		Condition = []
		if Year and Month:
			GLTable   	= MKT_GL_BALANCE_BACKUP
			Condition 	= [GLTable.GLYear == Year,GLTable.GLMonth == Month]
			CYear 	  	= Year
			CMonth 	  	= Month
		else:
			GLTable   	= MKT_GL_BALANCE
			BankDate  	= mktdate.getBankDate()
			CYear 	  	= BankDate.year
			CMonth 	  	= BankDate.month

		Result 			= {}
		Data 			= []
		Excel 			= {}
		CurrencyDic     =   mktnbc.getNBCExchangeRate(CYear, CMonth)

		ReportHeader 	= {}
		ReportHeader 	= mktnbc.getHeaderReport(	ReportName 		=	u'MONTHLY REPORT ON CREDIT CLASSIFICATION',
													Title 			=	u'របាយការណ៏ប្រចាំខែសី្តពី ចំណាត់ថ្នាក់ឥណទាន',
													Form 			=	'Normal',
													)
		
		TableHeader 	= {}
		TableHeader = mktnbc.setTableHeader(Text=u"ប្រភេទឥណទាន\nTypes of Loans", 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ឥណទានអនុញ្ញាត\nCredit Lines",
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ឥណទានជាក់ស្តែង\nOutstanding Loans",
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"មធ្យមភាគអត្រាការប្រាក់ ក្រោយថ្លឹង\n Weighted Average Interest Rate",
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ការប្រាក់បង្គរ\nAccrued Interest",
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ទ្រព្យបញ្ចាំ Collateral ",
									 Rowspan='',Colspan=3,RowIndex=1, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ចលនទ្រព្យ Movable Property",
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"អចលនទ្រព្យ Real Estate",
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader)

		TableHeader = mktnbc.setTableHeader(Text=u"ផ្សេងៗ Other",
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader)

		#----------------------------------------------------------------------------------------------------------------#
		
		ReportingRate = float(ReportHeader.get('ReportingRate',0))
		Excel.update({
				"A5" : u'As of:  %s'% mktdate.formatDate(ReportedDate,'%d %B %Y'),
				"D6" : ((ReportHeader.get('CompanyName',"")).splitlines())[0],
				"D7" : ((ReportHeader.get('CompanyName',"")).splitlines())[1],
				"H9" : u'%s'%ReportingRate,
				"H10" : u'%s'%ReportingRate,
			})

		CellRow = 17
		CurrencyDic 		= 	ReportHeader['DicExchangeRate']
		TermLoan 			=	mktsetting.getAppSetting('NBCBankTermLoanN12').split()
		ConsumerLoan   		=	mktsetting.getAppSetting('NBCBankConsumerLoanN12').split()
		NBCCollateralTypes	= 	mktsetting.getAppSetting('NBCBankCollateralTypesN12').splitlines()
		DictSetting = {}
		
		for item in NBCCollateralTypes:
			Value = item.split('*')
			DictSetting.update({Value[0]:Value[1].split()})
		NBCMovable 			=	DictSetting.get('Property')
		NBCRealEstate 		=	DictSetting.get('RealEstate')
		NBCOther 			=	DictSetting.get('Other')
		# OverDraft Unsecured
		OUCreditLine 			= 0
		OUOutstandingAmount 	= 0
		OUAccrInterest 			= 0

		# OverDraft secured
		OSCreditLine 			= 0
		OSOutstandingAmount 	= 0
		OSAccrInterest 			= 0


		SumAvergaeInterestTermLoan 		= 0
		SumAvergaeInterestConsumer 		= 0

		SumAverageInterestOverDraft 	= 0
		SumAverageTermLoan 				= 0

		SumAverage 						= 0
		SubTotalAverage 				= 0
		SubTotalAverageInterest			= 0
		SubTotalAverageUnTermLoan		= 0
		SubTotalAverageInterestUnTerm 	= 0
		SubTotalAverageSecureTermLoan 	= 0
		SubTotalAverageInterestSecureTermLoan = 0
		SubTotalAverageSecureConsumer 	= 0
		SubTotalAverageInterestSecureConsumer = 0
		# OverDraft Unsecured
		SumLoanOverDraftObj = getQueryOverDraftLoan(Branch="ALL", Secured="N")
		for row in SumLoanOverDraftObj:
			OUCreditLine 		+= row.LimitedAmount
			OUOutstandingAmount += row.OutstandingAmount
			OUAccrInterest 		+= row.AccrInterest
			OUInterestRate 		= row.InterestRate


		# LoanContract Unsecured (Term Loan)
		SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="N", Type=TermLoan, IsSum="Y", CurrencyDic=CurrencyDic)
		for row in SumLoanObj:
			LUApprovedAmount 	=	row.SumApprovedAmount
			LUOutstandingAmount 	= row.SumOutstandingAmount
			LUInterestAmount 		= row.SumAccrInterest


		# LoanContract Unsecured (Term Loan) Average Interest
		SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="N", Type=TermLoan, CurrencyDic=CurrencyDic)
		if SumLoanObj:
			for row in SumLoanObj:
				SubAverage 			= row.OutstandingAmount + row.AccrInterest
				SubTotalAverage 	+= SubAverage
				SubAverageInterest 	= (SubAverage * Decimal(row.InterestRate)) /100
				SubTotalAverageInterest 	+= SubAverageInterest
				TotalAverage 		= SubTotalAverageInterest/SubTotalAverage *100

		# LoanContract Unsecured (Consumer Loan)
		SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="N", Type=ConsumerLoan, IsSum="Y", CurrencyDic=CurrencyDic)
		for row in SumLoanObj:
			LUCApprovedAmount 		=	row.SumApprovedAmount
			LUCOutstandingAmount 	= row.SumOutstandingAmount
			LUCInterestAmount 		= row.SumAccrInterest

		# LoanContract Unsecured (Term Loan) Average Interest
		SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="N", Type=ConsumerLoan, CurrencyDic=CurrencyDic)
		for row in SumLoanObj:
			SubAverage 			= row.OutstandingAmount + row.AccrInterest
			SubTotalAverageUnTermLoan 	+= SubAverage
			SubAverageInterest 	= (SubAverage * Decimal(row.InterestRate)) /100
			SubTotalAverageInterestUnTerm 	+= SubAverageInterest
			TotalAverageConsumer 		= SubTotalAverageInterestUnTerm/SubTotalAverageUnTermLoan *100

		TotComLoanUnCredit  = OUCreditLine + LUApprovedAmount
		TotComLoanUnOutstanding  = OUOutstandingAmount + LUOutstandingAmount
		TotComLoanUnInterest  = OUAccrInterest + LUInterestAmount

		TotUnSecuredCredit = TotComLoanUnCredit + LUCApprovedAmount
		TotUnSecuredOutstanding = TotComLoanUnOutstanding + LUCOutstandingAmount
		TotUnSecuredInterest = TotComLoanUnInterest + LUCInterestAmount
		Data.append({
							1:u"1- ឥណទានមិនមានវត្ថុបញ្ចំា Unsecured Loan",
							2:u'%s' %mktmoney.formatNumber(float(TotUnSecuredCredit), 1, 2),
							3:u'%s' %mktmoney.formatNumber(float(TotUnSecuredOutstanding), 1, 2),
							4:u'0.00',
							5:u'%s' %mktmoney.formatNumber(float(TotUnSecuredInterest), 1, 2),
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
						})

		Data.append({
							1:u"1.1- ឥណទានទៅរដ្ឋាភិបាល​ Loan to Government",
							2:u'0.00',
							3:u'0.00',
							4:u'0.00',
							5:u'0.00',
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':1,
							'RowBGColor':'',
							'LineFormat':'bold'
						})
		

		Data.append({
							1:u"1.2- ឥណទានពាណិជ្ជកម្ម Commercial Loan",
							2:u'%s' %mktmoney.formatNumber(float(TotComLoanUnCredit), 1, 2),
							3:u'%s' %mktmoney.formatNumber(float(TotComLoanUnOutstanding), 1, 2),
							4:u'0.00',
							5:u'%s' %mktmoney.formatNumber(float(TotComLoanUnInterest), 1, 2),
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':1,
							'RowBGColor':'',
							'LineFormat':'bold'
						})
		
		Data.append({
							1:u"1.2.1- ឥណទានវិបារូបន៍ Overdraft",
							2:u'%s' %mktmoney.formatNumber(float(OUCreditLine), 1, 2),
							3:u'%s' %mktmoney.formatNumber(float(OUOutstandingAmount), 1, 2),
							4:u'%s' %mktmoney.formatNumber(float(), 1, 2),
							5:u'%s' %mktmoney.formatNumber(float(OUAccrInterest), 1, 2),
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':2,
							'RowBGColor':'',
							'LineFormat':'bold'
						})
		
		Data.append({
							1:u"1.2.2- ឥណទានមានកាលកំណត់  ​​​​​Term Loan",
							2:u'%s' %mktmoney.formatNumber(float(LUApprovedAmount), 1, 2),
							3:u'%s' %mktmoney.formatNumber(float(LUOutstandingAmount), 1, 2),
							4:u'%s' %mktmoney.formatNumber(float(TotalAverage), 1, 2),
							5:u'%s' %mktmoney.formatNumber(float(LUInterestAmount), 1, 2),
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':2,
							'RowBGColor':'',
							'LineFormat':'bold'
						})
		
		Data.append({
							1:u"1.2.3- ឥណទានផ្សេងៗ​ Other Loans",
							2:u'0.00',
							3:u'0.00',
							4:u'0.00',
							5:u'0.00',
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':2,
							'RowBGColor':'',
							'LineFormat':'bold'
						})

		Data.append({
							1:u"1.3- ឥណទានទៅអ្នកប្រើប្រាស់ Consumer Loan​​",
							2:u'%s' %mktmoney.formatNumber(float(LUCApprovedAmount), 1, 2),
							3:u'%s' %mktmoney.formatNumber(float(LUCOutstandingAmount), 1, 2),
							4:u'%s' %mktmoney.formatNumber(float(TotalAverageConsumer), 1, 2),
							5:u'%s' %mktmoney.formatNumber(float(LUCInterestAmount), 1, 2),
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':1,
							'RowBGColor':'',
							'LineFormat':'bold'
						})

		Excel.update({
					"E%s"%(CellRow) : float(str(mktmoney.formatNumber(OUCreditLine)).replace(',','')),
					"F%s"%(CellRow) : float(str(mktmoney.formatNumber(OUOutstandingAmount)).replace(',','')),
					"G%s"%(CellRow) : float(str(mktmoney.formatNumber(0.00)).replace(',','')),
					"H%s"%(CellRow) : float(str(mktmoney.formatNumber(OUAccrInterest)).replace(',',''))
				})
		CellRow +=1
		Excel.update({
					"E%s"%(CellRow) : float(str(mktmoney.formatNumber(LUApprovedAmount)).replace(',','')),
					"F%s"%(CellRow) : float(str(mktmoney.formatNumber(LUOutstandingAmount)).replace(',','')),
					"G%s"%(CellRow) : float(str(mktmoney.formatNumber(TotalAverage)).replace(',','')),
					"H%s"%(CellRow) : float(str(mktmoney.formatNumber(LUInterestAmount)).replace(',',''))
				})
		CellRow +=2
		Excel.update({
					"E%s"%(CellRow) : float(str(mktmoney.formatNumber(LUCApprovedAmount)).replace(',','')),
					"F%s"%(CellRow) : float(str(mktmoney.formatNumber(LUCOutstandingAmount)).replace(',','')),
					"G%s"%(CellRow) : float(str(mktmoney.formatNumber(TotalAverageConsumer)).replace(',','')),
					"H%s"%(CellRow) : float(str(mktmoney.formatNumber(LUCInterestAmount)).replace(',',''))
				})



# --------------Secured Loan-------------------
		# OverDraft secured
		SumLoanOverDraftObj = getQueryOverDraftLoan(Branch="ALL", Secured="Y")
		for row in SumLoanOverDraftObj:
			SumMovableObj 		= getOverDraftColValue(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCMovable)
			SumRealEstateObj 	= getOverDraftColValue(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCRealEstate)
			SumOtherObj			= getOverDraftColValue(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCOther)
			
			MovableOverDraft 			= Decimal(SumMovableObj[0].ValuationPrice) / mktnbc.OneMillion if SumMovableObj[0].ValuationPrice != None else 0
			RealEstateOverDraft 		= Decimal(SumRealEstateObj[0].ValuationPrice) / mktnbc.OneMillion if SumRealEstateObj[0].ValuationPrice !=None else 0 
			OtherOverDraft 				= Decimal(SumOtherObj[0].ValuationPrice) / mktnbc.OneMillion if SumOtherObj[0].ValuationPrice !=None else 0 

			OSCreditLine 		+= row.LimitedAmount
			OSOutstandingAmount += row.OutstandingAmount
			OSAccrInterest 		+= row.AccrInterest
			OSInterestRate 		= row.InterestRate
			AverageInterest 	= (row.OutstandingAmount + row.AccrInterest) * Decimal(OSInterestRate)
			SumAverageInterestOverDraft += AverageInterest
			TotAverageOverDraft 	= SumAverageInterestOverDraft / (OSOutstandingAmount+OSAccrInterest)

		# LoanContract secured (Term Loan)
		SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="Y", Type=TermLoan, IsSum="Y", CurrencyDic=CurrencyDic)
		for row in SumLoanObj:
			SumMovableObj 		= getQueryCollateralValue(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCMovable,Type=TermLoan)
			SumRealEstateObj 	= getQueryCollateralValue(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCRealEstate,Type=TermLoan)
			SumOtherObj			= getQueryCollateralValue(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCOther,Type=TermLoan)
			
			MovableTermLoan 			= Decimal(SumMovableObj[0].ValuationPrice) / mktnbc.OneMillion if SumMovableObj[0].ValuationPrice != None else 0
			RealEstateTermLoan 			= Decimal(SumRealEstateObj[0].ValuationPrice) / mktnbc.OneMillion if SumRealEstateObj[0].ValuationPrice !=None else 0 
			OtherTermLoan 				= Decimal(SumOtherObj[0].ValuationPrice) / mktnbc.OneMillion if SumOtherObj[0].ValuationPrice !=None else 0 

			LSApprovedAmount 		= row.SumApprovedAmount
			LSOutstandingAmount 	= row.SumOutstandingAmount
			LSInterestAmount 		= row.SumAccrInterest

		# LoanContract secured (Term Loan) Average
		SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="Y", Type=TermLoan, CurrencyDic=CurrencyDic)
		for row in SumLoanObj:
			SubAverage 							= row.OutstandingAmount + row.AccrInterest
			SubTotalAverageSecureTermLoan 		+= SubAverage
			SubAverageInterest 					= (SubAverage * Decimal(row.InterestRate)) /100
			SubTotalAverageInterestSecureTermLoan 	+= SubAverageInterest
			TotalAverageSecureTermLoan 			= SubTotalAverageInterestSecureTermLoan/SubTotalAverageSecureTermLoan *100
		# LoanContract secured (Consumer Loan)
		SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="Y", Type=ConsumerLoan, IsSum="Y", CurrencyDic=CurrencyDic)
		for row in SumLoanObj:
			SumMovableObj 		= getQueryCollateralValue(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCMovable,Type=ConsumerLoan)
			SumRealEstateObj 	= getQueryCollateralValue(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCRealEstate,Type=ConsumerLoan)
			SumOtherObj			= getQueryCollateralValue(Branch=Branch,Secured="Y", Resident="N",CollateralType=NBCOther,Type=ConsumerLoan)
			
			MovableConsumer 			= Decimal(SumMovableObj[0].ValuationPrice) / mktnbc.OneMillion if SumMovableObj[0].ValuationPrice != None else 0
			RealEstateConsumer 			= Decimal(SumRealEstateObj[0].ValuationPrice) / mktnbc.OneMillion if SumRealEstateObj[0].ValuationPrice !=None else 0 
			OtherConsumer 				= Decimal(SumOtherObj[0].ValuationPrice) / mktnbc.OneMillion if SumOtherObj[0].ValuationPrice !=None else 0 
			LSCApprovedAmount 			= row.SumApprovedAmount
			LSCOutstandingAmount 		= row.SumOutstandingAmount
			LSCInterestAmount 			= row.SumAccrInterest


		# LoanContract secured (Consumer Loan) Average
		SumLoanObj = getQueryStandardLoan(Branch=Branch, Secured="Y", Type=ConsumerLoan, CurrencyDic=CurrencyDic)
		for row in SumLoanObj:
			SubAverage 			= row.OutstandingAmount + row.AccrInterest
			SubTotalAverageSecureConsumer 	+= SubAverage
			SubAverageInterest 	= (SubAverage * Decimal(row.InterestRate)) /100
			SubTotalAverageInterestSecureConsumer 	+= SubAverageInterest
			TotAverageConsumer = SubTotalAverageInterestSecureConsumer/SubTotalAverageSecureConsumer *100
		
		TotComLoanSeCredit  		= OSCreditLine 			+ LSApprovedAmount
		TotComLoanSeOutstanding 	= OSOutstandingAmount 	+ LSOutstandingAmount
		TotComLoanSeInterest 		= OSAccrInterest 		+ LSInterestAmount

		TotSecuredCredit 			= TotComLoanSeCredit 		+ LSCApprovedAmount
		TotSecuredOutstanding 		= TotComLoanSeOutstanding 	+ LSCOutstandingAmount
		TotSecuredInterest 			= TotComLoanSeInterest 		+ LSCInterestAmount
		Data.append({
							1:u"2- ការប្រើប្រាស់ទុនក្នុងស្រុក Local Uses of Funds",
							2:u'%s' %mktmoney.formatNumber(float(TotSecuredCredit), 1, 2),
							3:u'%s' %mktmoney.formatNumber(float(TotSecuredOutstanding), 1, 2),
							4:u'0.00',
							5:u'%s' %mktmoney.formatNumber(float(TotSecuredInterest), 1, 2),
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
						})
		
		Data.append({
							1:u"2.1- ឥណទានទៅរដ្ឋាភិបាល​ Loan to Government",
							2:u'0.00',
							3:u'0.00',
							4:u'0.00',
							5:u'0.00',
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':1,
							'RowBGColor':'',
							'LineFormat':'bold'
						})

		Data.append({
							1:u"2.2- ឥណទានពាណិជ្ជកម្ម Commercial Loan",
							2:u'%s' %mktmoney.formatNumber(float(TotComLoanSeCredit), 1, 2),
							3:u'%s' %mktmoney.formatNumber(float(TotComLoanSeOutstanding), 1, 2),
							4:u'0.00',
							5:u'%s' %mktmoney.formatNumber(float(TotComLoanSeInterest), 1, 2),
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':1,
							'RowBGColor':'',
							'LineFormat':'bold'
						})

		Data.append({
							1:u"2.2.1- ឥណទានវិបារូបន៍ Overdraft",
							2:u'%s' %mktmoney.formatNumber(float(OSCreditLine), 1, 2),
							3:u'%s' %mktmoney.formatNumber(float(OSOutstandingAmount), 1, 2),
							4:u'%s' %mktmoney.formatNumber(float(TotAverageOverDraft), 1, 2),
							5:u'%s' %mktmoney.formatNumber(float(OSAccrInterest), 1, 2),
							6:u'%s' %mktmoney.formatNumber(float(MovableOverDraft), 1, 2),
							7:u'%s' %mktmoney.formatNumber(float(RealEstateOverDraft), 1, 2),
							8:u'%s' %mktmoney.formatNumber(float(OtherOverDraft), 1, 2),
							'LineType':'GH',
							'Indent':2,
							'RowBGColor':'',
							'LineFormat':'bold'
						})
		
		Data.append({
							1:u"2.2.2- ឥណទានមានកាលកំណត់  ​​​​​Term Loan",
							2:u'%s' %mktmoney.formatNumber(float(LSApprovedAmount), 1, 2),
							3:u'%s' %mktmoney.formatNumber(float(LSOutstandingAmount), 1, 2),
							4:u'%s' %mktmoney.formatNumber(float(TotalAverageSecureTermLoan), 1, 2),
							5:u'%s' %mktmoney.formatNumber(float(LSInterestAmount), 1, 2),
							6:u'%s' %mktmoney.formatNumber(float(MovableTermLoan), 1, 2),
							7:u'%s' %mktmoney.formatNumber(float(RealEstateTermLoan), 1, 2),
							8:u'%s' %mktmoney.formatNumber(float(OtherTermLoan), 1, 2),
							'LineType':'GH',
							'Indent':2,
							'RowBGColor':'',
							'LineFormat':'bold'
						})
		
		Data.append({
							1:u"2.2.3- ឥណទានផ្សេងៗ​ Other Loans",
							2:u'0.00',
							3:u'0.00',
							4:u'0.00',
							5:u'0.00',
							6:u'0.00',
							7:u'0.00',
							8:u'0.00',
							'LineType':'GH',
							'Indent':2,
							'RowBGColor':'',
							'LineFormat':'bold'
						})

		Data.append({
							1:u"2.3- ឥណទានទៅអ្នកប្រើប្រាស់ Consumer Loan​​",
							2:u'%s' %mktmoney.formatNumber(float(LSCApprovedAmount), 1, 2),
							3:u'%s' %mktmoney.formatNumber(float(LSCOutstandingAmount), 1, 2),
							4:u'%s' %mktmoney.formatNumber(float(TotAverageConsumer), 1, 2),
							5:u'%s' %mktmoney.formatNumber(float(LSCInterestAmount), 1, 2),
							6:u'%s' %mktmoney.formatNumber(float(MovableConsumer), 1, 2),
							7:u'%s' %mktmoney.formatNumber(float(RealEstateConsumer), 1, 2),
							8:u'%s' %mktmoney.formatNumber(float(OtherConsumer), 1, 2),
							'LineType':'GH',
							'Indent':1,
							'RowBGColor':'',
							'LineFormat':'bold'
						})
		CellRow = 24 
		Excel.update({
					"E%s"%(CellRow) : float(str(mktmoney.formatNumber(OSCreditLine)).replace(',','')),
					"F%s"%(CellRow) : float(str(mktmoney.formatNumber(OSOutstandingAmount)).replace(',','')),
					"G%s"%(CellRow) : float(str(mktmoney.formatNumber(TotAverageOverDraft)).replace(',','')),
					"H%s"%(CellRow) : float(str(mktmoney.formatNumber(OSAccrInterest)).replace(',','')),
					"I%s"%(CellRow) : float(str(mktmoney.formatNumber(MovableOverDraft)).replace(',','')),
					"J%s"%(CellRow) : float(str(mktmoney.formatNumber(RealEstateOverDraft)).replace(',','')),
					"K%s"%(CellRow) : float(str(mktmoney.formatNumber(OtherOverDraft)).replace(',',''))
				})
		CellRow +=1
		Excel.update({
					"E%s"%(CellRow) : float(str(mktmoney.formatNumber(LSApprovedAmount)).replace(',','')),
					"F%s"%(CellRow) : float(str(mktmoney.formatNumber(LSOutstandingAmount)).replace(',','')),
					"G%s"%(CellRow) : float(str(mktmoney.formatNumber(TotalAverageSecureTermLoan)).replace(',','')),
					"H%s"%(CellRow) : float(str(mktmoney.formatNumber(LSInterestAmount)).replace(',','')),
					"I%s"%(CellRow) : float(str(mktmoney.formatNumber(MovableOverDraft)).replace(',','')),
					"J%s"%(CellRow) : float(str(mktmoney.formatNumber(RealEstateTermLoan)).replace(',','')),
					"K%s"%(CellRow) : float(str(mktmoney.formatNumber(OtherTermLoan)).replace(',',''))
				})
		CellRow +=2
		Excel.update({
					"E%s"%(CellRow) : float(str(mktmoney.formatNumber(LSCApprovedAmount)).replace(',','')),
					"F%s"%(CellRow) : float(str(mktmoney.formatNumber(LSCOutstandingAmount)).replace(',','')),
					"G%s"%(CellRow) : float(str(mktmoney.formatNumber(TotAverageConsumer)).replace(',','')),
					"H%s"%(CellRow) : float(str(mktmoney.formatNumber(LSCInterestAmount)).replace(',','')),
					"I%s"%(CellRow) : float(str(mktmoney.formatNumber(MovableConsumer)).replace(',','')),
					"J%s"%(CellRow) : float(str(mktmoney.formatNumber(RealEstateConsumer)).replace(',','')),
					"K%s"%(CellRow) : float(str(mktmoney.formatNumber(OtherConsumer)).replace(',',''))
				})

		
		Result.update({'TableHeader':TableHeader,'ReportHeader':ReportHeader,'Data':Data, 'Excel': Excel})

		CellSyle = {
					'B11':'bottom*double,FF000000',
					'C11':'bottom*double,FF000000',
					'D11':'bottom*double,FF000000',
					'J12':'top*double,FF000000:bottom*thin,FF000000',
					'K12':'top*double,FF000000:right*double,FF000000',
					'C13':'bottom*medium,FF000000',
					'D13':'bottom*medium,FF000000',

					}

		return Result,CellSyle

	except Exception, e:
		raise



def getQueryStandardLoan(**kwarg):

	Branch 		= kwarg.get("Branch")
	Secured 	= kwarg.get("Secured")
	Type		= kwarg.get("Type")
	CurrencyDic	= kwarg.get("CurrencyDic")
	IsSum		= kwarg.get("IsSum")
	AssetClass	= kwarg.get("AssetClass") if kwarg.get("AssetClass") else ["0"]
	ReadAs 		= 1000000

	if CurrencyDic:

		CurrencyObj = db.session.query(MKT_CURRENCY)

		ApprovedAmountToBaseCurrency = case([(MKT_LOAN_CONTRACT.Currency == item.ID, MKT_LOAN_CONTRACT.ApprovedAmount * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("ApprovedAmountBaseCurrency")
		OutstandingAmountToBaseCurrency = case([(MKT_LOAN_CONTRACT.Currency == item.ID, MKT_LOAN_CONTRACT.OutstandingAmount * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("OutstandingAmountBaseCurrency")
		AccrInterestToBaseCurrency = case([(MKT_LOAN_CONTRACT.Currency == item.ID, MKT_LOAN_CONTRACT.AccrInterest * CurrencyDic.get(item.ID)) for item in CurrencyObj]).label("AccrInterestBaseCurrency")

	if IsSum == "Y":
		LoanObj = db.session.query(	(func.sum(ApprovedAmountToBaseCurrency)/ReadAs).label("SumApprovedAmount"),
											(func.sum(OutstandingAmountToBaseCurrency)/ReadAs).label("SumOutstandingAmount"),
											(func.sum(AccrInterestToBaseCurrency)/ReadAs).label("SumAccrInterest"),
											func.count(MKT_LOAN_CONTRACT.ID).label("TotalNumber"))
	else:
		LoanObj = db.session.query(
									MKT_LOAN_CONTRACT.ID,
											MKT_LOAN_CONTRACT.Currency,
											MKT_LOAN_CONTRACT.LoanProduct,
											MKT_LOAN_PRODUCT.Description.label('LoanProduct'),
											MKT_LOAN_CONTRACT.Account,
											MKT_LOAN_CONTRACT.AssetClass,
											MKT_LOAN_CONTRACT.LoanType,
											MKT_LOAN_CONTRACT.Currency,
											MKT_LOAN_CONTRACT.Disbursed,
											MKT_LOAN_CONTRACT.InterestRate,
											MKT_LOAN_CONTRACT.OutstandingAmount,
											MKT_LOAN_CONTRACT.ApprovedAmount,
											MKT_LOAN_CONTRACT.AccrInterest,	
											MKT_LOAN_COLLATERAL.Collateral.label("CollateralID"),
											ApprovedAmountToBaseCurrency,
											OutstandingAmountToBaseCurrency,
											AccrInterestToBaseCurrency)

	LoanObj	 =   					LoanObj.\
	 									join(
											MKT_CUSTOMER,
											MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID
										).\
										join(
											MKT_LOAN_PRODUCT,
											MKT_LOAN_PRODUCT.ID == MKT_LOAN_CONTRACT.LoanProduct
										).\
										outerjoin(
											MKT_LOAN_COLLATERAL,
											MKT_LOAN_COLLATERAL.ID == MKT_LOAN_CONTRACT.ID
										).\
										filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
										filter(MKT_LOAN_CONTRACT.DisbursedStat =='Y').\
										filter(MKT_LOAN_CONTRACT.AssetClass.in_(AssetClass))
	# 1. Secured Loan									
	if Secured == "Y":
		LoanObj	 =   					LoanObj.\
										filter(MKT_LOAN_COLLATERAL.Collateral != None)
										
	elif Secured == "N":# 2. Un Secured Loan	
		LoanObj	 =   					LoanObj.\
										filter(MKT_LOAN_COLLATERAL.Collateral == None)

	if Type != "ALL":
		LoanObj	 =   					LoanObj.\
										filter(MKT_LOAN_CONTRACT.LoanProduct.in_(Type))

	if Branch != "ALL":
		Branch      =   Branch.split()
		LoanObj     =   LoanObj.\
						filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))

	return LoanObj


def getQueryOverDraftLoan(**kwarg):

	Branch 		= kwarg.get("Branch")
	Secured 	= kwarg.get("Secured")
	AssetClass	= kwarg.get("AssetClass") if kwarg.get("AssetClass") else ["0"]
	ReadAs 		= 1000000
	LoanObj	 	=   			db.session.query(MKT_OVERDRAFT_CONTRACT.InterestRate,
											(MKT_OVERDRAFT_CONTRACT.LimitedAmount * cast(MKT_CURRENCY.OtherRate1,Float)/ReadAs).label('LimitedAmount'),
											(MKT_OVERDRAFT_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1,Float)/ReadAs).label('OutstandingAmount'),
											(MKT_OVERDRAFT_CONTRACT.AccrInterest * cast(MKT_CURRENCY.OtherRate1,Float)/ReadAs).label('AccrInterest')).\
	 									join(
											MKT_CUSTOMER,
											MKT_CUSTOMER.ID == MKT_OVERDRAFT_CONTRACT.CustomerID
										).\
										join(MKT_CURRENCY,MKT_CURRENCY.ID==MKT_OVERDRAFT_CONTRACT.Currency).\
										outerjoin(
											MKT_LOAN_COLLATERAL,
											MKT_LOAN_COLLATERAL.ID == MKT_OVERDRAFT_CONTRACT.Collateral
										).\
										filter(MKT_OVERDRAFT_CONTRACT.OutstandingAmount > 0).\
										filter(MKT_OVERDRAFT_CONTRACT.AssetClass.in_(AssetClass))
	# 1. Secured Loan									
	if Secured == "Y":
		LoanObj	 =   					LoanObj.\
										filter(MKT_OVERDRAFT_CONTRACT.Collateral != None)
										
	elif Secured == "N":# 2. Un Secured Loan
		LoanObj	 =   					LoanObj.\
										filter(MKT_OVERDRAFT_CONTRACT.Collateral == None)

	if Branch != "ALL":
		Branch      =   Branch.split()
		LoanObj     =   LoanObj.\
						filter(MKT_OVERDRAFT_CONTRACT.Branch.in_(Branch))

	return LoanObj.all()


def getQueryCollateralValue(**kwarg):

	Branch 		= kwarg.get("Branch")
	CurrencyDic	= kwarg.get("CurrencyDic")
	CollateralType = kwarg.get("CollateralType")
	Type		= kwarg.get("Type")
	AssetClass	=  ["0"]
	
	LoanObj = db.session.query(MKT_LOAN_COLLATERAL.Collateral).\
								join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ID==MKT_LOAN_COLLATERAL.ID).\
								filter(MKT_LOAN_CONTRACT.AssetClass.in_(AssetClass)).\
								filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
								filter(MKT_LOAN_CONTRACT.LoanProduct.in_(Type)).\
								filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').all()
	ColList = list(LoanObj)
	LoanObj = db.session.query((MKT_COLLATERAL_DE.ValuationPrice * cast(MKT_CURRENCY.OtherRate1,Float)).label('ValuationPrice')
								).\
								join(MKT_CURRENCY,MKT_CURRENCY.ID==MKT_COLLATERAL_DE.Currency).\
								join(MKT_COLLATERAL_TYPE,MKT_COLLATERAL_TYPE.ID==MKT_COLLATERAL_DE.CollateralType).\
								filter(MKT_COLLATERAL_DE.CollateralID.in_(ColList)).\
								filter(MKT_COLLATERAL_DE.CollateralType.in_(CollateralType)).\
								filter(or_(MKT_COLLATERAL_DE.WithdrawalDate =='',MKT_COLLATERAL_DE.WithdrawalDate < MKT_COLLATERAL_DE.ReceivedDate)).subquery()

	LoanObj = db.session.query(func.sum(LoanObj.c.ValuationPrice).label('ValuationPrice'))

	return LoanObj


def getOverDraftColValue(**kwarg):

	Branch 			= kwarg.get("Branch")
	CurrencyDic		= kwarg.get("CurrencyDic")
	CollateralType 	= kwarg.get("CollateralType")
	AssetClass		=  ["0"]
	
	LoanObj = db.session.query(MKT_LOAN_COLLATERAL.Collateral).\
								join(MKT_OVERDRAFT_CONTRACT,MKT_OVERDRAFT_CONTRACT.Collateral==MKT_LOAN_COLLATERAL.Collateral).\
								filter(MKT_OVERDRAFT_CONTRACT.AssetClass.in_(AssetClass)).\
								filter(MKT_OVERDRAFT_CONTRACT.OutstandingAmount > 0).all()
	ColList = list(LoanObj)
	LoanObj = db.session.query((MKT_COLLATERAL_DE.ValuationPrice * cast(MKT_CURRENCY.OtherRate1,Float)).label('ValuationPrice')
								).\
								join(MKT_CURRENCY,MKT_CURRENCY.ID==MKT_COLLATERAL_DE.Currency).\
								join(MKT_COLLATERAL_TYPE,MKT_COLLATERAL_TYPE.ID==MKT_COLLATERAL_DE.CollateralType).\
								filter(MKT_COLLATERAL_DE.CollateralID.in_(ColList)).\
								filter(MKT_COLLATERAL_DE.CollateralType.in_(CollateralType)).\
								filter(or_(MKT_COLLATERAL_DE.WithdrawalDate =='',MKT_COLLATERAL_DE.WithdrawalDate < MKT_COLLATERAL_DE.ReceivedDate)).subquery()

	LoanObj = db.session.query(func.sum(LoanObj.c.ValuationPrice).label('ValuationPrice'))

	return LoanObj