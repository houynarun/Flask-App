# -*- coding: utf-8 -*-
'''
Report Name: Net Open Position
'''

from app.mktcore.imports 		import *
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
from app.Currency.models		import MKT_CURRENCY

import app.tools.mktdate 		as mktdate
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmoney 		as mktmoney
import app.tools.mktnbc			as mktnbc
import app.tools.mktgl 			as mktgl
import app.tools.mktmessage 	as mktmessage
from decimal 					import Decimal
from app.LoanContract.models 	import *
from app.Customer.models 		import *
from app.IdType.models	 		import *
from app.LoanProduct.models 	import *
from app.Industry.models 		import *
from app.Collateral.models 		import *
from app.CollateralType.models 	import *
from app.LoanApplication.models import *
from app.Currency.models 		import *
from app.AssetClass.models 		import *
from app.Sector.models 			import *
from app.Province.models 		import *
from app.District.models 		import *
from app.Commune.models 		import *
from app.Village.models 		import *
from .N06 						import *
def getBANK09(Branch = "ALL", ReportedDate = "", Period = 2, Month = "", Year = ""):
	''' 
		This function must return result like below:
		Result = {
			'Data': 		Data,
			'Excel': 		Excel,
			'ReportHeader': ReportHeader,
			'TableHeader': 	TableHeader
			}
	'''

	try:
		ID 					= 	"N001" # ID of Report 01 Balance Sheet
		LiabilityEquityLine =	'75'
		TotalAssetLine 		=	'32'
		TotalEquityLine 	=	'61' 
		CurrencyObj			=	MKT_CURRENCY.query

		Condition = []
		if Year and Month:
			GLTable   	= MKT_GL_BALANCE_BACKUP
			Condition 	= [GLTable.GLYear == Year,GLTable.GLMonth == Month]
			CYear 	  	= Year
			CMonth 	  	= Month
		else:
			GLTable   	= MKT_GL_BALANCE
			BankDate  	= mktdate.getBankDate()
			CYear 	  	= BankDate.year
			CMonth 	  	= BankDate.month

		GLObj   		=   GLTable.query.filter(*Condition)

		Result 			= {}
		Data 			= []
		Excel 			= {}


		LineObj 		=	mktnbc.getNBCLineReport(ID, int(Period), Branch, ReportedDate, Year=Year, Month=Month)[0].get("Data",[])
		NetWorthN06 	= str(getBANK06("ALL", ReportedDate, Period, Year, Month, True)).replace(',','')
		TotalNetWorth 	=	NetWorthN06 # It should take from Sovency Ratio Report

		TotalNetWorth 	= float(mktmoney.formatNumber(TotalNetWorth,1,2).replace(',',''))


		ReportHeader 	= {}
		ReportHeader 	= mktnbc.getHeaderReport(	ReportName 		=	u'MONTHLY REPORT ON LOANS TO RELATED PARTIES',
													Title 			=	u'របាយការណ៍ប្រចាំត្រីមាសស្តីពី ឥណទានចំពោះសម្ព៍ន្ធញ្ញាតិ',
													Form 			=	'Loan2Related Parties',
													NetWorth 		= 	u'%s' %mktmoney.formatNumber(float(TotalNetWorth), 1, 2)
													)
		Excel.update({
				"D3" : u'As of:  %s'% mktdate.formatDate(ReportedDate,'%d %B %Y'),
				"C6" : ((ReportHeader.get('CompanyName',"")).splitlines())[0],
				"C7" : ((ReportHeader.get('CompanyName',"")).splitlines())[1],
				"C8" : Decimal(TotalNetWorth),
				"K8" : Decimal(ReportHeader.get('ReportingRate',0)),
				"K9" : Decimal(ReportHeader.get('ReportingRate',0)),
			})


		TableHeader 	= {}
		TableHeader = mktnbc.setTableHeader(Text=u'ល.រ \n No.', 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")		
		
		#-----------------------------------------------------------------------------------#
		TableHeader = mktnbc.setTableHeader(Text=u"អ្នកខ្ចីប្រាក់\n BORROWERS", 
									 Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"ឈ្មោះ \n Name", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"អាស័យដ្ឋាន \n Address", 
									 Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")
		#-----------------------------------------------------------------------------------#
		TableHeader = mktnbc.setTableHeader(Text=u"ប្រភេទឥណទាន \nType of Loan", 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")

		TableHeader = mktnbc.setTableHeader(Text=u"កាលបរិច្ឆេទផ្តល់ឥណទាន \nDate of Loan Issued ", 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader = mktnbc.setTableHeader(Text=u"កំរិតឥណទានអនុម័ត \nApproved Limit", 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader = mktnbc.setTableHeader(Text=u"ឥណទានជាក់ស្តែង \nOutstanding Balance", 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader = mktnbc.setTableHeader(Text=u"អត្រាការប្រាក់ប្រចាំឆ្នាំ \nYearly Interest Rate\n(%)", 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader = mktnbc.setTableHeader(Text=u"ការថ្លឹងហានិភ័យតាមប្រកាស \nWeighting Following Prakas\n(%)", 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader = mktnbc.setTableHeader(Text=u"ឥណទានជាក់ស្តែងក្រោយថ្លឹង \nWeighted Outstanding Balance", 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		
		TableHeader = mktnbc.setTableHeader(Text=u"ឥណទានមិនដំណើការ Non-Performing Loans", 
									 Rowspan=1,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		TableHeader = mktnbc.setTableHeader(Text=u"ក្រោមស្តង់ដា \nSub-Standard", 
									 Rowspan=1,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")
		TableHeader = mktnbc.setTableHeader(Text=u"សង្ស័យ \nDoubtful", 
									 Rowspan=1,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")
		TableHeader = mktnbc.setTableHeader(Text=u"បាត់បង់\nLoss", 
									 Rowspan=1,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")
		
		TableHeader = mktnbc.setTableHeader(Text=u"វត្ថុបញ្ចាំ \nCollateral", 
									 Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center")
		#----------------------------------------------------------------------------------------------------------------#
		
		Data, Excel =	getLoan( ReportHeader, TableHeader, TotalNetWorth)
		Result.update({'TableHeader':TableHeader,'ReportHeader':ReportHeader,'Data':Data, 'Excel': Excel})

		CellSyle = {
					 'C11':'top*double,FF000000',
					 'L11':'top*double,FF000000',
					 'M11':'top*double,FF000000',
					}

		return Result,CellSyle

	except Exception, e:
		raise

def getLoan(ReportHeader, TableHeader,TotalNetWorth):
	RecordRow 	= []
	ExcelRecord 	= {}
	ReportedDate = ReportHeader.get('ReportedDate',"")
	ExcelRecord.update({
				"A4" : u'As of:  %s'% mktdate.formatDate(ReportedDate,'%d %B %Y'),
				"C6" : ((ReportHeader.get('CompanyName',"")).splitlines())[0],
				"C7" : ((ReportHeader.get('CompanyName',"")).splitlines())[1],
				"C8" : Decimal(TotalNetWorth),
				"K8" : Decimal(ReportHeader.get('ReportingRate',0)),
				"K9" : Decimal(ReportHeader.get('ReportingRate',0)),
			})
	try:
		CellRow = 13
		i = 1
		LoanInfo = getLoanInfo()
		TypeOfLoan 				= 'Term Loan'
		TotalApprovedAmount 	= 0
		TotalOutstandingAmount 	= 0
		TotalWeightPrakas 		= 0
		TotalWeighOut 			= 0
		TotalSubStandard 		= 0
		TotalDoubtful 			= 0
		TotalLoanLose 			= 0
		if LoanInfo:
			for L in LoanInfo:

				FullName 			= '%s %s - %s %s' %(L.LastNameEn, L.FirstNameEn, L.LastNameKh, L.FirstNameKh)
				ApprovedAmount 		= float(str(mktmoney.formatNumber(L.ApprovedAmount,0)).replace(',',''))
				OutstandingAmount 	= float(str(mktmoney.formatNumber(L.OutstandingAmount,0)).replace(',',''))
				SubStandard 		= float(str(mktmoney.formatNumber(L.SubStandard,0)).replace(',',''))
				Doubtful 			= float(str(mktmoney.formatNumber(L.Doubtful,0)).replace(',',''))
				LoanLose 			= float(str(mktmoney.formatNumber(L.LoanLose,0)).replace(',',''))
				ValuationPrice 		= float(str(mktmoney.formatNumber(L.ValuationPrice,0)).replace(',',''))
				WeightPrakas 		= (OutstandingAmount/TotalNetWorth)*100
				WeightPrakas 		= float(str(mktmoney.formatNumber(WeightPrakas,0)).replace(',',''))
				WeighOut 			= OutstandingAmount * (WeightPrakas/100)
				WeighOut 			= float(str(mktmoney.formatNumber(WeighOut,0)).replace(',',''))
				
				TotalApprovedAmount 	+= ApprovedAmount
				TotalOutstandingAmount 	+= OutstandingAmount
				TotalWeightPrakas 		+= WeightPrakas
				TotalWeighOut 			+= WeighOut
				TotalSubStandard 		+= SubStandard
				TotalDoubtful 			+= Doubtful
				TotalLoanLose 			+= LoanLose

				RecordRow.append({
							1:u'%s' %i,
							2:u'%s' %(FullName),
							3:u'%s %s %s %s ' %(L.Village,L.Commune,L.District,L.Province),
							4:u'%s' %(TypeOfLoan),
							5:u'%s' %(L.MaturityDate),
							6:u'%s' %(ApprovedAmount),
							7:u'%s' %(OutstandingAmount),
							8:u'%s %s' %(L.InterestRate,'%'),
							9:u'%s%s' %(WeightPrakas,'%'),
							10:u'%s' %(WeighOut),
							11:u'%s' %(SubStandard),
							12:u'%s' %(Doubtful),
							13:u'%s' %(LoanLose),
							14:u'%s' %(ValuationPrice),
							'LineType':'GH',
							'Indent':1,
							'RowBGColor':'',
							'LineFormat':'bold'
						})
				ExcelRecord.update({
					"A%s"%(CellRow) : str(i),
					"B%s"%(CellRow) :u'%s' %(FullName),
					"C%s"%(CellRow) :'%s %s %s %s ' %(L.Village,L.Commune,L.District,L.Province),
					"D%s"%(CellRow) :'%s' %(TypeOfLoan),
					"E%s"%(CellRow) :'%s' %(L.MaturityDate),
					"F%s"%(CellRow) : ApprovedAmount,
					"G%s"%(CellRow) : OutstandingAmount,
					"H%s"%(CellRow) :'',
					"I%s"%(CellRow) :'%s%s' %(WeightPrakas,'%'),
					"K%s"%(CellRow) : SubStandard,
					"L%s"%(CellRow) : Doubtful,
					"M%s"%(CellRow) : LoanLose ,
					"N%s"%(CellRow) : ValuationPrice,
				})
				i += 1
				CellRow += 1

		RecordRow.append({
							1:u'',
							2:u'',
							3:u'',
							4:u'',
							5:u'',
							6:u'%s' %(TotalApprovedAmount),
							7:u'%s' %(TotalOutstandingAmount),
							8:u'',
							9:u'%s%s' %(TotalWeightPrakas,'%'),
							10:u'%s' %(TotalWeighOut),
							11:u'%s' %(TotalSubStandard),
							12:u'%s' %(TotalDoubtful),
							13:u'%s' %(TotalLoanLose),
							14:u'',
							'LineType':'GH',
							'Indent':1,
							'RowBGColor':'',
							'LineFormat':'bold'
						})

		return RecordRow,ExcelRecord
	except Exception, e:
		raise
	else:
		pass
	finally:
		pass
def getLoanInfo():
	''
	SubStandard = ['20']
	Doubtful 	= ['30']
	LoanLose = ['40']
	LoanAssetClass = list(set(SubStandard) | set(Doubtful) | set(LoanLose))
	LoanProductNBCBakN09 = mktsetting.getAppSetting('LoanProductNBCBakN09').split()
	ReadAs = 1000000
	
	LoanCollat = db.session.query(
								MKT_LOAN_CONTRACT.ID.label('LoanID'),
								(func.sum(MKT_COLLATERAL_DE.ValuationPrice * cast(MKT_CURRENCY.OtherRate1,Float))).label('ValuationPrice'),
								).\
								join(MKT_LOAN_COLLATERAL,MKT_LOAN_COLLATERAL.ID==MKT_LOAN_CONTRACT.ID).\
								join(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE.CollateralID==MKT_LOAN_COLLATERAL.Collateral).\
								join(MKT_CURRENCY,MKT_CURRENCY.ID==MKT_COLLATERAL_DE.Currency).\
								group_by(MKT_LOAN_CONTRACT.ID).subquery()

	LoanObj = db.session.query(	MKT_LOAN_CONTRACT.ID,
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_PROVINCE.Description.label('Province'),
								MKT_DISTRICT.Description.label('District'),
								MKT_COMMUNE.Description.label('Commune'),
								MKT_VILLAGE.Description.label('Village'),
								MKT_LOAN_CONTRACT.LoanPurpose,
								MKT_LOAN_CONTRACT.Disbursed,
								MKT_LOAN_CONTRACT.ValueDate,
								MKT_LOAN_CONTRACT.MaturityDate,
								MKT_LOAN_CONTRACT.InterestRate,
								case(
									[(
										MKT_LOAN_CONTRACT.AssetClass.in_(SubStandard),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) / ReadAs
									)],
								else_=0
								).label('SubStandard'),
								case(
									[(
										MKT_LOAN_CONTRACT.AssetClass.in_(Doubtful),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) / ReadAs
									)],
								else_=0
								).label('Doubtful'),
								case(
									[(
										MKT_LOAN_CONTRACT.AssetClass.in_(LoanLose),
										MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) / ReadAs
									)],
								else_=0
								).label('LoanLose'),
								(MKT_LOAN_CONTRACT.OutstandingAmount * cast(MKT_CURRENCY.OtherRate1, Float) / ReadAs).label('OutstandingAmount'),
								(MKT_LOAN_CONTRACT.ApprovedAmount * cast(MKT_CURRENCY.OtherRate1, Float) / ReadAs).label('ApprovedAmount'),
								(LoanCollat.c.ValuationPrice/ ReadAs).label('ValuationPrice')
						).\
						join(MKT_CURRENCY, MKT_CURRENCY.ID==MKT_LOAN_CONTRACT.Currency).\
						outerjoin(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
						outerjoin(MKT_PROVINCE, MKT_PROVINCE.ID == MKT_CUSTOMER.Province).\
						outerjoin(MKT_DISTRICT, MKT_DISTRICT.ID == MKT_CUSTOMER.District).\
						outerjoin(MKT_COMMUNE, MKT_COMMUNE.ID == MKT_CUSTOMER.Commune).\
						outerjoin(MKT_VILLAGE, MKT_VILLAGE.ID == MKT_CUSTOMER.Village).\
						outerjoin(LoanCollat, LoanCollat.c.LoanID == MKT_LOAN_CONTRACT.ID).\
						filter(MKT_LOAN_CONTRACT.AssetClass.in_(LoanAssetClass)).\
						filter(MKT_LOAN_CONTRACT.LoanProduct.in_(LoanProductNBCBakN09)).\
						all()
	
	return LoanObj