# -*- coding: utf-8 -*-
'''
Report Name: Loan Classification
'''
from app.mktcore.imports 		import *

import app.tools.mktdate 		as mktdate
import app.tools.mktmoney 		as mktmoney
import app.tools.mktnbc			as mktnbc
import collections

from decimal 					import *

from app.LoanContract.models 	import *
from app.AccProduct.models 		import *
from app.LoanAmendment.models 	import MKT_LOAN_AMENDMENT
from app.LoanWriteOff.models 	import *


def getNGO03(Branch = "ALL", ReportedDate = ""):
	''' This function must return result like below:
			Result = {
				'Data': 		Data,
				'Excel': 		Excel,
				'ReportHeader': ReportHeader,
				'TableHeader': 	TableHeader
				}
	'''

	try:
		ReportHeader 	=   mktnbc.getHeaderReport(	ReportName 		=	u'របាយការណ៍ប្រចាំត្រីមាសស្តីពី ការធ្វើចំណាត់ថ្នាក់ឥណទាន សំវិធានធន និងអនុបាតឥណទានមិនដំណើរការ',
													Title 			=	'',
													Form 			=	'3-Loan Classification')
		RowRecord = []
		ExcelRecord = {}
		ExcelRecord.update({
						"D2" : ReportHeader.get('ReportedDate',""),
						"C3" : ReportHeader.get('CompanyName',""),
						"D4" : Decimal(ReportHeader.get('ReportingRate',0))
					})
		#Classification
		TotalNumberOfLoan 		= 0
		TotalOutstandingAmount 	= 0
		TotalAccrInterest 		= 0
		TotalProvAmount 		= 0
		TotalActualProvAmount 	= 0

		SubNumberOfLoan 		= 0
		SubOutstandingAmount 	= 0
		SubAccrInterest 		= 0
		SubProvAmount 			= 0
		SubActualProvAmount		= 0
		# End Classification

		#Write Off
		PastDue30Days 		=	0
		OutstandingAmount 	=	0
		Percentage 			= 	0
		WriteOffCurrent		= 	0
		WriteOffYTD 		= 	0

		# End Write Off
		ProvPercByClass 	= 	{	
									10:0,
									20:10,
									30:30,
									40:100}

		AssetClassList 		=	{
									10:u'១.១. ស្តង់ដារ',
									20:u'១.២. ក្រោមស្តងដារ ហួសកាលកំណត់សង ៣០ថ្ងៃ',
									30:u'១.៣. សង្ស័យ ហួសកាលកំណត់សង ៦០ថ្ងៃ',
									40:u'១.៤. បាត់បង់ ហួសកាលកំណត់សង ៩០ថ្ងៃ'}
		LoanObj = db.session.query(
							MKT_LOAN_CONTRACT.Currency,
							MKT_LOAN_CONTRACT.AssetClass,
							MKT_LOAN_CONTRACT.MoreThanOneYear,
							func.count(MKT_LOAN_CONTRACT.ID).label('NumberOfLoan'),
							func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('OutstandingAmount'),
							func.sum(MKT_LOAN_CONTRACT.AccrInterest).label('AccrInterest')).\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
						group_by(
							MKT_LOAN_CONTRACT.AssetClass,
							MKT_LOAN_CONTRACT.Currency,
							MKT_LOAN_CONTRACT.MoreThanOneYear)
		
		if Branch != "ALL":
			Branch      =   Branch.split()
			LoanObj     =   LoanObj.\
							filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))

		CurrencyDic = ReportHeader['DicExchangeRate']



		MoreThanOneYear = {}
		LessThanOneYear = {}
		for row in LoanObj:
			AccrInterest =	0
			NumberOfLoan =	0
			PrevAmount   =  0

			if str(row.MoreThanOneYear) == "Y":
				PrevAmountDict 	=	MoreThanOneYear.get(int(row.AssetClass),{})
				if PrevAmountDict:
					PrevAmount 	= 	PrevAmountDict.get('OutstandingAmount', 0)
					AccrInterest= 	PrevAmountDict.get('AccrInterest',0)
					NumberOfLoan= 	PrevAmountDict.get('NumberOfLoan',0)

				MoreThanOneYear.update({int(row.AssetClass)	:{
											'NumberOfLoan' 		: NumberOfLoan + int(row.NumberOfLoan),
											'OutstandingAmount' : PrevAmount + Decimal(row.OutstandingAmount)*CurrencyDic[row.Currency],
											'AccrInterest' 		: AccrInterest + Decimal(row.AccrInterest)*CurrencyDic[row.Currency]}
										})
			else:
				PrevAmountDict 	=	LessThanOneYear.get(int(row.AssetClass),{})
				if PrevAmountDict:
					PrevAmount 	= 	PrevAmountDict.get('OutstandingAmount', 0)
					AccrInterest= 	PrevAmountDict.get('AccrInterest',0)
					NumberOfLoan= 	PrevAmountDict.get('NumberOfLoan',0)

				LessThanOneYear.update({int(row.AssetClass)	:{
											'NumberOfLoan' 		: NumberOfLoan + int(row.NumberOfLoan),
											'OutstandingAmount' : PrevAmount + Decimal(row.OutstandingAmount)*CurrencyDic[row.Currency],
											'AccrInterest' 		: AccrInterest + Decimal(row.AccrInterest)*CurrencyDic[row.Currency]}
										})

		MergeClsZero 	= LessThanOneYear.get(0,{})
		MergeClsTen 	= LessThanOneYear.get(10,{})

		LessThanOneYear.update({
				10 :{
					'NumberOfLoan' 		: MergeClsZero.get('NumberOfLoan',0) + MergeClsTen.get('NumberOfLoan',0),
					'OutstandingAmount' : MergeClsZero.get('OutstandingAmount',0) + MergeClsTen.get('OutstandingAmount',0),
				}
			})
		AssetClassList = collections.OrderedDict(sorted(AssetClassList.items()))

		RowRecord.append({
							1:u'ការធ្វើចំណាត់ថ្នាក់',
							2:u'ចំនួនឥណទាន',
							3:u'ចំនួនទឹកប្រាក់',
							4:u'សំវិធានធន',
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_HEADER_COLOR,
							'LineFormat':'bold'
							})

		#Header '1- Loans Of One Year Or Less'
		RowRecord.append({
							1:u'១. ឥណទានមានឥណប្រតិទាន ១ឆ្នាំ ឬតិចជាង ១ឆ្នាំ',
							2:'',
							3:'',
							4:'',
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
							})
		OutstandingCls10 = 0
		CellRow 		=	7
		for key in AssetClassList:
			NumberOfLoan 		= 	0
			OutstandingAmount 	= 	0
			AccrInterest 		= 	0
			ProvPerc 			= 	ProvPercByClass.get(key) 
			ProvAmount 			= 	0
			#loan class 0 and 10 in system is loan class 10 in NBC 
			LoanKey				=	key
			RowValue = LessThanOneYear.get(LoanKey,None)
			if RowValue:
				NumberOfLoan 		= RowValue.get('NumberOfLoan',0)
				OutstandingAmount 	= RowValue.get('OutstandingAmount',0)
				AccrInterest 		= RowValue.get('AccrInterest',0)
				ProvAmount 	 		= OutstandingAmount * ProvPerc / 100


			OutstandingAmount 	/= mktnbc.OneMillion
			AccrInterest 		/= mktnbc.OneMillion
			ProvAmount 	 		/= mktnbc.OneMillion

			
			# Store Subtoal
			SubNumberOfLoan 		+= NumberOfLoan
			SubOutstandingAmount 	+= OutstandingAmount
			SubAccrInterest 		+= AccrInterest
			SubProvAmount 			+= ProvAmount

			TotalNumberOfLoan 		+= NumberOfLoan
			TotalOutstandingAmount 	+= OutstandingAmount
			TotalAccrInterest 		+= AccrInterest
			TotalProvAmount 		+= ProvAmount
			RowRecord.append({
							1:'%s'%(AssetClassList[key]),
							2:str(NumberOfLoan),
							3:mktmoney.formatNumber(OutstandingAmount, 1, 2),
							4:mktmoney.formatNumber(ProvAmount, 1, 2),
							'LineType':'LD',
							'Indent':0,
							'RowBGColor':'',
							'LineFormat':'',
							})
			ExcelRecord.update({
							"D%s"%(CellRow) : NumberOfLoan,
							"E%s"%(CellRow) : OutstandingAmount,
							"F%s"%(CellRow) : ProvAmount,
						})
			CellRow += 1

			if key == 10:
				OutstandingCls10 = float(str(mktmoney.formatNumber(OutstandingAmount, 1, 2)).replace(',',''))
		RowRecord.append({
							1:u'សរុប (១)',
							2:str(SubNumberOfLoan),
							3:mktmoney.formatNumber(SubOutstandingAmount, 1, 2),
							4:mktmoney.formatNumber(SubProvAmount, 1, 2),
							'LineType':'LD',
							'Indent':0,
							'RowBGColor':'',
							'LineFormat':''
							})
		RowRecord.append({
							1:u'២. ឥណទានមានឥណប្រតិទានលើសពី ១ឆ្នាំ',
							2:'',
							3:'',
							4:'',

							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
							})
		index = 1
		CellRow = 13
		SubNumberOfLoan 		= 0
		SubOutstandingAmount 	= 0
		SubAccrInterest 		= 0
		SubProvAmount 			= 0
		AssetClassList 		=	{
									10:u'២.១. ស្តង់ដារ',
									20:u'២.២. ក្រោមស្តងដារ ហួសកាលកំណត់សង ៣០ថ្ងៃ',
									30:u'២.៣. សង្ស័យ ហួសកាលកំណត់សង ១៨០ថ្ងៃ',
									40:u'២.៤. បាត់បង់ ហួសកាលកំណត់សង ៣៦០ថ្ងៃ',
									}
		AssetClassList = collections.OrderedDict(sorted(AssetClassList.items()))
		# print TotalOutstandingAmount
		for key in AssetClassList:
			NumberOfLoan 		= 0
			OutstandingAmount 	= 0
			AccrInterest 		= 0
			ProvPerc 			= ProvPercByClass.get(key)
			ProvAmount 			= 0
			RowValue = MoreThanOneYear.get(key,None)
			if RowValue:
				NumberOfLoan 		= RowValue['NumberOfLoan']
				OutstandingAmount 	= RowValue['OutstandingAmount']
				AccrInterest 		= RowValue['AccrInterest']
				ProvAmount 	 		= OutstandingAmount * ProvPerc / 100
			if key == 10 :
				RowValue = MoreThanOneYear.get(0,None)
				if RowValue:
					NumberOfLoan 		+= RowValue['NumberOfLoan']
					OutstandingAmount 	+= RowValue['OutstandingAmount']
					AccrInterest 		+= RowValue['AccrInterest']
					ProvAmount 	 		= OutstandingAmount * ProvPerc / 100


			OutstandingAmount 	/= mktnbc.OneMillion
			AccrInterest 		/= mktnbc.OneMillion
			ProvAmount 	 		/= mktnbc.OneMillion

			# Store Subtoal
			SubNumberOfLoan 		+= NumberOfLoan
			SubOutstandingAmount 	+= OutstandingAmount
			SubAccrInterest 		+= AccrInterest
			SubProvAmount 			+= ProvAmount

			TotalNumberOfLoan 		+= NumberOfLoan
			TotalOutstandingAmount 	+= OutstandingAmount
			TotalAccrInterest 		+= AccrInterest
			TotalProvAmount 		+= ProvAmount

			RowRecord.append({
							1:'%s'%(AssetClassList[key]),
							2:str(NumberOfLoan),
							3:mktmoney.formatNumber(OutstandingAmount, 1, 2),
							4:mktmoney.formatNumber(ProvAmount, 1, 2),
							'LineType':'LD',
							'Indent':0,
							'RowBGColor':'',
							'LineFormat':''
							})
			ExcelRecord.update({
							"D%s"%(CellRow) : NumberOfLoan,
							"E%s"%(CellRow) : OutstandingAmount,
							"F%s"%(CellRow) : ProvAmount,
						})
			CellRow += 1
			if key == 10:
				OutstandingCls10 += float(str(mktmoney.formatNumber(OutstandingAmount, 1, 2)).replace(',',''))
		RowRecord.append({
							1:u'សរុប(២)',
							2:str(SubNumberOfLoan),
							3:mktmoney.formatNumber(SubOutstandingAmount, 1, 2),
							4:mktmoney.formatNumber(SubProvAmount, 1, 2),
							'LineType':'LD',
							'Indent':0,
							'RowBGColor':'',
							'LineFormat':''
							})

		RowRecord.append({
							1:u'៣. សរុប',
							2:str(TotalNumberOfLoan),
							3:mktmoney.formatNumber(TotalOutstandingAmount, 1, 2),
							4:mktmoney.formatNumber(TotalProvAmount, 1, 2),
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
							})
		RowRecord.append({
							1:u'៤. សរុបសមតុល្យឥណទាន (៤ = ១ + ២)',
							2:'',
							3:'',
							4:mktmoney.formatNumber(TotalOutstandingAmount, 1, 2),
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
							})
		TotalODOverStandard = float(str(mktmoney.formatNumber(TotalOutstandingAmount, 1, 2)).replace(',','')) - OutstandingCls10
		RowRecord.append({
							1:u'៥. សរុបសមតុល្យឥណទានហួសកាលកំណត់សង ៣០ថ្ងៃ ៥ = ៤ - (១.១ + ២.១)',
							2:'',
							3:'',
							4:mktmoney.formatNumber(TotalODOverStandard, 1, 2),
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
							})
		AvgODAmount = 0
		if TotalOutstandingAmount != 0:	
			AvgODAmount = TotalODOverStandard / float(str(mktmoney.formatNumber(TotalOutstandingAmount, 1, 2)).replace(',','')) * 100
		RowRecord.append({
							1:u'៦. អនុបាតឥណទានមិនដំណើរការ (៦ = ៥ / ៤)',
							2:'',
							3:'',
							4:mktmoney.formatNumber(AvgODAmount, 1, 2) + '%',
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
							})

		IDList 	= 	db.session.query(MKT_LOAN_AMENDMENT.LoanID).\
								filter(MKT_LOAN_AMENDMENT.Operation == 'TMN').all()

		# Find Current Period
		EndDate 	=	str(ReportedDate)
		StartDate 	=	"%s01"%EndDate[:-2]
		CurrentPeriodObj 	= 	db.session.query(
									MKT_WRITE_OFF_DE.Currency,
									func.sum(MKT_WRITE_OFF_DE.TotWOFAmount).label('TotWOFAmount')).\
								filter(MKT_WRITE_OFF_DE.WOFDate.between(StartDate, EndDate)).\
								group_by(MKT_WRITE_OFF_DE.Currency)
		if IDList:	
			CurrentPeriodObj = CurrentPeriodObj.filter(~MKT_WRITE_OFF_DE.ID.in_(IDList))

		WriteOffCurrent = 0
		for rowPeriod in CurrentPeriodObj.all():
			WriteOffCurrentObj = rowPeriod.TotWOFAmount
			if WriteOffCurrentObj:
				WriteOffCurrent += WriteOffCurrentObj * CurrencyDic[rowToDate.Currency]


		WriteOffCurrent /= mktnbc.OneMillion

		# Find YearToDate
		StartYearToDate 	= 	"%s-01-01"%EndDate[:4]
		YearToDateObj 	= 	db.session.query(
								MKT_WRITE_OFF_DE.Currency,
								func.sum(MKT_WRITE_OFF_DE.TotWOFAmount).label('TotWOFAmount')).\
							filter(MKT_WRITE_OFF_DE.WOFDate.between(StartYearToDate, EndDate)).\
							group_by(MKT_WRITE_OFF_DE.Currency)
		if IDList:	
			YearToDateObj = YearToDateObj.filter(~MKT_WRITE_OFF_DE.ID.in_(IDList))

		WriteOffYTDObj = 0
		for rowToDate in YearToDateObj.all():
			WriteOffYTDObj = rowToDate.TotWOFAmount
			if WriteOffYTDObj:
				WriteOffYTD += Decimal(WriteOffYTDObj) * CurrencyDic[rowToDate.Currency]


		WriteOffYTD /= mktnbc.OneMillion

		CellRow = 23
		RowRecord.append({
							1:u'ឥណទានលុបចោល ៖',
							2:u'ក្នុងគ្រា ៖ %s'%mktmoney.formatNumber(WriteOffCurrent, 1, 2),
							3:u'បង្គរពីដើមឆ្នាំ ៖ %s'%mktmoney.formatNumber(WriteOffYTD, 1, 2),
							4:'',
							'LineType':'GH',
							'Indent':0,
							'RowBGColor':mktnbc.BG_BODY_COLOR,
							'LineFormat':'bold'
							})
		ExcelRecord.update({
						"D%s"%(CellRow) : WriteOffCurrent,
						"F%s"%(CellRow) : WriteOffYTD,
					})

		Result 	=	{
			'Data':RowRecord,
			'Excel': ExcelRecord,
			'ReportHeader':ReportHeader
		}
		return Result

	except:
		raise
