# -*- coding: utf-8 -*-
'''
Report Name: Credit By Type
'''

from app.mktcore.imports 		import *

import app.tools.mktsetting     as mktsetting
import app.tools.mktmoney       as mktmoney
import app.tools.mktnbc         as mktnbc
import sqlalchemy

from decimal                    import *
from sqlalchemy.sql.expression  import cast

from app.LoanContract.models    import MKT_LOAN_CONTRACT
from app.Customer.models        import MKT_CUSTOMER
from app.Sector.models          import MKT_SECTOR


def getNGO04(Branch = "ALL", ReportedDate = ""):

    ''' This function must return result like below:
        Result = {
            'Data':         Data,
            'Excel':        Excel,
            'ReportHeader': ReportHeader,
            'TableHeader':  TableHeader
            }
    '''

    try:
    	ReportHeader 	=   mktnbc.getHeaderReport(	ReportName 		=	u'របាយការណ៍ប្រចាំត្រីមាសស្តីពី ឥណទានតាមប្រភេទជំនួញ',
													Title 			=	'',
													Form 			=	'4-Credit by types')
        TableHeader     =   {}
        ExcelRecord     =   {}
        ExcelRecord.update({
                "C2" : ReportHeader.get('ReportedDate',""),
                "C3" : ReportHeader.get('CompanyName',""),
                "H4" : Decimal(ReportHeader.get('ReportingRate',0))
            })

        TableHeader = mktnbc.setTableHeader(Text=u'ប្រភេទ', 
                                            Rowspan=3,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center", )

        TableHeader = mktnbc.setTableHeader(Text=u'ឥណទានក្រុម', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'ឥណទានឯកត្តជន', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'អាជីវកម្មធុនតូច', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'សរុប', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center") 
        #Group
        TableHeader = mktnbc.setTableHeader(Text=u'ចំនួនគណនី', 
                                            Rowspan='',Colspan='',RowIndex=2, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'សមតុល្យឥណទាន', 
                                           Rowspan=0,Colspan='',RowIndex=2, TableHeader=TableHeader, Class="text-center")
        #IL
        TableHeader = mktnbc.setTableHeader(Text=u'ចំនួនគណនី', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'សមតុល្យឥណទាន', 
                                           Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")
        # Small
        TableHeader = mktnbc.setTableHeader(Text=u'ចំនួនគណនី', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'សមតុល្យឥណទាន', 
                                           Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")
        # Total
        TableHeader = mktnbc.setTableHeader(Text=u'ចំនួនគណនី', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'សមតុល្យឥណទាន', 
                                           Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'1', 
                                           Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'2', 
                                           Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'3', 
                                           Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'4', 
                                           Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'5', 
                                           Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'6', 
                                           Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'7 = 1 + 3 + 5', 
                                           Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")

        TableHeader = mktnbc.setTableHeader(Text=u'8 = 2 + 4 + 6', 
                                           Rowspan=0,Colspan=0,RowIndex=3, TableHeader=TableHeader, Class="text-center")

        GroupLoanID         =   mktsetting.getAppSetting('NBCGroupLoan').split()
        IndivLoanID         =   mktsetting.getAppSetting('NBCIndividualLoan').split()
        SmallLoanID         =   mktsetting.getAppSetting('NBCSmallBusinessLoan').split()
        # print GroupLoanID, IndivLoanID, SmallLoanID
        # print DisplayRate

        ListSector      =   {
                                "Agriculture"       :u"កសិកម្ម",
                                "Trade and Commerce":u"ពាណិជ្ជកម្ម",
                                "Services"           :u"សេវាកម្ម",
                                "Transportation"    :u"គមនាគម និងដឹកជញ្ជូន",
                                "Construction"      :u"សំណង់",
                                "Household/Family"  :u"ក្រុមគ្រួសារ",
                                "Other Categories"  :u"ផ្សេងៗ"
                            }

        RowRecord           =   [] # Return value
        ByGroupAccDic       =   [] # Number of account in loan group of each sector
        ByGroupLCDic        =   [] # Amount by loan group of each sector
        
        TotalAccGroup       =   []
        TotalAccIndiv       =   []
        TotalAccSmall       =   []
        TotalAmtGroup       =   []
        TotalAmtIndiv       =   []
        TotalAmtSmall       =   []
        DisplayRate         =   ''
        LoanRateObj         =   db.session.query(
                                    func.min(cast(MKT_LOAN_CONTRACT.InterestRate,sqlalchemy.Float)).label('MinRate'),
                                    func.max(cast(MKT_LOAN_CONTRACT.InterestRate,sqlalchemy.Float)).label('MaxRate')
                                ).filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).first()

        MinRate             =   LoanRateObj.MinRate if LoanRateObj.MinRate else 0
        MaxRate             =   LoanRateObj.MaxRate if LoanRateObj.MaxRate else 0
        DisplayRate         =   mktnbc.getRate([MinRate, MaxRate]) 

        SectorObj           =   MKT_SECTOR.query.order_by(MKT_SECTOR.ID.asc()).all()
        CustomerObj         =   MKT_CUSTOMER.query
        LoanObj             =   db.session.query(
                                    MKT_LOAN_CONTRACT.ID,
                                    MKT_LOAN_CONTRACT.LoanProduct,
                                    MKT_LOAN_CONTRACT.OutstandingAmount,
                                    MKT_LOAN_CONTRACT.Account,
                                    MKT_LOAN_CONTRACT.Currency,
                                    MKT_LOAN_CONTRACT.ContractCustomerID
                                ).\
                                filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
                                filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0)

        if Branch != "ALL":

            Branch      =   Branch.split()
            LoanObj     =   LoanObj.\
                            filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))


        CurrencyDic = ReportHeader['DicExchangeRate']

        if LoanObj:
            for item in LoanObj:
                Sector  = CustomerObj.get(item.ContractCustomerID).Sector
                # print "Sector: %s - Product %s - Amount: %s." %(item.Sector, item.LoanProduct, item.OutstandingAmount)
                ByGroupAccDic.append({str(Sector) + "-" + str(item.LoanProduct):item.Account})
                ByGroupLCDic.append({str(Sector) + "-" + str(item.LoanProduct):Decimal(item.OutstandingAmount)* CurrencyDic.get(item.Currency)})

        CellRow     = 8

        if SectorObj:
            for item in SectorObj:

                NumOfAccGroup   =   getAccBySector(ByGroupAccDic, item.ID, GroupLoanID) if GroupLoanID else 0
                NumOfAccIndiv   =   getAccBySector(ByGroupAccDic, item.ID, IndivLoanID) if IndivLoanID else 0
                NumOfAccSmall   =   getAccBySector(ByGroupAccDic, item.ID, SmallLoanID) if SmallLoanID else 0
                TotalNumOfAcc   =   int(NumOfAccGroup) + int(NumOfAccIndiv) + int(NumOfAccSmall)

                AmtOfGroup      =   getAmtLCBySector(ByGroupLCDic, item.ID, GroupLoanID) if GroupLoanID else 0
                AmtOfGroup      =   mktnbc.getDivAmount(float(AmtOfGroup))
                AmtOfIndiv      =   getAmtLCBySector(ByGroupLCDic, item.ID, IndivLoanID) if IndivLoanID else 0
                AmtOfIndiv      =   mktnbc.getDivAmount(float(AmtOfIndiv))
                AmtOfSmall      =   getAmtLCBySector(ByGroupLCDic, item.ID, SmallLoanID) if SmallLoanID else 0
                AmtOfSmall      =   mktnbc.getDivAmount(float(AmtOfSmall))

                # print "Sector %s - Amount %s." %(item.ID, )

                TotalAmount     =   float(AmtOfGroup) + float(AmtOfIndiv) + float(AmtOfSmall)
                # print NumOfAccGroup, NumOfAccIndiv
                TotalAccGroup.append(NumOfAccGroup)
                TotalAccIndiv.append(NumOfAccIndiv)
                TotalAccSmall.append(NumOfAccSmall)

                TotalAmtGroup.append(AmtOfGroup)
                TotalAmtIndiv.append(AmtOfIndiv)
                TotalAmtSmall.append(AmtOfSmall)
                
                # ListSectorInKh[mktmessage.getNBCLang(Language, '110000')][str(item.ID)]
                RowRecord.append({
                                1:ListSector.get(item.Description,""),
                                2:str(NumOfAccGroup),
                                3:mktmoney.formatNumber(float(AmtOfGroup), 1, 2),
                                4:str(NumOfAccIndiv),
                                5:mktmoney.formatNumber(float(AmtOfIndiv), 1, 2),
                                6:str(NumOfAccSmall),
                                7:mktmoney.formatNumber(float(AmtOfSmall), 1, 2),
                                8:str(TotalNumOfAcc),
                                9:mktmoney.formatNumber(float(TotalAmount), 1, 2)

                            })
                if item.ID != '4':
                    ExcelRecord.update({
                                    "C%s"%(CellRow) : NumOfAccGroup,
                                    "D%s"%(CellRow) : AmtOfGroup,
                                    "E%s"%(CellRow) : NumOfAccIndiv,
                                    "F%s"%(CellRow) : AmtOfIndiv,
                                    "G%s"%(CellRow) : NumOfAccSmall,
                                    "H%s"%(CellRow) : AmtOfSmall,
                                })
                    CellRow += 1

        SubTotalAccGroup    =   mktnbc.getTotalByList(TotalAccGroup)
        SubTotalAccIndiv    =   mktnbc.getTotalByList(TotalAccIndiv)
        SubTotalAccSmall    =   mktnbc.getTotalByList(TotalAccSmall)
        SubTotalAcc         =   int(SubTotalAccGroup) + int(SubTotalAccIndiv) + int(SubTotalAccSmall)

        SubTotalAmtGroup    =   mktnbc.getTotalByList(TotalAmtGroup)
        SubTotalAmtIndiv    =   mktnbc.getTotalByList(TotalAmtIndiv)
        SubTotalAmtSmall    =   mktnbc.getTotalByList(TotalAmtSmall)
        SubTotalAmt         =   float(SubTotalAmtGroup) + float(SubTotalAmtIndiv) + float(SubTotalAmtSmall)
        
        SubTotalAmtGroup    =   mktmoney.formatNumber(float(SubTotalAmtGroup), 1, 2)
        SubTotalAmtIndiv    =   mktmoney.formatNumber(float(SubTotalAmtIndiv), 1, 2)
        SubTotalAmtSmall    =   mktmoney.formatNumber(float(SubTotalAmtSmall), 1, 2)
        SubTotalAmt         =   mktmoney.formatNumber(float(SubTotalAmt), 1, 2)
        # 1:u'%s' %mktmessage.getNBCLang(Language, '700005'),
        RowRecord.append({
                                1:u'សរុប',
                                2:str(SubTotalAccGroup),
                                3:str(SubTotalAmtGroup),
                                4:str(SubTotalAccIndiv),
                                5:str(SubTotalAmtIndiv),
                                6:str(SubTotalAccSmall),
                                7:str(SubTotalAmtSmall),
                                8:str(SubTotalAcc),
                                9:str(SubTotalAmt),
                                'LineType':'GH',
                                'Indent':0,
                                'RowBGColor':mktnbc.BG_HEADER_COLOR,
                                'LineFormat':'bold'
                             
                            })

        RowRecord.append({
                                1:u'%s' %u"អត្រាការប្រាក់ដែលបានយក",
                                2:'',
                                3:'',
                                4:'',
                                5:'%s' %DisplayRate,
                                6:'',
                                7:'',
                                8:'',
                                9:'%s' %DisplayRate
                            })
        CellRow     = 15
        ExcelRecord.update({
                                "F%s"%(CellRow) : DisplayRate,
                                "J%s"%(CellRow) : DisplayRate
                                })

        Result 	=	{'Data':RowRecord, 'ReportHeader':ReportHeader,'TableHeader':TableHeader, 'Excel': ExcelRecord}
        return Result

    except:
        raise

def getAmtLCBySector(L, ID, Group):
    try:

        AmountDic   =   []

        L = filter(None, L)

        if len(L) > 0:

            for item in L:

                if len(item) > 0:

                    for key, row in item.iteritems():

                        itemList = key.split('-')

                        if int(ID) == int(itemList[0]) and itemList[1] in Group:

                            AmountDic.append(item[key])

        Amount = mktnbc.getTotalByList(AmountDic)
        return Amount

    except:
        raise

def getAccBySector(L, ID, Group):
    try:

        NumOfAcc    =   {}

        L = filter(None, L)

        if len(L) > 0:

            for item in L:

                if len(item) > 0:

                    for key, row in item.iteritems():

                        itemList = key.split('-')

                        if ID in itemList[0] and itemList[1] in Group:

                            NumOfAcc.update({item[key]:'1'})

        return len(NumOfAcc)

    except:
        raise
