# -*- coding: utf-8 -*-
from app.mktcore.imports 		import *
from flask 						import request, url_for, render_template,flash,redirect,session, g, jsonify
from .. 						import app, db
from app.mktcore.session 		import *
from sqlalchemy 				import *
from .forms 					import *
from datetime 					import datetime, date, timedelta
from decimal 					import *
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
from app.FinancialReport.models import MKT_LINE_REPORT_DE
from app.GL.models 				import MKT_GL_MAPPING
from app.Branch.models 			import MKT_BRANCH
from app.Currency.models 		import MKT_CURRENCY
from app.LoanContract.models 	import MKT_LOAN_CONTRACT
from app.LoanProduct.models 	import MKT_LOAN_PRODUCT
from app.Interest.models 		import MKT_INTEREST
from app.InterestRate.models 	import MKT_INTEREST_RATE
from app.Account.models 		import MKT_ACCOUNT
from app.Customer.models 		import MKT_CUSTOMER
from app.LoanApplication.models import MKT_GUARANTOR
from app.Collateral.models 		import MKT_COLLATERAL

import time
import collections
import app.tools.mktreport 			as mktreport
import app.tools.mktsetting 		as mktsetting
import app.tools.mktmoney 			as mktmoney
import app.tools.user 				as mktuser
import app.tools.mktdate 			as mktdate
import app.tools.mktaccounting 		as mktaccounting
import app.tools.mktmessage 		as mktmessage
import app.FinancialReport.views 	as mktfinancial
import app.tools.mktgl 				as mktgl
import app.tools.mktmonthend		as mktmonthend
import json
# import app.NBCReport.others 		as mktnbcother
import app.tools.mkttool 			as mkttool

# from app.NBCExchangeRate.views 		import *
from V1.N001 				import *
from V1.N002 				import *
from V1.N003 				import *
from V1.N004 				import *
from V1.N005 				import *
from V1.N006L 				import *
from V1.N006D 				import *
from V1.N007 				import *
from V1.N009 				import *
from V1.N010 				import *
from V1.N011 				import *
from V1.N012 				import *
from V1.N013 				import *
from V1.N014 				import *
from V1.N016 				import *
# from N0162 				import *
from V1.N017 				import *
from V1.N091 				import *
from V1.N092 				import *
from V1.N018 				import *
from V2.NGO.views 			import *
from V2.MFI.views 			import * # Active NBC V2 (DEC-16)
from V2.views import *

registerCRUD(admin, '/NBCBuilder', 'NBCBuilder', FRM_NBC_REPORT, [MKT_NBC_REPORT])
registerCRUD(admin, '/NBCBuilderDetail', 'NBCBuilderDetail', FRM_NBC_REPORT_DE, [MKT_NBC_REPORT_DE])

def getAmtByLineNumber(LineNumber, LineObj, Prefix):
	try:
		
		Amount 		= 	0
		Condition 	=	[]

		if LineNumber.find('>') != -1:

			StrValue 	=	LineNumber.split('>')
			FirstValue 	=	int(StrValue[0])
			SecondValue =	int(StrValue[1]) + 1

			for item in range(FirstValue, SecondValue):
				Condition.append(str(item))

			# print Condition

		else:

			Condition 	= 	str(LineNumber).split()

		# print "Condition: %s." %Condition

		if len(Condition) > 0:

			for item in Condition:
				Option = "+"
				if item.find('-') != -1:
					Option = "-"
					item = item.replace("-", "")

				KeyObj 	=	"%s%s" %(Prefix, item)
				# print "I. Option: %s. KeyObj: %s." %(Option, KeyObj)
				if KeyObj in LineObj:
					
					if "+" in Option:
						# print '++++'
						Amount += float(LineObj[KeyObj])
					else:
						# print '----'
						Amount -= float(LineObj[KeyObj])

		# print "Amount %s." %Amount

		return Amount

	except Exception, e:
		return 0

def getLineValue(LineNumber, LineObj):
	try:

		return LineObj[LineNumber]

	except Exception, e:
		return 0

def transferNetIncometoEquity(item, Branch="ALL"):

	BankDate 	= mktdate.getBankDate()
	Year 		= BankDate.year
	Month 		= BankDate.month
	Month 		= '%02d' %Month

	Dic = {"AmountInDollars":0, "AmountInRiels":0, "OtherAmount":0, "TotalInRiels":0, "YTDBalance":0}

	NBCNetIncomeLine 	=	mktsetting.getAppSetting('NBCNetIncomeLine')
	Obj 	= 	MKT_NBC_INCOME_STATEMENT.query.\
				filter(MKT_NBC_INCOME_STATEMENT.Year == str(Year)).\
				filter(MKT_NBC_INCOME_STATEMENT.Month == str(Month)).\
				filter(MKT_NBC_INCOME_STATEMENT.LineNumber == int(NBCNetIncomeLine))

	if Branch != "ALL":
		Branch = Branch.split()
		Obj =	Obj.\
				filter(MKT_NBC_INCOME_STATEMENT.Branch.in_(Branch))

	Obj 	=	Obj.\
				first()

	Result = 0
	if Obj:

		Dic.update({"AmountInDollars":Obj.TotalInDollar})
		Dic.update({"AmountInRiels":Obj.InRiel})
		Dic.update({"OtherAmount":Obj.OtherCurrencyInRiel})
		Dic.update({"TotalInRiels":Obj.TotalInRiel})
		Dic.update({"YTDBalance":Obj.InThisYear})

	return Dic[item]

def getNBCN002Detail(ID, Period, Branch="ALL", ReportedDate=""):
	try:

		getAccSetting 	=	mktsetting.getAccSetting()
		Currency 		=	'KHR'
		BaseCurrency 	=	getAccSetting.BaseCurrency
		ReportingRate 	=	mktsetting.getAppSetting('NBCExchangeRate')
		NBC_REPORT 		= 	MKT_NBC_REPORT.query.get(ID)
		LineFormat 		=	{'B':'Bold', 'I':'Italic', 'N':'Normal', 'BI':'Bold'}
		ReportHeader 	= 	{}
		ColumnHeader 	=	{'Color':'#CCFFCC'}
		Data 			=	[]
		Type 			=	'1'
		TreyMeasObj 	=	['01', '02', '03', '04']
		TreyMeasValue 	=	{'01':['01', '02', '03'], '02':['04', '05', '06'], '03':['07', '08', '09'], '04':['10', '11', '12']}

		if Branch != "ALL":
			Branch 	=	Branch.split()

		Template 		=	"1"

		if NBC_REPORT:

			Language 		=	getDefaultLang()
			ReportHeader.update({'Form': NBC_REPORT.ID})
			ReportHeader.update({'Title': NBC_REPORT.ReportTitle})
			ReportHeader.update({'ReportName': NBC_REPORT.ReportName})
			ReportHeader.update({'CompanyName': NBC_REPORT.CompanyName})
			ReportHeader.update({'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000'))})

			Template = NBC_REPORT.Template

		if ID == 'N002':

			BankDate 	= mktdate.getBankDate()
			Condition 	= []
			# Date 		= BankDate.split('-')
			Year 		= BankDate.year
			Month 		= BankDate.month
			Month 		= '%02d' %Month

			for item in TreyMeasObj:

				if Month in TreyMeasValue[item]:
					Condition = TreyMeasValue[item]

			YTDBalanceObj 	= 	db.session.query(
								MKT_NBC_INCOME_STATEMENT.LineNumber,
								MKT_NBC_INCOME_STATEMENT.Description,
								MKT_NBC_INCOME_STATEMENT.LineType,
								MKT_NBC_INCOME_STATEMENT.InThisYear.label('YTDBalance')
							).\
							filter(MKT_NBC_INCOME_STATEMENT.Year == str(Year)).\
							filter(MKT_NBC_INCOME_STATEMENT.Month.in_(Condition))
			if Branch != "ALL":
				YTDBalanceObj 	=	YTDBalanceObj.\
								filter(MKT_NBC_INCOME_STATEMENT.Branch.in_(Branch))

			YTDBalanceObj 	=	YTDBalanceObj.\
								order_by(MKT_NBC_INCOME_STATEMENT.Month.asc()).\
								all()

			YTDBalance 	=	{}
			if YTDBalanceObj:
				for item in YTDBalanceObj:
					YTDBalance.update({int(item.LineNumber):item.YTDBalance})

			RecordObj 	= 	db.session.query(
								MKT_NBC_INCOME_STATEMENT.LineNumber,
								MKT_NBC_INCOME_STATEMENT.Description,
								MKT_NBC_INCOME_STATEMENT.LineType,
								func.sum(MKT_NBC_INCOME_STATEMENT.TotalInDollar).label('AmountInDollars'),
								func.sum(MKT_NBC_INCOME_STATEMENT.InRiel).label('AmountInRiels'),
								func.sum(MKT_NBC_INCOME_STATEMENT.OtherCurrencyInRiel).label('OtherAmount'),
								func.sum(MKT_NBC_INCOME_STATEMENT.TotalInRiel).label('TotalInRiels'),
								func.sum(MKT_NBC_INCOME_STATEMENT.InThisYear).label('YTDBalance')
							).\
							filter(MKT_NBC_INCOME_STATEMENT.Year == str(Year)).\
							filter(MKT_NBC_INCOME_STATEMENT.Month.in_(Condition))

			if Branch != "ALL":
				RecordObj 	=	RecordObj.\
								filter(MKT_NBC_INCOME_STATEMENT.Branch.in_(Branch))

			RecordObj 	=	RecordObj.\
							group_by(
								MKT_NBC_INCOME_STATEMENT.LineNumber,
								MKT_NBC_INCOME_STATEMENT.Description,
								MKT_NBC_INCOME_STATEMENT.LineType
							).\
							all()

			for item in RecordObj:
				Dic = {}
				# print item.Description
				Dic.update({'LineNumber':int(item.LineNumber)})
				Dic.update({'Description':item.Description})
				Dic.update({'LineType':item.LineType})
				Dic.update({'LineFormat':''})
				Dic.update({'RowBGColor':''})
				Dic.update({'AmountInDollars':mktmoney.formatNumber(float(item.AmountInDollars), 1, 2)})
				Dic.update({'AmountInRiels':mktmoney.formatNumber(float(item.AmountInRiels), 1, 2)})
				Dic.update({'OtherAmount':mktmoney.formatNumber(float(item.OtherAmount), 1, 2)})
				Dic.update({'TotalInRiels':mktmoney.formatNumber(float(item.TotalInRiels), 1, 2)})
				Dic.update({'YTDBalance':mktmoney.formatNumber(float(item.YTDBalance), 1, 2)})
				for x in YTDBalance:
					if int(x) == int(item.LineNumber):
						Dic.update({'YTDBalance':mktmoney.formatNumber(float(YTDBalance[int(x)]), 1, 2)})
				
				Dic.update({'Header':1})

				Data.append(Dic)

		Data = sorted(Data, key=lambda Data: Data['LineNumber'])

		Result 	=	{
			'ReportHeader'	: ReportHeader,
			'ColumnHeader'	: ColumnHeader,
			'Data'			: Data,
			'Type'			: Type,
			'ReportingRate' : ReportingRate 
		}

		return [Result, Template]

	except:
		raise

def getN002toN001():

	return ""

def getTotalInRiels(ID, Other, Period=0, Branch="ALL", GLTable='', GLObj=''):
	try:

		Amount = float(getAmountInRiels(ID, Period, Branch)) + float(getOutBaseCurrency(Other, Period, Branch, GLTable=GLTable, GLObj=GLObj))

		return Amount

	except:
		raise

def getAmountInDollars(ID, Other, Period=0, Currency='KHR', Branch="ALL", GLTable='', GLObj=''):
	try:

		Amount 			= 	getTotalInRiels(ID, Other, Period, Branch, GLTable=GLTable, GLObj=GLObj)
		ReportingRate 	=	mktsetting.getAppSetting('NBCExchangeRate')

		DollarAmt = (float(Amount) * 1000000) / float(ReportingRate)

		return DollarAmt

	except:
		raise

def getAmountInDollarII(Amount):
	try:

		ReportingRate 	=	mktsetting.getAppSetting('NBCExchangeRate')
		DollarAmt 		= 	(float(Amount) * 1000000) / float(ReportingRate)

		return DollarAmt

	except:
		raise

def getYTDBalance(ID, Branch="ALL", GLTable='', GLObj=''):
	try:

		Amount = mktgl.getGLValue(ID, Branch, 3, GLTable=GLTable, GLObj=GLObj)

		return float(Amount)
	
	except:
		raise

@app.route('/Morakot/MyJson', methods=['GET'])
def getMyJson():
	try:

		Result 			=	{}
		ReportHeader 	=	{'Good':'1', 'Bad':'0'}
		ColumnHeader 	=	[
								{'Col1':'Asset', 'Col2':'In Dollar', 'Col3':'In Riels', 'Col4':'Other Currency in Riels', 'Col5':'Total in Riels'},
								{'Col1':'Asset', 'Col2':'In Dollar'},
								{'Col1':'Test', 'Col2':'In Riels'}
							]
		Content 		=	{'Text':'We are here.'}
		Result 			=	{
								'ReportHeader': ReportHeader,
								'ColumnHeader':ColumnHeader,
								'Content': Content,
								'Type': '1'
							}

		return jsonify(Result=Result)

	except:
		raise

@app.route('/Morakot/ViewJson/', methods=['GET'])
def getRequestJson():
	try:

		url 		= request.args.get('URL') if 'URL' in request.args else "http://127.0.0.1:5000/Morakot/MyJson"
		client 		= requests.session()
		response 	= client.get(url)
		results 	= json.loads(response.content)
		
		return jsonify(Result=results)

	except:
		raise

def getTotalByList(L):
	try:

		NumOfRecord 	=	float(0)

		if len(L) > 0:

			for item in L:
				
				NumOfRecord += float(item)
				# print item

		return NumOfRecord

	except:
		raise

def setNBCIncomeStatement(JsonObj, Branch):
	try:

		SystemDate 	=	mktdate.getBankDate()
		SystemDate 	=	str(SystemDate).split()
		SystemDate 	=	SystemDate[0]
		ObjDate 	=	SystemDate.split('-')
		Year 		=	ObjDate[0]
		Month 		=	ObjDate[1]
		Month 		=	"%02d" %int(Month)

		DateTimeNow = mktdate.getDateTimeNow()

		# Branch 		=	mktuser.getBranch(session["ChangeBranch"]).ID

		if Branch.upper() != "ALL":

			# BranchList 	=	Branch.split()
			RemoveObj 	= 	db.session.query(MKT_NBC_INCOME_STATEMENT.ID).\
							filter(MKT_NBC_INCOME_STATEMENT.Year == Year).\
							filter(MKT_NBC_INCOME_STATEMENT.Month == Month).\
							filter(MKT_NBC_INCOME_STATEMENT.Branch == Branch).\
							delete()

			# filter(MKT_NBC_INCOME_STATEMENT.Branch.in_(BranchList)).\

		else:

			RemoveObj 	= 	db.session.query(MKT_NBC_INCOME_STATEMENT.ID).\
							filter(MKT_NBC_INCOME_STATEMENT.Year == Year).\
							filter(MKT_NBC_INCOME_STATEMENT.Month == Month).\
							delete()

		if JsonObj['Data']:

			if Branch.upper() == "ALL":

				BranchObj 	=	MKT_BRANCH.query
				if BranchObj:
					for item in BranchObj:
						Branch = item.ID

						for item in JsonObj['Data']:

							IncomeObj 	=	MKT_NBC_INCOME_STATEMENT(
												Branch 				=	Branch,
												Status 				=	'AUTH',
												Curr 				=	'0',
												Inputter 			=	'System',
												Createdon 			=	DateTimeNow,
												Authorizer 			=	'System',
												Authorizeon 		=	DateTimeNow,
												Year				=	Year,
												Month				=	Month,
												LineNumber 			=	item['LineNumber'],
												LineType 			=	item['LineType'],
												Description			=	item['Description'],
												TotalInDollar		=	item['AmountInDollars'].replace(',', ''),
												InRiel				=	item['AmountInRiels'].replace(',', ''),
												OtherCurrencyInRiel =	item['OtherAmount'].replace(',', ''),
												TotalInRiel 		=	item['TotalInRiels'].replace(',', ''),
												InThisYear			=	item['YTDBalance'].replace(',', '')
											)

							db.session.add(IncomeObj)

			else:

				BranchList 	=	Branch.split()

				for Branch in BranchList:
						
					for item in JsonObj['Data']:

						IncomeObj 	=	MKT_NBC_INCOME_STATEMENT(
											Branch 				=	Branch,
											Status 				=	'AUTH',
											Curr 				=	'0',
											Inputter 			=	'System',
											Createdon 			=	DateTimeNow,
											Authorizer 			=	'System',
											Authorizeon 		=	DateTimeNow,
											Year				=	Year,
											Month				=	Month,
											LineNumber 			=	item['LineNumber'],
											LineType 			=	item['LineType'],
											Description			=	item['Description'],
											TotalInDollar		=	item['AmountInDollars'].replace(',', ''),
											InRiel				=	item['AmountInRiels'].replace(',', ''),
											OtherCurrencyInRiel =	item['OtherAmount'].replace(',', ''),
											TotalInRiel 		=	item['TotalInRiels'].replace(',', ''),
											InThisYear			=	item['YTDBalance'].replace(',', '')
										)

						db.session.add(IncomeObj)

		return ""
		# ALTER TABLE "MKT_NBC_INCOME_STATEMENT" ADD COLUMN "LineNumber" integer;
		# ALTER TABLE "MKT_NBC_INCOME_STATEMENT" ADD COLUMN "Description" character varying(200);

	except:
		db.session.rollback()
		raise

@app.route("/Morakot/NBCLanguage/")
def setNBCLanguage():
	try:
	
		Lang 			= 	request.args.get('Lang') if 'Lang' in request.args else 'KH'
		BackUrl 		= 	request.args.get('BackUrl') if 'BackUrl' in request.args else ''
		session['Lang'] = 	Lang
		# g.Lang 			=	Lang
		if session['Lang'] == "KH":
			from app.Language.language_KH import Language
		else:
			from app.Language.language_EN import Language

		return redirect(BackUrl)

	except Exception, e:
		raise

@app.route("/Morakot/ValidateLineReport/")
def checkValidateGLReport():
	try:
		
		Output 		= 	""
		Record 		= 	getListGLID()
		LineObj 	=	getListLineValue()
		UnMapList 	=	[]
		DouplList 	=	[]
		SubList 	=	getSubGLList()
		Num 		=	0

		if Record[0]:

			Output += "*** Check Line Report Un-mapping:<br><hr>"

			for item in Record[0]:
				if item not in LineObj:
					Output += "- GL: %s<br>" %Record[0].get(item,item)
					UnMapList.append(item)
					Num += 1

		if int(Num) == 0:
			Output += "---None---<br>"

		Output += "<br>*** Check Douplicated Line Report Mapping:<br><hr>"
		Num = 0
		if LineObj:
			for item in LineObj:
				if item in DouplList:
					Output += "- GL: %s<br>" %item
					Num += 1

				DouplList.append(item)

		if int(Num) == 0:
			Output += "---None---<br>"

		Output += "<br>*** Check Douplicated Main and Sub Line Report:<br><hr>"
		Num = 0
		if len(LineObj) > 0:

			for item in LineObj:
				if item in SubList:
					Output += "- GL: %s<br>" %item
					Num += 1
					
		if int(Num) == 0:
			Output += "---None---<br>"

		Output += "<br>*** Check Line Type Report:<br><hr>"
		Num = 0

		if int(Num) == 0:
			Output += "---None---<br>"

		Output += "<br>*** Check Missing Line Report:<br><hr>"
		Num = 0

		if int(Num) == 0:
			Output += "---None---<br>"

		return "%s" %Output

	except Exception, e:
		raise

def getListGLID():
	try:
		
		Dic 	=	{}
		Main 	=	{}
		SubList = 	getSubGLList()
		GLObj 	=	MKT_GL_MAPPING.query.\
					filter(~MKT_GL_MAPPING.ID.in_(SubList)).\
					all()

		if GLObj:
			for item in GLObj:
				Sub 	=	[]
				if item.SubGL:
					SubGL 	=	item.SubGL
					SubGL 	=	SubGL.split()

					for sub in SubGL:
						Sub.append(sub)

				Dic.update({item.ID:Sub})
				Text = "%s - %s"%(item.ID,item.Description)
				Main.update({item.ID:Text})

		return [Main, Dic]

	except Exception, e:
		raise

def getListLineValue():
	try:
		
		Dic 	=	{}
		LineObj =	MKT_LINE_REPORT_DE.query.\
					all()

		if LineObj:
			for item in LineObj:
				LineValue 	=	item.LineValue

				if LineValue.find(':') != -1:
					StrValue 	=	LineValue.split(':')[1]
				else:
					StrValue 	=	LineValue

				StrValue 	=	StrValue.split()

				for row in StrValue:
					Text=''
					if LineValue.find('-') != -1:
						row = row.replace('-','')
						Text = '%s - %s'%(row,item.LineDescription)
					Dic.update({row:Text})

		return Dic

	except Exception, e:
		raise

def getSubGLList():
	try:
		
		Dic 	=	[]
		GLObj 	=	MKT_GL_MAPPING.query.\
					filter(MKT_GL_MAPPING.SubGL != "")

		if GLObj:
			for item in GLObj:
				if item.SubGL:
					SubGL 	=	item.SubGL
					SubGL 	=	SubGL.split()

					for sub in SubGL:
						Dic.append(sub)

		return Dic

	except Exception, e:
		raise

@app.route("/Morakot/ValidateNBCReport/")
def checkValidateNBCReport():
	try:
		
		Output 		= 	""
		Record 		= 	getListGLID()
		LineObj 	=	getListNBCLineValue()
		UnMapList 	=	[]
		DouplList 	=	[]
		SubList 	=	getSubGLList()
		Num 		=	0

		if Record[0]:
			print "Record[0]",Record[0]
			Output += "*** Check Line Report Un-mapping:<br><hr>"

			for item in Record[0]:
				if item not in LineObj:
					Output += "- GL: %s<br>" %Record[0].get(item,item)
					UnMapList.append(item)
					Num += 1

		if int(Num) == 0:
			Output += "---None---<br>"

		Output += "<br>*** Check Douplicated Line Report Mapping:<br><hr>"
		Num = 0
		if LineObj:
			for item in LineObj:
				if item in DouplList:
					Output += "- GL: %s<br>" %item
					Num += 1

				DouplList.append(item)

		if int(Num) == 0:
			Output += "---None---<br>"

		# Output += "<br>*** Check Douplicated Main and Sub Line Report:<br><hr>"
		# Num = 0
		# if len(LineObj) > 0:

		# 	for item in LineObj:
		# 		if item in SubList:
		# 			Output += "- GL: %s --- Sub: %s<br>" %(item, SubList[item])
		# 			Num += 1
					
		# if int(Num) == 0:
		# 	Output += "---None---<br>"

		# Output += "<br>*** Check Line Type Report:<br><hr>"
		# Num = 0

		# if int(Num) == 0:
		# 	Output += "---None---<br>"

		# Output += "<br>*** Check Missing Line Report:<br><hr>"
		# Num = 0

		# if int(Num) == 0:
		# 	Output += "---None---<br>"

		return "%s" %Output

	except Exception, e:
		raise

def getListNBCLineValue():
	try:
		
		ListGL 	=	[]
		LineObj =	MKT_NBC_REPORT_DE.query.\
					filter(MKT_NBC_REPORT_DE.LineType == "LD").all()

		if LineObj:
			for item in LineObj:
				LineValue 	=	item.LineValue.replace('-','').split()
				OtherLineValue = item.OtherLineValue.replace('-','').split()
				ListGL.extend(LineValue)
				ListGL.extend(OtherLineValue)
	
		return ListGL

	except Exception, e:
		raise