from app.AccEntry.models import MKT_ACC_ENTRY
from app.AccProduct.models import MKT_ACC_PRODUCT
from app.Account.models import MKT_ACCOUNT
from app.Currency.models import MKT_CURRENCY
from app.Customer.models import MKT_CUSTOMER
from app.Country.models import MKT_COUNTRY
from app.IdType.models import MKT_ID_TYPE
from app.Village.models import MKT_VILLAGE
from app.Commune.models import MKT_COMMUNE
from app.District.models import MKT_DISTRICT
from app.Province.models import MKT_PROVINCE
from app.Sector.models import MKT_SECTOR
from app.Company.models import MKT_COMPANY
from app.Position.models import MKT_POSITION

from app.mktcore.imports import *
from wtforms import Form, DateField, SelectField, validators
from sqlalchemy.sql import func
from StringIO import StringIO
from flask import make_response
from yattag import Doc
from app import app

import app.mktcore.autoid       as mktautoid
import app.tools.mktdate as mktdate
import app.tools.mktsetting as mktsetting
import app.tools.mktmoney as mktmoney
import datetime
import os
import json


class FRM_CASH_TRNSACTION_REPORT(Form):

    StartDate = DateField('Transaction Date From : ', [validators.DataRequired()])
    EndDate = DateField('To : ', [validators.DataRequired()])
    Amend = SelectField('Amend', choices=[('false', 'false'), ('true', 'true')], coerce=str, default='false')

    def validate_StartDate(form, field):
        start_date = field.data
        end_date = form.EndDate.data

        if end_date:
            if start_date >= end_date:
                raise ValidationError(' must be smaller than To Date')


def getIncludeModule():
    """Return Include Module"""
    return ['FT', 'FW', 'FD', 'WD', 'DP', 'WB', 'CB', 'WC', 'CC']


def getNilAttr():
    """Return xsi:nil=true atttribute XML"""
    return ('xsi:nil', 'true')


def setIndividualElement(doc, tag, line, CustomerObj):
    """Set Individual Element"""
    NilAttr = getNilAttr()

    CountryObj = MKT_COUNTRY.query.get(CustomerObj.CountryOfBirth)
    IdTypeObj = MKT_ID_TYPE.query.get(CustomerObj.IDType)
    SectorObj = MKT_SECTOR.query.get(CustomerObj.Sector)
    OccupationObj = MKT_POSITION.query.get(CustomerObj.Position)

    # Individual
    with tag('Individual'):

        # Name
        with tag('Name'):
            line('FirstName_Latin', CustomerObj.FirstNameEn.upper())
            doc.stag('MiddleName_Latin', NilAttr)
            line('LastName_Latin', CustomerObj.LastNameEn.upper())
            line('FirstName_Khmer', CustomerObj.FirstNameKh or 'N/A') # require field !done
            doc.stag('MiddleName_Khmer', NilAttr)
            line('LastName_Khmer', CustomerObj.LastNameKh or 'N/A') # require field !done

        # Date of Birth
        line('DateOfBirth', CustomerObj.DateOfBirth)

        # Identifier
        with tag('Identifier'):

            if CustomerObj.IDType == 'N':
                with tag('NationalD'):
                    line('NationalID', CustomerObj.IDNumber)
                    line('ExpireDate', CustomerObj.ExpiryDate)
            elif CustomerObj.IDType == 'P':
                with tag('Passport'):
                    line('PassportNumber', CustomerObj.IDNumber)

                    line('CountryCodeType', CountryObj.ISO)
                    line('ExpireDate', CustomerObj.ExpiryDate)
            else:
                with tag('ValidIdentifier'):
                    line('ValidIdentifier', CustomerObj.IDNumber)
                    line('ValidIdentifierDescription', IdTypeObj.Description)

        # Occupation
        Occupation = ''
        if SectorObj.Description == 'Agriculture':
            Occupation = 'Agriculture/Fisheries Worker'

        elif SectorObj.Description == 'Transportation':
            Occupation = 'Transportation Worker'

        elif SectorObj.Description == 'Construction':
            Occupation = 'Construction'
        else:
            Occupation = 'Other'

        line('Occupation', Occupation) # need to verify !done

        # OccupationOther
        if Occupation == 'Other':
            line('OccupationOther', OccupationObj.Description if OccupationObj else '' )
        else:
            doc.stag('OccupationOther')

        # Sex
        line('Sex', CustomerObj.Gender)


def setAddresssPhoneElement(doc, tag, line, CustomerObj):
    """Set Phone Address and Phone Element"""
    NilAttr = getNilAttr()

    CountryObj = MKT_COUNTRY.query.get(CustomerObj.CountryOfBirth)
    VillageObj = MKT_VILLAGE.query.get(CustomerObj.Village)
    DistrictObj = MKT_DISTRICT.query.get(CustomerObj.District)
    CommuneObj = MKT_COMMUNE.query.get(CustomerObj.Commune)
    ProvinceObj = MKT_PROVINCE.query.get(CustomerObj.Province)

    # Address
    with tag('Address'):
        line('BuildingNumber', CustomerObj.HouseNo or 'N/A') # require field !done
        line('StreetName', CustomerObj.Street or 'N/A') # require field !done
        doc.stag('StreetType')
        doc.stag('GroupNumber')
        line('Village', VillageObj.Description if VillageObj else '')
        line('Commune', CommuneObj.Description if CommuneObj else '' )
        line('DistrictName', DistrictObj.Description if DistrictObj else '')
        line('Province', ProvinceObj.Description if ProvinceObj else '')
        doc.stag('POBox')
        doc.stag('PostalCode')
        line('CountryCodeType', CountryObj.ISO if CountryObj else '')
        doc.stag('AddressTemp1', NilAttr)
        doc.stag('AddressTemp2', NilAttr)
        doc.stag('AddressTemp3', NilAttr)

    # Phone
    with tag('Phone'):
        with tag('HomePhone'):
            doc.stag('CountryCode', NilAttr)
            doc.stag('LocalNumber', NilAttr)
        with tag('BusinessPhone'):
            doc.stag('CountryCode', NilAttr)
            doc.stag('LocalNumber', NilAttr)
        with tag('MobilePhone'):
            doc.stag('CountryCode', NilAttr)
            line('LocalNumber', CustomerObj.Mobile1 if CustomerObj else '')


def checkSetting():
    """Check setting return [] if no error"""
    Error = []
    Msg = 'Please check App setting.'
    CurrencyObj = MKT_CURRENCY.query

    if not mktsetting.getAppSetting('CTRLimit'):
        Error.append('CTR Limit (Riel) have not been set. %s' % Msg)
    if not mktsetting.getAppSetting('CTRPrefixReportingEntityID'):
        Error.append('Prefix Reporting Entity ID have not been set. %s' % Msg)
    if not mktsetting.getAppSetting('CTRReportingEntityID'):
        Error.append('Reporting Entity ID have not been set. %s' % Msg)
    if not mktsetting.getAppSetting('CTRXSDFilePath'):
        Error.append('XSD File Path have not been set. %s' % Msg)

    for row in CurrencyObj:

        if not row.OtherRate1:
            Error.append('Currency <b>%s</b> Other Rate 1 have not been set. Please check in Currency again.' % row.ID)

    return Error


def getAutoID():
    """Return Auto ID from Morakot VB"""
    AutoID = mktautoid.getAutoID('FRM_CASH_TRNSACTION_REPORT')

    AutoID = '%s%s' % (AutoID[:-5], AutoID[-2:])

    return AutoID


def getXMLFileName():
    """Return Auto ID of XML file"""
    ReportingEntityID = mktsetting.getAppSetting('CTRReportingEntityID')
    BankDate = mktdate.getBankDate().strftime('%y%m%d')
    AutoID = ''

    JsonPath = '%sapp/NBCReport/CTR/CTR.json' % app.config.get("CURRENT_PATH")

    if not os.path.exists(JsonPath):
        with open(JsonPath, 'w') as JsonFile:
            Data = {BankDate: 1}
            AutoID = 1
            json.dump(Data, JsonFile)
    else:
        with open(JsonPath) as JsonFile:
            Data = json.load(JsonFile)

            if Data.get(BankDate, ''):
                Data[BankDate] += 1
                AutoID = Data[BankDate]
            else:
                Data = {BankDate: 1}
                AutoID = 1

            with open(JsonPath, 'w') as JsonFile:
                json.dump(Data, JsonFile)

    return '%s-%s-%s' % (ReportingEntityID, BankDate, AutoID)


def getAccEntryObj(StartDate, Account):
    """Return MKT_ACCOUNT_ENTRY Object"""
    IncludeModule = getIncludeModule()
    AccEntryObj = MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Account == Account).\
                                    filter(MKT_ACC_ENTRY.TransactionDate == StartDate).\
                                    filter(MKT_ACC_ENTRY.Module.in_(IncludeModule))
    return AccEntryObj


def generateXML(ExccedLimit, Amend='false'):
    """Generate XML for download"""
    FilePath = mktsetting.getAppSetting('CTRXSDFilePath')
    header = u'''<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?mso-infoPathSolution solutionVersion="1.0.0.103" PIVersion="1.0.0.0" href="file:///%s" name="urn:schemas-microsoft-com:office:infopath:CTRv1-2:" language="en-us" productVersion="12.0.0"?>
<?mso-application progid="InfoPath.Document"?>
''' % FilePath

    doc, tag, text, line = Doc().ttl()

    doc.asis(header)

    namespace = [
            ('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance'),
            ('xmlns:is', 'http://www.nbc.org.kh'),
            ('xmlns:my', 'http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-03-05T04:45:45'),
            ('xmlns:xd','http://schemas.microsoft.com/office/infopath/2003')
    ]

    BankDate = mktdate.getBankDate().strftime('%Y-%m-%d')
    NilAttr = getNilAttr()
    PrefixReportingEntityID = mktsetting.getAppSetting('CTRPrefixReportingEntityID')
    ReportingEntityID = mktsetting.getAppSetting('CTRReportingEntityID')

    # LCTR
    with tag('LCTR', *namespace):

        line('ReportingEntityID', ReportingEntityID)

        # Report
        with tag('Report'):

            for row in ExccedLimit:

                for row in getAccEntryObj(row.TransactionDate, row.Account):

                    AutoID = getAutoID()

                    AutoID = '%s%s' % (PrefixReportingEntityID, AutoID)

                    line('ReportIdentifier', AutoID)
                    line('AmendedReportIndicator', Amend)
                    line('ReportPreparationDate', BankDate) # need to verify !done
                    line('ReportTransmissionDate', BankDate) # need to verify !done

                    AccObj = MKT_ACCOUNT.query.get(row.Account)
                    CustomerObj = MKT_CUSTOMER.query.get(AccObj.CustomerList)
                    CompanyObj = MKT_COMPANY.query.get('SYSTEM')
                    # Transaction
                    with tag('Transaction'):
                        line('TransactionDate', row.TransactionDate)
                        line('TransactionAmount', str(row.Amount))
                        line('TransactionCurrencyCode', row.Currency)
                        line('TransactionSeriesIndicator', 'true') # need to verify !done
                        TransactionType = ''
                        if row.DebitCredit == 'Dr':
                            TransactionType = 'WITHDRAWAL'
                        else:
                            TransactionType = 'PAYMENT'
                        line('TransactionType', TransactionType) # need to verify !done

                        line('BranchName', '%s %s' %(CompanyObj.CompanyName, row.Branch)) # need to verify !done

                    # TransactionParticipants
                    with tag('TransactionParticipants'):
                        # ParticipantType
                        with tag('ParticipantType'):
                            # Individual
                            setIndividualElement(doc, tag, line, CustomerObj)

                        # ParticipantRole
                        line('ParticipantRole', 'PRINCIPAL') # need to verify !done

                        # Address and Phone
                        setAddresssPhoneElement(doc, tag, line, CustomerObj)

                    # TransactionAccounts
                    with tag('TransactionAccounts'):
                        line('TransactionAccountNumber', row.Account)
                        AccountType = ''
                        if AccObj.AccProduct == '101':
                            AccountType = 'LOAN'
                        elif AccObj.AccProduct == '102':
                            AccountType = 'SAVINGS'
                        line('AccountType', AccountType) # need to verify !done
                        AccountRole = ''
                        if row.DebitCredit == 'Dr':
                            AccountRole = 'DEBIT'
                        else:
                            AccountRole = 'CREDIT'
                        line('AccountRole', AccountRole)
                        line('BranchName', '%s %s' %(CompanyObj.CompanyName, row.Branch)) # need to verify !done

                        # TransactionAccountOwners
                        with tag('TransactionAccountOwners'):

                            # Individual
                            setIndividualElement(doc, tag, line, CustomerObj)

                            # Address and Phone
                            setAddresssPhoneElement(doc, tag, line, CustomerObj)

    return doc.getvalue()


def makeXMLResponse(Output):
    """Return XML response to download"""
    response = None

    if Output:

        Filename = getXMLFileName()
        XmlString = Output
        output = StringIO()
        output.write(XmlString)
        response = make_response(output.getvalue())
        output.close()
        # This is the key: Set the right header for the response
        # to be downloaded, instead of just printed on the browser
        response.headers['Cache-Control'] = 'no-cache'
        response.headers["Content-Disposition"] = "attachment; filename=%s.xml" % Filename
        response.headers["Content-type"] = "application/xml; charset=utf-8"

    return response


def getDisplayObject(ExceedLimit):
    """Return dict to display on jinja side"""
    ResultDict = []

    if ExceedLimit:

        for row in ExceedLimit:

            # print row.TransactionDate, row.Account, row.Currency, row.Total
            AccObj = MKT_ACCOUNT.query.get(row.Account)
            CustomerObj = MKT_CUSTOMER.query.get(AccObj.CustomerList)
            CurrencyObj = MKT_CURRENCY.query.get(row.Currency)
            # print CustomerObj.ID, CustomerObj.FirstNameEn + CustomerObj.LastNameEn, row.Total * Decimal(CurrencyObj.OtherRate1)

            TempDict                   = {}
            TempDict['Branch']         = CustomerObj.Branch
            TempDict['TransactionDate']= row.TransactionDate
            TempDict['Account']        = row.Account
            TempDict['Customer']       = CustomerObj.ID
            TempDict['Fullname']       = "%s %s" % (CustomerObj.FirstNameEn, CustomerObj.LastNameEn)
            TempDict['Currency']       = row.Currency
            TempDict['Total']          = mktmoney.toMoney(float(row.Total), CurrencyObj)
            TotalRiel                  = row.Total * Decimal(CurrencyObj.OtherRate1)
            TempDict['TotalRiel']       = mktmoney.toMoney(float(TotalRiel), CurrencyObj)

            ResultDict.append(TempDict)

    return ResultDict


def getCurrencyObj():
    """Return all Currency"""
    return MKT_CURRENCY.query.all()


@app.route('/Morakot/Report/NBC/CTR', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def CashTransactionReport():

    # Block check access right
    ErrorMsg = []
    getCheck    = checkAccess ("/Morakot/Report/NBC/CTR/","Search")

    if getCheck != True: 
        ErrorMsg.append(msg_error+msg_permission)
        return render_template("permission.html", ErrorMsg=ErrorMsg)


    form = FRM_CASH_TRNSACTION_REPORT(request.form)

    ErrorMsg = checkSetting()

    if request.method == 'POST' and form.validate() and not ErrorMsg:

        IncludeModule = getIncludeModule()
        CTRLimit = mktsetting.getAppSetting('CTRLimit')
        CTRLimit = Decimal(CTRLimit)

        ExceedLimit = []

        StartDate = form.StartDate.data
        EndDate = form.EndDate.data
        OneDay = datetime.timedelta(days=1)

        while StartDate <= EndDate:

            AccEntryObj = MKT_ACC_ENTRY.query.\
                                                with_entities(
                                                    MKT_ACC_ENTRY.Account,
                                                    MKT_ACC_ENTRY.Currency,
                                                    MKT_ACC_ENTRY.TransactionDate,
                                                    func.sum(MKT_ACC_ENTRY.Amount).label('Total')).\
                                                join(MKT_ACCOUNT, MKT_ACC_ENTRY.Account == MKT_ACCOUNT.ID).\
                                                join(MKT_ACC_PRODUCT, MKT_ACCOUNT.AccProduct == MKT_ACC_PRODUCT.ID).\
                                                group_by(MKT_ACC_ENTRY.Account, MKT_ACC_ENTRY.Currency, MKT_ACC_ENTRY.TransactionDate).\
                                                filter(MKT_ACC_ENTRY.TransactionDate == StartDate.strftime('%Y-%m-%d')).\
                                                filter(MKT_ACC_ENTRY.Module.in_(IncludeModule)).\
                                                filter(MKT_ACC_PRODUCT.ProductType == 'E')

            for row in AccEntryObj:

                CurrenyObj = MKT_CURRENCY.query.get(row.Currency)

                if CurrenyObj:

                    if CurrenyObj.OtherRate1:

                        Total = row.Total * Decimal(CurrenyObj.OtherRate1)
                        # print Total, row.Account
                        if Total >= CTRLimit:
                            # print row
                            ExceedLimit.append(row)

            StartDate += OneDay


        # SOME WIZARDARY HERE DO NOT TRY THIS AT HOME
        if 'Download' in request.form.keys():
            Output = generateXML(ExceedLimit, form.Amend.data)

            if Output:

                response = makeXMLResponse(Output)

                return response
        else:

            ResultDict = getDisplayObject(ExceedLimit)

            return render_template('nbc/ctr/cash_transaction_report.html', 
                                   form=form, ErrorMsg=ErrorMsg, ResultDict=ResultDict, getCurrencyObj=getCurrencyObj)

    return render_template('nbc/ctr/cash_transaction_report.html', form=form, ErrorMsg=ErrorMsg)
