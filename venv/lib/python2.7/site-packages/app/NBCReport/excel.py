# _*_ coding: utf-8
#
# A simple Unicode spreadsheet in Python 2 using the XlsxWriter Python module.
#
# Copyright 2013-2015, John McNamara, jmcnamara@cpan.org
#

# To write Unicode text in UTF-8 to a xlsxwriter file in Python 2:
#
# 1. Encode the file as UTF-8.
# 2. Include the "coding" directive at the start of the file.
# 3. Use u'' to indicate a Unicode string.

from app.mktcore.imports 			import *
from flask 							import make_response
from datetime 						import datetime, date, timedelta
from app.GLBalance.models 			import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
import app.tools.mktnbc				as mktnbc
import app.tools.mktdate 			as mktdate
import xlsxwriter
import StringIO

import V1.N001 			as N001
import V1.N002 			as N002
import V1.N003 			as N003
import V1.N004 			as N004
import V1.N005 			as N005
import V1.N006L 		as N006L
import V1.N006D 		as N006D
import V1.N007 			as N007
import V1.N009 			as N009
import V1.N010 			as N010
import V1.N011 			as N011
import V1.N012 			as N012
import V1.N013 			as N013
import V1.N014 			as N014
import V1.N015 			as N015
import V1.N016 			as N016
# import V1.N0162 			as N0162
import V1.N017 			as N017
import V1.N091 			as N091
import V1.N092 			as N092
import V1.N018 			as N018


@app.route('/Morakot/NBC/Excel/<getID>', methods=['GET'])
def getExcelReport(getID):
	try:

		Language 		=	mktnbc.getDefaultLang()
		output 			= 	StringIO.StringIO()
		Branch 			=	request.args.get('Branch') if 'Branch' in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get('Period') if 'Period' in request.args else 6
		ReportedDate 	=	request.args.get('ReportedDate') if 'ReportedDate' in request.args else mktdate.getBankDate()
		
		Month   =   request.args.get("Month") if 'Month' in request.args else ""
		Year    =   request.args.get("Year") if 'Year' in request.args else ""

		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

		if Year:
			GroupMonth 	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Condition = []
		if Year and Month:
			GLTable   = MKT_GL_BALANCE_BACKUP
			Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month]
			CYear 	  = Year
			CMonth 	  = Month
		else:
			GLTable   = MKT_GL_BALANCE
			BankDate  = mktdate.getBankDate()
			CYear 	  = BankDate.year
			CMonth 	  = BankDate.month

		GLObj   =   GLTable.query.filter(*Condition)

		# Create a workbook and add a worksheet.
		# FileName 		= 	'NBC_REPORT_'+ Year +'_'+ Month +'_'+ Day +'.xlsx'
		# Create a workbook and add a worksheet.
		workbook 		= 	xlsxwriter.Workbook(output, {'in_memory': True})

		IDDic 	=	{  
						'N001':	['NBC_REPORT_BalanceSheet.xlsx', 		'BALANCE SHEET' 					,'Form MFI 01'],
						'N002':	['NBC_REPORT_IncomeStatement.xlsx', 	'INCOME AND EXPENDITURE ACCOUNT' 	,'Form MFI 02'],
						'N003':	['NBC_REPORT_Off-BalanchSheet.xlsx', 	'OFF BALANCE SHEET ITEMS'			,'Form MFI 03'],
						'N004':	['NBC_REPORT_DepositByCategory.xlsx',	'BREAK-DOWN OF DEPOSITS'			,'Form MFI 04'],
						'N006D':['NBC_REPORT_DepositByCurrency.xlsx',	'DEPOSIT BY CURRENCY'				,'Form MFI 05'],
						'N005':	['NBC_REPORT_LoanByBusiness.xlsx',	 	'LOAN BY CATAGORIES'				,'Form MFI 06'],
						'N006L':['NBC_REPORT_LoanByCurrency.xlsx',  	'LOAN BY CURRENCY'					,'Form MFI 07'],
						'N007':	['NBC_REPORT_Provision.xlsx',	 		'LOAN CLASSIFICATION'				,'Form MFI 08'],
						'N009':	['NBC_REPORT_MFI09.xlsx',				'LIST OF LOANS TO INSIDERS'			,'Form MFI 09'],
						'N010':	['NBC_REPORT_MFI10.xlsx', 				'LIST OF LARGE EXPOSURES'			,'Form MFI 10'],
						'N015':	['NBC_REPORT_MFI15.xlsx', 				'SOURCE OF FINANCING'				,'Form MFI 11'],
						'N016':	['NBC_REPORT_Sovency_MFI16.xlsx', 		'SOLVENCY RATIO'					,'Form MFI 12'],
						'N011':	['NBC_REPORT_Network.xlsx', 			'NETWORK INFORMATION'				,'Form MFI 13'],
						'N017':	['NBC_REPORT_NoP_MFI17.xlsx', 			'Net Open Position'					,'Form MFI 14'],
						'N012':	['NBC_REPORT_NW_Information.xlsx', 		'Opert Network'						,''],
						'N013':	['NBC_REPORT_Liquidity_MFI11.xlsx', 	'LIQUIDITY RATIO'					,'Form MFI 15'],
						'N018':	['NBC_REPORT_MDI_MFI.xlsx', 			'WEIGHTED INTEREST'					,'Form MFI 16'],
						'N014':	['NBC_REPORT_MFI14.xlsx', 				'CURRENCY EXPOSURE'					,''],
						'N091':	['NBC_REPORT_9.1_CAR_MFI9-1.xlsx', 		'9.1-CAR MFI9-1'					,''],
						'N092':	['NBC_REPORT_9.2_CAR_MFI9-2.xlsx', 		'9.2-CAR MFI9-2'					,''],
					}

		Karges 		=	{ 'GLObj':GLObj, 'GLTable':GLTable, 'Year':Year, 'Month':Month, 'CYear':CYear, 'CMonth':CMonth}
		
		if getID in IDDic:
			FileName 	= 	IDDic[getID][0]
			worksheet 	= 	workbook.add_worksheet(IDDic[getID][1])
			worksheet.write('A1',IDDic[getID][2])
			FileID 		=  	getID 
			eval('%s.getWorksheet%s(workbook, worksheet, Language, Branch, Period, ReportedDate, **Karges)'%(FileID,getID))
		else:
			dat  		= 	datetime.now()
			Year 		= 	'%s'   %(dat.year)
			Month 		= 	'%02d' %(dat.month)
			Day 		= 	'%02d' %(dat.day)
			FileName 	= 	'NBC_REPORT_'+ Year +'_'+ Month +'_'+ Day +'.xlsx'
			SortedList 	=	['N001', 'N002', 'N003', 'N004','N006D', 'N005', 'N006L', 'N007', 'N009', 'N010', 'N015', 'N016', 'N011', 
								'N017',  'N012','N013', 'N018', 'N091', 'N092', 'N014' ]
			for ID in SortedList:
				worksheet 	= 	workbook.add_worksheet(IDDic[ID][1])
				worksheet.write('A1',IDDic[ID][2])
				FileID 		=  	ID 
				eval('%s.getWorksheet%s(workbook, worksheet, Language, Branch, Period, ReportedDate, **Karges)'%(FileID,ID))
			
		workbook.close()
		output.seek(0)

		response = make_response(output.getvalue())
		# This is the key: Set the right header for the response
		# to be downloaded, instead of just printed on the browser
		response.headers['Cache-Control'] = 'no-cache'
		response.headers["Content-Disposition"] = "attachment; filename=%s"%FileName
		response.headers["Content-type"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"

		return response
		return ""

	except:
		raise

