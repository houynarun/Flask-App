'''
Report Name : Off Balance
URL : /Morakot/Report/N003/

'''
from app.mktcore.imports 		import *
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmessage 	as mktmessage
import app.tools.mktnbc			as mktnbc

# Off Balance
@app.route("/Morakot/Report/N003/")
@checkLogOutSession
@checkLogOutTime
def getNBCN003():
	try:

		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N003/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		getAccSetting 	=	mktsetting.getAccSetting()
		ReportingRate 	= 	mktsetting.getAppSetting('NBCExchangeRate')
		ID 				= 	str(request.url_rule).split('/')[3]
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get("Period") if "Period" in request.args else (6 if ID == 'N001' else 0)
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

		Month   =   request.args.get("Month") if 'Month' in request.args else ""
		Year    =   request.args.get("Year") if 'Year' in request.args else ""

		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

		if Year:
			GroupMonth 	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Result 			=	mktnbc.getNBCDetail(ID, int(Period), Branch, ReportedDate, Year=Year, Month=Month)
		Template 		=	Result[1]
		InDollar 		=	request.args.get('InDollar') if 'InDollar' in request.args else 'N'
		Language 		=	mktnbc.getDefaultLang()

		ReportingRate 	=	mktnbc.getDisplayReportingRate(Year, Month, Period)

		if Template == '1':
			html = "nbc/nbc_balancesheet.html"
		elif Template == '2':
			html = "nbc/nbc_income.html"
		else:
			html = "nbc/nbc_offbalance.html"

		return render_template(
								html,
								Result 			=	Result[0],
								float 			=	float,
								abs 			=	abs,
								ReportingRate 	=	ReportingRate,
								mktmoney 		=	mktmoney,
								toMoney 		=	mktmoney.toMoney,
								getCurrencyObj 	=	mktmoney.getCurrencyObj,
								InDollar 		=	InDollar,
								Language 		=	Language,
								getLang 		=	mktmessage.getNBCLang,
								ID 				=	ID,
								Branch 			=	Branch,
								Period 			=	Period,
								GroupYear       = 	GroupYear,
								GroupMonth      = 	GroupMonth,
								Year 			= 	Year,
								Month 			= 	Month,
								ReportedDate 	=	ReportedDate
							)

	except:
		raise

def getWorksheetN003(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLTable='', GLObj='', Year='', Month='', CYear='', CMonth=''):
	try:
		# Add a bold format to use to highlight cells.
		bold = workbook.add_format({'bold': True, 'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)','font_name':'Arial'})
		boldcenter = workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
		right = workbook.add_format({'align': 'right','font_name':'Arial'})
		center = workbook.add_format({'align': 'center','valign': 'vcenter',
									 'border':1, 'bg_color':'#CCCCCC', 'text_wrap':True,'font_name':'Arial'})

		# Add a number format for cells with money.
		money = workbook.add_format({'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'})

		red 			= workbook.add_format({'color': 'red'})
		blue 			= workbook.add_format({'color': 'blue'})

		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'border': 1,
			'align': 'left',
		}

		# get Data N001
		getData = mktnbc.getNBCDetail('N003', Period, Branch, ReportedDate, Year=Year, Month=Month)
		Data 	= getData[0]
		ReportingRate = float(Data['ReportingRate'])

		worksheet.merge_range('A2:E2', Data['ReportHeader']['Title'].upper(), boldcenter)
		worksheet.merge_range('A3:E3', Data['ReportHeader']['ReportName'].upper(), boldcenter)
		
		worksheet.write('A5',u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Data['ReportHeader']['CompanyName'].upper()))
		worksheet.write('A7',u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), Data['ReportHeader']['AsAt'].upper()))

		# worksheet.merge_range('A8:D8', ReportingRate, bold)
		worksheet.write('D8', ReportingRate, bold)

		worksheet.merge_range('A9:A11', u'%s' %' ', center)
		worksheet.merge_range('B9:B11', u'%s' %'Riels', center)
		worksheet.merge_range('C9:C11', u'%s' %'Other Currencies Translated into Riels', center)
		worksheet.merge_range('D9:D11', u'%s' %'Total in Million Riels', center)

		worksheet.set_column('A:A', 37)
		worksheet.set_column('B:B', 10)
		worksheet.set_column('C:C', 22)
		worksheet.set_column('D:D', 11)

		generateDataN003("N003", Data['Data'], workbook, worksheet, 12, Language)

	except Exception, e:
		raise

def generateDataN003(ID, Data, workbook, worksheet, row, Language):
	try:

		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'border': 1,
			'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
		}
		center 	= workbook.add_format({'align': 'center', 'border':1,'font_name':'Arial'})
		bold 	= workbook.add_format({'bold': False, 'border': 1, 'bg_color':'#CCCCCC', 'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)','font_name':'Arial'})

		for item in Data:

			if 'format' in item:
				DicFormat 	= getDicFormat(item)
				DicFormat.update(DicStyle)
				format 		= workbook.add_format(DicFormat)
			else:
				format 		= workbook.add_format(DicStyle)


			if item['LineType'] == 'SP':
				worksheet.write(row, 0, '', format)
				worksheet.write(row, 1, '', format)
				worksheet.write(row, 2, '', format)
				worksheet.write(row, 3, '', format)
			elif item['LineType'] == 'GH':
				worksheet.write(row, 0, item['Description'], bold)
				worksheet.write(row, 1, float(item['AmountInRiels']), bold)
				worksheet.write(row, 2, float(item['OtherAmount']), bold)
				worksheet.write(row, 3, float(item['TotalInRiels']), bold)
			else:
				worksheet.write(row, 0, item['Description'], format)
				worksheet.write(row, 1, float(item['AmountInRiels']), format)
				worksheet.write(row, 2, float(item['OtherAmount']), format)
				worksheet.write(row, 3, float(item['TotalInRiels']), format)

			row += 1
		BorderBottom = workbook.add_format({'bottom':True})
		worksheet.write(row+5, 0, u'Name:', BorderBottom)
		worksheet.write(row+6, 0, u'Position:', BorderBottom)
		worksheet.write(row+5, 2, u'Date:', BorderBottom)

	except Exception, e:
		raise