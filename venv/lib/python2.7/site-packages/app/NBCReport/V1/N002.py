'''
Report Name : Income Statement
URL : /Morakot/Report/N002/

'''
from app.mktcore.imports 		import *
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmessage 	as mktmessage
import app.tools.mktnbc			as mktnbc
# Income Statement
@app.route("/Morakot/Report/N002/")
@checkLogOutSession
@checkLogOutTime
def getNBCN002():
	try:

		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N002/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)
			
		getAccSetting 	=	mktsetting.getAccSetting()
		ReportingRate 	= 	mktsetting.getAppSetting('NBCExchangeRate')
		ID 				= 	str(request.url_rule).split('/')[3]
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get("Period") if "Period" in request.args else 2
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

		Month   =   request.args.get("Month") if 'Month' in request.args else ""
		Year    =   request.args.get("Year") if 'Year' in request.args else ""

		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

		if Year:
			GroupMonth 	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Result 			=	mktnbc.getNBCDetail(ID, int(Period), Branch, ReportedDate, Year=Year, Month=Month)
		Template 		=	Result[1]
		InDollar 		=	request.args.get('InDollar') if 'InDollar' in request.args else 'N'
		Language 		=	mktnbc.getDefaultLang()

		ReportingRate 	=	mktnbc.getDisplayReportingRate(Year, Month, Period)         

		if Template == '1':
			html = "nbc/nbc_balancesheet.html"
		elif Template == '2':
			html = "nbc/nbc_income.html"
		else:
			html = "nbc/nbc_offbalance.html"

		return render_template(
								html,
								Result 			=	Result[0],
								float 			=	float,
								abs 			=	abs,
								ReportingRate 	=	ReportingRate,
								mktmoney 		=	mktmoney,
								toMoney 		=	mktmoney.toMoney,
								getCurrencyObj 	=	mktmoney.getCurrencyObj,
								InDollar 		=	InDollar,
								Language 		=	Language,
								getLang 		=	mktmessage.getNBCLang,
								ID 				=	ID,
								Branch 			=	Branch,
								Period 			=	Period,
								GroupYear       = 	GroupYear,
								GroupMonth      = 	GroupMonth,
								Year 			= 	Year,
								Month 			= 	Month,
								ReportedDate 	=	ReportedDate
							)

	except:
		raise

def getWorksheetN002(workbook, worksheet, Language, Branch="ALL", Period=1, ReportedDate="", GLTable='', GLObj='', Year='', Month='', CYear='', CMonth=''):
	try:
		# Add a bold format to use to highlight cells.
		bold = workbook.add_format({'bold': True, 'num_format':'#,##0.00','font_name':'Arial'})
		boldcenter = workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
		right = workbook.add_format({'align': 'right','font_name':'Arial'})
		center = workbook.add_format({'align': 'center', 'valign': 'vcenter', 'border':1,'font_name':'Arial'})

		# Add a number format for cells with money.
		money = workbook.add_format({'num_format': '$#,##0','font_name':'Arial'})

		red 			= workbook.add_format({'color': 'red'})
		blue 			= workbook.add_format({'color': 'blue'})

		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'border': 1,
			'align': 'left',
		}

		if int(Period) == 6:
			Period = 1

		BankDate 		=	mktdate.getBankDate()
		BankMonth 		=	str(BankDate).split('-')[1]
		ReportedMonth 	=	str(ReportedDate).split('-')[1]

		getData = mktnbc.getNBCDetail("N002", Period, Branch, ReportedDate, Year=Year, Month=Month)

		getData = getData[0]
		Data 	= getData['Data']
		ReportingRate = float(getData['ReportingRate'])

		worksheet.merge_range('A2:E2', getData['ReportHeader']['Title'].upper(), boldcenter)
		worksheet.merge_range('A4:E4', getData['ReportHeader']['ReportName'].upper(), boldcenter)
		
		worksheet.write('A6',u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), getData['ReportHeader']['CompanyName'].upper()))
		worksheet.write('A8',u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), getData['ReportHeader']['AsAt'].upper()))
		worksheet.write('E8', ReportingRate, bold)

		worksheet.merge_range('A9:E9', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)

		worksheet.merge_range('A10:A13', "", center)
		worksheet.merge_range('B10:D10', u"%s" %mktmessage.getNBCLang(Language, '110011'), center)
		worksheet.merge_range('B11:B13', u"%s" %mktmessage.getNBCLang(Language, '110012'), center)
		worksheet.merge_range('C11:C13', u"%s" %mktmessage.getNBCLang(Language, '110007'), center)
		worksheet.merge_range('D11:D13', u"%s" %mktmessage.getNBCLang(Language, '110008'), center)
		worksheet.merge_range('E10:E13',u"%s" %mktmessage.getNBCLang(Language, '110013'), center)

		worksheet.set_column('A:A', 41)
		worksheet.set_column('B:B', 14)
		worksheet.set_column('C:C', 14)
		worksheet.set_column('D:D', 14)
		worksheet.set_column('E:E', 20)

		generateDataN002("N002", Data, workbook, worksheet, 13, Language)

	except Exception, e:
		raise

def generateDataN002(ID, Data, workbook, worksheet, row, Language):
	try:

		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'border': 1,
			'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
		}
		center = workbook.add_format({'align': 'center', 'valign': 'vcenter', 'border':1,'font_name':'Arial'})
		bold = workbook.add_format({'bg_color': '#CCCCCC', 'border': 1, 'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)','font_name':'Arial'})

		for item in Data:

			if 'format' in item:
				DicFormat 	= getDicFormat(item)
				DicFormat.update(DicStyle)
				format1 		= workbook.add_format(DicFormat)
			else:
				format 		= workbook.add_format(DicStyle)

			if item['Description'][0:2] == '10':
				row += 2
				worksheet.merge_range('A%s:A%s'%(row,row+3), "", center)
				worksheet.merge_range('B%s:D%s'%(row,row), u"%s" %mktmessage.getNBCLang(Language, '110011'), center)
				worksheet.merge_range('B%s:B%s'%(row+1,row+3), u"%s" %mktmessage.getNBCLang(Language, '110012'), center)
				worksheet.merge_range('C%s:C%s'%(row+1,row+3), u"%s" %mktmessage.getNBCLang(Language, '110007'), center)
				worksheet.merge_range('D%s:D%s'%(row+1,row+3), u"%s" %mktmessage.getNBCLang(Language, '110008'), center)
				worksheet.merge_range('E%s:E%s'%(row,row+3), u"%s" %mktmessage.getNBCLang(Language, '110013'), center)
				row += 4

			if item['LineType'] == 'SP':
				worksheet.write(row, 0, '', format)
				worksheet.write(row, 1, '', format)
				worksheet.write(row, 2, '', format)
				worksheet.write(row, 3, '', format)
				worksheet.write(row, 4, '', format)
			elif item['LineType'] == 'GH' or item['LineType'] == 'ST':
				worksheet.write(row, 0, item['Description'], bold)
				worksheet.write(row, 1, float(item['AmountInRiels']), bold)
				worksheet.write(row, 2, float(item['OtherAmount']), bold)
				worksheet.write(row, 3, float(item['TotalInRiels']), bold)
				worksheet.write(row, 4, float(item['YTDBalance']), bold)
			else:
				worksheet.write(row, 0, item['Description'], format)
				worksheet.write(row, 1, float(item['AmountInRiels']), format)
				worksheet.write(row, 2, float(item['OtherAmount']), format)
				worksheet.write(row, 3, float(item['TotalInRiels']), format)
				worksheet.write(row, 4, float(item['YTDBalance']), format)

			row += 1
		BorderBottom = workbook.add_format({'bottom':True})
		worksheet.write(row+5, 0, u'Name:', BorderBottom)
		worksheet.write(row+6, 0, u'Position:', BorderBottom)
		worksheet.write(row+5, 3, u'Date:', BorderBottom)

	except Exception, e:
		raise
