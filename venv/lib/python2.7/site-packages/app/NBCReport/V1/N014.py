# -*- coding: utf-8 -*-
'''
Report Name: CALCULATION OF FOREIGN CURRENCY EXPOSURE
'''
from app.mktcore.imports 		import *
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
import app.tools.mktdate 			as mktdate
import app.tools.mktsetting 		as mktsetting
import app.tools.mktmoney 			as mktmoney
import app.tools.mktnbc			as mktnbc
import app.tools.mktgl 				as mktgl
import app.tools.mktmessage 		as mktmessage
import N016 						as N016

@app.route("/Morakot/Report/N014/")
@checkLogOutSession
@checkLogOutTime
def getNBCReportN014():
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N014/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		getAccSetting 	=	mktsetting.getAccSetting()
		Currency 		=	'USD'
		BaseCurrency 	=	getAccSetting.BaseCurrency
		ID 				= 	'N014'
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get("Period") if "Period" in request.args else 6
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

		Month   =   request.args.get("Month") if 'Month' in request.args else ""
		Year    =   request.args.get("Year") if 'Year' in request.args else ""

		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

		if Year:
			GroupMonth 	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Condition = []
		if Year and Month:
			GLTable   = MKT_GL_BALANCE_BACKUP
			Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month]
			CYear 	  = Year
			CMonth 	  = Month
		else:
			GLTable   = MKT_GL_BALANCE
			BankDate  = mktdate.getBankDate()
			CYear 	  = BankDate.year
			CMonth 	  = BankDate.month

		GLObj   =   GLTable.query.filter(*Condition)

		Result 			=	getNBCN014('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
		ReportingRate   =   mktnbc.getDisplayReportingRate('', '', Period)

		html = "nbc/nbc_mfi14.html"

		return render_template(
								html,
								Result 			=	Result,
								float 			=	float,
								ReportingRate 	=	ReportingRate,
								Currency 		=	Currency,
								BaseCurrency 	=	BaseCurrency,
								mktmoney 		=	mktmoney,
								toMoney 		=	mktmoney.toMoney,
								getCurrencyObj 	=	mktmoney.getCurrencyObj,
								Branch 			=	Branch,
								ID 				=	ID,
								len 			=	len,
								Period 			=	Period,
								GroupYear       = 	GroupYear,
								GroupMonth      = 	GroupMonth,
								Year 			= 	Year,
								Month 			= 	Month,
								ReportedDate 	=	ReportedDate
							)

	except:
		raise

def getNBCN014(ID, Branch='HO', Period=6, ReportedDate="", GLTable='', GLObj='', Year='', Month=''):
	try:

		Language 		=	mktnbc.getDefaultLang()
		ReportHeader 	= 	{}
		CompanyName 	= 	mktnbc.getCompanyName()
		ReportHeader 	=	{
								'ReportName': u'CALCULATION OF FOREIGN CURRENCY EXPOSURE',
								'CompanyName': CompanyName,
								'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
								'Form': 'N009',
								'Title': u'NATIONAL BANK OF CAMBODIA'
							}
		Data 			=	[]
		# check to recalculate year and month to get currency
		if Period in [1, 2, 4, 5]:
			if Month == 1:
				Month   =   12
				Year    -=  1
			else:
				Month   -=  1
				
		DataList 		=	mktnbc.getNBCLineDetail(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj, Year=Year, Month=Month)
		SubTotal 		=	0
		ReportingRate 	=	mktsetting.getAppSetting('NBCExchangeRate')
		CurrencyDic     =   mktnbc.getNBCExchangeRate(Year, Month)
		
		# Total Asset
		SubTotalKHR		= 	0
		SubTotalTHB		= 	0
		
		TotalAssetUSD 	=	mktnbc.getLineValue("AmountUSD32", DataList)
		TotalAssetKHR 	=	mktnbc.getLineValue("AmountKHR32", DataList)
		TotalAssetTHB 	=	mktnbc.getLineValue("AmountTHB32", DataList)

		SubTotal 		+= 	float(TotalAssetUSD)
		SubTotalKHR		+= 	float(TotalAssetKHR)
		SubTotalTHB		+= 	float(TotalAssetTHB)
		TotalAsset 		=	mktmoney.formatNumber(float(TotalAssetUSD), 1, 2)

		Data.append({
						1:u'1. Assets in Foreign Currency',
						2:mktmoney.formatNumber(float(TotalAssetKHR), 1, 2),
						3:mktmoney.formatNumber(float(TotalAssetUSD), 1, 2),
						4:mktmoney.formatNumber(float(TotalAssetTHB), 1, 2),
						5:u'0.00'
					})

		Data.append({ 1:u'', 2:u'', 3:u'', 4:u'', 5:u'' })

		# Total Liability
		TotalLiaUSD 	=	mktnbc.getLineValue("AmountUSD61", DataList)
		TotalLiaKHR 	=	mktnbc.getLineValue("AmountKHR61", DataList)
		TotalLiaTHB 	=	mktnbc.getLineValue("AmountTHB61", DataList)
		
		TotalLia 		= 	mktmoney.formatNumber(float(TotalLiaUSD), 1, 2)

		Data.append({
						1:u'2. Minus: Liabilities in that Currency',
						2:mktmoney.formatNumber(float(TotalLiaKHR), 1, 2),
						3:mktmoney.formatNumber(float(TotalLiaUSD), 1, 2),
						4:mktmoney.formatNumber(float(TotalLiaTHB), 1, 2),
						5:u'0.00'
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						4:u'',
						5:u''
					})
		TotalAsset 	=	TotalAsset.replace(',', '')
		TotalLia 	=	TotalLia.replace(',', '')
		NetProfit 	=	float(TotalAsset) - float(TotalLia)

		NetOperating=	NetProfit
		NetProfit 	=	mktnbc.getLineValue("AmtOth_73", DataList)
		NetProfitUSD 	=	mktnbc.getLineValue("AmountUSD73", DataList)
		NetProfitKHR 	=	mktnbc.getLineValue("AmountKHR73", DataList)
		NetProfitTHB 	=	mktnbc.getLineValue("AmountTHB73", DataList)
		
		NetProfit 	= 	mktmoney.formatNumber(float(NetProfit), 1, 2)

		Data.append({
						1:u'3. Net Position (Long or Short)',
						2:mktmoney.formatNumber(float(NetProfitKHR), 1, 2),
						3:mktmoney.formatNumber(float(NetProfitUSD), 1, 2),
						4:mktmoney.formatNumber(float(NetProfitTHB), 1, 2),
						5:u'0.00'
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						4:u'',
						5:u''
					})

		TotalLiquidAsset= 	SubTotal
		SubTotal 		= 	mktmoney.formatNumber(float(SubTotal), 1, 2)

		Data.append({
						1:u'4. Minus: Provision for FX losses',
						2:u'0.00',
						3:u'0.00',
						4:u'0.00',
						5:u'0.00'
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						4:u'',
						5:u''
					})

		AdjNetPosition 	=	0

		Data.append({
						1:u'5. Adjusted Net Position (Long or Short)',
						2:u'0.00',
						3:u'0.00',
						4:u'0.00',
						5:u'0.00'
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						4:u'',
						5:u''
					})

		# PaidUpCapital 	=	getLineValue("AmtUSD_65", DataList)
		# NetWorth 		=	float(PaidUpCapital) - float(NetOperating)
		# NetWorth 		*=	float(ReportingRate)
		# NetWorth 		=	getDivAmount(NetWorth)
		NetWorth 		= 	N016.getNBCN016(ID, Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=Year, Month=Month)['TotalNetWorth']

		Data.append({
						1:u'6. Net Worth',
						2:u'0.00',
						3:u'%s' %(mktmoney.formatNumber(float(NetWorth), 2, 2)),
						4:u'0.00',
						5:u'0.00'
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						4:u'',
						5:u''
					})

		FCE_Ratio 	=	0 if AdjNetPosition == 0 else float(AdjNetPosition) / float(NetWorth)

		Data.append({
						1:u'7. Foreign Currency Exposure Ratio: 5/6',
						2:u'0.00 %',
						3:u'%s %%' %(mktmoney.formatNumber(float(FCE_Ratio), 2, 2)),
						4:u'0.00 %',
						5:u'0.00 %'
					})

		TotalLiquidAsset = 	mktmoney.formatNumber(float(TotalLiquidAsset), 1, 2)

		VoluntarySaving =	0
		DevidedResult 	=	0 if VoluntarySaving == 0 else float(TotalLiquidAsset) / float(VoluntarySaving)

		VoluntarySaving = 	mktmoney.formatNumber(float(VoluntarySaving), 1, 2)
		DevidedResult = 	mktmoney.formatNumber(float(DevidedResult), 1, 2)

		Result 	=	{
			'ReportHeader'	: ReportHeader,
			'ColumnHeader'	: 'ColumnHeader',
			'Data'			: Data,
			'Type'			: 'Type',
			'TotalLiquidAsset': '%s' %(TotalLiquidAsset),
			'VoluntarySaving': '%s' %(VoluntarySaving),
			'DevidedResult'	: '%s' %(DevidedResult)
		}

		return Result

	except Exception, e:
		raise

def getWorksheetN014(workbook, worksheet, Language, Branch="ALL",Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
	try:
		# Add a bold format to use to highlight cells.
		bold 		= workbook.add_format({'font_name':'Arial','bold': True})
		boldcenter 	= workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
		right 		= workbook.add_format({'align': 'right','font_name':'Arial'})
		
		styleHeader 	= workbook.add_format({
			'font_name':'Arial',
			'align': 'center',
			'valign': 'vcenter',
			'border': 1,
			'bold':True,
			'bg_color':'#FFFFFF'
		})
		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'align': 'left',
		}
		if Year and Month:
			CYear = Year
			CMonth = Month

		getData = getNBCN014('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
		Header 	= getData['ReportHeader']
		# Write some data headers.
		
		worksheet.merge_range('A2:E2', Header['Title'].upper(), boldcenter)
		worksheet.merge_range('A4:E4', u'ការគិតរូបិយប័ណ្ណចំហរ', boldcenter)
		worksheet.merge_range('A5:E5', Header['ReportName'].upper(), boldcenter)
		
		worksheet.write('A7', u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Header['CompanyName'].upper()))
		worksheet.write('A9', u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), Header['AsAt'].upper()))

		worksheet.write('D10', u"%s" %(mktmessage.getNBCLang(Language, '110009')))
		# worksheet.merge_range('A10:E10', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)
		worksheet.write('A12', u'', styleHeader)
		worksheet.write('B12', u'RIELS', styleHeader)
		worksheet.write('C12', u'USD', styleHeader)
		worksheet.write('D12', u'BATHS', styleHeader)
		worksheet.write('E12', u'OTHER', styleHeader)
		# Some data we want to write to the worksheet.

		worksheet.set_column('A:A', 35)
		worksheet.set_column('B:B', 15)
		worksheet.set_column('C:C', 15)
		worksheet.set_column('D:D', 15)
		worksheet.set_column('E:E', 15)

		Data = getData['Data']

		# Start from the first cell below the headers.
		row = 12
		
		# Iterate over the data and write it out row by row.
		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'align': 'left',
			'border':1,
			'text_wrap': 1,
			'bg_color': '#CCCCCC'
		}

		# worksheet.set_column('A:A', 20)

		format = workbook.add_format(DicStyle)
		for item in Data:
			col = 0
			
			if item[1] == '':
				DicStyle = {
						'font_name':'Arial',
						'valign': 'vcenter',
						'align': 'left',
						'border':1,
						'text_wrap': 1,
						'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'
					}
			else:
				DicStyle = {
						'font_name':'Arial',
						'valign': 'vcenter',
						'align': 'left',
						'border':1,
						'text_wrap': 1,
						'bg_color': '#CCCCCC',
						'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'
					}

			format = workbook.add_format(DicStyle)
			item[2] = 0 if not item[2] else item[2]
			item[3] = 0 if not item[3] else item[3]
			item[4] = 0 if not item[4] else item[4]
			item[5] = 0 if not item[5] else item[5]

			worksheet.write(row, col, item[1], format)
			if '7. Foreign Currency' not in item[1]:
				worksheet.write(row, col + 1, float(str(item[2]).replace(',','')), format)
				worksheet.write(row, col + 2, float(str(item[3]).replace(',','')), format)
				worksheet.write(row, col + 3, float(str(item[4]).replace(',','')), format)
				worksheet.write(row, col + 4, float(str(item[5]).replace(',','')), format)
			else:
				worksheet.write(row, col + 1, item[2], format)
				worksheet.write(row, col + 2, item[3], format)
				worksheet.write(row, col + 3, item[4], format)
				worksheet.write(row, col + 4, item[5], format)

			row += 1

		BorderBottom = workbook.add_format({'bottom':True})
		worksheet.write(row+5, 0, u'Name:', BorderBottom)
		worksheet.write(row+6, 0, u'Position:', BorderBottom)
		worksheet.write(row+5, 3, u'Date:', BorderBottom)

	except Exception, e:
		raise
