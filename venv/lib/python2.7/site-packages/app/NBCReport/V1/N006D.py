# -*- coding: utf-8 -*-
'''
Report Name: Deposit Breakdown By Currency
'''

from app.mktcore.imports        import *
import app.tools.mktdate        as mktdate
import app.tools.mktsetting     as mktsetting
import app.tools.mktmoney       as mktmoney
import app.tools.mktaccounting  as mktaccounting
import app.tools.mktnbc         as mktnbc
import app.tools.mktmessage     as mktmessage
from app.LoanContract.models    import *
from app.Currency.models        import MKT_CURRENCY
from app.LoanProduct.models     import MKT_LOAN_PRODUCT
from app.InterestRate.models    import MKT_INTEREST_RATE
from app.Account.models         import MKT_ACCOUNT
from app.AccProduct.models      import *
from decimal import *


@app.route('/Morakot/Report/N006D', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNBCReportN006D(getID=""):
    try:
        ErrorMsg    = []
        getCheck    = checkAccess("/Morakot/Report/N006D/","Search")
        if getCheck != True: 
            ErrorMsg.append(msg_error+msg_permission)
            return render_template("permission.html",ErrorMsg=ErrorMsg)

        Branch          =   request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
        Period          =   request.args.get("Period") if "Period" in request.args else 6
        ReportedDate    =   request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

        ReportingRate   =   mktnbc.getDisplayReportingRate('', '', Period)

        Result          =   getN006D(Branch, ReportedDate)
        html            =   "nbc/nbc_depositbreakdownbycurrency.html"
        ColumnHeader    =   {}
        ReportHeader    =   Result['ReportHeader']
        ColumnHeader    =   Result['ColumnHeader']
        Data            =   Result['Data']
        Language        =   mktnbc.getDefaultLang()

        return render_template(html,
                                str             =   str,
                                mktmoney        =   mktmoney,
                                float           =   float,
                                ReportingRate   =   ReportingRate,
                                ReportHeader    =   ReportHeader,
                                ColumnHeader    =   ColumnHeader,
                                Data            =   Data,
                                Language        =   Language,
                                getLang         =   mktmessage.getNBCLang,
                                ID              =   "N006D",
                                Branch          =   Branch,
                                Period          =   Period,
                                ReportedDate    =   ReportedDate
                                )

    except:
        raise



def getN006D(Branch="ALL", ReportedDate=""):
    try:

        CompanyName =   mktnbc.getCompanyName()
        Language    =   mktnbc.getDefaultLang()

        Result          =   {}
        ReportHeader    =   {
                                'ReportName': mktmessage.getNBCLang(Language, '110077'),
                                'CompanyName': CompanyName,
                                'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
                                'Form': 'N006',
                                'Title': mktmessage.getNBCLang(Language, '110001')
                            }
        ColumnHeader    =   {   
                                'background': '#81F7F3',
                            }
        Data            =   getDepositBreakDownByCurrency(Branch, ReportedDate)
        Result.update({'ReportHeader':ReportHeader,'ColumnHeader':ColumnHeader,'Data':Data})
        
        return Result

    except:
        raise

def getDepositBreakDownByCurrency(Branch="ALL", ReportedDate=''):
    try:

        if Branch != "ALL":
            Branch = Branch.split()

        Language        =   mktnbc.getDefaultLang()
        getAccSetting   =   mktsetting.getAccSetting()
        RowRecord       =   []
        CurrencyList    =   ['KHR', 'USD', 'THB']
        KhCurrencyList  =   {
                                "KH":{'KHR':u'បា្រក់រៀល', 'USD':u'បា្រក់ដុល្លារអាមេរិក', 'THB':u'បា្រក់បាត'},
                                "EN":{'KHR':u'KHMER RIELS', 'USD':u'US DOLLARS', 'THB':u'THAI BAHTS'}
                            }

        RecordObj       =   db.session.query(
                                MKT_CURRENCY.ID,
                                MKT_ACCOUNT.InterestRate,
                                MKT_CURRENCY.Description,
                                func.count(MKT_CURRENCY.ID).label('NumOfRecord'),
                                func.sum(MKT_ACCOUNT.Balance).label('Balance')
                            ).\
                            outerjoin(
                                MKT_ACCOUNT,
                                MKT_ACCOUNT.Currency == MKT_CURRENCY.ID
                            ).\
                            outerjoin(
                                MKT_ACC_PRODUCT,
                                MKT_ACC_PRODUCT.ID == MKT_ACCOUNT.AccProduct
                            ).\
                            filter(MKT_CURRENCY.ID.in_(CurrencyList)).\
                            filter(MKT_ACC_PRODUCT.ProductType == 'E').\
                            filter(MKT_ACCOUNT.InterestRate > str(0))

        if Branch != "ALL":
            RecordObj   =   RecordObj.\
                            filter(MKT_ACCOUNT.Branch.in_(Branch))

        
        RecordObj       =   RecordObj.\
                            group_by(MKT_CURRENCY.ID, MKT_ACCOUNT.InterestRate, MKT_CURRENCY.Description).\
                            order_by(MKT_CURRENCY.ID.asc())


        NumOfRecord         =   {'NumOfRecord':'0', 'Currency':''}
        AmountInRiels       =   {'OutstandingAmount':'0', 'Currency':''}
        TotalNumOfRecord    =   []
        TAmountKHR          =   []
        Data                =   {}

        BankDate    =   mktdate.getBankDate()
        Year        =   BankDate.year
        Month       =   BankDate.month

        CurrencyDic = mktnbc.getNBCExchangeRate(Year, Month)
        if not CurrencyDic:
            flash(msg_error+"NBC Exchange Rate isn't defined")
            return []

        if RecordObj:

            for item in RecordObj:
                Tmp      =  Data.get(item.ID,{})
                Interest =  Tmp.get('Interest',[])
                if item.InterestRate != '0' and not (item.InterestRate in Interest) :
                    Interest.append(item.InterestRate)

                Tmp.update({ 'NumOfRecord': Tmp.get('NumOfRecord',0) + item.NumOfRecord, 
                             'Amount': Tmp.get('Amount', 0) + float(item.Balance),
                             'Interest': Interest })
                Data.update({item.ID: Tmp})

            i = 1
            FCYAmountList   =   []
            TAmountKHR      =   0
            TNumOfRecord    =   0
            
            for item in CurrencyList:
                Record      =   Data.get(item,{})
                Rate        =   getRate(Record.get('Interest',[])) 
                NumOfRecord =   Record.get('NumOfRecord',0)
                Amount      =   Record.get('Amount',0)
                AmountKHR   =   Decimal(Amount) * Decimal(CurrencyDic.get(item, 1)) / 1000000
                TAmountKHR  +=  AmountKHR
                TNumOfRecord+=  NumOfRecord
                RowRecord.append({
                                1:'%s- %s' %(mktnbc.getOrderNumberKh(mktmessage.getNBCLang(Language, '110000'), str(i)), KhCurrencyList[mktmessage.getNBCLang(Language, '110000')][item]),
                                2:NumOfRecord,
                                3:mktmoney.formatNumber(float(Amount), 1, 2),
                                4:mktmoney.formatNumber(float(AmountKHR), 1, 2),
                                5:u"%s" %Rate,
                                6:''
                            })
                i += 1

            RowRecord.append({
                                1:u'%s-%s' %(mktnbc.getOrderNumberKh(mktmessage.getNBCLang(Language, '110000'), '4'), "OTHER CURRENCY"),
                                2:'0',
                                3:'0',
                                4:'0.00',
                                5:'0.00',
                                6:''
                            })

            RowRecord.append({
                                1:u'%s' %"5- TOTAL DEPOSIT",
                                2:''+ str(int(TNumOfRecord)),
                                3:'0',
                                4:mktmoney.formatNumber(TAmountKHR),
                                5:'',
                                6:'',
                                'format':'background: #99CCFF; font-weight: bold;',
                                'total':'yes'
                            })

        return RowRecord

    except:
        raise

def getRate(RateList):
    try:
        Rate = ''
        if len(RateList) > 0:
            RateList.sort()
            Rate1   =   RateList[0]
            Rate2   =   RateList[-1]
            Rate    =   str(Rate1)+'%' if Rate1 == Rate2 else str(Rate1)+'% - ' + str(Rate2)+'%'
            Rate    =   '%s / Year'%Rate
        return  Rate

    except Exception, e:
        raise e

def getWorksheetN006D(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
        
    try:

        bold = workbook.add_format({'bold': True})
        boldcenter = workbook.add_format({'bold': True, 'align': 'center'})

        Header = getN006D(Branch, ReportedDate)

        worksheet.merge_range('A2:E2', Header['ReportHeader']['Title'].upper(), boldcenter)
        worksheet.merge_range('A3:E3', Header['ReportHeader']['ReportName'].upper(), boldcenter)
        
        worksheet.write('A5', u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Header['ReportHeader']['CompanyName'].upper()))
        worksheet.write('A7', u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), Header['ReportHeader']['AsAt'].upper()))

        right = workbook.add_format({'align': 'right'})
        row_header_1 = workbook.add_format({
                'font_name':'Arial',
                'align': 'center',
                'valign': 'vcenter',
                'border': 1,
                'text_wrap': True,
                'bg_color':'#CCCCCC'
            })
        # Write some data headers.
        worksheet.merge_range('A10:E10', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)

        worksheet.merge_range('A9:A11', u'%s' %mktmessage.getNBCLang(Language, '110038'), row_header_1)
        worksheet.merge_range('B9:B11', u"%s" %mktmessage.getNBCLang(Language, '110019'), row_header_1)
        worksheet.merge_range('C9:C11', 'BALANCE OUTSTANDING', row_header_1)

        worksheet.merge_range('D9:D11', 'BALANCE OUTSTANDING (CONVERT INTO RIELS)', row_header_1)
        worksheet.merge_range('E9:E11', 'INTEREST RATE PAID (INDICATE WHETHER PER MONTH, PER YEAR OR OTHERWISE)', row_header_1)
        worksheet.merge_range('F9:F11', 'REMARKS', row_header_1)
        
        worksheet.set_column('A:A', 18)
        worksheet.set_column('B:B', 15)
        worksheet.set_column('C:C', 15)
        worksheet.set_column('D:D', 45)
        worksheet.set_column('E:E', 10)

        # Start from the first cell below the headers.
        row = 11
        Data = getDepositBreakDownByCurrency(Branch)
        # Iterate over the data and write it out row by row.
        for item in Data:
            col = 0

            if 'total' in item:

                cell_format     =   workbook.add_format({
                    'font_name':'Arial',
                    'align': 'left',
                    'valign': 'vcenter',
                    'border': 1,
                    'bold':True,
                    'bg_color':'#CCCCCC'
                })

                m_format = workbook.add_format({
                        'font_name':'Arial',
                        'valign': 'vcenter',
                        'border': 1,
                        'bg_color':'#CCCCCC',
                        'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
                    })

            else:

                cell_format     =   workbook.add_format({
                    'font_name':'Arial',
                    'valign': 'vcenter',
                    'border': 1
                })

                m_format = workbook.add_format({
                        'font_name':'Arial',
                        'valign': 'vcenter',
                        'border': 1,
                        'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
                    })

            worksheet.write(row, 0, item[1], cell_format)
            worksheet.write(row, 1, float(str(item[2]).replace(',','')), m_format)
            
            worksheet.write(row, 2, float(str(item[3]).replace(',','')), m_format)
            worksheet.write(row, 3, item[4], cell_format)
            worksheet.write(row, 4, item[5], cell_format)
            worksheet.write(row, 5, item[6], cell_format)

            row += 1

        BorderBottom = workbook.add_format({'bottom':True})
        worksheet.write(row+5, 0, u'Name:', BorderBottom)
        worksheet.write(row+6, 0, u'Position:', BorderBottom)
        worksheet.write(row+5, 4, u'Date:', BorderBottom)

    except:
        raise

