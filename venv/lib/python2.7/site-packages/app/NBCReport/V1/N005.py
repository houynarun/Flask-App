# -*- coding: utf-8 -*-
'''
Report Name: Loan Breakdown By Category
'''

from app.mktcore.imports        import *
import app.tools.mktdate        as mktdate
import app.tools.mktsetting     as mktsetting
import app.tools.mktmoney       as mktmoney
import app.tools.mktnbc         as mktnbc
import app.tools.mktmessage     as mktmessage
from app.LoanContract.models        import *
from app.Customer.models        import MKT_CUSTOMER
from app.Sector.models          import MKT_SECTOR
import N006L                    as N006L
from decimal                    import *

@app.route('/Morakot/Report/N005', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNBCReportN005(getID=""):
    try:
        ErrorMsg    = []
        getCheck    = checkAccess("/Morakot/Report/N005/","Search")
        if getCheck != True: 
            ErrorMsg.append(msg_error+msg_permission)
            return render_template("permission.html",ErrorMsg=ErrorMsg)

        Branch          =   request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
        Period          =   request.args.get("Period") if "Period" in request.args else 6
        ReportedDate    =   request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()
        
        ReportingRate   =   mktnbc.getDisplayReportingRate('', '', Period)
        
        Result          =   getN005(Branch, ReportedDate)
        html            =   "nbc/nbc_loanbreakdownbycategory.html"
        ColumnHeader    =   {}
        ReportHeader    =   Result['ReportHeader']
        ColumnHeader    =   Result['ColumnHeader']
        Data            =   Result['Data']
        Language        =   mktnbc.getDefaultLang()

        return render_template(html,
                                str             =   str,
                                mktmoney        =   mktmoney,
                                float           =   float,
                                ReportingRate   =   ReportingRate,
                                ReportHeader    =   ReportHeader,
                                ColumnHeader    =   ColumnHeader,
                                Data            =   Data,
                                Language        =   Language,
                                getLang         =   mktmessage.getNBCLang,
                                ID              =   "N005",
                                Branch          =   Branch,
                                Period          =   Period,
                                ReportedDate    =   ReportedDate
                                )

    except:
        raise

def getN005(Branch="ALL", ReportedDate=""):
    try:

        CompanyName =   mktnbc.getCompanyName()
        Language    =   mktnbc.getDefaultLang()

        Result          =   {}
        ReportHeader    =   {
                                'ReportName': mktmessage.getNBCLang(Language, '110075'),
                                'CompanyName': CompanyName,
                                'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
                                'Form': '05',
                                'Title': mktmessage.getNBCLang(Language, '110001'),
                                'ReportingRate': mktnbc.getDisplayReportingRate('', '', 6)
                            }
        ColumnHeader    =   {   
                                'background': '#81F7F3',
                            }
        Data            =   getNBCLoanBySector005(Branch, ReportedDate)
        Result.update({'ReportHeader':ReportHeader,'ColumnHeader':ColumnHeader,'Data':Data})
        
        return Result

    except:
        raise

def getNBCLoanBySector005(Branch="ALL", ReportedDate=''):
    try:    

        Language            =   mktnbc.getDefaultLang()
        GroupLoanID         =   mktsetting.getAppSetting('GroupLoan').split()
        IndivLoanID         =   mktsetting.getAppSetting('IndividualLoan').split()
        SmallLoanID         =   mktsetting.getAppSetting('SmallBusiness').split()
        # print DisplayRate

        ListSectorInKh      =   {
                                    "KH":{
                                        "1":u"កសិកម្ម",
                                        "2":u"ពាណិជ្ជកម្ម",
                                        "3":u"សេវាកម្ម",
                                        "4":u"គមនាគម និងដឹកជញ្ជួន",
                                        "5":u"ការសាងសង់",
                                        "6":u"គ្រួសារ",
                                        "7":u"ផ្សេងៗ"
                                        },
                                    "EN":{
                                        "1":"Agriculture",
                                        "2":"Trade and Commerce",
                                        "3":"Service",
                                        "4":"Transportation",
                                        "5":"Construction",
                                        "6":"Household/Family",
                                        "7":"Other Categories"
                                        }
                                }

        RowRecord           =   [] # Return value
        ByGroupAccDic       =   [] # Number of account in loan group of each sector
        ByGroupLCDic        =   [] # Amount by loan group of each sector
        
        TotalAccGroup       =   []
        TotalAccIndiv       =   []
        TotalAccSmall       =   []
        TotalAmtGroup       =   []
        TotalAmtIndiv       =   []
        TotalAmtSmall       =   []
        DisplayRate         =   ''
        LoanRateObj         =   db.session.query(
                                    func.min(MKT_LOAN_CONTRACT.InterestRate).label('MinRate'),
                                    func.max(MKT_LOAN_CONTRACT.InterestRate).label('MaxRate')
                                ).filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).first()
        DisplayRate         =   mktnbc.getDisplayRate(LoanRateObj.MinRate, LoanRateObj.MaxRate) 

        SectorObj           =   MKT_SECTOR.query.\
                                order_by(MKT_SECTOR.ID.asc()).\
                                all()

        LoanObj             =   db.session.query(
                                    MKT_LOAN_CONTRACT.ID,
                                    MKT_LOAN_CONTRACT.LoanProduct,
                                    MKT_LOAN_CONTRACT.OutstandingAmount,
                                    MKT_LOAN_CONTRACT.Account,
                                    MKT_LOAN_CONTRACT.Currency,
                                    MKT_CUSTOMER.Sector
                                ).\
                                join(
                                    MKT_CUSTOMER,
                                    MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID
                                ).\
                                filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
                                filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y')

        if Branch != "ALL":

            Branch      =   Branch.split()
            LoanObj     =   LoanObj.\
                            filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))

        BankDate    =   mktdate.getBankDate()
        Year        =   BankDate.year
        Month       =   BankDate.month
        CurrencyDic = mktnbc.getNBCExchangeRate(Year, Month)

        if not CurrencyDic:
            flash(msg_error+"NBC Exchange Rate isn't defined")
            return []

            
        if LoanObj:
            # Counter =  0
            for item in LoanObj:
                # Counter +=  1
                # print Counter,"Sector: %s - Product %s - Amount: %s." %(item.Sector, item.LoanProduct, item.OutstandingAmount)
                # ByGroupAccDic.append({str(item.Sector) + "-" + str(item.LoanProduct):item.Account})
                ByGroupAccDic.append({str(item.Sector) + "-" + str(item.LoanProduct):item.ID})
                ByGroupLCDic.append({str(item.Sector) + "-" + str(item.LoanProduct):Decimal(item.OutstandingAmount)* CurrencyDic.get(item.Currency)})
                # if item.LoanProduct == '101' or item.LoanProduct == '103':
                #     ByGroupLCDic.append({str(item.Sector) + "-101":float(item.OutstandingAmount)* CurrencyDic.get(item.Currency,1)})
                # else:

        if SectorObj:
            for item in SectorObj:

                NumOfAccGroup   =   getAccBySector(ByGroupAccDic, item.ID, GroupLoanID) if GroupLoanID else "0"
                NumOfAccIndiv   =   getAccBySector(ByGroupAccDic, item.ID, IndivLoanID) if IndivLoanID else "0"
                NumOfAccSmall   =   getAccBySector(ByGroupAccDic, item.ID, SmallLoanID) if SmallLoanID else "0"
                TotalNumOfAcc   =   int(NumOfAccGroup) + int(NumOfAccIndiv) + int(NumOfAccSmall)

                AmtOfGroup      =   getAmtLCBySector(ByGroupLCDic, item.ID, GroupLoanID) if GroupLoanID else "0"
                AmtOfGroup      =   mktnbc.getDivAmount(float(AmtOfGroup))
                AmtOfIndiv      =   getAmtLCBySector(ByGroupLCDic, item.ID, IndivLoanID) if IndivLoanID else "0"
                AmtOfIndiv      =   mktnbc.getDivAmount(float(AmtOfIndiv))
                AmtOfSmall      =   getAmtLCBySector(ByGroupLCDic, item.ID, SmallLoanID) if SmallLoanID else "0"
                AmtOfSmall      =   mktnbc.getDivAmount(float(AmtOfSmall))

                # print "Sector %s - Amount %s." %(item.ID, )

                TotalAmount     =   float(AmtOfGroup) + float(AmtOfIndiv) + float(AmtOfSmall)

                TotalAccGroup.append(NumOfAccGroup)
                TotalAccIndiv.append(NumOfAccIndiv)
                TotalAccSmall.append(NumOfAccSmall)

                TotalAmtGroup.append(AmtOfGroup)
                TotalAmtIndiv.append(AmtOfIndiv)
                TotalAmtSmall.append(AmtOfSmall)

                AmtOfGroup      =   mktmoney.formatNumber(float(AmtOfGroup), 1, 2)
                AmtOfIndiv      =   mktmoney.formatNumber(float(AmtOfIndiv), 1, 2)
                AmtOfSmall      =   mktmoney.formatNumber(float(AmtOfSmall), 1, 2)
                TotalAmount     =   mktmoney.formatNumber(float(TotalAmount), 1, 2)
                # if item.ID != '4':
                # ListSectorInKh[mktmessage.getNBCLang(Language, '110000')][str(item.ID)]
                RowRecord.append({
                                1:u'%s' %item.Description,
                                2:NumOfAccGroup,
                                3:AmtOfGroup,
                                4:NumOfAccIndiv,
                                5:AmtOfIndiv,
                                6:NumOfAccSmall,
                                7:AmtOfSmall,
                                8:TotalNumOfAcc,
                                9:TotalAmount
                            })

        SubTotalAccGroup    =   mktnbc.getTotalByList(TotalAccGroup)
        SubTotalAccIndiv    =   mktnbc.getTotalByList(TotalAccIndiv)
        SubTotalAccSmall    =   mktnbc.getTotalByList(TotalAccSmall)
        SubTotalAcc         =   int(SubTotalAccGroup) + int(SubTotalAccIndiv) + int(SubTotalAccSmall)

        SubTotalAmtGroup    =   mktnbc.getTotalByList(TotalAmtGroup)
        SubTotalAmtIndiv    =   mktnbc.getTotalByList(TotalAmtIndiv)
        SubTotalAmtSmall    =   mktnbc.getTotalByList(TotalAmtSmall)
        SubTotalAmt         =   float(SubTotalAmtGroup) + float(SubTotalAmtIndiv) + float(SubTotalAmtSmall)
        
        SubTotalAmtGroup    =   mktmoney.formatNumber(float(SubTotalAmtGroup), 1, 2)
        SubTotalAmtIndiv    =   mktmoney.formatNumber(float(SubTotalAmtIndiv), 1, 2)
        SubTotalAmtSmall    =   mktmoney.formatNumber(float(SubTotalAmtSmall), 1, 2)
        SubTotalAmt         =   mktmoney.formatNumber(float(SubTotalAmt), 1, 2)
        # 1:u'%s' %mktmessage.getNBCLang(Language, '700005'),
        RowRecord.append({
                                1:u'%s' %mktmessage.getNBCLang(Language, '700005'),
                                2:int(SubTotalAccGroup),
                                3:SubTotalAmtGroup,
                                4:int(SubTotalAccIndiv),
                                5:SubTotalAmtIndiv,
                                6:int(SubTotalAccSmall),
                                7:SubTotalAmtSmall,
                                8:int(SubTotalAcc),
                                9:SubTotalAmt,
                                'format':'background: #99CCFF; font-weight: bold;',
                                'total':'yes'
                            })

        RowRecord.append({
                                1:u'%s' %"INTEREST RATE CHARGED (MONTHLY)",
                                2:'',
                                3:'',
                                4:'',
                                5:'%s' %DisplayRate,
                                6:'',
                                7:'',
                                8:'',
                                9:'%s' %DisplayRate
                            })

        return RowRecord

    except:
        raise

def getAmtLCBySector(L, ID, Group):
    try:

        AmountDic   =   []

        L = filter(None, L)

        if len(L) > 0:

            for item in L:

                if len(item) > 0:

                    for key, row in item.iteritems():

                        itemList = key.split('-')

                        if int(ID) == int(itemList[0]) and itemList[1] in Group:

                            AmountDic.append(item[key])

        Amount = mktnbc.getTotalByList(AmountDic)
        return Amount

    except:
        raise

def getAccBySector(L, ID, Group):
    try:

        NumOfAcc    =   {}

        L = filter(None, L)

        if len(L) > 0:

            for item in L:

                if len(item) > 0:

                    for key, row in item.iteritems():

                        itemList = key.split('-')

                        if ID in itemList[0] and itemList[1] in Group:

                            NumOfAcc.update({item[key]:'1'})

        return len(NumOfAcc)

    except:
        raise

def getWorksheetN005(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
    try:

        bold = workbook.add_format({'bold': True, 'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'})
        boldcenter = workbook.add_format({'bold': True, 'align': 'center'})

        Header = getN005(Branch, ReportedDate)

        worksheet.merge_range('A2:I2', Header['ReportHeader']['Title'].upper(), boldcenter)
        worksheet.merge_range('A3:I3', Header['ReportHeader']['ReportName'].upper(), boldcenter)
        
        worksheet.write('A5',u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Header['ReportHeader']['CompanyName'].upper()))
        worksheet.write('A7',u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), Header['ReportHeader']['AsAt'].upper()))
        worksheet.write('I7', float(Header['ReportHeader']['ReportingRate']), bold)

        right = workbook.add_format({'align': 'right'})
        row_header_1    =   workbook.add_format({
                'font_name':'Arial',
                'align': 'center',
                'valign': 'vcenter',
                'border': 1,
                'text_wrap': True,
                'bg_color':'#CCCCCC'
            })
        # Write some data headers.
        worksheet.merge_range('A8:I8', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)
        worksheet.merge_range('A9:A10', u'%s' %"TYPE OF BUSINESS", row_header_1)
        worksheet.merge_range('B9:C10', u"%s" %"GROUP LOANS", row_header_1)
        worksheet.merge_range('D9:E10', u'%s' %"INDIVIDUAL LOANS", row_header_1)
        worksheet.merge_range('F9:G10', u'%s' %"SMALL BUSINESS", row_header_1)
        worksheet.merge_range('H9:I10', u'%s' %"TOTAL LOANS", row_header_1)

        worksheet.merge_range('A11:A13', '', row_header_1)

        worksheet.merge_range('B11:B13', u'%s' %mktmessage.getNBCLang(Language, '110019'), row_header_1)
        worksheet.merge_range('C11:C13', u'%s' %mktmessage.getNBCLang(Language, '110020'), row_header_1)

        worksheet.merge_range('D11:D13', u'%s' %mktmessage.getNBCLang(Language, '110019'), row_header_1)
        worksheet.merge_range('E11:E13', u'%s' %mktmessage.getNBCLang(Language, '110020'), row_header_1)

        worksheet.merge_range('F11:F13', u'%s' %mktmessage.getNBCLang(Language, '110019'), row_header_1)
        worksheet.merge_range('G11:G13', u'%s' %mktmessage.getNBCLang(Language, '110020'), row_header_1)

        worksheet.merge_range('H11:H13', u'%s' %mktmessage.getNBCLang(Language, '110019'), row_header_1)
        worksheet.merge_range('I11:I13', u'%s' %mktmessage.getNBCLang(Language, '110020'), row_header_1)

        worksheet.set_column('A:A', 25)
        worksheet.set_column('B:B', 12)
        worksheet.set_column('C:C', 13)
        worksheet.set_column('D:D', 13)
        worksheet.set_column('E:E', 13)
        worksheet.set_column('F:F', 13)
        worksheet.set_column('G:G', 13)
        worksheet.set_column('H:H', 13)
        worksheet.set_column('I:I', 13)

        worksheet.set_row(8, 20)
        worksheet.set_row(9, 25)

        # Start from the first cell below the headers.
        row = 13

        cell_format     =   workbook.add_format({
                'font_name':'Arial',
                'align': 'center',
                'valign': 'right',
                'border': 1,
                'bold':True,
                'bg_color':'#99CCFF'
            })

        # Iterate over the data and write it out row by row.
        Data = getNBCLoanBySector005(Branch)
        for item in Data:
            col = 0

            for key, value in item.iteritems():

                if col == 0 and value == '':
                    continue
                if 'total' in item:
                    cell_format = workbook.add_format({
                        'font_name':'Arial',
                        'valign': 'vcenter',
                        'border': 1,
                        'bg_color':'#CCCCCC'
                    })

                else:

                    cell_format = workbook.add_format({
                        'font_name':'Arial',
                        'valign': 'vcenter',
                        'border': 1
                    })

                if key != 'format' and key != 'total':

                    if col in [2,4,6,8]:
                        if 'Month' not in value:
                            cell_format.set_num_format('_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)')
                            if not isinstance(value, unicode):
                                value = 0 if value == '' or value == 0 else float(str(value).replace(',',''))
                    
                    elif col in [1,3,5,7]:

                        cell_format.set_num_format('_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)')
                        if not isinstance(value, unicode):
                            value = 0 if value == '' or value == 0 else float(str(value).replace(',',''))
                    
                    worksheet.write(row, col, value, cell_format)
                    col += 1

            row += 1

        BorderBottom = workbook.add_format({'bottom':True})
        worksheet.write(row+5, 0, u'Name:', BorderBottom)
        worksheet.write(row+6, 0, u'Position:', BorderBottom)
        worksheet.write(row+5, 7, u'Date:', BorderBottom)
    except:
        raise

