# -*- coding: utf-8 -*-
'''
Report Name: CAPITAL ADEQUACY RATIO FOR MICROFINANCE INSTITUTIONS
'''

from app.mktcore.imports 		import *
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
import app.tools.mktdate 		as mktdate
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmoney 		as mktmoney
import app.tools.mktnbc			as mktnbc
import app.tools.mktgl 			as mktgl
import app.tools.mktmessage 	as mktmessage
import N016 					as N016
from decimal 					import *

@app.route("/Morakot/Report/N092/")
@checkLogOutSession
@checkLogOutTime
def getNBCN092():
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N092/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		getAccSetting 	=	mktsetting.getAccSetting()
		Currency 		=	'USD'
		BaseCurrency 	=	getAccSetting.BaseCurrency
		ID 				= 	'N092'
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get("Period") if "Period" in request.args else 6
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

		Month   =   request.args.get("Month") if 'Month' in request.args else ""
		Year    =   request.args.get("Year") if 'Year' in request.args else ""

		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

		if Year:
			GroupMonth 	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Condition = []
		if Year and Month:
			GLTable   = MKT_GL_BALANCE_BACKUP
			Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month]
			CYear 	  = Year
			CMonth 	  = Month
		else:
			GLTable   = MKT_GL_BALANCE
			BankDate  = mktdate.getBankDate()
			CYear 	  = BankDate.year
			CMonth 	  = BankDate.month

		GLObj   =   GLTable.query.filter(*Condition)

		Result 			=	getNBCN092('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
		ReportingRate   =   mktnbc.getDisplayReportingRate(CYear, CMonth, Period)

		html = "nbc/nbc_car_mfi92.html"

		return render_template(
								html,
								Result 			=	Result,
								float 			=	float,
								ReportingRate 	=	ReportingRate,
								Currency 		=	Currency,
								BaseCurrency 	=	BaseCurrency,
								mktmoney 		=	mktmoney,
								toMoney 		=	mktmoney.toMoney,
								getCurrencyObj 	=	mktmoney.getCurrencyObj,
								Branch 			=	Branch,
								ID 				=	ID,
								len 			=	len,
								Period 			=	Period,
								GroupYear       = 	GroupYear,
								GroupMonth      = 	GroupMonth,
								Year 			= 	Year,
								Month 			= 	Month,
								ReportedDate 	=	ReportedDate
							)

	except:
		raise

def getNBCN092(ID, Branch='HO', Period=6, ReportedDate="", GLTable='', GLObj='', Year='', Month=''):
	try:

		Language 		=	mktnbc.getDefaultLang()
		ReportHeader 	= 	{}
		CompanyName 	= 	mktnbc.getCompanyName()
		ReportHeader 	=	{
								'ReportName': u'CAPITAL ADEQUACY RATIO FOR MICROFINANCE INSTITUTIONS',
								'CompanyName': CompanyName,
								'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
								'Form': 'N091',
								'Title': u'NATIONAL BANK OF CAMBODIA'
							}
		Data 			=	[]
		CYear = Year
		CMonth= Month
		if Period in [1, 2, 4, 5]:
			if Month == 1:
				CMonth   =   12
				CYear    -=  1
			else:
				CMonth   -=  1
		DataList 		=	mktnbc.getNBCLineDetail(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj, Year=CYear, Month=CMonth)
		SubTotal 		=	0
		ReportingRate 	=	mktsetting.getAppSetting('NBCExchangeRate')
		TotalWeightedAmt=	0
		TotalC1 		=	0
		TotalC2 		=	0
		NetOpenPosition =	0

		TotalNetWorth 	=	N016.getNBCN016(ID, Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=Year, Month=Month)['TotalNetWorth']

		CashInHand 		=	mktnbc.getLineValue("TotalKHR_2", DataList)
		SubTotal 		+= 	Decimal(CashInHand)
		RiskWeighting	=	0
		WeightedAmt 	=	(CashInHand * RiskWeighting) / 100
		TotalWeightedAmt 	+= 	WeightedAmt

		Data.append({
						1:u'CASH',
						2:u'%s' %(mktmoney.formatNumber(float(CashInHand), 1, 2)),
						3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 2), "%"),
						4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
						'Type':''
					})

		GoldInHand 		=	0
		SubTotal 		+= 	Decimal(GoldInHand)
		RiskWeighting	=	0
		WeightedAmt 	=	(GoldInHand * RiskWeighting) / 100
		TotalWeightedAmt 	+= 	WeightedAmt

		Data.append({
						1:u'GOLD',
						2:u'%s' %(mktmoney.formatNumber(float(GoldInHand), 1, 2)),
						3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 2), "%"),
						4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
						'Type':''
					})

		NBCAccount 		=	mktnbc.getLineValue("TotalKHR_3", DataList)
		SubTotal 		+= 	Decimal(NBCAccount)
		RiskWeighting	=	0
		WeightedAmt 	=	(NBCAccount * RiskWeighting) / 100
		TotalWeightedAmt 	+= 	WeightedAmt

		Data.append({
						1:u'DEPOSITS WITH NBC',
						2:u'%s' %(mktmoney.formatNumber(float(NBCAccount), 1, 2)),
						3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 2), "%"),
						4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
						'Type':''
					})

		DepositBank 	=	0
		SubTotal 		+= 	Decimal(DepositBank)
		RiskWeighting	=	20
		WeightedAmt 	=	(DepositBank * RiskWeighting) / 100
		TotalWeightedAmt 	+= 	WeightedAmt

		Data.append({
						1:u'DEPOSITS WITH BANKS RATED AAA TO AA-',
						2:u'%s' %(mktmoney.formatNumber(float(DepositBank), 1, 2)),
						3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 2), "%"),
						4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
						'Type':''
					})

		Guaranteed 		=	0
		SubTotal 		+= 	Decimal(Guaranteed)
		RiskWeighting	=	50
		WeightedAmt 	=	(Guaranteed * RiskWeighting) / 100
		TotalWeightedAmt 	+= 	WeightedAmt

		Data.append({
						1:u'DEPOSITS WITH BANKS RATED A+ TO A-',
						2:u'%s' %(mktmoney.formatNumber(float(Guaranteed), 1, 2)),
						3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 2), "%"),
						4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
						'Type':''
					})

		Loans 			=	mktnbc.getLineValue("TotalKHR_8", DataList)
		SubTotal 		+= 	Decimal(Loans)
		RiskWeighting	=	100
		WeightedAmt 	=	(Loans * RiskWeighting) / 100
		TotalWeightedAmt 	+= 	WeightedAmt

		Data.append({
						1:u'LOANS',
						2:u'%s' %(mktmoney.formatNumber(float(Loans), 1, 2)),
						3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 2), "%"),
						4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
						'Type':''
					})
		
		Data.append({
						1:u'',
						2:u'',
						3:u'',
						4:u'',
						'Type':''
					})

		OtherAsset 		=	0
		RiskWeighting	=	100
		WeightedAmt 	=	(OtherAsset * RiskWeighting) / 100
		TotalWeightedAmt 	+= 	WeightedAmt
		SubTotal 		+=	Decimal(OtherAsset)

		Data.append({
						1:u'OTHERS ASSETS',
						2:u'%s' %(mktmoney.formatNumber(float(OtherAsset), 1, 2)),
						3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 2), "%"),
						4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						4:u'',
						'Type':''
					})

		Data.append({
						1:u'TOTAL',
						2:u'%s' %(mktmoney.formatNumber(float(SubTotal), 1, 2)),
						3:u'',
						4:u'%s' %(mktmoney.formatNumber(float(TotalWeightedAmt), 1, 2)),
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						4:u'',
						'Type':''
					})

		Data.append({
						1:u'3- CAPITAL ADEQUACY RATIO',
						2:u'',
						3:u'',
						4:u'',
						'Type':''
					})
		if TotalWeightedAmt == 0:
			TotalWeightedAmt = 1
		TotalRiskWeightedRate = 0 if Decimal(TotalNetWorth) <= 0 else (Decimal(TotalNetWorth) / Decimal(TotalWeightedAmt)) * 100

		Result 	=	{
			'ReportHeader'	: ReportHeader,
			'ColumnHeader'	: 'ColumnHeader',
			'Data'			: Data,
			'Type'			: 'Type',
			'ReportingRate'	: '%s' %(mktmoney.formatNumber(float(ReportingRate), 1, 2)),
			'TotalNetWorth'	: '%s' %(mktmoney.formatNumber(float(TotalNetWorth), 1, 2)),
			'TotalRiskWeightedAmt' : '%s' %(mktmoney.formatNumber(float(TotalWeightedAmt), 1, 2)),
			'TotalRiskWeightedRate': '%s %s' %(mktmoney.formatNumber(float(TotalRiskWeightedRate), 1, 2), '%'),
		}

		return Result

	except Exception, e:
		raise

def getWorksheetN092(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
	try:
		# Add a bold format to use to highlight cells.
		bold 		= workbook.add_format({'font_name':'Arial','bold': True})
		boldcenter 	= workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
		right 		= workbook.add_format({'font_name':'Arial','bold': True, 'align': 'right','font_name':'Arial'})
		
		styleHeader 	= workbook.add_format({
			'font_name':'Arial',
			'align': 'center',
			'valign': 'vcenter',
			'border': 1,
			'bold':True,
			'bg_color':'#CCCCCC'
		})

		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'align': 'left',
		}
		if Year and Month:
			CYear = Year
			CMonth = Month
		getData = getNBCN092('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
		# Header 	= getData['ReportHeader']
		# NBCExchangeRate 	=	getData['ReportingRate']
		# # Write some data headers.
		# worksheet.merge_range('A2:D2', Header['Title'], boldcenter)
		# worksheet.merge_range('A3:D3', Header['ReportName'], boldcenter)
		# worksheet.merge_range('A5:C5', u"%s: %s" %(mktmessage.getNBCLang(Language, '110002'), Header['CompanyName']), bold)
		# worksheet.write('D5', u"%s %s" %("(Exchange Rate 1US$) = ", getData['ReportingRate']), right)
		# worksheet.merge_range('A6:D6', u"%s: %s" %(mktmessage.getNBCLang(Language, '110003'), Header['AsAt']), bold)

		worksheet.merge_range('A1:D1', u'2-DENOMINATOR: RISK-WEIGHTED ASSET', bold)
		worksheet.write('A2', u'ASSETS:', styleHeader)
		worksheet.write('B2', u'AMOUNT IN MILLIONS OF RIELS', styleHeader)
		worksheet.write('C2', u'RISK WEIGHTING', styleHeader)
		worksheet.write('D2', u'RISK WEIGHTED AMOUNT', styleHeader)
		# Some data we want to write to the worksheet.

		worksheet.set_column('A:A', 35)
		worksheet.set_column('B:B', 30)
		worksheet.set_column('C:C', 25)
		worksheet.set_column('D:D', 30)

		Data = getData['Data']

		# Start from the first cell below the headers.
		row = 2
		
		# Iterate over the data and write it out row by row.
		DicStyle = {
			'valign': 'vcenter',
			'border':1,
			'text_wrap': 1,
			'font_name':'Arial',
		}
		
		# worksheet.set_column('A:A', 20)

		for item in Data:
			col = 0

			if 'TOTAL' in item[1] or '3- CAPITAL ADEQUACY RATIO' in item[1]:
				DicStyle = {
					'valign': 'vcenter',
					'border':1,
					'text_wrap': 1,
					'bg_color':'#FBF385',
					'font_name':'Arial',
					'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'
				}
			else:
				DicStyle = {
					'valign': 'vcenter',
					'border':1,
					'text_wrap': 1,
					'font_name':'Arial',
					'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'
				}

			format 		= workbook.add_format(DicStyle)

			for i in item:

				if i != 'Type':

					if col == 1 or col == 3:

						value = item[i]
						if not value:
							value = '0'

						worksheet.write(row, col, float(value.replace(',','')), format)

					else:
						worksheet.write(row, col, item[i], format)
					
					col += 1

			row += 1

		DicStyle = {
			'valign': 'vcenter',
			'align': 'center',
			'text_wrap': 1,
			'font_name':'Arial',
		}
		format 		= workbook.add_format(DicStyle)

		BorderBottom = workbook.add_format({'bottom':True, 'align': 'center','font_name':'Arial'})

		worksheet.write('A16', u'ELIGIBLE CAPITAL', BorderBottom)
		worksheet.write('A17', u'RISK-WEIGHTED ASSETS', format)
		worksheet.merge_range('B16:B17', u"'=", format)
		worksheet.write('C16', u'%s' %getData['TotalNetWorth'], BorderBottom)
		worksheet.write('C17', u'%s' %getData['TotalRiskWeightedAmt'], format)
		worksheet.merge_range('D16:D17', u'%s' %getData['TotalRiskWeightedRate'], format)

		BorderBottom = workbook.add_format({'bottom':True})
		worksheet.write('A21', 'Signature: ', BorderBottom)
		worksheet.write('A22', 'Date: ', BorderBottom)

	except Exception, e:
		raise
