# -*- coding: utf-8 -*-
'''
Report Name: តារាងព័តមានបណ្តាញប្រតិបិត្តការ
'''
from app.mktcore.imports 		import *
from app.Branch.models 			import *
from app.LoanContract.models 	import *
from app.Customer.models 		import *
import app.tools.mktnbc			as mktnbc
import app.tools.mktmessage 		as mktmessage

@app.route("/Morakot/Report/N012/")
@checkLogOutSession
@checkLogOutTime
def getNBCN012():
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N012/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		getAccSetting 	=	mktsetting.getAccSetting()
		Currency 		=	'USD'
		BaseCurrency 	=	getAccSetting.BaseCurrency
		ReportingRate   =   mktnbc.getDisplayReportingRate('', '', 6)
		ID 				= 	'N012'
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get("Period") if "Period" in request.args else "M"
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

		Result 			=	getNBCN012(Branch, ReportedDate)

		html = "nbc/nbc_n012_nwinfo.html"

		return render_template(
								html,
								Result 			=	Result,
								float 			=	float,
								ReportingRate 	=	ReportingRate,
								Currency 		=	Currency,
								BaseCurrency 	=	BaseCurrency,
								mktmoney 		=	mktmoney,
								toMoney 		=	mktmoney.toMoney,
								getCurrencyObj 	=	mktmoney.getCurrencyObj,
								Branch 			=	Branch,
								ID 				=	ID,
								Period 			=	Period,
								ReportedDate 	=	ReportedDate
							)

	except:
		raise

def getNBCN012(Branch, ReportedDate):
	try:

		Language 		=	mktnbc.getDefaultLang()
		ReportHeader 	= 	{}
		CompanyName 	= 	mktnbc.getCompanyName()
		ReportHeader 	=	{
								'ReportName': u'តារាងព័តមានបណ្តាញប្រតិបិត្តការ',
								'CompanyName': CompanyName,
								'BankDate': ReportedDate,
								'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
								'Form': 'N012',
								'Title': u'ធនាគាជាតិនៃកម្ពុជាតិ'
							}
		Data 		=	[]
		BranchObj 	=	MKT_BRANCH.query.\
						order_by(MKT_BRANCH.ID.asc()).\
						all()
		BankDate    =   mktdate.getBankDate()
		Year        =   BankDate.year
		Month       =   BankDate.month
		CurrencyDic =	mktnbc.getNBCExchangeRate(Year, Month)

		if BranchObj:
			for item in BranchObj:
				NumberOfCustomer 	=	getNumberOfCustomerByBranch(item.ID)
				LoanOutstanding 	=	getLoanOutstandingByBranch(item.ID, CurrencyDic)
				Data.append({
								1:u'%s' %item.Description,
								2:u'',
								3:u'',
								4:u'%s' %mktdate.toDateShort(item.RegisteredDate, mktmessage.getNBCLang(Language, '110000')),
								5:u'',
								6:u'%s' %mktmoney.formatNumber(float(NumberOfCustomer), 1, 0),
								7:u'%s' %LoanOutstanding,
								8:u'%s' %item.Address
							})

		Result 	=	{
			'ReportHeader'	: ReportHeader,
			'ColumnHeader'	: 'ColumnHeader',
			'Data'			: Data,
			'Type'			: 'Type'
		}

		return Result

	except Exception, e:
		raise

def getNumberOfCustomerByBranch(Branch):
	try:
		
		CustomerObj = 	MKT_CUSTOMER.query.\
						join(
							MKT_LOAN_CONTRACT,
							MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
						filter(MKT_CUSTOMER.Branch == Branch).\
						group_by(MKT_CUSTOMER.ID).\
						count()

		return CustomerObj

	except Exception, e:
		raise

def getLoanOutstandingByBranch(Branch,CurrencyDic):
	try:
		LoanOutstanding 	=	0
		LoanObj = 	db.session.query(
						MKT_LOAN_CONTRACT.Branch,
						MKT_LOAN_CONTRACT.Currency,
						func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('LoanOutstanding')
					).\
					filter(MKT_LOAN_CONTRACT.Branch == Branch).\
					group_by(
						MKT_LOAN_CONTRACT.Branch,
						MKT_LOAN_CONTRACT.Currency
					).all()

		if LoanObj:
			for l in LoanObj:
				LoanOutstanding += l.LoanOutstanding * CurrencyDic.get(l.Currency,1)
			
			LoanOutstanding = mktmoney.formatNumber(float(LoanOutstanding/1000000))

		return LoanOutstanding

	except Exception, e:
		raise


def getWorksheetN012(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
	try:
		# Add a bold format to use to highlight cells.
		bold = workbook.add_format({'font_name':'Arial','bold': True})
		boldcenter = workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
		right = workbook.add_format({'align': 'right','font_name':'Arial'})
		
		styleHeader 	= workbook.add_format({
			'font_name':'Arial',
			'align': 'center',
			'valign': 'vcenter',
			'border': 1,
			'bold':True,
			'bg_color':'#CCCCCC'
		})
		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'align': 'left',
		}

		getData = getNBCN012(Branch, ReportedDate)
		Header 	= getData['ReportHeader']
		# Write some data headers.
		# worksheet.merge_range('A2:H2', Header['Title'], boldcenter)
		# worksheet.merge_range('A3:H3', Header['ReportName'], boldcenter)
		worksheet.merge_range('A1:H1', Header['ReportName'], boldcenter)
		worksheet.merge_range('A2:H2', mktdate.toDateShort(Header['BankDate'], 'KH', Format=3), boldcenter)

		worksheet.write('A4', u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Header['CompanyName'].upper()))
		# worksheet.write('A5', u"%s:" %mktmessage.getNBCLang(Language, '110003'), bold)
		# worksheet.write('B5', u"%s" %)

		# worksheet.merge_range('A10:H10', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)
		worksheet.write('A6', u'ឈោ្មះសាខា', styleHeader)
		worksheet.write('B6', u'ឈោ្មះអនុសាខា', styleHeader)
		worksheet.write('C6', u"ឈោ្មះបុស្តិសេវា", styleHeader)
		worksheet.write('D6', u"ថែ្ង ខែ​ ឆ្នាំបងើ្កត", styleHeader)

		worksheet.write('E6', u'អាជ្ញាបណ្ណ MDI', styleHeader)
		worksheet.write('F6', u'ចំនួនអតិថិជន', styleHeader)
		worksheet.write('G6', u"សមតុល្យ (គិតជាលាន រៀល)", styleHeader)
		worksheet.write('H6', u"អាសយដ្ឋាន", styleHeader)
		# Some data we want to write to the worksheet.

		worksheet.set_column('A:A', 28)
		worksheet.set_column('B:B', 12)
		worksheet.set_column('C:C', 12)
		worksheet.set_column('D:D', 20)
		worksheet.set_column('E:E', 12)
		worksheet.set_column('F:F', 19)
		worksheet.set_column('G:G', 13)
		worksheet.set_column('H:H', 45)

		worksheet.set_row(0, 25)
		worksheet.set_row(1, 25)
		worksheet.set_row(5, 25)
		worksheet.set_row(6, 50)

		Data = getData['Data']

		# Start from the first cell below the headers.
		row = 6
		
		# Iterate over the data and write it out row by row.
		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'align': 'left',
			'border':1,
			'text_wrap': 1
		}

		worksheet.set_column('A:A', 20)

		for item in Data:
			col = 0
			format 		= workbook.add_format(DicStyle)
			for i in item:
				worksheet.write(row, col, item[i], format)
				col += 1

			row += 1

		BorderBottom = workbook.add_format({'bottom':True})
		worksheet.write(row+5, 0, u'Name:', BorderBottom)
		worksheet.write(row+6, 0, u'Position:', BorderBottom)
		worksheet.write(row+5, 5, u'Date:', BorderBottom)

	except Exception, e:
		raise
