# -*- coding: utf-8 -*-
'''
Report Name: CAPITAL ADEQUACY RATIO FOR MICROFINANCE INSTITUTIONS
'''

from app.mktcore.imports 		import *
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
import app.tools.mktdate 		as mktdate
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmoney 		as mktmoney
import app.tools.mktnbc			as mktnbc
import app.tools.mktgl 			as mktgl
import app.tools.mktmessage 	as mktmessage
import N016 					as N016


@app.route("/Morakot/Report/N091/")
@checkLogOutSession
@checkLogOutTime
def getNBCReportN091():
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N091/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		getAccSetting 	=	mktsetting.getAccSetting()
		Currency 		=	'USD'
		BaseCurrency 	=	getAccSetting.BaseCurrency
		ID 				= 	'N091'
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get("Period") if "Period" in request.args else 6
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

		Month   =   request.args.get("Month") if 'Month' in request.args else ""
		Year    =   request.args.get("Year") if 'Year' in request.args else ""

		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

		if Year:
			GroupMonth 	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Condition = []
		if Year and Month:
			GLTable   = MKT_GL_BALANCE_BACKUP
			Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month]
			CYear 	  = Year
			CMonth 	  = Month
		else:
			GLTable   = MKT_GL_BALANCE
			BankDate  = mktdate.getBankDate()
			CYear 	  = BankDate.year
			CMonth 	  = BankDate.month

		GLObj   =   GLTable.query.filter(*Condition)

		Result 			=	getNBCN091('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
		ReportingRate   =   mktnbc.getDisplayReportingRate(CYear, CMonth, Period)

		html = "nbc/nbc_car_mfi91.html"

		return render_template(
								html,
								Result 			=	Result,
								float 			=	float,
								ReportingRate 	=	ReportingRate,
								Currency 		=	Currency,
								BaseCurrency 	=	BaseCurrency,
								mktmoney 		=	mktmoney,
								toMoney 		=	mktmoney.toMoney,
								getCurrencyObj 	=	mktmoney.getCurrencyObj,
								Branch 			=	Branch,
								ID 				=	ID,
								len 			=	len,
								Period 			=	Period,
								GroupYear       = 	GroupYear,
								GroupMonth      = 	GroupMonth,
								Year 			= 	Year,
								Month 			= 	Month,
								ReportedDate 	=	ReportedDate
							)

	except:
		raise

def getNBCN091(ID, Branch='HO', Period=6, ReportedDate="", GLTable='', GLObj='', Year='', Month=''):
	try:

		Language 		=	mktnbc.getDefaultLang()
		ReportHeader 	= 	{}
		CompanyName 	= 	mktnbc.getCompanyName()
		ReportHeader 	=	{
								'ReportName': u'CAPITAL ADEQUACY RATIO FOR MICROFINANCE INSTITUTIONS',
								'CompanyName': CompanyName,
								'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
								'Form': 'N091',
								'Title': u'NATIONAL BANK OF CAMBODIA'
							}
		Data 			=	[]
		CYear = Year
		CMonth= Month
		if Period in [1, 2, 4, 5]:
			if Month == 1:
				CMonth   =   12
				CYear    -=  1
			else:
				CMonth   -=  1

		DataList 		=	mktnbc.getNBCLineDetail(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj, Year=CYear, Month=CMonth)
		SubTotal 		=	0
		ReportingRate 	=	mktnbc.getDisplayReportingRate(CYear, CMonth, Period)
		TotalWeightedAmt=	0
		TotalC1 		=	0
		TotalC2 		=	0
		NetOpenPosition =	0

		TotalNetWorth 	=	N016.getNBCN016(ID, Branch, Period, ReportedDate, GLTable=GLTable, GLObj=GLObj, Year=Year, Month=Month)['TotalNetWorth']

		Data.append({
						1:u'1- NUMBERATOR: ELIGIBLE CAPITAL (in millions of Riels)',
						2:u'',
						3:u'',
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						'Type':''
					})

		Data.append({
						1:u'1.1- CORE CAPITAL',
						2:u'',
						3:u'',
						'Type':''
					})

		PaidUpCapital 	=	mktnbc.getLineValue("TotalKHR_65", DataList)
		SubTotal 		+=	float(PaidUpCapital)

		Data.append({
						1:u'',
						2:u'PAID-IN CAPITAL',
						3:u'%s' %(mktmoney.formatNumber(float(PaidUpCapital), 1, 2)),
						'Type':''
					})

		Reserve 	=	mktnbc.getLineValue("TotalKHR_69", DataList)
		SubTotal 	+=	float(Reserve)

		Data.append({
						1:u'',
						2:u'RESERVES',
						3:u'%s' %(mktmoney.formatNumber(float(Reserve), 1, 2)),
						'Type':''
					})

		Retained 	=	mktnbc.getLineValue("TotalKHR_70", DataList)
		SubTotal 	+=	float(Retained)

		if Retained < 0:
			DisplayRetained = "(%s)" %(mktmoney.formatNumber(float(abs(Retained)), 1, 2))
		else:
			DisplayRetained = "%s" %(mktmoney.formatNumber(float(Retained), 1, 2))

		Data.append({
						1:u'',
						2:u'RETAINED EARNINGS/ACCUM.LOSSES',
						3:u'%s' %(DisplayRetained),
						'Type':''
					})

		NetIncome 	=	mktnbc.getLineValue("TotalKHR_71", DataList)
		SubTotal 	+=	float(NetIncome)

		if NetIncome < 0:
			DisplayNetIncome = "(%s)" %(mktmoney.formatNumber(float(abs(NetIncome)), 1, 2))
		else:
			DisplayNetIncome = "%s" %(mktmoney.formatNumber(float(NetIncome), 1, 2))

		Data.append({
						1:u'',
						2:u'NET PROFIT FOR THE PERIOD',
						3:u'%s' %(DisplayNetIncome),
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						'Type':''
					})

		TotalA 	=	SubTotal
		if TotalA < 0:
			DisplayTotalA = "(%s)" %(mktmoney.formatNumber(float(abs(TotalA)), 1, 2))
		else:
			DisplayTotalA = "%s" %(mktmoney.formatNumber(float(TotalA), 1, 2))

		Data.append({
						1:u'',
						2:u'SUB = TOTAL A',
						3:u'%s' %(DisplayTotalA),
						'Type':''
					})

		Data.append({
						1:u'MINUS',
						2:u'',
						3:u'',
						'Type':''
					})

		UnpaidCapital	=	0
		TotalB 			=	0
		TotalB 			+=	float(UnpaidCapital)

		Data.append({
						1:u'',
						2:u'UNPAID CAPITAL',
						3:u'%s' %(mktmoney.formatNumber(float(UnpaidCapital), 1, 2)),
						'Type':''
					})

		LoanRelatedParties	=	0
		TotalB 				+=	float(LoanRelatedParties)

		Data.append({
						1:u'',
						2:u'LOANS TO RELATED PARTIES',
						3:u'%s' %(mktmoney.formatNumber(float(LoanRelatedParties), 1, 2)),
						'Type':''
					})

		IntangibleAsset		=	0
		TotalB 				+=	float(IntangibleAsset)

		Data.append({
						1:u'',
						2:u'INTANGIBLE ASSETS',
						3:u'%s' %(mktmoney.formatNumber(float(IntangibleAsset), 1, 2)),
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'SUB = TOTAL B',
						3:u'%s' %(mktmoney.formatNumber(float(TotalB), 1, 2)),
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						'Type':''
					})

		CoreCapital 	=	TotalA - TotalB

		Data.append({
						1:u'',
						2:u'CORE CAPITAL (A-B)=',
						3:u'%s' %(mktmoney.formatNumber(float(CoreCapital), 1, 2)),
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						'Type':''
					})

		Data.append({
						1:u'1.2- HYBRID CAPITAL',
						2:u'',
						3:u'',
						'Type':''
					})

		TotalHibrid 	=	0
		Refundable		=	0
		TotalHibrid 	+=	float(Refundable)

		Data.append({
						1:u'',
						2:u'NON-REFUNDABLE GRANTS',
						3:u'%s' %(mktmoney.formatNumber(float(TotalHibrid), 1, 2)),
						'Type':''
					})

		PublicGuraantee	=	0
		TotalHibrid 	+=	float(PublicGuraantee)

		Data.append({
						1:u'',
						2:u'PUBLIC GUARANTEE FUNDS',
						3:u'%s' %(mktmoney.formatNumber(float(PublicGuraantee), 1, 2)),
						'Type':''
					})

		PerpetualDebt	=	0
		TotalHibrid 	+=	float(PerpetualDebt)

		Data.append({
						1:u'',
						2:u'PERPETUAL SUBORDINATED DEBT',
						3:u'%s' %(mktmoney.formatNumber(float(PerpetualDebt), 1, 2)),
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'HYBRID CAPITAL',
						3:u'%s' %(mktmoney.formatNumber(float(TotalHibrid), 1, 2)),
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'',
						3:u'',
						'Type':''
					})

		EligibleCapital 	=	float(CoreCapital) + float(TotalHibrid)

		Data.append({
						1:u'1.3- ELIGIBLE CAPITAL (CORE CAPITAL + HYBRID CAPITAL) =',
						2:u'',
						3:u'%s' %(mktmoney.formatNumber(float(EligibleCapital), 1, 2)),
						'Type':''
					})

		Result 	=	{
			'ReportHeader'	: ReportHeader,
			'ColumnHeader'	: 'ColumnHeader',
			'Data'			: Data,
			'Type'			: 'Type',
			'ReportingRate'	: '%s' %(mktmoney.formatNumber(float(ReportingRate), 2, 2))
		}

		return Result

	except Exception, e:
		raise

def getWorksheetN091(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
	try:
		# Add a bold format to use to highlight cells.
		bold 		= workbook.add_format({'font_name':'Arial','bold': True})
		boldcenter 	= workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
		right 		= workbook.add_format({'font_name':'Arial','bold': True, 'align': 'right','font_name':'Arial'})
		
		styleHeaderCenter 	= workbook.add_format({
			'font_name':'Arial',
			'align': 'center',
			'valign': 'vcenter',
			'top':True,
			'bottom':True,
			'bold':True,
			'bg_color':'#FBF385'
		})

		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'align': 'left',
		}

		styleHeaderRight 	= workbook.add_format({
			'font_name':'Arial',
			'align': 'right',
			'valign': 'vcenter',
			'bold':True,
			'bg_color':'#FBF385',
			'top':True,
			'left':True,
			'bottom':True
		})

		styleHeaderLeft 	= workbook.add_format({
			'font_name':'Arial',
			'align': 'left',
			'valign': 'vcenter',
			'bold':True,
			'bg_color':'#FBF385',
			'top':True,
			'right':True,
			'bottom':True
		})
		if Year and Month:
			CYear = Year
			CMonth = Month
		getData = getNBCN091('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
		Header 	= getData['ReportHeader']
		NBCExchangeRate 	=	getData['ReportingRate']
		# Write some data headers.
		worksheet.merge_range('A2:D2', Header['Title'], boldcenter)
		worksheet.merge_range('A3:D3', Header['ReportName'], boldcenter)
		worksheet.write('A7', u"%s:" %mktmessage.getNBCLang(Language, '110002'), bold)
		worksheet.write('B7', u"%s" %Header['CompanyName'], bold)
		worksheet.write('C8', u"%s" %"Exchange Rate: ", right)
		worksheet.write('D8', u"%s" %getData['ReportingRate'])
		worksheet.merge_range('A8:B8', u"%s %s" %(mktmessage.getNBCLang(Language, '110003'), Header['AsAt']), bold)

		# worksheet.merge_range('A10:B10', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)
		worksheet.merge_range('A10:B11', u'PRUDENTIAL REQUIREMENT:', styleHeaderRight)
		worksheet.write('C10', u'ELIGIBLE CAPITAL', styleHeaderCenter)
		worksheet.write('C11', u'RISK-WEIGHTED ASSETS', styleHeaderCenter)
		worksheet.merge_range('D10:D11', u'OR > 20%', styleHeaderLeft)
		# Some data we want to write to the worksheet.

		worksheet.set_column('A:A', 30)
		worksheet.set_column('B:B', 20)
		worksheet.set_column('C:C', 35)
		worksheet.set_column('D:D', 25)

		Data = getData['Data']

		# Start from the first cell below the headers.
		row = 13

		for item in Data:
			col = 0

			if '1- NUMBERATOR: ELIGIBLE CAPITAL' in item[1] or '1.3- ELIGIBLE CAPITAL' in item[1]:
				DicStyle = {
					'valign': 'vcenter',
					'border':1,
					'text_wrap': 1,
					'font_name':'Arial',
					'bg_color':'#FBF385',
					'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'
				}
			else:
				DicStyle = {
					'valign': 'vcenter',
					'border':1,
					'text_wrap': 1,
					'font_name':'Arial',
					'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'
				}

			format 		= workbook.add_format(DicStyle)

			for i in item:
				if i != 'Type':
					if col == 0:
						worksheet.merge_range('A%s:B%s' %(row, row), item[i], format)
						col += 1
					elif col == 3:
						
						if item[i]:
							amount = str(item[i]).replace(',','')
							amount = str(amount).replace('(','-')
							amount = str(amount).replace(')','')
							amount = float(amount)
						else:
							amount = 0

						# format1 = workbook.add_format({'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)', 'border':1})

						worksheet.write(row - 1, col, amount, format)

					else:
						worksheet.write(row - 1, col, item[i], format)

					col += 1

			row += 1

	except Exception, e:
		raise
