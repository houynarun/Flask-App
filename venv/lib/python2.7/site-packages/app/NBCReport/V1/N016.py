'''
Report Name: SOLVENCY RATION FOR MICROFINANCE INSTITUTION
'''
from decimal                    import *
from app.mktcore.imports        import *
from app.GLBalance.models       import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
import app.tools.mktdate        as mktdate
import app.tools.mktsetting     as mktsetting
import app.tools.mktmoney       as mktmoney
import app.tools.mktnbc         as mktnbc
import app.tools.mktgl          as mktgl
import app.tools.mktmessage     as mktmessage
import N009                     as N009

@app.route("/Morakot/Report/N016/")
@checkLogOutSession
@checkLogOutTime
def getNBCReportN016():
    try:
        ErrorMsg    = []
        getCheck    = checkAccess("/Morakot/Report/N016/","Search")
        if getCheck != True: 
            ErrorMsg.append(msg_error+msg_permission)
            return render_template("permission.html",ErrorMsg=ErrorMsg)

        getAccSetting   =   mktsetting.getAccSetting()
        Currency        =   'USD'
        BaseCurrency    =   getAccSetting.BaseCurrency
        ID              =   'N016'
        Branch          =   request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
        Period          =   request.args.get("Period") if "Period" in request.args else 6
        ReportedDate    =   request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

        Month   =   request.args.get("Month") if 'Month' in request.args else ""
        Year    =   request.args.get("Year") if 'Year' in request.args else ""

        GroupMonth  =   None
        GroupYear   =   db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

        if Year:
            GroupMonth  =   db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
                            group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
                            filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

        Condition = []
        if Year and Month:
            GLTable   = MKT_GL_BALANCE_BACKUP
            Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month]
            CYear     = Year
            CMonth    = Month
        else:
            GLTable   = MKT_GL_BALANCE
            BankDate  = mktdate.getBankDate()
            CYear     = BankDate.year
            CMonth    = BankDate.month

        GLObj   =   GLTable.query.filter(*Condition)

        Result          =   getNBCN016('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
        Result1         =   getNBCN0162('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth,TotalNetWorth=Result['TotalNetWorth'],DataList=Result['DataList'])
        ReportingRate   =   mktnbc.getDisplayReportingRate(CYear, CMonth, Period)

        html = "nbc/nbc_sovency_mfi16.html"

        return render_template(
                                html,
                                Result          =   Result,
                                Result1         =   Result1,
                                float           =   float,
                                ReportingRate   =   ReportingRate,
                                Currency        =   Currency,
                                BaseCurrency    =   BaseCurrency,
                                mktmoney        =   mktmoney,
                                toMoney         =   mktmoney.toMoney,
                                getCurrencyObj  =   mktmoney.getCurrencyObj,
                                Branch          =   Branch,
                                ID              =   ID,
                                len             =   len,
                                Period          =   Period,
                                GroupYear       =   GroupYear,
                                GroupMonth      =   GroupMonth,
                                Year            =   Year,
                                Month           =   Month,
                                ReportedDate    =   ReportedDate
                            )

    except:
        raise

def getNBCN016(ID, Branch='HO', Period=6, ReportedDate="", GLTable='', GLObj='', Year='', Month=''):
    try:

        Language        =   mktnbc.getDefaultLang()
        ReportHeader    =   {}
        CompanyName     =   mktnbc.getCompanyName()
        ReportHeader    =   {
                                'ReportName': u'SOLVENCY RATION FOR MICROFINANCE INSTITUTION',
                                'CompanyName': CompanyName,
                                'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
                                'Form': 'N016',
                                'Title': u'NATIONAL BANK OF CAMBODIA'
                            }
        Data            =   []
        # check to recalculate year and month to get currency
        if Period in [1, 2, 4, 5]:
            if Month == 1:
                Month   =   12
                Year    -=  1
            else:
                Month   -=  1
        DataList        =   mktnbc.getNBCLineDetail(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj, Year=Year, Month=Month)
        SubTotal        =   0
        ReportingRate   =   mktsetting.getAppSetting('NBCExchangeRate')
        CurrencyDic     =   mktnbc.getNBCExchangeRate(Year, Month)
        if not CurrencyDic:
            flash(msg_error+"NBC Exchange Rate isn't defined")
            return []
            
        Data.append({
                        1:u'NUMERATOR: NET WORTH',
                        2:u'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:u'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'I. Sub-total A: Items to be added',
                        2:u'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        PaidUpCapital   =   mktnbc.getLineValue("TotalKHR_65", DataList)
        SubTotal        +=  Decimal(PaidUpCapital)
        PaidUpCapital   =   mktmoney.formatNumber(float(PaidUpCapital), 1, 2)

        Data.append({
                        1:'',
                        2:u'Capital or endowment',
                        3:u'',
                        4:u'%s' %(PaidUpCapital),
                        'Type':'LD'
                    })
        
        Revaluation     =   mktnbc.getLineValue("TotalKHR_69", DataList)
        SubTotal        +=  Decimal(Revaluation)
        Revaluation     =   mktmoney.formatNumber(float(Revaluation), 1, 2)

        Data.append({
                        1:'',
                        2:u'Reserve, other than revaluation reserves',
                        3:u'',
                        4:u'%s' %(Revaluation),
                        'Type':'LD'
                    })
        Premium     =   mktnbc.getLineValue("TotalKHR_66", DataList)
        SubTotal    +=  Decimal(Premium)
        Premium     =   mktmoney.formatNumber(float(Premium), 1, 2)
        Data.append({
                        1:u'',
                        2:'Premium related to capital (share premiums)',
                        3:u'',
                        4:Premium,
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'Provision for general banking risks',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        AuditedNetProfit    =   mktnbc.getLineValue("TotalKHR_70", DataList)
        SubTotal            +=  Decimal(AuditedNetProfit)

        Data.append({
                        1:u'',
                        2:'Retained earrings',
                        3:u'',
                        4:u'%s' %(mktmoney.formatNumber(float(AuditedNetProfit), 1, 2)),
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'Audited net profit for the last financial year',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'Other items',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:u'',
                        3:'',
                        4:'',
                        'Type':''
                    })

        SubTotalA   =   SubTotal

        Data.append({
                        1:u'',
                        2:'Sub-total A',
                        3:u'',
                        4:u'%s' %(mktmoney.formatNumber(float(SubTotalA), 2, 2)),
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        SubTotalB       =   0

        Data.append({
                        1:u'II. Sub-total B: Items to be deducted',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:'For shareholders, directors, managers and their next of kin',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:'- Unpaid portion of capital',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        InsiderData =   N009.getNBCN009(Branch, ReportedDate)['Data']
        ShareHolder =   InsiderData[0].get(5,0).replace(',','')
        Managers    =   InsiderData[5].get(5,0).replace(',','')
        InsiderTotal=   Decimal(ShareHolder)+Decimal(Managers)

        Data.append({
                        1:u'',
                        2:'- Advances, loans, security and the agreement of the persons concerned as defined above',
                        3:u'',
                        4:mktmoney.formatNumber(InsiderTotal, 2, 2),
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })
        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:'Holding of own shares at their book value',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })
        AccumulatedLoss = -AuditedNetProfit
        SubTotalB       +=  AccumulatedLoss
        Data.append({
                        1:u'',
                        2:'Accumulated losses',
                        3:u'',
                        4:mktmoney.formatNumber(AccumulatedLoss, 2, 2),
                        'Type':'LD'
                    })
        AppSetting          =   mktsetting.getAppSetting
        FormationExpense    =   AppSetting('FormationExpense') if AppSetting('FormationExpense') else '-294922 295102'
        BaseCurrency        =   mktsetting.getAccSetting().BaseCurrency


        Kargs           =   {'GLTable':GLTable, 'GLObj':GLObj, 'FCY':True}
        FormationExp    =   mktgl.getGLValue(FormationExpense, Branch, Period, BaseCurrency, **Kargs)
        FormationExp    =   Decimal(FormationExp) * CurrencyDic.get(BaseCurrency,1) / 1000000
        SubTotalB       +=  FormationExp
        Data.append({
                        1:u'',
                        2:'Formation expenses',
                        3:u'',
                        4:mktmoney.formatNumber(FormationExp,2,2),
                        'Type':'LD'
                    })

        CurrentYear     =   0
        Losses          =   mktnbc.getLineValue("TotalKHR_71", DataList)
        if Decimal(Losses) < 0:
            CurrentYear     -=  Decimal(Losses)
            SubTotalB       +=  Decimal(CurrentYear)
        
        SubTotalB       +=  InsiderTotal

        Data.append({
                        1:u'',
                        2:'Losses determined on dates',
                        3:u'',
                        4:u'%s' %(mktmoney.formatNumber(float(CurrentYear), 1, 2)),
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:'Sub-total B',
                        3:u'',
                        4:u'%s' %(mktmoney.formatNumber(SubTotalB, 1, 2)),
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        SubTOtalC   =   Decimal(SubTotalA) - Decimal(SubTotalB)

        Data.append({
                        1:u'III. Total C: BASE NET WORTH = A-B',
                        2:'',
                        3:u'',
                        4:u'%s' %(mktmoney.formatNumber(float(SubTOtalC), 2, 2)),
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        SubTotalD   =   0

        Data.append({
                        1:u'IV. Sub-Total D: Items to be added',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:'Revaluation reserves',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'Subordinated debt (up to 100% of base net worth)',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'Other items (not more than base net worth)',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:'Sub-total D',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        SubTOtalE   =   0

        Data.append({
                        1:u'V. Sub-total E: Items to be deducted',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:'Equity participation in banking and financial institutions',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'Other items',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:'Sub-total E',
                        3:u'',
                        4:u'0.00',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        TotalNetWorth   =   Decimal(SubTOtalC) + Decimal(SubTotalD) - Decimal(SubTOtalE)
        
        Data.append({
                        1:u'Total F: TOTAL NET WORTH = C+D-E',
                        2:'',
                        3:u'',
                        4:u'%s' %(mktmoney.formatNumber(float(TotalNetWorth), 2, 2)),
                        'Type':''
                    })

        Result  =   {
            'ReportHeader'  : ReportHeader,
            'ColumnHeader'  : 'ColumnHeader',
            'Data'          : Data,
            'Type'          : 'Type',
            'TotalNetWorth' : '%s' %(TotalNetWorth),
            'DataList'      : DataList,
            'ReportingRate' : '%s' %(mktmoney.formatNumber(float(mktnbc.getDisplayReportingRate(Year, Month, Period)), 2, 2))
        }

        return Result

    except Exception, e:
        raise

def getWorksheetN016(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
    try:
        # Add a bold format to use to highlight cells.
        bold        = workbook.add_format({'font_name':'Arial','bold': True})
        boldcenter  = workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
        right       = workbook.add_format({'align': 'right','font_name':'Arial'})
        
        styleHeader     = workbook.add_format({
            'font_name':'Arial',
            'align': 'center',
            'valign': 'vcenter',
            # 'border': 1,
            'bold':True,
            # 'bg_color':'#CCFFCC'
        })
        DicStyle = {
            'font_name':'Arial',
            'valign': 'vcenter',
            'align': 'left',
        }
        if Year and Month:
            CYear = Year
            CMonth = Month
        getData = getNBCN016('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
        Header  = getData['ReportHeader']
        NBCExchangeRate     =   getData['ReportingRate']
        # Write some data headers.
        worksheet.merge_range('A2:H2', Header['Title'].upper(), boldcenter)
        worksheet.merge_range('A4:H4', Header['ReportName'].upper(), boldcenter)

        worksheet.write('A7', u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Header['CompanyName'].upper()))
        worksheet.write('A9', u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), Header['AsAt'].upper()))

        worksheet.write('G10', u'Exchange Rate: ')
        worksheet.write('H10', u'%s' %(NBCExchangeRate))
        worksheet.write('H12', u'In Million Riels')
        # Some data we want to write to the worksheet.

        # worksheet.set_column('A:A', 80)
        worksheet.set_column('H:H', 25)

        Data = getData['Data']

        # Start from the first cell below the headers.
        row = 12
        
        # Iterate over the data and write it out row by row.
        DicStyle = {
            'valign': 'vcenter',
            'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
            'font_name':'Arial'
        }

        for item in Data:
            col = 0
            if item['Type'] == '': 
                format      = workbook.add_format({'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)', 'bold':True,'font_name':'Arial'})
            else:
                format      = workbook.add_format(DicStyle)
            if item[4] != '':
                item[4] = float(item[4].replace(',',''))
            if item['Type'] == 'LD':
                worksheet.merge_range(row, 1, row, 3, item[2], format)
                # worksheet.write(row, 1, item[2], format)
                worksheet.write(row, 7, item[4], format)
            else:       
                worksheet.write(row, 0, item[1], format)
                worksheet.write(row, 1, item[2], format)
                worksheet.write(row, 7, item[4], format)

            row += 1

        getWorksheetN0162(workbook, worksheet, Language, Branch=Branch, Period=Period, ReportedDate=ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=Year, Month=Month, CYear=CYear, CMonth=CMonth, Row=row, TotalNetWorth=getData['TotalNetWorth'],DataList=getData['DataList'])

    except Exception, e:
        raise

def getNBCN0162(ID, Branch='HO', Period=6, ReportedDate="", GLTable='', GLObj='', Year='', Month='', TotalNetWorth=0, DataList={}):
    try:

        Language        =   mktnbc.getDefaultLang()
        ReportHeader    =   {}
        CompanyName     =   mktnbc.getCompanyName()
        ReportHeader    =   {
                                'ReportName': u'DENOMINATOR : RISK-WEIGHTED ASSETS',
                                'CompanyName': CompanyName,
                                'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
                                'Form': 'N016-2',
                                'Title': u'NATIONAL BANK OF CAMBODIA'
                            }
        Data            =   []
        SubTotal        =   0
        ReportingRate   =   mktsetting.getAppSetting('NBCExchangeRate')
        TotalWeightedAmt=   0
        Data.append({
                        1:u'Zero weighting Asset',
                        2:u'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        CashInHand      =   mktnbc.getLineValue("TotalKHR_2", DataList)
        SubTotal        +=  Decimal(CashInHand)
        RiskWeighting   =   0
        WeightedAmt     =   (CashInHand * RiskWeighting) / 100
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'Cash',
                        2:u'%s' %(mktmoney.formatNumber(float(CashInHand), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        GoldInHand      =   0
        SubTotal        +=  Decimal(GoldInHand)
        RiskWeighting   =   0
        WeightedAmt     =   (GoldInHand * RiskWeighting) / 100
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'Gold',
                        2:u'%s' %(mktmoney.formatNumber(float(GoldInHand), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        NBCAccount      =   mktnbc.getLineValue("TotalKHR_3", DataList)
        SubTotal        +=  Decimal(NBCAccount)
        RiskWeighting   =   0
        WeightedAmt     =   (NBCAccount * RiskWeighting) / 100
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'Claims on the NBC',
                        2:u'%s' %(mktmoney.formatNumber(float(NBCAccount), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        DepositBank     =   0
        SubTotal        +=  Decimal(DepositBank)
        RiskWeighting   =   0
        WeightedAmt     =   (DepositBank * RiskWeighting) / 100
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'Assets collateralized by deposits lodged with the bank',
                        2:u'%s' %(mktmoney.formatNumber(float(DepositBank), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        Guaranteed      =   0
        SubTotal        +=  Decimal(Guaranteed)
        RiskWeighting   =   0
        WeightedAmt     =   (Guaranteed * RiskWeighting) / 100
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'Claims on or guaranteed by sovereigns rated AAA to AA-',
                        2:u'%s' %(mktmoney.formatNumber(float(Guaranteed), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        Data.append({
                        1:u'',
                        2:u'',
                        3:u'',
                        4:u'',
                        'Type':'LD'
                    })

        Data.append({
                        1:u'20 percent weighting Asset',
                        2:u'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        AARateAmt       =   0
        SubTotal        +=  Decimal(AARateAmt)
        RiskWeighting   =   20
        WeightedAmt     =   (AARateAmt * RiskWeighting) / 100
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'Claims on or guaranteed by sovereigns rated A+ to A-',
                        2:u'%s' %(mktmoney.formatNumber(float(AARateAmt), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        AARateAmt       =   0
        SubTotal        +=  Decimal(AARateAmt)
        RiskWeighting   =   20
        WeightedAmt     =   (AARateAmt * RiskWeighting) / 100
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'Claims on or guaranteed by banks or corporations rated AAA+ to AA-',
                        2:u'%s' %(mktmoney.formatNumber(float(AARateAmt), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        Data.append({ 1:u'', 2:u'', 3:u'', 4:u'', 'Type':'LD' })
        Data.append({ 1:u'', 2:u'', 3:u'', 4:u'', 'Type':'LD' })

        Data.append({
                        1:u'50 percent weighting Asset',
                        2:u'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        BBRateAmt       =   0
        SubTotal        +=  Decimal(BBRateAmt)
        RiskWeighting   =   50
        WeightedAmt     =   BBRateAmt * RiskWeighting
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'Claims on or guaranteed by sovereigns rated BBB+ to BBB-',
                        2:u'%s' %(mktmoney.formatNumber(float(BBRateAmt), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        BBRateAmt       =   0
        SubTotal        +=  Decimal(BBRateAmt)
        RiskWeighting   =   50
        WeightedAmt     =   (BBRateAmt * RiskWeighting) / 100
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'Claims on or guaranteed by banks or corporations rated A+ to A-',
                        2:u'%s' %(mktmoney.formatNumber(float(BBRateAmt), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        Data.append({ 1:u'', 2:u'', 3:u'', 4:u'', 'Type':'LD' })
        Data.append({ 1:u'', 2:u'', 3:u'', 4:u'', 'Type':'LD' })
        Data.append({ 1:u'', 2:u'', 3:u'', 4:u'', 'Type':'LD' })

        Data.append({
                        1:u'100 percent weighting Asset',
                        2:u'',
                        3:u'',
                        4:u'',
                        'Type':''
                    })

        TotalAsset      =   mktnbc.getLineValue("TotalKHR_32", DataList)
        AllAssetAmt     =   Decimal(TotalAsset) - Decimal(CashInHand) - Decimal(NBCAccount)
        SubTotal        +=  Decimal(AllAssetAmt)
        RiskWeighting   =   100
        WeightedAmt     =   (AllAssetAmt * RiskWeighting) / 100
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'All other assets',
                        2:u'%s' %(mktmoney.formatNumber(float(AllAssetAmt), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        OffBalance      =   0
        SubTotal        +=  Decimal(OffBalance)
        RiskWeighting   =   100
        WeightedAmt     =   (OffBalance * RiskWeighting) / 100
        TotalWeightedAmt    +=  WeightedAmt

        Data.append({
                        1:u'All off-balance sheet item',
                        2:u'%s' %(mktmoney.formatNumber(float(OffBalance), 1, 2)),
                        3:u'%s %s' %(mktmoney.formatNumber(float(RiskWeighting), 1, 0), "%"),
                        4:u'%s' %(mktmoney.formatNumber(float(WeightedAmt), 1, 2)),
                        'Type':'LD'
                    })

        Data.append({ 1:u'', 2:u'', 3:u'', 4:u'', 'Type':'LD' })

        Data.append({
                        1:u'TOTAL',
                        2:u'%s' %(mktmoney.formatNumber(float(TotalWeightedAmt) + float(CashInHand) + float(NBCAccount), 1, 2)),
                        3:u'',
                        4:u'%s' %(mktmoney.formatNumber(float(TotalWeightedAmt), 1, 2)),
                        'Type':''
                    })

        Data.append({ 1:u'', 2:u'', 3:u'', 4:u'', 'Type':'LD' })

        Data.append({
                        1:u'Total G : TOTAL RISK-WEIGHTED ASSETS',
                        2:u'',
                        3:u'',
                        4:u'%s' %(mktmoney.formatNumber(float(TotalWeightedAmt), 1, 2)),
                        'Type':''
                    })

        Data.append({ 1:u'', 2:u'', 3:u'', 4:u'', 'Type':'' })

        if not TotalNetWorth:
            TotalNetWorth = 0
            
        SovencyRatio    =   0 if TotalWeightedAmt == 0 else float(TotalNetWorth) / float(TotalWeightedAmt)
        SovencyRatio    =   round(SovencyRatio, 4)
        SovencyRatio    =   SovencyRatio * 100

        Data.append({
                        1:u'SOLVENCY RATIO = Total F / Total G',
                        2:u'',
                        3:u'',
                        4:u'%s %s' %(SovencyRatio, "%"),
                        'Type':''
                    })
        
        Result  =   {
            'ReportHeader'  : ReportHeader,
            'ColumnHeader'  : 'ColumnHeader',
            'Data'          : Data,
            'Type'          : 'Type',
            'ReportingRate' : '%s' %(mktmoney.formatNumber(float(ReportingRate), 2, 2))
        }

        return Result

    except Exception, e:
        raise

def getWorksheetN0162(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth='', Row='',TotalNetWorth=0,DataList={}):
    try:
        # Add a bold format to use to highlight cells.
        bold        = workbook.add_format({'font_name':'Arial','bold': True})
        boldcenter  = workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
        right       = workbook.add_format({'align': 'right','font_name':'Arial'})
        
        styleHeader     = workbook.add_format({
            'font_name':'Arial',
            'align': 'center',
            'valign': 'vcenter',
            'bold':True
        })

        DicStyle = {
            'font_name':'Arial',
            'valign': 'vcenter',
            'align': 'left',
        }
        if Year and Month:
            CYear = Year
            CMonth = Month

        getData = getNBCN0162('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth, TotalNetWorth=TotalNetWorth, DataList=DataList)
        
        worksheet.write('A%s'%Row, u'DENOMINATOR : RISK-WEIGHTED ASSETS', bold)
        worksheet.write('A%s'%(Row+1), u'', styleHeader)

        worksheet.write('F%s'%(Row+1), u'Amount in Millions of Riels', styleHeader)
        worksheet.write('G%s'%(Row+1), u'Risk Weighting', styleHeader)
        worksheet.write('H%s'%(Row+1), u'Risk Weighted Amount', styleHeader)

        # worksheet.set_column('A:A', 5)
        # worksheet.set_column('B:B', 60)
        # worksheet.set_column('C:C', 15)
        # worksheet.set_column('D:D', 15)
        # worksheet.set_column('E:E', 15)

        Data = getData['Data']

        # Start from the first cell below the headers.
        row = Row+5
        
        # Iterate over the data and write it out row by row.
        DicStyle = {
            'font_name':'Arial',
            'valign': 'vcenter',
            'align': 'left',
            'text_wrap': 1,
            'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'
        }

        for item in Data:
            col = 0
            if item['Type'] == '':
                col = 0
                DicStyle = {
                            'valign': 'vcenter',
                            'align': 'left',
                            'bold':True,
                            'font_name':'Arial',
                            'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'
                        }
            else:
                col = 1
                DicStyle = {
                            'valign': 'vcenter',
                            'align': 'left',
                            'text_wrap': True,
                            'font_name':'Arial',
                            'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'
                        }

            format      = workbook.add_format(DicStyle)

            worksheet.merge_range(row, col, row, col+2, item[1], format)

            if item[2]:
                worksheet.write(row, 5, float(str(item[2]).replace(',','')), format)
            else:
                worksheet.write(row, 5, item[2], format)

            worksheet.write(row, 6, item[3], format)

            if item[4] and '%' not in str(item[4]):
                worksheet.write(row, 7, float(str(item[4]).replace(',','')), format)
            else:
                worksheet.write(row, 7, item[4], format)

            row += 1

        BorderBottom = workbook.add_format({'bottom':True})
        worksheet.write(row+5, 0, u'Name:', BorderBottom)
        worksheet.write(row+6, 0, u'Position:', BorderBottom)
        worksheet.write(row+5, 5, u'Date:', BorderBottom)

    except Exception, e:
        raise
