'''
Report Name: LIST OF LOANS TO INSIDERS AND RELATED PARIES
URL: /Morakot/Report/N009/
'''
from app.mktcore.imports 		import *
import app.tools.mktnbc			as mktnbc
import app.tools.mktmessage 	as mktmessage
import app.tools.mktdate 		as mktdate
from app.LoanContract.models 	import *
import app.tools.mktmoney       as mktmoney
import app.tools.mktsetting     as mktsetting
from decimal 					import *
from app.Customer.models 		import *

@app.route("/Morakot/Report/N009/")
@checkLogOutSession
@checkLogOutTime
def getNBCReportN009():
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N009/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		getAccSetting 	=	mktsetting.getAccSetting()
		Currency 		=	'USD'
		BaseCurrency 	=	getAccSetting.BaseCurrency
		ID 				= 	'N009'
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get("Period") if "Period" in request.args else 6
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()
		ReportingRate   =   mktnbc.getDisplayReportingRate('', '', Period)

		Result 			=	getNBCN009(Branch, ReportedDate)

		html = "nbc/nbc_n009.html"

		return render_template(
								html,
								Result 			=	Result,
								float 			=	float,
								ReportingRate 	=	ReportingRate,
								Currency 		=	Currency,
								BaseCurrency 	=	BaseCurrency,
								mktmoney 		=	mktmoney,
								toMoney 		=	mktmoney.toMoney,
								getCurrencyObj 	=	mktmoney.getCurrencyObj,
								Branch 			=	Branch,
								ID 				=	ID,
								Period 			=	Period,
								ReportedDate 	=	ReportedDate
							)

	except:
		raise

def getNBCN009(Branch, ReportedDate):
	try:

		Language 		=	mktnbc.getDefaultLang()
		ReportHeader 	= 	{}
		CompanyName 	= 	mktnbc.getCompanyName()
		ReportHeader 	=	{
								'ReportName': u'LIST OF LOANS TO INSIDERS AND RELATED PARIES',
								'CompanyName': CompanyName,
								'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
								'Form': 'N009',
								'Title': u'NATIONAL BANK OF CAMBODIA'
							}
		Data 		=	[]

		LoanContractObj = 	db.session.query(
								MKT_LOAN_CONTRACT.Currency,
								MKT_CUSTOMER.CustomerType,
								func.count(MKT_LOAN_CONTRACT.ID).label('NumberOfLoan'),
								func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('OutstandingAmount')
							).\
							join(MKT_CUSTOMER, MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
							filter(MKT_LOAN_CONTRACT.Branch == Branch).\
							filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
							group_by(
								MKT_LOAN_CONTRACT.Currency,
								MKT_CUSTOMER.CustomerType
								)	
		
		BankDate    =   mktdate.getBankDate()
		Year        =   BankDate.year
		Month       =   BankDate.month
		Month 	-=	1
		if Month == 0:
			Month 	= 	12
			Year  	-= 	1

		CurrencyDic     =   mktnbc.getNBCExchangeRate(Year, Month)
		AppSetting 		=	mktsetting.getAppSetting

		LoanList 		=	[
								{'Name':'Indeviduals' , 	'Item':	AppSetting('ShareHolderIndividualLoan').split()},
								{'Name':'Corporations', 	'Item':	AppSetting('ShareHolderGroupLoan').split()},
								{'Name':'Others', 			'Item':	AppSetting('ShareHolderOtherLoan').split()},
								{'Name':'Managers', 		'Item':	AppSetting('ManagerLoan').split()},
								{'Name':'Employees', 		'Item':	AppSetting('EmployeeLoan').split()},
								{'Name':'ExternalAuditors', 'Item':	AppSetting('ExternalAuditorLoan').split()},
							]
		Dic = 	{}
		TCount 			=	0
		TAmount  		=	0
		TAmountKHR  	=	0
		for ll in LoanList:
			Dic.update({ll['Name']:[0, 0 , 0, 0]})
			if ll['Item']:
				LoanObj 	=	LoanContractObj.filter(MKT_CUSTOMER.CustomerType.in_(ll['Item']))
				Count 		=	0
				Amount  	=	0
				AmountKHR  	=	0
				for l in LoanObj:
					Count += l.NumberOfLoan
					TCount += l.NumberOfLoan
					if l.Currency == 'KHR':
						AmountKHR 	+=	l.OutstandingAmount
					else:
						Amount 	+= l.OutstandingAmount * Decimal(CurrencyDic[l.Currency])
				Amount 		/= 	1000000	
				AmountKHR 	= 	AmountKHR / 1000000	if AmountKHR else 0
				TAmount 	+= Amount
				TAmountKHR 	+=	AmountKHR

				Dic.update({ll['Name']:[Count, AmountKHR, Amount, Amount+AmountKHR]})
		
		Dic.update({'Total':[TCount, TAmountKHR, TAmount, TAmount+TAmountKHR]})
		formatNumber =	mktmoney.formatNumber

		Data.append({ 	1:u'1- Shareholders', 		
						2:Dic['Indeviduals'][0]+Dic['Corporations'][0]+Dic['Others'][0], 	
						3:formatNumber(Dic['Indeviduals'][1]+Dic['Corporations'][1]+Dic['Others'][1],1,2), 	
						4:formatNumber(Dic['Indeviduals'][2]+Dic['Corporations'][2]+Dic['Others'][2],1,2), 	
						5:formatNumber(Dic['Indeviduals'][3]+Dic['Corporations'][3]+Dic['Others'][3],1,2), 	'Type':'GH' })

		Data.append({ 	1:u'1.1 of which individuals', 	2:Dic['Indeviduals'][0], 	
						3:formatNumber(Dic['Indeviduals'][1], 1,2),
						4:formatNumber(Dic['Indeviduals'][2], 1,2),		
						5:formatNumber(Dic['Indeviduals'][3], 1,2), 	'Type':'' })

		Data.append({ 	1:u'1.2 of which corporations',	2:Dic['Corporations'][0], 
						3:formatNumber(Dic['Corporations'][1],1,2), 
						4:formatNumber(Dic['Corporations'][2],1,2), 		
						5:formatNumber(Dic['Corporations'][3],1,2), 'Type':'' })

		Data.append({ 	1:u'1.3 of which others',      	2:Dic['Others'][0], 
						3:formatNumber(Dic['Others'][1],1,2), 
						4:formatNumber(Dic['Others'][2],1,2), 			
						5:formatNumber(Dic['Others'][3],1,2), 'Type':'' })

		Data.append({ 1:u'', 					2:u'', 	3:u'', 		4:u'', 		5:u'', 		'Type':'' })
		Data.append({ 	1:u'2. Managers', 		2:Dic['Managers'][0], 
						3:formatNumber(Dic['Managers'][1],1,2), 	
						4:formatNumber(Dic['Managers'][2],1,2), 	
						5:formatNumber(Dic['Managers'][3],1,2), 	'Type':'GH' })
		Data.append({ 1:u'', 					2:u'', 	3:u'', 		4:u'', 		5:u'', 		'Type':'' })
		Data.append({ 	1:u'3. Employees', 		2:Dic['Employees'][0], 
						3:formatNumber(Dic['Employees'][1],1,2), 	
						4:formatNumber(Dic['Employees'][2],1,2), 	
						5:formatNumber(Dic['Employees'][3],1,2), 	'Type':'GH' })
		Data.append({ 1:u'', 					2:u'', 	3:u'', 		4:u'', 		5:u'', 		'Type':'' })
		Data.append({ 	1:u'4. External Auditors',	2:Dic['ExternalAuditors'][0], 
						3:formatNumber(Dic['ExternalAuditors'][1],1,2), 	
						4:formatNumber(Dic['ExternalAuditors'][2],1,2), 	
						5:formatNumber(Dic['ExternalAuditors'][3],1,2), 	'Type':'GH' })

		Data.append({ 	1:u'TOTAL', 				2:Dic['Total'][0], 
						3:formatNumber(Dic['Total'][1], 1,2),	
						4:formatNumber(Dic['Total'][2], 1,2),	
						5:formatNumber(Dic['Total'][3],1,2), 	'Type':'ST' })

		Result 	=	{
			'ReportHeader'	: ReportHeader,
			'ColumnHeader'	: 'ColumnHeader',
			'Data'			: Data,
			'Type'			: 'Type'
		}

		return Result

	except Exception, e:
		raise

def getWorksheetN009(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLTable='', GLObj='', Year='', Month='', CYear='', CMonth=''):
	try:
		boldcenter 	= workbook.add_format({'bold': True, 'align': 'center'})
		Data       	= getNBCN009(Branch, ReportedDate)
		Header 		= Data['ReportHeader']

		worksheet.merge_range('A2:E2', Header['CompanyName'], boldcenter)
		worksheet.merge_range('A3:E3', Header['ReportName'], boldcenter)
		
		worksheet.write('A5',u"%s: %s" %(mktmessage.getNBCLang(Language, '110002'), Header['CompanyName']))
		worksheet.write('A7',u"%s %s" %(mktmessage.getNBCLang(Language, '110003'), Header['AsAt']))

		right = workbook.add_format({'align': 'right'})
		row_header_1 = workbook.add_format({
				'font_name':'Arial',
				'align': 'center',
				'valign': 'vcenter',
				'border': 1,
				'text_wrap': True,
				'bg_color':'#CCCCCC'
			})
		# Write some data headers.
		worksheet.merge_range('A8:E8', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)

		worksheet.merge_range('A9:A11', u'%s' %'BORROWERS', row_header_1)
		worksheet.merge_range('B9:B11', u'%s' %'Number of loans', row_header_1)
		worksheet.merge_range('C9:C11', u'%s' %'Amounts in Riels (millions)', row_header_1)
		worksheet.merge_range('D9:D11', u'%s' %'Other currencies translated', row_header_1)
		worksheet.merge_range('E9:E11', u'%s' %'Total in millions of Riels', row_header_1)

		worksheet.set_column('A:A', 32)
		worksheet.set_column('B:B', 10)
		worksheet.set_column('C:C', 10)
		worksheet.set_column('D:D', 10)
		worksheet.set_column('E:E', 10)

		row = 11
		headerFormat    = workbook.add_format({'bg_color':'#CCCCCC', 'border':1,'num_format':'_(* #,##0.#0_);_(* \(#,##0.#0\);_(* "-"??_);_(@_)'})
		headerFormatNum = workbook.add_format({'bg_color':'#CCCCCC', 'border':1,'num_format':'_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)'})
		liststyle    	= workbook.add_format({'border':1,'num_format':'_(* #,##0.#0_);_(* \(#,##0.#0\);_(* "-"??_);_(@_)'})
		liststyleNum 	= workbook.add_format({'border':1,'num_format':'_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)'})

		for item in Data['Data']:
			
			if item[2] != '' : 
				item[2] = float(str(item[2]).replace(',',''))
			if item[3] != '' : 
				item[3] = float(item[3].replace(',',''))
			if item[4] != '' : 
				item[4] = float(item[4].replace(',',''))
			if item[5] != '' : 
				item[5] = float(item[5].replace(',',''))
			
			if item['Type'] == 'ST':
				worksheet.write(row, 0, item[1], headerFormat)
				worksheet.write(row, 1, item[2], headerFormatNum)
				worksheet.write(row, 2, item[3], headerFormat)
				worksheet.write(row, 3, item[4], headerFormat)
				worksheet.write(row, 4, item[5], headerFormat)
			else:
				worksheet.write(row, 0, item[1], liststyle)
				worksheet.write(row, 1, item[2], liststyleNum)
				worksheet.write(row, 2, item[3], liststyle)
				worksheet.write(row, 3, item[4], liststyle)
				worksheet.write(row, 4, item[5], liststyle)
			row += 1

		BorderBottom = workbook.add_format({'bottom':True})
		worksheet.write(row+5, 0, u'Name:', BorderBottom)
		worksheet.write(row+6, 0, u'Position:', BorderBottom)
		worksheet.write(row+5, 3, u'Date:', BorderBottom)

	except Exception, e:
		raise
