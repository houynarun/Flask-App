# -*- coding: utf-8 -*-
'''
Report Name: MONTHLY REPORT ON SURVEY CURRENT WEIGHTED​ AVERAGE INTEREST RATES ON NEW DEPOSITS AND LOANS
'''

from app.mktcore.imports 		import *
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
from app.LoanContract.models 	import *
from app.LoanApplication.models import *
from app.Collateral.models 		import *
from app.TermDepositContract.models import *
from app.TermDepositProduct.models import *
from app.PeriodicInterest.models import *
from decimal 					import * 
import app.tools.mktdate 		as mktdate
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmoney 		as mktmoney
import app.tools.mktnbc			as mktnbc
import app.tools.mktgl 			as mktgl
import app.tools.mkttool		as mkttool
import app.tools.mktmessage 	as mktmessage
import N016 					as N016
import calendar
from sqlalchemy.sql.expression      import cast
import sqlalchemy

@app.route("/Morakot/Report/N018/")
@checkLogOutSession
@checkLogOutTime
def getNBCReportN018():
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N018/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		getAccSetting 	=	mktsetting.getAccSetting()
		Currency 		=	'USD'
		BaseCurrency 	=	getAccSetting.BaseCurrency
		ID 				= 	'N018'
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get("Period") if "Period" in request.args else 6
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

		Month   =   request.args.get("Month") if 'Month' in request.args else ""
		Year    =   request.args.get("Year") if 'Year' in request.args else ""

		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

		if Year:
			GroupMonth 	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Condition = []
		if Year and Month:
			GLTable   = MKT_GL_BALANCE_BACKUP
			Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month]
			CYear 	  = Year
			CMonth 	  = Month
		else:
			GLTable   = MKT_GL_BALANCE
			BankDate  = mktdate.getBankDate()
			CYear 	  = BankDate.year
			CMonth 	  = BankDate.month

		GLObj   =   GLTable.query.filter(*Condition)
		
		Result 			=	getNBCN018('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
		ReportingRate   =   mktnbc.getDisplayReportingRate(CYear, CMonth, Period)

		html = "nbc/nbc_mdi_mfi18.html"

		return render_template(
								html,
								Result 			=	Result,
								float 			=	float,
								ReportingRate 	=	ReportingRate,
								Currency 		=	Currency,
								BaseCurrency 	=	BaseCurrency,
								mktmoney 		=	mktmoney,
								toMoney 		=	mktmoney.toMoney,
								getCurrencyObj 	=	mktmoney.getCurrencyObj,
								Branch 			=	Branch,
								ID 				=	ID,
								len 			=	len,
								Period 			=	Period,
								GroupYear       = 	GroupYear,
								GroupMonth      = 	GroupMonth,
								Year 			= 	Year,
								Month 			= 	Month,
								ReportedDate 	=	ReportedDate
							)

	except:
		raise

def getNBCN018(ID, Branch='HO', Period=6, ReportedDate="", GLTable='', GLObj='', Year='', Month=''):
	try:

		Language 		=	mktnbc.getDefaultLang()
		ReportHeader 	= 	{}
		Company 		=   mkttool.getCompany()
		CompanyName 	= 	mktnbc.getCompanyName()
		ReportHeader 	=	{
								'ReportName': u'MONTHLY REPORT ON SURVEY CURRENT WEIGHTED​ AVERAGE INTEREST RATES ON NEW DEPOSITS AND LOANS',
								'CompanyName': CompanyName,
								'Company': Company,
								'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
								'Form': 'N091',
								'BankDate': ReportedDate,
								'Title': u'NATIONAL BANK OF CAMBODIA'
							}
		Data 			=	[]
		DataList 		=	mktnbc.getNBCLineDetail(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj, Year=Year, Month=Month)
		SubTotal 		=	0
		TotalWeightedAmt=	0
		TotalC1 		=	0
		TotalC2 		=	0
		NetOpenPosition =	0

		TotalNetWorth 	=	N016.getNBCN016(ID, Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=Year, Month=Month)['TotalNetWorth']
		
		CMonth  =	int(Month)
		CYear 	=	int(Year)
		if CMonth == 1:
			CYear 	=	Year - 1
			CMonth  =	13
			
		CMonth  	=	CMonth - 1
		CMonth 		=	'0%s'%Month if CMonth < 10 else CMonth
		Day 		=	calendar.monthrange(Year, int(Month))[1]
		FromDate 	=	'%s-%s-01'%(CYear, CMonth)
		ToDate 		=	'%s-%s-%s'%(CYear, CMonth, Day)

		ReportingRate 	=	mktnbc.getDisplayReportingRate(CYear, CMonth, Period)

		# Loan product ID from App Setting
		NBCLoansToFIs 		 	=	mktsetting.getAppSetting('NBCLoansToFIs').split()
		NBCOverdraftConsumer 	=	mktsetting.getAppSetting('NBCOverdraftConsumer').split()
		NBCOverdraftBusiness 	=	mktsetting.getAppSetting('NBCOverdraftBusiness').split()
		NBCConsumerLoan 		=	mktsetting.getAppSetting('NBCConsumerLoan').split()
		NBCBusinessLoan 		=	mktsetting.getAppSetting('NBCBusinessLoan').split()
		NBCOtherLoan 			=	mktsetting.getAppSetting('NBCOtherLoan').split()
		
		# Get loan info by product

		Data.append({ 1:u'ប្រាក់បញ្ញើ Deposits:',  
						2:u'%s %s' %(mktmoney.formatNumber(0), "%"), 
						3:u'%s %s' %(mktmoney.formatNumber(0), "%"), 
						4:u'%s %s' %(mktmoney.formatNumber(0), "%"), 'Type':'GH'	})

		Data.append({ 1:u'1- ប្រាក់បញ្ញើចរន្ត Demand Deposits',  
						2:u'%s %s' %(mktmoney.formatNumber(0), "%"), 
						3:u'%s %s' %(mktmoney.formatNumber(0), "%"), 
						4:u'%s %s' %(mktmoney.formatNumber(0), "%"), 'Type':'LD' })

		Data.append({ 1:u'2- ប្រាក់បញ្ញើសំចៃ Saving Deposits',  
						2:u'%s %s' %(mktmoney.formatNumber(0), "%"), 
						3:u'%s %s' %(mktmoney.formatNumber(0), "%"), 
						4:u'%s %s' %(mktmoney.formatNumber(0), "%"), 'Type':'LD' })
		
		TermDeposit = 	MKT_TERM_DEPOSIT_CONTRACT.query.filter(MKT_TERM_DEPOSIT_CONTRACT.ValueDate >= FromDate).\
						filter(MKT_TERM_DEPOSIT_CONTRACT.ValueDate <= ToDate)

		Data.append({ 1:u'3- ប្រាក់បញ្ញើមានកាលកំណត់ Term Deposits:', 2:u'', 3:u'', 4:u'', 'Type':'LD' })

		TermDic 	=	getTermDeposit(TermDeposit.filter(cast(MKT_TERM_DEPOSIT_CONTRACT.Term, sqlalchemy.Integer) <= 1))

		Data.append({ 1:u'3.1- រហូតដល់​ ១​ ខែ One month or less', 
						2:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('KHR',0))), "%"), 
						3:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('USD',0))), "%"), 
						4:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('Other',0))), "%"), 'Type':'LD' })

		TermDic 	=	getTermDeposit(TermDeposit.filter(cast(MKT_TERM_DEPOSIT_CONTRACT.Term, sqlalchemy.Integer) > 1, cast(MKT_TERM_DEPOSIT_CONTRACT.Term, sqlalchemy.Integer) <= 3))
		Data.append({ 1:u'3.2- លើសពី ១ ខែ រហូតដល់ ៣ ខែ Greater than one month to three months', 
						2:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('KHR',0))), "%"), 
						3:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('USD',0))), "%"), 
						4:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('Other',0))), "%"), 'Type':'LD' })

		TermDic 	=	getTermDeposit(TermDeposit.filter(cast(MKT_TERM_DEPOSIT_CONTRACT.Term, sqlalchemy.Integer) > 3, cast(MKT_TERM_DEPOSIT_CONTRACT.Term, sqlalchemy.Integer) <= 6))
		Data.append({ 1:u'3.3- លើសពី ៣ ខែ រហូតដល់ ៦ ខែ​ Greater than three months to six months ', 
						2:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('KHR',0))), "%"), 
						3:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('USD',0))), "%"), 
						4:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('Other',0))), "%"), 'Type':'LD' })

		TermDic 	=	getTermDeposit(TermDeposit.filter(cast(MKT_TERM_DEPOSIT_CONTRACT.Term, sqlalchemy.Integer) > 6, cast(MKT_TERM_DEPOSIT_CONTRACT.Term, sqlalchemy.Integer) <= 12))
		Data.append({ 1:u'3.4- លើសពី ៦ ខែ រហូតដល់ ១ ឆ្នាំ Greater than six months to one year', 
						2:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('KHR',0))), "%"), 
						3:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('USD',0))), "%"), 
						4:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('Other',0))), "%"), 'Type':'LD' })

		TermDic 	=	getTermDeposit(TermDeposit.filter(cast(MKT_TERM_DEPOSIT_CONTRACT.Term, sqlalchemy.Integer) > 12))
		Data.append({ 1:u'3.5- លើសពី ១ ឆ្នាំ Greater than one year', 
						2:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('KHR',0))), "%"), 
						3:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('USD',0))), "%"), 
						4:u'%s %s' %(mktmoney.formatNumber(float(TermDic.get('Other',0))), "%"), 'Type':'LD' })

		Data.append({ 1:u'4- ប្រាក់បញ្ញើផ្សេងៗ Other ​​Deposits', 
						2:u'%s %s' %(mktmoney.formatNumber(0), "%"), 
						3:u'%s %s' %(mktmoney.formatNumber(0), "%"), 
						4:u'%s %s' %(mktmoney.formatNumber(0), "%"), 'Type':'LD' })

		Data.append({ 1:u'ឥណទាន Loans:', 2:u'', 3:u'', 4:u'', 'Type':'GH' })

		OverdraftConsumer 	 =	getAverageInterestRateOfLoan('', NBCOverdraftConsumer,FromDate, ToDate)
		Data.append({ 1:u'1- ឥណទានវិបារូបន៍ -​ ទៅអ្នកប្រើប្រាស់ Overdraft - Consumer', 
						2:u'%s %s' %(mktmoney.formatNumber(float(OverdraftConsumer.get('KHR',{'N':0})['N']+OverdraftConsumer.get('KHR',{'Y':0})['Y']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(OverdraftConsumer.get('USD',{'N':0})['N']+OverdraftConsumer.get('USD',{'Y':0})['Y']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(OverdraftConsumer.get('Other',{'N':0})['N']+OverdraftConsumer.get('Other',{'Y':0})['Y']), 1, 2), "%"), 'Type':'LD' })

		OverdraftBusiness 	 =	getAverageInterestRateOfLoan('', NBCOverdraftBusiness ,FromDate, ToDate)
		Data.append({ 1:u'2- ឥណទានវិបារូបន៍ -​ ទៅធុរកិច្ច Overdraft - Business', 
						2:u'%s %s' %(mktmoney.formatNumber(float(OverdraftBusiness.get('KHR',{'N':0})['N']+OverdraftBusiness.get('KHR',{'Y':0})['Y']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(OverdraftBusiness.get('USD',{'N':0})['N']+OverdraftBusiness.get('USD',{'Y':0})['Y']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(OverdraftBusiness.get('Other',{'N':0})['N']+OverdraftBusiness.get('Other',{'Y':0})['Y']), 1, 2), "%"), 'Type':'LD' })

		Data.append({ 1:u'3- ប័ណ្ណឥណទាន Credit Card', 2:u'', 3:u'', 4:u'', 'Type':'LD' })
		Data.append({ 1:u'4- ឥណទានចំពោះគ្រឹះស្ថានហិរញ្ញវត្ថុ Loans to FIs:', 2:u'', 3:u'', 4:u'', 'Type':'LD' })

		NBCLoansToFIs 	=	getAverageInterestRateOfLoan('', NBCLoansToFIs ,FromDate, ToDate, Condition=('Term','<=', 1))
		Data.append({ 1:u'4.1- រហូតដល់​ ១​ ខែ One month or less', 
						2:u'%s %s' %(mktmoney.formatNumber(float(NBCLoansToFIs.get('KHR',{'N':0})['N']+NBCLoansToFIs.get('KHR',{'Y':0})['Y']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(NBCLoansToFIs.get('USD',{'N':0})['N']+NBCLoansToFIs.get('USD',{'Y':0})['Y']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(NBCLoansToFIs.get('Other',{'N':0})['N']+NBCLoansToFIs.get('Other',{'Y':0})['Y']), 1, 2), "%"), 'Type':'LD' })

		NBCLoansToFIs 	=	getAverageInterestRateOfLoan('', NBCLoansToFIs ,FromDate, ToDate, Condition=('Term','>', 1))
		Data.append({ 1:u'4.2- លើសពី ១ ខែ Greater than one month', 
						2:u'%s %s' %(mktmoney.formatNumber(float(NBCLoansToFIs.get('KHR',{'N':0})['N']+NBCLoansToFIs.get('KHR',{'Y':0})['Y']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(NBCLoansToFIs.get('USD',{'N':0})['N']+NBCLoansToFIs.get('USD',{'Y':0})['Y']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(NBCLoansToFIs.get('Other',{'N':0})['N']+NBCLoansToFIs.get('Other',{'Y':0})['Y']), 1, 2), "%"), 'Type':'LD' })

		Data.append({ 1:u'5- ឥណទានមានកាលកំណត់ - ទៅអ្នកប្រើប្រាស់ Term Loans - Consumer:', 2:u'', 3:u'', 4:u'', 'Type':'LD' })

		Data.append({ 1:u'5.1- មិនមានការធានា Unsecured:', 2:u'', 3:u'', 4:u'', 'Type':'LD' })
		
		ConsumerListLess =	getAverageInterestRateOfLoan('N', NBCConsumerLoan ,FromDate, ToDate)
		ConsumerListMore =	getAverageInterestRateOfLoan('Y', NBCConsumerLoan,FromDate, ToDate)
		# print ConsumerListMore,'ConsumerListMore',ConsumerListLess
		Data.append({
						1:u'5.1.1- រហូតដល់​ ១​ ឆ្នាំ One year or less ',
						2:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListLess.get('KHR',{'N':0})['N']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListLess.get('USD',{'N':0})['N']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListLess.get('Other',{'N':0})['N']), 1, 2), "%"),
						'Type':'LD'
					})

		Data.append({
						1:u'5.1.2- លើសពី ១ ឆ្នាំ Greater than one year',
						2:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListMore.get('KHR',{'N':0})['N']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListMore.get('USD',{'N':0})['N']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListMore.get('Other',{'N':0})['N']), 1, 2), "%"),
						'Type':'LD'
					})

		Data.append({ 1:u'5.2- មានការធានា Secured:', 2:u'', 3:u'', 4:u'', 'Type':'LD' })

		Data.append({
						1:u'5.2.1- រហូតដល់​ ១​ ឆ្នាំ One year or less ',
						2:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListLess.get('KHR',{'Y':0})['Y']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListLess.get('USD',{'Y':0})['Y']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListLess.get('Other',{'Y':0})['Y']), 1, 2), "%"),
						'Type':'LD'
					})

		Data.append({
						1:u'5.2.2- លើសពី ១ ឆ្នាំ Greater than one year',
						2:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListMore.get('KHR',{'Y':0})['Y']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListMore.get('USD',{'Y':0})['Y']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(ConsumerListMore.get('Other',{'Y':0})['Y']), 1, 2), "%"),
						'Type':'LD'
					})

		Data.append({ 1:u'6- ឥណទានមានកាលកំណត់ - ទៅធុរកិច្ច Term Loans - Business:', 2:u'', 3:u'', 4:u'', 'Type':'LD' })
		Data.append({ 1:u'6.1- មិនមានការធានា Unsecured:', 2:u'', 3:u'', 4:u'', 'Type':'LD' })

		BusinessListLess=	getAverageInterestRateOfLoan('N', NBCBusinessLoan,FromDate, ToDate)
		BusinessListMore=	getAverageInterestRateOfLoan('Y', NBCBusinessLoan,FromDate, ToDate)
		# print BusinessListLess, 'BusinessListLess',BusinessListMore
		Data.append({
						1:u'6.1.1- រហូតដល់​ ១​ ឆ្នាំ One year or less ',
						2:u'%s %s' %(mktmoney.formatNumber(float(BusinessListLess.get('KHR',{'N':0})['N']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(BusinessListLess.get('USD',{'N':0})['N']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(BusinessListLess.get('Other',{'N':0})['N']), 1, 2), "%"),
						'Type':'LD'
					})

		Data.append({
						1:u'6.1.2- លើសពី ១ ឆ្នាំ Greater than one year',
						2:u'%s %s' %(mktmoney.formatNumber(float(BusinessListMore.get('KHR',{'N':0})['N']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(BusinessListMore.get('USD',{'N':0})['N']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(BusinessListMore.get('Other',{'N':0})['N']), 1, 2), "%"),
						'Type':'LD'
					})

		Data.append({ 1:u'6.2- មានការធានា Secured:', 2:u'', 3:u'', 4:u'', 'Type':'LD' })

		Data.append({
						1:u'6.2.1- រហូតដល់​ ១​ ឆ្នាំ One year or less ',
						2:u'%s %s' %(mktmoney.formatNumber(float(BusinessListLess.get('KHR',{'Y':0})['Y']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(BusinessListLess.get('USD',{'Y':0})['Y']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(BusinessListLess.get('Other',{'Y':0})['Y']), 1, 2), "%"),
						'Type':'LD'
					})

		Data.append({
						1:u'6.2.2- លើសពី ១ ឆ្នាំ Greater than one year',
						2:u'%s %s' %(mktmoney.formatNumber(float(BusinessListMore.get('KHR',{'Y':0})['Y']), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(BusinessListMore.get('USD',{'Y':0})['Y']), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(BusinessListMore.get('Other',{'Y':0})['Y']), 1, 2), "%"),
						'Type':'LD'
					})

		OtherListLess	=	getAverageInterestRateOfLoan('N', NBCOtherLoan, FromDate, ToDate)
		OtherListMore	=	getAverageInterestRateOfLoan('Y', NBCOtherLoan, FromDate, ToDate)
		KHR 	=	OtherListLess.get('KHR',{'Y':0})['Y'] + OtherListLess.get('KHR',{'N':0})['N'] + OtherListMore.get('KHR',{'Y':0})['Y'] + OtherListMore.get('KHR',{'N':0})['N']
		USD 	=	OtherListLess.get('USD',{'Y':0})['Y'] + OtherListLess.get('USD',{'N':0})['N'] + OtherListMore.get('USD',{'Y':0})['Y'] + OtherListMore.get('USD',{'N':0})['N']
		Other 	=	OtherListLess.get('Other',{'Y':0})['Y'] + OtherListLess.get('Other',{'N':0})['N'] + OtherListMore.get('Other',{'Y':0})['Y'] + OtherListMore.get('Other',{'N':0})['N']
		Data.append({
						1:u'7- ឥណទានផ្សេងៗ Other​ Loans',
						2:u'%s %s' %(mktmoney.formatNumber(float(KHR), 1, 2), "%"),
						3:u'%s %s' %(mktmoney.formatNumber(float(USD), 1, 2), "%"),
						4:u'%s %s' %(mktmoney.formatNumber(float(Other), 1, 2), "%"),
						'Type':'LD'
					})

		Result 	=	{
			'ReportHeader'	: ReportHeader,
			'ColumnHeader'	: 'ColumnHeader',
			'Data'			: Data,
			'Type'			: 'Type',
			'ReportingRate'	: '%s' %(mktmoney.formatNumber(float(ReportingRate), 1, 2)),
		}

		return Result

	except Exception, e:
		raise

def getTermDeposit(TermDeposit):
	TermDeposit =	TermDeposit.all()
	DepositList = 	{}
	Data 		= 	{}
	TermProductObj 	=	MKT_TERM_DEPOSIT_PRODUCT.query

	if TermDeposit:
		for t in TermDeposit:
			TermProductRecord 	=	TermProductObj.get(t.AccountProduct)
			if TermProductRecord:
				InterestRateObj =	db.session.query(
										MKT_PER_INTEREST.ID,
										MKT_PER_INTEREST_DE.Term,
										MKT_PER_INTEREST_DE.Rate,
									).join(MKT_PER_INTEREST_DE, MKT_PER_INTEREST_DE.ID == MKT_PER_INTEREST.ID).\
									filter(cast(MKT_PER_INTEREST_DE.Term, sqlalchemy.Integer) == t.Term).\
									filter(MKT_PER_INTEREST.ID == '%s%s'%(TermProductRecord.InterestKey, t.Currency)).first()

				if InterestRateObj:
					# {Currency: {'AmountList':[], 'Total':0} }
					AmountList = LoanList.get(item.Currency,{'AmountList':[], 'Total':0})
					AmountList.update({'Total':AmountList.get('Total',0) + item.Amount}) 
					AmountList['AmountList'].append(Decimal(InterestRateObj.Rate) * item.Amount)
					DepositList.update({item.Currency: AmountList})

		for k,l in DepositList.iteritems():
			Currency = k
			Percentage = sum(l.get('AmountList', [])) / l['Total']

			if not k in ['KHR', 'USD']:
				Currency 	= 'Other'
				Percentage 	= Percentage + Data.get(k,0)

			Data.update({Currency: Percentage})

	return Data

def getAverageInterestRateOfLoan(MoreThanOneYear='', ListGroup=[], FromDate='', ToDate='', Condition=()):
	try:
		
		# Query LC Information by Term
		LoanObj 	=	db.session.query(
							MKT_LOAN_CONTRACT.ID,
							MKT_LOAN_CONTRACT.Currency,
							MKT_LOAN_CONTRACT.InterestRate,
							MKT_LOAN_CONTRACT.Disbursed,
							MKT_LOAN_CONTRACT.LoanApplicationID
						).\
						filter(MKT_LOAN_CONTRACT.MoreThanOneYear == MoreThanOneYear).\
						filter(MKT_LOAN_CONTRACT.ValueDate >= FromDate).\
						filter(MKT_LOAN_CONTRACT.ValueDate <= ToDate).\
						filter(MKT_LOAN_CONTRACT.LoanProduct.in_(ListGroup))

		if MoreThanOneYear:
			LoanObj =	LoanObj.filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y')

		if Condition:
			LoanObj =	eval('LoanObj.filter(cast(MKT_LOAN_CONTRACT.%s , sqlalchemy.Integer) %s %s)'%Condition)
						
		LoanObj 	=	LoanObj.all()
		ListLoan 	=	{}
		LoanList 	=	{}
		Data 		= 	{}

		if LoanObj:

			for item in LoanObj:

				Disbursed 	=	item.Disbursed
				Secured 	=	"Y"
				# SecureObj 	=	MKT_GUARANTOR.query.\
				# 				filter(or_(MKT_GUARANTOR.ID == item.ID, MKT_GUARANTOR.ID == item.LoanApplicationID))

				# if not SecureObj:
					
				SecureObj 	=	MKT_COLLATERAL.query.\
								filter(or_(MKT_COLLATERAL.ID == item.ID, MKT_COLLATERAL.ID == item.LoanApplicationID))
				# print SecureObj.first(), item.ID
				if not SecureObj.first():
					Secured = "N"

				# {Currency: { Secured: {'AmountList':[], 'Total':0} }}
				DicCurrency = 	LoanList.get(item.Currency,{})
				AmountList 	= 	DicCurrency.get(Secured,{'AmountList':[], 'Total':0})
				AmountList.update({'Total':AmountList.get('Total',0) + item.Disbursed}) 
				AmountList['AmountList'].append(Decimal(item.InterestRate) * item.Disbursed)
				DicCurrency.update({Secured:AmountList})
				LoanList.update({item.Currency: DicCurrency})
				
			for k,l in LoanList.iteritems():
				Currency = k
				Y = l.get('Y',{'AmountList':[], 'Total':1})
				Y = sum(Y['AmountList']) / Y['Total']
				N = l.get('N',{'AmountList':[], 'Total':1})
				N = sum(N['AmountList']) / N['Total']
				if not k in ['KHR', 'USD']:
					Currency = 'Other'
					Y = Y + Data.get(Currency,{'Y':0}['Y']) 
					N = N + Data.get(Currency,{'N':0}['N']) 
				Data.update({Currency:{'Y':Y, 'N':N }})

		return Data

	except Exception, e:
		raise


def getWorksheetN018(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
	try:
		# Add a bold format to use to highlight cells.
		bold 		= workbook.add_format({'font_name':'Arial','bold': True})
		boldcenter 	= workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
		right 		= workbook.add_format({'font_name':'Arial','bold': True, 'align': 'right','font_name':'Arial'})
		
		styleHeader 	= workbook.add_format({
			'font_name':'Arial',
			'align': 'center',
			'valign': 'vcenter',
			'border': 6,
			'bold':True,
			# 'bg_color':'#CCCCCC'
		})
		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'align': 'left',
		}
		if Year and Month:
			CYear = Year
			CMonth = Month
		getData = getNBCN018('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
		Header 	= getData['ReportHeader']
		NBCExchangeRate 	=	getData['ReportingRate']
		# Write some data headers.
		# worksheet.merge_range('A2:H2', Header['Title'], boldcenter)
		worksheet.merge_range('A2:H2', u'របាយការណ៍ប្រចាំខែស្តីពីការតាមដានមធ្យមភាគអត្រាការប្រាក់ក្រោយថ្លឹងចំពោះប្រាក់បញ្ញើនិងឥណទានថ្មីៗ', boldcenter)
		worksheet.merge_range('A3:H3', Header['ReportName'], boldcenter)

		# worksheet.merge_range('A4:H4', u"%s: %s" %(mktmessage.getNBCLang(Language, '110003'), mktdate.toDateShort(Header['AsAt'], 'KH') ), boldcenter)
		worksheet.merge_range('A4:H4', u"%s: %s" %(u'កាលបរិច្ឆេទ', mktdate.toDateShort(Header['BankDate'], 'KH', Format=2) ), boldcenter)
		worksheet.merge_range('A5:H5', u"%s: %s" %(mktmessage.getNBCLang(Language, '110003'), Header['AsAt']), boldcenter)
		

		worksheet.merge_range('A7:E7', u"%s: %s" %(u'ឈ្មោះគ្រឹះស្ថាន​', Header['Company'].LocalName), bold)
		worksheet.merge_range('A8:E8', u"%s: %s" %(mktmessage.getNBCLang(Language, '110002'), Header['CompanyName']), bold)
		# worksheet.merge_range('A6:E6', u"%s: %s" %(mktmessage.getNBCLang(Language, '110003'), Header['AsAt']), bold)
		worksheet.merge_range('F7:H7', u'(Weighted Average Interest Rates %)', boldcenter)
		worksheet.write('F8', u'(%)', boldcenter)
		worksheet.write('G8', u'(%)', boldcenter)
		worksheet.write('H8', u'(%)', boldcenter)
		
		# worksheet.write('H7', u"%s %s" %("(Exchange Rate 1US$) = ", getData['ReportingRate']), right)

		worksheet.merge_range('A10:E11', u'ប្រភេទគណនី (១) \nTypes of Accounts​ (1)', styleHeader )
		worksheet.merge_range('F10:F11', u'រៀល​(២) \nKHR (2)', styleHeader )
		worksheet.merge_range('G10:G11', u'ដុល្លារអាមេរិក(៣) \nUSD​ (3)', styleHeader )
		worksheet.merge_range('H10:H11', u'រួបិយប័ណ្ណផ្សេង(៤) \nOther FCs (4)', styleHeader )
		# worksheet.write('G9', u'ដុល្លារអាមេរិក(៣) \nUSD​ (3)', styleHeader)
		# worksheet.write('H9', u'រួបិយប័ណ្ណផ្សេង(៤) \nOther FCs (4)', styleHeader)
		# Some data we want to write to the worksheet.

		worksheet.set_row(9, 25)
		worksheet.set_row(10, 25)
		worksheet.set_column('A:A', 5)
		worksheet.set_column('B:B', 5)
		worksheet.set_column('C:C', 5)
		worksheet.set_column('D:D', 5)
		worksheet.set_column('E:E', 50)
		worksheet.set_column('F:F', 20)
		worksheet.set_column('G:G', 20)
		worksheet.set_column('H:H', 20)

		Data = getData['Data']

		# Start from the first cell below the headers.
		row = 11
		
		# Iterate over the data and write it out row by row.
		DicStyle = {
			'valign': 'vcenter',
			'align': 'left',
			'border':1,
			'font_name':'Arial',
			'text_wrap': 1
		}
		format 		= workbook.add_format(DicStyle)

		for item in Data:
			# col = 0
			# print item
			if item['Type'] == 'GH':

				count = item[1].split('-')[0].count('.')

				format1 = {
					'valign': 'vcenter',
					'align': 'left',
					'border':1,
					'font_name':'Arial',
					'bold': True
				}

				format1 = workbook.add_format(format1)

				worksheet.merge_range(row, count, row + 2, 7, item[1], format1)
				row += 2
				worksheet.write(row, 5, item[2], format)
				worksheet.write(row, 6, item[3], format)
				worksheet.write(row, 7, item[4], format)

			else:

				count = item[1].split('-')[0].count('.')
				worksheet.merge_range(row, count, row, 4, item[1], format)
				worksheet.write(row, 5, item[2], format)
				worksheet.write(row, 6, item[3], format)
				worksheet.write(row, 7, item[4], format)

			row += 1

		BolderStyle = workbook.add_format({
			'valign': 'vcenter',
			'bold':True,
			'font_name':'Arial',
		})

		row += 1

		worksheet.write('A%s' %row, u'Note:', BolderStyle)
		row += 1
		worksheet.write('A%s' %row, u'    - បាយការណ៍នេះសំដៅទទួលព័ត៌មានស្តីពីប្រាក់បញ្ញើនិងឥណទានជារួម ')
		row += 1
		worksheet.write('A%s' %row, u'      This report collects information on common deposit and loan products.')
		row += 1
		worksheet.write('A%s' %row, u'    - អត្រាការប្រាក់ត្រូវតែឆ្លុះបញ្ចាំងពីប្រាក់បញ្ញើនិងឥណទានដែលបានផ្តល់​ និង/ឬ ដែលបានធ្វើកិច្ចសន្យាក្នុងអំឡុងពេលខែចុងក្រោយ')
		row += 1
		worksheet.write('A%s' %row, u'      Rates should reflect those offered and/or contracted only during the most previous month.')
		row += 1
		worksheet.write('A%s' %row, u'    - អត្រាការប្រាក់ត្រូវតែរាយការណ៍ជាមធ្យមភាគក្រោយថ្លឹង​')
		row += 1
		worksheet.write('A%s' %row, u'      Rates should be weighted average for month.')
		row += 1
		worksheet.write('A%s' %row, u'    - ប្រសិនបើពុំមានផ្តល់ប្រាក់បញ្ញើនិងឥណទានលើប្រភេទណាមួយនោះទេ ត្រូវ​ទុក​ប្រអប់អិចសេលទំនេរ')
		row += 1
		worksheet.write('A%s' %row, u'      If no products were offered in a particular category, please Leave the cell blank.')
		
		center = workbook.add_format({'align':'center'})
		row += 2
		worksheet.merge_range(row, 1, row, 3, u'នាយក', center)
		worksheet.merge_range(row+1, 1, row+1, 3, u'CEO/Director', center)

		worksheet.write(row, 4, u'អ្នកពិនិត្យ', center)
		worksheet.write(row+1, 4, u'Verified By', center)

		worksheet.merge_range(row, 6, row, 7, u'ភ្នំពេញ %s'%mktdate.toDateShort(Header['BankDate'], 'KH', Format=1), center)
		worksheet.merge_range(row+1, 6, row+1, 7, u'Reporting Date:', center)
		worksheet.merge_range(row+2, 6, row+2, 7, u'អ្នកធ្វើតារាង', center)
		worksheet.merge_range(row+3, 6, row+3, 7, u'Prepared by ', center)



	except Exception, e:
		raise

