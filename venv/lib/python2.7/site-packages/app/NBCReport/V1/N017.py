# -*- coding: utf-8 -*-
'''
Report Name: Net Open Position
'''

from app.mktcore.imports 		import *
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
import app.tools.mktdate 		as mktdate
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmoney 		as mktmoney
import app.tools.mktnbc			as mktnbc
import app.tools.mktgl 			as mktgl
import app.tools.mktmessage 	as mktmessage
import N016 					as N016
from decimal 					import Decimal



@app.route("/Morakot/Report/N017/")
@checkLogOutSession
@checkLogOutTime
def getNBCReportN017():
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N017/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		getAccSetting 	=	mktsetting.getAccSetting()
		Currency 		=	'USD'
		BaseCurrency 	=	getAccSetting.BaseCurrency
		ID 				= 	'N017'
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get("Period") if "Period" in request.args else 6
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

		Month   =   request.args.get("Month") if 'Month' in request.args else ""
		Year    =   request.args.get("Year") if 'Year' in request.args else ""

		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

		if Year:
			GroupMonth 	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Condition = []
		if Year and Month:
			GLTable   = MKT_GL_BALANCE_BACKUP
			Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month]
			CYear 	  = Year
			CMonth 	  = Month
		else:
			GLTable   = MKT_GL_BALANCE
			BankDate  = mktdate.getBankDate()
			CYear 	  = BankDate.year
			CMonth 	  = BankDate.month

		GLObj   =   GLTable.query.filter(*Condition)

		Result 			=	getNBCN017('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
		ReportingRate   =   mktnbc.getDisplayReportingRate('', '', Period)

		html = "nbc/nbc_nop_mfi17.html"

		return render_template(
								html,
								Result 			=	Result,
								float 			=	float,
								ReportingRate 	=	ReportingRate,
								Currency 		=	Currency,
								BaseCurrency 	=	BaseCurrency,
								mktmoney 		=	mktmoney,
								toMoney 		=	mktmoney.toMoney,
								getCurrencyObj 	=	mktmoney.getCurrencyObj,
								Branch 			=	Branch,
								ID 				=	ID,
								len 			=	len,
								Period 			=	Period,
								GroupYear       = 	GroupYear,
								GroupMonth      = 	GroupMonth,
								Year 			= 	Year,
								Month 			= 	Month,
								ReportedDate 	=	ReportedDate
							)

	except:
		raise

def getNBCN017(ID, Branch='HO', Period=6, ReportedDate="", GLTable='', GLObj='', Year='', Month=''):
	try:

		Language 		=	mktnbc.getDefaultLang()
		ReportHeader 	= 	{}
		CompanyName 	= 	mktnbc.getCompanyName()
		ReportHeader 	=	{
								'ReportName': u'Net Open Position',
								'CompanyName': CompanyName,
								'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
								'Form': 'N016-2',
								'Title': u'NATIONAL BANK OF CAMBODIA'
							}
		Data 			=	[]
		DataList 		=	mktnbc.getNBCLineDetail(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj, Year=Year, Month=Month)
		SubTotal 		=	0
		ReportingRate 	=	mktnbc.getDisplayReportingRate(Year, Month, Period)
		TotalWeightedAmt=	0
		TotalC1 		=	0
		TotalC2 		=	0
		TotalF1 		=	0
		TotalF2 		=	0
		TotalST 		=	0
		NetOpenPosition =	0

		TotalNetWorth 	=	N016.getNBCN016(ID, Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=Year, Month=Month)['TotalNetWorth']

		# TotalAsset 		=	mktnbc.getLineValue("AmountUSD32", DataList)
		# if TotalAsset < 0:
		# 	DisplayTA 	=	"(%s)" %mktmoney.formatNumber(float(abs(TotalAsset)), 1, 2)
		# else:
		# 	DisplayTA 	=	mktmoney.formatNumber(float(TotalAsset), 1, 2)

		# LiabilitiesCap 	=	0
		# TotalLiEq 		=	mktnbc.getLineValue("AmountUSD75", DataList)
		# LiabilitiesCap 	-=	float(TotalLiEq)
		# if LiabilitiesCap < 0:
		# 	DisplayLC 	=	"(%s)" %mktmoney.formatNumber(float(abs(LiabilitiesCap)), 1, 2)
		# else:
		# 	DisplayLC 	=	mktmoney.formatNumber(float(LiabilitiesCap), 1, 2)

		# OffBalance1 	=	0
		# OffBalance2 	=	0

		# TotalAll 		=	float(TotalAsset) + float(LiabilitiesCap) + float(OffBalance1) + float(OffBalance2)
		# if TotalAll < 0:
		# 	DisplayT 	=	"(%s)" %mktmoney.formatNumber(float(abs(TotalAll)), 1, 2)
		# else:
		# 	DisplayT 	=	mktmoney.formatNumber(float(TotalAll), 1, 2)
		
		# TotalC1 		+=	float(TotalAsset)
		# TotalC2 		+=	float(LiabilitiesCap)

		# NetOpenPosition =	0 if TotalAll <=0 else float(TotalNetWorth) / float(TotalAll)

		# Data.append({
		# 				1:u'USD',
		# 				2:u'%s' %(DisplayTA),
		# 				3:u'%s' %(DisplayLC),
		# 				4:u'%s' %(mktmoney.formatNumber(float(OffBalance1), 1, 2)),
		# 				5:u'%s' %(mktmoney.formatNumber(float(OffBalance2), 1, 2)),
		# 				6:u'%s' %(DisplayT),
		# 				7:u'%s %s' %(mktmoney.formatNumber(float(NetOpenPosition), 1, 2), "%"),
		# 				8:u'20%',
		# 				9:u'0',
		# 				'Type':''
		# 			})

		LiabilityEquityLine =	mktsetting.getAppSetting('LiabilityEquityLine')
		LiabilityEquityLine =	LiabilityEquityLine if LiabilityEquityLine else '75'

		TotalAssetLine 		=	mktsetting.getAppSetting('TotalAssetLine')
		TotalAssetLine 		=	TotalAssetLine if TotalAssetLine else '32'

		CurrencyList 		=	['USD','KHR','EUR','SGD','HKD','THB','JPY','VND']

		for c in CurrencyList:
			Asset 		=	Decimal(mktnbc.getLineValue("Amount%s%s"%(c, TotalAssetLine), DataList))
			DisplayTA 	=	mktmoney.formatNumber(float(Asset), 1, 2) if Asset >= 0 else '(%s)'%mktmoney.formatNumber(float(Asset), 1, 2)	
			
			Liabilities	=	0
			LiCa 		=	Decimal(mktnbc.getLineValue("Amount%s%s"%(c, LiabilityEquityLine), DataList))
			Liabilities	-=	LiCa
			DisplayLC 	=	mktmoney.formatNumber(float(abs(LiCa)), 1, 2) if Liabilities >= 0 else '(%s)'%mktmoney.formatNumber(float(abs(LiCa)), 1, 2)	
			
			Off1 		=	0
			Off2 		=	0
			
			Total 		=	Asset + Liabilities + Off1 + Off2
			DisplayTotal= 	'(%s)'%mktmoney.formatNumber(float(abs(Total)), 1, 2) if Total < 0 else mktmoney.formatNumber(float(abs(Total)), 1, 2)

			TotalC1 	=	Decimal(TotalC1) + Asset
			TotalC2 	=	Decimal(TotalC2) + Liabilities
			TotalF1 	=	Decimal(TotalF1) + Off1
			TotalF2 	=	Decimal(TotalF2) + Off2
			TotalST 	=	Decimal(TotalST) + Total
			RoundedTotal=   Decimal(mktmoney.formatNumber(float(Total), 1, 3))
			NetWorth 	=	RoundedTotal / Decimal(TotalNetWorth.replace(',','')) if RoundedTotal else 0
			NetWorth 	=	0 if NetWorth == 0 else NetWorth

			Data.append({
							1:c,
							2:u'%s' %(DisplayTA),
							3:u'%s' %(DisplayLC),
							4:u'%s' %(mktmoney.formatNumber(float(Off1), 1, 2)),
							5:u'%s' %(mktmoney.formatNumber(float(Off2), 1, 2)),
							6:u'%s' %(DisplayTotal),
							7:mktmoney.formatNumber(NetWorth)+' %',
							8:u'20%',
							9:u'0',
							'Type':''
						})
			
		
		if TotalC1 < 0:
			DisplayTotalC1 =	"(%s)" %(mktmoney.formatNumber(float(abs(TotalC1)), 1, 2))
		else:
			DisplayTotalC1 =	"%s" %(mktmoney.formatNumber(float(TotalC1), 1, 2))

		if TotalC2 < 0:
			DisplayTotalC2 =	"(%s)" %(mktmoney.formatNumber(float(abs(TotalC2)), 1, 2))
		else:
			DisplayTotalC2 =	"%s" %(mktmoney.formatNumber(float(TotalC2), 1, 2))

		if TotalF1 < 0:
			DisplayTotalF1 =	"(%s)" %(mktmoney.formatNumber(float(abs(TotalF1)), 1, 2))
		else:
			DisplayTotalF1 =	"%s" %(mktmoney.formatNumber(float(TotalF1), 1, 2))

		if TotalF2 < 0:
			DisplayTotalF2 =	"(%s)" %(mktmoney.formatNumber(float(abs(TotalF2)), 1, 2))
		else:
			DisplayTotalF2 =	"%s" %(mktmoney.formatNumber(float(TotalF2), 1, 2))

		if TotalST < 0:
			DisplayST =	"(%s)" %(mktmoney.formatNumber(float(abs(TotalST)), 1, 2))
		else:
			DisplayST =	"%s" %(mktmoney.formatNumber(float(TotalST), 1, 2))


		Data.append({
						1:u'Grand Total',
						2:u'%s' %DisplayTotalC1,
						3:u'%s' %DisplayTotalC2,
						4:u'%s' %DisplayTotalF1,
						5:u'%s' %DisplayTotalF2,
						6:u'%s' %DisplayST,
						7:u'%s %s' %(mktmoney.formatNumber(float(NetOpenPosition), 1, 2), "%"),
						8:u'',
						9:u'0',
						'Type':''
					})

		Data.append({
						1:u'',
						2:u'(២)',
						3:u'(៣)',
						4:u'',
						5:u'',
						6:u'(៤)',
						7:u'',
						8:u'',
						9:u'',
						'Type':''
					})

		TotalNetWorth 	=	mktmoney.formatNumber(float(TotalNetWorth), 1, 2)

		Result 	=	{
			'ReportHeader'	: ReportHeader,
			'ColumnHeader'	: 'ColumnHeader',
			'Data'			: Data,
			'Type'			: 'Type',
			'ReportingRate'	: '%s' %(mktmoney.formatNumber(float(ReportingRate), 2, 2)),
			'TotalNetWorth' : '%s' %(TotalNetWorth)
		}

		return Result

	except Exception, e:
		raise


def getWorksheetN017(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
	try:
		# Add a bold format to use to highlight cells.
		bold 		= workbook.add_format({'font_name':'Arial','bold': True})
		boldcenter 	= workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
		right 		= workbook.add_format({'font_name':'Arial','align': 'right','font_name':'Arial'})
		
		styleHeader 	= workbook.add_format({
			'font_name':'Arial',
			'align': 'center',
			'valign': 'vcenter',
			'border': 1,
			'bold':True
		})
		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'align': 'left',
		}
		if Year and Month:
			CYear = Year
			CMonth = Month
		getData = getNBCN017('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
		Header 	= getData['ReportHeader']
		NBCExchangeRate 	=	getData['ReportingRate']
		# Write some data headers.
		worksheet.merge_range('A2:I2', Header['Title'].upper(), boldcenter)
		worksheet.merge_range('A3:I3', Header['ReportName'], boldcenter)
		worksheet.write('A5', u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Header['CompanyName'].upper()))
		worksheet.write('G4', u"%s" %"(Exchange Rate 1US$) = ", right)
		worksheet.write('I4', u'%s' %getData['ReportingRate'])
		worksheet.write('A7', u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), Header['AsAt'].upper()))
		worksheet.write('G5', u"%s" %"(Banks Net Worth)", right)
		worksheet.write('I5', u"%s" %getData['TotalNetWorth'])

		# worksheet.merge_range('A10:B10', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)
		worksheet.merge_range('A11:A16', u'Currency', styleHeader)
		worksheet.merge_range('B11:E11', u'Elements after deduction of affected provisions', styleHeader)
		worksheet.write('F11', u'Net Open Position', styleHeader)
		worksheet.merge_range('G11:G16', u'Net Open Position Net Worth (%)', styleHeader)
		worksheet.merge_range('H11:H16', u'Limit %', styleHeader)
		worksheet.merge_range('I11:I16', u'Excess (1)', styleHeader)

		worksheet.write('B12', u'1', styleHeader)
		worksheet.write('C12', u'2', styleHeader)
		worksheet.write('D12', u'3', styleHeader)
		worksheet.write('E12', u'4', styleHeader)
		worksheet.write('F12', u'5', styleHeader)

		worksheet.write('B13', u'Assets', styleHeader)
		worksheet.write('C13', u'Liabilities and Capital', styleHeader)
		worksheet.write('D13', u'Currencies receivable', styleHeader)
		worksheet.write('E13', u'Currencies payable', styleHeader)
		worksheet.write('F13', u'+(long) or -(short)', styleHeader)

		worksheet.merge_range('B14:B16', u'+', styleHeader)
		worksheet.merge_range('C14:C16', u'-', styleHeader)
		worksheet.merge_range('D14:D16', u'Off Balance Sheet +', styleHeader)
		worksheet.merge_range('E14:E16', u'Off Balance Sheet -', styleHeader)
		worksheet.merge_range('F14:F16', u'(1+2+3+4)', styleHeader)
		# Some data we want to write to the worksheet.

		worksheet.set_column('A:A', 15)
		worksheet.set_column('B:B', 15)
		worksheet.set_column('C:C', 20)
		worksheet.set_column('D:D', 18)
		worksheet.set_column('E:E', 18)
		worksheet.set_column('F:F', 15)
		worksheet.set_column('G:G', 25)
		worksheet.set_column('H:H', 15)
		worksheet.set_column('I:I', 15)

		Data = getData['Data']

		# Start from the first cell below the headers.
		row = 16
		
		# Iterate over the data and write it out row by row.
		DicStyle = {
			'valign': 'vcenter',
			'align': 'left',
			'border':1,
			'font_name':'Arial',
			'text_wrap': 1
		}
		format 		= workbook.add_format(DicStyle)

		for item in Data:
			col = 0

			DicStyle = {
				'valign': 'vcenter',
				'align': 'left',
				'border':1,
				'font_name':'Arial',
				'text_wrap': 1
			}
			format 		= workbook.add_format(DicStyle)

			worksheet.write(row, col, item[1], format)

			DicStyle = {
				'valign': 'vcenter',
				'align': 'right',
				'border':1,
				'font_name':'Arial',
				'text_wrap': 1
			}

			m_format = {
				'valign': 'vcenter',
				'align': 'right',
				'border':1,
				'text_wrap': 1,
				'font_name':'Arial',
				'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'
			}

			format 		= workbook.add_format(DicStyle)
			m_cell 		= workbook.add_format(m_format)
			item[2] 	=	'-' if item[2] == '0.00' else item[2]
			item[3] 	=	'-' if item[3] == '0.00' else item[3]
			item[4] 	=	'-' if item[4] == '0.00' else item[4]
			item[5] 	=	'-' if item[5] == '0.00' else item[5]
			item[6] 	=	'-' if item[6] == '0.00' else item[6]
			item[7] 	=	'-' if item[7] == '0.00' else item[7]
			item[8] 	=	'-' if item[8] == '0.00' else item[8]
			item[9] 	=	'-' if item[9] == '0' else item[9]

			worksheet.write(row, col+1, item[2], m_cell)
			worksheet.write(row, col+2, item[3], m_cell)
			worksheet.write(row, col+3, item[4], m_cell)
			worksheet.write(row, col+4, item[5], m_cell)
			worksheet.write(row, col+5, item[6], m_cell)

			worksheet.write(row, col+6, item[7], format)
			worksheet.write(row, col+7, item[8], format)
			worksheet.write(row, col+8, item[9], format)
			# col += 1

			row += 1

		row += 2

		worksheet.write("A%s" %row, u"(1) Where there is an excess, the bank shall submit a written explanation of the origin of each excess, and the measures taken to remedy the situation")
		row += 1
		worksheet.write("A%s" %row, u"(2) Total Equal to total assets on the balance sheet")
		row += 1
		worksheet.write("A%s" %row, u"(3) Total equal to total liabilities on the balance sheet")
		row += 1
		worksheet.write("A%s" %row, u"(4) Total = Zero")

		BorderBottom = workbook.add_format({'bottom':True})
		worksheet.write(row+5, 0, u'Name:', BorderBottom)
		worksheet.write(row+6, 0, u'Position:', BorderBottom)
		worksheet.write(row+5, 7, u'Date:', BorderBottom)

	except Exception, e:
		raise
