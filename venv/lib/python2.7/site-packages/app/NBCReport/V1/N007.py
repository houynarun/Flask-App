# -*- coding: utf-8 -*-
'''
Report Name: Loan Classification, Provisioning And Delinquency Ratio
'''

from app.mktcore.imports 		import *
import app.tools.mktdate 		as mktdate
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmoney 		as mktmoney
import app.tools.mktnbc			as mktnbc
import app.tools.mktmessage 	as mktmessage
from app.LoanContract.models 	import *
from app.LoanAmendment.models 	import *
from app.Currency.models 		import MKT_CURRENCY
from app.LoanProduct.models 	import MKT_LOAN_PRODUCT
from app.InterestRate.models 	import MKT_INTEREST_RATE
from app.Account.models 		import MKT_ACCOUNT
from app.AccProduct.models 		import *

import sys
import collections
from app.LoanWriteOff.models 	import *
from decimal 					import *

@app.route('/Morakot/Report/N007', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNBCReportN007(getID=""):
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N007/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		reload(sys)
		sys.setdefaultencoding('utf-8')

		Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Period 			=	request.args.get("Period") if "Period" in request.args else 6
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

		ReportingRate   =   mktnbc.getDisplayReportingRate('', '', Period)
		Result 			= 	getN007(Branch, ReportedDate)
		html 			=	"nbc/nbc_loanclassification.html"
		ColumnHeader 	= 	{}
		ReportHeader 	= 	Result['ReportHeader']
		ColumnHeader 	= 	Result['ColumnHeader']
		Data 			= 	Result['Data']
		Language 		=	mktnbc.getDefaultLang()

		return render_template(html,
								str 			=	str,
								mktmoney 		=	mktmoney,
								float 			=	float,
								ReportingRate 	=	ReportingRate,
								ReportHeader 	=	ReportHeader,
								ColumnHeader 	=	ColumnHeader,
								Data 			=	Data,
								Language 		=	Language,
								getLang 		=	mktmessage.getNBCLang,
								ID 				=	"N007",
								Branch 			=	Branch,
								Period 			=	Period,
								ReportedDate 	=	ReportedDate
								)

	except:
		raise


def getN007(Branch, ReportedDate):
	try:

		CompanyName = 	mktnbc.getCompanyName()
		Language 	=	mktnbc.getDefaultLang()

		Result 			= 	{}
		ReportHeader 	=	{
								'ReportName': mktmessage.getNBCLang(Language, '110078'),
								'CompanyName': CompanyName,
								'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
								'Form': 'N007',
								'Title': mktmessage.getNBCLang(Language, '110001'),
								'ReportingRate': mktnbc.getDisplayReportingRate('', '', 6)
							}
		ColumnHeader	=	{	
								'background': '#e4e4e4',
							}
		Data 			= 	getLoanClassificationReport(Branch,ReportedDate)
		Result.update({'ReportHeader':ReportHeader,'ColumnHeader':ColumnHeader,'Data':Data})
		
		return Result

	except:
		raise

def getLoanClassificationReport(Branch="ALL",ReportedDate=""):
	try:
		
		RowRecord = []
		#Classification
		TotalNumberOfLoan 		= 0
		TotalOutstandingAmount 	= 0
		TotalAccrInterest 		= 0
		TotalProvAmount 		= 0
		TotalActualProvAmount 	= 0

		# End Classification

		#Write Off
		PastDue30Days 		=	0
		OutstandingAmount 	=	0
		Percentage 			= 	0
		WriteOffCurrent		= 	0
		WriteOffYTD 		= 	0

		# End Write Off
		ProvPercByClass 	= 	{	
									10:0,
									20:10,
									30:30,
									40:100}

		AssetClassList 		=	{
									10:['Standard','Standard'],
									20:['Sub-standard Past Due > 30 Days','Sub-standard Past Due > 30 Days'],
									30:['Doubtful Past Due > 60 Days','Doubtful Past Due > 180 Days'],
									40:['Loss Past Due > 90 Days','Loss Past Due > 360 Days']}
									
		LoanObj = db.session.query(
							MKT_LOAN_CONTRACT.Currency,
							MKT_LOAN_CONTRACT.AssetClass,
							MKT_LOAN_CONTRACT.MoreThanOneYear,
							func.count(MKT_LOAN_CONTRACT.ID).label('NumberOfLoan'),
							func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('OutstandingAmount'),
							func.sum(MKT_LOAN_CONTRACT.AccrInterest).label('AccrInterest')).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
						group_by(
							MKT_LOAN_CONTRACT.AssetClass,
							MKT_LOAN_CONTRACT.Currency,
							MKT_LOAN_CONTRACT.MoreThanOneYear)

		if Branch != 'ALL':
			LoanObj = LoanObj.filter(MKT_LOAN_CONTRACT.Branch.in_(Branch.split()))
		
		BankDate    =   mktdate.getBankDate()
		Year        =   BankDate.year
		Month       =   BankDate.month
		CurrencyDic = mktnbc.getNBCExchangeRate(Year, Month)

		MoreThanOneYear = {}
		LessThanOneYear = {}
		for row in LoanObj:
			# print row.Currency,row.AssetClass,row.MoreThanOneYear,row.NumberOfLoan,row.OutstandingAmount,row.AccrInterest
			AccrInterest =	0
			PrevAmount   =  0
			NumberOfLoan = int(row.NumberOfLoan)
			AKey  		 = int(row.AssetClass) if int(row.AssetClass) > 10 else 0 

			if str(row.MoreThanOneYear) == "Y":
				PrevAmountDict 	=	MoreThanOneYear.get(AKey,{})
				if PrevAmountDict:
					PrevAmount 	 = 	PrevAmountDict.get('OutstandingAmount', 0)
					AccrInterest = 	PrevAmountDict.get('AccrInterest',0)
					NumberOfLoan = PrevAmountDict.get('NumberOfLoan',0) + int(row.NumberOfLoan)

				MoreThanOneYear.update({AKey	:{
											'NumberOfLoan' 		: NumberOfLoan,
											'OutstandingAmount' : PrevAmount + Decimal(row.OutstandingAmount)*CurrencyDic[row.Currency],
											'AccrInterest' 		: AccrInterest + Decimal(row.AccrInterest)*CurrencyDic[row.Currency]}
										})
			else:
				PrevAmountDict 	=	LessThanOneYear.get(AKey,{})
				if PrevAmountDict:
					PrevAmount 	 = 	PrevAmountDict.get('OutstandingAmount', 0)
					AccrInterest = 	PrevAmountDict.get('AccrInterest',0)
					NumberOfLoan = PrevAmountDict.get('NumberOfLoan',0) + int(row.NumberOfLoan)

				LessThanOneYear.update({AKey	:{
											'NumberOfLoan' 		: NumberOfLoan,
											'OutstandingAmount' : PrevAmount + Decimal(row.OutstandingAmount)*CurrencyDic[row.Currency],
											'AccrInterest' 		: AccrInterest + Decimal(row.AccrInterest)*CurrencyDic[row.Currency]}
										})
		AssetClassList = collections.OrderedDict(sorted(AssetClassList.items()))
		#Header '1- Loans Of One Year Or Less'
		Subtotal = {}
		PastDueOver30Days = 0
		SubTitle = ['1- Loans Of One Year Or Less','2- Loans Of More Than One Year']

		for k,d in enumerate([LessThanOneYear, MoreThanOneYear]):
			RowRecord.append({ 1:SubTitle[k], 2:'', 3:'', 4:'', 5:'', 6:'', 7:'',
							'format':'font-weight: bold;',	
							'total':'yes'})
			index = 1
			SubNumberOfLoan 		= 0
			SubOutstandingAmount 	= 0
			SubAccrInterest 		= 0
			SubProvAmount 			= 0
			SubActualProvAmount		= 0

			for key in AssetClassList:
				NumberOfLoan 		= 	0
				OutstandingAmount 	= 	0
				AccrInterest 		= 	0
				ProvPerc 			= 	ProvPercByClass.get(key) 
				ProvAmount 			= 	0
				ActualProvAmount    =   0
				#loan class 0 and 10 in system is loan class 10 in NBC 
				LoanKey				=	key if key > 10 else 0 
				RowValue = d.get(LoanKey,None)
				if RowValue:
					NumberOfLoan 		= RowValue.get('NumberOfLoan',0)
					OutstandingAmount 	= RowValue.get('OutstandingAmount',0)
					AccrInterest 		= RowValue.get('AccrInterest',0)
					ProvAmount 	 		= OutstandingAmount * ProvPerc / 100
					# ActualProvPerc		=	1 if ProvPerc == 0 else ProvPerc
					ActualProvPerc		= ProvPerc
					ActualProvAmount	= OutstandingAmount * ActualProvPerc / 100

				OutstandingAmount 	/= 1000000
				AccrInterest 		/= 1000000
				ProvAmount 	 		/= 1000000
				if ActualProvAmount:
					ActualProvAmount	/= 1000000 
				
				# Store Subtoal
				SubNumberOfLoan 		+= NumberOfLoan
				SubOutstandingAmount 	+= OutstandingAmount
				SubAccrInterest 		+= AccrInterest
				SubProvAmount 			+= ProvAmount
				SubActualProvAmount		+= ActualProvAmount
				
				if key >= 20: PastDueOver30Days += OutstandingAmount

				TotalNumberOfLoan 		+= NumberOfLoan
				TotalOutstandingAmount 	+= OutstandingAmount
				TotalAccrInterest 		+= AccrInterest
				TotalProvAmount 		+= ProvAmount
				TotalActualProvAmount	+= ActualProvAmount

				RowRecord.append({
								1:'%s.%s %s'%(k+1,index,AssetClassList[key][k]),
								2:NumberOfLoan,
								3:mktmoney.formatNumber(OutstandingAmount, 1, 2),
								4:mktmoney.formatNumber(AccrInterest, 1, 2),
								5:'%s %%'%ProvPerc,
								6:mktmoney.formatNumber(ProvAmount, 1, 2),
								7:mktmoney.formatNumber(ActualProvAmount, 1, 2),
								})
				index+=1
			RowRecord.append({
							1:'SUB-TOTAL %s'%(k+1),
							2:SubNumberOfLoan,
							3:mktmoney.formatNumber(SubOutstandingAmount, 1, 2),
							4:mktmoney.formatNumber(SubAccrInterest, 1, 2),
							5:'',
							6:mktmoney.formatNumber(SubProvAmount, 1, 2),
							7:mktmoney.formatNumber(SubActualProvAmount, 1, 2),
							'format':'background: #e4e4e4; font-weight: bold;',
							'total':'yes'
							})

		RowRecord.append({
							1:'TOTAL',
							2:TotalNumberOfLoan,
							3:mktmoney.formatNumber(TotalOutstandingAmount, 1, 2),
							4:mktmoney.formatNumber(TotalAccrInterest, 1, 2),
							5:'',
							6:mktmoney.formatNumber(TotalProvAmount, 1, 2),
							7:mktmoney.formatNumber(TotalActualProvAmount, 1, 2),
							'format':'background: #e4e4e4; font-weight: bold;',
							'total':'yes'
							})


		# Find The Total of Laon Past Due 
		# LoanPastDue = 	db.session.query(
		# 					MKT_WRITE_OFF_DE.Currency,
		# 					func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('OutstandingAmount')).\
		# 				filter(MKT_LOAN_CONTRACT.AssetClass.in_(['20','30','40'])).\
		# 				filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
		# 				filter(MKT_LOAN_CONTRACT.Branch == Branch).\
		# 				group_by(MKT_WRITE_OFF_DE.Currency).all()		

		# PastDue30Days 	=	0
		# for rowPastDue in LoanPastDue:
		# 	PastDue30DaysObj = rowPastDue.OutstandingAmount
		# 	if PastDue30DaysObj:
		# 		PastDue30Days += PastDue30DaysObj * CurrencyDic[rowPastDue.Currency]

		# PastDue30Days /= 1000000

		# if PastDue30Days:
		# Find Percentage 
			# Percentage = Decimal(PastDue30Days) * 100 / TotalOutstandingAmount

		Percentage = Decimal(PastDueOver30Days) * 100 / TotalOutstandingAmount if TotalOutstandingAmount else 0

		IDList 	= 	db.session.query(MKT_LOAN_AMENDMENT.LoanID).\
								filter(MKT_LOAN_AMENDMENT.Operation == 'TMN').all()
		# IDList = [r for r, in IDList]
		# print IDList

		# Find Current Period
		EndDate 	=	str(ReportedDate)
		StartDate 	=	"%s01"%EndDate[:-2]
		CurrentPeriodObj 	= 	db.session.query(
									MKT_WRITE_OFF_DE.Currency,
									func.sum(MKT_WRITE_OFF_DE.TotWOFAmount).label('TotWOFAmount')).\
								filter(MKT_WRITE_OFF_DE.WOFDate.between(StartDate, EndDate)).\
								filter(~MKT_WRITE_OFF_DE.ID.in_(IDList)).\
								group_by(MKT_WRITE_OFF_DE.Currency).all()		

		WriteOffCurrent = 0
		for rowPeriod in CurrentPeriodObj:
			WriteOffCurrentObj = rowPeriod.TotWOFAmount
			if WriteOffCurrentObj:
				WriteOffCurrent += WriteOffCurrentObj * CurrencyDic[rowPeriod.Currency]
				# print WriteOffCurrent,'WriteOffCurrent'
				
		WriteOffCurrent /= 1000000

		# Find YearToDate
		StartYearToDate 	= 	"%s-01-01"%EndDate[:4]
		YearToDateObj 	= 	db.session.query(
								MKT_WRITE_OFF_DE.Currency,
								func.sum(MKT_WRITE_OFF_DE.TotWOFAmount).label('TotWOFAmount')).\
							filter(MKT_WRITE_OFF_DE.WOFDate.between(StartYearToDate, EndDate)).\
							filter(~MKT_WRITE_OFF_DE.ID.in_(IDList)).\
							group_by(MKT_WRITE_OFF_DE.Currency).all()

		WriteOffYTDObj = 0
		for rowToDate in YearToDateObj:
			WriteOffYTDObj = rowToDate.TotWOFAmount
			if WriteOffYTDObj:
				WriteOffYTD += float(WriteOffYTDObj) * float(CurrencyDic[rowToDate.Currency])
				# print WriteOffYTD,'WriteOffYTD'

		WriteOffYTD /= 1000000

		Other 	=	[
						{'TotalOutstandingAmount':mktmoney.formatNumber(TotalOutstandingAmount, 1, 2)},
						{'PastDue30Days':mktmoney.formatNumber(PastDueOver30Days, 1, 2)},
						{'Percentage':str(mktmoney.formatNumber(Percentage, 1, 2)) + ' %'},
						{'WriteOffCurrent':mktmoney.formatNumber(WriteOffCurrent, 1, 4)},
						{'WriteOffYTD':mktmoney.formatNumber(WriteOffYTD, 1, 4)}
					]

		Result 	=	{
			'Data':RowRecord,
			'Other':Other
		}
		# print Result
		return Result

	except:
		raise


def getWorksheetN007(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
	try:

		bold = workbook.add_format({'bold': True, 'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)'})
		boldcenter = workbook.add_format({'bold': True, 'align': 'center'})

		Header = getN007(Branch, ReportedDate)
		ReportingRate = float(Header['ReportHeader']['ReportingRate'])

		worksheet.merge_range('A2:G2', Header['ReportHeader']['Title'].upper(), boldcenter)
		worksheet.merge_range('A3:G3', Header['ReportHeader']['ReportName'].upper(), boldcenter)
		
		worksheet.write('A5',u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Header['ReportHeader']['CompanyName'].upper()))
		worksheet.write('A7',u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), Header['ReportHeader']['AsAt'].upper()))
		worksheet.write('G7', ReportingRate, bold)

		right = workbook.add_format({'align': 'right'})
		row_header_1 = workbook.add_format({
				'font_name':'Arial',
				'align': 'center',
				'valign': 'vcenter',
				'border': 1,
				'text_wrap': True,
				'bg_color':'#CCCCCC'
			})
		# Write some data headers.
		# worksheet.merge_range('A8:G8', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)
		worksheet.write('F8', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)

		# Write some data headers.
		worksheet.merge_range('A9:A11', u'%s' %mktmessage.getNBCLang(Language, '110046').upper(), row_header_1)
		worksheet.merge_range('B9:B11', u"%s" %"NUMBER OF LOANS", row_header_1)
		worksheet.merge_range('C9:C11', u'%s' %"AMOUNT OUTSTANDING", row_header_1)
		worksheet.merge_range('D9:D11', u'%s' %"ACCRUED INTEREST", row_header_1)
		worksheet.merge_range('E9:G10', u'%s' %"PROVISIONS", row_header_1)

		worksheet.merge_range('E11:F11', u'%s' %"REQUIRED", row_header_1)
		# worksheet.write('F10', '', row_header_1)
		worksheet.write('G11', u'%s' %"ACTUAL", row_header_1)

		worksheet.set_column('A:A', 35)
		worksheet.set_column('B:B', 15)
		worksheet.set_column('C:C', 12)
		worksheet.set_column('D:D', 12)
		worksheet.set_column('E:E', 10)
		worksheet.set_column('F:F', 19)
		worksheet.set_column('G:G', 19)

		# Start from the first cell below the headers.
		row 	= 	11
		Data 	= 	getLoanClassificationReport(Branch)
		# Iterate over the data and write it out row by row.
		for item in Data['Data']:
			col = 0

			if 'total' in item:

				cell_format 	=	workbook.add_format({
					'font_name':'Arial',
					'align': 'left',
					'valign': 'vcenter',
					'border': 1,
					'bg_color':'#CCCCCC'
				})
				m_format = workbook.add_format({
						'font_name':'Arial',
						'valign': 'vcenter',
						'bg_color':'#CCCCCC',
						'border': 1,
						'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
					})

				int_format = workbook.add_format({
							'font_name':'Arial',
							'valign': 'vcenter',
							'border': 1,
							'bg_color':'#CCCCCC',
							'num_format': '_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)',
						})

			else:

				cell_format 	=	workbook.add_format({
					'font_name':'Arial',
					'valign': 'vcenter',
					'border': 1
				})
				m_format = workbook.add_format({
						'font_name':'Arial',
						'valign': 'vcenter',
						'border': 1,
						'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
					})

				int_format = workbook.add_format({
							'font_name':'Arial',
							'valign': 'vcenter',
							'border': 1,
							'num_format': '_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)',
						})

			item[4] = '0' if item[4] == '' else item[4]
			item[2] = '0' if item[2] == '' else item[2]  
			item[3] = '0' if item[3] == '' else item[3]  
			item[6] = '0' if item[6] == '' else item[6]  
			item[7] = '0' if item[7] == '' else item[7]  

			worksheet.write(row, col + 0, item[1].upper(), cell_format)
			worksheet.write(row, col + 1, int(item[2]), int_format)
			worksheet.write(row, col + 2, float(str(item[3]).replace(',','')), m_format)
			worksheet.write(row, col + 3, float(str(item[4]).replace(',','')), m_format)
			worksheet.write(row, col + 4, item[5], cell_format)
			worksheet.write(row, col + 5, float(str(item[6]).replace(',','')), m_format)
			worksheet.write(row, col + 6, float(str(item[7]).replace(',','')), m_format)

			row += 1

		BorderBottom = workbook.add_format({'bottom':True})
		Align = workbook.add_format({'valign':'vcenter'})
		m_format = workbook.add_format({
						'font_name':'Arial',
						'valign': 'vcenter',
						'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
					})
		
		worksheet.merge_range('A%s:A%s'%(row+2,row+3), u'%s' %'DELIQUENCY RATIO=', Align)
		worksheet.write(row+1, 1, 'ALL LOANS PAST DUE > 30 DAYS', Align)
		worksheet.write(row+2, 1, 'TOTAL LOANS OUTSTANDING', Align)
		worksheet.write(row+1, 3, float(str(Data['Other'][1]['PastDue30Days']).replace(',','')), m_format)
		worksheet.write(row+2, 3, float(str(Data['Other'][0]['TotalOutstandingAmount']).replace(',','')), m_format)
		worksheet.merge_range('F%s:F%s'%(row+2,row+3), Data['Other'][2]['Percentage'], Align)
		
		worksheet.merge_range('A%s:A%s'%(row+5,row+6), u'LOW WRITE OFFS:', Align)
		worksheet.merge_range('B%s:B%s'%(row+5,row+6), u'CURRENT PERIOD', Align)
		worksheet.merge_range('C%s:C%s'%(row+5,row+6), float(str(Data['Other'][3]['WriteOffCurrent']).replace(',','')), m_format)
		worksheet.merge_range('D%s:E%s'%(row+5,row+6), u'YEAR TO DATE', Align)
		worksheet.merge_range('G%s:F%s'%(row+5,row+6), float(str(Data['Other'][4]['WriteOffYTD']).replace(',','')), m_format)

		BorderBottom = workbook.add_format({'bottom':True})
		worksheet.write(row+5, 0, u'Name:', BorderBottom)
		worksheet.write(row+6, 0, u'Position:', BorderBottom)
		worksheet.write(row+5, 5, u'Date:', BorderBottom)	
	except:
		raise

