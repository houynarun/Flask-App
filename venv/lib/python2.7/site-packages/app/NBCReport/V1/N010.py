
'''
LIST OF LARGE EXPOSURES
'''
from app.mktcore.imports        import *
import app.tools.mktdate            as mktdate
import app.tools.mktsetting         as mktsetting
import app.tools.mktnbc             as mktnbc
import app.tools.mktmessage         as mktmessage
import app.tools.mktmoney           as mktmoney
import N016                         as N016
from app.LoanContract.models        import *
from app.Customer.models            import *
from app.Province.models            import *
from app.GLBalance.models       import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
from decimal    import *


@app.route("/Morakot/Report/N010/")
@checkLogOutSession
@checkLogOutTime
def getNBCReportN010():
    try:
        ErrorMsg    = []
        getCheck    = checkAccess("/Morakot/Report/N010/","Search")
        if getCheck != True: 
            ErrorMsg.append(msg_error+msg_permission)
            return render_template("permission.html",ErrorMsg=ErrorMsg)

        getAccSetting   =   mktsetting.getAccSetting()
        Currency        =   'USD'
        BaseCurrency    =   getAccSetting.BaseCurrency
        ID              =   'N010'
        Branch          =   request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
        Period          =   request.args.get("Period") if "Period" in request.args else 6
        ReportedDate    =   request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

        Month   =   request.args.get("Month") if 'Month' in request.args else ""
        Year    =   request.args.get("Year") if 'Year' in request.args else ""

        GroupMonth  =   None
        GroupYear   =   db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

        if Year:
            GroupMonth  =   db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
                            group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
                            filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

        Condition = []
        if Year and Month:
            GLTable   = MKT_GL_BALANCE_BACKUP
            Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month]
            CYear     = Year
            CMonth    = Month
        else:
            GLTable   = MKT_GL_BALANCE
            BankDate  = mktdate.getBankDate()
            CYear     = BankDate.year
            CMonth    = BankDate.month

        GLObj   =   GLTable.query.filter(*Condition)

        Result          =   getNBC010('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
        ReportingRate   =   mktnbc.getDisplayReportingRate('', '', Period)
        Language        =   mktnbc.getDefaultLang()

        html = "nbc/list_of_large_exposure.html"

        return render_template(
                                html,
                                Result          =   Result,
                                float           =   float,
                                ReportingRate   =   ReportingRate,
                                ReportHeader    =   Result['ReportHeader'],
                                Currency        =   Currency,
                                BaseCurrency    =   BaseCurrency,
                                mktmoney        =   mktmoney,
                                toMoney         =   mktmoney.toMoney,
                                getCurrencyObj  =   mktmoney.getCurrencyObj,
                                Branch          =   Branch,
                                ID              =   ID,
                                len             =   len,
                                Period          =   Period,
                                GroupYear       =   GroupYear,
                                GroupMonth      =   GroupMonth,
                                Year            =   Year,
                                Month           =   Month,
                                Language      =   Language,
                                getLang         =   mktmessage.getNBCLang,
                                ReportedDate    =   ReportedDate
                            )

    except:
        raise

def getNBC010(ID, Branch, Period, ReportedDate, GLObj='', GLTable='', Year='', Month=''):
    try:
        
        Data            =   []
        Language        =   mktnbc.getDefaultLang()
        CompanyName     =   mktnbc.getCompanyName()
        ReportHeader    =   {
                                'ReportName': u'LIST OF LARGE EXPOSURES',
                                'CompanyName': CompanyName,
                                'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
                                'Form': 'N010',
                                'Title': u'NATIONAL BANK OF CAMBODIA',
                                'ReportingRate': mktsetting.getAppSetting('NBCExchangeRate')
                            }

        # Data.append({ 1:u'', 2:u'', 3:u'', 4:u'', 5:u'', 6:u'', 7:u'', 'Type':'' })

        CurrencyDic     =   mktnbc.getNBCExchangeRate(Year, Month)
        NetWorth        =   N016.getNBCN016(ID, Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=Year, Month=Month)['TotalNetWorth']
        
        LCurrencyObj    =   db.session.query(MKT_LOAN_CONTRACT.Currency).\
                            group_by(MKT_LOAN_CONTRACT.Currency).all()
                
        for LCU in LCurrencyObj:
            NetWByCurrency  =   Decimal(NetWorth) * Decimal(0.05) * 1000000 / CurrencyDic[LCU.Currency]
            LoanContractObj =   db.session.query(
                                    MKT_LOAN_CONTRACT.OutstandingAmount,
                                    MKT_LOAN_CONTRACT.ContractCustomerID,
                                    MKT_LOAN_CONTRACT.Currency,
                                    MKT_CUSTOMER.FirstNameEn,
                                    MKT_CUSTOMER.LastNameEn,
                                    MKT_CUSTOMER.Province,
                                    ).join(MKT_CUSTOMER, MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
                                filter(MKT_LOAN_CONTRACT.OutstandingAmount > NetWByCurrency).\
                                filter(MKT_LOAN_CONTRACT.Currency == LCU.Currency).all()

            ProvinceObj =   MKT_PROVINCE.query
            Counter     =   1
            TmpDic      =   {}
            Tmp         =   {}

            for lc in LoanContractObj:
                NumOfLoan   =   1
                PObj        =   ProvinceObj.get(lc.Province)
                Province    =   ''
                if PObj:
                    Province    =   PObj.LocalDescription

                Tmp    =   TmpDic.get(lc.ContractCustomerID,{})
                if Tmp:
                    NumOfLoan = 1 + Tmp.get('NumOfLoan',0)

                if lc.Currency == 'KHR':
                    Tmp.update({ 'KHR': Tmp.get('KHR', 0) + (lc.OutstandingAmount / 1000000) })
                else:
                    Tmp.update({ 'Other': Tmp.get('Other', 0) + (lc.OutstandingAmount * Decimal(CurrencyDic.get(lc.Currency,1)) / 1000000) })

                Tmp.update({ 'NumOfLoan':NumOfLoan, 'Name':'%s %s'%(lc.LastNameEn, lc.FirstNameEn), 'Province': Province })
                TmpDic.update({ lc.ContractCustomerID: Tmp })

        TKHR        =   0
        TOther      =   0
        GTotal      =   0
        TNumOfLoan  =   0
        for k, t in TmpDic.iteritems():
            KHR     =  t.get('KHR',0)
            Other   =  t.get('Other',0)
            TKHR    +=  KHR
            TOther  +=  Other
            Total   =   KHR + Other
            GTotal  +=  Total  
            TNumOfLoan  +=  t.get('NumOfLoan',0)   
            Data.append({
                1:Counter,
                2:t.get('Name'),
                3:t.get('Province',''),
                4:t.get('NumOfLoan'),
                5:mktmoney.formatNumber(KHR),
                6:mktmoney.formatNumber(Other),
                7:mktmoney.formatNumber(Total),
                'Type':''
            })
            Counter += 1

        Data.append({
                1:u'TOTAL',
                2:u'',
                3:u'',
                4:TNumOfLoan,
                5:mktmoney.formatNumber(TKHR),
                6:mktmoney.formatNumber(TOther),
                7:mktmoney.formatNumber(GTotal),
                'Type':'ST'
            })

        Result  =   {
                        'ReportHeader'  : ReportHeader,
                        'ColumnHeader'  : 'ColumnHeader',
                        'Data'          : Data
                    }

        return Result

    except Exception, e:
        raise

def getWorksheetN010(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
    try:
        
        boldcenter  =   workbook.add_format({'bold': True, 'align': 'center'})
        center      =   workbook.add_format({'align': 'center'})
        Data        =   getNBC010('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
        Header      =   Data['ReportHeader']

        worksheet.merge_range('A2:G2', Header['Title'], boldcenter)
        worksheet.merge_range('A4:G4', Header['ReportName'], boldcenter)
        worksheet.merge_range('A5:G5', u"(Loans to borrowers exceeding 5% of Institutions Net Worth)", center)
        
        worksheet.write('A7',u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Header['CompanyName'].upper()))
        worksheet.write('A9',u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), Header['AsAt'].upper()))

        right = workbook.add_format({'align': 'right'})
        row_header_1 = workbook.add_format({
                'font_name':'Arial',
                'align': 'center',
                'valign': 'vcenter',
                'border': 1,
                'text_wrap': True,
                'bg_color':'#CCCCCC'
            })

        worksheet.merge_range('A11:C12', "BORROWERS", row_header_1)
        worksheet.merge_range('D11:D14', "Number of loans", row_header_1)
        worksheet.merge_range('E11:E14', "Amounts in Riels (Millions)", row_header_1)
        worksheet.merge_range('F11:F14', "Other currencies translated into Riels", row_header_1)
        worksheet.merge_range('G11:G14', "Total in millions of Riels", row_header_1)

        worksheet.merge_range('A13:A14', u'%s' %'No.', row_header_1)
        worksheet.merge_range('B13:B14', 'Name',row_header_1)
        worksheet.merge_range('C13:C14', 'Location',row_header_1)

        worksheet.set_column('A:A', 8)
        worksheet.set_column('B:B', 25)
        worksheet.set_column('C:C', 10)
        worksheet.set_column('D:D', 15)
        worksheet.set_column('E:E', 15)
        worksheet.set_column('F:F', 15)
        worksheet.set_column('G:G', 15)

        row = 14
        headerFormat    = workbook.add_format({'bg_color':'#CCCCCC', 'border':1,'num_format':'_(* #,##0.#0_);_(* \(#,##0.#0\);_(* "-"??_);_(@_)'})
        headerFormatNum = workbook.add_format({'bg_color':'#CCCCCC', 'border':1,'num_format':'_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)'})
        liststyle       = workbook.add_format({'border':1,'num_format':'_(* #,##0.#0_);_(* \(#,##0.#0\);_(* "-"??_);_(@_)'})
        liststyleNum    = workbook.add_format({'border':1,'num_format':'_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)'})

        for item in Data['Data']:

            if item['Type'] == 'ST':

                worksheet.write(row, 0, item[1], headerFormat)
                worksheet.write(row, 1, item[2], headerFormat)
                worksheet.write(row, 2, item[3], headerFormat)
                worksheet.write(row, 3, item[4], headerFormat)
                worksheet.write(row, 4, item[5], headerFormat)
                worksheet.write(row, 5, item[6], headerFormat)
                worksheet.write(row, 6, item[7], headerFormat)

            else:

                worksheet.write(row, 0, item[1], liststyle)
                worksheet.write(row, 1, item[2], liststyle)
                worksheet.write(row, 2, item[3], liststyle)
                worksheet.write(row, 3, item[4], liststyle)
                worksheet.write(row, 4, item[5], liststyle)
                worksheet.write(row, 5, item[6], liststyle)
                worksheet.write(row, 6, item[7], liststyle)

            row += 1

        BorderBottom = workbook.add_format({'bottom':True})
        worksheet.write(row+5, 0, u'Name:', BorderBottom)
        worksheet.write(row+6, 0, u'Position:', BorderBottom)
        worksheet.write(row+5, 5, u'Date:', BorderBottom)

    except Exception, e:
        raise
