# -*- coding: utf-8 -*-
'''
Report Name: NGOs/ Micro-finance Institutions Network Information
'''

from app.mktcore.imports 		import *
import app.tools.mktdate 		as mktdate
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmoney 		as mktmoney
import app.tools.mktnbc			as mktnbc
import app.tools.mktmessage 	as mktmessage
from app.Province.models 		import *
from app.District.models 		import *
from app.Commune.models 		import *
from app.LoanContract.models 	import *
from app.AccProduct.models 		import *
from app.Employee.models 		import MKT_EMPLOYEE
from app.Customer.models 	import *


@app.route('/Morakot/Report/N011', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNBCReportN011(getID=""):
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/Report/N011/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		# Branch 			=	request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else 'ALL'
		Period 			=	request.args.get("Period") if "Period" in request.args else 6
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

		ReportingRate   =   mktnbc.getDisplayReportingRate('', '', Period)
		Result 			= 	getN011(Branch, ReportedDate)
		html 			=	"nbc/nbc_byprovince.html"
		ColumnHeader 	= 	{}
		ReportHeader 	= 	Result['ReportHeader']
		ColumnHeader 	= 	Result['ColumnHeader']
		Data 			= 	Result['Data']
		Language 		=	mktnbc.getDefaultLang()

		return render_template(html,
								str 			=	str,
								mktmoney 		=	mktmoney,
								float 			=	float,
								ReportingRate 	=	ReportingRate,
								ReportHeader 	=	ReportHeader,
								ColumnHeader 	=	ColumnHeader,
								Data 			=	Data,
								Language 		=	Language,
								getLang 		=	mktmessage.getNBCLang,
								ID 				=	"N011",
								Branch 			=	Branch,
								Period 			=	Period,
								ReportedDate 	=	ReportedDate
								)

	except:
		raise

def getN011(Branch="ALL", ReportedDate=""):
	try:

		CompanyName = 	mktnbc.getCompanyName()
		Language 	=	mktnbc.getDefaultLang()

		Result 			= 	{}
		ReportHeader 	=	{
								'ReportName': mktmessage.getNBCLang(Language, '110079'),
								'CompanyName': CompanyName,
								'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
								'Form': 'N011',
								'Title': mktmessage.getNBCLang(Language, '110001')
							}
		ColumnHeader	=	{	
								'background': '#81F7F3',
							}
		Data 			= 	getNBCReportByProvince(Branch, ReportedDate)
		Result.update({'ReportHeader':ReportHeader,'ColumnHeader':ColumnHeader,'Data':Data})
		
		return Result

	except:
		raise

def getNBCReportByProvince(Branch="ALL", ReportedDate=''):
	try:

		Language 			=	mktnbc.getDefaultLang()
		RowRecord 			=	[] # Return value
		OutstandingAmount 	=	[] # Loan Outstanding = Amount + PD for each province
		TotOutstandingAmount=	[] # Total Loan Outstanding
		DistrictDic 		=	[] # Number of district for each province
		CommuneDic 			=	[] # Number of commune for each province
		VillageDic 			=	[] # Number of village for each province
		TotalDistrict 		=	[] # Total for all district of each province
		TotalCommune 		=	[] # Total for all commune of each province
		TotalVillage 		=	[] # Total for all village of each province
		MaleDic 			=	[] # Number of customer(male) for each province
		FemaleDic			=	[] # Number of customer(female) for each province
		TotalMaleDic 		=	[] # Total for all male of each provicne
		TotalFemaleDic 		=	[] # Total for all female of each province
		DepositInRiels 		=	[] # Deposit balance of each customer for each province
		TotalDepositDic 	=	[] # Total for all customer's deposit for each provicne
		DepositMale 		=	[] # Number of customer(male)'s deposit
		DepositFemale 		=	[] # Number of customer(female)'s deposit
		TotalDepositMaleDic =	[] # Total of each customer(male)'s deposit for each provicne
		TotalDepositFemaleDic 	=	[] # Total of each customer(fmale)'s deposit for each provicne
		EmployeeMaleDic 	=	[] # Number of employee(male) for each province
		EmployeeFemaleDic 	=	[] # Number of employee(female) for each province
		TotalEmployeeMaleDic 	= 	[]
		TotalEmployeeFemaleDic	= 	[]

		BankDate    =   mktdate.getBankDate()
		Year        =   BankDate.year
		Month       =   BankDate.month
		Month 	-=	1
		if Month == 0:
			Month 	= 	12
			Year  	-= 	1

		CurrencyDic = mktnbc.getNBCExchangeRate(Year, Month)

		ProvinceObj 		=	MKT_PROVINCE.query
		# Get all loan to Object
		LoanObj 			=	db.session.query(
									MKT_LOAN_CONTRACT.ID,
									MKT_LOAN_CONTRACT.OutstandingAmount,
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_LOAN_CONTRACT.Currency,
									MKT_CUSTOMER.Province,
									MKT_CUSTOMER.District,
									MKT_CUSTOMER.Commune,
									MKT_CUSTOMER.Village,
									MKT_CUSTOMER.Gender
								).\
								join(
									MKT_CUSTOMER,
									MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID
								).\
								filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
								filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0)

		if Branch != "ALL":
			Branch 			= 	Branch.split()
			LoanObj 		=	LoanObj.\
								filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))

		# GET all external account to Object
		AccountObj 			=	db.session.query(
									MKT_ACCOUNT.ID,
									MKT_ACCOUNT.Balance,
									MKT_ACCOUNT.CustomerList,
									MKT_ACCOUNT.InterestRate,
									MKT_ACCOUNT.Currency,
									MKT_CUSTOMER.Province,
									MKT_CUSTOMER.District,
									MKT_CUSTOMER.Commune,
									MKT_CUSTOMER.Village,
									MKT_CUSTOMER.Gender
								).\
								join(
									MKT_CUSTOMER,
									MKT_CUSTOMER.ID == MKT_ACCOUNT.CustomerList
								).\
								join(
									MKT_ACC_PRODUCT,
									MKT_ACC_PRODUCT.ID == MKT_ACCOUNT.AccProduct
								).\
								filter(
									MKT_ACC_PRODUCT.ProductType == 'E'
								).\
								filter(
									MKT_ACCOUNT.InterestRate != "0"
								)
		if Branch != "ALL":
			AccountObj 		=	AccountObj.\
								filter(MKT_ACCOUNT.Branch.in_(Branch))

		# GET all number of employee to Object
		EmployeeObj 		=	MKT_EMPLOYEE.query

		if EmployeeObj:

			for item in EmployeeObj:

				EmployeeMaleDic.append({item.Province:item.Male})
				EmployeeFemaleDic.append({item.Province:item.Female})

		if AccountObj:

			for item in AccountObj:

				DepositInRiels.append({item.Province:float(item.Balance)*float(CurrencyDic[item.Currency])})

				if item.Gender == 'Male':

					DepositMale.append({
						str(item.CustomerList) + "-" + str(item.Province):'1'
					})

				if item.Gender == 'Female':

					DepositFemale.append({
						str(item.CustomerList) + "-" + str(item.Province):'1'
					})

		if LoanObj:

			for item in LoanObj:

				ID = item.ID

				DistrictDic.append({
						item.Province:item.District
					})

				CommuneDic.append({
						item.Province:item.Commune
					})

				VillageDic.append({
						item.Province:item.Village
					})

				OutstandingAmount.append({item.Province: float(item.OutstandingAmount)*float(CurrencyDic[item.Currency])})

				if item.Gender == 'Male':

					MaleDic.append({
						str(item.ContractCustomerID) + "-" + str(item.Province):'1'
					})

				if item.Gender == 'Female':

					FemaleDic.append({
						str(item.ContractCustomerID) + "-" + str(item.Province):'1'
					})

		if ProvinceObj:

			for item in ProvinceObj:

				Amount 	=	getAmountByProvince(OutstandingAmount, str(item.ID))
				Amount 	=	getDivAmount(float(mktnbc.getTotalByList(Amount)))
				TotOutstandingAmount.append(Amount)
				Amount 	=	mktmoney.formatNumber(float(Amount), 1, 2)
				
				District 	=	getCountByList(DistrictDic, str(item.ID))
				Commune 	=	getCountByList(CommuneDic, str(item.ID))
				Village 	=	getCountByList(VillageDic, str(item.ID))

				Male 		=	getCountGenderByList(MaleDic, str(item.ID))
				Female 		=	getCountGenderByList(FemaleDic, str(item.ID))
				MaleFemale 	=	int(Male) + int(Female)
				TotalMaleDic.append(Male)
				TotalFemaleDic.append(Female)

				TotalDistrict.append(District)
				TotalCommune.append(Commune)
				TotalVillage.append(Village)

				DepositAmt 	=	getTotalByProvicneFromList(DepositInRiels, str(item.ID))
				DepositAmt 	=	getDivAmount(float(DepositAmt))
				TotalDepositDic.append(DepositAmt)
				DepositAmt 	=	mktmoney.formatNumber(float(DepositAmt), 1, 2)

				DepMale 	=	getCountGenderByList(DepositMale, str(item.ID))
				DepFemale 	=	getCountGenderByList(DepositFemale, str(item.ID))
				TotalDepMaleFemale 	= 	int(DepMale) + int(DepFemale)
				TotalDepositMaleDic.append(DepMale)
				TotalDepositFemaleDic.append(DepFemale)

				EmployeeMale 	=	getEmployeeByList(EmployeeMaleDic, str(item.ID))
				EmployeeFemale 	=	getEmployeeByList(EmployeeFemaleDic, str(item.ID))
				TotalEmMaleFemale 	=	int(EmployeeMale) + int(EmployeeFemale)
				TotalEmployeeMaleDic.append(EmployeeMale)
				TotalEmployeeFemaleDic.append(EmployeeFemale)

				RowRecord.append({
								1:'%s' %getProvinceAsKh(mktmessage.getNBCLang(Language, '110000'), item.ID),
								2:District,
								3:Commune,
								4:Village,
								5:Amount,
								6:Male,
								7:Female,
								8:int(MaleFemale),
								9:DepositAmt,
								10:int(DepMale),
								11:int(DepFemale),
								12:int(TotalDepMaleFemale),
								13:int(EmployeeMale),
								14:int(EmployeeFemale),
								15:int(TotalEmMaleFemale)
							})

			TotalDistrict 			=	mktnbc.getTotalByList(TotalDistrict)
			TotalCommune 			=	mktnbc.getTotalByList(TotalCommune)
			TotalVillage 			=	mktnbc.getTotalByList(TotalVillage)
			TotOutstandingAmount 	=	mktnbc.getTotalByList(TotOutstandingAmount)
			TotalMale 				=	mktnbc.getTotalByList(TotalMaleDic)
			TotalFemale 			=	mktnbc.getTotalByList(TotalFemaleDic)
			TotalMaleFemale 		=	int(TotalMale) + int(TotalFemale)
			TotOutstandingAmount 	=	mktmoney.formatNumber(float(TotOutstandingAmount), 1, 2)
			TotalDeposit 			=	mktnbc.getTotalByList(TotalDepositDic)
			TotalDeposit 			=	mktmoney.formatNumber(float(TotalDeposit), 1, 2)
			TotalDepositMale 		=	mktnbc.getTotalByList(TotalDepositMaleDic)
			TotalDepositFemale 		=	mktnbc.getTotalByList(TotalDepositFemaleDic)
			TotalDepMaleFemale 		=	int(TotalDepositMale) + int(TotalDepositFemale)
			TotalEmployeeMale 		=	mktnbc.getTotalByList(TotalEmployeeMaleDic)
			TotalEmployeeFemale 	=	mktnbc.getTotalByList(TotalEmployeeFemaleDic)
			TotalEmpMaleFemale 		=	int(TotalEmployeeMale) + int(TotalEmployeeFemale)

			RowRecord.append({
								1:u'%s' %mktmessage.getNBCLang(Language, '700005'),
								2:int(TotalDistrict),
								3:int(TotalCommune),
								4:int(TotalVillage),
								5:TotOutstandingAmount,
								6:int(TotalMale),
								7:int(TotalFemale),
								8:int(TotalMaleFemale),
								9:TotalDeposit,
								10:int(TotalDepositMale),
								11:int(TotalDepositFemale),
								12:int(TotalDepMaleFemale),
								13:int(TotalEmployeeMale),
								14:int(TotalEmployeeFemale),
								15:int(TotalEmpMaleFemale),
								'format':'background: #99CCFF; font-weight: bold;'
							})

		return RowRecord

	except:
		raise

def getCountGenderByList(L, ID):
	try:

		NumOfRecord =	0
		Dic 		=	{}

		if len(L) > 0:

			for item in L:

				for key, value in item.iteritems():
					Customer = key.split('-')
					NewID = Customer[0] + "-" + ID
					if key in NewID and value:
						Dic.update({NewID:key})
			# print Dic
			NumOfRecord = 	len(Dic)

		return NumOfRecord

	except:
		raise


def getTotalByProvicneFromList(L, ID):
	try:

		Amount 		=	0
		Dic 		=	{}

		if len(L) > 0:

			for item in L:

				for key, value in item.iteritems():

					if key in ID and value:

						Amount += float(item[key])

		return Amount

	except:
		raise


def getCountByList(L, ID):
	try:

		NumOfRecord =	0
		Dic 		=	{}

		if len(L) > 0:

			for item in L:

				for key, value in item.iteritems():

					if key in ID and value:
						Dic.update({item[key]:key})

			NumOfRecord = 	len(Dic)

		return NumOfRecord

	except:
		raise


def getEmployeeByList(L, ID):
	try:

		NumberOfEm 	=	0
		Dic 		=	{}

		if len(L) > 0:

			for item in L:

				for key, value in item.iteritems():

					if key in ID and value:

						NumberOfEm += int(item[key])

		return NumberOfEm

	except:
		raise


def getProvinceAsKh(Type, ID):

	ListProvince 	= 	{
							"KH":{
								"01":u"បន្ទាយមានជ័យ", "02":u"បាត់ដំបង", "03":u"កំពង់ចាម",
								"04":u"កំពង់ឆ្នាំង", "05":u"កំពង់ស្ពឺ", "06":u"កំពង់ធំ",
								"07":u"កំពត", "08":u"កណ្តាល", "09":u"កោះកុង",
								"10":u"ក្រចេះ", "11":u"មណ្ឌលគិរី", "12":u"ភ្នំពេញ",
								"13":u"ព្រះវិហារ", "14":u"ព្រៃវែង", "15":u"ពោធិសាត់",
								"16":u"រតនគីរី", "17":u"សៀមរាប", "18":u"ព្រះសីហនុ",
								"19":u"ស្ទឹងត្រែង", "20":u"ស្វាយរៀង", "21":u"តាកែវ",
								"22":u"ឧត្តរមានជ័យ", "23":u"កែប", "24":u"ប៉ៃលិន",
								"25":u"ត្បូងឃ្មុំ"
							},
							"EN":{
								"01":u"Banteay Meanchey", "02":u"Battambang", "03":u"Kampong Cham",
								"04":u"Kampong Chhnang", "05":u"Kampong Speu", "06":u"Kampong Thom",
								"07":u"Kampot", "08":u"Kandal", "09":u"Koh Kong",
								"10":u"Kracheh", "11":u"Mondul Kiri", "12":u"Phnom Penh",
								"13":u"Preah Vihear", "14":u"Prey Veng", "15":u"Pursat",
								"16":u"Ratanak Kiri", "17":u"Siem Reap", "18":u"Preah Sihanouk",
								"19":u"Stung Treng", "20":u"Svay Rieng", "21":u"Takeo",
								"22":u"Otdar Meanchey", "23":u"Kep", "24":u"Pailin",
								"25":u"Tboung Khmum"
							},
						}

	return ListProvince[Type][ID]



def getAmountByProvince(L, ID):
	try:

		DicAmount 	= 	[]
		Province 	=	[]

		if len(L) > 0:

			for item in L:

				for row in item:

					if str(row) in str(ID):

						DicAmount.append(float(item[str(row)]))

		return DicAmount

	except:
		raise


def getDivAmount(Amount):
	try:
		# ReportingRate 		=	mktsetting.getAppSetting('NBCExchangeRate')
		# Amount 				*=	float(ReportingRate)
		return float(Amount) / 1000000

	except Exception, e:
		raise

def getWorksheetN011(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
	try:
		# Add a bold format to use to highlight cells.
		bold = workbook.add_format({'font_name':'Arial','bold': True,'font_name':'Arial'})
		boldcenter = workbook.add_format({'bold': True, 'align': 'center','font_name':'Arial'})
		right = workbook.add_format({'align': 'right'})
		
		styleHeader = workbook.add_format({
			'font_name':'Arial',
			'align': 'center',
			'valign': 'vcenter',
			'border': 1,
			'bg_color':'#CCCCCC'
		})
		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'align': 'left',
		}

		getData = getN011(Branch, ReportedDate)
		Header = getData['ReportHeader']
		# Write some data headers.
		worksheet.merge_range('A2:O2', Header['Title'].upper(), boldcenter)
		worksheet.merge_range('A3:O3', Header['ReportName'].upper(), boldcenter)
		
		worksheet.write('A5',u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Header['CompanyName'].upper()))
		worksheet.write('A7',u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), Header['AsAt'].upper()))

		# worksheet.merge_range('A10:O10', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)
		#Colunm Header
		worksheet.merge_range('A9:A12', u'%s' %mktmessage.getNBCLang(Language, '110062').upper(), styleHeader)
		worksheet.merge_range('B9:D9', u'%s' %mktmessage.getNBCLang(Language, '110063').upper(), styleHeader)
		
		worksheet.merge_range('B10:B12', u"%s" %mktmessage.getNBCLang(Language, '110064').upper(), styleHeader)
		worksheet.merge_range('C10:C12', u"%s" %mktmessage.getNBCLang(Language, '110065').upper(), styleHeader)
		worksheet.merge_range('D10:D12', u"%s" %mktmessage.getNBCLang(Language, '110066').upper(), styleHeader)

		worksheet.merge_range('E9:H9', u'%s' %mktmessage.getNBCLang(Language, '110067').upper(), styleHeader)
		
		worksheet.merge_range('E10:E12',u"%s" %mktmessage.getNBCLang(Language, '110020').upper(),styleHeader)
		worksheet.merge_range('F10:H10', u'%s' %mktmessage.getNBCLang(Language, '110068').upper(), styleHeader)
		
		worksheet.merge_range('F11:F12',u"%s" %mktmessage.getNBCLang(Language, '110069').upper(), styleHeader)
		worksheet.merge_range('G11:G12',u"%s" %mktmessage.getNBCLang(Language, '110070').upper(), styleHeader)
		worksheet.merge_range('H11:H12',u"%s" %mktmessage.getNBCLang(Language, '700005').upper(), styleHeader)

		worksheet.merge_range('I9:L9', u'%s' %mktmessage.getNBCLang(Language, '110071').upper(), styleHeader)
		worksheet.merge_range('I10:I12', u"%s" %mktmessage.getNBCLang(Language, '110020').upper(), styleHeader)
		worksheet.merge_range('J10:L10', u'%s' %mktmessage.getNBCLang(Language, '110072').upper(), styleHeader)
		
		worksheet.merge_range('J11:J12',u"%s" %mktmessage.getNBCLang(Language, '110069').upper(),styleHeader)
		worksheet.merge_range('K11:K12',u"%s" %mktmessage.getNBCLang(Language, '110070').upper(),styleHeader)
		worksheet.merge_range('L11:L12',u"%s" %mktmessage.getNBCLang(Language, '700005').upper(),styleHeader)

		worksheet.merge_range('M9:O11', u'%s' %mktmessage.getNBCLang(Language, '110073').upper(), styleHeader)

		worksheet.write('M12',u"%s" %mktmessage.getNBCLang(Language, '110069').upper(),styleHeader)
		worksheet.write('N12',u"%s" %mktmessage.getNBCLang(Language, '110070').upper(),styleHeader)
		worksheet.write('O12',u"%s" %mktmessage.getNBCLang(Language, '700005').upper(),styleHeader)

		# Some data we want to write to the worksheet.

		Data = getData['Data']

		# Start from the first cell below the headers.
		row = 12
		worksheet.set_column('B:B', 10)
		worksheet.set_column('C:C', 10)
		worksheet.set_column('D:D', 10)
		worksheet.set_column('E:E', 10)
		worksheet.set_column('F:F', 10)
		worksheet.set_column('G:G', 10)
		worksheet.set_column('H:H', 10)
		worksheet.set_column('I:I', 10)
		worksheet.set_column('J:J', 10)
		worksheet.set_column('K:K', 10)
		worksheet.set_column('L:L', 10)
		worksheet.set_column('M:M', 10)
		worksheet.set_column('N:N', 10)
		worksheet.set_column('O:O', 10)
		# Iterate over the data and write it out row by row.
		DicStyle = {
			'font_name':'Arial',
			'valign': 'vcenter',
			'align': 'left',
			'border':1,
			'text_wrap': 1
		}

		worksheet.set_column('A:A', 20)

		for item in Data:
			col = 0
			for key, value in item.iteritems():

				if 'format' in item:
					DicFormat 	= getDicFormat(item)
					DicFormat.update(DicStyle)
					DicFormat.update({'text_wrap': 1, 'bg_color':'#CCCCCC','font_name':'Arial'})
					format 		= workbook.add_format(DicFormat)
					formatMoney	= workbook.add_format({'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
														'text_wrap': 1,
														'border': 1,
														'bg_color':'#CCCCCC','font_name':'Arial'})

					int_cell	= workbook.add_format({'num_format':'_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)',
														'text_wrap': 1,
														'border': 1,
														'bg_color':'#CCCCCC','font_name':'Arial'})
				else:
					format 		= workbook.add_format(DicStyle)
					formatMoney	= workbook.add_format({'border': 1, 'num_format':'_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)','text_wrap': 1,'font_name':'Arial'})

					int_cell	= workbook.add_format({'num_format':'_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)',
														'text_wrap': 1,
														'border': 1,'font_name':'Arial'})

				if key !='format':
					if col and value != '':
						value = float(str(value).replace(',',''))
					if col in [4,8]: # check if col is 4 or 8 we add money format
						worksheet.write(row, col, value, formatMoney)
					elif col in [1,2,3,5,6,7,9,10,11,12,13,14]:
						worksheet.write(row, col, value, int_cell)
					else:
						worksheet.write(row, col, value, format)
					col += 1

			row += 1

		BorderBottom = workbook.add_format({'bottom':True})
		worksheet.write(row+5, 0, u'Name:', BorderBottom)
		worksheet.write(row+6, 0, u'Position:', BorderBottom)
		worksheet.write(row+5, 7, u'Date:', BorderBottom)

	except Exception, e:
		raise

def getDicFormat(value):
	Dic = {}
	if 'format' in value:
		Listformat = value['format'].split(';')
		Listformat = filter(None,Listformat)
		for row in Listformat:
			key = row.split(':')

			if key[0]=='font-weight':
				Dic.update({'bold':True})

			elif key[0]=='background':
				Dic.update({'bg_color':key[1].strip()})
	return Dic
