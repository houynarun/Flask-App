# -*- coding: utf-8 -*-
'''
Report Name: Loan Breakdown By Currency
'''

from app.mktcore.imports        import *
import app.tools.mktdate        as mktdate
import app.tools.mktsetting     as mktsetting
import app.tools.mktmoney       as mktmoney
import app.tools.mktnbc         as mktnbc
import app.tools.mktmessage     as mktmessage
from app.LoanContract.models    import *
from app.Currency.models        import MKT_CURRENCY
from app.LoanProduct.models     import MKT_LOAN_PRODUCT
from app.InterestRate.models    import MKT_INTEREST_RATE
from decimal                    import *

@app.route('/Morakot/Report/N006L', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNBCReportN006L(getID=""):
    try:

        ErrorMsg    = []
        getCheck    = checkAccess("/Morakot/Report/N006L/","Search")
        if getCheck != True: 
            ErrorMsg.append(msg_error+msg_permission)
            return render_template("permission.html",ErrorMsg=ErrorMsg)

        Branch          =   request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
        Period          =   request.args.get("Period") if "Period" in request.args else 6
        ReportedDate    =   request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

        ReportingRate   =   mktnbc.getDisplayReportingRate('', '', Period)

        Result          =   getN006L(Branch, ReportedDate)
        html            =   "nbc/nbc_loanbreakdownbycurrency.html"
        ColumnHeader    =   {}
        ReportHeader    =   Result['ReportHeader']
        ColumnHeader    =   Result['ColumnHeader']
        Data            =   Result['Data']
        Language        =   mktnbc.getDefaultLang()

        return render_template(html,
                                str             =   str,
                                mktmoney        =   mktmoney,
                                float           =   float,
                                ReportingRate   =   ReportingRate,
                                ReportHeader    =   ReportHeader,
                                ColumnHeader    =   ColumnHeader,
                                Data            =   Data,
                                Language        =   Language,
                                getLang         =   mktmessage.getNBCLang,
                                ID              =   "N006L",
                                Branch          =   Branch,
                                Period          =   Period,
                                ReportedDate    =   ReportedDate
                                )

    except:
        raise


def getN006L(Branch="ALL", ReportedDate=""):
    try:

        CompanyName =   mktnbc.getCompanyName()
        Language    =   mktnbc.getDefaultLang()

        Result          =   {}
        ReportHeader    =   {
                                'ReportName': mktmessage.getNBCLang(Language, '110076'),
                                'CompanyName': CompanyName,
                                'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
                                'Form': 'N006',
                                'Title': mktmessage.getNBCLang(Language, '110001'),
                                'ReportingRate': mktnbc.getDisplayReportingRate('', '', 6)
                            }
        ColumnHeader    =   {   
                                'background': '#81F7F3',
                            }
        Data            =   getLoanBreakDownByCurrency(Branch, ReportedDate=ReportedDate)
        Result.update({'ReportHeader':ReportHeader,'ColumnHeader':ColumnHeader,'Data':Data})
        
        return Result

    except:
        raise

def getLoanBreakDownByCurrency(Branch="ALL", ReturnRate="", ReportedDate=''):
    try:

        Language        =   mktnbc.getDefaultLang()
        
        getAccSetting   =   mktsetting.getAccSetting()
        RowRecord       =   []
        CurrencyList    =   ['KHR', 'USD', 'THB']
        KhCurrencyList  =   {
                                "KH":{'KHR':u'បា្រក់រៀល', 'USD':u'បា្រក់ដុល្លារអាមេរិក', 'THB':u'បា្រក់បាត'},
                                "EN":{'KHR':u'KHMER RIELS', 'USD':u'US DOLLARS', 'THB':u'THAI BAHTS'}
                            }
        OrderNumber     =   {'1':u'១', '2':u'២', '3':u'៣', '4':u'៤', '5':u'៥', '6':u'៦', '7':u'៧', '8':u'៨'}

        RecordObj       =   db.session.query(
                                MKT_CURRENCY.ID,
                                func.count(MKT_CURRENCY.ID).label('NumOfRecord'),
                                func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('OutstandingAmount'),
                                func.min(MKT_LOAN_CONTRACT.InterestRate).label('MinRate'),
                                func.max(MKT_LOAN_CONTRACT.InterestRate).label('MaxRate')
                            ).\
                            outerjoin(
                                MKT_LOAN_CONTRACT,
                                MKT_LOAN_CONTRACT.Currency == MKT_CURRENCY.ID
                            ).\
                            filter(MKT_CURRENCY.ID.in_(CurrencyList)).\
                            filter(MKT_LOAN_CONTRACT.DisbursedStat == 'Y').\
                            filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0)

        if Branch != "ALL":
            Branch      =   Branch.split()
            RecordObj   =   RecordObj.\
                            filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))

        RecordObj       =   RecordObj.\
                            group_by(MKT_CURRENCY.ID).\
                            order_by(MKT_CURRENCY.ID.asc())

        DataDict        =   {}

        if RecordObj:
            for item in RecordObj:
                DataDict.update({item.ID: {
                                            'OutstandingAmount': item.OutstandingAmount,
                                            'NumOfRecord': item.NumOfRecord,
                                            'MinRate': item.MinRate,
                                            'MaxRate': item.MaxRate
                                        }}) 
        i = 1
        
        BankDate        =   mktdate.getBankDate()
        Year            =   BankDate.year
        Month           =   BankDate.month
        CurrencyDic     =   mktnbc.getNBCExchangeRate(Year, Month)
        TAmountInRiel   =   0
        TNumOfRecord    =   0

        for item in CurrencyList:
            Data            =   DataDict.get(item, {})
            FCurrency       =   Data.get('OutstandingAmount',0)
            AmountInRiel    =   FCurrency * Decimal(CurrencyDic.get(item,1)) / 1000000
            NumOfRecord     =   Data.get('NumOfRecord',0)
            MinRate         =   Data.get('MinRate', '')
            MaxRate         =   Data.get('MaxRate', '')
            TAmountInRiel   +=  AmountInRiel
            TNumOfRecord    +=  NumOfRecord

            DisplayRate     =   mktnbc.getDisplayRate(MinRate,MaxRate)

            RowRecord.append({
                    1:'%s- %s' %(mktnbc.getOrderNumberKh(mktmessage.getNBCLang(Language, '110000'), str(i)), KhCurrencyList[mktmessage.getNBCLang(Language, '110000')][item]),
                    2:NumOfRecord,
                    3:u'%s' %(mktmoney.formatNumber(float(FCurrency), 2, 2)),
                    4:u'%s' %(mktmoney.formatNumber(float(AmountInRiel), 2, 2)),
                    5:u"%s" %DisplayRate,
                    6:''
                })

            i += 1
                
        RowRecord.append({
                        1:u'%s- %s' %(mktnbc.getOrderNumberKh(mktmessage.getNBCLang(Language, '110000'), str(i)), "OTHER CURRENCY"),
                        2:'0',
                        3:u'%s' %(mktmoney.formatNumber(float(0), 1, 2)),
                        4:u'%s' %(mktmoney.formatNumber(float(0), 1, 2)),
                        5:u'%s' %(''),
                        6:''
                    })
        i += 1

        RowRecord.append({
                            1:u'%s- %s' %(mktnbc.getOrderNumberKh(mktmessage.getNBCLang(Language, '110000'), str(i)), "TOTAL LOANS"),
                            2:str(int(TNumOfRecord)),
                            3:u'%s' %(''),
                            4:u'%s' %(mktmoney.formatNumber(float(TAmountInRiel), 1, 2)),
                            5:'',
                            6:'',
                            'format':'background: #99CCFF; font-weight: bold;',
                            'total':'yes'
                        })

        if ReturnRate:
            return RateStr

        return RowRecord

    except:
        raise

def getWorksheetN006L(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
    try:

        bold = workbook.add_format({'bold': True, 'num_format':'_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)'})
        boldcenter = workbook.add_format({'bold': True, 'align': 'center'})

        Header = getN006L(Branch, ReportedDate)
        ReportingRate = float(Header['ReportHeader']['ReportingRate'])

        worksheet.merge_range('A2:E2', Header['ReportHeader']['Title'].upper(), boldcenter)
        worksheet.merge_range('A3:E3', Header['ReportHeader']['ReportName'].upper(), boldcenter)
        
        worksheet.write('A5',u"%s: %s" %(mktmessage.getNBCLang(Language, '110002').upper(), Header['ReportHeader']['CompanyName'].upper()))
        worksheet.write('A7',u"%s %s" %(mktmessage.getNBCLang(Language, '110003').upper(), Header['ReportHeader']['AsAt'].upper()))
        worksheet.write('F7',ReportingRate, bold)

        right = workbook.add_format({'align': 'right'})
        row_header_1 = workbook.add_format({
                'font_name':'Arial',
                'align': 'center',
                'valign': 'vcenter',
                'border': 1,
                'text_wrap': True,
                'bg_color':'#CCCCCC'
            })
        # Write some data headers.
        worksheet.merge_range('A8:F8', u'%s' %"In Million Riels", right)

        worksheet.merge_range('A9:A11', u'%s' %mktmessage.getNBCLang(Language, '110038'), row_header_1)
        worksheet.merge_range('B9:B11', u'%s' %mktmessage.getNBCLang(Language, '110039'), row_header_1)
        worksheet.merge_range('C9:C11', u'%s' %mktmessage.getNBCLang(Language, '110040'), row_header_1)
        worksheet.merge_range('D9:D11', u'%s' %'AMOUNT OUTSTANDING (CONVERT INTO RIELS)', row_header_1)
        worksheet.merge_range('E9:E11', u'%s' %"INTEREST RATE CHARGED (indicate whether per month, per year or otherwise)", row_header_1)
        worksheet.merge_range('F9:F11', u'%s' %mktmessage.getNBCLang(Language, '110041'), row_header_1)

        worksheet.set_column('A:A', 18)
        worksheet.set_column('B:B', 16)
        worksheet.set_column('C:C', 17)
        worksheet.set_column('D:D', 35)
        worksheet.set_column('E:E', 23)
        # Start from the first cell below the headers.
        row     =   11
        Data    =   getLoanBreakDownByCurrency(Branch)
        # Iterate over the data and write it out row by row.
        for item in Data:
            col = 0

            # for key, value in item.iteritems():

            if 'total' in item:

                cell_format     =   workbook.add_format({
                    'font_name':'Arial',
                    'align': 'left',
                    'valign': 'vcenter',
                    'border': 1,
                    'bg_color':'#CCCCCC'
                })

                cell_right  =   workbook.add_format({
                    'font_name':'Arial',
                    'valign': 'vcenter',
                    'border': 1,
                    'align': 'right',
                    'bg_color':'#CCCCCC',
                    'num_format': '_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)',
                })

                m_format = workbook.add_format({
                    'font_name':'Arial',
                    'valign': 'vcenter',
                    'bg_color':'#CCCCCC',
                    'border': 1,
                    'num_format': '_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)',
                })

            else:
                cell_format     =   workbook.add_format({
                    'font_name':'Arial',
                    'valign': 'vcenter',
                    'border': 1
                })

                cell_right  =   workbook.add_format({
                    'font_name':'Arial',
                    'valign': 'vcenter',
                    'border': 1,
                    'align': 'right',
                    'num_format': '_(* #,##0_);_(* \(#,##0\);_(* "-"??_);_(@_)',
                })

                m_format = workbook.add_format({
                        'font_name':'Arial',
                        'valign': 'vcenter',
                        'border': 1,
                        'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
                    })


            worksheet.write(row, col, item[1], cell_format)
            worksheet.write(row, col + 1, int(item[2]), cell_right)
            
            if item[3] == '':
                worksheet.write(row, col + 2, item[3], m_format)
            else:
                worksheet.write(row, col + 2, float(str(item[3]).replace(',','')), m_format)

            worksheet.write(row, col + 3, float(str(item[4]).replace(',','')), m_format)
            worksheet.write(row, col + 4, item[5], cell_format)
            worksheet.write(row, col + 5, item[6], cell_format)

            row += 1

        BorderBottom = workbook.add_format({'bottom':True})
        worksheet.write(row+5, 0, u'Name:', BorderBottom)
        worksheet.write(row+6, 0, u'Position:', BorderBottom)
        worksheet.write(row+5, 4, u'Date:', BorderBottom)

    except:
        raise
