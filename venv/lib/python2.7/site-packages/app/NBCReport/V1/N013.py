'''
Report Name: LIQUIDITY RATIO FOR MICROFINANCE INSTITUTIONS

'''
from app.mktcore.imports        import *
from app.GLBalance.models       import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
import app.tools.mktdate            as mktdate
import app.tools.mktsetting         as mktsetting
import app.tools.mktmoney           as mktmoney
import app.tools.mktnbc         as mktnbc
import app.tools.mktgl              as mktgl
import app.tools.mktmessage         as mktmessage
from app.Currency.models            import *
from app.LoanContract.models            import *
from decimal import *
from sqlalchemy.sql.expression      import cast
import sqlalchemy

@app.route("/Morakot/Report/N013/")
@checkLogOutSession
@checkLogOutTime
def getNBCReportN013():
    try:
        ErrorMsg    = []
        getCheck    = checkAccess("/Morakot/Report/N013/","Search")
        if getCheck != True: 
            ErrorMsg.append(msg_error+msg_permission)
            return render_template("permission.html",ErrorMsg=ErrorMsg)

        getAccSetting   =   mktsetting.getAccSetting()
        Currency        =   'USD'
        BaseCurrency    =   getAccSetting.BaseCurrency
        ID              =   'N013'
        Branch          =   request.args.get("Branch") if "Branch" in request.args else session.get("ChangeBranch")
        Period          =   request.args.get("Period") if "Period" in request.args else 6
        ReportedDate    =   request.args.get("ReportedDate") if "ReportedDate" in request.args else mktdate.getBankDate()

        Month   =   request.args.get("Month") if 'Month' in request.args else ""
        Year    =   request.args.get("Year") if 'Year' in request.args else ""

        GroupMonth  =   None
        GroupYear   =   db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)

        if Year:
            GroupMonth  =   db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
                            group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
                            filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

        Condition = []
        if Year and Month:
            GLTable   = MKT_GL_BALANCE_BACKUP
            Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month]
            CYear     = Year
            CMonth    = Month
        else:
            GLTable   = MKT_GL_BALANCE
            BankDate  = mktdate.getBankDate()
            CYear     = BankDate.year
            CMonth    = BankDate.month

        GLObj   =   GLTable.query.filter(*Condition)

        Result          =   getNBCN013('N001', Branch, Period, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
        ReportingRate   =   mktnbc.getDisplayReportingRate('', '', Period)

        html = "nbc/nbc_n013_liquidity.html"

        return render_template(
                                html,
                                Result          =   Result,
                                float           =   float,
                                ReportingRate   =   ReportingRate,
                                Currency        =   Currency,
                                BaseCurrency    =   BaseCurrency,
                                mktmoney        =   mktmoney,
                                toMoney         =   mktmoney.toMoney,
                                getCurrencyObj  =   mktmoney.getCurrencyObj,
                                Branch          =   Branch,
                                ID              =   ID,
                                len             =   len,
                                Period          =   Period,
                                GroupYear       =   GroupYear,
                                GroupMonth      =   GroupMonth,
                                Year            =   Year,
                                Month           =   Month,
                                ReportedDate    =   ReportedDate
                            )

    except:
        raise

def getNBCN013(ID, Branch='HO', Period=6, ReportedDate="", GLTable='', GLObj='', Year='', Month=''):
    try:

        Language        =   mktnbc.getDefaultLang()
        ReportHeader    =   {}
        CompanyName     =   mktnbc.getCompanyName()
        ReportHeader    =   {
                                'ReportName': u'LIQUIDITY RATIO FOR MICROFINANCE INSTITUTIONS',
                                'CompanyName': CompanyName,
                                'AsAt': mktdate.toDateShort(ReportedDate, mktmessage.getNBCLang(Language, '110000')),
                                'Form': 'N009',
                                'Title': u'NATIONAL BANK OF CAMBODIA',
                                'ReportingRate': mktnbc.getDisplayReportingRate('', '', Period)
                            }
        Data            =   []
        # check to recalculate year and month to get currency
        if Period in [1, 2, 4, 5]:
            if Month == 1:
                Month   =   12
                Year    -=  1
            else:
                Month   -=  1

        DataList        =   mktnbc.getNBCLineDetail(ID, Branch, Period, GLTable=GLTable, GLObj=GLObj, Year=Year, Month=Month)
        SubTotal        =   0
        ReportingRate   =   mktsetting.getAppSetting('NBCExchangeRate')
        CurrencyObj     =   db.session.query(MKT_CURRENCY.ID).all()

        Data.append({
                        1:u'1- NUMERATOR: LIQUID ASSETS',
                        2:u'',
                        3:u'',
                        'Type':'GH'
                    })

        Data.append({
                        1:u'',
                        2:u'',
                        3:u'',
                        'Type':''
                    })

        ChashInHand     =   mktnbc.getLineValue("TotalKHR_2", DataList)
        SubTotal        +=  Decimal(ChashInHand)
        # ChashInHand   *=  float(ReportingRate)
        ChashInHand     =   mktmoney.formatNumber(float(ChashInHand), 1, 2)
                    
        Data.append({
                        1:u'CASH IN HAND',
                        2:u'',
                        3:u'%s' %(ChashInHand),
                        'Type':'LD'
                    })

        # DepositNBC    =   getLineValue("TotalKHR_3", DataList)
        # SubTotal  +=  float(DepositNBC)
        # # DepositNBC  *=  float(ReportingRate)
        # DepositNBC    =   mktmoney.formatNumber(float(DepositNBC), 1, 2)

        # getGLValue(row.LineValue, Branch, Period)
        CurrencyObj =   MKT_CURRENCY.query
        CurrencyDic =   mktnbc.getNBCExchangeRate(Year, Month)
        if not CurrencyDic:
            flash(msg_error+"NBC Exchange Rate isn't defined")
            return []
            
        if not CurrencyDic:
            flash(msg_error+"NBC Exchange Rate isn't defined") 
            return  {
                        'ReportHeader'  : ReportHeader,
                        'ColumnHeader'  : 'ColumnHeader',
                        'Data'          : [],
                        'Type'          : 'Type',
                        'TotalLiquidAsset': '%s' %0,
                        'VoluntarySaving': '%s' %0,
                        'DevidedResult' : '%s' %0
                    }
        # Cash that keep at NBC as USD if setting start with C it should follow by category
        DepositWithNBC          =   mktsetting.getAppSetting('DepositWithNBC')
        AmountDepositWithNBC    =   0
        if DepositWithNBC:
            if DepositWithNBC[:1] == "A":
                AmountDepositWithNBC  =   Decimal(DepositWithNBC[1:]) * CurrencyDic.get('USD', 1) / 1000000
            else:
                for c in CurrencyObj:
                    AmounNBC = mktgl.getGLValue(DepositWithNBC, Branch, Period, c.ID, GLTable=GLTable, GLObj=GLObj, FCY=True)
                    AmountDepositWithNBC  =   AmounNBC * CurrencyDic.get(c.ID, 1) / 1000000
        
        BalWithNBC  =   mktnbc.getLineValue("TotalKHR_3", DataList)
        DepositNBC  =   BalWithNBC - AmountDepositWithNBC
        SubTotal    +=  DepositNBC
        DepositNBC  =   mktmoney.formatNumber(DepositNBC, 1, 2)

        Data.append({
                        1:u'DEPOSIT WITH NBC',
                        2:u'',
                        3:u'%s' %(DepositNBC),
                        'Type':'LD'
                    })

        DepositBank     =   mktnbc.getLineValue("TotalKHR_4", DataList)
        SubTotal        +=  Decimal(DepositBank)
        # DepositBank   *=  float(ReportingRate)
        DepositBank     =   mktmoney.formatNumber(float(DepositBank), 1, 2)

        Data.append({
                        1:u'DEPOSIT WITH BANKS',
                        2:u'',
                        3:u'%s' %(DepositBank),
                        'Type':'LD'
                    })

        TotalLiquidAsset=   SubTotal
        # SubTotal      *=  float(ReportingRate)
        # TotalLiquidAsset*=    float(ReportingRate)

        Data.append({
                        1:u'SUB-TOTAL    A',
                        2:u'',
                        3:mktmoney.formatNumber(float(SubTotal), 1, 2),
                        'Type':'LD'
                    })

        Data.append({
                        1:u'MINUS',
                        2:u'',
                        3:u'',
                        'Type':'GH'
                    })

        AmountOwedNBCSetting    =   mktsetting.getAppSetting('AmountOwedNBC')
        AmountOwedNBCSetting    =   AmountOwedNBCSetting if AmountOwedNBCSetting else '321102 321101'
        TAmountOwedNBC = 0 
        for c in CurrencyObj:
            AmountOwedNBC   =   mktgl.getGLValue(AmountOwedNBCSetting, Branch, Period, c.ID, GLTable=GLTable, GLObj=GLObj, FCY=True)
            TAmountOwedNBC  +=  AmountOwedNBC * CurrencyDic.get(c.ID, 1) / 1000000
        SubTotal        +=  Decimal(TAmountOwedNBC)
            
        Data.append({
                        1:u'AMOUNTS OWED TO NBC*',
                        2:u'',
                        3:mktmoney.formatNumber(float(TAmountOwedNBC), 1, 2),
                        'Type':'LD'
                    })

        AmountOwedBankSetting    =   mktsetting.getAppSetting('AmountOwedBank')
        AmountOwedBankSetting    =   AmountOwedBankSetting if AmountOwedBankSetting else ''
        TAmountOwedBank = 0 
        if AmountOwedBankSetting:
            for c in CurrencyObj:
                AmountOwedBank   =   mktgl.getGLValue(AmountOwedBankSetting, Branch, Period, c.ID, GLTable=GLTable, GLObj=GLObj, FCY=True)
                TAmountOwedBank  +=  AmountOwedBank * CurrencyDic.get(c.ID, 1) / 1000000
        SubTotal        +=  Decimal(TAmountOwedBank)

        Data.append({
                        1:u'AMOUNTS OWED TO BANKS*',
                        2:u'',
                        3:mktmoney.formatNumber(float(TAmountOwedBank), 1, 2),
                        'Type':'LD'
                    })

        SubTotalB   =   TAmountOwedBank + TAmountOwedNBC
        Data.append({
                        1:u'SUB-TOTAL B',
                        2:u'',
                        3:mktmoney.formatNumber(float(SubTotalB), 1, 2),
                        'Type':'LD'
                    })
        Data.append({
                        1:u'NET LIQUIDITY (A-B)',
                        2:u'',
                        3:mktmoney.formatNumber(float(SubTotal - SubTotalB), 1, 2),
                        'Type':'LD'
                    })

        Data.append({
                        1:u'PLUS',
                        2:u'',
                        3:u'',
                        'Type':'GH'
                    })

        Data.append({
                        1:u'PORTION OF LOANS MATURING',
                        2:u'',
                        3:u'',
                        'Type':'LD'
                    })
        LoanObj =   db.session.query(
                        MKT_LOAN_CONTRACT.Currency,
                        func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Outstanding'),
                    ).\
                    filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
                    filter(cast(MKT_LOAN_CONTRACT.Term, sqlalchemy.Float) < 1).\
                    group_by(MKT_LOAN_CONTRACT.Currency)
        LoanAmount  =   0
        for l in LoanObj:
            LoanAmount +=   l.Outstanding * CurrencyDic.get(l.Currency,1)
        LoanAmount  /=  1000000
        TotalLiquidAsset += LoanAmount

        Data.append({
                        1:u'IN LESS THAN ONE MONTH',
                        2:u'',
                        3:mktmoney.formatNumber(float(LoanAmount), 1, 2),
                        'Type':'LD'
                    })

        Data.append({
                        1:u'LIQUID ASSETS',
                        2:u'',
                        3:u'%s' %(mktmoney.formatNumber(float(TotalLiquidAsset), 1, 2)),
                        'Type':'ST'
                    })

        Data.append({
                        1:u'',
                        2:u'',
                        3:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'',
                        2:u'',
                        3:u'',
                        'Type':''
                    })

        Data.append({
                        1:u'2-DENOMINATOR: ADJUSTED AMOUNT OF DEPOSITS',
                        2:u'',
                        3:u'',
                        'Type':'GH'
                    })

        Data.append({
                        1:u'CATEGORY OF DEPOSITS',
                        2:u'AMOUNT IN MILLIONS OF RIELS',
                        3:u'%',
                        4:u'ADJUSTED AMOUNT IN MILLIONS OF RIELS',
                        'Type':'GH'
                    })

        VoluntarySaving =   0
        VoluntarySavingSetting    =   mktsetting.getAppSetting('VoluntarySaving')
        VoluntarySavingSetting    =   VoluntarySavingSetting if VoluntarySavingSetting else ''
        TVoluntarySaving = 0 
        for c in CurrencyObj:
            VoluntarySaving   =   mktgl.getGLValue(VoluntarySavingSetting, Branch, Period, c.ID, GLTable=GLTable, GLObj=GLObj, FCY=True)
            TVoluntarySaving  +=  VoluntarySaving * CurrencyDic.get(c.ID, 1) / 1000000

        Adjusted        =   TVoluntarySaving * 25 / 100
        Data.append({
                        1:u'VOLUNTARY SAVINGS',
                        2:mktmoney.formatNumber(TVoluntarySaving,1,2),
                        3:u'25%',
                        4:mktmoney.formatNumber(Adjusted,1,2),
                        'Type':'GH'
                    })

        Data.append({
                        1:u'',
                        2:u'',
                        3:u'',
                        4:mktmoney.formatNumber(Adjusted,1,2),
                        'Type':'GH'
                    })

        Data.append({
                        1:u'3- LIQUIDITY RATION',
                        2:u'',
                        3:u'',
                        'Type':'GH'
                    })

        DevidedResult   =   0 if VoluntarySaving == 0 else float(TotalLiquidAsset) / float(VoluntarySaving)

        Result  =   {
            'ReportHeader'  : ReportHeader,
            'ColumnHeader'  : 'ColumnHeader',
            'Data'          : Data,
            'Type'          : 'Type',
            'TotalLiquidAsset': '%s' %(TotalLiquidAsset),
            'VoluntarySaving': '%s' %(TVoluntarySaving),
            'DevidedResult' : '%s' %(DevidedResult)
        }

        return Result

    except Exception, e:
        raise

def getWorksheetN013(workbook, worksheet, Language, Branch="ALL", Period=6, ReportedDate="", GLObj='', GLTable='', Year='', Month='', CYear='', CMonth=''):
    try:
        # Add a bold format to use to highlight cells.
        bold        = workbook.add_format({'font_name':'Arial','bold': True, 'num_format':'#,##0.00'})
        boldcenter  = workbook.add_format({'align': 'center','font_name':'Arial'})
        right       = workbook.add_format({'align': 'right','font_name':'Arial'})
        
        styleHeader     = workbook.add_format({
            'font_name':'Arial',
            'align': 'center',
            'valign': 'vcenter',
            # 'border': 1,
            'bottom':1,
            'top':1,
            # 'bold':True,
            'bg_color':'#CCCCCC'
        })
        DicStyle = {
            'font_name':'Arial',
            'valign': 'vcenter',
            'align': 'left',
        }
        if Year and Month:
            CYear = Year
            CMonth = Month
            
        getData = getNBCN013('N001', Branch, 6, ReportedDate, GLObj=GLObj, GLTable=GLTable, Year=CYear, Month=CMonth)
        Header  = getData['ReportHeader']
        ReportingRate = float(Header['ReportingRate'])
        # Write some data headers.

        worksheet.merge_range('A2:G2', Header['Title'], boldcenter)
        worksheet.merge_range('A3:G3', Header['ReportName'], boldcenter)
        
        worksheet.write('A5', u"%s: %s" %(mktmessage.getNBCLang(Language, '110002'), Header['CompanyName']))
        worksheet.write('A7', u"%s %s" %(mktmessage.getNBCLang(Language, '110003'), Header['AsAt']))
        worksheet.write('G8', ReportingRate, bold)

        worksheet.merge_range('A9:B10', u'PRUDENTIAL REQUIREMENT:', styleHeader)
        worksheet.merge_range('C9:F9', u'LIQUID ASSETS', styleHeader)
        worksheet.merge_range('C10:F10', u'ADJUSTED AMOUNT OF DEPOSITS', styleHeader)
        worksheet.merge_range('G9:G10', u" OR > 100%", styleHeader)

        worksheet.merge_range('A12:G12', u'(%s)' %mktmessage.getNBCLang(Language, '110009'), right)
        # Some data we want to write to the worksheet.

        worksheet.set_column('A:A', 20)
        worksheet.set_column('B:B', 35)
        worksheet.set_column('C:C', 10)
        worksheet.set_column('D:D', 10)
        worksheet.set_column('E:E', 10)

        Data = getData['Data']

        # Start from the first cell below the headers.
        row = 13
        
        # Iterate over the data and write it out row by row.
        DicStyle = {
            'font_name':'Arial',
            'valign': 'vcenter',
            'align': 'left',
            'border':1,
            'text_wrap': 1
        }
        headLineColor = workbook.add_format({'text_wrap':1, 'bg_color':'#CCCCCC','border':1,'font_name':'Arial'})
        format      = workbook.add_format(DicStyle)


        for item in Data:
            col = 0

            if item['Type'] == 'GH':
                worksheet.merge_range('A%s:B%s'%(row, row), item[1], headLineColor)
                worksheet.merge_range('C%s:D%s'%(row, row), item[2], headLineColor)
                worksheet.write(row-1, 4, item[3], headLineColor)
                if 4 in item and item[4] != '0.00':
                    worksheet.merge_range(row-1, 5,row-1, 6, item[4], headLineColor)
                else:
                    worksheet.merge_range(row-1, 5,row-1, 6, '', headLineColor)
            else:
                worksheet.write(row-1, 1, item[1], format)
                worksheet.write(row-1, 0, '', format)
                if item[3]:
                    amount = float(str(item[3]).replace(',',''))
                else:
                    amount = 0

                    format1 = workbook.add_format({'num_format': '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)', 'border':1,'font_name':'Arial'})

                worksheet.merge_range('C%s:G%s'%(row,row), amount, format1)


            row += 1

        DicStyle = {
            'font_name':'Arial',
            'valign': 'vcenter',
            'align': 'center',
            'border':1
        }

        row += 2
        format = workbook.add_format({'bottom':1,'align':'center','valign':'vcenter'})
        worksheet.merge_range('A%s:B%s'%(row-1,row), u'LIQUID ASSETS', format)
        worksheet.merge_range('A%s:B%s'%(row+1,row+2), u'ADJUSTED AMOUNT OF DEPOSITS', format)
        worksheet.merge_range('C%s:C%s'%(row,row+1), u"'=", format)
        worksheet.write('D%s'%row, mktmoney.formatNumber(float(getData['TotalLiquidAsset'])), format)
        worksheet.write('D%s'%(row+1), mktmoney.formatNumber(float(getData['VoluntarySaving'])), format)
        # worksheet.merge_range('E%s:F%s'%(row,row+1), 0 , format)
        worksheet.merge_range('E%s:F%s'%(row,row+1), mktmoney.formatNumber(float(getData['DevidedResult'])) + " %", format)

        BorderBottom = workbook.add_format({'bottom':True})
        worksheet.write(row+5, 0, u'Name:', BorderBottom)
        worksheet.write(row+6, 0, u'Position:', BorderBottom)
        worksheet.write(row+5, 5, u'Date:', BorderBottom)

    except Exception, e:
        raise
