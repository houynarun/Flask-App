from flask 						import flash
from wtforms 					import DecimalField, IntegerField
from app.mktcore.wtfimports 	import *
from .models 					import *
from .. 						import app, db

import time
import app.tools.mktdate 		as mktdate
import app.tools.mkttool 		as mkttool

from app.GL.models 				import *

def loadCompanyName():
	Company 		= 	mkttool.getCompany()
	CompanyName 	=	""
	if Company:
		CompanyName = Company.CompanyName

	return CompanyName

class FRM_NBC_REPORT(exform):

	ReportTitle 	=	TextField(requiredlabel("Report Title", "*"), [validators.Required()], default=u'NATIONAL BANK OF CAMBODIA')
	ReportName 		=	TextField(requiredlabel("Report Name", "*"), [validators.Required()])
	CompanyName 	=	TextField(requiredlabel("Company Name", "*"), [validators.Required()], default=loadCompanyName)
	AsAt 			=	DateField(requiredlabel("Report as at", "*"), [validators.Required()], default=mktdate.getBankDate)
	
	Template 		=	SelectField(
							requiredlabel("Template", "*"),
							choices = [('', '--None--'),
									   ('1', 'Balance Sheet'),
									   ('2', 'Income Statement'),
									   ('3', 'Off-Balance Sheet Items')],
							validators = [validators.Required()]
						)

	@staticmethod
	def setWidth():

		fields = [("AsAt", len3)]

		return fields

@app.route("/Morakot/NBCReportLineNumber", methods=['GET'])
def getNBCReportLineNumber():
	try:

		ReportID 	= 	request.args.get('Report') if 'Report' in request.args else ""
		LineNumber 	= 	1

		LineReport 	= 	MKT_NBC_REPORT_DE.query.\
						filter(MKT_NBC_REPORT_DE.Report == ReportID)

		if LineReport:
			LineNumber 	= 	LineReport.\
							count()

			LineNumber 	=	int(LineNumber) + 1

		return jsonify(LineNumber=str(LineNumber))

	except:
		raise

def loadBNCReport():
	try:

		return MKT_NBC_REPORT.query

	except:
		raise

class FRM_NBC_REPORT_DE(exform):

	Report 			=	QuerySelectField(
							requiredlabel("Report Name", "*"),
							query_factory	= loadBNCReport,
							get_label		= u'ReportName',
							allow_blank		= True,
							blank_text		= u'--Choose Line Report--',
							validators		= [validators.Required()]
						)

	LineNumber 		=	IntegerField(requiredlabel("Line Number", "*"), [validators.Required()])

	LineType 		=	SelectField(
							requiredlabel("Line Type", "*"),
							choices = [('GH', 'Group Header'),
									   ('LD', 'Line Detail'),
									   ('ST', 'Sub Total'),
									   ('SP', 'Space'),
									   ('CH', 'Column Header')],
							default = 'LD',
							validators = [validators.Required()]
						)

	LineDescription =	TextAreaField("Line Description")
	LineValue 		=	TextAreaField("Line Value(Base Currency)")
	OtherLineValue 	=	TextAreaField("Line Value(Other Currency)")
	ProvLineValue 	=	TextAreaField("Provision Line Value")
	Format 			=	SelectField(
							requiredlabel("Format", "*"),
							choices = [('N', 'Normal'),
									   ('B', 'Bold'),
									   ('I', 'Italic'),
									   ('BI', 'Bold and Italic')],
							default = 'N',
							validators = [validators.Required()]
						)

	RowBGColor 		=	TextField("Row Background Color")
	Indent 			=	TextField("Text Indent", default='0')

# 	def validate_LineValue(form, field):
# 		try:

# 			LineType 	=	request.form['LineType']

# 			if LineType.upper() == "LD":

# 				LineValue 	=	request.form['LineValue']
# 				Msg 		=	""
# 				ListValue 	=	LineValue.split()

# 				if len(ListValue) > 0:

# 					for item in ListValue:
						
# 						if str(item).find('-') != -1:
# 							item = str(item.replace('-', ''))

# 						item 	=	item.strip()
# 						GL 		=	MKT_GL_MAPPING.query.get(item)

# 						if not GL:

# 							Msg += item + ", "

# 				if Msg:
# 					raise ValidationError("GL %s not found." %Msg[:-2])

# 			if LineType.upper() == "GH" or LineType.upper() == "ST":

# 				Report 		=	request.form['Report']
# 				LineValue 	=	request.form['LineValue']
# 				Msg 		=	""
# 				ListValue 	=	LineValue.split()

# 				for item in ListValue:

# 					if item.find("-") != -1:
# 						item = item.replace("-", "")

# 					NBCReport 	=	MKT_NBC_REPORT_DE.query.\
# 									filter(MKT_NBC_REPORT_DE.LineNumber == item).\
# 									filter(MKT_NBC_REPORT_DE.Report == Report).\
# 									first()

# 					if not NBCReport:

# 						Msg += item + ", "

# 				if Msg:

# 					raise ValidationError("Line munber %s not found." %Msg[:-2])

# 		except:
# 			raise

# 	def validate_LineDescription(form, field):
# 		try:

# 			LineType 	=	request.form['LineType']

# 			if LineType.upper() not in "SP":

# 				LineDescription 	=	request.form['LineDescription']

# 				if not LineDescription:

# 					raise ValidationError("This field is required.")
					
# 		except:
# 			raise

# 	@staticmethod
# 	def setWidth():

# 		fields = [("LineNumber", len1)]

# 		return fields

# 	@staticmethod
# 	def setDisable():

# 		return [("LineNumber")]

# 	@staticmethod
# 	def hotField():

# 		hotfield 		= []

# 		fielddisplay 	= "$('#LineNumber').val(data.LineNumber)"
# 		varname 		= "Report:$('#Report').val()"
# 		fun 			= ["Report", varname, fielddisplay, "/Morakot/NBCReportLineNumber", "change"]
# 		hotfield.append(fun)

# 		return hotfield


# 	@staticmethod
# 	def beforeInsert():

# 		ID 			= 	request.form['ID']
# 		Report 		= 	request.form['Report']
# 		LineNumber 	= 	request.form['LineNumber']

# 		LineObj 	=	MKT_NBC_REPORT_DE.query.get(ID)
# 		LineReportObj	=	MKT_NBC_REPORT_DE.query.\
# 							filter(MKT_NBC_REPORT_DE.Report == Report).\
# 							all()

# 		if LineReportObj:
# 			if not LineObj:
# 				updateLineNumber(LineReportObj, LineNumber)

# 			else:
# 				if int(LineObj.LineNumber) != int(LineNumber):
# 					updateLineNumber(LineReportObj, LineObj.LineNumber, True)
# 					updateLineNumber(LineReportObj, LineNumber)

# 		return True

# 	@staticmethod
# 	def reverseRec():
# 		try:

# 			ID 			= 	g.formID
# 			LineNumber 	=	""
# 			Report 		=	""
# 			LineObj		=	MKT_NBC_REPORT_DE.query.get(ID)

# 			if LineObj:

# 				LineNumber 	= 	LineObj.LineNumber
# 				Report 		=	LineObj.Report
# 				# Move reverse record to history and delete it
# 				# mktaudit.moveAUTHtoHIST(MKT_NBC_REPORT_DE, MKT_NBC_REPORT_DE_HIST, ID)
# 				# mktaudit.deleteAUTH(MKT_NBC_REPORT_DE, ID)

# 			LineReportObj	=	MKT_NBC_REPORT_DE.query.\
# 								filter(MKT_NBC_REPORT_DE.Report == Report).\
# 								all()
			
# 			if LineReportObj:
# 				updateLineNumber(LineReportObj, LineNumber, True)
				

# 			return True, ""#The record reversed successfully,

# 		except Exception, e:
# 			db.session.rollback()
# 			return True,msg_error+"%s"%e

# 	@staticmethod
# 	def IsAcceptOverride():
# 		Override 	= ""

# 		ID 			= request.form['ID']
# 		Report 		= request.form['Report']
# 		LineNumber 	= request.form['LineNumber']

# 		Existed 	=	MKT_NBC_REPORT_DE.query.get(ID)
# 		Check 		=	None
# 		Msg 		=	""
# 		if not Existed:
# 			Check 	= 	MKT_NBC_REPORT_DE.query.\
# 						filter(MKT_NBC_REPORT_DE.Report == Report).\
# 						filter(MKT_NBC_REPORT_DE.LineNumber == LineNumber).\
# 						first()

# 		if Check:

# 			Override 	= True
# 			Msg 		= "Line number %s is already existed." %LineNumber

# 		Msg 		+= " Do you want to procceed?"
# 		MsgShow 	= True if Override else False
# 		return MsgShow, Msg

# def updateTransferSetting(ReportID, LineNumber, IsReverse = False):
# 	try:

# 		TransferSetting		= 	mktmonthend.getTransferSetting()
# 		SenderReportID  	= 	TransferSetting['SenderReportID']
# 		SenderLineNumber 	= 	TransferSetting['SenderLineNumber']
# 		ReceiverReportID 	= 	TransferSetting['ReceiverReportID']  
# 		ReceiverLineNumber	= 	TransferSetting['ReceiverLineNumber'] 

# 		if ReportID == SenderReportID:
# 			if int(SenderLineNumber) >= int(LineNumber):
# 				SenderLineNumber = int(SenderLineNumber) + 1 if IsReverse == False else int(SenderLineNumber) - 1

# 		elif ReportID == ReceiverReportID:
# 			if int(ReceiverLineNumber) >= int(LineNumber):
# 				ReceiverLineNumber = int(ReceiverLineNumber) + 1 if IsReverse == False else int(ReceiverLineNumber) - 1

# 		TransferSetting = '%s %s > %s %s' %(SenderReportID, SenderLineNumber, ReceiverReportID, ReceiverLineNumber) 

# 		AccountingSetting = MKT_ACCOUNTING_SETTING.query.get('SYSTEM')
# 		AccountingSetting.NetIncomeToEquity = TransferSetting
# 		db.session.add(AccountingSetting)		
		
# 	except Exception, e:
# 		raise e

# def updateLineNumber(LineReportObj, LineNumber, IsReverse = False):
# 	try:
		
# 		# updateTransferSetting(LineReportObj[0].Report, LineNumber, IsReverse)

# 		Increament = -1 if IsReverse == True else 1

# 		for item in LineReportObj:

# 			if LineNumber and int(item.LineNumber) >= int(LineNumber):
					
# 				item.LineNumber = (int(item.LineNumber) if item.LineNumber else int(0)) + Increament

# 				LineType 		= item.LineType
# 				LineValue 		= item.LineValue
# 				OtherLineValue	= item.OtherLineValue

# 				if LineType.upper() in ["ST", "GH"]:
# 					Value1 = ''
# 					Value2 = ''
# 					if LineValue.find('>') != -1:
# 						Values 	=	LineValue.split('>')
# 						Value1 	=	Values[0].strip()
# 						Value2 	=	Values[1].strip()
						
# 						if int(Value1) >= int(LineNumber):
# 							Value1 = int(Value1) + Increament 
# 							Value2 = int(Value2) + Increament

# 						elif int(Value2) >= int(LineNumber):
# 							Value2 = int(Value2) + Increament

# 						item.LineValue = '%s>%s' %(Value1,Value2)

# 					else:
# 						Values 	=	LineValue.split()
# 						LineNumberList = ''
						
# 						if Values:
# 							for v in Values:
# 								v = v.strip()
# 								Operator = ''
# 							 	if v.find('-') != -1:
# 							 		Operator = '-'
# 							 		Value 	 =	abs(int(v))
# 							 	else:
# 							 		Operator = ''
# 							 		Value = int(v)

# 							 	if int(Value) >= int(LineNumber):
# 							 		Value = Value + Increament 

# 							 	LineNumberList 	+=	'%s%s ' %(Operator, Value)

# 						item.LineValue = LineNumberList

# 					if OtherLineValue.find('>') != -1:
# 						Values 	=	OtherLineValue.split('>')
# 						Value1 	=	Values[0].strip()
# 						Value2 	=	Values[1].strip()
						
# 						if int(Value1) >= int(LineNumber):
# 							Value1 = int(Value1) + Increament 
# 							Value2 = int(Value2) + Increament

# 						elif int(Value2) >= int(LineNumber):
# 							Value2 = int(Value2) + Increament

# 						item.OtherLineValue = '%s>%s' %(Value1,Value2)

# 					else:
# 						Values 	=	OtherLineValue.split()
# 						LineNumberList = ''
						
# 						if Values:
# 							for v in Values:
# 								v = v.strip()
# 								Operator = ''
# 							 	if v.find('-') != -1:
# 							 		Operator = '-'
# 							 		Value 	 =	abs(int(v))
# 							 	else:
# 							 		Operator = ''
# 							 		Value = int(v)

# 							 	if int(Value) >= int(LineNumber):
# 							 		Value = Value + Increament 

# 							 	LineNumberList 	+=	'%s%s ' %(Operator, Value)

# 						item.OtherLineValue = LineNumberList

# 				db.session.add(item)

# 	except Exception, e:
# 		raise e