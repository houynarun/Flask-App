from datetime 					import datetime
from dateutil.relativedelta 	import relativedelta
from .models 					import *
from flask 						import flash
from app.mktcore.wtfimports 	import *
from app.User.models 			import *
from app.AssetClass.models 		import *
from app.CashAccount.models 	import *
from app.AccProduct.models 	import *
from app.Account.models 		import MKT_ACCOUNT
from app.tools.mktroute 		import *
from wtforms 					import DecimalField, IntegerField
from app.OverdraftContract.models	import *

import app.tools.user 			as mktuser
import app.tools.mktaudit		as mktaudit
import app.tools.mktdate 		as mktdate
import app.tools.mktloan		as mktloan
import app.tools.mktsetting 	as mktsetting
import app.tools.mktparam 		as mktparam
import app.tools.mktmoney		as mktmoney
import app.tools.mktpdcollection	as mktpdcollection
import app.tools.bank.mktoverdraft	as mktoverdraft

@app.route("/Morakot/getODContractInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getODContractInfo():
	try:

		ContractID 		= request.args.get("ODContractID")
		ODCObj 			= MKT_OVERDRAFT_CONTRACT.query.get(ContractID)
		
		CustomerID 			=	""
		Currency 			=	""
		AIRAmount			=	"0"
		PenaltyAmount		=	"0"
		ValueDate 			=	""
		Term 				= 	""
		MaturityDate		=	""
		LimitedAmount 		=	"0"
		InterestRate 		=	"0"
		AccountType 		= 	"N"
		AccountTypeText		= 	"Normal"

		if ODCObj:
			CustomerID 			=	ODCObj.CustomerID
			Currency 			=	ODCObj.Currency
			PenaltyAmount		=	0
			# PenaltyAmount		=	ODCObj.Penalty
			ValueDate 			=	ODCObj.ValueDate
			Term 				= 	ODCObj.Term
			MaturityDate		=	ODCObj.MaturityDate
			
			CurrencyObj  		=	mktmoney.getCurrencyObj(Currency)
			LimitedAmount 		=	mktmoney.toMoney(float(ODCObj.LimitedAmount), CurrencyObj)
			AIRAmount			=	mktmoney.toMoney(float(ODCObj.AccrInterest), CurrencyObj)
			InterestRate 		=	ODCObj.InterestRate
			AccountType 		= 	ODCObj.AccountType
			AccountTypeText		= 	"Normal" if AccountType == "N" else "Restructured"

		return jsonify(	Currency 	=	Currency,Term	= 	Term, AIRAmount		=	str(AIRAmount),
						PenaltyAmount	=	str(PenaltyAmount), ValueDate 		=	ValueDate,
						CustomerID		= 	CustomerID,			MaturityDate	=	MaturityDate,
						LimitedAmount	=	str(LimitedAmount), InterestRate	=	str(InterestRate),
						AccountType		= 	AccountType, 		AccountTypeText =	AccountTypeText)
	except:
		raise

def loanBankDate():
	return mktdate.getBankDate()

class FRM_OVERDRAFT_AMENDMENT(exform):

	ODContractID 	= 	TextField(requiredlabel(getLanguage("Contract ID"), "*"), [validators.Required()])
	CustomerID 		= 	TextField(requiredlabel(getLanguage("Customer ID"), "*"), [validators.Required()])
	Operation 		= 	SelectField(requiredlabel('Operation Type', '*'),
							choices=[('AMT', '%s' %getLanguage("Amendment")),
									 ('TMN', '%s' %getLanguage("Termination"))],
							coerce=str,
							default='AMT'
						)
	Currency 		= 	TextField(requiredlabel(getLanguage("Currency"), "*"), [validators.Required()])
	# PenaltyStatus 	= 	SelectField(requiredlabel('Penalty Status', '*'),
	# 						choices=[('C', "Collect"),
	# 								 ('W', "Waive")],
	# 						coerce=str,
	# 						default='C'
	# 					)
	# PenaltyAmount	=	TextField(requiredlabel("Penalty Amount", "*"), [validators.Required()], default=0)
	AIRAction 		= 	SelectField(requiredlabel('AIR Action', '*'),
							choices=[ 	('', "None"),
										('C', "Collect"),
									 	('W', "Waive")],
							coerce=str,
							default=''
						)
	AIRAmount		=	TextField(requiredlabel("AIR Amount", "*"), [validators.Required()], default=0)
	LimitedAmount	=	TextField(requiredlabel("Limited Amount", "*"), [validators.Required()], default=0)
	InterestRate 	=	TextField(requiredlabel(getLanguage("Interest Rate"), "*"), default=0)
	ValueDate 		= 	TextField(requiredlabel(getLanguage("Value Date"), "*"), [validators.Required()])
	AmendDate 		= 	TextField(requiredlabel(getLanguage("Amend Date"), "*"), [validators.Required()], default=loanBankDate)
	Term 			= 	IntegerField(requiredlabel("%s (%s)" %(getLanguage("Term"), getLanguage("Month")), "*"), [validators.Required()])
	MaturityDate 	= 	TextField(getLanguage("Maturity Date"), [validators.Required()])
	AccountType 	= 	SelectField(requiredlabel('Account Type', '*'),
							choices=[('N', '%s' %getLanguage("Normal")),
									 ('R', '%s' %getLanguage("Restructured"))],
							coerce=str,
							default='N'
						)
	Note			=	TextAreaField("Note", [validators.Length(max=50)])


	def validate_ODContractID(form, field):
		ContractID 	= 	request.form['ODContractID']
		Branch 		= 	mktuser.getCurrentBranch()
		ODCObj 		=	MKT_OVERDRAFT_CONTRACT.query.\
						filter(MKT_OVERDRAFT_CONTRACT.ID==ContractID).\
						filter(MKT_OVERDRAFT_CONTRACT.Branch==Branch).first()
		if not ODCObj:
			raise ValidationError("Contract %s is not found in current branch"%ContractID)

	def validate_Operation(form, field):
		ContractID 	= 	request.form['ODContractID']
		Operation 	= 	request.form['Operation']
		AIRAction 	= 	request.form['AIRAction']
		AIRAmount 	= 	Decimal(request.form['AIRAmount'].replace(',',''))

		if Operation == "TMN":
			ODCObj		=	MKT_OVERDRAFT_CONTRACT.query.get(ContractID)
			AccountObj 	=	MKT_ACCOUNT.query.get(ODCObj.Account)
			AccBal 		=	AccountObj.Balance + ODCObj.AccrInterest

			if AIRAction == "W": AccBal -= AIRAmount
			if AIRAction == "C": AccBal -= (ODCObj.AccrInterest-AIRAmount)
			if AccBal > 0:
				CurrencyObj  	=	mktmoney.getCurrencyObj(AccountObj.Currency)
				raise ValidationError("Contract termination need %s more  "%mktmoney.toMoney(float(abs(AccBal)), CurrencyObj,2))

	def validate_AIRAction(form, field):
		AIRAction 	= 	request.form['AIRAction']
		Operation 	= 	request.form['Operation']
		if Operation == 'TMN' :
			if not AIRAction:
				raise ValidationError("AIR action cannot be none for operateion termination")
				
	def validate_AIRAmount(form, field):
		ContractID 	= 	request.form['ODContractID']
		AIRAmount 	= 	request.form['AIRAmount']
		AIRAction 	= 	request.form['AIRAction']
		Operation 	= 	request.form['Operation']
		Currency 	= 	request.form['Currency']
		ODCObj		=	MKT_OVERDRAFT_CONTRACT.query.get(ContractID)
		CurrencyObj =	mktmoney.getCurrencyObj(Currency)
		AccrInterest= 	Decimal(mktmoney.toMoney(float(ODCObj.AccrInterest), CurrencyObj).replace(',',''))
		if ODCObj:
			if Decimal(AIRAmount) > AccrInterest:
				raise ValidationError("AIR Amount cannot more than AIR of contract")
			if Operation == 'TMN' :
				if AccrInterest and Decimal(AIRAmount) == 0:
					raise ValidationError("AIR Amount cannot zero")

	def validate_InterestRate(form, field):
		InterestRate = field.data
		if float(InterestRate) <= 0:
			raise ValidationError("must be greater than 0")

	def validate_MaturityDate(form, field):
		MaturityDate 	= 	field.data
		AmendDate 		= 	form.AmendDate.data
		Operation 		= 	form.Operation.data
		if Operation == "AMT" and MaturityDate < AmendDate:
			raise ValidationError("Maturity Date must greater than Amend Date")

	def validate_AmendDate(form, field):
		MaturityDate 	= 	field.data
		AmendDate 		= 	form.AmendDate.data
		BankDate  		= 	str(mktdate.getBankDate())
		if BankDate != AmendDate:
			raise ValidationError("Amend Date must be equal system date")

	@staticmethod
	def setDisable():
		return [('Currency'), ('AmendDate'), ('MaturityDate'), ('ValueDate'), ('CustomerID')]
		
	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#CustomerID').val(data.CustomerID); $('#Currency').val(data.Currency)"
		fielddisplay 	+= ";$('#AIRAmount').val(data.AIRAmount)"
		fielddisplay 	+= ";$('#LimitedAmount').val(data.LimitedAmount); $('#InterestRate').val(data.InterestRate)"
		fielddisplay 	+= ";$('#ValueDate').val(data.ValueDate); $('#Term').val(data.Term)"
		fielddisplay 	+= ";$('#MaturityDate').val(data.MaturityDate)"
		fielddisplay 	+= ";$('#AccountType').select2('data', {'id':data.AccountType,'text':data.AccountTypeText})"
		varname 		= "ODContractID:$('#ODContractID').val()"
		fun 			= ["ODContractID", varname, fielddisplay, "/Morakot/getODContractInfo", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#MaturityDate').val(data.MaturityDate)"
		varname 		= "Term:$('#Term').val(), ValueDate:$('#ValueDate').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/GetMaturityDate", "blur"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeInsert():
		try:
			AuthLevel 	= g.getNAuthorize
			if AuthLevel == 0 :
				LimitedAmount 	= 	request.form['LimitedAmount']
				MaturityDate 	= 	request.form['MaturityDate']
				ODContractID 	= 	request.form['ODContractID']
				AccountType 	= 	request.form['AccountType']
				InterestRate 	= 	request.form['InterestRate']
				Operation 		= 	request.form['Operation']
				AIRAction 		= 	request.form['AIRAction']
				AIRAmount 		= 	request.form['AIRAmount']
				Currency		= 	request.form['Currency']
				Operation		= 	request.form['Operation']
				Term 			= 	request.form['Term']
				ID 				=	request.form['ID']
				ODCObj 			=	MKT_OVERDRAFT_CONTRACT.query.get(ODContractID)

				if Operation == 'AMT':
					OffBalAmount 	=	0
					if Decimal(LimitedAmount) != ODCObj.LimitedAmount:
						Status 			= 	False # add off balance
						DiffAmount 		=	Decimal(LimitedAmount) - ODCObj.LimitedAmount
						OffBalAmount 	= 	abs(DiffAmount)
						if DiffAmount < 0:
							Status = True

						mktoverdraft.OVERDRAFT().postOffBalanceSheet(ID,OffBalAmount,Currency,ODCObj.Branch,TranDate='',IsWithdraw=Status)

				if Decimal(AIRAmount) > 0 and AIRAction:
					amendInterest(ODCObj,AIRAmount,AIRAction,Operation)

				mktaudit.moveAUTHtoHIST(MKT_OVERDRAFT_CONTRACT,MKT_OVERDRAFT_CONTRACT_HIST,ODContractID)
				updateOD(ODCObj,0,AIRAmount,AIRAction,MaturityDate,LimitedAmount,InterestRate,AccountType,Term,Operation)

				if Operation == 'TMN':
					mktoverdraft.OVERDRAFT().postOffBalanceSheet(ID,ODCObj.LimitedAmount,Currency,ODCObj.Branch,TranDate='',IsWithdraw=True)
					mktaudit.moveAUTHtoHIST(MKT_OVERDRAFT_CONTRACT,MKT_OVERDRAFT_CONTRACT_HIST,ODContractID)
					mktaudit.deleteAUTH(MKT_OVERDRAFT_CONTRACT,ODContractID)

			return True
			
		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			raise
			return False

	@staticmethod
	def beforeAuthorize():
		try:
			ID 		= 	g.formID
			ODCAObj	=	MKT_OVERDRAFT_AMENDMENT_INAU.query.get(ID)
			if ODCAObj:
				MaturityDate 	=	ODCAObj.MaturityDate
				LimitedAmount 	=	ODCAObj.LimitedAmount
				Branch 			=	ODCAObj.Branch
				Currency		=	ODCAObj.Currency
				ODContractID	=	ODCAObj.ODContractID
				AIRAmount		=	ODCAObj.AIRAmount
				AIRAction		=	ODCAObj.AIRAction
				Operation		=	ODCAObj.Operation
				InterestRate	=	ODCAObj.InterestRate
				AccountType		=	ODCAObj.AccountType
				Term			=	ODCAObj.Term
				ODCObj 			=	MKT_OVERDRAFT_CONTRACT.query.get(ODContractID)
				AccountObj 		=	MKT_ACCOUNT.query.get(ODCObj.Account)

				if Operation == 'AMT':
					OffBalAmount 	=	0
					if LimitedAmount != ODCObj.LimitedAmount:
						Status 			= 	False # add off balance
						DiffAmount 		=	LimitedAmount - ODCObj.LimitedAmount
						OffBalAmount 	= 	abs(DiffAmount)
						if DiffAmount < 0:
							Status = True

						ODCObj.OffBalanceSheet	+=	DiffAmount
						mktoverdraft.OVERDRAFT().postOffBalanceSheet(ID,OffBalAmount,Currency,Branch,TranDate='',IsWithdraw=Status)

				if Decimal(AIRAmount) > 0 and AIRAction:
					amendInterest(ODCObj,AIRAmount,AIRAction,Operation)

				mktaudit.moveAUTHtoHIST(MKT_OVERDRAFT_CONTRACT,MKT_OVERDRAFT_CONTRACT_HIST,ODContractID)
				updateOD(ODCObj,0,AIRAmount,AIRAction,MaturityDate,LimitedAmount,InterestRate,AccountType,Term,Operation)

				if Operation == 'TMN':
					mktoverdraft.OVERDRAFT().postOffBalanceSheet(ID,ODCObj.LimitedAmount,Currency,Branch,TranDate='',IsWithdraw=True)
					mktaudit.moveAUTHtoHIST(MKT_OVERDRAFT_CONTRACT,MKT_OVERDRAFT_CONTRACT_HIST,ODContractID)
					mktaudit.deleteAUTH(MKT_OVERDRAFT_CONTRACT,ODContractID)

				return True
				
			else:
				flash(msg_error+'Record %s not found.'%ID)
				db.session.rollback()
				db.session.close()
				return False	

		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def moneyField():
		return [["AIRAmount", "Currency"],["LimitedAmount", "Currency"]]

def updateOD(ODCObj,Penalty,AIRAmount,AIRAction,MaturityDate,LimitedAmount,InterestRate,AccountType,Term,Operation):
	try:
		AccountObj 	=	MKT_ACCOUNT.query.get(ODCObj.Account)
		
		if Operation == 'TMN':
			ODCObj.AccrCurCapital	=	0
			ODCObj.Penalty 			=	0
			AccountObj.MaturityDate 	=	''
			AccountObj.LimitedAmount 	=	0

		else:
			# ODCObj.AccrInterest		-=	Decimal(AIRAmount)
			ODCObj.OutstandingAmount+=	Decimal(AIRAmount) if AIRAction == 'C' else 0
			ODCObj.OffBalanceSheet  -=	Decimal(AIRAmount) if AIRAction == 'C' else 0
			ODCObj.MaturityDate 	=	MaturityDate
			ODCObj.LimitedAmount	=	Decimal(LimitedAmount)
			ODCObj.InterestRate 	=	str(InterestRate)
			ODCObj.AccountType 		=	AccountType
			ODCObj.Term 			=	Term
			ODCObj.NumDayDue		=	0

			AssetClass 		=	mktpdcollection.getLoanAssetClass(ODCObj.NumDayDue, AccountType, 'N','%sA'%ODCObj.AccProduct)
			AccClassObj 	=	MKT_ASSET_CLASS.query.get('%s-%sA'%(AssetClass,ODCObj.AccProduct))
			Suspend 		=	'N'
			if not AccClassObj:
				AccClassObj =	MKT_ASSET_CLASS.query.get(AssetClass)

			if AccClassObj:
				Suspend 	=	'N' if AccClassObj.IncomeRecog == 'Y' else 'Y'
			
			PrevClass 			= 	ODCObj.AssetClass
			NewClass 			= 	AssetClass.split('-')[0]
			ODCObj.AssetClass 	=	NewClass
			ODCObj.Suspend 		=	Suspend
			AccProductObj 		=	MKT_ACC_PRODUCT.query.get(ODCObj.AccProduct)
			if PrevClass != NewClass:
				Overdraft = mktoverdraft.OVERDRAFT()
				Overdraft.changeClassOD(ODCObj,ODCObj.OutstandingAmount,AccProductObj.CategoryList,AccProductObj.AccrReceivableCat,Suspend,PrevClass,AssetClass,AccProductObj)

			AccountObj.MaturityDate 	=	MaturityDate
			AccountObj.LimitedAmount 	=	LimitedAmount
		
		db.session.add(ODCObj)
		db.session.add(AccountObj)

	except Exception as e:
		raise 

def amendInterest(ODCObj,AIRAmount,AIRAction,Operation):
	try:
		Currency	=	ODCObj.Currency
		ID			=	ODCObj.ID
		Note 		=	""
		AIRAmount   =	Decimal(AIRAmount)
		Branch		=	ODCObj.Branch
		AssetClass	=	ODCObj.AssetClass
		Suspend		=	ODCObj.Suspend
		DateTimeNow = 	mktdate.getDateTimeNow()
		TranDate 	= 	mktdate.getBankDate()
		AccProduct 	=	MKT_ACC_PRODUCT.query.get(ODCObj.AccProduct)
		AIRCat 		= 	AccProduct.AccrReceivableCat	
		IntIncomeCat= 	AccProduct.IntIncomeCat
		AccSetting 	= 	mktsetting.getAccSetting()
		PDParamObj 		= 	mktparam.getPDParam()
		ReportingRateObj= 	mktaccounting.getReportingRateObj()
		DiffAmount 	=	ODCObj.AccrInterest - AIRAmount
		Account 	= 	ODCObj.Account
		AccountObj 	=	MKT_ACCOUNT.query.get(ODCObj.Account)

		if AIRAction == "C" or (AIRAction == "W" and DiffAmount > 0 and Operation == "TMN"):
			AccoutAmount = AIRAmount 
			Amount = AIRAmount 
			if AIRAction == "W":
				AccoutAmount = 	DiffAmount 
				CurrencyObj =	mktmoney.getCurrencyObj(Currency)
				AIRAmount 	=  	Decimal(mktmoney.toMoney(float(DiffAmount), CurrencyObj).replace(',',''))
				DiffAmount  = 	DiffAmount-AIRAmount

			AccountCat 	= 	AccountObj.AccCategory
			Transaction = 	AccSetting.InterestTran # Interest Transaction

			AccGLKey 	= 	mktaccounting.getConsolKey(AccountCat, Currency, AssetClass, "AC", "", "", "", "", "", "", "", "", "")
			Mode 		= 	"InDirect"
			DrCr 		= 	"Dr"
			# Debit Accrued Interest Receivable Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				AccountCat,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(AccoutAmount),	# Amount
				"AC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				ID, 					# Reference
				"", 					# Note
				"", 					# JNID
				Branch,					# Branch
				AccGLKey,			# GL_KEYS
				Mode 					# Mode check to insert Journal for category
			)

			Mode 		= 	"Direct"
			DrCr 		= 	"Cr"
			GL_KEYS 	= 	mktaccounting.getConsolKey(AIRCat, Currency, AssetClass, "AC", "", "", "", "", "", "", "", "", "")
			if AIRAction == 'C' and ODCObj.AccrInterest < AIRAmount:
				Amount = ODCObj.AccrInterest

			# Debit Accrued Interest Receivable Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				AIRCat,					# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amount),		# Amount
				"AC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				ID, 					# Reference
				"", 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode 					# Mode check to insert Journal for category
			)

			Overdraft =	mktoverdraft.OVERDRAFT()
			if (AIRAction == 'C' and ODCObj.AccrInterest < AIRAmount) or AIRAction == 'W' :
				ODCObj.AccrInterest = 0
				AccountObj.AccrInterest = 0
				Overdraft.adjustIncome(ID,Branch,Suspend,Currency,-DiffAmount,AssetClass,AccProduct=AccProduct,Transaction=Transaction)
			else:
				ODCObj.AccrInterest -= AIRAmount
				AccountObj.AccrInterest -= AIRAmount
				
			Overdraft.moveIntSuspendToIntIncome(ID,Suspend,AssetClass,Branch,Currency,AIRAmount,IntIncomeCat)

			OffBalAmount = AIRAmount 
			if AccountObj.Balance < 0 and (AccountObj.Balance + AIRAmount) >= 0:
				OffBalAmount = AIRAmount + AccountBal
			if (AccountObj.Balance + AIRAmount) <= 0:
				OffBalAmount = 0
			Overdraft.postOffBalanceSheet(ID,OffBalAmount,Currency,Branch,TranDate,IsWithdraw=True)
			ODCObj.CapitalizedAmount += AIRAmount
			ODCObj.OutstandingAmount += OffBalAmount
			ODCObj.OffBalanceSheet 	 -= OffBalAmount

		if AIRAction == "W" or (AIRAction == "C" and DiffAmount > 0 and Operation == "TMN"):
			if AIRAction == "C": AIRAmount = DiffAmount
			Transaction = AccSetting.CrAccrIntTran
			if not Transaction:
				# Call method for error message
				error_msg = "Accrued interest reversal transaction not found."
				mktmessage.setLogError(error_msg)

			else:

				Category 	= PDParamObj.SuspendCrCat
				if not Category:
					# Call method for error message
					error_msg = "Suspend credit category not found."
					mktmessage.setLogError(error_msg)

				#Get Category Int.Income or Interest In Suspend
				Category,GL_KEYS,IntCurrency,IntIncome = mktloan.getCategoryIntIncome(ReportingRateObj,PDParamObj,AccProduct,AccSetting,
																			Branch,Suspend,Currency,AIRAmount,AssetClass,
																			"", "", "", "", "", "", "", "", "")
				Mode 		= "Direct"
				DrCr 		= "Dr"
				# Credit Interest Income Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					IntCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(IntIncome), 	# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				Mode 		= 	"Direct"
				DrCr 		= 	"Cr"
				GL_KEYS 	= 	mktaccounting.getConsolKey(AIRCat, Currency, AssetClass, "AC", "", "", "", "", "", "", "", "", "")

				# Debit Accrued Interest Receivable Category
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					AIRCat,					# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(AIRAmount),		# Amount
					"AC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				ODCObj.AccrInterest -= AIRAmount
				AccountObj.AccrInterest -= AIRAmount

		db.session.add(AccountObj)
		db.session.add(ODCObj)

	except Exception as e:
		raise 
