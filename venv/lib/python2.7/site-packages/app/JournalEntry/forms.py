from flask 						import flash
from wtforms 					import DecimalField
from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *
from .. 						import app, db
from decimal 					import *
import time
from sqlalchemy 				import *

from datetime 					import datetime, date, timedelta
from app.tools.catetool 		import *
from app.Journal.models 		import MKT_JOURNAL
from app.Transaction.models 	import MKT_TRANSACTION
from app.Currency.models 		import MKT_CURRENCY
from app.Branch.models 			import MKT_BRANCH
from app.ConsolBalance.models 	import MKT_CONSOL_BALANCE
from app.Category.models 		import MKT_CATEGORY
from app.SpecialJournal.models 	import MKT_SPECIAL_JOURNAL

import app.tools.mktaccounting 		as mktaccounting
import app.tools.mktdate 			as mktdate
import app.tools.mktsetting 		as mktsetting
import app.tools.mktfundtransfer 	as mktfundtransfer
import app.tools.user 				as mktuser
import app.tools.mktmoney 			as mktmoney
import app.tools.mktteller 			as mktteller
import app.tools.mktaudit 			as mktaudit
from app.VoucherType.models 	import *
import app.tools.mktinterbranch 	as mktinterbranch

@app.route("/Morakot/API/HotFieldSpecialJournal", methods=['GET'])
@app.route("/Morakot/HotFieldSpecialJournal", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def HotFieldSpecialJournal():
	DebitCategory 	= ''
	DrCategoryDesc 	= ''
	CreditCategory 	= ''
	CrCategoryDesc 	= ''
	Currency 		= ''
	Transaction 	= ''
	TransactionDesc = ''
	Reference 		= ''
	Note 			= ''
	Amount 			= ''
	SpecialJournal 	= request.args.get('SpecialJournal') if 'SpecialJournal' in request.args else None
	Audit 			= mktaudit.getAuditrail()
	Inputter		= Audit['Inputter']
	Branch 			= Audit['Branch']

	SpecialObj 		= MKT_SPECIAL_JOURNAL.query.get(SpecialJournal)
	if SpecialObj:
		#Debit
		DebitCategory 	= SpecialObj.DrCategory
		DrCategoryDesc 	= MKT_CATEGORY.query.get(DebitCategory).Description

		#Credit
		CreditCategory 	= SpecialObj.CrCategory
		CrCategoryDesc 	= MKT_CATEGORY.query.get(CreditCategory).Description

		#Trax
		Transaction 	= SpecialObj.Transaction
		TransactionDesc = MKT_TRANSACTION.query.get(Transaction).Description
		
		Currency 	= SpecialObj.Currency
		Reference 	= SpecialObj.Reference
		Note 		= SpecialObj.Note
		Amount 		= str(SpecialObj.Amount) if SpecialObj.Amount else '0'


	return jsonify(	DebitCategory 	= DebitCategory,
					DrCategoryDesc	= DrCategoryDesc,
					CreditCategory 	= CreditCategory,
					CrCategoryDesc 	= CrCategoryDesc,
					Currency 		= Currency,
					Transaction 	= Transaction,
					TransactionDesc = TransactionDesc,
					Reference 		= Reference,
					Note 			= Note,
					Amount 			= Amount)


@app.route("/Morakot/API/JournalEntryAccount", methods=['GET'])
@app.route("/Morakot/JournalEntryAccount", methods=['GET'])
@checkLogOutTime
def JournalEntryAccount():

	Category 	= request.args.get('Category') if 'Category' in request.args else ''
	Currency 	= request.args.get('Currency') if 'Currency' in request.args else ''
	DrCr 		= request.args.get('DrCr') if 'DrCr' in request.args else ''
	Audit 		= mktaudit.getAuditrail()
	Inputter	= Audit['Inputter']
	Branch 		= Audit['Branch']

	Account   = ""
	if Category:
		if mktteller.isCashCateogry(Category):
			if Currency:
				AccountObj 	= mktteller.getCashAccountByCategory(Category,Currency,Inputter,Branch)
				if AccountObj[0]:
					Account = AccountObj[1].ID
		
	return jsonify(Account=Account)

def loadTransaction():
	return MKT_TRANSACTION.query

def loadCurrency():
	return MKT_CURRENCY.query

def checkBalance(Amount, BalByKey, Type, DrCr):
	try:

		if Type == "Cr":
			BalByKey = (Decimal(BalByKey) + Amount)  if DrCr == "Cr" else (Decimal(BalByKey) - Amount)
		else:
			BalByKey = (Decimal(BalByKey) + Amount)  if DrCr == "Dr" else (Decimal(BalByKey) - Amount)

		return BalByKey

	except:
		raise

def loadCurrentDate():
	return 	mktdate.getBankDate()

def loadDefaultCurrency():
	return mktaccounting.getDefaultCurrency()

class FRM_JOURNAL_ENTRY(exform):

	SpecialJournal 	=	QuerySelectField("Special Journal",
							query_factory=mktaccounting.loadSpecialJournal,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
						)
	VoucherType 	=	QuerySelectField("Voucher Type",
							query_factory=mktaccounting.loadVoucherType,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
						)

	DrAccount	=	TextField(requiredlabel("Debit Account","*"))

	DebitCategory 	=	QuerySelectField(requiredlabel("Debit Category","*"),
							query_factory=mktaccounting.loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)

	CreditCategory 	=	QuerySelectField(requiredlabel("Credit Category","*"),
							query_factory=mktaccounting.loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	CrAccount	=	TextField(requiredlabel("Credit Account","*"))
	Currency 		= 	QuerySelectField(requiredlabel('Currency', "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=loadDefaultCurrency(),
							blank_text=u'--None--',
							validators=[validators.Required()]
						)

	Amount 			= 	TextField(requiredlabel("Amount","*"), [validators.Required()])

	Transaction 	= 	QuerySelectField(requiredlabel('Transaction', "*"),
							query_factory=loadTransaction,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--Choose Transaction--',
							validators=[validators.Required()]
						)

	TransactionDate = 	DateField(requiredlabel("Transaction Date", "*"), [validators.Required()], default=loadCurrentDate)
	Reference 		= 	TextField("Reference",[validators.Length(max=35)])
	#2018-06-05 - Inter-Branch
	TargetBranch 	=	QuerySelectField('Target Branch',
							query_factory=mktaccounting.loadBranch,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--Choose Target Branch--'
						)
	TargetBranchDrCr = SelectField("Target Branch Dr/Cr",
							choices=[('', '--None--'),('Dr', 'Debit'),('Cr', 'Credit')],
						 	coerce=str)
	#end
	Note 			= 	TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=100),validators.Required()])

	ExchangeRate 	= TextField(requiredlabel('Exchange Rate','*'), 
								description='1-Detail',
								validators=[validators.Required(), mktteller.customValidateExchangeRate])

	LCYAmount 		= TextField(requiredlabel('LCY Amount','*'),
								description='1-Detail',
								validators=[validators.Required(), mktteller.customValidateLCYAmount])

	def validate_DebitCategory(form, field):
		try:

			Branch 				= mktuser.getBranch(session["ChangeBranch"]).ID if not request.form['Branch'] else request.form['Branch']
			DebitCategory 		= request.form['DebitCategory']
			CreditCategory 		= request.form['CreditCategory']
			Currency 			= request.form['Currency']
			TranDate 			= request.form['TransactionDate']
			Amount 				= form.Amount.data
			if mktteller.isAmountInDecimal(Amount):
				Amount 		= Decimal(form.Amount.data)
				LCYAmount	= Decimal(form.LCYAmount.data)

				Balance 	=	mktaccounting.getValidateConsolBalance(Amount, DebitCategory, Currency, Branch, 'Dr',LCYAmount=LCYAmount,TranDate=TranDate)
				
				if Balance[0] == False:

					raise ValidationError(Balance[1])

			# check if Category Cash at Vault
			if mktteller.isCashCateogry(DebitCategory):

				CheckVault = mktteller.isUserVaultAccount()

				if not CheckVault[0]:

					raise ValidationError(CheckVault[1])

		
			CheckDr = mktteller.isCashCateogry(DebitCategory)
			CheckCr = mktteller.isCashCateogry(CreditCategory)
			if CheckDr and CheckCr:
				raise ValidationError("Till transation should be allowed by Teller Fuction")

		except:
			raise


	def validate_CreditCategory(form, field):
		try:

			Branch 		= mktuser.getBranch(session["ChangeBranch"]).ID if not request.form['Branch'] else request.form['Branch']
			CrAcc 		= request.form['CreditCategory']
			DrAcc 		= request.form['DebitCategory']
			Currency 	= request.form['Currency']
			TranDate 	= request.form['TransactionDate']
			Amount 	    = form.Amount.data

			if mktteller.isAmountInDecimal(Amount):

				Amount 		= Decimal(form.Amount.data)
				LCYAmount	= Decimal(form.LCYAmount.data)

				Balance 	=	mktaccounting.getValidateConsolBalance(Amount, CrAcc, Currency, Branch, 'Cr',LCYAmount=LCYAmount,TranDate=TranDate)
				
				if Balance[0] == False:

					raise ValidationError(Balance[1])

			if DrAcc in CrAcc:
				raise ValidationError("Credit category must different debit category.")
			# check if Category Cash at Vault
			if mktteller.isCashCateogry(CrAcc):

				CheckVault = mktteller.isUserVaultAccount()

				if not CheckVault[0]:

					raise ValidationError(CheckVault[1])

		except:
			raise

	def validate_TransactionDate(form, field):

		TranDate 	= request.form['TransactionDate']
		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)

	def validate_Amount(form, field):
		

		Amount = request.form['Amount']

		try:

			Amount = float(Amount)

		except:
			raise ValidationError("This field must be in numeric format.")

		if float(Amount) <= float(0):

			raise ValidationError("Amount must be more than 0.")
	
	def validate_TargetBranchDrCr(form,field):
		DrAccount 			= request.form['DrAccount']
		CrAccount 			= request.form['CrAccount']
		TargetBranch  = request.form["TargetBranch"]
		TargetDrCr    = request.form["TargetBranchDrCr"]
		Branch 				= request.form['Branch']
		Status,Message = mktinterbranch.validateTargetDrCr(DrAccount=DrAccount,CrAccount=CrAccount,TargetBranch=TargetBranch,TargetDrCr=TargetDrCr,Branch=Branch)
		if not Status:
			raise ValidationError(Message)

	def validate_TargetBranch(form,field):
		DrAccount 			= request.form['DrAccount']
		CrAccount 			= request.form['CrAccount']
		TargetBranch 		= request.form['TargetBranch']
		TargetBranchDrCr 	= request.form['TargetBranchDrCr']
		Branch 				= request.form['Branch']
		Status,Message 		= mktinterbranch.validateTargetBranch(DrAccount=DrAccount,CrAccount=CrAccount,
																 TargetBranch=TargetBranch,TargetDrCr=TargetBranchDrCr,
																 Branch=Branch)
		if not Status:
			raise ValidationError(Message)

	@staticmethod
	def moneyField():
		return [("Amount", "Currency")]

	@staticmethod
	def formatMoney():
		return ["Amount"], "Currency"

	@staticmethod
	def setWidth():
		control_list= [('TransactionDate', len3), ("Currency", len1)]
		return control_list
	
	@staticmethod
	def setVisible():		
		control_list=['DrAccount','CrAccount']
		return control_list
	
	@staticmethod
	def listField():
		Fields = ["ID", "DebitCategory", "CreditCategory", "Amount", "Transaction", "TransactionDate","Reference"]
		return Fields

	@staticmethod
	def formReadOnly():
		return "AUTH"
		
	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def setDisable():
		EnableExchangeRateField = mktsetting.getAppSetting('EnableExchangeRateField')
		if EnableExchangeRateField == 'Yes':
			return [('LCYAmount')]
		return [('LCYAmount'),('ExchangeRate')]

	@staticmethod
	def hotField():
		hotfield=[]

		fielddisplay	="$('#DrAccount').val(data.Account);"  
		varname 		="Category:$('#DebitCategory').val(),Currency:$('#Currency').val(),DrCr:'Dr'" 
		fun 			=["DebitCategory",varname,fielddisplay,"/Morakot/JournalEntryAccount","change"]  
		hotfield.append(fun)

		fielddisplay	="$('#DrAccount').val(data.Account);"  
		varname 		="Category:$('#DebitCategory').val(),Currency:$('#Currency').val(),DrCr:'Dr'" 
		fun 			=["Currency",varname,fielddisplay,"/Morakot/JournalEntryAccount","change"]  
		hotfield.append(fun)

		fielddisplay	="$('#CrAccount').val(data.Account);"  
		varname 		="Category:$('#CreditCategory').val(),Currency:$('#Currency').val(),DrCr:'Cr'" 
		fun 			=["CreditCategory",varname,fielddisplay,"/Morakot/JournalEntryAccount","change"]  
		hotfield.append(fun)

		fielddisplay	="$('#CrAccount').val(data.Account);"  
		varname 		="Category:$('#CreditCategory').val(),Currency:$('#Currency').val(),DrCr:'Cr'" 
		fun 			=["Currency",varname,fielddisplay,"/Morakot/JournalEntryAccount","change"]  
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#Currency').val(),Amount:$('#Amount').val(),TranDate:$('#TransactionDate').val()"
		fun 			= ["Currency", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#Currency').val(),Amount:$('#Amount').val(),TranDate:$('#TransactionDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#Currency').val(),Amount:$('#Amount').val(),TranDate:$('#TransactionDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["ExchangeRate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#Currency').val(),Amount:$('#Amount').val(),TranDate:$('#TransactionDate').val()"
		fun 			= ["TransactionDate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)


		fielddisplay	="$('#DebitCategory').select2('data', {'id':data.DebitCategory,'text':data.DrCategoryDesc});"
		fielddisplay	+="$('#CreditCategory').select2('data', {'id':data.CreditCategory,'text':data.CrCategoryDesc});"
		fielddisplay	+="$('#Currency').select2('data', {'id':data.Currency,'text':data.Currency});"
		fielddisplay	+="$('#Transaction').select2('data', {'id':data.Transaction,'text':data.TransactionDesc});"
		fielddisplay	+="$('#Reference').val(data.Reference);"
		fielddisplay	+="$('#Note').val(data.Note);"
		fielddisplay	+="$('#Amount').val(data.Amount);"
		fielddisplay	+="$('#Amount').focus();$('#Amount').blur();"

		varname 		="SpecialJournal:$('#SpecialJournal').val()" 
		fun 			=["SpecialJournal",varname,fielddisplay,"/Morakot/HotFieldSpecialJournal","change","Currency"]  
		hotfield.append(fun)

		fielddisplay 	= 	"$('#TargetBranch').select2('data', {'id':data.TargetBranch,'text':data.TargetBranch});"
		varname 		= "DrAccount:$('#DrAccount').val(),CrAccount:$('#CrAccount').val()"
		fun 			= ["DrAccount", varname, fielddisplay, "/Morakot/HotFieldTargetBranch", "change"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#TargetBranch').select2('data', {'id':data.TargetBranch,'text':data.TargetBranch});"
		varname 		= "DrAccount:$('#DrAccount').val(),CrAccount:$('#CrAccount').val()"
		fun 			= ["CrAccount", varname, fielddisplay, "/Morakot/HotFieldTargetBranch", "change"]
		hotfield.append(fun)


		return hotfield

	@staticmethod
	def beforeInsert():

		try:
			
			AuthLevel 	= g.getNAuthorize

			if AuthLevel == 0:

				DrAcc 		= request.form['DrAccount']
				DrCat 		= request.form['DebitCategory']
				DrCur 		= request.form['Currency']

				CrAcc 		= request.form['CrAccount']
				CrCat 		= request.form['CreditCategory']
				CrCur		= request.form['Currency']

				Amo  		= Decimal(request.form['Amount'])
				LCYAmount	= Decimal(request.form['LCYAmount'])
				Module 		= 'JE'
				Tran  		= request.form['Transaction']
				TranDate 	= request.form['TransactionDate']
				Ref 		= request.form['ID']
				Note 		= request.form['Note']

				Audit 		= mktaudit.getAuditrail()
				Inputter	= Audit['Inputter']
				Createdon 	= Audit['Createdon']
				Authorizer 	= Audit['Authorizer']
				Authorizeon	= Audit['Authorizeon']
				Branch 		= Audit['Branch']
				Mode 		= mktteller.getMode(DrAcc,CrAcc)

				# Call function to commit add account by currency 
				CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,\
																Amo,Module,Tran,TranDate,Ref,Note,Mode,LCYAmount=LCYAmount)
				if not CheckAccounting[0]:
					flash(CheckAccounting[1])
					return False
			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def beforeAuthorize():

		try:
			
			ID 				= 	g.formID
			JournalObj 	=	MKT_JOURNAL_ENTRY_INAU.query.get(ID)
			
			if not JournalObj:

				flash(msg_error + "Journal %s not found." %ID)
				return False

			else:

				Branch 		= 	JournalObj.Branch
				Amount 		=	JournalObj.Amount if JournalObj.Amount else 0
				LCYAmount	=	JournalObj.LCYAmount if JournalObj.LCYAmount else 0
				
				DrAccount 	=	JournalObj.DrAccount
				DrCategory 	= 	JournalObj.DebitCategory
				DrCurrency 	=	JournalObj.Currency
				CrAccount 	=	JournalObj.CrAccount
				CrCategory 	= 	JournalObj.CreditCategory
				CrCurrency 	=	JournalObj.Currency
				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,\
																	Amount,LCYAmount=LCYAmount)
				if not Check[0]:
					#Catch error
					flash(msg_error + Check[1])
					db.session.rollback()
					db.session.close()
					return False

				CheckAccounting = mktteller.setAuthorize('JE',MKT_JOURNAL_ENTRY,MKT_JOURNAL_ENTRY_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True

		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False


	@staticmethod
	def reverseRec():
		
		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			JournalObj 	=	MKT_JOURNAL_ENTRY.query.get(ID)
			
			if not JournalObj:

				return True, "%s Journal %s not found." %(msg_error, ID)

			else:
				Branch 		= 	JournalObj.Branch
				Amount 		=	JournalObj.Amount if JournalObj.Amount else 0
				LCYAmount	=	JournalObj.LCYAmount if JournalObj.LCYAmount else 0
				DrAccount 	=	JournalObj.CrAccount
				DrCategory 	= 	JournalObj.CreditCategory
				DrCurrency 	=	JournalObj.Currency
				CrAccount 	=	JournalObj.DrAccount
				CrCategory 	= 	JournalObj.DebitCategory
				CrCurrency 	=	JournalObj.Currency

				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,Amount,LCYAmount=LCYAmount)
				if not Check[0]:
					#Catch error
					db.session.rollback()
					db.session.close()
					return True,Check[1]
						
				Check = mktteller.validationReverse(MKT_JOURNAL_ENTRY,MKT_JOURNAL_ENTRY_INAU,ID)
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					# The Key take data from value
					MoveDataField = {
						'DrAccount'  	:'CrAccount',
						'DebitCategory' :'CreditCategory',
						'Currency'   	:'Currency',
					}
					CheckAccounting = mktteller.setReverse('JournalEntry',AuthLevel,'JE',MKT_JOURNAL_ENTRY,MKT_JOURNAL_ENTRY_INAU,ID,Inputter,Createdon,MoveDataField)
					
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e
		
