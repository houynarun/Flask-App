from app.mktcore.wtfimports import *
from app.AlterTable.models  import *
from .models                import *
from flask                  import flash
from app                    import db

import re, os, gc
import app.tools.mkttool    as mkttool
import app.tools.mktaudit   as mktaudit


def isSpecialCharacter(value):
    # Return true if all specail character in the string
    # else false otherwise.
    search=re.compile(r'[^a-zA-Z0-9_]').search
    if bool(search(value)):
        return True
    else:
        return False

# Get all table in current database
def getAllTable():

    tableList = []
    for table in db.metadata.sorted_tables:
        if 'INAU' not in table.name and 'HIST' not in table.name:
            tableList.append((table.name, table.name))

    return tableList

def getDatatype():
    datatype = [
        ("", "--None---"),
        ("String", "String"),
        ("Integer", "Integer"),
        ("Boolean", "Boolean"),
        ("Numeric", "Numeric"),
        ("Text", "Text")
    ]

    return datatype


class FRM_ALTERTABLE(exform):

    TableName   = SelectField(requiredlabel('Table Name', '*'),
                            choices = getAllTable(),
                            coerce = str,
                            default = '0',
                            validators = [validators.Required()]
                        )

    FieldName   = TextField(requiredlabel('Field Name', '*'), validators=[validators.Required()])

    DataType    = SelectField(requiredlabel("Datatype", "*"),
                            choices = getDatatype(),
                            coerce = str,
                            default = "None",
                            validators = [validators.Required()]
                        )

    Length      = TextField("Length")

    Description = TextAreaField("Description",[])

    
    def validate_FieldName(form, field):
        
        if field.data.find(' ') != -1:
            raise ValidationError("%s: Field Name must has no space" % field.name)

        if isSpecialCharacter(field.data):
            raise ValidationError("%s: Field Name must has no special character except _" % field.name)

        ID = request.form['ID']
        FormObj = MKT_ALTERTABLE.query.get(ID)
        if checkColumnExist(form.TableName.data, field.data) and not FormObj:
            raise ValidationError("%s field already exist." % field.data)


    def validate_Length(form, field):
        if form.DataType.data == 'String':        
            if not field.data or not mkttool.isInteger(field.data):
                    raise ValidationError("%s: Invalid integer number" % field.name)
        
        if form.DataType.data == 'Numeric':        
            if not field.data:
                raise ValidationError("%s: is required" % field.name)

            elif field.data.find(',') == -1:
                raise ValidationError("%s: is incorrect format (#,#)" % field.name)

            else:
                Numbers = field.data.split(',')
                if not mkttool.isInteger(Numbers[0]) or not mkttool.isInteger(Numbers[1]):
                    raise ValidationError("%s: Invalid integer number" % field.name)


    @staticmethod
    def beforeInsert():

        ID              = request.form['ID']
        TableName       = request.form['TableName']
        FieldName       = request.form['FieldName']
        DataType        = request.form['DataType']
        Length          = request.form['Length']
        NumOfAuth       = g.getNAuthorize
        
        if NumOfAuth == 0:
            return alterTableField(ID, TableName, FieldName, DataType, Length)
            
        return True

    @staticmethod
    def beforeAuthorize():
        ID          =   g.formID
        TableObj    =   MKT_ALTERTABLE_INAU.query.get(ID)
        Audit       =   mktaudit.getAuditrail()
        Inputter    =   TableObj.Inputter
        Authorizer  =   Audit['Authorizer']
        
        # Cannot authorize by urseft
        if Inputter != Authorizer:
            if TableObj:
                TableName   =   TableObj.TableName
                if TableObj.Status == "INAU":
                    return alterTableField(ID, TableObj.TableName, TableObj.FieldName, TableObj.DataType, TableObj.Length)

                elif TableObj.Status == "RNAU":
                    return postgreDropColumn(TableObj)
            
        return False

    @staticmethod
    def reverseRec():
        ID          =   g.formID
        NumOfAuth   =   g.getNAuthorize
        if NumOfAuth == 0:
            TableObj    =   MKT_ALTERTABLE.query.get(ID)
            if TableObj:
                return postgreDropColumn(TableObj),''

        return True ,''

def checkColumnExist(tablename, columnname):

    try:
        sql = "SELECT attname FROM pg_attribute WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = '%s') AND attname = '%s';" % (tablename, columnname)
        result = db.engine.execute(sql)
        
        for r in result:
            return True

        return False

    except Exception as e:
        raise

    finally:
        db.session.close()

# function name: postgreAddColumn
# description: alter table column in PostgreSQL
def alterTableField(ID, TableName, FieldName, DataType, Length):
    try:
        TableObj    =   MKT_ALTERTABLE.query.get(ID)
        List        =   []
        ExistField  =   []
        
        if TableObj:
            if TableObj.TableName == TableName:
                List = createAlterExistScript(ID, TableName, FieldName, DataType, Length)
                ExistField.append(FieldName)
            else:
                List = createAddScript(ID, TableName, FieldName, DataType, Length)
                postgreDropColumn(TableObj)
        else:
            # create script for alter column if field not already exists
            if not checkColumnExist(TableName, FieldName):
                List = createAddScript(ID, TableName, FieldName, DataType, Length)

            else:
                flash(msg_error + "Field: %s are already exist in main model."%(FieldName))
                return False
                # List = createAlterExistScript(ID, TableName, FieldName, DataType, Length)
                # ExistField.append(FieldName)
            
        SqlList = createAlterScript(TableName, List)

        db.engine.connect()
        # execute all sql statement
        for Sql in SqlList:
            db.engine.execute(Sql)

        Module      =   __import__("app.urlregister")

        if DataType in ["String", "Numeric"]:
            DataType = eval("db.%s(%s)" % (DataType, Length))
        else:
            DataType = eval("db.%s" % DataType)

        TableLiveObj    =   getattr(Module, TableName)
        setattr(TableLiveObj, FieldName, db.Column(DataType))
        
        if db.engine.dialect.has_table(db.engine.connect(), "%s_HIST" % TableName):
            TableHistObj    =   getattr(Module, "%s_HIST" %TableName)
            setattr(TableHistObj, FieldName, db.Column(DataType))

        if db.engine.dialect.has_table(db.engine.connect(), "%s_INAU" % TableName):
            TableInauObj    =   getattr(Module, "%s_INAU" %TableName)
            setattr(TableInauObj, FieldName, db.Column(DataType))

        if len(ExistField) > 0:
            flash("Fields: %s are already exist and altered"%(', '.join(ExistField)))

        return True

    except Exception as e:
        # raise
        errorMsg = str(e)
        db.session.rollback()
        flash(msg_error+errorMsg)
        return False


# function name: createAlterScript
# description: create PostgreSQL script for alter table
# return list of sql script for add to table
def createAlterScript(TableName, List=[]):
    SqlList = []
    if List:
        for L in List:
            SqlList.append('ALTER TABLE "%s" %s' % ("%s" % TableName, L))

            if db.engine.dialect.has_table(db.engine.connect(), "%s_HIST" % TableName):
                SqlList.append('ALTER TABLE "%s" %s' % ("%s_HIST" % TableName, L))

            if db.engine.dialect.has_table(db.engine.connect(), "%s_INAU" % TableName):
                SqlList.append('ALTER TABLE "%s" %s' % ("%s_INAU" % TableName, L))

    return SqlList

# function name: createAddScript
# description: create PostgreSQL script for add column
def createAddScript(ID, TableName, FieldName, DataType, Length):
    
    Type =  "varchar" if DataType == 'String' else DataType.lower()

    if DataType in ["String", "Numeric"]:
        # Ex: varchar(25)
        Type = "%s(%s)" % (Type, Length)

    SqlScript = 'ADD COLUMN "%s" %s' % (FieldName, Type)
    
    return [SqlScript]

def createAlterExistScript(ID, TableName, FieldName, DataType, Length):
    FieldObj    =   MKT_ALTERTABLE.query.get(ID)
    SqlScript   =   []
    Type        =   "varchar" if DataType == 'String' else DataType.lower()
    
    if DataType in ["String", "Numeric"]:
        Type = "%s(%s)" % (Type, Length)

    if FieldObj:
        OldFieldName  =   FieldObj.FieldName
        
        SqlScript.append('ALTER COLUMN "%s" TYPE %s USING ("%s"::%s)' %(OldFieldName, Type, OldFieldName, Type))
        if OldFieldName != FieldName:
            SqlScript.append('RENAME "%s" TO "%s"' %(OldFieldName, FieldName))

    return SqlScript

def postgreDropColumn(TableObj):
    try:

        if checkExistDataInColumn(TableObj.TableName, TableObj.FieldName):
            flash(msg_error+"Field: %s contain Data. reverse operation cannot process."%TableObj.FieldName)
            return False

        else:
            SqlList = createAlterScript(TableObj.TableName, [createDropScript(TableObj.FieldName)])
            db.engine.connect()
            # execute all sql statement
            for Sql in SqlList:
                db.engine.execute(Sql)

            # deleteObjectAttribute(TableObj.TableName, TableObj.FieldName)
            return True

    except Exception as e:
        # raise
        errorMsg = str(e)
        db.session.rollback()
        flash(msg_error+errorMsg)
        return False

def createDropScript(FieldName):
    return 'DROP COLUMN "%s"' %FieldName

def checkExistDataInColumn(TableName, Field):
    
    try:
        Sql = 'SELECT * from "%s" WHERE "%s"::text != \'\'' % (TableName, Field)
        
        db.engine.connect()
        Result = db.engine.execute(Sql)
        Result = Result.fetchone()

        if Result:
            return True

        return False

    except Exception as e:
        raise ValidationError(str(e))

    finally:
        db.session.close()
        
def deleteObjectAttribute(TableObjName, FieldName):
    try:

        Module      =   __import__("app.urlregister")

        # TableObj    =   getattr(Module, TableObjName)
        # delattr(TableObj, FieldName)

        # if db.engine.dialect.has_table(db.engine.connect(), "%s_HIST" % TableObjName):
        #     TableHistObj =   getattr(Module, "%s_HIST" %TableObjName)
        #     delattr(TableHistObj, FieldName)
        #     print 'eeeeeeeee'

        # if db.engine.dialect.has_table(db.engine.connect(), "%s_INAU" % TableObjName):
        #     TableInauObj =   getattr(Module, "%s_INAU" %TableObjName)
        #     delattr(TableInauObj, FieldName)

        #     print 'dddddddd'
        #     for f in TableInauObj.__table__.columns:
        #         print f

        
        # import os 
        # file = os.path.dirname(os.path.dirname('urlregister.pyc'))
        # mkttool.setDeleteFile(file)
        # print file
        Module      =   __import__("app.urlregister")

        TableObj = MKT_ALTERTABLE.query.all()
        for t in TableObj:
            TableName = t.TableName
            DataType = t.DataType
            if t.DataType in ["String", "Numeric"]:
                DataType = eval("db.%s(%s)" % (t.DataType, t.Length))

            else:
                DataType = eval("db.%s" % t.DataType)

            Model = getattr(Module,t.TableName)
            print Model.__module__,Model().__class__.__name__
            imp_module=__import__(Model.__module__)        
            Model = eval('imp_module.'+Model().__class__.__name__)
            # Model = eval('%s.%s'%(Model.__module__,Model().__class__.__name__))
            setattr(Model, t.FieldName, db.Column(DataType))

            if db.engine.dialect.has_table(db.engine.connect(), "%s_HIST" % TableName):
                Model = getattr(Module,"%s_HIST" %t.TableName)
                imp_module=__import__(Model.__module__)        
                Model = eval('imp_module.'+Model().__class__.__name__)
                setattr(Model, t.FieldName, db.Column(DataType))

            if db.engine.dialect.has_table(db.engine.connect(), "%s_INAU" % TableName):
                Model = getattr(Module,"%s_INAU" %t.TableName)
                imp_module=__import__(Model.__module__)        
                Model = eval('imp_module.'+Model().__class__.__name__)
                setattr(Model, t.FieldName, db.Column(DataType))

    except Exception, e:
        raise
