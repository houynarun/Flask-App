from flask 							import g, flash
from wtforms 						import DecimalField, IntegerField
from app.mktcore.wtfimports 		import *
from .models 						import *
from app.Account.models 			import MKT_ACCOUNT
from app.tools.mktroute 			import *
from app.PeriodicInterest.models 	import MKT_PER_INTEREST
from app.TermDepositProduct.models 	import MKT_TERM_DEPOSIT_PRODUCT
from app.LoanRule.models 			import *
from app.LoanRuleDetail.models 		import *
from datetime 						import datetime, date, timedelta

import time
import app.tools.mktmoney 					as mktmoney
import app.tools.mktdate	 				as mktdate
import app.tools.loantools.rescheduletools 	as rescheduletools
import app.tools.mkttermdeposit 			as mkttermdeposit
import app.tools.mktsetting 				as mktsetting
import app.tools.loantools.nonworkingday 	as mktDay
import app.tools.mktholiday 				as mktHoliday
import app.tools.mktaudit 					as mktaudit

@app.route("/Morakot/TermDepositCurrencyInfo", methods=['GET'])
def getTermDepositCurrencyInfo():
	try:

		AccountID 		= 	request.args.get("AccountID")
		query 			= 	MKT_ACCOUNT.query.get(AccountID)
		Currency 		= 	""
		Amount 			=	0

		if query:
			Currency 		= str(query.Currency)
			Amount 			= str(mktmoney.toMoney(float(query.Balance), mktmoney.getCurrencyObj(Currency)))

		return jsonify(Currency=Currency, Amount=Amount)
	except:
		raise

@app.route("/Morakot/TermDepositMaturityDate", methods=['GET'])
def getTermDepositMaturityDate():
	try:

		Term 			= 	request.args.get("Term")
		ValueDate 		=	request.args.get("ValueDate")
		AccountProduct 	=	request.args.get("AccountProduct")
		Amount 			=	request.args.get("Amount")
		Amount 			=	Amount.replace(",", "")
		MaturityDate 	=	""
		TotalAIP 		=	"0"
		IntPerDay 		=	"0"

		if Term:

			MaturityDate 	= 	rescheduletools.getNextMonth(ValueDate, int(Term))
			AccProduct 		=	MKT_TERM_DEPOSIT_PRODUCT.query.get(AccountProduct)

			if AccProduct:
				InterestDayBasis 	= 	int(AccProduct.InterestDayBasis) if AccProduct.InterestDayBasis else int(0)
				InterestKey 		=	AccProduct.InterestKey
				AIPObj 				=	mkttermdeposit.getTotalInterestTD(Term, InterestDayBasis, InterestKey, ValueDate, MaturityDate, Amount)
				TotalAIP 			=	AIPObj[1]
				IntPerDay 			=	AIPObj[0]
		return jsonify(MaturityDate=str(MaturityDate), TotalAIP=str(TotalAIP), IntPerDay=str(IntPerDay))

	except Exception, e:
		return False," %s"%e

@app.route("/Morakot/TermDepositAccountProduct", methods=['GET'])
def getTermDepositAccountProduct():
	try:

		AccountProduct 	= 	request.args.get("AccountProduct")
		Currency 		=	request.args.get("Currency")
		AIPCat 			=	""
		IECat 			=	""
		RollOver 		=	""
		RollOverDesc 	=	"--None--"
		RollOverOption 	=	""
		RollOverOptionDesc 	=	"--None--"
		PreClosingCharge 	=	"0"
		FixRate 			=	""
		FixRateDesc 		=	"--None--"

		if AccountProduct:

			ObjQuery 	=	MKT_TERM_DEPOSIT_PRODUCT.query.get(AccountProduct)
			if ObjQuery:
				AIPCat 		=	ObjQuery.AIPCat
				IECat 		=	ObjQuery.IECat
				RollOver 	=	ObjQuery.RollOver
				RollOverOption 		=	ObjQuery.RollOverOption
				PreClosingCharge 	=	ObjQuery.PreClosingCharge
				PreClosingCharge 	=	mktmoney.toMoney(float(PreClosingCharge), mktmoney.getCurrencyObj(Currency))
				FixRate 			=	ObjQuery.FixRate

				if FixRate:

					if FixRate == "F":
						FixRateDesc = "Fix"
					else:
						FixRateDesc = "Rate"

				if RollOver == 'Y':
					RollOverDesc = 'Yes'
				else:
					RollOverDesc = 'No'

				if RollOverOption:

					if RollOverOption == 'P':
						RollOverOptionDesc = "Principal Only"
					elif RollOverOption == 'IP':
						RollOverOptionDesc = "Interest Paid and Principal"
					elif RollOverOption == 'BP':
						RollOverOptionDesc = "Account Balance and Principal"
				else:

					RollOverOption 		= 	""
					RollOverOptionDesc 	=	"--None--"

		return jsonify(AIPCat=AIPCat, IECat=IECat,
						RollOver=RollOver, RollOverDesc=RollOverDesc,
						RollOverOption=RollOverOption, RollOverOptionDesc=RollOverOptionDesc,
						PreClosingCharge=str(PreClosingCharge), FixRate=FixRate, FixRateDesc=FixRateDesc)

	except:
		raise
		return "Something went wrong."

def getRecord():
	try:
		result = MKT_TERM_DEPOSIT_CONTRACT.query.get(g.formID)
		if not result:
			result = MKT_TERM_DEPOSIT_CONTRACT_INAU.query.get(g.formID)
			if result:
				return [result.Account]

			else:
				return []
		else:
			return [result.Account]

	except:
		raise

def loadAccount():
	try:
		if request.method == 'POST':
			Account = request.form["CustomerID"]
			return MKT_ACCOUNT.query.filter_by(CustomerList=Account).all()
		else:
			if len(getRecord()) > 0:
				return MKT_ACCOUNT.query.filter_by(ID=getRecord()[0]).filter(MKT_ACCOUNT.AccStatus != 'C').all()
			else:
				return MKT_ACCOUNT.query.filter_by(ID='0').filter(MKT_ACCOUNT.AccStatus != 'C').all()
	except:
		raise

def loadAccountProduct():
	return MKT_TERM_DEPOSIT_PRODUCT.query

def loanBankDate():
	return mktdate.getBankDate()

class FRM_TERM_DEPOSIT_CONTRACT(exform):

	CustomerID 		=	RemoteTextField(requiredlabel("Customer", "*"), [validators.Required()])

	Account 		= 	QuerySelectField(requiredlabel("Account", "*"),
							query_factory=loadAccount,
							get_label=lambda a: a.ID + " - " + a.AccName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)

	Currency 		=	TextField(requiredlabel("Currency", "*"), [validators.Required()])
	Amount 			=	TextField(requiredlabel("Amount", "*"), [validators.Required()])
	
	AccountProduct 	= 	QuerySelectField(requiredlabel("Account Product", "*"),
							query_factory=loadAccountProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	AIPCat 			=	TextField(requiredlabel("Accr Int Payables Cat", "*"), [validators.Required()])
	IECat 			=	TextField(requiredlabel("Int Expenses Cat", "*"), [validators.Required()])

	RollOver 		=	SelectField(
							requiredlabel("Roll-over", "*"),
							choices=[
									  ('', '--None--'),
									  ('N', 'No'),
									  ('Y', 'Yes')
									],
							validators=[validators.Required()]
						)

	RollOverOption 	=	SelectField(
							"Roll-over Option",
							choices=[
									  ('', '--None--'),
									  ('P', 'Principal Only'),
									  ('IP', 'Interest Paid and Principal'),
									  ('BP', 'Account Balance and Principal')
									]
						)

	ValueDate 		= 	DateField(requiredlabel("Value Date", "*"), [validators.Required()], default=loanBankDate)
	Term 			= 	IntegerField(requiredlabel("Term (Month)", "*"), [validators.Required()])
	MaturityDate 	= 	DateField("Maturity Date", [validators.Optional()])
	
	# PreClosingCharge=	TextField("Pre-closing Charge", default='0')
	Cycle 			= 	IntegerField(requiredlabel("Cycle", "*"), [validators.Required()], default=1)

	FixRate 		=	SelectField(
							"Fix/Rate",
							choices=[
									  ('', '--None--'),
									  ('F', 'Fix'),
									  ('R', 'Rate')
									],
							description="1-Pre-closing Charge"
						)
	PreClosingCharge=	TextField("Pre-closing Charge", default='0', description="1-Pre-closing Charge")

	AccrIntPerDay 	=	TextField("Accr Int Per Day", default=0, description="2-Accrual Interest")
	IntPaid 		=	TextField("Int Paid", default=0, description="2-Accrual Interest")
	AIPBooked 		=	TextField("Accr Int Payables Booked", default=0, description="2-Accrual Interest")
	AIPCurrent 		=	TextField("Accr Int Current Month", default=0, description="2-Accrual Interest")
	TotalAIP 		=	TextField("Total Accr Int Payables", default=0, description="2-Accrual Interest")

	def validate_Amount(form, field):

		Account = request.form['Account']
		Amount = request.form['Amount']
		Currency = request.form['Currency']

		try:
			Amount = float(Amount)
		except:
			raise ValidationError("This field must be in numeric format.")

		if Amount <= 0:
			raise ValidationError("This field is required.")

		AccProduct = request.form['AccountProduct']
		Balance = mkttermdeposit.checkAmount(Account, Amount)

		if not Balance[0]:
			raise ValidationError(Balance[1])

		MaxMinAmount = mkttermdeposit.checkRuleAmountDeposit(AccProduct, Currency, Amount)

		if not MaxMinAmount[0]:

			raise ValidationError(MaxMinAmount[1])

	def validate_ValueDate(form, field):

		Holiday 	= mktHoliday.getHoliday()
		ValueDate 	= request.form['ValueDate']
		ValueDate 	= datetime.strptime(str(ValueDate),'%Y-%m-%d').date()
		check 		= mktDay.isNonWorkingDay(ValueDate, Holiday)

		if check:
			raise ValidationError("Value date must be different holiday.")

		systemDate 	= mktdate.getBankDate()
		systemDate 	= str(systemDate).replace("-", "")
		ValueDate 	= str(ValueDate).replace("-", "")

		if int(systemDate) > int(ValueDate):
			raise ValidationError("Value date must be bigger than or equal to system bank date.")

	def validate_Term(form, field):
		Term 		=	request.form['Term']
		AccProduct 	= 	request.form['AccountProduct']
		Currency 	= 	request.form['Currency']

		CheckTerm 	=	mkttermdeposit.checkRuleTermDeposit(AccProduct, Currency, Term)

		if not CheckTerm[0]:

			raise ValidationError(CheckTerm[1])

	def validate_PreClosingCharge(form, field):

		PreClosingCharge = request.form['PreClosingCharge']

		if PreClosingCharge:

			try:
				float(PreClosingCharge)
			except:
				raise ValidationError("This field must be in numeric format.")

	def validate_RollOverOption(form, field):

		RollOver 		=	request.form['RollOver']

		if RollOver == 'Y':

			RollOverOption = request.form['RollOverOption']

			if not RollOverOption:

				raise ValidationError("This field is required.")

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def setDisable():
		Fields 	= 	[('Currency'), ('MaturityDate'), ('AIPCat'), ('IECat'),
					('AccrIntPerDay'), ('IntPaid'), ('AIPBooked'), ('AIPCurrent'), ('TotalAIP')]
		return Fields

	@staticmethod
	def setWidth():
		control_list= [('Currency', len1), ('ValueDate', len3), ('Term', len1),
					   ('MaturityDate', len3), ('Cycle', len1)]

		return control_list

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay 	= "Account"
		varname 		= "CustomerID:$('#CustomerID').val()"
		fun 			= ["CustomerID", varname, fielddisplay, "/Morakot/ContractCustomerInfo", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#Currency').val(data.Currency); $('#Amount').val(data.Amount);"
		varname 		= "AccountID:$('#Account').val()"
		fun 			= ["Account", varname, fielddisplay, "/Morakot/TermDepositCurrencyInfo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#MaturityDate').val(data.MaturityDate)"
		fielddisplay 	+= ";$('#AccrIntPerDay').val(data.IntPerDay)"
		fielddisplay 	+= ";$('#TotalAIP').val(data.TotalAIP)"
		varname 		= "Term:$('#Term').val(), ValueDate:$('#ValueDate').val(), AccountProduct:$('#AccountProduct').val(), Amount:$('#Amount').val()"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/TermDepositMaturityDate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#MaturityDate').val(data.MaturityDate)"
		fielddisplay 	+= ";$('#AccrIntPerDay').val(data.IntPerDay)"
		fielddisplay 	+= ";$('#TotalAIP').val(data.TotalAIP)"
		varname 		= "Term:$('#Term').val(), ValueDate:$('#ValueDate').val(), AccountProduct:$('#AccountProduct').val(), Amount:$('#Amount').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/TermDepositMaturityDate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#MaturityDate').val(data.MaturityDate)"
		fielddisplay 	+= ";$('#AccrIntPerDay').val(data.IntPerDay)"
		fielddisplay 	+= ";$('#TotalAIP').val(data.TotalAIP)"
		varname 		= "Term:$('#Term').val(), ValueDate:$('#ValueDate').val(), AccountProduct:$('#AccountProduct').val(), Amount:$('#Amount').val()"
		fun 			= ["ValueDate", varname, fielddisplay, "/Morakot/TermDepositMaturityDate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#AIPCat').val(data.AIPCat)"
		fielddisplay 	+= ";$('#IECat').val(data.IECat)"
		fielddisplay 	+= ";$('#PreClosingCharge').val(data.PreClosingCharge)"
		fielddisplay 	+= ";$('#FixRate').select2('data', {'id':data.FixRate,'text':data.FixRateDesc})"
		fielddisplay 	+= ";$('#RollOver').select2('data', {'id':data.RollOver,'text':data.RollOverDesc})"
		fielddisplay 	+= ";$('#RollOverOption').select2('data', {'id':data.RollOverOption,'text':data.RollOverOptionDesc})"
		varname 		= "AccountProduct:$('#AccountProduct').val(), Currency:$('#Currency').val()"
		fun 			= ["AccountProduct", varname, fielddisplay, "/Morakot/TermDepositAccountProduct", "change" ]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def moneyField():
		return [("Amount", "Currency"), ("AccrIntPerDay", "Currency"),
				("IntPaid", "Currency"), ("AIPBooked", "Currency"),
				("AIPCurrent", "Currency"), ("TotalAIP", "Currency")]

	@staticmethod
	def formatMoney():
		return ["Amount"], "Currency"

	@staticmethod
	def listField():
		return ["ID", "CustomerID", "Account", "Currency", "Amount",
				"ValueDate", "Term", "MaturityDate"]

	@staticmethod
	def reverseRec():
		return False,"Record not allow to reverse."
		
	@staticmethod
	def beforeAuthorize():
		try:

			event_code 	=	"0"
			ID 			=	g.formID

			Audit 		= 	mktaudit.getAuditrail()
			Inputter	= 	Audit['Inputter']
			Createdon 	= 	Audit['Createdon']
			Authorizer 	= 	Audit['Authorizer']
			Authorizeon	= 	Audit['Authorizeon']

			TermObj 	=	MKT_TERM_DEPOSIT_CONTRACT_INAU.query.get(ID)

			if not TermObj:
				flash(msg_error + "Deposit contract %s not found." %ID)
				db.session.rollback()
				return False

			DrAcc 	= 	TermObj.Account
			AccObj 	=	MKT_ACCOUNT.query.get(DrAcc)
			if not AccObj:
				flash(msg_error + "Account %s not found." %DrAcc)
				db.session.rollback()
				return False

			DrCat 		=	AccObj.AccCategory
			Amount 		= 	TermObj.Amount
			Currency 	= 	TermObj.Currency
			ValueDate 	=	TermObj.ValueDate
			Branch 		=	TermObj.Branch
			TASetting 	=	mktsetting.getTASetting()

			if not TASetting:
				db.session.rollback()
				flash(msg_error + "Term deposit setting not found, Please setting it up.")
				return False

			CrCat 	=	TASetting.SavingTermCat
			Tran 	=	TASetting.SavingTermTran

			setCommit 	= 	mkttermdeposit.setTABooking(
								Branch,			# Branch
								DrAcc, 			# Debit Account
								DrCat, 			# Debit Category
								"", 			# Credit Account
								CrCat, 			# Credit Category
								Currency, 		# Currency
								Amount, 		# Amount
								Tran, 			# Transaction
								"TD", 			# Module
								ID, 			# Reference
								"", 			# Note
								"", 			# Debit Mode
								"Direct", 		# Credit Mode
								"YES", 			# Debit "YES"
								"", 			# Crdit "YES"
								Inputter, 		# Inputter
								Createdon, 		# Createdon
								Authorizer, 	# Authorizer
								Authorizeon 	# Authorizedon
							)

			if setCommit[0]:

				return True
				
			else:
				flash(msg_error + setCommit[1])
				db.session.rollback()
				return False

		except Exception, e:
			db.session.rollback()
			flash(msg_error + "%s" %e)
			# raise
			return False

	@staticmethod
	def redirectAfterInsert():
		try:

			NumOfAuth 		= 	g.getNAuthorize
			event_code 		=	"0"
			ID 				=	request.form['ID']
			DrAcc 			= 	request.form['Account']
			Amount 			= 	request.form['Amount']
			Currency 		= 	request.form['Currency']
			ValueDate 		=	request.form['ValueDate']

			Audit 		= 	mktaudit.getAuditrail()
			Inputter	= 	Audit['Inputter']
			Createdon 	= 	Audit['Createdon']
			Authorizer 	= 	Audit['Authorizer']
			Authorizeon	= 	Audit['Authorizeon']
			setCommit 	=	[True, ""]

			if NumOfAuth == 0:
				
				AccObj 	=	MKT_ACCOUNT.query.get(DrAcc)
				if not AccObj:
					flash(msg_error + "Account %s not found." %DrAcc)
					db.session.rollback()

				DrCat = AccObj.AccCategory

				TermObj 	=	MKT_TERM_DEPOSIT_CONTRACT.query.get(ID)
				if not TermObj:
					flash(msg_error + "Deposit contract %s not found." %ID)
					db.session.rollback()

				Branch 		=	TermObj.Branch
				TASetting 	=	mktsetting.getTASetting()

				if not TASetting:
					db.session.rollback()
					flash(msg_error + "Term deposit setting not found, Please setting it up.")

				CrCat 	=	TASetting.SavingTermCat
				Tran 	=	TASetting.SavingTermTran

				setCommit 	= 	mkttermdeposit.setTABooking(
									Branch,			# Branch
									DrAcc, 			# Debit Account
									DrCat, 			# Debit Category
									"", 			# Credit Account
									CrCat, 			# Credit Category
									Currency, 		# Currency
									Amount, 		# Amount
									Tran, 			# Transaction
									"TD", 			# Module
									ID, 			# Reference
									"", 			# Note
									"", 			# Debit Mode
									"Direct", 		# Credit Mode
									"YES", 			# Debit "YES"
									"", 			# Crdit "YES"
									Inputter, 		# Inputter
									Createdon, 		# Createdon
									Authorizer, 	# Authorizer
									Authorizeon 	# Authorizedon
								)
			else:

				TermObj 	=	MKT_TERM_DEPOSIT_CONTRACT_INAU.query.get(ID)

			if setCommit[0]:

				# Update Next Run Date
				TermObj.NextRunDate 	=	ValueDate
				db.session.add(TermObj)
				db.session.commit()
				
			else:
				flash(msg_error + setCommit[1])
				db.session.rollback()

		except Exception, e:
			db.session.rollback()
			flash(msg_error + "%s" %e)
			# raise

		return None