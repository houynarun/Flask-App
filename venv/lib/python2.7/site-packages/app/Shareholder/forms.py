from app.mktcore.wtfimports import *
from .models 				import *
import time
from datetime 				import date
from app.Currency.models 	import *

# Load All Currency
def loadCurrency():
	return MKT_CURRENCY.query

# FRM_SHARE_HOLDER
class FRM_SHARE_HOLDER(exform):

	Name 		= 	TextField(requiredlabel("Shareholder Name","*"),[validators.Required()])
	
	Gender 		= 	SelectField(requiredlabel('Gender',"*"),
						choices=[('M','Male'),('F','Female'),('O','Other')],
						coerce=str,
						validators=[validators.Required()]
					)

	NumberOfShare 	=	TextField(requiredlabel('Number Of Share','*'),[validators.Required()])
	
	Currency		=	QuerySelectField(requiredlabel('Currency','*'),query_factory=loadCurrency, 
							get_label='ID',#Field Name
							allow_blank=True,
							blank_text='--None--',
							validators=[validators.Required()]
						)

	Amount 		=	TextField(requiredlabel("Amount","*"),[validators.Required()])


	@staticmethod
	def moneyField():
		return [["Amount","Currency"]]

	@staticmethod
	def formatMoney():
		return ["Amount"], "Currency"

	# Validate Amout field
	def validate_Amount(form,field):
		amount=form.Amount.data
		try:
			amount=float(amount)
		except Exception, e:
			raise ValidationError("This field must be in numeric format.")

		if amount<=0:
			raise ValidationError("Amount must be more than 0.")

	# Validate NumberOfShare Field
	def validate_NumberOfShare(form,field):
		NumberOfShare=form.NumberOfShare.data
		try:
			NumberOfShare=int(NumberOfShare)
		except Exception, e:
			raise ValidationError("This field must be in numeric format.")
		if NumberOfShare<=0:
			raise ValidationError("Number Of Share must be more than 0.")
	