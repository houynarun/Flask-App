"""
	Project: Pawnshop
	Author : Vith Kimly
	Email  : <kimlyvithkimly@gmail.com> 
	Date   : 30.08.2018
	@Version 	: v0.0.1
	Description : 
		1. Record base 'mean: Everything is depend on the value of record'
		2. Dynamic module 'you can set up on any module you want'
		3. Controll flow of record 
		4. Multi users and branch on workflow
"""
from app 	import db
from datetime import datetime


from app.mktcore.imports 					import *
from app.Workflow.PreSetting.models 		import * 
from app.Workflow.Signatory.models			import *
from app.Workflow.Approved.models		    import *
from app.Workflow 							import mktapirequest
from app.Upload.exportimport 				import *
from app.mktcore.formmodel 					import * 
from flask 									import redirect
from collections 							import OrderedDict
from app.Workflow.Methods					import *
from sqlalchemy 							import or_,and_
import datetime
import app.tools.mktnotification 	 		as mktnotification
import app.tools.mktdate	 				as mktdate
import app.tools.mktaudit 					as mktaudit
import app.tools.user 						as mktuser
import app.tools.mktsetting 				as mktsetting
import app.tools.mktaddress 				as mktaddress
import app.tools.mktmoney 					as mktmoney
from   app.tools.mktloan 					import toBaseCurrency
# import app.tools.mktloan 					as mktloan
import requests
from app.mktcore.globalfunction				import *
from app.mktcore.customform 				import *
from app.Customer.models 					import *
from app.Collateral.models 					import *
from app.CoPropertyType.models 				import *
from app.CollateralType.models 				import *
from app.LoanProduct.models 				import *
from app.RepaymentSchedule.models 			import *
from app.Position.models	import *
from app.Country.models 					import *
from app.Education.models 					import *
from app.Position.models 					import *
from app.IdType.models 						import *
from app.PD.models 							import *
from app.LoanPurpose.models 				import MKT_LOAN_PURPOSE
from app.tools.mktsetting 					import getAccSetting
from app.CreditScoring.CreditScore.models 	import *

try:
	BasedCurrency 	= getAccSetting().BaseCurrency
except Exception as e:
	BaseCurrency = ''


class Workflow(object):

	"""Global variable to store form and logic 
	   after split. After split you can use this 
	   global dict every time,no need to split again
	"""
	storeFormLogic = {}

	def __init__(self):
	
		"""
			Init only one time and then please comment it 
			if have any new form for workflow, open comment 
			and run again to update the dict
		"""
		self.addToGlobalDict(self,self.storeFormLogic)	
		# print self.getEditMode('FRM_QUICK_LOAN')

	@staticmethod
	def print_classes():
		for name, obj in inspect.getmembers(current_module):
			if inspect.isclass(obj):
				print(obj)
	"""
		addToGlobalDict : 
			- Use to add workflow setting from form to global dictionary.
			- Global Dict : is use to store logic and flow of setting.
			- Global dict is called when workflow class is init.
			- Global dict store as :
				[logic] => [flow],[flow1],[flow2]
	"""
	@staticmethod
	def addToGlobalDict(self,globalDict = ''):
		formList = MKT_APPROVAL_SETTING.query

		for fl in formList:
			myDict = dict(self.splitLogicAndFlow(fl.ID))
			self.storeFormLogic.update({fl.ID:myDict})
	"""
		printGlobalDict:
			- Use to print global dictionary "does it have data or not? for testing"
			- You need to pass global dict to it through argument
	"""
	@staticmethod
	def printGlobalDict(d=''):
		for k, v in d.items():
			for key,value in d.get(k).items():
				print key+":"+value
	"""
		split:
			- Use to split string or character by delimiter pass to parameter 
			- It is different from split method built of python
	"""
	@staticmethod
	def split(str='', delim=" "):
		index = 0
		string = ""
		array = []
		while index < len(str):
			if str[index] not in delim: 
				string += str[index]
			else:
				if string: 
					array.append(string)
					string = ""
			index += 1
		if string: array.append(string)
		return array

	"""
		splitLogicAndFlow:
			- Use to split logic and flow of setting
			- Return Orderdict of logic and flow 
	"""
	@staticmethod
	def splitLogicAndFlow(formID=''):
		
		dicLogicFlow = OrderedDict()
		logic = []
		logicFlow  = MKT_APPROVAL_SETTING.query.filter_by(ID = formID)

		for l in logicFlow:
			logicFlow = l.LogicRule
		myString = Workflow.split(logicFlow,"@")
		if "\r\n" in myString:
			myString.remove("\r\n")

		k = 0
		for i in range(0,len(myString),2):
			k = k +2
			logic.append(myString[i:k])

		for i in range(0,len(logic)):
			dicLogicFlow.update({logic[i][0]:logic[i][1]})

		return dicLogicFlow

	"""
		getEditMode:
			- Get edit mode from setting 
			- Default is empty : ""
			- Empty : it take edit mode from workflow app setting
			- True  : user can edit workflow when they have permission 
					  in workflow process 
			- False : user only can see the record info but they cannot edit
					  only prepared user that can edit the record so if they 
					  want to edit they need to feedback to prepared user to edit
	"""
	@staticmethod
	def getEditMode(formID=''):
		editMode = ""
		if formID:
			editObj = MKT_APPROVAL_SETTING.query.get(formID)
			if editObj:
				editMode = editObj.EditMode
		return editMode

	"""
		getUrl: 
			- Get url from setting of workflow 
	"""
	@staticmethod 
	def getUrl(formID=''):
		url = ""
		urlObj = MKT_APPROVAL_SETTING.query.get(formID)
		if urlObj:
			url = urlObj.Url
		return url

	"""
		getDescription: 
			- Get description from setting of workflow 
	"""
	@staticmethod
	def getDescription(formID = ''):
		des= ""
		desObj = MKT_APPROVAL_SETTING.query.get(formID)
		if desObj:
			des = desObj.Description
		return des

	"""
		getAllModels: 
			- Reture all model views registerCRUD
			- You need to pass from ID or class form name ex: "FRM_QUICK_LOAN"
			  or you can pass url to it
	"""
	@staticmethod
	def getAllModels(formID ='',url=''):
		models = ""
		path   = ""
		if url !="":
			path = url+"/views.py"
		elif formID !="":
			path = Workflow.getUrl(formID)+"/views.py"

		# print "path:",path
		models = getAllModelsFromFile(path)
		# print "Model:",models
		return models

	"""
		numberOfReviewer:
			- Return number of reviews by record ID
			- You need to pass flow and record ID to it 
	"""
	@staticmethod
	def numberOfReviewer(flow='',recordID=''):

		flow = Workflow.split(flow,"*")

		if len(flow) == 3:
			subflow = flow[0].split(" ")
			flow = subflow[0:len(subflow)-1]
			flow = [x for x in flow if x]
		else:
			flow = -1
		return flow

	"""
		numberOfApprover:
			- Return number of approver by record ID
			- You need to pass flow and record ID to it 
	"""
	@staticmethod
	def numberOfApprover(flow='',recordID=''):
		
		flow = Workflow.split(flow,"*")
		if len(flow) == 3:
			subflow = flow[1].split(" ")
			flow = subflow[0:len(subflow)-1]
			flow = [x for x in flow if x]

		elif len(flow) == 2:
			subflow = flow[0].split(" ")
			if len(subflow) == 1:
				flow = subflow[0]
			else:
				flow = subflow[0:len(subflow)-1]
				flow = [x for x in flow if x]
				# mean it has only approve and branch
		elif len(flow) == 1:
			flow = ""
			# == 0 : mean it is error because it need to have at least two fields 
			# if one mean can be no approve or no branch
		return flow

	"""
		getBranch:
			- Return all branchs of flow which match with record ID 
			- Branch that we already config in workflow configuration in logic field
	"""
	@staticmethod
	def getBranch(flow=''):
		
		branch = []
		flow   = Workflow.split(flow,"*")

		if(Workflow.numberOfReviewer(flow) != -1):
			branch = flow[len(flow)-1]
		else:
			branch = flow[len(flow)-1]

		return branch

	"""
		isReviewOrder:
			- Check workflow setting review order or not 
			- Return format : ['N','2','3'] for N2/3 or ['Y','2','3'] for Y2/3
	"""
	@staticmethod
	def isReviewOrder(flow='',recordID=''):

		getOrder = []
		order    = "N"

		if(Workflow.numberOfReviewer(flow,recordID) != -1):
			flow 	= Workflow.split(flow,"*")
			subflow = flow[0].split(" ")
	
			flow 	= subflow[len(subflow)-1]
			flow 	= list(flow)

			if flow[0].upper() == "Y":
				order = "Y"
				getOrder.append(order)
				getOrder.append(flow[1])
				getOrder.append(flow[3])
			else:
				order = "N"
				getOrder.append(order)
				getOrder.append(flow[1])
				getOrder.append(flow[3])
		else:
			return getOrder

		return getOrder

	"""
		getMaxApproveNum:
			- Get max or approve number 
	"""
	@staticmethod
	def getMaxApproveNum(currentUserID='',flow='',recordID=''):
		approveNum = 0
		if Workflow.isReviewer(currentUserID,flow,recordID) == -1:
			return approveNum
		else:
			approveNum = Workflow.isApproveOrder(flow,recordID)
			if not approveNum:
				approveNum = 0
			else:
				# ex: 2/3 [1] = 2, [2] = 3
				approveNum = approveNum[2]
		return approveNum

	"""
		getCoramApproveNum:
			- Get coram of approver number 
		example :
			- 2/3 : coram mean '3'
	"""
	@staticmethod
	def getCoramApproveNum(currentUserID='',flow='',recordID=''):
		approveNum = 0
		if Workflow.isReviewer(currentUserID,flow,recordID) == -1:
			return approveNum
		else:
			approveNum = Workflow.isApproveOrder(flow,recordID)
			if not approveNum:
				approveNum = 0
			else:
				# ex: 2/3 [1] = 2, [2] = 3
				approveNum = approveNum[1]
		return approveNum

	"""
		getMaxReviewNum:
			- Get maximum of review number 
	"""
	@staticmethod
	def getMaxReviewNum(currentUserID='',flow='',recordID=''):
		reviewNum = 0
		if Workflow.isApprover(currentUserID, flow, recordID) == -1:
			return reviewNum
		else:
			reviewNum = Workflow.isReviewOrder(flow,recordID)
			if not reviewNum:
				reviewNum = 0
			else:
				# ex: 2/3 [1] = 2, [2] = 3
				reviewNum = reviewNum[2]
		return reviewNum

	"""
		getCoramReviewNum:
			- Get coram of reviewer number 
		example :
			- 2/3 : coram mean '3'
	"""
	@staticmethod
	def getCoramReviewNum(currentUserID='',flow='',recordID=''):
		reviewNum = 0
		if Workflow.isApprover(currentUserID, flow, recordID) == -1:
			return reviewNum
		else:
			reviewNum = Workflow.isReviewOrder(flow,recordID)
			if not reviewNum:
				reviewNum = 0
			else:
				# ex: 2/3 [1] = 2, [2] = 3
				reviewNum = reviewNum[1]
		return reviewNum

	"""
		isApproveOrder:
			- Check workflow setting approve order or not
			- Return format : ['N','2','3'] for N2/3 or ['Y','2','3'] for Y2/3

	"""
	@staticmethod
	def isApproveOrder(flow='',recordID=''):

		getOrder = []
		order 	 = "N"

		if(Workflow.numberOfApprover(flow,recordID) != -1):
			flow = Workflow.split(flow,"*")
			# change this 20/06/2018
			if len(flow)==3:
				subflow = flow[1].split(" ")
				flow = subflow[len(subflow)-1]
				flow = list(flow)
			elif len(flow)==2:
				subflow = flow[0].split(" ")
				flow = subflow[len(subflow)-1]
				flow = list(flow)

			if flow[0].upper() == "Y":
				order = "Y"
				getOrder.append(order)
				getOrder.append(int(flow[1]))
				getOrder.append(int(flow[3]))

			elif flow[0].upper() == "N":
				order = "N"
				getOrder.append(order)
				getOrder.append(int(flow[1]))
				getOrder.append(int(flow[3]))
		else:
			flow = Workflow.split(flow,"*")
			# print flow
			subflow = flow[0].split(" ")
			flow = subflow[len(subflow)-1]
			
			flow = list(flow)
			# print flow

			if flow[0].upper() == "Y":
				order = 1
				getOrder.append(order)
				getOrder.append(int(flow[1]))
				getOrder.append(int(flow[3]))

			elif flow[0].upper() == "N":
				order = 0
				getOrder.append(order)
				getOrder.append(int(flow[1]))
				getOrder.append(int(flow[3]))

		return getOrder
	"""
		getExtraRoleNotification:
			- Get extra role to notification from workflow setting
	"""
	@staticmethod
	def getExtraRoleNotification(formID=''):

		extraRole = []
		exRole    = MKT_APPROVAL_SETTING.query.filter_by(ID = formID)

		for exR in exRole:
			extraRole = exR.ExtraRole.split(" ")

		return extraRole
	"""
		getRoleByUserID:
			- Get user role by user ID 
	"""
	@staticmethod
	def getRoleByUserID(userID=''):
		role = ""
		roleObj = MKT_USER.query.filter(MKT_USER.ID == userID)
		if roleObj.first():
			role = roleObj.Role

		return role
	"""
		getCurrentUserRole:
			- Get current user role 
	"""
	@staticmethod
	def getCurrentUserRole(currentUserID=''):

		role = MKT_USER.query.filter_by(ID = currentUserID)
		for r in role:
			role = r.Role

		return role
	"""
		isReviewer:
			- Check user is reviewer or not in setting
			- Return True and False
	"""
	@staticmethod
	def isReviewer(currentUserID='',flow='',recordID=''):
		
		reviewer  = False
		reviewers = []

		roleID 		= Workflow.getCurrentUserRole(currentUserID)
		reviewers 	= Workflow.numberOfReviewer(flow,recordID)

		if reviewers !=-1:
			if roleID in reviewers:
				reviewer = True
		else:
			return reviewer		

		return reviewer
	"""
		isRoleReviewer:
			- Check role is reviewer or not 
			- Return True and False
	"""
	@staticmethod
	def isRoleReviewer(currentUserID='',formID='',recordID=''):
		
		reviewer 	= False
		reviewers 	= []
		flow 		= Workflow.getFlowByRecordID(Workflow.storeFormLogic,formID,recordID)	
		roleID 		= Workflow.getCurrentUserRole(currentUserID)
		reviewers 	= Workflow.numberOfReviewer(flow,recordID)

		if reviewers !=-1:
			if roleID in reviewers:
				reviewer = True
		else:
			return reviewer		

		return reviewer
	@staticmethod
	def isRoleApprover(currentUserID='',formID='',recordID=''):
		
		approver 	= False
		approvers 	= []
		flow 		= Workflow.getFlowByRecordID(Workflow.storeFormLogic,formID,recordID)	
		roleID 		= Workflow.getCurrentUserRole(currentUserID)
		approvers 	= Workflow.numberOfApprover(flow,recordID)

		if approvers !=-1:
			if roleID in approvers:
				approver = True
		else:
			return approver		

		return approver
	"""
		isApprover:
			- Check current user is approver or not 
			- Return True and False
	"""
	@staticmethod
	def isApprover(currentUserID='',flow='',recordID=''):
		
		approver  = False
		approvers = []
		roleID    = Workflow.getCurrentUserRole(currentUserID)
		approvers = Workflow.numberOfApprover(flow,recordID)

		if approvers !=-1:
			if roleID in approvers:
				approver = True
		else:
			return approver		

		return approver

	"""
		updateStatus:
			- After record is in finally approve
			- We need to change status to True 
			- So that we can authorize it 
	"""
	@staticmethod
	def updateStatus(formID='',recordID=''):
		modelINAU = Workflow.getModelsINAU(formID)
		if modelINAU:
			tbObj = eval(modelINAU[0]).query.get(recordID)
			tbObj.RestrictAuth = 'True'
			db.session.commit()
	"""
		getModelsINAU: 
			- Get all models INAU class 
			- Type class
	"""
	@staticmethod
	def getModelsINAU(formID=''):
		models = []
		modelsObj = MKT_APPROVAL_SETTING.query.get(formID)
		if modelsObj:
			subModels = [x.strip() for x in modelsObj.Models.split(' ')]
			for m in subModels:
				models.append((m+"_INAU".strip()).encode())
		return models
	"""
		getModelsLIVE: 
			- Get all models LIVE class 
			- Type class
	"""
	@staticmethod
	def getModelsLIVE(formID=''):
		models = []

		modelsObj = MKT_APPROVAL_SETTING.query.get(formID)
		models = [x.strip().encode() for x in modelsObj.Models.split(' ')]

		return models
	"""
		getModelsHIST: 
			- Get all models HIST class 
			- Type class
	"""
	@staticmethod
	def getModelsHIST(formID=''):
		models = []

		modelsObj = MKT_APPROVAL_SETTING.query.get(formID)
		if modelsObj:
			subModels = [x.strip() for x in modelsObj.Models.split(' ')]
			for m in subModels:
				models.append((m+"_HIST".strip()).encode())

		return models

	@staticmethod
	def getUserRoleReviewOrder(userID,flow,recordID):

		orderNum = 0
		if(Workflow.numberOfReviewer(flow,recordID) != -1):
			orderNum = Workflow.numberOfReviewer(flow,recordID)
			roleID = Workflow.getCurrentUserRole(userID)

			if unicode(roleID) in orderNum:
				orderNum = orderNum.index(roleID) + 1
			else:
				orderNum = 0

		return orderNum

	@staticmethod
	def getUserRoleApproveOrder(userID,flow,recordID):
		orderNum = 0
		
		if(Workflow.numberOfApprover(flow,recordID) != -1):
			orderNum = Workflow.numberOfApprover(flow,recordID)
			roleID   = Workflow.getCurrentUserRole(userID)
			if unicode(roleID) in orderNum:
				orderNum = orderNum.index(roleID) + 1
			else:
				orderNum = 0
		return orderNum

	@staticmethod 
	def getUserReviewApproveRecord(currentUserID='',formID=''):

		description 			= ""
		formReviewAndRecordNum  = []
		formApproveAndRecordNum = []
		formRevApp 				= []
		listRecords 			= Workflow.getRecordsReviewAndApprove(currentUserID,formID)
		approvalObject 			= MKT_APPROVAL_SETTING.query.get(formID)

		if approvalObject:
			description = approvalObject.Description

		formReviewAndRecordNum.append(description)
		formReviewAndRecordNum.append(len(listRecords[0]))
		formApproveAndRecordNum.append(description)
		formApproveAndRecordNum.append(len(listRecords[1]))

		formRevApp.append(formReviewAndRecordNum)
		formRevApp.append(formApproveAndRecordNum)

		return formRevApp
	@staticmethod 
	def getUserReviewApproveRecords(currentUserID,formID):

		description 			= ""
		formReviewApprove		= []
		listRecords 			= Workflow.getRecordsReviewAndApprove(currentUserID,formID)
		approvalObject 			= MKT_APPROVAL_SETTING.query.get(formID)

		if approvalObject:
			description = approvalObject.Description
		
		formReviewApprove.append(description)
		formReviewApprove.append(len(listRecords[0])+len(listRecords[1]))
		return formReviewApprove
	@staticmethod
	def getRecordsReviewAndApprove(currentUserID,formID):
		reviewApproveNum = []
		reviewRecords 	 = []
		approveRecords	 = []
		listRecord 		 = []
		removeListLive   = []
		order 			 = []
		description 	 = ""

		description 	 = Workflow.getDescription(formID=formID)
		APPROVE_MESSAGE  = "has been approve successfully"
		REJECTED_MESSAGE = "has been rejected"
		TITTLE 			 = "Workflow-"+description
		currentBranch 	 = mktuser.getBranch(session["ChangeBranch"]).ID
		currentRole 	 = Workflow.getCurrentUserRole(currentUserID)
		accessBranch 	 = MKT_USER.query.filter(MKT_USER.ID == currentUserID).first()
		if accessBranch:
			if "ALL" in accessBranch.AccessBranch:
				recordID  = db.session.query(MKT_WORKFLOW_SIGNATORY.RecordID).filter(MKT_WORKFLOW_SIGNATORY.Action == '1',MKT_WORKFLOW_SIGNATORY.FormID == formID).group_by(MKT_WORKFLOW_SIGNATORY.RecordID)
			else:
				recordID  = db.session.query(MKT_WORKFLOW_SIGNATORY.RecordID).filter(MKT_WORKFLOW_SIGNATORY.Action == '1',MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.Branch == currentBranch).group_by(MKT_WORKFLOW_SIGNATORY.RecordID)
		
		if recordID:
			for re in recordID:
				listRecord.append(re.RecordID)
		for record in listRecord:
			# 1 = aprove in MKT_APPROVED
			# 2 = reject in MKT_APPROVED
			approveObj   =  MKT_APPROVED.query.filter(or_(and_(MKT_APPROVED.RecordID == record,MKT_APPROVED.Status == '1'),and_(MKT_APPROVED.RecordID==record,MKT_APPROVED.Status == '2')))
			if approveObj.all():
				removeListLive.append(record)		

		for listlive in removeListLive:
			listRecord.remove(listlive)

		# accessBranch = MKT_USER.query.filter(MKT_USER.Role == currentRole).first()
		if accessBranch:
			
			if "ALL" or currentBranch in accessBranch.AccessBranch:
				for lr in listRecord:
					flow = Workflow.getFlowByRecordID(Workflow.storeFormLogic,formID,lr)

					settingMaxReviewNum  		=  Workflow.getMaxReviewNum(currentUserID,flow,lr)
					korumReviewNum 				=  Workflow.getCoramReviewNum(currentUserID,flow,lr)
					settingMaxApproveNum  		=  Workflow.getMaxApproveNum(currentUserID,flow,lr)	
					korumApproveNum  			=  Workflow.getCoramApproveNum(currentUserID,flow,lr)

					extraNotification 			=  Workflow.getExtraRoleNotification(formID)
					usersRelated 				=  Workflow.getUserRelatedWith(flow,lr,formID)		
					path 						=  Workflow.getFormURLByID(formID)
					recordDoneRejected  		=  MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.Action == '4').count()
					recordDoneReviewed  		=  MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.Action == '2').count()
					
					recordDoneApproved  		=  MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.Action == '3').count()
					recordDoneApproverRejected  =  MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.Action == '7').count()


					if Workflow.isReviewer(currentUserID,flow,lr):
						if (int(recordDoneReviewed) + int(recordDoneRejected)) < int(settingMaxReviewNum):
							# reviewRecords.append(lr)
							if int(recordDoneRejected) >= int(korumReviewNum):
								# Reject this record enough to reject
								# Move to history	
								Workflow.addToApproved(lr,formID,'2')
								Workflow.moveToHist(formID,lr)
								Workflow.notificationUsers(currentUserID,usersRelated,lr,path, TITTLE, REJECTED_MESSAGE)
								# Notify extra user role
								Workflow.notificationUsers(currentUserID,extraNotification,lr,path,TITTLE,REJECTED_MESSAGE)
								continue
							elif int(recordDoneReviewed) >= int(korumReviewNum):
								# print "case 2"
								# reviewRecords.append(lr)
								continue
							elif int(recordDoneReviewed) < int(korumReviewNum):	
								# print "case 4"
								order = Workflow.isReviewOrder(flow,lr)
								if order != 0:
									order = order[0]
								# print "Order:",order
								if order == "N":
									# print "not order"
									# print flow
									thisRole = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
												   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='2'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
												   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='4'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()
									if thisRole:
										for act in thisRole:
											# can be review, feedback, rejected
											# print "This action==>",act.Action
											if act.Action:
												break
											else:
												reviewRecords.append(lr)
									else:
										reviewRecords.append(lr)
					
								elif order == "Y":
									# print flow
									reviewer = Workflow.numberOfReviewer(flow,lr)
									if Workflow.getUserRoleReviewOrder(currentUserID,flow,lr) == 1:
										# print "order 1"
										thisRole = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
												   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='2'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
												   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='4'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()			
										if thisRole:
											for act in thisRole:
												# can be review, feedback, rejected
												# print "This action==>",act.Action
												if act.Action:
													break
												else:
													reviewRecords.append(lr)
										else:
											# print "here"
											reviewRecords.append(lr)
									else:
										
										Index = reviewer.index(currentRole)
										role = reviewer[Index-1]

										actionObj = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == role).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()

										if actionObj:
											# mean it already review
											for act in actionObj:
												if act.Action =='2':
													curRoleObj =  db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(MKT_WORKFLOW_SIGNATORY.RecordID == lr,
																  MKT_WORKFLOW_SIGNATORY.RoleID == currentRole, MKT_WORKFLOW_SIGNATORY.UserID == currentUserID).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()
													if curRoleObj:
														for cur in curRoleObj:
															if cur.Action =='2':
																break
															elif cur.Action == '4':
																break
															elif cur.Action == '5':
																reviewRecords.append(lr)
																break
															else:
																reviewRecords.append(lr)
																break
														break
													else:
														# current also not yet review
														reviewRecords.append(lr)
													break

												elif act.Action == '4':
													reviewRecords.append(lr)
													break
												elif act.Action == '5':
													continue
												else:
													# reviewRecords.append(lr)
													continue
										else:
											# not yet review, can be reject or feedback
											# reviewRecords.append(lr)
											continue
							else:
								continue
						elif (int(recordDoneReviewed) + int(recordDoneRejected)) == int(settingMaxReviewNum):
							# print "case 3"
							# 1 + 1 = 2
							# 3 + 1 = 4
							if int(recordDoneReviewed) > int(recordDoneRejected):
								# reviewRecords.append(lr)
								continue
							elif int(recordDoneReviewed) < int(recordDoneRejected):
								Workflow.addToApproved(lr,formID,'2')
								Workflow.moveToHist(formID, lr)
								Workflow.notificationUsers(currentUserID,usersRelated,lr,path, TITTLE, REJECTED_MESSAGE)
								Workflow.notificationUsers(currentUserID,extraNotification,lr,path, TITTLE, REJECTED_MESSAGE)
								continue
						
					elif Workflow.isApprover(currentUserID,flow,lr):
						if (int(recordDoneApproved) + int(recordDoneApproverRejected)) < int(settingMaxApproveNum):
							if int(recordDoneApproverRejected) >= int(korumApproveNum):
								# Reject this record enough to reject
								# Move to history	
								Workflow.addToApproved(lr,formID,'2')
								Workflow.moveToHist(formID,lr)
								Workflow.notificationUsers(currentUserID,usersRelated,lr,path, TITTLE, REJECTED_MESSAGE)
								# Notify extra user role
								Workflow.notificationUsers(currentUserID,extraNotification,lr,path,TITTLE,REJECTED_MESSAGE)
								continue
							elif int(recordDoneApproved) == int(korumApproveNum):
								Workflow.addToApproved(lr,formID,'1')
								Workflow.moveToLive(formID, lr)
								# Notify extra user role
								Workflow.notificationUsers(currentUserID,extraNotification,lr,path,TITTLE, APPROVE_MESSAGE)
								# Notify user related"
								Workflow.notificationUsers(currentUserID,usersRelated,lr,path, TITTLE, APPROVE_MESSAGE)
								continue
							elif int(recordDoneApproved) < int(korumApproveNum):
								# Not enough approve number
								# print "length approve = 1"
								if len(Workflow.numberOfApprover(flow, lr)) == 1:
									
									reviewerNum = Workflow.numberOfReviewer(flow,lr) 
									# print "reviewerNum",reviewerNum
									if reviewerNum != -1:
										if (int(recordDoneReviewed) + int(recordDoneRejected)) < int(settingMaxReviewNum):
											if int(recordDoneRejected) >= int(korumReviewNum):
												Workflow.addToApproved(lr,formID,'2')
												Workflow.moveToHist(formID, lr)
												Workflow.notificationUsers(currentUserID,usersRelated,lr,path, TITTLE, REJECTED_MESSAGE)
												# Notify extra user role
												Workflow.notificationUsers(currentUserID,extraNotification,lr,path,TITTLE,REJECTED_MESSAGE)
												continue
											elif int(recordDoneReviewed) >= int(korumReviewNum):
												thisRole = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
															   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='7'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
															   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='3'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()
														
												if thisRole:
													for act in thisRole:
														# can be approve, feedback, rejected
														if act.Action:
															break
														else:
															approveRecords.append(lr)
												else:
													# print "here"
													approveRecords.append(lr)
											elif int(recordDoneReviewed) < int(korumReviewNum):
												continue
										elif (int(recordDoneReviewed) + int(recordDoneRejected)) == int(settingMaxReviewNum):
											if  int(recordDoneReviewed) > int(recordDoneRejected):
												approveRecords.append(lr)
												continue
											elif int(recordDoneReviewed) < int(recordDoneRejected):
												# reject add to hist
												Workflow.addToApproved(lr,formID,'2')
												Workflow.moveToHist(formID, lr)
												Workflow.notificationUsers(currentUserID,usersRelated,lr,path, TITTLE, REJECTED_MESSAGE)
												# Notify extra user role
												Workflow.notificationUsers(currentUserID,extraNotification,lr,path,TITTLE,REJECTED_MESSAGE)
												continue
											# else:
											# 	approveRecords.append(lr)
											# 	continue
									else:
										# have only approver
										# is this role approve already
										thisRole = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
														   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='7'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
														   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='3'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()
							
										if thisRole:
											for act in thisRole:
												if act.Action:
													break
												else:
													approveRecords.append(lr)
										else:
											approveRecords.append(lr)
										
								elif len(Workflow.numberOfApprover(flow, lr)) > 1:
									if Workflow.numberOfReviewer(flow, lr) != -1:
										if (int(recordDoneReviewed) + int(recordDoneRejected)) < int(settingMaxReviewNum):
											if int(recordDoneReviewed) < int(korumReviewNum):
												continue
											elif int(recordDoneRejected) >= int(korumReviewNum):
												Workflow.addToApproved(lr,formID,'2')
												Workflow.moveToHist(formID, lr)
												Workflow.notificationUsers(currentUserID,usersRelated,lr,path, TITTLE, REJECTED_MESSAGE)
												# Notify extra user role
												Workflow.notificationUsers(currentUserID,extraNotification,lr,path,TITTLE,REJECTED_MESSAGE)
												continue
											if int(recordDoneReviewed) >= int(korumReviewNum):
												order = Workflow.isApproveOrder(flow,lr)
												if order != 0:
													order = order[0]
												if order == "N":
													# print "approve not order"
													thisRole = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
															   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='7'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
															   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='3'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()
														
													if thisRole:
														for act in thisRole:
															# can be approve, feedback, rejected
															# print "This action==>",act.Action
															if act.Action:
																break
															else:
																approveRecords.append(lr)
													else:
														approveRecords.append(lr)

												elif order == "Y":
													# print "Approver order"
													# print "listOfRecordToReview order = Y",flow
													approver = Workflow.numberOfApprover(flow,lr)
													# print "approver",approver

													if Workflow.getUserRoleApproveOrder(currentUserID,flow,lr) == 1:
														# print "order 1"
														thisRole = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
																   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='7'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
																   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='3'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()
														
														if thisRole:
															for act in thisRole:
																# can be approve, feedback, rejected
																# print "This action==>",act.Action
																if act.Action:
																	break
																else:
																	approveRecords.append(lr)
														else:
															# print "here"
															approveRecords.append(lr)
													else:
														# print "Not approve equal 1"
														Index = approver.index(currentRole)
														role = approver[Index-1]

														# print "role:",role
														# print "index:",Index 

														actionObj = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == role).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()

														if actionObj:
															# mean it already review
															for act in actionObj:
																# print "Action == ",act.Action
																if act.Action =='3':
																	curRoleObj =  db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
																				  MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='7'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
																				  MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='3'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()

																	if curRoleObj:
																		
																		for act in curRoleObj:
																			if act.Action:
																				break
																			else:
																				approveRecords.append(lr)

																	else:
																		# current also not yet review
																		approveRecords.append(lr)
																		# print "actionObj is None"
																	break

																elif act.Action == '7':
																	approveRecords.append(lr)
																	break
																elif act.Action == '5':
																	continue
																else:
																	# approveRecords.append(lr)
																	continue
										
										elif (int(recordDoneReviewed) + int(recordDoneRejected)) == int(settingMaxReviewNum):
											if  int(recordDoneReviewed) > int(recordDoneRejected):
												# check currect user is approved or not yet 
												thisRole = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
														   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='7'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
														   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='3'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()
							
												if thisRole:
													for act in thisRole:
														if act.Action:
															break
														else:
															approveRecords.append(lr)
															continue
												else:
													approveRecords.append(lr)
													continue
												# approveRecords.append(lr)
												# continue
											elif int(recordDoneReviewed) < int(recordDoneRejected):
												# reject add to hist
												Workflow.addToApproved(lr,formID,'2')
												Workflow.moveToHist(formID, lr)
												Workflow.notificationUsers(currentUserID,usersRelated,lr,path, TITTLE, REJECTED_MESSAGE)
												# Notify extra user role
												Workflow.notificationUsers(currentUserID,extraNotification,lr,path,TITTLE,REJECTED_MESSAGE)
												continue
											# else:
											# 	approveRecords.append(lr)
											# 	continue
										
									else:
										order = Workflow.isApproveOrder(flow,lr)
										if order != 0:
											order = order[0]
										if order == "N":
											# print "approve not order"
											thisRole = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
													   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='7'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
													   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='3'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()
												
											if thisRole:
												for act in thisRole:
													# can be approve, feedback, rejected
													# print "This action==>",act.Action
													if act.Action:
														break
													else:
														approveRecords.append(lr)
											else:
												# print "here"
												approveRecords.append(lr)

										elif order == "Y":
											# print "Approver order"
											# print "listOfRecordToReview order = Y",flow
											approver = Workflow.numberOfApprover(flow,lr)
											# print "approver",approver

											if Workflow.getUserRoleApproveOrder(currentUserID,flow,lr) == 1:
												# print "order 1"
												thisRole = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
														   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='7'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
														   MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='3'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()
												
												if thisRole:
													for act in thisRole:
														if act.Action:
															break
														else:
															approveRecords.append(lr)
												else:
													# print "here"
													approveRecords.append(lr)
											else:
												# print "Not approve equal 1"
												Index = approver.index(currentRole)
												role = approver[Index-1]
												actionObj = db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == role).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()

												if actionObj:
													# mean it already review
													for act in actionObj:
														# print "Action == ",act.Action
														if act.Action =='3':
															curRoleObj =  db.session.query(MKT_WORKFLOW_SIGNATORY.Action).filter(or_(and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
																		  MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='7'),and_(MKT_WORKFLOW_SIGNATORY.RecordID == lr,MKT_WORKFLOW_SIGNATORY.RoleID == currentRole,
																		  MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.Action=='3'))).group_by(MKT_WORKFLOW_SIGNATORY.Action).all()

															if curRoleObj:
																
																for act in curRoleObj:
																	if act.Action:
																		break
																	else:
																		approveRecords.append(lr)

															else:
																# current also not yet review
																approveRecords.append(lr)
															break

														elif act.Action == '7':
															approveRecords.append(lr)
															break
														elif act.Action == '5':
															continue
														else:
															# approveRecords.append(lr)
															continue
												else:
													continue
						elif (int(recordDoneApproved) + int(recordDoneApproverRejected)) == int(settingMaxApproveNum):
							if int(recordDoneApproved) > int(recordDoneApproverRejected):
								Workflow.addToApproved(lr,formID,'1')
								Workflow.moveToLive(formID, lr)
								Workflow.notificationUsers(currentUserID,extraNotification,lr,path,TITTLE, APPROVE_MESSAGE)
								Workflow.notificationUsers(currentUserID,usersRelated,lr,path, TITTLE, APPROVE_MESSAGE)
								continue
							elif int(recordDoneApproved) < int(recordDoneApproverRejected):
								Workflow.addToApproved(lr,formID,'2')
								Workflow.moveToHist(formID, lr)
								Workflow.notificationUsers(currentUserID,usersRelated,lr,path, TITTLE, REJECTED_MESSAGE)
								Workflow.notificationUsers(currentUserID,extraNotification,lr,path, TITTLE, REJECTED_MESSAGE)
								continue
							# else:
							# 	approveRecords.append(lr)
							# 	continue
					else:
						continue
				
		reviewApproveNum.append(reviewRecords)
		reviewApproveNum.append(approveRecords)


		return reviewApproveNum

	@staticmethod
	def moveToHist(formID,recordID):

		modelsINAU    = Workflow.getModelsINAU(formID)
		modelsHIST 	  = Workflow.getModelsHIST(formID)
		db.session.commit()
		mktaudit.moveINAUtoHIST(eval(modelsINAU[0]),eval(modelsHIST[0]),recordID)
		mktaudit.deleteINAU(eval(modelsINAU[0]),recordID)
		db.session.commit()

	@staticmethod
	def moveToLive(formID,recordID):	
		try:
			Workflow.updateStatus(formID=formID,recordID=recordID)
			Url 		= Workflow.getFormURLByID(formID)
			host 		= request.url.split("/Morakot")[0]
			BaseUrl 	= 	"%s/Morakot/API/%s/"%(host,Url) # api url
			UrlAuth 	=	BaseUrl+"Authorize/%s/?accept=override"%recordID
			AuthResponse, status = mktapirequest.api_request.postAuthorize(url=UrlAuth)

			# print "AuthRespone:",AuthResponse
			# print "status",status
			# return status
		except Exception as e:
			print "There is a problem, contact developer!"
			raise e
			
	@staticmethod
	def isUserReviewed(RoleID,RecordID):
		# status
		# 1. applied 
		# 2. reviewed
		# 3. approved
		# 4. rejected
		# 5. feedback
		reviewed = False
		action   = 0
		obj = MKT_WORKFLOW_SIGNATORY.query.filter(and_(MKT_WORKFLOW_SIGNATORY.RecordID == RecordID,
				 MKT_WORKFLOW_SIGNATORY.RoleID == RoleID,MKT_WORKFLOW_SIGNATORY.Action == '2'))
		if obj:
			for o in obj:
				action = o.Action
		if int(action) == 2:
			reviewed = True

		return reviewed

	@staticmethod
	def getFlowByRecordID(globalDict,formID,recordID):
		logicFlow = "empty"
		recordBranch = Workflow.getBranchByRecordID(recordID, formID)
		try:
			for k, v in globalDict.items():
				if formID == k:
					for key,value in globalDict.get(k).items():
						settingBranch = Workflow.getApplyBranchs(value,recordID)
						logic = key.replace("$","")
						if eval(logic) and recordBranch in settingBranch:
							logicFlow = value
							break
						else:
							continue
				else:
					continue
		except Exception as e:
			raise e

		return logicFlow

	@staticmethod
	def insertSignatoryAfterSave(FormID='',RecordID='',RoleID='',UserID=''):
		"""
			1. Enable : Yes
			2. Enable : No
		"""
		# print 'RecordID',RecordID
		# print 'FormID',FormID

		datenow 	=  mktdate.getDateTimeNow()
		Action  	= "1"
		nextLevel  	=  Workflow.getNextLevel(UserID, FormID, RecordID)
		insetCondition = False

		workflowSettingObj = MKT_APPROVAL_SETTING.query.filter(MKT_APPROVAL_SETTING.ID == FormID).first()
		if workflowSettingObj:
			if workflowSettingObj.Enable == '1':
				SignatoryObj = MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.FormID == FormID,MKT_WORKFLOW_SIGNATORY.RecordID == RecordID,MKT_WORKFLOW_SIGNATORY.Action == '1')
				if SignatoryObj.first() == None:
					Action = "1"
				else:
					# mean edit record
					Action = "8"

				Workflow.addSignatory(datenow,RecordID,Action,"",RoleID,UserID,FormID,"",nextLevel)
				insetCondition = True
			elif workflowSettingObj.Enable =='2':
				Workflow.updateStatus(formID=FormID,recordID=RecordID)
		else:
			Workflow.updateStatus(formID=FormID,recordID=RecordID)
		
		return insetCondition

	@staticmethod
	def deleteSignatory(RecordID='',Action=''):
		if RecordID:
			MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.RecordID==RecordID).delete()
			db.session.commit()
		if Action !="" and RecordID !="":
			MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.RecordID ==RecordID,MKT_WORKFLOW_SIGNATORY.Action==Action).delete()
			db.session.commit()
		return None

	@staticmethod
	def addRecordObject(recordObj):
		try:
			db.session.add(recordObj)
			db.session.commit()
			db.session.flush()
		except Exception as e:
			raise e
		return None

	@staticmethod
	def notificationUsers(fromUser,toUserList,recordID,path,title,Comment):
		try:
			if isinstance(toUserList, list):
				for user in toUserList:
					mktnotification.insertNotify({'ID': recordID, 
												'Path':path,
												'Title':title,
												'From': fromUser, 'To': user,
												'Message': Comment
												})
			else:
				users = toUserList.split(",")
				for user in users:
					mktnotification.insertNotify({'ID': recordID, 
												'Path':path,
												'Title':title,
												'From': fromUser, 'To': user,
												'Message': Comment
												})
			
		except Exception as e:
			raise e

		return None

	@staticmethod
	def addSignatory(Createdon='',RecordID='',Action='',Comment='',RoleID='',currentUserID='',FormID='',NotifyUserID='',NextLevel=''):
		Branch = ''
		Branch 	= 	mktuser.getBranch(session["ChangeBranch"]).ID
		try:
			userSignatory = MKT_WORKFLOW_SIGNATORY(Createdon = Createdon,
													RecordID = RecordID,
													Action 	 = Action,
													Comment  = Comment,
													RoleID 	 = RoleID,
													UserID 	 = currentUserID,
													FormID 	 = FormID,
													NotifyUserID = NotifyUserID,
													NextLevel 	 = NextLevel,
													Branch 		 = Branch)
			Workflow.addRecordObject(userSignatory)
		except Exception as e:
			raise e
		return None
	@staticmethod
	def getFormURLByID(formID):

		formurl = MKT_APPROVAL_SETTING.query.get(formID)
		if formurl:
			formurl = formurl.Url
		else:
			formurl = ""

		return formurl
	
	@staticmethod
	def getUserRelatedWith(flow,recordID,formID):
		users 		 = []
		userRoleList = []
		userRole 	 = []
		reviewers 	 = Workflow.numberOfReviewer(flow,recordID)
		approvers 	 = Workflow.numberOfApprover(flow, recordID)
		# currentBranch 	= mktuser.getBranch(session["ChangeBranch"]).ID
		recordBranch = Workflow.getBranchByRecordID(recordID,formID)

		if reviewers !=-1:
			userRoleList.append(reviewers)
			if approvers !=-1:
				userRoleList.append(approvers)
		elif approvers !=-1:
			userRoleList.append(approvers)
			if  reviewers !=-1:
				userRoleList.append(reviewers)

		userRole = [item for sublist in userRoleList for item in sublist]
		userRole.insert(0,'EMP')

		for role in userRole:
			if role == 'EMP':
				user = MKT_USER.query.filter(MKT_USER.Role == role)
				for u in user:
					if Workflow.isPreparedUser(u.ID,recordID):
						users.append(u.ID.encode())
						break
					continue

			else:
				user = MKT_USER.query.filter(MKT_USER.Role == role)
				for u in user:
					if recordBranch in u.AccessBranch or "ALL" in u.AccessBranch:
						users.append(u.ID.encode())
					continue
		return users
	@staticmethod
	def isPreparedUser(userID,recordID):
		prepared = False
		preparedUserObj = MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.RoleID == 'EMP',MKT_WORKFLOW_SIGNATORY.Action == '1',MKT_WORKFLOW_SIGNATORY.RecordID == recordID).first()

		if preparedUserObj:
			preparedUser = preparedUserObj.UserID
			if userID == preparedUser:
				prepared = True
		return prepared

	@staticmethod
	def addToApproved(recordID ="",formID="",status=""):
		try:
			approveObj = MKT_APPROVED(RecordID = recordID,FormID = formID,Status = status)
			Workflow.addRecordObject(approveObj)
		except Exception as e:
			raise e

		return None

	@staticmethod
	def isApproved(currentUserID,recordID,formID):
		doneApproved = False

		approveObj = MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.Action == "3")
		if approveObj.first():
			doneApproved = True

		return doneApproved

	@staticmethod
	def isReviewed(currentUserID,recordID,formID):
		doneReviewed = False

		reviewObj = MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.Action == "2")
		if reviewObj.first():
			doneReviewed = True

		return doneReviewed

	@staticmethod
	def isRejected(currentUserID,recordID,formID):
		doneRejected = False

		rejectedObj = MKT_WORKFLOW_SIGNATORY.query\
					  .filter(or_(and_(MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,\
					  MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.Action == "4"),\
					  and_(MKT_WORKFLOW_SIGNATORY.UserID == currentUserID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,\
					  MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.Action == "7")))
		if rejectedObj.first():
			doneRejected = True

		return doneRejected

	@staticmethod
	def getNextLevel(currentUserID,formID,recordID):
		nextLevel 		= []
		w 				= Workflow()
		flow 			= w.getFlowByRecordID(w.storeFormLogic,formID,recordID)
		usersRelated 	= w.getUserRelatedWith(flow,recordID,formID)
		for user in usersRelated:
			if Workflow.isReviewer(user, flow, recordID):
				queryObj = MKT_WORKFLOW_SIGNATORY.query.filter(or_(and_(MKT_WORKFLOW_SIGNATORY.UserID == user,MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.Action == '2'),
																   and_(MKT_WORKFLOW_SIGNATORY.UserID == user,MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.Action == '4')))
				if queryObj.first():
					continue
				else:
					nextLevel.append(user.encode())
					break
			elif Workflow.isApprover(user, flow, recordID):
				queryObj = MKT_WORKFLOW_SIGNATORY.query.filter(or_(and_(MKT_WORKFLOW_SIGNATORY.UserID == user,MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.Action == '3'),
																   and_(MKT_WORKFLOW_SIGNATORY.UserID == user,MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.Action == '7')))
				if queryObj.first():
					continue
				else:
					nextLevel.append(user.encode())
					break
			else:
				continue
		nextLevel = str(nextLevel).strip('[]').replace('\'', "")
		return nextLevel
	@staticmethod
	def getReviewedBy(formID,recordID):
		reviewers = []

		reviewObj = db.session.query(MKT_WORKFLOW_SIGNATORY.UserID)\
					  .filter(MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.Action =='2')\
					  .group_by(MKT_WORKFLOW_SIGNATORY.UserID)
		if reviewObj:
			for re in reviewObj:
				reviewers.append(re.UserID.encode())

		return reviewers

	@staticmethod
	def getApprovedBy(formID,recordID):
		approvers = []

		approveObj = db.session.query(MKT_WORKFLOW_SIGNATORY.UserID)\
					   .filter(MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.Action =='3')\
					   .group_by(MKT_WORKFLOW_SIGNATORY.UserID)
		if approveObj:
			for ap in approveObj:
				approvers.append(ap.UserID.encode())

		return approvers

	@staticmethod
	def getRejectedBy(formID,recordID):
		rejecters = []

		rejecterObj = db.session.query(MKT_WORKFLOW_SIGNATORY.UserID)\
						.filter(MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.Action =='4')\
						.group_by(MKT_WORKFLOW_SIGNATORY.UserID)
		if rejecterObj:
			for re in rejecterObj:
				rejecters.append(re.UserID.encode())

		return rejecters

	@staticmethod
	def getApplyBranchs(flow,recordID):
		branch = []
		flow = Workflow.split(flow,"*")

		if len(flow) == 3:
			branch.append(flow[2].encode())
		elif len(flow) == 2:
			branch.append(flow[1].encode())
		branch = branch[0]
		return branch
	@staticmethod
	def getBranchByRecordID(recordID,formID):
		branch = ""
		branchObj = MKT_WORKFLOW_SIGNATORY.query\
					.filter(MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.Action == "1")\
					.first()
		if branchObj:
			branch = branchObj.Branch
		return branch
	@staticmethod
	def workflowDashboard():
		w 				= Workflow()
		listFormReview 	= {} 
		listFormApprove = {}
		formIDList 		= {}
		listForm 		= {}
		reviewApproveList = []
		currentUserID 	= session.get('getLogInID')
		datenow 		=  mktdate.getDateTimeNow()
		
		for formID, v in w.storeFormLogic.items():
			reviewApproveList = w.getUserReviewApproveRecords(currentUserID,formID)
			listForm.update({reviewApproveList[0]:reviewApproveList[1]})
			formIDList.update({reviewApproveList[0]:formID})

		return listForm,formIDList

	@staticmethod
	def userRecently():
		activityObj 	 = ""
		currentBranch 	 = 	mktuser.getBranch(session["ChangeBranch"]).ID
		activityObj 	 =  MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.Branch == currentBranch)\
													   .order_by(MKT_WORKFLOW_SIGNATORY.Createdon.desc())\
													   .limit(20)
		if activityObj:
			activityObj  =  activityObj
		else:
			activityObj  =  ""

		return activityObj

class FRM_LIST_RECORD(exform):
	pass

class CLS_ListRecord(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):
		try:
			w 						= Workflow()
			formID 					= request.args.get('formID')
			currentUserID 			= session.get('getLogInID')
			formTitle 				= ""
			formurl 				= ''
			recordReview 			= 0
			recordApprove   		= 0
			listRecordReviewObj 	= []
			listRecordApproveObj 	= []

			reviewObj 				= []
			approveObj 				= []
			
			TypeRecord 		= str(request.args.get('type' , 'Review'))

			approvalObject = MKT_APPROVAL_SETTING.query.get(formID)
			if approvalObject:
				formTitle  = approvalObject.Description
				formurl = approvalObject.Url

			listReviewApproveRecordID = Workflow.getRecordsReviewAndApprove(currentUserID,formID)
			recordReview 			  = len(listReviewApproveRecordID[0])
			recordApprove 			  = len(listReviewApproveRecordID[1])
			for lr in listReviewApproveRecordID[0]:
				reviewObj   = MKT_WORKFLOW_SIGNATORY.query\
							  .filter(	MKT_WORKFLOW_SIGNATORY.RecordID == 	lr,\
										MKT_WORKFLOW_SIGNATORY.FormID 	== 	formID,
										MKT_WORKFLOW_SIGNATORY.Action 	==	'1' )	

				nextLevel  	= Workflow.getNextLevel(currentUserID, formID, lr)
				reviews 	= Workflow.getReviewedBy(formID,lr)
				reviews 	= str(reviews).replace('\'', "")
				approves 	= Workflow.getApprovedBy(formID, lr)
				approves 	= str(approves).replace('\'', "")
				rejects 	= Workflow.getRejectedBy(formID, lr)
				rejects 	= str(rejects).replace('\'', "")
				te = reviewObj.first()
				listRecordReviewObj.append({
											'Branch':te.Branch,
											'RecordID':te.RecordID,
											'Inputter':te.UserID,
											'Createdon':te.Createdon,
											'Reviewers':reviews.strip('[]'),
											'Approvers':approves.strip('[]'),
											'Rejecters':rejects.strip('[]'),
											'NextLevel':nextLevel
										  })

			for lr in listReviewApproveRecordID[1]:
				approveObj  = MKT_WORKFLOW_SIGNATORY.query\
							  .filter(MKT_WORKFLOW_SIGNATORY.RecordID == lr,\
							  MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.Action=='1')		
				nextLevel  	= Workflow.getNextLevel(currentUserID, formID, lr)
				reviews 	= Workflow.getReviewedBy(formID,lr)
				reviews 	= str(reviews).replace('\'', "")
				approves 	= Workflow.getApprovedBy(formID, lr)
				approves 	= str(approves).replace('\'', "")
				rejects 	= Workflow.getRejectedBy(formID, lr)
				rejects 	= str(rejects).replace('\'', "")
				te = approveObj.first()
				listRecordApproveObj.append(     {'Branch':te.Branch,
												 'RecordID':te.RecordID,
												 'Inputter':te.UserID,
												 'Createdon':te.Createdon,
												 'Reviewers':reviews.strip('[]'),
												 'Approvers':approves.strip('[]'),
												 'Rejecters':rejects.strip('[]'),
												 'NextLevel':nextLevel})

			if checkContentType() == 'json' or 'API' in request.url:

				DataRecordApprove = getDataApproveReview(typeListObj=listRecordApproveObj,formurl=formurl,formID=formID,name='Approve Record')
				DataRecordReview  = getDataApproveReview(typeListObj=listRecordReviewObj,formurl=formurl,formID=formID,name='Review Record')
				BodyList = [DataRecordReview,DataRecordApprove]
				BodyDict = {'header':[],'data':BodyList}
				self.body 		= BodyDict
				self.customType = 'Custom'
			self.form 		= FRM_LIST_RECORD
			self.kwargs 	=	{
									'formID' : formID,
									'listRecordReviewObj': listRecordReviewObj,
									'listRecordApproveObj':listRecordApproveObj,
									'formTitle' : formTitle,
									'recordReview' :recordReview,
									'recordApprove': recordApprove
								}
								
			return True
		except Exception as e:
			print 'Errror ==========>',str(e)

def getDataApproveReview(typeListObj = [],formurl='',formID='' , name = ''):
	List 		= []
	currentUserID 			= session.get('getLogInID')
	currentRole 			= Workflow.getCurrentUserRole(currentUserID)
	appEditMode     	= mktsetting.getAppSetting('WorkflowMode')
	workflowEditMode	= Workflow.getEditMode(formID)
	editMode 			= appEditMode
	if workflowEditMode != "":
		editMode = workflowEditMode

	for row in typeListObj:
		TempList 	=	[]
		ListDic		=	{}
		for key,value in row.items():
			TempList.append({'key':key,'value':value , 'color':''})
		IsEdit = ''
		if currentRole == 'EMP':
			IsEdit = '/Edit'
		else:
			if editMode == 'True':
				IsEdit = '/Edit'
				# /ReviewApproveCustom/?ID=LA19010200002&formID=FRM_LOAN_APPLICATION&InBranch=HO
		Url = '/%s/?ID=%s&formID=%s&InBranch=%s'%('ReviewApproveCustom',row.get('RecordID'),formID,row.get('Branch'))

		TempListImportant = [{'key':'ID','color':'','value':row.get('RecordID')},
							{'key':'Createdon','color':'','value':row.get('Createdon')},
							{'key':'Current Review/Approve','color':'','value':row.get('NextLevel')}]

		ListDic.update({
				"columns":TempList,
				'important':TempListImportant,
				"urls":[{'url':Url,'type_url':'Custom','icon':'','text':'View'}]
				})
		List.append(ListDic)
	return  {
				'icon':'','size':'12','name':name,'title':name,'type':'Table','data':List,'most_data':True,'expand':True
			}



class FRM_APPROVE_REVIEW(exform):
	comment 	= TextAreaField('Comment')
	# notifyTo 	= 
	@staticmethod
	def setVisible():
		return ['recordID','formID','formurl']

		

class CLS_ReviewApproveCustom(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):
	# Check permission
		# ErrorMsg     = []
		# getCheck     = checkAccess("/Morakot/ReviewApproveCustom/","Search")

		# if getCheck != True: 
		# 	ErrorMsg.append(msg_error+msg_permission)
		# 	return render_template("permission.html",ErrorMsg=ErrorMsg)

		formID  				= ""
		formurl 				= "" 
		preparedUser 			= ""
		editMode 				= ""
		recordInBranch  		= ""

		ID 						= request.args.get('ID')
		if not ID:
			ID 						= request.args.get('ID')
		currentUserID 			= session.get('getLogInID')
		currentRole 			= Workflow.getCurrentUserRole(currentUserID)
		formID 					= request.args.get('formID')
		currentBranch 			= mktuser.getBranch(session["ChangeBranch"]).ID
		recordInBranch  		= request.args.get('InBranch')
		msgWorkonOtherBranch 	= ""
		users      				= db.session.query(MKT_USER.ID,MKT_USER.DisplayName)\
							.filter(or_(MKT_USER.AccessBranch.contains(currentBranch),MKT_USER.AccessBranch.contains("ALL")))\
							.group_by(MKT_USER.ID).order_by(MKT_USER.Role)
		if recordInBranch 		!= None:
			if recordInBranch 	!= currentBranch:
				# switch branch
				session['ChangeBranch'] = recordInBranch
				msgWorkonOtherBranch 	= "Now you're working on "+recordInBranch +" branch"
				users      				= db.session.query(MKT_USER.ID,MKT_USER.DisplayName).filter(MKT_USER.AccessBranch == recordInBranch)\
									.group_by(MKT_USER.ID).order_by(MKT_USER.Role)
		if formID:
			formurl = MKT_APPROVAL_SETTING.query.get(formID)
			if formurl:
				formurl = formurl.Url
		else:
			formIDObj 	= MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.RecordID == ID).first()
			if formIDObj:		
				formID 		= formIDObj.FormID
				formurl 	= MKT_APPROVAL_SETTING.query.get(formID)
				if formurl:
					formurl = formurl.Url

		# editMode 
		appEditMode     	= mktsetting.getAppSetting('WorkflowMode')
		workflowEditMode	= Workflow.getEditMode(formID)
		editMode 			= appEditMode
		if workflowEditMode != "":
			editMode = workflowEditMode

		isReviewer 		= Workflow.isRoleReviewer(currentUserID, formID, ID)
		isApprover 		= Workflow.isRoleApprover(currentUserID, formID, ID)

		
		preparedUserObj = MKT_WORKFLOW_SIGNATORY.query.filter(MKT_WORKFLOW_SIGNATORY.RoleID == 'EMP',MKT_WORKFLOW_SIGNATORY.Action == '1',MKT_WORKFLOW_SIGNATORY.RecordID == ID).first()

		if preparedUserObj:
			preparedUser = preparedUserObj.UserID

		doneApproved 	= Workflow.isApproved(currentUserID, ID, formID)
		doneReviewed 	= Workflow.isReviewed(currentUserID, ID, formID)
		doneRejected    = Workflow.isRejected(currentUserID, ID, formID)

		signatory 		= MKT_WORKFLOW_SIGNATORY.query\
							.filter(MKT_WORKFLOW_SIGNATORY.RecordID == ID,MKT_WORKFLOW_SIGNATORY.Action != None)\
							.order_by(MKT_WORKFLOW_SIGNATORY.ID.desc())


		Url = '/Action'
		IDType = "LoanApplication"
		CustomToolBars=[
							{'title':'Review','type':'Button','method':'post','url':'%s?action=2'%Url,'param':[],'icon':'eye','type_url':'Custom','color':''},
							{'title':'Rejected','type':'Button','method':'post','url':'%s?action=7'%Url,'param':[],'icon':'times','type_url':'Custom','color':''},
							{'title':'Feedback','type':'Button','method':'post','url':'%s?action=5'%Url,'param':[],'icon':'refresh','type_url':'Custom','color':''},
							{'title':'Approve','type':'Button','method':'post','url':'%s?action=3'%Url,'param':[],'icon':'check-square-o','type_url':'Custom','color':''},
							{'title':'Cancel','type':'Custom','method':'post','url':'%s?action=6'%Url,'param':[],'icon':'undo','type_url':'Custom','color':''},
							{'title':'Rejected','type':'Button','method':'post','url':'%s?action=4'%Url,'param':[],'icon':'times','type_url':'Custom','color':''},
							{'title':'Auto Request','type':'AutoRequest','method':'get','url':'/CreditScoreTemplate/?ID=%s&IDType=%s'%(ID,IDType),'param':[],'icon':'times','type_url':'AutoRequest','color':''},
							{'title':'Auto Request','type':'AutoRequest','method':'get','url':'/Workflow/Signatory/FRM_LOAN_APPLICATION/?ID=%s'%(ID),'param':[],'icon':'times','type_url':'AutoRequest','color':''},
							{'title':'Auto Request','type':'AutoRequest','method':'get','url':'/WorkFlow/ApplicationInfo/?ID=%s'%(ID),'param':[],'icon':'times','type_url':'AutoRequest','color':''},
							{'title':'Auto Request','type':'AutoRequest','method':'get','url':'/CreditSummary/?ID=%s'%ID,'param':[],'icon':'times','type_url':'AutoRequest','color':''}
							# action = 7 reject for approve 
						]
		CustomToolBar = []
		if currentRole == 'EMP':
			CustomToolBar = [CustomToolBars[2],CustomToolBars[4]]
		elif doneApproved == True or doneReviewed == True or doneRejected == True:
			CustomToolBar = [CustomToolBars[4]]
		else:
			if isReviewer == True:
				CustomToolBar = [CustomToolBars[0],CustomToolBars[5]]
			elif isApprover == True:
				CustomToolBar = [CustomToolBars[3],CustomToolBars[1]]
			CustomToolBar.append(CustomToolBars[2])
			CustomToolBar.append(CustomToolBars[4])


		ListUser = [('_None','Notify To')]
		for user in users:
			ListUser.append((user.ID,user.ID + " - " + user.DisplayName))
		setattr(FRM_APPROVE_REVIEW,'notifyTo',SelectField('Notify To',choices=ListUser))
		setattr(FRM_APPROVE_REVIEW,'recordID',TextField('Record ID',default=ID))
		setattr(FRM_APPROVE_REVIEW,'formID',TextField('Record ID',default=formID))
		setattr(FRM_APPROVE_REVIEW,'formurl',TextField('Record ID',default=formurl))

		CustomToolBar.append(CustomToolBars[7])
		CustomToolBar.append(CustomToolBars[9])
		CustomToolBar.append(CustomToolBars[8])
		CustomToolBar.append(CustomToolBars[6])
		CreditScoreID = ""
		# Add Credit Score
		CreditScoreObj = MKT_CREDIT_SCORE.query.filter(MKT_CREDIT_SCORE.LoanApplication==ID).order_by(desc(MKT_CREDIT_SCORE.Createdon)).first()
		if CreditScoreObj:
			CreditScoreID = CreditScoreObj.ID

		self.customToolBar = CustomToolBar
		self.customType = 'Custom'
		self.recordID = ID
		self.form = FRM_APPROVE_REVIEW
		self.kwargs = { 'formID': formID,
						'ID':ID,
						'isReviewer': isReviewer,
						'isApprover': isApprover,
						'users': users,
						'signatory': signatory,
						'formurl': formurl,
						'currentRole': currentRole,
						'preparedUser': preparedUser,
						'doneApproved': doneApproved,
						'doneReviewed': doneReviewed,
						'doneRejected': doneRejected,
						'editMode': editMode,
						'msgWorkonOtherBranch':msgWorkonOtherBranch,
						'credit_score':CreditScoreID}
		return True



@app.route("/Morakot/Action", methods=['GET','POST'])
@app.route("/Morakot/API/Action", methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def UserAction():
	data 		= request.get_json()
	action		= data.get('action')
	recordID 	= data.get('recordID')
	comment 	= data.get('comment')
	notifyTo 	= data.get('notifyTo')
	formID 		= data.get('formID')
	formurl 	= data.get('formurl')
	action 		= request.args.get('action')
	Cancel_URL  	  = "/Morakot/Dashboard/"
	MESSAGE_URL 	  = "/Morakot/WorkFlow/Message/?formID="+formID
	if 'API' in request.url:
		Cancel_URL = '/listRecord/?formID=%s'%formID

	APPROVE_SUCCESS_MESSAGE   = "This record "+recordID+" is APPROVED successfully!"
	REVIEW_SUCCESS_MESSAGE    = "This record "+recordID+" is REVIEWED successfully!"
	FEEDBACK_SUCCESS_MESSAGE  = "This record "+recordID+" is FEEDBACKED successfully!"
	REJECT_SUCCESS_MESSAGE    = "This record "+recordID+" is REJECTED successfully!"
	SAME_USER_MESSAGE 		  = "Cannot be the same user ! Please choose the different user."
	FAIL_MESSAGE 			  = "Sorry there is a problem with transaction! Please contact support team."
	TITTLE 					  = "Workflow-"+formurl

	currentUserID 	=  session.get('getLogInID')
	role 			=  Workflow.getCurrentUserRole(currentUserID)
	datenow 		=  mktdate.getDateTimeNow()
	nextLevel  		=  Workflow.getNextLevel(currentUserID, formID, recordID)

	inputter = ""
	inputterObj = MKT_WORKFLOW_SIGNATORY.query\
					.filter(MKT_WORKFLOW_SIGNATORY.FormID == formID,MKT_WORKFLOW_SIGNATORY.RecordID ==recordID,MKT_WORKFLOW_SIGNATORY.Action == '1')\
					.first()
	if inputterObj:
		inputter = inputterObj.UserID
	
	if action == '2':
		# print 'user clicked reviewed'
		if currentUserID == inputter:
			if 'API' in request.url:
				MESSAGE_URL = '/WorkFlow/Message/?formID=%s&message=%s&type=sameUser'%(formID,SAME_USER_MESSAGE)
			return jsonify(redirect=MESSAGE_URL,
						   messageSuccess = SAME_USER_MESSAGE,
						   messageFail = SAME_USER_MESSAGE,
						   type="sameUser")
		else:
			Workflow.addSignatory(datenow,recordID,action,comment,role,currentUserID,formID,"",nextLevel)
			if 'API' in request.url:
				MESSAGE_URL = '/WorkFlow/Message/?formID=%s&message=%s'%(formID,REVIEW_SUCCESS_MESSAGE)
			return jsonify(redirect=MESSAGE_URL,
							messageSuccess = REVIEW_SUCCESS_MESSAGE,
							messageFail = FAIL_MESSAGE,
							type="review")

	elif action == '4':
		# print 'reviewer clicked rejected'
		Workflow.addSignatory(datenow,recordID,action,comment,role,currentUserID,formID)
		reloadWorkflow = Workflow.getRecordsReviewAndApprove(currentUserID, formID)
		if 'API' in request.url:
			MESSAGE_URL = '/WorkFlow/Message/?formID=%s&message=%s'%(formID,REJECT_SUCCESS_MESSAGE)
		return jsonify(redirect=MESSAGE_URL,
						messageSuccess = REJECT_SUCCESS_MESSAGE,
						messageFail = FAIL_MESSAGE,
						type="reject")

	elif action == '3':
		# print 'user clicked approved'
		if currentUserID == inputter:
			if 'API' in request.url:
				MESSAGE_URL = '/WorkFlow/Message/?formID=%s&message=%s&type=sameUser'%(formID,SAME_USER_MESSAGE)
			return jsonify(redirect=MESSAGE_URL,
							messageSuccess = SAME_USER_MESSAGE,
							messageFail = SAME_USER_MESSAGE,
							type="sameUser")
		else:
			Workflow.addSignatory(datenow,recordID,action,comment,role,currentUserID,formID,"",nextLevel)
			reloadWorkflow = Workflow.getRecordsReviewAndApprove(currentUserID, formID)
			if 'API' in request.url:
				MESSAGE_URL = '/WorkFlow/Message/?formID=%s&message=%s'%(formID,APPROVE_SUCCESS_MESSAGE)
			return jsonify(redirect=MESSAGE_URL,
							messageSuccess = APPROVE_SUCCESS_MESSAGE,
							messageFail = FAIL_MESSAGE,
							type="approve")

	elif action == '5':
		# print 'user clicked feedback'
		
		Workflow.addSignatory(datenow,recordID,action,comment,role,currentUserID,formID,notifyTo)
		#Add notification
		Workflow.notificationUsers(currentUserID,notifyTo,recordID,"ReviewApproveCustom",TITTLE,comment)
		if 'API' in request.url:
			MESSAGE_URL = '/WorkFlow/Message/?formID=%s&message=%s&type=feedback'%(formID,FEEDBACK_SUCCESS_MESSAGE)
		return jsonify(redirect=MESSAGE_URL,
						messageSuccess = FEEDBACK_SUCCESS_MESSAGE,
						messageFail = FAIL_MESSAGE,
						type="feedback")
	elif action == '6':
		# print 'user clicked cancel'
		return jsonify(redirect=Cancel_URL, type_url='Custom')

	elif action == '7':	
		# print 'approver clicked rejected'
		Workflow.addSignatory(datenow,recordID,action,comment,role,currentUserID,formID,notifyTo)
		reloadWorkflow = Workflow.getRecordsReviewAndApprove(currentUserID, formID)
		if 'API' in request.url:
			MESSAGE_URL = '/WorkFlow/Message/?formID=%s&message=%s&type=reject'%(formID,REJECT_SUCCESS_MESSAGE)

		return jsonify(redirect=MESSAGE_URL,
						messageSuccess = REJECT_SUCCESS_MESSAGE,
						messageFail = FAIL_MESSAGE,
						type="reject")
	else:
		return jsonify(redirect = Cancel_URL, type_url='Custom')


	return jsonify(redirect = Cancel_URL , type_url='Custom')


class FRM_SIGNATORY(exform):
	pass
		

class CLS_Signatory(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):

		BodyList 		= []
		BodyDict 		= {}
		SignatoryType 	= 'Table'

		recordID 	= request.args.get('ID','')
		if not recordID:
			SignatoryType = 'Summary'
			recordID = request.args.get('ID','')
		# split for record in history
		recordSplit = recordID.split('@')
		recordID 	= recordSplit[0]

		signatory 	= MKT_WORKFLOW_SIGNATORY.query\
					.filter(MKT_WORKFLOW_SIGNATORY.RecordID == recordID,MKT_WORKFLOW_SIGNATORY.FormID == self.Operation)\
					.order_by(MKT_WORKFLOW_SIGNATORY.Createdon.desc())

		SignatoryDic = {}
		SignatoryList = []
		if signatory.first():
			for s in signatory.all():
				Color = ''
				Action = ''
				if s.Action == '1':
					Color = ''
					Action = 'Prepared'
				elif s.Action == '2':
					Color = ''
					Action = 'Reviewed'
				elif s.Action == '3':
					Color = ''
					Action = 'Approve'
				elif s.Action == '4':
					Color = ''
					Action = 'Rev Rejected'
				elif s.Action == '5':
					Color = ''
					Action = 'Feedback'
				elif s.Action == '7':
					Color = ''
					Action = 'Appr Rejected'
				elif s.Action == '8':
					Color = ''
					Action = 'Edited'


				RoleObj = MKT_ROLE.query.filter(MKT_ROLE.ID == s.RoleID).first()
				UserObj = MKT_USER.query.filter(MKT_USER.ID == s.UserID).first()
				NotifyTo = ''
				if s.NotifyUserID:
					NotifyTo = MKT_USER.query.filter(MKT_USER.ID == s.NotifyUserID).first().DisplayName

				SID  = {'key':'ID:' ,'value':s.ID,'color':''}
				SRecordID = {'key':'RecordID:' ,'value':s.RecordID,'color':''}  
				SUserID = {'key':'User:' ,'value':UserObj.DisplayName,'color':''}  
				SRoleID = {'key':'Role:','value':RoleObj.Description,'color':''}
				SDate 	= {'key':'Date:','value':s.Createdon,'color':''}
				SActivity = {'key':'Activity:','value':Action,'color':Color}
				SComment = {'key':'Comment:','value':s.Comment,'color':''}
				SNotifyTo = {'key':'NotifyTo:','value':NotifyTo,'color':''}

				Column 			= 	[SID,SRecordID,SUserID,SRoleID,SDate,SActivity,SComment,SNotifyTo]
				ImportantField 	= 	[SRecordID,SUserID,SActivity]
				SignatoryList.append({'columns':Column,
									'urls':[],
									'important':ImportantField
									})
			SignatoryDic.update({
						'icon':'','name':'UserActivity','title': 'Signatory','type':SignatoryType,'data':SignatoryList,'most_data':False,'expand':True
					})

			BodyList.append(SignatoryDic)
		else:
			SignatoryDic.update({
						'icon':'','name':'UserActivity','title': 'User activity','type':'Table','data':[
						{'columns':[{'key':'Important!','value':'No signatory found ...!','color':''}],
						'urls':[],
						'important':[{'key':'Important!','value':'No signatory found ...!','color':''}]
						}],'most_data':True,'expand':False
					})

			BodyList.append(SignatoryDic)


		BodyDict.update({
				'header':[],'data':BodyList
				})
		self.kwargs 	=	{
					'signatory':signatory
		}
		self.customType = 'Custom'
		self.body 		= BodyDict
		self.recordID 	= recordID
		self.form 		= FRM_SIGNATORY
		return True

class FRM_APPLICATION_INFO(exform):
	pass
		

class CLS_Application_Info(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):

		BodyList 		= []
		BodyDict 		= {}

		recordID 	= request.args.get('CustomID','')
		if not recordID:
			recordID = request.args.get('ID','')

		LAObj = MKT_LOAN_APPLICATION_INAU.query.filter(MKT_LOAN_APPLICATION_INAU.ID == recordID).first()

		LADic = {}
		LAList = []
		if LAObj:
			CustomerObj 	= MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID == LAObj.LNCustomerID).first()
			LoanProductObj 	= MKT_LOAN_PRODUCT.query.filter(MKT_LOAN_PRODUCT.ID == LAObj.LoanProduct).first()
			FreqTypeDic 	= {'1':'Monthly','2':'Weekly','3':'Daily'}
			AppStatusDic 	= {'1':'Applied','2':'Reviewed','3':'Approved','4':'Rejected','5':'Cancelled','6':'Closed'}

			ValCustomer 	= '%s - %s %s'%(CustomerObj.ID,CustomerObj.LastNameEn,CustomerObj.FirstNameEn)
			ValProduct 		= LoanProductObj.Description
			ValAppliedAmount = mktmoney.toMoney(float(LAObj.AppliedAmount),mktmoney.getCurrencyObj(LAObj.Currency),1)

			ID  			= {'key':'ID:' ,'value':LAObj.ID,'color':''}
			Customer  		= {'key':'Customer:' ,'value': ValCustomer,'color':''}
			AppliedDate 	= {'key':'Applied Date:' ,'value':LAObj.AppDate,'color':''}
			AppliedAmount 	= {'key':'Applied Amount:' ,'value':ValAppliedAmount,'color':''}
			Currency 		= {'key':'Currency:' ,'value':LAObj.Currency,'color':''}
			LoanProduct 	= {'key':'Loan Product:' ,'value':ValProduct,'color':''}
			InterestRate 	= {'key':'Interest Rate:' ,'value':LAObj.InterestRate,'color':''}
			FrequencyType 	= {'key':'Frequency Type:' ,'value':FreqTypeDic[LAObj.FreqType],'color':''}
			Term 			= {'key':'Term:' ,'value':LAObj.Term,'color':''}
			AppStatus 		= {'key':'Application Status:' ,'value':AppStatusDic[LAObj.AppStatus],'color':''}

			Column 			= 	[ID,Customer,AppliedDate,AppliedAmount,Currency,LoanProduct,InterestRate,FrequencyType,Term,AppStatus]
			ImportantField 	= 	[]
			LAList.append({'columns':Column,
								'urls':[],
								'important':ImportantField
								})
			LADic.update({
						'icon':'','name':'ApplicationInformation','title': 'Loan Application Information','type':'Summary','data':LAList,'most_data':False,'expand':True
					})

			BodyList.append(LADic)

		BodyDict.update({
				'header':[],'data':BodyList
				})

		self.customType = 'Custom'
		self.body 		= BodyDict
		self.recordID 	= recordID
		self.form 		= FRM_APPLICATION_INFO

		return True


	

class FRM_WORK_FLOW_MESSAGE(exform):
	pass	

class CLS_WorkFlowMessage(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):		
		typeMessage = request.args.get('type')
		message 	= request.args.get('message')
		formID 		= request.args.get('formID')
		redirectUrl = '/Morakot/listRecord/?formID=%s'%formID
		if 'API' in request.url :
			redirectUrl = 'listRecord/?formID=%s'%formID
		if typeMessage == 'sameUser':
			flash(message,'error')
		else:
			flash(message)
		self.form = FRM_WORK_FLOW_MESSAGE
		self.recordID = formID
		self.redirectURL = [redirectUrl,'Custom']
		self.kwargs = {'message' : message,'typeMessage' : typeMessage}
		self.customType = 'Custom'
		return True



registerCRUD(admin, '/Workflow/Signatory', 'Signatory',FRM_SIGNATORY, [],template="workflow/signatory.html",form_type='Customer',custom_form_data=CLS_Signatory)
registerCRUD(admin, '/ReviewApproveCustom', 'ReviewApproveCustom',FRM_APPROVE_REVIEW, [],template="workflow/reviewApproveCustom.html",form_type='Custom',custom_form_data=CLS_ReviewApproveCustom)
registerCRUD(admin, '/listRecord', 'ListRecord',FRM_LIST_RECORD, [],template="workflow/listRecord.html",form_type='Custom',custom_form_data=CLS_ListRecord)
registerCRUD(admin, '/WorkFlow/Message', 'WorkflowMessage',FRM_WORK_FLOW_MESSAGE, [],template="workflow/message.html",form_type='Custom',custom_form_data=CLS_WorkFlowMessage)
registerCRUD(admin, '/WorkFlow/ApplicationInfo', 'ApplicationInformation',FRM_APPLICATION_INFO, [],template="",form_type='Custom',custom_form_data=CLS_Application_Info)
