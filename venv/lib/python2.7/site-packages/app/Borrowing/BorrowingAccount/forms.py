from wtforms 							import DecimalField, IntegerField
from app.mktcore.wtfimports 			import *
from app.Account.models 				import *
from ...								import app, db
from sqlalchemy 						import *
from datetime 							import datetime
from decimal 							import *

from app.CategoryType.models 			import MKT_CATEG_TYPE
from app.AccProduct.models 				import MKT_ACC_PRODUCT
from app.Currency.models 				import MKT_CURRENCY
from app.JAccount.models 				import MKT_JACCOUNT
from app.InterestRate.models 			import MKT_INTEREST_RATE
from app.ChargeRate.models 				import MKT_CHARGE_RATE
from ..Lender.models 					import *
from app.Setting.models 				import *

from app.tools.mktcustomer 				import *
from app.tools.catetool 				import *
from app.tools.mktmoney 				import *
from app.tools.user 					import *
from app.tools.mktofficer 				import *
from app.tools.mktroute 				import *
import app.tools.mktaccounting 				as mktaccounting
import app.tools.mktdate 					as mktdate
import app.tools.mktaccount 				as mktaccount
import app.tools.mktsetting 				as mktsetting


def loadCategoryType():
	return MKT_CATEG_TYPE.query

def loadParent():
	return MKT_CATEGORY.query

def loadAccProduct():
	return MKT_ACC_PRODUCT.query.filter_by(ProductType = 'E').all()

def loadCurrency(Default = False):
	AccSetting 	= mktsetting.getAccSetting() #Get Acccounting Setting
	Currency 	= AccSetting.BaseCurrency

	if Default:
		return MKT_CURRENCY.query.get(Currency)
	else:
		return MKT_CURRENCY.query.order_by(asc(MKT_CURRENCY.ID)).all()

def loadJAccount():
	return MKT_JACCOUNT.query

def loadAccountProductSetup():
	AppSetting = mktsetting.getAppSetting('BORROWING_ACC_PRODUCT_SETUP')
	AccProductID = AppSetting.split(' ') if AppSetting else "None"
	
	return MKT_ACC_PRODUCT.query.filter(MKT_ACC_PRODUCT.ID.in_(AccProductID))
		

def loadCurrentDate():
	return mktdate.getBankDate()

def loadDefaultCurrency():
	return mktaccounting.getDefaultCurrency()

def loadLender():
	return MKT_LENDER.query

@app.route("/Morakot/Borrowing/AccProduct", methods=['GET'])
def getAccProduct():
	AccProductID = request.args.get('AccProduct')
	AccProduct = MKT_ACC_PRODUCT.query.get(AccProductID)
	Currency = request.args.get('Currency')	
	ChargeRate 	=	"0"
	Tax 		=	""
	FixedRate 	=	"F"
	Rate 		=	"0"
	Category 	=	""

	if AccProduct:
		Tax 			= 	AccProduct.Tax
		Category 		=	AccProduct.CategoryList

		# InterestKey = 	AccRecord.InterestKey
		InterestKey	= 	AccProduct.InterestKey
		RateID		= 	str(InterestKey) + str(Currency)
		AccRate 	= 	MKT_INTEREST_RATE.query.get(RateID)
		if AccRate:
			Rate 	= 	AccRate.Rate
			Rate 	=	Rate.split()
			if len(Rate) > 0:
				Rate 	= 	Rate[0]
			else:
				Rate 	=	'0'

			InterestRate 	= 	str(Rate)
		
		Charge 	= 	AccProduct.Charge
		ID 		=	str(Charge) + str(Currency)
		AccCha 	=  	MKT_CHARGE_RATE.query.get(ID)
		if AccCha:
			FixedRate = str(AccCha.Rate)
			ChargeRate = str(AccCha.Value)

	return jsonify(
					Tax 		= Tax,
					Category 	= Category,
					Rate 		= Rate,
					ChargeRate 	= ChargeRate,
					FixedRate 	= FixedRate
					)
			

class FRM_BORROWING_ACCOUNT(exform):

	CustomerList 	= 	QuerySelectField(
										requiredlabel("Lender","*"), 
										query_factory=loadLender,
										get_label=lambda a: a.ID + ' - ' + a.CompanyFullName, 
										allow_blank=True,
										blank_text='--Choose Lender--',
										validators=[validators.Required()]
										)
	AccProduct 		=	QuerySelectField(requiredlabel(getLanguage("Account Product"), "*"),
										query_factory=loadAccountProductSetup,
										get_label=lambda a: a.ID + ' - ' + a.Description,
										blank_text='--Choose Account Product--',	
										allow_blank=True,									
										validators=[validators.Required()]
									)

	AccName 		= 	TextField(requiredlabel(getLanguage("Account Name"), "*"), 
									[validators.Required()]
									)
	Currency 		= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							default=lambda:loadCurrency(Default=True),
							validators=[validators.Required()]
						)

	JAccount 		=	TextField(getLanguage("Join Account"))
	JoinID 			=	TextField(getLanguage("Join ID"))
	AccCategory 	=	TextField(getLanguage("Category"))
	InterestRate 	=	TextField(getLanguage("Interest Rate"))
	FixedRate 		=	TextField(getLanguage("Fixed/Rate"))
	Charge 			=	TextField(getLanguage("Charge"))
	Tax 			=	TextField(getLanguage("Tax"))

	OpenDate 		= 	DateField(requiredlabel(getLanguage("Opening Date"), "*"), 
									[validators.Required()], 
									default=loadCurrentDate
									)
	AccStatus 		= 	SelectField(getLanguage('Status'),
									choices=[('O', 'Open'),
											 ('C', 'Close')],
									coerce=str
									)
	ClosingDate 	= 	DateField(getLanguage("Closing Date"), [validators.Optional()])
	OfficerID 		=	TextField(getLanguage("Officer"), default="")
	AccrInterest 	= 	DecimalField("Accrued Interest", [validators.Optional()], default=0)
	AccrCurMonth 	= 	DecimalField(getLanguage("Accr Int for Booking"), [validators.Optional()], default=0)
	AccrCurCapital 	= 	DecimalField(getLanguage("Accr Int for Capitalization"), [validators.Optional()], default=0)
	AccrIntBooked 	=	DecimalField(getLanguage("Accr Int was Booked"), [validators.Optional()], default=0)

	Balance 		= 	DecimalField(getLanguage("Balance"), [validators.Optional()], default=0)
	AvailableBal 	= 	DecimalField(getLanguage("Available Balance"), [validators.Optional()], default=0)
	UserID 			= 	RemoteTextField(getLanguage("User"))

	#Add these two field for Account Accrued Update Daily
	Blocked 		= 	SelectField(getLanguage('Blocked'),
							choices=[('N', 'No'),
									 ('Y', 'Yes')],
							coerce=str,
							default='N'
						)
	Dormant 		=	TextField(getLanguage("Dormant"), default='N')
	

	def validate_Charge(form, field):
		Value = form.Charge.data
		if str(Value).find("%") != -1:
			Value = Value.split("%")[0]

		try:
			Value = Decimal(Value)
		except Exception as exe:
			raise ValidationError("The charge you have enter is wrong number value")

		form.Charge.data = Value

	def validate_AccStatus(form, field):
		try:

			AccountBalance 	= request.form['Balance']
			AccountStatus  	= request.form['AccStatus']
			Currency 		= request.form['Currency']
			CurrencyObj 	= mktmoney.getCurrencyObj(Currency)
			if AccountStatus.upper() == "C":
				if AccountBalance > 0 :
					AccountBalance = float(AccountBalance) if AccountBalance else float(0)
					if AccountBalance != float(0):
						raise ValidationError("Account balance must be zero for closing account. Current balance is %s" % mktmoney.formatNumber(AccountBalance,DecimalPlace=CurrencyObj.DecimalPlace))
		except:
			raise


	def validate_ClosingDate(form, field):

		AccountClosingDate 	= request.form['ClosingDate']
		AccountStatus  		= request.form['AccStatus']

		if AccountStatus.upper() == "C":
			try:
				datetime.strptime(str(AccountClosingDate),'%Y-%m-%d')
			except:
				raise ValidationError("This field must be in date format.")

	@staticmethod
	def moneyField():
		return [("Balance", "Currency"), ("Charge", "Currency"), ("AvailableBal", "Currency"), ("AccrInterest", "Currency"), ("AccrCurMonth", "Currency"), ("AccrCurCapital", "Currency"), ("AccrIntBooked", "Currency")]

	@staticmethod
	def formatMoney():
		return ["Balance", "AvailableBal", "AccrInterest", "AccrCurCapital", "AccrCurMonth", "AccrIntBooked"], "Currency"


	@staticmethod
	def setWidth():

		Fields = [('Currency', len1),
				  ('JAccount', len1),
				  ('JoinID', len2),
				  ('AccCategory', len2),
				  ('FixedRate', len1),
				  ('OpenDate', len3),
				  ('AccStatus', len1),
				  ('ClosingDate', len3),
				  ('Blocked', len1),
				  ('Normant', len1)]

		return Fields


	@staticmethod
	def setVisible():		
		control_list = [
						'JAccount', 
						'JoinID', 
						# 'AccCategory', 
						'Tax',
						'FixedRate', 
						'Charge',
						'AccrCurMonth', 
						'AccrCurCapital', 
						'Balance', 
						'AvailableBal', 
						'UserID',
						'OfficerID', 
						'AccrIntBooked',
						'Blocked',
						'Dormant'
						]
		return control_list


	@staticmethod
	def listField():

		Fields = ["ID", "CustomerList", "AccName", "Currency", "AccCategory",
				  "OpenDate","AccStatus" ,"ClosingDate","Balance", "AvailableBal"]
		AppSetting = mktsetting.getAppSetting('BORROWING_ACC_PRODUCT_SETUP')
		AccProductID = AppSetting if AppSetting else ""
		# return Fields
		return Fields, ["AccProduct*EQ*"+AccProductID]

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#AccCategory').val(data.Category);"
		fielddisplay 	+= "$('#InterestRate').val(data.Rate);"
		fielddisplay 	+= "$('#FixedRate').val(data.FixedRate);"
		fielddisplay 	+= "$('#Charge').val(data.ChargeRate);"
		fielddisplay 	+= "$('#Tax').val(data.Tax);"

		varname 		= "AccProduct:$('#AccProduct').val(), Currency:$('#Currency').val()"
		fun 			= ["AccProduct", varname, fielddisplay, "/Morakot/Borrowing/AccProduct", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#InterestRate').val(data.InterestKey); $('#Charge').val(data.ChargeRate); $('#FixedRate').val(data.FixedRate)"
		varname 		= "AccProductID:$('#AccProduct').val(), Currency:$('#Currency').val()"
		fun 			= ["Currency", varname, fielddisplay, "/Morakot/AccProductID", "change"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#ClosingDate').val(data.ClosingDate)"
		varname			=	"AccStatus:$('#AccStatus').val()"
		fun 			=	["AccStatus", varname, fielddisplay, "/Morakot/AccountClosingDate", "change"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#AccName').val(data.CustomerName)"
		varname			=	"CustomerList:$('#CustomerList').val()"
		fun 			=	["CustomerList", varname, fielddisplay, "/Morakot/CustomerNameBySelected", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay = "$('input[name=JoinID]').attr('readonly', data.Bool)"
		varname = "JAccountID:$('#JAccount').val()"
		fun = ["JAccount", varname, fielddisplay, "/Morakot/JoinID", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setDisable():
		return [('AccCategory'), ('FixedRate'), ('AccrInterest'), ('Balance'),
				('NextAccrDate'), ('Branch'), ('UserID'), ("AvailableBal"), ("AccrCurMonth"), ("AccrCurCapital")]
	
	@staticmethod
	def setDisableforEdit():
		return [("Currency")]

	@staticmethod
	def reverseRec():
		ID = g.formID
		AllowReverse = mktaccount.isAllowReverseAccount(ID)
		if AllowReverse[0]:
			return True,''
		else:
			# Record not allow to reverse. 
			return True, AllowReverse[1]


	@staticmethod
	def redirectAfterInsert():
		ID 				= 	request.form['ID']
		NumOfAuth 		= 	g.getNAuthorize
		BankDate 		=	mktdate.getBankDate()

		if NumOfAuth == 0:
			Acc = MKT_ACCOUNT.query.get(ID)

			if Acc:
				AccStatus = Acc.AccStatus
				if AccStatus == 'C':
					# Check if account closing action
					UserID 	=	Acc.Inputter
					Check 	= 	mktaccount.setCloseAccount(ID, UserID, "AUTH")

		else:
			Acc = MKT_ACCOUNT_INAU.query.get(ID)

		if not Acc:
			flash(msg_error + "Account not found.")
			return False

		Acc.NextAccrDate 	=	str(BankDate)
		db.session.add(Acc)
		db.session.commit()

		return None


	@staticmethod
	def IsAcceptOverride():

		Override 	= False
		Branch 		= mktuser.getCurrentBranch()
		Msg 		= ""
		ID 			= request.form['ID']
		AccStatus 	= request.form['AccStatus']
		Customer 	= request.form["CustomerList"]
		CustomerObj = MKT_LENDER.query.get(Customer)
		
		if CustomerObj.Branch != Branch:
			Override 	= True
			Msg 		= "Lender <a href='javascript:void(0)' onClick=CustomClickView('Lender','Lender/?ID=%s')><u>%s</u></a> is from different Branch <b>%s</b>. " %(Customer, Customer, CustomerObj.Branch)
		
		if AccStatus == 'C':
			Override 	= True
			Msg 		= "You will be close this account %s." %ID

		Msg += " Do you want to procceed?"

		return Override, Msg

	@staticmethod
	def IsAcceptOverrideINAU():
		Override 		= False
		ID 				= g.formID
		Branch 			= mktuser.getCurrentBranch()
		Msg 			= ""
		AccountnObj		= MKT_ACCOUNT_INAU.query.get(ID)
		Customer 		= AccountnObj.CustomerList
		CustomerObj 	= MKT_LENDER.query.get(Customer)

		AccStatus 		= AccountnObj.AccStatus
		if CustomerObj.Branch != Branch:
			Override 	= True
			Msg 		= "Lender <a href='javascript:void(0)' onClick=CustomClickView('Lender','Lender/?ID=%s')><u>%s</u></a> is from different Branch <b>%s</b>. " %(Customer, Customer, CustomerObj.Branch)

		if AccStatus == 'C':
			Override 	= True
			Msg 		= "You will be close this account %s." %ID

		Msg 		+= "Do you want to procceed?"

		return Override, Msg