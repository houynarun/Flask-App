from app.mktcore.wtfimports 		import *
from .models 						import *
from app.Category.models 			import *
from ..Lender.models 				import *
from app.Account.models 			import *
from app.Category.models 			import *
from datetime 						import datetime
from dateutil.relativedelta 		import *
from sqlalchemy 					import Float
from sqlalchemy.sql.expression 		import cast
from app.Transaction.models 	 	import *
from app.Currency.models 			import *
from ..BorrowingCharge.models 		import *
from app.mktcore.session 			import *
from ..BorrowingSchedule.models 	import *
from app.Setting.models 			import *
from app.Upload.exportimport 		import *
from app.AccProduct.models			import *

import app.tools.mktaudit 				as mktaudit
import app.tools.mktteller 				as mktteller
import app.tools.mktaccounting     		as mktaccounting
import app.tools.mktholiday 			as mktHoliday
import app.tools.mktmoney 				as mktmoney
import app.tools.mktfundtransfer 		as mktfundtransfer
import app.tools.mktdate 				as mktdate


def loadLender():
	return MKT_LENDER.query

def loadExternalAccount():
	if request.method == 'POST':
		ExternalAccount = request.form["ExternalAccount"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			ExternalAccount = MKT_ACCOUNT.query.filter_by(ID=Record['ExternalAccount'])
			if ExternalAccount is None:
				ExternalAccount = MKT_ACCOUNT_INAU.query.filter_by(ID=Record['ExternalAccount'])
			return ExternalAccount
		else:
			ExternalAccount = MKT_ACCOUNT.query.filter_by(ID='')
			return ExternalAccount
	ExternalAccount = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.ID==str(ExternalAccount))
	return ExternalAccount


def loadCategory(filter=''):
	if filter:
		return MKT_CATEGORY.query.filter(MKT_CATEGORY.Description.like('%' + filter + '%'))
	else :
		return MKT_CATEGORY.query

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else :
		return MKT_CURRENCY.query


def loadBorrowingCharge():
	return MKT_BORROWING_CHARGE.query


def getRecord():
	try:
		result = MKT_BORROWING_INAU.query.filter_by(ID=g.formID).all()		
		if not result:
			result = MKT_BORROWING.query.filter_by(ID=g.formID).all()
			Dict = {}
		if result:
			for row in result:
				Dict = row.__dict__
				return Dict
		else:
			return Dict
	except:
		raise


@app.route("/Morakot/Borrowing/Lender")
@checkLogOutSession
@checkLogOutTime
def getLender():
	Lender = request.args.get("Lender")
	ExAccount = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==Lender,cast(MKT_ACCOUNT.Balance, Float)==0).all()
	dic = {}
	
	if ExAccount:
		for row in ExAccount:
			dic[row.ID] = row.ID + ' - ' + row.AccName 

	return jsonify(results=dic)


@app.route("/Morakot/Borrowing/DisbursedAmount")
@checkLogOutSession
@checkLogOutTime
def getDisbursedAmount():
	DisbursedAmount = request.args.get('DisbursedAmount')
	return jsonify(OutstandingAmount=DisbursedAmount)


@app.route("/Morakot/Borrowing/Charge12")
@checkLogOutSession
@checkLogOutTime
def getCharge12():
	Charge1 = request.args.get('Charge1') if 'Charge1' in request.args else ''
	Charge2 = request.args.get('Charge2') if 'Charge2' in request.args else ''

	if Charge1 == '__None':
		return jsonify(Amount1=0)
	if Charge2 == '__None':
		return jsonify(Amount2=0)
	return


@app.route("/Morakot/BorrowingSchedule", methods = ['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def ViewTemplateSchedule():
	ScheduleObj = []
	FinalSchedule = []
	dic = {}
	ID = request.args.get('ID') if 'ID' in request.args else ''
	ScheduleObj = MKT_BORROWING_SCHEDULE_INAU.query.filter(MKT_BORROWING_SCHEDULE_INAU.BorrowingID == str(ID)).\
					order_by(MKT_BORROWING_SCHEDULE_INAU.InstallmentNo).\
					all()
	BorrowingObj = MKT_BORROWING.query.filter_by(ID=ID).first()
	
	if len(ScheduleObj) == 0:
		ScheduleObj = MKT_BORROWING_SCHEDULE.query.filter(MKT_BORROWING_SCHEDULE.BorrowingID == str(ID)).\
		order_by(MKT_BORROWING_SCHEDULE.InstallmentNo).\
		all()
	if len(ScheduleObj) != 0:
		for row in ScheduleObj:
			dic = (row.__dict__).copy()
			dic.update({"TotalPayment": float(row.Principal) + float(row.Interest) + float(row.Charge)})
			FinalSchedule.append(dic)
			dic = {}

	if not BorrowingObj:
		BorrowingObj = MKT_BORROWING_INAU.query.filter_by(ID=ID).first()
	
	HeaderTable     =    ['No','CollectionDate','Principal','Interest','Charge','TotalPayment','Balance']

	return render_template('schedule/borrowing.html',
							ID          	= ID,
							HeaderTable 	= HeaderTable,
							ScheduleObj 	= FinalSchedule,
							BorrowingObj 	= BorrowingObj,
							toMoney 		= mktmoney.toMoney,
							getCurrencyObj 	= mktmoney.getCurrencyObj,
							float 			= float
							)


@app.route("/Morakot/Borrowing/ExAccount")
@checkLogOutSession
@checkLogOutTime
def getExternalAccount():
	ExAccountID = request.args.get('ExternalAccount')
	ExAccount = MKT_ACCOUNT.query.get(ExAccountID)
	AccProduct = MKT_ACC_PRODUCT.query.filter_by(ID=str(ExAccount.AccProduct)).first()
	if AccProduct:
		Category = MKT_CATEGORY.query.get(str(AccProduct.IntPayableCat))
		PayableCategoryDesc = str(Category.Description)
		Category = MKT_CATEGORY.query.get(str(AccProduct.IntExpenseCat))
		IntExpAIPDesc = str(Category.Description)
		
	return jsonify(
					CurrencyID 			= str(ExAccount.Currency) if ExAccount else '__None',
					CurrencyDesc 		= str(ExAccount.Currency) if ExAccount else '--Choose Currency--',
					IntRate 			= str(ExAccount.InterestRate) if ExAccount else '',
					PayableCategoryID 	= str(AccProduct.IntPayableCat) if AccProduct else '__None',
					PayableCategoryDesc = str(AccProduct.IntPayableCat) + ' - ' + PayableCategoryDesc if AccProduct else '',
					IntExpAIPID 		= str(AccProduct.IntExpenseCat) if AccProduct else '__None',
					IntExpAIPDesc 		= str(AccProduct.IntExpenseCat) + ' - ' + IntExpAIPDesc if AccProduct else ''
					)


@app.route("/Morakot/GetBorrowingAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def BorrowingAccount():

	Category 	= request.args.get('Category') if 'Category' in request.args else ''
	Currency 	= request.args.get('Currency') if 'Currency' in request.args else ''
	DrCr 		= request.args.get('DrCr') if 'DrCr' in request.args else ''
	Audit 		= mktaudit.getAuditrail()
	Inputter	= Audit['Inputter']
	Branch 		= Audit['Branch']
	
	Account = ""
	if Category:
		if mktteller.isCashCateogry(Category):
			if Currency:
				AccountObj 	= mktteller.getCashAccountByCategory(Category,Currency,Inputter,Branch)				
				if AccountObj[0]:
					Account = AccountObj[1].ID
						
	return jsonify(Account=str(Account))



class AmountValidator(object):
	def __call__(self, form, field):
		Amount = field.data
		if mkttool.isFloat(Amount):
			if float(Amount) <= float(0):
				raise ValidationError("Amount must be greater than zero.")


class FRM_BORROWING(exform):

	Lender 				= QuerySelectField(requiredlabel("Lender","*"),
											query_factory=loadLender,
											get_label=lambda a : a.ID + ' - ' + a.CompanyFullName,
											blank_text="--Choose Lender--",
											allow_blank=True,
											validators=[validators.Required()]
											)
	ExternalAccount 	= QuerySelectField(requiredlabel("Account Name", "*"),
											query_factory=loadExternalAccount,
											get_label=lambda a : a.ID + ' - ' + a.AccName,
											blank_text='--Choose External Account--',
											allow_blank=True,
											validators=[validators.Required()]
											)
	IntRate 			= TextField(requiredlabel("Interest Rate", "*"),
									validators=[validators.Required()]
									)

	Currency 			= QuerySelectField(requiredlabel("Currency","*"),
											query_factory=loadCurrency,
											get_label=u'ID',
											blank_text="--Choose Currency--",
											allow_blank=True,
											default=lambda : loadCurrency('USD'),
											validators=[validators.Required()]
											)
	DisbursedAmount 	= TextField(requiredlabel("Disbursed Amount", "*"),
									validators=[validators.Required(), AmountValidator()]
									)
	OutstandingAmount 	= TextField(requiredlabel("Outstanding Amount", "*"),
									validators=[validators.Required(), AmountValidator()]
									)	
	BankCategory 		= QuerySelectField(requiredlabel("Debit Category","*"),
											query_factory=mktaccounting.loadCategory,
											get_label=lambda a: a.ID + " - " + a.Description,
											blank_text="--Choose Debit Category--",
											allow_blank=True,
											validators=[validators.Required()]											
											)
	DrAccount 			= TextField("Debit Account")
	RegChargeCategory 	= QuerySelectField(requiredlabel("Regular Charge Category","*"),
											query_factory=loadCategory,
											get_label=lambda a: a.ID + " - " + a.Description,
											blank_text="--Choose Regular Charge Category--",
											allow_blank=True,
											validators=[validators.Required()],
											description='1-Category'
											)
	PayableCategory 	= QuerySelectField("Accrued Interest Payable Cat",
											query_factory=loadCategory,
											get_label=lambda a: a.ID + " - " + a.Description,
											blank_text="--Choose Accr Interest Payable Cat--",
											allow_blank=True,
											description='1-Category'
											)
	IntExpAIP 			= QuerySelectField("Interest Expense Category",
											query_factory=loadCategory,
											get_label=lambda a: a.ID + " - " + a.Description,
											blank_text="--Choose Interest Expense Category--",
											allow_blank=True,
											description='1-Category'
											)
	Charge1 			= QuerySelectField("Charge 1",
											query_factory=loadBorrowingCharge,
											get_label=u'Description',
											blank_text="--Choose Charge 1--",
											allow_blank=True,
											description="2-Charge"
											)
	ChargeAmount1 		= TextField("Charge Amount 1",
									description="2-Charge"
									)
	Charge2 			= QuerySelectField("Charge 2",
											query_factory=loadBorrowingCharge,
											get_label=u'Description',
											blank_text="--Choose Charge 2--",
											allow_blank=True,
											description="2-Charge"
											)
	ChargeAmount2 		= TextField("Charge Amount 2",description="2-Charge")

	ValueDate 			= DateField(requiredlabel("Value Date", "*"),
									default=mktdate.getBankDate,
									validators=[validators.Required()]									
									)
	MaturityDate 		= DateField(requiredlabel("Maturity Date", "*"),
									validators=[validators.Required()]									
									)
	Reference 			= TextField("Reference",
									validators=[validators.Length(max=14)]
									)
	Note 				= TextAreaField(requiredlabel("Note", "*"),
									validators=[validators.Length(max=100), validators.Required()],
									)	
	Iframe        		= MKTIframe("Borrowing Schedule",
									dicIframe={'width':'100%','height':'920','frameborder':'0'},
									description='2-Schedule'
									)


	def validate_DrAccount(form, field):
		try:
			DrAccount 		= form.DrAccount.data
			DrCategory 		= request.form['BankCategory']  if 'BankCategory' in request.form else ''
			DrCurrency 		= request.form['Currency']  if 'Currency' in request.form else ''
			
			Amount 			= form.DisbursedAmount.data
			if mktteller.isAmountInDecimal(Amount):
				Amount 		= Decimal(Amount)
				if DrAccount and Amount !=0:
					AccObj = MKT_ACCOUNT.query.get(DrAccount)
					if AccObj :
						AccCategory = AccObj.AccCategory
						AccCurrency = AccObj.Currency
						if AccCategory != DrCategory:
							raise ValidationError("Debit category not belong to account. %s %s"%(AccCategory, DrCategory))
						if AccCurrency != DrCurrency:
							raise ValidationError("Debit currency not belong to account.")

					CheckBalance = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amount), "Dr")
					if CheckBalance:	
						raise ValidationError(CheckBalance)
		except:
			raise


	def validate_BankCategory(form,field):
		BankCategory = field.data
		DrAccount = form.DrAccount.data
		AccObj = MKT_ACCOUNT.query.filter_by(AccCategory=BankCategory.ID).first()
		
		if AccObj is not None and str(DrAccount) == "":
			raise ValidationError("User do not have right to accress this category. %s - %s"%(BankCategory.ID,BankCategory.Description))


	def validate_ValueDate(form, field):
		TranDate     = request.form['ValueDate']
		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		except Exception, e:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)


	def validate_MaturityDate(form, field):
		try:
			Holiday 		= mktHoliday.getHoliday()
			MaturityDate 	= request.form['MaturityDate']

			CheckFormatDate = mktdate.isDateISO(MaturityDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
			
			systemDate 	= 	mktdate.getBankDate()
			StrSysteDate=	str(systemDate).split("-")
			StrMaturityDate=	str(MaturityDate).split("-")

			SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])			

			if str(systemDate) >= str(MaturityDate):
				raise ValidationError("Maturity date must be greater than system date.")

		except:
			raise


	def validate_Charge1(form, field):
		ChargeCategory1 = form.Charge1.data
		ChargeCategory2 = form.Charge2.data

		if ChargeCategory1 == ChargeCategory2 and ChargeCategory1 != None:
			raise ValidationError("Charge1 must be different from Charge2")


	def validate_ChargeAmount1(form, field):		
		ChargeCategory1 = form.Charge1.data		
		ChargeAmount1 = field.data
		if mkttool.isFloat(ChargeAmount1):
			if ChargeCategory1 and float(ChargeAmount1) <= 0:
				raise ValidationError("ChargeAmount1 must be greater than zero.")


	def validate_ChargeAmount2(form, field):		
		ChargeCategory2 = form.Charge2.data		
		ChargeAmount2 = field.data

		if mkttool.isFloat(ChargeAmount2):
			if ChargeCategory2 and float(ChargeAmount2) <= 0:
				raise ValidationError("ChargeAmount2 must be greater than zero.")



	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay = "$('#Currency').select2('data', {'id': data.CurrencyID, 'text': data.CurrencyDesc});"
		fielddisplay += "$('#PayableCategory').select2('data', {'id': data.PayableCategoryID, 'text': data.PayableCategoryDesc});"
		fielddisplay += "$('#IntExpAIP').select2('data', {'id': data.IntExpAIPID, 'text': data.IntExpAIPDesc});"
		fielddisplay += "$('#IntRate').val(data.IntRate);"

		varname = "ExternalAccount:$('#ExternalAccount').val()"
		fun = ["ExternalAccount", varname, fielddisplay, "/Morakot/Borrowing/ExAccount", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#OutstandingAmount').val(data.OutstandingAmount);"
		fielddisplay += "$('#OutstandingAmount').focus();"
		fielddisplay += "$('#BankCategory').select2('open');"

		varname = "DisbursedAmount:$('#DisbursedAmount').val()"

		fun = ["DisbursedAmount", varname, fielddisplay, "/Morakot/Borrowing/DisbursedAmount", "blur"]
		hotfield.append(fun)

		fielddisplay = "$('#ChargeAmount1').val(data.Amount1);"

		varname = "Charge1:$('#Charge1').val()"
		fun = ["Charge1", varname, fielddisplay, "/Morakot/Borrowing/Charge12", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#ChargeAmount2').val(data.Amount2);"

		varname = "Charge2:$('#Charge2').val()"
		fun = ["Charge2", varname, fielddisplay, "/Morakot/Borrowing/Charge12", "change"]
		hotfield.append(fun)

		fielddisplay	="$('#DrAccount').val(data.Account);"  
		varname 		="Category:$('#BankCategory').val(),Currency:$('#Currency').val(),DrCr:'Dr'" 
		fun 			=["BankCategory",varname,fielddisplay,"/Morakot/GetBorrowingAccount","change"]  
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay="ExternalAccount"
		varname		="Lender:$('#Lender').val()"	
		fun			=["Lender", varname ,fielddisplay, "/Morakot/Borrowing/Lender", "click"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def urlParam():
		ID = request.form['ID'] if request.method == 'POST' else g.formID
		dicParam = [{"IframeName":"Iframe", "iframeUrl":"/Morakot/BorrowingSchedule", 'Resource' : 'Status'}]
		return dicParam


	@staticmethod
	def moneyField():
		Fields = [	
					("DisbursedAmount","Currency"),
					("OutstandingAmount","Currency"),
					("ChargeAmount1","Currency"),
					("ChargeAmount2","Currency")
					]
		return Fields


	@staticmethod
	def setDisable():

		Fields = [	('OutstandingAmount'),
					('PayableCategory'),
					('IntExpAIP'),
					('IntRate'),
					('Currency'),
					('DrAccount'),
					
					]

		return Fields


	# @staticmethod
	# def setVisible():

	# 	Fields = [	
	# 				('DrAccount')
	# 				]

	# 	return Fields


	@staticmethod
	def setWidth():
		Fields = [
					("IntRate", len1),					
					("ValueDate", len3),
					("MaturityDate", len3),
					("Currency", len2)
				 ]

		return Fields


	@staticmethod
	def beforeInsert():
		AuthLevel = g.getNAuthorize		
		BorrowingID = request.form['ID']
		try:
			if request.method == 'POST':
				
				if AuthLevel == 0:
					postAccounting(	Reverse 		= False, 
									TranDate 		= request.form['ValueDate'],
									BorrowingID 	= BorrowingID,
									Currency 		= request.form['Currency'],
									Account 		= request.form['ExternalAccount'],
									Charge1 		= request.form['Charge1'],
									Charge2 		= request.form['Charge2'],
									DisbursedAmount = request.form['DisbursedAmount'],
									ChargeAmount1 	= request.form['ChargeAmount1'],
									ChargeAmount2 	= request.form['ChargeAmount2'],
									BankCategory 	= request.form['BankCategory'],
									DrAccount 		= request.form['DrAccount'],
									PayableCategory = request.form['PayableCategory'],
									IntExpAIP 		= request.form['IntExpAIP'],
									Reference 		= request.form['Reference'],
									Note 			= request.form['Note']
									)
			return True	
		except Exception, e:
			db.session.rollback()
			db.session.close()
			flash(getSafeMsg("%s %s" % (msg_error, e.message)))
			return False


	@staticmethod
	def redirectAfterInsert():
		AuthLevel = g.getNAuthorize
		Resource = "INAU"
		if AuthLevel == 0:
			Resource = ""
		
		return "/Morakot/BorrowingSchedule/" + request.form['ID'] + "?Resource=" + Resource


	@staticmethod
	def beforeDelete():
		ID = g.formID		
		MKT_BORROWING_SCHEDULE_INAU.query.filter_by(BorrowingID=ID).delete()		

		return True


	@staticmethod
	def beforeAuthorize():
		ID = g.formID
		BorrowingInau = MKT_BORROWING_INAU.query.get(ID)
		try:
			if str(BorrowingInau.Status) == 'RNAU':
				postAccounting(Reverse=True)
				#---Move borrowing contract record to HIST
				mktaudit.moveAUTHtoHIST(MKT_BORROWING_SCHEDULE,MKT_BORROWING_SCHEDULE_HIST,ID,"BorrowingID")
				MKT_BORROWING_SCHEDULE.query.filter_by(BorrowingID=ID).delete()
				db.session.no_autoflush
				MKT_BORROWING_SCHEDULE_INAU.query.filter_by(BorrowingID=ID).delete()
				db.session.commit()
			else:
				Schedule = MKT_BORROWING_SCHEDULE_INAU.query.filter_by(BorrowingID=ID).all()
				if len(Schedule) == 0:
					flash(msg_error + "Your borrowing contract does not have schedule yet.")
					return False
				postAccounting()
			return True
		except Exception,e:
			db.session.rollback()
			print e
			flash(msg_error + ",%s"%e)
			return False


	@staticmethod
	def formReadOnly():
		return "AUTH"	


	@staticmethod
	def reverseRec():
		ID 			= g.formID
		Borrowing 	= MKT_BORROWING.query.get(ID)
		AuthLevel 	= g.getNAuthorize
		Audit 		= mktaudit.getAuditrail()
		Inputter 	= Audit['Inputter']
		Createdon 	= Audit['Createdon']
		
		SystemDate 	= mktdate.getBankDate()
		ValueDate  	= str(Borrowing.ValueDate)
		DisbursedAmount = float(Borrowing.DisbursedAmount)
		OutstandingAmount = float(Borrowing.OutstandingAmount)

		if ValueDate == str(SystemDate):
			if DisbursedAmount != OutstandingAmount:
				return False, ""

			if AuthLevel == 0:
				postAccounting(Reverse=True)
				#---Move borrowing schedule record to HIST				
				mktaudit.moveAUTHtoHIST(MKT_BORROWING_SCHEDULE,MKT_BORROWING_SCHEDULE_HIST,ID,"BorrowingID")
				MKT_BORROWING_SCHEDULE.query.filter_by(BorrowingID=ID).delete()
				db.session.commit()
			elif AuthLevel == 1:
				moveAUTHtoINAU(MKT_BORROWING_SCHEDULE,MKT_BORROWING_SCHEDULE_INAU,ID,Inputter,Createdon,'RNAU')
			return True, ""

		return False, ""


def insertBorrowingSchedule(AuthLevel, TableName, DictCSV, Audit, FormName='',BorrowingID='',Committed=True):
	"""
		Here is to save borrowing schedule to table which is explicitly specify.
		This function will find and delete the old schedule if it founds and then insert new schedule.
	"""
	Result,Mesg = getValidationDefault(TableName, DictCSV, Audit, FormName='', Committed=True)
	
	if not Result:
		raise ValueError(Mesg)

	getValidationBorrowingSchedule(DictCSV)	
	db.session.query(eval(TableName)).filter_by(BorrowingID=BorrowingID).delete()
	
	TableModel = getTableModel(TableName)
	if FormName:
		ListPkName = [key.name for key in inspect(TableModel).primary_key]

	for index, row in enumerate(list(DictCSV)):
		Branch = row.get('Branch', None)

		if Audit:
			row.update(Audit)

		row.pop('', None)
		#Update default value
		row.update({'BorrowingID':BorrowingID})
		row.update({'ID':str(BorrowingID + str(index+1))})
		row.update({'BorrowingStatus':0})
		# row.update({'TotalPayment':0})
		
		try:
			Principal = row.get('Principal',0)
			Principal = float(str(Principal).replace(',',''))
			row.update({'Principal':Principal})
		except Exception, e:
			raise ValueError("%s row of colunm Principal %s invalid format."%(BorrowingID,row.get('Principal')))
		try:
			
			Interest = row.get('Interest',0)
			Interest = float(str(Interest).replace(',',''))
			row.update({'Interest':Interest})
		except Exception, e:
			raise ValueError("%s row of colunm Interest %s invalid format."%(BorrowingID,row.get('Interest')))
		
		try:
			Balance = row.get('Balance',0)
			Balance = float(str(Balance).replace(',',''))
			row.update({'Balance':Balance})
		except Exception, e:
			raise ValueError("%s row of colunm Balance %sinvalid format."%(BorrowingID,row.get('Balance')))

		try:
			Charge = row.get('Charge',0)
			if str(Charge) == "":
				row.update({'Charge':0})
			else:
				Charge = float(str(Charge).replace(',',''))					
				row.update({'Charge':Charge})
		except Exception, e:
			raise ValueError("%s row of colunm Charge %sinvalid format."%(BorrowingID,row.get('Charge')))

		if FormName:
			for pk in ListPkName:
				row[pk] = mktautoid.getAutoID(FormName)
		try:
			mktdb.insertTable(TableModel, row)
		except Exception, e:
			print e
			print Exception
			db.session.rollback()
		
	if Committed:
		db.session.commit()
	return True,"Done"


def getValidationBorrowingSchedule(DictCSV):
	for row in DictCSV:
		BorrowingID = row.get('BorrowingID',None)
		CollectionDate = row.get('CollectionDate',None)
		if CollectionDate:
			if not mktdate.isDate(CollectionDate):
				raise ValueError("%s Collection Date is required."%BorrowingID)
		else:
			raise ValueError("%s Collection Date is required."%BorrowingID)

		MKT_BORROWING_SCHEDULE = getTableModel('MKT_BORROWING_SCHEDULE')
		MKT_BORROWING_SCHEDULE.query.filter(MKT_BORROWING_SCHEDULE.BorrowingID==BorrowingID).delete()


def postAccounting(Reverse=False, **kwargs):

	"""
		Here is to post accounting to journal entry within date or back date. 
		And move schedule record from INAU to LIVE if contract is authorized successfully.
		To do accounting adjustment if record is successfully reversed.
	"""
		
	Audit 			= mktaudit.getAuditrail()
	Inputter		= Audit['Inputter']
	Createdon 		= Audit['Createdon']
	Authorizer 		= Audit['Authorizer']
	Authorizeon		= Audit['Authorizeon']
	Branch 			= Audit['Branch']

	ChargeCategory1 = ''
	ChargeCategory2 = ''
	ChargeAmount1 	= 0
	ChargeAmount2 	= 0
	length = 1
	PayableAmount = 0
	DisbursedAmount = 0
	
	if len(kwargs) == 0:

		Table 			= "MKT_BORROWING_INAU" if Reverse == False else "MKT_BORROWING"
		Borrowing 		= eval(Table).query.get(g.formID)
		TranDate 		= str(Borrowing.ValueDate)
		BorrowingID 	= str(Borrowing.ID)
		Currency 		= str(Borrowing.Currency)
		AccAccount 		= str(Borrowing.ExternalAccount)
		PayableCategory = str(Borrowing.PayableCategory)
		IntExpAIP 		= str(Borrowing.IntExpAIP)
		DisbursedAmount = float(Borrowing.DisbursedAmount)
		
		Charge1 = MKT_BORROWING_CHARGE.query.get(Borrowing.Charge1)
		if Charge1:
			ChargeCategory1 = str(Charge1.ChargeCategory)
		Charge2 = MKT_BORROWING_CHARGE.query.get(Borrowing.Charge2)
		if Charge2:
			ChargeCategory2 = str(Charge2.ChargeCategory)

		BankCategory = str(Borrowing.BankCategory)
		BankAccount = str(Borrowing.DrAccount)		
		Reference = str(Borrowing.Reference)

		Note = str(Borrowing.Note)
		if str(Borrowing.Charge1) != '':
			ChargeAmount1 = float(Borrowing.ChargeAmount1)
			length += 1
		if str(Borrowing.Charge2) != '':
			ChargeAmount2 = float(Borrowing.ChargeAmount2)
			length += 1
	else:
		TranDate 		= kwargs['TranDate']
		BorrowingID 	= kwargs['BorrowingID']
		Currency 		= kwargs['Currency']
		AccAccount 		= kwargs['Account']
		PayableCategory = kwargs['PayableCategory']
		IntExpAIP 		= kwargs['IntExpAIP']
		DisbursedAmount = float(kwargs['DisbursedAmount'])

		MktCharge1 = MKT_BORROWING_CHARGE.query.get(kwargs['Charge1'])
		if MktCharge1:
			ChargeCategory1 = str(MktCharge1.ChargeCategory)
		MktCharge2 = MKT_BORROWING_CHARGE.query.get(kwargs['Charge2'])
		if MktCharge2:
			ChargeCategory2 = str(MktCharge2.ChargeCategory)

		BankCategory 	= kwargs['BankCategory']
		BankAccount 	= kwargs['DrAccount']		
		Reference 		= kwargs['Reference']
		Note 			= kwargs['Note']

		if str(kwargs['Charge1']) != '':
			ChargeAmount1 = float(kwargs['ChargeAmount1'])
			if ChargeAmount1 > 0:
				length += 1
		if str(kwargs['Charge2']) != '':
			ChargeAmount2 = float(kwargs['ChargeAmount2'])			
			if ChargeAmount2 > 0:
				length += 1

	MktAccount 		= MKT_ACCOUNT.query.filter_by(ID=str(AccAccount)).first()
	AccountProduct 	= MKT_ACC_PRODUCT.query.filter_by(ID=str(MktAccount.AccProduct)).first()
	CrCategory 		= str(AccountProduct.CategoryList)
	
	if str(TranDate) < str(mktdate.getBankDate()):
		length += 1
		DisbursedAmount = float(Borrowing.DisbursedAmount) if len(kwargs) == 0 else float(kwargs['DisbursedAmount'])
		NumOfDay = 365 if str(AccountProduct.IntDayBasis) == '3' else 360
		Duration = getDuration(TranDate, mktdate.getBankDate()).days
		try:
			PayableAmount = ((DisbursedAmount * (float(MktAccount.InterestRate)/100)) / NumOfDay) * Duration
			MktAccount.AccrInterest = float(PayableAmount)
			MktAccount.AccrCurCapital = float(PayableAmount)
		except Exception, e:
			print e
			return False
	
	CrMode = "" if mktteller.isCashCateogry(CrCategory) else "Direct"
	CrDrMode = "" if mktteller.isCashCateogry(BankCategory) else "Direct"
	Charge1Mode = "" if mktteller.isCashCateogry(ChargeCategory1) else "Direct"
	Charge2Mode = "" if mktteller.isCashCateogry(ChargeCategory2) else "Direct"

	Transaction = ""
	
	BrrDisburseSetting 		= MKT_APP_SETTING.query.get('BORROWING_CONTRACT_TRAN')
	BrrDisburseTran     	= BrrDisburseSetting.Value if BrrDisburseSetting else ""
	BrrChargeSetting 		= MKT_APP_SETTING.query.get('BORROWING_CONTRACT_CHARGE')
	BrrChargeTran 			= str(BrrChargeSetting.Value) if BrrChargeSetting else ""
	BrrIntExpenseSetting 	= MKT_APP_SETTING.query.get('BORROWING_CONTRACT_INTEXP')
	BrrIntExpenseTran 		= str(BrrIntExpenseSetting.Value) if BrrIntExpenseSetting else ""
	BrrInterestAIPSetting 	= MKT_APP_SETTING.query.get('BORROWING_CONTRACT_AIP')
	BrrInterestAIPTran 		= str(BrrInterestAIPSetting.Value) if BrrInterestAIPSetting else ""
			
	IsCharge1PostAcc 	= True
	IsCharge2PostAcc 	= True
	IsPayablePostAcc 	= True
	IsIntExpPostAcc  	= True
	IsCrPostAcc 	 	= True
	IsDisbursedPostAcc 	= True

	IsCharge1PostAcc2 	= True
	IsCharge2PostAcc2 	= True
	IsPayablePostAcc2 	= True
	IsIntExpPostAcc2  	= True
	IsCrPostAcc2 	 	= True
	IsDisbursedPostAcc2 = True
	
	for l in range(0,length):

		for i in range(0 if Reverse == False else 1, 2 if Reverse == False else -1, 1 if Reverse == False else -1):

			Account = ""		
			if i == 0:
				if DisbursedAmount > 0 and IsDisbursedPostAcc:
					DrCr 		= 	"Dr" if Reverse == False else "Cr"
					Mode 		= 	CrDrMode
					Category 	= 	BankCategory
					Account 	= 	BankAccount
					Amount		= 	DisbursedAmount
					Transaction = 	BrrDisburseTran
					IsDisbursedPostAcc = False

				elif ChargeAmount1 > 0 and IsCharge1PostAcc:
					DrCr 		= 	"Dr" if Reverse == False else "Cr"
					Mode 		= 	Charge1Mode
					Category 	= 	ChargeCategory1
					Amount 		= 	ChargeAmount1
					Transaction = 	BrrChargeTran
					IsCharge1PostAcc = False

				elif ChargeAmount2 > 0 and IsCharge2PostAcc:
					DrCr 		= 	"Dr" if Reverse == False else "Cr"
					Mode 		= 	Charge2Mode
					Category 	= 	ChargeCategory2
					Amount 		= 	ChargeAmount2
					Transaction = 	BrrChargeTran
					IsCharge2PostAcc = False

				elif PayableAmount > 0 and IsPayablePostAcc:					
					DrCr 		= 	"Dr" if Reverse == False else "Cr"
					Mode 		= 	"Direct"
					Category 	= 	IntExpAIP
					Amount 		= 	PayableAmount
					Transaction = 	BrrIntExpenseTran
					IsPayablePostAcc = False
			else:
				if DisbursedAmount > 0 and IsDisbursedPostAcc2:					
					DrCr 		= 	"Cr" if Reverse == False else "Dr"
					Account 	= 	AccAccount
					Mode 		= 	CrMode
					Category 	= 	CrCategory
					Transaction = 	BrrDisburseTran
					Amount		= 	DisbursedAmount
					IsDisbursedPostAcc2 = False

				elif ChargeAmount1 > 0 and IsCharge1PostAcc2:
					DrCr 		= 	"Cr" if Reverse == False else "Dr"
					Account 	= 	BankAccount
					Mode 		= 	CrDrMode
					Category 	= 	BankCategory
					Amount 		= 	ChargeAmount1
					Transaction = 	BrrChargeTran
					IsCharge1PostAcc2 = False

				elif ChargeAmount2 > 0 and IsCharge2PostAcc2:
					DrCr 		= 	"Cr" if Reverse == False else "Dr"
					Account 	= 	BankAccount
					Mode 		= 	CrDrMode
					Category 	= 	BankCategory
					Amount 		= 	ChargeAmount2
					Transaction = 	BrrChargeTran
					IsCharge2PostAcc2 = False

				elif PayableAmount > 0 and IsPayablePostAcc2:
					DrCr 		= 	"Cr" if Reverse == False else "Dr"
					Mode 		= 	"Direct"
					Category 	= 	PayableCategory
					Amount 		= 	PayableAmount
					Transaction = 	BrrInterestAIPTran
					IsPayablePostAcc2 = False
									
			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
			DateTimeNow = mktdate.getDateTimeNow()
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				Inputter,				# Inputter
				Createdon, 				# Createdon
				Authorizer,				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amount), 		# Amount
				"BR",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				BorrowingID, 			# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				"No", 					# LastTran
				0, 						# LCYAmount
				True, 					# AllowEquivalent
				Reference				# UserReference
			)
			print "Start booking #%s -%s -%s"%(i+1,DrCr,Account)
			
	if len(kwargs) == 0 and not Reverse:
		try:
			ScheduleInau = MKT_BORROWING_SCHEDULE_INAU.query.filter_by(BorrowingID=BorrowingID).first()
			if ScheduleInau:
				mktaudit.moveINAUtoAUTH(MKT_BORROWING_SCHEDULE, MKT_BORROWING_SCHEDULE_INAU, BorrowingID, str(ScheduleInau.Inputter), str(ScheduleInau.Createdon), Authorizer, Authorizeon, 'BorrowingID', '0')
				mktaudit.deleteINAU(MKT_BORROWING_SCHEDULE_INAU, BorrowingID, 'BorrowingID')
		except Exception, e:
			raise e
			db.session.rollback()


# This function is to calculate number of different day between two dates
def getDuration(DateOffSet, CurrentDate):
	
	DateOffSet = str(DateOffSet)
	Date = DateOffSet.split('-')
	Date_1 = datetime(int(Date[0]), int(Date[1]), int(Date[2]), 0, 0)

	CurrentDate = str(CurrentDate)
	Date = CurrentDate.split('-')
	Date_2 = datetime(int(Date[0]), int(Date[1]), int(Date[2]), 0, 0)
	
	DateDifference = relativedelta(Date_2, Date_1)

	return DateDifference


def moveAUTHtoINAU(LIVE,INAU,ID,Inputter='',Createdon='', Status='INAU', Curr='0',MoveDataField={}):

	try:
		TellerParam = mktparam.getTellerParam()
		RevTran		= TellerParam.RevTransaction
		dic 			= {}
		FieldInTable 	= []
		Mapper 			= inspect(LIVE)
		for item in Mapper.attrs:
			FieldInTable.append(item.key)

		QueryObj = LIVE.query.filter(LIVE.BorrowingID==ID)

		if QueryObj.all() :

			for row in QueryObj:
				for col in FieldInTable:
					dic.update({col:getattr(row,col)})

				dic.update({'Status':Status})
				dic.update({'Curr':Curr})
				if Status=="INAU":
					dic.update({'ID':ID+'R'})
				if 'Transaction' in dic:
					dic.update({'Transaction':RevTran})
				dic.update({'Inputter':Inputter})
				dic.update({'Createdon':Createdon})
				dic.update({'Authorizer':''})
				dic.update({'Authorizeon':''})
				for col in MoveDataField:
					Date = getattr(row,MoveDataField[col])
					dic.update({col:Date})
					Date = getattr(row,col)
					dic.update({MoveDataField[col]:Date})
				AddINAUObj = INAU(**dic)
				db.session.add(AddINAUObj)
		else:
			print "The record %s cannot move to un-authorize. Module %s"%(ID,LIVE.__name__)
			

	except Exception, e:
		print "moveAUTHtoINAU error: %s"%e
		db.session.rollback()
		raise