from flask 										import request, url_for, render_template,flash,redirect
from app.mktcore.wtfimports 					import *
from app.mktcore.session 						import *
from app.Borrowing.BorrowingContract.models 	import *
from app.Borrowing.Lender.models 				import *
from app.Borrowing.BorrowingSchedule.models 	import *
from app.Borrowing.BorrowingContract.forms 		import insertBorrowingSchedule
from app.Upload.exportimport 					import getAuditTrailInau
import app.tools.mkttool 							as mkttool
import app.tools.mktmoney 							as mktmoney
import app.tools.mktdate 							as mktdate
import app.tools.mktaudit 							as mktaudit
import collections


@app.route("/Morakot/BorrowingSchedule/<BorrowingID>", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeBorrowingSchedule(BorrowingID):

	"""
		This method is to get schedule when user select a file.
		And then validate the schedule. If there are errors found it will flash message to user.
		And save schedule if user click on save button on template if no error found.
		Otherwise, if will not allow user to save.
	"""

	BorrowingObj 	= {}
	ID 				= BorrowingID
	ScheduleObj 	= []
	Schedule 		= []
	DictCSV 		= []
	Resource 		= request.args.get('Resource') if 'Resource' in request.args else "AUTH"
	ContractID 		= request.args.get('ID').strip() if 'ID' in request.args else ""
	ScheduleColumn 	= ["InstallmentNo","CollectionDate","Principal","Interest","Charge","Balance"]
	msg				= ""
	IsError 		= False
	UploadColumn 	= []
	MissingColum 	= ""
	TableName 		= "MKT_BORROWING_INAU" if Resource == "INAU" else "MKT_BORROWING"
	ScheduleTableName = "MKT_BORROWING_SCHEDULE_INAU" if Resource == "INAU" else "MKT_BORROWING_SCHEDULE"
	IsSave 			= request.args.get('Save') if 'Save' in request.args else ""
	IsSaveError 	= request.args.get('IsError') if 'IsError' in request.args else ""
	IsSaveSucceed 	= request.args.get('SucceededSave')

	try:

		if request.method == "POST" and str(IsSave) == "":
			file = request.files['file']
			
			if not mkttool.getAllowedFile(file.filename):
				IsError = True
				flash("Error<p><b style='color:#205f82'>Invalid File: </b>Allow CSV file only.</p>")
				raise

			DictCSV = mkttool.getDictCSV(file)
			Schedule = DictCSV
			UploadColumn = [column for column in Schedule[0]]
			DifferColumn = set(UploadColumn).difference(ScheduleColumn)
			if not sorted(UploadColumn)==sorted(ScheduleColumn):
				IsError = True
				if len(DifferColumn) > len(ScheduleColumn):
					msg += "Error<p><b style='color:#205f82'>Invalid Schedule Format: </b>This file maybe is not a schedule.</p>"
					flash(msg)
					raise
				elif len(UploadColumn) == len(ScheduleColumn):
					msg += "Error<p><b style='color:#205f82'>Invalid Schedule Format: </b>Schedule contain invalid column such as {}.</p>".format(', '.join(DifferColumn))
					flash(msg)
					raise
				Comparision = "more" if len(UploadColumn) > len(ScheduleColumn) else "less"
				msg += "Error<p><b style='color:#205f82'>Invalid Schedule Format: </b>Uploaded Schedule have %s column than standard schedule format.</p>"%Comparision
				flash(msg)
				raise

		if request.method == "POST" and str(IsSave) == 'Y':
			try:
				file = eval(request.form['files'])				
				if len(file) == 0 :
					IsError = True
					
					flash("Error<p><b style='color:#205f82'>Schedule: </b>Schedule is required.</p>")
					raise
			except Exception, e:
				pass
			if str(IsSaveError) == 'True':
				IsError = True
				
				Schedule = eval(request.form['files'])
			if str(IsSaveError) == "False":

				try:
					FormFile = request.form['files']
					DictCSV = eval(FormFile)
					Audit = getAuditTrailInau() if Resource == "INAU" else mktaudit.getAuditrail()
					HasSchedule = MKT_BORROWING_SCHEDULE.query.filter(MKT_BORROWING_SCHEDULE.BorrowingID==BorrowingID).first()
					if not HasSchedule:
						insertBorrowingSchedule(Resource, "MKT_BORROWING_SCHEDULE_INAU", DictCSV, Audit, FormName='',BorrowingID=ID,Committed=True)
						Schedule = DictCSV
						flash("Borrowing schedule successfully saved.")
				except Exception, e:

					# When request.form['files'] have no value. We can say when user don't select a schedule, but schedule already exist in INAU
					MktSchedule  = eval(ScheduleTableName).query.filter_by(BorrowingID=ID).all()
					Schedule 	 = sorted([row.__dict__ for row in MktSchedule], key=lambda k : k['InstallmentNo']) if MktSchedule else Schedule
					IsSaveSucceed = True
					flash("Borrowing schedule successfully saved.")

		BorrowingObj = eval(TableName).query.filter_by(ID=ID).first()
		if request.method == "GET":
			MktSchedule  = eval(ScheduleTableName).query.filter_by(BorrowingID=ID).all()
			Schedule 	 = sorted([row.__dict__ for row in MktSchedule], key=lambda k : k['InstallmentNo']) if MktSchedule else Schedule
		
		Principal = sum(float(val['Principal']) for val in Schedule)
		FirstCollectionDate = Schedule[0]['CollectionDate']
		LastCollectionDate 	= Schedule[-1]['CollectionDate']

		DisbursedAmount = float(BorrowingObj.DisbursedAmount) if BorrowingObj else 0
		ValueDate 		= str(BorrowingObj.ValueDate) if BorrowingObj else ""
		MaturityDate 	= str(BorrowingObj.MaturityDate) if BorrowingObj else ""
		
		Result = validateNegativeSchedule(Schedule)
		DateValidation = validateDate(Schedule)
		if DateValidation != "":
			IsError = True
			msg += DateValidation
		if Result != "":
			IsError = True
			msg += Result
		if round(Principal, 2) != round(DisbursedAmount, 2):
			IsError = True
			msg += "Error<p><b style='color:#205f82'>Disbursed Amount: </b>Total Principle in schedule (%.2f) is not equal to disbursed amount (%.2f)</p>"%(Principal,DisbursedAmount)
		if FirstCollectionDate < ValueDate:
			IsError = True
			msg += "Error<p><b style='color:#205f82'>Value Date: </b>Value Date (%s) must be behind first collection date (%s).</p>"%(ValueDate,FirstCollectionDate)
		if LastCollectionDate != MaturityDate:
			IsError = True
			msg += "Error<p><b style='color:#205f82'>Maturity Date: </b>Maturity Date (%s) must be the same as last collection date (%s).</p>"%(MaturityDate,LastCollectionDate)
		if IsError:
			flash(msg)

	except Exception, e:
		
		if not IsError and len(Schedule) != 0:
			flash("ErrorYour schedule is not valid.%s"%(len(Schedule)))

		Schedule = []
	
	Header = ['No','Collection Date','Principal','Interest','Charge','Total Payment','Balance']

	return render_template("schedule/borrowingschedule.html",
							HeaderTable 	= Header,
							ScheduleObj 	= Schedule,
							BorrowingObj 	= BorrowingObj,
							toMoney 		= mktmoney.toMoney,
							getCurrencyObj 	= mktmoney.getCurrencyObj,
							float 			= float,
							Resource 		= Resource,
							BorrowingID 	= ID,
							IsError 		= IsError,
							)


def validateNegativeSchedule(Schedule):

	msg = ""
	TotalAmount = 0
	
	for row in Schedule:
		
		No 				= int(row['InstallmentNo'])
		Principal 		= float("".join(str(row['Principal']).split(",")))
		Interest 		= float("".join(str(row['Interest']).split(",")))
		Balance 		= float("".join(str(row['Balance']).split(",")))
		TotalAmount 	+= Principal
		TotalAmount		= "".join(str(TotalAmount).split(","))
		TotalAmount 	= float(TotalAmount)

		if Principal < 0:
			msg += "<p><b style='color:#205f82'>Principal:</b> Installment %s can not be negative!</p>"%No
		if Interest < 0:
			msg += "<p><b style='color:#205f82'>Interest:</b> Installment %s can not be negative!</p>"%No
		if Balance < 0:
			msg += "<p><b style='color:#205f82'>Balance:</b> Installment %s can not be negative!</p>"%No
	if TotalAmount < 0:
		msg += "<p><b style='color:#205f82'>Total Amount:</b> Amount can not be negative!</p>"

	return msg


def validateDate(Schedule):
	msg = ""
	Dup = []

	for val in Schedule:
		if not mktdate.isDateISO(val['CollectionDate']):
			msg += "<p><b style='color:#205f82'>Collection Date:</b> Invalid date format at installment %s.</p>"%val['InstallmentNo']			
	
	Dup = [DupDate for DupDate, Count in collections.Counter([val['CollectionDate'] for val in Schedule]).items() if Count > 1]
	if len(Dup) >0:
		for DuplicateDate in Dup:
			InstallmentNo = [ str(Num['InstallmentNo']) for i, Num in enumerate(Schedule) if Schedule[i]['CollectionDate'] == DuplicateDate ]
			msg += "<p><b style='color:#205f82'>Collection Date:</b> Dublicate date ({}) found at installment {}.</p>".format(DuplicateDate,", ".join(InstallmentNo))

	return msg

