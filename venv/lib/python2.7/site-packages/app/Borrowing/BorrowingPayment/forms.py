from app.mktcore.wtfimports 		import *
from .models 						import *
from app.Transaction.models 		import *
from app.mktcore.session 			import *
from app.Currency.models 			import *
from app.Setting.models 			import *
from ..BorrowingSchedule.models 	import *
from ..BorrowingContract.models 	import *
from app.Category.models 			import *
from app.Account.models 			import *
from app.Tax.models 				import *
from ..BorrowingCharge.models 		import *
from app.AccProduct.models 			import *
from decimal 						import *
from ..Lender.models 				import *
from sqlalchemy 					import or_, Integer
from sqlalchemy.sql.expression 		import cast
import app.tools.mktaccounting 			as mktaccounting
import app.tools.mktteller 			 	as mktteller
import app.tools.mktaudit 				as mktaudit
import app.tools.mktdate 				as mktdate
import app.tools.mktholiday 			as mktHoliday
import app.tools.mkttool 				as mkttool
import app.tools.mktfundtransfer 		as mktfundtransfer


def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else :
		return MKT_CURRENCY.query


def loadCharge():
	return MKT_BORROWING_CHARGE.query


def loadTax():
	Tax = MKT_TAX.query.join(MKT_ACCOUNT, MKT_ACCOUNT.Tax==MKT_TAX.ID).all()
	return Tax


@app.route("/Morakot/BorrowingID")
@checkLogOutSession
@checkLogOutTime
def BorrowingID():
	search = '%' + request.args.get('q') + '%'
	SN = []
	if 'view' in request.url:
		Borrowing = MKT_BORROWING.query.join(MKT_LENDER, MKT_BORROWING.Lender==MKT_LENDER.ID).filter(or_(MKT_BORROWING.ID.ilike(search), MKT_LENDER.CompanyFullName.ilike(search))).all()	
	else:
		Borrowing = MKT_BORROWING.query.join(MKT_LENDER, MKT_BORROWING.Lender==MKT_LENDER.ID).filter(or_(MKT_BORROWING.ID.ilike(search), MKT_LENDER.CompanyFullName.ilike(search)), MKT_BORROWING.OutstandingAmount != 0).all()	
	for row in Borrowing:
		Lender = MKT_LENDER.query.get(str(row.Lender))
		dic = {'id': row.ID, 'text': row.ID + '-' + str(Lender.CompanyFullName)}
		SN.append(dic)
	app.logger.debug(SN)
	return jsonify(items=SN)


@app.route("/Morakot/GetBorrowingID")
@checkLogOutSession
@checkLogOutTime
def GetBorrowingID():
	BorrowingID = request.args.get('BorrowingID')
	Borrowing = MKT_BORROWING.query.get(BorrowingID)
	Schedule = MKT_BORROWING_SCHEDULE.query.\
				filter(MKT_BORROWING_SCHEDULE.BorrowingID==BorrowingID, MKT_BORROWING_SCHEDULE.BorrowingStatus=='0').order_by(MKT_BORROWING_SCHEDULE.InstallmentNo).\
				first()
	Account = MKT_ACCOUNT.query.get(str(Borrowing.ExternalAccount)) if Borrowing else None
	Tax = MKT_TAX.query.get(str(Account.Tax)) if Account else None
	AccrInterest = 0
	if Borrowing:
		Installment 	= str(Schedule.InstallmentNo)
		CurrencyID 		= str(Borrowing.Currency)
		CurrencyDesc 	= CurrencyID
		Principal 		= float(Schedule.Principal)
		Interest 		= float(Schedule.Interest)
		Charge 			= float(Schedule.Charge) if str(Schedule.Charge) != '' else 0
		TotalAmount 	= Principal + Interest + Charge

		if Account :
			TaxCategoryID 	= str(Tax.ID) if Tax else '__None'
			TaxCategoryDesc = str(Tax.Description) if Tax else '--Choose Tax Category'
			TaxRate 		= float(Tax.Rate) if Tax else 0
			TaxAmount 		= float(Interest) * TaxRate / 100 if Tax else 0
			AccrInterest 	= float(Account.AccrInterest)

	return jsonify( Installment 	= Installment,
					CurrencyID 		= CurrencyID,
					CurrencyDesc 	= CurrencyDesc,
					Principal 		= Principal,
					Interest 		= Interest,
					Charge 			= Charge,
					TotalAmount 	= TotalAmount,
					TaxCategoryID 	= TaxCategoryID,
					TaxCategoryDesc = TaxCategoryDesc,					
					TaxRate 		= TaxRate,
					TaxAmount 		= TaxAmount,
					AccrInterest 	= AccrInterest
					)


@app.route("/Morakot/GetTaxCategory")
@checkLogOutSession
@checkLogOutTime
def GetTaxCategory():
	TaxCategory = request.args.get('TaxCategory')
	Interest = request.args.get('Interest')
	
	TaxRate = 0
	TaxAmount = 0
	Tax = MKT_TAX.query.filter_by(ID=TaxCategory).first()
	if Tax and Interest != '':
		TaxRate 	= float(Tax.Rate)
		TaxAmount 	= float(Interest) * TaxRate / 100
	return jsonify(
					TaxRate = TaxRate,
					TaxAmount = TaxAmount
					)


@app.route("/Morakot/IsTerminate")
@checkLogOutSession
@checkLogOutTime
def IsTerminate():
	Terminate = request.args.get('Terminate')
	BorrowingID = request.args.get('BorrowingID')
	TaxRate = float(request.args.get('TaxRate'))
	Bool 		= True
	Principal 	= 0
	Interest  	= 0
	TaxAmount 	= 0
	Charge 		= 0
	Total 		= 0
	Query = MKT_BORROWING_SCHEDULE.query.\
			filter(MKT_BORROWING_SCHEDULE.BorrowingID==BorrowingID, MKT_BORROWING_SCHEDULE.BorrowingStatus=='0').\
			order_by(MKT_BORROWING_SCHEDULE.InstallmentNo)

	if Terminate == '1':
		Bool = False
		Schedule = Query.all()
		if Schedule:
			Principal = sum(float(row.Principal) for row in Schedule)
			Interest  = sum(float(row.Interest) for row in Schedule)
			Charge  = sum(float(row.Charge) for row in Schedule)
			Total = Principal + Interest + Charge
			try:
				TaxAmount = Interest * (1/TaxRate)			
			except Exception, e:
				TaxAmount = 0
	elif Terminate == '0':
		Schedule = Query.first()
		Principal = float(Schedule.Principal) if Schedule else 0
		Interest  = float(Schedule.Interest) if Schedule else 0
		Charge = float(Schedule.Charge) if Schedule else 0
		Total = Principal + Interest + Charge
		try:
			TaxAmount = Interest * (1/TaxRate)
		except Exception,e :
			TaxAmount = 0
	Borrowing = MKT_BORROWING.query.get(BorrowingID)
	CurrencyObj = MKT_CURRENCY.query.get(str(Borrowing.Currency)) if Borrowing else ""

	return jsonify(	Bool=Bool, 
					Principal=Principal, 
					Interest=Interest,
					Charge=Charge,
					Total=Total,
					TaxAmount=mktmoney.toMoney(TaxAmount, CurrencyObj, 0)
					)


@app.route("/Morakot/GetInterestForTax")
@checkLogOutSession
@checkLogOutTime
def GetInterestForTax():
	Interest = float(request.args.get('Interest'))
	TaxRate = float(request.args.get('TaxRate'))
	TaxAmount = Interest * (TaxRate/100)
	return jsonify(TaxAmount=TaxAmount)


@app.route("/Morakot/GetTerminationNote")
@checkLogOutSession
@checkLogOutTime
def GetTerminationNote():
	Terminate = str(request.args.get('Terminate'))
	Note = ""
	if Terminate == '1':
		Note = "Borrowing Termination"
	return jsonify(Note=Note)


@app.route("/Morakot/Borrowing/GetTaxAmountAndRate")
@checkLogOutSession
@checkLogOutTime
def GetTaxAmountAndRate():
	Interest = float("".join(str(request.args.get('Interest')).split(',')))
	Rate = 0
	Amount = 0
	if 'TaxAmount' in request.args:
		TaxAmount = float("".join(str(request.args.get('TaxAmount')).split(',')))
		try:
			Rate = round((TaxAmount/Interest)*100, 2)
		except Exception, e:
			return jsonify(TaxRate=0)

	if 'TaxRate' in request.args:
		TaxRate = float(request.args.get('TaxRate'))
		Amount = Interest * (TaxRate/100)
		
	return jsonify(TaxRate=Rate, TaxAmount=Amount)


@app.route("/Morakot/GetTotalPayment")
@checkLogOutSession
@checkLogOutTime
def GetTotalPayment():
	Principal = float("".join(request.args.get('Principal').split(',')))
	Interest = float("".join(request.args.get('Interest').split(',')))
	Charge = float("".join(request.args.get('Charge').split(',')))
	Currency = request.args.get('Currency')
	CurrencyObj = MKT_CURRENCY.query.get(Currency)

	Total = Principal + Interest + Charge
	Total = mktmoney.toMoney(Total, CurrencyObj, 0)

	return jsonify(Total=Total)


class AmountValidator(object):
	def __call__(self, form, field):
		Amount = field.data
		if mkttool.isFloat(Amount):
			if float(Amount) <= float(0):
				raise ValidationError("Amount must be greater than zero.")


class FRM_BORROWING_PAYMENT(exform):

	BorrowingID 	= RemoteTextField(requiredlabel("Borrowing", "*"), validators=[validators.Required()])
	Installment 	= TextField("Installment No")
	Currency 		= QuerySelectField(requiredlabel("Currency","*"),
										query_factory=loadCurrency,
										get_label=u'ID',
										blank_text="--Choose Currency--",
										allow_blank=True,
										default=lambda : loadCurrency('USD'),
										validators=[validators.Required()]
										)
	Principal 		= TextField("Principal")						
	Interest 		= TextField(requiredlabel("Interest", "*"), validators=[validators.Required(), AmountValidator()])
	RegularCharge 	= TextField("Charge")
	AccrInterest  	= TextField("Accrued Interest")
	TotalAmount 	= TextField("Total Payment")
	CrCategory 		= QuerySelectField(requiredlabel("Cr Category","*"),
											query_factory=mktaccounting.loadCategory,
											get_label=lambda a: a.ID + " - " + a.Description,
											blank_text="--Choose Cr Category--",
											allow_blank=True,
											validators=[validators.Required()]
											)
	CrAccount 		= TextField("Cr Account")
	TranDate 		= DateField(requiredlabel("Transaction Date","*"),
								validators=[validators.Required()],
								default=mktdate.getBankDate
								)
	Terminate  		= SelectField("Terminate", 
									choices=[('0','No'),('1','Yes')]
									)
	Reference 		= TextField("Reference")
	Note 			= TextAreaField(requiredlabel("Note", "*"), validators=[validators.Length(max=100), validators.Required()])
	Charge1 		= QuerySelectField(	"Charge 1",
										query_factory=loadCharge,
										get_label=lambda a: a.ID + "-" + a.Description,
										allow_blank=True,
										blank_text='--None--',									
										description="1-Charge"
										)
	ChargeAmount1 	= TextField('Charge Amount 1',description="1-Charge")
	Charge2 		= QuerySelectField("Charge 2",
										query_factory=loadCharge,
										get_label=lambda a: a.ID + "-" + a.Description,
										allow_blank=True,
										blank_text='--None--',
										description='1-Charge'
										)
	ChargeAmount2 	= TextField('Charge Amount 2',description="1-Charge")
	TaxCategory 	= QuerySelectField("Tax Category",
										query_factory=loadTax,
										get_label=lambda a: a.ID + "-" + a.Description,
										allow_blank=True,
										blank_text='--None--',
										description='2-Tax'
										)
	TaxRate 		= TextField("Tax Rate",
								description='2-Tax',
								default=0
								)
	TaxAmount 		= TextField("Tax Amount",description='2-Tax')


	def validate_Charge1(form, field):
		ChargeCategory1 = form.Charge1.data
		ChargeCategory2 = form.Charge2.data

		if ChargeCategory1 == ChargeCategory2 and ChargeCategory1 != None:
			raise ValidationError("Charge1 must be different from Charge2")

	def validate_ChargeAmount1(form, field):
		ChargeCategory1 = form.Charge1.data		
		ChargeAmount1 = float(field.data)
		
		if ChargeCategory1 and ChargeAmount1 <= 0:
			raise ValidationError("ChargeAmount1 must be greater than zero.")


	def validate_ChargeAmount2(form, field):
		ChargeCategory2 = form.Charge2.data		
		ChargeAmount2 = float(field.data)

		if ChargeCategory2 and ChargeAmount2 <= 0:
			raise ValidationError("ChargeAmount2 must be greater than zero.")
	

	def validate_TaxAmount(form, field):
		TaxCategory = form.TaxCategory.data
		TaxAmount = float(field.data)

		if TaxCategory and TaxAmount <= 0:
			raise ValidationError("TaxAmount must be greater than zero.")


	def validate_TranDate(form, field):
		TranDate     = request.form['TranDate']
		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		except Exception, e:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)


	def validate_CrAccount(form, field):
		try:
			CrAccount 		= form.CrAccount.data
			CrCategory 		= request.form['CrCategory']  if 'CrCategory' in request.form else ''
			DrCurrency 		= request.form['Currency']  if 'Currency' in request.form else ''
			Principal 		= float("".join(str(form.Principal.data).split(',')))
			Interest 		= float("".join(str(form.Interest.data).split(',')))
			TaxAmount 		= float("".join(str(form.TaxAmount.data).split(',')))
			ChargeAmount1 	= float("".join(str(form.ChargeAmount1.data).split(',')))
			ChargeAmount2 	= float("".join(str(form.ChargeAmount2.data).split(',')))
			
			Amount 			= Principal + Interest + TaxAmount + ChargeAmount1 + ChargeAmount2
			if mktteller.isAmountInDecimal(Amount):
				Amount 		= Decimal(Amount)
				if CrAccount and Amount !=0:
					AccObj = MKT_ACCOUNT.query.get(CrAccount)
					if AccObj :
						AccCategory = AccObj.AccCategory
						AccCurrency = AccObj.Currency
						if AccCategory != CrCategory:
							raise ValidationError("Debit category not belong to account. %s %s"%(AccCategory, CrCategory))
						if AccCurrency != DrCurrency:
							raise ValidationError("Debit currency not belong to account.")

					CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, DrCurrency, Decimal(Amount), "Cr")
					if CheckBalance:
						raise ValidationError(CheckBalance)
		except:
			raise


	def validate_CrCategory(form, field):
		CrCategory = field.data
		CrAccount = form.CrAccount.data
		AccObj = MKT_ACCOUNT.query.filter_by(AccCategory=CrCategory.ID).first()
		
		if AccObj is not None and str(CrAccount) == "":
			raise ValidationError("User do not have right to accress this category. %s - %s"%(CrCategory.ID,CrCategory.Description))


	def validate_Principal(form, field):		

		BorrowingID = form.BorrowingID.data
		Terminate = form.Terminate.data
		Borrowing = MKT_BORROWING.query.get(BorrowingID)
		Principal = float(field.data)
		OutstandingAmount = float(Borrowing.OutstandingAmount) if Borrowing else 0

		if Principal > OutstandingAmount:
			raise ValidationError("Principal must not be greater than outstanding amount (%.2f)."%OutstandingAmount)
		elif Principal < OutstandingAmount and Terminate == "1":
			raise ValidationError("Principal must be equal to outstanding (%.2f) amount to terminate."%OutstandingAmount)


	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay = "$('#Installment').val(data.Installment);"
		fielddisplay += "$('#Principal').val(data.Principal);"
		fielddisplay += "$('#Interest').val(data.Interest);"
		fielddisplay += "$('#RegularCharge').val(data.Charge);"
		fielddisplay += "$('#TotalAmount').val(data.TotalAmount);"
		fielddisplay += "$('#Principal').focus();"
		fielddisplay += "$('#Interest').focus();"
		fielddisplay += "$('#RegularCharge').focus();"
		fielddisplay += "$('#TotalAmount').focus();"
		fielddisplay += "$('#Currency').select2('data', {'id':data.CurrencyID, 'text':data.CurrencyDesc});"
		fielddisplay += "$('#TaxCategory').select2('data', {'id':data.TaxCategoryID, 'text':data.TaxCategoryDesc});"
		fielddisplay += "$('#AccrInterest').val(data.AccrInterest);"
		fielddisplay += "$('#AccrInterest').focus();"
		fielddisplay += "$('#TaxCategory').trigger('change');"
		fielddisplay += "$('#TaxAmount').focus();"
		fielddisplay += "$('#CrCategory').select2('open');"

		varname = "BorrowingID:$('#BorrowingID').val()"

		fun = ["BorrowingID", varname, fielddisplay, "/Morakot/GetBorrowingID", "click"]
		hotfield.append(fun)

		fielddisplay = "$('#TaxRate').val(data.TaxRate);"
		fielddisplay += "$('#TaxAmount').val(data.TaxAmount);"

		varname = "TaxCategory:$('#TaxCategory').val(),"
		varname += "Interest:$('#Interest').val()"
		
		fun = ["TaxCategory", varname, fielddisplay, "/Morakot/GetTaxCategory", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#Principal').attr('readonly', data.Bool);"
		fielddisplay += "$('#Principal').val(data.Principal);"
		fielddisplay += "$('#Interest').attr('readonly', data.Bool);"
		fielddisplay += "$('#RegularCharge').attr('readonly', data.Bool);"
		fielddisplay += "$('#Interest').val(data.Interest);"
		fielddisplay += "$('#TaxAmount').val(data.TaxAmount);"
		fielddisplay += "$('#RegularCharge').val(data.Charge);"
		fielddisplay += "$('#TotalAmount').val(data.Total);"		
		fielddisplay += "$('#Principal').focus();"
		fielddisplay += "$('#Interest').focus();"
		fielddisplay += "$('#RegularCharge').focus();"
		fielddisplay += "$('#TotalAmount').focus();"
		fielddisplay += "$('#TaxAmount').focus();"
		fielddisplay += "$('#AccrInterest').focus();"
		fielddisplay += "$('#Principal').focus();"

		varname = "Terminate:$('#Terminate').val(),BorrowingID:$('#BorrowingID').val(),TaxRate:$('#TaxRate').val()"
		
		fun = ["Terminate", varname, fielddisplay, "/Morakot/IsTerminate", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#TotalAmount').val(data.Total)"
		varname = "Principal:$('#Principal').val(),Interest:$('#Interest').val(),Charge:$('#RegularCharge').val(),Currency:$('#Currency').val()"
		fun = ["Principal", varname, fielddisplay, "/Morakot/GetTotalPayment", "blur"]
		hotfield.append(fun)

		fielddisplay = "$('#TotalAmount').val(data.Total)"
		varname = "Principal:$('#Principal').val(),Interest:$('#Interest').val(),Charge:$('#RegularCharge').val(),Currency:$('#Currency').val()"
		fun = ["Interest", varname, fielddisplay, "/Morakot/GetTotalPayment", "blur"]
		hotfield.append(fun)

		fielddisplay = "$('#TotalAmount').val(data.Total)"
		varname = "Principal:$('#Principal').val(),Interest:$('#Interest').val(),Charge:$('#RegularCharge').val(),Currency:$('#Currency').val()"
		fun = ["RegularCharge", varname, fielddisplay, "/Morakot/GetTotalPayment", "blur"]
		hotfield.append(fun)


		fielddisplay = "$('#TaxAmount').val(data.TaxAmount);"
		fielddisplay += "$('#TaxAmount').focus();"
		fielddisplay += "$('#CrCategory').select2('open');"

		varname = "Interest:$('#Interest').val(),TaxRate:$('#TaxRate').val()"

		fun = ["Interest", varname, fielddisplay, "/Morakot/GetInterestForTax", "blur"]
		hotfield.append(fun)
		
		fielddisplay	="$('#CrAccount').val(data.Account);"
		varname 		="Category:$('#CrCategory').val(),Currency:$('#Currency').val(),DrCr:'Cr'" 
		fun 			=["CrCategory",varname,fielddisplay,"/Morakot/GetBorrowingAccount","change"]  
		hotfield.append(fun)

		fielddisplay	="$('#Note').val(data.Note);"
		varname 		="Terminate:$('#Terminate').val()" 
		fun 			=["Terminate",varname,fielddisplay,"/Morakot/GetTerminationNote","change"]  
		hotfield.append(fun)

		fielddisplay = "$('#ChargeAmount1').val(data.Amount);"

		varname = "Charge1:$('#Charge1').val()"
		fun = ["Charge1", varname, fielddisplay, "/Morakot/Borrowing/Charge1", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#ChargeAmount2').val(data.Amount);"

		varname = "Charge2:$('#Charge2').val()"
		fun = ["Charge2", varname, fielddisplay, "/Morakot/Borrowing/Charge2", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#TaxAmount').val(data.TaxAmount);"

		varname = "TaxRate:$('#TaxRate').val(),Interest:$('#Interest').val()"
		fun = ["TaxRate", varname, fielddisplay, "/Morakot/Borrowing/GetTaxAmountAndRate", "blur"]
		hotfield.append(fun)


		fielddisplay = "$('#TaxRate').val(data.TaxRate);"

		varname = "TaxAmount:$('#TaxAmount').val(),Interest:$('#Interest').val()"
		fun = ["TaxAmount", varname, fielddisplay, "/Morakot/Borrowing/GetTaxAmountAndRate", "blur"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def setDisable():		
		fields = [	'Installment',
					'Interest',
					'Principal',
					'Currency',
					'AccrInterest',
					'CrAccount',
					'TotalAmount',
					'RegularCharge'
				 ]
		if request.method == 'POST':
			Terminate = request.form['Terminate']
			if Terminate == '1':
				fields = [	'Installment',
					'Currency',
					'AccrInterest',
					'CrAccount'

				 ]
		return fields


	@staticmethod
	def moneyField():
		fields = [	('Principal','Currency'),
					('Interest','Currency'),
					('AccrInterest','Currency'),
					('ChargeAmount1','Currency'),
					('RegularCharge','Currency'),
					('ChargeAmount2','Currency'),
					('TaxAmount','Currency'),
					('AccrInterest','Currency'),
					('TotalAmount','Currency')
				 ]
		return fields


	@staticmethod
	def setWidth():
		fields = [
				  ('Installment', len1),
				  ('TranDate', len3),
				  ('TaxRate', len1)
				 ]

		return fields


	@staticmethod
	def beforeInsert():
		AuthLevel = g.getNAuthorize
		ID = request.form['ID']

		if AuthLevel == 0:
			try:
				BrrPayment = request.form['ID']
				Installment = request.form['Installment']
				BorrowingID = request.form['BorrowingID']
				Borrowing = MKT_BORROWING.query.get(BorrowingID)
				Terminate = request.form['Terminate']
				
				#---Update BorrowingStatus of BorrowingSchedule
				Schedule = MKT_BORROWING_SCHEDULE.query.\
							filter(MKT_BORROWING_SCHEDULE.InstallmentNo>=int(Installment), 
									MKT_BORROWING_SCHEDULE.BorrowingID==BorrowingID).\
							order_by(MKT_BORROWING_SCHEDULE.InstallmentNo)

				if Terminate == "1":
					Schedule = Schedule.all()
					for row in Schedule:
						row.BorrowingStatus = '1'
				elif Terminate == "0":
					Schedule = Schedule.first()
					Schedule.BorrowingStatus = "1" if Schedule else "0"

				#---Update OutstandingAmount of BorrowingContract
				Borrowing.OutstandingAmount = float(Borrowing.OutstandingAmount) - float(request.form['Principal'])
				
				postAccounting(	Reverse 		= False, 
								TranDate 		= request.form['TranDate'],
								BorrowingID 	= request.form['BorrowingID'],							
								Currency 		= request.form['Currency'],
								BrrPaymentID 	= request.form['ID'],
								Charge 			= str(Borrowing.RegChargeCategory),
								Charge1 		= request.form['Charge1'],
								Charge2 		= request.form['Charge2'],
								TaxAmount 		= request.form['TaxAmount'],
								Principal 		= request.form['Principal'],
								CrAccount 		= request.form['CrAccount'],
								CrCategory 		= request.form['CrCategory'],
								Interest 		= request.form['Interest'],
								AccrInterest 	= request.form['AccrInterest'],
								ChargeAmount 	= request.form['RegularCharge'],
								ChargeAmount1 	= request.form['ChargeAmount1'],
								ChargeAmount2 	= request.form['ChargeAmount2'],
								TaxCategory 	= request.form['TaxCategory'],								
								Reference 		= request.form['Reference'],
								Note 			= request.form['Note']
								)
				db.session.commit()
			except Exception, e:
				print e
				return False
				db.session.rollback()

		return True
			

	@staticmethod
	def beforeAuthorize():
		Audit 			= mktaudit.getAuditrail()
		Inputter		= Audit['Inputter']
		Createdon 		= Audit['Createdon']
		
		AuthLevel = g.getNAuthorize
		ID 		= g.formID
		try:
			BrrPayment = MKT_BORROWING_PAYMENT_INAU.query.get(ID)
			if str(BrrPayment.Inputter) == Inputter:
				return False, "Authorizer must be different from inputter."
			if BrrPayment:
				Terminate = str(BrrPayment.Terminate)
				Borrowing = MKT_BORROWING.query.get(BrrPayment.BorrowingID)
				BorrowingSchedule = MKT_BORROWING_SCHEDULE.query.\
									filter(	MKT_BORROWING_SCHEDULE.BorrowingID==BrrPayment.BorrowingID, 
											MKT_BORROWING_SCHEDULE.InstallmentNo>=int(BrrPayment.Installment)).\
									order_by(MKT_BORROWING_SCHEDULE.InstallmentNo)

			if str(BrrPayment.Status) == 'RNAU':
				postAccounting(Reverse=True)
				#---Update BorrowingStatus in Borrowing Schedule to 0 mean that the installment has not repaid yet
				if Terminate == "1":
					Schedule = BorrowingSchedule.all()
					for row in Schedule:
						row.BorrowingStatus = '0'
				elif Terminate == '0':
					Schedule = BorrowingSchedule.first()
					Schedule.BorrowingStatus = '0'
				#---Update OutstandingAmount of BorrowingContract
				Borrowing.OutstandingAmount = float(Borrowing.OutstandingAmount) + float(BrrPayment.Principal)
				db.session.commit()

			elif str(BrrPayment.Status) == 'INAU':
				if Terminate == "1":
					Schedule = BorrowingSchedule.all()
					#---Update BorrowingStatus of BorrowingSchedule to indicate that the installment already paid	
					for row in Schedule:
						row.BorrowingStatus = '1'
					
				elif Terminate == "0":
					Schedule = BorrowingSchedule.first()
					#---Update BorrowingStatus of BorrowingSchedule to indicate that the installment already paid	
					Schedule.BorrowingStatus = '1'

				#---Update OutstandingAmount of BorrowingContract
				Borrowing.OutstandingAmount = float(Borrowing.OutstandingAmount) - float(BrrPayment.Principal)

				postAccounting()
				db.session.commit()
			return True
		except Exception, e:
			print e
			db.session.rollback()
			return False


	@staticmethod
	def formReadOnly():
		return "AUTH"


	# @staticmethod
	# def setVisible():
	# 	Fields = ["CrAccount"]
	# 	return Fields


	@staticmethod
	def reverseRec():
		ID = g.formID
		AuthLevel = g.getNAuthorize
		BrrPayment = MKT_BORROWING_PAYMENT.query.get(ID)
		SystemDate = mktdate.getBankDate()
		ValueDate  = str(BrrPayment.TranDate)
		Terminate = str(BrrPayment.Terminate)
		if ValueDate == str(SystemDate):
			if AuthLevel == 0:
				#---Post accounting adjustment
				postAccounting(Reverse=True)
				
				#---Update BorrowingStatus in Borrowing Schedule to 0 mean that the installment has not repaid yet
				Borrowing = MKT_BORROWING.query.get(BrrPayment.BorrowingID)
				if Terminate == "1":
					Schedule = 	MKT_BORROWING_SCHEDULE.query.\
								filter(	MKT_BORROWING_SCHEDULE.BorrowingID==BrrPayment.BorrowingID, 
										MKT_BORROWING_SCHEDULE.InstallmentNo>=int(BrrPayment.Installment),
										MKT_BORROWING_SCHEDULE.BorrowingStatus!="0").\
								all()
					Amount = 0
					for row in Schedule:						
						row.BorrowingStatus = '0'
						Amount += float(row.Principal)
					Borrowing.OutstandingAmount = float(Borrowing.OutstandingAmount) + Amount
				elif Terminate == "0":
					BorrowingSchedule = MKT_BORROWING_SCHEDULE.query.\
										filter(	MKT_BORROWING_SCHEDULE.BorrowingID==str(BrrPayment.BorrowingID),
												MKT_BORROWING_SCHEDULE.InstallmentNo==str(BrrPayment.Installment)).\
										first()
					BorrowingSchedule.BorrowingStatus = '0'
					Borrowing.OutstandingAmount = float(Borrowing.OutstandingAmount) + float(BorrowingSchedule.Principal)
				db.session.commit()

			return True,""

		return False,""


def postAccounting(Reverse=False, **kwargs):
		"""
			Here is to post accounting to journal entry. Update Accrued Interest and Accrued Cur Capital to zero.
			To do accounting adjustment and Update Accrued Interest and Accrued Cur Capital to previous value
			if user successfully reverse record.
		"""
		
		Audit 			= mktaudit.getAuditrail()
		Inputter		= Audit['Inputter']
		Createdon 		= Audit['Createdon']
		Authorizer 		= Audit['Authorizer']
		Authorizeon		= Audit['Authorizeon']
		Branch 			= Audit['Branch']

		ChargeCategory1 = ''
		ChargeCategory2 = ''
		length 			= 2
		MktAccount 		= None
		UnsignedSubAmount = 0
		AccrInterest 	= 0
		SubAmount 		= 0
		ReverseAccrInt 	= False
		ReverseAccrInt 	= 0

		if len(kwargs) == 0:
			Table 			= "MKT_BORROWING_PAYMENT_INAU" if Reverse == False else "MKT_BORROWING_PAYMENT"
			BrrPayment 		= eval(Table).query.get(g.formID)
			Borrowing 		= MKT_BORROWING.query.get(str(BrrPayment.BorrowingID))
			TranDate 		= str(BrrPayment.TranDate)
			BrrPaymentID 	= str(BrrPayment.ID)
			Currency 		= str(BrrPayment.Currency)
			ChargeCategory 	= str(Borrowing.RegChargeCategory)
			ChargeAmount 	= float(BrrPayment.RegularCharge)
			
			Charge1			= MKT_BORROWING_CHARGE.query.get(str(BrrPayment.Charge1))
			if Charge1:
				ChargeCategory1 = str(Charge1.ChargeCategory)
			Charge2 		= MKT_BORROWING_CHARGE.query.get(str(BrrPayment.Charge2))
			if Charge2:
				ChargeCategory2 = str(Charge2.ChargeCategory)
			
			AccAccount 		= str(Borrowing.ExternalAccount)
			MktAccount 		= MKT_ACCOUNT.query.filter_by(ID=str(AccAccount)).first()
			
			AccountProduct 	= MKT_ACC_PRODUCT.query.filter_by(ID=str(MktAccount.AccProduct)).first()

			if Reverse == True :
				MktAccount.AccrInterest = float(BrrPayment.AccrInterest)
				MktAccount.AccrCurCapital = float(BrrPayment.AccrInterest)

			AccrInterest 	= float(BrrPayment.AccrInterest)			
			AccCategory 	= str(AccountProduct.CategoryList)

			PayableCategory = str(Borrowing.PayableCategory)
			Tax 			= MKT_TAX.query.get(BrrPayment.TaxCategory)
			TaxCategory 	= str(Tax.Category) if Tax else ''

			Principal 		= float(BrrPayment.Principal)
			CrAccount 		= str(BrrPayment.CrAccount)
			CrCategory 		= str(BrrPayment.CrCategory)
			Interest 		= float(BrrPayment.Interest)
			TaxAmount 		= float(BrrPayment.TaxAmount)
			ChargeAmount1 	= float(BrrPayment.ChargeAmount1)
			ChargeAmount2 	= float(BrrPayment.ChargeAmount2)
			
			Note = str(BrrPayment.Note)
			Reference = str(BrrPayment.Reference)
		
		else:
			TranDate = kwargs['TranDate']
			Borrowing = MKT_BORROWING.query.get(kwargs['BorrowingID'])
			BrrPaymentID = kwargs['BrrPaymentID']
			Currency = kwargs['Currency']
			ChargeCategory = kwargs['Charge']
			ChargeAmount = float(kwargs['ChargeAmount'])
			Charge1	= MKT_BORROWING_CHARGE.query.get(kwargs['Charge1'])
			if Charge1:
				ChargeCategory1 = str(Charge1.ChargeCategory)
			Charge2 = MKT_BORROWING_CHARGE.query.get(kwargs['Charge2'])
			if Charge2:
				ChargeCategory2 = str(Charge2.ChargeCategory)

			AccAccount 		= str(Borrowing.ExternalAccount)
			MktAccount 		= MKT_ACCOUNT.query.filter_by(ID=str(AccAccount)).first()
			AccountProduct 	= MKT_ACC_PRODUCT.query.filter_by(ID=str(MktAccount.AccProduct)).first()
			
			AccCategory 	= str(AccountProduct.CategoryList)
			PayableCategory = str(Borrowing.PayableCategory)
			Tax 			= MKT_TAX.query.get(kwargs['TaxCategory'])
			TaxCategory 	= str(Tax.Category) if Tax else ''

			Principal 		= float(kwargs['Principal'])
			CrAccount 		= str(kwargs['CrAccount'])
			CrCategory 		= str(kwargs['CrCategory'])			
			Interest 		= float(kwargs['Interest'])
			AccrInterest 	= float(kwargs['AccrInterest'])
			TaxAmount 		= float(kwargs['TaxAmount'])
			ChargeAmount1 	= float(kwargs['ChargeAmount1'])
			ChargeAmount2 	= float(kwargs['ChargeAmount2'])

			Note = kwargs['Note']
			Reference = kwargs['Reference']

		if TaxAmount != 0:
			length += 1
		if ChargeAmount != 0:
			length += 1
		if ChargeAmount1 != 0:
			length += 1
		if ChargeAmount2 != 0:
			length += 1
	
		SubAmount = Interest - AccrInterest
		ReverseAmount = AccrInterest + SubAmount
		IntExpCategory = str(Borrowing.IntExpAIP)
		UnsignedSubAmount = float(''.join(str(SubAmount).split('-')))
		if UnsignedSubAmount > 0:
			SubMode = ("Dr" if SubAmount >0 else "Cr") if Reverse == False else ("Cr" if SubAmount >0 else "Dr")
		if not Reverse:
			MktAccount.AccrInterest = 0
			MktAccount.AccrCurCapital = 0

		Transaction 			= ""
		BrrPrincipalSetting 	= MKT_APP_SETTING.query.get('BORROWING_PRINCIPAL')
		BrrPrincipalTran 		= str(BrrPrincipalSetting.Value) if BrrPrincipalSetting else ""
		BrrPaymentSetting 		= MKT_APP_SETTING.query.get('BORROWING_PAYMENT_TRAN')
		BrrPaymentTran 			= str(BrrPaymentSetting.Value) if BrrPaymentSetting else ""
		BrrChargeSetting 		= MKT_APP_SETTING.query.get('BORROWING_CHARGE')
		BrrChargeTran 			= str(BrrChargeSetting.Value) if BrrChargeSetting else ""
		BrrInterestSetting 		= MKT_APP_SETTING.query.get('BORROWING_CONTRACT_INTEXP')
		BrrInterestTran 		= str(BrrInterestSetting.Value) if BrrInterestSetting else ""
		BrrInterestAIPSetting 	= MKT_APP_SETTING.query.get('BORROWING_CONTRACT_AIP')
		BrrInterestAIPTran 		= str(BrrInterestAIPSetting.Value) if BrrInterestAIPSetting else ""
		BrrTaxSetting 			= MKT_APP_SETTING.query.get('BORROWING_TAX')
		BrrTaxTran 				= str(BrrTaxSetting.Value) if BrrTaxSetting else ""
		BrrTerminateSetting 	= MKT_APP_SETTING.query.get('BORROWING_TERMINATE')
		BrrTerminateTran 		= str(BrrTerminateSetting.Value) if BrrTerminateSetting else ""
		BrrReverseIntSetting 	= MKT_APP_SETTING.query.get('BORROWING_INT_REVERSAL')
		BrrReverseInt 			= str(BrrReverseIntSetting.Value) if BrrReverseIntSetting else ""

		CrDrMode = "" if mktteller.isCashCateogry(AccCategory) else "Direct"
		CrMode = "" if mktteller.isCashCateogry(CrCategory) else "Direct"
		
		IsTaxPostAcc 	 	= True 	#To indicate whether tax is already post accounting or not if it is False mean that tax is post accounting already
		IsCharge1PostAcc 	= True 	#To indicate whether charge1 is already post accounting or not if it is False mean that charge1 is post accounting already
		IsCharge2PostAcc 	= True 	#To indicate whether charge2 is already post accounting or not if it is False mean that charge2 is post accounting already
		IsDrPostAcc 	 	= True 	#To indicate whether debit is already post accounting or not if it is False mean that debit is post accounting already
		IsSubAmountPostAcc 	= True	#To indicate whether reverse interest is post accounting or not
		IsPrincipalPostAcc 	= True	#To indicate whether principal post accounting or not
		IsInterestPostAcc 	= True 	#To indicate whether Accrued Interest or Interest Expense post accounting or not
		IsChargePostAcc 	= True

		IsTaxPostAcc2 	 	= True
		IsCharge1PostAcc2 	= True
		IsCharge2PostAcc2 	= True
		IsDrPostAcc2 	 	= True
		IsSubAmountPostAcc2 = True
		IsPrincipalPostAcc2 = True
		IsInterestPostAcc2 	= True
		IsChargePostAcc2 	= True

		for l in range(0, length):
			for i in range(0 if Reverse == False else 1 + ReverseAccrInt, 2 + ReverseAccrInt if Reverse == False else -1, 1 if Reverse == False else -1):
				Account = ""
				if i == 0:
					if Principal >=0 and IsPrincipalPostAcc:
						DrCr 				= 	"Dr" if Reverse == False else "Cr"
						Mode 				= 	""
						Category 			= 	AccCategory
						Amount				= 	Principal
						Account 			= 	AccAccount
						Transaction 		= 	BrrPrincipalTran
						IsPrincipalPostAcc 	= 	False
						if UnsignedSubAmount > 0:
							ReverseAccrInt 	= 1
					elif Interest > 0 and IsInterestPostAcc:
						DrCr 				= 	"Dr" if Reverse == False else "Cr"
						Mode 				= 	"Direct"
						Category 			= 	IntExpCategory if UnsignedSubAmount == 0 else PayableCategory
						Amount 				= 	Interest if UnsignedSubAmount == 0 else AccrInterest
						Transaction 		= 	BrrInterestTran if UnsignedSubAmount == 0 else BrrInterestAIPTran
						IsInterestPostAcc 	= 	False
					elif TaxAmount > 0 and IsTaxPostAcc:
						DrCr 			= 	"Dr" if Reverse == False else "Cr"
						Mode 			= 	"Direct"
						Category 		= 	TaxCategory
						Amount 			= 	TaxAmount
						Transaction 	= 	BrrTaxTran
						IsTaxPostAcc 	= 	False
					elif ChargeAmount > 0 and IsChargePostAcc:
						DrCr 				= 	"Dr" if Reverse == False else "Cr"
						Mode 				= 	"Direct"
						Category 			= 	ChargeCategory
						Amount 				= 	ChargeAmount
						Transaction 		= 	BrrChargeTran
						IsChargePostAcc 	= 	False
					elif ChargeAmount1 > 0 and IsCharge1PostAcc:
						DrCr 				= 	"Dr" if Reverse == False else "Cr"
						Mode 				= 	"Direct"
						Category 			= 	ChargeCategory1
						Amount 				= 	ChargeAmount1
						Transaction 		= 	BrrChargeTran
						IsCharge1PostAcc 	= 	False
					elif ChargeAmount2 > 0 and IsCharge2PostAcc:
						DrCr 				= 	"Dr" if Reverse == False else "Cr"
						Mode 				= 	"Direct"
						Category 			= 	ChargeCategory2
						Amount 				= 	ChargeAmount2
						Transaction 		= 	BrrChargeTran
						IsCharge2PostAcc 	= 	False
				elif UnsignedSubAmount > 0 and IsSubAmountPostAcc and (not IsInterestPostAcc or not IsInterestPostAcc2):
					DrCr 				= 	SubMode
					# Account 			= 	CrAccount
					Mode 				= 	"Direct"
					Category 			= 	IntExpCategory
					Amount 				= 	UnsignedSubAmount if SubAmount > 0 else Interest
					Transaction 		= 	BrrReverseInt
					IsSubAmountPostAcc 	= 	False
					ReverseAccrInt 		= 	0
				else:
					if Principal >= 0 and IsPrincipalPostAcc2:
						DrCr 					= 	"Cr" if Reverse == False else "Dr"
						Account 				= 	CrAccount
						Mode 					= 	CrMode
						Category 				= 	CrCategory
						Amount					= 	Principal
						Transaction 			= 	BrrPaymentTran
						IsPrincipalPostAcc2 	= False
					elif Interest > 0 and IsInterestPostAcc2:
						DrCr 				= 	"Cr" if Reverse == False else "Dr"						
						Account 			= 	CrAccount if UnsignedSubAmount != 0 else ""
						Mode 				= 	CrMode if UnsignedSubAmount != 0 else "Direct"
						Category 			= 	CrCategory if UnsignedSubAmount != 0 else PayableCategory						
						Amount 				= 	AccrInterest if SubAmount == 0 else (Interest if SubAmount > 0 else UnsignedSubAmount)
						Transaction 		= 	BrrInterestAIPTran if SubAmount == 0 else BrrInterestTran
						IsInterestPostAcc2 	= False
					elif TaxAmount > 0 and IsTaxPostAcc2:
						DrCr 			= 	"Cr" if Reverse == False else "Dr"
						Account 		= 	CrAccount
						Mode 			= 	CrMode
						Category 		= 	CrCategory
						Amount 			= 	TaxAmount
						Transaction 	= 	BrrTaxTran
						IsTaxPostAcc2 	= 	False
					elif ChargeAmount > 0 and IsChargePostAcc2:
						DrCr 				= 	"Cr" if Reverse == False else "Dr"
						Account 			= 	CrAccount
						Mode 				= 	CrMode
						Category 			= 	CrCategory
						Amount 				= 	ChargeAmount
						Transaction 		= 	BrrChargeTran
						IsChargePostAcc2 	= 	False
					elif ChargeAmount1 > 0 and IsCharge1PostAcc2:
						DrCr 				= 	"Cr" if Reverse == False else "Dr"
						Account 			= 	CrAccount
						Mode 				= 	CrMode
						Category 			= 	CrCategory
						Amount 				= 	ChargeAmount1
						Transaction 		= 	BrrChargeTran
						IsCharge1PostAcc2 	= 	False
					elif ChargeAmount2 > 0 and IsCharge2PostAcc2:
						DrCr 				= 	"Cr" if Reverse == False else "Dr"
						Account 			= 	CrAccount
						Mode 				= 	CrMode
						Category 			= 	CrCategory
						Amount 				= 	ChargeAmount2
						Transaction 		= 	BrrChargeTran
						IsCharge2PostAcc2 	= 	False
					
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
				DateTimeNow = mktdate.getDateTimeNow()
							
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					"BP",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					BrrPaymentID, 			# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)
				print "Start booking #%s -%s -%s i-%s l-%s -%s -%s"%(i+1,DrCr,Category,i,l,Amount,Account)

