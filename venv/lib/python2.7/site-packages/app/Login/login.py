from flask 					import request, url_for, render_template,flash,redirect,session, g, make_response
from werkzeug.security 		import generate_password_hash, check_password_hash
from functools 				import wraps, update_wrapper # No Cache
from flask.ext.login 		import LoginManager, login_user, logout_user, current_user, login_required
from datetime 				import datetime, timedelta

# import dependency from models
from app.User.models 		import MKT_USER
from app.LoginUser.models 	import MKT_LOGIN_USER
from app.Company.models 	import MKT_COMPANY
from app.Login.forms 		import *

# import from tools
import app.tools.user 		as aUser
import app.tools.user 		as mktUser
import app.tools.mktdate 	as mktdate
import app.tools.mktsetting as mktsetting

# all import from mktcore 
from app.mktcore.session 		import *
from app.mktcore.imports 		import *
from app.mktcore.authentication import *
from app.mktcore.autoid 		import dellockrecordbyuser
from app.mktcore.mktgdecode 	import *
from app.mktcore.logger 		import *
# import for request covert ',' to none in API
import re
from re 				import sub
from decimal 			import Decimal

import app.mktcore.accessright  as mktaccessright
import json

import app.QuickSearch.tools.quicksearch as quicksearch
# Mobile Offline Block
from app.MobileOffline.tools import *
# End Mobile Offline Block

lm = LoginManager()
lm.init_app(app)
lm.login_view = 'Login'

def getDefaultTimeOut():
	try:
		SettingObj = mktsetting.getSetting()
		if SettingObj:
			TimeOut = int(SettingObj.TIME_OUT)
		else:
			TimeOut = int(15)
	except Exception, e:
		TimeOut = int(15)

	return TimeOut

@lm.user_loader
def load_user(user_id):
	user = MKT_USER.query.get(user_id)
	return user


def setMaskedSensitive(Data):
	""" Masked Sensitive Data """
	Masked = app.config.get('MKT_DEBUG_MASTKED','')
	if Masked:
		for row in Data:
			if row in Masked:
				Data.update({row:'*****'})
	return Data

@app.before_request
def covert_request_dict():
	""" Covert post from form to set default """

	if request.method == 'POST' and request.form:

		if app.config.get('MKT_DEBUG_DATA',False):
			LogData = setMaskedSensitive(request.form.to_dict())
			logger.debug(LogData)

		if checkContentType() == 'json' or 'API' in request.url:
			formObj= request.form.to_dict()

			for key , value in formObj.items():
				value = str(value)
				if (value.count('.') == 1 or value.count(',') >= 1 ) and len(value) > 1:
					regex = re.compile('[0-9,.$]+$')
					if (regex.match(value)):
						value 		 = 	Decimal(sub(r'[^\d.]', '', value))
						formObj[key] =	str(value)

			formObj['Branch'] 		= formObj.get('Branch', session.get('ChangeBranch',''))
			formObj['Status'] 		= formObj.get('Status', 'AUTH')
			formObj['Curr']   		= formObj.get('Curr', '0')
			formObj['Inputter']  	= formObj.get('Inputter', session.get('getUserID'))
			formObj['Createdon']   	= formObj.get('Createdon', str(datetime.now()))
			formObj['Authorizer']   = formObj.get('Authorizer', session.get('getUserID'))
			formObj['Authorizeon']  = formObj.get('Authorizeon', str(datetime.now()))
			RequestForm = ImmutableMultiDict(formObj)
			request.form = RequestForm


# Override Session Timeout for 15 minutes
@app.before_request
def make_session_permanent():
	session.permanent = True
	# Set 15 minute for session timeout	
	app.permanent_session_lifetime = timedelta(minutes=getDefaultTimeOut())


def LoginNoCache(view):
	@wraps(view)
	def no_cache(*args, **kwargs):
		response = make_response(view(*args, **kwargs))
		response.headers['Last-Modified'] = datetime.now()
		response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0, max-age=0'
		response.headers['Pragma'] = 'no-cache'
		response.headers['Expires'] = '-1'
		return response
	return update_wrapper(no_cache, view)

#class userauthentication:
@app.route('/Morakot/API/Login', methods=['GET','POST'])
@app.route('/Morakot/Login', methods=['GET','POST'])
@LoginNoCache
@checkHeaderAPI
def Login():
	Status,Data,Message,Redirect = VBAuthentication()
	return FormatMessage(message=Message,redirect_url=Redirect,data=Data,status=Status)

@app.route('/Morakot/API')
@app.route('/Morakot/API/')
@app.route('/Morakot/API/Index')
@app.route('/Morakot')
@app.route('/Morakot/')
@app.route('/Morakot/Index')
@login_required
@checkLogOutSession
@checkLogOutTime
def index():
	Company = ""

	AccessMenu 		= aUser.getAccessMenu()
	AccessMenuList 	= aUser.getAccessMenuList()

	UserObj = aUser.getUser()
	# print "USerObj: ",UserObj.ID
	if not session.get("ChangeBranch") :
		session["ChangeBranch"] = ""

	AccessBranch = aUser.getAccessBranch()
	session['TELLER'] = ''
	FirstItem = aUser.getMenuItem()
	SecondItem = aUser.getSubMenuItem()
	Form = aUser.getFormURL().all()
	URL = {}
	TypeUrl = {}
	for link in Form:
		URL[link.FormID] = {}
		URL[link.FormID][link.URL] = link.URL
		TypeUrl[link.FormID] = {}
		TypeUrl[link.FormID][link.TypeUrl] = link.TypeUrl

	CurrentNotify = '%s%s' %(aUser.getBranch(session["ChangeBranch"]).ID,aUser.getUser().ID)
	CurrentNotify = CurrentNotify.replace('.','')
	CurrentNotify = CurrentNotify.replace('@','')

	ComObj = MKT_COMPANY.query.get('SYSTEM')
	if ComObj:
		Company = ComObj.CompanyName
	SettingObj = mktsetting.getSetting()
	if SettingObj:
		SettingNotify = SettingObj.Notification#"TRUE"
	else:
		SettingNotify = "False"

	UserObj = db.session.query(MKT_USER).filter(MKT_USER.ID==UserObj.ID).first()

	#block menu code for api 
	AccessBranchList 	= 	[]
	DataDic 			=	{}
	for row in AccessBranch:
		AccessBranchDic = {'text':row.Description,'value':row.ID}
		AccessBranchList.append(AccessBranchDic)

	FirstItemList 		=	menuList(ItemObject = FirstItem , URL = URL , TypeUrl = TypeUrl)
	SecondItemList 		=	menuList(ItemObject = SecondItem , URL = URL , TypeUrl = TypeUrl)
	ParentsID 			= 	[row.get("parents") for row in SecondItemList]
	IndexOf 			= 	[]


	#block Remove parent has not a child
	for row in SecondItemList:
		if row.get("url") == "":
			if row.get("item_id") not in ParentsID:
				IndexOf.append(row)
	for row in IndexOf:
		SecondItemList.remove(row)
	#End block remove child

	if "API" in request.url:
		DateLastLogin = 'First Login'
		if session.get('DateLastLogin'):
			DateLastLogin = session['DateLastLogin'] +' '+ session['TimeLastLogin']
		ProfilePicture = aUser.getUser().ProfilePicture
		if ProfilePicture is None:
			ProfilePicture = ""
		UserID = ""
		UserID = session['getLogInID']
		DataDic.update({
			"today_date": str(mktdate.getBankDate()),
			"display_name":aUser.getUser().DisplayName,
			"user_role":aUser.getPosition(),
			"branch":aUser.getBranch(session["ChangeBranch"]).Description,
			"second_item":SecondItemList,
			"first_item":FirstItemList,
			"profile":str(ProfilePicture),
			"access_branch":AccessBranchList,
			"user_notification":aUser.getUser().Notification,
			"current_notify":CurrentNotify,
			"company":Company,
			"setting_notify":SettingNotify,
			'last_login':DateLastLogin,
			'user_id':UserID
			})

		# Mobile Offline Block
		OfflineMenuItems = getOfflineMenuItems(SecondItemList)
		DataDic.update({"offline_items": OfflineMenuItems[0], "offline_items_size": OfflineMenuItems[1]})
		# End Mobile Offline Block
		
		return jsonify(data=DataDic,header='Menu' , message = {"message":[""]} , type="Menu"),StatusCodes.ok()
	#end block menu code for api
	
	TextColorDict = {'1':'#FFFFFF'}

	ColorIndex = UserObj.MenuTheme

	ColorDict = {key: code for key, code, color in BG_MENU_THEME}

	BackgroundMenu = ColorDict.get(ColorIndex)

	ForegroundColor = TextColorDict.get('1')

	return render_template('index.html',
							AccessList=mktaccessright.access_list,
							SecondItemList=json.dumps(SecondItemList),
							QuickSearchItems=json.dumps(quicksearch.getQuickSearchItems()),
							todaydate=mktdate.getBankDate(),
							DisplayName=aUser.getUser().DisplayName,
							UserRole=aUser.getPosition(),
							Branch= aUser.getBranch(session["ChangeBranch"]).Description,
							SecondItem=SecondItem,
							FirstItem=FirstItem,
							Profile=aUser.getUser().ProfilePicture,
							URL=URL,
							AccessBranch=AccessBranch,
							UserNotification=aUser.getUser().Notification,
							CurrentNotify=CurrentNotify,
							str=str,
							len=len,
							Company=Company,
							AccessMenu=AccessMenu,
							AccessMenuList=AccessMenuList,
							SettingNotify=SettingNotify,
							BackgroundMenu=BackgroundMenu,
							ForegroundColor=ForegroundColor,
							BG_MENU_THEME=BG_MENU_THEME
							)


@app.route("/Morakot/View/Application")
@app.route("/Morakot/API/View/Application")
def viewAppliaction():
	SecondItem 	= 	aUser.getSubMenuItem()
	Form 		= 	aUser.getFormURL().filter_by(EnableApp='Y').all()
	URL 		= 	{}
	TypeUrl 	= 	{}
	for link in Form:
		URL[link.FormID] 			= 	{}
		URL[link.FormID][link.URL] 	= 	link.URL
		TypeUrl[link.FormID] 		= 	{}
		TypeUrl[link.FormID][link.TypeUrl] = link.TypeUrl

	SecondItemList 		=	menuList(ItemObject = SecondItem , URL = URL , TypeUrl = TypeUrl)
	ParentsID 			= 	[row.get("parents") for row in SecondItemList]
	IndexOf 			= 	[]


	#block Remove parent has not a child
	for row in SecondItemList:
		if row.get("url") == "":
			if row.get("item_id") not in ParentsID:
				IndexOf.append(row)
	for row in IndexOf:
		SecondItemList.remove(row)
	#End block remove child

	return jsonify(data=SecondItemList,message= {"message":['']},header='Application'),200

@app.route('/Morakot/API/ResetPassword', methods=['GET','POST'])
@app.route('/Morakot/ResetPassword', methods=['GET','POST'])
def setPassword():
	try:
		dat = datetime.now()
		tim = '%s:%s:%s'% (dat.hour, dat.minute, dat.second)
		if 'getID' in session:
			if request.method=='POST':
				password = request.form['Password']
				if password == "":
					flash("Password is required")
				else:
					# call method check user password rule aUser.checkPasswordRule(param)
					checkPasswordRule = aUser.checkPasswordRule(password)
					# flash(checkPasswordRule)
					if checkPasswordRule:

						confirm = request.form['ConfirmPassword']
						if password != confirm:
							flash("Wrong confirmation password")
						else:
							user = MKT_USER.query.get(session['getID'])
							if user.Password and check_password_hash(user.Password, password):
								flash("The password must be different from the previous")
							else:
								if user.Password != "":
									#Set PassValidaty + PassValidaty
									Val = user.PassValidity.split(" ");
									Month = Val[1][1:3]
									PassValidity = aUser.addMonth(datetime.strptime(str(Val[0]), "%Y%m%d"), int(Month))
									PassValidity = str(PassValidity).replace("-", "").replace("00:00:00", "")
									PassValidity = str(PassValidity) + Val[1]
									user.PassValidity = PassValidity
								#Change Password Field
								user.Password = generate_password_hash(password)
								db.session.add(user)
								db.session.commit()
								login_user(user)
								session['getLogInID'] = user.ID
								# Insert to MKT_LOGIN_USER to list all LoggedIn user
								aUser.saveLoginUser(user.ID, user.Role, user.Branch, tim)
								# Set Session Last Login
								session['TimeLastLogin'] = aUser.getUser().TimeLastLogin
								session['DateLastLogin'] = aUser.getUser().DateLastLogin
								# Update MKT_USER DateLastLogin & TimeLastLogin
								aUser.updateLastLogin(user.ID)
								session.pop('getID')
								return redirect("Morakot")
					else:
						return redirect(url_for("setPassword"))

			return render_template('resetpassword.html')

		else:
			flash("Please give your username")
			return redirect(url_for("Login"))

	except Exception as exe:
		flash(exe)
		return render_template("resetpassword.html")

@app.route("/Morakot/API/LogOut", methods=["GET"])
@app.route("/Morakot/LogOut", methods=["GET"])
def setLogOut():
	try:
		if 'getLogInID' in session:
			dellockrecordbyuser()
			loggedOut = MKT_LOGIN_USER.query.filter_by(UserID=session['getLogInID']).first()
			if loggedOut:
				db.session.delete(loggedOut)
				db.session.commit()

		logout_user()
		session.clear()
		if checkContentType() == 'json':
			return FormatJsonMessage(message="You are logged out")
		flash('You are logged out')
		return redirect("Morakot/Login")
	except Exception as exe:
		flash(exe)
		return render_template("errors.html")
	finally:
		db.session.close()
		db.session.remove()



#TODO: for return list of menu
def menuList(ItemObject = None , URL = {} , TypeUrl = {}):
	ItemMenuList = [] #Item of menu
	CheckEnableAPI = True #Check for enable or disable url
	for row in ItemObject:
		UrlFor 		=	''
		TypeUrlForm	= 	'Form'
		if row.Form:
			if URL.get(row.Form.split(':')[1] , None):
				UrlFor = URL.get(row.Form.split(':')[1]).values()[0] #url of each items
				CheckEnableAPI = True
			else:
				CheckEnableAPI = False

			if TypeUrl.get(row.Form.split(':')[1] , None):
				TypeUrlForm = TypeUrl.get(row.Form.split(':')[1]).values()[0] #url of each items
				

		else:
			CheckEnableAPI = True

		if CheckEnableAPI == True:
			ItemMenuList.append({  
					"item_id":row.ItemID,
					"label":row.ItemDesc,
					"url" : UrlFor,
					'type_url':TypeUrlForm,
					"icon":row.Icon,
					"parents": row.Parents,
					"active":row.Active,
					'app_icon':row.AppIcon					
				})
	return ItemMenuList


@app.route("/Morakot/API/License", methods=["GET","POST"])
@app.route("/Morakot/License", methods=["GET","POST"])
def License():

	if request.method == "POST":
		file = request.files['file']
		if file and isFileLicense(file.filename):
			LicenseContent = str(file.read())
			if applyLicense(LicenseContent):
				logger.info(msg_license_update)
				flash(msg_license_update)
			else:
				flash(msg_error+msg_license_update)
		else:
			logger.warning(msg_license_invalid)
			flash(msg_error+msg_license_invalid)

	return render_template("license.html")