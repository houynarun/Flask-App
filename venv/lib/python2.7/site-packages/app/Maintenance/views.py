from app.mktcore.imports 	import *
from flask 					import request,flash,redirect,send_from_directory,jsonify
from werkzeug 				import secure_filename
from os 					import listdir
from os.path 				import isfile, join
from .forms 				import FRM_BACKUP

import app.tools.mktdate  as mktdate
import app.tools.mktaudit as mktaudit
import app.tools.mkttool as mkttool
import app.tools.mktmessage as mktmessage
import subprocess
import os
import time
import operator
import json

from app import app

PATHEOD 	= app.config.get("BACKUP_EOD_PATH") # "/var/dbbackup/EOD/"
PATHSOD 	= app.config.get("BACKUP_SOD_PATH") # "/var/dbbackup/SOD/"
backupFile  = app.config.get("BACKUP_PATH") + "backup.json" # "/var/dbbackup/backup.json"


@app.errorhandler(404)
def not_found(error):
	if checkContentType()=="json" or "API" in request.url:
		return jsonify({
				"message":{
					"message":["Page not found!"]
				}
			}),StatusCodes.not_found()

	return render_template('report/error404.html'), 404

@app.errorhandler(400)
def bad_request(error):
	if checkContentType()=="json" or "API" in request.url:
		return jsonify({
				"message":{
					"message":["Bad request!"]
				}
			}),StatusCodes.bad_request()

@app.errorhandler(500)
def internal_error(error):
	if checkContentType()=="json" or "API" in request.url:
		return jsonify({
				"message":{
					"message":[str(error)]
				}
			}),StatusCodes.internal_server_error()

	return render_template('error500.html',error=error), 500
	
@app.errorhandler(413)
def request_entity_too_large(error):
	if checkContentType()=="json" or "API" in request.url:
		return jsonify({
				"message":{
					"message":["File Too Large!"]
				}
			}),StatusCodes.request_entity_too_large()
		
	return 'File Too Large', 413

# @app.errorhandler(302)
# def minimal_redirect():
# 	if checkContentType() == "json" or "API" in request.url:
# 		return jsonify(message={"message":["Minimal redirect"]}),StatusCodes.found()
		


@app.route('/Morakot/SystemLog', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def SystemLog(Type="",FileName=""):
	try:
		ErrorMsg 		= []
		getCheck 	= checkAccess("/Morakot/SystemLog","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template('maintenance/systemlog.html',ErrorMsg=ErrorMsg)

		FileName = app.config.get("LOG_PATH")+"log/error.log"
		FileText = mkttool.getReadFile(FileName).replace('\n', '<br>')

		return render_template("maintenance/systemlog.html",
							ErrorLogText=FileText
							)
	except Exception, e:
		return render_template("maintenance/systemlog.html",
							ListObj=[e]
							)

def writeJsonData(data):
	try:
		with open(backupFile, 'w') as fw:
			json.dump(data, fw, indent=4)
	except Exception, e:
		flash(msg_error+" %s" % e)

def readJsonData():
	if not os.path.exists(backupFile):
		writeJsonData({})
	try:
		with open(backupFile) as fr:
			return json.load(fr)
	except Exception, e:
		flash(msg_error+" %s" % e)

def getValueFromJsonData(jsonData, FileName, key):
	fileDict = jsonData.get(FileName, '')
	if fileDict == '':
		return ''
	else:
		return fileDict[key]

def removeEmptyDescription(jsonData):
	keys = []
	for filename in jsonData:
		Description = getValueFromJsonData(jsonData, filename, 'Description')
		if Description == '':
			keys.append(filename)
	for i in keys:
		jsonData.pop(i, '')
	writeJsonData(jsonData)

@app.route('/Morakot/Backup/Edit/<FileName>', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeEditDescription(FileName=""):
	ErrorMsg 		= []
	getCheck 	= checkAccess("/Morakot/Backup","Edit")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template('maintenance/backup.html',ErrorMsg=ErrorMsg)
	form = FRM_BACKUP()
	ToolbarObj = mkttool.clsToolbar()
	li_html = ToolbarObj.getToolbarevent("Edit")
	jsonData = readJsonData()
	listOfKeys = ['Status', 'Authorizer', 'Curr', 'Createdon', 
					'Inputter', 'Branch', 'Authorizeon', 'Description']
	DataDict = {}
	for key in listOfKeys:
		DataDict[key] = getValueFromJsonData(jsonData, FileName, key)

	form.Description.data = DataDict['Description']
	form.FileName.data = FileName

	if request.method == 'POST':
		FileName = request.form['FileName']
		Description = request.form['Description']
		jsonData = readJsonData()
		newJsonData = {'Description': Description}
		newJsonData.update(mktaudit.getAuditrail())
		jsonData[FileName] = newJsonData
		writeJsonData(jsonData)
		return redirect(url_for('routeBackup'))

	return render_template("maintenance/edit-description.html", 
							li_html=li_html, form=form, AuditObj=DataDict)

@app.route('/Morakot/Backup/Download/<Type>/<FileName>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeDownloadBackup(Type="",FileName=""):
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/Backup","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)
	if Type:
		Path = ""
		if Type=="EOD":
			Path 		= PATHEOD
		elif Type=="SOD":
			Path 		= PATHSOD
		if FileName and Path:
			return send_from_directory(Path, FileName)
		else:
			return ""
	else:
		return ""
@app.route('/Morakot/Backup/Delete/<Type>/<FileName>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeDeleteBackup(Type="",FileName=""):
	ErrorMsg 		= []
	getCheck 	= checkAccess("/Morakot/Backup","Delete")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template('maintenance/backup.html',ErrorMsg=ErrorMsg)

	if Type:
		Path = ""
		if Type=="EOD":
			Path 		= PATHEOD
		elif Type=="SOD":
			Path 		= PATHSOD
		if FileName and Path:
			try:
				jsonData = readJsonData()
				jsonData.pop(FileName, '')
				writeJsonData(jsonData)
				os.remove(Path+FileName)
				return render_template("maintenance/list-backup.html",
							ListFile=getListOfBackupFile(),ErrorMsg=ErrorMsg)

			except Exception, e:
				ErrorMsg.append(msg_error+" %s"%e)
				return render_template("maintenance/list-backup.html",
							ListFile=getListOfBackupFile(),ErrorMsg=ErrorMsg)

		else:
			ErrorMsg.append(msg_error+" Incorrent filename or path.")
			return render_template("maintenance/list-backup.html",
							ListFile=getListOfBackupFile(),ErrorMsg=ErrorMsg)
	else:
		ErrorMsg.append(msg_error+" Incorrent type to delete.")
		return render_template("maintenance/list-backup.html",
							ListFile=getListOfBackupFile(),ErrorMsg=ErrorMsg)

@app.route('/Morakot/Backup', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeBackup():

	Message 		= ""
	FileName 		= ""
	FreeSpace 		= getFreeSpace("/")
	FieldRequired 	= []
	ListFile 		= []
	ErrorMsg 		= []
	getCheck 	= checkAccess ("/Morakot/Backup","New")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template('maintenance/backup.html',ErrorMsg=ErrorMsg)
	
	getCheck 	= checkAccess ("/Morakot/Backup","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template('maintenance/backup.html',ErrorMsg=ErrorMsg)

	if request.method=="POST":
		BackupType  = request.form['Backup'] if 'Backup' in request.form else "None"
		if BackupType == "None":
			FieldRequired.append(('Backup EOD / SOD ','This field is required.'))
		if not FieldRequired:
			# this return Message and create new
			# backup file.
			Message = autoBackup(BackupType)[1]
		

			
	# get all bak extension file.
	ListFile = getListOfBackupFile()


	return render_template("maintenance/backup.html",
							int=int,
							ErrorMsg=ErrorMsg,
							FieldRequired=FieldRequired,
							Message=Message,
							FileName=FileName,
							FreeSpace=FreeSpace,
							formatSize=formatSize,
							ListFile=ListFile)

@app.route('/Morakot/RestoreRefresh', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeRestoreRefresh():
	FieldRequired 	= []
	ErrorMsg 		= []

	getCheck 	= checkAccess ("/Morakot/Restore","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template('maintenance/list-restore.html',
								ErrorMsg=ErrorMsg
								)
	Type = request.args.get('Type')
	if Type== "SOD":
		ListFile = getListOfBackupFileSOD()
	elif Type == "EOD":
		ListFile = getListOfBackupFileEOD()
	else:
		ListFile = getListOfBackupFile()

	return render_template("maintenance/list-restore.html",
							ErrorMsg=ErrorMsg,
							ListFile=ListFile)


@app.route('/Morakot/Restore', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeRestore():
	try:
		ErrorMsg 		= []
		getCheck 	= checkAccess ("/Morakot/Restore","New")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template('maintenance/restore.html',
									ErrorMsg=ErrorMsg)
		RestoreType = ""
		ListFile = getListOfBackupFile()
		if request.method == "POST":
			RestoreType  = request.form['RestoreType'] if 'RestoreType' in request.form else None
			file 		 = request.files['file']
			if RestoreType is not None:
				if RestoreType == "EOD":
					Path 		= PATHEOD

				elif RestoreType=="SOD":
					Path 		= PATHSOD

				if file and isAllowFileRestore(file.filename):
					filename = secure_filename(file.filename)
					file.save(os.path.abspath(Path + filename))
					flash("%s was sucessfully uploaded.You need to click on Restore action to continue to restore." % filename)
					return redirect(url_for('routeRestore'))
				else:
					flash(msg_error+" The uploaded file isn't backup file.")
			else:
				flash('%s %s' % (msg_error, 'Must select Restore Type EOD or SOD'))

		return render_template("maintenance/restore.html",
								ErrorMsg=ErrorMsg,
								ListFile=ListFile,
								RestoreType=RestoreType)
	except Exception, e:
		ErrorMsg=[]
		ListFile=[]
		RestoreType=""
		flash(msg_error+" %s"%e)
		return render_template("maintenance/restore.html",
								ErrorMsg=ErrorMsg,
								ListFile=ListFile,
								RestoreType=RestoreType)

@app.route('/Morakot/Restore/<Type>/<FileName>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeStartRestore(Type,FileName):
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess ("/Morakot/Restore","New")
		if getCheck != True: 
			return "False",msg_permission
		if Type =="EOD":
			bashCommand = "restore-eod mktdb %s"%FileName
		elif Type == "SOD":
			bashCommand = "restore-sod mktdb %s"%FileName
		else:
			bashCommand =""
		if bashCommand:	
			process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
			Output 	= process.communicate()[0]
			Output 	= Output.split("\n")
			if "True" in Output:
				if Type== "EOD":
					Message="Restore for EOD was sucessfully, File Name: %s"%FileName
				else:
					Message="Restore for SOD was sucessfully, File Name: %s"%FileName
			
				
				return jsonify(Status="True",Message=Message)
			else:
				return jsonify(Status="False",Message="Restore failed. Please check system error.")
			return jsonify(Status="True",Message=Message)
		else:
			return jsonify(Status="False",Message="Type not found.")
		
	except Exception, e:
		return jsonify(Status="False",Message=e)
	
@app.route('/Morakot/Maintenance/', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def maintenance():
	try:
		ErrorMsg 	= []
		getCheck 	= checkAccess ("/Morakot/Maintenance/","New")
		if getCheck != True: 
			return "False",msg_permission

		if request.method == "POST":
			KeepingRecord = request.form.get('NumberOfNotification')
			Notification  = request.form.get('NotificationDelete')
			RetentionDay  = request.form.get('RetentionDay')
			BackupDelete  = request.form.get('BackupDelete')
			BackupType    = request.form.get('BackupType')
			LogClear 	  = request.form.get('LogClear')
			
			if Notification == 'YES' and (KeepingRecord == "" or not KeepingRecord.isdigit() or int(KeepingRecord) < 25):
				ErrorMsg.append('Number Of Notification keep per user is required and must be number bigger than 24')
			if BackupDelete == 'YES' and (RetentionDay == "" or not RetentionDay.isdigit() or int(RetentionDay) < 1):
				ErrorMsg.append('Number Of Retention Day is required and must be number bigger than 0')
	
			if ErrorMsg:
				return render_template("maintenance/maintenance.html", ErrorMsg=ErrorMsg) 
	
			if Notification == 'YES':
				mktnotification.clearOldNotificationEachUser(KeepingRecord)
				db.session.commit()
			if BackupDelete == 'YES':
				if BackupType == 'EOD':
					removeFileByDate(RetentionDay,'bak', Path=PATHEOD)
				elif BackupType == 'SOD':
					removeFileByDate(RetentionDay,'bak', Path=PATHSOD)
				else:
					removeFileByDate(RetentionDay,'bak', Path=PATHEOD)
					removeFileByDate(RetentionDay,'bak', Path=PATHSOD)
			if LogClear == 'YES':
				open(app.config.get("EOD_LOG_ERROR"),"w")

			flash("Maintenance Processs is completed")
			return render_template("maintenance/maintenance.html") 
		else:
			return render_template("maintenance/maintenance.html")
	except Exception, e:
		flash(msg_error+" %s"%e)
		return render_template("maintenance/maintenance.html")

def removeFileByDate(KeepAge, Name, Path='.', Ext=True):
	try:
		jsonData = readJsonData()
		if Ext:
			filelist = [ f for f in os.listdir(Path) if f.endswith("."+Name) ]
			for f in filelist:
				FileDate = time.strftime("%Y-%m-%d", time.gmtime(os.path.getctime(Path+f)))
				FileAge  = (datetime.now() - datetime.strptime(FileDate, "%Y-%m-%d")).days
				if int(FileAge) > int(KeepAge) : 
					jsonData.pop(f, '')
					os.remove(Path + f)
		else:
			FileDate = time.strftime("%Y-%m-%d", time.gmtime(os.path.getctime(Path+Name)))
			FileAge  = (datetime.now() - datetime.strptime(FileDate, "%Y-%m-%d")).days
			if int(FileAge) > int(KeepAge) :
				jsonData.pop(Name, '')
				os.remove(Path + Name)
		removeEmptyDescription(jsonData)
	except Exception, e:
		raise e
		
def isAllowFileRestore(FileName):
	return '.' in FileName and FileName.rsplit('.', 1)[1] in ['bak']

def getListOfBackupFileEOD():
	try:
			
		RowRecord 		= []
		ColRecord 		= []
		TotalSize 		= 0

		ListFileEOD 	= listdir(PATHEOD)
		ListFileEOD.sort()
		ListFileEOD = reversed(ListFileEOD)
		jsonData = readJsonData()

		# Create List File EOD
		for row in ListFileEOD:

			FileName 	= row
			Path 		= PATHEOD
			Description = getValueFromJsonData(jsonData, FileName, 'Description')
			Type 		= "EOD"
			Size 		= int(os.stat(Path+FileName).st_size)
			TotalSize+=Size
			SizeConvert = formatSize(Size)
			CreateDate 	= time.ctime(os.path.getctime(Path+FileName))
			ColRecord.append(FileName)
			ColRecord.append(Description)
			ColRecord.append(Type)
			ColRecord.append(CreateDate)
			ColRecord.append(SizeConvert)
			RowRecord.append(ColRecord)
			ColRecord 	= []

		return RowRecord
	except Exception, e:
		return [e,'','','']

def getListOfBackupFileSOD():
	try:
			
		RowRecord 		= []
		ColRecord 		= []
		TotalSize 		= 0

		ListFileSOD		= listdir(PATHSOD)
		ListFileSOD.sort()
		ListFileSOD = reversed(ListFileSOD)
		jsonData = readJsonData()

		# Create List File EOD
		for row in ListFileSOD:

			FileName 	= row
			Description = getValueFromJsonData(jsonData, FileName, 'Description')
			Path 		= PATHSOD
			Type 		= "SOD"
			Size 		= int(os.stat(Path+FileName).st_size)
			TotalSize+=Size
			SizeConvert = formatSize(Size)
			CreateDate 	= time.ctime(os.path.getctime(Path+FileName))
			ColRecord.append(FileName)
			ColRecord.append(Description)
			ColRecord.append(Type)
			ColRecord.append(CreateDate)
			ColRecord.append(SizeConvert)
			RowRecord.append(ColRecord)
			ColRecord 	= []

		return RowRecord
	except Exception, e:
		return [e,'','','']

def getListOfBackupFile():
	try:
			
		RowRecord 		= []
		ColRecord 		= []
		TotalSize 		= 0

		ListFileEOD 	= listdir(PATHEOD)
		ListFileSOD		= listdir(PATHSOD)
		
		DicFileName 	= {}
		DicFileType 	= {}
		for row in ListFileEOD:
			DicFileName.update({row:os.path.getctime(PATHEOD+row)})
			DicFileType.update({row:"EOD"})

		for row in ListFileSOD:
			DicFileName.update({row:os.path.getctime(PATHSOD+row)})
			DicFileType.update({row:"SOD"})

		DicFileName = sorted(DicFileName.items(), key=operator.itemgetter(1))
		DicFileName = reversed(DicFileName)
		jsonData = readJsonData()

		# Create List File EOD
		for row in DicFileName:

			FileName 	= row[0]
			if FileName in DicFileType:

				Type=DicFileType[FileName]
				if Type == "EOD":
					Path=PATHEOD
				elif Type == "SOD":
					Path=PATHSOD
			Description = getValueFromJsonData(jsonData, FileName, 'Description')
			Size 		= int(os.stat(Path+FileName).st_size)
			TotalSize+=Size
			SizeConvert = formatSize(Size)
			CreateDate 	= time.ctime(os.path.getctime(Path+FileName))
			ColRecord.append(FileName)
			ColRecord.append(Description)
			ColRecord.append(Type)
			ColRecord.append(CreateDate)
			ColRecord.append(SizeConvert)
			RowRecord.append(ColRecord)
			ColRecord 	= []

		return RowRecord
	except Exception, e:
		flash(msg_error+"%s"%e)
		return []
	

def getFreeSpace(path):
	"""Return disk usage statistics about the given path.
	Will return the namedtuple with attributes: 'total', 'used' and 'free',
	which are the amount of total, used and free space, in bytes.
	"""
	st = os.statvfs(path)
	free = st.f_bavail * st.f_frsize
	total = st.f_blocks * st.f_frsize
	used = (st.f_blocks - st.f_bfree) * st.f_frsize
	return [total, used, free]

def formatSize(num, suffix='B'):
	for unit in ['','K','M','G','T','P','E','Z']:
		if abs(num) < 1024.0:
			return "%3.1f %s%s" % (num, unit, suffix)
		num /= 1024.0
	return "%.1f %s%s" % (num, 'Y', suffix)

def autoBackup(BackupType):

	'''This Func is going to used 
	without click on backup button
	Just give BackupType '''
	Result = True
	if BackupType=="EOD":
		bashCommand = "backup-eod"
	if BackupType=="SOD":
		bashCommand = "backup-sod"
	try:
		process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
		Output 	= process.communicate()[0]
		Output 	= Output.split("\n")
		if "True" in Output:
			for row in Output:
				if len(row.split(':'))==2:
					FileName=row.split(':')[1]
			if BackupType== "EOD":
				Message 	= "Backup for EOD was sucessfully, File Name: %s"%FileName
			else:
				Message 	= "Backup for SOD was sucessfully, File Name: %s"%FileName
			event_code = "702"
			MessageNotify = mktnotification.getEventCode()[event_code]
			# notification    = mktnotification.getSignal(obj_id,self.model[0],"AUTH",event_code)
			path  = str(request.path).split('/')[2]

			getUserLogInID = session['getLogInID']
			mktnotification.insertNotify({  
						'ID':FileName,
			            'Path':path,
			            'Status':"AUTH",
			            'Code':event_code,
			            'Model':"",
			            'From':getUserLogInID, 
			            'To':getUserLogInID,
			            'Message':MessageNotify
			})
		else:
			Message 	= msg_error+"Backup failed."
			Result = False
			event_code = "702"
			MessageNotify = mktnotification.getEventCode()[event_code]
			# notification    = mktnotification.getSignal(obj_id,self.model[0],"AUTH",event_code)
			path  = str(request.path).split('/')[2]

			getUserLogInID = session['getLogInID']
			mktnotification.insertNotify({  
						'ID':FileName,
			            'Path':path,
			            'Status':"AUTH",
			            'Code':event_code,
			            'Model':"",
			            'From':getUserLogInID, 
			            'To':getUserLogInID,
			            'Message':MessageNotify
			})

		return Result, Message
	except Exception, e:
		# flask(msg_error+"Backup failed. %s"%e)
		raise
