# -*- coding: utf-8 -*-

from flask 						import request, url_for, render_template,flash,redirect,session, g, flash
from .. 						import app, db
from jinja2 					import Template
from app.Login.forms 			import *
from app.mktcore.imports 		import *
from app.mktcore.session 		import *
from .forms 					import *
from sqlalchemy 				import *
from app.LoanContract.models 	import MKT_LOAN_CONTRACT
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from app.PD.models 					import MKT_PAST_DUE, MKT_PD_DATE
from app.AccEntry.models 		import MKT_ACC_ENTRY
from app.FundTransfer.models 	import MKT_FUND_TRANSFER
from app.Teller.models 			import MKT_TELLER
from app.tools.mktcustomreport 	import *
import re

import app.tools.mktautoid 		as mktautoid
import app.tools.mktaudit 		as mktaudit
import app.tools.mkttool 		as mkttool
import app.tools.mktapi 		as mktapi
import app.tools.mktmoney	 	as mktmoney
import app.tools.mktdate		as mktdate
import app.tools.user 			as mktuser
import app.tools.mktcustomer 	as mktcustomer
import app.tools.mktcharge 		as mktcharge
import app.tools.mktparam 		as mktparam
import app.tools.mktpdcollection as mktpdcollection
import app.tools.mktsetting 	as mktsetting
import app.tools.mktaddress 	as mktaddress

from app.tools.mktcustomreport 	import *
from app.tools.mktmail 				import MAIL

@app.route("/Morakot/TemplateBuilder/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getTemplateEditor():
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/TemplateBuilder/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	classToolbar 	= mkttool.clsToolbar()
	li_html 		= classToolbar.getToolbarevent("Cancel")
	return render_template('templatebuilder/index.html', li_html=li_html)

@app.route("/Morakot/TemplateBuilder/ListLive/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def listTemplateEditor():
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/TemplateBuilder/","ListLive")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	classToolbar = mkttool.clsToolbar()
	li_html 	 = classToolbar.getToolbarevent("Cancel")
	TE 			 = MKT_TEMPLATE_BUILDER.query.all()
	return render_template('templatebuilder/listlive.html', te = TE, li_html=li_html)

@app.route("/Morakot/TemplateBuilder/ListHist/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def listHistTemplateEditor():
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/TemplateBuilder/","ListHist")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	classToolbar 	= mkttool.clsToolbar()
	li_html 		= classToolbar.getToolbarevent("Cancel")
	TE 				= MKT_TEMPLATE_BUILDER_HIST.query.all()
	return render_template('templatebuilder/listlive.html', te = TE, li_html=li_html, is_hist=True)

@app.route("/Morakot/TemplateBuilder/New/", methods=['GET', 'POST'])
@app.route("/Morakot/TemplateBuilder/New/<ID>", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def saveTemplateEditor(ID=""):
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/TemplateBuilder/","New")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	if request.method == 'POST':
		Title 	= request.form.get('title')
		Content = request.form.get('template')

		if ID == '':
			ID = request.form.get('ID','')

		if Title == '' or Content == '':
			return 'Title and Content is required', 400

		if ID == '':
			return 'ID is required', 400

		Data 			= mktaudit.getAuditrail()
		Data['Title'] 	= Title
		Data['Content'] = Content
		Data['ID'] 		= ID

		TE = MKT_TEMPLATE_BUILDER(**Data)
		db.session.add(TE)
		db.session.commit();
		flash('New template was created.')
		return ''
	else:
		classToolbar = mkttool.clsToolbar()
		li_html 	 = classToolbar.getToolbarevent("New")
		FormName 	 = "FRM_TEMPLATE_BUILDER"
		g_id 		 = mktautoid.getAutoID(FormName) if not ID else ID
		IDObj		 = MKT_TEMPLATE_BUILDER.query.get(g_id)
		if IDObj :
			flash(msg_error+"ID '%s' is already in use!"%ID)
			return redirect('/Morakot/TemplateBuilder/')
		return render_template('templatebuilder/new.html', li_html=li_html, g_id=g_id, g_readonly='readonly')

@app.route("/Morakot/TemplateBuilder/ViewHist/<ID>", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def viewHistTemplateEditor(ID):
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/TemplateBuilder/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	classToolbar = mkttool.clsToolbar()
	li_html 	 = classToolbar.getToolbarevent("readonly")
	TE 			 = MKT_TEMPLATE_BUILDER_HIST.query.get(ID)
	if not TE :
		flash(msg_error+'Template with id %s not found!.'%ID)
	return render_template('templatebuilder/edit.html', te = TE, View = True, 
							li_html=li_html, g_id=ID, g_readonly='readonly')

@app.route("/Morakot/TemplateBuilder/<ID>", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def viewTemplateEditor(ID):
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/TemplateBuilder/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	classToolbar = mkttool.clsToolbar()
	li_html 	 = classToolbar.getToolbarevent("readonly")
	TE 			 = MKT_TEMPLATE_BUILDER.query.get(ID)
	if TE :
		return render_template('templatebuilder/edit.html', te = TE, View = True, 
							li_html=li_html, g_id=ID, g_readonly='readonly')
	flash(msg_error+'Template with id %s not found!.'%ID)
	return redirect('/Morakot/TemplateBuilder/')

@app.route("/Morakot/TemplateBuilder/Edit/<ID>", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def editTemplateEditor(ID):
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/TemplateBuilder/","Edit")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	classToolbar = mkttool.clsToolbar()
	li_html 	 = classToolbar.getToolbarevent("Cancel")
	TE 			 = MKT_TEMPLATE_BUILDER.query.get(ID)
	if not TE:
		flash(msg_error+'Template with ID %s cannot found for updating.'%ID)
		return render_template('templatebuilder/index.html', li_html=li_html)

	if request.method == 'POST':
		Title 	= request.form.get('title')
		Content = request.form.get('template')
		if Title == '' or Content == '':
			return 'Title and Content is required', 400

		TE.Title 	= Title
		TE.Content 	= Content
		db.session.add(TE)
		db.session.commit();
		# flash('Template with ID %s was updated.'%ID)
		return ''
	else:
		li_html = classToolbar.getToolbarevent("Edit")
		return render_template('templatebuilder/edit.html', te = TE, 
								li_html=li_html, g_id=ID, g_readonly='readonly')

@app.route("/Morakot/TemplateBuilder/Delete/<ID>", methods=['POST'])
@checkLogOutSession
@checkLogOutTime
def deleteTemplateEditor(ID):
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/TemplateBuilder/","Delete")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	TE = MKT_TEMPLATE_BUILDER.query.filter_by(ID = ID)
	if TE.count():
		mktaudit.moveAUTHtoHIST(MKT_TEMPLATE_BUILDER,MKT_TEMPLATE_BUILDER_HIST,ID)
	 	TE.delete()
		db.session.commit();
		flash('Template with ID %s was deleted.'%ID)
	else:
		flash(msg_error+'Template with ID %s cannot found for deletion.'%ID)

	return redirect('/Morakot/TemplateBuilder/')

@app.route("/Morakot/Template/<ID>")
@checkLogOutSession
@checkLogOutTime
def viewTemplate(ID):
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/Template/"+ID,"Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)
	exportButton = """
	<div class="btn-group" >

		<button type="button" class="btn btn-flat btn-primary dropdown-toggle" data-toggle="dropdown">
	 	<span class="btn-label icon fa fa-upload"></span> &nbsp;Export
		</button>

		<ul class="dropdown-menu text-left" style="min-width: 85px;">
			<li><a href="javascript:void(0)" id="csv"> <i class='fa fa-files-o'></i> CSV </a></li> 
			<li><a href="javascript:void(0)" id="excel"> <i class='fa fa-file-excel-o'></i> Excel </a></li>
			<li><a href="javascript:void(0)" id="print"><i class='fa fa-print'></i>&nbsp;Print</a></li>
		</ul>
	</div> 
	"""
	exportButtonLink ="""
	<div id="exportButton">
		<b>Also available in:</b>
		<a id="csv" style="cursor:pointer; color:#1d89cf;" > <i class='fa fa-files-o'></i> CSV &nbsp;</a>|
		<a id="excel" style="cursor:pointer; color:#1d89cf;"> <i class='fa fa-file-excel-o'></i> Excel &nbsp;</a>|
		<a id="print" style="cursor:pointer; color:#1d89cf;"><i class='fa fa-print'></i>&nbsp;Print</a>
	</div>
	"""
	Dict = {
		'eval'						: eval,
		'int' 						: int,
		'float' 					: float,
		'len' 						: len,
		'str' 						: str,
		'url_for' 					: url_for,
		'getRecord'					: mktapi.getRecord,
		'mktapi' 					: __import__("app.urlregister"),
		'request' 					: request.args,
		'toMoney' 					: mktmoney.toMoney,
		'formatNumber'				: mktmoney.formatNumber,
		'CurrencyObj' 				: mktmoney.getCurrencyObj,
		'exportButtonLink' 			: exportButtonLink,
		'exportButton' 				: exportButton,
		'mktdate' 					: mktdate,
		'mktautoid'					: mktautoid,
		'mktsetting' 				: mktsetting,
		'setConcate'				: setConcate,
		'mkt'						:{
										'getUser' 			 : mktuser.getUser,
										'getCurrentBranch' 	 : mktuser.getCurrentBranch,
										'getCustomerAddress' : mktcustomer.getCustomerAddress,
										'getAddress'		 : mktaddress.getAddress,
									 },
		'getLoanCharge' 			: mktcharge.getLoanChargeAmount,
		'getCollectionVoucher' 		: getCollectionVoucher,
		'formatNumberToWord' 		: mkttool.formatNumberToWord,
		'formatLangNumber'			: mkttool.formatLangNumber,
		'getPenaltyRate'			: mktpdcollection.getPenatyRate,
		'getChargeRegularObj'		: mktcharge.getChargeRegularObj,
		'checkAccess'				: checkAccess,
		'getDefaultReportUrl'		: CUSTOM_REPORT.getDefaultReportUrl,
		'getFormatChargeRegularObj' : mktcharge.getFormatChargeRegularObj,
		'getLoanAmendAmount'		: mktloanamendment.getLoanAmendAmount,
		'getCollectionVoucherByAmountDeposit':getCollectionVoucherByAmountDeposit,
		'getTotalCharge'			: mktcharge.getTotalCharge,
		'setCompose' 				: setCompose
	}

	
	LoadMacro = mkttool.getReadFile(app.config.get("CURRENT_PATH")+'app/templates/print.html')

	""" Extend Function Dict from local project"""
	ExtendModuleObj = mktsetting.ExtendModule()
	FuncDict 		= ExtendModuleObj.setFuncTempBuilder()
	Dict.update(FuncDict)

	""" Add feature write js or macro Jinja from local customization"""
	LoadJinjaLocal = mkttool.getReadFile(ExtendModuleObj.getLocalDirecotry()+'/templates/templatebuilder/macro.html').decode('utf-8')

	Content = ""
	Temp = MKT_TEMPLATE_BUILDER.query.get(ID)
	if Temp:
		Dict.update({'TemplateTitle':Temp.Title})
		# Disable JS
		Content = re.subn(r'<(script).*?</\1>(?s)', '',  Temp.Content)[0]
		# Append From Macro Print
		Content = Template(LoadMacro+LoadJinjaLocal+Content).render(**Dict)

	if request.method=="POST":
		To 		= request.form.get('To')
		Cc 		= request.form.get('Cc')
		Bcc 	= request.form.get('Bcc')
		Subject = request.form.get('Subject')
		Message = request.form.get('Message')

		htmlList 	= str(Content).split('<div id="splitcontent"> </div>')
		To 			= str(To).split()
		Cc 			= str(Cc).split()
		Bcc 		= str(Bcc).split()
		html = ''

		if len(htmlList) > 1:
			html = htmlList[1]

		SendResult = 	MAIL.sendMail(	Subject 		= Subject,
										Recipients		= To,
										CC 				= Cc,
										BCC 			= Bcc,
										Body 			= Message,
										Html 			= html
										)

	return render_template('templatebuilder/builder.html', Temp = Content)


def getCollectionVoucher(ID,Limit=True, DepositID = ''):
	"""
		Limit = True: mean it will limit loan collection record
		DepositID != '': mean it will get deposit amount only
	"""
	try:

		TwoDigit 			=	'0'
		PaidBy 				=	'1'
		PayOption 			=	{"1":u"សាច់ប្រាក់", "2":u"សែក", "3":u"ធនាគារ",'None':u"សាច់ប្រាក់","":u"សាច់ប្រាក់"}
		Result 				=	{}

		LoanObj 			=	MKT_LOAN_CONTRACT.query.get(ID)

		if not LoanObj:
			return {"error":"Loan contract %s not found." %ID}
		else:

			RepOrder 	=	mktparam.getPDParam().RepOrder
			RepOrder 	=	RepOrder.split()

			Principal 	=	0
			Interest 	=	0
			Charge 		=	0
			Penalty 	=	0
			Insurance 	=	0
			Other 		=	0
			Balance 	=	0
			TotalBalance=	0
			LastBalance =	0
			CollectionDate 	=	""
			PrevBalance 	= 	0
			CurrentBalance 	= 	0

			AccountID 	=	LoanObj.Account
			AccObj 		=	MKT_ACCOUNT.query.get(AccountID)
			if AccObj:
				Balance =	AccObj.AvailableBal

			if DepositID:
				AccEntryObj = MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Reference == DepositID).filter(MKT_ACC_ENTRY.Account == AccountID).first()
				if AccEntryObj:
					PrevBalance = AccEntryObj.PrevBalance
					CurrentBalance 	= AccEntryObj.Amount
				Balance = PrevBalance + CurrentBalance

			if float(Balance) <= 0:
				return {'error':'Currently account %s balance is %s.' %(AccountID, mktmoney.formatNumber(float(Balance), 2, 1))}

			# Checking Last Transaction in Account Entry to Define Pay By Option
			AccEntry 	=	MKT_ACC_ENTRY.query.\
							filter(MKT_ACC_ENTRY.Account == AccountID).\
							order_by(MKT_ACC_ENTRY.Authorizeon.desc()).\
							limit(1).\
							first()

			# Reference from Account Entry
			Reference 	=	""

			if AccEntry:
				Reference 	=	AccEntry.Reference
				# print "Account: %s - Reference: %s - Transaction: %s - Date: %s." %(AccEntry.Account, AccEntry.Reference, AccEntry.Transaction, AccEntry.TransactionDate)

			TransactionObj 	=	MKT_FUND_TRANSFER.query.\
									filter(MKT_FUND_TRANSFER.ID == Reference).\
									first()

			if TransactionObj:
				PaidBy 	=	'1'
			else:

				TransactionObj 	=	MKT_TELLER.query.\
									filter(MKT_TELLER.ID == Reference).\
									first()

				if TransactionObj:
					PaidBy 	=	"%s" %TransactionObj.CashType

			# Checking PD Records
			PDObj 		=	MKT_PAST_DUE.query.get("PD" + ID)
			if PDObj:

				PDDateObj 	=	MKT_PD_DATE.query.\
								filter(MKT_PD_DATE.ID == "PD" + ID).\
								order_by(MKT_PD_DATE.DueDate.asc()).\
								all()

				if PDDateObj:

					for item in PDDateObj:

						for row in RepOrder:

							if row == 'PE':

								if Balance >= item.OutPenAmount :
									Penalty 	+= 	float(item.OutPenAmount)
									Balance 	-=	item.OutPenAmount
								else:
									Penalty 	+= 	float(Balance)
									Balance 	=	0
								if DepositID:
									Deposit = getCollectionVoucherByAmountDeposit(PrevBalance,Penalty)
									PrevBalance = Deposit.get('Amount')
									Penalty 	= Deposit.get('Value')

							if row == 'CH':

								if Balance >= item.OutChgAmount :
									Charge 		+= 	float(item.OutChgAmount)
									Balance 	-=	item.OutChgAmount
								else:
									Charge 		+= 	float(Balance)
									Balance 	=	0
								if DepositID:
									Deposit = getCollectionVoucherByAmountDeposit(PrevBalance,Charge)
									PrevBalance = Deposit.get('Amount')
									Charge 	= Deposit.get('Value')

							if row == 'IN':

								if Balance >= item.OutIntAmount :
									Interest 	+= 	float(item.OutIntAmount)
									Balance 	-=	item.OutIntAmount
								else:
									Interest 	+= 	float(Balance)
									Balance 	=	0
								if DepositID:
									Deposit = getCollectionVoucherByAmountDeposit(PrevBalance,Interest)
									PrevBalance = Deposit.get('Amount')
									Interest 	= Deposit.get('Value')

							if row == 'PR':

								if Balance >= item.OutPriAmount :
									Principal 	+= 	float(item.OutPriAmount)
									Balance 	-=	item.OutPriAmount
								else:
									Principal 	+= 	float(Balance)
									Balance 	=	0
								if DepositID:
									Deposit = getCollectionVoucherByAmountDeposit(PrevBalance,Principal)
									PrevBalance = Deposit.get('Amount')
									Principal 	= Deposit.get('Value')

							if float(Balance) <= 0:
								break

						if float(Balance) <= 0:

							CollectionDate 	=	item.DueDate

							ScheduleObj =	MKT_REP_SCHEDULE.query.\
											filter(MKT_REP_SCHEDULE.CollectionDate == item.DueDate).\
											filter(MKT_REP_SCHEDULE.LoanID == ID).\
											first()

							if ScheduleObj:
								LastBalance 	=	ScheduleObj.Balance
								TwoDigit 		=	'%02d' %int(ScheduleObj.No)

							break
			if Balance > 0:

				ScheduleList =	MKT_REP_SCHEDULE.query.\
								filter(MKT_REP_SCHEDULE.RepStatus == '0').\
								filter(MKT_REP_SCHEDULE.LoanID == ID).\
								order_by(MKT_REP_SCHEDULE.CollectionDate.asc())
				if Limit == True:
					ScheduleList = ScheduleList.limit(1)
				ScheduleList = ScheduleList.all()


				if ScheduleList:
					for ScheduleObj in ScheduleList:
						for row in RepOrder:

							if row == 'CH':
								if Balance >= ScheduleObj.Charge :
									Charge 		+= 	float(ScheduleObj.Charge)
									Balance 	-=	ScheduleObj.Charge
								else:
									Charge 		+= float(Balance)
									Balance 	=	0
								if DepositID:
									Deposit = getCollectionVoucherByAmountDeposit(PrevBalance,Charge)
									PrevBalance = Deposit.get('Amount')
									Charge 		= Deposit.get('Value')

							if row == 'IN':
								if Balance >= ScheduleObj.Interest :
									Interest 	+= 	float(ScheduleObj.Interest)
									Balance 	-=	ScheduleObj.Interest
								else:
									Interest 	+= 	float(Balance)
									Balance 	=	0
								if DepositID:
									Deposit = getCollectionVoucherByAmountDeposit(PrevBalance,Interest)
									PrevBalance = Deposit.get('Amount')
									Interest 	= Deposit.get('Value')

							if row == 'PR':
								if Balance >= ScheduleObj.Principal :
									Principal 	+= 	float(ScheduleObj.Principal)
									Balance 	-=	ScheduleObj.Principal
								else:
									Principal 	+= 	float(Balance)
									Balance 	=	0
								if DepositID:
									Deposit = getCollectionVoucherByAmountDeposit(PrevBalance,Principal)
									PrevBalance = Deposit.get('Amount')
									Principal 	= Deposit.get('Value')

							if float(Balance) <= 0:
								break

						LastBalance 	=	ScheduleObj.Balance
						CollectionDate 	=	ScheduleObj.CollectionDate
						TwoDigit 		=	'%02d' %int(ScheduleObj.No)

			AccountBalance 	=	float(Balance)
			TotalBalance 	=	AccountBalance + Principal + Interest + Charge + Penalty + Insurance + Other
			
			if PaidBy:
				LabelPaidBy = PayOption.get(PaidBy) 
				Result.update({"PaidBy":LabelPaidBy})
			VoucherName = '%sLoanCollection'%mktuser.getCurrentBranch()
			VoucherID = ID + TwoDigit
			VoucherID = mktautoid.getVoucherRef(VoucherName,Reference)
			Result.update({"Balance":LastBalance})
			Result.update({"CollectionDate":CollectionDate})

			Result.update({"TotalBalance":TotalBalance})
			Result.update({"VoucherID":VoucherID})
			Result.update({"Customer":LoanObj.ContractCustomerID})
			Result.update({"Account":LoanObj.Account})
			Result.update({"NumberOfInstallment":TwoDigit})
			Result.update({"Currency":LoanObj.Currency})
			Result.update({"Principal":Principal})
			Result.update({"Interest":Interest})
			Result.update({"Charge":Charge})
			Result.update({"Penalty":Penalty})
			Result.update({"Insurance":Insurance})
			Result.update({"AccountBalance":AccountBalance})
			Result.update({"Other":Other})

		return Result
		
	except Exception, e:
		raise
		return {"error":"%s" %e}
def getCollectionVoucherByAmountDeposit(Amount, Value):
	try:
		Result = {}
		if Amount >= Value:
			Amount = float(Amount) - float(Value)
			Value = 0
		else:
			Value = float(Value) - float(Amount)
			Amount = 0
		Result.update({'Amount': Amount})
		Result.update({'Value': Value})

		return Result
	except Exception, e:
		raise
		return {"error":"%s" %e}

def setConcate(List,Delimiter=' '):
	""" The function using for concate field such as Fist Name or Last Name with delimiter(can be '/',',','.',']' ....)
	Example: 
		{{setConcate(['Morokot','Technology'] ,'/')}}
		 >>> Morakot/Technology
	"""
	List = filter(None, [row for row in List if row != ' '])
	return Delimiter.join(List)

def setCompose(**kwargs):

	To 		= kwargs.get('To','')
	Cc 		= kwargs.get('Cc','')
	Bcc 	= kwargs.get('Bcc','')
	Subject = kwargs.get('Subject','')
	Message = kwargs.get('Message','')

	html = """
		<div class="modal fade" id="getCustomRange" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<form class="form-horizontal" method="POST">
						<div class="modal-header">
							<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
							<h4 class="modal-title" id="exampleModalLabel">New Message</h4>
						</div>
						<div class="modal-body">
							<div class="form-group">
								<label for="To" class="col-sm-3 control-label">To:</label>
								<div class="col-sm-8">
									<input name="To" class="input-sm form-control" style="width: 100%;" value='"""+To+"""'>
								</div>
							</div>
							<div class="form-group">
								<label for="Cc" class="col-sm-3 control-label">Cc:</label>
								<div class="col-sm-8">
									<input name="Cc" class="input-sm form-control" style="width: 100%;" value='"""+Cc+"""'>
								</div>
							</div>
							<div class="form-group">
								<label for="Bcc" class="col-sm-3 control-label">Bcc:</label>
								<div class="col-sm-8">
									<input name="Bcc" class="input-sm form-control" style="width: 100%;" value='"""+Bcc+"""'>
								</div>
							</div>
							<div class="form-group">
								<label for="Subject" class="col-sm-3 control-label">Subject:</label>
								<div class="col-sm-8">
									<input name="Subject" class="input-sm form-control" style="width: 100%;" value='"""+Subject+"""'>
								</div>
							</div>
							<div class="form-group">
								<label for="Message" class="col-sm-3 control-label">Message:</label>
								<div class="col-sm-8">
									<textarea name="Message" class="md-textarea form-control" rows="3" style="width: 100%;"></textarea>
								</div>
							</div>
						</div>
						<div class="modal-footer">
							<button type="submit" class="btn btn-primary" id="Send" name="Send" onclick=fn_fadeIn();>Send</button>
							<button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
						</div>
					</form>
				</div>
			</div>
		</div>
		<div id="splitcontent"> </div>
	"""
	return html