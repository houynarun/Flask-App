from .. 							import app, db
from flask 							import redirect, flash, render_template, url_for, request
from app.mktcore.imports 			import *
from .forms 						import *
from app.Customer.models 			import MKT_CUSTOMER,MKT_CUSTOMER_INAU
from app.Collateral.models 			import MKT_COLLATERAL, MKT_COLLATERAL_DE,MKT_COLLATERAL_DE_INAU
from app.CollateralType.models 		import MKT_COLLATERAL_TYPE
from app.LoanApplication.models 	import MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION_INAU
from app.LoanContract.models 		import MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT_INAU
from werkzeug 						import secure_filename
import hashlib
import os, sys
import app.tools.mktdate 			as mktdate
import app.tools.mktaudit 			as mktaudit
import app.tools.mktsetting     as mktsetting

from flask import send_from_directory
#Blog import core
import app.tools.mktautoid 			as mktautoid
from app.mktcore.customform 		import *


'''
This list is value list of type in Document module 
	CU 			= 	Value of selectbox Type
	Customer 	=	Text of selectbox Type
	CUSTOMER_LINK 	= 	Link to Customer Module, used for click on link (Reference) and open its module
'''

ExtendClass 			= 	mktsetting.ExtendModule()
	
CUSTOMER_LINK  			=	ExtendClass.getUrlExtend(Module="Customer")
COLLATERAL_DE_LINK		=	ExtendClass.getUrlExtend(Module="CollateralDetail")
LOAN_APPLICATION_LINK	=	ExtendClass.getUrlExtend(Module="LoanApplication")
LOAN_CONTRACT_LINK 		=	ExtendClass.getUrlExtend(Module="LoanContract")
DOCUMENT_LINK 			=	ExtendClass.getUrlExtend(Module="Document")


TYPE_LIST 				=	[("CU","Customer",CUSTOMER_LINK),
							 ("CRH","Collateral",COLLATERAL_DE_LINK),
							 ("LA","Loan Application",LOAN_APPLICATION_LINK),
							 ("LC","Loan Contract",LOAN_CONTRACT_LINK),
							 ("OT", "Other",DOCUMENT_LINK)]

def allowed_file(filename):
	AttachmentAllowExtension 	=	mktsetting.getAppSetting('AttachmentAllowExtension').split()
	if not AttachmentAllowExtension:
		AttachmentAllowExtension = 	app.config.get('ALLOWED_ATTACHMENT')

	return '.' in filename and str(filename.rsplit('.', 1)[1]).lower() in AttachmentAllowExtension

@app.route('/Morakot/Document/View/<path:filename>')
@checkLogOutSession
@checkLogOutTime
def custom_attachment(filename):

	AttachmentFolder 	=	mktsetting.getAppSetting('AttachmentFolder') if mktsetting.getAppSetting('AttachmentFolder') else app.config.get('ATTACHMENT_FOLDER')
	StaticPath 			= 	AttachmentFolder
	StaticFile 			= 	send_from_directory(StaticPath, filename)
	
	return StaticFile

class CLS_GetDocument(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation

	def checkAccessRight(self):
		self.form = FRM_DOCUMENT
		getCheck = checkAccess("/Morakot/Document/","Search")
		return getCheck

	def globalProcess(self):
		
		try:
			AccessRightDict  = {}
			AccessRightDict.update({"New": checkAccess("/Morakot/Document/","New")})
			AccessRightDict.update({"Edit": checkAccess("/Morakot/Document/","Edit")})
			AccessRightDict.update({"Delete": checkAccess("/Morakot/Document/","Delete")})
			AccessRightDict.update({"View": checkAccess("/Morakot/Document/","Search")})

			AttachmentOptionDict = {}

			AttachementAllowSize  = mktsetting.getAppSetting('AttachementAllowSize')
			if AttachementAllowSize:
				AttachementAllowSize = float(AttachementAllowSize) * 1024 *1024
			else:
				AttachementAllowSize = 5 * 1024 *1024	

			AttachmentAllowExtension  = mktsetting.getAppSetting('AttachmentAllowExtension')
			if not AttachmentAllowExtension:
				AttachmentAllowExtension = ""
				for extension in app.config.get('ALLOWED_ATTACHMENT'):
					if AttachmentAllowExtension:
						AttachmentAllowExtension = "%s %s" % (AttachmentAllowExtension, extension)
					else:
						AttachmentAllowExtension = "%s" % (extension)


			AttachmentOptionDict.update({"AttachementAllowSize": AttachementAllowSize,
										 "AttachmentAllowExtension": AttachmentAllowExtension})

			AttachmentDefaultView = mktsetting.getAppSetting('AttachmentDefaultView')
			if not AttachmentDefaultView:
				AttachmentDefaultView = '1'

			AttachmentOptionDict.update({"AttachmentDefaultView": AttachmentDefaultView})
		
			
			ID 				=	request.args.get('ID') if 'ID' in request.args else ""
			Add 			=	request.args.get('Add') if 'Add' in request.args else ""		

			DocumentObj 	=	""
			Description 	=	request.args.get('Description') if 'Description' in request.args else ""
			Type 		 	=	request.args.get('Type') if 'Type' in request.args else ""
			Reference 	 	=	request.args.get('Reference') if 'Reference' in request.args else ""

			AT 				=	request.args.get('AT') if 'AT' in request.args else ""
			Trash 			=	request.args.get('Trash') if 'Trash' in request.args else 'N'
			Link 			=	""
			DocumentType 	=	""

			IncludeINAU 	=	mktsetting.getAppSetting('INCLUDE_INAU')
			if not IncludeINAU:
				IncludeINAU = 	"N"

			CustomerObj 	=	MKT_CUSTOMER.query.get(ID)

			if IncludeINAU == "Y":
				if not CustomerObj:
					CustomerObj = MKT_CUSTOMER_INAU.query.get(ID)

			if request.args and not CustomerObj:
				flash(msg_warning + "Customer %s not found." %ID)
			else:
				if Trash == 'Y':

					DocumentObj 	=	db.session.query(
											MKT_DOCUMENT_HIST.ID,
											MKT_DOCUMENT_HIST.Description,
											MKT_DOCUMENT_HIST.DocumentType,
											MKT_DOCUMENT_HIST.Link,
											MKT_DOCUMENT_HIST.CustomerID,
											MKT_DOCUMENT_HIST.Type,
											MKT_DOCUMENT_HIST.Reference,
											MKT_DOCUMENT_HIST.Createdon,
											MKT_DOCUMENT_HIST.Inputter
										).\
										filter(MKT_DOCUMENT_HIST.CustomerID == ID)

				else:
					DocumentObj 	=	db.session.query(
											MKT_DOCUMENT.ID,
											MKT_DOCUMENT.Description,
											MKT_DOCUMENT.DocumentType,
											MKT_DOCUMENT.Link,
											MKT_DOCUMENT.CustomerID,
											MKT_DOCUMENT.Type,
											MKT_DOCUMENT.Reference,
											MKT_DOCUMENT.Createdon,
											MKT_DOCUMENT.Inputter
										).\
										filter(MKT_DOCUMENT.CustomerID == ID)			

				if AT:

					if Trash == 'Y':
						DocumentObj 	=	DocumentObj.\
											filter(MKT_DOCUMENT_HIST.ID == AT).\
											first()
					else:
						DocumentObj 	=	DocumentObj.\
											filter(MKT_DOCUMENT.ID == AT).\
											first()

					if DocumentObj:
						Description 	=	DocumentObj.Description
						Link 			=	DocumentObj.Link
						DocumentType 	=	DocumentObj.DocumentType
						Type 		 	=	DocumentObj.Type
						Reference 	 	=	DocumentObj.Reference

					else:
						flash(msg_warning + "Document %s not found." %AT)

				else:
					DocumentObj 	=	DocumentObj.\
										all()

			#Custom Form

			BodyDict 		   = {}
			self.customButton  = {'title':getLanguage('Show'),'type':'Hidden','method':'get','url':'/Document/?ID=CustomerID','param':['CustomerID'],'icon':'','type_url':'Custom','color':'#1b80c2'}
			self.customToolBar = ['BlankList']
			setattr(FRM_DOCUMENT,'GetCustomerDocument' , RemoteTextField('Customer ID' , default=ID))

			if Add == 'Y':
				self.customToolBar = [
					{'title':'Save','type':'Button','method':'postDoc','url':'/Document/Upload/','param':[],'icon':'floppy-o','type_url':'Custom','color':''},
					{'title':'Cancel','type':'Button','method':'get','url':'/Document/?ID=%s'%ID,'param':[],'icon':'undo','type_url':'Custom','color':''}
				]
			else:
				def setVisible(self):
					return ['CustomerID','DocumentType','Description','Reference','Link','Type']
				setattr(FRM_DOCUMENT,'setVisible' , setVisible)
							

				if CustomerObj:
					self.customButton 	= {}	
					self.customToolBar 	= []
					if AccessRightDict.get("New") == True:
						self.customToolBar.append({'title':'Upload Document','type':'Button','method':'get','url':'/Document/?ID=%s&Add=Y'%ID,'param':[],'icon':'upload','type_url':'Custom','color':''}
						)
					if Trash == "Y":
						self.customToolBar.append({'title':'Back','type':'Button','method':'get','url':'/Document/?ID=%s'%ID,'param':[],'icon':'undo','type_url':'Custom','color':''}
						)
					else:
						self.customToolBar.append({'title':'History Files','type':'Button','method':'get','url':'/Document/?ID=%s&Trash=Y'%ID,'param':[],'icon':'undo','type_url':'Custom','color':''}
						)
			
			if CustomerObj:
				self.customButton = {}
				self.customType   = 'Custom'
				def setVisible(self):
					return ['All']
				setattr(FRM_DOCUMENT,'setVisible' , setVisible)
				if  Add == 'Y':					
					def setVisible(self):
						return ['CustomerID','DocumentType','GetCustomerDocument']
					ReferenceChoice = [('__None','--None--')]
					if Reference == '':
						Reference = ID
					GetType = []
					for typeItem in TYPE_LIST:
						GetType.append((typeItem[0],typeItem[1]))
					ReferenceChoice.append((Reference,Reference))
					setattr(FRM_DOCUMENT,'setVisible' , setVisible)
					setattr(FRM_DOCUMENT,'Description' , TextField('Description' , default=Description))
					setattr(FRM_DOCUMENT,'DocumentType' , TextField('Document Type' , default=DocumentType))
					setattr(FRM_DOCUMENT,'Type' , SelectField('Type' , choices=GetType,
							 										   coerce=str ,default=Type))
					DocumentLink = ''
					if Link:
						DocumentLink=url_for('custom_attachment',filename=Link)
					setattr(FRM_DOCUMENT,'Reference',SelectField(getLanguage('Reference'),choices=ReferenceChoice,default=Reference))
					setattr(FRM_DOCUMENT,'Link' , DocumentField('Browse File (png , jpeg , jpg , gif , pdf , doc , docx , xls , xlsx )',default=DocumentLink))
					
				else:
					if DocumentObj:
						DocumentList = []
						DocumentDict = {}
						BodyList 	 = []
						NameBody = 'Uploaded Files'
						if Trash == 'Y':
							NameBody = 'History Files'

						first_index = 0
						for item in DocumentObj:
							TypeValue 	= ''
							url 		= ''
							ActionUrl = []
							for itemType in TYPE_LIST:
								if itemType[0] == item.Type:
									TypeValue 		= itemType[1]
									ReferenceURL 	= '/%s/?ID=%s'%(itemType[2],item.Reference)
									url = {'url':ReferenceURL,'type_url':'Form','icon':'th-list'}
									ActionUrl.append(url)
							if Trash == 'Y':
								if AccessRightDict.get("Delete") == True:
									RemoveURL = {'url':"/Document/Remove/?RemoveID=" + item.ID + "&ID=" + ID + "&Link=" + item.Link,'type_url':'Custom','icon':'trash-o','color':''}
									ActionUrl.append(RemoveURL)
								if AccessRightDict.get("Edit") == True:
									RestoreURL = {'url':"/Document/Restore/?RestoreID=" + item.ID  + "&ID=" + ID,'type_url':'Custom','icon':'undo' , 'color':''}
									ActionUrl.append(RestoreURL)
							else:
								ViewURL = {'url':url_for('custom_attachment', filename=item.Link),'type_url':'Link' ,'color':'','icon':''}
								ActionUrl.append(ViewURL)
								if AccessRightDict.get("Edit") == True :
									EditUrl 	= {'url':'/Document/?ID=%s&Add=Y&AT=%s'%(ID,item.ID),'type_url':'Custom','icon':'pencil'}
									# self.redirectURL = ['/Document/?ID=%s&Add=Y&AT=%s'%(ID,item.ID),'MainCustom']
									ActionUrl.append(EditUrl)
								if AccessRightDict.get("Delete") == True:
									DeleteUrl 	= {'url':"/Document/Delete/?DeleteID=" + item.ID + "&ID=" + ID,'type_url':'Custom','icon':'trash-o','color':''}
									ActionUrl.append(DeleteUrl)

							GetDocumentID 			=	{'key':'ID'			 ,	'value':item.ID}
							DocumentDescription 	=	{'key':'Description' ,	'value':item.Description}
							DocumentType 			=	{'key':'Type'		 ,	'value':TypeValue}
							DocumentReference 		=	{'key':'Reference'	 ,	'value':item.Reference}
							DocumentInputter		=	{'key':'Inputter'	 ,	'value':item.Inputter} 
							DocumentCreatedon		=	{'key':'Createdon'	 ,	'value':item.Createdon} 
							Column 					= 	[GetDocumentID,DocumentDescription,DocumentType,DocumentReference,DocumentInputter,DocumentCreatedon]
							
							ImpID 					=	{'key':'ID'	, 'value':[{'key':'ID','value':item.ID},{'key':'Date','value':item.Createdon}]}
							ImpInfo 				=	{'key':'Infomation'	,	'value':[
																					{'key':'Type','value':item.Type},
																					{'key':'Inputter','value':item.Inputter}
																					]}
							ImpCreateOn 			=	{'key':'Created Date'	, 'value':[{'key':'Desc','value':item.Description}]}

							# ImportantField  		=	[GetDocumentID,DocumentDescription,DocumentCreatedon]
							ImportantField  		=	[ImpID,ImpInfo,ImpCreateOn]

							DocumentList.append({'columns':Column,'urls':ActionUrl,'important':ImportantField})
							first_index += 1

						DocumentDict.update({
										'icon':'','name':NameBody,'title':'Uploaded Files','type':'Table','data':DocumentList,'most_data':True,'expand':False
									   })
						BodyList.append(DocumentDict)


						BodyDict.update({
							'header':[],'data':BodyList
							})				
				


			self.form 		= FRM_DOCUMENT
			self.recordID 	= AT if AT else ID
			self.body 		= BodyDict
			self.header		= 'Document'
			AT 				= AT if AT else ID
			self.kwargs 	= {
						'ID' 					:	ID,
						'DocumentObj' 			:	DocumentObj,
						'CustomerObj' 			:	CustomerObj,
						'Add' 					:	Add,
						'Description' 			:	Description,
						'DocumentID' 			:	AT,
						'Link' 					:	Link,
						'DocumentType' 			:	DocumentType,
						'Trash' 				:	Trash,
						'TypeList' 				:	TYPE_LIST,
						'Type' 					:	Type,
						'Reference'       		:	Reference,
						'AccessRightDict' 		: 	AccessRightDict,
						'AttachmentOptionDict'	:	AttachmentOptionDict
					}
			return True
		except Exception, e:
			raise

class CLS_PostDocument(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation

	def globalProcess(self):
		try:
			ErrorMsg    = []
			getCheck = checkAccess ("/Morakot/Document/","New")
			if getCheck != True:
				ErrorMsg.append(msg_error+msg_permission)
				return render_template("permission.html",ErrorMsg=ErrorMsg)

			file 			= 	request.files['file'] if 'file' in request.files else None
			Description 	=	request.form['Description'] if 'Description' in request.form else ""
			CustomerID 		=	request.form['GetCustomerDocument'] if 'GetCustomerDocument' in request.form else ""
			Type  			=	request.form['Type'] if 'Type' in request.form else ""
			Reference  		=	request.form['Reference'] if 'Reference' in request.form else ""

			Branch 			=	session.get('ChangeBranch')
			Createdon 		=	mktdate.getDateTimeNow()
			Inputter 		=	session.get('getLogInID')
			ID 				=	request.form['ID']
			DocumentType 	=	""
			Link			=	""
			self.form = FRM_DOCUMENT

			#Check because core need ID
			#check if ID it mean edit and add dato to history 
			if ID == CustomerID:
				ID = ''


			AttachmentFolder=	mktsetting.getAppSetting('AttachmentFolder') 
			if not AttachmentFolder:		
				AttachmentFolder = app.config.get('ATTACHMENT_FOLDER')	

			if ID:
				mktaudit.moveAUTHtoHIST(MKT_DOCUMENT, MKT_DOCUMENT_HIST, ID)

			if not Description:
				flash(msg_warning + "Description is required.",'error')
				self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID,'MainCustom']
				return True
				# return redirect("/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID)

			if not Type:
				flash(msg_warning + "Type is required.",'error')
				self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID,'MainCustom']
				return True
				# return redirect("/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID)

			if not Reference:
				flash(msg_warning + "Reference is required.",'error')
				self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID,'MainCustom']
				return True
				# return redirect("/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID)

			if file:
				if allowed_file(file.filename):

					filename 	= secure_filename(file.filename)
					Original 	= filename.replace(".", '-')
					strName 	= filename.split(".")

					if strName[-1].upper() == 'PDF':
						DocumentType = 'PDF'
					else:
						DocumentType = 'Image'

					DateTimeNow 	= mktdate.getDateTimeNow()
					HashFileName 	= hashlib.sha224("%s-%s-%s" % (CustomerID,DocumentType,DateTimeNow)).hexdigest()
					Link 			= "%s.%s" %(HashFileName, strName[-1])
					# Link 		= "%s-%s.%s" %(CustomerID, DocumentType, strName[-1])

					try:
						
						# Check existing file
						Check 	=	False
						i 		= 	1

						while Check == False :
							
							if os.path.exists(AttachmentFolder + Link):

								HashFileName 	= hashlib.sha224("%s-%s-%s-%s" % (CustomerID,DocumentType,i,DateTimeNow)).hexdigest()
								Link 	= 	"%s.%s" %(HashFileName, strName[-1])
								i 		+= 	1

							else:

								Check 	=	True

						# Upload file to destination folder
						file.save(os.path.abspath(AttachmentFolder + Link))

					except Exception, e:
						flash(msg_warning + "%s" %e , 'error')
						self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID,'MainCustom']
						return True
						# return redirect("/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID)

				else:

					# if not ID:

					flash(msg_warning + "File extension not allow.",'error')
					self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID,'MainCustom']
					return True
					# return redirect("/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID)

			else:

				if not ID:
					flash(msg_warning + "Please select file before continue.",'error')
					self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID,'MainCustom']
					return True

					# return redirect("/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID)

			if ID:

				UpdateObj 	=	MKT_DOCUMENT.query.\
								filter(MKT_DOCUMENT.ID == ID).\
								first()

				if UpdateObj:

					Curr 					=	int(UpdateObj.Curr) + 1
					if not DocumentType:
						DocumentType 		=	UpdateObj.DocumentType

					UpdateObj.DocumentType 	=	DocumentType

					if Link:
						UpdateObj.Link 		=	Link

					UpdateObj.Description 	=	Description
					UpdateObj.Type 		 	=	Type
					UpdateObj.Reference 	=	Reference
					UpdateObj.Curr 			=	Curr
					UpdateObj.Inputter 		=	Inputter
					UpdateObj.Createdon 	=	Createdon
					UpdateObj.Authorizer 	=	Inputter
					UpdateObj.Authorizeon	=	Createdon

					db.session.add(UpdateObj)

				else:
					flash(msg_warning + "Document %s not found." %ID)
					self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID , 'MainCustom']
					return True
					# return redirect("/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID)
			
			else:

				ID 	= str(mktautoid.setAutoID("DOC", 5, "MKT_DOCUMENT"))
				# Insert Document Object
				InsertObj 	=	MKT_DOCUMENT(
									ID 				=	ID,
									CustomerID 		=	CustomerID,
									DocumentType 	=	DocumentType,
									Description 	=	Description,
									Link 			=	Link,
									Type 			=	Type,
									Reference 		=	Reference,
									Curr 			=	'0',
									Status 			=	'AUTH',
									Branch 			=	Branch,
									Inputter 		=	Inputter,
									Createdon 		=	Createdon,
									Authorizer 		=	Inputter,
									Authorizeon 	=	Createdon
								)

				db.session.add(InsertObj)

			# Commit Insert or Update Object
			db.session.commit()
			flash("Record was added successfully, record id: %s" %ID)
			self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID , 'Custom']
			return True
			# return redirect("/Morakot/Document/?ID=" + CustomerID)

		except Exception, e:
			db.session.rollback()
			flash(msg_warning + "%s" %e)
			self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID , 'MainCustom']

			return True
			# return redirect("/Morakot/Document/?ID=" + CustomerID + "&Add=Y&Description=" + Description + "&Type="+ Type + "&Reference="+ Reference +"&AT=" + ID)

class CLS_DeleteDocument(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation

	def globalProcess(self):
		try:
			ErrorMsg    = []
			getCheck = checkAccess ("/Morakot/Document/","Delete")
			if getCheck != True:
				ErrorMsg.append(msg_error+msg_permission)
				return render_template("permission.html",ErrorMsg=ErrorMsg)

			ID 			=	request.args.get('DeleteID')
			CustomerID 	=	request.args.get('ID') if 'ID' in request.args else ""

			# Move record to history file
			mktaudit.moveAUTHtoHIST(MKT_DOCUMENT, MKT_DOCUMENT_HIST, ID)
			
			# Delete live record
			mktaudit.deleteAUTH(MKT_DOCUMENT, ID)

			db.session.commit()
			flash("Document was successfully deleted.")
			self.form = FRM_DOCUMENT
			self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID , 'Custom']
			return True

		except Exception, e:
			raise

class CLS_RestoreDocument(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation

	def globalProcess(self):
		try:
			ErrorMsg    = []
			getCheck = checkAccess ("/Morakot/Document/","Edit")
			if getCheck != True:
				ErrorMsg.append(msg_error+msg_permission)
				return render_template("permission.html",ErrorMsg=ErrorMsg)

			ID 			=	request.args.get('RestoreID')
			CustomerID 	=	request.args.get('ID') if 'ID' in request.args else ""

			# Query object in history file
			HistObj 	=	MKT_DOCUMENT_HIST.query.\
							filter(MKT_DOCUMENT_HIST.ID == ID).\
							first()

			if HistObj:

				Branch 		=	HistObj.Branch
				Curr 		=	int(HistObj.Curr) + 1
				Inputter 	=	HistObj.Inputter
				Createdon 	=	HistObj.Createdon
				Link 		=	HistObj.Link
				Description =	HistObj.Description
				DocumentType=	HistObj.DocumentType
				Type        =	HistObj.Type
				Reference   =	HistObj.Reference
				CustomerID 	=	HistObj.CustomerID

				ATID 		=	str(ID).split('@')
				ExistingObj =	MKT_DOCUMENT.query.\
								filter(MKT_DOCUMENT.ID == ATID[0]).\
								first()

				if ExistingObj:

					ExistingObj.DocumentType 	=	DocumentType
					ExistingObj.Link 			=	Link
					ExistingObj.Description 	=	Description
					ExistingObj.Type  		 	=	Type
					ExistingObj.Reference    	=	Reference
					ExistingObj.Curr 			=	Curr
					ExistingObj.Inputter 		=	Inputter
					ExistingObj.Createdon 		=	Createdon
					ExistingObj.Authorizer 		=	Inputter
					ExistingObj.Authorizeon		=	Createdon

					db.session.add(ExistingObj)

				else:

					InsertObj 	=	MKT_DOCUMENT(
										ID 				=	ATID[0],
										CustomerID 		=	CustomerID,
										DocumentType 	=	DocumentType,
										Description 	=	Description,
										Link 			=	Link,
										Type 			=	Type,
										Reference 		=	Reference,
										Curr 			=	Curr,
										Status 			=	'AUTH',
										Branch 			=	Branch,
										Inputter 		=	Inputter,
										Createdon 		=	Createdon,
										Authorizer 		=	Inputter,
										Authorizeon 	=	Createdon
									)

					db.session.add(InsertObj)

			db.session.commit()

			flash("Document was successfully restored.")
			self.form = FRM_DOCUMENT
			self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID , 'Custom']
			return True

		except Exception, e:
			print e
			raise

class CLS_RemoveDocument(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation

	def globalProcess(self):
		try:
			ErrorMsg    = []
			getCheck = checkAccess ("/Morakot/Document/","Delete")
			if getCheck != True:
				ErrorMsg.append(msg_error+msg_permission)
				return render_template("permission.html",ErrorMsg=ErrorMsg)

			ID 			=	request.args.get('RemoveID') 
			CustomerID 	=	request.args.get('ID') if 'ID' in request.args else ""
			Link 		=	request.args.get('Link') if 'Link' in request.args else ""

			AttachmentFolder=	mktsetting.getAppSetting('AttachmentFolder') 
			if not AttachmentFolder:		
				AttachmentFolder = app.config.get('ATTACHMENT_FOLDER')

			# Delete live record
			mktaudit.deleteAUTH(MKT_DOCUMENT_HIST, ID)
			if os.path.exists(AttachmentFolder + Link):
				# Check live record
				DocumentObj = 	MKT_DOCUMENT.query.\
								filter(MKT_DOCUMENT.Link == Link).\
								all()

				if not DocumentObj:
					# Delete file from directory
					os.remove(os.path.abspath(AttachmentFolder + Link))

			db.session.commit()

			flash("Document was successfully deleted from history.")
			self.form = FRM_DOCUMENT
			self.redirectURL = ["/Morakot/Document/?ID=" + CustomerID + "&Trash=Y",'Custom']
			return True

		except Exception, e:
			raise

class CLS_ViewDocument(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation

	def globalProcess(self):
		try:
			ErrorMsg    = []
			getCheck = checkAccess ("/Morakot/Document/","Search")
			if getCheck != True:
				ErrorMsg.append(msg_error+msg_permission)
				return render_template("permission.html",ErrorMsg=ErrorMsg)
			
			ID 				=	request.args.get('ID') if 'ID' in request.args else ""
			ATID 			=	request.args.get('ATID') if 'ATID' in request.args else ""
			Type 			=	request.args.get('Type') if 'Type' in request.args else ""
			TypeList 		=	Type.split()
			Reference		=	request.args.get('Reference') if 'Reference' in request.args else ""

			IncludeINAU 	=	mktsetting.getAppSetting('INCLUDE_INAU')
			if not IncludeINAU:
				IncludeINAU = 	"N"

			DocumentObj     =	""
			#Attach ID for showing which id should show first
			FirstIndex 		=	request.args.get('FirstIndex') if 'FirstIndex' in request.args else '0'

			if '@' not in ATID:

				DocumentObj 	=	db.session.query(
											MKT_DOCUMENT.ID,
											MKT_DOCUMENT.Description,
											MKT_DOCUMENT.DocumentType,
											MKT_DOCUMENT.Link,
											MKT_DOCUMENT.CustomerID,
											MKT_DOCUMENT.Createdon,
											MKT_DOCUMENT.Inputter
										)

				if ID:
					DocumentObj     = 	DocumentObj.\
										filter(MKT_DOCUMENT.CustomerID == ID)
				if ATID:
					DocumentObj 	=	DocumentObj.\
										filter(MKT_DOCUMENT.ID == ATID)		

				if Type:
					DocumentObj 	=	DocumentObj.\
										filter(MKT_DOCUMENT.Type.in_(TypeList))
				if Reference:
					DocumentObj 	=	DocumentObj.\
										filter(MKT_DOCUMENT.Reference==Reference)
			else:

				DocumentObj 	=	db.session.query(
											MKT_DOCUMENT_HIST.ID,
											MKT_DOCUMENT_HIST.Description,
											MKT_DOCUMENT_HIST.DocumentType,
											MKT_DOCUMENT_HIST.Link,
											MKT_DOCUMENT_HIST.CustomerID,
											MKT_DOCUMENT_HIST.Createdon,
											MKT_DOCUMENT_HIST.Inputter
										)

				if ID:
					DocumentObj     = 	DocumentObj.\
										filter(MKT_DOCUMENT.CustomerID == ID)

				if ATID:
					DocumentObj 	=	DocumentObj.\
										filter(MKT_DOCUMENT_HIST.ID == ATID)

				if Type:
					DocumentObj 	=	DocumentObj.\
										filter(MKT_DOCUMENT_HIST.Type.in_(TypeList))
				if Reference:
					DocumentObj 	=	DocumentObj.\
										filter(MKT_DOCUMENT_HIST.Reference==Reference)

			DocumentObj 	=	DocumentObj.\
								all()

			ViewDocumentBody = []
			for row in DocumentObj:
				ViewDocumentBody.append(row.Link)
			self.body = {'header':[] , 'data':ViewDocumentBody}
			self.kwargs = {'ID':ID,'DocumentObj':DocumentObj,'FirstIndex':FirstIndex}
			self.recordID = ID
			self.form = FRM_DOCUMENT
			return True
			

		except Exception, e:
			raise


@app.route("/Morakot/ReferenceID/", methods=['GET'])
@app.route("/Morakot/API/ReferenceID/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getReferenceID():
	try:
		CustomerID 	 	=	request.args.get('ID') if 'ID' in request.args else ""
		Type 			=	request.args.get('Type') if 'Type' in request.args else ""

		IncludeINAU 	=	mktsetting.getAppSetting('INCLUDE_INAU')
		if not IncludeINAU:
			IncludeINAU = 	"N"

		FilterCondition 	= []
		NAMES 				= []
		Obj                 = ''
		FreeText 			= "N"

		if Type == "CU":	
			Obj = MKT_CUSTOMER.query.\
									filter(MKT_CUSTOMER.ID==CustomerID)

			if IncludeINAU == "Y":
				if not Obj.all():
					Obj = MKT_CUSTOMER_INAU.query.\
									filter(MKT_CUSTOMER_INAU.ID==CustomerID)

			if Obj.all():
				for row in Obj:
					dic = {"id":row.ID, "text":row.ID + " - " + row.LastNameEn + " " + row.FirstNameEn }
					NAMES.append(dic)	

		if Type == "CRH":	
			Obj = 	db.session.query(MKT_COLLATERAL.ID,
										MKT_COLLATERAL.Description.label('CollateralDesc'),
										MKT_COLLATERAL_DE.ID.label('CollateralDEID'),
										MKT_COLLATERAL_DE.CollateralType,
										MKT_COLLATERAL_TYPE.ID.label('CollateralTypeID'),
										MKT_COLLATERAL_TYPE.Description.label('CollateralTypeDesc'),
									).\
									join(
										MKT_COLLATERAL_DE, 
										MKT_COLLATERAL_DE.CollateralID == MKT_COLLATERAL.ID
									).\
									join(
										MKT_COLLATERAL_TYPE, 
										MKT_COLLATERAL_TYPE.ID == MKT_COLLATERAL_DE.CollateralType
									).\
									filter(MKT_COLLATERAL.CustomerID==CustomerID)			
			
			if Obj.all():
				for row in Obj:
					dic = {"id":row.CollateralDEID, "text":row.ID + " - " + row.CollateralDEID + " - " + row.CollateralTypeDesc }
					NAMES.append(dic)

			if IncludeINAU == "Y":
				INAUObj = 	db.session.query(MKT_COLLATERAL.ID,
										MKT_COLLATERAL.Description.label('CollateralDesc'),
										MKT_COLLATERAL_DE_INAU.ID.label('CollateralDEID'),
										MKT_COLLATERAL_DE_INAU.CollateralType,
										MKT_COLLATERAL_TYPE.ID.label('CollateralTypeID'),
										MKT_COLLATERAL_TYPE.Description.label('CollateralTypeDesc'),
									).\
									join(
										MKT_COLLATERAL_DE_INAU, 
										MKT_COLLATERAL_DE_INAU.CollateralID == MKT_COLLATERAL.ID
									).\
									join(
										MKT_COLLATERAL_TYPE, 
										MKT_COLLATERAL_TYPE.ID == MKT_COLLATERAL_DE_INAU.CollateralType
									).\
									filter(MKT_COLLATERAL.CustomerID==CustomerID)

				if INAUObj.all():
					for row in INAUObj:
						dic = {"id":row.CollateralDEID, "text":row.ID + " - " + row.CollateralDEID + " - " + row.CollateralTypeDesc }
						NAMES.append(dic)	


		if Type == "LA":	
			Obj = MKT_LOAN_APPLICATION.query.\
									filter(MKT_LOAN_APPLICATION.LNCustomerID==CustomerID)
			if Obj.all():
				for row in Obj:
					dic = {"id":row.ID, "text":row.ID }
					NAMES.append(dic)	

			if IncludeINAU == "Y":
				INAUObj = 	MKT_LOAN_APPLICATION_INAU.query.\
									filter(MKT_LOAN_APPLICATION_INAU.LNCustomerID==CustomerID)

				if INAUObj.all():
					for row in INAUObj:
						dic = {"id":row.ID, "text":row.ID }
						NAMES.append(dic)	

		if Type == "LC":	
			Obj = MKT_LOAN_CONTRACT.query.\
									filter(MKT_LOAN_CONTRACT.ContractCustomerID==CustomerID)

			if Obj.all():
				for row in Obj:
					dic = {"id":row.ID, "text":row.ID }
					NAMES.append(dic)

			if IncludeINAU == "Y":
				INAUObj = 	MKT_LOAN_CONTRACT_INAU.query.\
									filter(MKT_LOAN_CONTRACT_INAU.ContractCustomerID==CustomerID)

				if INAUObj.all():
					for row in INAUObj:
						dic = {"id":row.ID, "text":row.ID }
					NAMES.append(dic)	

		if Type == "OT":
			FreeText = "Y"
		DataDict = {}
		for row in NAMES:
			DataDict.update({
				row['id']:row['text']
				})

		return jsonify(results=DataDict,items = NAMES,FreeText=FreeText)

	except Exception, e:
		raise

registerCRUD(admin, '/Document', 'Document',FRM_DOCUMENT, [MKT_DOCUMENT],template="customer/document.html",form_type='MainCustom',custom_form_data=CLS_GetDocument)	
registerCRUD(admin, '/Document/Upload', 'DocumentUplaod',FRM_DOCUMENT, [MKT_DOCUMENT],form_type='Custom',custom_form_data=CLS_PostDocument)	
registerCRUD(admin, '/Document/Delete', 'DeleteDocument',FRM_DOCUMENT, [MKT_DOCUMENT],form_type='Custom',custom_form_data=CLS_DeleteDocument)
registerCRUD(admin, '/Document/Restore', 'RestoreDocument',FRM_DOCUMENT, [MKT_DOCUMENT],form_type='Custom',custom_form_data=CLS_RestoreDocument)	
registerCRUD(admin, '/Document/Remove', 'RemoveDocument',FRM_DOCUMENT, [MKT_DOCUMENT],form_type='Custom',custom_form_data=CLS_RemoveDocument)	
registerCRUD(admin, '/View/Document', 'ViewDocument',FRM_DOCUMENT, [MKT_DOCUMENT],template='api/api_document.html',form_type='Custom',custom_form_data=CLS_ViewDocument)	