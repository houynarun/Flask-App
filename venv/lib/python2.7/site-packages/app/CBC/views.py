# -*- coding: utf-8 -*-
from app.mktcore.imports 		import *
from .forms 					import *
from flask 						import  make_response,Response,Markup,request
from decimal 					import *
from .models 					import *
from app.Customer.models 		import *
from app.LoanApplication.models import *
from app.LoanContract.models 	import *
from app.IdType.models 			import *
from app.LoanContract.models 	import *
from app.Province.models 		import *
from app.District.models 		import *
from app.Village.models 		import *
from app.Commune.models 		import *
from app.RepaymentSchedule.models import *
from app.PD.models 				import *
from app.Position.models 		import *
from app.Country.models 		import *
from app.Collateral.models 		import *
from app.Currency.models 		import MKT_CURRENCY
from app.LoanAmendment.models 	import MKT_LOAN_AMENDMENT
from app.Setting.models 		import MKT_APP_SETTING
from app.CBCAction.models 		import *
from operator 					import itemgetter
from app.AccEntry.models 		import *
from app.AssetClass.models 		import *
from app.CBC.loanwriteoff 		import CBCLoanWriteOff


from datetime  import datetime
import app.tools.mktpdcollection as mktpdcollection
import app.tools.mktsetting 	as mktsetting
import app.tools.mkttool	 	as mkttool
import app.tools.mktmoney	 	as mktmoney
import app.tools.mktdb 			as mktdb
import app.tools.mktdate 		as mktdate
import xml.etree.cElementTree 	as ET
import collections
#DataUpload
import StringIO
import csv
import xlsxwriter
import json
import app.tools.mktsetting     as mktsetting
from datetime  import datetime 
from .headers import *
import socket
from app.CBC.loanwriteoff import CBCLoanWriteOff
from .functions 				import *
try:
	import requests
	from requests.auth import HTTPBasicAuth
except Exception, e:
	print "CBC Enquiry need install requests If you want use CBC please type: pip install requests"

registerCRUD(admin, '/CBC', 'CBC', FRM_CBC_DE, [MKT_CBC, MKT_CBC_DE])

# Declear for function getAccountType
CBCProvinceObj	= None
CBCDistrictObj 	= None
CBCCommuneObj 	= None
CBCScheduleObj 	= None
PDObj 			= None

# For XML CBC
try:
	# try to use cElementTree becuase it's 15 or 20 times faster than ElementTree
	import xml.etree.cElementTree as ElementTree
except ImportError:
	from xml.etree import ElementTree

class XmlDictObject(dict):
	"""
	Adds object like functionality to the standard dictionary.
	"""

	def __init__(self, initdict=None):
		if initdict is None:
			initdict = {}
		dict.__init__(self, initdict)
	
	def __getattr__(self, item):
		return self.__getitem__(item)
	
	def __setattr__(self, item, value):
		self.__setitem__(item, value)
	
	def __str__(self):
		if self.has_key('_text'):
			return self.__getitem__('_text')
		else:
			return ''

	@staticmethod
	def Wrap(x):
		"""
		Static method to wrap a dictionary recursively as an XmlDictObject
		"""

		if isinstance(x, dict):
			return XmlDictObject((k, XmlDictObject.Wrap(v)) for (k, v) in x.iteritems())
		elif isinstance(x, list):
			return [XmlDictObject.Wrap(v) for v in x]
		else:
			return x

	@staticmethod
	def _UnWrap(x):
		if isinstance(x, dict):
			return dict((k, XmlDictObject._UnWrap(v)) for (k, v) in x.iteritems())
		elif isinstance(x, list):
			return [XmlDictObject._UnWrap(v) for v in x]
		else:
			return x
		
	def UnWrap(self):
		"""
		Recursively converts an XmlDictObject to a standard dictionary and returns the result.
		"""

		return XmlDictObject._UnWrap(self)

def _ConvertDictToXmlRecurse(parent, dictitem):
	assert type(dictitem) is not type([])

	if isinstance(dictitem, dict):
		for (tag, child) in dictitem.iteritems():
			if str(tag) == '_text':
				parent.text = str(child)
			elif type(child) is type([]):
				# iterate through the array and convert
				for listchild in child:
					elem = ElementTree.Element(tag)
					print "elem",elem
					parent.append(elem)
					_ConvertDictToXmlRecurse(elem, listchild)
			else:                
				elem = ElementTree.Element(tag)
				parent.append(elem)
				_ConvertDictToXmlRecurse(elem, child)
	else:
		parent.text = str(dictitem)

def _ConvertXmlToDictRecurse(node, dictclass):
	nodedict = dictclass()

	if len(node.items()) > 0:
		"""
		if we have attributes, set them
		node.tiems()= get elements' attribute
		"""
		nodedict.update(dict(node.items()))
		# print 'first',(nodedict,len(node.items()))
		# print "nodedict",nodedict
	for child in node:
		# print "child",child #ouptut each element
		# recursively add the element's children
		newitem = _ConvertXmlToDictRecurse(child, dictclass)
		# print "newitem",type(newitem)
		# print "newitem",child
		if nodedict.has_key(child.tag):
			# found duplicate tag, force a list
			# child.tag = get element's name
			# print "child.tag",child.tag
			if type(nodedict[child.tag]) is type([]) :
				# append to existing list
				nodedict[child.tag].append(newitem)
			  #   with open('test.txt','a+') as f:
					# f.write("".join(newitem)+"\n")
			else:
				# convert to list
				nodedict[child.tag] = [nodedict[child.tag], newitem]
		else:
			# only one, directly set the dictionary
			nodedict[child.tag] = newitem

	if node.text is None: 
		text = ''
	else: 
		text = node.text.strip()
	
	if len(nodedict) > 0:            
		# if we have a dictionary add the text as a dictionary value (if there is any)
		if len(text) > 0:
			nodedict['_text'] = text
	else:
		# if we don't have child nodes or attributes, just set the text
		nodedict = text
	# print "nodedict",nodedict
	return nodedict 

def ConvertDictToXml(xmldict):
	"""
	Converts a dictionary to an XML ElementTree Element

	# you can assign the data as a dictionary
	print configdict['settings']['color']
	configdict['settings']['color'] = 'red'

	# or you can assign it like object attributes
	print configdict.settings.color
	configdict.settings.color = 'red'

	root = ConvertDictToXml(configdict)

	tree = ElementTree.ElementTree(root)
	tree.write('config.new.xml')
	"""

	roottag = xmldict.keys()[0]
	root = ElementTree.Element(roottag)
	_ConvertDictToXmlRecurse(root, xmldict[roottag])
	return root

def ConvertXmlToDict(root, dictclass=XmlDictObject):
	"""
	Converts an XML file or ElementTree Element to a dictionary

	Example

	from pprint import pprint
	configdict = ConvertXmlToDict('config.xml')
	pprint(configdict)

	# you can assign the data as a dictionary
	print configdict['settings']['color']

	# or you can assign it like object attributes
	print configdict.settings.color
	"""

	# If a string is passed in, try to open it as a file
	if type(root) == type(''):
		root = ElementTree.fromstring(root)
	elif not isinstance(root, ElementTree.Element):
		raise TypeError, 'Expected ElementTree.Element or file path string'

	return dictclass({root.tag: _ConvertXmlToDictRecurse(root, dictclass)})

def WriteXMLStruct(XMLString, OutFilePath, Detail=False):
	'''
	Write XML structure to file

   Keyword arguments:

	XMLString  : XML as String     -- string
	OutFilePath: File to write to  -- string
	Detail     : Show Parent/Child -- bool (default False)

	Example

	with open('response.xml') as file:
		XMLString = file.read()

	WriteXMLStruct(XMLString, 'testmapper', True)
	'''

	Root = ElementTree.fromstring(XMLString)

	XMLStruct = getXMLStruct(Root, Detail)

	with open(OutFilePath, 'w') as file:
		file.write(XMLStruct)

def getXMLStruct(Root, Detail=False, XMLStruct='', Indent=0):
	'''
	Get XML response structure as string

	Keyword arguments:

	Root  : Root of XML Element -- xml.etree.ElementTree.Element
	Detail: Show Parent/Child   -- bool (default False)
	'''

	if Detail:
		if list(Root):
			XMLStruct += '\t'*Indent + Root.tag + ': Parent\n'
		else:
			XMLStruct += '\t'*Indent + Root.tag + ': Child\n'
	else:
		XMLStruct += '\t'*Indent + Root.tag + '\n'

	Indent += 1

	for Node in list(Root):
		XMLStruct = getXMLStruct(Node, Detail, XMLStruct, Indent)

	Indent -=1

	return XMLStruct

@app.route("/Morakot/CBCData")
@checkLogOutSession
@checkLogOutTime
def CBCDataUpload():

	try:
		# Block check access right
		ErrorMsg = []
		getCheck 	= checkAccess ("/Morakot/CBCData/","Search")

		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		Type 		= 	request.args.get('Type')
		FromDate 	= 	request.args.get('FromDate') if "FromDate" in request.args else ""
		ToDate 		=	request.args.get('ToDate') if "ToDate" in request.args else ""

		ListData = []
		MemberID = getCBCMemberID('')
		BankDate = mktdate.getBankDate()
		AsOfDate = mktdate.formatDate(str(BankDate),'MMYYYY')
		CoBorrowerNotJoin =   mktsetting.getAppSetting('CoBorrowerNotJoin','')
		if Type == 'Excel':

			ListData = getCBCData(FromDate=FromDate,ToDate=ToDate,CoBorrowerNotJoin=CoBorrowerNotJoin)

			return getExcelResponse(ListData)

		elif Type == 'CSV':

			ListData = getCBCData(FromDate=FromDate,ToDate=ToDate,CoBorrowerNotJoin=CoBorrowerNotJoin)

			return getCSVResponse(ListData)

		return render_template(
			"customer/cbc_data.html",
			MemberID=MemberID,
			AsOfDate=AsOfDate,
			FromDateActive=FromDate,
			ToDateActive=ToDate)

	except:
		raise

@app.route("/Morakot/CBCLoanInactive")
@checkLogOutSession
@checkLogOutTime
def CBCLoanInactive():

	try:

		ErrorMsg = []
		getCheck 	= checkAccess ("/Morakot/CBCData/","Search")

		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		FromDate = request.args.get('FromDate')
		ToDate 	 = request.args.get('ToDate')
		Type 	 = request.args.get('Type')

		CheckDate, ErrorMsg = checkFromToDate(FromDate, ToDate)
		MemberID = getCBCMemberID('')
		BankDate = mktdate.getBankDate()
		AsOfDate = mktdate.formatDate(str(BankDate),'MMYYYY')

		if CheckDate:

			if Type == 'Excel':

				ListHistID = getLoanTerminationHistID(FromDate, ToDate)

				csvList = getCBCInactiveData(ListHistID)

				return getExcelResponse(csvList)

			elif Type == 'CSV':

				ListHistID = getLoanTerminationHistID(FromDate, ToDate)

				csvList = getCBCInactiveData(ListHistID)

				return getCSVResponse(csvList)

		else:

			for msg in ErrorMsg:
				flash(msg)

		return render_template(
			"customer/cbc_data.html",
			FromDate=FromDate,
			ToDate=ToDate,
			MemberID=MemberID,
			AsOfDate=AsOfDate
		 )

	except Exception, e:
		raise 

def requestEnquiry(CBCID, EnquiryDic, Service):
	#check CBC URL
	# getIPServer()

	ResponseObj 	= None
	AppSettingObj 	= mktsetting.getAppSetting('ALL','ALL')
	Url 			= AppSettingObj.get('CBCConnectionUrl')
	User 			= AppSettingObj.get('CBCConnectionUser')
	Password 		= AppSettingObj.get('CBCConnectionPwd')
	Proxy 			= AppSettingObj.get('CBCProxy')
	XMLFile 		= AppSettingObj.get('CBC_GENERATE_XML_FILE')
	# print "URL",Url.Value
	if not (Url.Value and User.Value and Password.Value):
		flash(msg_error + 'Please check CBCConnectionUrl, CBCConnectionUser and CBCConnectionPwd configuration')
		return ResponseObj

	XMLDic = getCBCRequestFormatting(EnquiryDic, Service)
	ObjXML = mkttool.setXML(XMLDic) # Create xml object

	if ObjXML[0]:

		ObjElementTree = ObjXML[1] #xml object

		# Create file xml
		TempRequestFile = StringIO.StringIO() # Create temp file in memory
		ObjElementTree.write(TempRequestFile,xml_declaration=True, encoding='UTF-8') #Write to xml
		Dataxml = TempRequestFile.getvalue()
		TempRequestFile.close()

		if XMLFile :
			"""
			- To config it go url: host/Morakot/AppSetting/Config/CBC
			- In CBC_GENERATE_XML_FILE 
			- If XMLFile.Value = 'Y' # Write request.xml file
			- If XMLFile.Value = 'N' # Disable writting request.xml file
			"""
			if XMLFile.Value == 'Y' :
				with open('request.xml','w') as file:
					file.write(Dataxml)

		# Dataxml = mkttool.getReadFile('Request.xml') # use for test
		# test = requests.get('http://www.google.com', proxies=proxies)
		# print test.text
		# print "xmldata",Dataxml
		GetResponseXml = None

		try:

			proxies = {}
			headers = {
						'authorization': "",
						'content-type': "application/xml"
						}
			if Proxy.Value:
				proxies = json.loads(Proxy.Value)
			# GetResponseXml = requests.post(CBCConnectionUrl, data=Dataxml, auth=HTTPBasicAuth(CBCConnectionUser,CBCConnectionPwd), proxies=proxies)
			# GetResponseXml = requests.post(Url.Value, data=Dataxml, auth=HTTPBasicAuth(User.Value, Password.Value), proxies=proxies)
			headers = {
						'authorization': "",
						'content-type': "application/xml"
				}

			# GetResponseXml = requests.api.request("POST", Url.Value, data=Dataxml, headers=headers,verify=False) #this way is work too
			GetResponseXml = requests.post(Url.Value, data=Dataxml, auth=HTTPBasicAuth(User.Value, Password.Value), proxies=proxies,headers=headers)

		except Exception as e:
			flash("%s%s" % (msg_warning, 'Wrong CBC Proxy (HTTPS) config in AppSetting'))
		except requests.exceptions.ProxyError:
			flash("%s%s" % (msg_warning, 'Proxy failed to establish a new connection'))

		if XMLFile:
			"""
			- To config it go url: host/Morakot/AppSetting/Config/CBC
			- In CBC_GENERATE_XML_FILE 
			- If XMLFile.Value = 'Y' # Write request.xml file
			- If XMLFile.Value = 'N' # Disable writting response.xml file
			- Using when error during request
			"""
			if XMLFile.Value == 'Y' :
				with open('response.xml','w') as file:
					file.write(GetResponseXml.text.encode('utf8'))
		# file.write(GetResponseXml.__dict__)
		# print GetResponseXml.text.encode('utf8')
		# WriteXMLStruct(GetResponseXml.text.encode('utf8'), 'CBC_file/%s.txt' % CreditReport)
		# print GetResponseXml.__dict__.keys()

		if GetResponseXml != None:
			ResponseObj = ConvertXmlToDict(GetResponseXml.text.encode('utf8'))
			# print ResponseObj
			# with open('CBC_file/xmldict.py', 'w') as file:
			# 	file.write(ResponseObj)
			# print GetResponseXml.text
			# flash(GetResponseXml.text)
			# TempResponseFile = StringIO.StringIO() # Create temp file in memory
			# ResponseObj = getResponseCBC(ResponseFile = GetResponseXml.text.encode('utf-8').strip())
			#Using when error to get log
			# print ResponseObj
			if 'RESPONSE' in ResponseObj:

				if ResponseObj.RESPONSE.STATUS not in ["ERROR" ,"PARSER"]:

					if ResponseObj.RESPONSE.SERVICE != 'HISTORIC':

						EnquiryID = ResponseObj.RESPONSE.MESSAGE.ITEM.RSP_REPORT.get('ENQUIRY_NO' , '')

						CBCDetailObj = db.session.query(MKT_CBC_DE.DetailID).filter_by(ID=CBCID).all()

						if CBCDetailObj:
							"""
								-Add EnquiryID and SuccessDate into MKT_CBC_DE
							"""
							for row in CBCDetailObj :
								ID	 = (CBCID,row.DetailID)
								if EnquiryDic:
									SuccessDate = mktdate.getDateTimeNow()
									CBCDetail = MKT_CBC_DE.query.get(ID)
									CBCDetail.EnquiryID = EnquiryID
									CBCDetail.SuccessDate = SuccessDate
									db.session.add(CBCDetail)
									db.session.commit()
				
				else :
					CBCDetailObj = db.session.query(MKT_CBC_DE.DetailID).filter_by(ID=CBCID).all()
					for row in CBCDetailObj :
						ID	 = (CBCID,row.DetailID)
						CBCDetail = MKT_CBC_DE.query.get(ID)
						CBCDetail.EnquiryID = "FAIL" #add status Fail
						db.session.add(CBCDetail)
						db.session.commit()
			else:
				flash(msg_error+"Incorrect CBC Enquiry User or Password or CBC Equiry User have been disable.")
	else:
		flash(msg_error+ObjXML[1])

	return ResponseObj

@app.route("/Morakot/CBCEnquiry")
@checkLogOutSession
@checkLogOutTime
def routeCBCEnquiry():
	
	# Block check access right
	ErrorMsg 	= []
	getCheck 	= checkAccess ("/Morakot/CBCEnquiry/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	ID 				= request.args.get('ID') if 'ID' in request.args else ''
	ResponseList 	= []
	EnquiryDic 		= None
	ProvinceObj 	= None
	CommuneObj 		= None
	DistrictObj 	= None
	VillageObj 		= None

	if ID:

		# Query all address to object
		ProvinceObj = MKT_PROVINCE.query
		CommuneObj 	= MKT_COMMUNE.query
		DistrictObj = MKT_DISTRICT.query
		VillageObj 	= MKT_VILLAGE.query

		CBCDetailObj = MKT_CBC_DE.query.filter_by(ID=ID).all()

		if CBCDetailObj:
			"""
				Accept param of url
			"""
			Accept = request.args.get('Accept') if 'Accept' in request.args else ''
			"""
				Accept have two value 'Y' and 'N'
			"""
			if Accept!= 'Y':
				ListConsumer 	= 	[]
				for CBCObj in CBCDetailObj :
					"""
						- Loop to add some information consumer to a ListConsumer 
					"""
					if CBCObj.EnquiryID == "FAIL" :
						ListConsumer.append({'ConsumerID':CBCObj.Customer,'Status':'Fail','Date':CBCObj.Authorizeon})
					else :
						ListConsumer.append({'ConsumerID':CBCObj.Customer,'Status':'Success','Date':CBCObj.Authorizeon})

				for CBCObj in CBCDetailObj :
					"""
						- Loop to check Consumer Enquiry whether success or not
						- Check if Enquiry == FAIL meant that consumer eqnuiry not success
					"""
					if CBCObj.EnquiryID == "FAIL" :
						"""
							-CBCObj.EnquiryID == "FAIL" is True will break the process 
							-Return value to form
							-
						"""
						return render_template("customer/cbc_enquiry.html",
																			ID=ID,Accept='Y',
																			Status=CBCObj.EnquiryID,
																			ListConsumer=ListConsumer)

			if Accept == 'N' :
				"""
					- Do nothing just go back
				"""
				return render_template("customer/cbc_enquiry.html")

			ConsumerEnquiryObj 	= getConsumerEnquiry(ID)

			EnquiryDic 			= ConsumerEnquiryObj['EnquiryDic'] 	# Dictionary enquiry data in system
			Service 			= ConsumerEnquiryObj['Service'] 	# Service check for view HISTORIC or ENQUIRYV3
			Response = requestEnquiry(ID, EnquiryDic, Service)
			ResponseList.append(Response)
			# with open('responselist.txt','w') as file:
			# 	a =''.join(str(ResponseList))
			# 	file.write(a)
		else:

			# Check historical report with our Morakot CBC ID or CBC system Enquiry ID

			ConsumerEnquiryObj  = getHistoricalConsumerEnquiry(ID)

			EnquiryDic 			= ConsumerEnquiryObj['EnquiryDic'] 	# Dictionary enquiry data in system
			# CBCObj 				= ConsumerEnquiryObj['CBCObj'] 		# CBCObj is object query in table
			Service 			= ConsumerEnquiryObj['Service'] 	# Service check for view HISTORIC or ENQUIRYV3

			Response = requestEnquiry(ID, EnquiryDic, Service)
			ResponseList.append(Response)
			
	return render_template("customer/cbc_enquiry.html",
							float 				= 		float,
							ID 					=		ID,
							getCBCAction 		= 		getCBCAction,
							ResponseList 		= 		ResponseList,
							ProvinceObj			= 		ProvinceObj,
							DistrictObj			= 		DistrictObj,
							CommuneObj			= 		CommuneObj,
							VillageObj			= 		VillageObj,
							formatNumber 		= 		mktmoney.formatNumber,
							formatApplicantType =		formatApplicantType,
							formatGender 		= 		formatGender,
							formatMaritalStatus = 		formatMaritalStatus,
							formatCountry 		= 		formatCountry,
							formatNationality 	= 		formatNationality,
							getFormatIDType 	= 		getFormatIDType,
							getAddressType 		= 		getAddressType,
							getSecurityType 	=  		getSecurityType,
							getEnquiryType 		= 		getEnquiryType,
							getPaymentStatus 	= 		getPaymentStatus,
							getPaymentFrequency = 		getPaymentFrequency,
							getProductTypeCBC 	= 		getProductTypeCBC,
							getAccountType 		= 		getAccountType,
							getCountryDescription = 	getCountryDescription,
							getEmployerType 	= 		getEmployerType,
							getSelfEmployed 	= 		getSelfEmployed,
							getScoreCard 		= 		getScoreCard,
							formatProvince 		= 		formatProvince,
							getLoanAppID 		= 		getLoanAppID,
							makeList 			= 		makeList)

def getLoanAppID(MemRef):

	CBCDetailObj = MKT_CBC_DE.query.filter_by(MemberReference=MemRef).first()

	if not CBCDetailObj:
		return ''

	CBCObj = MKT_CBC.query.get(CBCDetailObj.ID)

	return CBCObj


def getCBCAction(ID):

	Description = ''

	if ID:

		CBCActionObj = MKT_CBC_ACTION.query.get(ID)

		if CBCActionObj:
			Description = CBCActionObj.Description
		else:
			Description = 'CBC Action not found'

	else:

		Description = 'Empty CBC Action'

	return Description

def getScoreCard(ScoreCard):

	DictValue = {}

	if ScoreCard:

		CBCScorecardObj = MKT_APP_SETTING.query.get('CBCScorecard')

		if CBCScorecardObj:

			if CBCScorecardObj.LOV:

				ListValue = CBCScorecardObj.LOV.split('\n')

				for Value in ListValue:

					Value = Value.split('*')

					DictValue[Value[0]] = Value[1]

	return DictValue.get(ScoreCard, ScoreCard)

def makeList(Value):

	if isinstance(Value, dict):
		temp = []
		temp.append(Value)
		return temp
	else:
		return Value

def checkFromToDate(FromDate, ToDate):

	ErrorMsg = []
	FromDateISO = mktdate.isDateISO(FromDate)
	ToDateISO = mktdate.isDateISO(ToDate)

	if not FromDateISO:
		ErrorMsg.append('%s %s' %(msg_error, 'Wrong From Date format YYYY-MM-DD'))

	if not ToDateISO:
		ErrorMsg.append('%s %s' %(msg_error, 'Wrong To Date format YYYY-MM-DD'))

	if FromDateISO and ToDateISO:
		if ToDate <= FromDate:
			ErrorMsg.append('%s %s' %(msg_error, 'To Date must be bigger than From Date'))
		else:
			return True, ''

	return False, ErrorMsg

def getLoanTerminationHistID(FromDate, ToDate):

	# ListLoanTerminateObj = MKT_LOAN_AMENDMENT.query.\
	# 								  filter(MKT_LOAN_AMENDMENT.AmendDate.between(FromDate, ToDate)).\
	# 								  filter(MKT_LOAN_AMENDMENT.Operation == 'TMN').\
	# 								  all()
	

	# MKT_LOAN_MATURITY has been depreciated 
	# ListLoanTerminateObj 	= db.session.query(MKT_LOAN_MATURITY.ID.label('LoanID')).\
	# 									filter(MKT_LOAN_MATURITY.Date >= FromDate).\
	# 									filter(MKT_LOAN_MATURITY.Date <= ToDate).all()

	ListLoanTerminateObj 	= db.session.query(MKT_CLOSED_LOAN.ID.label('LoanID')).\
										filter(MKT_CLOSED_LOAN.ClosedDate.between(FromDate, ToDate)).all()

	ListHistID = []
	for LoanTerminateObj in ListLoanTerminateObj:
		if LoanTerminateObj:
			ID = LoanTerminateObj.LoanID
			Curr = db.session.query(MKT_LOAN_CONTRACT_HIST.ID).\
					filter(MKT_LOAN_CONTRACT_HIST.ID.like(ID+"%")).\
					count()
			if Curr > 0:
				Curr -= 1

			# HistID = '%s@%s' % (ID, Curr)
			ListHistID.append((ID, Curr))

	return ListHistID

def getCSVResponse(ListData):

	#Create file csv
	StrIO = StringIO.StringIO()
	CSVWrite = csv.writer(StrIO)
	index = 1

	for row in ListData:
		row[0] = index
		CSVWrite.writerow(row)
		index += 1

	MemberID = getCBCMemberID('')
	BankDate = mktdate.getBankDate()
	AsOfDate = mktdate.formatDate(str(BankDate),'MMYYYY')
	# We need to modify the response, so the first thing we 
	# need to do is create a response out of the CSV string
	response = make_response(StrIO.getvalue())
	# This is the key: Set the right header for the response
	# to be downloaded, instead of just printed on the browser
	response.headers['Cache-Control'] = 'no-cache'
	response.headers["Content-Disposition"] = "attachment; filename=%s%s.csv"%(MemberID,AsOfDate)
	response.headers["Content-type"] = "text/csv; charset=utf-8"
	StrIO.close()

	return response

def getExcelResponse(ListData):

	row = 1
	col = 0
	index = 1
	col_index = 0
	HeaderList = getHeaderOfCBC()

	MemberID = getCBCMemberID('')
	BankDate = mktdate.getBankDate()
	AsOfDate = mktdate.formatDate(str(BankDate),'MMYYYY')

	output = StringIO.StringIO()
	workbook = xlsxwriter.Workbook(output, {'in_memory': True})
	worksheet = workbook.add_worksheet('%s%s' % (MemberID, AsOfDate))

	for Key in HeaderList:
		worksheet.write(0,col_index, HeaderList[Key].decode('utf-8').strip())
		col_index +=1

	for data in ListData:
		data[0] = index

		for i in data:
			if isinstance(i, str):
				i = unicode(i, 'utf-8')
			worksheet.write(row, col, i)
			col+=1

		index += 1
		row+=1
		col=0

	workbook.close()

	response = make_response(output.getvalue())
	# This is the key: Set the right header for the response
	# to be downloaded, instead of just printed on the browser
	response.headers['Cache-Control'] = 'no-cache'
	response.headers["Content-Disposition"] = "attachment; filename=%s%s.xlsx" % (MemberID, AsOfDate)
	response.headers["Content-type"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=utf-8"

	return response

def getSelfEmployed(SelfEmployed):

	if SelfEmployed:
		if SelfEmployed == 'N':
			return 'No'
		if SelfEmployed == 'Y':
			return 'Yes'
	return SelfEmployed

def getCountryDescription(ISO):

	if ISO:

		CountryNameObj = MKT_COUNTRY.query.filter_by(ISO=ISO).first()

		if CountryNameObj:
			return CountryNameObj.Description
		else:
			return 'ISO not found'
	else:
		return ''

def getResponseCBC(**kwarg):
	DicResponse 	= {}
	# import xml.etree.ElementTree as ET
	if 'ResponseFile' in kwarg:
		ResponseFile = kwarg['ResponseFile']
		DicElementObj 	= {}

		# Read Xml from string xml
		ElementObj 		= ET.fromstring(ResponseFile)
		DicElementObj 	= {ElementObj.tag:ElementObj}

		'''
		# Using for test
		# Read xml from file xml
		ElementObj 		= ET.parse('Response.xml')
		root 			= ElementObj.getroot()
		DicElementObj 	= {root.tag:root}

		# Convert file to dictionary
		CBCResponseConfigFile = open('cbc_response.csv', 'r')
		ListResponse = mkttool.getDictCSV(CBCResponseConfigFile)

		'''
		ConfigFile 		= mktsetting.getAppSetting('CBCResponseXML')
		#Convert file to dictionary
		ListResponse 	= mkttool.getListDict(ConfigFile)

		DicMultiSubElement 		= {}
		DicThirdMultiElement 	= {}
		DicResponse 			= {}
		ListMultiElement 		= []
		for row in ListResponse:

			ElementType 	= str(row['ElementType'])
			ElementName 	= str(row['ElementName'])
			ElementParent 	= str(row['ElementParent'])
			FieldName 		= str(row['FieldName'])
			
			if ElementParent in DicElementObj:
				MainElement = DicElementObj[ElementParent]

				if ElementType == "SubElement":
					if hasattr(MainElement,'find'):
						SubElement = MainElement.find(ElementName)
						DicElementObj.update({ElementName:SubElement})
						if hasattr(SubElement,'text'):
							# print 'ElementName',ElementName,'ElementParent',ElementParent,"Text",SubElement.text
							if FieldName:
								DicResponse.update({FieldName:SubElement.text})

				elif ElementType == "MultiElement":
					if hasattr(MainElement,'findall'):
						SubElement = MainElement.findall(ElementName)
						DicElementObj.update({ElementName:SubElement})
						ListMultiElement.append(ElementName)

				elif ElementType == "MultiSubElement":
					if 	ElementParent in DicElementObj:
						if ElementParent in DicMultiSubElement:
							MultiElementName = DicMultiSubElement[ElementParent]
							MultiElementName.append((ElementName,FieldName))
							DicMultiSubElement.update({ElementParent:MultiElementName})
						else:
							DicMultiSubElement.update({ElementParent:[(ElementName,FieldName)]})

				# elif ElementType == "ThirdMultiElement":
				# 	for element in MainElement:
				# 		if hasattr(element,'findall'):
				# 			# print ElementName
				# 			SubElement = element.findall(ElementName)
				# 			# print SubElement
				# 			DicThirdMultiElement.update({ElementName:SubElement})

				# elif ElementType == "ThirdMultiSubElement":
				# 	ThirdMultiSubElement.update({ElementName:FieldName})

		# print DicElementObj
		RowRecord = []
		ColRecord = {}
		#Multi Element
		for row in ListMultiElement:
			# print row
			MainElementObj 	= DicElementObj[row]
			MultiElementObj = DicMultiSubElement[row]
		
			for MainElement in MainElementObj:
				for element in MultiElementObj:
					# 	print element
					ElementName = element[0]
					FieldName 	= element[1]

					if hasattr(MainElement,'find'):
						SubElement = MainElement.find(ElementName)
						if hasattr(SubElement,'text'):
							if SubElement.text:
								ColRecord.update({FieldName:SubElement.text})
							else:
								ColRecord.update({FieldName:''})
				RowRecord.append(ColRecord)
				ColRecord={}
			DicResponse.update({row:RowRecord})
			RowRecord=[]

	# print DicResponse
	return DicResponse


def getHistoricalConsumerEnquiry(EnquiryID):

	CBCMemberID  		= mktsetting.getAppSetting('CBCMemberID')
	CBCUserID  			= mktsetting.getAppSetting('CBCUserID')

	if EnquiryID != "FAIL":

		Service = 'HISTORIC'
		Action = 'A'

		EnquiryDic = {
			'Action':Action,
			'EnquiryID':EnquiryID,
			'CBCMemberID':CBCMemberID,
			'CBCUserID':CBCUserID,
		}

		return {'EnquiryDic': EnquiryDic, 'Service': Service}


	return {'EnquiryDic': {}, 'Service': ''}

# ID refer to CBC ID of Consumer Enquiry
def getConsumerEnquiry(ID):
	# ID = CBCID
	CBCObj = MKT_CBC.query.get(ID)
	CBCAllDetailObj = MKT_CBC_DE.query.filter_by(ID=ID).all()
	if CBCAllDetailObj:
		EnquiryDic 	= {}
		Consumer 	= []
		Service 	= ''

		if CBCObj:

			Action 				= CBCObj.Action
			EnquiryID 			= CBCAllDetailObj[0].EnquiryID
			SuccessDate 		= CBCAllDetailObj[0].SuccessDate
			CBCMemberID  		= mktsetting.getAppSetting('CBCMemberID')
			CBCUserID  			= mktsetting.getAppSetting('CBCUserID')
			CBCScorecard 		= mktsetting.getAppSetting('CBCScorecard') if 'SC' in Action else ''
			EnquiryType 		= CBCObj.EnquiryType
			NumberOfApplication = CBCObj.NumberOfApplication
			AccountType 		= CBCObj.AccountType
			MemberReference 	= CBCAllDetailObj[0].MemberReference
			# MemberReference 	= ID # change member reference to the ID of CBC autoid
			LoanAppID 			= CBCObj.LoanAppID
			Accept 				= None
			Fail 				= False 
			if EnquiryID !="FAIL" and SuccessDate:

				for ConsumerObj in CBCAllDetailObj:
					if ConsumerObj.EnquiryID !="FAIL" and ConsumerObj.SuccessDate:
						Service = 'HISTORIC'
						Action = 'A'

						EnquiryDic = {
							'Action':Action,
							'EnquiryID':EnquiryID,
							'CBCMemberID':CBCMemberID,
							'CBCUserID':CBCUserID,
						}

						return {'CBCObj':CBCObj,'EnquiryDic': EnquiryDic,'Service':Service}

			
			else :
				for row in CBCAllDetailObj :

					CBCCustomerID 		= row.Customer
					Service = 'ENQUIRYV4'
					LoanAppObj 	= MKT_LOAN_APPLICATION_INAU.query.get(LoanAppID)

					if not LoanAppObj:
						LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanAppID)

					if LoanAppObj:
						Customer 	= CBCCustomerID
						Currency 	= LoanAppObj.Currency
						Amount = formatNumberCBC(float(CBCObj.Amount))
						ProductType = getProductTypeCBC(LoanAppObj.LoanProduct,RowObj=LoanAppObj)
						CustomerObj = MKT_CUSTOMER.query.get(Customer)

						if CustomerObj:

							FirstNameEn 	= CustomerObj.FirstNameEn
							LastNameEn 		= CustomerObj.LastNameEn
							FirstNameKh		= CustomerObj.FirstNameKh
							LastNameKh		= CustomerObj.LastNameKh
							Salutation 		= CustomerObj.Salutation
							Gender 			= CustomerObj.Gender[:1]
							DateOfBirth		= CustomerObj.DateOfBirth
							CountryOfBirth	= CustomerObj.CountryOfBirth
							Nationality 	= CustomerObj.Nationality
							ProvinceOfBirth	= CustomerObj.ProvinceOfBirth
							DistrictOfBirth	= CustomerObj.DistrictOfBirth
							CommuneOfBirth	= CustomerObj.CommuneOfBirth
							# AsGurantor		= CustomerObj.AsGurantor #OldAsGuarntor
							AsGuarantor		= row.ApplicationType #Edit
							MaritalStatus	= CustomerObj.MaritalStatus
							Resident		= CustomerObj.Resident
							Province 		= CustomerObj.Province
							District 		= CustomerObj.District
							Commune 		= CustomerObj.Commune
							Village 		= CustomerObj.Village
							City 			= CustomerObj.City
							Mobile1 		= CustomerObj.Mobile1
							Email 			= CustomerObj.Email
							EmployerType 	= CustomerObj.EmployerType if CustomerObj.EmployerType else "C" #Employer Type C-Current P-Previous
							SelfEmployed 	= CustomerObj.SelfEmployed
							IDNumber 		= CustomerObj.IDNumber
							IDType 			= CustomerObj.IDType
							ExpiryDate 		= CustomerObj.ExpiryDate
							SelfEmployed 	= CustomerObj.SelfEmployed
							CompanyName  	= CustomerObj.CompanyName
							CompanyBusiness = CustomerObj.CompanyBusiness
							Position 		= getPosition(CustomerObj.Position)
							LengthOfService = CustomerObj.LengthOfService
							EmployerAddressType = CustomerObj.EmployerAddressType
							EmployerProvince = CustomerObj.EmployerProvince
							EmployerDistrict = CustomerObj.EmployerDistrict
							EmployerCommune = CustomerObj.EmployerCommune
							EmployerVillage = CustomerObj.EmployerVillage
							MonthlyCurrency = CustomerObj.Currency
							MonthlyIncome 	= formatNumberCBC(CustomerObj.MonthlyIncome)
							AddressField 	= str(getAddressField('',RowObj=CustomerObj))
							EmployerAddress = CustomerObj.EmployerAddress
							EmployerName    = CustomerObj.EmployerName
							EmployerNameEn = ''
							EmployerNameKh = ''
							PositionKh 		= ''
							PositionEn 		= ''

							try:
								Position = str(Position)
							except Exception, e:
								Position = Position

							if mkttool.isUnicode(Position):
								PositionKh = Position
							else:
								PositionEn 	= str(Position)

							try:
								EmployerName = str(EmployerName)
							except Exception, e:
								EmployerName = EmployerName

							if mkttool.isUnicode(EmployerName):
								EmployerNameKh = EmployerName
							else:
								EmployerNameEn 	= str(EmployerName)

							"""
								-for CONSUMER element
								-Append multiple consumers into a list
							"""
							Consumer.append({

								# 'ApplicantType':formatApplicantType(AsGuarantor), # shit happen here
								'ApplicantType':AsGuarantor,# work fine 
								'IDType':IDType,
								'IDNumber':IDNumber,

								'ExpiryDateDD':getSplitDate(ExpiryDate,'DD'),
								'ExpiryDateMM':getSplitDate(ExpiryDate,'MM'),
								'ExpiryDateYYYY':getSplitDate(ExpiryDate,'YYYY'),

								'DateOfBirthDD':getSplitDate(DateOfBirth,'DD'),
								'DateOfBirthMM':getSplitDate(DateOfBirth,'MM'),
								'DateOfBirthYYYY':getSplitDate(DateOfBirth,'YYYY'),

								# Place of birth
								'CountryOfBirth':formatCountry(CountryOfBirth),
								'ProvinceOfBirth':ProvinceOfBirth,
								'DistrictOfBirth':DistrictOfBirth,
								# 'DistrictOfBirth2':DistrictOfBirth, # shit happen here
								'CommuneOfBirth':CommuneOfBirth,
								# 'CommuneOfBirth2':CommuneOfBirth, # shit happen here

								'Gender':formatGender(Gender),
								'MaritalStatus':formatMaritalStatus(MaritalStatus),
								'Nationality':formatCountry(Nationality),

								# Consumer name details
								'LastNameKh':LastNameKh,
								'FirstNameKh':FirstNameKh,
								'LastNameEn':LastNameEn,
								'FirstNameEn':FirstNameEn,
								
								# Consumer address
								'Email':Email,
								'Province':Province,
								'District':District,
								# 'District2':District, # shit happen here
								'Commune':Commune,
								# 'Commune2':Commune, # shit happen here
								'Village':Village,
								# 'Village2':Village, # shit happen here

								'Mobile':Mobile1,

								# Employer Info
								'EmployerType':EmployerType,
								'EmployerAddressType':EmployerAddressType, # this should be WORK becuase we don't know the where Employer live but we know the place he work
								# 'EmployerAddress':EmployerAddress, # shit happen here

								# Must provide Employer Addresss the same as Customer
								'EmployerProvince':EmployerProvince,
								'EmployerDistrict':EmployerDistrict,
								'EmployerCommune':EmployerCommune,
								'EmployerVillage':EmployerVillage,
								# 'EmployerCity': '12', # don't need EmployerCity
								
								'SelfEmployed':SelfEmployed,
								'PositionKh':PositionKh,
								'PositionEn':PositionEn,
								'EmployerNameEn':EmployerNameEn,
								'EmployerNameKh':EmployerNameKh,
								'LengthOfService':LengthOfService,
								'MonthlyIncome':MonthlyIncome,
								'MonthlyCurrency':MonthlyCurrency,
								# add score card
								'CBCScorecard': CBCScorecard
								# 'AddressField':AddressField # shit happen here
							})

							EnquiryDic = {
								#ENQUIRY
								'Action':Action,
								'Service':Service,
								'EnquiryID':EnquiryID,
								'CBCMemberID':CBCMemberID,
								'CBCUserID':CBCUserID,
								'EnquiryType':EnquiryType,
								'ProductType':ProductType,
								'NumberOfApplication':NumberOfApplication,
								'AccountType':AccountType,
								'MemberReference':MemberReference,
								'Amount':Amount,
								'Currency':Currency,
								# add Consumer
								'Consumer':Consumer
								}
		EnquiryDic.update({'CBCUserID':CBCUserID})
	return {'EnquiryDic':EnquiryDic, 'Service':Service}


def generateCBCData(ListQuery, FieldInTable):

	csvList = []
	index = 1

	for row in ListQuery:
		RowRecord=[index]
		ColRecord = []
		for col in FieldInTable:
			FieldName = col['FieldName']
			if hasattr(row, FieldName):
				if 'Function' in col:
					Function = col['Function']
					Result = Function(getattr(row,FieldName))
				else:
					Result = getattr(row,FieldName)
				if mkttool.isString(Result):
					if mkttool.isUnicode(Result):
						RowRecord.append(Result.encode('utf-8'))
						ColRecord = []
					else:
						RowRecord.append(str(Result if Result else ''))
						ColRecord = []
				else:
					RowRecord.append(Result if Result else 0)
					ColRecord = []
			else:
				FieldName 	= col['FieldName']
				Result 		= col['Value'] if 'Value' in col else ''
				if 'SkipColumn' == FieldName:
					for item in range(0,Result):
						RowRecord.append('')
						ColRecord = []
				elif 'Function' in col:
					Function = col['Function']
					Result = Function('',RowObj=row)

					if mkttool.isString(Result):
						if mkttool.isUnicode(Result):
							RowRecord.append(Result.encode('utf-8'))
							ColRecord = []
						else:
							RowRecord.append(str(Result if Result else ''))	
							ColRecord = []
					else:
						RowRecord.append(Result if Result else 0)
						ColRecord = []
				else:
					if mkttool.isString(Result):
						if mkttool.isUnicode(Result):
							RowRecord.append(Result.encode('utf-8'))
							ColRecord = []
						else:
							RowRecord.append(str(Result if Result else ''))	
							ColRecord = []
					else:
						RowRecord.append(Result if Result else 0)
						ColRecord = []
		csvList.append(RowRecord)
		ColRecord = []
		index+=1

	return csvList

def getListQuery(**kwargs):

	FromDate = kwargs.get("FromDate","")
	ToDate   = kwargs.get("ToDate","")
	# Add appseting when Co-Borrower is not Join-Borrower.
	CoBorrowerNotJoin =   mktsetting.getAppSetting('CoBorrowerNotJoin','')

	QueryObj = db.session.query(MKT_LOAN_CONTRACT.ID.label('LoanID'),
								MKT_LOAN_CONTRACT.LegacyID,
								MKT_LOAN_CONTRACT.ContractCustomerID.label('Customer'),
								MKT_LOAN_CONTRACT.LoanApplicationID,
								MKT_LOAN_CONTRACT.ValueDate,
								MKT_LOAN_CONTRACT.LoanProduct,
								MKT_LOAN_CONTRACT.LoanPurpose,
								MKT_LOAN_CONTRACT.Currency,
								MKT_LOAN_CONTRACT.Disbursed,
								MKT_LOAN_CONTRACT.Amount.label('LoanBalance'),
								MKT_LOAN_CONTRACT.AssetClass,
								MKT_LOAN_CONTRACT.LoanType,
								MKT_LOAN_CONTRACT.FreqType,
								MKT_LOAN_CONTRACT.OutstandingAmount,
								MKT_LOAN_CONTRACT.MaturityDate,
								MKT_LOAN_CONTRACT.Term,
								MKT_LOAN_CONTRACT.MoreThanOneYear,
								MKT_LOAN_CONTRACT.Group,
								MKT_CUSTOMER.IDType,
								MKT_CUSTOMER.IDNumber,
								MKT_CUSTOMER.ExpiryDate,
								MKT_CUSTOMER.IDType2,
								MKT_CUSTOMER.IDNumber2,
								MKT_CUSTOMER.ExpiryDate2,
								MKT_CUSTOMER.IDType3,
								MKT_CUSTOMER.IDNumber3,
								MKT_CUSTOMER.ExpiryDate3,
								MKT_CUSTOMER.DateOfBirth,
								MKT_CUSTOMER.CountryOfBirth.label('Country'),
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_CUSTOMER.Gender,
								MKT_CUSTOMER.MaritalStatus,
								MKT_CUSTOMER.Nationality,
								MKT_CUSTOMER.Province,
								MKT_CUSTOMER.District,
								MKT_CUSTOMER.Commune,
								MKT_CUSTOMER.Village,
								MKT_CUSTOMER.City,
								MKT_CUSTOMER.Email,
								MKT_CUSTOMER.Mobile1,
								MKT_CUSTOMER.EmployerType,
								MKT_CUSTOMER.SelfEmployed,
								MKT_CUSTOMER.EmployerName,
								MKT_CUSTOMER.EmployerProvince,
								MKT_CUSTOMER.EmployerDistrict,
								MKT_CUSTOMER.EmployerCommune,
								MKT_CUSTOMER.EmployerVillage,
								MKT_CUSTOMER.PositionRemark,
								MKT_CUSTOMER.LengthOfService,
								MKT_CUSTOMER.AsGurantor,
								MKT_CUSTOMER.Currency.label('CurrencyIncome'),
								MKT_CUSTOMER.MonthlyIncome
								).\
						join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
						order_by(MKT_LOAN_CONTRACT.ID.asc())

	QueryObjCoBorrow = db.session.query(MKT_LOAN_CO_BORROWER.ID.label('LoanID'),
								MKT_LOAN_CO_BORROWER.CoBorrowerID.label('Customer'),
								MKT_LOAN_CONTRACT.LegacyID,
								MKT_LOAN_CONTRACT.LoanApplicationID,
								MKT_LOAN_CONTRACT.ValueDate,
								MKT_LOAN_CONTRACT.LoanProduct,
								MKT_LOAN_CONTRACT.LoanPurpose,
								MKT_LOAN_CONTRACT.Currency,
								MKT_LOAN_CONTRACT.Disbursed,
								MKT_LOAN_CONTRACT.Amount.label('LoanBalance'),
								MKT_LOAN_CONTRACT.AssetClass,
								MKT_LOAN_CONTRACT.LoanType,
								MKT_LOAN_CONTRACT.FreqType,
								MKT_LOAN_CONTRACT.OutstandingAmount,
								MKT_LOAN_CONTRACT.MaturityDate,
								MKT_LOAN_CONTRACT.Term,
								MKT_LOAN_CONTRACT.MoreThanOneYear,
								MKT_LOAN_CONTRACT.Group,
								MKT_CUSTOMER.IDType,
								MKT_CUSTOMER.IDNumber,
								MKT_CUSTOMER.ExpiryDate,
								MKT_CUSTOMER.IDType2,
								MKT_CUSTOMER.IDNumber2,
								MKT_CUSTOMER.ExpiryDate2,
								MKT_CUSTOMER.IDType3,
								MKT_CUSTOMER.IDNumber3,
								MKT_CUSTOMER.ExpiryDate3,
								MKT_CUSTOMER.CountryOfBirth.label('Country'),
								MKT_CUSTOMER.DateOfBirth,
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_CUSTOMER.Gender,
								MKT_CUSTOMER.MaritalStatus,
								MKT_CUSTOMER.Nationality,
								MKT_CUSTOMER.Province,
								MKT_CUSTOMER.District,
								MKT_CUSTOMER.Commune,
								MKT_CUSTOMER.Village,
								MKT_CUSTOMER.City,
								MKT_CUSTOMER.Email,
								MKT_CUSTOMER.Mobile1,
								MKT_CUSTOMER.EmployerType,
								MKT_CUSTOMER.SelfEmployed,
								MKT_CUSTOMER.EmployerName,
								MKT_CUSTOMER.EmployerProvince,
								MKT_CUSTOMER.EmployerDistrict,
								MKT_CUSTOMER.EmployerCommune,
								MKT_CUSTOMER.EmployerVillage,
								MKT_CUSTOMER.PositionRemark,
								MKT_CUSTOMER.LengthOfService,
								MKT_CUSTOMER.AsGurantor,
								MKT_CUSTOMER.Currency.label('CurrencyIncome'),
								MKT_CUSTOMER.MonthlyIncome
								).\
						join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID==MKT_LOAN_CO_BORROWER.ID).\
						join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CO_BORROWER.CoBorrowerID).\
						order_by(MKT_LOAN_CONTRACT.ID.asc())

	if CoBorrowerNotJoin:
		QueryObjCoBorrow = db.session.query(MKT_LOAN_APPLICATION.ID,
											MKT_LOAN_APPLICATION.LNCustomerID.label('Customer'),
											MKT_LOAN_CONTRACT.ID.label('LoanID'),
											MKT_LOAN_CONTRACT.LoanApplicationID,
											MKT_LOAN_CONTRACT.ValueDate,
											MKT_LOAN_CONTRACT.LoanProduct,
											MKT_LOAN_CONTRACT.LoanPurpose,
											MKT_LOAN_CONTRACT.Currency,
											MKT_LOAN_CONTRACT.Disbursed,
											MKT_LOAN_CONTRACT.Amount.label('LoanBalance'),
											MKT_LOAN_CONTRACT.AssetClass,
											MKT_LOAN_CONTRACT.LoanType,
											MKT_LOAN_CONTRACT.FreqType,
											MKT_LOAN_CONTRACT.OutstandingAmount,
											MKT_LOAN_CONTRACT.MaturityDate,
											MKT_LOAN_CONTRACT.Term,
											MKT_LOAN_CONTRACT.MoreThanOneYear,
											MKT_CUSTOMER.IDType,
											MKT_CUSTOMER.IDNumber,
											MKT_CUSTOMER.ExpiryDate,
											MKT_CUSTOMER.CountryOfBirth.label('Country'),
											MKT_CUSTOMER.DateOfBirth,
											MKT_CUSTOMER.FirstNameEn,
											MKT_CUSTOMER.LastNameEn,
											MKT_CUSTOMER.FirstNameKh,
											MKT_CUSTOMER.LastNameKh,
											MKT_CUSTOMER.Gender,
											MKT_CUSTOMER.MaritalStatus,
											MKT_CUSTOMER.Nationality,
											MKT_CUSTOMER.Province,
											MKT_CUSTOMER.District,
											MKT_CUSTOMER.Commune,
											MKT_CUSTOMER.Village,
											MKT_CUSTOMER.City,
											MKT_CUSTOMER.Email,
											MKT_CUSTOMER.Mobile1,
											MKT_CUSTOMER.EmployerType,
											MKT_CUSTOMER.SelfEmployed,
											MKT_CUSTOMER.AsGurantor,
											MKT_CUSTOMER.Currency.label('CurrencyIncome'),
											MKT_CUSTOMER.MonthlyIncome
											).\
									join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.LoanApplicationID==MKT_LOAN_APPLICATION.ID).\
									join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_APPLICATION.SpouseID).\
									order_by(MKT_LOAN_CONTRACT.ID.asc())
	else:
		QueryObjCoBorrow = db.session.query(MKT_LOAN_CO_BORROWER.ID.label('LoanID'),
											MKT_LOAN_CO_BORROWER.CoBorrowerID.label('Customer'),
											MKT_LOAN_CONTRACT.LoanApplicationID,
											MKT_LOAN_CONTRACT.ValueDate,
											MKT_LOAN_CONTRACT.LoanProduct,
											MKT_LOAN_CONTRACT.LoanPurpose,
											MKT_LOAN_CONTRACT.Currency,
											MKT_LOAN_CONTRACT.Disbursed,
											MKT_LOAN_CONTRACT.Amount.label('LoanBalance'),
											MKT_LOAN_CONTRACT.AssetClass,
											MKT_LOAN_CONTRACT.LoanType,
											MKT_LOAN_CONTRACT.FreqType,
											MKT_LOAN_CONTRACT.OutstandingAmount,
											MKT_LOAN_CONTRACT.MaturityDate,
											MKT_LOAN_CONTRACT.Term,
											MKT_LOAN_CONTRACT.MoreThanOneYear,
											MKT_CUSTOMER.IDType,
											MKT_CUSTOMER.IDNumber,
											MKT_CUSTOMER.ExpiryDate,
											MKT_CUSTOMER.CountryOfBirth.label('Country'),
											MKT_CUSTOMER.DateOfBirth,
											MKT_CUSTOMER.FirstNameEn,
											MKT_CUSTOMER.LastNameEn,
											MKT_CUSTOMER.FirstNameKh,
											MKT_CUSTOMER.LastNameKh,
											MKT_CUSTOMER.Gender,
											MKT_CUSTOMER.MaritalStatus,
											MKT_CUSTOMER.Nationality,
											MKT_CUSTOMER.Province,
											MKT_CUSTOMER.District,
											MKT_CUSTOMER.Commune,
											MKT_CUSTOMER.Village,
											MKT_CUSTOMER.City,
											MKT_CUSTOMER.Email,
											MKT_CUSTOMER.Mobile1,
											MKT_CUSTOMER.EmployerType,
											MKT_CUSTOMER.SelfEmployed,
											MKT_CUSTOMER.AsGurantor,
											MKT_CUSTOMER.Currency.label('CurrencyIncome'),
											MKT_CUSTOMER.MonthlyIncome
											).\
									join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID==MKT_LOAN_CO_BORROWER.ID).\
									join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CO_BORROWER.CoBorrowerID).\
									order_by(MKT_LOAN_CONTRACT.ID.asc())

	QueryObjGuarantor = db.session.query(MKT_GUARANTOR.ID.label('LoanID'),
								MKT_GUARANTOR.Guarantor.label('Customer'),
								MKT_GUARANTOR.Type.label('GuarantorType'),
								MKT_LOAN_CONTRACT.LegacyID,
								MKT_LOAN_CONTRACT.LoanApplicationID,
								MKT_LOAN_CONTRACT.ValueDate,
								MKT_LOAN_CONTRACT.LoanProduct,
								MKT_LOAN_CONTRACT.LoanPurpose,
								MKT_LOAN_CONTRACT.Currency,
								MKT_LOAN_CONTRACT.Disbursed,
								MKT_LOAN_CONTRACT.Amount.label('LoanBalance'),
								MKT_LOAN_CONTRACT.AssetClass,
								MKT_LOAN_CONTRACT.LoanType,
								MKT_LOAN_CONTRACT.FreqType,
								MKT_LOAN_CONTRACT.OutstandingAmount,
								MKT_LOAN_CONTRACT.MaturityDate,
								MKT_LOAN_CONTRACT.Term,
								MKT_LOAN_CONTRACT.MoreThanOneYear,
								MKT_LOAN_CONTRACT.Group,
								MKT_CUSTOMER.IDType,
								MKT_CUSTOMER.IDNumber,
								MKT_CUSTOMER.ExpiryDate,
								MKT_CUSTOMER.IDType2,
								MKT_CUSTOMER.IDNumber2,
								MKT_CUSTOMER.ExpiryDate2,
								MKT_CUSTOMER.IDType3,
								MKT_CUSTOMER.IDNumber3,
								MKT_CUSTOMER.ExpiryDate3,
								MKT_CUSTOMER.CountryOfBirth.label('Country'),
								MKT_CUSTOMER.DateOfBirth,
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_CUSTOMER.Gender,
								MKT_CUSTOMER.MaritalStatus,
								MKT_CUSTOMER.Nationality,
								MKT_CUSTOMER.Province,
								MKT_CUSTOMER.District,
								MKT_CUSTOMER.Commune,
								MKT_CUSTOMER.Village,
								MKT_CUSTOMER.City,
								MKT_CUSTOMER.Email,
								MKT_CUSTOMER.Mobile1,
								MKT_CUSTOMER.EmployerType,
								MKT_CUSTOMER.SelfEmployed,
								MKT_CUSTOMER.EmployerName,
								MKT_CUSTOMER.EmployerProvince,
								MKT_CUSTOMER.EmployerDistrict,
								MKT_CUSTOMER.EmployerCommune,
								MKT_CUSTOMER.EmployerVillage,
								MKT_CUSTOMER.PositionRemark,
								MKT_CUSTOMER.LengthOfService,
								MKT_CUSTOMER.AsGurantor,
								MKT_CUSTOMER.Currency.label('CurrencyIncome'),
								MKT_CUSTOMER.MonthlyIncome
								).\
						join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID==MKT_GUARANTOR.ID).\
						join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_GUARANTOR.Guarantor).\
						order_by(MKT_LOAN_CONTRACT.ID.asc())

	if FromDate and ToDate:
		QueryObj = QueryObj.filter(MKT_LOAN_CONTRACT.ValueDate >= str(FromDate)).\
							filter(MKT_LOAN_CONTRACT.ValueDate <= str(ToDate))

		QueryObjCoBorrow = QueryObjCoBorrow.\
							filter(MKT_LOAN_CONTRACT.ValueDate >= str(FromDate)).\
							filter(MKT_LOAN_CONTRACT.ValueDate <= str(ToDate))

		QueryObjGuarantor = QueryObjGuarantor.\
							filter(MKT_LOAN_CONTRACT.ValueDate >= str(FromDate)).\
							filter(MKT_LOAN_CONTRACT.ValueDate <= str(ToDate))

	ListQuery = QueryObj.all()
	ListQuery.extend(QueryObjCoBorrow.all())

	for row in ListQuery:
		row.ApplicantType = 'P'
	ListGuarantor = QueryObjGuarantor.all()

	for row in ListGuarantor:
		GuarantorType = getattr(row,'GuarantorType','')
		row.ApplicantType = 'G'
		if GuarantorType == 'S':
			row.ApplicantType = 'S'

	ListQuery.extend(ListGuarantor)

	return ListQuery

def generateFieldInTable():

	FieldInTable = []

	FieldInTable.append({'FieldName':'IDType'})
	FieldInTable.append({'FieldName':'IDNumber'})
	FieldInTable.append({'FieldName':'ExpiryDate'		,'Function':formatDateCBC})
	FieldInTable.append({'FieldName':'IDType2'})
	FieldInTable.append({'FieldName':'IDNumber2'})
	FieldInTable.append({'FieldName':'ExpiryDate2'		,'Function':formatDateCBC})
	FieldInTable.append({'FieldName':'IDType3'})
	FieldInTable.append({'FieldName':'IDNumber3'})
	FieldInTable.append({'FieldName':'ExpiryDate3'		,'Function':formatDateCBC})
	FieldInTable.append({'FieldName':'DateOfBirth'		,'Function':formatDateCBC})
	FieldInTable.append({'FieldName':'LastNameEn'		})
	FieldInTable.append({'FieldName':'FirstNameEn'		})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':2})
	FieldInTable.append({'FieldName':'Unformatted En'	,'Function':getUnformattedEn})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	FieldInTable.append({'FieldName':'LastNameKh'		})
	FieldInTable.append({'FieldName':'FirstNameKh'		})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':2})
	FieldInTable.append({'FieldName':'Unformatted Kh'	,'Function':getUnformattedKh})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	FieldInTable.append({'FieldName':'Gender'			,'Function':formatGender})
	FieldInTable.append({'FieldName':'MaritalStatus'	,'Function':formatMaritalStatus})
	FieldInTable.append({'FieldName':'Nationality'		,'Function':formatCountry})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	FieldInTable.append({'FieldName':'ApplicantType'})
	FieldInTable.append({'FieldName':'AddressType'		,'Value':'RESID'})
	FieldInTable.append({'FieldName':'Province'})
	FieldInTable.append({'FieldName':'District'})
	FieldInTable.append({'FieldName':'Commune'})
	FieldInTable.append({'FieldName':'Village'})
	# FieldInTable.append({'FieldName':'SkipColumn'		,'Value':4}) # Province  District Commune Village
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	# FieldInTable.append({'FieldName':'AddressField'		,'Function':getAddressField}) # optional 
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':3})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	# FieldInTable.append({'FieldName':'City'				}) # change to City Code optional unless AddressType = POST
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	FieldInTable.append({'FieldName':'Country'			,'Function':formatCountry})# col 40
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':27})
	FieldInTable.append({'FieldName':'Email'			})
	FieldInTable.append({'FieldName':'Phone Type'			,'Function':getContactNumberType})
	FieldInTable.append({'FieldName':'Phone Country Code'	,'Value':'855'})
	FieldInTable.append({'FieldName':'Phone Number Area'			,'Function':getContactNumberArea})
	FieldInTable.append({'FieldName':'Phone Number'				,'Function':getContactNumberNumber})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':1})
	FieldInTable.append({'FieldName':'Phone Type2'			,'Function':getContactNumberType2})
	FieldInTable.append({'FieldName':'Phone Country Code2'	,'Value':'855'})
	FieldInTable.append({'FieldName':'Phone Number Area2'			,'Function':getContactNumberArea2})
	FieldInTable.append({'FieldName':'Phone Number2'				,'Function':getContactNumberNumber2})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':1})
	FieldInTable.append({'FieldName':'Phone Type3'			,'Function':getContactNumberType3})
	FieldInTable.append({'FieldName':'Phone Country Code3'	,'Value':'855'})
	FieldInTable.append({'FieldName':'Phone Number Area3'			,'Function':getContactNumberArea3})
	FieldInTable.append({'FieldName':'Phone Number3'				,'Function':getContactNumberNumber3})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':1})
	FieldInTable.append({'FieldName':'EmployerType'			})
	FieldInTable.append({'FieldName':'SelfEmployed'			})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':1})
	FieldInTable.append({'FieldName':'EmployerName'			})
	FieldInTable.append({'FieldName':'Economic Sector1'			,'Value':'UK'})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':1})
	FieldInTable.append({'FieldName':'Employer1 Address'			,'Function':getEmployerAddressEN})
	FieldInTable.append({'FieldName':'Employer1 Address'			,'Function':getEmployerAddressKH})
	FieldInTable.append({'FieldName':'EmployerProvince'			})
	FieldInTable.append({'FieldName':'EmployerDistrict'			})
	FieldInTable.append({'FieldName':'EmployerCommune'			})
	FieldInTable.append({'FieldName':'EmployerVillage'			})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':2})
	FieldInTable.append({'FieldName':'Country1'		,'Value':'KHM'})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':2})
	FieldInTable.append({'FieldName':'PositionRemark'			})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':1})
	FieldInTable.append({'FieldName':'LengthOfService'			})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':1})
	FieldInTable.append({'FieldName':'CurrencyIncome'})
	# FieldInTable.append({'FieldName':'SkipColumn'			,'Value':1})
	FieldInTable.append({'FieldName':'MonthlyIncome', 'Function': formatNumberCBC})
	FieldInTable.append({'FieldName':'MonthlyIncome', 'Function': formatNumberCBC})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':48})
	FieldInTable.append({'FieldName':'Creditor ID'			,'Function':getCBCMemberID})
	FieldInTable.append({'FieldName':'Account Type'			,'Function':getAccountType})
	FieldInTable.append({'FieldName':'Group Account Ref'	,'Function':GroupAccountRef})
	FieldInTable.append({'FieldName':'Loan ID'				,'Function':getLoanID})
	FieldInTable.append({'FieldName':'ValueDate' 			,'Function':formatDateCBC})
	FieldInTable.append({'FieldName':'Product Type' 		,'Function':getProductTypeCBC})
	FieldInTable.append({'FieldName':'Currency'})
	FieldInTable.append({'FieldName':'Disbursed'			,'Function':formatNumberCBC})
	FieldInTable.append({'FieldName':'Maturity Date' 		, 'Function':getMaturityDate})
	FieldInTable.append({'FieldName':'Product Status'		,'Function':getProductStatus}) # no reject
	FieldInTable.append({'FieldName':'Restructure Loan'		,'Function':isRestructureLoan})
	FieldInTable.append({'FieldName':'Instalment Amount'	,'Function':getInstalmentAmount})
	FieldInTable.append({'FieldName':'Payment Frequency'	,'Function':getFreqType})
	FieldInTable.append({'FieldName':'Term'})
	FieldInTable.append({'FieldName':'Last Payment Date'	,'Function':getPreviousPaymentDate})
	FieldInTable.append({'FieldName':'Last Payment Amount'	,'Function':getPreviousPaymentAmount})
	FieldInTable.append({'FieldName':'Security Type'		,'Function':getSecurityType})
	FieldInTable.append({'FieldName':'Outstanding Amount'	,'Function':formatOutstandingCBC})
	FieldInTable.append({'FieldName':'Past Due Amount'		,'Function':getPastDueAmount})
	FieldInTable.append({'FieldName':'Next Payment Date'	,'Function':getNextPaymentDate})
	FieldInTable.append({'FieldName':'Payment Status'		,'Function':getPaymentStatus})
	FieldInTable.append({'FieldName':'As Of Date'			,'Function':getAsOfDate})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':4})

	return FieldInTable

def clearGobalVar():

	#Clear Global Variable
	global CBCProvinceObj
	global CBCDistrictObj
	global CBCCommuneObj
	global CBCScheduleObj
	global PDObj

	CBCProvinceObj	= None
	CBCDistrictObj 	= None
	CBCCommuneObj 	= None
	CBCScheduleObj 	= None

def generateDictFromObj(Obj):

	if Obj:

		ObjFields = dir(Obj)

		NeedFields = []

		ExcludeFields = ['count', 'index', 'keys']

		for field in ObjFields:
			if not field.startswith('_') and field not in ExcludeFields:
				NeedFields.append(field)

		ObjDict = {}

		for field in NeedFields:
			ObjDict[field] = getattr(Obj, field)

		return ObjDict

	else:

		return {}

def generateObjFromDict(Dict):

	class DummyClass(object):
		pass

	Obj = DummyClass()

	for key, val in Dict.iteritems():
		setattr(Obj, key, val)

	return Obj

def getCBCInactiveData(ListLoanID):

	CoBorrowerNotJoin =   mktsetting.getAppSetting('CoBorrowerNotJoin','')

	ListID = [u'%s@%s' % (x[0], x[1]) for x in ListLoanID]

	QueryObj = db.session.query(MKT_LOAN_CONTRACT_HIST.ID.label('LoanID'),
								MKT_LOAN_CONTRACT_HIST.LegacyID,
								MKT_LOAN_CONTRACT_HIST.ContractCustomerID.label('Customer'),
								MKT_LOAN_CONTRACT_HIST.LoanApplicationID,
								MKT_LOAN_CONTRACT_HIST.ValueDate,
								MKT_LOAN_CONTRACT_HIST.LoanProduct,
								MKT_LOAN_CONTRACT_HIST.LoanPurpose,
								MKT_LOAN_CONTRACT_HIST.Currency,
								MKT_LOAN_CONTRACT_HIST.Disbursed,
								MKT_LOAN_CONTRACT_HIST.Amount.label('LoanBalance'),
								MKT_LOAN_CONTRACT_HIST.AssetClass,
								MKT_LOAN_CONTRACT_HIST.LoanType,
								MKT_LOAN_CONTRACT_HIST.FreqType,
								MKT_LOAN_CONTRACT_HIST.OutstandingAmount,
								MKT_LOAN_CONTRACT_HIST.MaturityDate,
								MKT_LOAN_CONTRACT_HIST.Term,
								MKT_LOAN_CONTRACT_HIST.MoreThanOneYear,
								MKT_LOAN_CONTRACT_HIST.Group,
								MKT_CUSTOMER.IDType,
								MKT_CUSTOMER.IDNumber,
								MKT_CUSTOMER.ExpiryDate,
								MKT_CUSTOMER.IDType2,
								MKT_CUSTOMER.IDNumber2,
								MKT_CUSTOMER.ExpiryDate2,
								MKT_CUSTOMER.IDType3,
								MKT_CUSTOMER.IDNumber3,
								MKT_CUSTOMER.ExpiryDate3,
								MKT_CUSTOMER.DateOfBirth,
								MKT_CUSTOMER.CountryOfBirth.label('Country'),
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_CUSTOMER.Gender,
								MKT_CUSTOMER.MaritalStatus,
								MKT_CUSTOMER.Nationality,
								MKT_CUSTOMER.Province,
								MKT_CUSTOMER.District,
								MKT_CUSTOMER.Commune,
								MKT_CUSTOMER.Village,
								MKT_CUSTOMER.City,
								MKT_CUSTOMER.Email,
								MKT_CUSTOMER.Mobile1,
								MKT_CUSTOMER.EmployerType,
								MKT_CUSTOMER.SelfEmployed,
								MKT_CUSTOMER.EmployerName,
								MKT_CUSTOMER.EmployerProvince,
								MKT_CUSTOMER.EmployerDistrict,
								MKT_CUSTOMER.EmployerCommune,
								MKT_CUSTOMER.EmployerVillage,
								MKT_CUSTOMER.PositionRemark,
								MKT_CUSTOMER.LengthOfService,
								MKT_CUSTOMER.AsGurantor,
								MKT_CUSTOMER.Currency.label('CurrencyIncome'),
								MKT_CUSTOMER.MonthlyIncome
								).\
						join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT_HIST.ContractCustomerID).\
						filter(MKT_LOAN_CONTRACT_HIST.ID.in_(ListID)).\
						order_by(MKT_LOAN_CONTRACT_HIST.ID.asc())

	ListCoBorrow = []

	for ID,Curr in ListLoanID:

		HistID = '%s@%s' % (ID, Curr)

		LCHistObj = db.session.query(
										MKT_LOAN_CONTRACT_HIST.LoanApplicationID,
										MKT_LOAN_CONTRACT_HIST.LegacyID,
										MKT_LOAN_CONTRACT_HIST.ValueDate,
										MKT_LOAN_CONTRACT_HIST.LoanProduct,
										MKT_LOAN_CONTRACT_HIST.LoanPurpose,
										MKT_LOAN_CONTRACT_HIST.Currency,
										MKT_LOAN_CONTRACT_HIST.Disbursed,
										MKT_LOAN_CONTRACT_HIST.Amount.label('LoanBalance'),
										MKT_LOAN_CONTRACT_HIST.AssetClass,
										MKT_LOAN_CONTRACT_HIST.LoanType,
										MKT_LOAN_CONTRACT_HIST.FreqType,
										MKT_LOAN_CONTRACT_HIST.OutstandingAmount,
										MKT_LOAN_CONTRACT_HIST.MaturityDate,
										MKT_LOAN_CONTRACT_HIST.Term,
										MKT_LOAN_CONTRACT_HIST.MoreThanOneYear,
										MKT_LOAN_CONTRACT_HIST.Group
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID == HistID).first()

		LCHistDict = generateDictFromObj(LCHistObj)
		if CoBorrowerNotJoin:
			CoBorrowObj = db.session.query(MKT_LOAN_APPLICATION_HIST.ID.label('ApplicationID'),
											MKT_LOAN_APPLICATION_HIST.SpouseID.label('CoBorrowerID'),
											MKT_LOAN_CONTRACT_HIST.ID.label('ID'),
											).\
									outerjoin(MKT_LOAN_CONTRACT_HIST, MKT_LOAN_CONTRACT_HIST.ContractCustomerID==MKT_LOAN_APPLICATION_HIST.LNCustomerID).\
									distinct(MKT_LOAN_APPLICATION_HIST.SpouseID).\
									filter(MKT_LOAN_CONTRACT_HIST.ID != None).\
									filter(MKT_LOAN_APPLICATION_HIST.SpouseID != '').\
									filter(MKT_LOAN_CONTRACT_HIST.ID == HistID)
		else:
			CoBorrowObj = MKT_LOAN_CO_BORROWER_HIST.query.filter(MKT_LOAN_CO_BORROWER_HIST.ID == HistID)
		GurantorObj = MKT_GUARANTOR_HIST.query.filter(MKT_GUARANTOR_HIST.ID == HistID)

		Row = {}
		Row['Terminate'] = 'Y'

		LoanMaturityOrAdmentObj = MKT_CLOSED_LOAN.query.filter(MKT_CLOSED_LOAN.ID==ID).first()
		Row['TerminateDate'] = LoanMaturityOrAdmentObj.ClosedDate
		Row['LastPaidAmount'] = ''	#LoanMaturityOrAdmentObj.LastPaidAmount
		Row['InstallAmount'] = ''	#LoanMaturityOrAdmentObj.InstallAmount
		Row['TerminateID'] = HistID

		for Obj in CoBorrowObj:

			Row['LoanID'] = ID
			Row['Customer'] = Obj.CoBorrowerID

			CustomerObj = db.session.query(
											MKT_CUSTOMER.IDType,
											MKT_CUSTOMER.IDNumber,
											MKT_CUSTOMER.ExpiryDate,
											MKT_CUSTOMER.IDType2,
											MKT_CUSTOMER.IDNumber2,
											MKT_CUSTOMER.ExpiryDate2,
											MKT_CUSTOMER.IDType3,
											MKT_CUSTOMER.IDNumber3,
											MKT_CUSTOMER.ExpiryDate3,
											MKT_CUSTOMER.DateOfBirth,
											MKT_CUSTOMER.CountryOfBirth.label('Country'),
											MKT_CUSTOMER.FirstNameEn,
											MKT_CUSTOMER.LastNameEn,
											MKT_CUSTOMER.FirstNameKh,
											MKT_CUSTOMER.LastNameKh,
											MKT_CUSTOMER.Gender,
											MKT_CUSTOMER.MaritalStatus,
											MKT_CUSTOMER.Nationality,
											MKT_CUSTOMER.Province,
											MKT_CUSTOMER.District,
											MKT_CUSTOMER.Commune,
											MKT_CUSTOMER.Village,
											MKT_CUSTOMER.City,
											MKT_CUSTOMER.Email,
											MKT_CUSTOMER.Mobile1,
											MKT_CUSTOMER.EmployerType,
											MKT_CUSTOMER.SelfEmployed,
											MKT_CUSTOMER.EmployerName,
											MKT_CUSTOMER.EmployerProvince,
											MKT_CUSTOMER.EmployerDistrict,
											MKT_CUSTOMER.EmployerCommune,
											MKT_CUSTOMER.EmployerVillage,
											MKT_CUSTOMER.PositionRemark,
											MKT_CUSTOMER.LengthOfService,
											MKT_CUSTOMER.AsGurantor,
											MKT_CUSTOMER.Currency.label('CurrencyIncome'),
											MKT_CUSTOMER.MonthlyIncome
										   ).\
										filter(MKT_CUSTOMER.ID == Obj.CoBorrowerID).first()
			if CustomerObj:
				setattr(CustomerObj,'ApplicantType','P')
				CusDict    = generateDictFromObj(CustomerObj)
				Row.update(CusDict)
				Row.update(LCHistDict)

			if CustomerObj:
				setattr(CustomerObj,'ApplicantType','P')
				CusDict    = generateDictFromObj(CustomerObj)
				Row.update(CusDict)
				Row.update(LCHistDict)

				if Row:
					RowObj = generateObjFromDict(Row)
					ListCoBorrow.append(RowObj)

		for Obj in GurantorObj:

				Row['LoanID'] = ID
				Row['Customer'] = Obj.Guarantor

				CustomerObj = db.session.query(
												MKT_CUSTOMER.IDType,
												MKT_CUSTOMER.IDNumber,
												MKT_CUSTOMER.ExpiryDate,
												MKT_CUSTOMER.IDType2,
												MKT_CUSTOMER.IDNumber2,
												MKT_CUSTOMER.ExpiryDate2,
												MKT_CUSTOMER.IDType3,
												MKT_CUSTOMER.IDNumber3,
												MKT_CUSTOMER.ExpiryDate3,
												MKT_CUSTOMER.DateOfBirth,
												MKT_CUSTOMER.CountryOfBirth.label('Country'),
												MKT_CUSTOMER.FirstNameEn,
												MKT_CUSTOMER.LastNameEn,
												MKT_CUSTOMER.FirstNameKh,
												MKT_CUSTOMER.LastNameKh,
												MKT_CUSTOMER.Gender,
												MKT_CUSTOMER.MaritalStatus,
												MKT_CUSTOMER.Nationality,
												MKT_CUSTOMER.Province,
												MKT_CUSTOMER.District,
												MKT_CUSTOMER.Commune,
												MKT_CUSTOMER.Village,
												MKT_CUSTOMER.City,
												MKT_CUSTOMER.Email,
												MKT_CUSTOMER.Mobile1,
												MKT_CUSTOMER.EmployerType,
												MKT_CUSTOMER.SelfEmployed,
												MKT_CUSTOMER.EmployerName,
												MKT_CUSTOMER.EmployerProvince,
												MKT_CUSTOMER.EmployerDistrict,
												MKT_CUSTOMER.EmployerCommune,
												MKT_CUSTOMER.EmployerVillage,
												MKT_CUSTOMER.PositionRemark,
												MKT_CUSTOMER.LengthOfService,
												MKT_CUSTOMER.AsGurantor,
												MKT_CUSTOMER.Currency.label('CurrencyIncome'),
												MKT_CUSTOMER.MonthlyIncome
											   ).\
											filter(MKT_CUSTOMER.ID == Obj.Guarantor).first()
				if CustomerObj:
					setattr(CustomerObj,'ApplicantType','G')
					CusDict    = generateDictFromObj(CustomerObj)

					Row.update(CusDict)
					Row.update(LCHistDict)

					if Row:
						RowObj = generateObjFromDict(Row)
						ListCoBorrow.append(RowObj)

	csvList = []
	ListQuery = QueryObj.all()
	ListLCObj = []

	for Obj in ListQuery:
		Row = generateDictFromObj(Obj)
		Row['TerminateID'] = Row['LoanID']
		Row['LoanID'] = Row['LoanID'].split('@')[0]
		Row['Terminate'] = 'Y'

		LoanMaturityOrAdmentObj = MKT_CLOSED_LOAN.query.filter(MKT_CLOSED_LOAN.ID==ID).first()
		Row['TerminateDate'] = LoanMaturityOrAdmentObj.ClosedDate
		Row['LastPaidAmount'] = ''	#LoanMaturityOrAdmentObj.LastPaidAmount
		Row['InstallAmount'] = ''	#LoanMaturityOrAdmentObj.InstallAmount
		Row['ApplicantType'] = 'P'
		RowObj = generateObjFromDict(Row)
		ListLCObj.append(RowObj)

	ListLCObj.extend(ListCoBorrow)
	FieldInTable = generateFieldInTable()
	csvList = generateCBCData(ListLCObj, FieldInTable)

	clearGobalVar()
	# Item 158 is the Account Number Field for Loan Contract
	# Sort by Account Number (Loan Contract)
	return sorted(csvList, key=itemgetter(158))

def getCBCData(**kwargs):

	ListQuery = getListQuery(**kwargs)
	FieldInTable = generateFieldInTable()
	csvList = generateCBCData(ListQuery, FieldInTable)

	clearGobalVar()

	# Item 158 is the Account Number Field for Loan Contract
	# Sort by Account Number (Loan Contract)
	return sorted(csvList, key=itemgetter(158))

def getUnformattedKh(ID,**kwarg):
	Name = ''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LastName 	= RowObj.LastNameKh
		FirstName = RowObj.FirstNameKh
		Name = '%s %s'%(LastName,FirstName)
	return Name

def getUnformattedEn(ID,**kwarg):
	Name= ''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LastName 	= RowObj.LastNameEn
		FirstName = RowObj.FirstNameEn
		Name = '%s %s'%(LastName,FirstName)

	return Name

def getEmployerType(EmployerType,**kwarg):
	DicEmployerType = {'C':'Current','P':'Previous'}
	if 'Vlookup' in kwarg:
		return DicEmployerType[EmployerType]
	else:
		return EmployerType

def getPaymentFrequency(Frequency,**kwarg):
	DicFrequency = {
	'W' : 'Weekly',
	'F' : 'Two Weekly',
	'M' : 'Monthly',
	'Q' : 'Quarterly',
	'H' : 'Half-yearly',
	'Y' : 'Yearly',
	'O' : 'Other'
	}
	if Frequency in DicFrequency:
		return DicFrequency[Frequency]
	else:
		return Frequency

def getSecurityType(SecurityType,**kwarg):

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = RowObj.LoanID
		LoanAppID = RowObj.LoanApplicationID

		CollateralObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanID).all()

		if not CollateralObj:
			CollateralObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanAppID).all()

		if CollateralObj:

			if len(CollateralObj) == 1:
				for row in CollateralObj:
					CollateralDe = MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==row.Collateral).first()
					if CollateralDe:
						CollateralType = CollateralDe.CollateralType
						return CollateralType
					else:
						return "NO"
			else:
				return "MP"
		else:

			return "NO"

	DicSecurityType = { 
		'CA'	: 'Cash',
		'GI'	: 'Guarantor',
		'MO'	: 'Mortgage',
		'NO'	: 'None',
		'OT'	: 'Others',
		'SH'	: 'Shares',
		'MP'	: 'Multiple',
		'FD'	: 'Fixed Deposit',
		'LT'	: 'Land Title',
		'TO'	: 'Ownership Title - Land/Buildings',
		'FB'	: 'Floating Debenture',
		'MV'	: 'Motor Vehicle',
		'IN'	: 'Inventory',
		'LC'	: 'Letter of Credit',
		'CG'	: 'Corporate Guarantees'}

	if SecurityType in DicSecurityType:
		return DicSecurityType[SecurityType]
	else:
		SecurityType

def getEnquiryType(EnquiryType,**kwarg):
	DicEnquiryType = {'NA': 'New Application','RV':'Review', 'PE': 'Public Enquiry'}
	if EnquiryType in DicEnquiryType:
		return DicEnquiryType[EnquiryType]
	return EnquiryType

def getAddressType(AddressType,**kwarg):
	DicAddressType = {
		'RESID'	: 'Residential',
		'WORK' 	: 'Work',
		'POST'	: 'Correspondence',
		'U' 	: 'Unknown'
	}
	if AddressType in DicAddressType:
		return DicAddressType[AddressType]
	else:
		return ''

def getPosition(Position,**kwarg):
	Description = ""
	PositionObj = MKT_POSITION.query.get(Position)
	if PositionObj:
		Description = PositionObj.Description
	return Description

def getPaymentStatus(LoanID,**kwarg):

	if 'Vlookup' in kwarg:
		DicPaymentStatus = { 
				'N' : 'New - Not yet activated',
				'R' : 'Reject',
				'Q' : 'No transactions in this period cycle',
				'0' : 'Current',
				'1' : '1 - 29 days overdue',
				'2' : '30 - 59 days overdue',
				'3' : '60 - 89 days overdue',
				'4' : '90 - 119 days overdue',
				'5' : '120 - 149 days overdue',
				'6' : '150 - 179 days overdue',
				'7' : '180 - 209 days overdue',
				'8' : '210 - 239 days overdue',
				'9' : '240 - 269 days overdue',
				'T' : '270 - 299 days overdue',
				'E' : '300 - 329 days overdue',
				'Y' : '330 - 359 days overdue',
				'L' : 'Loss - 360 days overdue',
				'W' : 'Write Off',
				'C' : 'Closed',
				'D' : 'Defer Payment',
				'V' : 'Vacation Payment',
				'M' : 'Missing Cycle'}
		if LoanID in DicPaymentStatus:
			return DicPaymentStatus[LoanID]
		else:
			return LoanID

	if 'RowObj' in kwarg:
		RowObj 				= kwarg['RowObj']
		AssetClass 			= str(RowObj.AssetClass)
		Disbursed 			= RowObj.Disbursed
		LoanBalance 		= RowObj.LoanBalance
		LoanID 				= RowObj.LoanID
		Terminate = getattr(RowObj, 'Terminate', None)

		if Terminate == 'Y':
			return 'C'

		PDID 	='PD%s'%LoanID
		NumDayDue = mktpdcollection.getMaxNumDayDue(PDID)
		if not NumDayDue:
			NumDayDue = getMaxNumDayDueInCurrentMonth(PDID)

		if AssetClass == "0" and not NumDayDue:
			if Decimal(LoanBalance) == Decimal(Disbursed):
				global CBCScheduleObj
				if not CBCScheduleObj:
					CBCScheduleObj = MKT_REP_SCHEDULE.query
				QueryObj = CBCScheduleObj.filter(MKT_REP_SCHEDULE.No==1).\
										filter(MKT_REP_SCHEDULE.LoanID==LoanID).first()
				if QueryObj:
					if QueryObj.PartPaidAmt >0:
						return "0"
				return "Q"
			
		
		if NumDayDue:
			NumDayDue = int(NumDayDue)
			if 1 <= NumDayDue <= 29:
				return "1"
			elif 30 <= NumDayDue <= 59:
				return "2"
			elif 60 <= NumDayDue <= 89:
				return "3"
			elif 90 <= NumDayDue <= 119:
				return "4"
			elif 120 <= NumDayDue <= 149:
				return "5"
			elif 150 <= NumDayDue <= 179:
				return "6"
			elif 180 <= NumDayDue <= 209:
				return "7"
			elif 210 <= NumDayDue <= 239:
				return "8"
			elif 240 <= NumDayDue <= 269:
				return "9"
			elif 270 <= NumDayDue <= 299:
				return "T"
			elif 300 <= NumDayDue <= 329:
				return "E"
			elif 330 <= NumDayDue <= 359:
				return "Y"
			else:
				return "L"
		else:
			return "0"
	return "AssetClass not found."

def getNextPaymentDate(LoanID,**kwarg):

	global CBCScheduleObj
	BankDateObj = mktdate.getBankDateObj()
	BankDate    = BankDateObj.SystemDate

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)

	if not CBCScheduleObj:
		CBCScheduleObj = MKT_REP_SCHEDULE.query

	QueryObj = CBCScheduleObj.filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
									filter(MKT_REP_SCHEDULE.RepStatus=="0").\
									filter(MKT_REP_SCHEDULE.CollectionDate>=BankDate).\
									order_by(MKT_REP_SCHEDULE.No.asc())

	PaymentStatus = getPaymentStatus(LoanID,**kwarg)
	if PaymentStatus in ('C', 'L','R', 'W'):
		return ""

	if QueryObj.limit(1).first():
		NextPaymentDate 	= QueryObj.limit(1).first()

		if NextPaymentDate:			
			return formatDateCBC(NextPaymentDate.CollectionDate)
	return ""

def getPastDueAmount(LoanID,**kwarg):
	global PDObj
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)

	if Terminate == 'Y':
		return formatNumberCBC(0)

	if not PDObj:
		PDObj= MKT_PAST_DUE.query

	QueryObj = PDObj.get("PD%s"%LoanID)
	if QueryObj:
		if QueryObj.TotODAmount > 0:

			if (QueryObj.TotODAmount-QueryObj.TotPenaltyDue) > 0:
				return formatNumberCBC(QueryObj.TotODAmount-QueryObj.TotPenaltyDue)
		
		AsOfDate = mktdate.getBankDate() - timedelta(days=1)
		AsOfDate = str(AsOfDate)[:7]
		PDDateObj 	= MKT_PD_DATE.query.filter(MKT_PD_DATE.ID.ilike('%'+"PD%s"%LoanID)).\
										filter(MKT_PD_DATE.DueDate.ilike(AsOfDate + '%')).\
										filter(MKT_PD_DATE.NumDayDue != '').\
										order_by(MKT_PD_DATE.DueDate.asc(),
												MKT_PD_DATE.NumDayDue.desc()).\
										limit(1).first()
		if PDDateObj:
			return formatNumberCBC(PDDateObj.TotODAmount-PDDateObj.PenaltyDue)

	return formatNumberCBC(0)

def getPreviousPaymentAmount(LoanID,**kwarg):

	PreviousInstallment = 0
	global CBCScheduleObj
	TransactionCode = getPaymentTransaction()

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
	Account = ''
	Amount = 0
	
	#I. for the Loan which can List Live
	CBCLoanContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	if CBCLoanContractObj:
		Account = CBCLoanContractObj.Account
	else:
		#I. for the Loan which can List Live
		CBCLoanContractHistObj = MKT_LOAN_CONTRACT_HIST.query.get(RowObj.TerminateID)
		if CBCLoanContractHistObj:
			Account = CBCLoanContractHistObj.Account

	AccountObj = db.session.query(
									MKT_ACC_ENTRY.DebitCredit,
									MKT_ACC_ENTRY.TransactionDate,
									func.sum(MKT_ACC_ENTRY.Amount).label('Amount'),
								).filter(MKT_ACC_ENTRY.Account==Account).\
								filter(MKT_ACC_ENTRY.DebitCredit=='Dr').\
								filter(MKT_ACC_ENTRY.Transaction.in_(TransactionCode)).\
								filter(MKT_ACC_ENTRY.Reference.ilike('%'+RowObj.LoanID)).\
								group_by(MKT_ACC_ENTRY.DebitCredit, MKT_ACC_ENTRY.TransactionDate).\
								order_by(MKT_ACC_ENTRY.TransactionDate.desc()).first()

	if AccountObj:
		RepaymentScheduleObj = db.session.query(MKT_REP_SCHEDULE).\
											filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
											order_by(MKT_REP_SCHEDULE.No.asc()).\
											first()

		if RepaymentScheduleObj:
			AccountTransactionDate = int(str(AccountObj.TransactionDate).replace('-',''))
			RepScheduleCollectionDate = int(str(RepaymentScheduleObj.CollectionDate).replace('-',''))

			if AccountTransactionDate < RepScheduleCollectionDate:
				return formatNumberCBC(0)

		Amount = AccountObj.Amount
	return formatNumberCBC(Amount)

def getPreviousPaymentDate(LoanID,**kwarg):

	global CBCScheduleObj
	TransactionCode = getPaymentTransaction()

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	LastTransactionDate =''
	Account = ''

	#I. for the Loan which can List Live
	CBCLoanContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	if CBCLoanContractObj:
		Account = CBCLoanContractObj.Account
	else:
		#I. for the Loan which can List Live
		CBCLoanContractHistObj = MKT_LOAN_CONTRACT_HIST.query.get(RowObj.TerminateID)
		if CBCLoanContractHistObj:
			Account = CBCLoanContractHistObj.Account

	AccountObj = db.session.query(
									MKT_ACC_ENTRY.DebitCredit,
									MKT_ACC_ENTRY.TransactionDate,
									func.sum(MKT_ACC_ENTRY.Amount).label('Amount'),
								).filter(MKT_ACC_ENTRY.Account==Account).\
								filter(MKT_ACC_ENTRY.DebitCredit=='Dr').\
								filter(MKT_ACC_ENTRY.Transaction.in_(TransactionCode)).\
								filter(MKT_ACC_ENTRY.Reference.ilike('%'+RowObj.LoanID)).\
								group_by(MKT_ACC_ENTRY.DebitCredit, MKT_ACC_ENTRY.TransactionDate).\
								order_by(MKT_ACC_ENTRY.TransactionDate.desc()).first()

	if AccountObj:
		RepaymentScheduleObj = db.session.query(MKT_REP_SCHEDULE).\
											filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
											order_by(MKT_REP_SCHEDULE.No.asc()).\
											first()

		if RepaymentScheduleObj:
			AccountTransactionDate = int(str(AccountObj.TransactionDate).replace('-',''))
			RepScheduleCollectionDate = int(str(RepaymentScheduleObj.CollectionDate).replace('-',''))

			if AccountTransactionDate < RepScheduleCollectionDate:
				return formatDateCBC(LastTransactionDate)

		LastTransactionDate = AccountObj.TransactionDate

	return formatDateCBC(LastTransactionDate)

def getFreqType(LoanID,**kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		FreqType = str(RowObj.FreqType)
		#Monthly
		if FreqType == "1":
			return "M"
		#Weekly
		else:
			return "W"
	return "FreqType not found"

def getInstalmentAmount(LoanID,**kwarg):
	global CBCScheduleObj
	TotalAmount = 0
	Terminate = None
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	
	if Terminate == 'Y':
		LoanMaturityObj = MKT_CLOSED_LOAN.query.get(LoanID)
		QueryObj = db.session.query(MKT_REP_SCHEDULE_HIST).\
								filter(MKT_REP_SCHEDULE_HIST.LoanID==LoanID).\
								filter(MKT_REP_SCHEDULE_HIST.CollectionDate<=LoanMaturityObj.ClosedDate).\
								filter(MKT_REP_SCHEDULE_HIST.RepStatus!="0").\
								order_by(MKT_REP_SCHEDULE_HIST.CollectionDate.desc(),desc(cast(func.regexp_replace(MKT_REP_SCHEDULE_HIST.ID, "(.*)@","","g"),Integer))).first()

		if QueryObj is not None:
			TotalAmount = float(QueryObj.Principal)+float(QueryObj.Interest)
			TotalAmount = formatNumberCBC(TotalAmount)
			return TotalAmount
		else:
			return formatNumberCBC(0)

	QueryObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
									filter(~MKT_REP_SCHEDULE.RepStatus.in_(["1","0"])).\
									order_by(MKT_REP_SCHEDULE.No.desc()).limit(1).all()
	if not QueryObj:
		QueryObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
									filter(~MKT_REP_SCHEDULE.RepStatus.in_(["1"])).\
									order_by(MKT_REP_SCHEDULE.No.asc()).limit(1).all()

	if not QueryObj:
		QueryObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
									filter(~MKT_REP_SCHEDULE.RepStatus.in_(["0"])).\
									order_by(MKT_REP_SCHEDULE.No.asc()).limit(1).all()

	for row in QueryObj:
		TotalAmount = float(row.Principal)+float(row.Interest)
	TotalAmount = formatNumberCBC(TotalAmount)
	return TotalAmount

def getProductStatus(AssetClass,**kwarg):
	'''
	N Normal
	S Special Mention
	C Closed
	U Substandard
	D Doubtful
	L Loss
	W Write Off
	'''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']

		AssetClass = str(RowObj.AssetClass)
		OutstandingAmount = RowObj.OutstandingAmount
		MoreThanOneYear = str(RowObj.MoreThanOneYear)
		Terminate = getattr(RowObj, 'Terminate', None)

		SpecialMention = '11'
		AssetClassObj = MKT_ASSET_CLASS.query.\
									filter(MKT_ASSET_CLASS.Description=='Special Mention').first()
		if AssetClassObj:
			SpecialMention = AssetClassObj.ID

		if Terminate == 'Y':
			return 'C'

		if AssetClass == "0":
			return "N"

		elif AssetClass == "10":
			return "N"

		elif AssetClass == SpecialMention:
			return "S"

		elif AssetClass == "20":
			if MoreThanOneYear == "N":
				return "S"
			else: 
				return "U"

		elif AssetClass == "30":
			if MoreThanOneYear == "N":
				return "U"
			else:

				return "D"

		elif AssetClass == "40":
			return "L"
		
		elif OutstandingAmount == 0:
			return "C"

	return "AssetClass not found."

def getProductTypeCBC(LoanProduct,**kwarg):
	DicProductTypeCBC = {
	'MBL' :	'Mobile Phone Loan',
	'CPL' :	'Computer Loan',
	'MTL' :	'Motor Loan',
	'CAL' :	'Car Loan',
	'HIL' :	'Home Improvement Loan',
	'EDU' :	'Education Loan',
	'STL' :	'Staff Loan',
	'CDL' :	'Consumer Durables Loan',
	'PEL' :	'Personal Loan',
	'MRA' :	'Real Estate Loan',
	'PHL' :	'Public Housing Loan',
	'SHL' :	'Staff Housing Loan',
	'WCL' :	'Working Capital Loan',
	'AFI' :	'Asset Financing',
	'INL' :	'Investment Loan',
	'CON' :	'Construction Loan',
	'HVL' :	'Home Investment Loan',
	'STF' :	'Stock Finance',
	'ODF' :	'Overdraft Facility',
	'RVL' :	'Revolving Loan',
	'SYL' :	'Syndicate Loan',
	'AGL' :	'Agriculture Loan',
	'MCL' :	'Machinery Loan',
	'HEQ' :	'Heavy Equipment Loan',
	'TFL' :	'Trade Finance Loan',
	'GRL' :	'Green Loan',
	'EML' :	'Emergency Loan',
	'CMT' :	'Community Loan',
	'SCC' :	'Secured Credit Card',
	'UCC' :	'Unsecured Credit Card',
	'CCC' :	'Combined Credit Card',
	'BCC' :	'Business Credit Card',
	'MFI' :	'MFI Loan',
	'PRL' :	'Private Loan',
	'ASL' :	'Association Loan',
	'PE' : 'Public Enquiry only'}
	LoanPurpose = ''
	if 'Vlookup' in kwarg:
		if LoanProduct in DicProductTypeCBC:
			return DicProductTypeCBC[LoanProduct]
		else:
			return LoanProduct

	CBCLoanProduct = mkttool.getDictionaryObj(mktsetting.getAppSetting('CBCLoanProduct'))
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanProduct = RowObj.LoanProduct
		LoanPurpose = RowObj.LoanPurpose

	# check if variable LoanPurpose has value which not empty string.
	if LoanPurpose:
		Key = ''.join([LoanProduct,LoanPurpose])
		Key = Key.replace(" ","")
		if CBCLoanProduct.has_key(Key):
			return CBCLoanProduct[Key].replace('\r','')

	if LoanProduct in CBCLoanProduct:
		return CBCLoanProduct[LoanProduct].replace('\r','')
	
	return "Error: Loan Product not found in CBC"
def checkLoanPurpose():
	Row = mktsetting.getAppSetting('CBCLoanProduct')
	if Row:
		ListRow = Row.split('\n')
		if ListRow:
			lenght =	len(ListRow[0].split('*'))
			Status = 1 if lenght==2 else 2 # status =1 CBC loan product type no loan purpose and status=2 CBC loan product type have loan purpose
			return Status
		else:
			return ""
	else:
		return ""
def GroupAccountRef(LoanID,**kwarg):
	'''
		Mandatory if the Account Type = G (roup)
			
	'''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = RowObj.LoanID
		LoanGroup = getattr(RowObj,'Group','')
		return LoanGroup

	return ""

def getAccountType(LoanID,**kwarg):
	'''
		AccountType
		S (ingle)
		J (oint)
		G (roup)
	'''
	CoBorrowerNotJoin =   mktsetting.getAppSetting('CoBorrowerNotJoin','')
	if 'Vlookup' in kwarg:
		DicAccountType = {'S':'Single','J':'Joint','G':'Group'}
		if LoanID in DicAccountType:
			return DicAccountType[LoanID]
		else:
			return LoanID

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = RowObj.LoanID
		LoanGroup = getattr(RowObj,'Group','')
		Terminate = getattr(RowObj, 'Terminate', None)
		if LoanGroup:
			return 'G'

		if Terminate == 'Y':

			TerminateID = getattr(RowObj, 'TerminateID', None)

			if TerminateID:

				if CoBorrowerNotJoin:

					JointBorrower = db.session.query(MKT_LOAN_CONTRACT_HIST).\
												join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID==MKT_LOAN_CONTRACT_HIST.LoanApplicationID).\
												filter(MKT_LOAN_CONTRACT_HIST.ID==TerminateID).\
												filter(MKT_LOAN_APPLICATION.SpouseID!='').\
												all()
					if JointBorrower:
						return "J"
					else:
						return "S"
				else:

					CoBorrowerObj = MKT_LOAN_CO_BORROWER_HIST.query.filter(MKT_LOAN_CO_BORROWER_HIST.ID==TerminateID)

					if CoBorrowerObj.all():
						return "J"
					else:
						return "S"

			else:

				return ''

		if CoBorrowerNotJoin:

			JointBorrower = db.session.query(MKT_LOAN_CONTRACT).\
										join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID==MKT_LOAN_CONTRACT.LoanApplicationID).\
										filter(MKT_LOAN_CONTRACT.ID==LoanID).\
										filter(MKT_LOAN_APPLICATION.SpouseID!='').\
										all()
			if JointBorrower:
				return "J"
			else:
				return "S"
		else:

			CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanID)

			if CoBorrowerObj.all():
				return "J"
			else:
				return "S"

	if 'Count' in kwarg:
		
		if CoBorrowerNotJoin:

			JointBorrower = db.session.query(MKT_LOAN_CONTRACT_HIST).\
										join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID==MKT_LOAN_CONTRACT_HIST.LoanApplicationID).\
										filter(MKT_LOAN_CONTRACT_HIST.ID==TerminateID).\
										filter(MKT_LOAN_APPLICATION.SpouseID!='')
			if JointBorrower.all():
				return "J",str(JointBorrower.count()+1)
			else:
				return "S","1"
		else:
			CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanID)
			if CoBorrowerObj.all():
				return "J",str(CoBorrowerObj.count()+1)
			else:
				return "S","1"

def getLoanID(LoanID,**kwarg):
	''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		LoanGroup = getattr(RowObj,'Group','')
		Terminate = getattr(RowObj, 'Terminate', None)
		LoanHistID = '%s@0' %LoanID
		CustomerID = getattr(RowObj, 'Customer','')

		if Terminate:
			LoanObj =  MKT_LOAN_CONTRACT_HIST.query.filter(MKT_LOAN_CONTRACT_HIST.ID==LoanHistID).first()
		else:
			LoanObj =  MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID==LoanID).first()

		LCID  = getattr(LoanObj, 'LegacyID','')

		if LCID:
			LoanID = LCID

		if LoanGroup:
			
			if LoanObj.ContractCustomerID == CustomerID:
				LoanID = '%s_1' %LoanID
			else:
				LoanID = '%s_2' %LoanID

	return LoanID



def getCBCMemberID(Default,**kwarg):
	CBCMemberID = str(mktsetting.getAppSetting('CBCMemberID'))
	return CBCMemberID

def getAddressField(Address,**kwarg):
	Result = ''
	if 'RowObj' in kwarg:
		
		RowObj = kwarg['RowObj']
		Province 	= RowObj.Province
		District 	= RowObj.District
		Commune 	= RowObj.Commune
		#Call global variable
		global CBCProvinceObj 
		global CBCDistrictObj
		global CBCCommuneObj
		# Case object need query only once.
		if CBCProvinceObj:
			QueryObj = CBCProvinceObj.get(Province)
			if QueryObj:
				Result = QueryObj.Description
		else:
			CBCProvinceObj = MKT_PROVINCE.query
			QueryObj = CBCProvinceObj.get(Province)
			if QueryObj:
				Result = QueryObj.Description

		if CBCDistrictObj:
			QueryObj = CBCDistrictObj.get(District)
			if QueryObj:
				Result +=' %s'% QueryObj.Description
		else:
			CBCDistrictObj = MKT_DISTRICT.query
			QueryObj = CBCDistrictObj.get(District)
			if QueryObj:
				Result +=' %s'% QueryObj.Description

		if CBCCommuneObj:
			QueryObj = CBCCommuneObj.get(Commune)
			if QueryObj:
				Result +=' %s'% QueryObj.Description
		else:
			CBCCommuneObj = MKT_COMMUNE.query
			QueryObj = CBCCommuneObj.get(Commune)
			if QueryObj:
				Result +=' %s'% QueryObj.Description
	return Result

def getFormatIDType(IDType,**kwarg):

	IDTypeObj 	= MKT_ID_TYPE.query.get(IDType)

	if IDTypeObj:
		return IDTypeObj.Description

	return IDType

def getSplitDate(Date,Format):
	if Date:
		DicFormat = {'DD','MM','YYYY'}
		if Format in DicFormat:
			if Format == "DD":
				return Date.split("-")[2]
			if Format == "MM":
				return Date.split("-")[1]
			if Format == "YYYY":
				return Date.split("-")[0]
		else:
			return 'Error'
	else:
		return ''

def getCBCRequestFormatting(EnquiryDic,Service):
	'''
	This method is used to combind Consumer and CBC request xml.
	Args:
		EnquiryDic		(Dict):contain data for CBC request
		Service 		(Str) :Service of Enquiry it can be "HISTORIC",'ENQUIRYV4'
	Return:
		XMLDic 	type(Dict):return dict of consumer
	'''

	# ConfigFile = open('cbc_request.csv', 'r')
	# Convert file to dictionary
	# ListXML = mkttool.getDictCSV(ConfigFile)

	if Service == "HISTORIC":
		ConfigFile 		= mktsetting.getAppSetting('CBCHistoricalXML')
	else:
		ConfigFile 		= mktsetting.getAppSetting('CBCRequestXML')

	ListXML 		= mkttool.getListDict(ConfigFile)

	XMLDic = {}
	Text = ''
	AppID = 1 #Make sure not duplicate index of dict
	Count = 0 
	if EnquiryDic:
		if Service == "HISTORIC":
			"""
			-Service =="HISTORIC"
			-return historical xml as dict 
			"""
			for row in ListXML:
				Set = row['Set'].split() if row['Set'] != '' else ''
				ListSet = []
				if Set:
					for item in Set:
						ListSet.append(item.split('*'))
				if EnquiryDic:

					Text = EnquiryDic[row['FieldName']] if row['FieldName'] in EnquiryDic else row['Text']

				XMLDic.update({int(row['Index']):
												{'ElementName' : row['ElementName'],
												'ElementType': row['ElementType'],
												'ElementParent':row['ElementParent'],
												'Text':Text,
												'Set': ListSet,
												'Notes':row['Description']}})
			return XMLDic
		else :
			"""
			return cbc consumer enquiry request xml as dict
			"""

			ConsumerList	=	EnquiryDic['Consumer'] # List of all consumer
			for row in ListXML:
				"""
					- 1-18 is index in CBC AppSetting of CBC requesting
				"""
				if int(row['Index'])<19 :
					Set = row['Set'].split() if row['Set'] != '' else ''
					ListSet = []
					if Set:
						for item in Set:
							ListSet.append(item.split('*'))
					Text = EnquiryDic[row['FieldName']] if row['FieldName'] in EnquiryDic else row['Text']
					XMLDic.update({int(row['Index']):
													{'ElementName' : row['ElementName'],
													'ElementType': row['ElementType'],
													'ElementParent':row['ElementParent'],
													'Text':Text,
													'Set': ListSet,
													'Notes':row['Description']}})
			"""
			Align multiple CONSUMER elements
			"""
			for ConsumerObj in ConsumerList :
				Count = Count +1 
				for row in ListXML :
					"""
					- 19-98 is index in CBC AppSetting of Consumer
					"""
					if int(row['Index'])>18 and  row['ElementName'] != 'SCORECARD':
						
						Set = row['Set'].split() if row['Set'] != '' else ''
						ListSet = []
						if Set:
							for item in Set:
								ListSet.append(item.split('*'))
						Text = ConsumerObj[row['FieldName']] if row['FieldName'] in ConsumerObj else row['Text']
						XMLDic.update({int(row['Index'])+AppID:
														{'ElementName' : row['ElementName'],
														'ElementType': row['ElementType'],
														'ElementParent':row['ElementParent'],
														'Text':Text,
														'Set': ListSet,
														'Notes':row['Description']}})
					"""
						- Multiple scorecard CBC don't allow. CBC allow only one scorecard for one request
						- We do as below code  because each consumer have one scorecard,
						  but we need only one score card for all consumers 
					"""
					if Count == len(ConsumerList) and row['ElementName']=='SCORECARD':
						Text = ConsumerObj[row['FieldName']] if row['FieldName'] in ConsumerObj else row['Text']
						XMLDic.update({int(row['Index'])+AppID:
														{'ElementName' : row['ElementName'],
														'ElementType': row['ElementType'],
														'ElementParent':row['ElementParent'],
														'Text':Text,
														'Set': ListSet,
														'Notes':row['Description']}})
					AppID = AppID + int(row['Index'])
	return XMLDic


def formatNumberCBC(Number,**kwarg):
	return mktmoney.formatNumber(float(Number),0)

def getMaturityDate(LoanID, **kwarg):
	if 'RowObj' in kwarg:
		RowObj 				= kwarg['RowObj']
		LoanID 				= RowObj.LoanID
		MaturityOrTerminateDate = RowObj.MaturityDate
		Terminate = getattr(RowObj, 'Terminate', None)

		if Terminate == 'Y':
			MaturityOrTerminateDate = db.session.query(MKT_CLOSED_LOAN.ClosedDate).filter(MKT_CLOSED_LOAN.ID==LoanID).first()
			MaturityOrTerminateDate = ''.join(MaturityOrTerminateDate)
		return ''.join(list(reversed(MaturityOrTerminateDate.split('-'))))

def getAsOfDate(LoanID, **kwarg):
	'''
	This method will return As Of Date of loan contract when generate cbc data upload.
	If user want to generate data at the end of month (example 31-Jan-2018) they need to run EOD one day.
	This mean that the System Date now must be 01-Feb-2018. But user only want generate data from Start Of Month
	to End Of Month.
	form:
		AsOfDate = System Date - 1
	'''
	AsOfDate = mktdate.getBankDate() - timedelta(days=1)
	AsOfDate = ''.join(list(reversed(str(AsOfDate).split('-'))))
	return AsOfDate

def formatOutstandingCBC(OutstandingAmount,**kwarg):

	Terminate = None

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		Terminate = getattr(RowObj, 'Terminate', None)

	if Terminate == 'Y':
		return formatNumberCBC(0)
	else:
		return formatNumberCBC(RowObj.OutstandingAmount)

def formatVillage(Village,**kwarg):
	return Village[-2:]

def formatCommune(Commune,**kwarg):
	return Commune[-2:]

def formatDistrict(District,**kwarg):
	return District[-2:]

def formatProvince(Province,**kwarg):

	NewProvince = ''

	if Province:
		if len(Province) == 1:
			NewProvince = "0%s" % Province
		else:
			NewProvince = Province

	return NewProvince

def formatCountry(Country,**kwarg):

	CountryObj = MKT_COUNTRY.query.get(Country)

	if CountryObj:

		return CountryObj.ISO

	else:

		return "%s Country code not found." % Country

def formatNationality(ISO):

	CountryObj = MKT_COUNTRY.query.filter(MKT_COUNTRY.ISO==ISO).first()

	if CountryObj:

		return CountryObj.Description

	else:

		return "%s Country ISO not found." % ISO 

def formatApplicantType(AsGurantor,**kwarg):

	if 'Vlookup' in kwarg:
		if AsGurantor == "G":
			return "Guarantor"
		else:
			return "Primary"

	if AsGurantor:
		return 'P'

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = RowObj.LoanID
		return RowObj.ApplicantType
		# AsGurantor = RowObj.AsGurantor
		# CoBorrowerID = RowObj.Customer
		# CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanID).\
		# 											order_by(MKT_LOAN_CO_BORROWER.CoBorrowerID.asc())
		
		# if AsGurantor == "Y":
		# 	# Guarantor : Person who guarantor the loan.
		# 	return "G"

		# elif AsGurantor == "N":
		# 	FilterCoBorrower =  CoBorrowerObj.first()
		# 	if FilterCoBorrower:
		# 		if FilterCoBorrower.CoBorrowerID == CoBorrowerID:
		# 			return "P"
		# 		else:
		# 			FilterCoBorrower = CoBorrowerObj.limit(2)
		# 			for row in FilterCoBorrower:
		# 				if row.CoBorrowerID == CoBorrowerID:
		# 					return "P"
		# 			return "S"
		# 	else:
		# 		return "P"
		# else:
		# 	return ""

def formatGender(Gender,**kwarg):
	if 'Vlookup' in kwarg:
		if Gender == "M":
			return "Male"
		else:
			return "Female"
	return Gender[:1]

def formatMaritalStatus(MaritalStatus,**kwarg):
	if 'Vlookup' in kwarg:
		DicMaritalStatus = {
			'M' : 'Married',
			'S' : 'Single',
			'D' : 'Divorced',
			'W' : 'Widow / Widower',
			'P' : 'Separated',
			'F' : 'Defacto',
			'U' : 'Unknown'
		}
		if MaritalStatus in DicMaritalStatus:
			return DicMaritalStatus[MaritalStatus]
		else:
			return ""

	DicMaritalStatus = {
		'1' : 'M',
		'2' : 'S',
		'3' : 'D',
		'4' : 'W',
		'5' : 'W',
		'6' : 'P',
		'7' : 'F',
		'8' : 'U'
	}
	if MaritalStatus in DicMaritalStatus:
		return DicMaritalStatus[MaritalStatus]
	else:
		return ""

def formatDateCBC(Date,**kwarg):
	return ''.join(list(reversed(Date.split('-'))))

def isRestructureLoan(LoanID,**kwarg):
	'''
	VB format
	N = Normal
	R = Restructured
	CBC format
	Y = Restructured loan
	N = Not restructured loan
	'''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanType = str(RowObj.LoanType)
		if LoanType == "N":
			return "N"
		else:
			return "Y"
	return "Restructured loan not found"

@app.route('/Morakot/CBCTestConnection/', methods=['GET','POST'])
def CBCTestConnection():
	"""
		This function use to test connection width CBC.
		Args :
			None
		Return :
			
			1. return Form
				- In if condition when access the url: /Morakot/CBCTestConnection/ or method==GET
				- Return body of form 
			
			2. return Form 
				- In else condition whe click "CBC Connection Test" button or method ==POST
				- Return message of connection to Form
		Raise :
			None
		Example :
			None
	"""
	if request.method=="GET":
		Form 	= """<html>
						<head>
							<title>Test CBC Connection</title>
						</head>
						<body>
							<form action="/Morakot/CBCTestConnection/" method="POST" style ="width:500px; margin:auto;">
								<input type="text" name ="Url" placeholder="*Url" style="width:500px;"/>
								</br>
								</br>
								<input type="text" name ="User"  placeholder="*Username"/>
								</br>
								</br>
								<input type="text" name ="Password" placeholder="*Password"/>
								</br>
								</br>
								<input type="text" name ="Proxy" placeholder="proxy"/>
								</br>
								</br>
								<input type="submit" value="CBC Connection Test"/>
							</form>
						</body>
					</html>"""

		return Form
	else :
		
		Url 		= request.form.get("Url")
		# Url doesn't allow left white space
		Url 		= Url.lstrip()
		User 		= request.form.get("User")
		Password 	= request.form.get("Password")
		Proxy 		= request.form.get("Proxy")
		Message 	= None
		Status 		= None

		if Url and User and Password:

			Request 	= requests.get(Url,auth=HTTPBasicAuth(User, Password), proxies=Proxy,verify=False)
			Status 		= Request.status_code

		if Status == 200 :

			Message 	= "Connection Successful"

		elif Status == 401 :

			Message 	= "Invalid User or Password"
		elif Status == 404 :

			Message 	= "Url not found"
		else :
			Message 	=	"Error"

		Form 	= """<html>
					<head>
						<title>Test CBC Connection</title>
					</head>
					<body>
						<form action="/Morakot/CBCTestConnection/" method="Get" style ="width:500px; margin:auto;">
							<lable name ="Status" style="color:blue;">Status Code:%s</label>
							</br>
							</br>
							<lable name ="Message">Message:%s</label>
							</br>
							</br>
							<input type="submit" value="Back"/>
						</form>
					</body>	
				</html>"""%(Status,Message)

		return Form 
#ContactNumberType: O is Office, F is Fax, H is Home, M is Mobile, U is Unknown type
ListContactNumberType = ['O','F','H','M','U']
ListAreaNumber = ['023','024','025','026','032','033','034','035','036','042','043','044','052',
					'053','054','055','062','063','064','065','072','073','074','074','075']
def getContactNumberType(LoanID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID, 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID, 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_LOAN_CONTRACT_HIST.ContractCustomerID)).first()

	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "U"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return "H"
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return "M"

def getContactNumberArea(LoanID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID, 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID, 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_LOAN_CONTRACT_HIST.ContractCustomerID)).first()
	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return ""
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Prefix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return ""

def getContactNumberNumber(LoanID, **kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID.label('ContactID'), 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID.label('ContactID'), 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(RowObj.LoanID+'%')).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT_HIST.ContractCustomerID).first()

	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "000"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Postfix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return Mobile

def getContactNumberType2(LoanID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID, 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile2,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID, 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile2,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_LOAN_CONTRACT_HIST.ContractCustomerID)).first()

	Mobile = CustomerObj.Mobile2
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "U"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return "H"
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return "M"

def getContactNumberArea2(LoanID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID, 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile2,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID, 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile2,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_LOAN_CONTRACT_HIST.ContractCustomerID)).first()
	Mobile = CustomerObj.Mobile2
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return ""
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Prefix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return ""

def getContactNumberNumber2(LoanID, **kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID.label('ContactID'), 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile2,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID.label('ContactID'), 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile2,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(RowObj.LoanID+'%')).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT_HIST.ContractCustomerID).first()

	Mobile = CustomerObj.Mobile2
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "000"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Postfix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return Mobile

def getContactNumberType3(LoanID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID, 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile3,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID, 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile3,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_LOAN_CONTRACT_HIST.ContractCustomerID)).first()

	Mobile = CustomerObj.Mobile3
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "U"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return "H"
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return "M"

def getContactNumberArea3(LoanID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID, 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile3,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID, 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile3,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_LOAN_CONTRACT_HIST.ContractCustomerID)).first()
	Mobile = CustomerObj.Mobile3
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return ""
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Prefix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return ""

def getContactNumberNumber3(LoanID, **kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID.label('ContactID'), 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile3,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID.label('ContactID'), 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile3,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(RowObj.LoanID+'%')).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT_HIST.ContractCustomerID).first()

	Mobile = CustomerObj.Mobile3
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "000"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Postfix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return Mobile

def getEmployerAddressKH(LoanID, **kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)

	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID.label('ContactID'), 
									MKT_CUSTOMER.ID, 
									MKT_PROVINCE.LocalDescription.label('Province'), 
									MKT_DISTRICT.LocalDescription.label('District'), 
									MKT_COMMUNE.LocalDescription.label('Commune'), 
									MKT_VILLAGE.LocalDescription.label('Village'), 
								).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
								join(MKT_PROVINCE,MKT_PROVINCE.ID==MKT_CUSTOMER.EmployerProvince).\
								join(MKT_DISTRICT,MKT_DISTRICT.ID==MKT_CUSTOMER.EmployerDistrict).\
								join(MKT_COMMUNE,MKT_COMMUNE.ID==MKT_CUSTOMER.EmployerCommune).\
								join(MKT_VILLAGE,MKT_VILLAGE.ID==MKT_CUSTOMER.EmployerVillage).\
								filter(MKT_LOAN_CONTRACT.ID==LoanID).\
								first()
	if not CustomerObj:
		CustomerObj = db.session.query(
										MKT_LOAN_CONTRACT_HIST.ID.label('ContactID'), 
										MKT_CUSTOMER.ID, 
										MKT_PROVINCE.LocalDescription.label('Province'), 
										MKT_DISTRICT.LocalDescription.label('District'), 
										MKT_COMMUNE.LocalDescription.label('Commune'), 
										MKT_VILLAGE.LocalDescription.label('Village'), 
									).\
									join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT_HIST.ContractCustomerID).\
									join(MKT_PROVINCE,MKT_PROVINCE.ID==MKT_CUSTOMER.EmployerProvince).\
									join(MKT_DISTRICT,MKT_DISTRICT.ID==MKT_CUSTOMER.EmployerDistrict).\
									join(MKT_COMMUNE,MKT_COMMUNE.ID==MKT_CUSTOMER.EmployerCommune).\
									join(MKT_VILLAGE,MKT_VILLAGE.ID==MKT_CUSTOMER.EmployerVillage).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID + '%')).\
									first()
	if CustomerObj:
		Address = "%s %s %s %s " %(CustomerObj.Province, CustomerObj.District, CustomerObj.Commune, CustomerObj.Village)
		return Address

	return ""

def getEmployerAddressEN(LoanID, **kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)

	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID.label('ContactID'), 
									MKT_CUSTOMER.ID, 
									MKT_PROVINCE.Description.label('Province'), 
									MKT_DISTRICT.Description.label('District'), 
									MKT_COMMUNE.Description.label('Commune'), 
									MKT_VILLAGE.Description.label('Village'), 
								).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
								join(MKT_PROVINCE,MKT_PROVINCE.ID==MKT_CUSTOMER.EmployerProvince).\
								join(MKT_DISTRICT,MKT_DISTRICT.ID==MKT_CUSTOMER.EmployerDistrict).\
								join(MKT_COMMUNE,MKT_COMMUNE.ID==MKT_CUSTOMER.EmployerCommune).\
								join(MKT_VILLAGE,MKT_VILLAGE.ID==MKT_CUSTOMER.EmployerVillage).\
								filter(MKT_LOAN_CONTRACT.ID==LoanID).\
								first()
	if not CustomerObj:
		CustomerObj = db.session.query(
										MKT_LOAN_CONTRACT_HIST.ID.label('ContactID'), 
										MKT_CUSTOMER.ID, 
										MKT_PROVINCE.Description.label('Province'), 
										MKT_DISTRICT.Description.label('District'), 
										MKT_COMMUNE.Description.label('Commune'), 
										MKT_VILLAGE.Description.label('Village'), 
									).\
									join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT_HIST.ContractCustomerID).\
									join(MKT_PROVINCE,MKT_PROVINCE.ID==MKT_CUSTOMER.EmployerProvince).\
									join(MKT_DISTRICT,MKT_DISTRICT.ID==MKT_CUSTOMER.EmployerDistrict).\
									join(MKT_COMMUNE,MKT_COMMUNE.ID==MKT_CUSTOMER.EmployerCommune).\
									join(MKT_VILLAGE,MKT_VILLAGE.ID==MKT_CUSTOMER.EmployerVillage).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID + '%')).\
									first()

	if CustomerObj:
		Address = "%s, %s, %s, %s " %(CustomerObj.Province, CustomerObj.District, CustomerObj.Commune, CustomerObj.Village)
		return Address

	return ""

def getPaymentTransaction():
	PDCharge 		= mktsetting.getAppSetting('PDCharge')
	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')
	AccSetting 		= mktsetting.getAccSetting()
	ChargeTran 		= AccSetting.ChargeTran
	InterestTran 	= AccSetting.InterestTran
	PrincipalTran 	= AccSetting.PrincipalTran
	PenaltyTran 	= AccSetting.PenaltyTran
	return [PrincipalTran,InterestTran,ChargeTran,PDPrincipal,PDInterest,PDCharge,PenaltyTran]

# def getIPServer():
# 	AppSettingObj 	= mktsetting.getAppSetting('ALL','ALL')
# 	Url 			= AppSettingObj.get('CBCConnectionUrl')
# 	IPServerLive 	= AppSettingObj.get('IP_SERVER_LIVE')
# 	AppSetting 		= MKT_APP_SETTING.query.get('CBCConnectionUrl')
# 	Host 			= request.host
# 	print 'test',Host.split(':')[0],IPServerLive.Value.split()

# 	if Host.split(':')[0] not in IPServerLive.Value.split():
# 		AppSetting.Value 	='https://uat.creditbureaucambodia.com.kh/enquiry/inthttp.pgm'
# 		db.session.add(AppSetting)
# 		db.session.commit()
# 		flash('We have change CBC Url Live to UAT. Please config CBC AppSetting to use CBC Enquiry')	

def getMaxNumDayDueInCurrentMonth(ID):
	NumDayDue = ''
	AsOfDate = mktdate.getBankDate() - timedelta(days=1)
	AsOfDate = str(AsOfDate)[:7]
	PDDateObj 	= MKT_PD_DATE.query.filter(MKT_PD_DATE.ID.ilike('%'+ID)).\
									filter(MKT_PD_DATE.DueDate.ilike(AsOfDate + '%')).\
									filter(MKT_PD_DATE.NumDayDue != '').\
									order_by(MKT_PD_DATE.DueDate.asc(),
											MKT_PD_DATE.NumDayDue.desc()).\
									limit(1).first()
	if PDDateObj:
		NumDayDue=str(PDDateObj.NumDayDue)

	return NumDayDue

def isServer():
	try:
		IP 			= 	MKT_APP_SETTING.query.get('IP_LIVE_SERVER')
		Domain 	 	= 	MKT_APP_SETTING.query.get('DOMAIN')
		ServerName 	=	MKT_APP_SETTING.query.get('SERVER_NAME')
		CBCConnUrl 	=	MKT_APP_SETTING.query.get('CBCConnectionUrl')

		LocalIP	=	request.host
		IP =	IP.Value
		ServerName = ServerName.Value
		LocalIP =	LocalIP.split(':')[0]
		LocalServer = socket.gethostname()
		if IP and ServerName:
			if IP!=LocalIP and ServerName!=LocalServer:
				if "www." in CBCConnUrl.Value:
					msg = "Becareful! you are using address live of CBC.please change it to uat to prevent charging."
					return False,msg
				else:
					msg=""
					return True,msg
			else:
				msg=""
				return True,msg
		else:
			msg="Go CBC's app setting to fill some blank field on Server tab." 
			return False,msg
	except Exception as e:
		raise
