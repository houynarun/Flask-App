# -*- coding: utf-8 -*-
from app.mktcore.imports 		import *
from .forms 					import *
from flask 						import  make_response,Response,Markup,request
from decimal 					import *
from .models 					import *
from app.Customer.models 		import *
from app.LoanApplication.models import *
from app.LoanContract.models 	import *
from app.IdType.models 			import *
from app.LoanContract.models 	import *
from app.Province.models 		import *
from app.District.models 		import *
from app.Village.models 		import *
from app.Commune.models 		import *
from app.RepaymentSchedule.models import *
from app.PD.models 				import *
from app.Position.models 		import *
from app.Country.models 		import *
from app.Collateral.models 		import *
from app.Currency.models 		import MKT_CURRENCY
from app.LoanAmendment.models 	import MKT_LOAN_AMENDMENT
from app.Setting.models 		import MKT_APP_SETTING
from app.CBCAction.models 		import *
from operator 					import itemgetter
from app.AccEntry.models 		import *
from app.AssetClass.models 		import *
from app.LoanWriteOff.models 	import *

import app.tools.mktpdcollection as mktpdcollection
import app.tools.mktsetting 	as mktsetting
import app.tools.mkttool	 	as mkttool
import app.tools.mktmoney	 	as mktmoney
import app.tools.mktdb 			as mktdb
import app.tools.mktdate 		as mktdate
import xml.etree.cElementTree 	as ET
import collections
#DataUpload
import StringIO
import csv
import xlsxwriter
import json
import app.tools.mktsetting    	as mktsetting
from datetime  import datetime 
from .headers import *


# Declear for function getAccountType
CBCProvinceObj	= None
CBCDistrictObj 	= None
CBCCommuneObj 	= None
CBCScheduleObj 	= None
PDObj 			= None


@app.route("/Morakot/CBCLoanWriteOff")
@checkLogOutSession
@checkLogOutTime
def CBCLoanWriteOff():

	try:
		ErrorMsg = []
		getCheck 	= checkAccess ("/Morakot/CBCData/","Search")

		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		FromDate = request.args.get('FromDate')
		ToDate 	 = request.args.get('ToDate')
		Type 	 = request.args.get('Type')

		CheckDate, ErrorMsg = checkFromToDate(FromDate, ToDate)
		CheckDate = True
		MemberID = getCBCMemberID('')
		BankDate = mktdate.getBankDate()
		AsOfDate = mktdate.formatDate(str(BankDate),'MMYYYY')

		if CheckDate:

			if Type == 'Excel':

				ListHistID = getLoanWriteOffID(FromDate, ToDate)

				csvList = getCBCWriteOffData(ListHistID)

				return getExcelResponse(csvList)

			elif Type == 'CSV':

				ListHistID = getLoanWriteOffID(FromDate, ToDate)

				csvList = getCBCWriteOffData(ListHistID)

				return getCSVResponse(csvList)

		else:

			for msg in ErrorMsg:
				flash(msg)

		return render_template(
			"customer/cbc_data.html",
			FromDate=FromDate,
			ToDate=ToDate,
			MemberID=MemberID,
			AsOfDate=AsOfDate
		 )

	except Exception, e:
		raise 

def checkFromToDate(FromDate, ToDate):

	ErrorMsg = []
	FromDateISO = mktdate.isDateISO(FromDate)
	ToDateISO = mktdate.isDateISO(ToDate)

	if not FromDateISO:
		ErrorMsg.append('%s %s' %(msg_error, 'Wrong From Date format YYYY-MM-DD'))

	if not ToDateISO:
		ErrorMsg.append('%s %s' %(msg_error, 'Wrong To Date format YYYY-MM-DD'))

	if FromDateISO and ToDateISO:
		if ToDate <= FromDate:
			ErrorMsg.append('%s %s' %(msg_error, 'To Date must be bigger than From Date'))
		else:
			return True, ''

	return False, ErrorMsg


def getLoanWriteOffID(FromDate, ToDate):
	
	if FromDate and ToDate:
		LoanWriteOffObj 	= db.session.query(MKT_LOAN_MATURITY.ID.label('LoanID')).\
											outerjoin(MKT_WRITE_OFF_DE, MKT_WRITE_OFF_DE.ID==MKT_LOAN_MATURITY.ID).\
											filter(MKT_WRITE_OFF_DE.WOFDate.between(FromDate, ToDate)).\
											filter(MKT_LOAN_MATURITY.LoanStatus=='WOF')

		LoanRecoverdObj 	= db.session.query(MKT_LOAN_MATURITY.ID.label('LoanID')).\
											outerjoin(MKT_LOAN_RECOVERY, MKT_LOAN_RECOVERY.LoanID==MKT_LOAN_MATURITY.ID).\
											filter(MKT_LOAN_RECOVERY.TransactionDate.between(FromDate, ToDate)).\
											filter(MKT_LOAN_MATURITY.LoanStatus=='WOF')

		ListLoanWriteOffObj 	= LoanWriteOffObj.union(LoanRecoverdObj).subquery()
		ListLoanWriteOffObj = db.session.query(ListLoanWriteOffObj.c.LoanID.label('LoanID')).distinct(ListLoanWriteOffObj.c.LoanID).all()
	else:
		ListLoanWriteOffObj 	= db.session.query(MKT_LOAN_MATURITY.ID.label('LoanID')).\
										filter(MKT_LOAN_MATURITY.LoanStatus=='WOF').all()

	ListHistID = []
	for LoanTerminateObj in ListLoanWriteOffObj:
		if LoanTerminateObj:
			ID = LoanTerminateObj.LoanID
			Curr = db.session.query(MKT_LOAN_CONTRACT_HIST.ID).\
					filter(MKT_LOAN_CONTRACT_HIST.ID.like(ID+"%")).\
					count()
			if Curr > 0:
				Curr -= 1

			# HistID = '%s@%s' % (ID, Curr)
			ListHistID.append((ID, Curr))

	return ListHistID


def getCSVResponse(ListData):

	#Create file csv
	StrIO = StringIO.StringIO()
	CSVWrite = csv.writer(StrIO)
	index = 1

	for row in ListData:
		row[0] = index
		CSVWrite.writerow(row)
		index += 1

	MemberID = getCBCMemberID('')
	BankDate = mktdate.getBankDate()
	AsOfDate = mktdate.formatDate(str(BankDate),'MMYYYY')
	# We need to modify the response, so the first thing we 
	# need to do is create a response out of the CSV string
	response = make_response(StrIO.getvalue())
	# This is the key: Set the right header for the response
	# to be downloaded, instead of just printed on the browser
	response.headers['Cache-Control'] = 'no-cache'
	response.headers["Content-Disposition"] = "attachment; filename=%s%s.csv"%(MemberID,AsOfDate)
	response.headers["Content-type"] = "text/csv; charset=utf-8"
	StrIO.close()

	return response

def getExcelResponse(ListData):

	row = 1
	col = 0
	index = 1
	col_index = 0
	HeaderList = getHeaderOfCBC()

	MemberID = getCBCMemberID('')
	BankDate = mktdate.getBankDate()
	AsOfDate = mktdate.formatDate(str(BankDate),'MMYYYY')

	output = StringIO.StringIO()
	workbook = xlsxwriter.Workbook(output, {'in_memory': True})
	worksheet = workbook.add_worksheet('%s%s' % (MemberID, AsOfDate))

	for Key in HeaderList:
		worksheet.write(0,col_index, HeaderList[Key].decode('utf-8').strip())
		col_index +=1

	for data in ListData:
		data[0] = index

		for i in data:
			if isinstance(i, str):
				i = unicode(i, 'utf-8')
			worksheet.write(row, col, i)
			col+=1

		index += 1
		row+=1
		col=0

	workbook.close()

	response = make_response(output.getvalue())
	# This is the key: Set the right header for the response
	# to be downloaded, instead of just printed on the browser
	response.headers['Cache-Control'] = 'no-cache'
	response.headers["Content-Disposition"] = "attachment; filename=%s%s.xlsx" % (MemberID, AsOfDate)
	response.headers["Content-type"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=utf-8"

	return response

def generateCBCData(ListQuery, FieldInTable):

	csvList = []
	index = 1

	for row in ListQuery:
		RowRecord=[index]
		ColRecord = []
		for col in FieldInTable:
			FieldName = col['FieldName']
			if hasattr(row, FieldName):
				if 'Function' in col:
					Function = col['Function']
					Result = Function(getattr(row,FieldName))
				else:
					Result = getattr(row,FieldName)
				if mkttool.isString(Result):
					if mkttool.isUnicode(Result):
						RowRecord.append(Result.encode('utf-8'))
						ColRecord = []
					else:
						RowRecord.append(str(Result if Result else ''))
						ColRecord = []
				else:
					RowRecord.append(Result if Result else 0)
					ColRecord = []
			else:
				FieldName 	= col['FieldName']
				Result 		= col['Value'] if 'Value' in col else ''
				if 'SkipColumn' == FieldName:
					for item in range(0,Result):
						RowRecord.append('')
						ColRecord = []
				elif 'Function' in col:
					Function = col['Function']
					Result = Function('',RowObj=row)

					if mkttool.isString(Result):
						if mkttool.isUnicode(Result):
							RowRecord.append(Result.encode('utf-8'))
							ColRecord = []
						else:
							RowRecord.append(str(Result if Result else ''))	
							ColRecord = []
					else:
						RowRecord.append(Result if Result else 0)
						ColRecord = []
				else:
					if mkttool.isString(Result):
						if mkttool.isUnicode(Result):
							RowRecord.append(Result.encode('utf-8'))
							ColRecord = []
						else:
							RowRecord.append(str(Result if Result else ''))	
							ColRecord = []
					else:
						RowRecord.append(Result if Result else 0)
						ColRecord = []
		csvList.append(RowRecord)
		ColRecord = []
		index+=1

	return csvList

def getListQuery(**kwargs):

	FromDate = kwargs.get("FromDate","")
	ToDate 	 = kwargs.get("ToDate","")

	QueryObj = db.session.query(MKT_LOAN_CONTRACT.ID.label('LoanID'),
								MKT_LOAN_CONTRACT.ContractCustomerID.label('Customer'),
								MKT_LOAN_CONTRACT.LoanApplicationID,
								MKT_LOAN_CONTRACT.ValueDate,
								MKT_LOAN_CONTRACT.LoanProduct,
								MKT_LOAN_CONTRACT.LoanPurpose,
								MKT_LOAN_CONTRACT.Currency,
								MKT_LOAN_CONTRACT.Disbursed,
								MKT_LOAN_CONTRACT.Amount.label('LoanBalance'),
								MKT_LOAN_CONTRACT.AssetClass,
								MKT_LOAN_CONTRACT.LoanType,
								MKT_LOAN_CONTRACT.FreqType,
								MKT_LOAN_CONTRACT.OutstandingAmount,
								MKT_LOAN_CONTRACT.MaturityDate,
								MKT_LOAN_CONTRACT.Term,
								MKT_LOAN_CONTRACT.MoreThanOneYear,
								MKT_CUSTOMER.IDType,
								MKT_CUSTOMER.IDNumber,
								MKT_CUSTOMER.ExpiryDate,
								MKT_CUSTOMER.DateOfBirth,
								MKT_CUSTOMER.CountryOfBirth.label('Country'),
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_CUSTOMER.Gender,
								MKT_CUSTOMER.MaritalStatus,
								MKT_CUSTOMER.Nationality,
								MKT_CUSTOMER.Province,
								MKT_CUSTOMER.District,
								MKT_CUSTOMER.Commune,
								MKT_CUSTOMER.Village,
								MKT_CUSTOMER.City,
								MKT_CUSTOMER.Email,
								MKT_CUSTOMER.Mobile1,
								MKT_CUSTOMER.EmployerType,
								MKT_CUSTOMER.SelfEmployed,
								MKT_CUSTOMER.AsGurantor,
								MKT_CUSTOMER.Currency.label('CurrencyIncome'),
								MKT_CUSTOMER.MonthlyIncome
								).\
						join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
						order_by(MKT_LOAN_CONTRACT.ID.asc())

	QueryObjCoBorrow = db.session.query(MKT_LOAN_CO_BORROWER.ID.label('LoanID'),
								MKT_LOAN_CO_BORROWER.CoBorrowerID.label('Customer'),
								MKT_LOAN_CONTRACT.LoanApplicationID,
								MKT_LOAN_CONTRACT.ValueDate,
								MKT_LOAN_CONTRACT.LoanProduct,
								MKT_LOAN_CONTRACT.LoanPurpose,
								MKT_LOAN_CONTRACT.Currency,
								MKT_LOAN_CONTRACT.Disbursed,
								MKT_LOAN_CONTRACT.Amount.label('LoanBalance'),
								MKT_LOAN_CONTRACT.AssetClass,
								MKT_LOAN_CONTRACT.LoanType,
								MKT_LOAN_CONTRACT.FreqType,
								MKT_LOAN_CONTRACT.OutstandingAmount,
								MKT_LOAN_CONTRACT.MaturityDate,
								MKT_LOAN_CONTRACT.Term,
								MKT_LOAN_CONTRACT.MoreThanOneYear,
								MKT_CUSTOMER.IDType,
								MKT_CUSTOMER.IDNumber,
								MKT_CUSTOMER.ExpiryDate,
								MKT_CUSTOMER.CountryOfBirth.label('Country'),
								MKT_CUSTOMER.DateOfBirth,
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_CUSTOMER.Gender,
								MKT_CUSTOMER.MaritalStatus,
								MKT_CUSTOMER.Nationality,
								MKT_CUSTOMER.Province,
								MKT_CUSTOMER.District,
								MKT_CUSTOMER.Commune,
								MKT_CUSTOMER.Village,
								MKT_CUSTOMER.City,
								MKT_CUSTOMER.Email,
								MKT_CUSTOMER.Mobile1,
								MKT_CUSTOMER.EmployerType,
								MKT_CUSTOMER.SelfEmployed,
								MKT_CUSTOMER.AsGurantor,
								MKT_CUSTOMER.Currency.label('CurrencyIncome'),
								MKT_CUSTOMER.MonthlyIncome
								).\
						join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID==MKT_LOAN_CO_BORROWER.ID).\
						join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CO_BORROWER.CoBorrowerID).\
						order_by(MKT_LOAN_CONTRACT.ID.asc())

	QueryObjGuarantor = db.session.query(MKT_GUARANTOR.ID.label('LoanID'),
								MKT_GUARANTOR.Guarantor.label('Customer'),
								MKT_LOAN_CONTRACT.LoanApplicationID,
								MKT_LOAN_CONTRACT.ValueDate,
								MKT_LOAN_CONTRACT.LoanProduct,
								MKT_LOAN_CONTRACT.LoanPurpose,
								MKT_LOAN_CONTRACT.Currency,
								MKT_LOAN_CONTRACT.Disbursed,
								MKT_LOAN_CONTRACT.Amount.label('LoanBalance'),
								MKT_LOAN_CONTRACT.AssetClass,
								MKT_LOAN_CONTRACT.LoanType,
								MKT_LOAN_CONTRACT.FreqType,
								MKT_LOAN_CONTRACT.OutstandingAmount,
								MKT_LOAN_CONTRACT.MaturityDate,
								MKT_LOAN_CONTRACT.Term,
								MKT_LOAN_CONTRACT.MoreThanOneYear,
								MKT_CUSTOMER.IDType,
								MKT_CUSTOMER.IDNumber,
								MKT_CUSTOMER.ExpiryDate,
								MKT_CUSTOMER.CountryOfBirth.label('Country'),
								MKT_CUSTOMER.DateOfBirth,
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_CUSTOMER.Gender,
								MKT_CUSTOMER.MaritalStatus,
								MKT_CUSTOMER.Nationality,
								MKT_CUSTOMER.Province,
								MKT_CUSTOMER.District,
								MKT_CUSTOMER.Commune,
								MKT_CUSTOMER.Village,
								MKT_CUSTOMER.City,
								MKT_CUSTOMER.Email,
								MKT_CUSTOMER.Mobile1,
								MKT_CUSTOMER.EmployerType,
								MKT_CUSTOMER.SelfEmployed,
								MKT_CUSTOMER.AsGurantor,
								MKT_CUSTOMER.Currency.label('CurrencyIncome'),
								MKT_CUSTOMER.MonthlyIncome
								).\
						join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID==MKT_GUARANTOR.ID).\
						join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_GUARANTOR.Guarantor).\
						order_by(MKT_LOAN_CONTRACT.ID.asc())

	if FromDate and ToDate:
		QueryObj = QueryObj.filter(MKT_LOAN_CONTRACT.ValueDate >= str(FromDate)).\
							filter(MKT_LOAN_CONTRACT.ValueDate <= str(ToDate))

		QueryObjCoBorrow = QueryObjCoBorrow.\
							filter(MKT_LOAN_CONTRACT.ValueDate >= str(FromDate)).\
							filter(MKT_LOAN_CONTRACT.ValueDate <= str(ToDate))

		QueryObjGuarantor = QueryObjGuarantor.\
							filter(MKT_LOAN_CONTRACT.ValueDate >= str(FromDate)).\
							filter(MKT_LOAN_CONTRACT.ValueDate <= str(ToDate))

	ListQuery = QueryObj.all()
	ListQuery.extend(QueryObjCoBorrow.all())

	for row in ListQuery:
		row.ApplicantType = 'P'
	ListGuarantor = QueryObjGuarantor.all()

	for row in ListGuarantor:
		row.ApplicantType = 'G'

	ListQuery.extend(ListGuarantor)

	return ListQuery

def generateFieldInTable():

	FieldInTable = []

	FieldInTable.append({'FieldName':'IDType'})
	FieldInTable.append({'FieldName':'IDNumber'})
	FieldInTable.append({'FieldName':'ExpiryDate'		,'Function':formatDateCBC})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':6})
	FieldInTable.append({'FieldName':'DateOfBirth'		,'Function':formatDateCBC})
	FieldInTable.append({'FieldName':'LastNameEn'		})
	FieldInTable.append({'FieldName':'FirstNameEn'		})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':2})
	FieldInTable.append({'FieldName':'Unformatted En'	,'Function':getUnformattedEn})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	FieldInTable.append({'FieldName':'LastNameKh'		})
	FieldInTable.append({'FieldName':'FirstNameKh'		})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':2})
	FieldInTable.append({'FieldName':'Unformatted Kh'	,'Function':getUnformattedKh})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	FieldInTable.append({'FieldName':'Gender'			,'Function':formatGender})
	FieldInTable.append({'FieldName':'MaritalStatus'	,'Function':formatMaritalStatus})
	FieldInTable.append({'FieldName':'Nationality'		,'Function':formatCountry})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	FieldInTable.append({'FieldName':'ApplicantType'})
	FieldInTable.append({'FieldName':'AddressType'		,'Value':'RESID'})
	FieldInTable.append({'FieldName':'Province'})
	FieldInTable.append({'FieldName':'District'})
	FieldInTable.append({'FieldName':'Commune'})
	FieldInTable.append({'FieldName':'Village'})
	# FieldInTable.append({'FieldName':'SkipColumn'		,'Value':4}) # Province  District Commune Village
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	# FieldInTable.append({'FieldName':'AddressField'		,'Function':getAddressField}) # optional 
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':3})
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	# FieldInTable.append({'FieldName':'City'				}) # change to City Code optional unless AddressType = POST
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':1})
	FieldInTable.append({'FieldName':'Country'			,'Function':formatCountry})# col 40
	FieldInTable.append({'FieldName':'SkipColumn'		,'Value':27})
	FieldInTable.append({'FieldName':'Email'			})
	# FieldInTable.append({'FieldName':'Phone Type'			,'Value':'M'})
	FieldInTable.append({'FieldName':'Phone Type'			,'Function':getContactNumberType})
	FieldInTable.append({'FieldName':'Phone Country Code'	,'Value':'855'})
	# FieldInTable.append({'FieldName':'SkipColumn'			,'Value':1})
	FieldInTable.append({'FieldName':'Phone Number Area'			,'Function':getContactNumberArea})
	FieldInTable.append({'FieldName':'Phone Number'				,'Function':getContactNumberNumber})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':11})
	FieldInTable.append({'FieldName':'EmployerType'			})
	FieldInTable.append({'FieldName':'SelfEmployed'			})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':19})
	FieldInTable.append({'FieldName':'CurrencyIncome'})
	# FieldInTable.append({'FieldName':'SkipColumn'			,'Value':1})
	FieldInTable.append({'FieldName':'MonthlyIncome', 'Function': formatNumberCBC})
	FieldInTable.append({'FieldName':'SkipColumn'			,'Value':49})
	FieldInTable.append({'FieldName':'Creditor ID'			,'Function':getCBCMemberID})
	FieldInTable.append({'FieldName':'Account Type'			,'Function':getAccountType})
	FieldInTable.append({'FieldName':'Group Account Ref'	,'Function':GroupAccountRef})
	FieldInTable.append({'FieldName':'LoanID'})
	FieldInTable.append({'FieldName':'ValueDate' 			,'Function':formatDateCBC})
	FieldInTable.append({'FieldName':'Product Type' 		,'Function':getProductTypeCBC})
	FieldInTable.append({'FieldName':'Currency'})
	FieldInTable.append({'FieldName':'Disbursed'			,'Function':formatNumberCBC})
	FieldInTable.append({'FieldName':'Maturity Date' 		, 'Function':getMaturityDate})
	FieldInTable.append({'FieldName':'Product Status'		,'Function':getProductStatus}) # no reject
	FieldInTable.append({'FieldName':'Restructure Loan'		,'Function':isRestructureLoan})
	FieldInTable.append({'FieldName':'Instalment Amount'	,'Function':getInstalmentAmount})
	FieldInTable.append({'FieldName':'Payment Frequency'	,'Function':getFreqType})
	FieldInTable.append({'FieldName':'Term'})
	FieldInTable.append({'FieldName':'Last Payment Date'	,'Function':getLastPaymentDate})
	FieldInTable.append({'FieldName':'Last Payment Amount'	,'Function':getLastPaymentAmount})
	FieldInTable.append({'FieldName':'Security Type'		,'Function':getSecurityType})
	FieldInTable.append({'FieldName':'Outstanding Amount'	,'Function':formatOutstandingCBC})
	FieldInTable.append({'FieldName':'Past Due Amount'		,'Function':getPastDueAmount})
	FieldInTable.append({'FieldName':'Next Payment Date'	,'Function':getNextPaymentDate})
	FieldInTable.append({'FieldName':'Payment Status'		,'Function':getPaymentStatus})
	FieldInTable.append({'FieldName':'As Of Date'			,'Function':getAsOfDate})
	FieldInTable.append({'FieldName':'Write Off Status'		,'Function':getWriteOffStatus})
	FieldInTable.append({'FieldName':'Write Off Status Date','Function':getWriteOffStatusDate})
	FieldInTable.append({'FieldName':'Write Off Original Amount as at Load Date' ,'Function':getWriteOffOriginalAmount})
	FieldInTable.append({'FieldName':'Write Off Outstanding Balance' ,'Function':getWriteOffOutBalance})
	# FieldInTable.append({'FieldName':'SkipColumn'			,'Value':4})

	return FieldInTable

def clearGobalVar():

	#Clear Global Variable
	global CBCProvinceObj
	global CBCDistrictObj
	global CBCCommuneObj
	global CBCScheduleObj
	global PDObj

	CBCProvinceObj	= None
	CBCDistrictObj 	= None
	CBCCommuneObj 	= None
	CBCScheduleObj 	= None

def generateDictFromObj(Obj):

	if Obj:

		ObjFields = dir(Obj)

		NeedFields = []

		ExcludeFields = ['count', 'index', 'keys']

		for field in ObjFields:
			if not field.startswith('_') and field not in ExcludeFields:
				NeedFields.append(field)

		ObjDict = {}

		for field in NeedFields:
			ObjDict[field] = getattr(Obj, field)

		return ObjDict

	else:

		return {}

def generateObjFromDict(Dict):

	class DummyClass(object):
		pass

	Obj = DummyClass()

	for key, val in Dict.iteritems():
		setattr(Obj, key, val)

	return Obj

def getCBCWriteOffData(ListLoanID):

	ListID = [u'%s@%s' % (x[0], x[1]) for x in ListLoanID]

	QueryObj = db.session.query(MKT_LOAN_CONTRACT_HIST.ID.label('LoanID'),
								MKT_LOAN_CONTRACT_HIST.ContractCustomerID.label('Customer'),
								MKT_LOAN_CONTRACT_HIST.LoanApplicationID,
								MKT_LOAN_CONTRACT_HIST.ValueDate,
								MKT_LOAN_CONTRACT_HIST.LoanProduct,
								MKT_LOAN_CONTRACT_HIST.LoanPurpose,
								MKT_LOAN_CONTRACT_HIST.Currency,
								MKT_LOAN_CONTRACT_HIST.Disbursed,
								MKT_LOAN_CONTRACT_HIST.Amount.label('LoanBalance'),
								MKT_LOAN_CONTRACT_HIST.AssetClass,
								MKT_LOAN_CONTRACT_HIST.LoanType,
								MKT_LOAN_CONTRACT_HIST.FreqType,
								MKT_LOAN_CONTRACT_HIST.OutstandingAmount,
								MKT_LOAN_CONTRACT_HIST.MaturityDate,
								MKT_LOAN_CONTRACT_HIST.Term,
								MKT_LOAN_CONTRACT_HIST.MoreThanOneYear,
								MKT_CUSTOMER.IDType,
								MKT_CUSTOMER.IDNumber,
								MKT_CUSTOMER.ExpiryDate,
								MKT_CUSTOMER.DateOfBirth,
								MKT_CUSTOMER.CountryOfBirth.label('Country'),
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_CUSTOMER.Gender,
								MKT_CUSTOMER.MaritalStatus,
								MKT_CUSTOMER.Nationality,
								MKT_CUSTOMER.Province,
								MKT_CUSTOMER.District,
								MKT_CUSTOMER.Commune,
								MKT_CUSTOMER.Village,
								MKT_CUSTOMER.City,
								MKT_CUSTOMER.Email,
								MKT_CUSTOMER.Mobile1,
								MKT_CUSTOMER.EmployerType,
								MKT_CUSTOMER.SelfEmployed,
								MKT_CUSTOMER.AsGurantor,
								MKT_CUSTOMER.Currency.label('CurrencyIncome'),
								MKT_CUSTOMER.MonthlyIncome
								).\
						join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT_HIST.ContractCustomerID).\
						filter(MKT_LOAN_CONTRACT_HIST.ID.in_(ListID)).\
						order_by(MKT_LOAN_CONTRACT_HIST.ID.asc())

	ListCoBorrow = []

	for ID,Curr in ListLoanID:

		HistID = '%s@%s' % (ID, Curr)

		LCHistObj = db.session.query(
										MKT_LOAN_CONTRACT_HIST.LoanApplicationID,
										MKT_LOAN_CONTRACT_HIST.ValueDate,
										MKT_LOAN_CONTRACT_HIST.LoanProduct,
										MKT_LOAN_CONTRACT_HIST.LoanPurpose,
										MKT_LOAN_CONTRACT_HIST.Currency,
										MKT_LOAN_CONTRACT_HIST.Disbursed,
										MKT_LOAN_CONTRACT_HIST.Amount.label('LoanBalance'),
										MKT_LOAN_CONTRACT_HIST.AssetClass,
										MKT_LOAN_CONTRACT_HIST.LoanType,
										MKT_LOAN_CONTRACT_HIST.FreqType,
										MKT_LOAN_CONTRACT_HIST.OutstandingAmount,
										MKT_LOAN_CONTRACT_HIST.MaturityDate,
										MKT_LOAN_CONTRACT_HIST.Term,
										MKT_LOAN_CONTRACT_HIST.MoreThanOneYear
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID == HistID).first()


		LCHistDict = generateDictFromObj(LCHistObj)

		CoBorrowObj = MKT_LOAN_CO_BORROWER_HIST.query.filter(MKT_LOAN_CO_BORROWER_HIST.ID == HistID)
		GurantorObj = MKT_GUARANTOR_HIST.query.filter(MKT_GUARANTOR_HIST.ID == HistID)

		Row = {}
		Row['Terminate'] = 'Y'

		LoanMaturityOrAdmentObj = MKT_LOAN_MATURITY.query.filter(MKT_LOAN_MATURITY.ID==ID).first()
		Row['TerminateDate'] = LoanMaturityOrAdmentObj.Date
		Row['LastPaidAmount'] = ''	#LoanMaturityOrAdmentObj.LastPaidAmount
		Row['InstallAmount'] = ''	#LoanMaturityOrAdmentObj.InstallAmount
		Row['TerminateID'] = HistID

		for Obj in CoBorrowObj:

			Row['LoanID'] = ID
			Row['Customer'] = Obj.CoBorrowerID

			CustomerObj = db.session.query(
											MKT_CUSTOMER.IDType,
											MKT_CUSTOMER.IDNumber,
											MKT_CUSTOMER.ExpiryDate,
											MKT_CUSTOMER.DateOfBirth,
											MKT_CUSTOMER.CountryOfBirth.label('Country'),
											MKT_CUSTOMER.FirstNameEn,
											MKT_CUSTOMER.LastNameEn,
											MKT_CUSTOMER.FirstNameKh,
											MKT_CUSTOMER.LastNameKh,
											MKT_CUSTOMER.Gender,
											MKT_CUSTOMER.MaritalStatus,
											MKT_CUSTOMER.Nationality,
											MKT_CUSTOMER.Province,
											MKT_CUSTOMER.District,
											MKT_CUSTOMER.Commune,
											MKT_CUSTOMER.Village,
											MKT_CUSTOMER.City,
											MKT_CUSTOMER.Email,
											MKT_CUSTOMER.Mobile1,
											MKT_CUSTOMER.EmployerType,
											MKT_CUSTOMER.SelfEmployed,
											MKT_CUSTOMER.AsGurantor,
											MKT_CUSTOMER.Currency.label('CurrencyIncome'),
											MKT_CUSTOMER.MonthlyIncome
										   ).\
										filter(MKT_CUSTOMER.ID == Obj.CoBorrowerID).first()

			CustomerObj.ApplicantType = 'P'
			CusDict    = generateDictFromObj(CustomerObj)
			Row.update(CusDict)
			Row.update(LCHistDict)

			if Row:
				RowObj = generateObjFromDict(Row)
				ListCoBorrow.append(RowObj)

		for Obj in GurantorObj:

				Row['LoanID'] = ID
				Row['Customer'] = Obj.Guarantor

				CustomerObj = db.session.query(
												MKT_CUSTOMER.IDType,
												MKT_CUSTOMER.IDNumber,
												MKT_CUSTOMER.ExpiryDate,
												MKT_CUSTOMER.DateOfBirth,
												MKT_CUSTOMER.CountryOfBirth.label('Country'),
												MKT_CUSTOMER.FirstNameEn,
												MKT_CUSTOMER.LastNameEn,
												MKT_CUSTOMER.FirstNameKh,
												MKT_CUSTOMER.LastNameKh,
												MKT_CUSTOMER.Gender,
												MKT_CUSTOMER.MaritalStatus,
												MKT_CUSTOMER.Nationality,
												MKT_CUSTOMER.Province,
												MKT_CUSTOMER.District,
												MKT_CUSTOMER.Commune,
												MKT_CUSTOMER.Village,
												MKT_CUSTOMER.City,
												MKT_CUSTOMER.Email,
												MKT_CUSTOMER.Mobile1,
												MKT_CUSTOMER.EmployerType,
												MKT_CUSTOMER.SelfEmployed,
												MKT_CUSTOMER.AsGurantor,
												MKT_CUSTOMER.Currency.label('CurrencyIncome'),
												MKT_CUSTOMER.MonthlyIncome
											   ).\
											filter(MKT_CUSTOMER.ID == Obj.Guarantor).first()
				CustomerObj.ApplicantType = 'G'
				CusDict    = generateDictFromObj(CustomerObj)

				Row.update(CusDict)
				Row.update(LCHistDict)

				if Row:
					RowObj = generateObjFromDict(Row)
					ListCoBorrow.append(RowObj)
	csvList = []
	ListQuery = QueryObj.all()
	ListLCObj = []

	for Obj in ListQuery:
		Row = generateDictFromObj(Obj)
		Row['TerminateID'] = Row['LoanID']
		Row['LoanID'] = Row['LoanID'].split('@')[0]
		Row['Terminate'] = 'Y'

		LoanMaturityOrAdmentObj = MKT_LOAN_MATURITY.query.filter(MKT_LOAN_MATURITY.ID==ID).first()
		Row['TerminateDate'] = LoanMaturityOrAdmentObj.Date
		Row['LastPaidAmount'] = ''	#LoanMaturityOrAdmentObj.LastPaidAmount
		Row['InstallAmount'] = ''	#LoanMaturityOrAdmentObj.InstallAmount
		Row['ApplicantType'] = 'P'
		RowObj = generateObjFromDict(Row)
		ListLCObj.append(RowObj)

	ListLCObj.extend(ListCoBorrow)
	FieldInTable = generateFieldInTable()
	csvList = generateCBCData(ListLCObj, FieldInTable)

	clearGobalVar()
	# Item 158 is the Account Number Field for Loan Contract
	# Sort by Account Number (Loan Contract)
	return sorted(csvList, key=itemgetter(158))


def getCBCData(**kwargs):

	ListQuery = getListQuery(**kwargs)
	FieldInTable = generateFieldInTable()
	csvList = generateCBCData(ListQuery, FieldInTable)

	clearGobalVar()

	# Item 158 is the Account Number Field for Loan Contract
	# Sort by Account Number (Loan Contract)
	return sorted(csvList, key=itemgetter(158))

def getUnformattedKh(ID,**kwarg):
	Name = ''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LastName 	= RowObj.LastNameKh
		FirstName = RowObj.FirstNameKh
		Name = '%s %s'%(LastName,FirstName)
	return Name

def getUnformattedEn(ID,**kwarg):
	Name= ''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LastName 	= RowObj.LastNameEn
		FirstName = RowObj.FirstNameEn
		Name = '%s %s'%(LastName,FirstName)

	return Name

def getEmployerType(EmployerType,**kwarg):
	DicEmployerType = {'C':'Current','P':'Previous'}
	if 'Vlookup' in kwarg:
		return DicEmployerType[EmployerType]
	else:
		return EmployerType

def getPaymentFrequency(Frequency,**kwarg):
	DicFrequency = {
	'W' : 'Weekly',
	'F' : 'Two Weekly',
	'M' : 'Monthly',
	'Q' : 'Quarterly',
	'H' : 'Half-yearly',
	'Y' : 'Yearly',
	'O' : 'Other'
	}
	if Frequency in DicFrequency:
		return DicFrequency[Frequency]
	else:
		return Frequency

def getSecurityType(SecurityType,**kwarg):

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = RowObj.LoanID
		LoanAppID = RowObj.LoanApplicationID

		CollateralObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanID).all()

		if not CollateralObj:
			CollateralObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanAppID).all()

		if CollateralObj:

			if len(CollateralObj) == 1:
				for row in CollateralObj:
					CollateralDe = MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==row.Collateral).first()
					if CollateralDe:
						CollateralType = CollateralDe.CollateralType
						return CollateralType
					else:
						return "NO"
			else:
				return "MP"
		else:

			return "NO"

	DicSecurityType = { 
		'CA'	: 'Cash',
		'GI'	: 'Guarantor',
		'MO'	: 'Mortgage',
		'NO'	: 'None',
		'OT'	: 'Others',
		'SH'	: 'Shares',
		'MP'	: 'Multiple',
		'FD'	: 'Fixed Deposit',
		'LT'	: 'Land Title',
		'TO'	: 'Ownership Title - Land/Buildings',
		'FB'	: 'Floating Debenture',
		'MV'	: 'Motor Vehicle',
		'IN'	: 'Inventory',
		'LC'	: 'Letter of Credit',
		'CG'	: 'Corporate Guarantees'}

	if SecurityType in DicSecurityType:
		return DicSecurityType[SecurityType]
	else:
		SecurityType

def getPaymentStatus(LoanID,**kwarg):
	return 'W'

def getNextPaymentDate(LoanID,**kwarg):
	return ""

def getPastDueAmount(LoanID,**kwarg):
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)

	QueryObj= MKT_PAST_DUE_HIST.query.filter(MKT_PAST_DUE_HIST.LoanID==LoanID).first()

	if QueryObj:
		if QueryObj.TotODAmount > 0:
			return formatNumberCBC(QueryObj.TotODAmount-QueryObj.TotPenaltyDue)

	return formatNumberCBC(0)

def getLastPaymentAmount(LoanID,**kwarg):

	PreviousInstallment = 0
	global CBCScheduleObj
	TransactionCode = getPaymentTransaction()

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
	Account = ''
	Amount = 0
	
	CBCLoanContractHistObj = MKT_LOAN_CONTRACT_HIST.query.get(RowObj.TerminateID)
	if CBCLoanContractHistObj:
		Account = CBCLoanContractHistObj.Account

	AccountObj = db.session.query(
									MKT_ACC_ENTRY.DebitCredit,
									MKT_ACC_ENTRY.TransactionDate,
									func.sum(MKT_ACC_ENTRY.Amount).label('Amount'),
								).filter(MKT_ACC_ENTRY.Account==Account).\
								filter(MKT_ACC_ENTRY.DebitCredit=='Dr').\
								filter(MKT_ACC_ENTRY.Transaction.in_(TransactionCode)).\
								filter(MKT_ACC_ENTRY.Reference.ilike('%'+RowObj.LoanID)).\
								group_by(MKT_ACC_ENTRY.DebitCredit, MKT_ACC_ENTRY.TransactionDate).\
								order_by(MKT_ACC_ENTRY.TransactionDate.desc()).first()

	if AccountObj:
		RepaymentScheduleObj = db.session.query(MKT_REP_SCHEDULE).\
											filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
											order_by(MKT_REP_SCHEDULE.No.asc()).\
											first()

		if RepaymentScheduleObj:
			AccountTransactionDate = int(str(AccountObj.TransactionDate).replace('-',''))
			RepScheduleCollectionDate = int(str(RepaymentScheduleObj.CollectionDate).replace('-',''))

			if AccountTransactionDate < RepScheduleCollectionDate:
				return formatNumberCBC(0)

		Amount = AccountObj.Amount
	return formatNumberCBC(Amount)

def getLastPaymentDate(LoanID,**kwarg):

	global CBCScheduleObj
	TransactionCode = getPaymentTransaction()

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	LastTransactionDate =''
	Account = ''

	CBCLoanContractHistObj = MKT_LOAN_CONTRACT_HIST.query.get(RowObj.TerminateID)
	if CBCLoanContractHistObj:
		Account = CBCLoanContractHistObj.Account

	AccountObj = db.session.query(
									MKT_ACC_ENTRY.DebitCredit,
									MKT_ACC_ENTRY.TransactionDate,
									func.sum(MKT_ACC_ENTRY.Amount).label('Amount'),
								).filter(MKT_ACC_ENTRY.Account==Account).\
								filter(MKT_ACC_ENTRY.DebitCredit=='Dr').\
								filter(MKT_ACC_ENTRY.Transaction.in_(TransactionCode)).\
								filter(MKT_ACC_ENTRY.Reference.ilike('%'+RowObj.LoanID)).\
								group_by(MKT_ACC_ENTRY.DebitCredit, MKT_ACC_ENTRY.TransactionDate).\
								order_by(MKT_ACC_ENTRY.TransactionDate.desc()).first()

	if AccountObj:
		RepaymentScheduleObj = db.session.query(MKT_REP_SCHEDULE).\
											filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
											order_by(MKT_REP_SCHEDULE.No.asc()).\
											first()

		if RepaymentScheduleObj:
			AccountTransactionDate = int(str(AccountObj.TransactionDate).replace('-',''))
			RepScheduleCollectionDate = int(str(RepaymentScheduleObj.CollectionDate).replace('-',''))

			if AccountTransactionDate < RepScheduleCollectionDate:
				return formatDateCBC(LastTransactionDate)

		LastTransactionDate = AccountObj.TransactionDate

	return formatDateCBC(LastTransactionDate)

def getFreqType(LoanID,**kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		FreqType = str(RowObj.FreqType)
		#Monthly
		if FreqType == "1":
			return "M"
		#Weekly
		else:
			return "W"
	return "FreqType not found"

def getInstalmentAmount(LoanID,**kwarg):
	global CBCScheduleObj
	TotalAmount = 0
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)

	QueryObj = db.session.query(MKT_REP_SCHEDULE_HIST).\
							filter(MKT_REP_SCHEDULE_HIST.LoanID==LoanID).\
							filter(MKT_REP_SCHEDULE_HIST.PartPaidAmt>0).\
							order_by(MKT_REP_SCHEDULE_HIST.No.desc()).first()

	if QueryObj is not None:
		TotalAmount = float(QueryObj.Principal)+float(QueryObj.Interest)
		TotalAmount = formatNumberCBC(TotalAmount)

	return TotalAmount

def getProductStatus(AssetClass,**kwarg):
	'''
	N Normal
	S Special Mention
	C Closed
	U Substandard
	D Doubtful
	L Loss
	W Write Off
	'''
	return 'W'

def getProductTypeCBC(LoanProduct,**kwarg):
	DicProductTypeCBC = {
	'MBL' :	'Mobile Phone Loan',
	'CPL' :	'Computer Loan',
	'MTL' :	'Motor Loan',
	'CAL' :	'Car Loan',
	'HIL' :	'Home Improvement Loan',
	'EDU' :	'Education Loan',
	'STL' :	'Staff Loan',
	'CDL' :	'Consumer Durables Loan',
	'PEL' :	'Personal Loan',
	'MRA' :	'Real Estate Loan',
	'PHL' :	'Public Housing Loan',
	'SHL' :	'Staff Housing Loan',
	'WCL' :	'Working Capital Loan',
	'AFI' :	'Asset Financing',
	'INL' :	'Investment Loan',
	'CON' :	'Construction Loan',
	'HVL' :	'Home Investment Loan',
	'STF' :	'Stock Finance',
	'ODF' :	'Overdraft Facility',
	'RVL' :	'Revolving Loan',
	'SYL' :	'Syndicate Loan',
	'AGL' :	'Agriculture Loan',
	'MCL' :	'Machinery Loan',
	'HEQ' :	'Heavy Equipment Loan',
	'TFL' :	'Trade Finance Loan',
	'GRL' :	'Green Loan',
	'EML' :	'Emergency Loan',
	'CMT' :	'Community Loan',
	'SCC' :	'Secured Credit Card',
	'UCC' :	'Unsecured Credit Card',
	'CCC' :	'Combined Credit Card',
	'BCC' :	'Business Credit Card',
	'MFI' :	'MFI Loan',
	'PRL' :	'Private Loan',
	'ASL' :	'Association Loan',
	'PE' : 'Public Enquiry only'}
	LoanPurpose = ''
	if 'Vlookup' in kwarg:
		if LoanProduct in DicProductTypeCBC:
			return DicProductTypeCBC[LoanProduct]
		else:
			return LoanProduct

	CBCLoanProduct = mkttool.getDictionaryObj(mktsetting.getAppSetting('CBCLoanProduct'))
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanProduct = RowObj.LoanProduct
		LoanPurpose = RowObj.LoanPurpose

	# check if variable LoanPurpose has value which not empty string.
	if LoanPurpose:
		Key = ''.join([LoanProduct,LoanPurpose])
		Key = Key.replace(" ","")
		if CBCLoanProduct.has_key(Key):
			return CBCLoanProduct[Key].replace('\r','')

	if LoanProduct in CBCLoanProduct:
		return CBCLoanProduct[LoanProduct].replace('\r','')
	
	return "Error: Loan Product not found in CBC"
def checkLoanPurpose():
	Row = mktsetting.getAppSetting('CBCLoanProduct')
	if Row:
		ListRow = Row.split('\n')
		if ListRow:
			lenght =	len(ListRow[0].split('*'))
			Status = 1 if lenght==2 else 2 # status =1 CBC loan product type no loan purpose and status=2 CBC loan product type have loan purpose
			return Status
		else:
			return ""
	else:
		return ""

def GroupAccountRef(LoanID,**kwarg):
	'''
		Mandatory if the Account Type = G (roup)
			
	'''

	return ""

def getAccountType(LoanID,**kwarg):
	'''
		AccountType
		S (ingle)
		J (oint)
		G (roup)
	'''
	if 'Vlookup' in kwarg:
		DicAccountType = {'S':'Single','J':'Joint','G':'Group'}
		if LoanID in DicAccountType:
			return DicAccountType[LoanID]
		else:
			return LoanID

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = RowObj.LoanID
		Terminate = getattr(RowObj, 'Terminate', None)

		if Terminate == 'Y':

			TerminateID = getattr(RowObj, 'TerminateID', None)

			if TerminateID:

				CoBorrowerObj = MKT_LOAN_CO_BORROWER_HIST.query.filter(MKT_LOAN_CO_BORROWER_HIST.ID==TerminateID)

				if CoBorrowerObj.all():
					return "J"
				else:
					return "S"

			else:

				return ''


		CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanID)

		if CoBorrowerObj.all():
			return "J"
		else:
			return "S"

	if 'Count' in kwarg:
		CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanID)
		if CoBorrowerObj.all():
			return "J",str(CoBorrowerObj.count()+1)
		else:
			return "S","1"

def getCBCMemberID(Default,**kwarg):
	CBCMemberID = str(mktsetting.getAppSetting('CBCMemberID'))
	return CBCMemberID

def getAddressField(Address,**kwarg):
	Result = ''
	if 'RowObj' in kwarg:
		
		RowObj = kwarg['RowObj']
		Province 	= RowObj.Province
		District 	= RowObj.District
		Commune 	= RowObj.Commune
		#Call global variable
		global CBCProvinceObj 
		global CBCDistrictObj
		global CBCCommuneObj
		# Case object need query only once.
		if CBCProvinceObj:
			QueryObj = CBCProvinceObj.get(Province)
			if QueryObj:
				Result = QueryObj.Description
		else:
			CBCProvinceObj = MKT_PROVINCE.query
			QueryObj = CBCProvinceObj.get(Province)
			if QueryObj:
				Result = QueryObj.Description

		if CBCDistrictObj:
			QueryObj = CBCDistrictObj.get(District)
			if QueryObj:
				Result +=' %s'% QueryObj.Description
		else:
			CBCDistrictObj = MKT_DISTRICT.query
			QueryObj = CBCDistrictObj.get(District)
			if QueryObj:
				Result +=' %s'% QueryObj.Description

		if CBCCommuneObj:
			QueryObj = CBCCommuneObj.get(Commune)
			if QueryObj:
				Result +=' %s'% QueryObj.Description
		else:
			CBCCommuneObj = MKT_COMMUNE.query
			QueryObj = CBCCommuneObj.get(Commune)
			if QueryObj:
				Result +=' %s'% QueryObj.Description
	return Result

def getFormatIDType(IDType,**kwarg):

	IDTypeObj 	= MKT_ID_TYPE.query.get(IDType)

	if IDTypeObj:
		return IDTypeObj.Description

	return IDType

def getSplitDate(Date,Format):
	if Date:
		DicFormat = {'DD','MM','YYYY'}
		if Format in DicFormat:
			if Format == "DD":
				return Date.split("-")[2]
			if Format == "MM":
				return Date.split("-")[1]
			if Format == "YYYY":
				return Date.split("-")[0]
		else:
			return 'Error'
	else:
		return ''

def formatNumberCBC(Number,**kwarg):
	return mktmoney.formatNumber(float(Number),0)

def getMaturityDate(LoanID, **kwarg):
	if 'RowObj' in kwarg:
		RowObj 				= kwarg['RowObj']
		LoanID 				= RowObj.LoanID
		MaturityDate = RowObj.MaturityDate
		# return ''.join(list(reversed(MaturityDate.split('-'))))
	return ''

def getAsOfDate(LoanID, **kwarg):
	'''
	This method will return As Of Date of loan contract when generate cbc data upload.
	If user want to generate data at the end of month (example 31-Jan-2018) they need to run EOD one day.
	This mean that the System Date now must be 01-Feb-2018. But user only want generate data from Start Of Month
	to End Of Month.
	form:
		AsOfDate = System Date - 1
	'''
	AsOfDate = mktdate.getBankDate() - timedelta(days=1)
	AsOfDate = ''.join(list(reversed(str(AsOfDate).split('-'))))
	return AsOfDate

def formatOutstandingCBC(OutstandingAmount,**kwarg):

	OutAmount = 0
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		OutAmount = RowObj.OutstandingAmount
	return formatNumberCBC(OutAmount)

def formatCountry(Country,**kwarg):

	CountryObj = MKT_COUNTRY.query.get(Country)

	if CountryObj:

		return CountryObj.ISO

	else:

		return "%s Country code not found." % Country

def formatGender(Gender,**kwarg):
	if 'Vlookup' in kwarg:
		if Gender == "M":
			return "Male"
		else:
			return "Female"
	return Gender[:1]

def formatMaritalStatus(MaritalStatus,**kwarg):
	if 'Vlookup' in kwarg:
		DicMaritalStatus = {
			'M' : 'Married',
			'S' : 'Single',
			'D' : 'Divorced',
			'W' : 'Widow / Widower',
			'P' : 'Separated',
			'F' : 'Defacto',
			'U' : 'Unknown'
		}
		if MaritalStatus in DicMaritalStatus:
			return DicMaritalStatus[MaritalStatus]
		else:
			return ""

	DicMaritalStatus = {
		'1' : 'M',
		'2' : 'S',
		'3' : 'D',
		'4' : 'W',
		'5' : 'W',
		'6' : 'P',
		'7' : 'F',
		'8' : 'U'
	}
	if MaritalStatus in DicMaritalStatus:
		return DicMaritalStatus[MaritalStatus]
	else:
		return ""

def formatDateCBC(Date,**kwarg):
	return ''.join(list(reversed(Date.split('-'))))

def isRestructureLoan(LoanID,**kwarg):
	'''
	VB format
	N = Normal
	R = Restructured
	CBC format
	Y = Restructured loan
	N = Not restructured loan
	'''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanType = str(RowObj.LoanType)
		if LoanType == "N":
			return "N"
		else:
			return "Y"
	return "Restructured loan not found"

#ContactNumberType: O is Office, F is Fax, H is Home, M is Mobile, U is Unknown type
ListContactNumberType = ['O','F','H','M','U']
ListAreaNumber = ['023','024','025','026','032','033','034','035','036','042','043','044','052',
					'053','054','055','062','063','064','065','072','073','074','074','075']
def getContactNumberType(LoanID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID, 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID, 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_LOAN_CONTRACT_HIST.ContractCustomerID)).first()

	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "U"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return "H"
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return "M"

def getContactNumberArea(LoanID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID, 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID, 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_LOAN_CONTRACT_HIST.ContractCustomerID)).first()
	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return ""
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Prefix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return ""

def getContactNumberNumber(LoanID, **kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID.label('ContactID'), 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID.label('ContactID'), 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(RowObj.LoanID+'%')).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT_HIST.ContractCustomerID).first()

	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "000"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Postfix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return Mobile

def getPaymentTransaction():
	PDCharge 		= mktsetting.getAppSetting('PDCharge')
	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')
	AccSetting 		= mktsetting.getAccSetting()
	ChargeTran 		= AccSetting.ChargeTran
	InterestTran 	= AccSetting.InterestTran
	PrincipalTran 	= AccSetting.PrincipalTran
	PenaltyTran 	= AccSetting.PenaltyTran
	return [PrincipalTran,InterestTran,ChargeTran,PDPrincipal,PDInterest,PDCharge,PenaltyTran]

def getWriteOffStatus(LoanID,**kwarg):
	# Column 178
	if 'RowObj' in kwarg:
		RowObj 			= kwarg['RowObj']
		LoanID 			= RowObj.LoanID
	RecoverAmount = 0
	OutAmount = 0
		
	LoanWriteOffObj = MKT_WRITE_OFF_DE.query.filter(MKT_WRITE_OFF_DE.ID==LoanID).first()
	if not LoanWriteOffObj:
		LoanWriteOffObj = MKT_WRITE_OFF_DE_HIST.query.filter(MKT_WRITE_OFF_DE_HIST.ID==LoanID).first()
	LoanRecoveryObj = db.session.query(func.sum(MKT_LOAN_RECOVERY.AccBalance).label('RecoverAmount')).\
								filter(MKT_LOAN_RECOVERY.LoanID==LoanID).first()

	if LoanRecoveryObj[0]:
		RecoverAmount = float(LoanRecoveryObj.RecoverAmount)
	if LoanWriteOffObj:
		OriWriteOffAmoun = float(LoanWriteOffObj.TotWOFPrincipal + LoanWriteOffObj.TotWOFInterest + LoanWriteOffObj.TotWOFPenalty + LoanWriteOffObj.TotWOFCharge)
		# Check if data is very old and fields (TotWOFPrincipal,TotWOFInterest,TotWOFPenalty, TotWOFCharge )
		WriteOffAmount 	= OriWriteOffAmoun if OriWriteOffAmoun > 0 else float(LoanWriteOffObj.TotWOFAmount)
		OutAmount = WriteOffAmount - RecoverAmount

		if OutAmount == WriteOffAmount:
			return 'OS'
		if OutAmount > 0 and OutAmount < WriteOffAmount:
			return 'PP'
		if  OutAmount == 0:
			return 'FS'

	return 'FS'

def getWriteOffStatusDate(LoanID,**kwarg):
	# Column 179
	TerminateDate = None
	if 'RowObj' in kwarg:
		RowObj 			= kwarg['RowObj']
		LoanID 			= RowObj.LoanID
		TerminateDate 	= getattr(RowObj, 'TerminateDate', None)

	return formatDateCBC(TerminateDate)

def getWriteOffOriginalAmount(LoanID,**kwarg):
	# Column 180
	WriteOffAmount = 0
	if 'RowObj' in kwarg:
		RowObj 			= kwarg['RowObj']
		LoanID 			= RowObj.LoanID

	LoanWriteOffObj = MKT_WRITE_OFF_DE.query.filter(MKT_WRITE_OFF_DE.ID==LoanID).first()

	if LoanWriteOffObj:
		WriteOffAmount = LoanWriteOffObj.TotWOFAmount

	return WriteOffAmount

def getWriteOffOutBalance(LoanID,**kwarg):
	# Column 181
	OutAmount = None
	if 'RowObj' in kwarg:
		RowObj 			= kwarg['RowObj']
		LoanID 			= RowObj.LoanID

	LoanWriteOffObj = MKT_WRITE_OFF_DE.query.filter(MKT_WRITE_OFF_DE.ID==LoanID).first()
	LoanRecoveryObj = db.session.query(func.sum(MKT_LOAN_RECOVERY.AccBalance).label('RecoverAmount')).filter(MKT_LOAN_RECOVERY.LoanID==LoanID).first()

	WriteOffAmount 	= LoanWriteOffObj.TotWOFAmount if LoanWriteOffObj else 0
	RecoverAmount = LoanRecoveryObj.RecoverAmount if LoanRecoveryObj[0] else 0
	OutAmount = WriteOffAmount - RecoverAmount

	return OutAmount
