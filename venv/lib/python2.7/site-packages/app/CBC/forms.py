from app.mktcore.wtfimports import *
from app.mktcore.imports 	import *
from .models 	import *
from flask 						import session
import time
from .views import *
from sqlalchemy 					import or_, func
from decimal 					import *
from app.Customer.models 			import *
from app.LoanApplication.models 	import *
from app.LoanContract.models 		import *
from app.Currency.models 			import *
from app.CBCAction.models 			import *

import app.tools.user 			as mktuser
import app.tools.mktsetting 	as mktsetting
from app import db
import views as views

ExtendClass 			= 	mktsetting.ExtendModule()
CBC_LINK 				=	ExtendClass.getUrlExtend(Module="CBC")

def getControlList(ControlID=""):
	controls_list 	= request.form
	ListControl		= [item for item in controls_list if ControlID in item]
	ListControl.sort()
	TotalControl 	= len(ListControl)
	return ListControl,TotalControl


def getCustomerHotField(LoanAppID):

	CustomerObj = None
	GurantorObj = None
	CoBorrowObj = None
	dic		= {}

	if not LoanAppID:
		return None

	LoanAppInauObj = MKT_LOAN_APPLICATION_INAU.query.get(LoanAppID)

	if LoanAppInauObj:
		GurantorObj = MKT_GUARANTOR_INAU.query.filter_by(ID=LoanAppID).all()
		CoBorrowObj = MKT_LOAN_CO_BORROWER_INAU.query.filter_by(ID=LoanAppID).all()
		CustomerObj = MKT_CUSTOMER.query.get(LoanAppInauObj.LNCustomerID)
	else:
		GurantorObj = MKT_GUARANTOR.query.filter_by(ID=LoanAppID).all()
		CoBorrowObj = MKT_LOAN_CO_BORROWER.query.filter_by(ID=LoanAppID).all()
		LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanAppID)
		CustomerObj = MKT_CUSTOMER.query.get(LoanAppObj.LNCustomerID)

	result = []
	result.append(CustomerObj)

	if GurantorObj:
		for row in GurantorObj:
			Obj = MKT_CUSTOMER.query.get(row.Guarantor)
			result.append(Obj)

	if CoBorrowObj:
		for row in CoBorrowObj:
			Obj = MKT_CUSTOMER.query.get(row.CoBorrowerID)
			result.append(Obj)

	return result


@app.route("/Morakot/LoanAppID", methods=['GET'])
@app.route("/Morakot/API/LoanAppID", methods=['GET'])
def LoanAppID():
	DefaultBranch 	= mktuser.getCurrentBranch()
	search 			= request.args.get('q') 		if 'q' in request.args else ""
	action 			= request.args.get('action')	if 'action' in request.args else ""
	NAMES 			= []
	Record 			= []
	CBCEnquiry 		= ""
	#check session['CBCEnquiry'] to criteria
	if 'CBCEnquiry' in session:
		CBCEnquiry = session['CBCEnquiry']
	if CBCEnquiry == "CBCReview":
		TableLoanApp = MKT_LOAN_APPLICATION
	elif CBCEnquiry == "CBCNew":
		TableLoanApp = MKT_LOAN_APPLICATION_INAU

	#check if search text all in space
	if CBCEnquiry != "":
		if not search.isspace():
			search = search.strip()
			if not search in [None,""]:
				if action == "view":
					Record 	= 	db.session.query(TableLoanApp.ID,
												TableLoanApp.LNCustomerID,
												MKT_CUSTOMER.FirstNameEn,
												MKT_CUSTOMER.LastNameEn).\
								filter(TableLoanApp.ID==search).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID==TableLoanApp.LNCustomerID).all()
				else:
					Record 	= 	db.session.query(TableLoanApp.ID,
												TableLoanApp.LNCustomerID,
												MKT_CUSTOMER.FirstNameEn,
												MKT_CUSTOMER.LastNameEn).\
								filter(TableLoanApp.ID.like('%'+search.upper()+'%')).\
								filter(TableLoanApp.Branch == DefaultBranch).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID==TableLoanApp.LNCustomerID).all()
	else:
		Live 	= 	db.session.query(MKT_LOAN_APPLICATION.ID,
												MKT_LOAN_APPLICATION.LNCustomerID,
												MKT_CUSTOMER.FirstNameEn,
												MKT_CUSTOMER.LastNameEn).\
								filter(MKT_LOAN_APPLICATION.ID.like('%'+search.upper()+'%')).\
								filter(MKT_LOAN_APPLICATION.Branch == DefaultBranch).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_APPLICATION.LNCustomerID).all()
		INAU 	= 	db.session.query(MKT_LOAN_APPLICATION_INAU.ID,
												MKT_LOAN_APPLICATION_INAU.LNCustomerID,
												MKT_CUSTOMER.FirstNameEn,
												MKT_CUSTOMER.LastNameEn).\
								filter(MKT_LOAN_APPLICATION_INAU.ID.like('%'+search.upper()+'%')).\
								filter(MKT_LOAN_APPLICATION_INAU.Branch == DefaultBranch).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_APPLICATION_INAU.LNCustomerID).all()
		Record.extend(Live)
		Record.extend(INAU)

	if Record:
		for row in Record:
			
			dic = {"id":row.ID, "text":row.ID + " - " + row.LastNameEn + " " + row.FirstNameEn }
			NAMES.append(dic)

	# app.logger.debug(NAMES)
	return jsonify(items = NAMES)


@app.route('/Morakot/CBC/getCustomer')
@app.route('/Morakot/API/CBC/getCustomer')
def getCustomerID():

	LoanAppID   = request.args.get('LoanAppID')
	dic = {}

	result = getCustomerHotField(LoanAppID)

	if not result:
		return jsonify(results=dic)

	for row in result:
		dic[row.ID] = u'%s - %s %s' % (row.ID, row.LastNameEn, row.FirstNameEn)

	return jsonify(results=dic)


@app.route("/Morakot/CBC/LoanAppInfo", methods=['GET'])
@app.route("/Morakot/API/CBC/LoanAppInfo", methods=['GET'])
def getCBCLoanAppInfo():

	# print request.args.get('ID')
	StrAmount 			= "0"
	CustomerName 		= ""
	Currency 			= ""
	Amount 	 			= ""
	CustomerID 	 		= ""
	Action 				= ""
	AccountType 		= ""
	AccountTypeName 	= ""
	NumberOfApplication = ""
	CreditReport 		= "---None---"
	LoanAppID 			= request.args.get('LoanAppID') 	if 'LoanAppID' in request.args else ""
	EnquiryType 		= request.args.get('EnquiryType') 	if 'EnquiryType' in request.args else ""
	ID 					= request.args.get('ID') 			if 'ID' in request.args else ""
	CBCMemberID 		= mktsetting.getAppSetting('CBCMemberID')
	MemberRef 			= '%s%s' % (CBCMemberID, ID)

	LoanAppObj = None

	LoanAppInauObj = MKT_LOAN_APPLICATION_INAU.query.get(LoanAppID)

	if LoanAppInauObj:
		LoanAppObj = LoanAppInauObj
	else:
		LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanAppID)

	if LoanAppObj:
		AccountTypeObj 	= views.getAccountType(LoanAppID,Count="NumberOfApplication")
		AccountType 	= AccountTypeObj[0]
		if AccountType == "S":
			AccountTypeName = "Single"
		elif AccountType == "J":
			AccountTypeName = "Joint"
		elif AccountType == "G":
			AccountTypeName = "Group"

		NumberOfApplication 	=  AccountTypeObj[1]
		Currency 		= LoanAppObj.Currency
		CustomerID 		= LoanAppObj.LNCustomerID
		CurrencyObj 	= MKT_CURRENCY.query.get(Currency)
		StrAmount 		= str(mktmoney.toMoney(float(LoanAppObj.AppliedAmount), CurrencyObj))
		Amount 			= Decimal(LoanAppObj.AppliedAmount)
		CustomerObj 	= MKT_CUSTOMER.query.get(CustomerID)

		if CustomerObj:
			CustomerName 	= 	CustomerID + " - " + CustomerObj.LastNameEn + " " + CustomerObj.FirstNameEn

		if Currency == "USD":
			if 1 <= Amount <= 500:
				Action = "L"
				CreditReport = "Lite Report"
			elif Amount >= 501:
				Action = "A"
				CreditReport = "Standard Report"


	return jsonify(	CustomerName	=	CustomerName,
					Currency 		=	Currency,
					Amount 			=	StrAmount,
					CustomerID 		= 	CustomerID,
					CreditReport 	= 	CreditReport,
					Action 			= 	Action,
					AccountType 	= 	AccountType,
					AccountTypeName = 	AccountTypeName,
					NumberOfApplication 	= NumberOfApplication,
					MemberRef 				= 	MemberRef)


def loadCustomer():
	if request.method == "POST":
		if not request.form['LoanAppID']:
			"""
			# check if LoanAppID is empty
			"""
			return []
		else:
			LoanAppID = request.form['LoanAppID']
			result = getCustomerHotField(LoanAppID)
			CustomerIDList = [x.ID for x in result]
			return MKT_CUSTOMER.query.filter_by(Branch=mktuser.getCurrentBranch()).\
								  	filter(MKT_CUSTOMER.ID.in_(CustomerIDList))
	else:
		return MKT_CUSTOMER.query.filter_by(Branch=mktuser.getCurrentBranch())


def loadCBCAction():
	return MKT_CBC_ACTION.query


def loadLoanApp():
	return MKT_LOAN_APPLICATION.query


def loadCurrency():
	return MKT_CURRENCY.query


class FRM_CBC_DE(exform):

	EnquiryType 		=	SelectField(requiredlabel("Enquiry Type", "*"),
								choices=[('','--None--'),('NA', 'New Application'), ('RV', 'Review')],
								validators=[validators.Required()]
						)

	LoanAppID 			=	RemoteTextField(requiredlabel(getLanguage("Loan Application"),"*"),
								validators=[validators.Required()]
								)

	NumberOfApplication =	TextField(requiredlabel("Number Of Application", "*"),
								default="1",
								validators=[validators.Required()]
						)

	AccountType 	 	=	SelectField(requiredlabel("AccountType", "*"),
								choices=[('', '---None---'),
										 ('S', 'Single'),
										 ('J', 'Joint'),
										 ('G', 'Group')
										 ],
								default='S',
								validators=[validators.Required()]
						)

	Currency 			=	TextField(requiredlabel("Currency", "*"), [validators.Required()])

	Amount 				=	TextField(requiredlabel("Amount", "*"), [validators.Required()])

	Action 				=	QuerySelectField(requiredlabel('Credit Report', '*'),
											 query_factory=loadCBCAction,
											 get_label='Description',
											 allow_blank=True,
											 blank_text=u'--None--',
											 validators=[validators.Required()]
											)
	ApplicationType 	=	SelectField(requiredlabel("ApplicationType", "*"),
							choices=[('', '---None---'),
									 ('P', 'Primary'),
									 ('G', 'Guarantor'),
									 ('S', 'Supplementary')
									 ],
							validators=[validators.Required()],
							description='1-CBC Detail'
						)
	Customer 			= 	QuerySelectField(requiredlabel(getLanguage('Customer'),'*'),
							query_factory=loadCustomer,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'',
							validators=[validators.Required()],
							description='1-CBC Detail'
						)

	MemberReference 	=	TextField("Member Reference", description='1-CBC Detail')



	SuccessDate 		=	TextField("Success Date", description='1-CBC Detail')
	EnquiryID 			=	TextField("Enquiry ID", description='1-CBC Detail')


	def validate_Amount(form, field):

		if float(field.data) <= 0:
			raise ValidationError('Amount cannot be equal zero or smaller than zero')

		MaxAmount = 0.00

		if form.Action.data.ID in ['L', 'L_SC']:

			CBCMaxAmountObj = mktsetting.getAppSetting('CBCLiteMax')

			if CBCMaxAmountObj:

				ListMaxAmount = CBCMaxAmountObj.split(' ')

				for Amount in ListMaxAmount:

					if form.Currency.data in Amount:

						MaxAmount = float(Amount[3:])
						break
			else:

				raise ValidationError('Please config Maximum Lite Report Amount in AppSetting/Config/CBC')

			if float(field.data) > MaxAmount:

				raise ValidationError('The Amount for Lite Report must be smaller than Maximum Lite Report Amount in the configuration %s' % MaxAmount)


	# def validate_Customer(form, field):

	# 	LoanAppID = form.LoanAppID.data

	# 	if LoanAppID:

	# 		CustomerObj = None
	# 		GurantorObj = None
	# 		CoBorrowObj = None
	# 		ListCustmerID = []
	# 		LoanAppInauObj = MKT_LOAN_APPLICATION_INAU.query.get(LoanAppID)

	# 		if LoanAppInauObj:
	# 			GurantorObj = MKT_GUARANTOR_INAU.query.filter_by(ID=LoanAppID).all()
	# 			CoBorrowObj = MKT_LOAN_CO_BORROWER_INAU.query.filter_by(ID=LoanAppID).all()
	# 			CustomerObj = MKT_CUSTOMER.query.get(LoanAppInauObj.LNCustomerID)
	# 		else:
	# 			GurantorObj = MKT_GUARANTOR.query.filter_by(ID=LoanAppID).all()
	# 			CoBorrowObj = MKT_LOAN_CO_BORROWER.query.filter_by(ID=LoanAppID).all()
	# 			LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanAppID)
	# 			CustomerObj = MKT_CUSTOMER.query.get(LoanAppObj.LNCustomerID)

	# 		ListCustmerID.append(CustomerObj.ID)

	# 		if GurantorObj:
	# 			for row in GurantorObj:
	# 				Obj = MKT_CUSTOMER.query.get(row.Guarantor)
	# 				ListCustmerID.append(Obj.ID)

	# 		if CoBorrowObj:
	# 			for row in CoBorrowObj:
	# 				Obj = MKT_CUSTOMER.query.get(row.CoBorrowerID)
	# 				ListCustmerID.append(Obj.ID)

	# 		if field.data.ID not in ListCustmerID:
	# 			raise ValidationError('Customer is not in the Loan Application %s' % LoanAppID)

	def validate_AccountType(form,field):
		"""
		this method is used to validate Applicatin Type when use click save.
		Raise:
			ValidationError("message here")
		Exmple:
		-Single=S,Joint=J,Group=G
		+S
			-primary = 1 and primary <2
			-guarantor >=0
			-supplimentart >=0
		+J
			-primary >=2
			-guarantor >=0
			-supplimentary>=0
		+G
			-primary >=2
			-guarantor >=0 #mostly depend on institute whether it should have or not
			-supplimentary >=0 #mostly depend on institute whether it should have or not
		"""
		checkServer = views.isServer()
		if checkServer[0]==False:
			raise ValidationError(checkServer[1])

		PrimaryNumber 	= 0
		AccountType 	= form.AccountType.data
		ListApplicationType,TotalAppicationType = getControlList("ApplicationType")

		for Index in range(0,TotalAppicationType) :
			
			ID 		= ListApplicationType[Index]
			if request.form[ID] == "P" :
				PrimaryNumber = PrimaryNumber + 1

		if PrimaryNumber < 1 and AccountType == "S":
			raise ValidationError("Single Account Type must have at least one primary customer")

		elif PrimaryNumber > 1 and AccountType == "S":
			raise ValidationError("Single Account Type need only one primary customer")

		elif PrimaryNumber <= 1 and AccountType == "J":
			raise ValidationError("Joint Account Type must have at least two primary customer")

		elif PrimaryNumber <= 1 and AccountType == "G" :
			raise ValidationError("Group Account Type must have at least two primary customer")

	@staticmethod
	def validate_Customer(form,field):
		"""
		Duplicate consumers can not allow to enquiry  
		"""
		ListConsumer,TotalConsumer = getControlList("Customer")
		ListConsumerID	=	[]
		if ListConsumer:
			for i in range(0,TotalConsumer):
				ListConsumerID.append(request.form[ListConsumer[i]])
				if ListConsumerID.count(ListConsumerID[i]) > 1:
					raise ValidationError("Customer can not duplicate.")
	@staticmethod
	def validate_Customer(form,field):
		"""
		Duplicate consumers can not allow to enquiry  
		"""
		ListConsumer,TotalConsumer = getControlList("Customer")
		ListConsumerID	=	[]
		if ListConsumer:
			for i in range(0,TotalConsumer):
				ListConsumerID.append(request.form[ListConsumer[i]])
				if ListConsumerID.count(ListConsumerID[i]) > 1:
					raise ValidationError("Customer can not duplicate.")
	@staticmethod
	def isMultiValue():
		control_list = ["1-CBC Detail"]

		return control_list


	@staticmethod
	def redirectAfterInsert():
		AuthLevel 	= g.getNAuthorize
		if AuthLevel == 0 :

			CBCObj 		= MKT_CBC.query.get(request.form['ID'])
			CBCDetail = MKT_CBC_DE.query.filter_by(ID=request.form['ID'])
			MemberID  = mktsetting.getAppSetting('CBCMemberID')
			CBCObj.NumberOfApplication = len(CBCDetail.all()) #count number of application(s)

			for row in CBCDetail.all():
				row.MemberReference = '%s%s%s' % (MemberID, request.form['ID'], row.DetailID)
				db.session.add(row)

			db.session.commit()

			return "/Morakot/CBCEnquiry?ID="+request.form['ID']
		else:
			return None


	@staticmethod
	def redirectAuthorize():
		AuthLevel 	= g.getNAuthorize
		CBCObj 		= MKT_CBC.query.get(g.formID)

		if CBCObj:

			# CBCObj.AccountType = 'S'
			# CBCObj.NumberOfApplication = '1'

			CBCDetail = MKT_CBC_DE.query.filter_by(ID=g.formID)
			MemberID  = mktsetting.getAppSetting('CBCMemberID')
			CBCObj.NumberOfApplication = len(CBCDetail.all())
			for row in CBCDetail.all():
				row.MemberReference = '%s%s%s' % (MemberID, g.formID, row.DetailID)
				db.session.add(row)

			db.session.commit()

			return "/Morakot/CBCEnquiry?ID="+g.formID
		else:
			return None


	@staticmethod
	def moneyField():
		return [("Amount", "Currency")]


	@staticmethod
	def formatMoney():
		return ["Amount"], "Currency"


	@staticmethod
	def setWidth():
		control_list= [('Currency', len1),
						('NumberOfApplication', len2),
						('MemberReference', len2),
						('Amount',len2),
						('AccountType', len2),
						('SuccessDate', len2)]
		return control_list


	@staticmethod
	def setVisible():
		return [('NumberOfApplication'),('MemberReference')]

	@staticmethod
	def setDisable():
		Fields = [('SuccessDate'), ('EnquiryID'), ('Currency')]
		return Fields

	@staticmethod
	def hotField():
		hotfield = []

		#Event change LoanAppID
		# fielddisplay 	= "$('#Customer').select2('data',{'id':data.CustomerID,'text':data.CustomerName});"
		fielddisplay 	= "$('#Action').select2('data', {'id':data.Action,'text':data.CreditReport});"
		fielddisplay 	+= "$('#Amount').val(data.Amount);"
		fielddisplay 	+= "$('#Currency').val(data.Currency);"
		varname 		= "LoanAppID:$('#LoanAppID').val(),EnquiryType:$('#EnquiryType').val(),ID:$('#ID').val()"
		fun 			= ["LoanAppID", varname, fielddisplay, "/Morakot/CBC/LoanAppInfo", "change"]
		hotfield.append(fun)
		# Event change EnquiryType
		fun 			= ["EnquiryType", varname, fielddisplay, "/Morakot/CBC/LoanAppInfo", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotSelectField():

		hotfield = []

		fielddisplay="Customer"
		varname="LoanAppID:$('#LoanAppID').val()"
		fun=["LoanAppID", varname ,fielddisplay, "/Morakot/CBC/getCustomer", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def IsAcceptOverride():

		Override 	= False
		Msg 		= ""
		ID 			= request.form['ID']
		ListCustomer, TotalCustomer = getControlList('Customer')
		CustomerIDList = [request.form[x] for x in ListCustomer]
		CheckDuplicate = MKT_CBC_DE.query.filter(MKT_CBC_DE.Customer.in_(CustomerIDList)).\
									filter(MKT_CBC.ID != ID)

		if CheckDuplicate.all():
			Override 	= True

			CusDuplicate = [x.Customer for x in CheckDuplicate]

			CustomerIDList = set(CusDuplicate)

			for Customer in CustomerIDList:
				CBCDuplicate = CheckDuplicate.filter_by(Customer=Customer)
				CustomerObj = MKT_CUSTOMER.query.get(Customer)
				Name = "%s %s" % (CustomerObj.LastNameEn,CustomerObj.FirstNameEn)
				Msg += "Customer %s-%s has already been enquired %s time(s). <br>" % (Customer,Name,len(CBCDuplicate.all()))
				for row in CBCDuplicate:
					Msg +='Enquiry: <a href="javascript:void(0)"  onClick=CustomClickView("CBCEnquiry","%s?ID=%s")>%s</a>-enquiry on %s.<br>'% (CBC_LINK,row.ID, row.ID, row.Authorizeon)

			'''
			Customer CU120- has already been enquired %s time(s).
			Enquiry ID - CBC1201xxx - equiry on 20 JAN 2017 1:00am.
			Enquiry ID - CBC1701xxx - equiry on 30 JAN 2017 3:00pm.
			'''
		Msg += "<br>Do you want to procceed?"
		return Override, Msg