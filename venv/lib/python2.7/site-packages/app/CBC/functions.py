# -*- coding: utf-8 -*-
from app.mktcore.imports 		import *
from .forms 					import *
from flask 						import  make_response,Response,Markup,request
from decimal 					import *
from .models 					import *
from app.Customer.models 		import *
from app.LoanApplication.models import *
from app.LoanContract.models 	import *
from app.IdType.models 			import *
from app.LoanContract.models 	import *
from app.Province.models 		import *
from app.District.models 		import *
from app.Village.models 		import *
from app.Commune.models 		import *
from app.RepaymentSchedule.models import *
from app.PD.models 				import *
from app.Position.models 		import *
from app.Country.models 		import *
from app.Collateral.models 		import *
from app.Currency.models 		import MKT_CURRENCY
from app.LoanAmendment.models 	import MKT_LOAN_AMENDMENT
from app.Setting.models 		import MKT_APP_SETTING
from app.CBCAction.models 		import *
from operator 					import itemgetter
from app.AccEntry.models 		import *
from app.AssetClass.models 		import *
from app.OverdraftContract.models import *

from datetime  import datetime
import app.tools.mktpdcollection as mktpdcollection
import app.tools.mktsetting 	as mktsetting
import app.tools.mkttool	 	as mkttool
import app.tools.mktmoney	 	as mktmoney
import app.tools.mktdb 			as mktdb
import app.tools.mktdate 		as mktdate
import xml.etree.cElementTree 	as ET
import collections
#DataUpload
import StringIO
import csv
import xlsxwriter
import json
import app.tools.mktsetting    	as mktsetting
from datetime  import datetime 
from .headers import *
import socket

# Declear for function getAccountType
CBCProvinceObj	= None
CBCDistrictObj 	= None
CBCCommuneObj 	= None
CBCScheduleObj 	= None
PDObj 			= None

def formatDateCBC(Date,**kwarg):
	return ''.join(list(reversed(Date.split('-'))))

def getUnformattedEn(ID,**kwarg):
	Name= ''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LastName 	= RowObj.LastNameEn
		FirstName = RowObj.FirstNameEn
		Name = '%s %s'%(LastName,FirstName)

	return Name

def getUnformattedKh(ID,**kwarg):
	Name = ''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LastName 	= RowObj.LastNameKh
		FirstName = RowObj.FirstNameKh
		Name = '%s %s'%(LastName,FirstName)
	return Name

def formatGender(Gender,**kwarg):
	if 'Vlookup' in kwarg:
		if Gender == "M":
			return "Male"
		else:
			return "Female"
	return Gender[:1]

def formatMaritalStatus(MaritalStatus,**kwarg):
	if 'Vlookup' in kwarg:
		DicMaritalStatus = {
			'M' : 'Married',
			'S' : 'Single',
			'D' : 'Divorced',
			'W' : 'Widow / Widower',
			'P' : 'Separated',
			'F' : 'Defacto',
			'U' : 'Unknown'
		}
		if MaritalStatus in DicMaritalStatus:
			return DicMaritalStatus[MaritalStatus]
		else:
			return ""

	DicMaritalStatus = {
		'1' : 'M',
		'2' : 'S',
		'3' : 'D',
		'4' : 'W',
		'5' : 'W',
		'6' : 'P',
		'7' : 'F',
		'8' : 'U'
	}
	if MaritalStatus in DicMaritalStatus:
		return DicMaritalStatus[MaritalStatus]
	else:
		return ""
def formatCountry(Country,**kwarg):

	CountryObj = MKT_COUNTRY.query.get(Country)

	if CountryObj:

		return CountryObj.ISO

	else:

		return "%s Country code not found." % Country

def getContactNumberType(LoanID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID, 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID, 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_LOAN_CONTRACT_HIST.ContractCustomerID)).first()

	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "U"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return "H"
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return "M"

def getContactNumberArea(LoanID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID, 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID, 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(LoanID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_LOAN_CONTRACT_HIST.ContractCustomerID)).first()
	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return ""
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Prefix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return ""

def getContactNumberNumber(LoanID, **kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT.ID.label('ContactID'), 
									MKT_LOAN_CONTRACT.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT.ID==LoanID).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_LOAN_CONTRACT_HIST.ID.label('ContactID'), 
									MKT_LOAN_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.ilike(RowObj.LoanID+'%')).\
									filter(MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT_HIST.ContractCustomerID).first()

	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "000"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Postfix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return Mobile

def getPaymentTransaction():
	PDCharge 		= mktsetting.getAppSetting('PDCharge')
	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')
	AccSetting 		= mktsetting.getAccSetting()
	ChargeTran 		= AccSetting.ChargeTran
	InterestTran 	= AccSetting.InterestTran
	PrincipalTran 	= AccSetting.PrincipalTran
	PenaltyTran 	= AccSetting.PenaltyTran
	return [PrincipalTran,InterestTran,ChargeTran,PDPrincipal,PDInterest,PDCharge,PenaltyTran]

def getCBCMemberID(Default,**kwarg):
	CBCMemberID = str(mktsetting.getAppSetting('CBCMemberID'))
	return CBCMemberID

def getAccountType(LoanID,**kwarg):
	'''
		AccountType
		S (ingle)
		J (oint)
		G (roup)
	'''
	CoBorrowerNotJoin =   mktsetting.getAppSetting('CoBorrowerNotJoin')
	if 'Vlookup' in kwarg:
		DicAccountType = {'S':'Single','J':'Joint','G':'Group'}
		if LoanID in DicAccountType:
			return DicAccountType[LoanID]
		else:
			return LoanID

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = RowObj.LoanID
		Terminate = getattr(RowObj, 'Terminate', None)

		if Terminate == 'Y':

			TerminateID = getattr(RowObj, 'TerminateID', None)

			if TerminateID:

				if CoBorrowerNotJoin:

					JointBorrower = db.session.query(MKT_LOAN_CONTRACT_HIST).\
												join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID==MKT_LOAN_CONTRACT_HIST.LoanApplicationID).\
												filter(MKT_LOAN_CONTRACT_HIST.ID==TerminateID).\
												filter(MKT_LOAN_APPLICATION.SpouseID!='').\
												all()
					if JointBorrower:
						return "J"
					else:
						return "S"
				else:

					CoBorrowerObj = MKT_LOAN_CO_BORROWER_HIST.query.filter(MKT_LOAN_CO_BORROWER_HIST.ID==TerminateID)

					if CoBorrowerObj.all():
						return "J"
					else:
						return "S"

			else:

				return ''

		if CoBorrowerNotJoin:

			JointBorrower = db.session.query(MKT_LOAN_CONTRACT).\
										join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID==MKT_LOAN_CONTRACT.LoanApplicationID).\
										filter(MKT_LOAN_CONTRACT.ID==LoanID).\
										filter(MKT_LOAN_APPLICATION.SpouseID!='').\
										all()
			if JointBorrower:
				return "J"
			else:
				return "S"
		else:

			CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanID)

			if CoBorrowerObj.all():
				return "J"
			else:
				return "S"

	if 'Count' in kwarg:
		
		if CoBorrowerNotJoin:

			JointBorrower = db.session.query(MKT_LOAN_CONTRACT_HIST).\
										join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID==MKT_LOAN_CONTRACT_HIST.LoanApplicationID).\
										filter(MKT_LOAN_CONTRACT_HIST.ID==TerminateID).\
										filter(MKT_LOAN_APPLICATION.SpouseID!='')
			if JointBorrower.all():
				return "J",str(JointBorrower.count()+1)
			else:
				return "S","1"
		else:
			CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanID)
			if CoBorrowerObj.all():
				return "J",str(CoBorrowerObj.count()+1)
			else:
				return "S","1"

def GroupAccountRef(LoanID,**kwarg):
	'''
		Mandatory if the Account Type = G (roup)
			
	'''

	return ""

def getProductTypeCBC(LoanProduct,**kwarg):
	DicProductTypeCBC = {
	'MBL' :	'Mobile Phone Loan',
	'CPL' :	'Computer Loan',
	'MTL' :	'Motor Loan',
	'CAL' :	'Car Loan',
	'HIL' :	'Home Improvement Loan',
	'EDU' :	'Education Loan',
	'STL' :	'Staff Loan',
	'CDL' :	'Consumer Durables Loan',
	'PEL' :	'Personal Loan',
	'MRA' :	'Real Estate Loan',
	'PHL' :	'Public Housing Loan',
	'SHL' :	'Staff Housing Loan',
	'WCL' :	'Working Capital Loan',
	'AFI' :	'Asset Financing',
	'INL' :	'Investment Loan',
	'CON' :	'Construction Loan',
	'HVL' :	'Home Investment Loan',
	'STF' :	'Stock Finance',
	'ODF' :	'Overdraft Facility',
	'RVL' :	'Revolving Loan',
	'SYL' :	'Syndicate Loan',
	'AGL' :	'Agriculture Loan',
	'MCL' :	'Machinery Loan',
	'HEQ' :	'Heavy Equipment Loan',
	'TFL' :	'Trade Finance Loan',
	'GRL' :	'Green Loan',
	'EML' :	'Emergency Loan',
	'CMT' :	'Community Loan',
	'SCC' :	'Secured Credit Card',
	'UCC' :	'Unsecured Credit Card',
	'CCC' :	'Combined Credit Card',
	'BCC' :	'Business Credit Card',
	'MFI' :	'MFI Loan',
	'PRL' :	'Private Loan',
	'ASL' :	'Association Loan',
	'PE' : 'Public Enquiry only'}
	LoanPurpose = ''
	if 'Vlookup' in kwarg:
		if LoanProduct in DicProductTypeCBC:
			return DicProductTypeCBC[LoanProduct]
		else:
			return LoanProduct

	CBCLoanProduct = mkttool.getDictionaryObj(mktsetting.getAppSetting('CBCLoanProduct'))
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanProduct = RowObj.LoanProduct
		LoanPurpose = RowObj.LoanPurpose

	# check if variable LoanPurpose has value which not empty string.
	if LoanPurpose:
		Key = ''.join([LoanProduct,LoanPurpose])
		Key = Key.replace(" ","")
		if CBCLoanProduct.has_key(Key):
			return CBCLoanProduct[Key].replace('\r','')

	if LoanProduct in CBCLoanProduct:
		return CBCLoanProduct[LoanProduct].replace('\r','')
	
	return "Error: Loan Product not found in CBC"

def getMaturityDate(LoanID, **kwarg):
	if 'RowObj' in kwarg:
		RowObj 				= kwarg['RowObj']
		LoanID 				= RowObj.LoanID
		MaturityOrTerminateDate = RowObj.MaturityDate
		Terminate = getattr(RowObj, 'Terminate', None)

		if Terminate == 'Y':
			MaturityOrTerminateDate = db.session.query(MKT_LOAN_MATURITY.Date).filter(MKT_LOAN_MATURITY.ID==LoanID).first()
			MaturityOrTerminateDate = ''.join(MaturityOrTerminateDate) if MaturityOrTerminateDate else RowObj.MaturityDate
		return ''.join(list(reversed(MaturityOrTerminateDate.split('-'))))

def getProductStatus(AssetClass,**kwarg):
	'''
	N Normal
	S Special Mention
	C Closed
	U Substandard
	D Doubtful
	L Loss
	W Write Off
	'''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']

		AssetClass = str(RowObj.AssetClass)
		OutstandingAmount = RowObj.OutstandingAmount
		MoreThanOneYear = str(RowObj.MoreThanOneYear)
		Terminate = getattr(RowObj, 'Terminate', None)

		SpecialMention = '11'
		AssetClassObj = MKT_ASSET_CLASS.query.\
									filter(MKT_ASSET_CLASS.Description=='Special Mention').first()
		if AssetClassObj:
			SpecialMention = AssetClassObj.ID

		if Terminate == 'Y':
			return 'C'

		if AssetClass == "0":
			return "N"

		elif AssetClass == "10":
			return "N"

		elif AssetClass == SpecialMention:
			return "S"

		elif AssetClass == "20":
			if MoreThanOneYear == "N":
				return "S"
			else: 
				return "U"

		elif AssetClass == "30":
			if MoreThanOneYear == "N":
				return "U"
			else:

				return "D"

		elif AssetClass == "40":
			return "L"
		
		elif OutstandingAmount == 0:
			return "C"

	return "AssetClass not found."

def isRestructureLoan(LoanID,**kwarg):
	'''
	VB format
	N = Normal
	R = Restructured
	CBC format
	Y = Restructured loan
	N = Not restructured loan
	'''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanType = str(RowObj.LoanType)
		if LoanType == "N":
			return "N"
		else:
			return "Y"
	return "Restructured loan not found"

def getInstalmentAmount(LoanID,**kwarg):
	global CBCScheduleObj
	TotalAmount = 0
	Terminate = None
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	
	if Terminate == 'Y':
		LoanMaturityObj = MKT_LOAN_MATURITY.query.get(LoanID)
		if not LoanMaturityObj:
			MaturityDate = RowObj.MaturityDate
		else:
			MaturityDate = LoanMaturityObj.Date

		QueryObj = db.session.query(MKT_REP_SCHEDULE_HIST).\
								filter(MKT_REP_SCHEDULE_HIST.LoanID==LoanID).\
								filter(MKT_REP_SCHEDULE_HIST.CollectionDate<=MaturityDate).\
								filter(MKT_REP_SCHEDULE_HIST.RepStatus!="0").\
								order_by(MKT_REP_SCHEDULE_HIST.CollectionDate.desc(),desc(cast(func.regexp_replace(MKT_REP_SCHEDULE_HIST.ID, "(.*)@","","g"),Integer))).first()

		if QueryObj is not None:
			TotalAmount = float(QueryObj.Principal)+float(QueryObj.Interest)
			TotalAmount = formatNumberCBC(TotalAmount)
			return TotalAmount
		else:
			return formatNumberCBC(0)

	QueryObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
									filter(~MKT_REP_SCHEDULE.RepStatus.in_(["1","0"])).\
									order_by(MKT_REP_SCHEDULE.No.desc()).limit(1)

	for row in QueryObj:
		TotalAmount = float(row.Principal)+float(row.Interest)
	TotalAmount = formatNumberCBC(TotalAmount)
	return TotalAmount

def getFreqType(LoanID,**kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		FreqType = str(RowObj.FreqType)
		#Monthly
		if FreqType == "1":
			return "M"
		#Weekly
		else:
			return "W"
	return "FreqType not found"

def getPreviousPaymentDate(LoanID,**kwarg):

	global CBCScheduleObj
	TransactionCode = getPaymentTransaction()

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)
	LastTransactionDate =''
	Account = ''

	#I. for the Loan which can List Live
	CBCLoanContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	if CBCLoanContractObj:
		Account = CBCLoanContractObj.Account
	else:
		#I. for the Loan which can List Live
		CBCLoanContractHistObj = MKT_LOAN_CONTRACT_HIST.query.get(RowObj.TerminateID)
		if CBCLoanContractHistObj:
			Account = CBCLoanContractHistObj.Account

	AccountObj = db.session.query(
									MKT_ACC_ENTRY.DebitCredit,
									MKT_ACC_ENTRY.TransactionDate,
									func.sum(MKT_ACC_ENTRY.Amount).label('Amount'),
								).filter(MKT_ACC_ENTRY.Account==Account).\
								filter(MKT_ACC_ENTRY.DebitCredit=='Dr').\
								filter(MKT_ACC_ENTRY.Transaction.in_(TransactionCode)).\
								filter(MKT_ACC_ENTRY.Reference.ilike('%'+RowObj.LoanID)).\
								group_by(MKT_ACC_ENTRY.DebitCredit, MKT_ACC_ENTRY.TransactionDate).\
								order_by(MKT_ACC_ENTRY.TransactionDate.desc()).first()

	if AccountObj:
		RepaymentScheduleObj = db.session.query(MKT_REP_SCHEDULE).\
											filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
											order_by(MKT_REP_SCHEDULE.No.asc()).\
											first()

		if RepaymentScheduleObj:
			AccountTransactionDate = int(str(AccountObj.TransactionDate).replace('-',''))
			RepScheduleCollectionDate = int(str(RepaymentScheduleObj.CollectionDate).replace('-',''))

			if AccountTransactionDate < RepScheduleCollectionDate:
				return formatDateCBC(LastTransactionDate)

		LastTransactionDate = AccountObj.TransactionDate

	return formatDateCBC(LastTransactionDate)

def getPreviousPaymentAmount(LoanID,**kwarg):

	PreviousInstallment = 0
	global CBCScheduleObj
	TransactionCode = getPaymentTransaction()

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
	Account = ''
	Amount = 0
	
	#I. for the Loan which can List Live
	CBCLoanContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	if CBCLoanContractObj:
		Account = CBCLoanContractObj.Account
	else:
		#I. for the Loan which can List Live
		CBCLoanContractHistObj = MKT_LOAN_CONTRACT_HIST.query.get(RowObj.TerminateID)
		if CBCLoanContractHistObj:
			Account = CBCLoanContractHistObj.Account

	AccountObj = db.session.query(
									MKT_ACC_ENTRY.DebitCredit,
									MKT_ACC_ENTRY.TransactionDate,
									func.sum(MKT_ACC_ENTRY.Amount).label('Amount'),
								).filter(MKT_ACC_ENTRY.Account==Account).\
								filter(MKT_ACC_ENTRY.DebitCredit=='Dr').\
								filter(MKT_ACC_ENTRY.Transaction.in_(TransactionCode)).\
								filter(MKT_ACC_ENTRY.Reference.ilike('%'+RowObj.LoanID)).\
								group_by(MKT_ACC_ENTRY.DebitCredit, MKT_ACC_ENTRY.TransactionDate).\
								order_by(MKT_ACC_ENTRY.TransactionDate.desc()).first()

	if AccountObj:
		RepaymentScheduleObj = db.session.query(MKT_REP_SCHEDULE).\
											filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
											order_by(MKT_REP_SCHEDULE.No.asc()).\
											first()

		if RepaymentScheduleObj:
			AccountTransactionDate = int(str(AccountObj.TransactionDate).replace('-',''))
			RepScheduleCollectionDate = int(str(RepaymentScheduleObj.CollectionDate).replace('-',''))

			if AccountTransactionDate < RepScheduleCollectionDate:
				return formatNumberCBC(0)

		Amount = AccountObj.Amount
	return formatNumberCBC(Amount)

def getSecurityType(SecurityType,**kwarg):

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = RowObj.LoanID
		LoanAppID = RowObj.LoanApplicationID

		CollateralObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanID).all()

		if not CollateralObj:
			CollateralObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanAppID).all()

		if CollateralObj:

			if len(CollateralObj) == 1:
				for row in CollateralObj:
					CollateralDe = MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==row.Collateral).first()
					if CollateralDe:
						CollateralType = CollateralDe.CollateralType
						return CollateralType
					else:
						return "NO"
			else:
				return "MP"
		else:

			return "NO"

	DicSecurityType = { 
		'CA'	: 'Cash',
		'GI'	: 'Guarantor',
		'MO'	: 'Mortgage',
		'NO'	: 'None',
		'OT'	: 'Others',
		'SH'	: 'Shares',
		'MP'	: 'Multiple',
		'FD'	: 'Fixed Deposit',
		'LT'	: 'Land Title',
		'TO'	: 'Ownership Title - Land/Buildings',
		'FB'	: 'Floating Debenture',
		'MV'	: 'Motor Vehicle',
		'IN'	: 'Inventory',
		'LC'	: 'Letter of Credit',
		'CG'	: 'Corporate Guarantees'}

	if SecurityType in DicSecurityType:
		return DicSecurityType[SecurityType]
	else:
		SecurityType

def formatOutstandingCBC(OutstandingAmount,**kwarg):

	Terminate = None

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		Terminate = getattr(RowObj, 'Terminate', None)

	if Terminate == 'Y':
		return formatNumberCBC(0)
	else:
		return formatNumberCBC(RowObj.OutstandingAmount)

def getPastDueAmount(LoanID,**kwarg):
	global PDObj
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)
		Terminate = getattr(RowObj, 'Terminate', None)

	if Terminate == 'Y':
		return formatNumberCBC(0)

	if not PDObj:
		PDObj= MKT_PAST_DUE.query

	QueryObj = PDObj.get("PD%s"%LoanID)
	if QueryObj:
		if QueryObj.TotODAmount > 0:
			return formatNumberCBC(QueryObj.TotODAmount-QueryObj.TotPenaltyDue)

	return formatNumberCBC(0)

def getNextPaymentDate(LoanID,**kwarg):

	global CBCScheduleObj
	BankDateObj = mktdate.getBankDateObj()
	BankDate    = BankDateObj.SystemDate

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		LoanID = str(RowObj.LoanID)

	if not CBCScheduleObj:
		CBCScheduleObj = MKT_REP_SCHEDULE.query

	QueryObj = CBCScheduleObj.filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
									filter(MKT_REP_SCHEDULE.RepStatus=="0").\
									filter(MKT_REP_SCHEDULE.CollectionDate>=BankDate).\
									order_by(MKT_REP_SCHEDULE.No.asc())

	PaymentStatus = getPaymentStatus(LoanID,**kwarg)
	if PaymentStatus in ('C', 'L','R', 'W'):
		return ""

	if QueryObj.limit(1).first():
		NextPaymentDate 	= QueryObj.limit(1).first()

		if NextPaymentDate:			
			return formatDateCBC(NextPaymentDate.CollectionDate)
	return ""

def getPaymentStatus(LoanID,**kwarg):

	if 'Vlookup' in kwarg:
		DicPaymentStatus = { 
				'N' : 'New - Not yet activated',
				'R' : 'Reject',
				'Q' : 'No transactions in this period cycle',
				'0' : 'Current',
				'1' : '1 - 29 days overdue',
				'2' : '30 - 59 days overdue',
				'3' : '60 - 89 days overdue',
				'4' : '90 - 119 days overdue',
				'5' : '120 - 149 days overdue',
				'6' : '150 - 179 days overdue',
				'7' : '180 - 209 days overdue',
				'8' : '210 - 239 days overdue',
				'9' : '240 - 269 days overdue',
				'T' : '270 - 299 days overdue',
				'E' : '300 - 329 days overdue',
				'Y' : '330 - 359 days overdue',
				'L' : 'Loss - 360 days overdue',
				'W' : 'Write Off',
				'C' : 'Closed',
				'D' : 'Defer Payment',
				'V' : 'Vacation Payment',
				'M' : 'Missing Cycle'}
		if LoanID in DicPaymentStatus:
			return DicPaymentStatus[LoanID]
		else:
			return LoanID

	if 'RowObj' in kwarg:
		RowObj 				= kwarg['RowObj']
		AssetClass 			= str(RowObj.AssetClass)
		Disbursed 			= RowObj.Disbursed
		LoanBalance 		= RowObj.LoanBalance
		LoanID 				= RowObj.LoanID
		Terminate = getattr(RowObj, 'Terminate', None)

		if Terminate == 'Y':
			return 'C'

		PDID 	='PD%s'%LoanID
		NumDayDue = mktpdcollection.getMaxNumDayDue(PDID)
		if not NumDayDue:
			NumDayDue = getMaxNumDayDueInCurrentMonth(PDID)

		if AssetClass == "0" and not NumDayDue:
			if Decimal(LoanBalance) == Decimal(Disbursed):
				global CBCScheduleObj
				if not CBCScheduleObj:
					CBCScheduleObj = MKT_REP_SCHEDULE.query
				QueryObj = CBCScheduleObj.filter(MKT_REP_SCHEDULE.No==1).\
										filter(MKT_REP_SCHEDULE.LoanID==LoanID).first()
				if QueryObj:
					if QueryObj.PartPaidAmt >0:
						return "0"
				return "Q"
			
		
		if NumDayDue:
			NumDayDue = int(NumDayDue)
			if 1 <= NumDayDue <= 29:
				return "1"
			elif 30 <= NumDayDue <= 59:
				return "2"
			elif 60 <= NumDayDue <= 89:
				return "3"
			elif 90 <= NumDayDue <= 119:
				return "4"
			elif 120 <= NumDayDue <= 149:
				return "5"
			elif 150 <= NumDayDue <= 179:
				return "6"
			elif 180 <= NumDayDue <= 209:
				return "7"
			elif 210 <= NumDayDue <= 239:
				return "8"
			elif 240 <= NumDayDue <= 269:
				return "9"
			elif 270 <= NumDayDue <= 299:
				return "T"
			elif 300 <= NumDayDue <= 329:
				return "E"
			elif 330 <= NumDayDue <= 359:
				return "Y"
			else:
				return "L"
		else:
			return "0"
	return "AssetClass not found."

def getAsOfDate(LoanID, **kwarg):
	'''
	This method will return As Of Date of loan contract when generate cbc data upload.
	If user want to generate data at the end of month (example 31-Jan-2018) they need to run EOD one day.
	This mean that the System Date now must be 01-Feb-2018. But user only want generate data from Start Of Month
	to End Of Month.
	form:
		AsOfDate = System Date - 1
	'''
	AsOfDate = mktdate.getBankDate() - timedelta(days=1)
	AsOfDate = ''.join(list(reversed(str(AsOfDate).split('-'))))
	return AsOfDate

def formatNumberCBC(Number,**kwarg):
	return mktmoney.formatNumber(float(Number),0)

def getMaxNumDayDueInCurrentMonth(ID):
	NumDayDue = ''
	AsOfDate = mktdate.getBankDate() - timedelta(days=1)
	AsOfDate = str(AsOfDate)[:7]
	PDDateObj 	= MKT_PD_DATE.query.filter(MKT_PD_DATE.ID.ilike('%'+ID)).\
									filter(MKT_PD_DATE.DueDate.ilike(AsOfDate + '%')).\
									filter(MKT_PD_DATE.NumDayDue != '').\
									order_by(MKT_PD_DATE.DueDate.asc(),
											MKT_PD_DATE.NumDayDue.desc()).\
									limit(1).first()
	if PDDateObj:
		NumDayDue=str(PDDateObj.NumDayDue)

	return NumDayDue

# Function for overdraft
# Overdraft: Get Contract Number Type By Overdraft Contract
def getContactNumberTypeODF(OverdraftID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		OverdraftID = str(RowObj.OverdraftID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_OVERDRAFT_CONTRACT.ID, 
									MKT_OVERDRAFT_CONTRACT.CustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_OVERDRAFT_CONTRACT.ID==OverdraftID).\
									filter(MKT_CUSTOMER.ID==MKT_OVERDRAFT_CONTRACT.CustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_OVERDRAFT_CONTRACT_HIST.ID, 
									MKT_OVERDRAFT_CONTRACT_HIST.CustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_OVERDRAFT_CONTRACT_HIST.ID.ilike(OverdraftID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_OVERDRAFT_CONTRACT_HIST.CustomerID)).first()

	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "U"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return "H"
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return "M"

# Overdraft: Get Contract Number Area By Overdraft Contract
def getContactNumberAreaODF(OverdraftID, **kwarg):
	""
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		OverdraftID = str(RowObj.OverdraftID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_OVERDRAFT_CONTRACT.ID, 
									MKT_OVERDRAFT_CONTRACT.CustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_OVERDRAFT_CONTRACT.ID==OverdraftID).\
									filter(MKT_CUSTOMER.ID==MKT_OVERDRAFT_CONTRACT.CustomerID).first()
	
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_OVERDRAFT_CONTRACT_HIST.ID, 
									MKT_OVERDRAFT_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_OVERDRAFT_CONTRACT_HIST.ID.ilike(OverdraftID+'%')).\
									filter(MKT_CUSTOMER.ID.ilike(MKT_OVERDRAFT_CONTRACT_HIST.CustomerID)).first()
	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return ""
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Prefix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return ""

# Overdraft: Get Contract Number Number By Overdraft Contract
def getContactNumberNumberODF(OverdraftID, **kwarg):
	
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		OverdraftID = str(RowObj.OverdraftID)
		Terminate = getattr(RowObj, 'Terminate', None)
	Mobile = ''
	Prefix = ''
	Postfix = ''
	CustomerObj = db.session.query(
									MKT_OVERDRAFT_CONTRACT.ID, 
									MKT_OVERDRAFT_CONTRACT.CustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_OVERDRAFT_CONTRACT.ID==OverdraftID).\
									filter(MKT_CUSTOMER.ID==MKT_OVERDRAFT_CONTRACT.CustomerID).first()
	if not CustomerObj:
		CustomerObj = db.session.query(
									MKT_OVERDRAFT_CONTRACT_HIST.ID.label('ContactID'), 
									MKT_OVERDRAFT_CONTRACT_HIST.ContractCustomerID,
									MKT_CUSTOMER.Mobile1,
									MKT_CUSTOMER.ID
									).\
									filter(MKT_OVERDRAFT_HIST.ID.ilike(RowObj.OverdraftID+'%')).\
									filter(MKT_CUSTOMER.ID==MKT_OVERDRAFT_HIST.CustomerID).first()

	Mobile = CustomerObj.Mobile1
	if Mobile=='':
		# Contact Number Area is Black
		# Contact Number Tyoe is Unknown(U)
		# Contact Number country Code is 855
		# Contact Number is 000
		return "000"
	Prefix = Mobile[:3]
	if Prefix in ListAreaNumber:
		Postfix = Mobile[3:]
		# Contact Number Area is Prefix
		# Contact Number Tyoe is Home(H)
		# Contact Number country Code is 855
		# Contact Number is Postfix
		return Postfix
	# Contact Number Area is Blank
	# Contact Number Tyoe is Mobile(M)
	# Contact Number country Code is 855
	# Contact Number is Mobile
	return Mobile

	# Overdraft: formatNumber CBC from overdraft
def formatNumberCBCODF(Number,**kwarg):
	return mktmoney.formatNumber(float(Number if Number else 0),0)

	# Overdraft: get Maturity Date fro Overdraft
def getMaturityDateODF(OverdraftID, **kwarg):
		if 'RowObj' in kwarg:
			RowObj 				= kwarg['RowObj']
			OverdraftID 				= RowObj.OverdraftID
			MaturityOrTerminateDate = RowObj.MaturityDate
			Terminate = getattr(RowObj, 'Terminate', None)

			####### Not In Used ########
			if Terminate == 'Y':
				MaturityOrTerminateDate = db.session.query(MKT_LOAN_MATURITY.Date).filter(MKT_LOAN_MATURITY.ID==LoanID).first()
				MaturityOrTerminateDate = ''.join(MaturityOrTerminateDate)
			####### /Not In Used ######
			return ''.join(list(reversed(MaturityOrTerminateDate.split('-'))))

# Overdraft: Get Account Type By Overdraft
def getAccountTypeODF(OverdraftID,**kwarg):
	'''
		AccountType
		S (ingle)
		J (oint)
		G (roup)
	'''
	if 'Vlookup' in kwarg:
		DicAccountType = {'S':'Single','J':'Joint','G':'Group'}
		if OverdraftID in DicAccountType:
			return DicAccountType[OverdraftID]
		else:
			return OverdraftID

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		OverdraftID = RowObj.OverdraftID
		Terminate = getattr(RowObj, 'Terminate', None)

		if Terminate == 'Y':

			TerminateID = getattr(RowObj, 'TerminateID', None)

			if TerminateID:

				CoBorrowerObj = MKT_LOAN_CO_BORROWER_HIST.query.filter(MKT_LOAN_CO_BORROWER_HIST.ID==TerminateID)

				if CoBorrowerObj.all():
					return "J"
				else:
					return "S"

			else:

				return ''


		CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==OverdraftID)

		if CoBorrowerObj.all():
			return "J"
		else:
			return "S"

	if 'Count' in kwarg:
		CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==OverdraftID)
		if CoBorrowerObj.all():
			return "J",str(CoBorrowerObj.count()+1)
		else:
			return "S","1"

# Overdraft: get Product Type CBC By Overdraft
def getProductTypeCBCODF(LoanProduct,**kwarg):

	return 'ODF'

# Overdraft: get Product Status CBC by Overdraft
def getProductStatusODF(AssetClass,**kwarg):
	'''
	N Normal
	S Special Mention
	C Closed
	U Substandard
	D Doubtful
	L Loss
	W Write Off
	'''
	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']

		AssetClass = RowObj.AssetClass #str(RowObj.AssetClass if 'AssetClass' in RowObj else '')
		OutstandingAmount = RowObj.OutstandingAmount
		MoreThanOneYear = str(RowObj.MoreThanOneYear if 'MoreThanOneYear' in RowObj else '')
		Terminate = getattr(RowObj, 'Terminate', None)

		SpecialMention = '11'
		AssetClassObj = MKT_ASSET_CLASS.query.\
									filter(MKT_ASSET_CLASS.Description=='Special Mention').first()

		if AssetClassObj:
			SpecialMention = AssetClassObj.ID

		if Terminate == 'Y':
			return 'C'

		if AssetClass == "0":
			return "N"

		elif AssetClass == "10":
			return "N"

		elif AssetClass == SpecialMention:
			return "S"

		elif AssetClass == "20":
			if MoreThanOneYear == "N":
				return "S"
			else: 
				return "U"

		elif AssetClass == "30":
			if MoreThanOneYear == "N":
				return "U"
			else:

				return "D"

		elif AssetClass == "40":
			return "L"
		
		elif OutstandingAmount == 0:
			return "C"

	return "AssetClass not found."

# Overdraft get Installment Amount from Overdraft - Please refer to function getPreviousPaymentAmountODF, it should be the same
# def getInstalmentAmountODF(LoanID,**kwarg):

# 	return 0

# OverDraft: is Restructure Loan from Overdraf
def isRestructureLoanODF(OverdraftID,**kwarg):
	'''
	VB format
	N = Normal
	R = Restructured
	CBC format
	Y = Restructured loan
	N = Not restructured loan
	'''
	if 'RowObj' in kwarg:
		RowObj 		= kwarg['RowObj']
		AssetClass 	= RowObj.AssetClass
		LoanObj 	= MKT_ASSET_CLASS_PRO.query.filter(MKT_ASSET_CLASS_PRO.ID==AssetClass).first()
		LoanType 	= LoanObj.LoanType if LoanObj else ''

		if LoanType == "N":
			return "N"
		else:
			return "Y"
	return "Restructured loan not found"

def getFreqTypeODF(LoanID,**kwarg):
	
	# if 'RowObj' in kwarg:
	# 	RowObj = kwarg['RowObj']
	# 	FreqType = str(RowObj.FreqType)
	# 	#Monthly
	# 	if FreqType == "1":
	# 		return "M"
	# 	#Weekly
	# 	else:
	# 		return "W"
	return "M"

# Last Payment Date of Overdraft
def getPreviousPaymentDateODF(LoanID,**kwarg):

	global CBCScheduleObj
	# TransactionCode = getPaymentTransaction()
	LastTransactionDate =''
	Account = ''

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		AccountID = str(RowObj.OverdraftAccout)
		AccEntryObj = MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Account==AccountID).\
						filter(MKT_ACC_ENTRY.DebitCredit=='Cr').\
						order_by(MKT_ACC_ENTRY.TransactionDate.desc()).\
						first()

		if AccEntryObj:
			LastTransactionDate = AccEntryObj.TransactionDate

	return formatDateCBC(LastTransactionDate)

# Last Payment Amount of Overdraft
def getPreviousPaymentAmountODF(OverdraftID,**kwarg):
	Amount =0

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		AccountID = str(RowObj.OverdraftAccout)
		AccEntryObj = MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Account==AccountID).\
						filter(MKT_ACC_ENTRY.DebitCredit=='Cr').\
						order_by(MKT_ACC_ENTRY.TransactionDate.desc()).\
						first()

		if AccEntryObj:
			Amount = AccEntryObj.Amount

	return formatNumberCBC(Amount)

# Get Collateral Security Type of Overdraft
def getSecurityTypeODF(SecurityType,**kwarg):

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		CollateralID = RowObj.Collateral

		if CollateralID !='':
			CollateralDe = MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==CollateralID).first()

			if CollateralDe:
				CollateralType = CollateralDe.CollateralType
				return CollateralType
			else:
				return "NO"
		else:
			return "NO"

	DicSecurityType = { 
		'CA'	: 'Cash',
		'GI'	: 'Guarantor',
		'MO'	: 'Mortgage',
		'NO'	: 'None',
		'OT'	: 'Others',
		'SH'	: 'Shares',
		'MP'	: 'Multiple',
		'FD'	: 'Fixed Deposit',
		'LT'	: 'Land Title',
		'TO'	: 'Ownership Title - Land/Buildings',
		'FB'	: 'Floating Debenture',
		'MV'	: 'Motor Vehicle',
		'IN'	: 'Inventory',
		'LC'	: 'Letter of Credit',
		'CG'	: 'Corporate Guarantees'}
	if SecurityType in DicSecurityType:
		return DicSecurityType[SecurityType]
	else:
		SecurityType

# Get Next Payment Date Overdraft
def getNextPaymentDateODF(LoanID,**kwarg):

	return ""



# Past Due Amount of Overdraft
def getPastDueAmountODF(LoanID,**kwarg):
	global PDObj
	Amount = ''

	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		Amount = RowObj.AssetClass

	if Amount !='':
		return formatNumberCBC(Amount)
	else:
		return formatNumberCBC(0)

# Get Payment Status Overdraft
def getPaymentStatusODF(LoanID,**kwarg):


	if 'RowObj' in kwarg:
		RowObj = kwarg['RowObj']
		NumDayDue = RowObj.NumDayDue
		if NumDayDue:
			NumDayDue = int(NumDayDue)
			if NumDayDue == 0:
				return "0"
			elif 1 <= NumDayDue <= 29:
				return "1"
			elif 30 <= NumDayDue <= 59:
				return "2"
			elif 60 <= NumDayDue <= 89:
				return "3"
			elif 90 <= NumDayDue <= 119:
				return "4"
			elif 120 <= NumDayDue <= 149:
				return "5"
			elif 150 <= NumDayDue <= 179:
				return "6"
			elif 180 <= NumDayDue <= 209:
				return "7"
			elif 210 <= NumDayDue <= 239:
				return "8"
			elif 240 <= NumDayDue <= 269:
				return "9"
			elif 270 <= NumDayDue <= 299:
				return "T"
			elif 300 <= NumDayDue <= 329:
				return "E"
			elif 330 <= NumDayDue <= 359:
				return "Y"
			else:
				return "L"
		else:
			return "0"
	
	return "AssetClass not found."


# List Global variables

#ContactNumberType: O is Office, F is Fax, H is Home, M is Mobile, U is Unknown type
ListContactNumberType = ['O','F','H','M','U']
ListAreaNumber = ['023','024','025','026','032','033','034','035','036','042','043','044','052',
					'053','054','055','062','063','064','065','072','073','074','074','075']
