# -*- coding: utf-8 -*-

from app.mktcore.jinja      import *
from flask                  import Flask
from flask.ext.sqlalchemy   import SQLAlchemy
from app.Language.register  import getLanguage
from flask_json_multidict   import get_json_multidict
import os

# Include version auto from file
VersionPath = os.path.dirname(os.path.abspath(__file__)) + "/VERSION.txt"
with open(VersionPath, "r") as fh:
    __version__ = fh.read()

# Initialize the core application and configure the app
app = Flask(__name__, instance_relative_config=True)
app.config.from_object('app.config')

# load the instance config, if it exists, when not testing
app.config.from_pyfile('config.py', silent=True)

# ensure the instance folder exists
try:
    os.makedirs(app.instance_path)
except OSError:
    pass
if app.config.get('TESTING'):
    app.logger.warning("You're running test mode...")
    app.config.update(
        SQLALCHEMY_DATABASE_URI=app.config.get('TEST_DATABASE_URI'))

db=SQLAlchemy(app)

#Thread connection
import app.tools.thread.mktthread as mktthread

ThreadObj   =   mktthread.CLS_CONNECTION_GUARD()
ThreadS     =   ThreadObj.ThreadS
setattr(db, 'session', ThreadS)
setattr(db, 'ThreadObj', ThreadObj)
setattr(db, 'Thread', mktthread)


#: Covert Request from JSON to request.form when user post via API.
def resolve_request_body():
	"""Before every request, resolve `request.body` from either `request.form` or `request.get_json()`"""
	request.form = request.form
	if checkContentType() == "json" and request.method == "POST":
		try:
			if request.get_json():
				request.form = get_json_multidict(request)
		except Exception as e:
			raise e
app.before_request(resolve_request_body)


#Import urlregister from app
from urlregister import *

app.register_blueprint(admin , url_prefix='/Morakot')

#Set attr field to class models on run time. 
try:
	TableObj = MKT_ALTERTABLE.query.all()
	for t in TableObj:
		DataType = t.DataType
		if t.DataType in ["String", "Numeric"]:
			DataType = eval("db.%s(%s)" % (t.DataType, t.Length))

		else:
			DataType = eval("db.%s" % t.DataType)

		setattr(eval(t.TableName), t.FieldName, db.Column(DataType))

		if db.engine.dialect.has_table(db.engine.connect(), "%s_HIST" % t.TableName):
			setattr(eval("%s_HIST" %t.TableName), t.FieldName, db.Column(DataType))

		if db.engine.dialect.has_table(db.engine.connect(), "%s_INAU" % t.TableName):
			setattr(eval("%s_INAU" %t.TableName), t.FieldName, db.Column(DataType))
	
except Exception, e:
	pass

db.session.close()

#register jinja function 
app.jinja_env.globals.update(delimiterdic=delimiterdic)
app.jinja_env.globals.update(removestring=removestring)
app.jinja_env.globals.update(contain=contain)
app.jinja_env.globals.update(maxValue=maxValue)
app.jinja_env.globals.update(getLanguage=getLanguage)
app.jinja_env.add_extension('jinja2.ext.do') # this exitension used for append itme into jinja2 list.