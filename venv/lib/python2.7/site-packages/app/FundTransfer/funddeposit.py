from flask 						import flash
from wtforms 					import DecimalField, IntegerField,FieldList,FormField
from app.mktcore.wtfimports 	import *
from app.mktcore.imports 			import *
from .models 					import *
import time
from decimal 					import *
from flask 						import session,flash

import app.tools.mktparam   	as mktparam
import app.tools.mktdate 		as mktdate
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktaccount 	as mktaccount
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.user 			as mktuser
import app.tools.mktfundtransfer 	as mktfundtransfer

from .models 					import *
from .forms 					import *
from app.Account.models 		import *
from app.CashAccount.models 	import *

@app.route("/Morakot/API/FundDepositAccount", methods=['GET'])
@app.route("/Morakot/FundDepositAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFundDeposit():
	AccountID 		= request.args.get('CrAccount')
	return mktteller.getFundAcount("FD",AccountID)

def loadCurrentDate():
	return 	mktdate.getBankDate()
	
class FRM_FUND_DEPOSIT(exform):

	CrAccount 	= RemoteTextField(requiredlabel(getLanguage("Account"),"*"), [validators.Required()])
	CrCategory 	= TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	CrCurrency 	= TextField(requiredlabel(getLanguage("Currency"), "*"), [validators.Required()])

	Amount 		= TextField(requiredlabel(getLanguage("Amount"), "*"), [validators.Required()])
	Transaction = TextField(requiredlabel(getLanguage("Transaction"), "*"), [validators.Required()])

	TranDate 	= DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()],default=loadCurrentDate)
	Reference 	= TextField(getLanguage("Reference"),[validators.Length( max=35)])
	Note 		= TextAreaField(getLanguage("Note"),[validators.Length( max=50)])


	DrAccount 	= TextField(getLanguage("Cash Account"))
	DrCategory 	= TextField(getLanguage("Cash Category"))
	DrCurrency 	= TextField(getLanguage("Cash Currency"))
	Module 		= TextField("Module", default="FD")

	ExchangeRate 	= TextField(requiredlabel('Exchange Rate','*'),description='1-Detail',
												validators=[validators.Required(),
															mktteller.customValidateExchangeRate])

	LCYAmount 		= TextField(requiredlabel('LCY Amount','*'),description='1-Detail',
											validators=[validators.Required(),
														mktteller.customValidateLCYAmount])

	def validate_Amount(form, field):

		Amo 		=	str(form.Amount.data)
		Amo 		= 	Amo.replace(',','')
		CrAccount 	=	form.CrAccount.data
		CrCurrency 	=	form.CrCurrency.data
		TranDate 	=	str(form.TranDate.data)
		CheckBalance1 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr",TranDate=TranDate)

		if CheckBalance1:
			
			raise ValidationError(CheckBalance1)

		DrAccount 	=	form.DrAccount.data
		DrCurrency 	=	form.DrCurrency.data

		CheckBalance2 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr",TranDate=TranDate)
		
		if CheckBalance2:

			raise ValidationError(CheckBalance2)

	def validate_DrAccount(form,field):
		if form.CrAccount.data:
			TellerParam = mktparam.getTellerParam()
			if TellerParam:
				if not form.DrAccount.data :
					raise ValidationError("User don't have Vault Account.")
			else:
				raise ValidationError("Please set Teller Parameter first before deposit transaction.")
	
	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data

		try:

			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)

	@staticmethod
	def setVisible():		
		control_list=['DrAccount','DrCategory','DrCurrency','Transaction','Module']
		return control_list

	@staticmethod
	def moneyField():
		return [("Amount","CrCurrency")]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCategory',len2),
						('CrCurrency',len2)	]

		return control_list

	@staticmethod
	def setDisable():
		EnableExchangeRateField = mktsetting.getAppSetting('EnableExchangeRateField')
		if EnableExchangeRateField == 'Yes':
			return [('LCYAmount'),('DrAccount'),('DrCategory'), ('DrCurrency'), ('CrCategory'), ('CrCurrency'),('Transaction')]
		return [('ExchangeRate'),('LCYAmount'),('DrAccount'),('DrCategory'), ('DrCurrency'), ('CrCategory'), ('CrCurrency'),('Transaction')]

	@staticmethod
	def listField():

		Fields = ["ID", "DrAccount","DrCurrency", "CrAccount", "CrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields, ["ID*LK*FD"]

	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"DrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#CrCategory').val(data.CrCategory); $('#CrCurrency').val(data.CrCurrency); $('#DrAccount').val(data.DrAccount); $('#DrCurrency').val(data.DrCurrency); $('#DrCategory').val(data.DrCategory); $('#Transaction').val(data.TranCode);"
		varname 		= "CrAccount:$('#CrAccount').val()"
		fun 			= ["CrAccount", varname, fielddisplay, "/Morakot/FundDepositAccount", "change"]
		hotfield.append(fun)

		# #set session[Teller] to DP
		# fielddisplay 	= ""
		# varname 		= "CrAccount:'DP'"
		# fun 			= ["s2id_autogen2_search", varname, fielddisplay, "/Morakot/FundDepositAccount", "focus"]
		# hotfield.append(fun)
		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["CrCurrency", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["ExchangeRate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["TranDate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def formReadOnly():

		return "AUTH"

	@staticmethod
	def beforeNewID ():
		Check = mktteller.isUserVaultAccount()
		if not Check[0]:
			return True,Check[1]
		else:
			#Mean that user have cash account.
			return False,''
			
	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeInsert():
		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel

		if AuthLevel == 0 :

			DrAcc 		= request.form['DrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['CrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			LCYAmount	= Decimal(request.form['LCYAmount'])
			Module 		= 'FD'
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']

			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_FUND_TRANSFER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False
			
			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,\
															Amo,Module,Tran,TranDate,Ref,Note,LCYAmount=LCYAmount)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False
		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			# AuthLevel 	= g.getNAuthorize
			# print 'beforeAuthorize: %s'% AuthLevel
			# ID 			= g.formID
			ID 			= 	g.formID
			FundDeposit 	=	MKT_FUND_TRANSFER_INAU.query.get(ID)
			
			if not FundDeposit:

				flash(msg_error + "Fundtransfer %s not found." %ID)
				return False

			else:

				Amo 			=	FundDeposit.Amount if FundDeposit.Amount else 0

				CrAccount 		=	FundDeposit.CrAccount
				CrCurrency 		=	FundDeposit.CrCurrency
				TranDate 		=	FundDeposit.TranDate
				CheckBalance1 	= 	mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr",TranDate=TranDate)

				if CheckBalance1:
					
					flash(msg_error + CheckBalance1)
					return False

				DrAccount 		=	FundDeposit.DrAccount
				DrCurrency 		=	FundDeposit.DrCurrency
				CheckBalance2 	= 	mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr",TranDate=TranDate)
				
				if CheckBalance2:

					flash(msg_error + CheckBalance2)
					return False

				CheckAccounting = mktteller.setAuthorize('FD',MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			Check = mktteller.validationReverse(MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID)
		
			if not Check[0]:
				Audit 		= mktaudit.getAuditrail()
				Inputter	= Audit['Inputter']
				Createdon 	= Audit['Createdon']
				CheckAccounting = mktteller.setReverse('FundTransfer',AuthLevel,'FD',MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID,Inputter,Createdon)
				if not CheckAccounting[0]:
					#Catch error
					db.session.rollback()
					db.session.close()
					return True,CheckAccounting[1]

				#Successfully
				db.session.commit()
				db.session.close()
				return True,CheckAccounting[1]

			else:
				return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e