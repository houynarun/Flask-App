from flask 						import flash,jsonify
from wtforms 					import DecimalField, IntegerField,FieldList,FormField
from app.mktcore.wtfimports 	import *
import time
from decimal 					import *
from flask 						import session

import app.tools.mktparam   	as mktparam
import app.tools.mktdate 		as mktdate
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktaccount 	as mktaccount
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.mktmoney 		as mktmoney
import app.tools.mktfundtransfer 	as mktfundtransfer
import app.tools.mktsetting 		as mktsetting
import app.tools.user 				as mktuser
import app.tools.mktdb 				as mktdb

from .models 					import *
from .forms 					import *
from app.CashAccount.models 	import *
from app.Account.models 		import *
from app.JAccount.models 		import *
from app.Disbursement.models 	import *
from app.Officer.models import *

@app.route("/Morakot/FundAdvanceDisburse", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFundAdvanceDisburse():
	DisburseID 	= request.args.get('Disburse')
	TranCode 	= ""
	CrAccount 	= ""
	CrCategory 	= ""
	CrCurrency 	= ""
	DrAccount 	= ""
	DrCurrency 	= ""
	DrCategory 	= ""
	Amount 		= ""
	Reference	= ""
	Note 		= ""
	Message 	= ""
	ListID 		= ""

	if DisburseID:
		DisburseObj = MKT_DISBURSE.query.get(DisburseID)
		AccSetting 	= mktsetting.getAccSetting()
		if DisburseObj:
			OfficerObj 	= MKT_OFFICER.query.get(DisburseObj.Officer)
			DrAccount 	= DisburseObj.OfficerAccount
			AccObj 		= MKT_ACCOUNT.query.get(DrAccount)
			DrCurrency 	= DisburseObj.Currency
			DrCategory 	= DisburseObj.OfficerCategory
			Amount 		= float(DisburseObj.TotalDisbursement)
			CashObj 	= mktteller.getCashAccountObj(DrCurrency)
			if CashObj:
				CrAccount 	= CashObj.ID
				CrCategory  = CashObj.AccCategory
				CrCurrency 	= CashObj.Currency
				if AccSetting:
					TranCode=AccSetting.CashAdvanceTran

					OfficerName = "%s %s"%(OfficerObj.LastName,OfficerObj.FirstName)
					Note 	= "Cash Advance for %s"%OfficerName
				else:
					Message="Please set Accounting Setting first."

	return jsonify(	TranCode=TranCode,
					CrAccount=CrAccount,
					CrCategory=CrCategory,
					CrCurrency=CrCurrency,
					DrAccount=DrAccount,
					DrCurrency=DrCurrency,
					DrCategory=DrCategory,
					Amount=Amount,
					Reference=DisburseID,
					ListID=DisburseID,
					Note=Note,
					Message=Message)

@app.route("/Morakot/FundAdvanceOfficer", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFundAdvanceOfficer():
	Officer 	= request.args.get('Officer','')
	TranCode 	= ""
	CrAccount 	= ""
	CrCategory 	= ""
	CrCurrency 	= ""
	DrAccount 	= ""
	DrCurrency 	= ""
	DrCategory 	= ""
	Amount 		= 0
	Reference	= ""
	Note 		= ""
	Message 	= ""
	DisburseObj = ''
	ListID 		= ''
	TotalDisbursement = 0

	if Officer:
		DisburseObj = MKT_DISBURSE.query.filter(MKT_DISBURSE.Officer==Officer).first()

		AccSetting 	= mktsetting.getAccSetting()
		CurrentBranch = mktuser.getCurrentBranch()
		if DisburseObj:

			OfficerObj 	= MKT_OFFICER.query.get(DisburseObj.Officer)
			DrAccount 	= DisburseObj.OfficerAccount
			AccObj 		= MKT_ACCOUNT.query.get(DrAccount)
			DrCurrency 	= DisburseObj.Currency
			DrCategory 	= DisburseObj.OfficerCategory
			DisburseObj = db.session.query(MKT_DISBURSE.ID,MKT_DISBURSE.TotalDisbursement).\
									 filter(MKT_DISBURSE.Officer == Officer).\
									 filter(MKT_DISBURSE.AdvanceStatus=='N').\
									 filter(MKT_DISBURSE.Branch==CurrentBranch).all()
			if DisburseObj:
				for item in DisburseObj:
					TotalDisbursement += item.TotalDisbursement
					ListID 			  += item.ID + ' '

			CashObj 	= mktteller.getCashAccountObj(DrCurrency)
			if CashObj:
				CrAccount 	= CashObj.ID
				CrCategory  = CashObj.AccCategory
				CrCurrency 	= CashObj.Currency
				if AccSetting:
					TranCode=AccSetting.CashAdvanceTran

					OfficerName = "%s %s"%(OfficerObj.LastName,OfficerObj.FirstName)
					Note 	= "Cash Advance for %s"%OfficerName
				else:
					Message="Please set Accounting Setting first."
	return jsonify(	TranCode=TranCode,
					CrAccount=CrAccount,
					CrCategory=CrCategory,
					CrCurrency=CrCurrency,
					DrAccount=DrAccount,
					DrCurrency=DrCurrency,
					DrCategory=DrCategory,
					Amount=float(TotalDisbursement),
					Reference=Officer,
					Note=Note,
					Message=Message,
					ListID=ListID.strip())

def loadCurrentDate():
	return 	mktdate.getBankDate()

def loanDisbursement():
	CurrentBranch = mktuser.getCurrentBranch()
	QueryObj = MKT_DISBURSE.query.filter(MKT_DISBURSE.Branch==CurrentBranch).\
								filter(MKT_DISBURSE.AdvanceStatus=='N')
	return QueryObj

class FRM_FUND_ADVANCE(exform):

	Disburse	= QuerySelectField(getLanguage("Disbursement Sheet"),
								query_factory=loanDisbursement,
								get_label=lambda a: a.ID + " - " +MKT_OFFICER.query.get(a.Officer).LastName+' '+MKT_OFFICER.query.get(a.Officer).FirstName,
								allow_blank=True,
								blank_text='--None--',
								validators=[validators.optional()])
	Officer     = RemoteTextField("Loan Officer",
					dicRemote={'url':'/Morakot/SearchOfficer'}
					)
	DrAccount 	= TextField(requiredlabel(getLanguage("Officer Account"),"*"), [validators.Required()])
	DrCategory 	= TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	DrCurrency 	= TextField(requiredlabel(getLanguage("Currency"), "*"), [validators.Required()])
	Amount 		= TextField(requiredlabel(getLanguage("Disbursement Amount"), "*"), [validators.Required()])

	Transaction = TextField(requiredlabel(getLanguage("Transaction"), "*"), [validators.Required()])
	TranDate 	= DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()],default=loadCurrentDate)

	Reference 	= TextField(getLanguage("Reference"), [validators.Required(),validators.Length( max=35)])
	DisbursementList = TextField("Disbursements sheet")
	Note 		= TextAreaField(getLanguage("Note"), [validators.Length( max=50)])
	CrAccount 	= TextField(getLanguage("Cash Account"))
	CrCategory 	= TextField(getLanguage("Cash Category"))
	CrCurrency 	= TextField(getLanguage("Cash Currency"))
	Module 		= TextField("Module", default="FA")

	ExchangeRate 	= TextField(requiredlabel('Exchange Rate','*'),description='1-Detail',
												validators=[validators.Required(),
															mktteller.customValidateExchangeRate])

	LCYAmount 		= TextField(requiredlabel('LCY Amount','*'),description='1-Detail',
											validators=[validators.Required(),
														mktteller.customValidateLCYAmount])
	def validate_Officer(form,field):
			DisburseID 	=	str(request.form['Disburse'])
			Officer     =   str(request.form['Officer'])
			if DisburseID != '__None' and Officer:
				 raise ValidationError("Please select either Disbursement sheet or Officer to Fund Advance.")

	def validate_DisbursementList(form,field):
		DisburseList 	=	str(request.form['DisbursementList']).split()
		DisburseID 		= ''
		for row in DisburseList:
			FundINAUObj = MKT_FUND_TRANSFER_INAU.query.filter(MKT_FUND_TRANSFER_INAU.DisbursementList.contains(row)).first()
			if FundINAUObj:
				DisburseID = DisburseID + FundINAUObj.ID + ' '

		if DisburseID:
			raise ValidationError("The disbursement sheet was already cash advanced and in list un-authorized %s."%DisburseID)

	def validate_Amount(form, field):
		
		Amo 		=	str(form.Amount.data)
		Amo 		= 	Amo.replace(',','')
		DrAccount 	=	form.DrAccount.data
		DrCurrency 	=	form.DrCurrency.data

		CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr")
		
		if CheckBalance1:

			raise ValidationError(CheckBalance1)

		CrAccount 	=	form.CrAccount.data
		CrCurrency 	=	form.CrCurrency.data
		CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr")

		if CheckBalance2:
			
			raise ValidationError(CheckBalance2)

	def validate_CrAccount(form,field):
		if form.DrAccount.data:
			TellerParam = mktparam.getTellerParam()
			if TellerParam:
				if not form.CrAccount.data :
					raise ValidationError("User don't have Cash Account.")
			else:
				raise ValidationError("Please set Teller Parameter first before cash advance transaction.")

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data

		try:

			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)

	@staticmethod
	def setVisible():
	
		control_list=['CrAccount','CrCategory','CrCurrency','Transaction','Module']
		return control_list

	@staticmethod
	def moneyField():
		return [('Amount','DrCurrency')]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCategory',len2),
						('CrCurrency',len2)	]

		return control_list

	@staticmethod
	def setDisable():
		return [ ('Amount'),('LCYAmount'),('Reference'),('DrAccount'),('CrAccount'),('CrCategory'), 
				 ('CrCurrency'), ('DrCategory'), ('DrCurrency'),('Transaction'), ('DisbursementList'), ('ExchangeRate')]

	@staticmethod
	def listField():
		
		Fields = ["ID", "DrAccount","DrCurrency", "CrAccount", "CrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields, ["ID*LK*FA"]

	@staticmethod
	def formatMoney(): # for listField 
		return ["Amount"],"DrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#DrAccount').val(data.DrAccount); $('#Amount').val(data.Amount);  $('#DrCategory').val(data.DrCategory); $('#DrCurrency').val(data.DrCurrency);"
		fielddisplay 	+=" $('#Amount').trigger('blur'); $('#Reference').val(data.Reference); $('#CrAccount').val(data.CrAccount); $('#CrCurrency').val(data.CrCurrency);"
		fielddisplay 	+=" $('#CrCategory').val(data.CrCategory); $('#Transaction').val(data.TranCode); $('#Note').val(data.Note); $('#DisbursementList').val(data.ListID);"
		varname 		= "Disburse:$('#Disburse').val()"
		fun 			= ["Disburse", varname, fielddisplay, "/Morakot/FundAdvanceDisburse", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#DrAccount').val(data.DrAccount); $('#Amount').val(data.Amount);  $('#DrCategory').val(data.DrCategory); $('#DrCurrency').val(data.DrCurrency);"
		fielddisplay 	+= "$('#Amount').trigger('blur'); $('#Reference').val(data.Reference); $('#CrAccount').val(data.CrAccount); $('#CrCurrency').val(data.CrCurrency);"
		fielddisplay 	+= "$('#CrCategory').val(data.CrCategory); $('#Transaction').val(data.TranCode); $('#Note').val(data.Note); $('#DisbursementList').val(data.ListID);"
		varname 		= "Officer:$('#Officer').val()"
		fun 			= ["Officer", varname, fielddisplay, "/Morakot/FundAdvanceOfficer", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["DrCurrency", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["ExchangeRate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["TranDate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def formReadOnly():

		return "AUTH"

	@staticmethod
	def beforeNewID ():
		CheckVault = mktteller.isUserVaultAccount()
		CheckTill  = mktteller.isUserTillAccount()
		if CheckVault[0] or CheckTill[0]:
			#Mean that user have cash account.
			return False,''
		else:
			return True,'User don\'t have Till or Vault Account in current branch'
			
	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeInsert():

		AuthLevel 	= g.getNAuthorize

		if AuthLevel == 0 :

			DrAcc 		= request.form['DrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['CrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			LCYAmount	= Decimal(request.form['LCYAmount'])
			Module 		= 'FA'
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']

			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_FUND_TRANSFER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False

			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,\
															Amo,Module,Tran,TranDate,Ref,Note,LCYAmount=LCYAmount)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False
		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			ID 			= 	g.formID
			Withdrawal 	=	MKT_FUND_TRANSFER_INAU.query.get(ID)
			
			if not Withdrawal:

				flash(msg_error + "Fundtransfer %s not found." %ID)
				return False

			else:

				Amo 		=	Withdrawal.Amount if Withdrawal.Amount else 0
				DrAccount 	=	Withdrawal.DrAccount
				DrCurrency 	=	Withdrawal.DrCurrency
				DrCr 		=	"Dr" if ID[-1] != "R" else "Cr"
				CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), DrCr)
				
				if CheckBalance1:
					flash(msg_error + CheckBalance1)
					return False

				CrAccount 	=	Withdrawal.CrAccount
				CrCurrency 	=	Withdrawal.CrCurrency
				DrCr 		=	"Cr" if ID[-1] != "R" else "Dr"
				CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), DrCr)
				if CheckBalance2:
					flash(msg_error + CheckBalance2)
					return False

				CheckAccounting = mktteller.setAuthorize('FA',MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

				DisbursementList = str(Withdrawal.DisbursementList).split()

				if DisbursementList:
					for row in DisbursementList:
						mktdb.updateRecord(MKT_DISBURSE,
								[MKT_DISBURSE.ID==row],
								{"AdvanceStatus":"Y"})

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():
		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			Withdrawal 	=	MKT_FUND_TRANSFER.query.get(ID)
			
			if not Withdrawal:

				return True, "%s Fund advance %s not found." %(msg_error, ID)

			else:

				Amo 		=	Withdrawal.Amount if Withdrawal.Amount else 0
				DrAccount 	=	Withdrawal.CrAccount
				DrCurrency 	=	Withdrawal.CrCurrency

				CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr")
				
				if CheckBalance1:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance1)

				CrAccount 	=	Withdrawal.DrAccount
				CrCurrency 	=	Withdrawal.DrCurrency
				CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr")

				if CheckBalance2:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance2)

				Check = mktteller.validationReverse(MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID)

				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('Fundtransfer',AuthLevel,'FA',MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID,Inputter,Createdon)
					
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

	@staticmethod
	def IsAcceptOverride():

		Override 	= True
		Msg 		= ""
		ID 			= request.form['DrAccount']
		CrAccount	= request.form['CrAccount']
		Amount 		= request.form['Amount']
		Currency 	= request.form['DrCurrency']
		Account 	= MKT_ACCOUNT.query.get(ID)

		if Account:

			JoinAcc 	= Account.JAccount

			if JoinAcc == 'Y':
				JoinID 		= Account.JoinID
				SpeMsg 		= ""
				Join 		= MKT_JACCOUNT.query.get(JoinID)
				
				if Join:
					SpeMsg 	= Join.SpecInstruction

				Msg 		= "This account %s was joinly opened. Instruction: %s " %(ID, SpeMsg)
			
			else:

				Msg = "The amount %s " %mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency), 2)
				Msg += "will withdrawal from Vault/Till #%s to %s #%s. " %(CrAccount,Account.AccName,ID)

		Msg 		+= "<br>Do you want to procceed?"

		return Override, Msg
