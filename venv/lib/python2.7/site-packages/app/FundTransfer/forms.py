from flask 						import flash
from wtforms 					import DecimalField, IntegerField
from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *
from .. 						import app, db

from app.Transaction.models 	import MKT_TRANSACTION
from app.Account.models 		import MKT_ACCOUNT
from app.AccEntry.models 		import MKT_ACC_ENTRY
from app.Journal.models 		import MKT_JOURNAL
from app.AccProduct.models 		import MKT_ACC_PRODUCT
from app.AccRuleDetail.models 	import MKT_ACC_RULE_DE
from app.Currency.models 		import MKT_CURRENCY
from app.Category.models 		import *
from decimal 					import *

import app.tools.mktaccount 			as mktaccount
import app.tools.mktmoney 				as mktmoney
import app.tools.mktdate 				as mktdate
import app.tools.user 					as mktuser
import app.tools.mktaccounting 			as mktaccounting
import app.tools.mktloanapplication 	as mktloanapp
import app.tools.mktfundtransfer 		as mktfundtransfer
import app.tools.mktteller 				as mktteller
import app.tools.mktaudit 				as mktaudit
import app.tools.mktsetting 			as mktsetting
import app.tools.mkttool 				as mkttool
import app.mktcore.globalfunction 		as globalfunction
import app.tools.mktinterbranch 		as mktinterbranch
import time

@app.route("/Morakot/API/DrAccount", methods=['GET'])
@app.route("/Morakot/DrAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def DrAccount():
	return mktaccount.getSearchAccount()

@app.route("/Morakot/API/CrAccount", methods=['GET'])
@app.route("/Morakot/CrAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CrAccount():
	return mktaccount.getSearchAccount()

@app.route("/Morakot/API/getAccount", methods=['GET'])
@app.route("/Morakot/getAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAccount():
	return mktaccount.getSearchAccount(FilterBranch=False)

@app.route("/Morakot/API/FundTransferHotField", methods=['GET'])
@app.route("/Morakot/FundTransferHotField", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFundTransferHotField():
	Account 		= request.args.get('Account') 	if 'Account' 	in request.args else ""
	Currency 		= request.args.get('Currency') 	if 'Currency' 	in request.args else ""
	TranDate 		= request.args.get('TranDate') 	if 'TranDate' 	in request.args else ""
	Category 		= ""
	CategoryDesc 	= ""
	ExchangeRate 	= ""
	if Account:
		AccObj = MKT_ACCOUNT.query.get(Account)
		if AccObj:
			Category = str(AccObj.AccCategory)
			Currency = str(AccObj.Currency)
			CategoryObj = MKT_CATEGORY.query.get(Category)
			if CategoryObj:
				CategoryDesc ='%s - %s'% (Category,CategoryObj.Description)

			ExchangeRate 	= str(mktaccounting.getReportingRate(Currency,TranDate))

	ConsoleKey = Category +'.'+Currency+'..........'

			
	return jsonify(Category=Category, Currency=Currency,CategoryDesc=CategoryDesc,ExchangeRate=ExchangeRate,ConsoleKey=ConsoleKey)

@app.route("/Morakot/API/FundTransferExchangeRate", methods=['GET'])
@app.route("/Morakot/FundTransferExchangeRate", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def FundTransferExchangeRate():

	Currency 		= str(request.args.get('Currency')) 	if 'Currency' in request.args else ''
	Amount 	 	 	= request.args.get('Amount') 	if 'Amount' in request.args else 0
	TranDate 		= request.args.get('TranDate') 	if 'TranDate' in request.args else ""
	ExchangeRate 	= request.args.get('ExchangeRate') if 'ExchangeRate' in request.args else ""
	LCYAmount 		= 0
	# print 'ExchangeRate',ExchangeRate,Currency
	if Currency:
		CurrencyObj 	= MKT_CURRENCY.query.get(Currency)
		if CurrencyObj:
			# print "Amount 1",Amount
			Amount 			= globalfunction.wordAmount(Amount)
			if Amount:
				# print "Amount 2",Amount
				Amount 		= mktmoney.toMoney(Amount,CurrencyObj)
				Amount 		= Decimal(str(Amount).replace(',',''))
			else:
				Amount = 0

			if not ExchangeRate:
				# print "take rate by date",TranDate
				ExchangeRate 	= str(mktaccounting.getReportingRate(Currency,TranDate))

			LCYAmount 		= Decimal(ExchangeRate) * Decimal(Amount)

	return jsonify(	ExchangeRate 	=	str(ExchangeRate),
					LCYAmount 		=	str(LCYAmount))

@app.route("/Morakot/API/HotFieldTargetBranch", methods=['GET'])
@app.route("/Morakot/HotFieldTargetBranch", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def HotFieldTargetBranch():
	CurrentBranch 	= 	mktuser.getCurrentBranch() if not request.form.get('Branch') else request.form.get('Branch')
	DrAccount 		=	request.args.get("DrAccount")
	CrAccount 		=	request.args.get("CrAccount")
	TargetBranch 	= 	"__None"
	TargetBranchDesc= 	"--None--"

	if DrAccount:
		AccObj = MKT_ACCOUNT.query.get(DrAccount)
		if AccObj.Branch != CurrentBranch:
			TargetBranch = AccObj.Branch
			BranchObj = MKT_BRANCH.query.get(AccObj.Branch)
			TargetBranchDesc = "%s - %s" % (AccObj.Branch, BranchObj.Description)

	if CrAccount:
		AccObj = MKT_ACCOUNT.query.get(CrAccount)
		if AccObj.Branch != CurrentBranch:
			TargetBranch = AccObj.Branch
			BranchObj = MKT_BRANCH.query.get(AccObj.Branch)
			TargetBranchDesc = "%s - %s" % (AccObj.Branch, BranchObj.Description)

	return jsonify(TargetBranch=TargetBranch,TargetBranchDesc=TargetBranchDesc)

def loadTransaction():
	return MKT_TRANSACTION.query

def loadCurrentDate():
	return 	mktdate.getBankDate()

def loadCategory():

	JOURNAL_ENTRY_EXCLUDED = mktsetting.getExcludedCategories()
	CategoryObj = MKT_CATEGORY.query.filter(~MKT_CATEGORY.ID.in_(JOURNAL_ENTRY_EXCLUDED))
	return 	CategoryObj

def loadCurrency():
	return MKT_CURRENCY.query

def loadDefaultCurrency():
	return mktaccounting.getDefaultCurrency()

def getAllAccountProductCategory():
	AccProObj = MKT_ACC_PRODUCT.query
	Category = [str(row.CategoryList) for row in AccProObj]
	return Category

class FRM_FUND_TRANSFER(exform):
	DrAccount 		= 	RemoteTextField(getLanguage("Dr Account"),
										dicRemote={'url':'/Morakot/getAccount'}
						)
	DrCategory 		= 	QuerySelectField(requiredlabel("Dr Category","*"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'',
							validators=[validators.Required()]
						)
	DrCurrency 		= 	QuerySelectField(requiredlabel(getLanguage("Dr Currency"), "*"),
	                        query_factory=loadCurrency,
	                        get_label=u'ID',
	                        allow_blank=loadDefaultCurrency(),
	                        blank_text=u'--None--',
	                        validators=[validators.Required()]
                        )
	CrAccount 		= 	RemoteTextField("Cr Account",
									dicRemote={'url':'/Morakot/getAccount'}
						)
	CrCategory 		= 	QuerySelectField(requiredlabel(getLanguage("Cr Category"),"*"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'',
							validators=[validators.Required()]
						)
	CrCurrency 		= 	QuerySelectField(requiredlabel(getLanguage("Cr Currency"), "*"),
	                        query_factory=loadCurrency,
	                        get_label=u'ID',
	                        allow_blank=loadDefaultCurrency(),
	                        blank_text=u'--None--',
	                        validators=[validators.Required()]
                        )
	Amount 			= 	DecimalField(requiredlabel(getLanguage("Amount"), "*"), [validators.Required()], default=0)
	Transaction 	= 	QuerySelectField(requiredlabel(getLanguage("Transaction"), "*"),
							query_factory=loadTransaction,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("Choose Transaction"),
							validators=[validators.Required()]
						)

	TranDate 		= 	DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()], default=loadCurrentDate)
	Reference 		= 	TextField(getLanguage("Reference"))
	#2018-06-05 - Inter-Branch
	TargetBranch 	=	QuerySelectField('Target Branch',
							query_factory=mktaccounting.loadBranch,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)
	TargetBranchDrCr = SelectField("Target Branch Dr/Cr",
							choices=[('', '--None--'),('Dr', 'Debit'),('Cr', 'Credit')],
						 	coerce=str)
	#end
	Note 			= 	TextAreaField(requiredlabel(getLanguage("Note"),"*"),[validators.Required()])

	ExchangeRate 	= TextField(requiredlabel('Exchange Rate','*'),description='1-Detail',
												validators=[validators.Required(),
															mktteller.customValidateExchangeRate])

	LCYAmount 		= TextField(requiredlabel('LCY Amount','*'),description='1-Detail',
											validators=[validators.Required(),
														mktteller.customValidateLCYAmount])
	
	DrGLKey 		= TextField('Debit GL Key', description='1-Detail')
	CrGLKey 		= TextField('Credit GL Key', description='1-Detail')
	Module 			= TextField("Module", default="FT")

	def validate_DrGLKey(form, field):
		DrCurrency 		= request.form['DrCurrency'] if 'DrCurrency' in request.form else ''
		if field.data:
			(Success, Msg) = mktaccounting.checkGLKey(field.data, form.DrCategory.data.ID, DrCurrency, 'Debit')
			if not Success:
				raise ValidationError(Msg)

	def validate_CrGLKey(form, field):
		CrCurrency 		= request.form['CrCurrency'] if 'CrCurrency' in request.form else ''
		if field.data:
			(Success, Msg) = mktaccounting.checkGLKey(field.data, form.CrCategory.data.ID, CrCurrency, 'Credit')
			if not Success:
				raise ValidationError(Msg)

	def validate_DrAccount(form, field):
		try:
			DrAccount 		= form.DrAccount.data
			DrCategory 		= request.form['DrCategory']  if 'DrCategory' in request.form else ''
			DrCurrency 		= request.form['DrCurrency']  if 'DrCurrency' in request.form else ''
			CrAccount 		= form.CrAccount.data
			Amount 			= form.Amount.data
			TranDate		= str(form.TranDate.data)
			if mktteller.isAmountInDecimal(Amount):
				Amount 		= Decimal(Amount)
				if DrAccount and Amount !=0:
					AccObj = MKT_ACCOUNT.query.get(DrAccount)
					if AccObj :
						AccCategory = AccObj.AccCategory
						AccCurrency = AccObj.Currency
						if AccCategory != DrCategory:
							raise ValidationError("Debit category not belong to account.")
						if AccCurrency != DrCurrency:
							raise ValidationError("Debit currency not belong to account.")

					CheckBalance = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amount), "Dr",TranDate=TranDate)
					if CheckBalance:	
						raise ValidationError(CheckBalance)

					if DrAccount == CrAccount:
						raise ValidationError("Debit account must be different Credit account.")

		except:
			raise

	def validate_DrCategory(form, field):

		Branch 			= mktuser.getCurrentBranch() if not request.form['Branch'] else request.form['Branch']
		DrAccount 		= form.DrAccount.data
		DrCategory 		= request.form['DrCategory'] if 'DrCategory' in request.form else ''
		DrCurrency 		= request.form['DrCurrency'] if 'DrCurrency' in request.form else ''
		TranDate		= str(form.TranDate.data)
		DrGLKey 		= form.DrGLKey.data
		Amount 			= form.Amount.data
		if mktteller.isAmountInDecimal(Amount):
			Amount 			= Decimal(Amount)
			LCYAmount 		= Decimal(form.LCYAmount.data) if form.LCYAmount.data else 0
			if DrCategory:
				ListCashCategory = getAllAccountProductCategory()
				
				if DrCategory in ListCashCategory:
					if not DrAccount:
						CategoryDesc = DrCategory
						CategoryObj = MKT_CATEGORY.query.get(DrCategory)
						if CategoryObj:
							CategoryDesc = '%s - %s'%(DrCategory,CategoryObj.Description)
						raise ValidationError("Debit account is required if you choose category %s"% CategoryDesc)
				
				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, DrCategory, DrCurrency, Branch, 'Dr', DrGLKey, LCYAmount,TranDate=TranDate)
				if form.DrGLKey.data:
					(Success, Msg) = mktaccounting.checkGLKey(form.DrGLKey.data, form.DrCategory.data.ID, DrCurrency,'Debit')
					if not Success:
						raise ValidationError(Msg)
				elif not CheckBalance[0]:
					raise ValidationError(CheckBalance[1])

	def validate_DrCurrency(form, field):
		try:
			DrCurrency = request.form['DrCurrency']
			CrCurrency = request.form['CrCurrency']
			CheckCurrency = mktteller.getValidateForeignCurrency(DrCurrency,CrCurrency)
			if CheckCurrency:
				raise ValidationError(CheckCurrency)
		
		except:
			raise

	def validate_CrAccount(form, field):
		try:
			CrAccount 		= form.CrAccount.data
			CrCategory 		= request.form['CrCategory']  if 'CrCategory' in request.form else ''
			CrCurrency 		= request.form['CrCurrency']  if 'CrCurrency' in request.form else ''
			DrAccount 		= form.DrAccount.data
			Amount 			= form.Amount.data
			TranDate		= str(form.TranDate.data)

			if mktteller.isAmountInDecimal(Amount):
				Amount 		= Decimal(Amount)

				if CrAccount and Amount !=0:
					AccObj = MKT_ACCOUNT.query.get(CrAccount)
					if AccObj :
						AccCategory = AccObj.AccCategory
						AccCurrency = AccObj.Currency
						if AccCategory != CrCategory:
							raise ValidationError("Credit category not belong to account.")

						if AccCurrency != CrCurrency:
							raise ValidationError("Credit currency not belong to account.")

					CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amount), "Cr",TranDate=TranDate)
					if CheckBalance:	
						raise ValidationError(CheckBalance)
		except:
			raise

	def validate_CrCategory(form, field):

		Branch 			= mktuser.getCurrentBranch() if not request.form['Branch'] else request.form['Branch']
		CrAccount 		= form.CrAccount.data
		CrCategory 		= request.form['CrCategory'] if 'CrCategory' in request.form else ''
		CrCurrency 		= request.form['CrCurrency'] if 'CrCurrency' in request.form else ''
		TranDate		= str(form.TranDate.data)
		CrGLKey 		= form.CrGLKey.data
		Amount 			= form.Amount.data
		if mktteller.isAmountInDecimal(Amount):
			Amount 		= Decimal(Amount)
			Amount 			= Decimal(Amount)
			LCYAmount 		= Decimal(form.LCYAmount.data) if form.LCYAmount.data else 0

			if CrCategory:
				ListCashCategory = getAllAccountProductCategory()
				
				if CrCategory in ListCashCategory:
					if not CrAccount:
						CategoryDesc = CrCategory
						CategoryObj = MKT_CATEGORY.query.get(CrCategory)
						if CategoryObj:
							CategoryDesc = '%s - %s'%(CrCategory,CategoryObj.Description)
						raise ValidationError("Credit account is required if you choose category %s"% CategoryDesc)
				
				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, CrCategory, CrCurrency, Branch, 'Cr', CrGLKey, LCYAmount,TranDate=TranDate)
				if form.CrGLKey.data:
					(Success, Msg) = mktaccounting.checkGLKey(form.CrGLKey.data, form.CrCategory.data.ID, CrCurrency, 'Credit')
					if not Success:
						raise ValidationError(Msg)

				elif not CheckBalance[0]:
					raise ValidationError(CheckBalance[1])

		
	def validate_TranDate(form, field):

		TranDate 	= request.form['TranDate']
		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	def validate_TargetBranchDrCr(form,field):
		DrAccount 			= request.form['DrAccount']
		CrAccount 			= request.form['CrAccount']
		TargetBranch 		= request.form['TargetBranch']
		TargetBranchDrCr 	= request.form['TargetBranchDrCr']
		Branch 				= request.form['Branch']
		Status ,Message 	= mktinterbranch.validateTargetDrCr(DrAccount=DrAccount,CrAccount=CrAccount,TargetBranch=TargetBranch,TargetDrCr=TargetBranchDrCr,Branch=Branch)
		if not Status:
			raise ValidationError(Message)

	def validate_TargetBranch(form,field):
		DrAccount 			= request.form['DrAccount']
		CrAccount 			= request.form['CrAccount']
		TargetBranch 		= request.form['TargetBranch']
		TargetBranchDrCr 	= request.form['TargetBranchDrCr']
		Branch 				= request.form['Branch']
		Status,Message 		= mktinterbranch.validateTargetBranch(DrAccount=DrAccount,CrAccount=CrAccount,
																 TargetBranch=TargetBranch,TargetDrCr=TargetBranchDrCr,
																 Branch=Branch)
		if not Status:
			raise ValidationError(Message)

	@staticmethod
	def setVisible():
		return ['Module']

	@staticmethod
	def IsAcceptOverride():

		DrGLKey = request.form['DrGLKey']
		CrGLKey = request.form['CrGLKey']
		Override= False
		Message = ''

		if DrGLKey or CrGLKey:
			Override 	= True
			Message 	= 'You are overriding GL Key.<br />Debit GL Key: %s<br />Credit GL Key: %s<br />' % (DrGLKey, CrGLKey)
		
		CrAccount = request.form['CrAccount']
		if CrAccount:
			OverrideAccount, MessageAccount = mktteller.checkDDAccount(CrAccount,False)
			if OverrideAccount:
				Override = True
				Message = '%s %s'%(Message,MessageAccount)

		if Override:
			Message = '%s <br/>Are you sure want to proceed?'%(Message)

		return Override, Message

	@staticmethod
	def IsAcceptOverrideINAU():

		ID = g.formID
		FundTransferObj = MKT_FUND_TRANSFER_INAU.query.get(ID)
		DrGLKey = ''
		CrGLKey = ''
		Override= False
		Message = ''
		CrAccount = ''
		
		if FundTransferObj:
			DrGLKey = FundTransferObj.DrGLKey
			CrGLKey = FundTransferObj.CrGLKey
			CrAccount = FundTransferObj.CrAccount

		if DrGLKey or CrGLKey:
			Override 	= True
			Message 	= 'You are overriding GL Key.<br />Debit GL Key: %s<br />Credit GL Key: %s<br />' % (DrGLKey, CrGLKey)
		
		if CrAccount:
			OverrideAccount, MessageAccount = mktteller.checkDDAccount(CrAccount,False)
			Message = '%s %s'%(Message,MessageAccount)
			if OverrideAccount:
				Override = True

		if Override:
			Message = '%s <br/>Are you sure want to proceed?'%(Message)

		return Override, Message

	@staticmethod
	def moneyField():
		return [("Amount", 'DrCurrency')]

	@staticmethod
	def formatMoney():
		return ["Amount"], "DrCurrency"

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= 	"$('#DrCategory').select2('data', {'id':data.Category,'text':data.CategoryDesc});"
		fielddisplay	+=	"$('#DrCurrency').select2('data', {'id':data.Currency,'text':data.Currency});"
		fielddisplay	+=	"$('#CrCurrency').select2('data', {'id':data.Currency,'text':data.Currency});"
		fielddisplay    +=  "$('#ExchangeRate').val(data.ExchangeRate);"
		varname 		= "Account:$('#DrAccount').val(),Currency:$('#DrCurrency').val(),TranDate:$('#TranDate').val()"
		fun 			= ["DrAccount", varname, fielddisplay, "/Morakot/FundTransferHotField", "change"]
		hotfield.append(fun)


		fielddisplay 	= 	"$('#CrCategory').select2('data', {'id':data.Category,'text':data.CategoryDesc});"
		fielddisplay	+=	"$('#CrCurrency').select2('data', {'id':data.Currency,'text':data.Currency});"
		varname 		= "Account:$('#CrAccount').val(),Currency:$('#CrCurrency').val()"
		fun 			= ["CrAccount", varname, fielddisplay, "/Morakot/FundTransferHotField", "change"]
		hotfield.append(fun)


		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["DrCurrency", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["ExchangeRate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["TranDate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#TargetBranch').select2('data', {'id':data.TargetBranch,'text':data.TargetBranchDesc});"
		varname 		= "DrAccount:$('#DrAccount').val(),CrAccount:$('#CrAccount').val()"
		fun 			= ["DrAccount", varname, fielddisplay, "/Morakot/HotFieldTargetBranch", "change"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#TargetBranch').select2('data', {'id':data.TargetBranch,'text':data.TargetBranchDesc});"
		varname 		= "DrAccount:$('#DrAccount').val(),CrAccount:$('#CrAccount').val()"
		fun 			= ["CrAccount", varname, fielddisplay, "/Morakot/HotFieldTargetBranch", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3)]

		return control_list

	@staticmethod
	def setDisable():
		EnableExchangeRateField = mktsetting.getAppSetting('EnableExchangeRateField')
		if EnableExchangeRateField == 'Yes':
			return [('LCYAmount')]
		return [('LCYAmount'),('ExchangeRate')]

	@staticmethod
	def listField():
		Fields = ["ID", "DrAccount", "DrCategory","DrCurrency","CrAccount", "CrCategory","CrCurrency", "Amount", "LCYAmount", "Reference","TranDate","Note","Branch"]

		return Fields, ["ID*LK*FT"]

	@staticmethod
	def formReadOnly():
		return "AUTH"
		
	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeInsert():
		try:
			
			AuthLevel 	= g.getNAuthorize

			if AuthLevel == 0:

				DrAcc 		= request.form['DrAccount']
				DrCat 		= request.form['DrCategory']
				DrCur 		= request.form['DrCurrency']

				CrAcc 		= request.form['CrAccount']
				CrCat 		= request.form['CrCategory']
				CrCur 		= request.form['CrCurrency']

				Amo  		= Decimal(request.form['Amount'])
				LCYAmount 	= Decimal(request.form['LCYAmount'])
				Module 		= 'FT'
				Tran  		= request.form['Transaction']
				TranDate 	= request.form['TranDate']
				Ref 		= request.form['ID']
				Note 		= request.form['Note']
				UserReference= request.form['Reference']

				Audit 		= mktaudit.getAuditrail()
				Inputter	= Audit['Inputter']
				Createdon 	= Audit['Createdon']
				Authorizer 	= Audit['Authorizer']
				Authorizeon	= Audit['Authorizeon']
				Branch 		= Audit['Branch']
				Mode 		= mktteller.getMode(DrAcc,CrAcc)
				if checkContentType()=='json':
					Inputter	= request.form['Inputter']
					Createdon 	= request.form['Createdon']
					Authorizer 	= request.form['Authorizer']
					Authorizeon	= request.form['Authorizeon']
					Branch 		= request.form['Branch']

				DrGLKey = request.form['DrGLKey']
				CrGLKey = request.form['CrGLKey']
				#Protect Save Duplicate
				DuplicateRecord = mktteller.isDuplicatePosting(MKT_FUND_TRANSFER,request.form['ID'])
				if DuplicateRecord[0]:
					flash(DuplicateRecord[1])
					return False
				# Call function to commit add account by currency 
				CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,\
															   Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,\
															   Tran,TranDate,Ref,Note,Mode,DrGLKey=DrGLKey,CrGLKey=CrGLKey,LCYAmount=LCYAmount,UserReference=UserReference)
				if not CheckAccounting[0]:
					flash(CheckAccounting[1])
					return False
			return True
		except Exception, e:
			print e
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def beforeAuthorize():
		try:
			
			ID 				= 	g.formID
			FundTransfer 	=	MKT_FUND_TRANSFER_INAU.query.get(ID)
			
			if not FundTransfer:

				flash(msg_error + "Fund transfer %s not found." %ID)
				return False

			else:

				if FundTransfer.DrGLKey:
					(Success, Msg) = mktaccounting.checkGLKey(FundTransfer.DrGLKey, FundTransfer.DrCategory, FundTransfer.DrCurrency, 'Debit')

					if not Success:
						flash('%s %s' % (msg_error, Msg))
						return False

				if FundTransfer.CrGLKey:
					(Success, Msg) = mktaccounting.checkGLKey(FundTransfer.CrGLKey, FundTransfer.CrCategory, FundTransfer.CrCurrency, 'Credit')

					if not Success:
						flash('%s %s' % (msg_error, Msg))
						return False

				Branch 		= 	FundTransfer.Branch
				Amount 		=	Decimal(FundTransfer.Amount) if FundTransfer.Amount else 0
				
				DrAccount 	=	FundTransfer.DrAccount
				DrCategory 	= 	FundTransfer.DrCategory
				DrCurrency 	=	FundTransfer.DrCurrency
				CrAccount 	=	FundTransfer.CrAccount
				CrCategory 	= 	FundTransfer.CrCategory
				CrCurrency 	=	FundTransfer.CrCurrency
				DrGLKey 	=	FundTransfer.DrGLKey
				CrGLKey 	=	FundTransfer.CrGLKey
				TranDate	=	FundTransfer.TranDate
				LCYAmount 	= 	Decimal(FundTransfer.LCYAmount) if FundTransfer.LCYAmount else 0
				
				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,\
																  CrAccount,CrCategory,CrCurrency,Amount,\
																  DrGLKey=DrGLKey,CrGLKey=CrGLKey,LCYAmount=LCYAmount,TranDate=TranDate)
				if not Check[0]:
					#Catch error
					flash(msg_error + Check[1])
					db.session.rollback()
					db.session.close()
					return False

				CheckAccounting = mktteller.setAuthorize('FT',MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True

		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			FundTransfer 	=	MKT_FUND_TRANSFER.query.get(ID)
			
			if not FundTransfer:

				return True, "%s Fund transfer %s not found." %(msg_error, ID)

			else:
				Branch 		= 	FundTransfer.Branch
				Amount 		=	Decimal(FundTransfer.Amount) if FundTransfer.Amount else 0
				DrAccount 	=	FundTransfer.CrAccount
				DrCategory 	= 	FundTransfer.CrCategory
				DrCurrency 	=	FundTransfer.CrCurrency
				CrAccount 	=	FundTransfer.DrAccount
				CrCategory 	= 	FundTransfer.DrCategory
				CrCurrency 	=	FundTransfer.DrCurrency
				DrGLKey 	=	FundTransfer.DrGLKey
				CrGLKey 	=	FundTransfer.CrGLKey
				TranDate	=	FundTransfer.TranDate
				LCYAmount 	= 	Decimal(FundTransfer.LCYAmount)
				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,\
																  CrAccount,CrCategory,CrCurrency,Amount,
																  DrGLKey=DrGLKey,CrGLKey=CrGLKey,LCYAmount=LCYAmount)
				if not Check[0]:
					#Catch error
					db.session.rollback()
					db.session.close()
					return True,Check[1]

				Check = mktteller.validationReverse(MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID)
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					# The Key take data from value
					MoveDataField = {}
					# MoveDataField = {
					# 	'DrAccount'  :'CrAccount',
					# 	'DrCategory' :'CrCategory',
					# 	'DrCurrency' :'CrCurrency',
					# 	'DrGLKey'    :'CrGLKey'
					# }
					CheckAccounting = mktteller.setReverse('Fundtransfer',AuthLevel,'FT',MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID,Inputter,Createdon,MoveDataField)
					
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

	@staticmethod
	def interBranch():
		return True
