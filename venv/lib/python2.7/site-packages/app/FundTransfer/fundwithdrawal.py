from flask 						import flash
from wtforms 					import DecimalField, IntegerField,FieldList,FormField
from app.mktcore.wtfimports 	import *
import time
from decimal 					import *
from flask 						import session

import app.tools.mktparam   	as mktparam
import app.tools.mktdate 		as mktdate
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktaccount 	as mktaccount
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.mktmoney 		as mktmoney
import app.tools.mktfundtransfer 	as mktfundtransfer

from app.tools.user 			import *
from .models 					import *
from .forms 					import *
from app.CashAccount.models 	import *
from app.Account.models 		import *
from app.JAccount.models 		import *

@app.route("/Morakot/API/FundWithdrawalAccount", methods=['GET'])
@app.route("/Morakot/FundWithdrawalAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFundWithdrawal():
	AccountID 	= request.args.get('DrAccount')
	return mktteller.getFundAcount("FW",AccountID)

def loadCurrentDate():
	return 	mktdate.getBankDate()
	
class FRM_FUND_WITHDRAWAL(exform):

	DrAccount 	= RemoteTextField(requiredlabel(getLanguage("Account"),"*"), [validators.Required()])
	DrCategory 	= TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	DrCurrency 	= TextField(requiredlabel(getLanguage("Currency"), "*"), [validators.Required()])
	Amount 		= TextField(requiredlabel(getLanguage("Amount"), "*"), [validators.Required()])

	Transaction = TextField(requiredlabel(getLanguage("Transaction Code"), "*"), [validators.Required()])
	TranDate 	= DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()],default=loadCurrentDate)

	Reference 	= TextField(getLanguage("Reference"), [validators.Length( max=35)])
	Note 		= TextAreaField(getLanguage("Note"), [validators.Length( max=50)])
	CrAccount 	= TextField(getLanguage("Cash Account"))
	CrCategory 	= TextField(getLanguage("Cash Category"))
	CrCurrency 	= TextField(getLanguage("Cash Currency"))
	Module 		= TextField("Module", default="FW")

	ExchangeRate 	= TextField(requiredlabel('Exchange Rate','*'),description='1-Detail',
												validators=[validators.Required(),
															mktteller.customValidateExchangeRate])

	LCYAmount 		= TextField(requiredlabel('LCY Amount','*'),description='1-Detail',
											validators=[validators.Required(),
														mktteller.customValidateLCYAmount])

	def validate_Amount(form, field):
		
		Amo 		=	str(form.Amount.data)
		Amo 		= 	Amo.replace(',','')
		DrAccount 	=	form.DrAccount.data
		DrCurrency 	=	form.DrCurrency.data
		DrCurrency 	=	form.DrCurrency.data
		TranDate 	=	str(form.TranDate.data)

		CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr",TranDate=TranDate)
		
		if CheckBalance1:

			raise ValidationError(CheckBalance1)

		CrAccount 	=	form.CrAccount.data
		CrCurrency 	=	form.CrCurrency.data
		CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr",TranDate=TranDate)

		if CheckBalance2:
			
			raise ValidationError(CheckBalance2)

	def validate_CrAccount(form,field):
		if form.DrAccount.data:
			TellerParam = mktparam.getTellerParam()
			if TellerParam:
				if not form.CrAccount.data :
					raise ValidationError("User don't have Cash Account.")
			else:
				raise ValidationError("Please set Teller Parameter first before withdrawal transaction.")

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data

		try:

			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)

	@staticmethod
	def setVisible():
	
		control_list=['CrAccount','CrCategory','CrCurrency','Transaction','Module']
		return control_list

	@staticmethod
	def moneyField():
		return [('Amount','DrCurrency')]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCategory',len2),
						('CrCurrency',len2)	]

		return control_list

	@staticmethod
	def setDisable():
		EnableExchangeRateField = mktsetting.getAppSetting('EnableExchangeRateField')
		if EnableExchangeRateField == 'Yes':
			return [('LCYAmount'),('CrAccount'),('CrCategory'), ('CrCurrency'), ('DrCategory'), ('DrCurrency'),('Transaction')]
		return [('ExchangeRate'),('LCYAmount'),('CrAccount'),('CrCategory'), ('CrCurrency'), ('DrCategory'), ('DrCurrency'),('Transaction')]

	@staticmethod
	def listField():
		
		Fields = ["ID", "DrAccount","DrCurrency", "CrAccount", "CrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields, ["ID*LK*FW"]

	@staticmethod
	def formatMoney(): # for listField 
		return ["Amount"],"DrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#DrCategory').val(data.DrCategory); $('#DrCurrency').val(data.DrCurrency); $('#CrAccount').val(data.CrAccount); $('#CrCurrency').val(data.CrCurrency); $('#CrCategory').val(data.CrCategory); $('#Transaction').val(data.TranCode); "
		varname 		= "DrAccount:$('#DrAccount').val()"
		fun 			= ["DrAccount", varname, fielddisplay, "/Morakot/FundWithdrawalAccount", "change"]
		hotfield.append(fun)

		fielddisplay 	= ""
		varname 		= "DrAccount:'WT'"
		fun 			= ["s2id_autogen2_search", varname, fielddisplay, "/Morakot/FundWithdrawalAccount", "focus"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["DrCurrency", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["ExchangeRate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["TranDate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def formReadOnly():

		return "AUTH"

	@staticmethod
	def beforeNewID ():
		Check = mktteller.isUserVaultAccount()
		if not Check[0]:
			return True,Check[1]
		else:
			#Mean that user have cash account.
			return False,''
			
	@staticmethod
	def findinHist():
		
		return True			
	@staticmethod
	def beforeInsert():

		AuthLevel 	= g.getNAuthorize

		if AuthLevel == 0 :

			DrAcc 		= request.form['DrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['CrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			LCYAmount	= Decimal(request.form['LCYAmount'])
			Module 		= 'FW'
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']

			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_FUND_TRANSFER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False
			
			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,\
															Amo,Module,Tran,TranDate,Ref,Note,LCYAmount=LCYAmount)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False

			# Call function to commit add account by currency 
			# mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note)

		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			ID 			= 	g.formID
			Withdrawal 	=	MKT_FUND_TRANSFER_INAU.query.get(ID)
			
			if not Withdrawal:

				flash(msg_error + "Fundtransfer %s not found." %ID)
				return False

			else:

				Amo 		=	Withdrawal.Amount if Withdrawal.Amount else 0
				
				if ID[-1:] == 'R':
					CheckBalance1DrCr = "Cr"
					CheckBalance2DrCr = "Dr"
				else:
					CheckBalance1DrCr = "Dr"
					CheckBalance2DrCr = "Cr"

				DrAccount 	=	Withdrawal.DrAccount
				DrCurrency 	=	Withdrawal.DrCurrency
				TranDate 	=	Withdrawal.TranDate

				CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), CheckBalance1DrCr,TranDate=TranDate)
				
				if CheckBalance1:

					flash(msg_error + CheckBalance1)
					return False

				CrAccount 	=	Withdrawal.CrAccount
				CrCurrency 	=	Withdrawal.CrCurrency
				CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), CheckBalance2DrCr,TranDate=TranDate)

				if CheckBalance2:
					
					flash(msg_error + CheckBalance2)
					return False

				# Call function to commit add account by currency 
				CheckAccounting = mktteller.setAuthorize('FW',MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True

		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	# @staticmethod
	# def reverseRec():

	# 	try:
			
	# 		AuthLevel 	= g.getNAuthorize
	# 		# print 'reverseRec: %s'% AuthLevel
	# 		ID 			= g.formID
	# 		Check = mktteller.validationReverse(MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID)
		
	# 		if not Check[0]:
	# 			Audit 		= mktaudit.getAuditrail()
	# 			Inputter	= Audit['Inputter']
	# 			Createdon 	= Audit['Createdon']
	# 			mktteller.setReverse('Fundtransfer',AuthLevel,'FW',MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID,Inputter,Createdon)
	# 			db.session.commit()
	# 			return True,"The record reversed successfully, record id:%sR"%ID
	# 		else:
	# 			return Check

	# 	except Exception, e:
	# 		db.session.rollback()
	# 		return True,msg_error+"%s"%e
	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			Withdrawal 	=	MKT_FUND_TRANSFER.query.get(ID)
			
			if not Withdrawal:

				return True, "%s Fund advance %s not found." %(msg_error, ID)

			else:

				Amo 		=	Withdrawal.Amount if Withdrawal.Amount else 0
				DrAccount 	=	Withdrawal.CrAccount
				DrCurrency 	=	Withdrawal.CrCurrency
				TranDate 	=	Withdrawal.TranDate

				CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr",TranDate=TranDate)
				
				if CheckBalance1:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance1)

				CrAccount 	=	Withdrawal.DrAccount
				CrCurrency 	=	Withdrawal.DrCurrency
				CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr",TranDate=TranDate)

				if CheckBalance2:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance2)

				Check = mktteller.validationReverse(MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID)

				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('Fundtransfer',AuthLevel,'FW',MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID,Inputter,Createdon)
					
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

	@staticmethod
	def IsAcceptOverride():

		Override 	= True
		Msg 		= ""
		ID 			= request.form['DrAccount']
		Amount 		= request.form['Amount']
		Currency 	= request.form['DrCurrency']
		Account 	= MKT_ACCOUNT.query.get(ID)

		if Account:

			JoinAcc 	= Account.JAccount

			if JoinAcc == 'Y':
				JoinID 		= Account.JoinID
				SpeMsg 		= ""
				Join 		= MKT_JACCOUNT.query.get(JoinID)
				
				if Join:
					SpeMsg 	= Join.SpecInstruction

				Msg 		= "This account %s was joinly opened. Instruction: %s " %(ID, SpeMsg)
			
			else:

				Msg 		= "The amount %s " %mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency), 2)
				Msg 		+= "will withdrawal from account#%s. " %ID

		Msg 		+= "Do you want to procceed?"

		return Override, Msg