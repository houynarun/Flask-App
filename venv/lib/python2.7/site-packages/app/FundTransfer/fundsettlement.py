from flask 							import flash, jsonify, session
from wtforms 						import DecimalField, IntegerField,FieldList,FormField
from app.mktcore.wtfimports 		import *
from app.mktcore.imports 			import *
from .. 							import app, db
from decimal 						import *
from app.Officer.models 			import MKT_OFFICER
from app.Account.models 			import MKT_ACCOUNT
from .models 						import *

import time
import app.tools.mktofficer 		as mktofficer
import app.tools.mktdate 			as mktdate
import app.tools.mktparam   		as mktparam
import app.tools.mktmoney 			as mktmoney
import app.tools.mktteller 			as mktteller
import app.tools.mktaccounting 		as mktaccounting
import app.tools.mktsetting 		as mktsetting
import app.tools.mktfundtransfer 	as mktfundtransfer
import app.tools.user 				as mktuser
import app.tools.mktaudit 			as mktaudit

@app.route("/Morakot/FundSettlementAccountInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFundSettlementAccountInfo():
	try:

		TellerParam = 	mktparam.getTellerParam()
		Setting 	=	mktsetting.getAccSetting()
		AccountID 	=	request.args.get("CrAccount")

		CrCategory 	=	""
		CrCurrency 	=	""
		DrAccount 	=	""
		DrCategory 	=	""
		DrCurrency 	=	""
		Transaction =	""
		Amount 		=	"0"
		Noted 		=	''

		if TellerParam:
			CrCategory = TellerParam.WalletCategory
		
		if Setting:
			Transaction = Setting.CashSettlementTran
		print Transaction,'Transaction'
		if AccountID:

			Obj = MKT_ACCOUNT.query.get(AccountID)

			if Obj:
				CrCurrency 	= 	Obj.Currency
				Amount 		=	Obj.Balance
				Amount 		=	mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(CrCurrency))
				CashObj 	= 	mktteller.getCashAccountObj(CrCurrency)
				Noted 		= 	'Cash settlement from' + Obj.AccName
				if CashObj:
					DrAccount 	=	CashObj.ID
					DrCategory 	=	CashObj.AccCategory
					DrCurrency 	=	CashObj.Currency

		return jsonify(CrCategory=CrCategory, CrCurrency=CrCurrency, Amount=str(Amount),
						DrAccount=DrAccount, DrCategory=DrCategory, DrCurrency=DrCurrency,
						Transaction=Transaction, Noted=Noted)

	except Exception, e:
		return "%s" %e

def loadOfficerAccount():
	return mktofficer.getOfficerAcountByBranch()

def loadCurrentDate():
	return 	mktdate.getBankDate()

class FRM_FUND_SETTLEMENT(exform):

	CrAccount		= 	QuerySelectField(
							requiredlabel(getLanguage("Officer Account"), "*"),
							query_factory=loadOfficerAccount,
							get_label=lambda a: a.ID + " - " + a.AccName,
							allow_blank=True,
							blank_text='--None--',
							validators=[validators.Required()]
						)

	CrCategory 		= 	TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	CrCurrency 		= 	TextField(requiredlabel(getLanguage("Currency"), "*"), [validators.Required()])
	Amount 			= 	TextField(requiredlabel(getLanguage("Amount"), "*"), [validators.Required()])

	Transaction 	= 	TextField(requiredlabel(getLanguage("Transaction"), "*"))
	TranDate 		= 	DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()],default=loadCurrentDate)

	Reference 		= 	TextField(getLanguage("Reference"), [validators.Length( max=35)])
	Note 			= 	TextAreaField(getLanguage("Note"), [validators.Length( max=50)])
	DrAccount 		= 	TextField(getLanguage("Cash Account"))
	DrCategory 		= 	TextField(getLanguage("Cash Category"))
	DrCurrency 		= 	TextField(getLanguage("Cash Currency"))
	Module 			= 	TextField("Module", default="FS")

	ExchangeRate 	= TextField(requiredlabel('Exchange Rate','*'),description='1-Detail',
												validators=[validators.Required(),
															mktteller.customValidateExchangeRate])

	LCYAmount 		= TextField(requiredlabel('LCY Amount','*'),description='1-Detail',
											validators=[validators.Required(),
														mktteller.customValidateLCYAmount])

	def validate_DrAccount(form, field):
		if field.data == '':
			raise ValidationError('Cash Account not found')

	def validate_Amount(form, field):

		DrAccount 	=	request.form['DrAccount']
		DrCategory 	=	request.form['DrCategory']
		DrCurrency 	=	request.form['DrCurrency']
		Transaction = 	request.form['Transaction']

		# raise ValidationError("Acc:%s-Cat:%s-Curr:%s-Tran:%s" %(DrAccount, DrCategory, DrCurrency, Transaction))
		
		Amo 		=	str(form.Amount.data)
		Amo 		= 	Amo.replace(',','')

		CrAccount 		=	request.form['CrAccount']
		CrCurrency 		=	request.form['CrCurrency']
		CheckBalance 	= 	mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr")

		if CheckBalance:
			
			raise ValidationError(CheckBalance)

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data

		try:

			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#Amount').val(data.Amount)"
		fielddisplay 	+= ";$('#Transaction').val(data.Transaction)"
		fielddisplay 	+= ";$('#Amount').focus()"
		fielddisplay 	+= ";$('#CrCategory').val(data.CrCategory)"
		fielddisplay 	+= ";$('#CrCurrency').val(data.CrCurrency)"
		fielddisplay 	+= ";$('#DrAccount').val(data.DrAccount)"
		fielddisplay 	+= ";$('#DrCategory').val(data.DrCategory)"
		fielddisplay 	+= ";$('#DrCurrency').val(data.DrCurrency)"
		fielddisplay 	+= ";$('#Transaction').val(data.Transaction)"
		fielddisplay 	+= ";$('#Note').val(data.Noted)"
		varname 		= "CrAccount:$('#CrAccount').val()"
		fun 			= ["CrAccount", varname, fielddisplay, "/Morakot/FundSettlementAccountInfo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["CrCurrency", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["ExchangeRate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["TranDate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def moneyField():
		return [('Amount','CrCurrency')]

	@staticmethod
	def setVisible():
	
		control_list=['DrAccount','DrCategory','DrCurrency','Transaction','Module']
		return control_list

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCategory',len2),
						('CrCurrency',len2)	]

		return control_list

	@staticmethod
	def setDisable():
		return [('CrCategory'), ('LCYAmount'),('CrCurrency'),('ExchangeRate')]

	@staticmethod
	def beforeNewID ():
		CheckVault = mktteller.isUserVaultAccount()
		CheckTill  = mktteller.isUserTillAccount()
		
		if CheckVault[0] or CheckTill[0]:
			#Mean that user have cash account.
			return False,''
		else:
			return True,'User don\'t have Till or Vault Account in current branch'

	@staticmethod
	def listField():
		
		Fields = ["ID", "DrAccount","DrCurrency", "CrAccount", "CrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields, ["ID*LK*FS"]

	@staticmethod
	def formReadOnly():

		return "AUTH"

	@staticmethod
	def findinHist():
		
		return True

	@staticmethod
	def beforeInsert():

		AuthLevel 	= g.getNAuthorize

		if AuthLevel == 0 :

			DrAcc 		= request.form['DrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['CrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			LCYAmount	= Decimal(request.form['LCYAmount'])
			Module 		= 'FS'
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']

			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_FUND_TRANSFER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False
			
			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,\
															Amo,Module,Tran,TranDate,Ref,Note,LCYAmount=LCYAmount)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False

		return True

	@staticmethod
	def beforeAuthorize():
		try:
			
			ID 			= 	g.formID
			Settlement 	=	MKT_FUND_TRANSFER_INAU.query.get(ID)
			
			if not Settlement:

				flash(msg_error + "Fundtransfer %s not found." %ID)
				return False

			else:
				# If Status RNAU mean that Authorize record reverse
				

				Amo 		=	Settlement.Amount if Settlement.Amount else 0

				DrAccount 	=	Settlement.DrAccount
				DrCurrency 	=	Settlement.DrCurrency

				if ID[-1:] == 'R':
					CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Cr")
				else:
					CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr")

				if CheckBalance1:

					flash(msg_error + CheckBalance1)
					return False

				CrAccount 	=	Settlement.CrAccount
				CrCurrency 	=	Settlement.CrCurrency
				
				if ID[-1:] == 'R':
					CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Dr")
				else:
					CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr")

				if CheckBalance2:
					
					flash(msg_error + CheckBalance2)
					return False

				CheckAccounting = mktteller.setAuthorize('FS',MKT_FUND_TRANSFER, MKT_FUND_TRANSFER_INAU, ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= 	g.getNAuthorize
			ID 			= 	g.formID
			Settlement 	=	MKT_FUND_TRANSFER.query.get(ID)
			
			if not Settlement:

				return True, "%s Fund settlement %s not found." %(msg_error, ID)

			else:

				Amo 		=	Settlement.Amount if Settlement.Amount else 0
				DrAccount 	=	Settlement.CrAccount
				DrCurrency 	=	Settlement.CrCurrency

				CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr")
				
				if CheckBalance1:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance1)

				CrAccount 	=	Settlement.DrAccount
				CrCurrency 	=	Settlement.DrCurrency
				CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr")

				if CheckBalance2:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance2)

				Check = mktteller.validationReverse(MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,ID)
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('FundSettlement', AuthLevel, 'FS', MKT_FUND_TRANSFER, MKT_FUND_TRANSFER_INAU, ID, Inputter, Createdon)
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
					
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e
