from .models 						import *
from decimal 						import *
from sqlalchemy 					import *
from app.mktcore.wtfimports 		import *
from .. 							import app, db
from flask 							import g, flash,Markup
from wtforms 						import DecimalField, IntegerField
from wtforms.validators 			import StopValidation
from datetime 						import datetime, date, timedelta
from dateutil.relativedelta 		import *

import time
from app.tools.loantools.rescheduletools 	import getNextWeek
import app.tools.mktloanapplication 		as mktloanapp
import app.tools.mktcustomer 				as mktcustomer
import app.tools.mktaccount					as mktaccount
import app.tools.user 						as mktuser
import app.tools.mktdate	 				as mktdate
import app.tools.mktofficer 				as mktofficer
import app.tools.mktmoney 					as mktmoney
import app.tools.mktaccounting 				as mktaccounting
import app.tools.mktloan 					as mktloan
import app.tools.loantools.nonworkingday 	as mktDay
import app.tools.loantools.rescheduletools 	as mktreschedule
import app.tools.mktholiday 				as mktHoliday
import app.tools.mktkey 					as mktkey
import app.tools.mktpdcollection			as mktpd
import app.tools.mktrepayment 				as mktrepayment
import app.tools.mktaudit 					as mktaudit
import app.tools.mktnotification 			as mktnotification
import app.tools.mktcharge 					as mktcharge
import app.mktcore.globalfunction 			as globalfunction
import app.tools.mktloanamendment 			as mktloanamendment
import app.tools.mktdb 						as mktdb
import app.tools.mktautoid                 	as mktAutoID
import app.tools.loantools.rescheduletools 	as mktschedule

from app.tools.mktvb 				import *
from app.tools.mktroute 			import *
from app.Account.models 			import MKT_ACCOUNT
from app.AccProduct.models 			import MKT_ACC_PRODUCT
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.LoanPurpose.models 		import MKT_LOAN_PURPOSE
from app.VB.models 					import MKT_VB
from app.Officer.models 			import MKT_OFFICER
from app.Branch.models 				import MKT_BRANCH
from app.Charge.models 				import MKT_CHARGE
from app.LoanApplication.models 	import MKT_LOAN_APPLICATION, MKT_LOAN_COLLATERAL, MKT_GUARANTOR
from app.InterestRate.models 		import MKT_INTEREST_RATE
from app.LoanRuleDetail.models		import MKT_LOAN_RULE_DE
from app.Customer.models 			import MKT_CUSTOMER
from app.SourceOfFund.models 		import MKT_SOURCE_OF_FUND
from app.Currency.models 			import MKT_CURRENCY
from app.AssetClass.models 			import MKT_ASSET_CLASS
from app.Collateral.models 			import MKT_COLLATERAL
from app.LoanApplication.forms 		import getLoadCollateral
from app.ChargeRate.models 			import MKT_CHARGE_RATE
from app.ChargeRate.forms 			import *
from app.ScheduleAddon.models 		import *
from app.RepaymentSchedule.models 	import *
from app.ScheduleDefine.models 		import *
from app.PreDefineSchedule.models 	import *
from app.TemplateBase.models 		import *
from local.Standardize.tools.mktroute import *

class GroupLoanTools:

	def checkBorrower(self,GroupID):
		dic = {}
		if GroupID:
			LoanObj 			= db.session.query(MKT_LOAN_CONTRACT.ContractCustomerID).\
											 filter(MKT_LOAN_CONTRACT.Group == GroupID).all()

			GroupBorrowerObj 	= db.session.query(MKT_GROUP_LOAN_BORROWER_INAU.BorrowerID).\
											 join(MKT_GROUP_LOAN_CONTRACT_INAU, MKT_GROUP_LOAN_CONTRACT_INAU.ID == MKT_GROUP_LOAN_BORROWER_INAU.ID).\
											 filter(MKT_GROUP_LOAN_CONTRACT_INAU.Group == GroupID).all()
			dic = { 'BorrowerLoanContract': LoanObj,
					'BorrowerGroupLoanInau': GroupBorrowerObj
				}
		return dic

	def generateAccount(self,**kwargs):

		AccCategory 	= ''
		AcountDict 		= ''
		GroupInfo 		= {}
		CheckAccount 	= False

		AccountObj 		= kwargs.get('AccountObj','')
		CustomerObj 	= kwargs.get('CustomerObj','')
		LoanCycle 		= kwargs.get('LoanCycle',1)
		LoanPurpose 	= kwargs.get('LoanPurpose',0)
		Disbursed 		= kwargs.get('Disbursed',0)
		InterestRate 	= kwargs.get('InterestRate',0)
		Currency 		= kwargs.get('Currency','')
		BankDate 		= kwargs.get('BankDate','')
		AccProductID 	= kwargs.get('AccProductID','')
		OfficerID 		= kwargs.get('OfficerID','')
		AutoID 			= kwargs.get('AutoID','')

		AccProductObj 	= MKT_ACC_PRODUCT.query.get(AccProductID) 
		if AccProductObj:
			AccCategory = AccProductObj.CategoryList

		if not AccCategory:
			flash(Markup(msg_error+"Saving Account category is not found, please check your configuration!"))
			return False

		# Auto create DDAcount
		if AccountObj:
			GroupInfo.update({AccountObj.CustomerList:{'AccountID':AccountObj.ID,'LoanCycle':LoanCycle,'Disbursed':Disbursed, 'LoanPurpose':LoanPurpose,'AccName':AccountObj.AccName}})
		else:
			CustomerList 	= CustomerObj.ID
			AccName 		= CustomerObj.LastNameEn +' '+ CustomerObj.FirstNameEn
			AccID 			= mktAutoID.getAutoID(AutoID)
			CheckAccount 	= True
			GroupInfo.update({CustomerList:{'AccountID':AccID,'LoanCycle':LoanCycle,'Disbursed':Disbursed,'LoanPurpose':LoanPurpose,'AccName':AccName}})

			AcountDict ={ 	'ID' 				: AccID,
							'CustomerList'		: CustomerList,
							'AccName'			: AccName,
							'Currency'			: Currency,
							'JAccount'			: 'N',
							'Blocked'			: 'N',
							'Dormant'			: 'N',
							'JoinID'			: '',
							'OpenDate'			: BankDate,
							'NextAccrDate' 		: BankDate,
							'AccProduct'		: AccProductID,
							'AccCategory'		: AccCategory,
							'InterestRate'		: InterestRate,
							'FixedRate' 		: loadInterestRateType(Currency),
							'Charge'			: 0,
							'Tax'				: 0,
							'AccStatus'			: 'O',
							'ClosingDate'		: '',
							'OfficerID'			: OfficerID,
							'AccrInterest'		: 0,
							'AccrCurMonth'		: 0,
							'AccrCurCapital'	: 0,
							'AccrIntBooked'		: 0,
							'Balance'			: 0,
							'AvailableBal'		: 0,
							'MinBalance'		: 0
										}
		dic = {'AcountDict': AcountDict, 'GroupInfo': GroupInfo,'CheckAccount': CheckAccount}
		return dic

@app.route("/Morakot/GroupChargeKeyInfo", methods=['GET'])
@app.route("/Morakot/API/GroupChargeKeyInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getGroupChargeKeyInfo():
	try:
		ChargeKeyID = request.args.get("ChargeKeyID")
		ChargeKey 	= ChargeKeyID
		Currency 	= request.args.get("Currency")
		Charge 		= ""		
		ChargeKeyID = str(ChargeKeyID) + str(Currency)
		row 		= MKT_CHARGE_RATE.query.get(ChargeKeyID)
		if row:			
			Charge 		= str(row.Value).strip() if row.Value else "0"
			ChargeList  = Charge.split()
			ChargeList  = filter(None,ChargeList)

			if len(ChargeList) > 1:
				Charge = ChargeList[1]
			else:
				Charge = ChargeList[0]
		return jsonify( Charge=str(Charge))
	except:
		raise

@app.route("/Morakot/getPreDefineSchedule", methods=['GET'])
@app.route("/Morakot/API/getPreDefineSchedule", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPreDefineSchedule():
	try:
		PreDefineID 			= request.args.get("PreDefine")
		ValueDate 				= request.args.get("ValueDate")

		PreDefineObj 			= ''
		FwdBwdKey 				= ''
		RepMode 				= ''
		BaseDateKey 			= ''
		FreqType 				= ''
		Frequency 				= ''
		PrincipalFreq 			= ''
		InterestFreq 			= ''
		FirstCollectionDate 	= ''
		WeekDay 				= ''
		NumOfWeek 				= ''

		FwdBwdKeyDes			= ''
		RepModeDes 				= ''
		BaseDateKeyDes 			= ''
		FreqTypeDes				= ''
		WeekDayDes 				= ''
		NumOfWeekDes 			= ''

		PreDefineObj = MKT_PRE_DEFINE_SCHEDULE.query.filter(MKT_PRE_DEFINE_SCHEDULE.ID == PreDefineID).first()
		if PreDefineObj:
			FwdBwdKey 			= PreDefineObj.FwdBwdKey
			RepMode 			= PreDefineObj.RepMode
			BaseDateKey 		= PreDefineObj.BaseDateKey
			FreqType 			= PreDefineObj.FreqType
			Frequency 			= PreDefineObj.Frequency
			PrincipalFreq 		= PreDefineObj.PrincipalFreq
			InterestFreq 		= PreDefineObj.InterestFreq
			WeekDay 			= PreDefineObj.WeekDay
			NumOfWeek 			= PreDefineObj.NumOfWeek

		dic = {'MO':MO,'TU':TU,'WE':WE,'TH':TH,'FR':FR,'SA':SA,'SU':SU}
		Days 		= dic[str(WeekDay)]
		NumOfWeek 	= int(NumOfWeek)

		if BaseDateKey == '4':
			FirstCollectionDate = mktschedule.getDayOftheWeek(  ValueDate 	= ValueDate, 
																Days 		= Days, 
																NumOfWeek 	= NumOfWeek, 
																isNextMonth = True,
																Frequency 	= Frequency)

		NumOfWeekDic 	= {'1': '1', '2': '2', '3': '3', '4': '4', '5': '5'}
		FreqTypeDic 	= {'1':'1. Monthly', '2':'2. Weekly', '3':'3. Daily'}
		RepModeDic 		= {'1':'Declining', '2':'Annuity', '3':'Flat', '4':'IRR'}
		BaseDateKeyDic 	= {'1':'1. Value Date', '2':'2. Previous Date', '3': '3. First Date', '4':'4. Week Date'}
		FwdBwdKeyDic 	= {'0':'No Holiday', '1':'Backward within month', '2':'Forward within month', '3':'Backward', '4':'Forward'}
		WeekDayDic 		= {'MO': 'Monday', 'TU': 'Tuesday', 'WE': 'Wednesday', 'TH': 'Thursday', 'FR': 'Friday', 'SA': 'Saturday', 'SU': 'Sunday'}

		if FwdBwdKey:
			FwdBwdKeyDes 	= FwdBwdKeyDic[FwdBwdKey]
		if RepMode:
			RepModeDes 		= RepModeDic[RepMode]
		if BaseDateKey:
			BaseDateKeyDes 	= BaseDateKeyDic[BaseDateKey]
		if FreqType:
			FreqTypeDes 	= FreqTypeDic[FreqType]
		if WeekDay:
			WeekDayDes 		= WeekDayDic[WeekDay]
		if NumOfWeek:
			NumOfWeekDes 	= NumOfWeekDic[str(NumOfWeek)]

		return jsonify( FwdBwdKey 		= FwdBwdKey,
						RepMode 		= RepMode,
						BaseDateKey 	= BaseDateKey,
						FreqType 		= FreqType,
						Frequency 		= Frequency,
						WeekDay 		= WeekDay,
						WeekNum 		= NumOfWeek,
						FwdBwdKeyDes 	= FwdBwdKeyDes,
						RepModeDes 		= RepModeDes,
						BaseDateKeyDes 	= BaseDateKeyDes,
						FreqTypeDes 	= FreqTypeDes,
						PrincipalFreq 	= PrincipalFreq,
						InterestFreq 	= InterestFreq,
						WeekDayDes 		= WeekDayDes,
						WeekNumDes 		= NumOfWeekDes,
						FirstCollectionDate = str(FirstCollectionDate)
						)
	except:
		raise

@app.route("/Morakot/GroupLoanProductInfo", methods=['GET'])
@app.route("/Morakot/API/GroupLoanProductInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getGroupLoanProductInfo():
	try:
		ProductID 		= request.args.get("LoanProduct")
		Currency 		= request.args.get("Currency")
		Category 		= ""
		InterestRate 	= ""
		
		row = MKT_LOAN_PRODUCT.query.get(ProductID)
		if row:
			Category 		= str(row.LNCategory)
			RateID 			= str(row.InterestKey) + str(Currency)
			rate 			= MKT_INTEREST_RATE.query.get(RateID)
			InterestRate 	= str(rate.Rate) if rate else "0"
			InterestRate 	= InterestRate.split()
			
			if len(InterestRate) > 1:
				InterestRate 	= InterestRate[1]
			else:
				InterestRate 	= InterestRate[0]

		return jsonify(Category=Category, InterestRate=InterestRate)
	except:
		raise

@app.route("/Morakot/RepSchedule", methods=['GET'])
@app.route("/Morakot/API/RepSchedule", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def RepaymentSchedule():
	try:
		RepMode 		= request.args.get("RepMode")
		AnnuityAmount 	= False
		InterestFreq	= False
		PrincipalFreq 	= False
 	
		if RepMode == '1':
			AnnuityAmount 	= True
			InterestFreq	= False
			PrincipalFreq 	= False
		elif RepMode == '2':
			AnnuityAmount 	= False
			InterestFreq	= True
			PrincipalFreq 	= True
		elif RepMode == '3':
			AnnuityAmount 	= True
			InterestFreq	= False
			PrincipalFreq 	= False
		elif RepMode == '4':
			AnnuityAmount 	= True
			InterestFreq	= True
			PrincipalFreq 	= True

		return jsonify(AnnuityAmount=AnnuityAmount,InterestFreq=InterestFreq,PrincipalFreq=PrincipalFreq)
	except:
		raise

@app.route("/Morakot/CheckMoreThanOneYears", methods=['GET'])
@app.route("/Morakot/API/CheckMoreThanOneYears", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getMoreThanOneYears():
	Term = request.args.get("Term")
	if float(Term) > 12:
		MoreThanOneYear = "Y"
	else:
		MoreThanOneYear = "N"

	return jsonify(MoreThanOneYear=str(MoreThanOneYear))

@app.route("/Morakot/AutoCompleteGroupLoan", methods=['GET'])
@app.route("/Morakot/API/AutoCompleteGroupLoan", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAutoCompleteGroupLoan():
	GroupID = request.args.get("Group")
	AppDate = request.args.get("ValueDate")
	Term 			= "0"
	FreqType 		= "1"
	Frequency 		= "0"
	FreqDesc 		= "1.Monthly"
	Installment 	= 0
	LoanProduct 	= ""
	Category 		= ""
	InterestRate 	= ""
	Currency 		= ""
	ProDesc 		= ""
	Group 			= ""
	VBID 			= ""
	VB_Desc 		= ""
	LoanPurpose 	= ""
	PurDesc 		= ""
	MoreThanOneYear = "N"
	ContractOfficerID = ""
	OfficerName 	= ""
	FwdBwdKey		= ""
	TemplateBase	= ""
	TemplateBaseDesc= ""

	Amount 			= "0"
	CompulsorySaving = "N"
	CompulsorySavingDesc = 'No'
	VoluntarySaving = "N"
	VoluntarySavingDesc = 'No'
	VoluntaryRate 	= 0
	SavingRate 		= 0
	BoolSavingRate 	= False
	BoolVoluntaryRate = False
	dic 			= {}
	resultFBK 		= {'0':'No Holiday', '1':'Backward within month', '2':'Forward within month', '3':'Backward', '4':'Forward'}
	resultBDK 		= {'1': '1. Value Date', '2': '2. Previous Date', '3': '3. First Date', '4': '4. Week Day'}
	resultRMS 		= {'1': 'Declining', '2': 'Annuity', '3': 'Flat', '4': 'IRR', '6':'Template Base'}

	resultFBK 		= {'0':'No Holiday', '1':'Backward within month', '2':'Forward within month', '3':'Backward', '4':'Forward'}
	resultBDK 		= {'1': '1. Value Date', '2': '2. Previous Date', '3': '3. First Date', '4': '4. Week Day'}
	resultRMS 		= {'1': 'Declining', '2': 'Annuity', '3': 'Flat', '4': 'IRR', '6':'Template Base'}


	query = MKT_GROUP.query.filter(MKT_GROUP.ID == GroupID).first()
	if query:
		CurrencyObj 	= MKT_CURRENCY.query.get(query.Currency)
		Amount 			= str(mktmoney.toMoney(float(query.ApprovedAmount), CurrencyObj))
		Term 			= str(query.Term) if query.Term else "0"

		TBObj = MKT_TEMPLATE_BASE.query.get(query.TemplateBase)
		if TBObj:
			TemplateBase	= TBObj.ID
			TemplateBaseDesc= TBObj.ID + ' - '+ TBObj.Description
		
		if float(Term) > 12:
			MoreThanOneYear = "Y"

		FreqType = query.FreqType
		if FreqType == "1":
			FreqDesc = "1. Monthly"
		elif FreqType == "2":
			FreqDesc = "2. Weekly"
		elif FreqType == "3":
			FreqDesc = "3. Daily"

		Frequency 		= str(query.Frequency)
		Installment 	= 	mktloanapp.getNumberOfInstallment(Term, Frequency, FreqType, AppDate)
		ContractOfficerID 	= query.OfficerID
		Officer = MKT_OFFICER.query.get(ContractOfficerID)
		if Officer:
			OfficerName = "%s - %s %s"%(Officer.ID,Officer.LastName,Officer.FirstName)

		LoanProduct  	= query.LoanProduct
		ProductObj 		= MKT_LOAN_PRODUCT.query.get(LoanProduct)
		if ProductObj:
			ProDesc 	= ProductObj.Description
			Category 	= ProductObj.LNCategory
			FwdBwdKey 	= ProductObj.FWDBWDKey
			FBKDes 		= resultFBK[FwdBwdKey]
			BaseDateKey = ProductObj.BaseDateKey
			BDKDes 		= resultBDK[BaseDateKey]
			RepMode 	= ProductObj.RepMode
			RepModeDesc = resultRMS[RepMode]

		InterestRate 	= str(query.InterestRate)
		InterestRate 	= InterestRate.split()
		InterestRate 	= InterestRate[0]
		Currency 		= query.Currency

		LoanPurpose = query.LoanPurpose
		DictPurpose = {}
		if not LoanPurpose:
			LoanPurpose = 	"__None"
			PurDesc 	= 	"--None--"
		else:
			LP = MKT_LOAN_PURPOSE.query.get(LoanPurpose)
			if LP:
				DictPurpose = {'id':LP.ID, 'text':LP.Description}

		ListFreqType 			= {'N':'No','Y':'Yes','2':'2. Monthly'}
		RateFixedType 			= {'R':'Rate','F':'Fixed'}
		DictCompulsorySaving 	= {'id':query.CompulsorySaving, 'text':ListFreqType.get(query.CompulsorySaving)}
		DictRateFixed 			= {'id':query.RateFixed, 'text':RateFixedType.get(query.RateFixed)}
		DictVoluntarySaving 	= {'id':query.VoluntarySaving, 'text':ListFreqType.get(query.VoluntarySaving)}
		
		SavingRate 				= query.CompulsoryRate

		dic = { 'Amount': Amount,
				'CompulsorySaving': DictCompulsorySaving,
				'DictRateFixed': DictRateFixed,
				'SavingRate': SavingRate,
				'VoluntarySaving': DictVoluntarySaving,
				'VoluntaryRate': VoluntaryRate,
				'DictPurpose': DictPurpose
				}
	return jsonify(	Term 				= Term ,
					FreqType 			= FreqType ,
					Frequency 			= Frequency ,
					FreqDesc 			= FreqDesc ,
					Installment 		= Installment ,
					LoanProduct 		= LoanProduct ,
					Category 			= Category ,
					InterestRate 		= InterestRate ,
					Currency 			= Currency ,
					ProDesc 			= ProDesc ,
					LoanPurpose 		= LoanPurpose ,
					PurDesc 			= PurDesc ,
					MoreThanOneYear 	= MoreThanOneYear ,
					ContractOfficerID 	= ContractOfficerID,
					OfficerName 		= OfficerName,
					FwdBwdKey 			= FwdBwdKey, 
					FBKDes 				= FBKDes, 
					BaseDateKey 		= BaseDateKey,
					BDKDes 				= BDKDes,
					RepMode				= RepMode,
					RepModeDesc			= RepModeDesc,
					Amount				= Amount,
					SavingRate			= SavingRate,
					CompulsorySaving	= DictCompulsorySaving['id'],
					CompulsorySavingDesc= DictCompulsorySaving['text'],
					DictRateFixed		= DictRateFixed['id'],
					DictRateFixedDesc	= DictRateFixed['text'],
					DictPurpose			= DictPurpose['id'],
					DictPurposeDesc		= DictPurpose['text'],
					TemplateBase		= TemplateBase,
					TemplateBaseDesc	= TemplateBaseDesc,
					results 			= dic
					)

@app.route("/Morakot/GroupCompulsorySaving", methods=['GET'])
@app.route("/Morakot/API/GroupCompulsorySaving", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def GroupCompulsorySaving():
	Saving 			= request.args.get('CompulsorySaving')
	SavingRate 		= 0
	BoolSavingRate 	= False
	if Saving == 'N':
		BoolSavingRate = True
	dic = { 'SavingRate': SavingRate,
			'BoolSavingRate': BoolSavingRate}
	return jsonify(
			SavingRate	= SavingRate,
			results 	= dic)


@app.route("/Morakot/GroupVoluntarySaving", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def GroupVoluntarySaving():
	Saving 			= request.args.get('VoluntarySaving')
	VoluntaryRate 	= 0
	BoolVoluntaryRate 	= False
	if Saving == 'N':
		BoolSavingRate = True
	dic = { 'VoluntaryRate': VoluntaryRate,
			'BoolVoluntaryRate': BoolVoluntaryRate}
	return jsonify(results = dic)


@app.route("/Morakot/GroupBorrower", methods=['GET'])
@app.route("/Morakot/API/GroupBorrower", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getGroupBorrowers():

	BorrowerList 	= ''
	BorrowerObj 	= {'BorrowerLoanContract':[]}

	GroupID 		= request.args.get('Group')
	BorrowerList 	= GroupLoanTools()
	# # check customer has active in loan contract
	# BorrowerObj 	= BorrowerList.checkBorrower(GroupID)
	dic 			= {}
	Branch 			= mktuser.getCurrentBranch()
	RestrictedObj 	= MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()

	Borrower 		= MKT_CUSTOMER.query.\
						filter(MKT_CUSTOMER.Block == 'N').\
						filter(MKT_CUSTOMER.GroupID == GroupID).\
						filter(~MKT_CUSTOMER.ID.in_(BorrowerObj.get('BorrowerLoanContract'))).\
						order_by(MKT_CUSTOMER.ID.asc())

	if RestrictedObj:
		Borrower 	= Borrower.filter(MKT_CUSTOMER.Branch == Branch)
	for row in  Borrower:
		dic[row.ID] = row.ID + " - " + row.LastNameEn + " " + row.FirstNameEn
	return jsonify(results = dic)

@app.route("/Morakot/AddressFromVB", methods=['GET'])
@app.route("/Morakot/API/AddressFromVB", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAddressFromVB():

	Province 		= ''
	District 		= ''
	Commune 		= ''
	Village 		= ''
	ProvinceDesc 	= ''
	DistrictDesc 	= ''
	CommuneDesc 	= ''
	VillageDesc 	= ''
	OfficerID 		= ''
	OfficerName 	= ''

	VBID 		= request.args.get('VBID')
	GroupID 	= request.args.get('GroupID')
	VBObj 		= MKT_VB.query.filter(MKT_VB.ID == VBID).filter().first()
	GroupObj 	= MKT_GROUP.query.filter(MKT_GROUP.ID == GroupID).first()

	if VBObj:
		Province 	= VBObj.VBProvince
		District 	= VBObj.VBDistrict
		Commune 	= VBObj.VBCommune
		Village 	= VBObj.VBVillage

	if GroupObj:
		OfficerID 	= GroupObj.OfficerID

	OffficerObj 	= MKT_OFFICER.query.filter(MKT_OFFICER.ID == OfficerID).first()
	if OffficerObj:
		OfficerName = OffficerObj.ID + " - " + OffficerObj.LastName + " " + OffficerObj.FirstName

	ProvinceObj = MKT_PROVINCE.query.filter(MKT_PROVINCE.ID == Province).first()
	DistrictObj = MKT_DISTRICT.query.filter(MKT_DISTRICT.ID == District).first()
	CommuneObj = MKT_COMMUNE.query.filter(MKT_COMMUNE.ID == Commune).first()
	VillageObj = MKT_VILLAGE.query.filter(MKT_VILLAGE.ID == Village).first()

	if ProvinceObj:
		ProvinceDesc = ProvinceObj.Description
	if DistrictObj:
		DistrictDesc = DistrictObj.Description
	if CommuneObj:
		CommuneDesc = CommuneObj.Description
	if VillageObj:
		VillageDesc = VillageObj.Description

	return jsonify(	ProvinceID 		= Province,
					ProvinceDesc 	= ProvinceDesc,
					DistrictID 		= District,
					DistrictDesc 	= DistrictDesc,
					CommuneID  		= Commune,
					CommuneDesc 	= CommuneDesc,
					VillageID 		= Village,
					VillageDesc 	= VillageDesc,
					OfficerID 		= OfficerID,
					OfficerName 	= OfficerName
					)

def getRecord():
	try:
		result = MKT_GROUP_LOAN_CONTRACT_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_GROUP_LOAN_CONTRACT.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict.update({'VBID'					:str(row.ContractVB)})
				Dict.update({'GroupID'				:str(row.Group)})
				Dict.update({'TemplateBase'			:str(row.TemplateBase)})
			return Dict
		else:
			return Dict
	except:
		raise

def getRecordBorrower():
	try:
		result = MKT_GROUP_LOAN_BORROWER_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_GROUP_LOAN_BORROWER.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict.update({'BorrowerTemplateBase'			:str(row.BorrowerTemplateBase)})
			return Dict
		else:
			return Dict
	except:
		raise

def loadVBID():
	return MKT_VB.query

def loadGroupID():
	if request.method == 'POST':
		VBID = request.form["ContractVB"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_GROUP.query.filter_by(VBID=Record['VBID'])
		else:
			return MKT_GROUP.query.filter_by(VBID='').all()
	return MKT_GROUP.query.filter_by(VBID=VBID)

def loanBankDate():
	return mktdate.getBankDate()

def loadLoanProduct():
	return MKT_LOAN_PRODUCT.query

def laodLoanPurpose():
	return MKT_LOAN_PURPOSE.query

def loadOfficer():
	return mktofficer.loadOfficer()

def loadCharge():
	return MKT_CHARGE.query

def loadBorrowerTemplateBase():
	ProductObj 		= ''
	TemplateList 	= []

	if request.method == 'POST':
		BorrowerTemplateBase 	= request.form["BorrowerTemplateBase"]
		ProductID 				= request.form["LoanProduct"]
		ProductObj = MKT_LOAN_PRODUCT.query.filter(MKT_LOAN_PRODUCT.ID == ProductID).first()
		try:
			TemplateList = str(ProductObj.TemplateBase).split()
			return MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID.in_(TemplateList))
		except Exception, e:
			return MKT_TEMPLATE_BASE.query
	else:
		ID 				= g.formID
		if ID:
			GroupLoanObj = MKT_GROUP_LOAN_CONTRACT_INAU.query.filter(MKT_GROUP_LOAN_CONTRACT_INAU.ID == ID).first()
			try:
				if GroupLoanObj:
					ProductObj = MKT_LOAN_PRODUCT.query.filter(MKT_LOAN_PRODUCT.ID == GroupLoanObj.LoanProduct).first()
					TemplateList = str(ProductObj.TemplateBase).split()
					return MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID.in_(TemplateList))
				else:
					return MKT_TEMPLATE_BASE.query
			except Exception, e:
				return MKT_TEMPLATE_BASE.query

def loadTemplateBase():
	if request.method == 'POST':
		TemplateBase = request.form["TemplateBase"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_TEMPLATE_BASE.query.filter_by(ID=Record['TemplateBase'])
		else:
			return MKT_TEMPLATE_BASE.query.filter_by(ID='').all()
	return MKT_TEMPLATE_BASE.query.filter_by(ID=TemplateBase)

def getAccountProductSetup():
	return MKT_ACC_PRODUCT.query.get('101')

def loadInterestRateType(Currency=''):
	try:

		AccRecord 	= 	getAccountProductSetup()
		FixedRate 	=	"F"
		if AccRecord:
			Charge 	= 	AccRecord.Charge
			ID 		=	str(Charge) + Currency
			AccCha 	=  	MKT_CHARGE_RATE.query.get(ID)
			if AccCha:
				FixedRate = str(AccCha.RateFixed)
		return FixedRate

	except:
		raise

def loadCurrency():
	return MKT_CURRENCY.query

def loadPreDefinenSchedule():
	return MKT_PRE_DEFINE_SCHEDULE.query

def loadBorrower():
	GroupID = ''
	if request.method == 'POST':
		GroupID = request.form["Group"]
	else:
		if len(getRecord())>0:
			GroupID = getRecord()['GroupID']

	Branch 			= 	mktuser.getCurrentBranch()
	RestrictedObj 	= 	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()
	Borrower 		=	db.session.query(MKT_CUSTOMER).\
						filter(MKT_CUSTOMER.Block == 'N').\
						filter(MKT_CUSTOMER.GroupID == GroupID).\
						order_by(MKT_CUSTOMER.ID.asc())
	if RestrictedObj:
		Borrower 	=	Borrower.filter(MKT_CUSTOMER.Branch == Branch)

	return Borrower

def custom_FirstCollectionDate(form,field):
	FirstCollection = request.form["FirstCollectionDate"] if request.method == 'POST' else ""
	ValueDate 		= request.form["ValueDate"] if request.method == 'POST' else ""
	# FirstCollection = form.FirstCollectionDate.data

	BankDate = mktdate.getBankDate()

	LoanProduct 	= form.LoanProduct.data
	if FirstCollection and ValueDate:
		CheckFormatDate = mktdate.isDateISO(FirstCollection)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
			
		ValueDate 		= datetime.strptime(str(ValueDate),'%Y-%m-%d').date()
		FirstCollection = datetime.strptime(str(FirstCollection),'%Y-%m-%d').date()

		if FirstCollection <= ValueDate:
			raise ValidationError("Date must be bigger than value date.")

		if FirstCollection < BankDate:
			raise ValidationError("Date must be bigger than bank Date")

	else:
		
		# clear out processing errors
		field.errors[:] = []
		
		if hasattr(LoanProduct,'ID'):
			LoanProduct = LoanProduct.ID
			LoanProductObj = MKT_LOAN_PRODUCT.query.get(LoanProduct)
			if LoanProductObj:
				BaseDateKey = LoanProductObj.BaseDateKey
				if BaseDateKey == "3":
					raise ValidationError("This field is required.")
		
		# Stop further validators running
		raise StopValidation()

def custom_Disburse(form, field):

	if request.form['Disbursed']:
		Disbursed 		= []
		TemplateAmount 	= 0
		Description 	= ''
		BorrowerID 		= ''
		BTemplateBase 	= ''

		Currency 	= request.form['Currency']
		LoanProduct = request.form['LoanProduct']
		RepMode 	= request.form['RepMode']
		Installment = request.form['Installment']

		TemplateBase 	= request.form.get('TemplateBase') if 'TemplateBase' in request.form else ''
		TemplateBaseObj = MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID == TemplateBase).first()

		if not TemplateBase and RepMode == '6':
			raise ValidationError('Template Base is required.')

		if TemplateBaseObj:
			TemplateAmount = TemplateBaseObj.DisburseAmount
			Description 		= TemplateBaseObj.Description

		controls_list 	= 	request.form
		ListDisbursed	= 	[item for item in controls_list if "Disbursed" in item]
		ListTemplate	= 	[item for item in controls_list if "BorrowerTemplateBase" in item]
		ListBorrower	= 	[item for item in controls_list if "BorrowerID" in item]

		# Sort list
		ListTemplate.sort()
		ListBorrower.sort()
		ListDisbursed.sort()

		TotalDisbursed =	len(ListDisbursed)

		for i in range(0,TotalDisbursed):
			if field.name == ListDisbursed[i]:
				try:
					# get value from form
					Disbursed = request.form[ListDisbursed[i]]
					BTemplateBase = request.form[ListTemplate[i]]
					BorrowerID = request.form[ListBorrower[i]]
				except:
					continue
				mktloanapp.checkMaxMinAmount(float(Disbursed), 'Disbursed', Currency, LoanProduct)

				if Disbursed=='0':
					raise ValidationError("This field is required.")

				# check Template Base by Borrower and disburse amount 
				BorrowerName = db.session.query(MKT_CUSTOMER.FirstNameEn).filter(MKT_CUSTOMER.ID ==  BorrowerID).first()
				if not BTemplateBase == '__None':
					BTemplateBaseObj = MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID == BTemplateBase).first()
					if BTemplateBaseObj:
						TemplateAmount 		= BTemplateBaseObj.DisburseAmount
						TemplateInstallment = BTemplateBaseObj.Installment
						Description 		= BTemplateBaseObj.Description

						if not int(TemplateInstallment) == int(Installment):
							raise ValidationError("Installment of Group Loan Contract %s is not equal installment in template base %s"%(Installment,TemplateInstallment))

					if not float(Disbursed) == float(TemplateAmount) and RepMode == '6':
						Disbursed 		= mktmoney.toMoney(float(Disbursed), mktmoney.getCurrencyObj(Currency), 1)
						TemplateAmount 	= mktmoney.toMoney(float(TemplateAmount), mktmoney.getCurrencyObj(Currency), 1)

						raise ValidationError("Disbursed amount %s of Borrower %s is not equal with selected schedule %s"%(Disbursed, BorrowerName.FirstNameEn, Description))

				# check disburse amount with disburse amount in template base all borrower
				if not float(Disbursed) == float(TemplateAmount) and RepMode == '6':
					Disbursed 		= mktmoney.toMoney(float(Disbursed), mktmoney.getCurrencyObj(Currency), 1)
					TemplateAmount 	= mktmoney.toMoney(float(TemplateAmount), mktmoney.getCurrencyObj(Currency), 1)

					raise ValidationError("Disbursed amount %s of Borrower %s is not equal with selected schedule %s"%(Disbursed, BorrowerName.FirstNameEn, Description))

def custom_Borrower(form, field):

	if request.form['BorrowerID']:
		GroupID = request.form['Group']
		GroupObj = MKT_GROUP.query.filter(MKT_GROUP.ID == GroupID).first();
		MinMember = 0
		if GroupObj:
			MinMember = GroupObj.MinMember
		controls_list 	= 	request.form
		ListBorrower	= 	[item for item in controls_list if "BorrowerID" in item]
		ListBorrower.sort()
		TotalBorrower =	len(ListBorrower)

		for i in range(0,TotalBorrower):
			if field.name == ListBorrower[i]:
				try:
					Borrower = request.form[ListBorrower[i]]
				except:
					continue
				if Borrower == '__None':
					raise ValidationError("This field is required.")
				if int(TotalBorrower) < int(MinMember):
					raise ValidationError("Please select more Borrower. Minimum Borrower is %s."%MinMember)
		# raise

def custom_Charge(form, field):
	Currency 	=	request.form['Currency']
	ListChargeKey,TotalChargeKey 	=	mkttool.getControlList('ChargeKey')
	ListCharge,TotalCharge 			=	mkttool.getControlList('Charge')
	Charge=''

	for i in range(0,TotalCharge):

		if field.name == ListCharge[i]:
			ChargeKey = request.form[ListChargeKey[i]]
			Charge 	  = request.form[ListCharge[i]]

			if ChargeKey and ChargeKey != '__None':
				# mkttool.custom_RequiredField(form, field)
				if not Charge:
					raise ValidationError("#%s This field is required."%(i+1))
				ChargeKeyID = str(ChargeKey) + str(Currency)
				# print "%s" %ChargeKeyIDo

				ChargeObj 		= MKT_CHARGE_RATE.query.get(ChargeKeyID)
				if ChargeObj:
					
					if not mkttool.isFloat(Charge):
						raise ValidationError('Charge must be number.')
					Data = Decimal(Charge)
					ChargeMode 	= ChargeObj.ChargeMode
					RateFixed 	= str(ChargeObj.RateFixed) if ChargeObj else ""
					Charge 		= str(ChargeObj.Value).strip() if ChargeObj.Value else "0"
					ChargeList  = Charge.split()
					ChargeList  = filter(None,ChargeList)

					if len(ChargeList) > 1:
						MaxCharge = Decimal(ChargeList[1])
						MinCharge = Decimal(ChargeList[0])
						if MinCharge <= Data <= MaxCharge:
							pass
						else:
							raise ValidationError('%s - Charge value must be between %s to %s.'%(ChargeObj.Description,MinCharge,MaxCharge))
					else:
						Charge = ChargeList[0]

					if ChargeMode == '1' or ChargeMode == None:
						if RateFixed == 'R':
							if Data >= Decimal(100):
								raise ValidationError('%s - Charge value must be less than 100%% '% (ChargeObj.Description))

class FRM_GROUP_LOAN_CONTRACT(exform):
	ContractVB 			= 	RemoteTextField(requiredlabel("Village Bank", "*"),
							validators=[validators.Required()])
	Group 				= 	QuerySelectField(requiredlabel('Group','*'),
							query_factory=loadGroupID,
							get_label=lambda a: a.ID + " - " + a.GroupName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()])
	Currency 			= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()])

	ValueDate 			= 	DateField(requiredlabel(getLanguage("Value Date"), "*"), [validators.Required()], default=loanBankDate)
	Cycle 				= 	IntegerField(requiredlabel(getLanguage("Cycle"), "*"), [validators.Required()], default=1)
	MaturityDate 		= 	DateField(getLanguage("Maturity Date"), [validators.Optional()])
	LoanProduct 		= 	QuerySelectField(requiredlabel(getLanguage("Loan Product"), "*"),
							query_factory=loadLoanProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()])
	Category 			= 	TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	InterestRate 		= 	TextField(requiredlabel(getLanguage("Interest Rate"), "*"), [validators.Required()])
	IRR 				= 	TextField("IRR")
	FreqType 			= 	SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
							choices=[('1', '1. Monthly'), 
									 ('2', '2. Weekly'),
									 ('3', '3. Daily')],
							coerce=str,
							validators=[validators.Required()]
						)
	Frequency 			= 	IntegerField(requiredlabel(getLanguage("Frequency"), "*"), [validators.Required()], default=1)
	Term 				= 	TextField(requiredlabel("%s (%s)" %(getLanguage("Term"), getLanguage("Month")), "*"), [validators.Required()])
	Installment 		= 	IntegerField(requiredlabel(getLanguage("Installment"), "*"), [validators.Required()])

	DeliqMode 			= 	SelectField(requiredlabel(getLanguage('Deliquency Mode'), '*'),
							choices=[('3', '3. %s' %getLanguage("Semi-Automatic")),
									 ('2', '2. %s' %getLanguage("Automatic")),
									 ('1', '1. %s' %getLanguage("Manual"))],
							coerce=str,
							validators=[validators.Required()])
	LoanType 			= 	SelectField(requiredlabel(getLanguage('Loan Type'), '*'),
							choices=[('N', '%s' %getLanguage("Normal")),
									 ('R', '%s' %getLanguage("Restructured"))],
							coerce=str,
							default='N')
	MoreThanOneYear 	= 	TextField(requiredlabel(getLanguage("More Than One Year"), "*"), [validators.Required()], default='N')
	ContractOfficerID 	= 	RemoteTextField(requiredlabel("New Officer", "*"),
							dicRemote={'url':'/Morakot/SearchOfficer'},
							validators=[validators.Required()]
							)

	BorrowerID 			= 	QuerySelectField(requiredlabel("Borrower", '*'),
							query_factory=loadBorrower,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " + a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--None--',
							description="1-%s" %"Borrower",
							validators=[custom_Borrower]
						)
	LoanCycle			=	IntegerField(requiredlabel(getLanguage("Cycle"), "*"), [validators.Required()], default=1, description="1-%s" %"Borrower")

	LoanPurpose 		= 	QuerySelectField(getLanguage("Loan Purpose"),
							query_factory=laodLoanPurpose,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description=u'1-%s' %"Borrower"
						)
	Disbursed	 		= 	TextField(requiredlabel(getLanguage("Disbursed Amount"), '*'),
							validators=[custom_Disburse], 
							default=0,
							description=u'1-%s' %"Borrower"
						)

	CompulsorySaving 	= 	SelectField("Compulsory Saving",
							choices=[('N', 'No'), ('Y', 'Yes')],
							coerce=str,
							default='N',
							description=u'1-%s' %"Borrower"
						)
	RateFixed 			= 	SelectField("Rate/Fixed",
							choices=[('R', 'Rate'), ('F', 'Fix')],
							coerce=str,
							default='R',
							description=u'1-%s' %"Borrower"
						)
	SavingRate 			= 	TextField(requiredlabel("Calculation Rate","*"),
							default=0,
							description=u'1-%s' %"Borrower",
							validators=[validators.Required()]
						)
	#Newly standardize
	VoluntarySaving 	= SelectField(requiredlabel("Voluntary Saving", "*"),
						choices=[('N', 'No'), 
								 ('Y', 'Yes')],
						coerce=str,
						validators=[validators.Required()],
						default='Y',
						description="1-%s" %"Borrower"
					)
	#
	BorrowerTemplateBase = QuerySelectField("Template Base",
							query_factory=loadBorrowerTemplateBase,
							get_label=lambda a:a.ID+ ' - '+a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							description=u'1-%s' %"Borrower")

	ChargeKey 			= 	QuerySelectField(getLanguage("Charge Key"),
							query_factory=loadCharge,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description=u'2-%s' %getLanguage("Loan Charge"))

	Charge				= 	TextField(getLanguage("Charge"),
							validators=[custom_Charge], 
							default=0,
							description=u'2-%s' %getLanguage("Loan Charge"))

	PreDefine 			= 	QuerySelectField("Pre-define Schedule",
							query_factory=loadPreDefinenSchedule,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description=u'3-%s' %"Repayment Mode")

	FirstCollectionDate =	DateField("First Collection Date", [custom_FirstCollectionDate],
							description=u'3-%s' %"Repayment Mode"
						)
	RepMode 			= 	SelectField(requiredlabel("Repayment Mode", "*"),
							choices=[('1', 'Declining'),
									 ('2', 'Annuity'),
									 ('3', 'Flat'),
									 ('4', 'IRR'),
									 ('6', 'Template Base')],
							coerce=str,
							validators=[validators.Required()],
							description=u'3-%s' %"Repayment Mode"
						)
	TemplateBase 		= QuerySelectField("Template Base",
							query_factory=loadTemplateBase,
							get_label=lambda a:a.ID+ ' - '+a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							description=u'3-%s' %"Repayment Mode")

	FwdBwdKey 			= 	SelectField(requiredlabel("Fwd/Bwd Key", "*"),
							choices=[('0','No Holiday'),
									 ('1','Backward within month'),
									 ('2','Forward within month'),
									 ('3','Backward'),
									 ('4','Forward')],
							coerce=str,
							validators=[validators.Required()],
							description=u'3-%s' %"Repayment Mode"
						)
	AnnuityAmount 		= 	TextField(requiredlabel("Annuity Amount", "*"), [validators.Required()],default=0,description=u'3-%s' %"Repayment Mode")
	PrincipalFreq 		= 	IntegerField(requiredlabel("Principal Frequency", "*"), [validators.Required()],default=1,description=u'3-%s' %"Repayment Mode")
	InterestFreq 		= 	IntegerField(requiredlabel("Interest Frequency", "*"), [validators.Required()],default=1,description=u'3-%s' %"Repayment Mode")
	BaseDateKey 		= 	SelectField('Base Date Key',
									choices=[('1', '1. Value Date'),
											 ('2', '2. Previous Date'),
											 ('3', '3. First Date'),
											 ('4', '4. Week Day')],
									coerce=str,
									description=u'3-%s' %"Repayment Mode"
								)
	PaymentHoliday 				= 	SelectField("Payment Holiday",
								choices=[('0', '--None--'), 
									 ('1', '1. Principal Only'),
									 ('2', '2. Interest Only'),
									 ('3', '3. Both Principal+Interest')],
								coerce=str,
								description=u'3-%s' %"Repayment Mode"
							)
	NumOfHolidayInstallment 	= 	TextField("#Of Holiday Installment", default=0,description=u'3-%s' %"Repayment Mode")
	WaiveInterest 				= 	SelectField("Waive Interest",
								choices=[('N', 'No'), 
									 ('Y', 'Yes')],
								coerce=str,
								description=u'3-%s' %"Repayment Mode"
							)
	WeekDay 				= 	SelectField("Week Day",
								choices=[('MO', 'Monday'), 
									 ('TU', 'Tuesday'),
									 ('WE', 'Wednesday'),
									 ('TH', 'Thursday'),
									 ('FR', 'Friday'),
									 ('SA', 'Saturday'),
									 ('SU', 'Sunday')],
								coerce=str,
								description=u'3-%s' %"Repayment Mode"
							)
	WeekNum 				= 	SelectField("Week number",
								choices=[('1','1'), 
									 ('2','2'),
									 ('3','3'),
									 ('4','4'),
									 ('5','5')],
								coerce=str,
								description=u'3-%s' %"Repayment Mode"
							)
	Iframe				=	MKTIframe("View Repayment", dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, description='4-Repayment Schedule')

	def validate_ChargeKey(form, field):
		if request.form['ChargeKey']:
				
			ChargeKey 		= 	[]
			controls_list 	= 	request.form
			ListChargeKey	= 	[item for item in controls_list if "ChargeKey" in item]
			ListChargeKey.sort()
			TotalChargeKey =	len(ListChargeKey)

			for nub in range(0,TotalChargeKey):
				ChargeKey.append(request.form[ListChargeKey[nub]])

			DuplicateItem   = [x for x in ChargeKey if ChargeKey.count(x) > 1]
			if DuplicateItem:
				ChangeKeyObj = MKT_CHARGE.query.get(DuplicateItem[0])
				ChangeKeyDesc = ChangeKeyObj.Description if ChangeKeyObj else ''
				raise ValidationError("%s are duplicated."%ChangeKeyDesc)

	def validate_RateFixed(form, field):
			
		ChargeKey 	=	request.form['ChargeKey']
		RateFixed 	=	request.form['RateFixed']
		
		if ChargeKey and ChargeKey != '__None':
			if not RateFixed:
				raise ValidationError('This field is required.')

	def validate_ContractCustomerID(form, field):
		try:

			CustomerID = form.ContractCustomerID.data
			mktcustomer.checkAge(CustomerID)

			CusObj 	=	MKT_CUSTOMER.query.get(CustomerID)

			if CusObj:

				Block 	=	CusObj.Block
				if Block == 'Y':
					BlockReason 	=	CusObj.BlockReason
					raise ValidationError("The customer %s was blocked, reason: %s." %(CustomerID, BlockReason))

		except:
			raise

	def validate_Amount(form, field):

		Amount = field.data

		if mkttool.isFloat(Amount):
			if Amount == 0:
				raise ValidationError("Loan Balance must be bigger than zero")
			if mktloanapp.isMigrationMode():

				Amount = Decimal(field.data)
				Disbursed = Decimal(form.Disbursed.data)
				Currency = form.Currency.data

				if Amount > Disbursed:
					raise ValidationError("Loan Balance %s must be smaller than Disbursed %s" %
						(mktloanapp.getMKTMoney(Amount, Currency), mktloanapp.getMKTMoney(Disbursed, Currency)))
		else:
			raise ValidationError("Loan Balance must be bigger than zero")

	def validate_ValueDate(form, field):
		try:

			Holiday 	= mktHoliday.getHoliday()
			ValueDate 	= request.form['ValueDate']

			CheckFormatDate = mktdate.isDateISO(ValueDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
				
			ValueDate 	= datetime.strptime(str(ValueDate),'%Y-%m-%d').date()
			check 		= mktDay.isNonWorkingDay(ValueDate, Holiday)
			
			if check:
				raise ValidationError("Value date must be different holiday.")

			systemDate 	= 	mktdate.getBankDate()
			StrSysteDate=	str(systemDate).split("-")
			StrValueDate=	str(ValueDate).split("-")

			SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
			ValueMonth 	=	"%s%s" %(StrValueDate[0], StrValueDate[1])

			if int(ValueMonth) < int(SysMonth):
				raise ValidationError("Value date must be different previous month.")

		except:
			raise

	def validate_Term(form, field):
		try:
			Term 		= float(form.Term.data)
			Currency 	= form.Currency.data
			LoanProduct = request.form['LoanProduct']
			mktloanapp.checkMaxMinTerm(Term, Currency, LoanProduct)

		except:
			raise

	def validate_Installment(form, field):

		Term 		= form.Term.data
		Installment = form.Installment.data

		if Installment:
			try:
				int(Installment)
			except:
				raise ValidationError("This field must be in numeric format.")

		Frequency 	= request.form['Frequency']
		FreqType 	= ''
		AppDate 	= request.form['ValueDate']

		Check 		= mktloanapp.validateTermAndInstallment(Term, Installment, Frequency, FreqType, AppDate)
		
		if Check not in "OK":
			raise ValidationError(Check)

	def validate_LoanProduct(form, field):
		try:

			Currency 	= request.form['Currency']
			LoanProduct = request.form['LoanProduct']
			LP 			= MKT_LOAN_PRODUCT.query.get(LoanProduct)
			
			if LP:

				RuleID 	= str(LP.Rule) + str(Currency)
				Rule 	= MKT_LOAN_RULE_DE.query.get(RuleID)
				
				if not Rule:
					raise ValidationError("Loan product rule detail not define.")
		except:
			raise

	def validate_InterestRate(form, field):
		LoanPro 	= request.form['LoanProduct']
		CurrencyKey = request.form['Currency']
		InputRate 	= form.InterestRate.data

		try:

			InputRate = float(InputRate)

		except:

			raise ValidationError("This field must be in numeric format.")

		Msg = mktaccount.checkInterestRate("LC", LoanPro, InputRate, CurrencyKey)

		if Msg:
			raise ValidationError(Msg)

	def validate_BorrowerID(form, field):
		try:
			GroupID 				= request.form['Group']
			if request.form['BorrowerID']:
				Borrower 		= []
				controls_list 	= request.form
				ListBorrower	= [item for item in controls_list if "BorrowerID" in item]
				ListBorrower.sort()
				TotalBorrower =	len(ListBorrower)

				for nub in range(0,TotalBorrower):
					getBorrower = request.form[ListBorrower[nub]]
					Borrower.append(getBorrower)

				# Duplicate Borrower when select on form
				DuplicateAcc   = [x for x in Borrower if Borrower.count(x) > 1]
				if DuplicateAcc:
					raise ValidationError("Must not be the same as customer #%s"%DuplicateAcc[0])

		except Exception, e:
			raise ValidationError("%s" %e)

	def validate_TemplateBase(form, field):
		RepMode 		= request.form['RepMode']
		TemplateBase = request.form.get('TemplateBase') if 'TemplateBase' in request.form else ''
		Installment 	= request.form['Installment']

		if RepMode == '6' and TemplateBase == '__None':
			raise ValidationError("This field is required.")

		if RepMode == '6' and TemplateBase:
			TemplateObj = MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID == TemplateBase).first()
			if int(TemplateObj.Installment) != int(Installment):
				raise ValidationError("Installment %s is not equal installment in template base %s."%(Installment,TemplateObj.Installment))

	@staticmethod
	def urlParam():
		if "API" in request.url or checkContentType()=="json":
			dicParam = [{"IframeName":"Iframe", "iframeUrl":"/Morakot/GroupLoanSchedule", 'Resource' : 'Status', 'Optional':'Edit=No', 'TypeUrl':'MainCustom'}]
		else:
			dicParam = [{"IframeName":"Iframe", "iframeUrl":"/Morakot/GroupLoanSchedule", 'Resource' : 'Status', 'Optional':'Edit=No' }]
		return dicParam

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#Category').val(data.Category); $('#InterestRate').val(data.InterestRate);"
		varname 		= "LoanProduct:$('#LoanProduct').val(), Currency:$('#Currency').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/LoanProductInfo", "change"]
		hotfield.append(fun)

		fielddisplay 	= ("$('#MoreThanOneYear').val(data.MoreThanOneYear);")
		varname 		= ("Term:$('#Term').val()")
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CheckMoreThanOneYear", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment);"
		varname 		= "Term:$('#Term').val(),ValueDate:$('#ValueDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment);"
		varname 		= "Term:$('#Term').val(),ValueDate:$('#ValueDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Frequency", varname, fielddisplay, "/Morakot/CalculateInstallment", "blur"]
		hotfield.append(fun)

		# $('FreqType').val()=='3' ? $('#Installment').prop('disabled',false): $('#Installment').prop('disabled',true)
		fielddisplay 	= "$('#Installment').val(data.Installment);"
		fielddisplay 	+="$('#FreqType').val()==='3' ? $('#Installment').prop('readonly',false) : $('#Installment').prop('readonly',true);"
		varname 		= "Term:$('#Term').val(),ValueDate:$('#ValueDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["FreqType", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		# fielddisplay =  "$('input[name=AnnuityAmount]').attr('readonly', data.AnnuityAmount);"
		# fielddisplay += "$('input[name=PrincipalFreq]').attr('readonly', data.PrincipalFreq);"
		# fielddisplay += "$('input[name=InterestFreq]').attr('readonly', data.InterestFreq);"
		# varname  	= "RepMode:$('#RepMode').val()"
		# fun 		= ["RepMode", varname, fielddisplay, "/Morakot/RepSchedule", "change"]
		# hotfield.append(fun)

		# fielddisplay = "$('#AnnuityAmount').val('0');"
		# fielddisplay += "$('#PrincipalFreq').val('1');"
		# fielddisplay += "$('#InterestFreq').val('1');"
		# varname  	= "RepMode:$('#RepMode').val()"
		# fun 		= ["RepMode", varname, fielddisplay, "/Morakot/RepSchedule", "change"]
		# hotfield.append(fun)


		fielddisplay 	= "$('#Charge').val(data.Charge);"		
		varname 		= "ChargeKeyID:$('#ChargeKey').val(), Currency:$('#Currency').val()"
		fun 			= ["ChargeKey", varname, fielddisplay, "/Morakot/GroupChargeKeyInfo", "change"]
		hotfield.append(fun)

		# auto complete data
		fielddisplay 	= "$('#Installment').val(data.Installment);$('#Term').val(data.Term);$('#Frequency').val(data.Frequency);"
		fielddisplay 	+= "$('#LoanProduct').select2('data', {'id':data.LoanProduct,'text':data.ProDesc});"
		fielddisplay 	+= "$('#Category').val(data.Category);$('#InterestRate').val(data.InterestRate);"
		fielddisplay 	+= "$('#FreqType').select2('data', {'id':data.FreqType,'text':data.FreqDesc});"
		fielddisplay 	+= "$('#ContractOfficerID').select2('data', {'id':data.ContractOfficerID,'text':data.OfficerName});"
		fielddisplay 	+= "$('#Currency').select2('data', {'id':data.Currency,'text':data.Currency});"
		fielddisplay 	+= "$('#MoreThanOneYear').val(data.MoreThanOneYear);"
		fielddisplay 	+= "$('#FwdBwdKey').select2('data', {'id':data.FwdBwdKey,'text':data.FBKDes});"
		fielddisplay 	+= "$('#BaseDateKey').select2('data', {'id':data.BaseDateKey,'text':data.BDKDes});"
		fielddisplay 	+= "$('#RepMode').select2('data', {'id':data.RepMode,'text':data.RepModeDesc});"
		fielddisplay 	+= "$('#TemplateBase').select2('data', {'id':data.TemplateBase,'text':data.TemplateBaseDesc});"
		varname 		= "Group:$('#Group').val(), ValueDate:$('#ValueDate').val()"
		fun 			= ["Group", varname, fielddisplay, "/Morakot/AutoCompleteGroupLoan", "change"]
		hotfield.append(fun)

		fielddisplay 	= ("$('#Disbursed').val(data.Amount);")
		fielddisplay 	+=("$('#SavingRate').val(data.SavingRate);")
		fielddisplay 	+=("$('#LoanPurpose').select2('data', {'id':data.DictPurpose, 'text': data.DictPurposeDesc});")
		fielddisplay 	+=("$('#CompulsorySaving').select2('data', {'id':data.CompulsorySaving, 'text': data.CompulsorySavingDesc});")
		fielddisplay 	+=("$('#RateFixed').select2('data', {'id':data.DictRateFixed, 'text': data.DictRateFixedDesc});")
		varname 		= "BorrowerID:$('#BorrowerID').val(), Group:$('#Group').val(), ValueDate:$('#ValueDate').val()"
		fun 			= ["BorrowerID", varname, fielddisplay, "/Morakot/AutoCompleteGroupLoan", "change"]
		hotfield.append(fun)

		fielddisplay 	=("$('#SavingRate').val(data.SavingRate);")
		varname  		= "CompulsorySaving:$('#CompulsorySaving').val()"
		fun 			= ["CompulsorySaving", varname, fielddisplay, "/Morakot/GroupCompulsorySaving", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Frequency').val(data.Frequency);"
		fielddisplay 	+= "$('#FirstCollectionDate').val(data.FirstCollectionDate);"
		fielddisplay 	+= "$('#PrincipalFreq').val(data.PrincipalFreq);"
		fielddisplay 	+= "$('#InterestFreq').val(data.InterestFreq);"
		fielddisplay 	+= "$('#RepMode').select2('data', {'id':data.RepMode,'text':data.RepModeDes});"
		fielddisplay 	+= "$('#FreqType').select2('data', {'id':data.FreqType,'text':data.FreqTypeDes});"
		fielddisplay 	+= "$('#FwdBwdKey').select2('data', {'id':data.FwdBwdKey,'text':data.FwdBwdKeyDes});"
		fielddisplay 	+= "$('#BaseDateKey').select2('data', {'id':data.BaseDateKey,'text':data.BaseDateKeyDes});"
		fielddisplay 	+= "$('#WeekDay').select2('data', {'id':data.WeekDay,'text':data.WeekDayDes});"
		fielddisplay 	+= "$('#WeekNum').select2('data', {'id':data.WeekNum,'text':data.WeekNumDes});"
		varname 		= "PreDefine:$('#PreDefine').val(),ValueDate:$('#ValueDate').val()"
		fun 			= ["PreDefine", varname, fielddisplay, "/Morakot/getPreDefineSchedule", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setDisable():
		controls_list = ['MaturityDate','Category','validate_Installment','MoreThanOneYear','Installment','ValueDate']
		if request.method == "POST":
			RepMode 	= request.form['RepMode']
			if RepMode =='1' or RepMode =='3':
				controls_list.append('AnnuityAmount')
			elif RepMode == '2':
				controls_list.remove('AnnuityAmount')
				controls_list.append('InterestFreq')
				controls_list.append('PrincipalFreq')
			elif RepMode == '4':
				controls_list.append('InterestFreq')
				controls_list.append('PrincipalFreq')
				controls_list.append('AnnuityAmount')
		if request.method == "GET":
			ID 			= 	g.formID
			Schedule 	=	MKT_GROUP_LOAN_CONTRACT.query.get(ID)
			LoanApp 	=	MKT_GROUP_LOAN_CONTRACT.query.get(ID)
			if not LoanApp:
				LoanApp 	=	MKT_GROUP_LOAN_CONTRACT_INAU.query.get(ID)
			if Schedule:
				if Schedule.RepMode =='1' or Schedule.RepMode =='3':
					controls_list.append('AnnuityAmount')
				elif Schedule.RepMode == '2':
					controls_list.remove('AnnuityAmount')
					controls_list.append('InterestFreq')
					controls_list.append('PrincipalFreq')
				elif Schedule.RepMode == '4':
					controls_list.append('InterestFreq')
					controls_list.append('PrincipalFreq')
					controls_list.append('AnnuityAmount')
		return controls_list

	@staticmethod
	def setVisible():
		return [("DeliqMode"),("LoanType"),("MoreThanOneYear"),("Cycle")]

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay 	= "Account"
		varname 		= "CustomerID:$('#ContractCustomerID').val()"
		fun 			= ["ContractCustomerID", varname, fielddisplay, "/Morakot/ContractCustomerInfo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "Collateral"
		varname 		= "CustomerID:$('#ContractCustomerID').val()"
		fun 			= ["ContractCustomerID", varname, fielddisplay, "/Morakot/CollateralByClient", "change"]
		hotfield.append(fun)

		fielddisplay="Group"
		varname="ContractVB:$('#ContractVB').val()" 
		fun=["ContractVB", varname ,fielddisplay, "/Morakot/GroupID", "click"]
		hotfield.append(fun)

		fielddisplay 	= "BorrowerID"
		varname 		= "Group:$('#Group').val(), ID:$('#ID').val()"
		fun 			= ["Group", varname, fielddisplay, "/Morakot/GroupBorrower", "click"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def moneyField():
		return [["Disbursed", "Currency"],["AnnuityAmount", "Currency"]]

	@staticmethod
	def isMultiValue():
		controls_list=["1-Borrower", "2-Loan Charge"]
		return controls_list

	@staticmethod
	def listField():
		Branch 		= mktuser.getCurrentBranch()
		Fields = ["ID", "Currency", "ValueDate", "FreqType", "Term" ,"Installment", "LoanProduct", "ContractOfficerID"]
		return Fields,["Branch*EQ*"+Branch]

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def beforeAuthorize(**localkwargs):
		
		try:
			ID 				= g.formID
			GroupLoan 		= MKT_GROUP_LOAN_CONTRACT_INAU.query.get(ID)
			Inputter 		= GroupLoan.Inputter
			Audit 			= mktaudit.getAuditrail()
			Authorizer 		= Audit['Authorizer']
			if Inputter.upper() == Authorizer.upper():
				flash(msg_error + " user who authorize must differ from input.")
				return False
			else:
				ID 				= g.formID
				GroupLoan 		= MKT_GROUP_LOAN_CONTRACT_INAU.query.get(ID)
				GroupBorrower 	= MKT_GROUP_LOAN_BORROWER_INAU.query.filter(MKT_GROUP_LOAN_BORROWER_INAU.ID==ID).all()
				GroupCharge 	= MKT_GROUP_LOAN_CHARGE_INAU.query.filter(MKT_GROUP_LOAN_CHARGE_INAU.ID==ID).all()

				AccSetting 		= mktsetting.getTASetting()
				CompulsoryID 	= mktsetting.getAppSetting('ACC_PRODUCT_COMPULSORY')
				VolantaryID 	= mktsetting.getAppSetting('ACC_PRODUCT_VOLUNTARY')

				GroupInfoDDacount 	= {}
				GroupInfoCOMacount 	= {}
				GroupInfoVOLacount 	= {}

				BankDate 			= mktdate.getBankDate()
				VillageBank			= GroupLoan.ContractVB
				Group 				= GroupLoan.Group
				Currency 			= GroupLoan.Currency

				ValueDate 			= GroupLoan.ValueDate
				FirstCollectionDate = GroupLoan.FirstCollectionDate
				Cycle 				= GroupLoan.Cycle
				MaturityDate 		= GroupLoan.MaturityDate
				LoanProduct 		= GroupLoan.LoanProduct
				Category 			= GroupLoan.Category
				InterestRate 		= GroupLoan.InterestRate
				IRR 				= GroupLoan.IRR
				FreqType 			= GroupLoan.FreqType
				Frequency 			= GroupLoan.Frequency
				Term 				= GroupLoan.Term
				Installment 		= GroupLoan.Installment
				DeliqMode 			= GroupLoan.DeliqMode
				LoanType			= GroupLoan.LoanType
				MoreThanOneYear 	= GroupLoan.MoreThanOneYear
				OfficerID			= GroupLoan.ContractOfficerID
				RepMode 			= GroupLoan.RepMode
				AnnuityAmount 		= GroupLoan.AnnuityAmount
				FwdBwdKey 			= GroupLoan.FwdBwdKey
				PrincipalFreq 		= GroupLoan.PrincipalFreq
				InterestFreq 		= GroupLoan.InterestFreq
				BaseDateKey 		= GroupLoan.BaseDateKey
				PreDefineSchedule 	= GroupLoan.PreDefine
				WeekDay 			= GroupLoan.WeekDay
				NumOfWeek			= GroupLoan.WeekNum
				TemplateBase 		= GroupLoan.TemplateBase
				PaymentHoliday		= GroupLoan.PaymentHoliday
				NumOfHolidayInstallment = GroupLoan.NumOfHolidayInstallment
				WaiveInterest 		= GroupLoan.WaiveInterest

				TemplateSchedule 	= {}
				if GroupBorrower:
					AccProductID 	= '101' #Drawdown Account ID
					ComProductID 	= str(CompulsoryID) #Compulsory Saving Acc Product
					VolProductID 	= str(VolantaryID)
					for row in GroupBorrower:
						Borrower 			= row.BorrowerID
						LoanCycle 			= row.LoanCycle
						CompulsorySaving 	= row.CompulsorySaving
						CompulsoryRate 		= row.SavingRate
						# Newly standardize
						VoluntarySaving 	= row.VoluntarySaving if row.VoluntarySaving else "Y"
						#
						Disbursed 			= row.Disbursed
						LoanPurpose 		= row.LoanPurpose
						BorrowerTemplateBase = row.BorrowerTemplateBase
						CustomerObj  		= MKT_CUSTOMER.query.get(Borrower)
						GroupTools 			= ''
						BorrowerINAU 		= ''
						GroupBorrowerList = ''
						if BorrowerTemplateBase:
							TemplateSchedule.update({Borrower: {'Template':BorrowerTemplateBase}})
						GroupTools 			= GroupLoanTools()

						# # Validate Existing Borrower in Loan Contract
						# GroupBorrowerList 	= GroupTools.checkBorrower(Group)
						# BorrowerList 		= [x[0] for x in GroupBorrowerList.get('BorrowerLoanContract')]
						# if Borrower in BorrowerList:
						# 	BorrowerINAU += Borrower + ', '

						# # Validate when user create the same borrower in group loan contract unauthorize
						# if BorrowerINAU:
						# 	flash(msg_error + '%s already exist in group loan contract unauthorize.'%BorrowerINAU)
						# 	return False

						# Check Drawdown Account
						DDAcountObj 	= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==Borrower).\
															filter(MKT_ACCOUNT.Currency==Currency).\
															filter(MKT_ACCOUNT.AccProduct==AccProductID).first()
						# Check Compulsory Account
						if CompulsorySaving == 'Y':
							kwargs 			= {}
							Rate 			= 0
							InterestRateID 	= ComProductID + Currency
							InterestRateObj = MKT_INTEREST_RATE.query.filter(MKT_INTEREST_RATE.ID == InterestRateID).first()
							if InterestRateObj:
								Rate = InterestRateObj.Rate

							COMAcountObj 	= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==Borrower).\
																filter(MKT_ACCOUNT.Currency==Currency).\
																filter(MKT_ACCOUNT.AccProduct==ComProductID).first()
							kwargs = {
								'AccountObj' 		: COMAcountObj,
								'CustomerObj' 		: CustomerObj,
								'Disbursed' 		: Disbursed,
								'InterestRate' 		: Rate,
								'LoanPurpose' 		: LoanPurpose,
								'Currency' 			: Currency,
								'BankDate' 			: BankDate,
								'AccProductID' 		: ComProductID,
								'OfficerID' 		: OfficerID,
								'AutoID' 			: 'FRM_ACCOUNT_COMPULSORY'
							}
							COMAccount 			= GroupTools.generateAccount(**kwargs)
							AccountObj 			= COMAccount.get('AcountDict')
							CheckAccount 		= COMAccount.get('CheckAccount')
							GroupInfoCOMacount.update(COMAccount.get('GroupInfo'))
							if CheckAccount:
								mktdb.insertTable(MKT_ACCOUNT,AccountObj)

						# Generate Drawdown account for borrower
						isGenerateSaving  = mktsetting.getAppSetting('AUTO_ACC_VOLUNTARY')

						if isGenerateSaving == 'Y' or VoluntarySaving == 'Y':
							# Add one more control flow statement and one more condition above for newly standardize
							if VoluntarySaving == 'Y' :
								Rate 			= 0
								kwargs 			= {}
								InterestRateID 	= VolProductID + Currency
								InterestRateObj = MKT_INTEREST_RATE.query.filter(MKT_INTEREST_RATE.ID == InterestRateID).first()
								if InterestRateObj:
									Rate = InterestRateObj.Rate

								VOLAcountObj 	= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==Borrower).\
																	filter(MKT_ACCOUNT.Currency==Currency).\
																	filter(MKT_ACCOUNT.AccProduct==VolProductID).first()

								kwargs = {
									'AccountObj' 		: VOLAcountObj,
									'CustomerObj' 		: CustomerObj,
									'Disbursed' 		: 0,
									'InterestRate' 		: Rate,
									'LoanPurpose' 		: LoanPurpose,
									'Currency' 			: Currency,
									'BankDate' 			: BankDate,
									'AccProductID' 		: VolProductID,
									'OfficerID' 		: OfficerID,
									'AutoID' 			: 'FRM_ACCOUNT_SV'
								}
								COMAccount 			= GroupTools.generateAccount(**kwargs)
								AccountObj 			= COMAccount.get('AcountDict')
								CheckAccount 		= COMAccount.get('CheckAccount')
								GroupInfoVOLacount.update(COMAccount.get('GroupInfo'))
								if CheckAccount:
									mktdb.insertTable(MKT_ACCOUNT,AccountObj)


						# Generate Drawdown account for borrower
						kwargs = {
							'AccountObj' 		: DDAcountObj,
							'CustomerObj' 		: CustomerObj,
							'LoanCycle' 		: LoanCycle,
							'Disbursed' 		: Disbursed,
							'LoanPurpose' 		: LoanPurpose,
							'Currency' 			: Currency,
							'BankDate' 			: BankDate,
							'AccProductID' 		: AccProductID,
							'OfficerID' 		: OfficerID,
							'AutoID' 			: 'FRM_ACCOUNT_DD'
						}
						DDAccountObj 		= GroupTools.generateAccount(**kwargs)
						AccountObj 			= DDAccountObj.get('AcountDict')
						CheckAccount 		= DDAccountObj.get('CheckAccount')
						GroupInfoDDacount.update(DDAccountObj.get('GroupInfo'))
						if CheckAccount:
							mktdb.insertTable(MKT_ACCOUNT,AccountObj)
					# Enable Penalty
					LoanPenalty  = mktsetting.getAppSetting('ENABLE_PENALTY')
					Penalty = 'Y'
					if LoanPenalty:
						Penalty = LoanPenalty
					# Auto create Loan Contract
					for key, value in GroupInfoDDacount.iteritems():
						LcID 	= mktAutoID.getAutoID("FRM_LOAN_CONTRACT")
						GroupInfoDDacount.get(key,{}).update({'LoanContractID':LcID})
						TemplateSchedule.get(key,{}).update({'LoanContractID':LcID})
						CustomerID 	= key
						AccountID 	= value['AccountID']
						Disbursed 	= value['Disbursed']
						LoanPurpose = value['LoanPurpose']
						LoanCycle 	= value['LoanCycle']
						LcObj 	= {	'ID' 					: LcID,
									'LoanApplicationID' 	: '',
									'ContractCustomerID' 	: CustomerID,
									'Account' 				: AccountID,
									'Currency' 				: Currency,
									'Amount' 				: Disbursed,
									'Disbursed' 			: Disbursed,
									'ApprovedAmount'		: Disbursed,
									'OutstandingAmount' 	: Disbursed,
									'DisbursedStat' 		: 'N', #: set disburse to 'N' to make it disburse when authorize loan contract
									'ValueDate' 			: ValueDate,
									'Installment' 			: Installment,
									'Term' 					: Term,
									'Cycle' 				: LoanCycle,
									'MaturityDate' 			: MaturityDate,
									'LoanProduct' 			: LoanProduct,
									'Category' 				: Category,
									'InterestRate' 			: InterestRate,
									'IRR' 					: IRR,
									'FreqType'				: FreqType,
									'Frequency' 			: Frequency,
									'DeliqMode' 			: DeliqMode,
									'LoanPurpose' 			: LoanPurpose,
									'ContractVB' 			: VillageBank,
									'Group' 				: Group,
									'SourceOfFund' 			: '',
									'TotalInterest' 		: 0,
									'AccrInterest' 			: 0,
									'AccrCurrentInt'		: 0,
									'AccrIntCurrMonth' 		: 0,
									'AccrIntPreMonth' 		: 0,
									'IntIncEarned'			: 0,
									'AccrIntPerDay'			: 0,
									'NextAccrDate' 			: 0,
									'Suspend' 				: 'N',
									'ContractOfficerID' 	: OfficerID,
									'LoanType'				: LoanType,
									'AssetClass'			: '0',
									'MoreThanOneYear' 		: MoreThanOneYear,
									'NextRunDate'			:'',
									'Penalty' 				: Penalty,
									'FirstCollectionDate' 	: FirstCollectionDate,
									'Classification' 		: 'A'
								}

						# get group loan field from local customization
						if localkwargs:
							# New Added for Standardize in order to auto add Co-Borrower to table MKT_LOAN_CO_BORROWER
							# If for Standardize and Else for Mifida local customization
							if "LoanCoBorrower" in localkwargs.keys() :
								try :
									for row in localkwargs["LoanCoBorrower"][CustomerID] :
										row.update({"ID": str(LcID)})

										if row["CoBorrowerID"] != "" :
											mktdb.insertTable(MKT_LOAN_CO_BORROWER, row)

								except Exception as e :
									print e
									pass
							else :
								LcObj.update(localkwargs.get(CustomerID))
							

						mktdb.insertTable(MKT_LOAN_CONTRACT,LcObj)

						# Update Loan ID to MKT_GROUP_LOAN_BORROWER_INAU
						GroupBorObj = MKT_GROUP_LOAN_BORROWER_INAU.query.filter(MKT_GROUP_LOAN_BORROWER_INAU.ID == ID).\
																		 filter(MKT_GROUP_LOAN_BORROWER_INAU.BorrowerID == CustomerID).first()
						if GroupBorObj:
							GroupBorObj.LoanID = LcID
							db.session.add(GroupBorObj)

						# Insert charge to loan charge
						
						if GroupCharge:
							for row in GroupCharge:
								ChargeKey 			= row.ChargeKey if GroupCharge else 0
								Charge 				= row.Charge if GroupCharge else 0

								ChargeID = ChargeKey + Currency
								ChargeRateObj = MKT_CHARGE_RATE.query.get(ChargeID)
								ChargeObj ={'ID' 					: LcID,
											'ChargeKey'				: ChargeKey,
											'RateFixed'				: ChargeRateObj.RateFixed if ChargeRateObj else '',
											'Charge' 				: Charge,
											'Mode' 					: 1,
											'ChargePerInstallment'	: 0,
											'ChargeEarned' 			: 0,
											'ChargeUnearned' 		: 0,
											'ChargeLastBooked'		: 0,
											'ChargePerDay' 			: 0,
											'AccrCurrent' 			: 0
											}
								mktdb.insertTable(MKT_LOAN_CHARGE,ChargeObj)

						# Insert Repayment mode to schedule define
						ScheDefineObj ={'ID' 						: LcID,
										'PrincipalFreq' 			: PrincipalFreq,
										'InterestFreq' 				: InterestFreq,
										'FwdBwdKey' 				: FwdBwdKey,
										'RepMode' 					: RepMode,
										'BaseDateKey' 				: BaseDateKey,
										'FirstInstallmentDate' 		: '',
										'PaymentHoliday' 			: PaymentHoliday,
										'NumOfHolidayInstallment' 	: NumOfHolidayInstallment,
										'WaiveInterest'				: WaiveInterest,
										'AnnuityAmount' 			: AnnuityAmount
									}
						mktdb.insertTable(MKT_SCHED_DEFINE,ScheDefineObj)

						Schedule 				= ''
						InterestDayBasis		= 2 
						HolidayOption 			= 1 
						FrequencyP 				= PrincipalFreq
						FrequencyI 				= InterestFreq
						FirstDate 				= FirstCollectionDate
						BaseDateKey 			= BaseDateKey
						PaymentHoliday 			= int(PaymentHoliday)
						NumOfHolidayInstallment = int(NumOfHolidayInstallment)
						WaiveInterest 			= WaiveInterest
						CriteriaRequired		= True
						ChargeRateType 			= FRM_CHARGE_RATE.RegularFeeType
						RegularFeeType 			= ChargeRateType.kwargs.get('choices',[])
						CurrencyObj 			= MKT_CURRENCY.query
						MaturityDate 			= ""
						TotalInterest 			= 0
						ParamCharge 			= {}
						RegularFee 				= "2" #ChargeMode
						if WaiveInterest == 'Y':
							OptWaiveInterest 		= True
						else:
							OptWaiveInterest 		= False
						for item in GroupCharge:
							ChargeKey 	=	item.ChargeKey + Currency
							Charge 		= 	item.Charge

							# Check MKT_CHARGE_RATE
							KeyObj 			=	MKT_CHARGE_RATE.query.\
												filter(MKT_CHARGE_RATE.ID == ChargeKey).\
												filter(MKT_CHARGE_RATE.ChargeMode == RegularFee).\
												first()

							if KeyObj:
								RegularFeeType = int(KeyObj.RegularFeeType)

								ParamCharge = { 'Type':RegularFeeType, 
												'FixAmount':Charge,
												'Percentage':Charge,
												'ChargeRate':Charge,
												'DisburseAmount':Disbursed,
												}
						# When Choose Repayment Mode Declining or Flat
						IRRMode = False if RepMode != '4' else True
						if RepMode in ['1','3','4','6']:
							Schedule 	=	mktschedule.getScheduleDeclining(float(Disbursed),ValueDate,float(InterestRate),int(FreqType),
											int(Frequency),int(Installment),InterestDayBasis,int(FwdBwdKey),
											HolidayOption,Currency,int(BaseDateKey),
											FrequencyP,FrequencyI,RepMode,None,FirstDate,IRRMode,PaymentHoliday,
											NumOfHolidayInstallment,OptWaiveInterest,WeekDay,NumOfWeek,ParamCharge=ParamCharge)
						elif RepMode == '2':

							AnnuityWithActualNumDay = mktsetting.getAppSetting('AnnuityWithActualDay')
							if not AnnuityWithActualNumDay:
								AnnuityWithActualNumDay = "N"

							if AnnuityWithActualNumDay == 'Y':
								Schedule = mktschedule.getScheduleActualNumDay(
																	float(Disbursed),
																	ValueDate,
																	float(InterestRate),
																	int(FreqType),
																	int(Frequency),
																	int(Installment),
																	InterestDayBasis,
																	int(FwdBwdKey),
																	RepMode,
																	HolidayOption,
																	Currency,
																	int(BaseDateKey),
																	float(AnnuityAmount),
																	'KH',
																	FirstDate,
																	AccrCurrentInt=0,
																	ParamCharge=ParamCharge,
																	AccrCurrentCharge=0)
							else:
								Schedule 	= 	mktschedule.getScheduleAnnuity(Disbursed,
												ValueDate,float(InterestRate),int(FreqType),
												Frequency,Installment,Currency,Locale='KH',ParamCharge=ParamCharge)

						if RepMode == '6':
							TemplateBaseDeObj = ''
							for key, value in TemplateSchedule.iteritems():
								if 'LoanContractID' in value.keys():
									if value['LoanContractID'] == LcID:
										TemplateBase = value['Template']

							TemplateBaseObj = MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID == TemplateBase).first()
							if TemplateBaseObj:
								TemplateBaseDeObj = db.session.query(MKT_TEMPLATE_BASE_DE).filter(MKT_TEMPLATE_BASE_DE.TemplateBaseID == TemplateBase).\
														order_by(cast(MKT_TEMPLATE_BASE_DE.No,Integer)).all()

							if TemplateBaseDeObj:
								for index, row in enumerate(TemplateBaseDeObj):
									ScheduleObj = { 'ID'					: LcID + str(Schedule[index]['InstallmentNo']),
													'LoanID' 				: LcID,
													'No'					: row.No,
													'CollectionDate' 		: str(Schedule[index]['CollectionDate']),
													'Principal' 			: float(row.Principal),
													'Interest' 				: float(row.Interest),
													'Charge' 				: float(row.Charge),
													'Balance' 				: float(row.Balance),
													'NumDay' 				: str(Schedule[index]['NumberOfDay']),
													'RepStatus' 			: 0,
			 										'PartPaidAmt' 			: 0
												}
									mktdb.insertTable(MKT_REP_SCHEDULE,ScheduleObj)

									TotalInterest += float(str(row.Interest).replace(',',''))
									MaturityDate = str(Schedule[index]['CollectionDate'])
						else:
							for row in Schedule:
								ScheduleObj = { 'ID'					: LcID + str(row['InstallmentNo']),
												'LoanID' 				: LcID,
												'No'					: row['InstallmentNo'],
												'CollectionDate' 		: str(row['CollectionDate']),
												'Principal' 			: float(str(row['Principal']).replace(',','')),
												'Interest' 				: float(str(row['Interest']).replace(',','')),
												'Charge' 				: float(str(row['Charge']).replace(',','')),
												'Balance' 				: float(str(row['Balance']).replace(',','')),
												'NumDay' 				: row['NumberOfDay'],
												'RepStatus' 			: 0,
		 										'PartPaidAmt' 			: 0
											}
								mktdb.insertTable(MKT_REP_SCHEDULE,ScheduleObj)

								TotalInterest += float(str(row['Interest']).replace(',',''))
								MaturityDate = str(row['CollectionDate'])

						Resource = 'AUTH'
						IntPerDay 		=	float(0)
						TotalInt 		=	float(0)
						SystemBankDate 	=	ValueDate
						NextSystemDate 	=	str(mktdate.getBankDate())
						NextRunDate 	=	ValueDate
						IntNextRunDate 	= 	NextRunDate.replace("-", "")
						IntDate 		= 	NextSystemDate.replace("-", "")

						if int(IntNextRunDate) <= int(IntDate):
							NextRunDate 	=	NextSystemDate
						#: Update Asset Class
						AssClass =	mktpd.getLoanAssetClass(0, LoanType, MoreThanOneYear,LoanProduct)
						#: Update Suspend
						AssetClassObj 	=	MKT_ASSET_CLASS.query.get(AssClass)
						Suspend 		=	'N' if AssetClassObj.IncomeRecog == 'Y' else "Y"
						#: Update Interest
						Product = 	MKT_LOAN_PRODUCT.query.get(LoanProduct)
						if Product:
							InterestDayBasis =	Product.IntDayBasis
							NumOfDay 	= 	mktreschedule.getNumberOfDay(InterestDayBasis, SystemBankDate, NextSystemDate)

							if int(NumOfDay) > 0:
								IntPerDay 	= 	mktreschedule.getInterestPerDay(float(InterestRate), float(Disbursed), int(InterestDayBasis), SystemBankDate)
								TotalInt 	= 	float(IntPerDay) * float(NumOfDay)

						#: Update more data to loan contract
						LoanData = {'MaturityDate':MaturityDate,
									'TotalInterest':TotalInterest,
									'NextRunDate':NextRunDate,
									'AssetClass':AssClass,
									'Suspend':Suspend,
									'AccrIntPerDay':IntPerDay,
									'AccrCurrentInt':TotalInt,
									'AccrIntCurrMonth':TotalInt}
						mktdb.updateRecord(MKT_LOAN_CONTRACT,[MKT_LOAN_CONTRACT.ID == LcID],LoanData)

						# Update Loan Charge
						mktcharge.updateLoanCharge(LcID, Installment, Disbursed, Currency, "AUTH")
						Audit 		= mktaudit.getAuditrail()
						Authorizer	= Audit['Authorizer']
						Authorizeon = Audit['Authorizeon']
						Auth = mktloan.setLCDisbursement(LcID, Resource, 0,
															Authorizer=Authorizer,
															Authorizeon=Authorizeon)
						if not Auth[0]:
							db.session.rollback()
							flash(msg_warning+Auth[1])
							return False
					#: Flash message on screen after authorize
					BorrowerName = db.session.query(MKT_CUSTOMER.FirstNameEn, MKT_CUSTOMER.LastNameEn)
					Msg = "%s Loan Contract(s) created:<br>"%(len(GroupInfoDDacount))
					for key,value in GroupInfoDDacount.iteritems():
						Name = BorrowerName.filter(MKT_CUSTOMER.ID == key).first()
						Msg += "Customer ID %s:%s has Drawdown AccountID %s and Loan Contract %s with Amount %s %s<br>"\
								%(key,Name.LastNameEn + ' ' + Name.FirstNameEn,value['AccountID'],value['LoanContractID'], Currency ,mktmoney.toMoney(float(value['Disbursed']),mktmoney.getCurrencyObj(Currency)))

					Msg = "%s Loan Contract(s) created:<br>"%(len(GroupInfoDDacount))
					for key,value in GroupInfoDDacount.iteritems():
						Msg += "Customer ID <b>%s - %s</b> has Drawdown AccountID <b>%s</b> and Loan Contract <b>%s</b> with Amount <b>%s</b> <b>%s</b><br>"\
								%(key,value['AccName'],value['AccountID'],value['LoanContractID'], Currency ,mktmoney.toMoney(float(value['Disbursed']),mktmoney.getCurrencyObj(Currency)))

					Msg +="<br>"
					for key,value in GroupInfoCOMacount.iteritems():
						Name = BorrowerName.filter(MKT_CUSTOMER.ID == key).first()
						Msg += "Customer ID <b>%s - %s</b> has Compulsory Saving AccountID <b>%s</b><br>"%(key,Name.LastNameEn + ' ' + Name.FirstNameEn,value['AccountID'])

					Msg +="<br>"
					if isGenerateSaving == 'Y':
						for key,value in GroupInfoVOLacount.iteritems():
							Name = BorrowerName.filter(MKT_CUSTOMER.ID == key).first()
							Msg += "Customer ID <b>%s - %s</b> has Voluntary Saving AccountID <b>%s</b><br>"%(key,Name.LastNameEn + ' ' + Name.FirstNameEn,value['AccountID'])

					flash(Markup(Msg))
					return True
				else:
					return False
		except Exception as e:
			# raise
			db.session.rollback()
			return False

	@staticmethod
	def redirectAfterInsert():
		ID = request.form['ID']
		return ["/Morakot/GroupLoanSchedule?ID=%s&Resource=INAU" %ID, 'MainCustom']
		

	
	
def loadBorrowers():
	ID		= request.args.get('ID', '')
	Status	= request.args.get('Status', '')
	Borrowers = db.session.query(MKT_CUSTOMER).\
				join(MKT_GROUP_LOAN_BORROWER, MKT_CUSTOMER.ID == MKT_GROUP_LOAN_BORROWER.BorrowerID).\
				filter(MKT_GROUP_LOAN_BORROWER.ID==ID)

	if not Borrowers.first():
		Borrowers = db.session.query(MKT_CUSTOMER).\
				join(MKT_GROUP_LOAN_BORROWER_INAU, MKT_CUSTOMER.ID == MKT_GROUP_LOAN_BORROWER_INAU.BorrowerID).\
				filter(MKT_GROUP_LOAN_BORROWER_INAU.ID==ID)
	
	return Borrowers

class FRM_GROUP_LOAN_SCHEDULE(exform):
	Borrowers = QuerySelectField('Borrowers',
					query_factory=loadBorrowers,
					get_label=lambda a:a.ID + ' - ' + a.FirstNameEn + ' ' + a.LastNameEn ,
					allow_blank=True,
					blank_text=u'--None--')