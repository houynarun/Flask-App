from .. 							import app, db
from flask 							import g, flash,Markup
from wtforms 						import DecimalField, IntegerField
from sqlalchemy 					import *
from decimal 						import *
from app.mktcore.wtfimports 		import *
from .models 						import *
from app.VB.models 					import *
from app.Currency.models 			import *
from app.LoanProduct.models 		import *
from app.Customer.models 			import *

from app.GroupLoan.forms 			import GroupLoanTools

import app.tools.mktdate	 				as mktdate
import app.tools.mktofficer 				as mktofficer
import app.tools.mktdb 						as mktdb
import app.tools.mktsetting 				as mktsetting

ExtendClass 			= mktsetting.ExtendModule()
GROUPLOAN_LINK 		= ExtendClass.getUrlExtend(Module="GroupLoan")

def getRecord():
	try:
		result = MKT_GROUP_LOAN_CONTRACT_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_GROUP_LOAN_CONTRACT.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict.update({'VBID'			:str(row.ContractVB)})
				Dict.update({'GroupID'		:str(row.Group)})
			return Dict
		else:
			return Dict
	except:
		raise

def loadVBID():
	return MKT_VB.query

def loadGroupID():
	if request.method == 'POST':
		VBID = request.form["ContractVB"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_GROUP.query.filter_by(VBID=Record['VBID'])
		else:
			return MKT_GROUP.query.filter_by(VBID='').all()
	return MKT_GROUP.query.filter_by(VBID=VBID)

def loanBankDate():
	return mktdate.getBankDate()

def loadCurrency():
	return MKT_CURRENCY.query

def loadLoanProduct():
	return MKT_LOAN_PRODUCT.query

def laodLoanPurpose():
	return MKT_LOAN_PURPOSE.query

def loadOfficer():
	return mktofficer.loadOfficer()

class FRM_GENERATE_GROUP_LOAN_CONTRACT(exform):
	ContractVB 			= 	RemoteTextField(requiredlabel("Village Bank", "*"),
							validators=[validators.Required()])
	Group 				= 	QuerySelectField(requiredlabel('Group','*'),
							query_factory=loadGroupID,
							get_label=lambda a: a.ID + " - " + a.GroupName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()])
	Currency 			= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"))

	ValueDate 			= 	DateField(requiredlabel(getLanguage("Value Date"), "*"), default=loanBankDate)
	FirstCollectionDate =	DateField("First Collection Date", [validators.Optional()])
	Cycle 				= 	IntegerField(requiredlabel(getLanguage("Cycle"), "*"), [validators.Required()], default=1)
	MaturityDate 		= 	DateField(getLanguage("Maturity Date"), [validators.Optional()])
	LoanProduct 		= 	QuerySelectField(requiredlabel(getLanguage("Loan Product"), "*"),
							query_factory=loadLoanProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),)
	Category 			= 	TextField("Category")
	InterestRate 		= 	TextField("Interest Rate")
	IRR 				= 	TextField("IRR")
	FreqType 			= 	SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
							choices=[('1', '1. %s' %getLanguage('Monthly')), 
									 ('2', '2. %s' %getLanguage("Weekly")),
									 ('3', '3. %s' % "Daily")],
							coerce=str
						)
	Frequency 			= 	TextField("Frequency",default=1)
	Term 				= 	TextField(requiredlabel("%s (%s)" %(getLanguage("Term"), getLanguage("Month")), "*"),default=1)
	Installment 		= 	TextField("Installment",default=1)

	DeliqMode 			= 	SelectField(requiredlabel(getLanguage('Deliquency Mode'), '*'),
							choices=[('3', '3. %s' %getLanguage("Semi-Automatic")),
									 ('2', '2. %s' %getLanguage("Automatic")),
									 ('1', '1. %s' %getLanguage("Manual"))],
							coerce=str,
						)
	LoanType 			= 	SelectField(requiredlabel(getLanguage('Loan Type'), '*'),
							choices=[('N', '%s' %getLanguage("Normal")),
									 ('R', '%s' %getLanguage("Restructured"))],
							coerce=str,
							default='N')
	MoreThanOneYear 	= 	TextField("More Than One Year")
	# ContractOfficerID 	= 	QuerySelectField(requiredlabel(getLanguage('Officer'),'*'),
	# 						query_factory=loadOfficer,
	# 						get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
	# 						allow_blank=True,
	# 						blank_text=u'--None--')
	ContractOfficerID 	= 	RemoteTextField(requiredlabel("New Officer", "*"),
							dicRemote={'url':'/Morakot/SearchOfficer'},
							validators=[validators.Required()]
							)
	PrincipalFreq 		= 	IntegerField(requiredlabel("Principal Frequency", "*"),
							default=1)
	InterestFreq 		= 	IntegerField(requiredlabel("Interest Frequency", "*"),
							default=1)
	Charge				= 	TextField(getLanguage("Charge"),
							default=0)
	FwdBwdKey 			= 	SelectField(requiredlabel("Fwd/Bwd Key", "*"),
							choices=[('0','No Holiday'),
									 ('1','Backward within month'),
									 ('2','Forward within month'),
									 ('3','Backward'),
									 ('4','Forward')],
							coerce=str,
							validators=[validators.Required()]
						)
	BaseDateKey 		= 	SelectField('Base Date Key',
									choices=[('1', '1. Value Date'),
											 ('2', '2. Previous Date'),
											 ('3', '3. First Date'),
											 ('4', '4. Week Day')],
									coerce=str
								)
	def validate_Group(form, field):
		GroupID 	= request.form['Group']
		CustomerObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.GroupID == GroupID).first()
		if not CustomerObj:
			raise ValidationError('Group %s doesn\'t have member'%GroupID)

	@staticmethod
	def hotField():
		hotfield = []

		# auto complete data
		fielddisplay 	= "$('#Installment').val(data.Installment);$('#Term').val(data.Term);$('#Frequency').val(data.Frequency);"
		fielddisplay 	+= "$('#LoanProduct').select2('data', {'id':data.LoanProduct,'text':data.ProDesc});"
		fielddisplay 	+= "$('#Category').val(data.Category);$('#InterestRate').val(data.InterestRate);"
		fielddisplay 	+= "$('#FreqType').select2('data', {'id':data.FreqType,'text':data.FreqDesc});"
		fielddisplay 	+= "$('#ContractOfficerID').select2('data', {'id':data.ContractOfficerID,'text':data.OfficerName});"
		fielddisplay 	+= "$('#Currency').select2('data', {'id':data.Currency,'text':data.Currency});"
		fielddisplay 	+= "$('#MoreThanOneYear').val(data.MoreThanOneYear);"
		fielddisplay 	+= "$('#FwdBwdKey').select2('data', {'id':data.FwdBwdKey,'text':data.FBKDes});"
		fielddisplay 	+= "$('#BaseDateKey').select2('data', {'id':data.BaseDateKey,'text':data.BDKDes});"
		fielddisplay 	+= "$('#RepMode').select2('data', {'id':data.RepMode,'text':data.RepModeDesc});"
		fielddisplay 	+= "$('#TemplateBase').select2('data', {'id':data.TemplateBase,'text':data.TemplateBaseDesc});"

		varname 		= "Group:$('#Group').val(), ValueDate:$('#ValueDate').val()"
		fun 			= ["Group", varname, fielddisplay, "/Morakot/AutoCompleteGroupLoan", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setVisible():
		return [("Currency"),("ValueDate"),("FirstCollectionDate"),
				("Cycle"),("MaturityDate"),("LoanProduct"),("Category"),
				("InterestRate"),("IRR"),("FreqType"),("Frequency"),("Term"),
				("Installment"),("DeliqMode"),("LoanType"),("MoreThanOneYear"),
				("ContractOfficerID"),("PrincipalFreq"),("InterestFreq"),
				("Charge"),("DeliqMode"),("LoanType"),("MoreThanOneYear"),
				("FwdBwdKey"),("BaseDateKey")]

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay="Group"
		varname="ContractVB:$('#ContractVB').val()" 
		fun=["ContractVB", varname ,fielddisplay, "/Morakot/GroupID", "click"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def moneyField():
		return [["Disbursed", "Currency"],["AnnuityAmount", "Currency"]]

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def beforeInsert():
		try:
			GroupLoanID 	= request.form['ID']
			GroupID 		= request.form['Group']
			GroupTools 		= ''
			CheckBorrowerList = []
			GroupTools 		= GroupLoanTools()
			# # check customer has active in loan contract
			# CheckBorrowerList 	= GroupTools.checkBorrower(GroupID).get('BorrowerLoanContract')

			VBGroupID 		= MKT_GROUP.query.filter(MKT_GROUP.ID == GroupID).first()
			CustomerObj 	= MKT_CUSTOMER.query.filter(MKT_CUSTOMER.GroupID == GroupID).\
												 filter(~MKT_CUSTOMER.ID.in_(CheckBorrowerList)).all()
			if CustomerObj:
				for item in CustomerObj:
					CUSObj = {
						'ID' 				: GroupLoanID,
						'BorrowerID' 		: item.ID,
						'LoanCycle' 		: 1,
						'LoanPurpose' 		: VBGroupID.LoanPurpose,
						'Disbursed' 		: VBGroupID.ApprovedAmount,
						'CompulsorySaving' 	: VBGroupID.CompulsorySaving,
						'RateFixed'			: VBGroupID.RateFixed,
						'SavingRate' 		: VBGroupID.CompulsoryRate,
						'VoluntarySaving' 	: VBGroupID.VoluntarySaving
						}
					mktdb.insertTable(MKT_GROUP_LOAN_BORROWER_INAU,CUSObj)
			return True
		except Exception as e:
			db.session.rollback()
			return False

	@staticmethod
	def redirectAfterInsert():
		ID = request.form['ID']
		return "/Morakot/%s/Edit/%s"%(GROUPLOAN_LINK,ID)