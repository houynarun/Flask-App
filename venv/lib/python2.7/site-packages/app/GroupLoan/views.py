import sys
from flask 							import flash, session, redirect, url_for
from app.mktcore.imports 			import *
from .forms 						import *
from sqlalchemy 					import *
from .generategrouploans 			import *
from app.mktcore.session 			import *

from app.tools.loantools.rescheduletools import getNextWeek

import app.tools.mktmoney 			as mktmoney
import app.tools.mktdate 			as mktdate
import app.tools.mktsetting 		as mktsetting
import app.tools.mktmessage 		as mktmessage
import app.tools.mktparam 			as mktparam
# import app.tools.loantools 			as rescheduletools

from app.GroupLoan.models 			import *
from app.PreDefineSchedule.models 	import *
from app.mktcore.customform 		import *

class CLS_GroupLoanSchedule(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation		
	
	def globalProcess(self):
		try:
			BorrowerTemplate= ''
			GroupBorrowerObj= ''
			ID 				= request.args.get('ID', '')
			Borrower		= request.args.get('Borrower', '')
			Resource		= request.args.get('Resource', 'AUTH')
			Editable 		= request.args.get('Edit', 'Yes')
			HeaderTable 	=	['No','Collection Date','Principal','Interest','Charge','Total Amount','Balance','NumberOfDay']

			self.customButton =	{
				'title':'Show',
				'type':'Hidden',
				'method':'get',
				'url':'/GroupLoanSchedule/?ID=%s&Resource=%s&Borrower=BorrowerID' %(ID, Resource),
				'param':['BorrowerID'],
				'icon':'',
				'type_url':'Custom',
				'color':'#1b80c2'
			}

			CustomerObj 	= MKT_CUSTOMER.query
			BodyList 		= []
			BodyDict		= {}
			Currency		= 'USD'
			Schedule 		= []
			message 		= ''

			ListGroupBorrowerObj = MKT_GROUP_LOAN_BORROWER.query.filter(MKT_GROUP_LOAN_BORROWER.ID == ID)

			if not ListGroupBorrowerObj.first():
				ListGroupBorrowerObj = MKT_GROUP_LOAN_BORROWER_INAU.query.filter(MKT_GROUP_LOAN_BORROWER_INAU.ID == ID)

			if ListGroupBorrowerObj.first() and not Borrower:
				Borrower = ListGroupBorrowerObj[0].BorrowerID
				
			if not Borrower:
				self.kwargs.update({
					'HeaderTable' 	: HeaderTable,
					'GroupBorrowObj': ListGroupBorrowerObj,
					'message': message
				})
				BodyList = getBody(Schedule=Schedule, toDateShort=mktdate.toDateShort, CurrencyObj=mktmoney.getCurrencyObj(Currency), toMoney=mktmoney.toMoney)
				if BodyList:
					BodyDict.update({ 'header':[[{'text':getLanguage('Repayment Schedule'),'size':'h3','url':'','type_url':'','icon':'','method':'','children':[]}],], 'data':BodyList })

				self.body 		= BodyDict
				self.form 		= FRM_GROUP_LOAN_SCHEDULE
				self.recordID	= ID
				self.header 	= 'Repayment Schedule'
				return True
			
			else:
				if Resource == 'AUTH':
					GroupLoanObj = MKT_GROUP_LOAN_CONTRACT.query.get(ID)
					GroupBorrowerObj = MKT_GROUP_LOAN_BORROWER.query.filter(MKT_GROUP_LOAN_BORROWER.BorrowerID == Borrower, MKT_GROUP_LOAN_BORROWER.ID == ID).first()
					GroupChargeObj = MKT_GROUP_LOAN_CHARGE.query.filter(MKT_GROUP_LOAN_CHARGE.ID==ID).all()
				else:
					GroupLoanObj = MKT_GROUP_LOAN_CONTRACT_INAU.query.get(ID)
					GroupBorrowerObj = MKT_GROUP_LOAN_BORROWER_INAU.query.filter(MKT_GROUP_LOAN_BORROWER_INAU.BorrowerID == Borrower, MKT_GROUP_LOAN_BORROWER_INAU.ID == ID).first()
					GroupChargeObj = MKT_GROUP_LOAN_CHARGE_INAU.query.filter(MKT_GROUP_LOAN_CHARGE_INAU.ID==ID).all()
				
				if hasattr(GroupBorrowerObj, 'BorrowerTemplateBase'):
					BorrowerTemplate = GroupBorrowerObj.BorrowerTemplateBase

				if GroupLoanObj:
					ChargeType 				= ""
					OptWaiveInterest 		= ""
					RegularFee 				= "2" #ChargeMode
					Charge 					= 0
					HolidayOption 			= 1
					InterestDayBasis 		= 2
					ParamCharge 			= {}
					RepaymentMode 			= GroupLoanObj.RepMode
					FrequencyP 				= GroupLoanObj.PrincipalFreq
					FrequencyI				= GroupLoanObj.InterestFreq
					ValueDate 				= GroupLoanObj.ValueDate
					FirstDate 				= GroupLoanObj.FirstCollectionDate
					PreDefineSchedule 		= GroupLoanObj.PreDefine
					WeekDay 				= GroupLoanObj.WeekDay
					TemplateBase 			= GroupLoanObj.TemplateBase
					Currency 				= GroupLoanObj.Currency if GroupLoanObj.Currency else Currency
					DisburseAmount 			= convertValToFloat(GroupBorrowerObj.Disbursed, 0)
					Rate 					= convertValToFloat(GroupLoanObj.InterestRate, 0)
					Term 					= convertValToFloat(GroupLoanObj.Term, 0)
					FrequencyType 			= convertValToInt(GroupLoanObj.FreqType, 0)
					Frequency 				= convertValToInt(GroupLoanObj.Frequency, 0)
					Installment 			= convertValToInt(GroupLoanObj.Installment, 0)
					FwdBwdKey 				= convertValToInt(GroupLoanObj.FwdBwdKey, 0)
					NumOfWeek				= convertValToInt(GroupLoanObj.WeekNum, 0)
					BaseDateKey 			= convertValToInt(GroupLoanObj.BaseDateKey, 0)
					PaymentHoliday 			= convertValToInt(GroupLoanObj.PaymentHoliday, 0)
					NumOfHolidayInstallment = convertValToInt(GroupLoanObj.NumOfHolidayInstallment, 0)
					WaiveInterest 			= convertValToFloat(GroupLoanObj.WaiveInterest, 0)
					AnnuityAmount 			= convertValToFloat(GroupLoanObj.AnnuityAmount, 0)

					AnnuityWithActualNumDay = mktsetting.getAppSetting('AnnuityWithActualDay')
					if not AnnuityWithActualNumDay:
						AnnuityWithActualNumDay = "N"

					if WaiveInterest == 'Y':
						OptWaiveInterest 		= True
					else:
						OptWaiveInterest 		= False

					for item in GroupChargeObj:
						ChargeKey 	=	item.ChargeKey + Currency
						Charge 		= 	item.Charge

						# Check MKT_CHARGE_RATE
						KeyObj 			=	MKT_CHARGE_RATE.query.\
											filter(MKT_CHARGE_RATE.ID == ChargeKey).\
											filter(MKT_CHARGE_RATE.ChargeMode == RegularFee).\
											first()

						if KeyObj:
							RegularFeeType = int(KeyObj.RegularFeeType)

							ParamCharge = { 'Type':RegularFeeType, 
											'FixAmount':Charge,
											'Percentage':Charge,
											'ChargeRate':Charge,
											'DisburseAmount':DisburseAmount,
											}
					# When Choose Repayment Mode Declining or Flat
					IRRMode = False if RepaymentMode != '4' else True
					# Term = Installment if RepaymentMode == '5' else Term
					try:
						if RepaymentMode in ['1','3','4','6']:
							Schedule 	=	mktschedule.getScheduleDeclining(DisburseAmount,ValueDate,Rate,FrequencyType,
											Frequency,Installment,InterestDayBasis,FwdBwdKey,
											HolidayOption,Currency,BaseDateKey,
											FrequencyP,FrequencyI,RepaymentMode,None,FirstDate,IRRMode,PaymentHoliday,
											NumOfHolidayInstallment,OptWaiveInterest,WeekDay,NumOfWeek,ParamCharge=ParamCharge)
						elif RepaymentMode == '2':
							if AnnuityWithActualNumDay == 'Y':
								Schedule = mktschedule.getScheduleActualNumDay(
																	DisburseAmount,
																	ValueDate,
																	Rate,
																	FrequencyType,
																	Frequency,
																	Installment,
																	InterestDayBasis,
																	int(FwdBwdKey),
																	RepaymentMode,
																	HolidayOption,
																	Currency,
																	BaseDateKey,
																	AnnuityAmount,
																	'KH',
																	FirstDate,
																	AccrCurrentInt=0,
																	ParamCharge=ParamCharge,
																	AccrCurrentCharge=0)
							else:
								Schedule 	= 	mktschedule.getScheduleAnnuity(DisburseAmount,
												ValueDate,Rate,FrequencyType,
												Frequency,Installment,Currency,Locale='KH',ParamCharge=ParamCharge)

						for row in Schedule:
							row['Principal'] 	= str(row['Principal']).replace(',','')
							row['Interest'] 	= str(row['Interest']).replace(',','')
							row['Charge'] 		= str(row['Charge']).replace(',','')
							row['Balance'] 		= str(row['Balance']).replace(',','')
							row['TotalAmount'] 	= str(row['TotalAmount']).replace(',','')
						
						TemplateBaseObj = ''
						if BorrowerTemplate:
							TemplateBase = BorrowerTemplate
						if RepaymentMode == '6':
							TemplateBaseObj = MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID == TemplateBase).first()

						if TemplateBaseObj:
							TemplateBaseDeObj = db.session.query(MKT_TEMPLATE_BASE_DE).filter(MKT_TEMPLATE_BASE_DE.TemplateBaseID == TemplateBase).\
																	order_by(cast(MKT_TEMPLATE_BASE_DE.No,Integer)).all()
							if TemplateBaseDeObj:
								for index, row in enumerate(TemplateBaseDeObj):
									Schedule[index]['Principal'] 	= row.Principal
									Schedule[index]['Interest'] 	= row.Interest
									Schedule[index]['Charge'] 		= row.Charge
									Schedule[index]['TotalAmount'] 	= float(row.Principal) + float(row.Interest) + float(row.Charge)
									Schedule[index]['Balance'] 		= row.Balance

						for item in Schedule:
							if not RepaymentMode == '2':
								item['FormatCollectionDate'] 	= mktdate.toDateShort(item['FormatCollectionDate'],'EN')
							item['CollectionDate'] 				= mktdate.toDateShort(item['CollectionDate'],'EN')
						
						self.kwargs.update({
							'getCurrencyObj': mktmoney.getCurrencyObj(Currency),
							'Schedule' 		: Schedule,
							'HeaderTable' 	: HeaderTable,
							'toMoney' 		: mktmoney.toMoney,
							'Borrower' 		: Borrower,
							'float' 		: float,
							'str' 			: str,
							'Currency' 		: Currency,
							'DisburseAmount': DisburseAmount,
							'ValueDate' 	: ValueDate,
							'Rate' 			: Rate,
							'ChargeType' 	: ChargeType,
							'Charge' 		: Charge,
							'FrequencyType' : FrequencyType,
							'Term' 			: Term,
							'RepaymentMode' : RepaymentMode,
							'Installment' 	: Installment,
							'GroupBorrowerObj' : ListGroupBorrowerObj,
							'Editable' 		: Editable,
							'CustomerObj' 	: CustomerObj,
							'ID' 			: ID,
							'message'		: 'success'
						})
						BodyList = getBody(Schedule=Schedule, toDateShort=mktdate.toDateShort, CurrencyObj=mktmoney.getCurrencyObj(Currency), toMoney=mktmoney.toMoney)
						BodyDict.update({ 'header':[[{'text':getLanguage('Repayment Schedule'),'size':'h3','url':'','type_url':'','icon':'','method':'','children':[]}],], 'data':BodyList })

						self.body 		= BodyDict
						self.form 		= FRM_GROUP_LOAN_SCHEDULE
						self.recordID 	= ID
						self.header 	= 'Repayment Schedule'
						return True
					except:
						pass

			BodyList = getBody(Schedule=Schedule, toDateShort=mktdate.toDateShort, CurrencyObj=mktmoney.getCurrencyObj(Currency), toMoney=mktmoney.toMoney)
			if BodyList:
				BodyDict.update({ 'header':[[{'text':getLanguage('Repayment Schedule'),'size':'h3','url':'','type_url':'','icon':'','method':'','children':[]}],], 'data':BodyList })

			self.body 	= BodyDict	
			self.kwargs.update({
				'HeaderTable'	: HeaderTable,
				'Editable' 		: Editable,
				'ID' 			: ID,
				'Borrower' 		: Borrower,
				'CustomerObj' 	: CustomerObj,
				'GroupBorrowerObj': ListGroupBorrowerObj,
				'message'		: message
			})
			self.form 		= FRM_GROUP_LOAN_SCHEDULE
			self.recordID 	= ID
			self.header 	= 'Repayment Schedule'
			return True
		except:
			raise

def convertValToFloat(val='', default=0):
	try:
		val = float(val)
	except:
		val = default
	return val

def convertValToInt(val='', default=0):
	try:
		val = int(val)
	except:
		val = default
	return val

def getBody(Schedule=None,toDateShort=None,CurrencyObj=None,toMoney=None):
	BodyList = []
	RepaymentScheduleList = []
	RepaymentScheduleDict = {}
	if Schedule:
		for row in Schedule:
			No 				=	{'key':getLanguage('No'),'value':row['InstallmentNo']}
			CollectionDate 	=	{'key':getLanguage('Collection Date'),'value': row['CollectionDate']}
			Principal		=	{'key':getLanguage('Principal'),'value':toMoney(float(row['Principal']), CurrencyObj)}
			Interest 		=	{'key':getLanguage('Interest'),'value':toMoney(float(row['Interest']), CurrencyObj)}
			Charge			=	{'key':'Charge','value':toMoney(float(row['Charge']),CurrencyObj)} 
			TotalAmount		=	{'key':getLanguage('Total Amount'),'value':toMoney(float(row['Principal']) + float(row['Interest']) + float(row['Charge']), CurrencyObj)} 
			Balance 		=	{'key':getLanguage('Balance'),'value':toMoney(float(row['Balance']), CurrencyObj)} 
			NumberOfDay 	=	{'key':'NumberOfDay','value':row['NumberOfDay']}
			Column 			= 	[No,CollectionDate,Principal,Interest,Charge,TotalAmount,Balance,NumberOfDay]
			ImportantField  = 	[CollectionDate,Principal,Interest,TotalAmount]
			RepaymentScheduleList.append({'columns':Column,'urls':[],'important':ImportantField})

		RepaymentScheduleDict.update({
						'icon':'','name':'RepaymentSchedule','title':'Repayment Schedule','type':'Table','data':RepaymentScheduleList,'most_data':True,'expand':False
					})

		BodyList.append(RepaymentScheduleDict)
	return BodyList

registerCRUD(admin, '/GroupLoan', 'GroupLoan', FRM_GROUP_LOAN_CONTRACT, [MKT_GROUP_LOAN_CONTRACT, MKT_GROUP_LOAN_BORROWER, MKT_GROUP_LOAN_CHARGE])
registerCRUD(admin, '/GenerateGroupLoan', 'GenerateGroupLoan', FRM_GENERATE_GROUP_LOAN_CONTRACT, [MKT_GROUP_LOAN_CONTRACT])
registerCRUD(admin, '/GroupLoanSchedule', 'GroupLoanSchedule', FRM_GROUP_LOAN_SCHEDULE, [MKT_REP_SCHEDULE], template="grouploan/viewgrouploanschedule.html", form_type='MainCustom', custom_form_data=CLS_GroupLoanSchedule)