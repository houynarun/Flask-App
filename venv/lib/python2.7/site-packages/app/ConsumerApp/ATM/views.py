from app.mktcore.imports import *
from .forms import *
from app.mktcore.globalfunction import StatusCodes
from app.mktcore.authentication import GetAPIReturnFormat,MesssageStandard

registerCRUD(admin, '/ATM', 'ATM',FRM_ATM, [MKT_ATM])

def GetUrlDict(FilterBy="All"):
	DictUrl = {}
	DictUrl.update({
		"url_filter"		:"/FilterLocation/",
		"filter_params"		:[
								{"label":"All",     "value":"All" ,		"active": FilterBy == "All"},
								{"label":"ATM",     "value":"ATM" , 	"active": FilterBy == "ATM"},
								{"label":"Branch",  "value":"Branch",	"active": FilterBy == "Branch"},
								{"label":"Agent",   "value":"Agent",	"active": FilterBy == "Agent"}
							]
		})
	return DictUrl

@app.route('/Morakot/FilterLocation/', methods=['GET'])
@app.route('/Morakot/API/FilterLocation/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def FilterLocation():
	FilterBy    = request.args.get("filter_by","")
	DataList    = []
	ATMDataList = []
	BranchDataList = []
	Data        = {}
	Messages    = [""]
	ApiStatus   = ""
	if FilterBy:
		if FilterBy=="All":
			AtmObj = MKT_ATM.query.filter(MKT_ATM.Location!=None,MKT_ATM.Location!="").all()
			if AtmObj:
				for atm in AtmObj:
					LocationSplit = atm.Location.split()
					Longitude 	  = float(LocationSplit[1])
					Latitude 	  = float(LocationSplit[0])
					Province 	  = ""
					District 	  = ""
					Commune  	  = ""
					Village  	  = ""
					ProvinceObj = MKT_PROVINCE.query.get(atm.Province)
					if ProvinceObj:
						Province = ProvinceObj.Description
					DistrictObj = MKT_DISTRICT.query.get(atm.District)
					if DistrictObj:
						District = DistrictObj.Description
					CommuneObj = MKT_COMMUNE.query.get(atm.Commune)
					if CommuneObj:
						Commune = CommuneObj.Description
					VillageObj = MKT_VILLAGE.query.get(atm.Village)
					if VillageObj:
						Village = VillageObj.Description
					ApiStatus = StatusCodes.ok()
					ATMDataList.append({
						"id"            : atm.ID,
						"description"   : atm.Description,
						"longitude"	    : Longitude,
						"latitude"  	: Latitude,
						"province"		: Province,
						"district"		: District,
						"commune"		: Commune,
						"village" 		: Village
					})
				Data.update({
					"ATMs" :ATMDataList
				})
			else:
				Data.update({
					"ATMs" :ATMDataList
				})
			BranchObj = MKT_BRANCH.query.filter(MKT_BRANCH.Location!=None,MKT_BRANCH.Location!="").all()
			if BranchObj:
				for branch in BranchObj:
					LocationSplit = branch.Location.split()
					Longitude 	  = float(LocationSplit[1])
					Latitude 	  = float(LocationSplit[0])
					Province 	  = ""
					District 	  = ""
					ProvinceObj = MKT_PROVINCE.query.get(branch.Province)
					if ProvinceObj:
						Province = ProvinceObj.Description
					DistrictObj = MKT_DISTRICT.query.get(branch.District)
					if DistrictObj:
						District = DistrictObj.Description
					ApiStatus = StatusCodes.ok()
					BranchDataList.append({
						"id"            	: branch.ID,
						"description"   	: branch.Description,
						"local_description" : branch.LocalDescription,
						"longitude"	    	: Longitude,
						"latitude"  		: Latitude,
						"province"			: Province,
						"district"			: District,
						"register_date" 	: branch.RegisteredDate
					})
				Data.update({
					"Branchs" :BranchDataList
				})
			else:
				Data.update({
					"Branchs" :BranchDataList
				})
			Data.update(GetUrlDict(FilterBy))
			# Data['filter_params'].update({['active'] :True})
			if not ApiStatus:
				ApiStatus = StatusCodes.not_found()
				Messages  = ["Not found any location."] 
				Data.update({
					"Branchs" :BranchDataList,
					"ATMs" 	 :ATMDataList
				})
				Data.update(GetUrlDict(FilterBy))
		elif FilterBy =="ATM":
			AtmObj = MKT_ATM.query.filter(MKT_ATM.Location!=None,MKT_ATM.Location!="").all()
			if AtmObj:
				for atm in AtmObj:
					LocationSplit = atm.Location.split()
					Longitude 	  = float(LocationSplit[1])
					Latitude 	  = float(LocationSplit[0])
					Province 	  = ""
					District 	  = ""
					Commune  	  = ""
					Village  	  = ""
					ProvinceObj = MKT_PROVINCE.query.get(atm.Province)
					if ProvinceObj:
						Province = ProvinceObj.Description
					DistrictObj = MKT_DISTRICT.query.get(atm.District)
					if DistrictObj:
						District = DistrictObj.Description
					CommuneObj = MKT_COMMUNE.query.get(atm.Commune)
					if CommuneObj:
						Commune = CommuneObj.Description
					VillageObj = MKT_VILLAGE.query.get(atm.Village)
					if VillageObj:
						Village = VillageObj.Description
					ApiStatus = StatusCodes.ok()
					DataList.append({
						"id"            : atm.ID,
						"description"   : atm.Description,
						"longitude"	    : Longitude,
						"latitude"  	: Latitude,
						"province"		: Province,
						"district"		: District,
						"commune"		: Commune,
						"village" 		: Village
					})
				Data.update({
					"ATMs" :DataList
				})
				Data.update(GetUrlDict(FilterBy))
			else:
				ApiStatus = StatusCodes.not_found()
				Messages  = ["No ATM location found."]
				Data.update({
					"ATMs" :DataList
				})
				Data.update(GetUrlDict(FilterBy))
		elif FilterBy =="Branch":
			BranchObj = MKT_BRANCH.query.filter(MKT_BRANCH.Location!=None,MKT_BRANCH.Location !="").all()
			if BranchObj:
				for branch in BranchObj:
					LocationSplit = branch.Location.split()
					Longitude 	  = float(LocationSplit[1])
					Latitude 	  = float(LocationSplit[0])
					Province 	  = ""
					District 	  = ""
					ProvinceObj = MKT_PROVINCE.query.get(branch.Province)
					if ProvinceObj:
						Province = ProvinceObj.Description
					DistrictObj = MKT_DISTRICT.query.get(branch.District)
					if DistrictObj:
						District = DistrictObj.Description
					ApiStatus = StatusCodes.ok()
					DataList.append({
						"id"            	: branch.ID,
						"description"   	: branch.Description,
						"local_description" : branch.LocalDescription,
						"longitude"	    	: Longitude,
						"latitude"  		: Latitude,
						"province"			: Province,
						"district"			: District,
						"register_date" 	: branch.RegisteredDate
					})
				Data.update({
					"Branchs" :DataList
				})
				Data.update(GetUrlDict(FilterBy))
			else:
				ApiStatus = StatusCodes.not_found()
				Messages  = ["No branch location found."]
				Data.update({
					"Branchs" :DataList
				})
				Data.update(GetUrlDict(FilterBy))
		elif FilterBy =="Agent":
			pass
	return GetAPIReturnFormat(Header="Filter Location",Data=Data,RecordID="",Status=ApiStatus,Type="Map",Message=Messages) 