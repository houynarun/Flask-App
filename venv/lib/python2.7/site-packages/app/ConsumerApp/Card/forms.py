from app.mktcore.wtfimports import *
from app.Customer.models 	import MKT_CUSTOMER
from .models 				import *
from app.Account.models     import *

def getRecord():
	try:
		result = MKT_CARD_INAU.query.filter_by(ID=g.formID).all()        
		if not result:
			result = MKT_CARD.query.filter_by(ID=g.formID).all()
			Dict = {}
		if result:
			for row in result:
				Dict = row.__dict__
				return Dict
		else:
			return Dict
	except:
		raise
def loadAccountLink():
	AccountLink = ""
	if request.method =="POST":
		AccountLink = request.form['AccountLink']
	else:
		if len(getRecord())>0:
			Record = getRecord()
			AccountLink = MKT_ACCOUNT.query.filter_by(ID=Record['AccountLink'])
			if AccountLink is None:
				AccountLink = MKT_ACCOUNT_INAU.query.filter_by(ID=Record['AccountLink'])
			return AccountLink
		else:
			AccountLink = MKT_ACCOUNT.query.filter_by(ID='')
			return AccountLink
	AccountLink = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.ID==str(AccountLink))
	return AccountLink

class FRM_CARD(exform):
	CustomerID 		= 	RemoteTextField(requiredlabel(getLanguage("Customer"), "*"), [validators.Required()])
	CardNo       	= 	TextField(requiredlabel(("Card Number"), "*"), [validators.Required()])
	Cvv       		= 	TextField(requiredlabel(("CVV"), "*"), [validators.Required()])
	Description 	= 	TextField(requiredlabel(getLanguage("Description"), "*"), [validators.Required()])
	CardType 		=	SelectField(("Card Type"),
							 choices=[('1', 'Master Card'),('2', 'Visa Card'),('3','Union Card')],
							 coerce=str)
	AccountLink 	= 	QuerySelectField('Account Link',
							query_factory=loadAccountLink,
							get_label=lambda a: a.ID + " - " + a.AccName,
							allow_blank=True,
							blank_text=u'--None--')
	Background		= 	TextField(requiredlabel(("Background"), "*"), [validators.Required()])
	Logo			= 	TextField(requiredlabel(("Logo"), "*"), [validators.Required()])
	Active          =   SelectField(("Active"),
							 choices=[('Y', 'Yes'),('N', 'No')],
							 coerce=str)
	ExpiryDate      =   DateField(requiredlabel(("Expiry Date"), "*"),
							format='%Y-%m-%d')

	@staticmethod
	def setWidth():

		Fields = [('Active', len2),
				  ('CardType', len2)]

		return Fields

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay 	= "AccountLink"
		varname 		= "CustomerID:$('#CustomerID').val()"
		fun 			= ["CustomerID", varname, fielddisplay, "/Morakot/GetAccountsByCustomer", "click"]
		hotfield.append(fun)

		return hotfield
