from app.mktcore.imports import *
from .forms import *
from app.mktcore.globalfunction import StatusCodes
from app.mktcore.authentication import GetAPIReturnFormat,MesssageStandard
from app.tools.mktmoney 		import *
from app.ConsumerApp.BillProvider.models import *

registerCRUD(admin, '/Card', 'Card',FRM_CARD, [MKT_CARD])

@app.route('/Morakot/GetAccountsByCustomer/', methods=['GET'])
def GetAccountsByCustomer():
	AccountDic = {}
	CustomerID = request.args.get('CustomerID') if 'CustomerID' in request.args else ''
	AccountObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList == CustomerID).all()
	if AccountObj:
		for acc in AccountObj:
			AccountDic[acc.ID]= acc.ID+"-"+acc.AccName

	return jsonify(results=AccountDic)

@app.route('/Morakot/BalanceEnquiry/', methods=['GET'])
@app.route('/Morakot/API/BalanceEnquiry/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def GetAccounts():
	AccType 	= request.args.get('Type')
	CustomerID 	= request.args.get('CustomerID')
	Status 		= StatusCodes()
	AccountDict = {}
	AccountList = []
	AccountObj  = None
	Balance 	= 0
	AccountNo 	= ""
	CardNoShow	= ""
	CardNoHide	= ""
	Description	= ""
	AccountType = ""
	ExpiryDate  = ""
	Active 		= ""
	Cvv 		= ""
	AccountName = ""
	AccountCurrency = "USD"
	ProviderID 	= ""
	ProviderDes = ""
	ProviderLocalDes = "" 
	ProviderType  	 = ""
	ProviderLogo 	 = ""
	ProviderActive 	 = ""
	Background		 = ""
	CardLogo 		 = ""
	CredentialType 	 = ""
	CredentialID 	 = ""
	# ? Normal, Card
	if AccType and AccType=="Normal":
		AccountObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList == CustomerID)
	elif AccType and AccType =="Card":
		AccountObj = MKT_CARD.query.filter(MKT_CARD.CustomerID == CustomerID)
	if AccountObj:
		for acc in AccountObj:
			if AccType=="Normal":
				AccountNo 	= acc.ID
				Description = acc.AccName
				AccountName = acc.AccName
				Balance 	= Decimal(acc.AvailableBal)
				ExpiryDate  = acc.ClosingDate
				AccountCurrency = acc.Currency
				if acc.Background:
					Background	= acc.Background
				if acc.Blocked =="N":
					Active = "Y"
				else:
					Active = "N"
				if acc.AccProduct == str(101):
					AccountType = "Drawdown Account"
				elif acc.AccProduct== str(102):
					AccountType = "Saving Account" 
				BillProviderObj = MKT_BILL_PROVIDER.query.filter(MKT_BILL_PROVIDER.CustomerID==acc.CustomerList).first()
				if BillProviderObj:
					ProviderID  	= BillProviderObj.CustomerID
					ProviderDes		= BillProviderObj.Description
					ProviderLocalDes= BillProviderObj.LocalDescription
					ProviderType 	= BillProviderObj.ProviderType
					ProviderLogo	= BillProviderObj.Logo 
					ProviderActive 	= BillProviderObj.Active
					if BillProviderObj.CredentialID:
						CredentialID 	= BillProviderObj.CredentialID
					if BillProviderObj.CredentialType:
						CredentialType  = BillProviderObj.CredentialType
			elif AccType=="Card":
				AccountNo 	= acc.AccountLink
				CardNoShow 	= acc.CardNo
				CardSplit 	= CardNoShow
				CardNoHide 	= CardSplit[:5]+" **** **** "+CardSplit[-2:]
				Description = acc.Description
				CardLogo 	= acc.Logo
				if acc.Background:
					Background 	= acc.Background
				if acc.CardType =="1":
					AccountType = "Master"
				elif acc.CardType =="2":
					AccountType = "Visa"
				elif acc.CardType =="3":
					AccountType = "Union" 
				ExpiryDate  = acc.ExpiryDate
				Active 		= acc.Active
				Cvv 		= acc.Cvv
				AccObj = MKT_ACCOUNT.query.get(acc.AccountLink)
				if AccObj:
					Balance = Decimal(AccObj.AvailableBal)
					AccountCurrency = AccObj.Currency
					AccountName 	= AccObj.AccName
			Host = request.url.split('/Morakot')[0]
			url  = "%s/Morakot/FundTransferHotField"%(Host)
			querystring = {"Account":AccountNo,"Currency":AccountCurrency}
			headers = {
				'authorizationkey': getToken(),
				'content-type': "application/json",
				'accept': "application/json"
				}
			response = requests.request("GET", url, headers=headers, params=querystring)
			data = response.json()
			AccountList.append({
								"account_no"	:AccountNo,
								"card_no_show"	:CardNoShow,
								"card_no_hide"	:CardNoHide,
								"description" 	:Description,
								"account_name"	:AccountName,
								"balance"		:mktmoney.toMoney(float(Balance), mktmoney.getCurrencyObj(AccountCurrency), 2),
								"type"			:AccountType,
								"cvv"			:Cvv,
								"expiry_date"	:ExpiryDate,
								"active"		:Active,
								"category"		:data.get('Category'),
								"currency"		:AccountCurrency,
								"console_key"	:data.get('ConsoleKey'),
								"category_desc"	:data.get('CategoryDesc'),
								"exchange_rate"	:data.get('ExchangeRate'),
								"provider_id"	:ProviderID,
								"provider_des"	:ProviderDes,
								"provider_local_des":ProviderLocalDes,
								"provider_type"	:ProviderType,
								"provider_logo" :ProviderLogo,
								"credential_type":CredentialType,
								"credential_id"	: CredentialID,
								"provider_active":ProviderActive,
								"background"	:Background,
								"logo"			:CardLogo
								})
		AccountDict.update({"Accounts"	:AccountList})
		AccountDict.update(GetUrlDict())
		return GetAPIReturnFormat(Header="Account Enquiry",Data=AccountDict,RecordID="",Status=Status.ok(),Type="Custom")
	return MesssageStandard(Messages=['No account has been found...'],Statuscode=Status.not_found())

@app.route('/Morakot/CheckValidAccount/', methods=['GET'])
@app.route('/Morakot/API/CheckValidAccount/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CheckValidAccount():
	Account = request.args.get('AccountNo')
	Card 	= request.args.get('CardNo')
	Status 		= StatusCodes()
	AccountDict = {}
	AccountList = []
	AccountObj  = None
	Balance 	= 0
	AccountNo 	= ""
	CardNoShow	= ""
	CardNoHide	= ""
	Description	= ""
	AccountType = ""
	ExpiryDate  = ""
	Active 		= ""
	Cvv 		= ""
	AccountObj  = None
	AccountCurrency = "USD"
	AccountName = ""
	ProviderID 	= ""
	ProviderDes = ""
	ProviderLocalDes = "" 
	ProviderType  	 = ""
	ProviderLogo 	 = ""
	ProviderActive 	 = ""
	Background 		 = ""
	CardLogo 		 = ""
	CredentialType 	 = ""
	CredentialID 	 = ""
	# Normal, Card
	if Account and not Card:
		AccountObj = MKT_ACCOUNT.query.get(Account)
	elif Card and not Account:
		AccountObj = MKT_CARD.query.filter(MKT_CARD.CardNo == Card).first()
	if not AccountObj:
		return MesssageStandard(Messages=['Invalid account number...'],Statuscode=Status.not_found())
	else:
		if Account:
			AccountNo 	= AccountObj.ID
			Description = AccountObj.AccName
			AccountName = AccountObj.AccName
			Balance 	= Decimal(AccountObj.AvailableBal)
			ExpiryDate  = AccountObj.ClosingDate
			AccountCurrency = AccountObj.Currency
			if AccountObj.Background:
				Background 	= AccountObj.Background
			if AccountObj.Blocked =="N":
				Active = "Y"
			else:
				Active = "N"
			if AccountObj.AccProduct == str(101):
				AccountType = "Drawdown Account"
			elif AccountObj.AccProduct== str(102):
				AccountType = "Saving Account" 
			BillProviderObj = MKT_BILL_PROVIDER.query.filter(MKT_BILL_PROVIDER.CustomerID==AccountObj.CustomerList).first()
			if BillProviderObj:
				ProviderID  	= BillProviderObj.CustomerID
				ProviderDes		= BillProviderObj.Description
				ProviderLocalDes= BillProviderObj.LocalDescription
				ProviderType 	= BillProviderObj.ProviderType
				ProviderLogo	= BillProviderObj.Logo 
				ProviderActive 	= BillProviderObj.Active
				if BillProviderObj.CredentialID:
					CredentialID 	= BillProviderObj.CredentialID
				if BillProviderObj.CredentialType:
					CredentialType  = BillProviderObj.CredentialType
		elif Card:
			AccountNo 	= AccountObj.AccountLink
			CardNoShow 	= AccountObj.CardNo
			CardSplit 	= CardNoShow
			CardNoHide 	= CardSplit[:5]+" **** **** "+CardSplit[-2:]
			Description = AccountObj.Description
			CardLogo	= AccountObj.Logo
			if AccountObj.Background:
				Background 	= AccountObj.Background
			if AccountObj.CardType =="1":
				AccountType = "Master"
			elif AccountObj.CardType =="2":
				AccountType = "Visa"
			elif AccountObj.CardType =="3":
				AccountType = "Union" 
			ExpiryDate  = AccountObj.ExpiryDate
			Active 		= AccountObj.Active
			Cvv 		= AccountObj.Cvv
			AccObj = MKT_ACCOUNT.query.get(AccountObj.AccountLink)
			if AccObj:
				Balance 		= Decimal(AccObj.AvailableBal)
				AccountCurrency = AccObj.Currency
				AccountName 	= AccObj.AccName
		Host = request.url.split('/Morakot')[0]
		url  = "%s/Morakot/FundTransferHotField"%(Host)
		querystring = {"Account":AccountNo,"Currency":AccountCurrency}
		headers = {
			'authorizationkey': getToken(),
			'content-type': "application/json",
			'accept': "application/json"
			}
		response = requests.request("GET", url, headers=headers, params=querystring)
		data = response.json()
		AccountList.append({
							"account_no"	:AccountNo,
							"card_no_show"	:CardNoShow,
							"card_no_hide"	:CardNoHide,
							"description" 	:Description,
							"account_name"	:AccountName,
							"balance"		:mktmoney.toMoney(float(Balance), mktmoney.getCurrencyObj(AccountCurrency), 2),
							"type"			:AccountType,
							"cvv"			:Cvv,
							"expiry_date"	:ExpiryDate,
							"active"		:Active,
							"category"		:data.get('Category'),
							"currency"		:AccountCurrency,
							"console_key"	:data.get('ConsoleKey'),
							"category_desc"	:data.get('CategoryDesc'),
							"exchange_rate"	:data.get('ExchangeRate'),
							"provider_id"	:ProviderID,
							"provider_des"	:ProviderDes,
							"provider_local_des":ProviderLocalDes,
							"provider_type"	:ProviderType,
							"provider_logo" :ProviderLogo,
							"credential_type":CredentialType,
							"credential_id"	: CredentialID,
							"provider_active":ProviderActive,
							"background":Background,
							"logo"		:CardLogo
							})
		AccountDict.update({"Accounts"	:AccountList})
		AccountDict.update(GetUrlDict())
		return GetAPIReturnFormat(Header="Account Enquiry",Data=AccountDict,RecordID="",Status=Status.ok(),Type="Custom")
	return MesssageStandard(Messages=['No account found...'],Statuscode=Status.not_found())
def GetUrlDict():
	DictUrl = {}
	DictUrl.update({
		"url_balance_enquiry"			:"/Morakot/API/BalanceEnquiry/",
		"url_check_valid_acc_by_card"	:"/Morakot/API/CheckValidAccount/?CardNo=",
		"url_check_valid_acc_by_acc"	:"/Morakot/API/CheckValidAccount/?AccountNo="
		})
	return DictUrl
