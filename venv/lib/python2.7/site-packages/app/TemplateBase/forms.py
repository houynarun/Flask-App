from app.mktcore.wtfimports 	import *
from app.TemplateBase.models 	import *
from sqlalchemy 				import func
from app.Currency.models 		import MKT_CURRENCY
from flask 						import g, flash,Markup

import csv

import app.tools.mkttool 		as mkttool
import app.Upload.exportimport  as upload
import app.tools.mktaudit 		as mktaudit
import app.tools.mktdate 		as mktdate
import app.tools.user 			as mktuser
import app.tools.mktmoney 		as mktmoney
import app.tools.mktdb 			as mktdb

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

class FRM_TEMPLATE_BASE(exform):
	Description = TextField(requiredlabel("Description",'*'), validators=[validators.Required()])
	Currency 	= QuerySelectField((getLanguage("Currency")),
					query_factory=loadCurrency,
					get_label=u'ID',
					default=lambda:loadCurrency('USD'),
					validators=[validators.Required()]
					)
	DisburseAmount = TextField(requiredlabel("Disburse Amount","*"), validators=[validators.Required()])
	Installment = TextField(requiredlabel("Installment","*"), validators=[validators.Required()])
	FileUpload 	= FileField(requiredlabel("Schedule Upload",'*'))
	FileName 	= TextField(requiredlabel("File Name",'*'))
	Iframe		= MKTIframe("View Schedule",dicIframe={'width':'100%','height':'1000','frameborder':'0'}, description='1-View Schedule')
	Iframe1		= MKTIframe("Samle",dicIframe={'width':'100%','height':'1000','frameborder':'0'}, description='2-Sample')

	def validate_FileUpload(form,field):
		if request.method == 'POST':
			ID 			= request.form['ID']
			FileCSV 	= request.files['FileUpload']
			isCSV = mkttool.getAllowedFile(FileCSV.filename)
			if not FileCSV:
				raise ValidationError("This field is required.")
			if not isCSV:
				raise ValidationError('Allow file csv only.')

	def validate_DisburseAmount(form,field):
		if request.method == 'POST':
			DisburseAmount 			= request.form['DisburseAmount']
			if float(DisburseAmount) <= 0 :
				raise ValidationError("This field is bigger than zero.")

			try:
				number = float(DisburseAmount)
			except Exception, e:
				raise ValidationError("This field is numeric only.")

	def validate_Installment(form,field):
		if request.method == 'POST':
			Installment 			= request.form['Installment']
			try:
				number = int(Installment)
			except Exception, e:
				raise ValidationError("This field is numeric only.")

	@staticmethod
	def moneyField():
		return [["DisburseAmount", "Currency"]]

	@staticmethod
	def urlParam():
		ID = request.form['ID'] if request.method == 'POST' else g.formID
		dicParam = [{"IframeName":"Iframe", "iframeUrl":"/Morakot/ViewTemplateBaseSchedule", 'Resource' : 'Status'}]
		dicParam += [{"IframeName":"Iframe1", "iframeUrl":"/Morakot/ViewSampleTemplateBaseSchedule", 'Resource' : 'Status'}]
		return dicParam

	@staticmethod
	def hotField():

		hotfield 		= []

		fielddisplay 	= "$('#FileName').val(data.FileName);"
		varname 		= "FileUpload:$('#FileUpload').val()"
		fun 			= ["FileUpload", varname, fielddisplay, "/Morakot/FileName", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setVisible():
		ListField = [("FileName")]
		return ListField

	@staticmethod
	def beforeInsert():
		if request.method == 'POST':
			ID 				= request.form['ID']
			Currency 		= request.form['Currency']
			FileCSV 		= request.files['FileUpload']

			DictCSV 		= mkttool.getDictCSV(FileCSV)
			CurrencyObj 	= MKT_CURRENCY.query.get(Currency)

			if DictCSV:
				try:
					AuthLevel 	= g.getNAuthorize
					if AuthLevel == 0 :
						TBDObj = MKT_TEMPLATE_BASE_DE.query.filter(MKT_TEMPLATE_BASE_DE.TemplateBaseID == ID).first()
						if TBDObj:
							mktaudit.deleteRecord(MKT_TEMPLATE_BASE_DE,[MKT_TEMPLATE_BASE_DE.TemplateBaseID==ID])

					for row in DictCSV:

						row['Principal'] = mktmoney.toMoney(float(row['Principal'].replace(",","")), CurrencyObj).replace(",","")
						row['Interest'] = mktmoney.toMoney(float(row['Interest'].replace(",","")), CurrencyObj).replace(",","")
						row['Charge'] = mktmoney.toMoney(float(row['Charge'].replace(",","")), CurrencyObj).replace(",","")
						row['Balance'] = mktmoney.toMoney(float(row['Balance'].replace(",","")), CurrencyObj).replace(",","")
						row.update({'TemplateBaseID':ID, 'ID':ID + row['No']})

						AuthLevel 	= g.getNAuthorize
						if AuthLevel == 0 :
							mktdb.insertTable(MKT_TEMPLATE_BASE_DE,row)
						else:
							mktdb.insertTable(MKT_TEMPLATE_BASE_DE_INAU,row)
				except Exception ,e:
					Msg = e + 'Please checkc your upload file'
					flash(Markup(Msg))
					return False

		return True

	@staticmethod
	def beforeAuthorize():
		ID 				= 	g.formID
		TemplateBaseObj = MKT_TEMPLATE_BASE_DE_INAU.query.filter(MKT_TEMPLATE_BASE_DE_INAU.TemplateBaseID == ID).all()

		if TemplateBaseObj:

			Delete = MKT_TEMPLATE_BASE_DE.query.filter(MKT_TEMPLATE_BASE_DE.TemplateBaseID == ID).first()
			if Delete:
				mktaudit.deleteRecord(MKT_TEMPLATE_BASE_DE,[MKT_TEMPLATE_BASE_DE.TemplateBaseID==ID])

			for row in TemplateBaseObj:
				Curr 			= '1'
				Inputter 		= row.Inputter
				Createdon 		= row.Createdon
				Authorizer 		= mktuser.getUser().ID
				Authorizeon 	= mktdate.getDateTimeNow()
				FilterField 	= ''

				mktaudit.moveINAUtoAUTH(MKT_TEMPLATE_BASE_DE,MKT_TEMPLATE_BASE_DE_INAU,row.ID,Inputter,Createdon,Authorizer,Authorizeon, FilterField,Curr)
			mktaudit.deleteRecord(MKT_TEMPLATE_BASE_DE_INAU,[MKT_TEMPLATE_BASE_DE_INAU.TemplateBaseID==ID])

		return True

	@staticmethod
	def IsAcceptOverride():

		Override 		= False
		Msg 			= ''
		TotalBalance 	= 0

		# FileCSV 		= request.files['FileUpload']
		# Installment 	= request.form['Installment']
		# Disbursed 		= request.form['DisburseAmount']
		# Currency 		= request.form['Currency']

		# CurrencyObj 	= MKT_CURRENCY.query.get(Currency)
		# DictCSV 		= mkttool.getDictCSV(FileCSV)

		# if not int(Installment) == len(DictCSV):
		# 	Override 	= True
		# 	Msg 		+= '* <b>Installment %s</b> is not equal Installment in selected schedule'%Installment

		# for row in DictCSV:
		# 	TotalBalance = TotalBalance + float(row['Principal'])

		# if not float(TotalBalance) == float(Disbursed):
		# 	Override 	= True
		# 	Msg 		+= '<br/> * <b>Disbursed %s</b> is not equal total Balance in selected schedule'%mktmoney.toMoney(float(Disbursed), CurrencyObj)

		return Override, Msg