from app.mktcore.wtfimports 		import *
from app.VB.models 					import *
from app.Officer.models 			import *
from .models 						import *
from .forms 						import *
from app.tools.user 				import *

import app.tools.mktdb 				as mktdb
import app.tools.mktsetting 		as mktsetting

ExtendClass 		= mktsetting.ExtendModule()
GROUPLOAN_LINK 		= ExtendClass.getUrlExtend(Module="ChangeOfficer")

def getRecord():
	try:
		result = MKT_CHANGE_OFFICER_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_CHANGE_OFFICER.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict.update({'VBID'					:str(row.VBID)})
			return Dict
		else:
			return Dict
	except:
		raise

def loadGroupID():
	if request.method == 'POST':
		VBID = request.form["VBID"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_GROUP.query.filter_by(VBID=Record['VBID'])
		else:
			return MKT_GROUP.query.filter_by(VBID='').all()
	return MKT_GROUP.query.filter_by(VBID=VBID)

def loadOfficer():
	return MKT_OFFICER.query.filter_by(Branch=getCurrentBranch()).all()

class FRM_CHANGE_GROUP_LC_OFFICER(exform):

	VBID 			= 	RemoteTextField(requiredlabel("Centre/Village Bank", "*"),
						validators=[validators.Required()])
	GroupID 		= 	QuerySelectField('Group',
							query_factory=loadGroupID,
							get_label=lambda a: a.ID + " - " + a.GroupName,
							allow_blank=True,
							blank_text=u'--None--')
	OldOfficerID 	= QuerySelectField('Old Officer',
							query_factory=loadOfficer,
							get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
							allow_blank=True,
							blank_text=u'--None--')
	OfficerID 		= 	RemoteTextField(requiredlabel("New Officer", "*"),
								dicRemote={'url':'/Morakot/SearchOfficer'},
								validators=[validators.Required()]
						)

	@staticmethod
	def setDisable():

		ListField = [("OldOfficerID")]

		return ListField

	@staticmethod
	def setVisible():

		ListField = [("GroupID")]

		return ListField
	@staticmethod
	def hotField():
		hotfield = []
		fielddisplay 	= "$('#OldOfficerID').select2('data', {'id':data.OfficerID,'text':data.OfficerName})"
		varname 		= "VBID:$('#VBID').val()"
		fun 			= ["VBID", varname, fielddisplay, "/Morakot/getOfficerbyVB", "change"]
		hotfield.append(fun)


		return hotfield
	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay="GroupID"
		varname="VBID:$('#VBID').val()" 
		fun=["VBID", varname ,fielddisplay, "/Morakot/GroupID", "click"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeInsert():
		try:
			ID 			= request.form.get('ID')
			VBID 		= request.form.get('VBID')
			GroupID 	= request.form.get('GroupID')
			OfficerID 	= request.form.get('OfficerID')

			Conditions 	= []
			if not GroupID == '__None':
				Conditions.append(MKT_LOAN_CONTRACT.Group == GroupID)

			LCObj = db.session.query(MKT_LOAN_CONTRACT.ID).\
								filter(MKT_LOAN_CONTRACT.ContractVB == VBID).\
								filter(*Conditions).all()
			AuthLevel 	= g.getNAuthorize
			if AuthLevel == 0 :
				if LCObj:
					for item in LCObj:
						CGCObj = {
							'ID' 				: ID,
							'LoanContractID' 	: item.ID,
							'OfficerID' 		: OfficerID
							}
						mktdb.insertTable(MKT_CHANGE_OFFICER_DE,CGCObj)
			else:
				for item in LCObj:
						CGCObj = {
							'ID' 				: ID,
							'LoanContractID' 	: item.ID,
							'OfficerID' 		: OfficerID
							}
						mktdb.insertTable(MKT_CHANGE_OFFICER_DE_INAU,CGCObj)
			return True
		except Exception as e:
			db.session.rollback()
			return False

	@staticmethod
	def redirectAfterInsert():
		ID = request.form['ID']
		return "/Morakot/%s/Edit/%s"%(GROUPLOAN_LINK,ID)
