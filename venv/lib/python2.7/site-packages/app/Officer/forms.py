from app.mktcore.wtfimports import *
from .models import *
import time

import collections
from flask import flash

from app.User.models 			import *
from app.Position.models 		import *
from app.CashAccount.models 	import *
from app.LoanContract.models	import *
from app.Account.models 		import MKT_ACCOUNT

import app.tools.user as mktuser
import app.tools.mktofficer as mktofficer
import app.tools.mktdate as mktdate

#function 
def loadPositon():  #define function 
	return MKT_POSITION.query.filter(MKT_POSITION.PositionType.in_(['I','B'])) # tablename.query

def loadReportTo(): #define function 
	return MKT_OFFICER.query.filter(MKT_OFFICER.Branch==mktuser.getCurrentBranch())# tablename.query

def loadUser():
	CurrentBranch = mktuser.getCurrentBranch()
	CashObj 	= MKT_CASH_ACCOUNT.query.filter(MKT_CASH_ACCOUNT.Type=="W").\
										filter(MKT_CASH_ACCOUNT.CashBranch==CurrentBranch)
	CashID=[]
	for row in CashObj:
		CashID.append(row.ID)

	QueryObj = MKT_USER.query.filter(MKT_USER.CashAccount.in_(CashID))
	return QueryObj

#class OFFICER form
class FRM_OFFICER(exform):

	FirstName 	=	TextField(requiredlabel("First Name","*"),[validators.Required()])
	LastName 	=	TextField(requiredlabel("Last Name","*"),[validators.Required()])
	LocalFirstName =	TextField("Local First Name")
	LocalLastName  = 	TextField("Local Last Name")
	Gender 		= 	SelectField(requiredlabel('Gender',"*"),
						choices=[('Male','Male'),('Female','Female'),('Other','Other')],
						coerce=str,
						validators=[validators.Required()]
					)

	Phone 		=	TextField(requiredlabel("Phone Number 1", "*"), [validators.Required()])
	Phone2 		=	TextField("Phone Number 2")
	StartDate 	= 	DateField(requiredlabel("Start Date", "*"), [validators.Required()],default=mktdate.getDateISO)
	Position 	=	QuerySelectField(requiredlabel('Position','*'),query_factory=loadPositon, 
						get_label='Description',#Field Name
						allow_blank=True,
						blank_text='--None--',
						validators=[validators.Required()]
					)

	ReportTo 	=	QuerySelectField('Report to',query_factory=loadReportTo, 
						get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,#Field Name
						allow_blank=True,
						blank_text='--None--'
					)

	Active 		= 	SelectField(requiredlabel('Active', "*"),
						choices=[('Y', 'Yes'),('N', 'No')],
						coerce=str,
						validators=[validators.Required()]
					)

	UserID 		= 	QuerySelectField("User",
						query_factory=loadUser,
						get_label='DisplayName',
						allow_blank=True,
						blank_text='--None--'
					)

	def validate_UserID(form, field):

		ID 		= request.form['ID']
		UserID 	= request.form['UserID']
		checkID = MKT_OFFICER.query.get(ID)

		if not checkID:
			user 	= 	MKT_OFFICER.query.\
						filter(MKT_OFFICER.UserID == UserID).\
						first()
		else:
			user 	= 	MKT_OFFICER.query.\
						filter(MKT_OFFICER.UserID == UserID).\
						filter(MKT_OFFICER.UserID != checkID.UserID).\
						all()

		if user:
			raise ValidationError("The user is already exists.")

	@staticmethod
	def setWidth():
		control_list = [("Gender", len1),
						("StartDate", len3),
						("Active", len1)]
		return control_list

	@staticmethod
	def redirectAfterInsert():

		try:

			ID 				= 	request.form['ID']
			UserID 			=	request.form['UserID']
			LastName 		=	request.form['LastName']
			FirstName 		=	request.form['FirstName']
			AccName 		=	LastName + " " + FirstName

			UserObj 		=	MKT_USER.query.get(UserID)
			if UserObj:

				CashID 		=	UserObj.CashAccount
				CashAccObj 	=	MKT_CASH_ACCOUNT.query.get(CashID)

				if CashAccObj:

					ObjAcc 	=	CashAccObj.Account
					AccList =	ObjAcc.split()

					AccObj 	=	MKT_ACCOUNT.query.\
								filter(MKT_ACCOUNT.ID.in_(AccList)).\
								all()

					if AccObj:

						for item in AccObj:

							item.AccName 	=	AccName

							db.session.add(item)

						db.session.commit()
		except:
			db.session.rollback()

		return None

@app.route('/Morakot/getOldOfficerID',methods=['GET'])
def getOldOfficerID():
	OldOfficerName = ""
	OldOfficerID = ""
	LoanContractID = request.args.get('LoanContractID')
	result=MKT_LOAN_CONTRACT.query.get(LoanContractID)
	if result :
		OfficerObj = MKT_OFFICER.query.get(result.ContractOfficerID)
		if OfficerObj:
			OldOfficerName 	= result.ContractOfficerID+' - '+OfficerObj.LastName+' '+OfficerObj.FirstName
			OldOfficerID 	= result.ContractOfficerID

	return jsonify(OldOfficerID=OldOfficerID,OldOfficerName=OldOfficerName)  



def loadOfficer():
	return MKT_OFFICER.query.filter(MKT_OFFICER.Branch==mktuser.getCurrentBranch())

class FRM_CHANGE_OFFICER(exform):
	Description			= TextAreaField('Description')
	LoanContractID		= TextField(requiredlabel(getLanguage("Loan Contract"), "*"), 
							[validators.Required()], description="1-DETAILS")
	
	OfficerID			= QuerySelectField("New Officer",
							query_factory=loadOfficer,
							get_label=lambda a: a.ID + ' - ' + a.LastName + ' ' + a.FirstName,
							allow_blank=True,
							blank_text='--None--', description="1-DETAILS"
						)

	
	@staticmethod
	def isMultiValue():
		controls_list=["1-DETAILS"]
		return controls_list

	@staticmethod
	def setDisable():
		return [("OldOfficerID")]

	@staticmethod
	def beforeInsert():
		AuthLevel 	= g.getNAuthorize
		if AuthLevel == 0 :
			# LoanContractID = request.form['LoanContractID']
			# OfficerID 	   = request.form['OfficerID']
			
			controls_list 	= request.form
			ID 				= request.form.get('ID')
			ListLoanContract	= [item for item in controls_list if "LoanContractID" in item]
			ListOfficerID 		= [item for item in controls_list if "OfficerID" in item]
			ListLoanContract.sort()
			ListOfficerID.sort()

			LoanContractIDValue = []
			OfficerID 			= ''
			OfficerObj 	= MKT_OFFICER.query
			LoanObj 	= MKT_LOAN_CONTRACT.query

			for nub in range(0,len(ListLoanContract)):
				LoanContractID 	= request.form[ListLoanContract[nub]]
				OfficerID 	 	= request.form[ListOfficerID[nub]]

				FilterLoanObj = LoanObj.get(LoanContractID)
				if FilterLoanObj:
					LoanContractBranch = FilterLoanObj.Branch
				else:
					flash(msg_error+'%s Loan contract not found!'%LoanContractID)
					return False

				FilterOfficerObj = OfficerObj.get(OfficerID)
				if FilterOfficerObj:
					OfficerBranch = FilterOfficerObj.Branch
				else:
					flash(msg_error+'%s Officer ID not found!'%OfficerID)
					return False

				if LoanContractBranch != OfficerBranch:
					flash(msg_error+'Please try again. You got error because you try to assign Officer to loan contract with different branch.')
					return False

				CheckOfficer = mktofficer.setChangeOfficer(LoanContractID,OfficerID)
				if not CheckOfficer[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckOfficer[1])
					return False

				LoanContractIDValue.append(LoanContractID)
			
			mktofficer.ChageGroupLCOfficer(ID, OfficerID)
			DuplicateLoanContract = [item for item, count in collections.Counter(LoanContractIDValue).items() if count > 1]
			if DuplicateLoanContract:
				flash(msg_error+'Please try again. '+', '.join(DuplicateLoanContract)+' loan contract is duplicate')
				return False
			else:
				db.session.commit()
				
			# if len(LoanContractIDValue) != len(set(LoanContractIDValue)):
			# 	flash(msg_error+'Please try again. It seems you set duplicate loan contract')
			# 	return False

		return True

	@staticmethod
	def beforeAuthorize():
		try:
			ID = g.formID
			ListLoanContract = MKT_CHANGE_OFFICER_DE_INAU.query.filter(MKT_CHANGE_OFFICER_DE_INAU.ID==ID).all()

			LoanContractIDValue = []
			OfficerID 			= ''
			OfficerObj 	= MKT_OFFICER.query
			LoanObj 	= MKT_LOAN_CONTRACT.query

			for item in ListLoanContract:
				LoanContractID 	= item.LoanContractID
				OfficerID 	 	= item.OfficerID

				FilterLoanObj = LoanObj.get(LoanContractID)
				if FilterLoanObj:
					LoanContractBranch = FilterLoanObj.Branch
				else:
					flash(msg_error+'%s Loan contract not found!'%LoanContractID)
					return False

				FilterOfficerObj = OfficerObj.get(OfficerID)
				if FilterOfficerObj:
					OfficerBranch = FilterOfficerObj.Branch
				else:
					flash(msg_error+'%s Officer ID not found!'%OfficerID)
					return False

				if LoanContractBranch != OfficerBranch:
					flash(msg_error+'Assigning Officer to loan contract with different branch.')
					return False

				CheckOfficer = mktofficer.setChangeOfficer(LoanContractID,OfficerID)
				if not CheckOfficer[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckOfficer[1])
					return False

				LoanContractIDValue.append(LoanContractID)
			mktofficer.ChageGroupLCOfficer(ID, OfficerID)
			DuplicateLoanContract = [item for item, count in collections.Counter(LoanContractIDValue).items() if count > 1]
			if DuplicateLoanContract:
				flash(msg_error+'Please try again. '+', '.join(DuplicateLoanContract)+' loan contract is duplicate')
				return False
			# else:
			# 	db.session.commit()

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod  
	def hotField(): 
		hotfield=[]
		# fielddisplay="$('#OldOfficerID').select2('data',{'id':data.OldOfficerID,'text':data.OldOfficerName})"  # FirstName is form's attribute and will show LastName when cursor loss focus from LastName text box. Note: you can write javascript code to display results on different controls by comma separate. 
		fielddisplay="$('#OldOfficerID').val(data.OldOfficerID)"  # FirstName is form's attribute and will show LastName when cursor loss focus from LastName text box. Note: you can write javascript code to display results on different controls by comma separate. 
		varname="LoanContractID:$('#LoanContractID').val()" # $('#LastName').val() is parameter via get method
		fun=["LoanContractID",varname,fielddisplay,"/Morakot/getOldOfficerID","blur"]  # /Morakot/getLastName is url defined at @app.route('/Morakot/getLastName',methods=['GET'])
		hotfield.append(fun)
		return hotfield
