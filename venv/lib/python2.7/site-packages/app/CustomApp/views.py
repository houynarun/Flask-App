from app.mktcore.imports 		import *
from werkzeug 						import secure_filename
import os 						
from flask 						import jsonify
import time
import sys
import os
import traceback
import collections
import operator
from .register 					import *
import app.tools.mkttool 		as mkttool
import jinja2
from flask import send_from_directory
import py_compile

DefaultDir 	 = os.path.dirname(__file__)+'/'
FileRegister = os.path.dirname(__file__)+'/register.py'

@app.route("/Morakot/CustomApp/Delete", methods=['GET'])
@app.route("/Morakot/API/CustomApp/Delete", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def DeleteCustomApp():
	CheckDelete = True
	# Block check access right
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/CustomApp/","Delete")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)
	App = request.args.get('App') if request.args else ''
	Module = request.args.get('Module') if request.args else ''
	if App:
		Path = '%s%s/%s'%(DefaultDir,App,Module) if Module else '%s%s'%(DefaultDir,App)
		CheckDelete = mkttool.setDeleteDirectory(Path)
		setRemoveRegister(App,Module)
	if not CheckDelete:
		Message = "Fail to delete App."

	MainApp,SubApp = getListCustomApp()

	return render_template("customapp/list-app.html",
							MainApp=MainApp,
							SubApp=SubApp)


@app.route("/Morakot/CustomApp/Status", methods=['GET', 'POST'])
@app.route("/Morakot/API/CustomApp/Status", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def StatusCustomApp():
	CheckDelete = True
	# Block check access right
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/CustomApp/","Delete")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)
	Status = True
	App = request.args.get('App') if request.args else ''
	Module = request.args.get('Module') if request.args else ''
	if App:
		RegisterData 	= getListAppRegister()
		Status 			= isEnableApp(RegisterData,App,Module)
		if Status:
			#Disable
			Status = setRemoveRegister(App,Module)
		else:
			#Enable
			Status = setRegister(App,Module)[0]

	return jsonify(Status=Status)


@app.route('/Morakot/CustomApp/<app>/<module>/<path:filename>')
@app.route('/Morakot/API/CustomApp/<app>/<module>/<path:filename>')
@checkLogOutSession
@checkLogOutTime
def custom_static(app,module,filename):
	StaticPath 	= '%s%s/%s/static'%(DefaultDir,app,module)
	StaticFile = send_from_directory(StaticPath, filename)
	return StaticFile


@app.route("/Morakot/CustomApp", methods=['GET', 'POST'])
@app.route("/Morakot/API/CustomApp", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def CustomApp():
	

	# Block check access right
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/CustomApp/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	if request.method == 'POST':
		ListZipFile = request.files.getlist('file')

		if not ListZipFile:
			FieldRequired.append(('Zip File Upload','This field is required.'))

		else:
			for ZipFile in ListZipFile:
				if ZipFile and mkttool.getAllowedFileMorakot(ZipFile.filename):
					App 	= secure_filename(ZipFile.filename).split('.')[0]
					InitializeObj = setInitializeApp(App,ZipFile)
					if not InitializeObj[0]:
						flash("%s%s"%(msg_error,InitializeObj[1]))
					else:
						flash(InitializeObj[1])
				else:
					flash(msg_error + "File extension not allow.")

	# Get List of App in Custom App
	MainApp,SubApp = getListCustomApp()
	# # Rebuild register
	# py_compile.compile(DefaultDir+"register.py")
	return render_template("customapp/customapp.html",
								ErrorMsg=ErrorMsg,
								MainApp=MainApp,
								SubApp=SubApp)

def setInitializeApp(App,ZipFile):
	'''
		Refer to process of custom App

		1. Clean up default directory of custom App

			if Application directory doesn't exist will be create it.

		2. Delete exist App.

		3. Unzip App

		4. Add Url Register

		5. Rebuild file pyc

		6. Create table.

		7. Check error with new App if error will rollback.

		8. Apply App to Module/Form in system.

	'''

	# Unzip file from upload 
	mkttool.setUnZip(ZipFile,DefaultDir)
	

	# Create default file init
	mkttool.setCreateFile(DefaultDir+'__init__.py') 


	# Run Test new App
	SimulatorRunning = setSimulatorApp(App)
	if not SimulatorRunning[0]:
		# mkttool.setDeleteDirectory(DefaultDir+App)
		return SimulatorRunning

	# Add Url Register
	setRegister(App)

	# Create table to database
	setCreateTable(App)

	return True,'Application %s was install successfully.'%App


def getListCustomApp():
	'''
		Return list file and directory of default direcotry custom App.
	'''

	ListCustomApp 	= mkttool.getListDirectory(DefaultDir,3)
	ListCustomApp.sort()
	
	# Declear default dict.
	MainApp 		= {}
	SubApp 			= {}
	RegisterData 	= getListAppRegister()
	
	for row in ListCustomApp:
		Path 		= DefaultDir+row
		MainApp.update({ row :getInfoApp(RegisterData,Path,row) })
		ListSubApp 	= mkttool.getListDirectory(DefaultDir+row,3) # Create List File
		RecordCol = []
		for col in ListSubApp:
			Module 	= col
			Path 	= DefaultDir+row+'/'+col
			RecordCol.append(getInfoApp(RegisterData,Path,row,Module))
		SubApp.update({row:RecordCol})

	return MainApp,SubApp

def getInfoApp(RegisterData,Path,App,Module=""):

	RecordCol = {}
	AppName = App if not Module else Module
	# Get datatime of App
	Createdon = time.ctime(os.path.getmtime(Path)) # Create time
	RecordCol.update({'Createdon':Createdon})

	# Update List main directory to dict 
	RecordCol.update({'App':AppName})

	# Check Enable App
	Status = isEnableApp(RegisterData,App,Module)
	RecordCol.update({'Status':Status})
	if Module:
		UrlObj = getUrlFromFile(Path+'/views.py')
		ListUrl = []
		ListForm = []

		for row in UrlObj:
			ListUrl.append(row)
			ListForm.append(UrlObj.get(row,''))
		RecordCol.update({'Form':ListForm})
		RecordCol.update({'Url':ListUrl})
	return RecordCol


def isEnableApp(RegisterData,App,Module=""):
	'''
		Define for check module of app enable/disable.
	'''
	if RegisterData:
		ImportApp = "from %s.%s.views import *" % (App,Module) if Module else App
		for row in RegisterData:
			if ImportApp in row:
				return True
	return False

def getListAppRegister():
	'''
		Get all modle that was register 
	'''
	 # Read file content
	RegisterData 	= mkttool.getReadFile(FileRegister,ReadLine=True)
	return RegisterData

def setRemoveRegister(App,Module=""):
	'''
		Define for remove module of app in system.
	'''
	RegisterData 	= getListAppRegister()
	OriginalData 	= RegisterData

	ImportApp 			 = "from %s.%s.views import *" % (App,Module) if Module else App
	NewRegisterData 	 = [ x for x in RegisterData if not ImportApp in x]

	mkttool.setWriteLineFile(FileRegister,NewRegisterData)
	return True,'Pass'

def setRegister(App,Module=""):
	'''
		Define for add module to register file. You are multi module in app or singal.
	'''
	 # Read file content
	RegisterData 	= getListAppRegister()
	OriginalData 	= RegisterData

	ListModule 		= getListModule(App)
	if Module:
		ImportApp 	 = "from %s.%s.views import *" % (App,Module)
		Duplicat 	 = [ x for x in RegisterData if ImportApp in x]
		if RegisterData:
			# Add \n to last item
			LastApp = '%s\n' % RegisterData[-1]
			RegisterData.pop(-1)
			RegisterData.append(LastApp)
		if not Duplicat:
			RegisterData.append(ImportApp)
	else:
		for row in ListModule:
			ImportApp = "from %s.%s.views import *" % (App,row)
			Duplicat 	 = [ x for x in RegisterData if row in x]
			if RegisterData:
				# Add \n to last item
				LastApp = '%s\n' % RegisterData[-1]
				RegisterData.pop(-1)
				RegisterData.append(LastApp)
			if not Duplicat:
				RegisterData.append(ImportApp)

	try:
		RemoveEmptyLine = [ x for x in RegisterData if x != '\n']
		mkttool.setWriteLineFile(FileRegister,RemoveEmptyLine)

	except Exception, e:
 		# revert back to original
		mkttool.setWriteLineFile(FileRegister,OriginalData)
		return False,'%s'%e

	return True,'Pass'

def loadCustomTemplate():
	try:
		ListDirectoryTemplate = []
		ListApp 	= mkttool.getListDirectory(DefaultDir,3)
		for row in ListApp:
			AppPath = DefaultDir+row
			ListModule= mkttool.getListDirectory(AppPath,3)
			for col in ListModule:
				TemplatePath = '%s/%s/templates'%(AppPath,col)
				FileTemplate = mkttool.getListDirectory(TemplatePath,2)
				if FileTemplate:
					ListDirectoryTemplate.append(TemplatePath)
		if ListDirectoryTemplate:
			TemplateLoader = jinja2.ChoiceLoader([
				app.jinja_loader,jinja2.FileSystemLoader(ListDirectoryTemplate)])

			app.jinja_loader = TemplateLoader #Add template loader	
	except Exception, e:
		print 'Warning: Custom App: %s'%e 

def setSimulatorApp(App):
	'''
		Test Simulator import App/Module from upload for catch error.
	'''
	try:
		ListModule 	= getListModule(App)
		for row in ListModule:
			# print "app.CustomApp.%s.%s.views" %(App,row)
			AppObj = __import__("app.CustomApp.%s.%s.views" %(App,row))
			del AppObj

		return True,"Pass"
	except AssertionError, e:
		return True,"Pass"
		
	except Exception, e:
		db.session.rollback()
		formatted_lines = traceback.format_exc()#.splitlines()
		# print formatted_lines[0]
		# print formatted_lines[-1]
		return False,formatted_lines

def setCreateTable(App):
	ListModule 	= getListModule(App)
	for row in ListModule:
		# print "app.CustomApp.%s.%s.views" %(App,row)
		AppObj = __import__("app.CustomApp.%s.%s.views" %(App,row))
		del AppObj
		db.create_all()

def has_no_empty_params(rule):
	defaults = rule.defaults if rule.defaults is not None else ()
	arguments = rule.arguments if rule.arguments is not None else ()
	return len(defaults) >= len(arguments)

def getSiteMap():
	# print app.url_map
	Link = {}
	for rule in app.url_map.iter_rules():
		# Filter out rules we can't navigate to in a browser
		# and rules that require parameters
		if "GET" in rule.methods and has_no_empty_params(rule):
			url = url_for(rule.endpoint, **(rule.defaults or {}))
			Link.update({url: rule.endpoint})
	return Link

def getListModule(App):# Get all list module.
	return mkttool.getListDirectory(DefaultDir+App,3)# List only directories


def getUrlFromFile(Path):
	Dict = {}
	FileContent = mkttool.getReadFile(Path,ReadLine=True)
	for Line in FileContent:
		if 'registerCRUD' in Line:
			ListString = Line.split(',')
			Form =  ListString[3].strip()
			URL =  ListString[2].replace("'", '').strip()
			Dict.update({URL:Form})
			# Description = db.session.query(MKT_FORM.FormDesc).filter(MKT_FORM.URL == URL).scalar()
			# if Description:
			# 	Dict[Form] = Description
		elif '@app.route' in Line:# @app.route('/Morakot/CustomApp/')
			ListString = Line.replace(',','*')
			
			ListString = ListString.split('*')[0]
			ListString = ListString.replace('(','')
			ListString = ListString.replace(')','')
			ListString = ListString.replace('\n','')
			ListString = ListString.replace('"','')
			ListString = ListString.replace("'",'')
			ListString = ListString.replace("@app.route",'')
			ListString = ListString.split('/')
			ListString = filter(None,ListString) 
			URL = '/'.join(x for x in ListString if not 'Morakot' in x)
			Dict.update({URL:''})
	return Dict

'''
	Call load custom template from App/Module
'''
loadCustomTemplate()