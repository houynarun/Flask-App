from app.mktcore.imports 			import *
from app.tools						import mktdb
from app.Journal.models 			import MKT_JOURNAL
from app.Category.models 			import MKT_CATEGORY
from app.Transaction.models 		import MKT_TRANSACTION
from app.GLAudit.models				import MKT_GL_AUDIT, MKT_GL_AUDIT_HIST
from app.Currency.models			import MKT_CURRENCY

from flask 							import make_response
import xlsxwriter
import StringIO

import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney
import app.tools.mktreport			as mktreport
import app.tools.user 				as mktuser
import app.tools.mktautoid 			as mktAutoID
import app.tools.mktaudit 			as mktaudit
import collections
import decimal
import sqlalchemy

#list Dictionary of GL entries which extend data from DicRecords (Used DicData as data source for export to excel)
DicData = []
import app.tools.mktsetting 	as mktsetting
ExtendClass 			= 	mktsetting.ExtendModule()
ACC_ENTRY_MODULE_PREFIX =	ExtendClass.getUrlExtend(DictUrl=ACC_ENTRY_MODULE_PREFIX)

@app.route("/Morakot/GLAudit/", methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def routeGLAudit():
	try:
		ErrorMsg    = []
		getCheck = checkAccess ("/Morakot/GLAudit/","Search")
		if getCheck != True:
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		if request.method == 'POST':
			GLAuditObj  		= db.session.query(MKT_GL_AUDIT)
			EditYes 			= request.form.getlist('Edit[Yes]') 	
			EditSuperYes 		= request.form.getlist('Edit[SuperYes]') 

			EditRecord			= []
			EditRecord          = EditYes + EditSuperYes

			if len(EditRecord) > 0:

				for Reference in EditRecord:

					Remark 		= request.form['Remark_'+ Reference]
					CheckStatus	= request.form['CheckStatus_'+ Reference]
					GLAudit    	= GLAuditObj.filter(MKT_GL_AUDIT.Reference == Reference).all()
					NumRow     	= len(GLAudit)

					Data =  {
								'Reference'		: 	Reference,
								'Remark'		: 	Remark,
								'CheckStatus'	: 	CheckStatus,
								'Inputter' 		:	mktuser.getUser().ID,
								'Createdon' 	: 	mktdate.getDateTimeNow(),
								'Authorizer' 	: 	mktuser.getUser().ID,
								'Authorizeon'	: 	mktdate.getDateTimeNow()
							}

					if NumRow == 0:

						ID = mktAutoID.setAutoID("GA", 5, "MKT_GL_AUDIT")
						Data.update({'ID': ID})
						mktdb.insertTable(MKT_GL_AUDIT, Data)
						db.session.commit()	

					else:
						
						ID = GLAudit[0].ID
						mktaudit.moveAUTHtoHIST(MKT_GL_AUDIT,MKT_GL_AUDIT_HIST,ID,0)

						mktdb.updateRecord(MKT_GL_AUDIT, [MKT_GL_AUDIT.Reference == Reference], Data)
						db.session.commit()

				flash('Your Records have been saved successfully')
			else:
				flash('There are no change records')

		CompanyObj 				=	mktreport.getCompanyObj()
		BankDate 				= 	mktdate.getBankDate()
		DicModule 				= 	ACC_ENTRY_MODULE_PREFIX

		### custom search 
		Branch 					= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else session["ChangeBranch"]
		BranchList 				=	Branch.split()
		TransactionDate			= 	request.args.get("TransactionDate") if 'TransactionDate' in request.args else str(BankDate)
		TransactionDateList 	= 	TransactionDate.split()
		Expression				= 	request.args.get("Expression") if 'Expression' in request.args else 'EQ'
		Inputer     			= 	request.args.get("Inputer") if 'Inputer' in request.args else ''
		InputerList				= 	Inputer.split()
		Reviewer     			= 	request.args.get("Reviewer") if 'Reviewer' in request.args else ''
		ReviewerList   			= 	Reviewer.split()
		Authorizer     			= 	request.args.get("Authorizer") if 'Authorizer' in request.args else ''
		AuthorizerList			= 	Authorizer.split()
		CheckUnCheck  			= 	request.args.get("CheckUnCheck") if 'CheckUnCheck' in request.args else 'ALL'				
		### 

		CategoryObj    			=	db.session.query(MKT_CATEGORY)
		TransactionObj 			=	db.session.query(MKT_TRANSACTION)
		JournalObj				= 	db.session.query(MKT_JOURNAL)
		ReferenceObj 			= 	db.session.query(
										MKT_JOURNAL.ID.label('JournalID'),
										MKT_JOURNAL.Reference,
										MKT_JOURNAL.TransactionDate,
										MKT_GL_AUDIT.ID,
										MKT_GL_AUDIT.CheckStatus,
										MKT_GL_AUDIT.Remark,
										MKT_GL_AUDIT.Inputter.label('Reviewer'),
										MKT_GL_AUDIT.Createdon.label('ReviewDate')
										).\
										outerjoin(
											MKT_GL_AUDIT, 
											MKT_GL_AUDIT.Reference == MKT_JOURNAL.Reference
										).\
										filter(~MKT_JOURNAL.Inputter.in_(['SYSTEM','System','system'])).\
										filter(~MKT_JOURNAL.Module.in_(['PD','LC'])).\
										group_by(
												MKT_JOURNAL.ID,	
												MKT_JOURNAL.Reference,	
												MKT_JOURNAL.TransactionDate,	
												MKT_GL_AUDIT.ID,
												MKT_GL_AUDIT.CheckStatus,
												MKT_GL_AUDIT.Remark,
												MKT_GL_AUDIT.Inputter,
												MKT_GL_AUDIT.Createdon).order_by(MKT_JOURNAL.TransactionDate.asc(),MKT_JOURNAL.ID.asc())

		ReferenceObj = 	ReferenceObj if 'ALL' in BranchList else ReferenceObj.filter(MKT_JOURNAL.Branch.in_(BranchList))
		ReferenceObj =  ReferenceObj if 'ALL' in InputerList or Inputer == '' else  ReferenceObj.filter(MKT_JOURNAL.Inputter.in_(InputerList))
		ReferenceObj =  ReferenceObj if 'ALL' in ReviewerList or Reviewer == '' else  ReferenceObj.filter(MKT_GL_AUDIT.Inputter.in_(ReviewerList))
		ReferenceObj =  ReferenceObj if 'ALL' in AuthorizerList or Authorizer == '' else  ReferenceObj.filter(MKT_JOURNAL.Authorizer.in_(AuthorizerList))

		if CheckUnCheck == "Check":
			ReferenceObj = ReferenceObj.filter(MKT_GL_AUDIT.CheckStatus == 'Yes')
		elif CheckUnCheck == "Uncheck":
			ReferenceObj = ReferenceObj.filter(or_(MKT_GL_AUDIT.CheckStatus == 'No', MKT_GL_AUDIT.CheckStatus == None))
		else:
			ReferenceObj = ReferenceObj
		
		NumOfTransactionDate = len(TransactionDateList)
		if NumOfTransactionDate == 0:
			ReferenceObj = ReferenceObj.filter(MKT_JOURNAL.TransactionDate == '')
			flash(msg_warning+'Transaction Date is missing')
		else:
			if NumOfTransactionDate == 2 and Expression == "BTW":
				ReferenceObj = ReferenceObj.filter(MKT_JOURNAL.TransactionDate.between(TransactionDateList[0],TransactionDateList[1]))
				if TransactionDateList[0] > TransactionDateList[1]:
					flash(msg_warning+'Start Date must be smaller than End Date')
				
			else:
				if Expression == "EQ":
					ReferenceObj = ReferenceObj.filter(MKT_JOURNAL.TransactionDate.in_(TransactionDateList))
				else:
					ReferenceObj = ReferenceObj.filter(MKT_JOURNAL.TransactionDate == '')
					flash(msg_warning+'"Between" Expression needs one start date and one end date')

		DicRecords  = []	

		for row in ReferenceObj:
			Debits = []
			Credits = []

			DebitsObj = JournalObj.filter_by(Reference=row.Reference,DebitCredit='Dr')
			for row_dr in DebitsObj.all():
				Category = CategoryObj.filter_by(ID=row_dr.CategoryID).first()
				Transaction = TransactionObj.filter_by(ID=row_dr.Transaction).first()
				Debits.append({
								"CategoryID"			: row_dr.CategoryID,
								"CategoryDescription"	: Category.Description, 
								"Amount"				: row_dr.Amount,
								"Currency"				: row_dr.Currency,
								"Description"			: row_dr.Description,
								"Transaction"			: row_dr.Transaction,
								"TransactionDescription": Transaction.Description
							})

			CreditObj = JournalObj.filter_by(Reference=row.Reference,DebitCredit='Cr')
			for row_cr in CreditObj.all():
				Category = CategoryObj.filter_by(ID=row_cr.CategoryID).first()
				Transaction = TransactionObj.filter_by(ID=row_cr.Transaction).first()
				Credits.append({
								"CategoryID"			: row_cr.CategoryID,
								"CategoryDescription"	: Category.Description, 
								"Amount"				: row_cr.Amount,
								"Currency"				: row_cr.Currency,
								"Description"			: row_cr.Description,
								"Transaction"			: row_cr.Transaction,
								"TransactionDescription": Transaction.Description
							})

			Journal     = JournalObj.filter_by(Reference=row.Reference).first()
			if not any(d['Reference'] == row.Reference for d in DicRecords):
				DicRecords.append({
									"Reference"				: row.Reference,
									"Module"				: Journal.Module,
									"TransactionDate"		: Journal.TransactionDate,
									"Inputter"				: Journal.Inputter,
									"Authorizer"			: Journal.Authorizer,
									"CheckStatus"			: row.CheckStatus,
									"Remark"				: row.Remark,
									"Reviewer"				: row.Reviewer,
									"ReviewDate"			: row.ReviewDate,
									"UserReference"			: Journal.UserReference,
									"Debits"				: Debits,
									"Credits"				: Credits,
									"Branch"				: Journal.Branch,
									"JournalID"				: row.JournalID
								})

		del DicData[:]
		DicData.extend(DicRecords)
			
		return render_template("glaudit/glaudit.html",
									DicRecords      		= DicRecords,
									toMoney 				= mktmoney.toMoney,
									DicModule 				= DicModule,
									renderDrCrTemplate 		= renderDrCrTemplate,
									CompanyObj 				= CompanyObj,
									Branch 					= Branch,
									BankDate 				= BankDate,
									TransactionDate     	= TransactionDate,
									Inputer 				= Inputer,
									Reviewer				= Reviewer,
									CheckUnCheck			= CheckUnCheck,
									Expression				= Expression,
									Authorizer				= Authorizer,
									TransactionDateList		= TransactionDateList
								)

	except Exception, e:
		raise

def renderDrCrTemplate(DrDict, CrDict):

	Debit 				= 	''
	DrAmount 			= 	''
	DrCurrency 			= 	''
	DrTransaction		= 	''
	DrNotes     		= 	''
	Br                  = 	''

	for row in DrDict:
		Br 				+= '<br>'
		Debit      		+= '''<span class="text-semibold">%s</span> - 
						   <span data-toggle="tooltip" title="%s">%s</span><br>''' % (
						   	row.get('CategoryID'),
						   	row.get('CategoryDescription'),
						   	row.get('CategoryDescription'))

	   	DrAmount 		+= 	'%s <br>' % mktmoney.toMoney(float(row.get('Amount')) , 
	   						  mktmoney.getCurrencyObj(row.get('Currency')))

	   	DrCurrency  	+= 	'%s <br>' % row.get('Currency')
	   	DrTransaction	+=  '''<span class="text-semibold">%s</span> - 
						   <span data-toggle="tooltip" title="%s">%s</span><br>''' % (
						   	row.get('Transaction'),
						   	row.get('TransactionDescription'),
						   	row.get('TransactionDescription'))

	   	DrNotes     	+=  '<span data-toggle="tooltip" title="%s">%s</span> <br>' % (
	   						row.get('Description'),
	   						row.get('Description'))


   	Credit 				= 	''
	CrAmount 			= 	''
	CrCurrency 			= 	''
	CrTransaction		= 	''
	CrNotes     		= 	''

	for row in CrDict:
		Credit      	+= '''<span class="text-semibold">%s</span> - 
						   <span data-toggle="tooltip" title="%s">%s</span><br>''' % (
						   	row.get('CategoryID'),
						   	row.get('CategoryDescription'),
						   	row.get('CategoryDescription'))

	   	CrAmount 		+= 	'%s <br>' % mktmoney.toMoney(float(row.get('Amount')) , 
	   						  mktmoney.getCurrencyObj(row.get('Currency')))

	   	CrCurrency  	+= 	'%s <br>' % row.get('Currency')
	   	CrTransaction	+=  '''<span class="text-semibold">%s</span> - 
						   <span data-toggle="tooltip" title="%s">%s</span><br>''' % (
						   	row.get('Transaction'),
						   	row.get('TransactionDescription'),
						   	row.get('TransactionDescription'))

	   	CrNotes     	+=  '<span data-toggle="tooltip" title="%s">%s</span> <br>' % (
	   						row.get('Description'),
	   						row.get('Description'))


   	return 	{
   				'Debit': Debit, 'DrAmount': DrAmount, 'DrCurrency': DrCurrency, 'DrTransaction': DrTransaction, 'DrNotes': DrNotes,
   				'Credit': Credit, 'CrAmount': CrAmount, 'CrCurrency': CrCurrency, 'CrTransaction': CrTransaction, 'CrNotes': CrNotes,
   				'Br': Br
   			}

@app.route("/Morakot/GLAudit/Excel/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeGLAuditExcel():
	try:

		output 			= 	StringIO.StringIO()		
		workbook 		= 	xlsxwriter.Workbook(output, {'in_memory': True})

		FileName 		= 	"GLAudit.xlsx"
		worksheet 		= 	workbook.add_worksheet()

		bold = workbook.add_format({'bold': 1})
		money_format = workbook.add_format({'num_format': '#,##0.00'})
		merge_format = workbook.add_format({'valign': 'top'})
		header_merge_format = workbook.add_format({'bold': 1,'valign': 'vcenter'})

		#header	
		worksheet.merge_range('A1:A2', 'Check', header_merge_format)
		worksheet.merge_range('B1:B2', 'Branch', header_merge_format)
		worksheet.merge_range('C1:C2', 'Reference', header_merge_format)
		worksheet.merge_range('D1:D2', 'Debits', header_merge_format)
		worksheet.merge_range('E1:E2', 'Credits', header_merge_format)
		worksheet.merge_range('F1:G1', 'Amount', header_merge_format)
		worksheet.merge_range('H1:H2', 'Currency', header_merge_format)
		worksheet.merge_range('I1:I2', 'Transaction', header_merge_format)
		worksheet.merge_range('J1:J2', 'Notes', header_merge_format)
		worksheet.merge_range('K1:K2', 'Transaction Date', header_merge_format)
		worksheet.merge_range('L1:L2', 'User Interface', header_merge_format)
		worksheet.merge_range('M1:M2', 'Inputter', header_merge_format)
		worksheet.merge_range('N1:N2', 'Authorizer', header_merge_format)
		worksheet.merge_range('O1:O2', 'Reviewed By', header_merge_format)
		worksheet.merge_range('P1:P2', 'Reviewed Date', header_merge_format)
		worksheet.merge_range('Q1:Q2', 'Remark', header_merge_format)
		worksheet.write('F2', 'Dr', header_merge_format)
		worksheet.write('G2', 'Cr', header_merge_format)
		#end header

		#set column width
		worksheet.set_column('A:A', 5)
		worksheet.set_column('B:B', 5)
		worksheet.set_column('C:C', 12)
		worksheet.set_column('D:E', 30)
		worksheet.set_column('F:G', 10)
		worksheet.set_column('H:H', 10)
		worksheet.set_column('I:J', 30)
		worksheet.set_column('K:L', 20)
		worksheet.set_column('M:O', 10)
		worksheet.set_column('P:P', 20)
		worksheet.set_column('Q:Q', 30)
		#end

		StartRow = 3
		for row in DicData:
			TotalDrCr = len(row.get("Debits")) + len(row.get("Credits"))
			EndMergeRow = StartRow + TotalDrCr - 1

			worksheet.merge_range('A'+ str(StartRow) + ':A' + str(EndMergeRow), row.get("CheckStatus") , merge_format)
			worksheet.merge_range('B'+ str(StartRow) + ':B' + str(EndMergeRow), row.get("Branch"), merge_format)
			worksheet.merge_range('C'+ str(StartRow) + ':C' + str(EndMergeRow), row.get("Reference"), merge_format)

			worksheet.merge_range('K'+ str(StartRow) + ':K' + str(EndMergeRow), row.get("TransactionDate"), merge_format)
			worksheet.merge_range('L'+ str(StartRow) + ':L' + str(EndMergeRow), row.get("UserInterface"), merge_format)
			worksheet.merge_range('M'+ str(StartRow) + ':M' + str(EndMergeRow), row.get("Inputter"), merge_format)
			worksheet.merge_range('N'+ str(StartRow) + ':N' + str(EndMergeRow), row.get("Authorizer"), merge_format)
			worksheet.merge_range('O'+ str(StartRow) + ':O' + str(EndMergeRow), row.get("Reviewer") if row.get("Reviewer") and row.get("CheckStatus") == "Yes" else "" , merge_format)
			worksheet.merge_range('P'+ str(StartRow) + ':P' + str(EndMergeRow), row.get("ReviewDate") if row.get("ReviewDate") and row.get("CheckStatus") == "Yes" else "", merge_format)
			worksheet.merge_range('Q'+ str(StartRow) + ':Q' + str(EndMergeRow), row.get("Remark"), merge_format)


			for row_sub in row.get("Debits"):
				worksheet.write('D'+ str(StartRow), row_sub.get("CategoryID") + " - " + row_sub.get('CategoryDescription'))
				worksheet.write('F'+ str(StartRow), row_sub.get("Amount"), money_format)
				worksheet.write('H'+ str(StartRow), row_sub.get("Currency"))
				worksheet.write('I'+ str(StartRow), row_sub.get("Transaction") + " - " + row_sub.get("TransactionDescription"))
				worksheet.write('J'+ str(StartRow), row_sub.get("Description"))

				StartRow = StartRow + 1

			for row_sub in row.get("Credits"):
				worksheet.write('E'+ str(StartRow), row_sub.get("CategoryID") + " - " + row_sub.get('CategoryDescription'))
				worksheet.write('G'+ str(StartRow), row_sub.get("Amount"), money_format)
				worksheet.write('H'+ str(StartRow), row_sub.get("Currency"))
				worksheet.write('I'+ str(StartRow), row_sub.get("Transaction") + " - " + row_sub.get("TransactionDescription"))
				worksheet.write('J'+ str(StartRow), row_sub.get("Description"))

				StartRow = StartRow + 1

		workbook.close()
		output.seek(0)

		response = make_response(output.getvalue())
		# This is the key: Set the right header for the response
		# to be downloaded, instead of just printed on the browser
		response.headers['Cache-Control'] = 'no-cache'
		response.headers["Content-Disposition"] = "attachment; filename=%s"%FileName
		response.headers["Content-type"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"

		return response
		return ""

	except:
		raise