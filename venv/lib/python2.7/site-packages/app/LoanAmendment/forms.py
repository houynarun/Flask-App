from flask 							import flash, g, Markup
from wtforms 						import DecimalField, IntegerField
from app.mktcore.wtfimports 		import *
from .models 						import *
import time, math
from decimal 						import *
from .. 							import app, db
from datetime 						import datetime, date, timedelta

from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.Account.models 			import MKT_ACCOUNT
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE, MKT_REP_SCHEDULE_INAU
from app.PD.models 					import MKT_PAST_DUE, MKT_PD_DATE, MKT_PENALTY
from app.Customer.models 			import MKT_CUSTOMER
from app.Village.models 			import MKT_VILLAGE
from app.ScheduleDefine.models 		import *
from app.AssetClass.models			import *
from app.tools.mktroute 			import *

import app.tools.mktloanapplication as mktloanapplication
import app.tools.mktaccount			as mktaccount
import app.tools.mktaccounting 		as mktaccounting
import app.tools.mktkey 			as mktkey
import app.tools.mktsetting 		as mktsetting
import app.tools.mktdate 			as mktdate
import app.tools.mktloanamendment 	as mktamt
import app.tools.mktholiday 		as mktHoliday
import app.tools.mktdb 				as mktdb
import app.tools.loantools.nonworkingday 	as mktDay
import app.tools.mktmoney 			as mktmoney
import app.tools.mktnotification 	as mktnotification
import app.tools.mktaudit 			as mktaudit
import app.tools.mktcharge 			as mktcharge
import app.mktcore.globalfunction 	as globalfunction
import app.tools.mktparam 			as mktparam
import app.tools.mktloan 			as mktloan
import app.tools.mktautoid 			as mktautoid
import app.tools.mktrepayment 		as mktrepayment
import app.tools.loantools.rescheduletools 	as mktreschedule
# import app.tools.mktloaninterest	as mktloaninterest

def getPenaltyAmount(LoanID,Operation,AddDeduct,**kwargs):
	PenaltyAmount	= "0"
	kwargs.update({"AddDeduct": AddDeduct})

	AmendmentPenalty= True if Operation == 'AMT' else False
	if (Operation == 'TMN' and AddDeduct == '2') or Operation == 'AMT':
		PenaltyAmount	= mktamt.getLoanRepaymentDetail(LoanID,AmendmentPenalty,**kwargs)
		PenaltyAmount = PenaltyAmount[1] if PenaltyAmount[0] else 0
			
	return PenaltyAmount

@app.route("/Morakot/LoanInformation", methods=['GET'])
def getLoanInformation():
	try:
		LoanID 			= request.args.get("LoanID")
		Operation 		= request.args.get("Operation") 
		AddDeduct		= request.args.get("AddDeduct")
		AmendmentAmount	= request.args.get("AmendmentAmount")
		if AmendmentAmount != "0":
			AmendmentAmount = globalfunction.wordAmount(AmendmentAmount)
		Principal 		= ""
		Interest 		= ""
		Installment 	= ""
		Term 			= ""
		Currency		= ""
		Frequency 		= ""
		FrequencyOld 	= ""
		FreqType 		= ""
		FreqTypeOld 	= ""
		FreqTypeDesc 	= ""
		CustomerName 	= ""
		Disbursed 		= ""
		VB 				= ""
		kwargs			= {}
		row = MKT_LOAN_CONTRACT.query.get(LoanID)

		if row:
			Principal 		= str(row.Disbursed)
			Interest 		= str(row.InterestRate)
			Installment 	= str(row.Installment)
			Term 			= str(row.Term)
			Currency 		= str(row.Currency)
			Frequency 		= str(row.Frequency)
			FreqType 		= str(row.FreqType)
			FrequencyOld 	= str(row.Frequency)
			FreqTypeOld 	= str(row.FreqType)
			CustomerID 		= row.ContractCustomerID
			LoanType 		= str(row.LoanType)
			CurrencyObj 	= MKT_CURRENCY.query.get(row.Currency)
			Disbursed 		= mktmoney.toMoney(float(row.Disbursed), CurrencyObj)
			kwargs.update({ 'AmendmentAmount':AmendmentAmount})
			PenaltyAmount 	= getPenaltyAmount(LoanID,Operation,AddDeduct,**kwargs)

			CustomerObj 	= MKT_CUSTOMER.query.get(CustomerID)
			if CustomerObj:
				CustomerName = CustomerObj.LastNameEn + " " + CustomerObj.FirstNameEn

				VBID 	= CustomerObj.Village
				VBObj 	= MKT_VILLAGE.query.get(VBID)

				if VBObj:
					VB = VBObj.Description

			if int(FreqType) == 1:
				FreqTypeDesc 	=	'1. Monthly'
			elif int(FreqType) == 2:
				FreqTypeDesc 	=	'2. Weekly'
			elif int(FreqType) == 3:
				FreqTypeDesc 	=	'3. Daily'

			if LoanType=="N":
				LoanTypeDes= "Nomal"
			elif LoanType=="R":
				LoanTypeDes = "Restructured"

			return jsonify(Principal=Principal, Interest=Interest, PenaltyAmount=PenaltyAmount,
						Installment=Installment, Term=Term,
						Currency=Currency, Frequency=Frequency,
						FrequencyOld=FrequencyOld, FreqTypeOld=FreqTypeOld,
						FreqType=FreqType, FreqTypeDesc=FreqTypeDesc,
						CustomerName=CustomerName, VB=VB,LoanType=LoanType,
						Disbursed=Disbursed, LoanTypeDes= LoanTypeDes)
	except:
		raise

@app.route('/Morakot/OperationType', methods=['GET'])
def getOperationType():

	dic 		= False
	Operation 	= request.args.get('Operation')
	AmendDate 	= request.args.get('AmendDate')
	LoanID 		= request.args.get("LoanID")

	Default 	= ""
	DefaultText = ""
	PAmountStatus=False
	AmendDateStatus=True
	AmendmentAmount = request.args.get("AmendmentAmount")
	kwargs 			= {}

	if Operation == "TMN":
		dic 		= True
		AmendDate 	= mktdate.getBankDate()
		ModeData 	= "<option value='1'>" + getLanguage('No Penalty') + "</option><option value='2'>" + getLanguage('With Penalty') + "</option>"
		CheckPen 	= mktamt.getLoanRepaymentDetail(LoanID)
		if CheckPen[0] == True:
			Default 	= 	"2"
			DefaultText =	"%s" %getLanguage('With Penalty')
			PAmountStatus=False
		else:
			PAmountStatus=True
			Default 	= 	"1"
			DefaultText =	"%s" %getLanguage('No Penalty')

	
	else:
		dic = False
		ModeData 	= "<option value='1'>" + getLanguage('Deduct') + "</option><option value='2'>" + getLanguage('Add') + "</option>"
		Default 	= 	"1"
		DefaultText =	"%s" %getLanguage('Deduct')

	kwargs.update({"AmendmentAmount" : AmendmentAmount})
	PenaltyAmount 	= getPenaltyAmount(LoanID,Operation,'2',**kwargs)

	return jsonify(Bool					= dic, 
				   AmendDate 		 	= str(AmendDate), 
				   ModeData 			= ModeData, 
				   Default 				= Default, 
				   DefaultText 			= DefaultText, 
				   PenaltyAmount 		= PenaltyAmount, 
				   PenaltyAmountStatus	= PAmountStatus,
				   AmendDateStatus 		= AmendDateStatus)

@app.route('/Morakot/SetLastPaidAmount', methods=['GET'])
def setLastPaidAmount():

	Operation = request.args.get('Operation')
	AddDeduct = request.args.get('AddDeduct')
	LCID 			= request.args.get('LoanID')
	Currency 		= request.args.get('Currency')
	systemDate 		= str(mktdate.getBankDate())

	LcAmount 		= 0
	ApprovedAmount 	= 0
	AccAvailableBal = 0
	LastPaidAmount 	= 0
	InstallAmount 	= 0
	Charge 			= 0
	LC 				= None
	DisbursedStat 	= "Y"
	ChargeRegularObj    = 	[]

	AmendmentAmount = request.args.get('AmendmentAmount')
	kwargs			= {"AmendmentAmount": AmendmentAmount}
	PenaltyAmount 	= getPenaltyAmount(LCID,Operation,AddDeduct,**kwargs)
	PAmountStatus 	= False
	AmendDateStatus = True
	WaiveInterest   = request.args.get('WaiveInterest',0)
	AmendDate  		= loadBankDate()
	# if Loan Amendment mode Termination
	if Operation == 'TMN':
		if LCID:

			LC 				= MKT_LOAN_CONTRACT.query.get(LCID)

		if LC:
			ChargeRegularObj = mktcharge.getChargeRegularObj(LoanID=LCID,Currency=Currency)
			if ChargeRegularObj:
				Charge = ChargeRegularObj[0].AccrCurrent if ChargeRegularObj[0].AccrCurrent else 0
				Charge = mktmoney.toMoney(float(Charge), mktmoney.getCurrencyObj(Currency))
				Charge = float(Charge.replace(",", ""))
			RepScheduleObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LCID).\
											filter(MKT_REP_SCHEDULE.RepStatus=="0").\
											order_by(MKT_REP_SCHEDULE.No.asc())

			# Get Installment Amount
			# QueryObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LCID).\
			# 								filter(MKT_REP_SCHEDULE.RepStatus=="0").\
			# 								order_by(MKT_REP_SCHEDULE.No.asc()).limit(1).first()
			QueryObj = RepScheduleObj.limit(1).first()

			if QueryObj:
				InstallAmount = float(QueryObj.Principal)+float(QueryObj.Interest)

			# Get LCAmount
			Account 		= LC.Account
			AccAvailableBal = mktaccounting.getAccAvailableBal(Account)
			LcAmount 		= LC.Amount
			ApprovedAmount 	= float(LC.ApprovedAmount)
			AccrCurrentInt  = float(LC.AccrCurrentInt) if LC.AccrCurrentInt else float(0)
			AccrCurrentInt 	= mktmoney.toMoney(float(AccrCurrentInt), mktmoney.getCurrencyObj(Currency))
			AccrCurrentInt 	= float(AccrCurrentInt.replace(",", ""))

			# RepSchedule 	=	MKT_REP_SCHEDULE.query.\
			# 					filter(MKT_REP_SCHEDULE.CollectionDate == systemDate).\
			# 					filter(MKT_REP_SCHEDULE.LoanID == LCID).\
			# 					filter(MKT_REP_SCHEDULE.RepStatus == "0").\
			# 					first()
			RepSchedule = RepScheduleObj.filter(MKT_REP_SCHEDULE.CollectionDate == systemDate).first()

			if RepSchedule:
				AccrCurrentInt 	=	float(RepSchedule.Interest)
			LcAmount 		= float(LcAmount) + float(AccrCurrentInt) + float(Charge) - float(WaiveInterest)
			DisbursedStat 	= LC.DisbursedStat

			PD 	= 	MKT_PAST_DUE.query.\
					filter(MKT_PAST_DUE.ID == "PD" + LCID).\
					filter(MKT_PAST_DUE.TotODAmount > 0).\
					first()

			if PD:
				TotODAmount = float(PD.TotODAmount) if PD.TotODAmount else float(0)
				LcAmount 	= float(LcAmount) + float(TotODAmount)

		if DisbursedStat.upper() == "Y":

			PreTerm 	=	[False, 0]

			# If termination with penalty if not penalty, penalty equal 0
			if int(AddDeduct) == 2:
				# get Pre-Termination config and calculate the penalty amount
				PreTerm 	=	mktamt.getLoanRepaymentDetail(LCID)
				# if termination with penalty add penalty to LcAmount

				LcAmount 	+= float(PreTerm[1])
			else:
				PAmountStatus 	= True


			# if Available Balance is smaller than amount needed for Loan Termination get only Available Balance
			if float(AccAvailableBal) < float(LcAmount):

				LastPaidAmount = float(AccAvailableBal)

			# if Available Balance is bigger than amount needed for Loan Termination get LcAmount
			else:

				LastPaidAmount = float(LcAmount)
	else:
		if AddDeduct =='1':
			AmendDateStatus = True
		else:
			AmendDateStatus = False
			
	return jsonify(LastPaidAmount 		= LastPaidAmount,
				   InstallAmount 		= InstallAmount, 
				   PenaltyAmount 		= PenaltyAmount, 
				   PenaltyAmountStatus 	= PAmountStatus,
				   AmendDate 			= str(AmendDate),
				   AmendDateStatus 		= AmendDateStatus)

#Capitalize Interest/Penalty 2018-04-11 Mony
@app.route('/Morakot/CapitalizeAmount', methods=['GET'])
def getCapitalizeAmount():

	Amount 				= 0
	Operation 			= request.args.get('CapitalizeOption')
	WaiveInterest 		= request.args.get('WaiveInterest')
	CollectCurrInt 		= request.args.get('CollectCurrInt')
	LoanID 				= request.args.get("LoanID")


	LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	if LoanObj:
		if Operation == "Y":
			AIR = LoanObj.AccrInterest
			Amount = float(AIR) - float(WaiveInterest) - float(CollectCurrInt)

	return jsonify(Amount=Amount)
#end

def loadBankDate():
	BankDate = mktdate.getBankDate()

	return BankDate

def loadAddDeduct():
	class CAddDeduct(db.Model):
		__tablename__ = 'MKT_LOAN_AMENDMENT'
		def __init__(self, ID, Description):
			super(CAddDeduct, self).__init__()
			self.ID = ID
			self.Description = Description

	AmtObj = []
	Result = [CAddDeduct('1', 'Deduct'), CAddDeduct('2', 'Add')]
	if request.method == 'POST':
		if request.form['Operation'] == "TMN":
			Result = [CAddDeduct('1', 'No Penalty'), CAddDeduct('2', 'With Penalty')]
		else:
			Result = [CAddDeduct('1', 'Deduct'), CAddDeduct('2', 'Add')]


	if g and hasattr(g, 'formID'):
		AmtObj = MKT_LOAN_AMENDMENT_INAU.query.get(g.formID)
		if not AmtObj:
			AmtObj = MKT_LOAN_AMENDMENT.query.get(g.formID)
	if AmtObj:
		if AmtObj.Operation == 'TMN':
			Result = [CAddDeduct('1', 'No Penalty'), CAddDeduct('2', 'With Penalty')]
			
	return Result

class FRM_LOAN_AMENDMENT(exform):

	LoanID 			= 	RemoteTextField(requiredlabel('Loan Contract ID', "*"), [validators.Required()])
	Customer 		= 	TextField(getLanguage("Customer Name"))
	VB 				= 	TextField(getLanguage("Village Bank"))
	Operation 		= 	SelectField(requiredlabel(getLanguage('Operation'), '*'),
							choices=[('AMT', getLanguage('Amendment')),
									 ('TMN', getLanguage('Termination'))],
							coerce=str,
							validators=[validators.Required()]
						)
	AddDeduct 		= QuerySelectField(requiredlabel(getLanguage('Mode'), "*"),
						query_factory=loadAddDeduct,
						get_label=u'Description'
					)
	AmendDate 		= 	DateField(requiredlabel(getLanguage("Amend Date"), "*"), [validators.Required()], default=loadBankDate)
	Currency 		=	TextField(getLanguage("Currency"), default="KHR")
	Amount 			=	TextField(requiredlabel(getLanguage("Principal Amount"), "*"), default=0)
	PenaltyAmount	=	TextField("Penalty Terminate", default="0")
	WaiveInterest	=	TextField("Waive Interest Current Installment", default="0")
	CollectCurrInt	=	TextField("Collect Interest Current Installment", default="0")
	LoanType 		= 	SelectField(getLanguage('Loan Type'),
							choices=[('N', getLanguage('Normal')),
									 ('R', getLanguage('Restructured'))],
							coerce=str,
							default='N')
	Restructure 	=  	SelectField('Restructure',
							choices=[('Y', getLanguage('Yes')),
									 ('N', getLanguage('No'))],
							coerce=str,
							default='N')
	#Capitalize Interest/Penalty 2018-04-11 Mony
	CapitalizeOption 	= 	SelectField("Capitalize Option",
							choices=[('N', "No"),
									 ('Y', "Yes")],
							coerce=str,
							default='N')
	CapitalizeAmount	=	TextField("Capitalize Int. Amount", default="0")
	#end
	LastPaidAmount 	=	TextField("Last Paid Amount", default=0)
	InstallAmount 	=	TextField("Installment Amount", default=0)
	PrevDisbursed	=	TextField("Previous Disbursed", default="0")
	AmendmentStat 	= 	TextField(requiredlabel("Amendment Stat",'*'),default='N')
	KeepPrevSchedule	=	SelectField('Keep Previous Schedule',
							choices=[('Y', getLanguage('Yes')),
									 ('N', getLanguage('No'))],
							coerce=str,
							default='Y')
	Reason 			=	TextAreaField("Reason")

	InterestOld 	=	TextField(getLanguage("Old Interest"), [validators.Required()], default=0, description="1-Term and Installment")
	Interest 		=	TextField(requiredlabel(getLanguage("New Interest"), "*"), [validators.Required()], default=0, description="1-Term and Installment")

	FreqTypeOld 	= 	TextField(getLanguage("Old Frequency Type"), default="", description="1-Term and Installment")
	FreqType 		= 	SelectField(requiredlabel(getLanguage("New Frequency Type"), "*"),
							choices=[('__None', '--%s--' %getLanguage("None")),
									 ('1', '1. %s' %getLanguage("Monthly")),
									 ('2', '2. %s' %getLanguage("Weekly")),
									 ('3', '3. %s' %"Daily")],
							coerce=str,
							description="1-Term and Installment"
						)
	FrequencyOld 	= 	TextField(getLanguage("Old Frequency"), default="0", description="1-Term and Installment")


	Frequency 		= 	IntegerField(requiredlabel(getLanguage("New Frequency"), "*"), [validators.Required()], default=0, description="1-Term and Installment")

	TermOld 		= 	TextField("%s (%s)" %(getLanguage("Old Term"), getLanguage("Month")), [validators.Required()], default=0, description="1-Term and Installment")
	Term 			= 	TextField(requiredlabel("%s (%s)" %(getLanguage("New Term"), getLanguage("Month")), "*"), [validators.Required()], default=0, description="1-Term and Installment")
	
	InstallmentOld 	= 	TextField(getLanguage("Old Installment"), [validators.Required()], default=0, description="1-Term and Installment")
	Installment 	= 	TextField(requiredlabel(getLanguage("New Installment"), "*"), [validators.Required()], default=0, description="1-Term and Installment")

	def validate_LoanID(form, field):
		BankDate= 	mktdate.getBankDate()
		Branch 	= 	mktuser.getBranch(session["ChangeBranch"]).ID
		LoanID 	= 	form.LoanID.data
		AmendID =	request.form["ID"]
		LoanObj = 	MKT_LOAN_CONTRACT.query.get(LoanID)
		PDObj 	= 	MKT_PAST_DUE.query.filter(MKT_PAST_DUE.LoanID == LoanID).first()
		LoanAmendObj =	MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.LoanID==LoanID,
														MKT_LOAN_AMENDMENT.AmendDate>str(BankDate),
														MKT_LOAN_AMENDMENT.ID!=AmendID,
														MKT_LOAN_AMENDMENT.AmendmentStat=="N").\
											     order_by(MKT_LOAN_AMENDMENT.AmendDate.desc()).first()
		if not LoanAmendObj:
			LoanAmendObj =	MKT_LOAN_AMENDMENT_INAU.query.filter(MKT_LOAN_AMENDMENT_INAU.LoanID==LoanID,
																 MKT_LOAN_AMENDMENT_INAU.AmendDate>=str(BankDate),
																 MKT_LOAN_AMENDMENT_INAU.ID!=AmendID).\
												 order_by(MKT_LOAN_AMENDMENT_INAU.AmendDate.desc()).first()
		if not LoanObj:
			raise ValidationError("Loan contract %s dose not exists." %LoanID)
		else:
			if LoanObj.Branch != Branch:
				raise ValidationError("Loan contract %s is in different branch %s." %(LoanID,LoanObj.Branch))
			else:
				if LoanObj.MaturityDate < str(BankDate) and not PDObj:
					raise ValidationError("Loan contract %s has reached maturity date on %s." %(LoanID,LoanObj.MaturityDate))
				if LoanObj.DisbursedStat == "N":
					raise ValidationError("Loan contract %s has not been disbursed yet." %(LoanID))
		if LoanAmendObj:
			"""Validate existing loan amend future date"""
			raise ValidationError("This %s is exist in future amend. You can not do amend until future amend is executed or reverse." %(LoanID))

	def validate_Amount(form, field,**args):

		Option 	= request.form['Operation']
		Amount 	= form.Amount.data
		PenaltyAmount = form.PenaltyAmount.data
		WaiveInterest = form.WaiveInterest.data
		CollectCurrInt = form.CollectCurrInt.data

		try:
			Amount = Decimal(Amount)
		except:
			raise ValidationError("This field must be in numeric format.")

		try:
			PenaltyAmount = Decimal(PenaltyAmount.replace(',',''))
		except:
			raise ValidationError("This field (Penalty Amount) must be in numeric format.")

		try:
			WaiveInterest = Decimal(WaiveInterest.replace(',',''))
		except:
			raise ValidationError("This field (Waive Current Interest) must be in numeric format.")

		try:
			CollectCurrInt = Decimal(CollectCurrInt.replace(',',''))
		except:
			raise ValidationError("This field (Collect Current Interest) must be in numeric format.")

		if Amount != 0:

			if Option == "AMT":

				LCID 	= form.LoanID.data
				LC 		= MKT_LOAN_CONTRACT.query.get(LCID)
				if LC:
					Currency 	= LC.Currency
					LoanProduct = LC.LoanProduct
					Account 	= LC.Account
					Disbursed 	= LC.Disbursed if LC.Disbursed else 0
					LcAmount 	= LC.Amount if LC.Amount else 0
					AddDed 		= request.form['AddDeduct']
					Product 	= MKT_LOAN_PRODUCT.query.get(LoanProduct)

					if int(AddDed) == 1:
						''' Validate Minimum Reduce Perce '''
						if Product:
							ReduceAmount = Decimal(Product.ReduceAmount)
							if ReduceAmount:
								CheckAmount = ReduceAmount * Disbursed / 100
								if Amount < CheckAmount:
									raise ValidationError(Markup("For product <a href='javascript:void(0)' onClick=CustomClickView('Loan&nbspProduct&nbspSetup-%s','LoanProductSetup?ID=%s')><u>%s</u></a>, you need at least <b>%s %% of Disbursed Amount</b> or <b>%s</b> to reduce principal.")
											%(Product.ID,Product.ID,Product.Description, ReduceAmount, mktmoney.toMoney(float(CheckAmount), mktmoney.getCurrencyObj(Currency), 2)))

						# Disbursed 	= Disbursed - Amount
						LcAmount 	= LcAmount 	- Amount
						AccBal 		= mktaccounting.getAccAvailableBal(Account)

						PD 	= 	MKT_PAST_DUE.query.\
								filter(MKT_PAST_DUE.ID == "PD" + LCID).\
								filter(MKT_PAST_DUE.TotODAmount > 0).\
								first()

						CheckBal 	= 	Decimal(AccBal)
						TotODAmount =	0
						if PD:
							TotODAmount = PD.TotODAmount if PD.TotODAmount else 0
							CheckBal 	= CheckBal - TotODAmount

						systemDate 	= 	mktdate.getBankDate()
						AmendDate 	=	request.form['AmendDate']
						RepSchedule =	MKT_REP_SCHEDULE.query.\
										filter(MKT_REP_SCHEDULE.CollectionDate == str(systemDate)).\
										filter(MKT_REP_SCHEDULE.LoanID == LCID).\
										filter(MKT_REP_SCHEDULE.RepStatus == "0").\
										first()

						CollectAmount 		=	0
						if RepSchedule:
							CollectAmount 	=	(RepSchedule.Principal if RepSchedule.Principal else 0) + (RepSchedule.Interest if RepSchedule.Interest else 0) + (RepSchedule.Charge if RepSchedule.Charge else 0)
							CheckBal 		=	CheckBal - CollectAmount

							# Waive Current Interest 
							if WaiveInterest > 0:
								CheckBal  		=	CheckBal + Decimal(WaiveInterest)

						# Penalty on amend
						if PenaltyAmount > 0:
							CheckBal 		= 	CheckBal - PenaltyAmount

						if CollectCurrInt > 0:
							CheckBal 		= 	CheckBal - CollectCurrInt

						RoundedCheckBal 	=	mktmoney.toMoney(float(CheckBal), mktmoney.getCurrencyObj(Currency)).replace(',','')
						RoundedAmount 		=	mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency)).replace(',','')
						CollectAmount 		=	float(mktmoney.toMoney(float(CollectAmount), mktmoney.getCurrencyObj(Currency)).replace(',',''))


						''' Validate if DD has sufficient amount '''
						if Decimal(RoundedCheckBal) < Decimal(RoundedAmount):
							Msg  =	"<br>Account available balance is <b>%s</b>. " %str(mktmoney.toMoney(float(AccBal), mktmoney.getCurrencyObj(Currency), 2))
							if CollectAmount > 0:
								Msg += 	"<br>Overdue balance is <b>%s</b>." %str(mktmoney.toMoney(float(TotODAmount), mktmoney.getCurrencyObj(Currency), 2))
							if CollectAmount > 0:
								Msg +=	"<br>Principal and interest to be collected today is <b>%s</b>." %str(mktmoney.toMoney(float(CollectAmount), mktmoney.getCurrencyObj(Currency), 2))
							Msg +=	"You need at least <b>%s</b> to deduct principal." %str(mktmoney.toMoney(float(Amount) - float(CheckBal), mktmoney.getCurrencyObj(Currency), 2))
							raise ValidationError(Markup("Account <a href='javascript:void(0)' onClick=CustomClickView('Account&nbspStatement','AccountStatement/?ID=%s')><u>%s</u></a> doesn't have sufficient fund. %s" \
														%(Account, Account, Msg)))

					else:
						# Disbursed 	= Disbursed + Amount
						LcAmount 	= LcAmount 	+ Amount
					''' Call function to check Maximum and Minimum Disbursed Amount '''
					mktaccounting.checkMaxMinBalance(Account, Currency, Decimal(LcAmount), 'Cr')
					# mktloanapp.checkMaxMinAmount(Disbursed, LcAmount, Currency, LoanProduct)

				else:
					raise ValidationError("Loan contract not found.")

		#validate amount in Terminate		
		kwargs = {	'LoanID' 	: request.form['LoanID'],
					'Currency'	: request.form['Currency'],
					'Operation'	: request.form['Operation'],
					'AddDeduct' : request.form['AddDeduct'],
					'Amount'	: request.form['Amount'],
					'LoanType'	: request.form['LoanType'],
					'PenaltyAmount'  : Decimal(request.form['PenaltyAmount'].replace(',','')),
					'KeepPrevSchedule' : request.form['KeepPrevSchedule'],
					'WaiveInterest': request.form['WaiveInterest']
				}

		kwargs.update(args)

		ValidateMessageAmend = getValidateMessageAmend(**kwargs)
		if ValidateMessageAmend[0]:
			raise ValidationError(Markup(ValidateMessageAmend[1]))

	def validate_Term(form, field):
		try:
			Option = request.form['Operation']
			if Option != "TMN":
				TermValue = math.ceil(float(form.Term.data))
				LCID = form.LoanID.data
				LC = MKT_LOAN_CONTRACT.query.get(LCID)
				if LC:
					Currency = LC.Currency
					LoanProduct = LC.LoanProduct
					''' Call function to check Maximum and Minimum Term '''
					mktloanapp.checkMaxMinTerm(TermValue, Currency, LoanProduct)
				else:
					raise ValidationError("Loan contract not found.")
		except:
			raise

	def validate_PenaltyAmount(form, field):
		try:
			PenaltyAmount = field.data
			PDParamObj 		= 	mktparam.getPDParam()
			Param 			= 	PDParamObj.RepOrder.split()
			Mode=request.form['AddDeduct']
			if not PenaltyAmount:
				raise ValidationError("Penalty Amount cannot be blank and must be number.")
			else:
				if Mode=="2":
					if 'PE' not in Param:
						Link 	= "<a href='javascript:void(0)' onClick=CustomClickView('PD&nbspParameters','PDParameter/?ID=SYSTEM')> PD Parameter</a>"
						raise ValidationError(Markup("Please set repayment order for penalty in %s. Ex: PR IN PE"%Link))	
		except:
			raise

	def validate_Interest(form, field):
		Option 			= request.form['Operation']
		if Option != "TMN":
			InputRate 	= form.Interest.data
			LCID 		= form.LoanID.data
			LC 			= MKT_LOAN_CONTRACT.query.get(LCID)

			if LC:
				LoanPro 	= LC.LoanProduct
				Currency 	= LC.Currency

				Msg 		= mktaccount.checkInterestRate("LC", LoanPro, InputRate, Currency)

				if Msg:
					raise ValidationError(Msg)
			else:
				raise ValidationError("Loan contract not found.")
	
	def validate_AmendDate(form, field):
		try:
			Option 		= request.form['Operation']
			# if Option != "TMN":
			Holiday 	= mktHoliday.getHoliday()
			AmendDate 	= request.form['AmendDate']
			Mode 		= request.form['AddDeduct']
			AmendDate 	= datetime.strptime(str(AmendDate),'%Y-%m-%d').date()
			Check 		= mktDay.isNonWorkingDay(AmendDate, Holiday)
			SystemDate 	= 	mktdate.getBankDate()
			if AmendDate<SystemDate:
				raise ValidationError("AmendDate must be equal or greater than bank date.")
			elif AmendDate>SystemDate:
				if Option =="TMN":
					raise ValidationError("Amend Date must be the same bank date.")
				elif Option=="AMT" and Mode!="2":
					raise ValidationError("Amend Date must be the same bank date.")
				elif Option=="AMT" and Mode=="2":
					'''
					top up future date must be between current installment
					'''
					LoanID 		=	request.form['LoanID']
					ScheduleObj 	=	MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID,
																	  MKT_REP_SCHEDULE.CollectionDate>str(SystemDate)).\
																order_by(MKT_REP_SCHEDULE.CollectionDate.asc()).first()
					if ScheduleObj:
						NextCollDate = ScheduleObj.CollectionDate
						if str(AmendDate)>NextCollDate:
							raise ValidationError("Amend future date %s could not over %s."%(AmendDate,ScheduleObj.CollectionDate))
			if Check:
				raise ValidationError("Value date must be different from holiday.")

			SystemDate 	= 	mktdate.getBankDate()
			StrSysteDate=	str(SystemDate).split("-")
			StrAmendDate=	str(AmendDate).split("-")
			SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
			ValueMonth 	=	"%s%s" %(StrAmendDate[0], StrAmendDate[1])

			if int(ValueMonth) < int(SysMonth):
				raise ValidationError("Value date must be different from previous month.")

			#Capitalize Interest/Penalty 2018-04-11 Mony
			CapitalizeOption = request.form['CapitalizeOption']
			if CapitalizeOption == "Y":
				if str(AmendDate) != str(SystemDate):
					raise ValidationError("Amend date must be equal to bank date.")
			#end

		except:
			raise

	def validate_WaiveInterest(form, field):
		WaiveInterest 	= 	field.data
		LoanID 			=	request.form['LoanID']
		CollectCurrInt	= 	request.form['CollectCurrInt']

		try:
			WaiveInterest = Decimal(WaiveInterest.replace(',',''))
		except:
			raise ValidationError("Waive Interest cannot blank and must be number.")

		try:
			CollectCurrInr = Decimal(CollectCurrInt.replace(',',''))
		except:
			return

		#validate whether waive + collect is exceed current accr interest installment
		LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		if LoanObj and WaiveInterest > 0:
			Currency 	   = LoanObj.Currency
			AccrCurrentInt   = LoanObj.AccrCurrentInt
			AccrCurrentInt   = mktmoney.toMoney(float(AccrCurrentInt), mktmoney.getCurrencyObj(Currency))
			AccrCurrentInt   = AccrCurrentInt.replace(",","")

			if Decimal(WaiveInterest) + Decimal(CollectCurrInt) > Decimal(AccrCurrentInt):
				raise ValidationError("Waive + Collect Interest cannot bigger than Current Interest Accrued %s " % mktmoney.toMoney(float(AccrCurrentInt), mktmoney.getCurrencyObj(Currency)))

	def validate_Restructure(form ,field):
		LoanType 	=	request.form['LoanType']
		Restructure = 	request.form['Restructure']
		LoanID 		= 	request.form['LoanID']
		ContractObj = 	MKT_LOAN_CONTRACT.query.get(LoanID)

		if ContractObj:
			if ContractObj.LoanType == "N" and LoanType == "R" and Restructure == "N":
				raise ValidationError("For first time restructure, Restructure: must be Yes.")		

		if LoanType=="N" and Restructure=="Y":
			raise ValidationError("Loan Type is Normal, Restructure field should be 'No'.")

	#Capitalize Interest/Penalty 2018-04-11 Mony
	def validate_CapitalizeAmount(form, field):
		Amount 				= 	field.data
		LoanID 				=	request.form['LoanID']
		Operation 			= 	request.form['Operation']
		CapitalizeOption 	= 	request.form['CapitalizeOption']
		WaiveInterest 		= 	request.form['WaiveInterest']
		AddDeductAmount 	= 	request.form['Amount']

		try:
			Amount = Decimal(Amount.replace(',',''))
		except:
			raise ValidationError("Capitalize Interest cannot blank and must be number.")

		#validate whether capitalize is exceed (AIR - Waive Current Interest) or not
		#cannot capitalize over (AIR - Waive Current Interest)
		CheckAmount = checkAvialibleAmount(LoanID=LoanID,Amount=Amount,Operation=Operation,
										   WaiveInterest=WaiveInterest,CapitalizeOption=CapitalizeOption,
										   AddDeductAmount=AddDeductAmount)
		if CheckAmount[0] == False:
			raise ValidationError(CheckAmount[1])

	def validate_LoanType(form,field):
		LoanType = field.data #N=Normal, R=Restructure
		CapitalizeAmount 	= request.form['CapitalizeAmount']
		CapitalizeOption 	= request.form['CapitalizeOption']

		if CapitalizeOption == "Y" and float(CapitalizeAmount)>0:
			CAPITALIZE_WITH_RESTRUCTURE = mktsetting.getAppSetting('CAPITALIZE_WITH_RESTRUCTURE') #Y = Allow Capitalize when amend Loan Type = R only, N = Allow Capitalize with any loan type
			if CAPITALIZE_WITH_RESTRUCTURE == "Y":
				if LoanType == "N":
					raise ValidationError("Must be Restructure to capitalize interest.")	

	#end

	def validate_CollectCurrInt(form, field):
		CollectCurrInt 		= field.data
		LoanID 				= request.form['LoanID']
		WaiveInterest 		= request.form['WaiveInterest']
		Amount 				= request.form['Amount']


		try:
			CollectCurrInt 	= Decimal(CollectCurrInt.replace(',',''))
		except:
			raise ValidationError("Collect Current Interest cannot be blank and must be number.")

		try:
			WaiveInterest = Decimal(WaiveInterest.replace(',',''))
		except:
			return

		SystemDate 	= 	mktdate.getBankDate()
		AmendDate 	=	request.form['AmendDate']
		RepSchedule =	MKT_REP_SCHEDULE.query.\
						filter(MKT_REP_SCHEDULE.CollectionDate == str(SystemDate)).\
						filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
						filter(MKT_REP_SCHEDULE.RepStatus == "0").\
						first()

		if RepSchedule and CollectCurrInt > 0:
			raise ValidationError("Loan is currently in collection day. System will automatically collect the installment. Can not do manual collect interest.")

		#validate whether waive + collect is exceed current accr interest installment
		LoanObj 	= MKT_LOAN_CONTRACT.query.get(LoanID)
		Currency 	= LoanObj.Currency
		
		if LoanObj and CollectCurrInt > 0:
		
			AccrCurrentInt   = LoanObj.AccrCurrentInt
			AccrCurrentInt   = mktmoney.toMoney(float(AccrCurrentInt), mktmoney.getCurrencyObj(Currency))
			AccrCurrentInt   = AccrCurrentInt.replace(",","")

			if Decimal(WaiveInterest) + Decimal(CollectCurrInt) > Decimal(AccrCurrentInt):
				raise ValidationError("Waive + Collect Interest cannot bigger than Current Interest Accrued %s " % mktmoney.toMoney(float(AccrCurrentInt), mktmoney.getCurrencyObj(Currency)))

		if Decimal(Amount) == 0 and CollectCurrInt > 0:
			
			AccBal 		= mktaccounting.getAccAvailableBal(LoanObj.Account)
	
			if Decimal(AccBal) < Decimal(CollectCurrInt):
				Msg =	"You need at least <b>%s</b> to collect interest." %str(mktmoney.toMoney(float(CollectCurrInt) - float(AccBal), mktmoney.getCurrencyObj(Currency), 2))
				raise ValidationError(Markup("Account <a href='javascript:void(0)' onClick=CustomClickView('Account&nbspStatement','AccountStatement/?ID=%s')><u>%s</u></a> doesn't have sufficient fund. %s" \
											%(LoanObj.Account, LoanObj.Account, Msg)))



	@staticmethod
	def reverseRec():
		return True, "%s Record is not allowed to reverse." %(msg_warning)

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def moneyField():
		return [("Amount", "Currency"),("PenaltyAmount", "Currency"),("LastPaidAmount", "Currency"), ("InstallAmount", "Currency"),
		("CollectCurrInt","Currency"), ("WaiveInterest", "Currency"),("PrevDisbursed","Currency")]

	@staticmethod
	def setWidth():
		return [
				("Installment", 	len2),
				("InstallmentOld", 	len2),
				("Term", 			len2),
				("TermOld", 		len2),
				("InterestOld", 	len2),
				("Interest", 		len2),
				("Currency", 		len1),
				("FrequencyOld", 	len2),
				("Frequency", 		len2),
				("FreqTypeOld", 	len2),
				("Amount", 			len3),
				("PenaltyAmount", 	len3),
				("FreqType", 		len2),
				("AmendDate", 		len3),
				("AmendmentStat", 	len1)]

	@staticmethod
	def setDisable():
		Fields = [("PrincipalOld"), ("InterestOld"), ("InstallmentOld"),
				  ("TermOld"), ("Currency"), ("FrequencyOld"), ("FreqTypeOld"),
				  ("Customer"), ("VB"),('AmendDate'),('LastPaidAmount'),('InstallAmount'),
				  ("AmendmentStat"),('PrevDisbursed')]

		#Capitalize Interest/Penalty 2018-04-11 Mony	  
	  	Fields.append(('CapitalizeAmount'))
	  	#end

		if request.method=="POST":
			if request.form.get('Operation')=='AMT':
				if request.form.get('AddDeduct')=='2':
					Fields.remove(('AmendDate'))
		else:
			ID 			=	g.formID
			AmendObj 	=	MKT_LOAN_AMENDMENT_INAU.query.get(ID)
			if not AmendObj:
				AmendObj 	=	MKT_LOAN_AMENDMENT.query.get(ID)
			if AmendObj:
				Operation 	=	AmendObj.Operation
				AddDeduct 	=	AmendObj.AddDeduct
				if Operation=="AMT":
					if AddDeduct=="2":
						Fields.remove(('AmendDate'))
		return Fields

	@staticmethod
	def formatMoney():
		return ["Amount","PrevDisbursed"], "Currency"

	@staticmethod
	def listField():
		return ["ID", "LoanID", "Operation", "AddDeduct", "Amount",	"AmendDate", "LoanType"], ["ID*LK*LN"]

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#LastPaidAmount').val(data.LastPaidAmount);$('#InstallAmount').val(data.InstallAmount)"
		varname 		= "AddDeduct:$('#AddDeduct').val(),Operation:$('#Operation').val(),LoanID:$('#LoanID').val(),Currency:$('#Currency').val(),AmendmentAmount:$('#Amount').val(),WaiveInterest:$('#WaiveInterest').val()"
		fun 			= ["Operation", varname, fielddisplay, "/Morakot/SetLastPaidAmount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#LastPaidAmount').val(data.LastPaidAmount),$('#InstallAmount').val(data.InstallAmount)"
		fielddisplay 	+= ",$('#PenaltyAmount').val(data.PenaltyAmount),$('#PenaltyAmount').attr('readonly', data.PenaltyAmountStatus)"
		fielddisplay 	+= ",$('#AmendDate').val(data.AmendDate),$('#AmendDate').attr('readonly', data.AmendDateStatus)"
		varname 		= "AddDeduct:$('#AddDeduct').val(),Operation:$('#Operation').val(),LoanID:$('#LoanID').val(),Currency:$('#Currency').val(),AmendmentAmount:$('#Amount').val(),WaiveInterest:$('#WaiveInterest').val()"
		fun 			= ["AddDeduct", varname, fielddisplay, "/Morakot/SetLastPaidAmount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#LastPaidAmount').val(data.LastPaidAmount);$('#InstallAmount').val(data.InstallAmount)"
		varname 		= "AddDeduct:$('#AddDeduct').val(),Operation:$('#Operation').val(),LoanID:$('#LoanID').val(),Currency:$('#Currency').val(),AmendmentAmount:$('#Amount').val(),WaiveInterest:$('#WaiveInterest').val()"
		fun 			= ["WaiveInterest", varname, fielddisplay, "/Morakot/SetLastPaidAmount", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Interest').val(data.Interest),$('#InterestOld').val(data.Interest),$('#Installment').val(data.Installment),$('#InstallmentOld').val(data.Installment),$('#Term').val(data.Term),$('#TermOld').val(data.Term),$('#Currency').val(data.Currency)"
		fielddisplay 	+= ",$('#Frequency').val(data.Frequency),$('#FrequencyOld').val(data.FrequencyOld),$('#FreqTypeOld').val(data.FreqTypeOld)"
		fielddisplay 	+= ",$('#FreqType').select2('data', {'id':data.FreqType,'text':data.FreqTypeDesc})"
		fielddisplay 	+= ",$('#Customer').val(data.CustomerName)"
		fielddisplay 	+= ",$('#VB').val(data.VB)"
		fielddisplay 	+= ",$('#PenaltyAmount').val(data.PenaltyAmount)"
		fielddisplay 	+= ",$('#LoanType').select2('data',{'id':data.LoanType,'text':data.LoanTypeDes})"
		varname 		= "LoanID:$('#LoanID').val(),Operation:$('#Operation').val(),AddDeduct:$('#AddDeduct').val(),AmendmentAmount:$('#Amount').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/LoanInformation", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Amount').attr('readonly', data.Bool)"
		fielddisplay 	+= ";$('#Frequency').attr('readonly', data.Bool)"
		fielddisplay 	+= ";$('input[name=Term]').attr('readonly', data.Bool)"
		fielddisplay 	+= ";$('input[name=Installment]').attr('readonly', data.Bool)"
		fielddisplay 	+= ";$('input[name=Principal]').attr('readonly', data.Bool)"
		fielddisplay 	+= ";$('input[name=Interest]').attr('readonly', data.Bool)"
		# fielddisplay 	+= ",$('input[name=AmendDate]').attr('readonly', data.Bool)"
		fielddisplay 	+= ",$('#AmendDate').val(data.AmendDate)"
		fielddisplay 	+= ",$('#AddDeduct').html(data.ModeData)"
		fielddisplay 	+= ",$('#AddDeduct').select2('data', {'id':data.Default,'text':data.DefaultText})"
		fielddisplay 	+= ",$('#PenaltyAmount').val(data.PenaltyAmount),$('#PenaltyAmount').attr('readonly', data.PenaltyAmountStatus)"
		fielddisplay 	+= ",$('#AmendDate').val(data.AmendDate),$('#AmendDate').attr('readonly', data.AmendDateStatus)"
		varname 		= "Operation:$('#Operation').val(),AmendDate:$('#AmendDate').val(),LoanID:$('#LoanID').val(),AmendmentAmount:$('#Amount').val()"
		fun 			= ["Operation", varname, fielddisplay, "/Morakot/OperationType", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),ValueDate:$('#AmendDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CalculateInstallment", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),ValueDate:$('#AmendDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Frequency", varname, fielddisplay, "/Morakot/CalculateInstallment", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),ValueDate:$('#AmendDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["FreqType", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#PenaltyAmount').val(data.PenaltyAmount)"
		varname 		= "LoanID:$('#LoanID').val(),Operation:$('#Operation').val(),AddDeduct:$('#AddDeduct').val(),AmendmentAmount:$('#Amount').val()"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/LoanInformation", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#PrevDisbursed').val(data.Disbursed);"
		varname 		= "LoanID:$('#LoanID').val(),Operation:$('#Operation').val(),AddDeduct:$('#AddDeduct').val(),AmendmentAmount:$('#Amount').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/LoanInformation", "change"]
		hotfield.append(fun)

		#Capitalize Interest/Penalty 2018-04-11 Mony	
		fielddisplay 	= "$('#CapitalizeAmount').val(data.Amount)"
		varname 		= "CapitalizeOption:$('#CapitalizeOption').val(),WaiveInterest:$('#WaiveInterest').val(),LoanID:$('#LoanID').val()"
		varname 		+= ",CollectCurrInt:$('#CollectCurrInt').val()"
		fun 			= ["CapitalizeOption", varname, fielddisplay, "/Morakot/CapitalizeAmount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CapitalizeAmount').val(data.Amount)"
		varname 		= "CapitalizeOption:$('#CapitalizeOption').val(),WaiveInterest:$('#WaiveInterest').val(),LoanID:$('#LoanID').val()"
		varname 		+= ",CollectCurrInt:$('#CollectCurrInt').val()"
		fun 			= ["WaiveInterest", varname, fielddisplay, "/Morakot/CapitalizeAmount", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CapitalizeAmount').val(data.Amount)"
		varname 		= "CapitalizeOption:$('#CapitalizeOption').val(),WaiveInterest:$('#WaiveInterest').val(),LoanID:$('#LoanID').val()"
		varname 		+= ",CollectCurrInt:$('#CollectCurrInt').val()"
		fun 			= ["CollectCurrInt", varname, fielddisplay, "/Morakot/CapitalizeAmount", "blur"]
		hotfield.append(fun)
		#end

		return hotfield

		
	@staticmethod
	def beforeAuthorize():

		ID 			= g.formID
		# mktamt.getLoanAmendment(ID,AmendDate=AmendDate)
		Status 	= ""
		LoanAppList = []
		LoanAmendmentObj 	=	MKT_LOAN_AMENDMENT_INAU.query.get(ID)
		BankDate 			=	str(mktdate.getBankDate())

		if LoanAmendmentObj:
			Status 				= 	LoanAmendmentObj.Status
			LcID 				=	LoanAmendmentObj.LoanID
			Op 					= 	LoanAmendmentObj.Operation
			Mode 			 	=	LoanAmendmentObj.AddDeduct
			if Op.upper() == "AMT":
				# check repayment schedule for this loan
				RepSchedule = MKT_REP_SCHEDULE_INAU.query.\
							  filter(MKT_REP_SCHEDULE_INAU.LoanID == LcID).\
							  all()

				if not RepSchedule:
					flash(msg_error + " Repayment schedule not found for loan %s." %LcID)
					return False
				else:
					Resource = 'INAU'
					mktamt.updateNoInstallemnt(ID, LcID, Resource)
		
		if Status != "RNAU":

			Audit 		= 	mktaudit.getAuditrail()
			Inputter	= 	LoanAmendmentObj.Inputter
			Authorizer 	= 	Audit['Authorizer']
			AmendDate 	=	""
			if LoanAmendmentObj:
				AmendDate 	= 	str(LoanAmendmentObj.AmendDate)
				BankDate 	= 	str(mktdate.getBankDate())
			if AmendDate < BankDate:
				flash(msg_error + " Value Date must be the same bank date.")
				return False
			elif AmendDate > BankDate:
				if Op!="AMT" and Mode!='2':
					flash(msg_error + " Value Date must be the same bank date.")
					return False

			if Inputter.upper() == Authorizer.upper():
				flash(msg_error + " user who authorize must differ from input.")
				return False
			elif AmendDate == BankDate:				
				Auth 	=	mktamt.getLoanAmendment(ID=ID,EOD=0,Date=AmendDate,Resouce="INAU")
				if int(Auth) == 0:
					print "There something wrong in beforeAuthorize method of main amendment form."
					return False
				#Add notification
				event_code 		= "200"
				notification 	= mktnotification.getSignal(ID,MKT_LOAN_AMENDMENT_INAU,Status,event_code,'LoanAmendment') #ID,Model,Code
				mktnotification.insertNotify(notification)

			return True

		else:
			return True


	@staticmethod
	def redirectAuthorize():
		ID 		= g.formID
		Record 	= MKT_LOAN_AMENDMENT.query.get(ID)
		if Record:
			LoanID 		= Record.LoanID
			AddDed 		= Record.AddDeduct
			Operation 	= Record.Operation
			if Operation.upper() == "AMT":
				return "/Morakot/RepaymentSchedule/?ID=" + LoanID

		else:
			flash(msg_error + " Loan amendment not found.")
			return False

		return None

	@staticmethod
	def redirectAfterInsert():

		ID 			= request.form['ID']
		LoanID 		= request.form['LoanID']
		Resource 	= "INAU"
		NumOfAuth 	= g.getNAuthorize
		AmtID 		= request.form['ID']
		Option 		= request.form['Operation']
		Status 		= request.form['Status']
		event_code 	= "0"

		if int(NumOfAuth) == 0:

			Resource 	= ""
			Auth 		= mktamt.setLoanAmendment(ID, Resource, 0)
			if int(Auth) == 0:
				return False

			db.session.commit()
			if Option != "TMN":

				#Add notification
				event_code 		= mktnotification.getCode(Status,NumOfAuth)
				notification 	= mktnotification.getSignal(ID,MKT_LOAN_AMENDMENT,Status,event_code,'LoanAmendment') #ID,Model,Code
				mktnotification.insertNotify(notification)

		else:
			if Option != "TMN":

				#Add notification
				event_code 		= mktnotification.getCode(Status,NumOfAuth)
				notification 	= mktnotification.getSignal(ID,MKT_LOAN_AMENDMENT,Status,event_code,'LoanAmendment') #ID,Model,Code
				mktnotification.insertNotify(notification)

		if Option != "TMN":
			# Delete REP_SCHEDULE_INAU after save record
			mktrepayment.DeleteScheduleAfterSave(LoanID)
			if int(event_code) == 300:

				Manual 	= 	MKT_SCHED_MANUAL.query.\
							filter(MKT_SCHED_MANUAL.LoanID == LoanID).\
							all()

				if Manual:

					return "/Morakot/ScheduleManual/"+ LoanID +"?Amendment=Yes&AmtID=" + ID + "&Resource=" + Resource + "&Edit=Yes"

			return "/Morakot/ScheduleDefine/?Operation=New&ContractID=" + LoanID + "&Resource=" + Resource + "&Amendment=YES&AmtID=" + AmtID
		else:
			return None

	@staticmethod
	def IsAcceptOverride(**args):
		kwargs = {	'LoanID' 	: request.form['LoanID'],
					'Currency'	: request.form['Currency'],
					'Operation'	: request.form['Operation'],
					'AddDeduct' : request.form['AddDeduct'],
					'Amount'	: request.form['Amount'],
					'LoanType'	: request.form['LoanType'],
					'PenaltyAmount'  : Decimal(request.form['PenaltyAmount'].replace(',','')),
					'KeepPrevSchedule' : request.form['KeepPrevSchedule'],
					'WaiveInterest': request.form['WaiveInterest']
				}
		
		kwargs.update(args)
		Result = setCofirmMessageAmend(**kwargs)
		return Result[0], Result[1]

	@staticmethod
	def IsAcceptOverrideINAU(**args):
		AmtID 		=	g.formID
		AmtObj 		=	MKT_LOAN_AMENDMENT_INAU.query.get(AmtID)

		if AmtObj:
			LoanID 		= AmtObj.LoanID
			Currency 	= AmtObj.Currency
			Operation	= AmtObj.Operation
			AddDeduct 	= AmtObj.AddDeduct
			Amount		= AmtObj.Amount
			LoanType 	= AmtObj.LoanType
			PenaltyAmount	 = 	AmtObj.PenaltyAmount
			KeepPrevSchedule =  AmtObj.KeepPrevSchedule
			WaiveInterest = AmtObj.WaiveInterest
			InstallmentOld 	= AmtObj.InstallmentOld
			InterestOld 	= AmtObj.InterestOld
			FrequencyOld 	= AmtObj.FrequencyOld
			FreqTypeOld 	= AmtObj.FreqTypeOld
			Installment 	= AmtObj.Installment
			Interest 		= AmtObj.Interest
			Frequency 		= AmtObj.Frequency
			FreqType 		= AmtObj.FreqType
			kwargs = {	'LoanID' 	: LoanID,
						'Currency'	: Currency,
						'Operation'	: Operation,
						'AddDeduct' : AddDeduct,
						'Amount'	: Amount,
						'LoanType'	: LoanType,
						'BeforeAuth': 'Y',
						'PenaltyAmount'  : PenaltyAmount,
						'KeepPrevSchedule' : KeepPrevSchedule,
						'WaiveInterest'	: WaiveInterest,
						'InstallmentOld' : InstallmentOld,
						'InterestOld' : InterestOld,
						'FrequencyOld' : FrequencyOld,
						'FreqTypeOld' : FreqTypeOld,
						'Installment' : Installment,
						'Interest'	: Interest,
						'Frequency' 	: Frequency,
						'FreqType' 	: FreqType,
						'AmtID':AmtID
					}
			
			kwargs.update(**args)

			#check validate if enough balance in dd
			ValidateMessageAmend = getValidateMessageAmend(**kwargs)
			if ValidateMessageAmend[0]:
				return True, ValidateMessageAmend[1], True
			Result = setCofirmMessageAmend(**kwargs)
			
			if Result[2] == True:
				return Result[0], Result[1],Result[2]
			else:
				if Operation != "TMN":
					IRR = SetConfirmIRR(**kwargs)
					#check IRR if return True will show message IRR change amount
					if IRR[0]:
						return True, IRR[1]
					#check IRR if return False will show message Do you want to proceed?
					if not IRR[0]:
						return True, Result[1]
						
				return Result[0], Result[1]
		else:
			return False, ''


def setCofirmMessageAmend(**kwargs):

	Override 	= False
	Msg 		= ""
	DictData 	= {}

	BeforeAuth 		= kwargs['BeforeAuth'] if 'BeforeAuth' in kwargs else 'N'
	Option 			= kwargs['Operation']
	LoanID 			= kwargs['LoanID']
	Currency 		= kwargs['Currency']
	AddDeduct 		= kwargs['AddDeduct']
	Amount 			= kwargs['Amount']
	LoanType 		= kwargs['LoanType']
	PenaltyAmount	= kwargs['PenaltyAmount']
	KeepPrevSchedule= kwargs['KeepPrevSchedule']

	'''
		Additional list of dictionary of additional value included other than principal, interest, pd. 
		Example insurance etc. [{"Title": "Insurance", "Value": 0.0}, {"Title": "Other", "Value": 0.0}]
		Used to include all exceptional value when terminate loan contract

	'''

	Additional		= kwargs['Additional'] if 'Additional' in kwargs else '' 
	# PenaltyAmount   = Decimal(PenaltyAmount.replace(',',''))
	WaiveInterest   = kwargs['WaiveInterest'] if 'WaiveInterest' in kwargs else 0
	
	SystemDate 		= str(mktdate.getBankDate())
	CurrencyObj 	= mktmoney.getCurrencyObj(Currency)
	Zero 			= Decimal(0)
	LcAmount 		= 0
	DisbursedAmount = 0
	ApprovedAmount 	= 0
	TotalInterest 	= 0
	TotalPenalty 	= 0
	TotalCharge 	= 0
	PrincipalDue 	= 0	
	InterestDue 	= 0
	GRAAmount 		= 0
	ChargeDue 		= Zero
	PenaltyDue 		= Zero
	AccrCurrentInt 		= 0
	AccrCurrentCharge 	= 0
	DisbursedStat 	= "Y"
	LC 				= MKT_LOAN_CONTRACT.query.get(LoanID)
	AccAvailableBal = 0
	MsgAcc			= ""
	if LC:
		MaturityDate 	= LC.MaturityDate
		Account 		= LC.Account
		AccAvailableBal = Decimal(mktaccounting.getAccAvailableBal(Account))
		LcAmount 		= Decimal(LC.Amount)
		Outstanding 	= Decimal(LC.OutstandingAmount)
		DisbursedAmount = Decimal(LC.Disbursed)
		ApprovedAmount 	= Decimal(LC.ApprovedAmount)

		AccrCurrentInt  = Decimal(LC.AccrCurrentInt) if LC.AccrCurrentInt else Decimal(0)
		AccrCurrentInt 	= mktmoney.toMoney(float(AccrCurrentInt), CurrencyObj)
		AccrCurrentInt 	= Decimal(AccrCurrentInt.replace(",", ""))

		# Charge Accr Current Installment
		AccrCurrentCharge  	= mktcharge.getAccrCurrCharge(LoanID=LoanID, Currency=Currency)
		AccrCurrentCharge  	= mktmoney.toMoney(float(AccrCurrentCharge), CurrencyObj)
		AccrCurrentCharge 	= Decimal(AccrCurrentCharge.replace(",", ""))

		# print 'AccrCurrentCharge',AccrCurrentCharge
		RepSchedule 	=	MKT_REP_SCHEDULE.query.\
							filter(MKT_REP_SCHEDULE.CollectionDate == SystemDate).\
							filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
							filter(MKT_REP_SCHEDULE.RepStatus == "0").\
							first()

		if RepSchedule:
			AccrCurrentInt 		= Decimal(RepSchedule.Interest)
			AccrCurrentCharge 	= Decimal(RepSchedule.Charge)

		LcAmount 		= Decimal(LcAmount) + Decimal(AccrCurrentInt) + Decimal(AccrCurrentCharge) - Decimal(WaiveInterest)

		DisbursedStat 	= LC.DisbursedStat

		PD 	= 	MKT_PAST_DUE.query.\
				filter(MKT_PAST_DUE.ID == "PD" + LoanID).\
				filter(MKT_PAST_DUE.TotODAmount > 0).\
				first()

		if PD:

			PrincipalDue 	= Decimal(PD.TotPrincipalDue)
			InterestDue 	= Decimal(PD.TotInterestDue)
			ChargeDue 		= Decimal(PD.TotChargeDue)
			PenaltyDue		= Decimal(PD.TotPenaltyDue)
			TotODAmount 	= Decimal(PD.TotODAmount)

			#find PD in grace period
			PDDateObj 		= MKT_PD_DATE.query.\
										filter(MKT_PD_DATE.ID == PD.ID).\
										filter(MKT_PD_DATE.ODStatus == "GRA")	
			GRAAmount = Decimal(0)
			for row in PDDateObj:
				GRAAmount = GRAAmount + row.OutPenAmount

			PenaltyDue = PenaltyDue - GRAAmount #widthraw penalty in grace peroid from Total Penalty

			LcAmount 		= Decimal(LcAmount) + Decimal(TotODAmount) - Decimal(GRAAmount)

		kwargs = {	
					'GRAPenalty': GRAAmount, 
					'WaiveInterest': WaiveInterest
				}
		OutAmountCustomer = mktloan.getLoanPreTerminationDetail(LC,PD,RepSchedule,**kwargs)
		if OutAmountCustomer:
			TotODAmount 	= Decimal(OutAmountCustomer['PastDue'])
			PrincipalDue 	= Decimal(OutAmountCustomer['PDTotalPrincipal'])
			InterestDue 	= Decimal(OutAmountCustomer['InterestDue'])
			PenaltyDue		= Decimal(OutAmountCustomer['PenaltyDue'])
			ChargeDue 		= Decimal(OutAmountCustomer['ChargeDue'])
			LcAmount 		= Decimal(OutAmountCustomer['PreTerminateAmount'])

		# Calculate Total Amount for collection
		TotalInterest = InterestDue + AccrCurrentInt
		TotalCharge   = ChargeDue + AccrCurrentCharge
		TotalPenalty  = PenaltyDue 
		kwargs.update({'DisbursedAmount':DisbursedAmount})
		kwargs.update({'Outstanding':Outstanding})
		RoundedAccAvailableBal 	=	mktmoney.toMoney(float(AccAvailableBal), CurrencyObj).replace(',','')
		MsgAcc 	= "Account  <a href='javascript:void(0)' onClick=CustomClickView('Account&nbspStatement','AccountStatement/?ID=%s')><u>%s</u></a> doesn't have sufficient fund. Account available balance is <b>%s</b>. " \
					%(Account, Account, mktmoney.toMoney(float(AccAvailableBal), CurrencyObj, 2))
		
		PreTermination = ""

		if Option == "TMN":

			if DisbursedStat.upper() == "Y":
						
				if int(AddDeduct) == 2:

					LcAmount 	+= PenaltyAmount

					if PenaltyAmount > Zero:
						PreTermination = "Pre-termination penalty :<b>%s</b>.<br/>" %mktmoney.toMoney(float(PenaltyAmount), CurrencyObj, 2)

				#Additional Value to include
				if Additional:
					for DictRow in Additional:
						Value = Decimal(DictRow.get("Value"))
						LcAmount += Value
						if Value > Zero:
							PreTermination += "%s :<b>%s</b>.<br/>" % (DictRow.get("Title"), mktmoney.toMoney(float(Value), CurrencyObj, 2))

				RoundedLcAmount 		=	mktmoney.toMoney(float(LcAmount), CurrencyObj).replace(',','')
				
				if Decimal(RoundedAccAvailableBal) < Decimal(RoundedLcAmount):
					Override 		= True
					DueFromCustomer = mktmoney.toMoney(float(LcAmount) - float(AccAvailableBal), CurrencyObj, 2)
					Msg 	+= MsgAcc + "You need at least <a href='javascript:void(0)' onClick=CustomClickView('Loan&nbspCentre','LoanCentre/?ID=%s')><b>%s</b></a> to terminate loan contract.<br/>" % (LoanID, DueFromCustomer)
					
					Msg 	+= "System will collection as following :</br>"
					Msg 	+="Principal : <b>%s %s</b><br/>" % (Currency,mktmoney.toMoney(float(Outstanding), CurrencyObj))
					Msg 	+="Interest : <b>%s %s</b><br/>" % (Currency,mktmoney.toMoney(float(TotalInterest), CurrencyObj))
					Msg 	+="Charge : <b>%s %s</b><br/>" % (Currency,mktmoney.toMoney(float(TotalCharge), CurrencyObj))
					Msg 	+="Past Due Penalty : <b>%s %s</b><br/>" % (Currency,mktmoney.toMoney(float(TotalPenalty), CurrencyObj))
					Msg 	+= PreTermination

					# if Penalty > Zero:
					# 	Msg 	+="Penalty : <b>%s %s</b><br/>" % (Currency,mktmoney.toMoney(float(TotalPenalty), CurrencyObj))

					Msg 	+="If you procceed, the unpaid amount will be written-off." 

				else:

					if PreTermination:
						Override 	= True
						if float(LcAmount) < 0:
							Msg 		+= PreTermination + "<b>%s</b> More is needed.<br/>If you procceed, the unpaid amount will be written-off." %(mktmoney.toMoney(float(LcAmount) - float(AccAvailableBal), CurrencyObj, 2))

						else:
							Msg 		+= PreTermination

		elif Option == "AMT":

			# Check Maturity Date Changed
			if BeforeAuth == "Y":# When Click Authorize

				RepScheduleInau = MKT_REP_SCHEDULE_INAU.query.filter(MKT_REP_SCHEDULE_INAU.LoanID == LoanID).\
														 	 order_by(MKT_REP_SCHEDULE_INAU.CollectionDate.desc()).first()

				NewMaturityDate = RepScheduleInau.CollectionDate if RepScheduleInau else ""

				if MaturityDate != NewMaturityDate:
					Override = True
					Msg += ' Loan contract Maturity Date <b>%s</b> will be updated to <b>%s</b>.<br>' %(MaturityDate, NewMaturityDate)

				if not NewMaturityDate:
					Validate = True
					Override = True
					Msg = msg_warning+"Loan contract doesn't have repayment schdule. Please save repayment schdule before authroize."
					return Override, Msg, Validate
					
			# Check Exceed the Approved Amount
			LoanAppID = kwargs.get("LoanAppID",False)
			LoanAppObj = kwargs.get("LoanAppObj",None)
			if ApprovedAmount > 0:

				if AddDeduct == '2' and DisbursedAmount + Decimal(Amount) > ApprovedAmount: 
					Override = True
					LoanAppApprovedAmt = LoanAppObj.Amount if LoanAppObj else 0
					NewApprovedAmt 	= mktmoney.toMoney(float(LoanAppApprovedAmt)+float(ApprovedAmount), CurrencyObj,2)
					PrincipalAdd 	= mktmoney.toMoney(float(Amount), CurrencyObj, 2)
					ApprovedAmount 	= mktmoney.toMoney(float(ApprovedAmount), CurrencyObj, 2)
					if LoanAppID:
						Msg 	+= "Loan contract approved amount was <b>%s</b>, Top up amount is <b>%s</b>, Approved amount will be update to <b>%s</b>.<br>" % (ApprovedAmount, PrincipalAdd, NewApprovedAmt)
					else:
						Msg 	+= "Loan contract approved amount was <b>%s</b>, If you add principal amount <b>%s</b>, it will exceed the approved amount.<br>" % (ApprovedAmount, PrincipalAdd)

			# Check If not keep prev schdule
			if KeepPrevSchedule == 'N':
				Override = True
				Msg += 'Previous repayment schedule will not be kept.<br>'
			

			# Check Change loan type
			if LoanType != LC.LoanType:
				Override = True
				LoanTypeDict = {'N':'Normal','R':'Restructured'}
				Msg += ' Loan amendment from <b>%s</b> to <b>%s</b>.<br>' %(LoanTypeDict[LC.LoanType], LoanTypeDict[LoanType])

			# Check Penalty Amemd
			CustomerBal =  Decimal(RoundedAccAvailableBal)
			if AddDeduct == '2':
				CustomerBal =  Decimal(RoundedAccAvailableBal) + Decimal(Amount)

			RoundedPenaltyAmount 	=	mktmoney.toMoney(float(PenaltyAmount), CurrencyObj).replace(',','')
			if Decimal(RoundedPenaltyAmount) > Decimal(CustomerBal):
				Override = True
				Msg += 'Penalty amendment will collect <b>%s</b>.<br>' % mktmoney.toMoney(float(PenaltyAmount), CurrencyObj, 2)
				
				Msg += MsgAcc + "You need at least <b>%s</b> to amendment loan contract.<br/>" %(mktmoney.toMoney(float(PenaltyAmount) - float(CustomerBal), CurrencyObj, 2))


				Msg +="If you procceed, the unpaid amount will be written-off." 

			else:
				if PenaltyAmount > Zero:
					Override = True
					Msg += 'Penalty amendment will collect <b>%s</b>.<br>' % mktmoney.toMoney(float(PenaltyAmount), CurrencyObj, 2)
			
		Msg += " Do you still want to procceed?"

		DictData = {"MsgAcc"			: 	MsgAcc, 
					"LcAmount"			: 	LcAmount, 
					"AccAvailableBal"	: 	AccAvailableBal,
					"PenaltyDue"		: 	PenaltyDue}

	return Override, Msg , DictData

def getValidateMessageAmend(**kwargs):
	''' 
		kwargs = {	'LoanID' 	: request.form['LoanID'],
						'Currency'	: request.form['Currency'],
						'Operation'	: request.form['Operation'],
						'AddDeduct' : request.form['AddDeduct'],
						'Amount'	: request.form['Amount'],
						'LoanType'	: request.form['LoanType'],
						'PenaltyAmount'  : Decimal(request.form['PenaltyAmount'].replace(',','')),
						'KeepPrevSchedule' : request.form['KeepPrevSchedule'],
						'Additional' : [{"Title": "Insurance","Value": 0}]
					}
 	'''
 	Override	= False
 	Msg 	 	= ""

	SUFFICIENT_BALANCE_VALIDATE = mktsetting.getAppSetting('SUFFICIENT_BALANCE_VALIDATE')
	if not SUFFICIENT_BALANCE_VALIDATE:
		SUFFICIENT_BALANCE_VALIDATE = "N"

	Operation = kwargs.get("Operation")
	Data 			= 	setCofirmMessageAmend(**kwargs)
	#LcAmount => amount which include Loan balance , past due and penalty
	DictData 		=	Data[2]
	CurrencyObj 	= 	MKT_CURRENCY.query.get(kwargs.get("Currency"))

	if SUFFICIENT_BALANCE_VALIDATE == "Y":
		if Operation == "TMN":			
			LcAmount 		=	DictData.get("LcAmount")
			AccAvailableBal = 	DictData.get("AccAvailableBal")
			MsgAcc 			=	DictData.get("MsgAcc")
			Msg 			=	""			
			RoundedLcAmount	=	mktmoney.toMoney(float(LcAmount), CurrencyObj).replace(',','')
			if float(AccAvailableBal) < float(RoundedLcAmount): 
				DueFromCustomer = mktmoney.toMoney(float(LcAmount) - float(AccAvailableBal), CurrencyObj, 2)
				Msg += MsgAcc + "<br>You need at least <a href='javascript:void(0)' onClick=CustomClickView('Loan&nbspCentre','LoanCentre/?ID=%s')><b>%s</b></a> to terminate loan contract.<br/>" % (kwargs.get("LoanID"), DueFromCustomer)

				Override = True

	if Operation == "TMN":
		PenaltyOption = mktparam.getPDParam().PenOption
		# Only check to waive PD Penalty first when Penalty collection option is set to Manual
		if PenaltyOption == "M":
			PenaltyDue = DictData.get("PenaltyDue",0)
			if PenaltyDue > 0:
				Msg +="Please waive or collect PD Penalty first before terminate loan." 
				Override = True

	return Override, Msg

def checkAvialibleAmount(**kwargs):
	"""
	This function is for check whether capitalize amount is exceed AIR Amount
	"""
	LoanID 				= 	kwargs.get("LoanID")
	Amount 				=	kwargs.get("Amount")
	Operation 			= 	kwargs.get("Operation")
	CapitalizeOption 	= 	kwargs.get("CapitalizeOption")
	WaiveInterest 		= 	kwargs.get("WaiveInterest")
	AddDeductAmount		= 	kwargs.get("AddDeductAmount")
	Result 				=	True,""

	LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	if LoanObj:	
		if CapitalizeOption == "Y":	
			if float(AddDeductAmount) == 0:
				if float(Amount) > 0:
					if Operation == "TMN":
							Result = False, "Capitalize Interest allow for operation AMT only."
					else:
						AIR = LoanObj.AccrInterest
						AvailableAmount = float(AIR) - float(WaiveInterest)
						if float(Amount) > float(AvailableAmount):
							Result = False, "Capitalize Int. Amount cannot bigger than %s" % AvailableAmount

				elif float(Amount) < 0:
					Result = False, "Must be bigger than zero."
			else:
				Result = False, "Cannot do amend add/deduct when capitalize interest."
	else:
		Result = False, "Loan Contract %s not found." % LoanID

	return Result

def SetConfirmIRR(**kwargs):
	AmtID 			= kwargs['AmtID']
	LoanID 			= kwargs['LoanID']
	Amount 			= float(kwargs['Amount'])
	ChangeIRR 		= False
	InstallmentOld 	= float(kwargs['InstallmentOld'])
	InterestOld 	= float(kwargs['InterestOld'])
	FrequencyOld 	= float(kwargs['FrequencyOld'])
	FreqTypeOld 	= float(kwargs['FreqTypeOld'])

	LC 				= MKT_LOAN_CONTRACT.query.get(LoanID)
	if LC:
		Outstanding 	= float(LC.OutstandingAmount)
		DisbursedAmount = float(LC.Disbursed)
	source 	= "INAU"
	NumOfAuth 	= g.getNAuthorize
	Principal 		= Outstanding - Amount
	NewIRR = mktamt.syncAmendToLC(AmtID, LoanID,"INAU",True)
	if NewIRR != True:
		ChangeIRR = True

	OldIRR =  mktreschedule.getIRR(DisbursedAmount,InterestOld,FreqTypeOld,InstallmentOld,FrequencyOld)

	return ChangeIRR,'IRR change from (%s) to (%s)' %(OldIRR[0],NewIRR)

def updateRepScheduleOnCollectionDate(**kwargs):
	LoanID = kwargs.get("LoanID")
	BankDate = kwargs.get("BankDate")
	Operation = kwargs.get("Operation")
	WaiveInterest = kwargs.get("WaiveInterest")

	RepSecheduleObj = MKT_REP_SCHEDULE.query.\
											filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
											filter(MKT_REP_SCHEDULE.CollectionDate == BankDate).\
											first()
	
	if RepSecheduleObj:
		InterestAmount = 0
		Interest = RepSecheduleObj.Interest
		if Operation == "D":
			InterestAmount = Interest - WaiveInterest
		elif Operation == "A":
			InterestAmount = Interest + WaiveInterest

		mktdb.updateRecord(MKT_REP_SCHEDULE, [MKT_REP_SCHEDULE.ID == RepSecheduleObj.ID], {"Interest": InterestAmount})
