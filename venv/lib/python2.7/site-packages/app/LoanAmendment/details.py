from app.mktcore.wtfimports 		import *
from app.LoanContract.models 		import *
from models 						import *
from app.Collateral.models 			import *
from app.Customer.models 			import *
from app.LoanApplication.models 	import *
from app.RepaymentSchedule.models 	import *
from app.ScheduleDefine.models 		import *
from app.LoanContract.forms 		import loadGuarantor, loadCoBorrower
from app import db
from flask import flash
import app.tools.user 					as mktuser
import app.tools.mktaudit 			as mktaudit
from app.tools.mktloan 				import *

def loadCollateral():
	if g and hasattr(g, 'formID'):
		LoanADObj = MKT_LOAN_AMENDMENT.query.get(g.formID)
		if not LoanADObj:
			LoanADObj = MKT_LOAN_AMENDMENT_INAU.query.get(g.formID)

		if LoanADObj:
			LoanID  = LoanADObj.LoanID
			LoanContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)

			if LoanContractObj:
				CustomerID = LoanContractObj.ContractCustomerID
				return MKT_COLLATERAL.query.filter(MKT_COLLATERAL.CustomerID == CustomerID)
	
	return MKT_COLLATERAL.query

@app.route("/Morakot/getCollateral", methods=['GET'])
def getCollateral():
	Dict 	= {}
	LoanID 	= request.args.get('LoanID')
	DataList= '<option value="">--None--</option>'

	if LoanID:
		LoanContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		CustomerID 		= LoanContractObj.ContractCustomerID
		CollateralObj 	= MKT_COLLATERAL.query.filter(MKT_COLLATERAL.CustomerID==CustomerID).all()

		for c in CollateralObj:
			DataList += '<option value="%s">%s</option>'%(c.ID,c.Description)

	return jsonify(List=DataList)

@app.route("/Morakot/LoanCustomerName", methods=['GET'])
def getLoanCustomerName():
	try:

		LoanID 			= request.args.get("LoanID")
		CustomerName 	= ""
		print 
		LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID == LoanID, MKT_LOAN_CONTRACT.Branch == mktuser.getCurrentBranch()).first()

		if LoanObj:
			CustomerID 		= LoanObj.ContractCustomerID
			CustomerObj 	= MKT_CUSTOMER.query.get(CustomerID)
			
			if CustomerObj:
				CustomerName = CustomerObj.LastNameEn + " " + CustomerObj.FirstNameEn

		return jsonify(CustomerName=CustomerName)
	
	except:
		raise
class FRM_LOAN_AMENDMENT_DE(exform):
	LoanID 			= 	TextField(requiredlabel(getLanguage("Loan ID"), "*"), [validators.Required()])
	Customer 		= 	TextField(requiredlabel(getLanguage("Customer Name"), "*"), [validators.Required()])
	Operation		= 	TextField(getLanguage("Operation"), default='DET')

	Guarantor 		= 	QuerySelectField(getLanguage("Guarantor"),
							query_factory=loadGuarantor,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--None--',
							description="1-%s" %getLanguage("Guarantor")
						)

	Collateral 		= 	QuerySelectField(getLanguage("Collateral"),
							query_factory=loadCollateral,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="2-%s" %getLanguage("Collateral")
						)

	CoBorrowerID 	= 	QuerySelectField(getLanguage("Co-Borrower"),
							query_factory=loadCoBorrower,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="3-%s" %getLanguage("Co-Borrower")
						)

	RelationIndicator 		= 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="3-%s" %getLanguage("Co-Borrower")
						)

	def validate_LoanID(form, field):
		LoanObj = MKT_LOAN_CONTRACT.query.get(field.data)
		if not LoanObj:
			raise ValidationError("Loan Contract with ID %s not found"%field.data)

	def validate_Collateral(form, field):
		if field.data != '__None':
			LoanObj = MKT_LOAN_CONTRACT.query.get(form.LoanID.data)
			if LoanObj:
				CustomerID = LoanObj.ContractCustomerID
				CollateralObj = MKT_COLLATERAL.query.filter(MKT_COLLATERAL.CustomerID == CustomerID).all()
				if not CollateralObj:
					raise ValidationError("Collateral %s is not collateral of customer %s"%(field.data, CustomerID))

	def validate_CoBorrowerID(form, field):
		try:
			validateDuplicate("CoBorrowerID")
				
		except Exception, e:
			raise ValidationError("%s" %e)

	def validate_Guarantor(form, field):
		try:
			validateDuplicate('Guarantor')
		except Exception, e:
			raise ValidationError("%s" %e)

	@staticmethod
	def setVisible():
		return ['Operation']

	@staticmethod
	def listField():

		Fields = ["ID", "LoanID","Customer"]
		return Fields,["ID*LK*LM"]

	@staticmethod
	def isMultiValue():
		controls_list=["1-Guarantor", "3-Co-Borrower"]
		return controls_list

	# @staticmethod
	# def formReadOnly():
	# 	return "AUTH"

	@staticmethod
	def reverseRec():
		return True, "%s Record is not allowed to reverse." %(msg_warning)

	@staticmethod
	def setDisable():
		return [("Customer")]

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#Customer').val(data.CustomerName)"
		fielddisplay 	+= ";$('#Customer').focus()"
		varname 		= "LoanID:$('#LoanID').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/LoanCustomerName", "blur"]
		hotfield.append(fun)

		fielddisplay 	="$('#Collateral').html(data.List)"
		varname 		= "LoanID:$('#LoanID').val()"
		fun        		=["Customer",varname,fielddisplay,"/Morakot/getCollateral","blur"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def IsAcceptOverrideINAU():
		ID 			= g.formID
		LoanADObj 	= MKT_LOAN_AMENDMENT_INAU.query.get(ID)
		Msg 		= ''
		Override 	= False

		if LoanADObj:
			LoanID = LoanADObj.LoanID
			LLoanCollateralObj 	= MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID == LoanID).first()
			LCoBorrowerObj 		= MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID == LoanID).all()
			LGuarantorObj 		= MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID == LoanID).all()

			LoanCollateralObj 	= MKT_LOAN_COLLATERAL_INAU.query.filter(MKT_LOAN_COLLATERAL_INAU.ID == ID).first()
			CoBorrowerObj 		= MKT_LOAN_CO_BORROWER_INAU.query.filter(MKT_LOAN_CO_BORROWER_INAU.ID == ID).all()
			GuarantorObj 		= MKT_GUARANTOR_INAU.query.filter(MKT_GUARANTOR_INAU.ID == ID).all()

			CCollateral = LoanCollateralObj.Collateral if LoanCollateralObj else ''
			if CCollateral == '__None':
				CCollateral = ''

			if LLoanCollateralObj:
				Collateral  = LLoanCollateralObj.Collateral
				if CCollateral:
					if Collateral != CCollateral:
						Override = True
						Msg += 'Collateral will change from <b>%s</b> to <b>%s</b><br>'%(Collateral,CCollateral)
				else:
					Override = True
					Msg += 'Collateral <b>%s</b> will be removed<br>'%(Collateral)

			elif CCollateral:
				Override = True
				Msg += 'Collateral <b>%s</b> will be added<br>'%(CCollateral)

			LGuarantor 	=	[]
			LCoBorrower =	[]
			Guarantor 	=	[]
			CoBorrower 	=	[]

			for n in LGuarantorObj:
				LGuarantor.append(n.Guarantor)
			for n in LCoBorrowerObj:
				LCoBorrower.append(n.CoBorrowerID)

			for n in GuarantorObj:
				if n.Guarantor != '__None':
					Guarantor.append(n.Guarantor)
			for n in CoBorrowerObj:
				if n.CoBorrowerID != '__None':
					CoBorrower.append(n.CoBorrowerID)

			if LGuarantorObj:
				if Guarantor:
					Override = True
					Msg += 'Guarantor will be updated from <b>%s</b> to <b>%s</b><br>'%(','.join(LGuarantor),','.join(Guarantor))
				else:
					Override = True
					Msg += 'Guarantor will be removed<br>'

			elif Guarantor:
				Override = True
				Msg += 'Guarantor <b>%s</b> will be added<br>'%(','.join(Guarantor))

			if LCoBorrowerObj:
				if CoBorrower:
					Override = True
					Msg += 'Co-Borrower will be updated from <b>%s</b> to <b>%s</b><br>'%(','.join(LCoBorrower),','.join(CoBorrower))
				else:
					Override = True
					Msg += 'Co-Borrower will be removed<br>'
					 
			elif CoBorrower:
				Override = True
				Msg += 'Co-Borrower <b>%s</b> will be added<br>'%(','.join(CoBorrower))

		if Msg:
			Msg += "Are you sure want to process?"

		return Override, Msg

	@staticmethod
	def IsAcceptOverride():
		ID 			= request.form.get('ID')
		LoanID		= request.form.get('LoanID')
		Msg 		= ''
		Override 	= False

		if LoanID:
			LoanCollateralObj 	= MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID == LoanID).first()
			CoBorrowerObj 		= MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID == LoanID).all()
			GuarantorObj 		= MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID == LoanID).all()

			Collateral 	= request.form.get('Collateral')
			if Collateral == '__None':
				Collateral = ''

			if LoanCollateralObj:
				CCollateral = LoanCollateralObj.Collateral
				if Collateral:
					if Collateral != CCollateral:
						Override = True
						Msg += 'Collateral will change from <b>%s</b> to <b>%s</b><br>'%(CCollateral,Collateral)
				else:
					Override = True
					Msg += 'Collateral <b>%s</b> will be removed<br>'%(CCollateral)

			elif Collateral and Collateral != '__None':
				Override = True
				Msg += 'Collateral <b>%s</b> will be added<br>'%(Collateral)

			ControlsList 			= request.form
			ListGuarantor			= [item for item in ControlsList if "Guarantor" in item]
			ListCoBorrowerID		= [item for item in ControlsList if "CoBorrowerID" in item]
			ListRelationIndicator 	= [item for item in ControlsList if "RelationIndicator" in item]
			ListGuarantor.sort()
			ListCoBorrowerID.sort()
			ListRelationIndicator.sort()
			Guarantor 	=	[]
			CoBorrower 	=	[]
			for n in range(0,len(ListGuarantor)):
				if request.form[ListGuarantor[n]] != '__None':
					Guarantor.append(request.form[ListGuarantor[n]])
			for n in range(0,len(ListCoBorrowerID)):
				if request.form[ListCoBorrowerID[n]] != '__None':
					CoBorrower.append(request.form[ListCoBorrowerID[n]])

			LGuarantor 	=	[]
			LCoBorrower =	[]

			for n in GuarantorObj:
				LGuarantor.append(n.Guarantor)
			for n in CoBorrowerObj:
				LCoBorrower.append(n.CoBorrowerID)
				
			if GuarantorObj:
				if Guarantor:
					Override = True
					Msg += 'Guarantor will be updated from <b>%s</b> to <b>%s</b><br>'%(','.join(LGuarantor),','.join(Guarantor))
				else:
					Override = True
					Msg += 'Guarantor will be removed<br>'

			elif Guarantor:
				Override = True
				Msg += 'Guarantor <b>%s</b> will be added<br>'%(','.join(Guarantor))

			if CoBorrowerObj:
				if CoBorrower:
					Override = True
					Msg += 'Co-Borrower will be updated from <b>%s</b> to <b>%s</b><br>'%(','.join(LCoBorrower),','.join(CoBorrower))
				else:
					Override = True
					Msg += 'Co-Borrower will be removed<br>'
					 
			elif CoBorrower:
				Override = True
				Msg += 'Co-Borrower <b>%s</b> will be added<br>'%(','.join(CoBorrower))

		if Msg:
			Msg += "Are you sure want to process?"

		return Override, Msg

	@staticmethod
	def beforeInsert():
		AuthLevel 	= g.getNAuthorize

		if AuthLevel == 0 :
			LoanID		= request.form['LoanID']
			Collateral	= request.form['Collateral']
			LoanObj 	= MKT_LOAN_CONTRACT.query.get(LoanID)

			if LoanObj:
				Curr 	= str(int(LoanObj.Curr) + 1)
				Audit 	= mktaudit.getAuditrail()
				Dict 	= {
					'Branch':LoanObj.Branch,
					'Curr':Curr,
					'Status':'AUTH',
					'Inputter':Audit['Inputter'],
					'Createdon':Audit['Createdon'],
					'Authorizer':Audit['Authorizer'],
					'Authorizeon':Audit['Authorizeon'],
				}

				if LoanObj.LoanApplicationID:
					LoanAppID 	=	LoanObj.LoanApplicationID
					LoanAppObj 	= 	MKT_LOAN_APPLICATION.query.get(LoanAppID)
					AppDict 	=	Dict.copy()
					AppCurr 		=	str(int(LoanAppObj.Curr) + 1)
					AppDict['Curr'] = 	AppCurr

					copyLoanAppDataToHist(LoanAppID)
					deleteLoanInfo(LoanAppID)
					# MKT_APP_STATUS.query.filter(MKT_APP_STATUS.ID == LoanAppID).delete(synchronize_session='fetch')
					updateAppCheckListAudit(LoanAppID, Audit, AppCurr)
					
					LoanAppObj.Curr 		=  	AppCurr
					LoanAppObj.Inputter 	= 	Audit['Inputter']
					LoanAppObj.Createdon 	= 	Audit['Createdon']
					LoanAppObj.Authorizer 	= 	Audit['Authorizer']
					LoanAppObj.Authorizeon 	= 	Audit['Authorizeon']
					db.session.add(LoanAppObj)

				copyLoanDataToHist(LoanID)
				deleteLoanInfo(LoanID)

				LoanObj.Curr 		= 	Curr
				LoanObj.Inputter 	= 	Audit['Inputter']
				LoanObj.Createdon 	= 	Audit['Createdon']
				LoanObj.Authorizer 	= 	Audit['Authorizer']
				LoanObj.Authorizeon = 	Audit['Authorizeon']
				db.session.add(LoanObj)

				ControlsList 			= request.form
				ListGuarantor			= [item for item in ControlsList if "Guarantor" in item]
				ListCoBorrowerID		= [item for item in ControlsList if "CoBorrowerID" in item]
				ListRelationIndicator 	= [item for item in ControlsList if "RelationIndicator" in item]
				ListGuarantor.sort()
				ListCoBorrowerID.sort()
				ListRelationIndicator.sort()

				for nub in range(0,len(ListRelationIndicator)):
					CoBorrowerID 		= request.form[ListCoBorrowerID[nub]]
					if CoBorrowerID != '__None':
						RelationIndicator 	= request.form[ListRelationIndicator[nub]]
						if RelationIndicator == '__None': RelationIndicator = ''
						CoBorrower  = MKT_LOAN_CO_BORROWER(ID=LoanID, CoBorrowerID=CoBorrowerID, RelationIndicator=RelationIndicator,**Dict)
						db.session.add(CoBorrower)

						if LoanObj.LoanApplicationID:
							AppCoBorrower	= MKT_LOAN_CO_BORROWER(ID=LoanAppID, CoBorrowerID=CoBorrowerID, RelationIndicator=RelationIndicator,**AppDict)
							db.session.add(AppCoBorrower)

				for nub in range(0,len(ListGuarantor)):
					Guarantor 		= request.form[ListGuarantor[nub]]
					if Guarantor != '__None':
						GuarantorObj 	= MKT_GUARANTOR(ID=LoanID, Guarantor=Guarantor,**Dict)
						db.session.add(GuarantorObj)

						if LoanObj.LoanApplicationID:
							AppGuarantorObj = MKT_GUARANTOR(ID=LoanAppID, Guarantor=Guarantor,**AppDict)
							db.session.add(AppGuarantorObj)

				if Collateral and Collateral != '__None':
					CustomerID 	= LoanObj.ContractCustomerID
					ColObj 		= MKT_COLLATERAL.query.filter(MKT_COLLATERAL.ID == Collateral, MKT_COLLATERAL.CustomerID == CustomerID).all()
					if not ColObj:
						flash(msg_error+"Collateral %s is not collateral of customer %s"%(Collateral, CustomerID))
						return False

					CollateralObj = MKT_LOAN_COLLATERAL(ID=LoanID, Collateral=Collateral,**Dict)
					db.session.add(CollateralObj)

					if LoanObj.LoanApplicationID:
						AppCollateralObj = MKT_LOAN_COLLATERAL(ID=LoanAppID, Collateral=Collateral,**AppDict)
						db.session.add(AppCollateralObj)

		return True

	@staticmethod
	def beforeAuthorize():
		try:
			
			ID 			= g.formID
			LoanADObj 	= MKT_LOAN_AMENDMENT_INAU.query.get(ID)

			if LoanADObj:
				Audit 		= 	mktaudit.getAuditrail()
				Inputter	= 	LoanADObj.Inputter
				Authorizer 	= 	Audit['Authorizer']

				if Inputter.upper() == Authorizer.upper():
					flash(msg_error + " user who authorize must differ from input.")
					return False

				LoanID 	= LoanADObj.LoanID
				LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
				# Audit 	= mktaudit.getAuditrail()
				Curr    = str(int(LoanObj.Curr) + 1)
				Dict 	= {
					'Branch':LoanObj.Branch,
					'Curr':Curr,
					'Status':'AUTH',
					'Inputter':LoanADObj.Inputter,
					'Createdon':LoanADObj.Createdon,
					'Authorizer':Audit['Authorizer'],
					'Authorizeon':Audit['Authorizeon'],
				}

				if LoanObj.LoanApplicationID:
					LoanAppID 	=	LoanObj.LoanApplicationID
					LoanAppObj 	= 	MKT_LOAN_APPLICATION.query.get(LoanAppID)
					AppDict 	=	Dict.copy()
					AppCurr 		=	str(int(LoanAppObj.Curr) + 1)
					AppDict['Curr'] = 	AppCurr

					copyLoanAppDataToHist(LoanAppID)
					deleteLoanInfo(LoanAppID)
					# MKT_APP_STATUS.query.filter(MKT_APP_STATUS.ID == LoanAppID).delete(synchronize_session='fetch')
					updateAppCheckListAudit(LoanAppID, Audit, AppCurr)

					LoanAppObj.Curr 		=  	AppCurr
					LoanAppObj.Inputter 	= 	Audit['Inputter']
					LoanAppObj.Createdon 	= 	Audit['Createdon']
					LoanAppObj.Authorizer 	= 	Audit['Authorizer']
					LoanAppObj.Authorizeon 	= 	Audit['Authorizeon']
					db.session.add(LoanAppObj)

				copyLoanDataToHist(LoanID)
				deleteLoanInfo(LoanID)

				LoanObj.Curr 		= 	Curr
				LoanObj.Inputter 	= 	Audit['Inputter']
				LoanObj.Createdon 	= 	Audit['Createdon']
				LoanObj.Authorizer 	= 	Audit['Authorizer']
				LoanObj.Authorizeon = 	Audit['Authorizeon']
				db.session.add(LoanObj)
					
				LoanCollateralObj 	= MKT_LOAN_COLLATERAL_INAU.query.filter(MKT_LOAN_COLLATERAL_INAU.ID == ID).first()
				CoBorrowerObj 		= MKT_LOAN_CO_BORROWER_INAU.query.filter(MKT_LOAN_CO_BORROWER_INAU.ID == ID).all()
				GuarantorObj 		= MKT_GUARANTOR_INAU.query.filter(MKT_GUARANTOR_INAU.ID == ID)

				if CoBorrowerObj:
					for c in CoBorrowerObj:
						CoBorrowerID 		= c.CoBorrowerID 
						RelationIndicator 	= c.RelationIndicator 
						CoBorrower  		= MKT_LOAN_CO_BORROWER(ID=LoanID, CoBorrowerID=CoBorrowerID, RelationIndicator=RelationIndicator,**Dict)
						db.session.add(CoBorrower)
						
						if LoanObj.LoanApplicationID:
							AppCoBorrower	= MKT_LOAN_CO_BORROWER(ID=LoanAppID, CoBorrowerID=CoBorrowerID, RelationIndicator=RelationIndicator,**AppDict)
							db.session.add(AppCoBorrower)

				if GuarantorObj:
					for gu in GuarantorObj:
						Guarantor 		= gu.Guarantor
						GuarantorObj 	= MKT_GUARANTOR(ID=LoanID, Guarantor=Guarantor,**Dict)
						db.session.add(GuarantorObj)

						if LoanObj.LoanApplicationID:
							AppGuarantorObj = MKT_GUARANTOR(ID=LoanAppID, Guarantor=Guarantor,**AppDict)
							db.session.add(AppGuarantorObj)

				Collateral = ''
				if LoanCollateralObj:
					Collateral = LoanCollateralObj.Collateral

				if Collateral:
					CustomerID 	= LoanObj.ContractCustomerID
					ColObj 		= MKT_COLLATERAL.query.filter(MKT_COLLATERAL.ID == Collateral, MKT_COLLATERAL.CustomerID == CustomerID).all()
					if not ColObj:
						flash(msg_error+"Collateral %s is not collateral of customer %s"%(Collateral, CustomerID))
						return False

					CollateralObj = MKT_LOAN_COLLATERAL(ID=LoanID, Collateral=Collateral,**Dict)
					db.session.add(CollateralObj)

					if LoanObj.LoanApplicationID:
						AppCollateralObj = MKT_LOAN_COLLATERAL(ID=LoanAppID, Collateral=Collateral,**AppDict)
						db.session.add(AppCollateralObj)

			return True
		except Exception, e:
			raise

def validateDuplicate(Field):
				
	if request.form[Field]:
		CoBorrower 		= 	[]
		controls_list 	= 	request.form
		LoanObj  		= 	MKT_LOAN_CONTRACT.query.get(request.form['LoanID']) 
		ListCoBorrower	= 	[item for item in controls_list if Field in item]
		ListCoBorrower.sort()
		TotalCoBorrower =	len(ListCoBorrower)

		for nub in range(0,TotalCoBorrower):
			CoBorrower.append(request.form[ListCoBorrower[nub]])

		CoBorrower.append(LoanObj.ContractCustomerID)

		DuplicateAcc   = [x for x in CoBorrower if CoBorrower.count(x) > 1]
		if DuplicateAcc:
			raise ValidationError("Must not be the same as customer#%s"%DuplicateAcc[0])

def copyLoanAppDataToHist(LoanID):
	try:
		Curr = mktaudit.moveAUTHtoHIST(MKT_LOAN_APPLICATION, MKT_LOAN_APPLICATION_HIST, LoanID)
		mktaudit.moveAUTHtoHIST(MKT_APP_STATUS, MKT_APP_STATUS_HIST, LoanID, Curr = Curr)
		mktaudit.moveAUTHtoHIST(MKT_GUARANTOR, MKT_GUARANTOR_HIST, LoanID, Curr = Curr)
		mktaudit.moveAUTHtoHIST(MKT_LOAN_CO_BORROWER, MKT_LOAN_CO_BORROWER_HIST, LoanID, Curr = Curr)
		mktaudit.moveAUTHtoHIST(MKT_LOAN_COLLATERAL, MKT_LOAN_COLLATERAL_HIST, LoanID, Curr = Curr)
		
	except Exception, e:
		raise e

def copyLoanDataToHist(LoanID):
	try:
		
		# Copy live LC to hist LoanC
		Curr = mktaudit.moveAUTHtoHIST(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT_HIST, LoanID)
		# move live Schedule Define
		mktaudit.moveAUTHtoHIST(MKT_SCHED_DEFINE, MKT_SCHED_DEFINE_HIST, LoanID, Curr = Curr)
		
		# move live Repayment Schedule
		mktaudit.moveAUTHtoHIST(MKT_REP_SCHEDULE, MKT_REP_SCHEDULE_HIST, LoanID, "LoanID", Curr = Curr)
		mktaudit.moveAUTHtoHIST(MKT_LOAN_CO_BORROWER, MKT_LOAN_CO_BORROWER_HIST, LoanID, Curr = Curr)
		mktaudit.moveAUTHtoHIST(MKT_GUARANTOR, MKT_GUARANTOR_HIST, LoanID, Curr = Curr)
		mktaudit.moveAUTHtoHIST(MKT_LOAN_CHARGE, MKT_LOAN_CHARGE_HIST, LoanID, Curr = Curr)
		mktaudit.moveAUTHtoHIST(MKT_LOAN_COLLATERAL, MKT_LOAN_COLLATERAL_HIST, LoanID, Curr = Curr)

	except Exception, e:
		raise

def deleteLoanInfo(LoanID):
 	try:
 		
		MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID == LoanID).delete(synchronize_session='fetch')
		MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID == LoanID).delete(synchronize_session='fetch')
		MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID == LoanID).delete(synchronize_session='fetch')

 	except Exception, e:
 		raise 
		
def updateAppCheckListAudit(LoanAppID, Audit, AppCurr):
	try:
		CheckListObj = MKT_APP_STATUS.query.filter(MKT_APP_STATUS.ID == LoanAppID).all()
		for c in CheckListObj:
			c.Curr 		=  	AppCurr
			c.Inputter 	= 	Audit['Inputter']
			c.Createdon 	= 	Audit['Createdon']
			c.Authorizer 	= 	Audit['Authorizer']
			c.Authorizeon 	= 	Audit['Authorizeon']
			db.session.add(c)
			
	except Exception as e:
		raise














