from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *
import time
from decimal 					import *
from flask 						import session,flash

import app.tools.mktparam   	as mktparam
import app.tools.mktdate 		as mktdate
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktaccount 	as mktaccount
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.mktfundtransfer 	as mktfundtransfer
from app.Account.models 		import *


@app.route("/Morakot/API/TellerDepositAccount", methods=['GET'])
@app.route("/Morakot/TellerDepositAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDeposit():
	AccountID 		= request.args.get('TCrAccount')
	return mktteller.getFundAcount("DP",AccountID)


def loadCurrentDate():
	return 	mktdate.getBankDate()


class FRM_DEPOSIT(exform):

	TCrAccount 	= RemoteTextField(requiredlabel("Account","*"), [validators.Required()])
	CrCategory 	= TextField(requiredlabel("Category", "*"), [validators.Required()])
	CrCurrency 	= TextField(requiredlabel("Currency", "*"), [validators.Required()])

	Amount 		= TextField(requiredlabel("Amount", "*"), [validators.Required()])
	Transaction = TextField(requiredlabel("Transaction", "*"), [validators.Required()])

	TranDate 	= DateField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	# TranDate 	= TextField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	Reference 	= TextField("Reference",[validators.Length( max=35)])
	Note 		= TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=50),validators.Required()])

	TDrAccount 	= TextField("Till Account")
	DrCategory 	= TextField("Till Category")
	DrCurrency 	= TextField("Till Currency")

	def validate_DrCurrency(form,field):
		CrCurrency = form.CrCurrency.data
		DrCurrency = form.DrCurrency.data
		if DrCurrency:
			if DrCurrency != CrCurrency:
				raise ValidationError("Debit Currency cannot different credit currency.")

	def validate_TDrAccount(form,field):
		if form.TCrAccount.data:
			TellerParam = mktparam.getTellerParam()
			if TellerParam:
				if not form.TDrAccount.data :
					raise ValidationError("User don't have Till Account.%s"%form.TDrAccount.data)
			else:
				raise ValidationError("Please set Teller Parameter first before deposit transaction.")

	def validate_TDrAccount(form,field):
		if form.TCrAccount.data:
			TellerParam = mktparam.getTellerParam()
			if TellerParam:
				if not form.TDrAccount.data :
					raise ValidationError("User don't have Till Account.")
				if not form.DrCurrency.data:
					raise ValidationError("Debit Category not found .")
			else:
				raise ValidationError("Please set Teller Parameter first before deposit transaction.")

	def validate_Amount(form, field):
		CrCurrency  = str(request.form['CrCurrency'])
		if CrCurrency:
			Amo=str(form.Amount.data)
			Amo=Amo.replace(',','')

			CrAccount 	=	form.TCrAccount.data
			CrCurrency 	=	form.CrCurrency.data
			TranDate 	=	str(form.TranDate.data)
			CheckBalance1 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr",TranDate=TranDate)
			if CheckBalance1:
				raise ValidationError(CheckBalance1)

			DrAccount 		=	form.TDrAccount.data
			DrCurrency 		=	form.DrCurrency.data
			CheckBalance2 	= mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr",TranDate=TranDate)
			if CheckBalance2:
				raise ValidationError(CheckBalance2)

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()
		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	@staticmethod
	def setVisible():		
		control_list=['TDrAccount','DrCategory','DrCurrency','Transaction']
		return control_list


	@staticmethod
	def moneyField():
		return [("Amount","CrCurrency")]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCategory',len2),
						('CrCurrency',len2)	]

		return control_list

	@staticmethod
	def setDisable():
		return [ ('TDrAccount'),('DrCategory'), ('DrCurrency'), ('CrCategory'), ('CrCurrency')]

	@staticmethod
	def listField():

		Fields = ["ID", "TDrAccount","DrCurrency", "TCrAccount", "CrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields,["ID*LK*DP"]

	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"DrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []


		fielddisplay 	= "$('#CrCategory').val(data.CrCategory); $('#CrCurrency').val(data.CrCurrency); $('#TDrAccount').val(data.DrAccount); $('#DrCurrency').val(data.DrCurrency); $('#DrCategory').val(data.DrCategory); $('#Transaction').val(data.TranCode);"
		varname 		= "TCrAccount:$('#TCrAccount').val()"
		fun 			= ["TCrAccount", varname, fielddisplay, "/Morakot/TellerDepositAccount", "change"]
		hotfield.append(fun)
		
		#set session[Teller] to DP
		fielddisplay 	= ""
		varname 		= "TCrAccount:'DP'"
		fun 			= ["TCrAccount", varname, fielddisplay, "/Morakot/TellerDepositAccount", "select2-focus"]
		hotfield.append(fun)
		
		# fielddisplay 	= ""
		# varname 		= "TCrAccount:'DP'"
		# fun 			= ["TCrAccount", varname, fielddisplay, "/Morakot/TellerDepositAccount", "focus"]
		# hotfield.append(fun)

		return hotfield

	@staticmethod
	def formReadOnly():

		return "AUTH"

	@staticmethod
	def beforeNewID ():
		Check = mktteller.isUserTillAccount()
		if not Check[0]:
			return True,Check[1]
		else:
			#Mean that user have cash account.
			return False,''
			
	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeInsert():
		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel

		if AuthLevel == 0 :

			DrAcc 		= request.form['TDrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['TCrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			Module 		= 'DP'
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']
			
			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_TELLER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False

			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False

		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			# AuthLevel 	= g.getNAuthorize
			# print 'beforeAuthorize: %s'% AuthLevel
			# ID 			= g.formID
			ID 				= 	g.formID
			DepositObj 	=	MKT_TELLER_INAU.query.get(ID)
			
			if not DepositObj:

				flash(msg_error + "Deposit %s not found." %ID)
				return False

			else:

				Amo 			=	DepositObj.Amount if DepositObj.Amount else 0

				CrAccount 		=	DepositObj.TCrAccount
				CrCurrency 		=	DepositObj.CrCurrency
				TranDate 		=	DepositObj.TranDate
				CheckBalance1 	= 	mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr",TranDate=TranDate)

				if CheckBalance1:
					
					flash(msg_error + CheckBalance1)
					return False

				DrAccount 		=	DepositObj.TDrAccount
				DrCurrency 		=	DepositObj.DrCurrency
				CheckBalance2 	= 	mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr",TranDate=TranDate)
				
				if CheckBalance2:

					flash(msg_error + CheckBalance2)
					return False

				CheckAccounting = mktteller.setAuthorize('DP',MKT_TELLER,MKT_TELLER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			TellerObj 	=	MKT_TELLER.query.get(ID)
			
			if not TellerObj:

				return True, "%s Deposit %s not found." %(msg_error, ID)

			else:

				Amo 		=	TellerObj.Amount if TellerObj.Amount else 0
				DrAccount 	=	TellerObj.TCrAccount
				DrCurrency 	=	TellerObj.CrCurrency
				TranDate 	=	TellerObj.TranDate
				
				if ID[-1:] == 'R':
					CheckBalance1DrCr = "Cr"
					CheckBalance2DrCr = "Dr"
				else:
					CheckBalance1DrCr = "Dr"
					CheckBalance2DrCr = "Cr"

				CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo),CheckBalance1DrCr,TranDate=TranDate)
				
				if CheckBalance1:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance1)

				CrAccount 	=	TellerObj.TDrAccount
				CrCurrency 	=	TellerObj.DrCurrency
				CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), CheckBalance2DrCr)

				if CheckBalance2:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance2)

				Check = mktteller.validationReverse(MKT_TELLER,MKT_TELLER_INAU,ID)
			
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('Teller',AuthLevel,'DP',MKT_TELLER,MKT_TELLER_INAU,ID,Inputter,Createdon)
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]

				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

	@staticmethod
	def IsAcceptOverrideINAU():
		ID 			= g.formID
		TellerObj 	= MKT_TELLER_INAU.query.get(ID)
		AccountID = TellerObj.TCrAccount
		TranDate = TellerObj.TranDate
		PostFutureDate = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if PostFutureDate:
			Validate = True
			Override = True
			Msg = msg_warning + PostFutureDate
			return Override, Msg, Validate
		return mktteller.checkDDAccount(AccountID)

	@staticmethod
	def IsAcceptOverride():
		AccountID = request.form['TCrAccount']
		return mktteller.checkDDAccount(AccountID)
