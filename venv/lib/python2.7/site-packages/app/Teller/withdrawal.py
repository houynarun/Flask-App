from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *
import time
from decimal 					import *
from flask 						import session,flash

import app.tools.mktparam   	as mktparam
import app.tools.mktdate 		as mktdate
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktaccount 	as mktaccount
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.mktfundtransfer 	as mktfundtransfer
from app.Account.models 		import *
from app.JAccount.models 		import *

@app.route("/Morakot/TellerWithdrawalAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getWithdrawal():
	AccountID 		= request.args.get('TDrAccount')
	return mktteller.getFundAcount("WD",AccountID)

def loadCurrentDate():
	return 	mktdate.getBankDate()

class FRM_WITHDRAWAL(exform):

	TDrAccount 	= RemoteTextField(requiredlabel("Account","*"), [validators.Required()])
	DrCategory 	= TextField(requiredlabel("Category", "*"), [validators.Required()])
	DrCurrency 	= TextField(requiredlabel("Currency", "*"), [validators.Required()])
	Amount 		= TextField(requiredlabel("Amount", "*"), [validators.Required()])

	Transaction = TextField(requiredlabel("Transaction Code", "*"), [validators.Required()])
	TranDate = DateField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	# TranDate = TextField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)

	Reference 	= TextField("Reference",[validators.Length( max=35)])
	Note 		= TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=50),validators.Required()])
	TCrAccount 	= TextField("Till Account")
	CrCategory 	= TextField("Till Category")
	CrCurrency 	= TextField("Till Currency")

	def validate_DrCurrency(form,field):
		CrCurrency = form.CrCurrency.data
		DrCurrency = form.DrCurrency.data
		if DrCurrency:
			if DrCurrency != CrCurrency:
				raise ValidationError("Debit Currency cannot different credit currency.")

	def validate_Amount(form, field):
		
		Amo 		=	str(form.Amount.data)
		Amo 		= 	Amo.replace(',','')
		DrAccount 	=	form.TDrAccount.data
		DrCurrency 	=	form.DrCurrency.data
		TranDate 	=	str(form.TranDate.data)

		CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr",TranDate=TranDate)
		
		if CheckBalance1:

			raise ValidationError(CheckBalance1)

		CrAccount 	=	form.TCrAccount.data
		CrCurrency 	=	form.CrCurrency.data
		CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr",TranDate=TranDate)

		if CheckBalance2:
			
			raise ValidationError(CheckBalance2)

	def validate_TCrAccount(form,field):
		if form.TDrAccount.data:
			Currency = form.DrCurrency.data
			TellerParam = mktparam.getTellerParam()
			if TellerParam:
				if not form.TCrAccount.data :
					raise ValidationError("User don't have Till Account.%s"%form.TCrAccount.data)
				else:
					AccObj = mktteller.getTillAccountObj("",Currency)
					if AccObj:
						if float(AccObj.Balance) <0:
							raise ValidationError("Please open till first before withdrawal transaction. current balance 0")
					else:
						raise ValidationError("Till account not found.")
			else:
				raise ValidationError("Please set Teller Parameter first before withdrawal transaction.")

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data

		try:

			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)


	@staticmethod
	def setVisible():
	
		control_list=['TCrAccount','CrCategory','CrCurrency','Transaction']
		return control_list

	@staticmethod
	def moneyField():
		return [('Amount','DrCurrency')]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCategory',len2),
						('CrCurrency',len2)	]

		return control_list

	@staticmethod
	def setDisable():
		return [ ('TCrAccount'),('CrCategory'), ('CrCurrency'), ('DrCategory'), ('DrCurrency')]

	@staticmethod
	def listField():

		Fields = ["ID", "TDrAccount","DrCurrency", "TCrAccount", "CrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields,["ID*LK*WD"]

	@staticmethod
	def formatMoney(): # for listField 
		return ["Amount"],"DrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#TCrAccount').val(data.CrAccount); $('#CrCategory').val(data.CrCategory); $('#CrCurrency').val(data.CrCurrency); $('#DrCurrency').val(data.DrCurrency); $('#DrCategory').val(data.DrCategory); $('#Transaction').val(data.TranCode);"
		varname 		= "TDrAccount:$('#TDrAccount').val()"
		fun 			= ["TDrAccount", varname, fielddisplay, "/Morakot/TellerWithdrawalAccount", "change"]
		hotfield.append(fun)

		# fielddisplay 	= ""
		# varname 		= "TDrAccount:'WD'"
		# fun 			= ["s2id_autogen2_search", varname, fielddisplay, "/Morakot/TellerWithdrawalAccount", "focus"]
		# hotfield.append(fun)
		fielddisplay 	= ""
		varname 		= "TDrAccount:'WD'"
		fun 			= ["TDrAccount", varname, fielddisplay, "/Morakot/TellerWithdrawalAccount", "select2-focus"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def beforeNewID ():
		Check = mktteller.isUserTillAccount()
		if not Check[0]:
			return True,Check[1]
		else:
			#Mean that user have cash account.
			return False,''
	@staticmethod
	def formReadOnly():

		return "AUTH"

	@staticmethod
	def findinHist():
		return True
		
	@staticmethod
	def beforeInsert():
		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel

		if AuthLevel == 0 :

			DrAcc 		= request.form['TDrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['TCrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			Module 		= 'WD'
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']

			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_TELLER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False
			
			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False

		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			# AuthLevel 	= g.getNAuthorize
			# print 'beforeAuthorize: %s'% AuthLevel
			ID 				= 	g.formID
			DepositObj 	=	MKT_TELLER_INAU.query.get(ID)
			
			if not DepositObj:

				flash(msg_error + "Withdrawal %s not found." %ID)
				return False

			else:

				Amo 			=	DepositObj.Amount if DepositObj.Amount else 0
				if ID[-1:] == 'R':
					CheckBalance1DrCr = "Cr"
					CheckBalance2DrCr = "Dr"
				else:
					CheckBalance1DrCr = "Dr"
					CheckBalance2DrCr = "Cr"

				DrAccount 		=	DepositObj.TDrAccount
				DrCurrency 		=	DepositObj.DrCurrency
				TranDate 		=	DepositObj.TranDate
				CheckBalance1 	= 	mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), CheckBalance1DrCr,TranDate=TranDate)
				if CheckBalance1:

					flash(msg_error + CheckBalance1)
					return False
						
				CrAccount 		=	DepositObj.TCrAccount
				CrCurrency 		=	DepositObj.CrCurrency
				CheckBalance2 	= 	mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), CheckBalance2DrCr,TranDate=TranDate)
				if CheckBalance2:
					flash(msg_error + CheckBalance2)
					return False

				

				CheckAccounting = mktteller.setAuthorize('WD',MKT_TELLER,MKT_TELLER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			Check = mktteller.validationReverse(MKT_TELLER,MKT_TELLER_INAU,ID)
		
			if not Check[0]:
				Audit 		= mktaudit.getAuditrail()
				Inputter	= Audit['Inputter']
				Createdon 	= Audit['Createdon']
				CheckAccounting = mktteller.setReverse('Teller',AuthLevel,'WD',MKT_TELLER,MKT_TELLER_INAU,ID,Inputter,Createdon)
				if not CheckAccounting[0]:
					#Catch error
					db.session.rollback()
					db.session.close()
					return True,CheckAccounting[1]

				#Successfully
				db.session.commit()
				db.session.close()
				return True,CheckAccounting[1]

			else:
				return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

	@staticmethod
	def IsAcceptOverride():

		Override 	= True
		Msg 		= ""
		ID 			= request.form['TDrAccount']
		Amount 		= request.form['Amount']
		Currency 	= request.form['DrCurrency']
		Account 	= MKT_ACCOUNT.query.get(ID)

		if Account:

			JoinAcc 	= Account.JAccount

			if JoinAcc == 'Y':
				JoinID 		= Account.JoinID
				SpeMsg 		= ""
				Join 		= MKT_JACCOUNT.query.get(JoinID)
				
				if Join:
					SpeMsg 	= Join.SpecInstruction

				Msg 		= "This account %s was joinly opened. Instruction: %s " %(ID, SpeMsg)
			
			else:

				Msg 		= "The amount %s " %mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency), 2)
				Msg 		+= "will withdrawal from account#%s. " %ID

		Msg 		+= "Do you want to procceed?"

		return Override, Msg

