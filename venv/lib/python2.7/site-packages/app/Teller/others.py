from app.mktcore.imports 	import *
from .models 				import *

import app.tools.user 		as mktuser
import app.tools.mktaccount as mktaccount
import app.tools.mktmoney 	as mktmoney
import app.tools.mktreport 	as mktreport
import app.tools.mktparam 	as mktparam
import app.tools.mktteller 	as mktteller
import app.tools.mktdate 	as mktdate

from sqlalchemy import *

from app.CashAccount.models 	import *
from app.Branch.models 			import *
from app.AccProduct.models 		import *
from app.User.models 			import *

@app.route('/Morakot/CashPosition', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeCashPosition():
	ErrorMsg = []
	# Block check access right
	getCheck 	= checkAccess ("/Morakot/CashPosition/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("teller/cashposition.html",ErrorMsg=ErrorMsg)
	BankDate 		= mktdate.getBankDate()
	UserObj 		= mktuser.getUser()
	TellerParam 	= mktparam.getTellerParam()
	CurrentBranch 	= mktuser.getCurrentBranch()
	DicCash 		= {}
	ListUser 		= MKT_USER.query
	AccProObj 		= MKT_ACC_PRODUCT.query
	DicProduct 		= {}
	ListInternalAcc = [] 	
	for row in AccProObj:
		if row.ProductType == "I":
			ListInternalAcc.append(str(row.ID))
		DicProduct.update({str(row.ID):row.Description})

	if UserObj:
		CashAccountID 	= UserObj.CashAccount
		Role 			= str(UserObj.Role)
		DicCash 		= {}
		ListAccount 	= []
		SuspendAccPro 	= TellerParam.SuspendAccPro
		SurplusAccPro 	= TellerParam.SurplusAccPro
		ShortageAccPro	= TellerParam.ShortageAccPro
		TillAccPro 		= TellerParam.TillAccPro
		VaultAccPro 	= TellerParam.VaultAccPro
		WalletAccPro 	= TellerParam.WalletAccPro
		CashObj 		= MKT_CASH_ACCOUNT.query
		for row in CashObj:
			for item in str(row.Account).split():
				DicCash.update({item:str(row.ID)})
		ListAccPro = ListInternalAcc 
		if Role == "99": # Super Admin
			AccObj 		= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.AccProduct.in_(ListAccPro)).\
											order_by(
												MKT_ACCOUNT.Branch.asc(),
												MKT_ACCOUNT.AccProduct.asc(),
												MKT_ACCOUNT.ID.asc(),
												MKT_ACCOUNT.Currency.asc())
		elif Role == "97": # Chief Teller
			AccObj 		= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.AccProduct.in_(ListAccPro)).\
											filter(MKT_ACCOUNT.Branch==CurrentBranch).\
											order_by(MKT_ACCOUNT.AccProduct.asc(),
												MKT_ACCOUNT.ID.asc(),
												MKT_ACCOUNT.Currency.asc())
		else:
			InternalObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.AccProduct.in_(ListAccPro)).\
											filter(MKT_ACCOUNT.AccProduct!=VaultAccPro).\
											filter(MKT_ACCOUNT.Branch==CurrentBranch)
			for row in InternalObj:
				ListAccount.append(str(row.ID))

			CashObj 	=  CashObj.get(CashAccountID)
			if CashObj:
				ListAccount.extend(str(CashObj.Account).split()) #list.extend() accepts an arbitrary iterable List1=[a,b];List2=[c,d] => result=[a,b,c,d]
			AccObj = MKT_ACCOUNT.query.\
								filter(MKT_ACCOUNT.ID.in_(ListAccount)).\
								order_by(MKT_ACCOUNT.AccProduct.asc(),
										MKT_ACCOUNT.ID.asc(),
										MKT_ACCOUNT.Currency.asc())

		HideZeroBalance =	request.args.get('HideZero') if 'HideZero' in request.args else 'No'
		Branch 			=	request.args.get('Branch') if request.args.get('Branch') else mktuser.getCurrentBranch()
		BranchList 		=	Branch.split()
		if HideZeroBalance == 'Yes':
			AccObj 	=	AccObj.filter(MKT_ACCOUNT.Balance != 0)
		if Branch:
			AccObj 	= 	AccObj if 'ALL' in BranchList else AccObj.filter(MKT_ACCOUNT.Branch.in_(BranchList))
		if not AccObj.all():
			flash(msg_warning+"No record found.")
	
	return render_template("teller/cashposition.html",
							ErrorMsg=ErrorMsg,
							getUserCashAccount=mktteller.getUserCashAccount,
							toMoney=mktmoney.toMoney,
							HideZero=HideZeroBalance,
							float=float,
							VLOOKUP=mktreport.VLOOKUP,
							CurrencyObj = mktmoney.getCurrencyObj,
							AccObj=AccObj,
							DicCash=DicCash,
							ListUser=ListUser,
							DicProduct=DicProduct,
							BankDate=BankDate,
							Branch 	= Branch)