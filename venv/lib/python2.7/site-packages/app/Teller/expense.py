from app.mktcore.imports 			import *
from app.mktcore.wtfimports 	import *
from .models 					import *
from decimal 					import *

from app.Category.models 		import *
from app.Currency.models 		import *

import app.tools.mktdate 		as mktdate
import app.tools.mktparam 		as mktparam
import app.tools.mktaccount 	as mktaccount
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.mktmoney 		as mktmoney
import app.tools.user 			as mktuser

import app.tools.mktfundtransfer 	as mktfundtransfer
import app.tools.mktaccounting 		as mktaccounting

@app.route("/Morakot/ExpensePostingHotField", methods=['GET'])
def getExpensePostingHotField():
	return mktteller.getIncomeExpenseHotField('E')

def loadCurrentDate():
	return 	mktdate.getBankDate()


def loadCurrency():
	return MKT_CURRENCY.query


class FRM_EXPENSE_POSTING(exform):

	TDrAccount 	= TextField(requiredlabel('Debit Account', "*"), [validators.Required("Suspend Account not found.")])
	DrCategory 	= TextField(requiredlabel("Debit Category", "*"), [validators.Required()])
	DrCurrency 	= TextField(requiredlabel("Debit Currency", "*"), [validators.Required()])

	TCrAccount 	= TextField(requiredlabel('Credit Account', "*"), [validators.Required("Till Account not found.")])
	CrCategory 	= TextField(requiredlabel("Credit Category", "*"), [validators.Required()])
	CrCurrency 	= QuerySelectField(requiredlabel('Currency', "*"),
						query_factory=loadCurrency,
						get_label=u'ID',
						allow_blank=True,
						blank_text=u'--None--',
						validators=[validators.Required()])

	Amount 		= TextField(requiredlabel("Amount", "*"), [validators.Required()])
	Transaction = TextField(requiredlabel("Transaction Code", "*"), [validators.Required()])
	TranDate 	= DateField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	# TranDate 	= TextField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	Reference 	= TextField("Reference",[validators.Length( max=35)])
	Note 		= TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=50),validators.Required()])

	ExchangeRate 	= TextField(requiredlabel('Exchange Rate','*'),description='1-Detail',
												validators=[validators.Required(),
															mktteller.customValidateExchangeRate])

	LCYAmount 		= TextField(requiredlabel('LCY Amount','*'),description='1-Detail',
											validators=[validators.Required(),
														mktteller.customValidateLCYAmount])

	def validate_Amount(form, field):
		
		Amo 		=	str(form.Amount.data)
		Amo 		= 	Amo.replace(',','')

		CrAccount 	=	request.form['TCrAccount']
		CrCurrency 	=	request.form['CrCurrency']
		if CrCurrency:
			CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr")
			if CheckBalance2:
				
				raise ValidationError(CheckBalance2)

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)

	@staticmethod
	def setVisible():
		control_list=['Transaction','TDrAccount','DrCategory','DrCurrency','TCrAccount','CrCategory']
		return control_list

	@staticmethod
	def moneyField():
		return [('Amount','CrCurrency')]

	@staticmethod
	def setDisable():
		EnableExchangeRateField = mktsetting.getAppSetting('EnableExchangeRateField')
		if EnableExchangeRateField == 'Yes':
			return [('LCYAmount')]
		return [('LCYAmount'), ('ExchangeRate')]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3)]

		return control_list

	@staticmethod
	def listField():
		Fields = ["ID", "TDrAccount","DrCurrency", "TCrAccount", "CrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields,["ID*LK*EP"]

	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"CrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#TDrAccount').val(data.DrAccount); "
		fielddisplay 	+= "$('#DrCurrency').val(data.Currency);"
		fielddisplay 	+= "$('#DrCategory').val(data.DrCategory);"
		fielddisplay 	+="$('#Transaction').val(data.TranCode);"
		fielddisplay 	+="$('#TCrAccount').val(data.CrAccount);"
		fielddisplay 	+="$('#CrCategory').val(data.CrCategory);"
		fielddisplay 	+="$('#CrCurrency').val(data.Currency);"
		varname 		= "Currency:$('#CrCurrency').val()"
		fun 			= ["CrCurrency", varname, fielddisplay, "/Morakot/ExpensePostingHotField", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["CrCurrency", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["ExchangeRate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#CrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val()"
		fun 			= ["TranDate", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def beforeNewID ():
		#Check Teller Account
		Check = mktteller.isUserTillAccount()
		if not Check[0]:
			return True,Check[1]

		#Check Suspend Account
		CheckSuspendAccount = mktteller.isSuspendConfig()
		if not CheckSuspendAccount[0]:
			return True,CheckSuspendAccount[1]


		#Mean that user have cash account.
		return False,''
			
	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def findinHist():
		return True
	
	@staticmethod
	def beforeInsert():
		AuthLevel 	= g.getNAuthorize

		if AuthLevel == 0 :
			DrAcc 		= request.form['TDrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['TCrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			Amo  		= Decimal(request.form['Amount'].replace(',',''))
			LCYAmount	= Decimal(request.form['LCYAmount'].replace(',',''))
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']
			Module 		= "EP"

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']

			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_TELLER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False
			
			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,\
															Amo,Module,Tran,TranDate,Ref,Note,LCYAmount=LCYAmount)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False

		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			ID 				= 	g.formID
			TellerObj 	=	MKT_TELLER_INAU.query.get(ID)
			
			if not TellerObj:

				flash(msg_error + "Teller Expense posting %s not found." %ID)
				return False

			else:

				Amo 		=	TellerObj.Amount if TellerObj.Amount else 0
				CrAccount 	=	TellerObj.TCrAccount
				CrCurrency 	=	TellerObj.CrCurrency
				if ID[-1:] == 'R':
					CheckBalanceDrCr = "Dr"
					
				else:
					CheckBalanceDrCr = "Cr"

				CheckBalance = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), CheckBalanceDrCr)
				if CheckBalance:

					flash(msg_error + CheckBalance)
					return False

				# Call function to commit add account by currency 
				CheckAccounting = mktteller.setAuthorize('EP',MKT_TELLER,MKT_TELLER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True

		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			TellerObj 	=	MKT_TELLER.query.get(ID)
			
			if not TellerObj:

				return True, "%s Teller Expense posting %s not found." %(msg_error, ID)

			else:

				Check = mktteller.validationReverse(MKT_TELLER,MKT_TELLER_INAU,ID)

				if not Check[0]:

					Amo 		=	TellerObj.Amount if TellerObj.Amount else 0
					DrAccount 	=	TellerObj.TCrAccount
					DrCurrency 	=	TellerObj.CrCurrency
					CheckBalance = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr")

					if CheckBalance:
						db.session.rollback()
						return True, "%s %s" %(msg_error, CheckBalance)

					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('Teller',AuthLevel,'EP',MKT_TELLER,MKT_TELLER_INAU,ID,Inputter,Createdon)
					
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e
	'''
	@staticmethod
	def IsAcceptOverride():

		Override 	= True
		Msg 		= ""


		Account 	= request.form['TCrAccount']
		Currency 	= request.form['CrCurrency']
		Amount 		= request.form['Amount']
		AccountObj 	= MKT_ACCOUNT.query.get(Account)

		if AccountObj:

			Msg 		= "The amount %s " %mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency), 2)
			Msg 		+= "will withdrawal from account#%s. " %AccountObj.ID

		Msg 	+= "Do you want to procceed?"

		return Override, Msg

'''
	