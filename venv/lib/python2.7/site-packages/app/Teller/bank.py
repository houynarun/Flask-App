from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *
import time
from decimal 					import *
from flask 						import flash

import app.tools.mktparam   	as mktparam
import app.tools.mktdate 		as mktdate
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktaccount 	as mktaccount
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.user 			as mktuser
import app.tools.mktsetting 	as mktsetting
import app.tools.mktfundtransfer 	as mktfundtransfer
from app.Account.models 		import *
from app.Bank.models 			import *


@app.route("/Morakot/TellerDepositBank", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def TellerDepositBank():
	AccountID 		= request.args.get('TCrAccount')if 'TCrAccount' in request.args else ''
	Bank 			= request.args.get('Bank') 		if 'Bank' in request.args else ''
	CashType 		= request.args.get('CashType') 	if 'CashType' in request.args else ''

	return mktteller.getFundAcount("CB",AccountID,Bank,CashType)


@app.route("/Morakot/TellerWithdrawalBank", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def TellerWithdrawalBank():
	AccountID 		= request.args.get('TDrAccount')if 'TDrAccount' in request.args else ''
	Bank 			= request.args.get('Bank') 		if 'Bank' in request.args else ''
	CashType 		= request.args.get('CashType') 	if 'CashType' in request.args else ''
	return mktteller.getFundAcount("WB",AccountID,Bank,CashType)


def loadCurrentDate():
	return 	mktdate.getBankDate()


def loadBank():
	return MKT_BANK.query.order_by(MKT_BANK.ID)


class FRM_DEPOSIT_BANK(exform):

	CashType 	= TextField(requiredlabel("Cash Type", "*"), [validators.Required()],default='3')# 3= By Bank
	Bank 		= QuerySelectField(requiredlabel("Bank", "*"),
									query_factory=loadBank,
									get_label=lambda a: a.ID + " - " + a.Description,
									allow_blank=True,
									blank_text=u'--None--',
									validators=[validators.Required()])
	ChequeNo	= TextField("ChequeNo")
	TDrAccount 	= TextField("Bank Account")
	DrCategory 	= TextField("Bank Category")
	DrCurrency 	= TextField("Bank Currency")

	TCrAccount 	= RemoteTextField(requiredlabel("Account","*"), [validators.Required()])
	CrCategory 	= TextField(requiredlabel("Category", "*"), [validators.Required()])
	CrCurrency 	= TextField(requiredlabel("Currency", "*"), [validators.Required()])

	Amount 		= TextField(requiredlabel("Amount", "*"), [validators.Required()])
	Transaction = TextField(requiredlabel("Transaction", "*"), [validators.Required()])

	TranDate 	= DateField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	# TranDate 	= TextField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	Reference 	= TextField("Reference",[validators.Length( max=35)])
	Note 		= TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=50),validators.Required()])

	def validate_TDrAccount(form,field):
		Account 	= form.TDrAccount.data
		Category 	= form.DrCategory.data
		Bank 		= form.Bank.data
		if Bank:
			CheckBank = mktteller.getValidateBankAccount(Bank.Description,Category,Account)
			if not CheckBank[0]:
				raise ValidationError(CheckBank[1])


	def validate_DrCategory(form,field):
		DrCategory 	= form.DrCategory.data
		Bank = form.Bank.data
		if Bank:
			if not DrCategory:
				raise ValidationError("Bank Category not found.")


	def validate_DrCurrency(form,field):

		DrCurrency = form.DrCurrency.data
		Account = request.form['TCrAccount']
		if Account:
			if not DrCurrency:
				raise ValidationError("Bank Currency not found.")


	def validate_Amount(form, field):
		Branch 		= 	mktuser.getCurrentBranch()
		DrAccount 	=	form.TDrAccount.data
		DrCategory 	=	form.DrCategory.data
		DrCurrency 	=	form.DrCurrency.data

		CrAccount 	=	form.TCrAccount.data
		CrCurrency 	=	form.CrCurrency.data
		CrCategory 	=	form.CrCategory.data
		TranDate 	=	str(form.TranDate.data)

		if CrCurrency:
			Amount = form.Amount.data
			Amount = Decimal(Amount.replace(',',''))

			# Validate Balance
			Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,Amount,TranDate=TranDate)
			if not Check[0]:
				#Catch error
				raise ValidationError(Check[1].replace('Error,',''))


	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()
		except:
			raise ValidationError("This field must be in date format.")
		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	@staticmethod
	def setVisible():
		control_list=['TDrAccount','DrCategory','DrCurrency','Transaction','CashType','ChequeNo']
		return control_list


	@staticmethod
	def moneyField():
		return [("Amount","CrCurrency")]


	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCategory',len2),
						('CrCurrency',len2)	]

		return control_list


	@staticmethod
	def setDisable():
		return [ ('TDrAccount'),('DrCategory'), ('DrCurrency'), ('CrCategory'), ('CrCurrency')]


	@staticmethod
	def listField():

		Fields = ["ID", "DrCategory","DrCurrency", "TCrAccount", "CrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields,["ID*LK*CB"]


	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"DrCurrency"
		# Amount is the fields to be formatted based on Currency field


	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#CrCategory').val(data.CrCategory);$('#CrCurrency').val(data.CrCurrency);"\
						 +"$('#TDrAccount').val(data.DrAccount);$('#DrCategory').val(data.DrCategory);"\
						 +"$('#DrCurrency').val(data.DrCurrency);$('#Transaction').val(data.TranCode);"
		varname 		= "TCrAccount:$('#TCrAccount').val(),Bank:$('#Bank').val(),CashType:$('#CashType').val()"
		fun 			= ["TCrAccount", varname, fielddisplay, "/Morakot/TellerDepositBank", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CrCategory').val(data.CrCategory);$('#CrCurrency').val(data.CrCurrency);"\
						 +"$('#TDrAccount').val(data.DrAccount);$('#DrCategory').val(data.DrCategory);"\
						 +"$('#DrCurrency').val(data.DrCurrency);$('#Transaction').val(data.TranCode);"
		varname 		= "TCrAccount:$('#TCrAccount').val(),Bank:$('#Bank').val(),CashType:$('#CashType').val()"
		fun 			= ["Bank", varname, fielddisplay, "/Morakot/TellerDepositBank", "change"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def formReadOnly():
		return "AUTH"



	@staticmethod
	def findinHist():
		return True


	@staticmethod
	def beforeInsert():
		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel

		if AuthLevel == 0 :

			DrAcc 		= request.form['TDrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['TCrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			Module 		= 'CB'
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']
			Mode 		= mktteller.getMode(DrAcc,CrAcc)

			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_TELLER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False

			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False

		return True


	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			# AuthLevel 	= g.getNAuthorize
			# print 'beforeAuthorize: %s'% AuthLevel
			ID 			= 	g.formID
			TellerObj 	=	MKT_TELLER_INAU.query.get(ID)
			
			if not TellerObj:

				flash(msg_error + "Deposit Bank %s not found." %ID)
				return False

			else:

				Amount 			= Decimal(TellerObj.Amount) if TellerObj.Amount else Decimal(0)
				Branch 			= TellerObj.Branch
				TranDate		= TellerObj.TranDate

				if ID[-1:] == 'R': # Case reverse

					DrAccount 		= TellerObj.TCrAccount
					DrCategory 		= TellerObj.CrCategory
					DrCurrency 		= TellerObj.CrCurrency

					CrAccount 		= TellerObj.TDrAccount
					CrCategory 		= TellerObj.DrCategory
					CrCurrency 		= TellerObj.DrCurrency

				else: # Not reverse

					DrAccount 		= TellerObj.TDrAccount
					DrCategory 		= TellerObj.DrCategory
					DrCurrency 		= TellerObj.DrCurrency

					CrAccount 		= TellerObj.TCrAccount
					CrCategory 		= TellerObj.CrCategory
					CrCurrency 		= TellerObj.CrCurrency
					

				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,Amount,TranDate=TranDate)
				if not Check[0]:
					#Catch error
					flash(msg_error + Check[1])
					db.session.rollback()
					db.session.close()
					return False

				CheckAccounting = mktteller.setAuthorize('CB',MKT_TELLER,MKT_TELLER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False


	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			TellerObj 	=	MKT_TELLER.query.get(ID)
			
			if not TellerObj:

				return True, "%s Deposit by bank %s not found." %(msg_error, ID)

			else:

				Amount 			= Decimal(TellerObj.Amount) if TellerObj.Amount else Decimal(0)
				Branch 			= TellerObj.Branch

				# Need to reverse Dr/Cr for validation
				DrAccount 		= TellerObj.TCrAccount
				DrCategory 		= TellerObj.CrCategory
				DrCurrency 		= TellerObj.CrCurrency

				CrAccount 		= TellerObj.TDrAccount
				CrCategory 		= TellerObj.DrCategory
				CrCurrency 		= TellerObj.DrCurrency
				TranDate 		= TellerObj.TranDate

				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,Amount,TranDate=TranDate)
				if not Check[0]:
					#Catch error
					flash(msg_error + Check[1])
					db.session.rollback()
					db.session.close()
					return False

				Check = mktteller.validationReverse(MKT_TELLER,MKT_TELLER_INAU,ID)
			
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('Teller',AuthLevel,'CB',MKT_TELLER,MKT_TELLER_INAU,ID,Inputter,Createdon)
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]

				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e


	@staticmethod
	def IsAcceptOverrideINAU():
		ID 			= g.formID
		TellerObj 	= MKT_TELLER_INAU.query.get(ID)
		AccountID 	= TellerObj.TCrAccount
		TranDate 	= TellerObj.TranDate
		PostFutureDate = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if PostFutureDate:
			Validate = True
			Override = True
			Msg = msg_warning + PostFutureDate
			return Override, Msg, Validate
	
		return mktteller.checkDDAccount(AccountID)


	@staticmethod
	def IsAcceptOverride():
		AccountID = request.form['TCrAccount']
		return mktteller.checkDDAccount(AccountID)


class FRM_WITHDRAWAL_BANK(exform):

	CashType 	= TextField(requiredlabel("Cash Type", "*"), [validators.Required()],default='3')# 3= By Bank
	Bank 		= QuerySelectField(requiredlabel("Bank", "*"),
									query_factory=loadBank,
									get_label=lambda a: a.ID + " - " + a.Description,
									allow_blank=True,
									blank_text=u'--None--',
									validators=[validators.Required()])

	TCrAccount 	= TextField("Bank Account")
	CrCategory 	= TextField("Bank Category")
	CrCurrency 	= TextField("Bank Currency")

	TDrAccount 	= RemoteTextField(requiredlabel("Account","*"), [validators.Required()])
	DrCategory 	= TextField(requiredlabel("Category", "*"), [validators.Required()])
	DrCurrency 	= TextField(requiredlabel("Currency", "*"), [validators.Required()])

	Amount 		= TextField(requiredlabel("Amount", "*"), [validators.Required()])
	Transaction = TextField(requiredlabel("Transaction", "*"), [validators.Required()])

	# TranDate 	= DateField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	TranDate 	= TextField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	ChequeNo	= TextField("Cheque #", validators=[validators.Length(max=12)])
	Reference 	= TextField("Reference",[validators.Length( max=35)])
	Note 		= TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=50),validators.Required()])

	def validate_TCrAccount(form,field):
		Account 	= form.TCrAccount.data
		Category 	= form.CrCategory.data
		Bank 		= form.Bank.data
		if Bank:
			CheckBank = mktteller.getValidateBankAccount(Bank.Description,Category,Account)
			if not CheckBank[0]:
				raise ValidationError(CheckBank[1])

	def validate_CrCategory(form,field):
		CrCategory 	= form.CrCategory.data
		Bank = form.Bank.data
		if Bank:
			if not CrCategory:
				raise ValidationError("Bank Category not found.")
			
	def validate_CrCurrency(form,field):
		CrCurrency = form.CrCurrency.data
		Account = request.form['TDrAccount']
		if Account:
			if not CrCurrency:
				raise ValidationError("Bank Currency not found.")

	def validate_Amount(form, field):

		Branch 		= 	mktuser.getCurrentBranch()
		DrAccount 	=	form.TDrAccount.data
		DrCategory 	=	form.DrCategory.data
		DrCurrency 	=	form.DrCurrency.data

		CrAccount 	=	form.TCrAccount.data
		CrCurrency 	=	form.CrCurrency.data
		CrCategory 	=	form.CrCategory.data
		TranDate 	=	str(form.TranDate.data)

		if CrCurrency:
			Amount = form.Amount.data
			Amount = Decimal(Amount.replace(',',''))

			# Validate Balance
			Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,Amount,TranDate=TranDate)
			if not Check[0]:
				#Catch error
				raise ValidationError(Check[1].replace('Error,',''))

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()
		except:
			raise ValidationError("This field must be in date format.")
		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	@staticmethod
	def setVisible():		
		control_list=['TCrAccount','CrCategory','CrCurrency','Transaction','CashType']
		return control_list


	@staticmethod
	def moneyField():
		return [("Amount","DrCurrency")]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('DrCategory',len2),
						('DrCurrency',len2)	]

		return control_list

	@staticmethod
	def setDisable():
		return [ ('TCrAccount'),('CrCategory'), ('CrCurrency'), ('DrCategory'), ('DrCurrency'), ('TranDate')]

	@staticmethod
	def listField():

		Fields = ["ID", "CrCategory","CrCurrency", "TDrAccount", "DrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields,["ID*LK*WB"]

	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"CrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []


		fielddisplay 	= "$('#TCrAccount').val(data.CrAccount);$('#CrCategory').val(data.CrCategory);"\
						+"$('#CrCurrency').val(data.CrCurrency);$('#Transaction').val(data.TranCode);"\
						+"$('#DrCategory').val(data.DrCategory);$('#DrCurrency').val(data.DrCurrency);"
		varname 		= "TDrAccount:$('#TDrAccount').val(),Bank:$('#Bank').val(),CashType:$('#CashType').val()"
		fun 			= ["TDrAccount", varname, fielddisplay, "/Morakot/TellerWithdrawalBank", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#TCrAccount').val(data.CrAccount);$('#CrCategory').val(data.CrCategory);"\
						+"$('#CrCurrency').val(data.CrCurrency);$('#Transaction').val(data.TranCode);"\
						+"$('#DrCategory').val(data.DrCategory);$('#DrCurrency').val(data.DrCurrency);"
		varname 		= "TDrAccount:$('#TDrAccount').val(),Bank:$('#Bank').val(),CashType:$('#CashType').val()"
		fun 			= ["Bank", varname, fielddisplay, "/Morakot/TellerWithdrawalBank", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def formReadOnly():
		return "AUTH"
			
	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeInsert():
		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel

		if AuthLevel == 0 :

			CrAcc 		= request.form['TCrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			DrAcc 		= request.form['TDrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			Module 		= 'WB'
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']
			Mode 		= mktteller.getMode(DrAcc,CrAcc)
			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_TELLER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False

			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False

		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			# AuthLevel 	= g.getNAuthorize
			# print 'beforeAuthorize: %s'% AuthLevel
			# ID 			= g.formID
			ID 				= 	g.formID
			TellerObj 	=	MKT_TELLER_INAU.query.get(ID)
			
			if not TellerObj:

				flash(msg_error + "Withdrawal Bank %s not found." %ID)
				return False

			else:

				Amount 			= Decimal(TellerObj.Amount) if TellerObj.Amount else Decimal(0)
				Branch 			= TellerObj.Branch
				TranDate		= TellerObj.TranDate

				if ID[-1:] == 'R': # Case reverse

					DrAccount 		= TellerObj.TCrAccount
					DrCategory 		= TellerObj.CrCategory
					DrCurrency 		= TellerObj.CrCurrency

					CrAccount 		= TellerObj.TDrAccount
					CrCategory 		= TellerObj.DrCategory
					CrCurrency 		= TellerObj.DrCurrency

				else: # Not reverse

					DrAccount 		= TellerObj.TDrAccount
					DrCategory 		= TellerObj.DrCategory
					DrCurrency 		= TellerObj.DrCurrency

					CrAccount 		= TellerObj.TCrAccount
					CrCategory 		= TellerObj.CrCategory
					CrCurrency 		= TellerObj.CrCurrency
					

				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,Amount,TranDate=TranDate)
				if not Check[0]:
					#Catch error
					flash(msg_error + Check[1])
					db.session.rollback()
					db.session.close()
					return False

				CheckAccounting = mktteller.setAuthorize('WB',MKT_TELLER,MKT_TELLER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			TellerObj 	=	MKT_TELLER.query.get(ID)
			
			if not TellerObj:

				return True, "%s Withdrawal by bank %s not found." %(msg_error, ID)

			else:

				Amount 			=Decimal(TellerObj.Amount) if TellerObj.Amount else Decimal(0)
				Branch 			= TellerObj.Branch

				# Need to reverse Dr/Cr for validation
				DrAccount 		= TellerObj.TCrAccount
				DrCategory 		= TellerObj.CrCategory
				DrCurrency 		= TellerObj.CrCurrency

				CrAccount 		= TellerObj.TDrAccount
				CrCategory 		= TellerObj.DrCategory
				CrCurrency 		= TellerObj.DrCurrency
				TranDate 		= TellerObj.TranDate

				# Validate Balance
				Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAccount,DrCategory,DrCurrency,CrAccount,CrCategory,CrCurrency,Amount,TranDate=TranDate)
				if not Check[0]:
					#Catch error
					flash(msg_error + Check[1])
					db.session.rollback()
					db.session.close()
					return False
				
				Check = mktteller.validationReverse(MKT_TELLER,MKT_TELLER_INAU,ID)
			
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('Teller',AuthLevel,'WB',MKT_TELLER,MKT_TELLER_INAU,ID,Inputter,Createdon)
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]

				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e
