from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *
import time
from decimal 					import *
from flask 						import flash

import app.tools.mktparam   	as mktparam
import app.tools.mktdate 		as mktdate
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktaccount 	as mktaccount
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.user 			as mktuser
import app.tools.mktfundtransfer 	as mktfundtransfer
from app.Account.models 		import *
from app.Bank.models 			import *

@app.route("/Morakot/TellerDepositCheque", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def TellerDepositCheque():
	AccountID 		= request.args.get('TCrAccount')
	return mktteller.getFundAcount("CC",AccountID)


@app.route("/Morakot/TellerWithdrawalCheque", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def TellerWithdrawalCheque():
	AccountID 		= request.args.get('TDrAccount')
	return mktteller.getFundAcount("WC",AccountID)


def loadCurrentDate():
	return 	mktdate.getBankDate()

def loadBank():
	return MKT_BANK.query#.filter(MKT_BANK.Category =='')


class FRM_DEPOSIT_CHEQUE(exform):
	
	CashType 	= TextField(requiredlabel("Cash Type", "*"), [validators.Required()],default='2')#2 = By Cheque
	Bank 		= TextField("Bank")
	ChequeNo	= TextField(requiredlabel("Cheque #", "*"), validators=[validators.Required(),validators.Length(max=12)])
	TDrAccount 	= TextField("Bank Account")
	DrCategory 	= TextField("Bank Category")
	DrCurrency 	= TextField("Bank Currency")

	TCrAccount 	= RemoteTextField(requiredlabel("Account","*"), [validators.Required()])
	CrCategory 	= TextField(requiredlabel("Category", "*"), [validators.Required()])
	CrCurrency 	= TextField(requiredlabel("Currency", "*"), [validators.Required()])

	Amount 		= TextField(requiredlabel("Amount", "*"), [validators.Required()])
	Transaction = TextField(requiredlabel("Transaction", "*"), [validators.Required()])

	TranDate 	= DateField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	# TranDate 	= TextField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	Reference 	= TextField("Reference",[validators.Length( max=35)])
	Note 		= TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=50),validators.Required()])


	def validate_DrCategory(form,field):
		try:
			
			DrCategory 	= form.DrCategory.data
			Account =form.TCrAccount.data
			TranDate =form.TranDate.data
			if Account:
				if not DrCategory:
					raise ValidationError("Cheque Category not found. Please configuration in app setting.")
				else:

					Branch 		= mktuser.getCurrentBranch()
					DrCategory 	= form.DrCategory.data
					DrCurrency 	= form.DrCurrency.data
					Amount 		= Decimal(form.Amount.data)
					CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, DrCategory, DrCurrency, Branch, 'Dr',TranDate=TranDate)
					if CheckBalance[0] == False:
						raise ValidationError(CheckBalance[1])
		except Exception as e:
			raise

	def validate_DrCurrency(form,field):
		DrCurrency = form.DrCurrency.data
		Account =form.TCrAccount.data
		if Account:
			if not DrCurrency:
				raise ValidationError("Bank Currency not found.")

	def validate_Amount(form, field):
		CrCurrency  = str(request.form['CrCurrency'])
		if CrCurrency:
			Amo=str(form.Amount.data)
			Amo=Amo.replace(',','')

			CrAccount 	=	form.TCrAccount.data
			CrCurrency 	=	form.CrCurrency.data
			TranDate 	=	str(form.TranDate.data)
			CheckBalance1 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr",TranDate=TranDate)
			if CheckBalance1:
				raise ValidationError(CheckBalance1)

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()
		except:
			raise ValidationError("This field must be in date format.")
		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	@staticmethod
	def setVisible():		
		control_list=['TDrAccount','DrCategory','DrCurrency','Transaction','CashType','Bank']
		return control_list


	@staticmethod
	def moneyField():
		return [("Amount","CrCurrency")]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCategory',len2),
						('CrCurrency',len2)	]

		return control_list

	@staticmethod
	def setDisable():
		return [ ('TDrAccount'),('DrCategory'), ('DrCurrency'), ('CrCategory'), ('CrCurrency')]

	@staticmethod
	def listField():

		Fields = ["ID", "DrCategory","DrCurrency", "TCrAccount", "CrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields,["ID*LK*CC"]

	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"DrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#CrCategory').val(data.CrCategory); $('#CrCurrency').val(data.CrCurrency); $('#DrCategory').val(data.DrCategory); $('#DrCurrency').val(data.CrCurrency); $('#Transaction').val(data.TranCode);"
		varname 		= "TCrAccount:$('#TCrAccount').val()"
		fun 			= ["TCrAccount", varname, fielddisplay, "/Morakot/TellerDepositCheque", "change"]
		hotfield.append(fun)

		# fielddisplay 	= "$('#DrCategory').val(data.Category);"
		# varname 		= "Bank:$('#Bank').val(),CashType:$('#CashType').val()"
		# fun 			= ["TCrAccount", varname, fielddisplay, "/Morakot/TellerGetBank", "change"]
		# hotfield.append(fun)

		# #set session[Teller] to DP
		# fielddisplay 	= ""
		# varname 		= "TCrAccount:'DP'"
		# fun 			= ["s2id_autogen2_search", varname, fielddisplay, "/Morakot/TellerDepositAccount", "focus"]
		# hotfield.append(fun)

		return hotfield

	@staticmethod
	def formReadOnly():
		return "AUTH"
			
	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeInsert():
		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel

		if AuthLevel == 0 :

			DrAcc 		= request.form['TDrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['TCrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			Module 		= 'CC'
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']
			Mode 		= "DrDirect"
			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_TELLER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False

			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False

		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			# AuthLevel 	= g.getNAuthorize
			# print 'beforeAuthorize: %s'% AuthLevel
			# ID 			= g.formID
			ID 				= 	g.formID
			DepositObj 	=	MKT_TELLER_INAU.query.get(ID)
			
			if not DepositObj:

				flash(msg_error + "Deposit by cheque %s not found." %ID)
				return False

			else:

				Amount 			=	Decimal(DepositObj.Amount) if DepositObj.Amount else Decimal(0)
			
				if ID[-1:] == 'R':
					CheckBalance1DrCr = "Dr"
					CheckBalance2DrCr = "Cr"
				else:
					CheckBalance1DrCr = "Cr"
					CheckBalance2DrCr = "Dr"

				# Check Balance Customer Account
				CrAccount 		=	DepositObj.TCrAccount
				CrCurrency 		=	DepositObj.CrCurrency
				TranDate 		=	DepositObj.TranDate
				CheckBalance1 	= 	mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Amount, CheckBalance1DrCr,TranDate=TranDate)

				if CheckBalance1:
					flash(msg_error + CheckBalance1)
					return False
				# Check Balance Categroy
				Branch 			= DepositObj.Branch
				DrCategory 		= DepositObj.DrCategory
				DrCurrency 		= DepositObj.DrCurrency
				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, DrCategory, DrCurrency, Branch, CheckBalance2DrCr)
			
				if CheckBalance[0] == False:
					CheckBalance = "Bank Account#%s doesn't have sufficient fund. Current balance is %s." %(DrCategory, mktmoney.toMoney(float(CheckBalance[1]), mktmoney.getCurrencyObj(DrCurrency), 2))
					flash(msg_error + CheckBalance)
					return False

				CheckAccounting = mktteller.setAuthorize('CC',MKT_TELLER,MKT_TELLER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			TellerObj 	= MKT_TELLER.query.get(ID)
			
			if not TellerObj:

				return True, "%s Deposit by cheque %s not found." %(msg_error, ID)

			else:

				Amount 		=	Decimal(TellerObj.Amount) if TellerObj.Amount else Decimal(0)
				DrAccount 	=	TellerObj.TCrAccount
				DrCurrency 	=	TellerObj.CrCurrency
				TranDate 	=	TellerObj.TranDate
				
				CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amount),"Dr",TranDate=TranDate)
				
				if CheckBalance1:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance1)

				Branch 		=	TellerObj.Branch
				CrCategory 	= 	TellerObj.DrCategory
				CrCurrency 	=	TellerObj.DrCurrency

				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, CrCategory, CrCurrency, Branch, 'Cr')
			
				if CheckBalance[0] == False:
					CheckBalance = "Bank Account#%s doesn't have sufficient fund. Current balance is %s." %(CrCategory, mktmoney.toMoney(float(CheckBalance[1]), mktmoney.getCurrencyObj(CrCurrency), 2))
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance)
				
				Check = mktteller.validationReverse(MKT_TELLER,MKT_TELLER_INAU,ID)
			
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('Teller',AuthLevel,'CC',MKT_TELLER,MKT_TELLER_INAU,ID,Inputter,Createdon)
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]

				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

	@staticmethod
	def IsAcceptOverrideINAU():
		ID 			= g.formID
		TellerObj 	= MKT_TELLER_INAU.query.get(ID)
		AccountID = TellerObj.TCrAccount
		TranDate = TellerObj.TranDate
		PostFutureDate = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if PostFutureDate:
			Validate = True
			Override = True
			Msg = msg_warning + PostFutureDate
			return Override, Msg, Validate
		return mktteller.checkDDAccount(AccountID)

	@staticmethod
	def IsAcceptOverride():
		AccountID = request.form['TCrAccount']
		return mktteller.checkDDAccount(AccountID)


class FRM_WITHDRAWAL_CHEQUE(exform):
	
	CashType 	= TextField(requiredlabel("Cash Type", "*"), [validators.Required()],default='2')#2 = By Cheque
	Bank 		= TextField("Bank")
	ChequeNo	= TextField(requiredlabel("Cheque #", "*"), validators=[validators.Required(),validators.Length(max=12)])
	TCrAccount 	= TextField("Bank Account")
	CrCategory 	= TextField("Bank Category")
	CrCurrency 	= TextField("Bank Currency")

	TDrAccount 	= RemoteTextField(requiredlabel("Account","*"), [validators.Required()])
	DrCategory 	= TextField(requiredlabel("Category", "*"), [validators.Required()])
	DrCurrency 	= TextField(requiredlabel("Currency", "*"), [validators.Required()])

	Amount 		= TextField(requiredlabel("Amount", "*"), [validators.Required()])
	Transaction = TextField(requiredlabel("Transaction", "*"), [validators.Required()])

	# TranDate 	= DateField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	TranDate 	= TextField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	Reference 	= TextField("Reference",[validators.Length( max=35)])
	Note 		= TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=50),validators.Required()])


	def validate_DrCategory(form,field):
		CrCategory 	= form.CrCategory.data
		Account =form.TDrAccount.data
		if Account:
			if not CrCategory:
				raise ValidationError("Cheque Category not found. Please configuration in app setting.")
			else:

				Branch 		= mktuser.getCurrentBranch()
				CrCategory 	= form.CrCategory.data
				CrCurrency 	= form.CrCurrency.data
				Amount 		= Decimal(form.Amount.data)
				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, CrCategory, CrCurrency, Branch, 'Cr')

				if CheckBalance[0] == False:
					# raise ValidationError("Bank Account#%s doesn't have sufficient fund. Current balance is %s." %(CrCategory, mktmoney.toMoney(float(CheckBalance[1]), mktmoney.getCurrencyObj(CrCurrency), 2)))
					raise ValidationError(CheckBalance[1])


	def validate_DrCurrency(form,field):
		CrCurrency = form.CrCurrency.data
		Account =form.TDrAccount.data
		if Account:
			if not CrCurrency:
				raise ValidationError("Bank Currency not found.")

	def validate_Amount(form, field):
		DrCurrency  = str(request.form['DrCurrency'])

		if DrCurrency:
			Amo=str(form.Amount.data)
			Amo=Amo.replace(',','')

			DrAccount 	=	form.TDrAccount.data
			DrCurrency 	=	form.DrCurrency.data
			TranDate 	=	str(form.TranDate.data)
			CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr",TranDate=TranDate)
			if CheckBalance1:
				raise ValidationError(CheckBalance1)

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()
		except:
			raise ValidationError("This field must be in date format.")
		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	@staticmethod
	def setVisible():		
		control_list=['TCrAccount','CrCategory','CrCurrency','Transaction','CashType','Bank']
		return control_list


	@staticmethod
	def moneyField():
		return [("Amount","DrCurrency")]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('DrCategory',len2),
						('DrCurrency',len2)	]

		return control_list

	@staticmethod
	def setDisable():
		return [ ('TCrAccount'),('CrCategory'), ('CrCurrency'), ('DrCategory'), ('DrCurrency'), ('TranDate')]

	@staticmethod
	def listField():

		Fields = ["ID", "CrCategory","CrCurrency", "TDrAccount", "DrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields,["ID*LK*WC"]

	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"CrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#DrCategory').val(data.DrCategory); $('#DrCurrency').val(data.DrCurrency); $('#CrCategory').val(data.CrCategory); $('#CrCurrency').val(data.DrCurrency); $('#Transaction').val(data.TranCode);"
		varname 		= "TDrAccount:$('#TDrAccount').val()"
		fun 			= ["TDrAccount", varname, fielddisplay, "/Morakot/TellerWithdrawalCheque", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CrCategory').val(data.Category);"
		varname 		= "Bank:$('#Bank').val(),CashType:$('#CashType').val()"
		fun 			= ["TDrAccount", varname, fielddisplay, "/Morakot/TellerGetBank", "change"]
		hotfield.append(fun)

		# #set session[Teller] to DP
		# fielddisplay 	= ""
		# varname 		= "TCrAccount:'DP'"
		# fun 			= ["s2id_autogen2_search", varname, fielddisplay, "/Morakot/TellerDepositAccount", "focus"]
		# hotfield.append(fun)

		return hotfield

	@staticmethod
	def formReadOnly():
		return "AUTH"
			
	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeInsert():
		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel

		if AuthLevel == 0 :

			CrAcc 		= request.form['TCrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			DrAcc 		= request.form['TDrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			Module 		= 'WC'
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']
			Mode 		= "CrDirect"
			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_TELLER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False

			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note,Mode)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False
		return True

	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			# AuthLevel 	= g.getNAuthorize
			# print 'beforeAuthorize: %s'% AuthLevel
			# ID 			= g.formID
			ID 				= 	g.formID
			DepositObj 	=	MKT_TELLER_INAU.query.get(ID)
			
			if not DepositObj:

				flash(msg_error + "Withdrawal by cheque %s not found." %ID)
				return False

			else:

				Amount = Decimal(DepositObj.Amount) if DepositObj.Amount else Decimal(0)
				
				if ID[-1:] == 'R':
					CheckBalance1DrCr = "Cr"
					CheckBalance2DrCr = "Dr"
				else:
					CheckBalance1DrCr = "Dr"
					CheckBalance2DrCr = "Cr"

				# Check Balance Customer Account
				DrAccount 		=	DepositObj.TDrAccount
				DrCurrency 		=	DepositObj.DrCurrency
				TranDate 		=	DepositObj.TranDate
				CheckBalance1 	= 	mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Amount, CheckBalance1DrCr,TranDate=TranDate)

				if CheckBalance1:
					flash(msg_error + CheckBalance1)
					return False
				# Check Balance Categroy
				Branch 			= DepositObj.Branch
				CrCategory 		= DepositObj.CrCategory
				CrCurrency 		= DepositObj.CrCurrency
				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, CrCategory, CrCurrency, Branch, CheckBalance2DrCr)
			
				if CheckBalance[0] == False:
					CheckBalance = "Bank Account#%s doesn't have sufficient fund. Current balance is %s." %(CrCategory, mktmoney.toMoney(float(Balance[1]), mktmoney.getCurrencyObj(CrCurrency), 2))
					flash(msg_error + CheckBalance)
					return False

				CheckAccounting = mktteller.setAuthorize('WC',MKT_TELLER,MKT_TELLER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			TellerObj 	= MKT_TELLER.query.get(ID)
			
			if not TellerObj:

				return True, "%s Withdrawal by cheque %s not found." %(msg_error, ID)

			else:

				Amount 		=	Decimal(TellerObj.Amount) if TellerObj.Amount else Decimal(0)
				CrAccount 	=	TellerObj.TDrAccount
				CrCurrency 	=	TellerObj.DrCurrency
				TranDate 	=	TellerObj.TranDate
				
				CheckBalance1 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amount),"Cr",TranDate=TranDate)
				
				if CheckBalance1:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance1)

				Branch 		=	TellerObj.Branch
				DrCategory 	= 	TellerObj.CrCategory
				DrCurrency 	=	TellerObj.CrCurrency

				CheckBalance 	= mktaccounting.getValidateConsolBalance(Amount, DrCategory, DrCurrency, Branch, 'Dr')
			
				if CheckBalance[0] == False:
					CheckBalance = "Bank Account#%s doesn't have sufficient fund. Current balance is %s." %(DrCategory, mktmoney.toMoney(float(CheckBalance[1]), mktmoney.getCurrencyObj(DrCurrency), 2))
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance)
				
				Check = mktteller.validationReverse(MKT_TELLER,MKT_TELLER_INAU,ID)
			
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('Teller',AuthLevel,'WC',MKT_TELLER,MKT_TELLER_INAU,ID,Inputter,Createdon)
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]

				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e
