from wtforms 					import DecimalField, IntegerField
from app.mktcore.wtfimports 	import *
from .models 					import *
import time
from .. 						import app, db
from decimal 					import *
from flask 						import session, Markup
from app.tools.user 			import *
from app.Account.models 		import *
from app.Category.models 		import *


import app.tools.mktdate 		as mktdate
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktsetting 	as mktsetting
# import app.tools.mktroute 		as mktroute
import app.tools.mktparam 		as mktparam
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktaccount 	as mktaccount
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.mktmoney 		as mktmoney
import app.tools.mktfundtransfer as mktfundtransfer
import app.tools.user 			as mktuser

@app.route("/Morakot/TellerTillToTillAccount", methods=['GET'])
def getTDrAccountInfo():
	Category = ""
	Currency = ""
	Message  = ""
	TellerParam = mktparam.getTellerParam()
	if TellerParam:
		TranCode=TellerParam.TTransaction
		AccountID = request.args.get('TDrAccount')
		if AccountID=='TT':
			session['TELLER']='TT'
		# app.logger.debug(request.args.get('TDrAccount'))
		# app.logger.debug('session name'+session['TELLER'])
		if AccountID:
			query = MKT_ACCOUNT.query.get(AccountID)
			if query:
				Category = str(query.AccCategory)
				Currency = str(query.Currency)
	else:
		Message="Please set Teller Parameter first."

	return jsonify(TranCode=TranCode,Category=Category,Currency=Currency)

def loadCurrentDate():
	return 	mktdate.getBankDate()

def loadAccountTill():
	Result 	= 	[]
	Branch 	= 	mktuser.getCurrentBranch()
	Param 	= 	mktparam.getTellerParam()
	User 	= 	mktuser.getUser()
	
	if Param:		
		ViewAll = 	mktsetting.getAppSetting('TillToTillViewAllAccount')
		AccObj 	=	MKT_ACCOUNT.query.filter_by(Branch=Branch,AccCategory=Param.TillCategory)
		if ViewAll == 'N':
			TellerObj 	=  	[]
			if g and hasattr(g,'formID'):
				TellerObj 	= 	MKT_TELLER_INAU.query.get(g.formID)
				if not TellerObj:
					TellerObj 	= 	MKT_TELLER.query.get(g.formID)

			if TellerObj:
				Account = 	TellerObj.TCrAccount
				AccObj 	= 	AccObj.filter(or_(MKT_ACCOUNT.ID.like('%'+User.CashAccount),MKT_ACCOUNT.ID.like('%'+Account)))
			else:
				AccObj 	= 	AccObj.filter(MKT_ACCOUNT.ID.like('%'+User.CashAccount))

		AccObj = 	AccObj.order_by(MKT_ACCOUNT.ID.asc()).all()

		if AccObj:
			Result 	=	AccObj

	return Result

def loadAllAccountTill():
	result 	= []
	Branch 	= mktuser.getCurrentBranch()
	Param 	= mktparam.getTellerParam()
	if Param:		
		row=MKT_ACCOUNT.query.filter_by(Branch=Branch,AccCategory=Param.TillCategory).\
							order_by(MKT_ACCOUNT.ID.asc()).\
							all()
		if row:
			result=row
	return result

class FRM_TELLER(exform):

	# TDrAccount 	= RemoteTextField(requiredlabel("Debit Account","*"), [validators.Required()])

	
	# TCrAccount 	= RemoteTextField(requiredlabel("Credit Account","*"), [validators.Required()])
	TCrAccount 	=  QuerySelectField(requiredlabel('From Till', "*"),
							[validators.Required()],
							query_factory=loadAccountTill, 
							get_label='ID',#lambda a: a.ID + " - " + a.AccName,
							allow_blank=True,
							blank_text='--None--',
							default='--None--')
	TDrAccount 	= QuerySelectField(requiredlabel('To Till', "*"),
							[validators.Required()],
							query_factory=loadAllAccountTill, 
							get_label='ID',
							allow_blank=True,
							blank_text='--None--',
							default='--None--')
	
	CrCategory 	= TextField(requiredlabel("From Till Category", "*"), [validators.Required()])
	CrCurrency 	= TextField(requiredlabel("Currency", "*"), [validators.Required()])

	

	DrCategory 	= TextField(requiredlabel("To Till Category", "*"), [validators.Required()])
	DrCurrency 	= TextField(requiredlabel("Currency", "*"), [validators.Required()])

	Amount 		= TextField(requiredlabel("Amount", "*"), [validators.Required()])
	Transaction = TextField(requiredlabel("Transaction Code", "*"), [validators.Required()])
	TranDate 	= DateField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	# TranDate 	= TextField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	Reference 	= TextField("Reference",[validators.Length( max=35)])
	Note 		= TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=50),validators.Required()])

	def validate_TDrAccount(form, field):
		if str(form.TDrAccount.data) == str(form.TCrAccount.data):
			raise ValidationError("Debit Account must be different Credit Account")

	def validate_DrCurrency(form, field):
		if str(form.DrCurrency.data) != str(form.CrCurrency.data):
			raise ValidationError("Account currency does not match")

	def validate_Amount(form, field):
		
		Amo 		=	str(form.Amount.data)
		Amo 		= 	Amo.replace(',','')
		DrAccount 	=	request.form['TDrAccount']
		DrCurrency 	=	form.DrCurrency.data

		CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr")
		if CheckBalance1:
			raise ValidationError(CheckBalance1)

		CrAccount 	=	request.form['TCrAccount']
		CrCurrency 	=	form.CrCurrency.data
		CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr")
		if CheckBalance2:
			
			raise ValidationError(CheckBalance2)

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)

	@staticmethod
	def setVisible():
		control_list=['Transaction','DrCategory','CrCategory','DrCurrency']
		return control_list

	@staticmethod
	def moneyField():
		return [('Amount','CrCurrency')]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('CrCurrency',len2),('DrCurrency',len2)]

		return control_list

	@staticmethod
	def setDisable():
		return [('DrCategory'), ('DrCurrency'), ('CrCategory'), ('CrCurrency')]

	@staticmethod
	def listField():
		Fields = ["ID", "TDrAccount","DrCurrency", "TCrAccount", "CrCurrency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields,["ID*LK*TT"]

	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"CrCurrency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#DrCategory').val(data.Category); $('#DrCurrency').val(data.Currency); $('#Transaction').val(data.TranCode);"
		varname 		= "TDrAccount:$('#TDrAccount').val()"
		fun 			= ["TDrAccount", varname, fielddisplay, "/Morakot/TellerTillToTillAccount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CrCategory').val(data.Category); $('#CrCurrency').val(data.Currency)"
		varname 		= "TDrAccount:$('#TCrAccount').val()"
		fun 			= ["TCrAccount", varname, fielddisplay, "/Morakot/TellerTillToTillAccount", "change"]
		hotfield.append(fun)


		# fielddisplay 	= ""
		# varname 		= "TDrAccount:'TT'"
		# fun 			= ["s2id_autogen3_search", varname, fielddisplay, "/Morakot/TellerTillToTillAccount", "select2-focus"]
		# hotfield.append(fun)

		# fielddisplay 	= ""
		# varname 		= "TDrAccount:'TT'"
		# fun 			= ["s2id_autogen4_search", varname, fielddisplay, "/Morakot/TellerTillToTillAccount", "select2-focus"]
		# hotfield.append(fun)

		#change to this

		fielddisplay 	= ""
		varname 		= "TDrAccount:'TT'"
		fun 			= ["TDrAccount", varname, fielddisplay, "/Morakot/TellerTillToTillAccount", "select2-focus"]
		hotfield.append(fun)

		fielddisplay 	= ""
		varname 		= "TDrAccount:'TT'"
		fun 			= ["TCrAccount", varname, fielddisplay, "/Morakot/TellerTillToTillAccount", "select2-focus"]
		hotfield.append(fun)

		return hotfield



	@staticmethod
	def beforeNewID ():
		Check = mktteller.isUserTillAccount()
		if not Check[0]:
			return True,Check[1]
		else:
			#Mean that user have cash account.
			return False,''
			
	@staticmethod
	def formReadOnly():

		return "AUTH"

	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeInsert():
		AuthLevel 	= g.getNAuthorize

		if AuthLevel == 0 :
			DrAcc 		= request.form['TDrAccount']
			DrCat 		= request.form['DrCategory']
			DrCur 		= request.form['DrCurrency']

			CrAcc 		= request.form['TCrAccount']
			CrCat 		= request.form['CrCategory']
			CrCur 		= request.form['CrCurrency']

			Amo  		= Decimal(request.form['Amount'])
			Tran  		= request.form['Transaction']
			TranDate 	= request.form['TranDate']
			Ref 		= request.form['ID']
			Note 		= request.form['Note']
			Module 		= "TT"

			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 		= Audit['Branch']

			#Protect Save Duplicate
			DuplicateRecord = mktteller.isDuplicatePosting(MKT_TELLER,request.form['ID'])
			if DuplicateRecord[0]:
				flash(DuplicateRecord[1])
				return False
			
			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setCommitAccouting(Inputter,Createdon,Authorizer,Authorizeon,Branch,DrAcc,DrCat,DrCur,CrAcc,CrCat,CrCur,Amo,Module,Tran,TranDate,Ref,Note)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False

		return True


	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			ID 				= 	g.formID
			TillToTillObj 	=	MKT_TELLER_INAU.query.get(ID)
			
			if not TillToTillObj:

				flash(msg_error + "Till To Till %s not found." %ID)
				return False

			else:

				Amo 		=	TillToTillObj.Amount if TillToTillObj.Amount else 0
				DrAccount 	=	TillToTillObj.TDrAccount
				DrCurrency 	=	TillToTillObj.DrCurrency
				if ID[-1:] == 'R':
					CheckBalance1DrCr = "Cr"
					CheckBalance2DrCr = "Dr"
				else:
					CheckBalance1DrCr = "Dr"
					CheckBalance2DrCr = "Cr"

				CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), CheckBalance1DrCr)
				
				if CheckBalance1:

					flash(msg_error + CheckBalance1)
					return False

				CrAccount 	=	TillToTillObj.TCrAccount
				CrCurrency 	=	TillToTillObj.CrCurrency
				CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), CheckBalance2DrCr)

				if CheckBalance2:
					
					flash(msg_error + CheckBalance2)
					return False

				# Call function to commit add account by currency 
				CheckAccounting = mktteller.setAuthorize('TT',MKT_TELLER,MKT_TELLER_INAU,ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True

		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			TellerObj 	=	MKT_TELLER.query.get(ID)
			
			if not TellerObj:

				return True, "%s Till To Till %s not found." %(msg_error, ID)

			else:

				Amo 		=	TellerObj.Amount if TellerObj.Amount else 0
				DrAccount 	=	TellerObj.TCrAccount
				DrCurrency 	=	TellerObj.CrCurrency

				CheckBalance1 = mktaccounting.checkMaxMinBalance(DrAccount, DrCurrency, Decimal(Amo), "Dr")
				
				if CheckBalance1:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance1)

				CrAccount 	=	TellerObj.TDrAccount
				CrCurrency 	=	TellerObj.DrCurrency
				CheckBalance2 = mktaccounting.checkMaxMinBalance(CrAccount, CrCurrency, Decimal(Amo), "Cr")

				if CheckBalance2:
					db.session.rollback()
					return True, "%s %s" %(msg_error, CheckBalance2)

				Check = mktteller.validationReverse(MKT_TELLER,MKT_TELLER_INAU,ID)

				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('Teller',AuthLevel,'TT',MKT_TELLER,MKT_TELLER_INAU,ID,Inputter,Createdon)
					
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

	@staticmethod
	def IsAcceptOverride():

		Override 	= True
		Msg 		= ""


		FromAccount = request.form['TCrAccount']
		ToAccount 	= request.form['TDrAccount']
		Currency 	= request.form['CrCurrency']
		Amount 		= request.form['Amount']
		AccountObj 	= MKT_ACCOUNT.query

		if AccountObj:
			Amount 		= mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency), 2)
			FromAccount = AccountObj.get(FromAccount)
			ToAccount 	= AccountObj.get(ToAccount)
			Msg 		= "The amount <b>%s</b> will be transfered from account <b>%s</b> to <b>%s</b>. <br>"\
							%(Amount,FromAccount.ID,ToAccount.ID)

		Msg 	+= "Do you want to procceed?"

		return Override, Msg