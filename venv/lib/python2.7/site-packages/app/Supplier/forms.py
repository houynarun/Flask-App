from app.mktcore.wtfimports 			import *
from app.mktcore.imports 				import *
from flask 								import jsonify
from .models 							import *
import time
from .models 							import *
from app.Customer.models 				import *

import datetime

from app.Province.models				import *
from app.District.models				import *
from app.Commune.models					import *
from app.Village.models					import *
import app.tools.mktaddress 			as mktaddress

#function
def getRecord():
	try:
		result = MKT_SUPPLIER_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_SUPPLIER.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'Province'			:str(row.Province)})
				Dict.update({'District'			:str(row.District)})
				Dict.update({'Commune'			:str(row.Commune)})
				Dict.update({'Village'			:str(row.Village)})
			return Dict
		else:
			return Dict

	except:
		raise

def loadProvince():
	return mktaddress.getProvince()

def loadDistrict():
	if request.method == 'POST':
		Province = request.form["Province"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])  
		else:
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

def loadCommune():
	if request.method == 'POST':
		District=request.form["District"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['Commune'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return mktaddress.getLoadCommune(District)

def loadVillage():
	if request.method == 'POST':
		Commune=request.form["Commune"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['Village'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)

def custom_VATTIN(form, field):
	VATRegistered		= request.form['VATRegistered']
	VATTIN 				= request.form['VATTIN']

	if VATRegistered == 'Y' and len(VATTIN) <= 0:
		raise ValidationError("VATTIN is required!")
		

class FRM_SUPPLIER(exform):
	DealerName 			= 		TextField(requiredlabel("Dealer Name","*"), [validators.Required()])
	DealerKhmerName	 	=		TextField("Dealer Khmer Name")
	DealerType 			= 		SelectField(requiredlabel('Dealer Type', '*'),
									[validators.Required()],
									choices 	= [('','--None--'),
												('1','MotorBike'),
												('2','Car'),
												('3','Electronic'),
												('4','Truck'),
												('5','Furniture'),
												('6','Machinery')
												],
									coerce			= str,
									default			= '')
	VATRegistered		=		SelectField('VAT Registered',
									choices	= 	[('Y','Yes'),
												('N','No')
												],
												coerce = str
											)
	VATTIN				=		TextField('VATTIN',
									validators=[custom_VATTIN]
								)
	ContactNumber 		= 		TextField(requiredlabel("Contact Number",'*'),
							   		validators=[validators.Required()])
	CorporationDate 	= 		DateField(requiredlabel("Corporation Date", "*"), [validators.Required()])
	# --Contact and Address--
	Province 			= 		QuerySelectField(requiredlabel(getLanguage('Province'),'*'),query_factory=loadProvince, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Province--',
									 validators=[validators.Required()],
									)
	District 		=	 	QuerySelectField(requiredlabel(getLanguage('District'),'*'),query_factory=loadDistrict, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose District--',
									 validators=[validators.Required()],
									)
	Commune 			=		QuerySelectField(requiredlabel(getLanguage('Commune'),'*'),query_factory=loadCommune, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Commune--',
									 validators=[validators.Required()],
									)
	Village 			=		QuerySelectField('Village',query_factory=loadVillage, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Village--',
									 )
	MOUSign 			= 		SelectField('MOU Sign',
									choices=[('YES','Yes'),
											('NO','No')],
											coerce=str,
											default='')
	Active 				= 		SelectField('Active',
									choices=[('Y', 'Yes'),
						 					('N', 'No')],
						 					default= 'Y')
	Remark 				= 		TextAreaField('Remark')




	@staticmethod
	def hotSelectField():
		hotfield 		=	[]

		fielddisplay 	= 	"District,#Commune, #Village"
		varname			= 	"ProvinceID:$('#Province').val()"
		fun 			= 	["Province", varname ,fielddisplay, "/Morakot/DistrictID", "click"]
		hotfield.append(fun)

		fielddisplay 	= 	"Commune, #Village"
		varname 		= 	"DistrictID:$('#District').val()"
		fun 			= 	["District", varname ,fielddisplay, "/Morakot/CommuneID", "click"]
		hotfield.append(fun)

		fielddisplay 	= 	"Village"
		varname 		= 	"CommuneID:$('#Commune').val()"
		fun 			= 	["Commune", varname ,fielddisplay, "/Morakot/VillageID", "click"]
		hotfield.append(fun)

		return hotfield
