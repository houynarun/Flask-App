import os, sys
from flask 							import redirect, flash, render_template, url_for, request
from app.mktcore.imports 			import *
from app.mktcore.wtfimports 		import *
from werkzeug 						import secure_filename
from werkzeug.security 				import generate_password_hash, check_password_hash
from flask.ext.login 				import LoginManager, login_user, logout_user, current_user, login_required
from .. 							import app, db
from sqlalchemy 					import *
from app.User.models 				import MKT_USER
from app.Role.models 				import MKT_ROLE
from app.LoginUser.models 			import MKT_LOGIN_USER

from app.mktcore.session 			import *
from itsdangerous import JSONWebSignatureSerializer
from datetime 						import datetime, timedelta
import app.tools.user 				as mktuser
import app.tools.user 				as aUser
from app.mktcore.customform 		import CLS_CustomForm
from app.tools.mktnotification 		import getConfigNotification

import uuid
import json
# import Image

lm = LoginManager()
lm.init_app(app)
lm.login_view = 'Login'

class FRM_USER_PROFILE(exform):
	@staticmethod
	def postStandard():
		return False

	@staticmethod
	def appendField():
		return {
			  'endPoint': "/Profile/",
			  'append': {
				'ID': "ID",
				'LogInName': "LogInName",
				'DisplayName': "DisplayName",
				'CurrentPassword': "CurrentPassword",
				'Password': "Password",
				'ConfirmationPassword':'ConfirmationPassword',
				'Role':'Role',
				'Branch':'Branch'
			  },
			  'maxSize': 5,
			  'extension': [
				"png",
				"jpeg",
				"jpg",
			  ]
			}

@lm.user_loader
def load_user(user_id):
	user = MKT_USER.query.get(user_id)
	return user

@lm.unauthorized_handler
def unauthorized():
	if checkContentType() == "json" or "API" in request.url:
		return jsonify(message={"message":["You are not login"]}),StatusCodes.unauthorized()
	session["next"] = request.url
	return redirect(url_for('Login'))


#TODO: load header from the request
@lm.request_loader
def load_user_from_request(request):
	Token = request.headers.get('AuthorizationKey')
	if Token:
		CurrentUser 			= None
		try: 
			JSONWeb 			= JSONWebSignatureSerializer('secret-key')
			Credential 			= JSONWeb.loads(Token)
			CurrentUser 		= MKT_USER.query.filter(MKT_USER.ID==Credential['UserID']).first()
			return CurrentUser
		except:
			return None
		return CurrentUser
	return None

def allowed_file(filename):
	try:
		return '.' in filename and str(filename.rsplit('.', 1)[1]).lower() in CONF.ALLOWED_EXTENSIONS
	except:
		return False


class CLS_UserProfile(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):

		UserObj 	=	mktuser.getUser()
		RoleObj 	=	MKT_ROLE.query
		BgDict 		= 	{item[0]:item[1] for item in BG_MENU_THEME}
		Bg_theme 	= 	BG_MENU_THEME


		DataNotification =  ''
		if type(UserObj.HideNotification) == str:
			DataNotification = UserObj.HideNotification.split(',')
		self.kwargs = { 'UserObj':UserObj,'RoleObj':RoleObj,
						'ConfigNotification' : getConfigNotification(), 
						'DataNotification':DataNotification,
						'BG_MENU_THEME':Bg_theme, 
						'BgDict':json.dumps(BgDict)
					}
		self.form = FRM_USER_PROFILE
		self.recordID = UserObj.ID
		self.customToolBar = [{
								'title':'Save Change',
								'type':'Button',
								'method':'postDoc',
								'url':'/Profile/',
								'param':[],
								'icon':'save',
								'type_url':'Custom',
								'color':'#1b80c2'		
							 }]
		self.customType 	=	'Custom'
		self.header 		=	UserObj.DisplayName
		ProfileLink = ''
		if UserObj.ProfilePicture:
			ProfileLink = '/static/avatars/'+str(UserObj.ProfilePicture)
		setattr(FRM_USER_PROFILE, 'LogInName', DisabledTextField('Login Name',default=UserObj.LogInName))
		setattr(FRM_USER_PROFILE, 'DisplayName', TextField('Display Name',default=UserObj.DisplayName))
		setattr(FRM_USER_PROFILE, 'CurrentPassword', PasswordField('Current Password'))
		setattr(FRM_USER_PROFILE, 'Password', PasswordField('New Password'))
		setattr(FRM_USER_PROFILE, 'ConfirmationPassword', PasswordField('ConfirmationPassword'))
		setattr(FRM_USER_PROFILE, 'Role', DisabledTextField('Role',default=UserObj.Role))
		setattr(FRM_USER_PROFILE, 'Branch', DisabledTextField('Branch',default=UserObj.AccessBranch))
		setattr(FRM_USER_PROFILE, 'ProfilePicture', DocumentField('Browse Photo',default= ProfileLink))

		if request.method == 'POST':
			HideNotif = ','.join(request.form.getlist('HideNotif'))
			CurrentPassword 	=	request.form['CurrentPassword']
			DisplayName 		=	request.form['DisplayName']
			Password 			=	request.form['Password']
			ConfirmationPassword=	request.form['ConfirmationPassword']
			file 				= 	request.files.get('file')
			User 				= 	MKT_USER.query.get(session['getLogInID'])
			MenuTheme 			= 	request.form.get('MenuTheme','')

			# Update Menu Theme
			if MenuTheme != '':
				User.MenuTheme 		= 	MenuTheme
				db.session.add(User)
				db.session.commit()
				flash("User profile was saved.")

			if CurrentPassword == '':
				flash(msg_error + 'Current password field is required','error')
				self.redirectURL = ['/Morakot/Profile' , 'Custom']
				return True

			if check_password_hash(UserObj.Password, CurrentPassword):

				# Update Display Name
				User.DisplayName 		=	DisplayName
				User.HideNotification 	= 	HideNotif	

				if Password:

					checkPasswordRule = mktuser.checkPasswordRule(Password)
					# flash(checkPasswordRule)
					if not checkPasswordRule:
						self.redirectURL = ['/Morakot/Profile' , 'Custom']
						return True

					if Password != ConfirmationPassword:
						flash(msg_error + "Wrong confirmation password." , 'error')
						self.redirectURL = ['/Morakot/Profile' , 'Custom']
						return True

					if Password == CurrentPassword:
						flash(msg_error + "You are inputted previous password." , 'error')
						self.redirectURL = ['/Morakot/Profile' , 'Custom']
						return True

					# Update Password
					User.Password 	=	generate_password_hash(Password)

				if file:

					if allowed_file(file.filename):

						filename 	= secure_filename(file.filename)
						strName 	= filename.split(".")
						filename 	= session['getLogInID'] + "." + strName[-1]

						try:
							
							if os.path.exists(CONF.UPLOAD_FOLDER + filename):
								os.remove(os.path.abspath(CONF.UPLOAD_FOLDER + filename))
								
							file.save(os.path.abspath(CONF.UPLOAD_FOLDER + filename))
							# Update Profile Picture
							User.ProfilePicture = filename

						except Exception, e:
							flash(msg_error + "%s" %e)
							self.redirectURL = ['/Morakot/Profile' , 'Custom']
							return True

						# Resize Profile Picture
						# im 		=	Image.open(UPLOAD_FOLDER + filename)
						# out 	= 	im.resize((128, 128))
						# out 	= 	im.rotate(45) # degrees counter-clockwise

					else:

						flash(msg_error + "File extension not allow." , 'error')
						self.redirectURL = ['/Morakot/Profile' , 'Custom']
						return True
					
				db.session.add(User)
				db.session.commit()
				flash("User profile was saved.")
				self.redirectURL = ['/Morakot/Profile' , 'Custom']
				# Check if change new password set auto logout
				if Password:

					loggedOut = MKT_LOGIN_USER.query.filter_by(UserID=session['getLogInID']).first()
					if loggedOut:
						db.session.delete(loggedOut)
						db.session.commit()

					# logout_user()
					session.clear()
					flash('System was automatic logged out.')
					if 'API' in request.url:
						self.redirectURL = ['/Morakot/Login' , 'Custom']	
				
				return True

			else:
				flash(msg_error + "Current password is incorrect" , 'error')
				self.redirectURL = ['/Morakot/Profile','Custom']
				return True
				# return redirect(url_for('getFormUpload', upload='error'))
		
		return True

	# return render_template("profile.html", UserObj=UserObj, RoleObj=RoleObj)

registerCRUD(admin, '/Profile', 'UserProfile',FRM_USER_PROFILE, [MKT_USER],template="profile.html",form_type='Custom',custom_form_data=CLS_UserProfile)
