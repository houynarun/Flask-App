from flask 						import Flask,request,jsonify,make_response,Markup
from app.mktcore.imports 		import *
from decimal 					import *
from .. import app,db
from sqlalchemy import create_engine,inspect
from app.User.models import *
from app.AutoID.models 	import MKT_AUTOID
from app.Module.models import MKT_FORM
from app.mktcore.authentication 	import getToken
# From core
import app.mktcore.autoid 		as mktautoid

import importlib
import StringIO
import csv,ast
import app.tools.mktmoney 		as mktmoney
import app.tools.mktdate 		as mktdate
import app.tools.mkttool 		as mkttool
import app.tools.mktdb 			as mktdb
import app.tools.user 			as mktuser
import app.tools.mktaudit 		as mktaudit
import app.tools.mktloanapplication as mktloanapplication
import os.path
from app.BatchUpload.models 	import *
from app.JournalEntry.models 	import *
from app.tools.mktapirequest 	import api_request
import requests

'''
README

When import into live record if the CSV file contain same id as in history record
then the same id record with be unable to edit 
'''

ListTable = []

def getModuleFromFile(FilePath):

	ListLine = []
	Dict = {}
	Path = '%s/../%s' % (os.path.dirname(__file__), FilePath)

	with open(Path) as ReadFile:
		ListLine = ReadFile.readlines()

	for Line in ListLine:
		if 'registerCRUD' in Line:
			ListString = Line.split(',')
			Form =  ListString[3].strip()
			URL =  ListString[2].replace("'", '').strip()
			Description = db.session.query(MKT_FORM.FormDesc).filter(MKT_FORM.URL == URL).scalar()
			if Description:
				Dict[Form] = Description

	return Dict


@app.route("/Morakot/getModule")
@checkLogOutSession
@checkLogOutTime
def getModule():

	TellerDict       = getModuleFromFile('Teller/views.py')
	FundTransferDict = getModuleFromFile('FundTransfer/views.py')
	JournalEntryDict = getModuleFromFile('JournalEntry/views.py')
	MultiJournal 	 = getModuleFromFile('MultiJournalII/views.py')
	Penalty 		 = getModuleFromFile('PD/views.py')

	return jsonify(Teller=TellerDict, FundTransfer=FundTransferDict, JournalEntry=JournalEntryDict,MultiJournal=MultiJournal,Penalty=Penalty)

@app.route("/Morakot/ExportImport", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def exportimportTable():

	# Migration Mode
	MigrationMode = mktloanapplication.isMigrationMode()

	# Block check access right
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/ExportImport/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	Module = __import__("app.urlregister")
	FieldRequired 		= []
	ListAdministrator 	= []
	ListOfValues 		= []
	global ListTable
	Audit 				= []
	engine = create_engine(app.config['SQLALCHEMY_DATABASE_URI'])
	inspector = inspect(engine)

	for table_name in inspector.get_table_names():
		ListAdministrator.append(str(table_name[4:]))
		ListTable.append(str(table_name))
	engine.session.close()

	ListAdministrator.sort()
	ListOfValues.sort()
	ListTable.sort()
	DicAllowTableExport ={
	'Branch'		:'MKT_BRANCH',
	'Module'		:'MKT_MODULE',
	'Form'			:'MKT_FORM',
	'Role'			:'MKT_ROLE',
	'Menu'			:'MKT_MENU',
	'Menu Item'		:'MKT_MENU_ITEM',
	'Access Right'	:'MKT_ACCESS',
	'Business'		:'MKT_BUSINESS',
	'Category'		:'MKT_CATEGORY',
	'Category Type'	:'MKT_CATEG_TYPE',
	'Country'		:'MKT_COUNTRY',
	'Education'		:'MKT_EDUCATION',
	'Source Of Fund':'MKT_SOURCE_OF_FUND',
	'Sector'		:'MKT_SECTOR',
	'Industry'		:'MKT_INDUSTRY',
	'ID Type'		:'MKT_ID_TYPE',
	'Transaction'	:'MKT_TRANSACTION',
	'Loan Purpose'	:'MKT_LOAN_PURPOSE',
	'Loan CheckList':'MKT_CHECKLIST',
	'Officer'		:'MKT_OFFICER',
	'Position'		:'MKT_POSITION',
	'Province'		:'MKT_PROVINCE',
	'District'		:'MKT_DISTRICT',
	'Commune'		:'MKT_COMMUNE',
	'Village'		:'MKT_VILLAGE',

	}
	TableName = ''
	ImportMode = 'N'
	try:
		if request.method == 'POST':
			
			csvList 		= []
			TableName 		= request.form['Operation']
			tag 			= request.form['tag']
			TableUser = ['MKT_USER', 'MKT_USER_INAU', 'MKT_USER_HIST']
			# print 'tag %s'%tag
			if tag == 'export':
				# print 'export'
				if TableName == 'None':
					FieldRequired.append(('Table Name','This field is required.'))
					return render_template("_export_import.html",
								FieldRequired = FieldRequired,
								ListAdministrator=ListAdministrator,
								ListOfValues=ListOfValues,
								TableName=TableName,ImportMode=ImportMode)

				# Source = DicAllowTableExport[TableName]
				TableName = 'MKT_%s' % TableName
				FieldInTable 	= []
				TableObj 		= getTableModel(TableName)
				FieldExclude    = ["Status","Curr","Inputter","Createdon","Authorizer","Authorizeon"]
				if TableName in TableUser:
					FieldExclude.append('Password')

				for item in TableObj.__table__.columns.keys():
					if not item in FieldExclude:
						FieldInTable.append(item)
				csvList.append(FieldInTable)

				QueryTable 	= TableObj.query.yield_per(100).order_by(TableObj.ID.asc())
				for row in QueryTable:
					recordRow=[]
					for col in FieldInTable:
						if not col in FieldExclude:
							if mkttool.isString(getattr(row,col)) or mkttool.isUnicode(getattr(row,col)):
								recordRow.append(str((getattr(row,col) if getattr(row,col) else '').encode('utf-8')))	
								# recordRow.append(str(getattr(row,col)).encode('utf-8'))
							else:
								recordRow.append(getattr(row,col) if getattr(row,col) else 0)

					csvList.append(recordRow)
				StrIO = StringIO.StringIO()
				CSVWrite = csv.writer(StrIO)
				for row in csvList:
					CSVWrite.writerow(row)	
			
				# We need to modify the response, so the first thing we 
				# need to do is create a response out of the CSV string
				response = make_response(StrIO.getvalue())
				# This is the key: Set the right header for the response
				# to be downloaded, instead of just printed on the browser
				response.headers['Cache-Control'] = 'no-cache'
				response.headers["Content-Disposition"] = "attachment; filename=%s.csv"%TableName.replace(' ','_')[4:]
				response.headers["Content-type"] = "text/csv; charset=utf-8"
				return response

			else:
				# print 'import'
				FileCSV = request.files['file']
				TableName  = request.form['Operation']
				ImportMode = request.form['ImportMode']

				if TableName == 'None':
					FieldRequired.append(('Table Name','This field is required.'))
					return render_template("_export_import.html",
											FieldRequired = FieldRequired,
											ListAdministrator=ListAdministrator,
											ListOfValues=ListOfValues,
											TableName=TableName, ImportMode=ImportMode)

				TableName = 'MKT_%s' % TableName

				if not FileCSV:
					FieldRequired.append(('File Upload','This field is required.'))

				else: 
					if FileCSV and mkttool.getAllowedFile(FileCSV.filename):
						Audit = {}
						DictCSV = mkttool.getDictCSV(FileCSV)
						ListOfPK = getListOfPK(TableName, DictCSV)
						duplicatedKeyCSV = getDuplicatedKey(ListOfPK)
						missingCol = getMissingColumnInCSV(TableName, DictCSV)

						if ImportMode == 'O':
							# overwrite
							if TableName[-4:] == 'INAU':
								# INAU
								Audit = getAuditTrailInau()
								Success, Msg = mergeTableFromCSV(TableName, DictCSV, Audit)

								if not Success:
									flash(getSafeMsg(Msg))
								else:
									flash("%s import successfully" % TableName)
							else:
								# Live
								Audit = mktaudit.getAuditrail()
								ListOfKeyCurr = []

								if missingCol:
									Msg = '%sIncorrect column: %s in CSV file' % (msg_warning, ' '.join(missingCol))
									flash(getSafeMsg(Msg))
								elif duplicatedKeyCSV:
									Msg = '%s%s duplicated key in CSV file' % (msg_warning, getStrDuplicatedKey(duplicatedKeyCSV))
									flash(getSafeMsg(Msg))
								else:
									UpdateKey = getDuplicatedKeyInTable(TableName, ListOfPK)
									TableModel = getTableModel(TableName)

									# update curr if there is same key in table
									if UpdateKey:
										pkNames = [key.name for key in inspect(TableModel).primary_key]

										for key in UpdateKey:
											argDict = dict(zip(pkNames, key))
											Curr = db.session.query(getattr(TableModel, 'Curr')).filter_by(**argDict).first()
											ListOfKeyCurr.append((key, Curr))

									for row in DictCSV:
										if ListOfKeyCurr:
											for key, curr in ListOfKeyCurr:
												CSVKey = tuple(row[x] for x in pkNames)
												if CSVKey == key:
													Audit.update({'Curr':curr})

										Branch = row.get('Branch', None)
										row.update(Audit)

										if Branch:
											row.update({'Branch':Branch})

										row.pop('', None)
										mktdb.mergeTable(TableModel, row)
										Audit.update({'Curr': '0'})

									db.session.commit()
									flash("%s was imported successfully."% TableName)

						elif ImportMode == 'C':
							# clear and then insert
							if TableName[-4:] == 'INAU':
								# INAU
								Audit = getAuditTrailInau()
								Success, Msg = clearAndInsertTableFromCSV(TableName, DictCSV, Audit)

								if not Success:
									flash(getSafeMsg(Msg))
								else:
									flash("%s import successfully" % TableName)
							else:
								# Live
								Audit = mktaudit.getAuditrail()
								ModelLive = getTableModel(TableName)
								ModelLive.query.delete()

								if "%s_INAU" % TableName in ListTable:
									ModelInau = getTableModel("%s_INAU" % TableName)
									ModelInau.query.delete()
								
								if "%s_HIST" % TableName in ListTable:
									ModelHist = getTableModel("%s_HIST" % TableName)
									ModelHist.query.delete()

								if missingCol:
									Msg = '%sIncorrect column: %s in CSV file' % (msg_warning, ' '.join(missingCol))
									flash(getSafeMsg(Msg))
								elif duplicatedKeyCSV:
									Msg = '%s%s duplicated key in CSV file' % (msg_warning, getStrDuplicatedKey(duplicatedKeyCSV))
									flash(getSafeMsg(Msg))
								else:
									for row in DictCSV:

										Branch = row.get('Branch', None)
										row.update(Audit)

										if Branch:
											row.update({'Branch':Branch})

										row.pop('', None)
										mktdb.insertTable(ModelLive, row)

									db.session.commit()
									flash("%s was imported successfully."% TableName)
						else:
							# insert
							if TableName[-4:] == 'INAU':
								# INAU
								Audit = getAuditTrailInau()
								Success, Msg = insertTableFromCSV(TableName, DictCSV, Audit)

								if not Success:
									flash(getSafeMsg(Msg))
								else:
									flash("%s import successfully" % TableName)
							else:
								# Live
								Audit = mktaudit.getAuditrail()
								duplicatedKeyLive = getDuplicatedKeyInTable(TableName, ListOfPK)
								duplicatedKeyInau = getDuplicatedKeyInTable("%s_INAU" % TableName, ListOfPK)

								if missingCol:
									Msg = '%sIncorrect column: %s in CSV file' % (msg_warning, ' '.join(missingCol))
									flash(getSafeMsg(Msg))
								elif duplicatedKeyCSV:
									Msg = '%s%s duplicated key in CSV file' % (msg_warning, getStrDuplicatedKey(duplicatedKeyCSV))
									flash(getSafeMsg(Msg))
								elif duplicatedKeyLive:
									Msg = '%s%s already exists in %s' % (msg_warning, getStrDuplicatedKey(duplicatedKeyLive), TableName)
									flash(getSafeMsg(Msg))
								elif duplicatedKeyInau:
									Msg = '%s%s already exists in %s' % (msg_warning, getStrDuplicatedKey(duplicatedKeyInau), "%s_INAU" % TableName)
									flash(getSafeMsg(Msg))
								else:

									for row in DictCSV:

										Branch = row.get('Branch', None)
										row.update(Audit)

										if Branch:
											row.update({'Branch':Branch})

										row.pop('', None)
										mktdb.insertTable(getTableModel(TableName), row)

									db.session.commit()
									flash("%s was imported successfully."% TableName)
					else:
						flash("%s Allow file csv only." % msg_error)


	except Exception, e:
		db.session.rollback()
		db.session.close()
		# raise
		flash('%s %s'%(msg_error,getSafeMsg(e)))

	return render_template("_export_import.html",
							FieldRequired = FieldRequired,
							ListAdministrator=ListAdministrator,
							ListOfValues=ListOfValues,
							TableName=TableName, 
							ImportMode=ImportMode,
							MigrationMode=MigrationMode)

@app.route("/Morakot/BatchUpload", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def batchUpload():
	from app.tools.mktbatchupload 	import batchupload
	from app.tools.mktbatchupload 	 	import CLS_BATCH_UPLOAD

	# Block check access right
	ErrorMsg 	= []
	GetCheck 	= checkAccess("/Morakot/BatchUpload/","Search")
	if GetCheck != True: 	
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	FieldRequired= []
	Audit= {}
	AllowTable = {
		'Journal Entry': 'MKT_JOURNAL_ENTRY_INAU',
		'Multi Journal': ['MKT_MULTI_JOURNAL_II_INAU', 'MKT_MULTI_DEBIT_II_INAU', 'MKT_MULTI_CREDIT_II_INAU'],
		'Fund Transfer': 'MKT_FUND_TRANSFER_INAU',
		'Teller Function': 'MKT_TELLER_INAU',
		'Waive Penalty/Interest': 'MKT_PENALTY_INAU'}
		#'Repayment Schedule': 'MKT_REP_SCHEDULE',}
	AllowTableKey = ''
	ImportMode = ''
	FormName = ''
	Status 		=	True	
	try:
		if request.method == 'POST':
			AllowTableKey 	= request.form['Operation'] #Module
			ImportMode		= request.form.get('ImportMode')
			FileCSV 		= request.files['file']
			FileCSVDebit 	= request.files['fileDebit']
			FileCSVCredit 	= request.files['fileCredit']
			FormName 		= request.form['FormNameOption']#Form
			Audit 			= getAuditTrailInau()
			AllowFile 		= 	mkttool.getAllowedFile(FileCSV.filename)
			if AllowFile or not FileCSV:
				if FormName == 'None':
					if AllowTableKey == 'Teller Function' or AllowTableKey == 'Fund Transfer':
						FieldRequired.append(('Form','This field is required.'))
						return render_template('_batch-upload.html', AllowTable=AllowTable.keys(), 
								FieldRequired=FieldRequired, Table=AllowTableKey, ImportMode=ImportMode,FormName=FormName)
					else:
						FormName = ''
						Status 	 =  False
				if AllowTableKey == 'Multi Journal':
					if not FormName:
						Status = False
						FieldRequired.append(('Form','This field is required.'))
						return render_template('_batch-upload.html', AllowTable=AllowTable.keys(), 
								FieldRequired=FieldRequired, Table=AllowTableKey, ImportMode=ImportMode,FormName=FormName)
					elif not (FileCSV and FileCSVDebit and FileCSVCredit):
						Status = False
						FieldRequired.append(('File Upload','This field is required.'))
						return render_template('_batch-upload.html', AllowTable=AllowTable.keys(), 
								FieldRequired=FieldRequired, Table=AllowTableKey, ImportMode=ImportMode,FormName=FormName)
					else:
						AllowFileDr 	= 	mkttool.getAllowedFile(FileCSVDebit.filename)
						AllowFileCr 	= 	mkttool.getAllowedFile(FileCSVCredit.filename)
						if not (AllowFileDr and AllowFileCr):
							Status = False
							flash("%s Allow file csv only." % msg_error)
				if AllowTableKey == 'None' :
					Status = False
					FieldRequired.append(('Module','This field is required.'))
				if not FileCSV:
					Status = False
					FieldRequired.append(('File Upload','This field is required.'))
				if Status:			
					Dict = {
							"FileUpload":"",
						  	"FileUpload1":"",
						  	"FileUpload2":"",
						  	"Module":AllowTableKey,
						  	"Form":FormName,
						  	"Table":AllowTable[AllowTableKey],
						  	"ImportMode":"N",
						  	"UploadType":"1",
						  	"BatchStatus":""
					}

					if ImportMode:
						Dict.update({"ImportMode":ImportMode})
					else:
						Dict.update({"ImportMode":"N"})
					if FileCSV:
						Status,FileName=batchupload.uploadFileToDir(FileCSV)
						if Status:
							Dict.update({"FileUpload":FileName})
						
					if FileCSVDebit:
						StatusDr ,FileNameDr=batchupload.uploadFileToDir(FileCSVDebit)
						if StatusDr:
							Dict.update({"FileUpload1":FileNameDr})
						
					if FileCSVCredit:
						StatusCr,FileNameCr=batchupload.uploadFileToDir(FileCSVCredit)
						if StatusCr:
							Dict.update({"FileUpload2":FileNameCr})
						
					AutoID          =   mktautoid.getAutoID("FRM_BATCH_UPLOAD")
					Audit 	=	getAuditTrailInau()
					Audit.update({"ID":AutoID})
					Dict.update(Audit)
					host 				=	request.url.split("/Morakot")[0]
					url 	=	"%s/Morakot/API/BatchAuthorize/"%host
					# NewDict = batchupload.bindFormAndTemplate("FRM_BATCH_UPLOAD",Dict)
					headers = {	
								'authorizationkey':	getToken() ,
								'accept': "application/json",
								'content-type': "application/json"
								}
					response,status_code=api_request.postForm(url=url,data=Dict,Branch=Audit.get("Branch",""),headers=headers)
					if status_code==200:
						flash('%s was imported successfully.' %AllowTableKey)
						ListMessage=[]
						message = eval(response)
						message = message.get("message",{}).get("message",{})
						for msg in message:
							flash(Markup(msg))
					elif status_code==406:
						ListMessage=[]
						message = eval(response)
						message = message.get("message")
						for key in message.keys():
							ListMessage.append("%s:%s"%(key,message.get(key)))
						flash(msg_error+'%s was imported was fail.%s' % (AllowTableKey,ListMessage))

					elif status_code==500:
						flash('%s please check .' % AllowTableKey)
					else:
						message = eval(response)
						if message.get("message").get("message"):
							flash(msg_error+message.get("message").get("message")[0])
					
				else:
					flash(msg_error+'%s was imported was fail.' % AllowTableKey)
			else:
				# if not FileCSV:
				flash(msg_error+"%s Allow file csv only." % msg_error)

	except Exception, e:
		db.session.rollback()
		db.session.close()
		flash(getSafeMsg("%s %s" % (msg_error, e.message)))
		raise e 
		
	return render_template('_batch-upload.html', AllowTable=AllowTable.keys(), 
							FieldRequired=FieldRequired, Table=AllowTableKey, ImportMode=ImportMode,FormName=FormName)

@app.route("/Morakot/BatchUpload2", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def batchUpload2():
	from app.BatchUpload.forms 	 	import FRM_BATCH_UPLOAD
	from app.tools.mktbatchupload 	import batchupload

	# Block check access right
	ErrorMsg 	= []
	GetCheck 	= checkAccess("/Morakot/BatchUpload2/","Search")
	if GetCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	FieldRequired= []
	Audit= {}
	AllowTable = {
		'Journal Entry': 'MKT_JOURNAL_ENTRY_INAU',
		'Multi Journal': ['MKT_MULTI_JOURNAL_II_INAU', 'MKT_MULTI_DEBIT_II_INAU', 'MKT_MULTI_CREDIT_II_INAU'],
		'Fund Transfer': 'MKT_FUND_TRANSFER_INAU',
		'Teller Function': 'MKT_TELLER_INAU',}
		#'Repayment Schedule': 'MKT_REP_SCHEDULE',}
	AllowTableKey = ''
	ImportMode = ''
	FormName = ''
	Status 		=	True	
	try:
		if request.method == 'POST':
			AllowTableKey 	= request.form['Operation'] #Module
			ImportMode		= request.form.get('ImportMode')
			FileCSV 		= request.files['file']
			FileCSVDebit 	= request.files['fileDebit']
			FileCSVCredit 	= request.files['fileCredit']
			FormName 		= request.form['FormNameOption']#Form
			Audit 			= getAuditTrailInau()
			AllowFile 		= 	mkttool.getAllowedFile(FileCSV.filename)
			if AllowFile or not FileCSV:
				if FormName == 'None':
					if AllowTableKey == 'Teller Function' or AllowTableKey == 'Fund Transfer':
						FieldRequired.append(('Form','This field is required.'))
						return render_template('_batch-upload.html', AllowTable=AllowTable.keys(), 
								FieldRequired=FieldRequired, Table=AllowTableKey, ImportMode=ImportMode,FormName=FormName)
					else:
						FormName = ''
						Status 	 =  False
				if AllowTableKey == 'Multi Journal':
					if not FormName:
						Status = False
						FieldRequired.append(('Form','This field is required.'))
						return render_template('_batch-upload.html', AllowTable=AllowTable.keys(), 
								FieldRequired=FieldRequired, Table=AllowTableKey, ImportMode=ImportMode,FormName=FormName)
					elif not (FileCSV and FileCSVDebit and FileCSVCredit):
						Status = False
						FieldRequired.append(('File Upload','This field is required.'))
						return render_template('_batch-upload.html', AllowTable=AllowTable.keys(), 
								FieldRequired=FieldRequired, Table=AllowTableKey, ImportMode=ImportMode,FormName=FormName)
					else:
						AllowFileDr 	= 	mkttool.getAllowedFile(FileCSVDebit.filename)
						AllowFileCr 	= 	mkttool.getAllowedFile(FileCSVCredit.filename)
						if not (AllowFileDr and AllowFileCr):
							Status = False
							flash("%s Allow file csv only." % msg_error)
							
				
				if AllowTableKey == 'None' :
					Status = False
					FieldRequired.append(('Module','This field is required.'))
				if not FileCSV:
					Status = False
					FieldRequired.append(('File Upload','This field is required.'))
				if Status:			
					Dict = {
							"FileUpload":"",
						  	"FileUpload1":"",
						  	"FileUpload2":"",
						  	"Module":AllowTableKey,
						  	"Form":FormName,
						  	"Table":AllowTable[AllowTableKey],
						  	"ImportMode":"N",
						  	"UploadType":"1",
						  	"BatchStatus":""
					}

					if ImportMode:
						Dict.update({"ImportMode":ImportMode})
					else:
						Dict.update({"ImportMode":"N"})
					if FileCSV:
						Status,FileName=batchupload.uploadFileToDir(FileCSV)
						if Status:
							Dict.update({"FileUpload":FileName})
						
					if FileCSVDebit:
						StatusDr ,FileNameDr=batchupload.uploadFileToDir(FileCSVDebit)
						if StatusDr:
							Dict.update({"FileUpload1":FileNameDr})
						
					if FileCSVCredit:
						StatusCr,FileNameCr=batchupload.uploadFileToDir(FileCSVCredit)
						if StatusCr:
							Dict.update({"FileUpload2":FileNameCr})
						
					AutoID          =   mktautoid.getAutoID("FRM_BATCH_UPLOAD")
					Audit 	=	getAuditTrailInau()
					Audit.update({"ID":AutoID})
					Dict.update(Audit)
					host 				=	request.url.split("/Morakot")[0]
					url 	=	"%s/Morakot/API/BatchAuthorize/"%host
					headers ={
								"accept":"application/json",
								"content-type":"application/json",
								"authorizationkey":getToken()
							}
					# NewDict = batchupload.bindFormAndTemplate('FRM_BATCH_UPLOAD',Dict,headers=headers)

					# headers.update({"authorizationkey":getToken()})

					response,status_code=api_request.postForm(url=url,data=Dict,headers= headers)
					print "response authorize recored",response
					if status_code==200:
						flash('%s was imported successfully.' %AllowTableKey)
						ListMessage=[]
						message = ast.literal_eval(response)
						message = message.get("message",{}).get("message",{})
						for msg in message:
							flash(Markup(msg))

					elif status_code==406:
						ListMessage=[]
						message = ast.literal_eval(response)
						message = message.get("message")
						for key in message.keys():
							ListMessage.append("%s:%s"%(key,message.get(key)))
						flash(msg_error+'%s was imported was fail.%s' % (AllowTableKey,ListMessage))

					elif status_code==500:
						flash('%s please check .' % AllowTableKey)
					else:
						message = ast.literal_eval(response)
						if message.get("message").get("message"):
							flash(msg_error+message.get("message").get("message")[0])
					
				else:
					flash(msg_error+'%s was imported was fail.' % AllowTableKey)
			else:
				# if not FileCSV:
				flash(msg_error+"%s Allow file csv only." % msg_error)

	except Exception, e:
		db.session.rollback()
		db.session.close()
		flash(getSafeMsg("%s %s" % (msg_error, e.message)))
		raise e 

	return render_template('_batch-upload_v2.html', AllowTable=AllowTable.keys(), 
							FieldRequired=FieldRequired, Table=AllowTableKey, ImportMode=ImportMode,FormName=FormName)

def insetRepaymentSchedule(TableName, DictCSV, Audit, FormName='',Committed=True):
	Result,Mesg = getValidationDefault(TableName, DictCSV, Audit, FormName='',Committed=True)
	if not Result:
		raise ValueError(Mesg)

	getValidationSchedule(DictCSV)

	TableModel = getTableModel(TableName)
	if FormName:
		ListPkName = [key.name for key in inspect(TableModel).primary_key]
	for row in DictCSV:

		Branch = row.get('Branch', None)

		if Audit:
			row.update(Audit)

		if Branch:
			row.update({'Branch':Branch})

		row.pop('', None)

		#Update default vaule 
		row.update({'Charge':row.get('Charge',0)})

		try:
			Principal = row.get('Principal',0)
			Principal = float(str(Principal).replace(',',''))
			row.update({'Principal':Principal})
		except Exception, e:
			raise ValueError("%s row of colunm Principal %s invalid format."%(LoanID,row.get('Principal')))
		try:
			
			Interest = row.get('Interest',0)
			Interest = float(str(Interest).replace(',',''))
			row.update({'Interest':Interest})
		except Exception, e:
			raise ValueError("%s row of colunm Interest %s invalid format."%(LoanID,row.get('Interest')))
		
		try:
			Balance = row.get('Balance',0)
			Balance = float(str(Balance).replace(',',''))
			row.update({'Balance':Balance})
		except Exception, e:
			raise ValueError("%s row of colunm Balance %sinvalid format."%(LoanID,row.get('Balance')))

		try:
			NumDay = row.get('NumDay',0)
			NumDay = int(str(NumDay).replace(',',''))
			row.update({'NumDay':NumDay})
		except Exception, e:
			raise ValueError("%s row of colunm NumDay %s invalid format."%(LoanID,row.get('NumDay')))

		try:
			RepStatus = row.get('RepStatus',0)
			RepStatus = int(str(RepStatus).replace(',',''))
			row.update({'RepStatus':RepStatus})
		except Exception, e:
			raise ValueError("%s row of colunm RepStatus %s invalid format. Example : 0 1 2 3 4"%(LoanID,row.get('RepStatus')))

		try:
			PartPaidAmt = row.get('PartPaidAmt',0)
			PartPaidAmt = float(str(PartPaidAmt).replace(',',''))
			row.update({'PartPaidAmt':PartPaidAmt})
		except Exception, e:
			raise ValueError("%s row of PartPaidAmt %s invalid format."%(LoanID,row.get('PartPaidAmt')))

		if FormName:
			for pk in ListPkName:
				row[pk] = mktautoid.getAutoID(FormName)

		mktdb.insertTable(TableModel, row)

	if Committed:
		db.session.commit()
	return True,"Done"

def insertTableFromCSV(TableName, DictCSV, Audit, FormName='',Committed=True):
	'''
	Insert table from CSV file
	'''

	(Success, Msg) = checkDuplicatedKey(TableName, DictCSV, FormName)
	ListOfPK = getListOfPK(TableName, DictCSV)
	DuplicatedKeyINAU = getDuplicatedKeyInTable(TableName, ListOfPK)

	if Success:
		if not DuplicatedKeyINAU:
			FunctionObj = mktdb.insertTable
			executeTableOperation(FunctionObj, getTableModel(TableName), DictCSV, Audit, FormName, Committed=Committed)
			Committed = True
		else:
			Committed = False
			Msg = '%s%s already exists in %s' % (msg_warning, getStrDuplicatedKey(DuplicatedKeyINAU), TableName)
	else:
		Committed = False

	return Committed, Msg

def clearAndInsertTableFromCSV(TableName, DictCSV, Audit, FormName='', Committed=True, ClearByBranch=False):
	'''
	Clear and then insert table from CSV File
	'''

	# Use only with batch upload
	if ClearByBranch:
		Branch = mktuser.getCurrentBranch()
		# Clear table by current branch
		getTableModel(TableName).query.filter_by(Branch=Branch).delete()
	else:
		# Clear table in all branch
		getTableModel(TableName).query.delete()


	(Success, Msg) = checkDuplicatedKey(TableName, DictCSV, FormName)

	if Success:
		FunctionObj = mktdb.insertTable
		executeTableOperation(FunctionObj, getTableModel(TableName), DictCSV, Audit, FormName, Committed=Committed)
		Committed=True
	else:
		Committed = False

	return Committed, Msg

def mergeTableFromCSV(TableName, DictCSV, Audit, FormName=''):
	'''
	Merge table from CSV file. Merge mean if pk is already exists update
	If pk is not exists then it insert new 
	'''

	Committed = False

	(Success, Msg) = checkDuplicatedKey(TableName, DictCSV,FormName)

	if Success:

		mergeRecordFromCSV(TableName, DictCSV, Audit, FormName)
		Committed = True

	return Committed, Msg

def mergeRecordFromCSV(TableName, DictCSV, Audit, FormName=''):

	TableModel = getTableModel(TableName)
	ListPkName = [key.name for key in inspect(TableModel).primary_key]

	for row in DictCSV:

		# try to check if the record already exist and has no change
		Obj = db.session.query(TableModel).filter_by(**row).first()

		# if there is a change in the record, Is is a new record or update record?
		if not Obj:

			Branch = row.get('Branch', None)

			if Audit:
				row.update(Audit)

			if Branch:
				row.update({'Branch':Branch})

			row.pop('', None)

			if FormName:
				for pk in ListPkName:
					# try to get table id if table has id don't generate autoid if table dont have id set ID = None
					ID = row.get(pk, None)
					# if table dont have id ID = None then generate auto id
					if not ID:
						row[pk] = mktautoid.getAutoID(FormName)

			mktdb.mergeTable(TableModel, row)

	db.session.commit()

def executeTableOperation(function, TableModel, DictCSV, Audit, FormName='',Committed=True):
	'''
	Execute table operation like insert or merge via function param then commit
	'''

	if FormName:
		ListPkName = [key.name for key in inspect(TableModel).primary_key]

	for row in DictCSV:

		Branch = row.get('Branch', None)

		if Audit:
			row.update(Audit)

		if Branch:
			row.update({'Branch':Branch})

		row.pop('', None)

		if FormName:
			for pk in ListPkName:
				row[pk] = mktautoid.getAutoID(FormName)

		function(TableModel, row)
	if Committed:
		db.session.commit()

def checkFormAutoID(FormName=None):
	if FormName:
		ID = MKT_AUTOID.query.get(FormName)
		if not ID:
			return False

	return True

def checkDuplicatedKey(TableName, DictCSV,FormName=""):
	'''
	Check duplicated key in CSV file and live record
	Return success, message and list of dictionary of CSV data
	'''

	Msg = ''
	Success = False

	# Check whitespace in Column header
	SpaceCol = getWhitespaceColumnHeader(DictCSV)

	if SpaceCol:
		return Success, '%sWhitespace in column header: %s' % (msg_warning, ' '.join(SpaceCol))

	ListOfPK = getListOfPK(TableName, DictCSV)

	DuplicatedKeyCSV = getDuplicatedKey(ListOfPK)
	DuplicatedKeyInLive = getDuplicatedKeyInTable(TableName[:-5], ListOfPK)
	MissingCol = getMissingColumnInCSV(TableName, DictCSV)
	# Check Auto ID
	checkFormAutoIDObj = checkFormAutoID(FormName)
	if not checkFormAutoIDObj:
		return Success,"%sPlease config Auto ID for form %s in Setting." % (msg_warning, FormName)

	if not MissingCol:
		if not DuplicatedKeyCSV:
			if not DuplicatedKeyInLive:
				Msg = "%s was imported successfully."% TableName
				Success = True
			else:
				Msg = '%s%s already exists in %s' % (msg_warning, getStrDuplicatedKey(DuplicatedKeyInLive), TableName[:-5])
		else:
			Msg = '%s%s duplicated key in CSV file' % (msg_warning, getStrDuplicatedKey(DuplicatedKeyCSV))
	else:
		Msg = '%sIncorrect column : %s in CSV file' % (msg_warning, ' '.join(MissingCol))

	return (Success, Msg)

def getValidationDefault(TableName, DictCSV, Audit, FormName='',Committed=True):

	'''
	Insert table from CSV file
	'''

	(Success, Msg) 	= checkDuplicatedKey(TableName, DictCSV, FormName)
	ListOfPK 		= getListOfPK(TableName, DictCSV)
	DuplicatedKey 	= getDuplicatedKeyInTable(TableName, ListOfPK)

	if Success:
		if not DuplicatedKey:
			return True,'Done'
		else:
			Committed = False
			Msg = '%s%s already exists in %s' % (msg_warning, getStrDuplicatedKey(DuplicatedKey), TableName)
	
	return Committed, Msg

def getValidationSchedule(DictCSV):
	for row in DictCSV:
		LoanID = row.get('LoanID',None)
		CollectionDate = row.get('CollectionDate',None)
		if CollectionDate:
			if not mktdate.isDate(CollectionDate):
				raise ValueError("%s Collection Date is required."%LoanID)
		else:
			
			raise ValueError("%s Collection Date is required."%LoanID)

		MKT_LOAN_CONTRACT = getTableModel('MKT_LOAN_CONTRACT')
		MKT_REP_SCHEDULE= getTableModel('MKT_REP_SCHEDULE')
		MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID).delete()
		LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		if not LoanObj:
			raise ValueError("Loan Contract %s not found"%LoanID)

def getStrDuplicatedKey(dupKeys):
	'''
	Join list of iterable and return it as string
	'''

	s = ''

	for i in dupKeys:
		s = s + ''.join('(%s)' % ', '.join(map(str, i))) + ' '

	return s

def getListOfPK(TableName, DictCSV):
	'''
	Get list of PK (no matter how many are there in the table) by referencing of their table
	'''

	# create reflecting engine 
	engine = create_engine(app.config['SQLALCHEMY_DATABASE_URI'])
	inspector = inspect(engine)

	# get list of columns detail
	DictColumns = inspector.get_columns(TableName)

	engine.session.close()
	
	TableModel = getTableModel(TableName)
	ListPkName = [key.name for key in inspect(TableModel).primary_key]
	ListOfPK = []

	'''
	If there is a pk is an Auto Number return empty PK list
	'''

	for col in DictColumns:
		# if the column is a primary key
		if col['name'] in ListPkName:
			# if the column is an auto number
			if col['autoincrement']:
				# no need to check duplicated key because auto number never get duplicated
				return []

	for row in DictCSV:
		if all(pk in row for pk in ListPkName):
			item = [row[i] for i in ListPkName]
			if item:
				ListOfPK.append(tuple(item))

	return ListOfPK

def getDuplicatedKey(ListOfPK):
	'''
	Get duplicated key in a list and return list of duplicated key
	'''

	ListDuplicatedKey = []
	ListNew = []
	for i in ListOfPK:
		if i in ListNew:
			ListDuplicatedKey.append(i)
		ListNew.append(i)

	return ListDuplicatedKey

def getWhitespaceColumnHeader(DictCSV):
	'''
	Check if column header contain Whitespace
	'''

	ListOfCol = []

	if DictCSV:
		ListOfCol = [x for x in DictCSV[0].keys()]

	ColSpace = [x for x in ListOfCol if mkttool.isContainWhitespace(x)]

	return ColSpace

def getMissingColumnInCSV(TableName, DictCSV):
	'''
	Get missing column by compare list column of table and list column of CSV file
	'''

	ListOfCol = []

	if DictCSV:
		ListOfCol = [x for x in DictCSV[0].keys()]

	TableModel = getTableModel(TableName)
	ListOfColTable = [x for x in TableModel.__table__.columns.keys()]
	MissingCol = [x for x in ListOfCol if x not in ListOfColTable]
	MissingCol = filter(None, MissingCol)

	return MissingCol

def getDuplicatedKeyInTable(TableName, ListOfPK):
	'''
	Get duplicated key in a table by compare list of ID in table with list ID from CSV data
	return list of duplicated key
	'''

	if TableName in ListTable:
		TableModel = getTableModel(TableName)
		ListPkName = [key.name for key in inspect(TableModel).primary_key]
		ListArg = [getattr(TableModel, i) for i in ListPkName]
		TableObj = db.session.query(*ListArg).all()

		ListDuplicated = []
		for row in TableObj:
			if row in ListOfPK:
				ListDuplicated.append(row)

		return ListDuplicated

	else:
		return []

def getAuditTrailInau():
	'''
	Get INAU Audit Trail
	'''

	Audit 		= mktaudit.getAuditrail()
	Audit.update({'Authorizer':''})
	Audit.update({'Authorizeon':''})
	Audit.update({'Status':'INAU'})
	Audit.update({'Curr':'-1'})
	return Audit

def getUrlRegisterModule():

	return __import__("app.urlregister")

def getTableModel(TableName):

	return mkttool.alterModel([getattr(getUrlRegisterModule(), TableName)])[0]

def getFormNameByModelName(ModelName):

	return ModelName.replace('MKT','FRM').replace("_INAU", "")

def getSafeMsg(Msg):

	if Msg:
		if mkttool.isUnicode(Msg):
			Temp = repr(Msg)
			return Temp[2:-1]
		Temp = repr(Msg)
		return Temp[1:-1]
	return ''

