from flask 						import Flask, request,jsonify,make_response
from app.mktcore.imports 		import *
from decimal 					import *
from .. import app
import csv
import app.tools.mktmoney 		as mktmoney
import app.tools.mktdate 		as mktdate
import app.tools.mkttool 		as mkttool
import app.tools.mktdb 			as mktdb
import app.tools.user 			as mktuser
from app.urlregister import *


@app.route("/Morakot/GenerateLineReport", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def GenerateLineReport():
	
	FieldRequired =[]

	if request.method == 'POST':
		ImportStatus = ''
		FileCSV = request.files['file']
		GenerateMode = request.form['GenerateMode']
		if not FileCSV:
			FieldRequired.append(('File Upload','This field is required.'))

		else:
			if FileCSV and mkttool.getAllowedFile(FileCSV.filename):

				return generateLineValue(FileCSV,int(GenerateMode))
			else:
				flash(msg_error+"Allow file csv only.")

	return render_template("generatelinevalue.html")
import StringIO
import csv
def generateLineValue(FileCSV,GenerateMode):
	DictCSV = mkttool.getDictCSV(FileCSV)
	#Create file csv
	StrIO = StringIO.StringIO()
	CSVWrite = csv.writer(StrIO)
	CSVWrite.writerow(['ID','LineNumber','Report','LineType','LineDescription','LineValue','Format','Indent'])
	for row in DictCSV:
		LineValue = row['LineValue'] if 'LineValue' in row else ''
		ListLineValue = LineValue.split()
		NewLineValue =""
		ListKHR = []
		ListUSD = []
		ListTHB = []
		if ListLineValue:
			isLineGL = True
			for col in ListLineValue:
				GLKey = col.replace('>',' ')
				GLKey = col.replace('-','')
				GLKey = list(GLKey)
				if len(GLKey) >= 6:
					LineKHR =''
					LineTHB =''
					# KHR => USD THB
					if GenerateMode == 1:
							
						if GLKey[5] == "1":
							ListKHR.append(col)

							GLKey[5] = "2"
							ListUSD.append("".join(GLKey))

							GLKey[5] = "3"
							ListTHB.append("".join(GLKey))
							
						elif GLKey[5] == "2":
							ListUSD.append(col)

							GLKey[5] = "1"
							ListKHR.append("".join(GLKey))

							GLKey[5] = "3"
							ListTHB.append("".join(GLKey))
					# KHR => USD
					elif GenerateMode == 2:
						if GLKey[5] == "1":
							ListKHR.append(col)

							GLKey[5] = "2"
							ListUSD.append("".join(GLKey))

						elif GLKey[5] == "2":
							ListUSD.append(col)

							GLKey[5] = "1"
							ListKHR.append("".join(GLKey))
					# Only KHR
					elif GenerateMode == 3:
						if GLKey[5] == "1":

							ListKHR.append(col)

						elif GLKey[5] == "2":
							
							GLKey[5] = "1"
							ListKHR.append("".join(GLKey))
					# Only USD
					elif GenerateMode == 5:
						if GLKey[5] == "1":
							
							GLKey[5] = "2"
							ListUSD.append("".join(GLKey))

						elif GLKey[5] == "2":
							ListUSD.append(col)
				else:
					isLineGL = False
			if isLineGL:
				NewLineValue = " ".join(ListKHR)
				NewLineValue = NewLineValue + " "+" ".join(ListUSD)
				NewLineValue = NewLineValue + " "+" ".join(ListTHB)
			else:
				NewLineValue = LineValue
			row.update({'LineValue':NewLineValue})
		Record = [row['ID'],row['LineNumber'],row['Report'],row['LineType'],row['LineDescription'],row['LineValue'],row['Format'],row['Indent']]

		CSVWrite.writerow(Record)
	BankDate = mktdate.getBankDate()
	AsOfDate = mktdate.formatDate(str(BankDate),'MMYYYY')
	# We need to modify the response, so the first thing we 
	# need to do is create a response out of the CSV string
	response = make_response(StrIO.getvalue())
	# This is the key: Set the right header for the response
	# to be downloaded, instead of just printed on the browser
	response.headers['Cache-Control'] = 'no-cache'
	response.headers["Content-Disposition"] = "attachment; filename=%s.csv"%(AsOfDate)
	response.headers["Content-type"] = "text/csv; charset=utf-8"
	StrIO.close()
	return response

ListAdministrator 	= [ 'Branch','Module','Form','Role','Access Right','Menu','Menu Item']
ListOfValues 		= [	'Business','Category','Category Type','Country','Education',
						'Source Of Fund','Sector','Industry','ID Type','Transaction',
						'Loan Purpose','Loan CheckList','Officer',
						'Position','Province','District','Commune','Village']

ListAdministrator.sort()
ListOfValues.sort()

DicAllowTableImport ={
	'Branch'		:'MKT_BRANCH',
	'Module'		:'MKT_MODULE',
	'Form'			:'MKT_FORM',
	'Role'			:'MKT_ROLE',
	'Menu'			:'MKT_MENU',
	'Menu Item'		:'MKT_MENU_ITEM',
	'Access Right'	:'MKT_ACCESS',
	'Business'		:'MKT_BUSINESS',
	'Category'		:'MKT_CATEGORY',
	'Category Type'	:'MKT_CATEG_TYPE',
	'Country'		:'MKT_COUNTRY',
	'Education'		:'MKT_EDUCATION',
	'Source Of Fund':'MKT_SOURCE_OF_FUND',
	'Sector'		:'MKT_SECTOR',
	'Industry'		:'MKT_INDUSTRY',
	'ID Type'		:'MKT_ID_TYPE',
	'Transaction'	:'MKT_TRANSACTION',
	'Loan Purpose'	:'MKT_LOAN_PURPOSE',
	'Loan CheckList':'MKT_CHECKLIST',
	'Officer'		:'MKT_OFFICER',
	'Position'		:'MKT_POSITION',
	'Province'		:'MKT_PROVINCE',
	'District'		:'MKT_DISTRICT',
	'Commune'		:'MKT_COMMUNE',
	'Village'		:'MKT_VILLAGE',

	}

def isFieldRequired(Field,Label):
	if not Field:
		return False,"%s : This field is required." % Label

def isMaxMinField(Field='',Label='',Max='',Min=''):
	if Max:
		if len(Field)>Max:
			return False,"%s value too long for maximum %s characters." % (Label,Max)
	if Min:
		if len(Field)<Min:
			return False,"%s required minimun %s characters." % (Label,Min)

def isDuplicate(TableName,Field,Value):
	karwgs = {Field:Value}
	QueryTable = eval(TableName).query.filter_by(**karwgs).all()
	if QueryTable:
		return False,"%s: %s already exists..." % (Field,Value)

def isRecordFound(TableName,Field,Label,Value):
	karwgs = {Field:Value}
	QueryTable = eval(TableName).query.filter_by(**karwgs).all()
	if not QueryTable:
		return False,"%s: %s not found!" % (Label,Value)

#--- Function to check record found for big data
def isRemoteRecordFound(DictCSV,TableName,Field,FieldDict):

	CountRow = 2
	ListRecord = []
	QueryTable = eval(TableName).query
	for row in QueryTable:
		ListRecord.append(str(getattr(row,Field)))
	for row in DictCSV:
		if not row[FieldDict] in ListRecord:
			return False,'Row: %s, %s: %s not found!' % (CountRow,Field,row[FieldDict])
		CountRow+=1

#--- Function to check duplicate for big data
def isRemoteDuplicate(DictCSV,TableName,Field):

	CountRow = 2
	ListRecord = []
	ListDict = []
	QueryTable = eval(TableName).query
	for row in QueryTable:
		ListRecord.append(str(getattr(row,Field)))

	for row in DictCSV:
		if row[Field] in ListDict :
			return False,'Row: %s, %s: %s already exists...' % (CountRow,Field,row[Field])
		else:
			ListDict.append(str(row[Field]))
			if row[Field] in ListRecord:
				return False,'Row: %s, %s: %s already exists...' % (CountRow,Field,row[Field])
		CountRow+=1		
		

@app.route("/Morakot/DataImport", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def upload_file():
	# from app.urlregister 	import *
	Module = __import__("app.urlregister")
	FieldRequired =[]
	try:
		if request.method == 'POST':
			ImportStatus = ''
			FileCSV = request.files['file']
			TableName  = request.form['Operation']
			ClearTable = request.form['ClearTable']

			if TableName == 'None':
				FieldRequired.append(('Table Name','This field is required.'))
							
			if not FileCSV:
				FieldRequired.append(('File Upload','This field is required.'))

			else:
				if FileCSV and mkttool.getAllowedFile(FileCSV.filename):

					if ClearTable =='Y':
						getattr(Module,DicAllowTableImport[TableName]+'_HIST').query.delete()
						getattr(Module,DicAllowTableImport[TableName]+'_INAU').query.delete()
						getattr(Module,DicAllowTableImport[TableName]).query.delete()

					if TableName == 'Country':
						ImportStatus = importCountry(FileCSV)

					elif TableName == 'Branch':
						ImportStatus = ImportBranch(FileCSV)

					elif TableName == 'Category':
						ImportStatus = ImportCategory(FileCSV)
						
					elif TableName == 'Category Type':
						ImportStatus = ImportCategoryType(FileCSV)

					elif TableName == 'Sector':
						ImportStatus = ImportSector(FileCSV)

					elif TableName == 'Industry':
						ImportStatus = ImportIndustry(FileCSV)

					elif TableName == 'Loan Purpose':
						ImportStatus = ImportLoanPurpose(FileCSV)

					elif TableName == 'Province':
						ImportStatus = ImportProvince(FileCSV)

					elif TableName == 'District':
						ImportStatus = ImportDistrict(FileCSV)	

					elif TableName == 'Commune':
						ImportStatus = ImportCommune(FileCSV)

					elif TableName == 'Village':
						ImportStatus = ImportVillage(FileCSV)	

					elif TableName == 'Education':
						ImportStatus = ImportEducation(FileCSV)

					elif TableName == 'ID Type':
						ImportStatus = ImportIDType(FileCSV)

					elif TableName == 'Business':
						ImportStatus = ImportBusiness(FileCSV)

					elif TableName == 'Position':
						ImportStatus = ImportPosition(FileCSV)

					elif TableName == 'Officer':
						ImportStatus = ImportOfficer(FileCSV)

					elif TableName == 'Module':
						ImportStatus = ImportModule(FileCSV)

					elif TableName == 'Form':
						ImportStatus = ImportForm(FileCSV)

					elif TableName == 'Role':
						ImportStatus = ImportRole(FileCSV)

					elif TableName == 'Access Right':
						ImportStatus = ImportAccess(FileCSV)

					elif TableName == 'Transaction':
						ImportStatus = ImportTransaction(FileCSV)

					elif TableName == 'Source Of Fund':
						ImportStatus = ImportSourceOfFund(FileCSV)

					elif TableName == 'Loan CheckList':
						ImportStatus = ImportCheckList(FileCSV)

					elif TableName == 'Menu':
						ImportStatus = ImportMenu(FileCSV)

					elif TableName == 'Menu Item':
						ImportStatus = ImportMenuItem(FileCSV)

					if ImportStatus == True:
						db.session.commit()
						flash("%s was uploaded successfully."%TableName)
				else:
					flash(msg_error+"Allow file csv only.")
	except Exception, e:
		raise
		db.session.rollback()
		flash(msg_error+e.message)

	return render_template("dataimport.html",
							FieldRequired=FieldRequired,
							ListAdministrator=ListAdministrator,
							ListOfValues=ListOfValues)


#--- Import Function


def importCountry(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2

	for row in DictCSV:
		
		Validate = validationCountry(
								row['ID'],
								row['Description'])	
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_COUNTRY,row)

		CountRow+=1
	
	return True	
			
def ImportBranch(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationBranch(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_BRANCH,row)

		CountRow+=1

	return True

def ImportCategory(FileCSV=''):
	
	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		Validate = validationCategory(
								row['ID'],
								row['Description'],
								row['CategoryType'],
								row['BalanceType'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")
		else:
			mktdb.insertTable(MKT_CATEGORY,row)

		CountRow+=1

	return True

def ImportCategoryType(FileCSV=''):
	
	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		Validate = validationCategoryType(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")
		else:
			mktdb.insertTable(MKT_CATEG_TYPE,row)

		CountRow+=1

	return True

def ImportSector(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationSector(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_SECTOR,row)

		CountRow+=1

	return True

def ImportIndustry(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationIndustry(
								row['ID'],
								row['Description'],
								row['Sector'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_INDUSTRY,row)

		CountRow+=1

	return True

def ImportLoanPurpose(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationLoanPurpose(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_LOAN_PURPOSE,row)

		CountRow+=1

	return True

def ImportProvince(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationProvince(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_PROVINCE,row)

		CountRow+=1

	return True

def ImportDistrict(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationDistrict(
								row['ID'],
								row['Description'],
								row['Province'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_DISTRICT,row)

		CountRow+=1

	return True

def ImportCommune(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationCommune(
								row['ID'],
								row['Description'],
								row['District'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_COMMUNE,row)

		CountRow+=1

	return True	

def ImportVillage(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)

	#--- Funtion Validate Duplicate using RemoteDuplicate
	Duplicate = isRemoteDuplicate(DictCSV,'MKT_VILLAGE','ID')
	if Duplicate:
		db.session.rollback()
		flash(msg_error+'%s' % Duplicate[1] )
		return render_template("dataimport.html")


	#--- Start insert into db
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationVillage(
								row['ID'],
								row['Description'],
								row['Commune'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_VILLAGE,row)

		CountRow+=1

	#--- Funtion Validate RecordFound

	RecordFound = isRemoteRecordFound(DictCSV,'MKT_COMMUNE','ID','Commune')
	if RecordFound:
		db.session.rollback()
		flash(msg_error+'%s' % RecordFound[1] )
		return render_template("dataimport.html")

	return True	

def ImportEducation(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationEducation(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_EDUCATION,row)

		CountRow+=1

	return True

def ImportIDType(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationIDType(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_ID_TYPE,row)

		CountRow+=1

	return True

def ImportBusiness(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationBusiness(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_BUSINESS,row)

		CountRow+=1

	return True

def ImportPosition(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationPosition(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_POSITION,row)

		CountRow+=1

	return True

def ImportOfficer(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationOfficer(
								row['ID'],
								row['FirstName'],
								row['LastName'],
								row['Gender'],
								row['StartDate'],
								row['Position'],
								row['ReportTo'],
								row['Branch'],
								row['Active'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_OFFICER,row)

		CountRow+=1

	return True

def ImportModule(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationModule(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_MODULE,row)

		CountRow+=1

	return True

def ImportForm(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationForm(
								row['ID'],
								row['FormID'],
								row['FormDesc'],
								row['URL'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_FORM,row)

		CountRow+=1

	return True

def ImportRole(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationRole(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_ROLE,row)

		CountRow+=1

	return True

def ImportAccess(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationAccess(
								row['ID'],
								row['AccessID'],
								row['Module'],
								row['Form'],
								row['AccessRight'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_ACCESS,row)

		CountRow+=1

	return True

def ImportMenu(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationMenu(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_MENU,row)

		CountRow+=1

	return True

def ImportMenuItem(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationMenuItem(
								row['ID'],
								row['ItemID'],
								row['ItemDesc'],
								row['Icon'],
								row['Form'],
								row['Parents'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_MENU_ITEM,row)

		CountRow+=1

	return True

def ImportTransaction(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationTransaction(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_TRANSACTION,row)

		CountRow+=1

	return True

def ImportSourceOfFund(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationSourceOfFund(
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_SOURCE_OF_FUND,row)

		CountRow+=1

	return True

def ImportCheckList(FileCSV=''):

	DictCSV = mkttool.getDictCSV(FileCSV)
	CountRow = 2
	for row in DictCSV:
		
		Validate = validationCheckList( 
								row['ID'],
								row['Description'])
		
		if Validate[0]==False:
			db.session.rollback()
			flash(msg_error+'Row: %s, %s'%(CountRow,Validate[1]))
			return render_template("dataimport.html")

		else:
			mktdb.insertTable(MKT_CHECKLIST,row)

		CountRow+=1

	return True


#--- Validate Funtion
def validationCheckList(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',2)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',65)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_CHECKLIST','ID',ID)
	if Duplicate:
		return Duplicate

	return True,''

def validationSourceOfFund(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',4)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_SOURCE_OF_FUND','ID',ID)
	if Duplicate:
		return Duplicate

	return True,''

def validationTransaction(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',3)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',50)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_TRANSACTION','ID',ID)
	if Duplicate:
		return Duplicate

	return True,''

def validationMenuItem(ID,ItemID,ItemDesc,Icon,Form,Parents):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(ItemID,'ItemID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(ItemDesc,'ItemDesc')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(ItemID,'ItemID',12)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(ItemDesc,'ItemDesc',35)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Icon,'Icon',30)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Form,'Form',35)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Parents,'Parents',20)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_MENU_ITEM','ItemID',ItemID)
	if Duplicate:
		return Duplicate

	RecordFound = isRecordFound('MKT_MENU','ID','Menu',ID)
	if RecordFound:
		return RecordFound

	return True,''

def validationMenu(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_MENU','ID',ID)
	if Duplicate:
		return Duplicate

	return True,''

def validationAccess(ID,AccessID,Module,Form,AccessRight):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(AccessID,'AccessID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Module,'Module')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(AccessRight,'AccessRight')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(AccessID,'AccessID',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Module,'Module',6)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Form,'Form',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(AccessRight,'AccessRight',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_ACCESS','AccessID',AccessID)
	if Duplicate:
		return Duplicate

	for item in AccessRight.split():
		if not  item in ['N', 'V', 'D', 'L', 'C', 'P', 'A', 'ALL']:
			return False,"%s AccessRight must be only N, V, D, L, C, P, A, ALL." % AccessRight

		

	return True,''

def validationRole(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_ROLE','ID',ID)
	if Duplicate:
		return Duplicate

	Duplicate = isDuplicate('MKT_ROLE','Description',Description)
	if Duplicate:
		return Duplicate

	return True,''

def validationForm(ID,FormID,FormDesc,URL):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(FormID,'FormID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(FormDesc,'FormDesc')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(URL,'URL')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(FormID,'FormID',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(FormDesc,'FormDesc',35)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(URL,'URL',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_FORM','FormID',FormID)
	if Duplicate:
		return Duplicate

	return True,''

def validationModule(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_MODULE','ID',ID)
	if Duplicate:
		return Duplicate

	Duplicate = isDuplicate('MKT_MODULE','Description',Description)
	if Duplicate:
		return Duplicate

	return True,''

def validationOfficer(ID,FirstName,LastName,Gender,StartDate,Position,ReportTo,Branch,Active):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(FirstName,'FirstName')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(LastName,'LastName')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Gender,'Gender')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(StartDate,'StartDate')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Position,'Position')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Branch,'Branch')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Active,'Active')
	if FieldRequired:
		return FieldRequired

	#--- Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(FirstName,'FirstName',35)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(FirstName,'FirstName',35)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Gender,'Gender',6)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(StartDate,'StartDate',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Position,'Position',3)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(ReportTo,'ReportTo',10)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Branch,'Branch',6)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Active,'Active',3)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_OFFICER','ID',ID)
	if Duplicate:
		return Duplicate

	if not Gender in ['Male','Female','Other']:
		return False,"%s Gender must be only Male,Female,Other." % Gender

	if not Active in ['Y','N']:
		return False,"%s Active must be only Yes,No." % Active

	RecordFound = isRecordFound('MKT_POSITION','ID','Position',Position)
	if RecordFound:
		return RecordFound

	RecordFound = isRecordFound('MKT_BRANCH','ID','Branch',Branch)
	if RecordFound:
		return RecordFound

	if ReportTo :
		RecordFound = isRecordFound('MKT_OFFICER','ID','ReportTo',ReportTo)
		if RecordFound:
			return RecordFound
	return True,''

def validationPosition(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',3)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_POSITION','ID',ID)
	if Duplicate:
		return Duplicate

	return True,''

def validationBusiness(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',3)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_BUSINESS','ID',ID)
	if Duplicate:
		return Duplicate

	return True,''

def validationIDType(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',3)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_ID_TYPE','ID',ID)
	if Duplicate:
		return Duplicate

	return True,''

def validationEducation(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',8)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_EDUCATION','ID',ID)
	if Duplicate:
		return Duplicate

	return True,''

def validationVillage(ID,Description,Commune):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',14)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Commune,'Commune',7)
	if MaxMinField:
		return MaxMinField


	# Duplicate = isDuplicate('MKT_VILLAGE','ID',ID)
	# if Duplicate:
	# 	return Duplicate

	# RecordFound = isRecordFound('MKT_COMMUNE','ID','Commune',Commune)
	# if RecordFound:
	# 	return RecordFound

	return True,''

def validationCommune(ID,Description,District):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',7)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(District,'District',5)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_COMMUNE','ID',ID)
	if Duplicate:
		return Duplicate

	RecordFound = isRecordFound('MKT_DISTRICT','ID','District',District)
	if RecordFound:
		return RecordFound

	return True,''

def validationDistrict(ID,Description,Province):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',5)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Province,'Province',3)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_DISTRICT','ID',ID)
	if Duplicate:
		return Duplicate

	RecordFound = isRecordFound('MKT_PROVINCE','ID','Province',Province)
	if RecordFound:
		return RecordFound

	return True,''

def validationProvince(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',3)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_PROVINCE','ID',ID)
	if Duplicate:
		return Duplicate

	Duplicate = isDuplicate('MKT_PROVINCE','Description',Description)
	if Duplicate:
		return Duplicate

	return True,''

def validationLoanPurpose(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',3)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_LOAN_PURPOSE','ID',ID)
	if Duplicate:
		return Duplicate

	Duplicate = isDuplicate('MKT_LOAN_PURPOSE','Description',Description)
	if Duplicate:
		return Duplicate

	return True,''

def validationIndustry(ID,Description,Sector):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',5)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Sector,'Sector',3)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_INDUSTRY','ID',ID)
	if Duplicate:
		return Duplicate

	Duplicate = isDuplicate('MKT_INDUSTRY','Description',Description)
	if Duplicate:
		return Duplicate

	RecordFound = isRecordFound('MKT_SECTOR','ID','Sector',Sector)
	if RecordFound:
		return RecordFound

	return True,''

def validationSector(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',3)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_SECTOR','ID',ID)
	if Duplicate:
		return Duplicate

	Duplicate = isDuplicate('MKT_SECTOR','Description',Description)
	if Duplicate:
		return Duplicate

	return True,''

def validationCountry(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',2)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_COUNTRY','ID',ID)
	if Duplicate:
		return Duplicate

	Duplicate = isDuplicate('MKT_COUNTRY','Description',Description)
	if Duplicate:
		return Duplicate

	return True,''

def validationBranch(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',6)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',35)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_BRANCH','ID',ID)
	if Duplicate:
		return Duplicate

	Duplicate = isDuplicate('MKT_BRANCH','Description',Description)
	if Duplicate:
		return Duplicate

	return True,''

def validationCategoryType(ID,Description):

	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',3)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',100)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_CATEG_TYPE','ID',ID)
	if Duplicate:
		return Duplicate

	Duplicate = isDuplicate('MKT_CATEG_TYPE','Description',Description)
	if Duplicate:
		return Duplicate

	return True,''

def validationCategory(ID,Description,CategoryType,BalanceType):

	# Check Field Required
	FieldRequired = isFieldRequired(ID,'ID')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(Description,'Description')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(CategoryType,'CategoryType')
	if FieldRequired:
		return FieldRequired

	FieldRequired = isFieldRequired(BalanceType,'BalanceType')
	if FieldRequired:
		return FieldRequired

	# Check Max Min Field
	MaxMinField =	isMaxMinField(ID,'ID',15)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(Description,'Description',100)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(CategoryType,'CategoryType',3)
	if MaxMinField:
		return MaxMinField

	MaxMinField =	isMaxMinField(BalanceType,'BalanceType',2)
	if MaxMinField:
		return MaxMinField

	Duplicate = isDuplicate('MKT_CATEGORY','ID',ID)
	if Duplicate:
		return Duplicate

	Duplicate = isDuplicate('MKT_CATEGORY','Description',Description)
	if Duplicate:
		return Duplicate

	RecordFound = isRecordFound('MKT_CATEG_TYPE','ID','CategoryType',CategoryType)
	if RecordFound:
		return RecordFound

	if not BalanceType in ['Dr','Cr']:
		return False,"%s Balance type must be only Dr,Cr." % BalanceType

	return True,''


