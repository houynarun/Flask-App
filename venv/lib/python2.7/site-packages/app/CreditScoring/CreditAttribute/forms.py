from app.mktcore.wtfimports 						import *
from app.mktcore.imports 							import *
from .models 										import *
from app.CreditScoring.CreditAttributeGroup.models 	import *
from app.CreditScoring.CreditModel.models 			import *
from app.Survey.models 								import MKT_SURVEY_QUESTIONS

def loadQuestionnaire():
	ModelObj 	= MKT_CREDIT_MODEL.query
	return ModelObj

def loadQuestionGroup():
	QuestionGroupObj 	= MKT_CREDIT_ATTRIBUTE_GROUP.query
	return QuestionGroupObj
def loadOrder():
	AttributeObj 		= MKT_CREDIT_ATTRIBUTE.query.order_by(MKT_CREDIT_ATTRIBUTE.Order.desc()).first() # table live 
	AttributeObjInau 	= MKT_CREDIT_ATTRIBUTE_INAU.query.order_by(MKT_CREDIT_ATTRIBUTE_INAU.Order.desc()).first() # table inau

	if AttributeObj:
		Value = int(AttributeObj.Order)
		if AttributeObjInau:
			ValueInau = int(AttributeObjInau.Order)
			if Value>=ValueInau:
				Value = Value # get max order from table live
			else:
				Value = ValueInau # get max order from table inau

		Value = Value +1
	else:
		Value = 1 # default order for first record
	return Value # return integer of order field

@app.route("/Morakot/CreditTotQuestionScore",methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getTotQuestionScore():
	AnswerScore 	= request.args.get("AnswerScore")
	Weight 			= request.args.get("Weight")

	try:

		TotScore = float(AnswerScore)*float(Weight)

	except Exception as e:
		TotScore =	0
	
	return jsonify(TotScore=TotScore)

def loadSurveyQuestion():
	return MKT_SURVEY_QUESTIONS.query

class FRM_CREDIT_ATTRIBUTE(exform):
	Description 		= TextField(requiredlabel("Description","*"),[validators.Required(),validators.Length(max=100)])
	SurveyQuestion 		= QuerySelectField("Survey Question",
											query_factory=loadSurveyQuestion,
											get_label=lambda a: a.ID + " - " + a.Question,
											allow_blank=True,
											blank_text="--None--")
	Group 				= QuerySelectField(requiredlabel("Group","*"),
											query_factory=loadQuestionGroup,
											get_label="Description",
											allow_blank=True,
											blank_text="--None--",
											validators=[validators.Required()])
	Questionnaire   	= QuerySelectField(requiredlabel("Credit Model","*"),
											query_factory=loadQuestionnaire,
											get_label="Description",
											allow_blank=True,
											blank_text="--None--",
											validators=[validators.Required()])
	LogicType   		= SelectField(requiredlabel("Logic Type","*"),
													coerce= str,
													choices=[("1","Lookup Table"),
															 ("2","Lookup Function")],
													validators=[validators.Required()])
	Weight 				= TextField(requiredlabel("Weight","*"),[validators.Required()])
	Logic 				= TextAreaField(requiredlabel("Logic","*"),[validators.Required(),validators.Length(max=100)])
	Active   			= SelectField(requiredlabel("Active","*"),
													coerce= str,
													choices=[("Y","Yes"),
															 ("N","No")],
													validators=[validators.Required()])
	Order 				= TextField(requiredlabel("Order","*"),[validators.Required()],
									default=loadOrder)
	# answer
	# AnswerID 			= TextField("Answer ID",description='1-Answer')
	AnswerDescription 	= TextField(requiredlabel("Answer Description","*"),[validators.Required(),validators.Length(max=100)],
													description='1-Answer')
	AnswerType 			= SelectField(requiredlabel("Answer Type","*"),
													choices=[("F","Fixed Answer"),
															 ("R","Range Answer")],
													description="1-Answer",
													validators= [validators.Required()])
	AnswerScore 		= TextField(requiredlabel("Answer Score","*"),[validators.Required()],	
												   description="1-Answer")
	TotScore 			= TextField(requiredlabel("Total Score","*"),[validators.Required()],
												   description="1-Answer")
	Value 				= TextField("Value",description="1-Answer")

	def validate_Value(form,field):
		Value 		= request.form['Value']
		AnswerType  = request.form['AnswerType']
		try:
			if Value:
				if AnswerType =="R":
					if not "-" in Value:
						raise ValidationError("This is range answer, you should use ' - ' between answer value. Ex: 0-60")
				else:
					if "-" in Value:
						raise ValidationError("This is fix answer, you should not use ' - ' between answer value. Ex: 50 ")
		except Exception as e:
			raise e
	def validate_Order(form,field):
		'''
		this field allow integer only
		'''
		Order = request.form['Order']
		try:

			Order = int(Order)
			
		except Exception as e:
			raise ValidationError("This field is integer type.")
	
	def validate_Weight(form,field):
		Weight = request.form["Weight"]

		try:

			Weight = float(Weight)

		except Exception as e:
			raise ValidationError("This field is number type.")

		if float(Weight)<=0:
			raise ValidationError("This field must have value bigger than zero.")
	
	def validate_AnswerScore(form,field):
		AnswerScore = request.form["AnswerScore"]

		try:

			AnswerScore = float(AnswerScore)

		except Exception as e:
			raise ValidationError("This field is number type.")


	@staticmethod
	def isMultiValue():
		controls_list=["1-Answer"]
		return controls_list

	@staticmethod
	def setDisable():
		ListFields = ['TotScore']
		return ListFields

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#TotScore').val(data.TotScore)"
		varname 		= "AnswerScore:$('#AnswerScore').val(), Weight:$('#Weight').val()"
		fun 			= ["AnswerScore", varname, fielddisplay, "/Morakot/CreditTotQuestionScore", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#TotScore').val(data.TotScore)"
		varname 		= "AnswerScore:$('#AnswerScore').val(), Weight:$('#Weight').val()"
		fun 			= ["Weight", varname, fielddisplay, "/Morakot/CreditTotQuestionScore", "change"]
		hotfield.append(fun)
		return hotfield