from app.mktcore.imports  				 			import *
from .forms  										import *
from app.Customer.models 	 						import *
from app.CreditScoring.CreditClassification.models  import *
from app.CreditScoring.CreditModel.models 			import *
from app.CreditScoring.CreditAttribute.models 		import *
from app.CreditScoring.CreditAttributeGroup.models 	import *
from app.Company.models 							import *
import json,ast
from app.mktcore.customform 						import *
from app.CreditScoring.CreditTool.creditexec 		import CREDIT_SCORE_CALCULATION 


registerCRUD(admin, '/CreditScore', 'CreditScore',FRM_CREDIT_SCORE, [MKT_CREDIT_SCORE])
registerCRUD(admin, '/CreditScoreDetail', 'CreditScoreDetail',FRM_CREDIT_SCORE_DE, [MKT_CREDIT_SCORE_DE])


def getSearchCredit():
	ID 			= 	request.args.get('q').strip() if 'q' in request.args else ""
	CreditObj 		=	db.session.query(MKT_CREDIT_SCORE.ID,
										MKT_CUSTOMER.FirstNameEn,
										MKT_CUSTOMER.LastNameEn).\
														 outerjoin(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_CREDIT_SCORE.CustomerID).\
														 filter(or_(MKT_CREDIT_SCORE.ID.ilike('%s'%ID+'%'),
																	  MKT_CUSTOMER.ID.ilike('%s'%ID+'%'),
																	  MKT_CUSTOMER.FirstNameEn.ilike('%'+'%s'%ID+'%'),
																	  MKT_CUSTOMER.LastNameEn.ilike('%'+'%s'%ID+'%'),
																	  MKT_CUSTOMER.FirstNameKh.ilike('%'+'%s'%ID+'%'),
																	  MKT_CUSTOMER.LastNameKh.ilike('%'+'%s'%ID+'%'))).limit(25)

	ListData =	[]
	if CreditObj.first():
		for Row in CreditObj:
			ID 				= 	Row.ID
			FirstNameEn 	= 	Row.FirstNameEn
			LastNameEn 		= 	Row.LastNameEn
			
			Text = ID +' - ' + LastNameEn +' '+ FirstNameEn
			ListData.append({"id" 	: ID,
						 	"text" : Text})
	return ListData

@app.route("/Morakot/SearchCreditID", methods=['GET'])
@app.route("/Morakot/API/SearchCreditID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def SearchCreditID():
	Data = getSearchCredit() # list [{'id':'','text':''}]
	return jsonify(items = Data)

class FRM_CREDIT_SCORE_TEMPLATE(exform):
	SearchCreditID = HiddenField("Search Score ID Or Customer Name")

class CLS_CREDIT_SCORE_TEMPLATE(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation

	def globalProcess(self):
		OptToolbar 		= request.args.get("OptToolbar",'Y') # Opt for show/hide toolbar search
		IDType 			= request.args.get('IDType')
		ID 				= request.args.get("ID","")
		if IDType =="LoanApplication":
			CreditScoreObj = MKT_CREDIT_SCORE.query.filter(MKT_CREDIT_SCORE.LoanApplication==ID).order_by(desc(MKT_CREDIT_SCORE.Createdon)).first()
			if CreditScoreObj:
				ID = CreditScoreObj.ID
		ScoreObj 		= MKT_CREDIT_SCORE.query.filter(MKT_CREDIT_SCORE.ID==ID).first() # CreditStatus=1 (success)
		Status 			= True
		Msg 			= {}
		QuestionnaireID = ""
		LoanApplication = ""
		if ScoreObj and ID:

			CreditStatus 	= ScoreObj.CreditStatus # 1 success, 2 fail
			QuestionnaireID = ScoreObj.QuestionnaireID
			LoanApplication = ScoreObj.LoanApplication
			if str(CreditStatus)=="1":# success credit scroing

				# check history
				Status = True
				Msg 		 = {"Message":"History record"}

			elif str(CreditStatus) == '2': # failed credit scoring

				Accept 	= request.args.get("Accept","") 
				if Accept=='Y':# when user want to retry checking client credit scoring

					ClsObj 				=	CREDIT_SCORE_CALCULATION()
					Status, Msg 		= 	ClsObj.getScoreCalulator(CreditScoreID=ID)

				else:

					Status 	= False
					Msg 	= {"Message":"Credit Scoring you are checking is failed."}

			else:# new credit scoring

				ClsObj 				=	CREDIT_SCORE_CALCULATION()
				Status, Msg 	= 	ClsObj.getScoreCalulator(CreditScoreID=ID)
		else:
			Status = False
			CreditStatus = ""
			if ID:
				Msg 		 = {"Message":"%s Record not found."%ID}
		
		ResultDict 		= {"Data":{'ID':ID}}
		ResultDict.update(Msg)
		if Status:
			CompanyObj 		= 	MKT_COMPANY.query.first()
			CompanyName 	=	CompanyObj.CompanyName if CompanyObj else ""

			CreditScoreObj 	=	db.session.query(MKT_CREDIT_SCORE.ID,
												 MKT_CREDIT_SCORE.ReportedDate,
												 MKT_CREDIT_SCORE.TotScore,
												 MKT_CREDIT_SCORE.QuestionScore,
												 MKT_CUSTOMER.ID.label("CusID"),
												 MKT_CUSTOMER.FirstNameEn,
												 MKT_CUSTOMER.LastNameEn,
												 MKT_CUSTOMER.Gender,
												 MKT_CREDIT_MODEL.Description.label('QuestionnaireDesc'),
												 MKT_CREDIT_CLASSIFICATION.Recommendation,
												 MKT_CREDIT_CLASSIFICATION.TextColor,
												 MKT_CREDIT_CLASSIFICATION.Description.label("DefineDesc")).\
											join(MKT_CREDIT_SCORE_DE,MKT_CREDIT_SCORE_DE.ID==MKT_CREDIT_SCORE.ID).\
											join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_CREDIT_SCORE.CustomerID).\
											join(MKT_CREDIT_MODEL,MKT_CREDIT_MODEL.ID==MKT_CREDIT_SCORE.QuestionnaireID).\
											join(MKT_CREDIT_CLASSIFICATION,MKT_CREDIT_CLASSIFICATION.ID==MKT_CREDIT_SCORE.CreditDefineID).\
											filter(MKT_CREDIT_SCORE.ID==ID)

			CreditCatObj 	=	db.session.query(MKT_CREDIT_ATTRIBUTE.Group,func.sum(cast(MKT_CREDIT_SCORE_DE.TotScore,Float)).label("SumScore")).\
											join(MKT_CREDIT_SCORE_DE,MKT_CREDIT_ATTRIBUTE.ID==MKT_CREDIT_SCORE_DE.QuestionID).\
											group_by(MKT_CREDIT_ATTRIBUTE.Group).\
											filter(MKT_CREDIT_SCORE_DE.ID==ID)

			# get a hundred percentage(100%) of credit attribute
			SumMaxTotalAmount = 0.0
			AttributeObj = MKT_CREDIT_ATTRIBUTE.query.filter(MKT_CREDIT_ATTRIBUTE.Active=="Y").all()
			if AttributeObj:
				for att in AttributeObj:
					AnswerObj = MKT_CREDIT_ANSWER.query.filter(MKT_CREDIT_ANSWER.ID==att.ID).order_by(desc(cast(MKT_CREDIT_ANSWER.TotScore,Integer))).first()
					if AnswerObj:
						SumMaxTotalAmount += float(AnswerObj.TotScore)		

			Data ={}
			if CreditScoreObj:
				TotScore 		=	0
				QuestionScore 	= 	0
				for Row in CreditScoreObj:
					TotalScorePercentage	= (float(Row.TotScore) * 100)/SumMaxTotalAmount
					TotScore 				= Row.TotScore
					QuestionScore 			= Row.QuestionScore
					Data.update({   "ID" 				: Row.ID,
									"ReportedDate"		: Row.ReportedDate,
									"TotalScorePercentage": "%.2f"%float(TotalScorePercentage),
									"TotScore" 			: "%.2f"%float(TotScore),
									"TotalMaxScore"		: "%.2f"%float(SumMaxTotalAmount),
								  	"CusID" 	 		: Row.CusID,
									"FirstNameEn" 		: Row.FirstNameEn,
									"LastNameEn" 		: Row.LastNameEn,
									"Gender" 			: Row.Gender,
									"QuestionnaireDesc"	: Row.QuestionnaireDesc,
									"Recommendation" 	: Row.Recommendation,
									"TextColor" 		: Row.TextColor,
									"CompanyName" 		: CompanyName,
									"QuestionScore" 	: QuestionScore,
									"DefineDesc" 		: Row.DefineDesc})
				ResultDict.get("Data").update(Data)

				#group
				Group 			=	{}
				Percentage 		= 	0
				for Row in CreditCatObj:
					GroupID 	= Row.Group
					GroupObj 	= MKT_CREDIT_ATTRIBUTE_GROUP.query.get(GroupID)
					GroupDes 	= ""
					if GroupObj:
						GroupDes  =	GroupObj.Description
						TextColor = GroupObj.TextColor
					
					SumScore 	= Row.SumScore
					Percentage  = (float(SumScore) * 100)/ float(TotScore) if SumScore and TotScore else 0
					Group.update({GroupID:{"Description": GroupDes,
										   "Score" 		: SumScore,
										   "TextColor" 	: TextColor,
										   "Percentage" : round(Percentage,2)}})

				ResultDict.get("Data").update({"Group":Group})
		#Report Scoring
		ReportScore = []
		ReportDict  = {}
		Source 		= mktsetting.getAppSetting('MKT_CREDIT_ASS_SOURCE')
		Target 		= mktsetting.getAppSetting('MKT_CREDIT_ASS_TARGET')
		QuestionDes = ""
		AnswerDes 	= ""
		Weight 		= ""
		GroupDes 	= ""
		SurveyQAID  = ""
		Score 	    = 0
		SourceAnswer = ""
		SourceSurvey = ""
		TargetAnswer = ""
		TargetSurvey = ""
		QuestionLogic = ""
		Type 		  = ""
		CreditScoreDeObj = MKT_CREDIT_SCORE_DE.query.filter(MKT_CREDIT_SCORE_DE.ID == ID)
		if CreditScoreDeObj:
			for credit in CreditScoreDeObj:
				CreditQuestionObj = MKT_CREDIT_ATTRIBUTE.query.get(credit.QuestionID)
				if CreditQuestionObj:
					QuestionDes  = CreditQuestionObj.Description
					SurveyQAID 	 = CreditQuestionObj.SurveyQuestion
					Weight 	  	 = CreditQuestionObj.Weight
					QuestionLogic= CreditQuestionObj.Logic
					GroupObj 	  = MKT_CREDIT_ATTRIBUTE_GROUP.query.filter(MKT_CREDIT_ATTRIBUTE_GROUP.ID==CreditQuestionObj.Group).first()
					if GroupObj:
						GroupDes = GroupObj.Description
				CreditAnswerObj   = MKT_CREDIT_ANSWER.query.\
											filter(MKT_CREDIT_ANSWER.AnswerID==credit.AnswerID).\
											filter(MKT_CREDIT_ANSWER.ID==credit.QuestionID).\
											first()
				if CreditAnswerObj:
					AnswerDes = CreditAnswerObj.AnswerDescription
					Score 	  = CreditAnswerObj.TotScore
				if SurveyQAID !="":
					Type  = "Survey"
					for i in range(0, 2):
						if i ==0:
							SurveyObj = MKT_SURVEY.query.filter(MKT_SURVEY.LoanApplication==LoanApplication,MKT_SURVEY.Questionnaire==Source).order_by(desc(MKT_SURVEY.Createdon)).first()
							if SurveyObj:
								SourceSurvey = SurveyObj.ID
						else:
							SurveyObj = MKT_SURVEY.query.filter(MKT_SURVEY.LoanApplication==LoanApplication,MKT_SURVEY.Questionnaire==Target).order_by(desc(MKT_SURVEY.Createdon)).first()
							if SurveyObj:
								TargetSurvey = SurveyObj.ID
						if SurveyObj:
							SurveyQADetail = MKT_SURVEY_QUESTIONNAIRE_DE.query.filter(MKT_SURVEY_QUESTIONNAIRE_DE.ID==SurveyObj.Questionnaire,MKT_SURVEY_QUESTIONNAIRE_DE.QuestionID==SurveyQAID).first()
							if SurveyQADetail:
								SurveyDetailObj = MKT_SURVEY_DE.query.filter(MKT_SURVEY_DE.Question==SurveyQADetail.QuestionID,MKT_SURVEY_DE.ID == SurveyObj.ID).first()
								if SurveyDetailObj:
									if i==0:
										if SurveyDetailObj.AnswerType=="3":
											SourceAnswer = SurveyDetailObj.Other
										else:
											SourceAnswer = SurveyDetailObj.Answer
											AnswerObj = MKT_SURVEY_ANSWERS.query.filter(MKT_SURVEY_ANSWERS.ID ==SurveyDetailObj.Question,MKT_SURVEY_ANSWERS.AnswerID==SurveyDetailObj.Answer).first()
											if AnswerObj:
												SourceAnswer = AnswerObj.Answer
									else:
										if SurveyDetailObj.AnswerType=="3":
											TargetAnswer = SurveyDetailObj.Other
										else:
											TargetAnswer = SurveyDetailObj.Answer
											AnswerObj = MKT_SURVEY_ANSWERS.query.filter(MKT_SURVEY_ANSWERS.ID ==SurveyDetailObj.Question,MKT_SURVEY_ANSWERS.AnswerID==SurveyDetailObj.Answer).first()
											if AnswerObj:
												TargetAnswer = AnswerObj.Answer
								else:
									SourceAnswer = "N/A"
									TargetAnswer = "N/A"
									SourceSurvey = ""
									TargetSurvey = ""
							else:
								SourceAnswer = "N/A"
								TargetAnswer = "N/A"
								SourceSurvey = ""
								TargetSurvey = ""
						else:
							SourceAnswer = "N/A"
							TargetAnswer = "N/A"
							SourceSurvey = ""
							TargetSurvey = ""
				else:
					Type = "Credit Score"
					CreditAnswerObj   = MKT_CREDIT_ANSWER.query.\
											filter(MKT_CREDIT_ANSWER.AnswerID==credit.AnswerID).\
											filter(MKT_CREDIT_ANSWER.ID==credit.QuestionID).\
											first()
					if CreditAnswerObj:
						if CreditAnswerObj.AnswerType =="F":
							SourceAnswer = CreditAnswerObj.AnswerDescription
						else:
							SourceAnswer = CreditAnswerObj.Value
					TargetAnswer = credit.SystemAnswer
					# TargetAnswer  = "System"
					if CreditQuestionObj:
						SourceSurvey = CreditQuestionObj.ID
						TargetSurvey = CreditQuestionObj.ID
				if SourceAnswer =="":
					SourceAnswer = "N/A"
				if TargetAnswer =="":
					TargetAnswer = "N/A"
				try:
					TargetAnswer = int(TargetAnswer)
					TargetAnswer = "%.2f"%int(TargetAnswer)
				except Exception as e:
					TargetAnswer = str(TargetAnswer)
				ReportScore.append({
						"credit_score_id" 	   : credit.ID,
						"question_description" : QuestionDes,
						"question_id"		   : credit.QuestionID,
						"answer_id" 		   : credit.AnswerID,
						"answer_description"   : AnswerDes,
						"total_score"		   : credit.TotScore,
						"survey_color"		   : "",
						"credit_color"		   : "",
						"weight"			   : Weight,
						"score"				   : Score,
						"group_description"	   : GroupDes,
						"survey_question_id"   : SurveyQAID,
						"answer_1" 			   : SourceAnswer,
						"answer_2"			   : TargetAnswer,
						"source_survey"		   : SourceSurvey,
						"target_survey"		   : TargetSurvey,
						"type" 				   : Type
					})
			ReportScore.sort()
			ReportDict.update({"report":ReportScore})

		CreditDefineObj = MKT_CREDIT_CLASSIFICATION.query.filter(MKT_CREDIT_CLASSIFICATION.Questionnaire == QuestionnaireID).order_by(asc(cast(MKT_CREDIT_CLASSIFICATION.Min,Float)))
		CreditDefine = []
		CreditDefineDict = {}
		if CreditDefineObj:
			for credit in CreditDefineObj:
				CreditDefine.append({
						"range" 	  : credit.Min+" - "+credit.Max,
						"description" : credit.Description,
						"color" 	  : ""
					})
			CreditDefineDict.update({"credit_define":CreditDefine})

		# Credit Score API
		BodyList = []
		if checkContentType() == 'json' or 'API' in request.url:
			BodyDict 		= {}
			MostData 		= True
			self.customButton =	{
								'title':'Show',
								'type':'Hidden',
								'method':'get',
								'url':'/CreditScoreTemplate/?ID=SearchCreditID',
								'param':['SearchCreditID'],
								'icon':'',
								'type_url':'Custom',
								'color':'#1b80c2'
								}
			# Composition
			Compositions 		  = []
			Result 				  = ResultDict.get("Data")
			TotalScorePercentage  = 0.00
			TotalScoreDescription = ""
			Status 				  = ""
			Classifications 	  = []
			InformationSummaryDic = {}
			InformationSummary    = []
			MostData 			  = True
			if Result:
				Group = Result.get("Group",{})
				for Key,Value in Group.items():
					Compositions.append({
							"label"	   : Value.get("Description","")+"("+str(Value.get("Percentage","0.00"))+"%)",
						    "bar_color": Value.get('TextColor')
						})
				TotalScorePercentage  = Result.get("TotalScorePercentage","0.00")
				TotalScoreDescription = Result.get("DefineDesc","")
				Status 				  = Result.get("Recommendation","")

				# Information Summary
				
				InformationSummary 	  = [
											{'label':"Report ID",			'value':Result.get("ID",""),									 'urls':[]},
											{'label':"Reported Date",		'value':Result.get("ReportedDate",""),							 'urls':[]},
											{'label':"Credit Type",			'value':Result.get("QuestionnaireDesc",""),						 'urls':[]},
											{'label':"Customer Name",		'value':Result.get("FirstNameEn","")+Result.get("LastNameEn",""),'urls':[]},
											{'label':"Gender",				'value':Result.get('Gender',""),								 'urls':[]},
											{'label':"Total Score",			'value':Result.get('TotScore',""),								 'urls':[]},
											{'label':"Max Score",			'value':Result.get('TotalMaxScore',""),							 'urls':[]},
											{'label':"Recommendation",		'value':Status,													 'urls':[]},
										]
			InformationSummaryDic.update({
									'icon':'','name':'Information Summary','title': 'Information Summary','type':'List','data':InformationSummary,'most_data':MostData
								})
			BodyList.append(InformationSummaryDic)
			#Classification
			if CreditDefineDict:
				for credit in CreditDefineDict.get('credit_define'):
					Classifications.append({
					        "key": {
					          "label"	: "# "+credit.get('range',""),
					          "size"	: "",
					          "color"	: ""
					        },
					        "value": {
					          "label"	: credit.get('description',""),
					          "size"	: "",
					          "color"	: ""
					        }
						})
			Link = {}
			if IDType =="LoanApplication":
				Link = {
					    	"url"		: "/CreditScoreTemplate/?ID="+ID,
					    	"type_url"	: "Custom"
					    }
			BodyList.append({
					"compositions": Compositions,
					"score": {
					    "title": {
						    "label"	: "Score (%)",
						    "size"	: "h3",
						    "color"	: ""
					    },
					    "value"		: {
						    "label"	: TotalScorePercentage,
						    "size"	: "h1",
						    "color"	: ""
					    },
					    "status": {
					        "label"	: TotalScoreDescription,
					        "size"	: "h3",
					        "color"	: "#f2cf1f"
					    }
					  },
					"chart": {
					    "speedometer": ["#ff2900", "#f49c43", "#f2cf1f", "#14eb6e"],
					    "value"		 : TotalScorePercentage,
					    "status"	 : {
					      "label": Status,
					      "size" : "h3",
					      "color": "#f2cf1f"
					    },
					    "link" 		 :Link
					},
					"classification": {
					    "title": {
					      "label": "Here is score classification (%)",
					      "size": "",
					      "color": ""
					    },
					    "contents": Classifications
					  },
					"title": "Credit score composition",
					"type": "Chart"
				})	

			# Report Answer and Question
			CreditReportDic = {}
			CreditReport    = []
			Column  		= []
			ImportantField  = []
			if ReportDict:
				Increment = 1
				for credit in ReportDict.get('report'):
					ID 				= {'key':'#',				'value':Increment}
					Attribute   	= {'key':'Attribute', 		'value':credit.get('question_description')}
					AttributeType   = {'key':'Attribute Type', 	'value':credit.get('type')}
					Group   		= {'key':'Group', 			'value':credit.get('group_description')}
					Answer1   		= {'key':'Answer 1', 		'value':credit.get('answer_1')}
					Answer2   		= {'key':'Answer 2', 		'value':credit.get('answer_2')}
					Weight   		= {'key':'Weight', 			'value':credit.get('weight')}
					Score   		= {'key':'Score', 			'value':credit.get('score')}
					TotalScore   	= {'key':'Total Score', 	'value':credit.get('total_score')}
					Column 			= [ID,Attribute,AttributeType,Group,Answer1,Answer2,Weight,Score,TotalScore]
					ImportantField  = [ID,Attribute,Group,TotalScore]
					Url 			= 'CreditAttribute'
					if credit.get('type') == "Survey":
						Url 		= 'Survey'
					CreditReport.append({
							'columns': Column,
							'urls':[
									{'url':Url+"/?ID="+credit.get('source_survey'),'type_url':'Form','icon':''},
									{'url':Url+"/?ID="+credit.get('target_survey'),'type_url':'Form','icon':''}
								],
							'important':ImportantField
						})
					Increment+=1

			CreditReportDic.update({
									'icon':'','name':'Report','title': 'Credit Score Report','type':'Table','data':CreditReport,'most_data':MostData,'expand':True
								})
			BodyList.append(CreditReportDic)
		
			BodyDict.update({
				'header':[],'data':BodyList
				})
			self.body 		= BodyDict
			self.recordID 	= ""
			self.header 	= 'Credit Score Result'
			setattr(FRM_CREDIT_SCORE_TEMPLATE,'SearchCreditID',HiddenField("Search Score ID Or Customer Name"))
			if ID!="":
				self.customType = 'Custom'
			if self.customType=="Custom":
				delattr(FRM_CREDIT_SCORE_TEMPLATE,'SearchCreditID')

		self.kwargs 	=	{
					'ResultDict'	: ResultDict,
					'Status' 		: Status,
					'OptToolbar'	: OptToolbar,
					'Report' 		: ReportDict,
					'CreditDefine'  : CreditDefineDict
				}
		self.form 		= FRM_CREDIT_SCORE_TEMPLATE
		return True

registerCRUD(admin, '/CreditScoreTemplate', 'CreditScoreTemplate',FRM_CREDIT_SCORE_TEMPLATE, [MKT_CREDIT_SCORE],template="creditscoring/creditscore.html",form_type='MainCustom',custom_form_data=CLS_CREDIT_SCORE_TEMPLATE)
