from app.mktcore.wtfimports 						import *
from app.mktcore.session 							import *
from .models 										import *
from app.Customer.models 							import *
from app.LoanApplication.models 					import *
from app.CreditScoring.CreditModel.models 			import *
from app.Survey.models 								import *
import datetime	

def loadCustomer():
	CustomerObj 		=	MKT_CUSTOMER.query
	return CustomerObj

def loadQuestionnaire():
	QuestionnaireObj 		=	MKT_CREDIT_MODEL.query
	return QuestionnaireObj
def loadCrrentDate():
	date = datetime.datetime.now()
	return date.date()

#After Save record will be look up value from table store
def getRecord():
	try:
		result = MKT_CREDIT_SCORE.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_CREDIT_SCORE_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict = row.__dict__
			return Dict
		else:
			return Dict
	except:
		raise

def loadLoanApplication():  #define function
	if request.method == 'POST':
		CustomerID = request.form["CustomerID"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_LOAN_APPLICATION_INAU.query.filter_by(LNCustomerID=Record['CustomerID'])  
		else:
			return MKT_LOAN_APPLICATION_INAU.query.filter_by(LNCustomerID='')

	return MKT_LOAN_APPLICATION_INAU.query.filter_by(LNCustomerID=CustomerID) # tablename.query


class FRM_CREDIT_SCORE(exform):
	CustomerID 			=	QuerySelectField(requiredlabel("Customer","*"),
											query_factory 	= loadCustomer,
											get_label 		= lambda a: a.ID +" -"+ a.LastNameEn+" "+ a.FirstNameEn,
											allow_blank 	= True,
											validators 		= [validators.Required()])
	
	QuestionnaireID 	=	QuerySelectField(requiredlabel("Questionnaire","*"),
											query_factory	= loadQuestionnaire,
											get_label		= lambda a: a.ID +" -"+a.Description,
											allow_blank 	= True,
											validators 		= [validators.Required()])
	LoanApplication 	=	QuerySelectField("Loan Application",
											query_factory	= loadLoanApplication,
											get_label		= lambda a: a.ID,
											allow_blank 	= True,
											blank_text		='--None--')
	CreditDefineID		=	TextField("Credit Define",description="1-Details")
	TotScore			= 	TextField("Total Score",description="1-Details")
	ReportedDate 		=	DateField("Reported Date",
									 default=loadCrrentDate,
									 description="1-Details")
	CreditStatus 		=	TextField("Credit Status") # 1 =Success, 2 = Fail,3 Queue
	QuestionScore 		=	TextField("Question Score",
									 default=3,
									 description="1-Details")
	@staticmethod
	def setDisable():
		ListFields = ['CreditDefineID','TotScore','ReportedDate','CreditStatus',
					  'QuestionScore']
		return ListFields

	@staticmethod
	def redirectAfterInsert():
		ID 		= 	request.form['ID']
		OptToolbar= "Y" # Y: show toolbar, N: hide toolbar
		if checkContentType() == 'json' or 'API' in request.url:
			return ["/Morakot/API/CreditScoreTemplate?ID=%s"%ID , 'Custom']
		return ["/Morakot/CreditScoreTemplate?ID=%s&OptToolbar=%s"%(ID,OptToolbar) , 'Custom']

	@staticmethod
	def hotSelectField():
		
		hotfield 	 	= []
		fielddisplay 	= "LoanApplication"
		varname  		= "CustomerID:$('#CustomerID').val()"
		fun 			= ["CustomerID", varname, fielddisplay, "/Morakot/LoanIDByCustomer", "change"]
		
		hotfield.append(fun)
		return hotfield

@app.route("/Morakot/LoanIDByCustomer")
@app.route("/Morakot/API/LoanIDByCustomer")
@checkLogOutSession
@checkLogOutTime
def LoanIDByCustomer():
	CustomerID = request.args.get("CustomerID","")
	dic = {}
	if CustomerID:
		LoanObj =  MKT_LOAN_APPLICATION_INAU.query.filter(MKT_LOAN_APPLICATION_INAU.LNCustomerID==CustomerID)
		if LoanObj:
			for row in LoanObj:
				dic[row.ID] = row.ID 

	return jsonify(results=dic)

class FRM_CREDIT_SCORE_DE(exform):

	QuestionID 			=	TextField("Question ID")
	
	QuestionnaireID 	=	QuerySelectField(requiredlabel("Questionnaire","*"),
											query_factory	= loadQuestionnaire,
											get_label		= lambda a: a.ID +" -"+a.Description,
											allow_blank 	= True,
											validators 		= [validators.Required()])

	AnwserID			=	TextField("AnwserID",description="1-Details")
	TotScore			= 	TextField("Total Score",description="1-Details")
