from app.Customer.models 			import *
from app.Survey.models 				import *
from app.LoanContract.models 		import *
from app.PD.models 					import *
from app.CBC.models 				import *
import app.tools.mktdate 			as mktdate
'''
Rule of creating function

def getExampe(CustomerID):
	doc: 
	- this function could use for many question depend on func's ability
	- this function will be registerd in creditregister.py
	- this function call one time only even it is used for many questions
	- this function must return value and follow returning convention

	calling function on interface:
		- getExample*ReturnVar
`	parameter:
		CustomerID: function must have one parmeter CustomerID
	
	return:
		-type: dict
		-return value: {"ReturnVar":Value}
			Value: is the value of answer 
			ReturnVar: this must be the same name both local function and config on interface
		ex.

		
'''
class QUESTION(object):
	"""docstring for ClassName"""
	def getSalary(CustomerID="",**kwargs):		
		return {"Salary":100,
				"Age":"30",
				"Gender":"M"}

	def getFirstNameEN(CustomerID=""):
		CusObj 		= 	MKT_CUSTOMER.query.get(CustomerID)
		if CusObj:
			return {"FirstNameEn":CusObj.FirstNameEn}
		else:
			return {"FirstNameEn":""}

	def getMatchAssessment(CustomerID="",**kwargs):
		# It is questionnaire to compare
		CusID 			= kwargs.get("CusID",'')
		LoanApplication = kwargs.get("LoanApplication",'')
		QuestionObj		= kwargs.get("QuestionObj",'')
		Source 			= kwargs.get("Source",'')
		Target 			= kwargs.get("Target",'')
		Answer 		 = "N"
		SourceAnswer = ""
		TargetAnswer = ""
		AnswerDict   = {}
		for question in QuestionObj:
			for i in range(0, 2):
				if i ==0:
					SurveyObj = MKT_SURVEY.query.filter(MKT_SURVEY.Customer==CusID,MKT_SURVEY.LoanApplication==LoanApplication,MKT_SURVEY.Questionnaire==Source).first()
				else:
					SurveyObj = MKT_SURVEY.query.filter(MKT_SURVEY.Customer==CusID,MKT_SURVEY.LoanApplication==LoanApplication,MKT_SURVEY.Questionnaire==Target).first()
				if SurveyObj:
					SurveyQADetail = MKT_SURVEY_QUESTIONNAIRE_DE.query.filter(MKT_SURVEY_QUESTIONNAIRE_DE.ID==SurveyObj.Questionnaire,MKT_SURVEY_QUESTIONNAIRE_DE.QuestionID==question.SurveyQuestion).first()
					if SurveyQADetail:
						SurveyDetailObj = MKT_SURVEY_DE.query.filter(MKT_SURVEY_DE.Question==SurveyQADetail.QuestionID,MKT_SURVEY_DE.ID == SurveyObj.ID).first()
						if SurveyDetailObj:
							if i==0:
								if SurveyDetailObj.AnswerType=="3":
									SourceAnswer = SurveyDetailObj.Other
								else:
									SourceAnswer = SurveyDetailObj.Answer
							else:
								if SurveyDetailObj.AnswerType=="3":
									TargetAnswer = SurveyDetailObj.Other
								else:
									TargetAnswer = SurveyDetailObj.Answer
			if QUESTION.matchTwoString(str(SourceAnswer),str(TargetAnswer)) and str(SourceAnswer)!="" and str(TargetAnswer)!="": 
				Answer = "Y"
				AnswerDict.update({question.SurveyQuestion:Answer})
			else:
				Answer = "N"
				AnswerDict.update({question.SurveyQuestion:Answer})
		# print "AnswerDict",AnswerDict
		return AnswerDict

	@staticmethod
	def matchTwoString(Source = "",Target=""):
		match = False
		if Source and Target:
			Source = "".join(Source.split()).upper()
			Target = "".join(Target.split()).upper()
		if Source == Target:
			match = True
		return match

	#main function for questions
	def getInfo(self,CustomerID="",**kwargs):
		Result 		= {}
		CustomerID 	= kwargs.get("CusID")
		CustomerObj = MKT_CUSTOMER.query.get(CustomerID)

		if CustomerObj:
			Result.update(self.getCurrentAge(CustomerID=CustomerID,**kwargs))
			Result.update(self.getLoanTerm(CustomerID=CustomerID,**kwargs))
			Result.update(self.getDayLate(CustomerID=CustomerID,**kwargs))
			Result.update(self.getNumCheckCBC(CustomerID=CustomerID,**kwargs))

		print "********** "
		print Result

		return Result
			

	def getCurrentAge(self,CustomerID="",**kwargs):
		'''
			return age of customer
		'''
		Result 		= {}
		CustomerID 	= kwargs.get("CusID")
		CustomerObj = MKT_CUSTOMER.query.get(CustomerID)
		Age = 0
		if CustomerObj:
			Age = mktdate.getAge(DOB=CustomerObj.DateOfBirth)

		Result = {"Age": Age}

		return Result

	def getLoanTerm(self,CustomerID="",**kwargs):
		'''
			return biggest loan term of customer in month measurable
		'''
		Result 		= {}
		CustomerID 	= kwargs.get("CusID")
		CustomerObj = MKT_CUSTOMER.query.get(CustomerID)
		LoanTerm = 0
		if CustomerObj:
			ContractObj = MKT_LOAN_CONTRACT.query.\
									filter(MKT_LOAN_CONTRACT.ContractCustomerID==CustomerID).\
									order_by(MKT_LOAN_CONTRACT.Term.desc()).\
									first()
			if ContractObj:
				LoanTerm = ContractObj.Term

		Result = {"LoanTerm": int(LoanTerm)}
		return Result

	def getDayLate(self,CustomerID="",**kwargs):
		'''
			return biggest num day late of customer ever had
		'''
		Result 		= {}
		CustomerID 	= kwargs.get("CusID")
		CustomerObj = MKT_CUSTOMER.query.get(CustomerID)
		NumDayLate = 0
		if CustomerObj:
			PDObj = db.session.query(MKT_PD_DATE.NumDayDue).\
								join(MKT_PAST_DUE,MKT_PAST_DUE.ID==MKT_PD_DATE.ID).\
								filter(MKT_PAST_DUE.Customer==CustomerID).\
								order_by(MKT_PD_DATE.NumDayDue.desc()).\
								first()
			print "-------> ", PDObj

			if PDObj:
				NumDayLate = PDObj.NumDayDue.strip()

		Result = {"NumDayLate": int(NumDayLate)}
		return Result

	def getNumCheckCBC(self,CustomerID="",**kwargs):
		'''
			return biggest num day late of customer ever had
		'''
		Result 		= {}
		CustomerID 	= kwargs.get("CusID")
		CustomerObj = MKT_CUSTOMER.query.get(CustomerID)
		NumCBCQuery = 0
		if CustomerObj:
			CBCObj = MKT_CBC_DE.query.\
								filter(MKT_CBC_DE.Customer==CustomerID).\
								filter(MKT_CBC_DE.EnquiryID != None).all()
			print "-------------------> ",CBCObj
			if CBCObj:
				NumCBCQuery = len(CBCObj)

		Result = {"NumCBCQuery": NumCBCQuery}
		return Result		

	#end