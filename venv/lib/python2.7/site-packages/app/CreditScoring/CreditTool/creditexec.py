from app.mktcore.imports 							import *
from flask 											import Markup
from app.CreditScoring.CreditAttribute.models		import *
from app.CreditScoring.CreditScore.models 			import *
from app.CreditScoring.CreditClassification.models 	import *
from creditregister 								import *
import app.tools.mktaudit 							as 		mktaudit	
from 	app.urlregister 							import * # import models of table

class CREDIT_SCORE_CALCULATION():

	def getFunctionResult(self,CustomerID="",QuestionnaireID="",LoanApplication=""):
		"""
		def:
			this function use to execute function that had configur in question to be get result from func.
			the function will be breaked if meet error.
		param:
			CustomerID: The ID of customer
			QuestionnaireID: ID of Questionnaire
		return:
			rtype:turple
				-first val: is status True/False
				-second val: is dict
					dict= { "Data":{"FunctionName":{"Param1":Value1,
													"Param2":Value1
												  }
									},
							"Error":"Message error"
						}
					Note**: Param1 must have Logic field (FunctionName*Parame1)
							Value1 must have in Answer's Value 


		"""
		QuestionObj 	= db.session.query(func.split_part(MKT_CREDIT_ATTRIBUTE.Logic,"*",1).label("ClassName"),
										   func.split_part(MKT_CREDIT_ATTRIBUTE.Logic,"*",2).label("Function"),
										   MKT_CREDIT_ATTRIBUTE.SurveyQuestion).\
									 group_by(func.split_part(MKT_CREDIT_ATTRIBUTE.Logic,"*",1).label("ClassName"),
									 		  func.split_part(MKT_CREDIT_ATTRIBUTE.Logic,"*",2).label("Function"),
									 		  MKT_CREDIT_ATTRIBUTE.SurveyQuestion
									 		  ).\
									 filter(MKT_CREDIT_ATTRIBUTE.Active=='Y',
										   MKT_CREDIT_ATTRIBUTE.Questionnaire==QuestionnaireID,
										   MKT_CREDIT_ATTRIBUTE.LogicType=='2')


		if QuestionObj.first():
			ResultDict 		= {}
			FuncDict 		= {}
			try:
				FunctionName = "None" # to prevent local variable is undifined
				Source = mktsetting.getAppSetting('MKT_CREDIT_ASS_SOURCE')
				Target = mktsetting.getAppSetting('MKT_CREDIT_ASS_TARGET')
				for Row in QuestionObj:
					FunctionName 	= Row.Function
					ClassName 		= eval("%s()"%Row.ClassName)
					if hasattr(ClassName,str(FunctionName)):
						Func 			=	getattr(ClassName,FunctionName)
						Dict = Func(CusID=CustomerID,LoanApplication=LoanApplication,QuestionObj=QuestionObj,Source = Source ,Target = Target)
						FuncDict.update({FunctionName:Dict})
						ResultDict.update({Row.ClassName:FuncDict})
					else:
						Error 	=	"%s not attribute %s"%(Row.ClassName,FunctionName)
						return False,{"Error":Error}
				# print "ResultDict:",ResultDict
				return True,ResultDict
			except NameError as e:# catch NameError only
				ResultDict.update({"Error":e[0]})# error
				return False,ResultDict # break loop
		else:
			return False,{"Error":"There aren't question."}
						 
	def getLookupTable(self,QuestionID="",CustomerID="",Logic=""):
		'''
		- this function use for lookup data from table.
		- We can lookup data from table that store customer id only for now.(this look up will enhance to be join or..)
		- we could look up one to one raltion table only. For one to many relation table doesn't work. 
		param:
			QuestionID : The ID of Question
			Logic: the defined syntax for look up data from table
		return:
			rtype:turple
				-first val: is status True/False
				-second val: is dict
					dict= { "QuestionID":"Value",
							"Error":"Message error"
						}
		'''
		DictResult 	=	{}
		if Logic:
			Logic 	=	Logic.split("*")# [0]= TableName,[1]= Lookup field,[2]= filter field
			try:
				TableName 	= Logic[0]
				LookupField = Logic[1]
				FilterField = Logic[2]

				Obj 		=	db.session.query(eval("%s.%s"%(TableName,LookupField))).\
											filter(eval('%s.%s'%(TableName,FilterField))==CustomerID).first()
				if Obj:
					Value = getattr(Obj,LookupField) # get value from obj
				else:
					Value = ''

				DictResult.update({QuestionID:Value})	
				return True,DictResult

			except Exception as e:
				raise
		else:
			DictResult.update({"Error":"Question ID %s dont' have logic yet."%QuestionID})
			return False,DictResult



	def getScoreCalulator(self,CreditScoreID=''):
		'''
		return:
			rtype:tuple
			rvalue: True/Fale , {"Error":"Message error"}

		'''
		try:
			CreditScoreObj 	= 	db.session.query(MKT_CREDIT_SCORE).\
												filter(MKT_CREDIT_SCORE.ID==CreditScoreID).first()
			CreditStatus = True
			MsgErr 		=	""
			if CreditScoreObj:
				CreditScoreID 	=	CreditScoreObj.ID
				QuestionnaireID =	CreditScoreObj.QuestionnaireID
				CustomerID 		= 	CreditScoreObj.CustomerID
				LoanApplication =   CreditScoreObj.LoanApplication

				QuestionObj 	=	db.session.query(MKT_CREDIT_ATTRIBUTE).\
											filter(MKT_CREDIT_ATTRIBUTE.Active=='Y',
												  MKT_CREDIT_ATTRIBUTE.Questionnaire==QuestionnaireID).\
											order_by(MKT_CREDIT_ATTRIBUTE.ID)

				if QuestionObj.first():

					FuncResult 		= 	self.getFunctionResult(CustomerID=CustomerID,QuestionnaireID=QuestionnaireID,LoanApplication=LoanApplication)
					Audit 			=	mktaudit.getAuditrail() # get audit
					TotScore 		= 	0
					SumAnswer 		= 	0
					for Row in QuestionObj:
						DictCreditScoreDe 	=	{}
						QuestionID 	=	Row.ID
						AnswerObj 	=	db.session.query(MKT_CREDIT_ANSWER).\
													filter(MKT_CREDIT_ANSWER.ID==QuestionID)

						MaxAnserObj = 	AnswerObj.order_by(MKT_CREDIT_ANSWER.TotScore.desc()).first()
						SumAnswer 	= 	float(MaxAnserObj.TotScore) + SumAnswer

						LogicType 	=	Row.LogicType # logictype has two different logic. 1 = look up table, 2= look up function
						Logic 		=	Row.Logic

						if int(LogicType)==1: #lookup value from table
							CreditStatus,LookupResult  = self.getLookupTable(QuestionID=QuestionID,CustomerID=CustomerID,Logic=Logic)
							Value 					   = LookupResult.get(QuestionID) # get value from dict
							CreditStatus,AnswerResult  = self.getScoreByFunc(QuestionID,AnswerObj,Data=Value,LogicType=LogicType)
						else: #lookup value from function
							ListLogic 				= self.getLogic(Logic)
							CreditStatus,AnswerResult = self.getScoreByFunc(QuestionID,AnswerObj,Data=FuncResult[1],ListLogic=ListLogic,LogicType=LogicType)
							# print 'CreditStatus',CreditStatus,AnswerResult	

						if not CreditStatus:
							return CreditStatus,{"Message":AnswerResult.get("Error")}
						TotScore 	=	TotScore + float(AnswerResult.get("TotScore"))
						AnswerResult.update({"ID" 		  		: CreditScoreID,
											 "QuestionID" 		: QuestionID,
											 "QuestionnaireID"	: QuestionnaireID})
						#insert table MKT_CREDIT_SCORE_DE
						self.insertCreditScoreDe(Audit=Audit,**AnswerResult)
					#update table MKT_CREDIT_SCORE
					UpdateResult = self.updateCreditScore(CreditScoreObj,TotScore,SumAnswer)
					

					if not UpdateResult[0]: # check Total Score is not in range of credit score define
						CreditStatus 	=	UpdateResult[0]
						return CreditStatus ,{"Message": UpdateResult[1]}

					db.session.commit()
					return True,{"Message":"Client Credit Score is succesfully check."}

				else: # is False
					CreditStatus 	=	False
					return CreditStatus,{"Message":"There aren't question."}
			else:
				CreditStatus 	=	False
				return CreditStatus,{"Message":"Credit score rating didn't define."}

		except Exception as e:
			raise
			db.session.rollback()
			CreditStatus 	=	False
			return CreditStatus,{"Message":"%s"%(e[0])}

		finally:
			db.session.rollback()
			# update credit score status
			CreditStatus = 1 if CreditStatus else 2 # 1 credit score is succes ,2 credit score is fail
			self.updateCreditStatus(CreditScoreObj,CreditStatus) # this function has committed
			# print "try finnaly"
			db.session.close()

	def getLogic(self,Logic=""):
		'''
		param:
			Logic: where we call function.ex. getCustomerFirstName*FirstName
		return:
			rtype: list(two elements)
			rvalue: list[0]=functionanme,list[1]=variable
		'''
		ListLogic = Logic.split("*")

		return ListLogic #[FunctionName,Variable]

	def getScoreByFunc(self,QuestionID,AnswerObj,Data="",ListLogic=[],LogicType=""):
		'''
			- get score of answer

			param:
				AnswerObj: obj of MKT_CREDIT_ANSWER
				Data 	: data is value of answer of question 
				LisLogic: ['FunctionName','Variable']
			return:
				rtype: tuple
				rvalue: True/Fail,DictAnswer
					-True: the answer is valid option
					-False: the answer is invalid option
					-DictAnswer:
						- DictAnswer could null:
							{"AnswerID":'',
							"Totscore":''}
						- DictAnswer has value:
								{"AnswerID":'2',
								"Totscore":'10'}
		'''
		Result = {"AnswerID":"",
				  "TotScore":0}
		# print "Data",Data,ListLogic
		try:
			QuestionDesc = ''
			QuestionObj = MKT_CREDIT_ATTRIBUTE.query.get(QuestionID)
			if QuestionObj:
				QuestionDesc = "%s - %s"%(QuestionID,QuestionObj.Description)
				ListValueAnswer = ",".join([str(row.Value) for row in AnswerObj])
			for Row in AnswerObj:
				if LogicType=='1': # result from lookup table
					Value 	= str(Data)
				else: # result from lookup function
					# print "Data:",Data
					LogicData 	= Data.get(ListLogic[0],{})
					# print "LogicData:",LogicData
					Value 		= str(LogicData.get(ListLogic[1],{}).get(ListLogic[2]))
					# print "Value",Value
				if Value and Value != 'None':
					CompareValue = Row.Value
					try:
						Value 		 = float(Value)
						CompareValue = float(CompareValue)
					except Exception as e:
						Value 		 = str(Value)
						CompareValue = str(CompareValue)
					if Row.AnswerType=='F':
						# fixed answer
						if CompareValue == Value:
							Result.update({"AnswerID" : Row.AnswerID,
										   "TotScore" : Row.TotScore,
										   "SystemAnswer":Value})
							return True,Result
						# else:
						# 	print 'fix value not matching'
						# 	Result.update({"AnswerID" : Row.AnswerID,
						# 				   "TotScore" : 0,
						# 				   "SystemAnswer":"N/A"})
						# 	return True,Result
					else:
						# range answer
						RangeValue 	= Row.Value
						RangeValue 	= RangeValue.split('-')
						if  float(RangeValue[0]) <= float(Value) <= float(RangeValue[1]):
							Result.update({"AnswerID" : Row.AnswerID,
										   "TotScore" : Row.TotScore,
										   "SystemAnswer":Value})
							return True,Result
				else:
					Result.update({"AnswerID" : Row.AnswerID,
									"TotScore" : 0,
									"SystemAnswer":"N/A"})
					return True,Result

			Msg =	"""The Attribute %s : The answer %s does not exist in defined answers (%s).</br>
					Please contact System Administator to update answers of credit Attribute."""%(QuestionDesc, Value, ListValueAnswer)
			Result.update({"Error":Markup(Msg)})
			return False,Result # Fale: answer is invalid choice

		except Exception as e:
			# raise
			Result.update({"Error":e[0]}) 
			return False,Result

	def updateCreditScore(self,CreditScoreObj,TotScore,SumAnswer):
		"""
		- update MKT_CREDIT_ANSWER, 
		- this function just update but didn't commit to db
		- updated value:
			-TotScore
		"""
		# get a hundred percentage(100%) of credit attribute
		SumMaxTotalAmount = 0.0
		AttributeObj = MKT_CREDIT_ATTRIBUTE.query.filter(MKT_CREDIT_ATTRIBUTE.Active=="Y").all()
		if AttributeObj:
			for att in AttributeObj:
				AnswerObjQurey = MKT_CREDIT_ANSWER.query.filter(MKT_CREDIT_ANSWER.ID==att.ID).order_by(desc(cast(MKT_CREDIT_ANSWER.TotScore,Integer))).first()
				if AnswerObjQurey:
					SumMaxTotalAmount += float(AnswerObjQurey.TotScore)
		TotalScore = (float(TotScore) * 100)/SumMaxTotalAmount
		CreditDefineObj 		= 	MKT_CREDIT_CLASSIFICATION.query.filter(cast(MKT_CREDIT_CLASSIFICATION.Min,Float) <= float(TotalScore)).\
														    filter(cast(MKT_CREDIT_CLASSIFICATION.Max,Float) >= float(TotalScore)).first()
		CreditDefineID	=""
		if CreditDefineObj:
			Status = True
			Msg    = ""
			CreditDefineID = CreditDefineObj.ID
		else:
			Status = False
			Msg    = "Total score %s is not in range of credit score define.please configure credit score define."%TotScore  		
		# add data to table
		CreditScoreObj.TotScore 	  = TotScore
		CreditScoreObj.CreditDefineID = CreditDefineID
		CreditScoreObj.QuestionScore  = SumAnswer
		db.session.add(CreditScoreObj)
		return Status,Msg

	def updateCreditStatus(self,CreditScoreObj,Status):
		CreditScoreObj.CreditStatus = Status
		db.session.add(CreditScoreObj)
		db.session.commit()

	def insertCreditScoreDe(self,Audit="",**kwargs):
		'''
		- insert data to table MKT_CREDIT_SCORE_DE
		- this function just insert but didn't commit to db
		'''
		kwargs.update(Audit)
		CreditScoreDeObj 	=	MKT_CREDIT_SCORE_DE(**kwargs)
		db.session.add(CreditScoreDeObj)