from wtforms import DecimalField, IntegerField
from app.mktcore.wtfimports 		import *
from .models 						import *
from .. 							import app, db
import time
from datetime 						import datetime, date, timedelta
from decimal 						import *
from sqlalchemy 					import *
from app.tools.mktvb 				import *
from app.tools.mktroute 				import * 

import app.tools.mktcustomer 				as mktcustomer
import app.tools.mktdate 					as mktdate
import app.tools.user 						as mktuser
import app.tools.mktmoney 					as mktmoney
import app.tools.mktteller 					as mktteller
import app.tools.mktloanapplication 		as mktloanapp
import app.tools.mktholiday 				as mktHoliday
import app.tools.loantools.nonworkingday 	as mktDay
import app.tools.mktaccount					as mktaccount
import app.tools.mktaccounting 				as mktaccounting
import app.tools.mktautoid 					as mktautoid
import app.tools.mktdb 						as mktdb
import app.tools.mktsetting 				as mktsetting
import app.tools.mktaudit 					as mktaudit
import app.tools.mktloan 					as mktloan
import app.tools.mktroute 					as mktroute
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.Currency.models 			import MKT_CURRENCY
from app.LoanPurpose.models 		import MKT_LOAN_PURPOSE
from app.CheckList.models 			import MKT_CHECKLIST
from app.InterestRate.models 		import MKT_INTEREST_RATE
from app.Customer.models 			import MKT_CUSTOMER
from app.LoanRuleDetail.models		import MKT_LOAN_RULE_DE
from app.SourceOfFund.models 		import MKT_SOURCE_OF_FUND
from app.Collateral.models 			import MKT_COLLATERAL
from app.LoanContract.models		import MKT_LOAN_CONTRACT, MKT_LOAN_CO_BORROWER
from app.tools.mktloan 				import loadRelationIndicators
from app.VB.models 					import *
from app.Workflow.workflow 			import Workflow
from app.tools.mktsetting 			import getAppSetting,getAccSetting
from app.Vendor.Vendor.models		import MKT_VENDOR

@app.route("/Morakot/API/LoanApprovedAmount", methods=['GET'])
@app.route("/Morakot/LoanApprovedAmount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def LoanApprovedAmount():
	Amount = request.args.get("Amount")
	return jsonify(Amount=str(Amount))

@app.route("/Morakot/API/LNCustomerID", methods=['GET'])
@app.route("/Morakot/LNCustomerID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def LNCustomerID():
	return mktcustomer.getSearchCustomer(FilterBlock=True)

@app.route("/Morakot/API/LoanAppStatus", methods=['GET'])
@app.route("/Morakot/LoanAppStatus", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ApprovedBy():
	AppStatus = request.args.get('AppStatus')

	if int(AppStatus) == 1:
		ReviewedBy 		= ""
		ReviewedDate 	= ""
		ApprovedBy 		= ""
		ApprovedDate 	= ""
		RejectedBy 		= ""
		RejectedDate 	= ""

	elif int(AppStatus) == 2:
		ReviewedBy 		= str(mktuser.getUser().ID)
		ReviewedDate 	= str(mktdate.getBankDate())
		ApprovedBy 		= ""
		ApprovedDate 	= ""
		RejectedBy 		= ""
		RejectedDate 	= ""

	elif int(AppStatus) == 3:
		ReviewedBy 		= ""
		ReviewedDate 	= ""
		ApprovedBy 		= str(mktuser.getUser().ID)
		ApprovedDate 	= str(mktdate.getBankDate())
		RejectedBy 		= ""
		RejectedDate 	= ""

	else:
		ReviewedBy 		= ""
		ReviewedDate 	= ""
		ApprovedBy 		= ""
		ApprovedDate 	= ""
		RejectedBy 		= str(mktuser.getUser().ID)
		RejectedDate 	= str(mktdate.getBankDate())

	return jsonify(ReviewedBy=ReviewedBy, ReviewedDate=ReviewedDate, ApprovedBy=ApprovedBy, ApprovedDate=ApprovedDate, RejectedBy=RejectedBy, RejectedDate=RejectedDate)

@app.route("/Morakot/API/VBID", methods=['GET'])
@app.route("/Morakot/VBID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def VBID():
	return getSearchVB()

@app.route("/Morakot/API/LoanProductID", methods=['GET'])
@app.route("/Morakot/LoanProductID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanProductID():
	
	LoanProductID 	= request.args.get('LoanProduct')
	Currency 		= request.args.get('Currency')
	Category 		= ""
	InterestRate 	= ""

	if LoanProductID:
		query = MKT_LOAN_PRODUCT.query.get(LoanProductID)
		if query:
			Category 	= str(query.LNCategory)
			RateID 		= str(query.InterestKey) + Currency
			Rate 		= MKT_INTEREST_RATE.query.get(RateID)
			if Rate:
				InterestRate = str(Rate.Rate).split()
				
				if len(InterestRate) > 1:
					InterestRate = InterestRate[1]
				else:
					InterestRate = InterestRate[0]

	return jsonify(Category=Category, InterestRate=InterestRate)

@app.route("/Morakot/API/YesNo", methods=['GET'])
@app.route("/Morakot/YesNo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getYesNo():
	YesNo = request.args.get('YesNo')
	YesDate = ""
	if YesNo == "Y":
		YesDate = str(mktdate.getBankDate())
	return jsonify(YesDate=YesDate)
#
@app.route("/Morakot/Guarantor", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getGuarantor():
	return mktcustomer.getSearchCustomer()

def getRecord():
	try:
		result = MKT_LOAN_APPLICATION.query.get(g.formID)
		if not result:
			result = MKT_LOAN_APPLICATION_INAU.query.get(g.formID)
			if result:
				return [result.VBID]

			else:
				return []
		else:
			return [result.VBID]

	except:
		raise

def loadLoanProduct():
	return mktloan.loadLoanProduct()

def loadCurrency(Default = False):
	AccSetting 	= mktsetting.getAccSetting() #Get Acccounting Setting
	Currency 	= AccSetting.BaseCurrency

	if Default:
		return MKT_CURRENCY.query.get(Currency)

	else:
		return MKT_CURRENCY.query.order_by(asc(MKT_CURRENCY.ID)).all()

def loadLoanPurpose():
	return MKT_LOAN_PURPOSE.query.\
			order_by(MKT_LOAN_PURPOSE.ID.asc())

def loadCheckList():
	return MKT_CHECKLIST.query

def loadSourceOfFund():
	return MKT_SOURCE_OF_FUND.query

def loadUserID():
	return mktuser.getUser().ID

def loadGroupID():
	if request.method == 'POST':
		VBID = request.form["VBID"]
	else:
		if len(getRecord())>0:
			Record = getRecord()[0]
			return MKT_GROUP.query.filter_by(VBID=Record)
		else:
			return MKT_GROUP.query.filter_by(VBID='').all()
	return MKT_GROUP.query.filter_by(VBID=VBID)


def loadGuarantor():
	Branch 			= 	mktuser.getCurrentBranch()
	RestrictedObj 	= 	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()
	AsGurantor 		=	MKT_CUSTOMER.query.\
						filter(MKT_CUSTOMER.AsGurantor == 'Y').\
						filter(MKT_CUSTOMER.Block == 'N').\
						order_by(MKT_CUSTOMER.ID.asc())
	if RestrictedObj:
		AsGurantor 	=	AsGurantor.filter(MKT_CUSTOMER.Branch == Branch)

	return AsGurantor

def loadCoBorrower():
	Branch 			= 	mktuser.getCurrentBranch()
	RestrictedObj 	= 	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()
	CoBorrower 		= 	MKT_CUSTOMER.query.\
						filter(MKT_CUSTOMER.Block == 'N').\
						order_by(MKT_CUSTOMER.ID.asc())
	if RestrictedObj:
		CoBorrower 	=	CoBorrower.filter(MKT_CUSTOMER.Branch == Branch)

	return CoBorrower

def loadCollateral():
	Customer = request.form["LNCustomerID"] if request.method == 'POST' else ""
	if Customer:
		return MKT_COLLATERAL.query.filter(MKT_COLLATERAL.CustomerID == Customer)
	else:
		return MKT_COLLATERAL.query

def loadCurrentDate():
	return 	mktdate.getBankDate()

def loadDefaultCurrency():
	return mktaccounting.getDefaultCurrency()

def loadVendor():
	return MKT_VENDOR.query

class FRM_LOAN_APPLICATION(exform,Workflow):
	
	LNCustomerID 	= RemoteTextField(requiredlabel(getLanguage("Customer"),"*"), [validators.Required()])
	AppDate 		= DateField(requiredlabel(getLanguage("Application Date"), "*"), [validators.Required()], default=loadCurrentDate)

	Currency 		= QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
						query_factory=loadCurrency,
						get_label=u'ID',
						allow_blank=loadDefaultCurrency(),
						blank_text=u'--%s--' %getLanguage("Currency"),
						default=lambda:loadCurrency(Default=True),
						validators=[validators.Required()]
					)
	if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
		Vendor 			= QuerySelectField(requiredlabel("Vendor", "*"),
							query_factory=loadVendor,
							get_label=u'VendorName',
							allow_blank=True,
							blank_text='--Choose Vendor--',
							validators=[validators.Required()]
						)
		AssetPrice		= TextField(requiredlabel('Asset Price', '*'),
							validators=[validators.Required()],
							default=0
						)
		DownPayment 	= TextField(requiredlabel('Down Payment', '*'),
							validators=[validators.Required()],
							default=0
						)
		VATInput 		= TextField(requiredlabel('VAT Input', '*'),
							validators=[validators.Required()],
							default=0,
							description='5-VAT'
						)
		VATOutputOnLoan	= TextField(requiredlabel('VAT Output On Loan', '*'),
							validators=[validators.Required()],
							default=0,
							description='5-VAT')
		VATOutputOnDownPayment = TextField('VAT Output On Down Payment',
							default=0,
							description='5-VAT') 
		TaxExpense		= TextField('Tax Expense',
							default=0,
							description='5-VAT')
		AssetDescription= TextAreaField('Asset Description',
							description='6-Asset')

	AppliedAmount 	= TextField(requiredlabel("Applied Amount", "*"), [validators.Required()])
	Amount 			= TextField(requiredlabel("Approved Amount", "*"), [validators.Required()])
	Cycle 			= IntegerField(requiredlabel(getLanguage("Cycle"), "*"), [validators.Required()], default=1)
	LoanProduct 	= QuerySelectField(requiredlabel(getLanguage("Loan Product"), "*"),
						query_factory=loadLoanProduct,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Loan Product"),
						validators=[validators.Required()]
					)

	Category 		= TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	InterestRate 	= TextField(requiredlabel(getLanguage("Interest Rate"), "*"), [validators.Required()], default=0)

	FreqType 		= SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
						choices=[('', '--%s--' %getLanguage("None")),
								 ('1', '1. %s' %getLanguage("Monthly")), 
								 ('2', '2. %s' %getLanguage("Weekly")),
								 ('3', '3. %s' % "Daily")],
						coerce=str,
						validators=[validators.Required()],
						default='1'
					)

	Frequency 		= IntegerField(requiredlabel(getLanguage("Frequency"), "*"), [validators.Required()], default=1)

	Term 			= TextField(requiredlabel('Term (Month)','*'),[validators.Required()])

	Installment 	= TextField(getLanguage("Installment"))

	LoanPurpose 	= QuerySelectField(getLanguage("Loan Purpose"),
						query_factory=loadLoanPurpose,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Loan Purpose")
					)

	VBID 			= RemoteTextField(getLanguage("Village Bank"))
	GroupID 		= 	QuerySelectField('Group',
						query_factory=loadGroupID,
						get_label=lambda a: a.ID + " - " + a.GroupName,
						allow_blank=True,
						blank_text=u'--None--')

	SourceOfFund 	= QuerySelectField(getLanguage("Source of Fund"),
						query_factory=loadSourceOfFund,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Source of Fund")
					)

	AppStatus 		= SelectField(getLanguage("Status"),
						choices=[('1', '1. %s' %"Applied"), ('2', '2. %s' %"Reviewed"), ('3', '3. %s' %"Approved"), ('4', '4. %s' %"Rejected"), ('5', '5. %s' %"Cancelled"), ('6', '6. %s' %"Closed")], 
						default='1',
						coerce=str
					)


	if getAppSetting('ENABLE_LOS_FEATURE')=='Y':
		Signatory =  MKTIframe("Signatory", 
				 dicIframe={'width':'1000px','height':'10000px','frameborder':'0'},description="5-Signatory")
	else:
		PreparedBy 		= TextField(getLanguage("Prepared By"), default=loadUserID, description="7-%s" %getLanguage("Signatory"))
		PreparedDate 	= DateField(getLanguage("Prepared Date"), [validators.Optional()], default=loadCurrentDate, description="7-%s" %getLanguage("Signatory"))
		ReviewedBy 		= TextField(getLanguage("Reviewed By"), description="7-%s" %getLanguage("Signatory"))
		ReviewedDate 	= DateField(getLanguage("Reviewed Date"), [validators.Optional()], description="7-%s" %getLanguage("Signatory"))
		ApprovedBy 		= TextField(getLanguage("Approved By"), description="7-%s" %getLanguage("Signatory"))
		ApprovedDate 	= DateField(getLanguage("Approved Date"), [validators.Optional()], description="7-%s" %getLanguage("Signatory"))
		RejectedBy 		= TextField(getLanguage("Rejected By"), description="7-%s" %getLanguage("Signatory"))
		RejectedDate 	= DateField(getLanguage("Rejected Date"), [validators.Optional()], description="7-%s" %getLanguage("Signatory"))

	# AppStatusID = TextField(requiredlabel("ID", "*"), [validators.Required()], description="1-Check List Items")
	CheckList = QuerySelectField(getLanguage("Check List Item"),
					query_factory=loadCheckList,
					get_label=u'Description',
					allow_blank=True,
					blank_text=u'--%s--' %getLanguage("Choose Check List"),
					description="1-%s" %getLanguage("Check List Items")
				)

	YesNo = SelectField("%s/%s" %(getLanguage("Yes"), getLanguage("No")),
					choices=[('N', getLanguage('No')), ('Y', getLanguage('Yes'))],
					coerce=str,
					description="1-%s" %getLanguage("Check List Items")
				)
	YesDate = DateField(getLanguage("Yes Date"), [validators.Optional()], description="1-%s" %getLanguage("Check List Items"))

	Guarantor 		= RemoteTextField(getLanguage("Guarantor"),description="3-%s" %getLanguage("Guarantor"))
	GTRelationIndicator 		= 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="3-%s" %getLanguage("Guarantor")
						)
	Type 				= SelectField("Type",
								choices=[('G', 'Guarantor'), ('R', 'Referrer'), ('S', 'Successor')],
								coerce=str,
								default='G',
								description="3-%s" %getLanguage("Guarantor")
							)

	
	# # Collateral 	= RemoteTextField(getLanguage("Collateral"),description="4-%s" %getLanguage("Collateral"))
	Collateral 			= RemoteTextField(getLanguage("Collateral"),
									dicRemote={'url':'/Morakot/SearchCollateral'},
									description="4-%s" %getLanguage("Collateral")
							)
	# Collateral 		= 	QuerySelectField(getLanguage("Collateral"),
	# 						query_factory=loadCollateral,
	# 						get_label=u'Description',
	# 						allow_blank=True,
	# 						blank_text=u'--%s--' %getLanguage("None"),
	# 						description="4-%s" %getLanguage("Collateral")
	# 					)
	
	# CoBorrowerID 		= 	QuerySelectField(getLanguage("Co-Borrower"),
	# 						query_factory=loadCoBorrower,
	# 						get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
	# 						allow_blank=True,
	# 						blank_text=u'--%s--' %getLanguage("None"),
	# 						description="2-%s" %getLanguage("Co-Borrower")
	# 					)
	CoBorrowerID 		= RemoteTextField(getLanguage("Co-Borrower"),description="2-%s" %getLanguage("Co-Borrower"))
	# CoBorrowerName 		= 	TextField("Co-Borrower Name", description="2-%s" %getLanguage("Co-Borrower"))

	RelationIndicator 		= 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="2-%s" %getLanguage("Co-Borrower")
						)

	

	def validate_LNCustomerID(form, field):
		try:
			CustomerID = form.LNCustomerID.data
			mktcustomer.checkAge(CustomerID)
			# raise ValidationError("DDDD")

			CusObj 	=	MKT_CUSTOMER.query.get(CustomerID)

			if CusObj:

				Block 	=	CusObj.Block
				if Block == 'Y':
					BlockReason 	=	CusObj.BlockReason
					raise ValidationError("The customer %s was blocked, reason: %s." %(CustomerID, BlockReason))

		except:
			raise

	def validate_AppDate(form, field):
		try:

			Holiday 	= mktHoliday.getHoliday()
			AppDate 	= request.form['AppDate']
			AppDate 	= datetime.strptime(str(AppDate),'%Y-%m-%d').date()
			check 		= mktDay.isNonWorkingDay(AppDate, Holiday)
			
			if check:
				raise ValidationError("Application date must be different holiday.")

			''' 		Why I comment on this part?
 						Because Client want to remove validation filed Application Date of Loan Application. It means when user edit loan application, it will not require a new date, It still keep an original date of first creation.
			'''
			# systemDate 	= mktdate.getBankDate()
			# systemDate 	= str(systemDate).replace("-", "")
			# AppDate 	= str(AppDate).replace("-", "")

			# if int(systemDate) > int(AppDate):
			# 	raise ValidationError("Application date must be bigger than or equal to system bank date.")

		except:
			raise

	def validate_Amount(form, field):
		try:
			Amount 		= Decimal(form.Amount.data)
			Currency 	= request.form['Currency']
			LoanProduct = request.form['LoanProduct']

			# Call function to check Maximum and Minimum Disbursed Amount
			mktloanapp.checkMaxMinAmount(Amount, 'Approved Amount', Currency, LoanProduct)
		except:
			raise

	def validate_Term(form, field):

		Term 		= form.Term.data
		Installment = form.Installment.data

		if Installment:

			if not Term:
				raise ValidationError("This field is required.")

			try:
				float(Term)
			except:
				raise ValidationError("This field must be in numeric format.")


		if Term:
			try:
				Term = float(Term)
			except:
				raise ValidationError("This field must be in numeric format.")
		
			Currency 	= request.form['Currency']
			LoanProduct = request.form['LoanProduct']
			# Call function to check Maximum and Minimum Term
			mktloanapp.checkMaxMinTerm(Term, Currency, LoanProduct)

	def validate_Installment(form, field):

		Term 		= form.Term.data
		Installment = form.Installment.data

		if Term:

			if not Installment:
				raise ValidationError("This field is required.")

			try:
				int(Installment)
			except:
				raise ValidationError("This field must be in numeric format.")

		Frequency 	= request.form['Frequency']
		FreqType 	= request.form['FreqType']
		AppDate 	= request.form['AppDate']

		Check 		= mktloanapp.validateTermAndInstallment(Term, Installment, Frequency, FreqType, AppDate)
		
		if Check not in "OK":
			raise ValidationError(Check)

	def validate_LoanProduct(form, field):
		try:
			Currency 	= request.form['Currency']
			LoanProduct = request.form['LoanProduct']
			LP = MKT_LOAN_PRODUCT.query.get(LoanProduct)
			
			if LP:

				RuleID 	= str(LP.Rule) + str(Currency)
				Rule 	= MKT_LOAN_RULE_DE.query.get(RuleID)
				
				if not Rule:
					raise ValidationError("Loan product rule detail not define.")
		
		except:
			raise

	def validate_InterestRate(form, field):

		LoanPro 	= request.form['LoanProduct']
		CurrencyKey = request.form['Currency']
		InputRate 	= form.InterestRate.data

		try:

			InputRate = float(InputRate)

		except:

			raise ValidationError("This field must be in numeric format.")

		Msg = mktaccount.checkInterestRate("LC", LoanPro, InputRate, CurrencyKey)

		if Msg:
			raise ValidationError(Msg)

	def validate_CoBorrowerID(form, field):
		try:

			if request.form['CoBorrowerID']:

				CoBorrower 		= 	[]
				controls_list 	= 	request.form
				ListCoBorrower	= 	[item for item in controls_list if "CoBorrowerID" in item]
				ListCoBorrower.append("LNCustomerID")
				# raise ValidationError(ListCoBorrower)
				ListCoBorrower.sort()
				TotalCoBorrower =	len(ListCoBorrower)

				for nub in range(0,TotalCoBorrower):
					CoBorrower.append(request.form[ListCoBorrower[nub]])

				DuplicateAcc   = [x for x in CoBorrower if CoBorrower.count(x) > 1]
				if DuplicateAcc:
					raise ValidationError("Must not be the same as customer #%s"%DuplicateAcc[0])

		except Exception, e:
			raise ValidationError("%s" %e)

	def validate_Guarantor(form, field):
		try:

			if request.form['Guarantor']:
				
				Guarantor 		= 	[]
				controls_list 	= 	request.form
				ListGuarantor	= 	[item for item in controls_list if "Guarantor" in item]
				ListGuarantor.append("LNCustomerID")
				ListGuarantor.sort()
				TotalGuarantor =	len(ListGuarantor)

				for nub in range(0,TotalGuarantor):
					Guarantor.append(request.form[ListGuarantor[nub]])

				DuplicateAcc   = [x for x in Guarantor if Guarantor.count(x) > 1]
				if DuplicateAcc:
					raise ValidationError("Must not be the same as customer #%s"%DuplicateAcc[0])
				
		except Exception, e:
			raise ValidationError("%s" %e)
	@staticmethod
	def moneyField():

		moneyFields =	[["Amount", "Currency"], ["AppliedAmount", "Currency"], ["ProductPrice","Currency"]]

		if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
			moneyFields += [["AssetPrice","Currency"], ["DownPayment","Currency"],["VATInput", "Currency"],["VATOutputOnLoan","Currency"],
							["VATOutputOnDownPayment","Currency"],["TaxExpense","Currency"]]


		return moneyFields

	@staticmethod
	def formatMoney():
		return ["Amount"], "Currency"

	@staticmethod
	def setWidth():
		return [('AppDate', len3),
				('Term', len1),
				('Cycle', len1),
				('Installment', len1),
				('Currency', len3),
				('FreqType', len2),
				('PreparedBy', len3),
				('ReviewedBy', len3),
				('ApprovedBy', len3),
				('PreparedDate', len3),
				('ReviewedDate', len3),
				('ApprovedDate', len3),
				('Frequency', len1),
				('YesNo', len1),
				('YesDate', len3),
				('Group', len1),
				('RejectedBy', len3),
				('RejectedDate', len3)]

	@staticmethod
	def setDisable():
		return [('Category'), ('Branch'),
				('PreparedBy'), ('ReviewedBy'), ('ApprovedBy'),
				('PreparedDate'), ('ReviewedDate'), ('ApprovedDate'),
				('RejectedBy'), ('RejectedDate'), ('Installment'), ('CoBorrowerName')]

	# @staticmethod
	# def setVisible():
	# 	listVisibleField = []
	# 	ShowFieldList 		= mktsetting.getAppSetting('LoanAppField').splitlines()
	# 	if ShowFieldList:
	# 		ShowFieldList.extend(list_exclude)
	# 		form = FRM_LOAN_APPLICATION()
	# 		listVisibleField = [ (str(row.id) )for row in form if not row.id in ShowFieldList]
	# 	# for f in form:
	# 	# 	print "id",f.id
	# 	# print 'listVisibleField:',listVisibleField
	# 	# print ShowFieldList
	# 	return listVisibleField #these fields are visible, but data still  ssible

	@staticmethod
	def setVisible():
		listVisibleFields = []
		if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
			listVisibleFields += ['TaxExpense']

		return listVisibleFields

	@staticmethod
	def isMultiValue():
		controls_list=["1-Check List Items", "2-Co-Borrower", "3-Guarantor"]
		return controls_list

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#Category').val(data.Category); $('#InterestRate').val(data.InterestRate)"
		varname 		= "LoanProduct:$('#LoanProduct').val(),Currency:$('#Currency').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/LoanProductID", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Category').val(data.Category); $('#InterestRate').val(data.InterestRate)"
		varname 		= "LoanProduct:$('#LoanProduct').val(),Currency:$('#Currency').val()"
		fun 			= ["Currency", varname, fielddisplay, "/Morakot/LoanProductID", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#YesDate').val(data.YesDate)"
		varname 		= "YesNo:$('#YesNo').val()"
		fun 			= ["YesNo", varname, fielddisplay, "/Morakot/YesNo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ReviewedBy').val(data.ReviewedBy);$('#ReviewedDate').val(data.ReviewedDate)"
		fielddisplay 	+= ";$('#ApprovedBy').val(data.ApprovedBy);$('#ApprovedDate').val(data.ApprovedDate)"
		fielddisplay 	+= ";$('#RejectedBy').val(data.RejectedBy);$('#RejectedDate').val(data.RejectedDate)"
		varname 		= "AppStatus:$('#AppStatus').val()"
		fun 			= ["AppStatus", varname, fielddisplay, "/Morakot/LoanAppStatus", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),AppDate:$('#AppDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		if not mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":
			fielddisplay 	= ("$('#Amount').val(data.Amount);$('#Amount').focus();$('#Cycle').focus();")
			varname 		= ("Amount:$('#AppliedAmount').val()")
			fun 			= ["AppliedAmount", varname, fielddisplay, "/Morakot/LoanApprovedAmount", "blur"]
			hotfield.append(fun)

		if mktsetting.getAppSetting("LEASING_TYPE_SETTING") == "Y":

			# fielddisplay	= ("$('#DownPayment').focus();")
			fielddisplay 	=("$('#AssetPrice').val(data.AssetPrice);")
			fielddisplay 	+=("$('#DownPayment').val(data.DownPayment);")
			fielddisplay 	+=("$('#AppliedAmount').val(data.AppliedAmount);")
			fielddisplay 	+=("$('#Amount').val(data.ApprovedAmount);")
			fielddisplay 	+=("$('#VATInput').val(data.VATInput);")
			fielddisplay 	+=("$('#VATOutputOnLoan').val(data.VATOutputOnLoan);")
			fielddisplay 	+=("$('#VATOutputOnDownPayment').val(data.VATOutputOnDownPayment);")
			fielddisplay 	+=("$('#TaxExpense').val(data.TaxExpense);")

			varname 		= ("AssetPrice:$('#AssetPrice').val(),")
			varname 		+= ("Vendor:$('#Vendor').val(),")
			varname 		+= ("DownPayment:$('#DownPayment').val(),")
			varname 		+= ("Currency:$('#Currency').val(),")
			varname 		+= ("LoanProduct:$('#LoanProduct').val()")


			fun 			= ["AssetPrice", varname, fielddisplay, "/Morakot/LoanAssetPrice", "blur"]
			hotfield.append(fun)

			fun 			= ["DownPayment", varname, fielddisplay, "/Morakot/DownPayment", "blur"]
			hotfield.append(fun)

			fun 			= ["Vendor", varname, fielddisplay, "/Morakot/vendor", "change"]
			hotfield.append(fun)

			fun 			= ["Currency", varname, fielddisplay, "/Morakot/vendor", "change"]
			hotfield.append(fun)

			fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/vendor", "change"]
			hotfield.append(fun)

			fielddisplay	= 	("$('#Amount').val(data.Amount);")
			fielddisplay	+= 	("$('#VATInput').val(data.VATInput);")
			fielddisplay	+=	("$('#VATOutputOnLoan').val(data.VATOutputOnLoan);")
			fielddisplay	+=	("$('#TaxExpense').val(data.TaxExpense);")
			fielddisplay	+=	("$('#AppliedAmount').val(data.AppliedAmount);")

			varname 		=	("AppliedAmount:$('#AppliedAmount').val(),")
			varname 		+=	("VATInput:$('#VATInput').val(),")
			varname 		+=	("Vendor:$('#Vendor').val(),")
			varname 		+= 	("Currency:$('#Currency').val()")


			fun 			=	["AppliedAmount", varname, fielddisplay, "/Morakot/AppliedAmountTax", "blur"]
			hotfield.append(fun)

			fielddisplay	= 	("$('#Amount').val(data.Amount);")
			fielddisplay	+= 	("$('#VATInput').val(data.VATInput);")
			fielddisplay	+=	("$('#VATOutputOnLoan').val(data.VATOutputOnLoan);")
			fielddisplay	+=	("$('#TaxExpense').val(data.TaxExpense);")

			varname 		=	("Amount:$('#Amount').val(),")
			varname 		+=	("VATInput:$('#VATInput').val(),")
			varname 		+=	("Vendor:$('#Vendor').val(),")
			varname 		+= 	("Currency:$('#Currency').val()")

			fun 			=	["Amount", varname, fielddisplay, "/Morakot/ApprovedAmountTax", "blur"]
			hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),AppDate:$('#AppDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Frequency", varname, fielddisplay, "/Morakot/CalculateInstallment", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment);"
		fielddisplay 	+= "$('#FreqType').val()==='3' ? $('#Installment').prop('readonly',false) : $('#Installment').prop('readonly',true)"
		varname 		= "Term:$('#Term').val(),AppDate:$('#AppDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["FreqType", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CoBorrowerID').val(data.Customer)"
		# fielddisplay 	= "$('#CoBorrowerName').val(data.CustomerName);$('#CoBorrowerID').val(data.Customer)"
		varname 		= "CoBorrowerID:$('#CoBorrowerID').val()"
		fun 			= ["CoBorrowerID", varname, fielddisplay, "/Morakot/CustomerFullNameByID", "blur"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay 	= "Collateral"
		varname 		= "CustomerID:$('#LNCustomerID').val()"
		fun 			= ["LNCustomerID", varname, fielddisplay, "/Morakot/CollateralByClient", "change"]

		fielddisplay 	="GroupID"
		varname 		="VBID:$('#VBID').val()" 
		fun 			=["VBID", varname ,fielddisplay, "/Morakot/GroupID", "click"]
		
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def listField():
		Fields = ["ID", "LNCustomerID", "AppDate", "Currency", "Amount", 
				  "Term", "LoanProduct", "Category"]
		return Fields

	@staticmethod
	def beforeAuthorize():
		AppID = g.formID
		checkUpdate = mktloanapp.checkAuthorizeApp(AppID)

		if checkUpdate:
			return True
		else:
			return False	

	@staticmethod
	def redirectAfterInsert():
		NumOfAuth = g.getNAuthorize
		AppID = request.form['ID']
		if NumOfAuth == 0:
			checkUpdate = mktloanapp.checkAuthorizeApp(AppID, "AUTH")
			db.session.commit()

		formName = "FRM_LOAN_APPLICATION"
		currentUserID = session.get('getLogInID')
		currentUserRole = Workflow.getCurrentUserRole(currentUserID)
		Workflow.insertSignatoryAfterSave(formName,AppID,currentUserRole,currentUserID)
		return None

	@staticmethod
	def reverseRec():
		ID = g.formID
		LoanContractObj = MKT_LOAN_CONTRACT.query.\
							filter(MKT_LOAN_CONTRACT.LoanApplicationID == ID).first()

		if LoanContractObj:
			return False, ''
		else:
			return True, ''

	@staticmethod
	def IsAcceptOverride():		
		Override    = False
		Msg 		= ""
		Customer 	= request.form['LNCustomerID'] if request.method == "POST" else ""
		Branch 		= mktuser.getCurrentBranch()
		CustomerObj = MKT_CUSTOMER.query.get(Customer)

		if CustomerObj.Branch != Branch:
			Override 	= True
			Msg 		= (
							"Customer <a href='javascript:void(0)' onClick=CustomClickView('Customer','Customer/?ID=%s')><u>%s</u></a> "
							"is from different Branch <b>%s</b>. "
						) % (Customer, Customer, CustomerObj.Branch)	

			Msg += " Do you want to proceed?"
		return Override, Msg

	@staticmethod
	def urlParam():
		formName 	= "FRM_LOAN_APPLICATION"
		dicParam 	= [{"IframeName":"Signatory", "iframeUrl":"/Morakot/Workflow/Signatory/"+formName,'ID':'ID','TypeUrl':'Custom'}]

		return dicParam
