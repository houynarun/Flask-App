from app.mktcore.imports 				import *
from .forms 							import *
from .forms_my 							import *

from app.mktcore.globalfunction 		import *

from app.LoanContract.models 			import MKT_LOAN_CO_BORROWER
from app.Vendor.Vendor.models 			import MKT_VENDOR
from app.tools.mktmoney 				import *
from app.Currency.models 				import MKT_CURRENCY
from app.LoanProduct.models 			import MKT_LOAN_PRODUCT
from app.Tax.models 					import MKT_TAX

import app.tools.mktsetting 			as mktsetting

LocationSetting 	= mktsetting.getAppSetting('LANGUAGE')

if LocationSetting == 'MYANMAR':
	registerCRUD(admin, '/LoanApplication', 'LoanApplication', FRM_LOAN_APPLICATION_MY, [MKT_LOAN_APPLICATION, MKT_APP_STATUS, MKT_GUARANTOR, MKT_LOAN_COLLATERAL, MKT_LOAN_CO_BORROWER])
else:
	registerCRUD(admin, '/LoanApplication', 'LoanApplication', FRM_LOAN_APPLICATION, [MKT_LOAN_APPLICATION, MKT_APP_STATUS, MKT_GUARANTOR, MKT_LOAN_COLLATERAL, MKT_LOAN_CO_BORROWER])

def loanCalculation(Vendor, AssetPrice, DownPayment, Currency, LoanProduct):

	AppliedAmount 				= 0.00
	ApprovedAmount 				= 0.00
	VATInput 					= 0.00
	VATOutputOnLoan				= 0.00
	VATOutputOnDownPayment		= 0.00
	TaxExpense 					= 0.00
	Disbursed 					= 0.00
	Amount 						= 0.00
	OutstandingAmount 			= 0.00

	if Vendor:
		VendorObj	= MKT_VENDOR.query.get(Vendor)

	if LoanProduct:
		LoanProductObj = MKT_LOAN_PRODUCT.query.get(LoanProduct)

	if LoanProductObj:
		TaxObj = MKT_TAX.query.get(LoanProductObj.Tax)
	else:
		TaxObj = ""


	if TaxObj:
		Rate = float(TaxObj.Rate)
	else:
		Rate = 0

	if VendorObj and LoanProductObj:
		
		if VendorObj.VATRegistered == "Y":
			AppliedAmount 			= AssetPrice - DownPayment
			ApprovedAmount 			= AppliedAmount
			VATInput 				= (AssetPrice * Rate) / (100 + Rate)
			VATOutputOnLoan 		= (ApprovedAmount * Rate) / (100 + Rate)
			VATOutputOnDownPayment	= (DownPayment * Rate ) / (100 + Rate)
			TaxExpense				= (VATOutputOnDownPayment + VATOutputOnLoan) - VATInput
		else:

			AppliedAmount 			= AssetPrice - DownPayment
			ApprovedAmount 			= AppliedAmount
			VATInput				= 0.00
			VATOutputOnDownPayment 	= 0.00
			VATOutputOnLoan 		= (ApprovedAmount * Rate) / 100
			TaxExpense 				= VATOutputOnLoan
	else:
		AppliedAmount 	= AssetPrice - DownPayment
		ApprovedAmount	= AppliedAmount

	if Currency != "__None":
		CurrencyObj 	= MKT_CURRENCY.query.get(Currency)
		if CurrencyObj:
			AssetPrice 		= mktmoney.toMoney(float(AssetPrice), CurrencyObj)
			AppliedAmount 	= mktmoney.toMoney(float(AppliedAmount), CurrencyObj)
			VATInput		= mktmoney.toMoney(float(VATInput), CurrencyObj)
			VATOutputOnLoan = mktmoney.toMoney(float(VATOutputOnLoan), CurrencyObj)
			VATOutputOnDownPayment = mktmoney.toMoney(float(VATOutputOnDownPayment), CurrencyObj)
			TaxExpense 		= mktmoney.toMoney(float(TaxExpense), CurrencyObj)
			ApprovedAmount 	= mktmoney.toMoney(float(ApprovedAmount), CurrencyObj)
			DownPayment 	= mktmoney.toMoney(float(DownPayment), CurrencyObj)




	return jsonify(AssetPrice=AssetPrice,
					DownPayment=DownPayment,
					AppliedAmount=AppliedAmount,
					ApprovedAmount=ApprovedAmount,
					Disbursed=ApprovedAmount,
					Amount=ApprovedAmount,
					OutstandingAmount=ApprovedAmount,
					VATInput=VATInput,
					VATOutputOnLoan=VATOutputOnLoan,
					VATOutputOnDownPayment=VATOutputOnDownPayment,
					TaxExpense=TaxExpense)

@app.route("/Morakot/LoanAssetPrice", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def loanAssetPrice():
	AssetPrice 		= request.args.get("AssetPrice")
	Vendor			= request.args.get("Vendor")
	DownPayment 	= request.args.get("DownPayment")
	Currency 		= request.args.get("Currency")
	LoanProduct 	= request.args.get("LoanProduct")

	AssetPrice 		= globalfunction.wordAmount(AssetPrice)
	DownPayment 	= globalfunction.wordAmount(DownPayment)

	if AssetPrice == False:
		AssetPrice = 0.00

	if DownPayment == False:
		DownPayment = 0.00

	try:
		return loanCalculation(Vendor,float(AssetPrice),float(DownPayment), Currency, LoanProduct)
	except:
		return jsonify(AssetPrice="0.00",
					DownPayment=DownPayment,
					AppliedAmount="0.00",
					ApprovedAmount="0.00",
					VATInput="0.00",
					VATOutput="0.00",
					TaxExpense="0.00")

@app.route("/Morakot/DownPayment", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def downPayment():
	AssetPrice 		= request.args.get("AssetPrice")
	Vendor			= request.args.get("Vendor")
	DownPayment 	= request.args.get("DownPayment")
	Currency 		= request.args.get("Currency")
	LoanProduct 	= request.args.get("LoanProduct")

	AssetPrice 		= globalfunction.wordAmount(AssetPrice)
	DownPayment 	= globalfunction.wordAmount(DownPayment)

	if AssetPrice == False:
		AssetPrice = 0.00

	if DownPayment == False:
		DownPayment = 0.00

	try:
		return loanCalculation(Vendor,float(AssetPrice),float(DownPayment),Currency, LoanProduct)
	except:
		return jsonify(AssetPrice=AssetPrice,
					DownPayment="0.00",
					AppliedAmount="0.00",
					ApprovedAmount="0.00",
					VATInput="0.00",
					VATOutput="0.00",
					TaxExpense="0.00")

@app.route("/Morakot/vendor", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def vendor():
	AssetPrice 		= request.args.get("AssetPrice")
	Vendor			= request.args.get("Vendor")
	DownPayment 	= request.args.get("DownPayment")
	Currency 		= request.args.get("Currency")
	LoanProduct 	= request.args.get("LoanProduct")

	AssetPrice 		= globalfunction.wordAmount(AssetPrice)
	DownPayment 	= globalfunction.wordAmount(DownPayment)

	if AssetPrice == False:
		AssetPrice = 0.00

	if DownPayment == False:
		DownPayment = 0.00

	try:
		return loanCalculation(Vendor,float(AssetPrice),float(DownPayment),Currency, LoanProduct)
	except:
		return jsonify(AssetPrice=AssetPrice,
					DownPayment=DownPayment,
					AppliedAmount="0.00",
					ApprovedAmount="0.00",
					VATInput="0.00",
					VATOutput="0.00",
					TaxExpense="0.00")

@app.route("/Morakot/AppliedAmountTax", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def appliedAmountTax():
	AppliedAmount 		= request.args.get("AppliedAmount")
	VATInput			= request.args.get("VATInput")
	Vendor 				= request.args.get("Vendor")
	Currency 			= request.args.get("Currency")

	AppliedAmount 		= globalfunction.wordAmount(AppliedAmount)
	VATInput 			= globalfunction.wordAmount(VATInput)

	VATOutputOnLoan 	= 0.00
	TaxExpense			= 0.00

	if Currency:
		CurrencyObj 	= MKT_CURRENCY.query.get(Currency)

	try:
		VendorObj	= MKT_VENDOR.query.get(Vendor)
		if VendorObj:
			if VendorObj.VATRegistered == "Y":
				
				VATOutputOnLoan = (AppliedAmount * 10)/110

				TaxExpense	= float(VATOutputOnLoan) - float(VATInput) if float(VATOutputOnLoan) > float(VATInput) else 0.0
			else:
				
				VATOutputOnLoan = float(AppliedAmount)*0.1
				TaxExpense	= float(VATOutputOnLoan) - float(VATInput) if float(VATOutputOnLoan) > float(VATInput) else 0.0

		
	except:
		return jsonify(AppliedAmount="0.00",
					Amount="0.00",
					VATInput="0.00",
					VATOutputOnLoan="0.00",
					TaxExpense="0.00")
	
	VATOutputOnLoan = mktmoney.toMoney(float(VATOutputOnLoan), CurrencyObj)
	VATInput = mktmoney.toMoney(float(VATInput), CurrencyObj)
	AppliedAmount = mktmoney.toMoney(float(AppliedAmount), CurrencyObj)
	TaxExpense = mktmoney.toMoney(float(TaxExpense), CurrencyObj)


	return jsonify(AppliedAmount=AppliedAmount,
					Amount=AppliedAmount,
					VATInput=VATInput,
					VATOutputOnLoan=VATOutputOnLoan,
					TaxExpense=TaxExpense)

@app.route("/Morakot/ApprovedAmountTax", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def approvedAmountTax():
	ApprovedAmount 		= request.args.get("Amount")
	VATInput			= request.args.get("VATInput")
	Vendor 				= request.args.get("Vendor")
	Currency 			= request.args.get("Currency")
	
	ApprovedAmount 		= globalfunction.wordAmount(ApprovedAmount)
	VATInput 			= globalfunction.wordAmount(VATInput)

	VATOutputOnLoan 	= 0.00

	if Currency:
		CurrencyObj 	= MKT_CURRENCY.query.get(Currency)

	try:
		VendorObj	= MKT_VENDOR.query.get(Vendor)
		if VendorObj:
			if VendorObj.VATRegistered == "Y":
				
				VATOutputOnLoan = (ApprovedAmount * 10)/110

				TaxExpense	= float(VATOutputOnLoan) - float(VATInput) if float(VATOutputOnLoan) > float(VATInput) else 0.0
			else:
				
				VATOutputOnLoan = float(ApprovedAmount)*0.1
				TaxExpense	= float(VATOutputOnLoan) - float(VATInput) if float(VATOutputOnLoan) > float(VATInput) else 0.0

		
	except:
		return jsonify(Amount="0.00",
					VATInput="0.00",
					VATOutputOnLoan="0.00",
					TaxExpense="0.00")
	
	VATOutputOnLoan = mktmoney.toMoney(float(VATOutputOnLoan), CurrencyObj)
	VATInput = mktmoney.toMoney(float(VATInput), CurrencyObj)
	ApprovedAmount = mktmoney.toMoney(float(ApprovedAmount), CurrencyObj)
	TaxExpense = mktmoney.toMoney(float(TaxExpense), CurrencyObj)


	return jsonify(Amount=ApprovedAmount,
					VATInput=VATInput,
					VATOutputOnLoan=VATOutputOnLoan,
					TaxExpense=TaxExpense)
