import time
from calendar import *
from datetime import date, datetime, timedelta

from wtforms import IntegerField

import app.tools.loantools.rescheduletools as mktschedule
import app.tools.mktdate as mktdate

from app.mktcore.wtfimports import *
import app.tools.mktdate as mktdate
from .. import app, db
from .models import *


def loadBatchJob():
	return MKT_BATCH_JOB.query


def loadToday():
	Date = mktdate.getBankDate()
	return Date


@app.route('/Morakot/getNextRunDate', methods=['GET'])
@app.route('/Morakot/API/getNextRunDate', methods=['GET'])
def routeGetNextRunDate():

	Freq = request.args.get('Frequency') if 'Frequency' in request.args else ''
	# Convert Current Bank Date
	BankDate = mktdate.convertDate(loadToday())
	# Generate NextRunDate base on BankDate, BatchJob Freqency
	# If Error NextRunDate will be None and Message will have the error message
	NextRunDate, Message = mktdate.convertFreqToNextRunDate(BankDate, Freq)

	return jsonify(NextRunDate=NextRunDate)

class FRM_BATCH_JOB(exform):

	Description 	= 	TextField(requiredlabel("Description", "*"), [validators.Required(), validators.Length(min=3, max=50)])
	Tool 			=	TextField(requiredlabel("Tool", "*"), [validators.Required()])

	JobStatus 		= 	SelectField(
							requiredlabel("Status", "*"),
							choices=[('1', 'Inprogress'),
									 ('2', 'Completed'),
									 ('3', 'Failed')],
							coerce=str,
							validators=[validators.Required()]
						)

	Frequency 		= 	TextField(requiredlabel("Frequency", "*"), [validators.Required(), validators.Length(min=3, max=15)])
	NextRunDate		=	TextField(requiredlabel("Next Run Date", "*"), [validators.Required()], default=loadToday)
	Enable 			= 	SelectField(
							requiredlabel("Enable", "*"),
							choices=[('Yes', "Yes"), ('No', 'No')],
							coerce=str,
							validators=[validators.Required()]
						)

	Dependency 		= 	QuerySelectField(
							query_factory=loadBatchJob,
							get_label=u'Tool',
							allow_blank=True,
							blank_text=u'--None--'
						)

	Order = IntegerField(requiredlabel("Order", "*"), [validators.Optional()], default=0)


	def validate_Frequency(form, field):

		Freq = field.data

		BankDate = mktdate.convertDate(loadToday())

		NextRunDate, Message = mktdate.convertFreqToNextRunDate(BankDate, Freq)

		if Message:

			raise ValidationError(Message)


	@staticmethod
	def setWidth():
		Fields_Width = [('NextRunDate', len3), ('Enable', len1), ('JobStatus', len2), ("Frequency", len2)]
		return Fields_Width

	@staticmethod
	def listField():
		return ["ID", "Description", "Tool", "JobStatus", "Frequency",
				"Enable", "Dependency", "Order", "NextRunDate"]

	@staticmethod
	def hotField():

		hotfield = []
		fielddisplay = "$('#NextRunDate').val(data.NextRunDate)"  # FirstName is form's attribute and will show LastName when cursor loss focus from LastName text box. Note: you can write javascript code to display results on different controls by comma separate. 
		varname = "Frequency:$('#Frequency').val()" # $('#LastName').val() is parameter via get method
		fun = ["Frequency", varname, fielddisplay, "/Morakot/getNextRunDate", "blur"]  # /Morakot/getLastName is url defined at @app.route('/Morakot/getLastName',methods=['GET'])
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setDisable():

		Fields = [
			('NextRunDate')
		]

		return Fields
