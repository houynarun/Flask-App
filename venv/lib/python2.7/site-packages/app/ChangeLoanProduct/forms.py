from flask 							import g, flash, Markup
from app.mktcore.wtfimports 		import *
from app.mktcore.imports 		import *
from .models 						import *
from wtforms 						import IntegerField
from wtforms.validators 			import StopValidation
import app.tools.mktloan 			as mktloan
import app.tools.mktkey 			as mktkey
import app.tools.mktpdcollection 	as mktpdcollection
import app.tools.mktaccounting 		as mktaccounting
from app.LoanContract.models 		import *
from app.InterestRate.models 		import *
from app.LoanRuleDetail.models 		import *
from app.LoanProduct.models 		import *
from sqlalchemy 					import *
from app.tools.mktroute 			import *
import app.tools.mktaudit 			as mktaudit
import app.tools.mktdate 			as mktdate
from decimal 						import *
from app.AssetClass.models 			import *
from app.LoanAmendment.models 		import *
from app.ManualLoanCollection.models 	import *
from app.RepaymentSchedule.models 	import *
from app.PD.models 					import *
from app.LoanPurpose.models 		import *
from app.LoanApplication.models 	import *

def loadLoanProduct():
	return MKT_LOAN_PRODUCT.query
def loadLoanPurpose():
	return MKT_LOAN_PURPOSE.query

def isInRange(Min,Val,Max):
	""" Check the given value is in range min and max or not """ 
	if Min > Val > Max:
		return False
	elif Min < Val > Max:
		return False
	elif Min > Val < Max:
		return False
	else:
		return True


class ChangeLoanProduct:

	def checkTerm(self,LoanID,LoanProduct,Term):
		Msg 			 = 		""
		LoanContract 	 = 		MKT_LOAN_CONTRACT.query.get(LoanID)
		LoanIDOld 		 = 		LoanContract.LoanProduct
		LoanProductOld 	 = 		MKT_LOAN_PRODUCT.query.get(LoanIDOld)
		LoanProductNew 	 = 		MKT_LOAN_PRODUCT.query.get(LoanProduct)
		Currency 		 = 		LoanContract.Currency
		Product 		 = 		LoanProduct + Currency
		LoanRuleQuery 	 = 		MKT_LOAN_RULE_DE.query.get(Product)
		MinTerm 		 = 		LoanRuleQuery.MinTerm
		MaxTerm 		 = 		LoanRuleQuery.MaxTerm

		if not isInRange(int(MinTerm), int(Term), int(MaxTerm)):

			Msg 		 = 		"Current term <b>%d</b> of %s not in range <b>%d</b> - <b>%d</b> of new loan product %s <br/>"%(int(Term),str(LoanProductOld.Description),int(MinTerm),int(MaxTerm),str(LoanProductNew.Description))
		return Msg
		
	def checkOutstanding(self,LoanID,LoanProduct,OutstandingAmount):
		Msg 			  = 		""
		LoanContract 	  = 		MKT_LOAN_CONTRACT.query.get(LoanID)
		LoanIDOld 		  = 		LoanContract.LoanProduct
		LoanProductOld 	  = 		MKT_LOAN_PRODUCT.query.get(LoanIDOld)
		LoanProductNew 	  = 		MKT_LOAN_PRODUCT.query.get(LoanProduct)
		Currency 		  = 		LoanContract.Currency
		Product 		  = 		LoanProduct + Currency
		LoanRuleQuery 	  = 		MKT_LOAN_RULE_DE.query.get(Product)
		MinAmount 		  = 		LoanRuleQuery.MinAmount
		MaxAmount 		  = 		LoanRuleQuery.MaxAmount

		if not isInRange(int(float(MinAmount)), int(float(OutstandingAmount)), int(float(MaxAmount))):
		
			Msg 		  =			"Current outstandingAmount <b>%.2f</b> of %s not in range <b>%.2f</b> - <b>%.2f</b> of new loan product %s.<br/>"%(float(OutstandingAmount),str(LoanProductOld.Description),float(MinAmount),float(MaxAmount),str(LoanProductNew.Description))
		return Msg

	def checkAssetClass(self,LoanID,AssetClass):
		Msg 			  = 		""
		AssetClassName 	  =		MKT_ASSET_CLASS.query.get(AssetClass)	
		if AssetClass 	  != '0':
			Msg 		  = 		"Current asset class is class <b>%d</b> (%s).<br/>"%(int(AssetClass),str(AssetClassName.Description))	
		return Msg

	def processChangeLoanProduct(self,LoanID,LoanProduct,LoanPurpose,Status,ID,Note):
		'''
			In this method it work such as: 
			- Move old loan contract record to hist when change to new loan product
			- Update loan product id to new loan product
			- Update category id of new loan product
			- Post accounting: outstanding amount
			- Post accounting: accrued interest amount 
			- Post accounting: interest income amount if field suspend in loan contract equal 'N'
			- Reverse old provision of old loan product it work when configure asset class with loan product
			- Post new provision it work when configure asset class with loan product
		'''
		try:
			LoanProductObj  		= 		MKT_LOAN_PRODUCT.query.get(LoanProduct)
			LoanContractObj 		= 		MKT_LOAN_CONTRACT.query.get(LoanID)
			CategoryOld 			= 		LoanContractObj.Category
			Category 				= 		LoanProductObj.LNCategory
			AccSetting 				= 		mktsetting.getAccSetting() #Get Acccounting Setting
			CustomerID 				= 		LoanContractObj.ContractCustomerID
			Resource 				= 		"AUTH"
			AssetClass 				= 		LoanContractObj.AssetClass
			DateTimeNow 			= 		mktdate.getDateTimeNow()
			Transaction 			= 		AccSetting.AmendmentTran
			Currency 				= 		LoanContractObj.Currency
			Amount 					= 		LoanContractObj.OutstandingAmount
			Branch 					= 		LoanContractObj.Branch
			Curr 					= 		int(LoanContractObj.Curr)
			TranDate 				=		mktdate.getBankDate()
			if len(Note) > 50:
				Note 				= 		Note[0:50]

			# AIR
			AIRNew  				= 			LoanProductObj.IntReceivableCate
			LoanProductOldObj 		= 			MKT_LOAN_PRODUCT.query.get(LoanContractObj.LoanProduct)
			AIROld 					= 			LoanProductOldObj.IntReceivableCate
			AmountAIR 				= 			LoanContractObj.AccrInterest
			# IIC 
			IICNew 					= 			LoanProductObj.IntIncomeCate
			IICOld 					= 			LoanProductOldObj.IntIncomeCate
			AmountIIC 				= 			LoanContractObj.AccrInterest
			Suspend 				= 			LoanContractObj.Suspend	

			# Reverse Old Provision
			LoanProductOld 			= 			LoanContractObj.LoanProduct	
			AssetClassOld 			= 			AssetClass +"-"+LoanProductOld
			AssetClassNew 			= 			AssetClass +"-"+LoanProduct
			AssClassOldObj 			= 			MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID==AssetClassOld).all()
			AssClassNewObj 			= 			MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID==AssetClassNew).all()
			LoanType 				=			LoanContractObj.LoanType
			MoreThanOneYear 		=			LoanContractObj.MoreThanOneYear
			OutstandingAmount 		= 			LoanContractObj.OutstandingAmount
			PDID 					= 			"PD" + str(LoanID)
			NumDayDue 				= 			mktpdcollection.getNumDayDue(PDID)
			if NumDayDue:
				NumDayDue = int(NumDayDue)
			
			# Provisioning Booking to New Class
			if AssClassOldObj:
				ProvisionAmountOld 	= 		mktpdcollection.getProvisioningAmount(AssetClassOld, OutstandingAmount, LoanType, MoreThanOneYear, NumDayDue)
				AssetClassObj		= 		MKT_ASSET_CLASS.query.get(AssetClassOld)
				ProExpCat 			= 		AssetClassObj.ProvExpCat
				ProResvCat 			= 		AssetClassObj.ProResvCat
			# Post New Provision
			if AssClassNewObj:
				ProvisionAmountNew 	= 			mktpdcollection.getProvisioningAmount(AssetClassNew, OutstandingAmount, LoanType, MoreThanOneYear, NumDayDue)
				AssetClassNewObj	= 			MKT_ASSET_CLASS.query.get(AssetClassNew)
				ProExpCatNew 		= 			AssetClassNewObj.ProvExpCat
				ProResvCatNew 		= 			AssetClassNewObj.ProResvCat
			# Process Update Loan Application
			if LoanContractObj.LoanApplicationID:
				mktaudit.moveAUTHtoHIST(MKT_LOAN_APPLICATION, MKT_LOAN_APPLICATION_HIST, LoanContractObj.LoanApplicationID)
				LoanAppObj 					= 		MKT_LOAN_APPLICATION.query.get(LoanContractObj.LoanApplicationID)
				LoanAppObj.LoanProduct 		= 		LoanProduct 
				LoanAppObj.LoanPurpose 		= 		LoanPurpose
				LoanAppObj.Category 		= 		Category
			#Process of Change Loan Product
			mktaudit.moveAUTHtoHIST(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT_HIST, LoanID)
			LoanContractObj.LoanProduct 	=  		LoanProduct
			LoanContractObj.LoanPurpose 	= 		LoanPurpose
			LoanContractObj.Category 		= 		Category
			Curr 						   += 		1
			LoanContractObj.Curr 			= 		Curr

		 		  

			k1 = AccSetting.GL_KEY1
			k2 = AccSetting.GL_KEY2
			k3 = AccSetting.GL_KEY3
			k4 = AccSetting.GL_KEY4
			k5 = AccSetting.GL_KEY5
			k6 = AccSetting.GL_KEY6
			k7 = AccSetting.GL_KEY7
			k8 = AccSetting.GL_KEY8
			k9 = AccSetting.GL_KEY9

			k1 = mktkey.getResultKey(k1, LoanID, CustomerID, Resource)
			k2 = mktkey.getResultKey(k2, LoanID, CustomerID, Resource)
			k3 = mktkey.getResultKey(k3, LoanID, CustomerID, Resource)
			k4 = mktkey.getResultKey(k4, LoanID, CustomerID, Resource)
			k5 = mktkey.getResultKey(k5, LoanID, CustomerID, Resource)
			k6 = mktkey.getResultKey(k6, LoanID, CustomerID, Resource)
			k7 = mktkey.getResultKey(k7, LoanID, CustomerID, Resource)
			k8 = mktkey.getResultKey(k8, LoanID, CustomerID, Resource)
			k9 = mktkey.getResultKey(k9, LoanID, CustomerID, Resource)
			# Block Booking Accounting Loan OutstandingAmount
			for i in range(0, 2):
				if i == 0:
					DrCr = "Dr"
					Mode = "Direct"
					Category = Category
					GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
				else:
					DrCr = "Cr"
					Mode = "Direct"
					Category = CategoryOld
					GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)

				mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						DateTimeNow, 			# Createdon
						"System",				# Authorizer
						DateTimeNow,			# Authorizeon
						"", 					# AEID
						"",						# Account
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Amount, 				# Amount
						"CLP",					# Module
						Transaction, 			# Transaction
						TranDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						UserReference=LoanID
						)
			# Block Booking Accounting AIR
			for i in range(0, 2):
				if i == 0:
					DrCr = "Dr"
					Mode = "Direct"
					Category = AIRNew
					GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
				else:
					DrCr = "Cr"
					Mode = "Direct"
					Category = AIROld
					GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
				mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						DateTimeNow, 			# Createdon
						"System",				# Authorizer
						DateTimeNow,			# Authorizeon
						"", 					# AEID
						"",						# Account
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						AmountAIR, 				# Amount
						"CLP",					# Module
						Transaction, 			# Transaction
						TranDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
						UserReference=LoanID
						)
			
			if Suspend == 'N':
				# Booking Amount IIC
				for i in range(0, 2):
					if i == 0:
						DrCr = "Dr"
						Mode = "Direct"
						Category = IICOld
						GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
					else:
						DrCr = "Cr"
						Mode = "Direct"
						Category = IICNew
						GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssetClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)

					mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							"",						# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							AmountIIC, 				# Amount
							"CLP",					# Module
							Transaction, 			# Transaction
							TranDate, 				# TransactionDate
							ID, 					# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
							UserReference=LoanID
							)
			if AssClassOldObj:
				# Reverse Old Provision
				for i in range(0, 2):
					if i == 0:
						DrCr = "Dr"
						Mode = "Direct"
						Category = ProExpCat
						GL_KEYS = mktaccounting.getConsolKey(Category, Currency)
					else:
						DrCr = "Cr"
						Mode = "Direct"
						Category = ProResvCat
						GL_KEYS = mktaccounting.getConsolKey(Category, Currency)

					mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							"",						# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							ProvisionAmountOld, 	# Amount
							"CLP",					# Module
							Transaction, 			# Transaction
							TranDate, 				# TransactionDate
							ID, 					# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
							UserReference=LoanID
							)
				# post new provision
			if AssClassNewObj:
				for i in range(0, 2):
					if i == 0:
						DrCr = "Dr"
						Mode = "Direct"
						Category = ProResvCatNew
						GL_KEYS = mktaccounting.getConsolKey(Category, Currency)
					else:
						DrCr = "Cr"
						Mode = "Direct"
						Category = ProExpCatNew
						GL_KEYS = mktaccounting.getConsolKey(Category, Currency)

					mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							"",						# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							ProvisionAmountNew, 	# Amount
							"LC",					# Module
							Transaction, 			# Transaction
							TranDate, 				# TransactionDate
							ID, 					# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
							UserReference=LoanID
							)
			return Status
		except Exception as e:
			raise
@app.route("/Morakot/LoanContractInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getChangeLoanProductInfo():
	try:
		LoanID  			= request.args.get("LoanID")
		query 				= MKT_LOAN_CONTRACT.query.get(LoanID)
		CurrencyObj 		= MKT_CURRENCY.query.get(query.Currency)
		PDID 				= "PD" + str(LoanID)
		NumDayDue 			= mktpdcollection.getNumDayDue(PDID)
		OldLoanPurpose 		= ""
		OldLoanPurposeDesc 	= ""
		NewLoanPurpose 		= ""
		NewLoanPurposeDesc 	= ""
		if NumDayDue:
			NumDayDue = int(NumDayDue)
		if query:
			LoanProductID 		 	= 	query.LoanProduct
			MoreThanOneYear 		= 	query.MoreThanOneYear
			LoanType 				= 	query.LoanType
			Installment 			= 	query.Installment
			Frequency 				= 	query.Frequency
			FrequencyType 			= 	query.FreqType
			LoanPurpose 			= 	query.LoanPurpose
			Product 				= 	MKT_LOAN_PRODUCT.query.get(LoanProductID)
			AssetClassObj 			= 	MKT_ASSET_CLASS.query.get(query.AssetClass)
			LoanPurposeObj 			= 	MKT_LOAN_PURPOSE.query.get(LoanPurpose)
			AIRAmount 				= 	str(mktmoney.toMoney(float(query.AccrInterest),CurrencyObj)).replace(",","")
			IICAmount 				= 	str(mktmoney.toMoney(float(query.AccrInterest),CurrencyObj)).replace(",","")
			if Product:
				OldLoanProduct 		= 	LoanProductID
				OldProDesc 			= 	Product.Description
			if LoanPurposeObj:
				OldLoanPurpose 		= 	LoanPurpose
				OldLoanPurposeDesc 	= 	LoanPurposeObj.Description
				NewLoanPurpose 		= 	LoanPurpose
				NewLoanPurposeDesc 	= 	LoanPurposeObj.Description
			InterestRate 			= 	query.InterestRate
			Term 					= 	query.Term
			AssetClass 				= 	query.AssetClass
			OldLOCate 				= 	Product.LNCategory
			OldAIRCate	 			= 	Product.IntReceivableCate
			OldIICCate	 			= 	Product.IntIncomeCate
			OutstandingAmount 		= 	str(mktmoney.toMoney(float(query.OutstandingAmount), CurrencyObj)).replace(",","")
			BadDebtAmount 			= 	str(mktmoney.toMoney(float(mktpdcollection.getProvisioningAmount(AssetClass, OutstandingAmount, LoanType, MoreThanOneYear, NumDayDue)),CurrencyObj)).replace(",","")
			ReserveAmount 			= 	str(mktmoney.toMoney(float(mktpdcollection.getProvisioningAmount(AssetClass, OutstandingAmount, LoanType, MoreThanOneYear, NumDayDue)),CurrencyObj)).replace(",","")
			if AssetClassObj:
				OldBadDebtCate 		= 	AssetClassObj.ProvExpCat
				OldReserveCate	 	= 	AssetClassObj.ProResvCat

			# OutstandingAmount	    = mktmoney.toMoney(float(OutstandingAmount), mktmoney.getCurrencyObj(query.Currency))
		return jsonify(OldLoanProduct  		=	 OldLoanProduct,
					   InterestRate 		=	 InterestRate,
					   Term					=	 Term,
					   AssetClass		 	=	 AssetClass,
					   OldLOCate 		 	= 	 OldLOCate,
					   OldAIRCate 			= 	 OldAIRCate,
					   OldIICCate 			= 	 OldIICCate,
					   OldBadDebtCate 		= 	 OldBadDebtCate,
					   OldReserveCate 		= 	 OldReserveCate,
					   OutstandingAmount    =	 OutstandingAmount,
					   AIRAmount 		 	= 	 AIRAmount,
					   IICAmount 			= 	 IICAmount,
					   BadDebtAmount 		= 	 BadDebtAmount,
					   ReserveAmount 		= 	 ReserveAmount,
					   MoreThanOneYear 		= 	 MoreThanOneYear,
					   Installment 			= 	 Installment,
					   Frequency 			= 	 Frequency,
					   FrequencyType 		= 	 FrequencyType,
					   OldProDesc 			= 	 OldProDesc,
					   OldLoanPurpose 		= 	 OldLoanPurpose,
					   OldLoanPurposeDesc 	= 	 OldLoanPurposeDesc,
					   NewLoanPurpose 		= 	 NewLoanPurpose,
					   NewLoanPurposeDesc 	= 	 NewLoanPurposeDesc
					   )
	except Exception as e:
		raise

@app.route("/Morakot/NewLoanProductInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNewLoanProduct():
	try:
		LoanProductID 			= 		request.args.get("NewLoanProduct")
		LoanID  				= 		request.args.get("LoanID")
		query 					= 		MKT_LOAN_PRODUCT.query.get(LoanProductID)
		LoanContractObj 		= 		MKT_LOAN_CONTRACT.query.get(LoanID)
		AssetClassObj 			= 		MKT_ASSET_CLASS.query.get(LoanContractObj.AssetClass)
		Currency 				= 		LoanContractObj.Currency
		LoanProduct 			= 		LoanProductID	+ 	Currency
		InterestRateObj 		= 		MKT_INTEREST_RATE.query.get(LoanProduct)
		LoanRule 				= 		MKT_LOAN_RULE_DE.query.get(LoanProduct)
		InterestRange 			= 		InterestRateObj.Rate
		InterestRange 			= 		InterestRange.split()
		RangeLoanTerm 			= 		str(LoanRule.MinTerm)+ "-"+ str(LoanRule.MaxTerm)
		RangeLoanSize 			= 		str(LoanRule.MinAmount)+ "-"+ str(LoanRule.MaxAmount)
		if query:
			NewLOCate 			= 		query.LNCategory
			NewAIRCate 			= 		query.IntReceivableCate
			NewIICCate 			= 		query.IntIncomeCate
			NewBadDebtCate 		= 		AssetClassObj.ProvExpCat
			NewReserveCate 		= 		AssetClassObj.ProResvCat
		if len(InterestRange)   == 	1:
			RangeIntRate 		= 		str(InterestRange[0])
		else:
			RangeIntRate 		= 		str(InterestRange[0])+"-"+str(InterestRange[1])

		return jsonify(NewLOCate	   = 		NewLOCate,
					   NewAIRCate 	   = 		NewAIRCate,
					   NewIICCate 	   = 		NewIICCate,
					   NewBadDebtCate  = 		NewBadDebtCate,
					   NewReserveCate  = 		NewReserveCate,
					   RangeIntRate    = 		RangeIntRate,
					   RangeLoanSize   = 		RangeLoanSize,
					   RangeLoanTerm   = 		RangeLoanTerm
					   )
	except Exception as e:
		raise
class FRM_CHANGE_LOAN_PRODUCT(exform):
	TransactionDate  	= 	DateField("TransactionDate",
							default=mktdate.getBankDate
							)
	LoanID 				= 	RemoteTextField(requiredlabel("Loan ID","*"),[validators.Required()])
	OldLoanProduct 		= 	QuerySelectField(getLanguage("Loan Product"),
							query_factory=loadLoanProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
							)
	NewLoanProduct 		= 	QuerySelectField(requiredlabel("Change Loan Product To", "*"),
							query_factory=loadLoanProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("Choose Loan Product"),
							validators=[validators.Required()]
						)
	OldLoanPurpose 		= 	QuerySelectField("Loan Purpose",
							query_factory=loadLoanPurpose,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
							)
	NewLoanPurpose 		= 	QuerySelectField(requiredlabel("Change Loan Purpose To", "*"),
							query_factory=loadLoanPurpose,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("Choose Loan Purpose"),
							validators=[validators.Required()]
						)
	Description 	 	= 	TextAreaField("Description",
							default="Change Loan Product")
	InterestRate 		= 	TextField("Interest Rate")
	RangeIntRate		= 	TextField("Range Interest Rate")
	OutstandingAmount 	=	TextField("Loan Outstanding Amount", default=0)
	RangeLoanSize		= 	TextField("Range Loan Size")
	Term 				= 	IntegerField("%s (%s)" %(getLanguage("Term"), getLanguage("Month")))
	RangeLoanTerm		= 	TextField("Range Loan Term")
	AssetClass 			= 	TextField("Asset Class",description="1-%s" %"Other Loan Contract Info")
	MoreThanOneYear 	= 	TextField("More Than One Year",description="1-%s" %"Other Loan Contract Info")
	OldLOCate 			= 	TextField("Old Loan Outstanding Category",description="2-%s" %"Loan Product Category")
	NewLOCate 			= 	TextField("New Loan Outstanding Category",description="2-%s" %"Loan Product Category")
	OldAIRCate 			= 	TextField("Old Accrue Int Rate Category",description="2-%s" %"Loan Product Category")
	NewAIRCate 			= 	TextField("New Accrue Interest Category",description="2-%s" %"Loan Product Category")
	OldIICCate 			= 	TextField("Old Interest Income Category",description="2-%s" %"Loan Product Category")
	NewIICCate 			= 	TextField("New Interest Income Category",description="2-%s" %"Loan Product Category")
	OldBadDebtCate		= 	TextField("Old Bad Debt Expense Category",description="2-%s" %"Loan Product Category")
	NewBadDebtCate 		= 	TextField("New Bad Debt Expense Category",description="2-%s" %"Loan Product Category")
	OldReserveCate 		= 	TextField("Old Reserve Loan Loss Category",description="2-%s" %"Loan Product Category")
	
	AIRAmount 			= 	TextField("Accrue Interest Amount", default=0,description="1-%s" %"Other Loan Contract Info")
	IICAmount 			= 	TextField("Interest Income Amount", default=0,description="1-%s" %"Other Loan Contract Info")
	BadDebtAmount 		= 	TextField("Bad Debt Amount", default=0,description="1-%s" %"Other Loan Contract Info")
	ReserveAmount 		= 	TextField("Reserve Loan Loss Amount", default=0,description="1-%s" %"Other Loan Contract Info")
	NewReserveCate 		=	TextField("New Reserve Loan Loss Category",description="2-%s" %"Loan Product Category")
	
 	def validate_NewLoanProduct(form,field):
		OldLoanProduct 			= 		request.form['OldLoanProduct']
		LoanProductObj 			= 		MKT_LOAN_PRODUCT.query.get(OldLoanProduct)
		LoanDes 				= 		LoanProductObj.Description
		NewLoanProduct 			= 		request.form['NewLoanProduct']
		if int(NewLoanProduct) == int(OldLoanProduct):
			raise ValidationError(Markup("Please check loan product again. Can't change from <b>%s</b> to <b>%s</b>."%(LoanDes,LoanDes)))
 		
	def validate_RangeLoanTerm(form,field):
		try:
			OldTerm 		 		= 		request.form['Term']
			NewTerm 	 			= 		request.form['RangeLoanTerm']
			NewTerm 				= 		NewTerm.split('-')
			if int(OldTerm) <=	12 and int(NewTerm[0]) >= 12:
				raise  ValidationError("Loan that less than one year can't change to loan product that more than one year")

			if int(OldTerm)	>	12 and int(NewTerm[1])<=12:
				raise  ValidationError("Loan that more than one year can't change to loan product that less than one year")
		except Exception as e:
			raise ValidationError("%s" %e)

	def validate_LoanID(form,field):
		NewLoanID 		= 		request.form['LoanID']
		OldLoanID 		= 		MKT_CHANGE_LOAN_PRODUCT_INAU.query.filter(MKT_CHANGE_LOAN_PRODUCT_INAU.LoanID==NewLoanID).first()
		if OldLoanID:
			raise ValidationError(Markup("<b>%s</b> is existing in change loan product INAU record <b>%s</b> please authorize old record before create new record."%(NewLoanID,OldLoanID.ID)))

	def validate_RangeIntRate(form,field):
		LoanID 				= 		request.form['LoanID']
		LoanProduct 		= 		request.form['NewLoanProduct']
		InterestRate 		= 		request.form['InterestRate']
		LoanContract	 	= 		MKT_LOAN_CONTRACT.query.get(LoanID)
		LoanIDOld 			= 		LoanContract.LoanProduct
		LoanProductOld 		= 		MKT_LOAN_PRODUCT.query.get(LoanIDOld)
		LoanProductNew 		= 		MKT_LOAN_PRODUCT.query.get(LoanProduct)
		Currency 		 	= 		LoanContract.Currency
		Product  		 	= 		LoanProduct + Currency
		InterestRateQuery 	= 		MKT_INTEREST_RATE.query.get(Product)
		InterestRange 		=  	    InterestRateQuery.Rate
		InterestRange		=		InterestRange.split()
		if len(InterestRange)==1:
		
			if InterestRate > InterestRange[0]:
		
				raise ValidationError(Markup('Interest Rate <b>%.2f</b> of <b>%s</b> can not change to <b>%.2f</b> of new loan product <b>%s</b>.'%(float(InterestRate),str(LoanProductOld.Description),float(str(InterestRange[0])),str(LoanProductNew.Description))))
		else:

			MinInterest 		= 		float(InterestRange[0])

			MaxInterest 		= 		float(InterestRange[1])

			if not isInRange(MinInterest, float(InterestRate), MaxInterest):

				raise ValidationError(Markup("Interest Rate <b>%.2f</b> of %s not in range <b>%.2f</b> - <b>%.2f</b> of new loan product <b>%s</b>."%(float(InterestRate),str(LoanProductOld.Description),float(InterestRange[0]),float(InterestRange[1]),str(LoanProductNew.Description))))
	
	def validate_OutstandingAmount(form,field):
		ID 		 		= 	request.form['LoanID']
		RepScheduleObj 	= 	MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==ID).\
													order_by(MKT_REP_SCHEDULE.No.desc()).\
													first()
		if RepScheduleObj.CollectionDate < str(mktdate.getBankDate()):
			PastDueObj 		= 	MKT_PAST_DUE.query.filter(MKT_PAST_DUE.TotODAmount>0).\
														filter(MKT_PAST_DUE.TotPenaltyDue>0).\
														filter(MKT_PAST_DUE.TotPrincipalDue==0).\
														filter(MKT_PAST_DUE.TotInterestDue==0).\
														filter(MKT_PAST_DUE.TotChargeDue==0).\
														filter(MKT_PAST_DUE.LoanID == ID).first()
			if PastDueObj:
				raise ValidationError(Markup("<b>%s</b> is reaches maturity and has past due with outstanding amount equal 0 but has penalty."%(ID)))
		Index
	@staticmethod
	def setDisable():
		Fields = [('InterestRate'), ('Term'),
				  ('AssetClass'), ('OutstandingAmount'),
				  ('OldLOCate'),('OldAIRCate'),
				  ('OldIICCate'),('OldBadDebtCate'),
				  ('OldReserveCate'),('AIRAmount'),
				  ('IICAmount'),('BadDebtAmount'),
				  ('ReserveAmount'),('MoreThanOneYear'),
				  ('NewLOCate'),('NewAIRCate'),
				  ('NewIICCate'),('NewBadDebtCate'),
				  ('NewReserveCate'),('MoreThanOneYear'),
				  ('RangeIntRate'),('RangeLoanSize'),
				  ('RangeLoanTerm'),('OldLoanProduct'),
				  ('TransactionDate'),('OldLoanPurpose')
				]
		return Fields

	@staticmethod
	def hotField():
		hotfield         = []
		fielddisplay 	 = "$('#OldLoanProduct').select2('data', {'id':data.OldLoanProduct,'text':data.OldProDesc})"
		fielddisplay 	+= ",$('#OldLoanPurpose').select2('data', {'id':data.OldLoanPurpose,'text':data.OldLoanPurposeDesc})"
		fielddisplay 	+= ",$('#NewLoanPurpose').select2('data', {'id':data.NewLoanPurpose,'text':data.NewLoanPurposeDesc})"
		fielddisplay 	+=",$('#InterestRate').val(data.InterestRate)"
		fielddisplay 	+=",$('#Term').val(data.Term)"
		fielddisplay 	+=",$('#AssetClass').val(data.AssetClass)"
		fielddisplay	+=",$('#MoreThanOneYear').val(data.MoreThanOneYear)"
		fielddisplay 	+=",$('#OldLOCate').val(data.OldLOCate)"
		fielddisplay 	+=",$('#OldAIRCate').val(data.OldAIRCate)"
		fielddisplay	+=",$('#OldIICCate').val(data.OldIICCate)"	
		fielddisplay	+=",$('#OldBadDebtCate').val(data.OldBadDebtCate)"	
		fielddisplay	+=",$('#OldReserveCate').val(data.OldReserveCate)"
		fielddisplay 	+=",$('#OutstandingAmount').val(data.OutstandingAmount)"
		fielddisplay 	+=",$('#AIRAmount').val(data.AIRAmount)"
		fielddisplay 	+=",$('#IICAmount').val(data.IICAmount)"
		fielddisplay	+=",$('#BadDebtAmount').val(data.BadDebtAmount)"	
		fielddisplay	+=",$('#ReserveAmount').val(data.ReserveAmount)"	
		varname 		 = "LoanID:$('#LoanID').val()"
		fun 			 = ["LoanID", varname, fielddisplay, "/Morakot/LoanContractInfo", "change"]
		hotfield.append(fun)

		fielddisplay 	 ="$('#NewLOCate').val(data.NewLOCate)"
		fielddisplay 	+=",$('#NewAIRCate').val(data.NewAIRCate)"
		fielddisplay	+=",$('#NewIICCate').val(data.NewIICCate)"	
		fielddisplay	+=",$('#NewBadDebtCate').val(data.NewBadDebtCate)"	
		fielddisplay	+=",$('#NewReserveCate').val(data.NewReserveCate)"
		fielddisplay 	+=",$('#RangeIntRate').val(data.RangeIntRate)"
		fielddisplay	+=",$('#RangeLoanSize').val(data.RangeLoanSize)"
		fielddisplay 	+=",$('#RangeLoanTerm').val(data.RangeLoanTerm)"
		varname 		 = "NewLoanProduct:$('#NewLoanProduct').val(),LoanID:$('#LoanID').val()"
		fun 			 = ["NewLoanProduct", varname, fielddisplay, "/Morakot/NewLoanProductInfo", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod 
	def IsAcceptOverride():
		changeLoanProduct 		= 		ChangeLoanProduct()
		LoanID 			 		= 		request.form['LoanID']
		LoanProduct 	 		= 		request.form['NewLoanProduct']
		OldLoanProduct 			= 		request.form['OldLoanProduct']
		InterestRate     		=		request.form['InterestRate']
		Term 			 		= 		request.form['Term']
		OutstandingAmount 		= 		request.form['OutstandingAmount']
		AssetClass 				= 		request.form['AssetClass']
		Override 				= 		False
		Msg 					= 		""
		#CheckInterestRate  		= 		changeLoanProduct.checkInterestRate(LoanID,LoanProduct,InterestRate)
		CheckTerm 				= 		changeLoanProduct.checkTerm(LoanID,LoanProduct,Term)
		CheckOutStanding 		= 		changeLoanProduct.checkOutstanding(LoanID,LoanProduct,OutstandingAmount)
		CheckAssetClass 		= 		changeLoanProduct.checkAssetClass(LoanID,AssetClass)

		# if CheckInterestRate:
		# 	Override   			= 		True
		# 	Msg 				= 		CheckInterestRate
		if CheckTerm:
			Override   			= 		True
			Msg 			   += 		CheckTerm
		if CheckOutStanding:
			Override   			= 		True
			Msg 			   += 		CheckOutStanding
		if CheckAssetClass:
			Override   			= 		True
			Msg 			   += 		CheckAssetClass
		Msg 				   += 		"<br/>Do you want to procceed?"
		return Override,Msg

	@staticmethod
	def beforeInsert():
		changeLoanProduct 		= 	""
		changeLoanProduct 		= 	ChangeLoanProduct()
		AuthLevel				=	g.getNAuthorize
		Status					=	True
		if AuthLevel == 0:
			ID 					= 	request.form['ID']
			LoanID				=	request.form['LoanID']
			LoanProduct			=	request.form['NewLoanProduct']
			LoanPurpose 		= 	request.form['NewLoanPurpose']
			Note 				= 	request.form['Description']
			TransactionDate 	= 	request.form['TransactionDate']
			AssetClass 			= 	request.form['AssetClass']
			if Status:
				Status 				= 		changeLoanProduct.processChangeLoanProduct(LoanID,LoanProduct,LoanPurpose,Status,ID,Note)
		return Status
	@staticmethod
	def beforeAuthorize():
		try:
			ID 							= 		g.formID
			Status 						= 		True
			ChangeLoanProductObj 		=		MKT_CHANGE_LOAN_PRODUCT_INAU.query.get(ID)
			Note 						= 		ChangeLoanProductObj.Description
			LoanAmendMentObj 			= 		MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.LoanID == ChangeLoanProductObj.LoanID).\
																		 filter(MKT_LOAN_AMENDMENT.Operation == "AMT").\
																		 filter(MKT_LOAN_AMENDMENT.AmendDate >= ChangeLoanProductObj.TransactionDate).first()

			ManualLoanCollect 			= 		MKT_MANUAL_LOAN_COLLECTION.query.filter(MKT_MANUAL_LOAN_COLLECTION.LoanID == ChangeLoanProductObj.LoanID).\
																			    filter(MKT_MANUAL_LOAN_COLLECTION.TranDate >= ChangeLoanProductObj.TransactionDate).first()

			LoanTerminate 				= 		MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.LoanID == ChangeLoanProductObj.LoanID).\
																		 filter(MKT_LOAN_AMENDMENT.AmendDate >= ChangeLoanProductObj.TransactionDate).\
																		 filter(MKT_LOAN_AMENDMENT.Operation == "TMN").first()

			LoanChangeClass 			= 		MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID == ChangeLoanProductObj.LoanID).\
																	    filter(MKT_LOAN_CONTRACT.AssetClass != ChangeLoanProductObj.AssetClass).\
																	    filter(ChangeLoanProductObj.TransactionDate<=str(mktdate.getBankDate())).first()
			changeLoanProduct 			= 		ChangeLoanProduct()
			if not ChangeLoanProductObj:
				flash(msg_error + "Change Loan Product %s not found." %ID)
				Status					=		False
			else:
				if LoanAmendMentObj:
					flash(msg_error+ Markup("<b>%s</b> have been amended so please delete this record <b>%s</b> and create new record."%(ChangeLoanProductObj.LoanID,ID)))
					Status 			= 		False
				if ManualLoanCollect:
					flash(msg_error+ Markup("<b>%s</b> have been collected so please delete this record <b>%s</b> and create new record."%(ChangeLoanProductObj.LoanID,ID)))
					Status 			= 		False
				if LoanTerminate:
					flash(msg_error+ Markup("<b>%s</b> have been terminated so please delete this record <b>%s</b> and create new record."%(ChangeLoanProductObj.LoanID,ID)))
					Status 			= 		False
				if LoanChangeClass:
					flash(msg_error+ Markup("<b>%s</b> have been changed class so please delete this record <b>%s</b> and create new record."%(ChangeLoanProductObj.LoanID,ID)))
					Status 			= 		False
				if ChangeLoanProductObj.TransactionDate < str(mktdate.getBankDate()):
					flash(msg_error+ Markup("Transaction date of this record <b>%s</b> must be the same system date please delete old record before create new."%ID))
					Status 			= 		False
				LoanID 					= 		ChangeLoanProductObj.LoanID
				LoanProductNew 			= 		ChangeLoanProductObj.NewLoanProduct
				LoanPurposeNew 			= 		ChangeLoanProductObj.NewLoanPurpose
				if Status:
					Status 					= 		changeLoanProduct.processChangeLoanProduct(LoanID,LoanProductNew,LoanPurposeNew,Status,ID,Note)
			return Status

		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()

	@staticmethod
	def IsAcceptOverrideINAU():
		changeLoanProduct 		= 		ChangeLoanProduct()
		ID 			 			= 		g.formID
		ChangeLoanProductObj 	= 		MKT_CHANGE_LOAN_PRODUCT_INAU.query.get(ID)
		LoanID 					= 		ChangeLoanProductObj.LoanID
		LoanProduct 	 		= 		ChangeLoanProductObj.NewLoanProduct
		InterestRate     		=		ChangeLoanProductObj.InterestRate
		Term 					= 		ChangeLoanProductObj.Term
		OutstandingAmount 		= 		ChangeLoanProductObj.OutstandingAmount
		AssetClass 				= 		ChangeLoanProductObj.AssetClass
		Override 				= 		False
		Msg 					= 		""
		LoanContractkk 			= 		MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID==LoanID).all()
		if LoanContractkk:
			#CheckInterestRate  		= 		changeLoanProduct.checkInterestRate(LoanID,LoanProduct,InterestRate)
			CheckTerm 				= 		changeLoanProduct.checkTerm(LoanID,LoanProduct,Term)
			CheckOutStanding 		= 		changeLoanProduct.checkOutstanding(LoanID,LoanProduct,OutstandingAmount)
			CheckAssetClass 		= 		changeLoanProduct.checkAssetClass(LoanID,AssetClass)
			# if CheckInterestRate:
			# 	Override   			= 		True
			# 	Msg 				= 		CheckInterestRate
			if CheckTerm:
				Override   			= 		True
				Msg 			   += 		CheckTerm
			if CheckOutStanding:
				Override   			= 		True
				Msg 			   += 		CheckOutStanding
			if CheckAssetClass:
				Override   			= 		True
				Msg 			   += 		CheckAssetClass
			Msg 				   += 		'<br/>Do you want to procceed?'
			return Override,Msg

