from app.mktcore.imports 					import *
from .models 								import *
from sqlalchemy 							import *

from app.urlregister 						import *
from app.tools.batchjob.mktsyshealthcheck 	import *
from app.SystemHealthCheck.models 			import *
from app.mktcore.globalfunction 			import *
from flask 									import jsonify
from app.Branch.models 						import MKT_BRANCH

import app.tools.user 							as mktuser
import app.tools.mktdashboard 					as mktdashboard
import app.Dashboard.widget 					as UserWidget
import app.tools.mktreport 						as mktreport
import app.tools.mktgl 							as mktgl
import app.tools.mktsetting 					as mktsetting
import ast
import inspect


@app.route('/Morakot/SystemHealthCheckRefresh', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeUpdateSystemHealthCheck():
	SystemHealthCheck = SystemHealthCheckProcessor()
	SystemHealthCheck.runAllItems()
	Obj  	=	mktdashboard.WidgetManager().getSysHealthCheckLog()
	return render_template("dashboard/widget_updatesyshealthcheck.html", Obj=Obj)


@app.route('/Morakot/SystemHealthSuggestion/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeSystemHealthSuggestion():
	Data 			= 	request.args.to_dict()
	Category 		= 	Data.get('Category','')
	Branch 			= 	Data.get('Branch','')
	ItemName 		=	Data.get('ItemName','')
	Kwargs			=	{ 'Branch':Branch,
						  'ItemName':ItemName,
						  'Category':Category
						}

	SystemHealthCheck = SystemHealthCheckProcessor()
	DetailMessageSuggest =  SystemHealthCheck.suggestion(**Kwargs)
	return jsonify(DetailMessageSuggest)
	
	# return "ItemName"


@app.route('/Morakot/API/CashPositionRefresh', methods=['GET', 'POST'])
@app.route('/Morakot/CashPositionRefresh', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeCashPositionRefresh():
	Obj = mktdashboard.WidgetManager().getWidgetCashPosition()
	if "API" in request.url:
		# return jsonify(data = Obj , message = {"message":[""]} , header= 'Cash Position' , title = 'Cash Position'),200
		return jsonify(Obj)
	return render_template("dashboard/widget_cashposition.html",
							Obj=Obj)


@app.route('/Morakot/API/UnauthorizeRefresh', methods=['GET', 'POST'])
@app.route('/Morakot/UnauthorizeRefresh', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeUnauthorizeRefresh():
	QueryObj = mktdashboard.WidgetManager().getWidgetUnauthorize()
	print "-[=-=-=0-=-0=0"
	if "API" in request.url:
		# return jsonify(data = QueryObj , message = {"message":[""]} , header = 'Unauthorize' , title = 'Unauthorize'),200
		return jsonify(QueryObj)
	return render_template("dashboard/unauthorize.html",
							QueryObj=QueryObj)


@app.route('/Morakot/API/UserRefresh', methods=['GET', 'POST'])
@app.route('/Morakot/UserRefresh', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeUserRefresh():
	UserObj = UserWidget.getWidgetOnlineUser()
	if "API" in request.url:
		# return jsonify(data = UserObj , message = {"message":[""]} , header = 'User' , title = 'User'),200
		return jsonify(UserObj)
	return jsonify(UserObj = UserObj.all());

# Unauthorize Detail
@app.route('/Morakot/API/Unauthorize/<getID>', methods=['GET', 'POST'])
@app.route('/Morakot/Unauthorize/<getID>', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeListUnauthorize(getID=''):
	Page 		= int(request.args.get("offset",1))
	PerPage 	= int(request.args.get("limit",15))
	OrderBy 	= str(request.args.get("order_by" , "ID"))
	FilterBy 	= str(request.args.get("filter_by" , "ID"))
	Search 		=	str(request.args.get("search",""))
	# from app.urlregister import *
	Module = __import__("app.urlregister")
	QueryObj 		= []
	Unauthorize 	= []

	if getID:
		UserObj = mktuser.getUser()
		Role = UserObj.Role
		DashboardObj 		= mktdashboard.Dashboard()
		WIDGET_UNAUTHORIZE = DashboardObj.getDashboardUnauth()
		Value = WIDGET_UNAUTHORIZE.get(getID)
		Title = getID
		Url   = Value[0]
		Table = getattr(Module,Value[1])
		NAuthorize = 0
		Module_Form = MKT_FORM.query.filter(MKT_FORM.URL==Url).first()
		if Module_Form:
			NAuthorize = Module_Form.NAuthorize

		if Role == "99":
			Branch = request.args.get("Branch").strip() if "Branch" in request.args else "ALL"
			# QueryObj 		= Table.query.order_by(Table.ID.desc())
			QueryObj 		= db.session.query(Table).\
										join(MKT_BRANCH,MKT_BRANCH.ID==Table.Branch).\
										order_by(Table.ID.desc())
			if Branch != 'ALL':
				BranchList = Branch.split()
				QueryObj = QueryObj.filter(Table.Branch.in_(BranchList))
		else:

			Branch = request.args.get("Branch").strip() if "Branch" in request.args else ''
			BranchList = Branch.split()
			CheckBranch = mktuser.checkAccessBrach(Branch)
			if not CheckBranch.get('Check'): # User don't permission to view this branch
				flash(msg_warning+"Permission denied to access branch %s. Please contact your system administrator for more details." % CheckBranch.get("Branch"))
				BranchList = DefaultBranch
			if not Branch:
				AccessBranch = UserObj.AccessBranch.strip()
				BranchList = AccessBranch.split()

			QueryObj 		= db.session.query(Table ).\
										join(MKT_BRANCH,MKT_BRANCH.ID==Table.Branch).\
										order_by(Table.ID.desc())
			if 'ALL' not in BranchList:
				QueryObj = QueryObj.filter(Table.Branch.in_(BranchList))

		if len(Value)==3:
			Condition=Value[2]
			QueryObj = QueryObj.filter(*Condition)
		if "API" in request.url or checkContentType() == "json":
			Fields = ["ID","Status","Inputter","Createdon","Authorizer","Authorizeon","Branch"]
			Url    = "/%s/"%Url
			Resulte,Status = Pagination.list(important_field=['ID','Inputter'],querys=QueryObj,action=Url,operation="ListAuth",model=Table,page=Page,per_page=PerPage,
										order_by=OrderBy,filter_by=FilterBy,search=Search,fields=Fields)
			Resulte.update({"title":Title,"type_url":"Form",'url':'/Unauthorize/%s'%getID , 'header':'Unauthorize Detail' , 'title':'Unauthorize Detail'})
			return jsonify(Resulte),Status

	return render_template("dashboard/unauthorize_detail.html",
							QueryObj=QueryObj.limit(3000),
							Title=Title,
							Url=Url,
							Branch=Branch,
							User=UserObj.ID,
							NAuthorize=NAuthorize,
							getattr=getattr)

@app.route('/Morakot/API/Dashboard', methods=['GET'])
@app.route('/Morakot/API/Dashboard/', methods=['GET'])
@app.route('/Morakot/Dashboard', methods=['GET'])
@app.route('/Morakot/Dashboard/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeDashboard():
	User = mktuser.getUser()
	ChangableBranch = session['ChangeBranch']
	# Branch = ("ALL" if request.args.get('Branch') != "ALL" else ChangableBranch) if "Branch" in request.args else ChangableBranch
	Branch = request.args.get('Branch') if "Branch" in request.args else ChangableBranch
	session["FilterBranch"] = Branch
	AccessBranch = User.AccessBranch
	LOCAL_REGISTER_PATH = mktsetting.getAppSetting('LOCAL_REGISTER_PATH')
	WidgetManager = mktdashboard.WidgetManager
	AccessBranch = mktuser.getAccessBranch()
	# AccessBranchDict = {}
	AccessBranchList = []
	for Br in AccessBranch:		
		AccessBranchList.append({'id':str(Br.ID), 'text':str(Br.Description)})
	
	if LOCAL_REGISTER_PATH:
		try:
			path = LOCAL_REGISTER_PATH + ".tools.mktdashboard"
			mktdashboardex = __import__(path, fromlist=['WidgetManagerEx'])
			WidgetManager = mktdashboardex.WidgetManagerEx
		except ImportError as e:
			print e
			
		except Exception as e:
			raise

	# Get record dashboard from user login
	WM = WidgetManager(Branch=Branch)
	print "================================", Branch, request.args.get('Branch')
	DashboardObj 	= WM.getDashboardObj()
	WidgetObj 		= []

	if DashboardObj:
		# Get all widget 
		WidgetObj 	= WM.getWidgetObj()		

	if "API" in request.url:
		DashboardObjLis = []
		for row in DashboardObj:	
			if row.Size1:
				for item in WidgetObj:
					if row.Widget1 == item[0]:
						try:
							AddSize = dict(item[2]())
							AddSize["size"] = row.Size1 
							DashboardObjLis.append(AddSize)	
						except:
							pass						
			if row.Size2:
				for item in WidgetObj:
					if row.Widget2 == item[0]:	
						try:
							AddSize = dict(item[2]())
							AddSize["size"] = row.Size2 
							DashboardObjLis.append(AddSize)	
						except:
							pass					
			if row.Size3:
				for item in WidgetObj:
					if row.Widget3 == item[0]:
						try:
							AddSize = dict(item[2]())
							AddSize["size"] = row.Size3 
							DashboardObjLis.append(AddSize)	
						except:
							pass
		# print "data", DashboardObjLis
		return jsonify(data=DashboardObjLis,header='Dashboard' , message={"message":[""]} , type="Dashboard"),200
		
	return render_template("dashboard/dashboard.html",
							float=float,
							int=int,
							getattr=getattr,
							DashboardObj=DashboardObj,
							WidgetObj=WidgetObj,
							User=User,
							Branch=Branch,
							AccessBranch=AccessBranchList
							)


@app.route('/Morakot/API/BranchProductivityRefresh', methods=['GET'])
@app.route('/Morakot/BranchProductivityRefresh', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeUpdateBranchProductivity():
	
	# Get record dashboard from user login
	ObjUpdate 	= mktdashboard.WidgetManager().updateBranchProductivity()

	Obj = mktdashboard.WidgetManager().getWidgetBranchProductivity()

	if "API" in request.url:
		# return jsonify(data = Obj , message = {"message":[""]} , header = 'Branch Productivity' , title = 'Branch Productivity'),200
		return jsonify(Obj)

	return render_template("dashboard/widget_branchproductivity.html",
							Obj = Obj)
	

@app.route('/Morakot/SysHealthCheck/<Code>', methods=['GET'])
@app.route('/Morakot/API/SysHealthCheck/<Code>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeSysHealthCheck(Code = ""):
	BranchObj 	= MKT_BRANCH.query
	Obj 		=	db.session.query(MKT_SYSTEM_HEALTH_CHECK).filter(MKT_SYSTEM_HEALTH_CHECK.Code==Code).first()
	return render_template("dashboard/widget_syshealthcheck.html",
		Obj = Obj,
		#Convert from string to dictionary
		ErrorDetail = ast.literal_eval(Obj.ErrorDetail),
		BranchObj=BranchObj
		)

@app.route('/Morakot/SysHealthCheckDetail/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeSysHealthCheckDetail():

	#Get value from url
	Data 			= 	request.args.to_dict()
	BranchObj 		= 	MKT_BRANCH.query
	Obj 			=	db.session.query(MKT_SYSTEM_HEALTH_CHECK).filter(MKT_SYSTEM_HEALTH_CHECK.Code==Data.get('Code')).first()
	TemErrorDetail 	= 	ast.literal_eval(Obj.ErrorDetail)
	ErrorDetail 	= 	TemErrorDetail.get(Data.get('Branch'))
	TotalError 		= 	TemErrorDetail[Data.get('Branch')]['Total']
	return render_template("dashboard/widget_syshealthcheck_details.html",
		Obj 		= 	Obj,
		ErrorDetail = 	ErrorDetail,
		Total 		=	TotalError,
        Branch 		= 	Data.get('Branch'),
		BranchObj	=	BranchObj
		)


@app.route('/Morakot/API/OverviewInquiryRefresh', methods=['GET', 'POST'])
@app.route('/Morakot/OverviewInquiryRefresh', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeOverviewInquiryRefresh():
	QueryObj = mktdashboard.WidgetManager().getOverviewInquiry()
	if "API" in request.url:
		# return jsonify(data = QueryObj , message = {"message":[""]} , header = 'Overview Inquiry' , title = 'Overview Inquiry'),200
		return jsonify(QueryObj)
	return render_template("dashboard/overview_inquiry.html",
							Obj=QueryObj)

@app.route('/Morakot/API/OverviewInquiryIndRefresh', methods=['GET', 'POST'])
@app.route('/Morakot/OverviewInquiryIndRefresh', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeOverviewInquiryIndRefresh():
	QueryObj = mktdashboard.WidgetManager().getOverviewInquiryInd()
	POCustomerStatusObj = mktdashboard.getPOCustomerStatus()
	if "API" in request.url:
		# return jsonify(data = QueryObj , message = {"message":[""]} , header = 'Overview Inquiry Ind' , title = 'Overview Inquiry Ind'),200
		return jsonify(QueryObj)
	return render_template("dashboard/overview_inquiry_ind.html",
							Obj=QueryObj,
							POCustomerStatusObj=POCustomerStatusObj)


@app.route("/Morakot/WorkflowRefresh", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def WorkflowRefresh():
    QueryObj = mktdashboard.WidgetManager().WorkflowWidget()
    return render_template("dashboard/workflow.html",Obj=QueryObj)


@app.route("/Morakot/UserRecentlyRefresh", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def userRecently():
    QueryObj = mktdashboard.WidgetManager().WorkflowWidget()
    return render_template("dashboard/user_recently.html",Obj=QueryObj)


@app.route('/Morakot/API/LoanOstByProductRefresh', methods=['GET'])
@app.route('/Morakot/LoanOstByProductRefresh', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def updateLoanOutstandingByPro():
	# Branch = session['FilterBranch']
	Branch = session['FilterBranch'] if request.args.get("Branch") == "" else request.args.get("Branch")
	if "API" in request.url :
		Branch = session['ChangeBranch']
	
	QueryObj = mktdashboard.WidgetManager(Branch).updateLoanOutstandingByPro()

	return QueryObj


@app.route('/Morakot/API/LoanOstByCurrRefresh', methods=['GET'])
@app.route('/Morakot/LoanOstByCurrRefresh', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def updateLoanOutstandingByCurr():
	# Branch = session['FilterBranch']
	Branch = session['FilterBranch'] if request.args.get("Branch") == "" else request.args.get("Branch")
	if "API" in request.url :
		Branch = session['ChangeBranch']

	QueryObj = mktdashboard.WidgetManager(Branch).updateLoanOutstandingByCurr()

	return QueryObj


@app.route('/Morakot/API/LoanColDisRefresh', methods=['GET'])
@app.route('/Morakot/LoanColDisRefresh', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def updateLoanCollectionAndDisbursement():
	Branch = session['FilterBranch'] if request.args.get("Branch") == "" else request.args.get("Branch")
	
	# B = request.args.get("Branch")
	if "API" in request.url :
		Branch = session['ChangeBranch']# if request.args.get("Branch") == "" else request.args.get("Branch")
	
	QueryObj = mktdashboard.WidgetManager(Branch).updateLoanCollectionAndDisbursement()
	
	return QueryObj


@app.route('/Morakot/API/FinancialReportRefresh', methods=['GET'])
@app.route('/Morakot/FinancialReportRefresh', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def updateFinancialReport():
	# Branch = session['FilterBranch']
	Branch = session['FilterBranch'] if request.args.get("Branch") == "" else request.args.get("Branch")
	if "API" in request.url :
		Branch = session['ChangeBranch']
	
	QueryObj = mktdashboard.WidgetManager(Branch).updateFinancialReport()

	return QueryObj

