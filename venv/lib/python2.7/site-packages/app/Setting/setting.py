from app.mktcore.imports 		import *
from .forms 					import *
from .models 					import *
from .set_term_deposit 			import *
from .notification 				import *
from app.Currency.models 		import MKT_CURRENCY
from app.Category.models 		import MKT_CATEGORY
from app.mktcore.session 		import *
from .builder 					import *
from app.Role.models 			import *
from app.Module.models 			import *

import sqlalchemy 			
from sqlalchemy.sql.expression 	import cast
import collections
import app.tools.user 		as mktuser
import app.tools.mktaudit 	as mktaudit
import app.tools.mktsetting as mktsetting

registerCRUD(admin, '/AppSetting', 'AppSetting', FRM_APP_SETTING, [MKT_APP_SETTING])
registerCRUD(admin, '/TermDepositSetting', 'TermDepositSetting', FRM_TERM_DEPOSIT_SETTING, [MKT_TERM_DEPOSIT_SETTING])
registerCRUD(admin, '/NotificationSetting', 'NotificationSetting',FRM_NOTIFICATION_SETTING, [MKT_NOTIFICATION_SETTING])


@app.route("/Morakot/Settings/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAllSetting():
	ErrorMsg    = []
	getCheck    = checkAccess("/Morakot/Setting","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	#set setting for disable or enable notification
	ENABLE_SMS = mktsetting.getAppSetting("ENABLE_SMS")
	if not ENABLE_SMS:
		ENABLE_SMS = "N"

	ENABLE_EMAIL = mktsetting.getAppSetting("ENABLE_EMAIL")
	if not ENABLE_EMAIL:
		ENABLE_EMAIL = "N"

	ShowNotification = "Y"
	if (ENABLE_SMS == "N" and ENABLE_EMAIL == "N"):
		ShowNotification = "N"

	# List All Setting 
	return render_template("setting/Setting.html",
								ShowNotification=ShowNotification)

@app.route("/Morakot/GeneralSetting/", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def getGeneralSetting():

	ErrorMsg    = []
	getCheck    = checkAccess("/Morakot/Setting","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	form 		= FRM_SETTING()
	currency 	= MKT_CURRENCY.query.all()
	setting 	= MKT_SETTING.query.get("SYSTEM")

	if request.method == 'POST':

		ATTEMPS 				= 	request.form['ATTEMPS']
		TIME_OUT 				= 	request.form['TIME_OUT']
		PASSWORD_LENGTH 		= 	request.form['PASSWORD_LENGTH']
		PASSWORD_NUM 			= 	request.form['PASSWORD_NUM']
		PASSWORD_CAP 			= 	request.form['PASSWORD_CAP']
		PASSWORD_LOW 			= 	request.form['PASSWORD_LOW']
		MCODE					=	request.form['MCODE']
		NUSER					=	request.form['NUSER']
		EXPIRY					=	request.form['EXPIRY']
		WEEKEND_SAT 			= 	'TRUE' if 'WEEKEND_SAT' in request.form else 'FALSE'
		WEEKEND_SUN 			= 	'TRUE' if 'WEEKEND_SUN' in request.form else 'FALSE'
		Notification 			=	'TRUE' if 'Notification' in request.form else 'FALSE'
		NotificationInterval 	= 	request.form['NotificationInterval']
		SYSTEM_STATUS 			=	'1' if 'SYSTEM_STATUS' in request.form else '0'
		JOURNAL_ENTRY_EXCLUDED 	=	request.form['JOURNAL_ENTRY_EXCLUDED']
		Msg 					=	""
		
		if JOURNAL_ENTRY_EXCLUDED:

			ExcludedCats 	=	JOURNAL_ENTRY_EXCLUDED.split()
			
			for item in ExcludedCats:

				CheckCat 	=	MKT_CATEGORY.query.get(item)

				if not CheckCat:
					Msg += item + ", "

		if Msg:

			flash(msg_warning + "Category " + Msg[:-2] + " not found.")

		else:

			if setting:
				setting.ATTEMPS 				= 	ATTEMPS
				setting.TIME_OUT 				= 	TIME_OUT
				setting.PASSWORD_LENGTH 		= 	PASSWORD_LENGTH
				setting.PASSWORD_NUM 			= 	PASSWORD_NUM
				setting.PASSWORD_CAP 			= 	PASSWORD_CAP
				setting.PASSWORD_LOW 			= 	PASSWORD_LOW
				setting.WEEKEND_SAT 			= 	WEEKEND_SAT
				setting.WEEKEND_SUN 			= 	WEEKEND_SUN
				setting.Notification 			= 	Notification
				setting.NotificationInterval 	= 	NotificationInterval
				setting.SYSTEM_STATUS 			=	SYSTEM_STATUS
				setting.JOURNAL_ENTRY_EXCLUDED 	=	JOURNAL_ENTRY_EXCLUDED
				setting.MCODE					=	MCODE
				setting.NUSER					=	NUSER
				setting.EXPIRY					=	EXPIRY


			else:
				setting = MKT_SETTING(
						  ID 						= 	"SYSTEM",
						  ATTEMPS 					= 	ATTEMPS,
						  TIME_OUT 					= 	TIME_OUT,
						  PASSWORD_LENGTH 			= 	PASSWORD_LENGTH,
						  PASSWORD_NUM 				= 	PASSWORD_NUM,
						  PASSWORD_CAP 				= 	PASSWORD_CAP,
						  PASSWORD_LOW 				= 	PASSWORD_LOW,
						  WEEKEND_SAT 				= 	WEEKEND_SAT,
						  WEEKEND_SUN 				= 	WEEKEND_SUN,
						  Notification 				= 	Notification,
						  NotificationInterval 		= 	NotificationInterval,
						  SYSTEM_STATUS 			= 	SYSTEM_STATUS,
						  JOURNAL_ENTRY_EXCLUDED 	=	JOURNAL_ENTRY_EXCLUDED,
						  MCODE						=	MCODE,
						  NUSER						=	NUSER,
						  EXPIRY					=	EXPIRY

					)

			db.session.add(setting)
			db.session.commit()
			flash("Settings was changed successfully!")
			event_code = "705"
			Message = mktnotification.getEventCode()[event_code]
			# notification    = mktnotification.getSignal(obj_id,self.model[0],"AUTH",event_code)
			path  = str(request.path).split('/')[2]

			getUserLogInID = session['getLogInID']
			mktnotification.insertNotify({  
						'ID':"",
			            'Path':path,
			            'Status':"AUTH",
			            'Code':event_code,
			            'Model':"",
			            'From':getUserLogInID, 
			            'To':getUserLogInID,
			            'Message':Message
			})
			return redirect(url_for('getGeneralSetting'))

	return render_template("setting/GeneralSetting.html",
							form=form,
							setting=setting,
							currency=currency)

@app.route("/Morakot/AppSetting/Config/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAppSettingConfig(ID=''):
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/AppSetting/Config/","ListLive")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	CurrentUser = mktuser.getUser().Role
	ModuleObj 	= MKT_MODULE.query.get
	Obj 	 	= db.session.query(MKT_APP_SETTING.Application).\
				  group_by(MKT_APP_SETTING.Application).order_by(MKT_APP_SETTING.Application.asc()).all()
	
	List 		= ['AppSetting/Config/%s'%c[0] for c in Obj]
	if str(CurrentUser) != '99': 
		SettingObj 	= MKT_FORM.query.join(MKT_ACCESS, MKT_FORM.FormID == MKT_ACCESS.Form).\
					  filter(MKT_ACCESS.AccessRight.ilike('%E%')).\
					  filter(MKT_ACCESS.ID == CurrentUser).\
					  filter(MKT_FORM.URL.in_(List)).\
					  all()
		List 		= [c.URL for c in SettingObj]
	
	return render_template("setting/setting_list.html",
									getValueByType 	=	getValueByType,
									List 	 		=	List,
									ModuleObj 		= 	ModuleObj
								)

@app.route("/Morakot/AppSetting/Config/<ID>", methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def editAppSettingConfig(ID=''):
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/AppSetting/Config/%s"%ID,"Edit")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)
	SettingTitle = ''
	if request.method == 'POST':
		IDs		= request.form.getlist("IDs[]")
		Values 	= request.form.getlist("Values[]")

		if IDs:
			Audit = mktaudit.getAuditrail()
			for i,ID in enumerate(IDs):
				
				AppSettingObj =	MKT_APP_SETTING.query.get(ID)
				
				if AppSettingObj and AppSettingObj.Value != Values[i]:

					AppSettingObj.Status      = Audit['Status']
					AppSettingObj.Curr        = Audit['Curr']
					AppSettingObj.Inputter    = Audit['Inputter']
					AppSettingObj.Createdon   = Audit['Createdon']
					AppSettingObj.Authorizer  = Audit['Authorizer']
					AppSettingObj.Authorizeon = Audit['Authorizeon']
					AppSettingObj.Branch 	  = Audit['Branch']
					AppSettingObj.Value 	  = Values[i]

					db.session.add(AppSettingObj)
					db.session.commit()

			flash("Application setting was successfully updated.")
			return redirect("/Morakot/AppSetting/Config/%s" %request.form.get('Application') )

		return redirect("/Morakot/AppSetting/Config/")

	else:
		SettingTitle = MKT_MODULE.query.get(ID).Description
		ListGroupByTab = db.session.query(MKT_APP_SETTING.GroupBy).\
									filter(MKT_APP_SETTING.Application==ID).\
									group_by(MKT_APP_SETTING.GroupBy).\
									order_by(MKT_APP_SETTING.GroupBy.asc())

		Apps = MKT_APP_SETTING.query.filter(MKT_APP_SETTING.Application==ID).\
									order_by(MKT_APP_SETTING.OrderBy.asc())
									# order_by(asc(cast(MKT_APP_SETTING.OrderBy, sqlalchemy.Integer)))
		if not Apps:
			flash(msg_warning + "Record not found.")
		return render_template("setting/edit_setting.html", 
									Apps = Apps, 
									Application = ID, 
									getValueByType = getValueByType,
									ListGroupByTab=ListGroupByTab,
									SettingTitle=SettingTitle
								)

def getValueByType(Value, Selected):
	try:
		
		Output = ""

		if Value.find('*') != -1:
			NewValue = Value.splitlines()
			NewValue = filter(None, NewValue)
			if len(NewValue) > 0:
				for item in NewValue:
					item = item.split('*')
					if item[0] == Selected:
						Output += "<option selected value='%s'>%s</option>" %(item[0], item[1])
					else:
						Output += "<option value='%s'>%s</option>" %(item[0], item[1])

		if Value.find('MKT_') != -1:
			
			Module 		= 	__import__("app.urlregister")
			RecordObj 	=	getattr(Module, Value).query

			if RecordObj:
				Output += "<option>-- None --</option>"
				for item in RecordObj:
					if item.ID == Selected:
						Output += "<option selected value='%s'>%s - %s</option>" %(item.ID, item.ID, item.Description)
					else:
						Output += "<option value='%s'>%s - %s</option>" %(item.ID, item.ID, item.Description)
			
		return Output

	except Exception, e:
		raise