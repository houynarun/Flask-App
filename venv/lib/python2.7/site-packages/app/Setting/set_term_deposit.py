from app.mktcore.wtfimports import *
from .models import *
from app.Account.models 	import *
from app.AccProduct.models 	import *

from app.Transaction.models 		import MKT_TRANSACTION
from app.Category.models 			import MKT_CATEGORY

def loadCategory():
	return MKT_CATEGORY.query

def loadTransaction():
	return MKT_TRANSACTION.query

class FRM_TERM_DEPOSIT_SETTING(exform):

	SavingTermCat 		=	QuerySelectField(requiredlabel("Term Deposit Cat", "*"),
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()]
							)

	SavingTermTran 		=	QuerySelectField(requiredlabel("Term Deposit Booking Transaction", "*"),
								query_factory=loadTransaction,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()]
							)

	AIPBookingTran 		=	QuerySelectField(requiredlabel("Accr Int Payables Booking Transaction", "*"),
								query_factory=loadTransaction,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()]
							)

	IEBookingTran 		=	QuerySelectField(requiredlabel("Int Expenses Booking Transaction", "*"),
								query_factory=loadTransaction,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()]
							)

	MaturedTran 		=	QuerySelectField(requiredlabel("Matured Date Transaction", "*"),
								query_factory=loadTransaction,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()]
							)

	RollOverTran 		=	QuerySelectField(requiredlabel("Roll-over Transaction", "*"),
								query_factory=loadTransaction,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()]
							)

	#SavingPlan

	PenType 	= SelectField("Penalty Type",
					choices=[('P', 'Percentage Base'), ('F', 'Fixed Base'),('R', 'Reduce Interest Rate'),('C', 'Custom')],
					default='P',
					description='1-Penalty'
				)

	PenaltyRate = TextField("Penalty Rate", [validators.Optional()],description='1-Penalty')
	PenCalBase 	= TextField("Penalty Cal Base", default=u'PR',description='1-Penalty')

	PenOption  	= SelectField("Penalty Option",
					choices=[('__None', '--None--'), ('A', 'Automatic by System'), ('M', 'Manual')],
					default='__None',
					validators=[validators.Required()],
					description='1-Penalty'
				)

	PenaltyTran  	= QuerySelectField(requiredlabel("Penalty Transaction", "*"),
								query_factory=loadTransaction,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()],
								description='1-Penalty'
							)
	PenaltyCat 		=	QuerySelectField(requiredlabel("Penalty Category", "*"),
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()],
								description='1-Penalty'
							)

	AllowOverInt= SelectField("Allow Penaty Over Int.",
					choices=[('N', 'No'), ('Y', 'Yes')],
					default='N',
					description='1-Penalty'
				)
	PreMatured 	= TextField("Pre-Matured Cal Base", default=u'',description='1-Penalty')

	SavingTran  	= QuerySelectField(requiredlabel("Saving Plan Transaction", "*"),
								query_factory=loadTransaction,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()],
								description='2-SavingPlan'
							)

	SavingPDTran  	= QuerySelectField(requiredlabel("Saving Plan PD Transaction", "*"),
								query_factory=loadTransaction,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()],
								description='2-SavingPlan'
							)
	CommitmentBonus	= TextField("Commitment Bonus at Maturity", default=u'',description='2-SavingPlan')

	#end

	@staticmethod
	def beforeInsert():
		try:
			ID = request.form['ID']
			if ID.upper() != "SYSTEM":
				raise ValidationError("The id is required only uppercase letter 'SYSTEM'")
				return False

			if ID == 'system' or ID == 'System':
				raise ValidationError("The id is required only uppercase letter 'SYSTEM'")
				return False

			return True
		except:
			raise
