from app.mktcore.wtfimports import *
from .models import *

from app.Transaction.models 		import MKT_TRANSACTION
from app.Category.models 			import MKT_CATEGORY
from app.Currency.models 			import MKT_CURRENCY
from app.FinancialReport.models 	import MKT_LINE_REPORT, MKT_LINE_REPORT_DE
#2018-06-05 - Inter-Branch
import app.tools.mktaccounting 		as mktaccounting
#end

def loadTransaction():
	return MKT_TRANSACTION.query

def loadCategory():
	return MKT_CATEGORY.query

def loadCurrency():
	return MKT_CURRENCY.query

def checkReportAndLine(Str):
	try:

		Msg 	= 	""
		Str 	=	Str.split()
		# Msg 	= 	Str

		if len(Str) == 2:

			ReportID 	= 	Str[0]
			LineNumber 	=	Str[1]

			Report 		=	MKT_LINE_REPORT.query.get(ReportID)

			if not Report:
				return "Report %s not found." %ReportID
			else:

				Line 	=	MKT_LINE_REPORT_DE.query.\
							filter(MKT_LINE_REPORT_DE.Report == ReportID).\
							filter(MKT_LINE_REPORT_DE.LineNumber == LineNumber).\
							first()

				if not Line:
					return "Line %s not found for report %s." %(LineNumber, ReportID)

		else:

			return "Wrong input format."

	except:
		raise

class FRM_ACCOUNTING_SETTING(exform):

	MonthEndClosing 	=	SelectField(requiredlabel('Month End Closing', '*'),
							choices=[('', '--None--'),
									 ('A', 'A. Auto'),
									 ('M', 'M. Manual')],
							coerce=str,
							validators=[validators.Required()]
						)
	MONTH_END 			= 	TextField(requiredlabel("Month End", "*"), [validators.Optional()])
	YEAR_END 			= 	TextField(requiredlabel("Year End", "*"), [validators.Optional()])

	BaseCurrency 	= 	QuerySelectField(requiredlabel("Base Currency", "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=False,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)

	GL_KEY1 = TextField("GL_KEY1")
	GL_KEY2 = TextField("GL_KEY2")
	GL_KEY3 = TextField("GL_KEY3")
	GL_KEY4 = TextField("GL_KEY4")
	GL_KEY5 = TextField("GL_KEY5")
	GL_KEY6 = TextField("GL_KEY6")
	GL_KEY7 = TextField("GL_KEY7")
	GL_KEY8 = TextField("GL_KEY8")
	GL_KEY9 = TextField("GL_KEY9")

	AccrIntBooking 	=	SelectField(requiredlabel('Accrual Interest Booking', '*'),
							choices=[('', '--None--'),
									 ('1', '1. Daily'),
									 ('2', '2. Monthly')],
							coerce=str,
							validators=[validators.Required()]
						)
	AccrIntOption 	=	SelectField(requiredlabel('Accrual Interest Option', '*'),
							choices=[('', '--None--'),
									 ('1', '1. Loan Balance'),
									 ('2', '2. Loan Outstanding')],
							coerce=str,
							validators=[validators.Required()]
						)

	AllowNegative  	=   TextAreaField("Allow Negative")
	#2018-06-05 - Inter-Branch
	InterBranchHO 	=	QuerySelectField('Inter-Branch Head Office',
							query_factory=mktaccounting.loadBranch,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							description='5-Inter Branch'
						)
	#end
	CloseAccTran 	= 	QuerySelectField("Account Closing Transaction",
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	CashAdvanceTran = 	QuerySelectField(requiredlabel("Cash Advance Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	CashSettlementTran 	= 	QuerySelectField(requiredlabel("Cash Settlement Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	LoanCreationTran = 		QuerySelectField(requiredlabel("Loan Creation Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)
	LoanCollectionTran = 	QuerySelectField(requiredlabel("Loan Collection Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)
	DisbursedTran 	= 	QuerySelectField(requiredlabel("Disbursed Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	PrincipalTran 	= 	QuerySelectField(requiredlabel("Principal Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	InterestTran 	= 	QuerySelectField(requiredlabel("Interest Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	IntRevTran 		= 	QuerySelectField(requiredlabel("Interest Reversal Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	PenaltyTran 	= 	QuerySelectField(requiredlabel("Penalty Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	PenRevTran 		= 	QuerySelectField(requiredlabel("Penalty Reversal Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	ChargeTran 		= 	QuerySelectField(requiredlabel("Charge Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	ChargeRevTran 	= 	QuerySelectField(requiredlabel("Charge Reversal Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	DrAccrIntTran 	= 	QuerySelectField(requiredlabel("Dr Accr Int Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	CrAccrIntTran 	= 	QuerySelectField(requiredlabel("Cr Accr Int Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	ProvisionTran 	= 	QuerySelectField(requiredlabel("Provision Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	ProvReverTran 	= 	QuerySelectField(requiredlabel("Provision Reversal Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	AccrIntTran 	= 	QuerySelectField(requiredlabel("Accrued Interest Payabal Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	IntPayaTran 	= 	QuerySelectField(requiredlabel("Interest Payment Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	AmendmentTran 	= 	QuerySelectField(requiredlabel("Loan Amendment Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	TerminateTran 	= 	QuerySelectField(requiredlabel("Loan Class Changed Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	WOFTran 		= 	QuerySelectField(requiredlabel("Loan Write-off Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	RecoveryTran 	= 	QuerySelectField(requiredlabel("Loan Recovery Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	TaxTran 		= 	QuerySelectField(requiredlabel("Withholding Tax Transaction", "*"),
							query_factory=loadTransaction,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()],
							description="1-Transaction"
						)

	SuspenseBookingTran 	= 	QuerySelectField(requiredlabel("Suspense Booking Transaction", "*"),
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'--None--',
									validators=[validators.Required()],
									description="1-Transaction"
								)

	SuspenseReverseTran 	= 	QuerySelectField(requiredlabel("Suspense Reversal Transaction", "*"),
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'--None--',
									validators=[validators.Required()],
									description="1-Transaction"
								)

	NetIncomeTransferTran 	= 	QuerySelectField(requiredlabel("Transfer Net-income Transaction", "*"),
									query_factory=loadTransaction,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'--None--',
									validators=[validators.Required()],
									description="1-Transaction"
								)

	PositionTran 		= 	QuerySelectField("Position Booking Transaction",
								query_factory=loadTransaction,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--None--',
								description="1-Transaction"
							)

	RevTran 			= 	QuerySelectField("Revaluation Transaction",
								query_factory=loadTransaction,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--None--',
								description="1-Transaction"
							)

	CurrYearTran 			= 	QuerySelectField(requiredlabel("Current Year Profit/Loss Transfer Transaction", "*"),
								query_factory=loadTransaction,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()],
								description="1-Transaction"
							)

	PriorYearTran 			= 	QuerySelectField(requiredlabel("Prior Year Profit/Loss Transfer Transaction", "*"),
								query_factory=loadTransaction,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()],
								description="1-Transaction"
							)

	ProvidentTran 			= 	QuerySelectField("Provident Fund Booking Transaction",
								query_factory=loadTransaction,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--None--',
								description="1-Transaction"
							)
	PenaltyTerminateTran 	= 	QuerySelectField("Penalty Terminate Transaction",
								query_factory=loadTransaction,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--None--',
								description="1-Transaction"
							)
	PenaltyAmendmentTran 	= 	QuerySelectField("Penalty Amendment Transaction",
								query_factory=loadTransaction,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--None--',
								description="1-Transaction"
							)

	#Capitalize Interest/Penalty 2018-04-11 Mony
	CapitalizeIntTran 		= 	QuerySelectField("Capitalize Interest Transaction",
								query_factory=loadTransaction,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--None--',
								description="1-Transaction"
							)
	CapitalizePenTran 		= 	QuerySelectField("Capitalize Penalty Transaction",
								query_factory=loadTransaction,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--None--',
								description="1-Transaction"
							)
	#end
	EquivalentCat 		=	QuerySelectField("Equivalent Account Cat",
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								description="2-Category"
							)

	PositionCat 		=	QuerySelectField("Position Account Cat",
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								description="2-Category"
							)

	GainOnExcCat 		=	QuerySelectField("Gain on Exchange Cat",
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								description="2-Category"
							)

	LossOnExcCat 		=	QuerySelectField("Loss on Exchange Cat",
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								description="2-Category"
							)

	IntSummaryCat 		=	QuerySelectField(requiredlabel("Income Summary Cat", "*"),
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()],
								description="2-Category"
							)

	CurrYearCat 		=	QuerySelectField(requiredlabel("Current Year Profit/Loss Cat", "*"),
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()],
								description="2-Category"
							)

	PriorYearCat 		=	QuerySelectField(requiredlabel("Prior Year Profit/Loss Cat", "*"),
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()],
								description="2-Category"
							)
	RoundingCat 		=	QuerySelectField(requiredlabel("Rounding differences Cat", "*"),
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								description="2-Category"
							)

	ProvidentCat 		=	QuerySelectField("Provident Fund Expense Cat",
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								description="2-Category"
							)
	#2018-06-05 - Inter-Branch
	InterBranchDueToCat	=	QuerySelectField("Inter-Branch Due To Cat",
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								description="5-Inter Branch"
							)
	InterBranchDueFromCat	=	QuerySelectField("Inter-Branch Due From Cat",
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								description="5-Inter Branch"
							)
	#end

	NetIncomeToEquity 	= 	TextField(requiredlabel("Net Income to Equity", "*"), [validators.Required()], description="3-Net Income to Equity")

	Revaluation 		= 	SelectField(requiredlabel("Currency Revaluation", "*"),
								choices=[('N', 'No'),
										 ('Y', 'Yes')],
								validators=[validators.Required()],
								description="4-Currency Revaluation"
					  		)

	RevCatType 			=	TextField("Revaluate Category Type", description="4-Currency Revaluation") # Get Category Type to Revaluate
	IncCatType 			=	TextField("Income Category Type", description="4-Currency Revaluation") # Get Category Type to Revaluate
	ExpCatType 			=	TextField("Expense Category Type", description="4-Currency Revaluation") # Get Category Type to Revaluate

	def validate_Revaluation(form, field):
		try:

			Revaluation = request.form['Revaluation']

			if Revaluation.upper() in 'Y':

				getCurrency 	=	MKT_CURRENCY.query
				NumOfCurrency 	=	getCurrency.count()

				if int(NumOfCurrency) <= 1:

					raise ValidationError("Currency revaluation not allow, Currently you have only %s currency." %NumOfCurrency)

		except:
			raise
	
	def validate_PositionTran(form, field):
		try:

			Revaluation = request.form['Revaluation']

			if Revaluation.upper() in 'Y':

				PositionTran = request.form['PositionTran']

				if PositionTran == "__None" or PositionTran == "":

					raise ValidationError("This field is required.")

		except:
			raise

	def validate_RevTran(form, field):
		try:

			Revaluation = request.form['Revaluation']

			if Revaluation.upper() in 'Y':

				RevTran = request.form['RevTran']

				if RevTran == "__None" or RevTran == "":

					raise ValidationError("This field is required.")

		except:
			raise

	def validate_RevCatType(form, field):
		try:

			Revaluation = request.form['Revaluation']

			if Revaluation.upper() in 'Y':

				RevCatType = request.form['RevCatType']

				if not RevCatType:

					raise ValidationError("This field is required.")

		except:
			raise

	def validate_EquivalentCat(form, field):
		try:

			Revaluation = request.form['Revaluation']

			if Revaluation.upper() in 'Y':

				EquivalentCat = request.form['EquivalentCat']

				if EquivalentCat == "__None" or EquivalentCat == "":

					raise ValidationError("This field is required.")

		except:
			raise

	def validate_PositionCat(form, field):
		try:

			Revaluation = request.form['Revaluation']

			if Revaluation.upper() in 'Y':

				PositionCat = request.form['PositionCat']

				if PositionCat == "__None" or PositionCat == "":

					raise ValidationError("This field is required.")

				# else:

				# 	ListPosition = PositionCat.split()

				# 	for item in ListPosition:

				# 		Currency 		= 	item[:3]
				# 		getCurrency 	=	MKT_CURRENCY.query.get(Currency)

				# 		if not getCurrency:
				# 			raise ValidationError("Currency %s not found." %Currency)

				# 		Category 		= 	item[3:]
				# 		getCategory 	=	MKT_CATEGORY.query.get(Category)

				# 		if not getCategory:
				# 			raise ValidationError("Category %s not found." %Category)

		except:
			raise

	def validate_GainOnExcCat(form, field):
		try:

			Revaluation = request.form['Revaluation']

			if Revaluation.upper() in 'Y':

				GainOnExcCat = request.form['GainOnExcCat']

				if GainOnExcCat == "__None" or GainOnExcCat == "":

					raise ValidationError("This field is required.")

		except:
			raise

	def validate_LossOnExcCat(form, field):
		try:

			Revaluation = request.form['Revaluation']

			if Revaluation.upper() in 'Y':

				LossOnExcCat = request.form['LossOnExcCat']

				if LossOnExcCat == "__None" or LossOnExcCat == "":

					raise ValidationError("This field is required.")

		except:
			raise

	def validate_MONTH_END(form, field):
		EndDay = form.MONTH_END.data
		try:
			
			EndDay = int(EndDay)
			if EndDay > 31 or EndDay < 1:
				raise

		except:
			if str(EndDay).upper() != "END":
				raise ValidationError("The field must be in number between 1 to 31 or END.")

	def validate_YEAR_END(form, field):
		List = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
		Month = field.data.upper()
		if not Month in List:
			raise ValidationError('Value must be first three character of month')

	def validate_NetIncomeToEquity(form, field):
		try:

			NetIncomeToEquity = form.NetIncomeToEquity.data
			
			if NetIncomeToEquity.find('>') != -1:

				NetIncomeToEquity = NetIncomeToEquity.split('>')
				Str1 	=	NetIncomeToEquity[0]
				Str2 	=	""

				if len(NetIncomeToEquity) == 2:

					Str2 	=	NetIncomeToEquity[1]
					Check1 	= 	checkReportAndLine(Str1)

					if Check1:
						raise ValidationError(Check1)

					Check2 	= 	checkReportAndLine(Str2)

					if Check2:
						raise ValidationError(Check2)

				else:

					raise ValidationError("Wrong input format.")
			else:
				raise ValidationError("Wrong input format.")
					
		except:
			raise

	@staticmethod
	def setWidth():
		return [("BaseCurrency", len1), ("MONTH_END", len1)]

	@staticmethod
	def listField():
		return ["ID", "DisbursedTran", "PrincipalTran", "InterestTran", "ChargeTran",
				"PenaltyTran", "TaxTran"]
