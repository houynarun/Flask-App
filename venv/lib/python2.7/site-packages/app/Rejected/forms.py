from app.mktcore.wtfimports 				import *
from wtforms 								import DecimalField, IntegerField
from .models import *
import time
from app.PotentialCustomer.models			import *
from app.PotentialCustomerAct.models		import *
from app.User.models						import *

import app.tools.mktdate 					as mktdate
from app.tools								import mktdb
import app.tools.mktaudit 					as mktaudit
import app.tools.user 						as mktuser
import app.mktcore.autoid 					as mktautoid

from sqlalchemy 							import *
from flask									import Markup

### Rejected ###

def loadPotentialCust():
	Branch 			= mktuser.getCurrentBranch()
	QueryString 	= MKT_PO_CUSTOMER.query.filter(MKT_PO_CUSTOMER.AssignBranch==Branch).order_by(MKT_PO_CUSTOMER.ID.asc())
	return QueryString

def loadRejectedReasonType():
	QueryString 	= MKT_REJECTED_REASON_TYPE.query.order_by(MKT_REJECTED_REASON_TYPE.ID.asc())
	return QueryString

def custom_RejectedDate(form,field):

	RejectedDate = request.form['RejectedDate']

	if RejectedDate:
		# clear out processing errors
		field.errors[:] = []

		CheckFormatDate = mktdate.isDateISO(RejectedDate)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

	else:
		# clear out processing errors
		field.errors[:] = []

### end Rejected ###

#PotentialCustomerRejected PURPOSE
class FRM_REJECTED_REASON_TYPE(exform):
	Description=TextField(requiredlabel("Description","*"),[validators.Required()])

#PotentialCustomerRejected PURPOSE
class FRM_REJECTED(exform):

	CustomerID 			= 	QuerySelectField(requiredlabel('Potential Customer','*'),
								query_factory=loadPotentialCust,
								get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
								allow_blank=True,
								validators=[validators.Required()],
								blank_text=u'--None--')

	Rejected 			=	SelectField("Rejected",
								choices=[('N', 'No'),('Y', 'Yes')],
								coerce=str,
								default='Y',
								description="2-Reject")
	RejectedBy 			=	SelectField("Rejected By",
								choices=[('', '--None--'),('1', 'Client'),('2', 'Company')],
								coerce=str,
								description="2-Reject")

	RejectedDate		=	DateField("Rejected Date",
								format='%Y-%m-%d',
								default="",
								validators=[custom_RejectedDate],
								description="2-Reject")

	ReasonType 		 	= 	QuerySelectField('Type of Reason',
								query_factory=loadRejectedReasonType,
								get_label=lambda a:  a.Description ,
								allow_blank=True,
								blank_text=u'--None--',
								description="2-Reject")

	RejectedReason 		=	TextAreaField("Rejected Reason", description="2-Reject")

	def validate_CustomerID(form,field):
			
		CustomerID 		= 	request.form['CustomerID']
		ID 				= 	request.form['ID']
		RejectedObj 	= 	MKT_REJECTED.query.\
										filter(MKT_REJECTED.CustomerID==CustomerID).\
										filter(~MKT_REJECTED.ID.in_([ID])).\
										first()
		if RejectedObj:
			Msg 	=	"This potentail customer already exist in rejected list. <a href='javascript:void(0)' onClick=CustomClickView('Rejected-%s','Rejected?ID=%s')>%s</a>" %(RejectedObj.ID,RejectedObj.ID,RejectedObj.ID)
			raise ValidationError(Markup(Msg))

	def validate_RejectedBy(form, field):

		Rejected 		=	request.form['Rejected']
		RejectedBy 		=	request.form['RejectedBy']

		if Rejected == 'Y':
			if RejectedBy == '':
				raise ValidationError("This field is required.")
		else:
			if RejectedBy:
				raise ValidationError("This field must be blank.")

	def validate_RejectedReason(form, field):

		Rejected 		=	request.form['Rejected']
		RejectedReason 	=	request.form['RejectedReason']

		if Rejected == 'Y':
			if not RejectedReason:
				raise ValidationError("This field is required.")
		# else:
		# 	if RejectedReason:
		# 		raise ValidationError("This field must be blank.")

	def validate_RejectedDate(form, field):

		Rejected 		=	request.form['Rejected']
		RejectedDate	=	request.form['RejectedDate']

		CustomerID 		=	request.form['CustomerID']
		POCustomerObj   =	MKT_PO_CUSTOMER.query.get(CustomerID)

		DateOfContact   = 	POCustomerObj.DateOfContact if POCustomerObj else ""

		if Rejected == 'Y':
			
			if RejectedDate == '':
				raise ValidationError("This field is required.")
			else:
				if RejectedDate < DateOfContact:
					raise ValidationError('Rejected Date must be bigger than Date of Contact')	
		else:
			if RejectedDate:
				raise ValidationError("This field must be blank.")	

	def validate_ReasonType(form, field):

		Rejected 		=	request.form['Rejected']
		ReasonType		=	request.form['ReasonType']


		if Rejected == 'Y':
			
			if ReasonType == '__None':
				raise ValidationError("This field is required.")			

		else:
			if ReasonType != '__None':
				raise ValidationError("This field must be blank.")	

	@staticmethod
	def beforeInsert():
		try:
			AuthLevel 				= g.getNAuthorize
			if AuthLevel == 0:
				RejectedID 			= request.form["ID"]
				Rejected 			= request.form["Rejected"]
				PotentialCustomer 	= request.form["CustomerID"]
				RejectedReason      = request.form["RejectedReason"]	

				RejectedObj         = MKT_REJECTED.query.get(RejectedID)
				POCustomerObj 		= MKT_PO_CUSTOMER.query.get(PotentialCustomer)	

				Data 				= {}
				if POCustomerObj:
					Block           = POCustomerObj.Block
					POStatus 		= POCustomerObj.POStatus
					AssignTo 		= POCustomerObj.AssignTo
					RejectedStatus  = '5'
					NewStatus       = '1'
					AssignStatus    = '2'
					if Rejected == 'N' and Block == 'N':
						if POStatus == RejectedStatus:
							Data.update({'POStatus': NewStatus,
										 'NextFollowDate': '',
										 'AssignTo':'',
										 'AssignDate':''})

						if POStatus == NewStatus and AssignTo != '':
							Data.update({'POStatus': AssignStatus,'AssignDate': mktdate.getDateISO()})
					else:
						if RejectedObj:
							if RejectedObj.Rejected != Rejected:
								Data.update({'POStatus': RejectedStatus})
								#auto insert rejected activity to MKT_PO_CUSTOMER_ACT
								ActData = {}
								ActTypeRejected = '4';
								ActID = mktautoid.getAutoID("FRM_PO_CUSTOMER_ACT")
								ActData.update({'ID': ActID,
												'PotentialCustomer': PotentialCustomer,
												'ActivityType': ActTypeRejected,
												'DateOfActivity': mktdate.getDateISO(),
												'TimeOfActivity': '',
												'ActivityDesc': RejectedReason,
												'POStatus':'',
												'NextFollowDate':'',
												'ActivityBy':'' })
								mktdb.insertTable(MKT_PO_CUSTOMER_ACT, ActData)
								db.session.commit()	
						else:
							Data.update({'POStatus': RejectedStatus})
							#auto insert rejected activity to MKT_PO_CUSTOMER_ACT
							ActData = {}
							ActTypeRejected = '4';
							ActID = mktautoid.getAutoID("FRM_PO_CUSTOMER_ACT")
							ActData.update({'ID': ActID,
											'PotentialCustomer': PotentialCustomer,
											'ActivityType': ActTypeRejected,
											'DateOfActivity': mktdate.getDateISO(),
											'TimeOfActivity': '',
											'ActivityDesc': RejectedReason,
											'POStatus':'',
											'NextFollowDate':'',
											'ActivityBy':'' })
							mktdb.insertTable(MKT_PO_CUSTOMER_ACT, ActData)
							db.session.commit()	

					if Data:
						Curr = 	int(POCustomerObj.Curr)+1
						Data.update({'Curr' 	:	str(Curr),
								'Inputter' 		:	mktuser.getUser().ID,
								'Createdon' 	: 	mktdate.getDateTimeNow(),
								'Authorizer' 	: 	mktuser.getUser().ID,
								'Authorizeon'	: 	mktdate.getDateTimeNow()})

						mktaudit.moveAUTHtoHIST(MKT_PO_CUSTOMER,MKT_PO_CUSTOMER_HIST,PotentialCustomer)
						mktdb.updateRecord(MKT_PO_CUSTOMER, [MKT_PO_CUSTOMER.ID == PotentialCustomer], Data)
						db.session.commit()	
			return True

		except Exception, e:
			raise
			flash(msg_error+'%s'%e)
			db.session.rollback()
			return False

	@staticmethod
	def redirectAuthorize():
		try:			
			ID 					= g.formID
			RejectedObj 		= MKT_REJECTED.query.get(ID)

			Rejected 			= RejectedObj.Rejected
			PotentialCustomer 	= RejectedObj.CustomerID
			RejectedReason 		= RejectedObj.RejectedReason

			POCustomerObj 		= MKT_PO_CUSTOMER.query.get(PotentialCustomer)			
			Data 				= {}
			if POCustomerObj:
				Block           = POCustomerObj.Block
				POStatus 		= POCustomerObj.POStatus
				AssignTo 		= POCustomerObj.AssignTo
				RejectedStatus  = '5'
				NewStatus       = '1'
				AssignStatus    = '2'
				if Rejected == 'N' and Block == 'N':
					if POStatus == RejectedStatus:
						Data.update({'POStatus': NewStatus,
										 'NextFollowDate': '',
										 'AssignTo':'',
										 'AssignDate':''})

					if POStatus == NewStatus and AssignTo != '':
						Data.update({'POStatus': AssignStatus,'AssignDate': mktdate.getDateISO()})
				else:
					Data.update({'POStatus': RejectedStatus})
					#auto insert rejected activity to MKT_PO_CUSTOMER_ACT
					ActData = {}
					ActTypeRejected = '4';
					ActID = mktautoid.getAutoID("FRM_PO_CUSTOMER_ACT")
					ActData.update({'ID': ActID,
									'PotentialCustomer': PotentialCustomer,
									'ActivityType': ActTypeRejected,
									'DateOfActivity': mktdate.getDateISO(),
									'TimeOfActivity': '',
									'ActivityDesc': RejectedReason,
									'POStatus':'',
									'NextFollowDate':'',
									'ActivityBy':'' })
					mktdb.insertTable(MKT_PO_CUSTOMER_ACT, ActData)
					db.session.commit()	
									
				if Data:
					Curr = 	int(POCustomerObj.Curr)+1
					Data.update({'Curr' 	:	str(Curr),
							'Inputter' 		:	mktuser.getUser().ID,
							'Createdon' 	: 	mktdate.getDateTimeNow(),
							'Authorizer' 	: 	mktuser.getUser().ID,
							'Authorizeon'	: 	mktdate.getDateTimeNow()})

					mktaudit.moveAUTHtoHIST(MKT_PO_CUSTOMER,MKT_PO_CUSTOMER_HIST,PotentialCustomer)
					mktdb.updateRecord(MKT_PO_CUSTOMER, [MKT_PO_CUSTOMER.ID == PotentialCustomer], Data)
					db.session.commit()	
			return None

		except Exception, e:
			raise
			flash(msg_error+'%s'%e)
			db.session.rollback()
			return False

	@staticmethod
	def listField():
	    Fields = ["ID", "CustomerID", "Rejected", "RejectedBy", "RejectedReason","ReasonType"]
	    return Fields, ["CustomerID*LK*PC"]
