from flask 						import request, url_for, render_template,flash,redirect,session,jsonify
from itsdangerous 				import JSONWebSignatureSerializer
from werkzeug.security 			import check_password_hash
from flask.ext.login 			import login_user
from random 					import choice
import uuid,os, socket

# models imported
from app.info 					import __Version__,__Build__,__Release__
from app.LoginUser.models 		import MKT_LOGIN_USER
from app.User.models 			import MKT_USER
from app.Login.forms 			import LoginForm
from app 						import db

# core imported
from app.mktcore.globalfunction import StatusCodes,checkContentType
from app.mktcore.mktgdecode     import deLicense, readBin
from app.mktcore.session 		import *
from app.mktcore.constant 		import *
from app.mktcore.logger 		import *
# tools imported
import app.tools.user 			as aUser
import app.tools.mktdate 		as mktdate
import app.tools.mktsetting 	as mktsetting



clsGenerateToken = MorakotSecurity()

def getDefaultTimeOut():
	try:
		SettingObj = mktsetting.getSetting()
		if SettingObj:
			TimeOut = int(SettingObj.TIME_OUT)
		else:
			TimeOut = int(15)
	except Exception, e:
		TimeOut = int(15)

	return TimeOut


#remove user from the online list
def removeUserFromOnlineList(timeoutintminute):
	try:
		getNow = datetime.now()
		PlusExpireTime = getNow - timedelta(minutes=timeoutintminute)

		db.session.query(MKT_LOGIN_USER).filter(MKT_LOGIN_USER.LastTimeActivity <=  PlusExpireTime ).\
			delete(synchronize_session="fetch")
		db.session.commit()
	except Exception, e:
		db.session.rollback()
		db.session.close()

def VBAuthentication():
	""" Class Authentication for login via API and Web"""

	try:

		Message 		=	""
		Status 			=	StatusCodes.unauthorized()
		Data 			=	''
		Redirect 		=	""
		AllowedChar 	= 'I love MorakotVB !@#$%^&*(-_=+)MorakotTechn0l0gy^(_^)'
		UrandomKey 		= os.urandom(24).encode('hex')
		ApiSecurityKey  = '%s$$%s'% (AllowedChar,UrandomKey)
		ApiSecurityKey  = ''.join(choice(AllowedChar) for i in ApiSecurityKey)
		form 			= LoginForm()

		if 'getLogInID' in session:
			Redirect = '/Morakot/Index'
			

		if request.method=='POST':

			# Remove Idol user
			removeUserFromOnlineList(getDefaultTimeOut()) #remove user from online list
			# End Remove Idol user

			##apply license code
			ChkStatus,Msg = checkLicense ()
			if ChkStatus == False :
				session.clear()
				Status = 401
				Message = Msg
				Redirect = '/Morakot/Login'
			else:

				if not request.form.get("LogInName") or not request.form.get("Password") :
					Message ="Username/Password is required"
				else:
					Password = request.form["Password"]
					LogInName = request.form["LogInName"]
					
					query = MKT_USER.query.filter_by(LogInName=LogInName).first()
					if query:
						
						PassValidity 	= datetime.strptime(str(query.PassValidity.split(" ")[0]), "%Y%m%d")
						# CurrentDate 	= mktdate.getBankDate()
						dat 			= datetime.now()
						d 				= '%s-%s-%s'% (dat.year, dat.month, dat.day)
						CurrentDate 	= '%s-%s-%s'% (dat.year, dat.month, dat.day)
						sysDate 		= datetime.strptime(str(CurrentDate), "%Y-%m-%d")
						ExpiryDate 		= datetime.strptime(str(query.ExpiryDate), "%Y-%m-%d")
						LoginTimeFrom 	= query.StartTime if query.StartTime else None
						LoginTimeTo 	= query.EndTime if query.EndTime else None

						UserID 			= query.ID

						# Check System Status; Online/Offline
						SystemStatus = aUser.getSystemStatus()

						if SystemStatus == "0":

							UserRole = aUser.getUserRole(UserID)

							if UserRole and UserRole != "99":

								Message ="The system is now offline. Please contact your system administrator for more details."
								# return redirect(url_for("Login"))
								Redirect = '/Morakot/Login'

						
						CheckLogin = aUser.checkLoginTime(LoginTimeFrom, LoginTimeTo)
						if not CheckLogin:
							# return redirect(url_for("Login"))
							Redirect = '/Morakot/Login'

						
						if sysDate < ExpiryDate:
							
							if query.Attempts > 0:
								
								if query.Active == "Yes":
									
									if query.Password:
										
										if Password == "":
											
											numOfApptempt = aUser.checkAttemptsPasswordWrong(LogInName)
											if numOfApptempt == 0:
												Message ="Too many attempts. The user is locked"
											else:
												Message ="Username/Password is incorrect"
										else:
											
											if check_password_hash(query.Password, Password):

												
												if sysDate < PassValidity:
													
													login_user(query)
													session['getLogInID'] = query.ID
													session['SecurityHijacking'] = clsGenerateToken.CreateToken()

													# Insert to MKT_LOGIN_USER to list all LoggedIn user
													CurrentDate1 = datetime.now()
													LogInTime 	= '%s:%s:%s'% (CurrentDate1.hour, CurrentDate1.minute, CurrentDate1.second)
													LogInDate 	= '%s-%s-%s'% (CurrentDate1.year, CurrentDate1.month, CurrentDate1.day)
													Branch 		= aUser.getBranch().ID
													
													# print Branch
													aUser.saveLoginUser(query.ID, query.Role, Branch, LogInTime, LogInDate , ApiSecurityKey = ApiSecurityKey)
													# Set Session Last Login
													session['TimeLastLogin'] = aUser.getUser().TimeLastLogin
													session['DateLastLogin'] = aUser.getUser().DateLastLogin
													# Update MKT_USER DateLastLogin & TimeLastLogin
													aUser.updateLastLogin(query.ID)
													session["ApiSecurityKey"] = ApiSecurityKey											
													Data 	 = getToken()
													Status	 = StatusCodes.ok()
													Redirect = '/Morakot/Index'

												else:
													#Password is expired
													session['getID'] = query.ID
													Message ="Your password is expired, Please enter a new one"
													# return redirect('/Morakot/ResetPassword')
													Redirect = '/Morakot/ResetPassword'
											else:
												numOfApptempt = aUser.checkAttemptsPasswordWrong(LogInName)
												if numOfApptempt == 0:
													Message ="Too many attempts. The user is locked"
												else:
													Message ="Username/Password is incorrect"
									else:	
										session['getID'] = query.ID
										# return redirect('/Morakot/ResetPassword')
										Redirect = '/Morakot/ResetPassword'
								else:
									Message ="The user is inactived"
							else:
								Message ="Too many attempts. The user is locked"
						else:
							Message ="The user is expired"
					else:
						Message ="Username/Password is incorrect"

		return Status,Data,Message,Redirect
	
	except Exception as exe:
		logger.error("Exception occurred", exc_info=True)
		db.session.rollback()
		db.session.close()
		Message =("Something is not quite right. please try again later.")
		return 406,{},Message,""


def getToken():
	JSONWeb  = JSONWebSignatureSerializer('secret-key')
	Token    = JSONWeb.dumps({'UserID': str(session.get('getLogInID')),
						   	  'Expire':  str(datetime.utcnow() + timedelta(minutes=getDefaultTimeOut())),
							  "Url":request.url.split('/Morakot')[0],
							  'MKTSecurity':session.get('MKTSecurity'),
							  'ApiSecurityKey':session.get("ApiSecurityKey")
							})

	return Token


def FormatMessage(message='',redirect_url='',data={},status=200):
	form 	= LoginForm()
	if checkContentType()=='json':
		Url = redirect_url.split('Morakot')
		if len(Url)>1:
			Url = Url[1]
		else:
			Url = '/Index'
		return jsonify({"message":{"message":[message]},
						"token":data,
						'redirect':Url							
						}),status
	else:
		Background 	=	"/static/images/bg/loginbg.jpg"
		if message:
			flash(message)
		if redirect_url:
			return redirect(redirect_url)
		return render_template("login.html", form=form, Version = __Version__, Build = __Build__, Background = Background)

def MesssageStandard(Messages=[],Statuscode=""):
	Msg 	= {}
	Msg.update({"message":{"message":Messages},
				"status" :Statuscode
				})
	return jsonify(Msg)

def GetAPIReturnFormat(Header="",Body=[],Data={},RecordID="",Status="",ToolBar={},Type="",Message=[]):
	ReturnFormat = {}
	ReturnFormat.update({
		"header": Header,
		"record_id": RecordID,
		"body": Body,
		"data": Data,
		"message":{"message":Message},
		"status": Status,
		"token":getToken(),
		"tool_bar": ToolBar,
		"type": Type
		})
	return jsonify(ReturnFormat)



#check license
def checkLicense ():
	#Read license code
	bin_file_content  = readBin(socket.gethostname())
	if not bin_file_content:
		return False,msg_license_not_found
	expDate 		= bin_file_content.get('expDate')
	MaxUser 		= bin_file_content.get('nUser')

	#dt 			= expDate.strptime('%Y-%m-%d')
	dt1 		= datetime.strptime(expDate,'%Y-%m-%d')
	curtDate 	= datetime.now().strftime('%Y-%m-%d')
	curtDate 	= datetime.strptime(curtDate,'%Y-%m-%d')

	NearExpiryDate 	= dt1 - curtDate
	NearExpiryDate 	= NearExpiryDate.days
	if NearExpiryDate < 30:
		AlertExpire = "The system is expiring in the next %s days. New license code is required"%NearExpiryDate
		flash(msg_warning+AlertExpire)
		logger.debug(AlertExpire)

	if deLicense () == True:
		if dt1 >=  curtDate:
			if isOverLicense(MaxUser):
				logger.critical(msg_license_max_concurrent)
				return False,msg_license_max_concurrent
			else:
				return True,''
		else:
			logger.critical(msg_license_expired)
			return False,msg_license_expired
	else:
		logger.critical(msg_license_invalid)
		return False,msg_license_invalid


#Restrict license code
def isOverLicense(MaxUser):
	OnlineUser 	= int(MKT_LOGIN_USER.query.count())
	if OnlineUser >= MaxUser:
		return True
	else:
		return False

