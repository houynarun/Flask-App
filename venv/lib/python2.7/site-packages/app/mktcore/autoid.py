from flask 						import flash, session
from app.AutoID.models 			import *
from app 						import db
from constant 					import *  
from datetime 					import datetime, date, timedelta
import time
from app.User.models import MKT_USER

def getAutoID(formName):

	getautoid = ""
	getLastNum = ""
	getCustLastNum = ""
	CBranch = ""
	getlen1 = ""
	getCustAC1 = ""

	obj=MKT_AUTOID.query.get(formName)
	if obj 	!=	None:
		# Edit autoID : Vith Kimly 30.11.2018
		# For child auto id can follow parent ID
		if obj.ParentID !=None:	
			formName = obj.ParentID
			obj1=MKT_AUTOID.query.get(formName)
			if obj1:
					obj = obj1
		# End edit
		if obj.CBranch == "Y":
			CBranch = returnBranch()
		else :
			CBranch = ""

		if obj.CustAC != "":
			getCustAC, getCustLastNum, getCheckDigit =  CustAC (obj.StartNum, obj.LastNum )
			#check format
			if obj.Format != "":
				getlen1 = len (str(int(getCustAC) + int(getCheckDigit)))
				getCustAC1 = obj.Format[:len(obj.Format)- getlen1] + str(int(getCustAC) + int(getCheckDigit))
			else :
				getCustAC1 = str(int(getCustAC) + int(getCheckDigit))

			getautoid = obj.PreFix  + CBranch + getCustAC1
			obj.StartNum = str(int(getCustAC)+int(getCheckDigit))
		else:

			getCate1, getLastNum1 = checkFunction ( obj.Cate1, obj.LastNum, obj.LastDay,obj.Format)
			getCate2, getLastNum2 = checkFunction ( obj.Cate2, obj.LastNum, obj.LastDay,obj.Format)
			getCate3, getLastNum3 = checkFunction ( obj.Cate3, obj.LastNum, obj.LastDay,obj.Format)
			getCate4, getLastNum4 = checkFunction ( obj.Cate4, obj.LastNum, obj.LastDay,obj.Format)

			getautoid = obj.PreFix + CBranch + str(getCate1) + str(getCate2) + str(getCate3) + str(getCate4)

			if getLastNum1 != "":
				getLastNum =  getLastNum1

			if getLastNum2 != "":
				getLastNum =  getLastNum2

			if getLastNum3 != "":
				getLastNum =  getLastNum3

			if getLastNum4 != "":
				getLastNum =  getLastNum4

		if getCustLastNum != "":
			getLastNum =getCustLastNum

		obj.LastNum = getLastNum
		obj.LastDay = int(time.strftime("%d"))
		db.session.add(obj)
		db.session.commit()
	
	
	return getautoid


def checkFunction(funName, LastNum = "", LastDay = "", Format = ""):

	getLastNum = ""

	if funName == "daySequencial" :
		if Format !="":
			getReturn, getLastNum = daySequencial (LastDay , LastNum, Format) 
		else:
			getReturn, getLastNum = daySequencial (LastDay , LastNum) 
	elif funName == "Sequencial" :
		if Format != "" :
			getReturn, getLastNum = Sequencial (LastNum, Format)
		else :
			getReturn, getLastNum = Sequencial (LastNum)

	elif funName  == "DD" :
		getReturn = DD()
		
	elif funName  == "MM" :
		getReturn = MM()
		
	elif funName  == "YY" :
		getReturn = YY()
		
	elif funName  =="YYYY" :
		getReturn = YYYY()
		
	elif funName  == "juLienDate" :
		getReturn = juLienDate()
		
	else:
		getReturn = ""
	

	return getReturn, getLastNum

#customer & account number
def CustAC(Num,LastNum):
	getLastNum = custACSequencial(LastNum)
	getDigit = check_digit(Num)
	getNumber = str(Num + int(getLastNum))
	return getNumber,getLastNum,getDigit

#account & customer increment
def custACSequencial(LastNum):
	getNumber=""
	if LastNum==1:
		getNumber=2
	elif LastNum==3:
		getNumber=2
	
	elif LastNum==6:
		getNumber=7
	elif LastNum==7:
		getNumber=8
	else:
		getNumber=1
	return getNumber

#day sequencial
def daySequencial(LastDay,LastNum,Format="00000"):
	getSequencial = ""
	getLastNum = ""
	if int(time.strftime("%d"))==LastDay:
		getSequencial, getLastNum = Sequencial(LastNum, Format)
	else:
		LastNum=0
		getSequencial, getLastNum = Sequencial(LastNum, Format)
	return getSequencial, getLastNum

#normal sequencial number
def Sequencial(LastNum, Format="00000"):
	#query=db.MKT_AUTOID.query.get(forName)
	conCat=str(LastNum+1)
	conStr=len(conCat)
	getSequencial=""
	Digit = len(Format)
	StrFormat 		= 	'{:0>' + str(Digit) + 'd}'
	getSequencial 	= 	StrFormat.format(int(conCat))
	
	return getSequencial, conCat


#sum digit
def check_digit(Num):
	r=0
	i=1
	s=0
	while Num:
		if i%2!=0:
			s=(Num%10)*2
			#print s
		else:
			s=Num%10
			#print s
		Num/=10
		r +=s
		i=i+1
	return (r*9)%10

# return year with 2 digits
def YY():
	return time.strftime("%y")

#return current year with 4 digits
def YYYY():
	return time.strftime("%Y")

#return current month with 2 digits
def MM():
	return time.strftime("%m")

#return current day with 2 digits
def DD():
	return time.strftime("%d")

#return julien date 
def juLienDate():
	getJulien=""
	date_format="%Y-%m-%d"
	currentyear=time.strftime("%Y-01-01")
	currentdate=time.strftime("%Y-%m-%d")
	startdate=datetime.strptime(currentyear,date_format)
	enddate=datetime.strptime(currentdate,date_format)
	nday=enddate-startdate
	if len(str(nday.days+1)) == 1 :
		getJulien ="00" + str(nday.days+1)
	elif len(str(nday.days+1)) == 2 :
		getJulien ="0" + str(nday.days+1)
	else:
		getJulien =str(nday.days+1)
	return getJulien


#define branch code
def returnBranch():
	return session.get("ChangeBranch")


def addlockrecord(RECORDID,Appname):

	try:
		UserID = session['getLogInID']
		currenttime=time.strftime('%Y-%m-%d %H:%M:%S')
		lock = MKT_RECORD_LOCK.query.filter_by(RECORDID=RECORDID).first()

		if lock:
			lock.Appname 		= Appname
			lock.Inputter 		= UserID
			lock.Createdon 		= currenttime
			lock.Authorizer 	= UserID
			lock.Authorizeon 	= currenttime
		else:
			lock=MKT_RECORD_LOCK()
			
			setattr(lock,"RECORDID",RECORDID)
			setattr(lock,"AppName",Appname)
			setattr(lock,"Inputter",session['getLogInID'])
			setattr(lock,"Createdon",currenttime)
			setattr(lock,"Authorizer",session['getLogInID'])
			setattr(lock,"Authorizeon",currenttime)
			setattr(lock,"Curr","1")
			setattr(lock,"Status","AUTH")
		db.session.add(lock)
		db.session.commit()
		
		return True
	except Exception as exe:
		flash(msg_error+exe.message)
		db.session.rollback()
		
		return False

def dellockrecord(ID):
	try:
		obj=db.session.query(MKT_RECORD_LOCK).filter_by(RECORDID=ID,Inputter=session['getLogInID']).delete(synchronize_session="fetch")
		if obj!=None:
			#db.session.delete(obj)
			db.session.commit()
			return True

	except Exception as exe:
		flash(msg_error+ exe.message)
		db.session.rollback()
		
		return False

def dellockrecordbyuser():
	try:
		obj=db.session.query(MKT_RECORD_LOCK).filter_by(Inputter=session['getLogInID']).delete(synchronize_session="fetch")
		if obj!=None:
			#db.session.delete(obj)
			db.session.commit()
			
			return True

	except Exception as exe:
		flash(msg_error+ exe.message)
		db.session.rollback()
		
		return False

def isrecordlocked(ID,Unlock=True):
	obj=MKT_RECORD_LOCK.query.get(ID)
	if obj!=None:

		if obj.Inputter!= session['getLogInID'] :
			UserObj = MKT_USER.query.get(obj.Inputter)
			if UserObj:
				UserLock = UserObj.DisplayName
			else:
				UserLock = obj.Inputter
			return (True,UserLock,obj.Createdon)
		else:
			if Unlock:
				dellockrecord(ID)
			return (False,"","")
	else:
		return (False,"","")