from app.mktcore.wtfimports import *
from .. import app
import app.tools.mktmoney as mktmoney
from  app.mktcore.globalfunction  import wordAmount,ConvertForm
from app.mktcore.autoid import dellockrecord, dellockrecordbyuser
from wtforms.csrf.session import SessionCSRF
from datetime import timedelta

import os


class TextField(StringField):
	pass

#create a new control
class MKTSelect2MultipleField(SelectMultipleField):

	
	def process_formdata(self, valuelist):

		if " " in valuelist[0] :
			valuelist =valuelist[0].split()
		
		if valuelist:
			self.data = valuelist
			
		else:
			self.data = ""

			

class ColorPickerField(TextField):
	"""docstring for ColorPickerField"""
	pass
		
#set iframe
class MKTIframe (HiddenField):
	def __init__(self, label=None, validators=None, dicIframe = {},  **kwargs):
		super(MKTIframe, self).__init__(label, validators, **kwargs)
		self.dicIframe = dicIframe # assign iframe property


#set remoteFields
#this fields for HiddenField that user can defined url by themselves without read it from field name
class RemoteTextField (HiddenField):
	def __init__(self, label=None, validators=None, dicRemote = {},  **kwargs):
		super(RemoteTextField, self).__init__(label, validators, **kwargs)
		self.dicRemote = dicRemote # assign remote fields property

#require fields
def requiredlabel(description,symbol):
	return description+" <span style=color:#d38e99>"+symbol+"</span>"

class DisabledTextField(TextField):
	def __call__(self, *args, **kwargs):
		kwargs.setdefault("readonly",True)
		return super(DisabledTextField, self).__call__(*args, **kwargs)

@app.route("/Morakot/toMktmoney", methods=['GET'])
@app.route("/Morakot/API/toMktmoney", methods=['GET'])
def toMktmoney():
	Currency = mktmoney.getCurrencyObj(request.args.get("Currency")) # Currency = "USD" or "KHR"
	Money=request.args.get("Money")
	#app.logger.debug(wordAmount(Money))
	if wordAmount(Money) == False:
		return jsonify(value=float(0))
	return jsonify(value=mktmoney.toMoney(float(wordAmount(Money)), Currency))
	
class DocumentField(TextField):
	def __call__(self, *args, **kwargs):
		kwargs.setdefault("style","display: none;")
		return super(DocumentField, self).__call__(*args, **kwargs)
class LocationField(TextField):
	def __call__(self, *args, **kwargs):
		kwargs.setdefault("type",'text')
		return super(LocationField, self).__call__(*args, **kwargs)

@app.route("/Morakot/deleteLock", methods=['GET'])
@app.route("/Morakot/API/deleteLock", methods=['GET'])
def deleteLock():
	getID=request.args.get("ID")
	return jsonify(value=dellockrecord(getID))

@app.route("/Morakot/deleteLockbyuser", methods=['GET'])
@app.route("/Morakot/API/deleteLockbyuser", methods=['GET'])
def deleteLockbyuser():
	#getID=request.args.get("ID")
	return jsonify(value=dellockrecordbyuser())

class exform(Form,ConvertForm):
	# Apply CSRF
	class Meta:
		# check_csrf = app.config['TESTING'] # By default DEBUG
		# if check_csrf:# Case running test case
		# 	csrf = False # Disable csrf
		# else:
		# 	# If you want to close csrf just change to False
		# 	csrf = True  # Enable csrf
		csrf = False # Disable check csrf
		csrf_class = SessionCSRF
		csrf_secret = app.config['SECRET_KEY']

		@property
		def csrf_context(self):
			return session

	#FNAuthorize=DisabledTextField("No of Authorize",description='9-Audit')
	Status=DisabledTextField("Status",description='9-Audit')
	Curr=DisabledTextField("Curr.No",description='9-Audit')
	Inputter=DisabledTextField("Inputter",description='9-Audit')
	Createdon=DisabledTextField("Input DateTime",description='9-Audit')
	Authorizer=DisabledTextField("Authorizer",description='9-Audit')
	Authorizeon=DisabledTextField("Authorize DateTime",description='9-Audit')
	Branch=DisabledTextField("Branch",description='9-Audit')

	@staticmethod
	def New():
		return True
		
	#when override the method, the record will be searched in hist table if not found in live table
	@staticmethod
	def findinHist ():
		return False

	@staticmethod
	def beforeNewID () :
		Msg = ""
		return False, Msg

	@staticmethod
	def hotSelectField():
		return []

	@staticmethod
	def hotField():
		return []

	@staticmethod
	def isMultiValue():
		controls_list=[]
		return controls_list

	@staticmethod	
	def setInau():
		return "0"  #0 is self authorization, 1 is required next level authorization 

	@staticmethod	
	def setWidth():
		return []

	@staticmethod
	def setDisable():
		return []

	@staticmethod
	def setDisableforEdit():
		controls_list=[]
		return controls_list

	@staticmethod
	def beforeInsert():
		return True

	@staticmethod
	def beforeAuthorize():
		return True, ""

	@staticmethod
	def beforeVerify():
		return True, ""
		
	@staticmethod
	def redirectAfterVerify():
		return None

	@staticmethod
	def beforeDelete():
		return True

	@staticmethod
	def redirectAuthorize():
		return None

	@staticmethod
	def redirectAfterInsert():
		return None

	@staticmethod
	def listField():
		return [],[]

	@staticmethod
	def moneyField():
		return []
	@staticmethod
	def setVisible():
		return []

	@staticmethod
	def IsAcceptOverride():
		Msg=""
		return False,Msg

	@staticmethod
	def IsAcceptOverrideINAU():
		Msg=""
		return False,Msg


	@staticmethod
	def formatMoney():
		formatFields=[]
		formatCur=""
		return formatFields,formatCur

	@staticmethod
	def formReadOnly():
		return False

	@staticmethod
	def reverseRec():
		return True,""
	
	@staticmethod
	def isSort():
		return ""

	@staticmethod
	def urlParam():
		return ""

	@staticmethod
	def postStandard():
		return True
	@staticmethod
	def appendField():
		return {}

	@staticmethod
	def importantField():
		return []
