
from flask 					import session,  render_template, request, flash
from app.LoginUser.models 	import MKT_LOGIN_USER
from app.User.models 		import MKT_USER
from functools 				import wraps
from app.mktcore.constant 	import msg_session_time_out, msg_time_over,msg_token_expired
from app.mktcore.autoid 	import dellockrecordbyuser
import time, pprint, collections, calendar
from app import db,app

import app.tools.mktsetting 		as mktsetting
from datetime 						import datetime, timedelta
import app.tools.user 		as aUser
from app.mktcore.globalfunction import *
from itsdangerous import JSONWebSignatureSerializer


from hashlib import sha256

class MorakotSecurity(object):

	def __getRemoteAddr(self):
		DeviceRecognition = mktsetting.getAppSetting('DeviceRecognition')
		Address = request.headers.get('X-Forwarded-For', request.remote_addr)
		
		if Address is None:
			Address = 'x.x.x.x'
		Address = Address.encode('utf-8').split(b',')[0].strip()

		if str(DeviceRecognition).upper() == 'Y':
			Address = 'x.x.x.x'

		return Address

	def __getUserAgent(self):
		UserAgent = request.headers.get('User-Agent')
		if UserAgent is None:  # pragma: no cover
			UserAgent = 'no user agent'
		UserAgent = UserAgent.encode('utf-8')
		base = self.__getRemoteAddr() + b'|' + UserAgent
		return base

	def CreateToken(self):
		"""Create a session protection token for this client.
		This method generates a session protection token for the cilent, which
		consists in a hash of the user agent and the IP Address. This method
		can be overriden by subclasses to implement different token generation
		algorithms.
		"""
		Base = self.__getUserAgent()
		Sha = sha256()
		Sha.update(Base)
		return Sha.hexdigest()

clsGenerateToken = MorakotSecurity()

def setsession(userid,firstname,lastname):
	if userid is not None:
		session['userid']=userid
	else:
		session['userid']='system'
	session['firstname']=firstname
	session['lastname']=lastname

def checksesionexpire():
	try:
		getsession=''
		getsession=session['userid']
		return True
	except Exception as ex:
		return False

def sigonsession():
	session['userid']='system'
	return session['userid']

def checkLogOutSession(func):	
	@wraps(func)
	def decorated(*args, **kwargs):
		Token 	= 	request.headers.get('AuthorizationKey')
		if (checkContentType() == "json" and 'API' in request.path.split('/')) or Token:
			if Token:
				try: 
					JSONWeb 				= 	JSONWebSignatureSerializer('secret-key')
					Credential 				= 	JSONWeb.loads(Token)
					GetExpiredDate  		=  	Credential.get('Expire')
					ExpireDate 				=  	datetime.strptime(GetExpiredDate, "%Y-%m-%d %H:%M:%S.%f") 
					MKTSecurity 			= 	Credential.get("MKTSecurity")
					Url 					= 	request.url.split('/Morakot')[0]
					TokenUrl 				= 	Credential.get('Url')		
					ApiSecurityKey 			= 	Credential.get('ApiSecurityKey')	
					ApiSecurityStore		= 	''		
					CurrentUser 			= 	MKT_LOGIN_USER.query.filter_by(UserID=Credential.get('UserID')).first()
					if CurrentUser:
						ApiSecurityStore 	= 	CurrentUser.ApiSecurity
						if Url == TokenUrl:
							if ExpireDate > datetime.utcnow():
								if ApiSecurityKey == ApiSecurityStore:
									session['getLogInID'] 		 	= Credential.get('UserID')
									session['SecurityHijacking'] 	= clsGenerateToken.CreateToken()
									session['MKTSecurity'] 			= MKTSecurity
									if not 'ChangeBranch' in session:
										session['ChangeBranch'] 	= CurrentUser.Branch
									capUserActivity() # capture user activitiy
									checkUserLogOut() # check user logout time
									return func(*args, **kwargs)
								else:
									session.clear()
									return jsonify({"message":{"message":["Warning, your account was logged from other device. Please kindly re-login."]}}),StatusCodes.unauthorized()		
							else:
								session.clear()
								return jsonify({'token':'',"message":{"message":[msg_token_expired]}}),StatusCodes.unauthorized()
						else:
							return jsonify({'token':'',"message":{"message":['Url is different']}}),StatusCodes.unauthorized()
					else:
						if not 'getLogInID' in session:
							return jsonify({'token':'',"message":{"message":[msg_session_time_out]}}),StatusCodes.unauthorized()
						else:
							return jsonify({'token':'',"message":{"message":['Invalid token']}}),StatusCodes.unauthorized()
				except Exception as e:
					return jsonify(message={'message':[str(e)]},token=''),StatusCodes.unauthorized()
			else:
				return jsonify(message = {'message':['Token is required']},token=''),StatusCodes.unauthorized()
		TokenKey = clsGenerateToken.CreateToken()		
		if 'SecurityHijacking' in session:
			SecurityHijacking = session['SecurityHijacking']
			if SecurityHijacking != TokenKey:
				session.clear()
				if checkContentType()=='json':
					return jsonify({'token':'',"message":{"message":['Warning, Something is wrong! Please kindly re-login.']}}),StatusCodes.unauthorized()
				flash('Warning, Something is wrong! Please kindly re-login.')
				return render_template("mktcore/logged_device.html")

		if 'getLogInID' in session:
			user = MKT_LOGIN_USER.query.filter_by(UserID=session.get('getLogInID','')).first()
			if user:
				StoreSecurity = user.SessionSecurity
				CurrSecurity  = session['MKTSecurity']		
				if StoreSecurity != CurrSecurity:
					session.clear()
					
					flash('Warning, your account was logged from other device. Please kindly re-login.')
					return render_template("mktcore/logged_device.html")

				capUserActivity() # capture user activitiy
				checkUserLogOut() # check user logout time
				return func(*args, **kwargs)
			
			session.clear()
			if checkContentType() == "json":
				return jsonify({"message":{"message":[msg_session_time_out]}}),StatusCodes.unauthorized()

			flash(msg_session_time_out)
			return render_template("TimeOut.html")
		session.clear()
		if checkContentType() == "json":
			return jsonify({"message":{"message":[msg_session_time_out]}}),StatusCodes.unauthorized()
		flash(msg_session_time_out)
		return render_template("TimeOut.html")
	return decorated


def checkUserLogOut():
	CurrentDate = datetime.now()
	CurrentTime = '%s:%s:00'% (CurrentDate.hour, CurrentDate.minute)
	
	if 'getLogInID' in session:
		CurrTime 	= 	str(CurrentTime)
		(H, M, S) 	= 	CurrTime.split(":")
		TimeNow 	= 	int(H) * 3600 + int(M) * 60

		user = MKT_USER.query.get(session['getLogInID'])
		if user:
			

			EndTime = user.EndTime if user.EndTime else None

			if EndTime:
				(H, M) 	= 	EndTime.split(":")
				intEndTime = int(H) * 3600 + int(M) * 60
				
				if int(intEndTime) < int(TimeNow):
					dellockrecordbyuser()
					session.clear()
					flash(msg_time_over)
					return render_template("TimeOut.html")

			return True
	
	session.clear()
	flash(msg_session_time_out)
	return render_template("TimeOut.html")

def checkLogOutTime(func):
	@wraps(func)
	def decorated(*args, **kwargs):
		CurrentDate = datetime.now()
		CurrentTime = '%s:%s:00'% (CurrentDate.hour, CurrentDate.minute)
		
		if 'getLogInID' in session:
			CurrTime 	= 	str(CurrentTime)
			(H, M, S) 	= 	CurrTime.split(":")
			TimeNow 	= 	int(H) * 3600 + int(M) * 60

			user = MKT_USER.query.get(session['getLogInID'])
			if user:
				EndTime = user.EndTime if user.EndTime else None

				if EndTime:
					(H, M) 	= 	EndTime.split(":")
					intEndTime = int(H) * 3600 + int(M) * 60
					
					if int(intEndTime) < int(TimeNow):
						dellockrecordbyuser()
						session.clear()
						if checkContentType() == "json":
							return jsonify({"message":{"message":[msg_time_over]}}),StatusCodes.unauthorized()
						flash(msg_time_over)
						return render_template("TimeOut.html")

				return func(*args, **kwargs)
		session.clear()
		if checkContentType() == "json":
			return jsonify({"message":{"message":[msg_session_time_out]}}),StatusCodes.unauthorized()
		flash(msg_session_time_out)
		return render_template("TimeOut.html")
	
	return decorated

def checkHeaderAPI(f):
	""" Using check header api with decorate"""
	@wraps(f)
	def wrap(*args, **kwargs):


		CheckResult = validateContentTypeJSON()
		
		if CheckResult[0]:
			
			return jsonify({"message":{"message":[CheckResult[0]]}}),CheckResult[1]

		# finally call f. f() now haves access to g.user
		return f(*args, **kwargs)

	return wrap

def validateContentTypeJSON():
	message = ''
	Status 	= ''
	if 'API' in request.path.split('/'):
		# print 'Okay'
		ContentType 		= 	request.headers.get('Content-Type')
		Accept 				=  	request.headers.get('Accept')
		AllowContentType 	= 	"application/json"
		AllowContentTypeUTF = 	"application/json;charset=utf-8"


		if not ContentType or not Accept:
			message = "Missing headers such as Content-Type or Accept."
			Status = StatusCodes.not_acceptable()

		elif not Accept in [AllowContentType,AllowContentTypeUTF]:
			message 	= "Not acceptable request for data formatted as %s. We are allowed data formatted with %s"%\
											(Accept,AllowContentType)

			Status = StatusCodes.not_acceptable()

		elif not ContentType in [AllowContentType, AllowContentTypeUTF]:
			message = "Unsupported Media Type %s. We are allowed Content-Type: %s or %s"%\
										(ContentType,AllowContentType, AllowContentTypeUTF)

			Status = StatusCodes.unsupported_media_type()

	return message, Status

#capture user activities
def capUserActivity():
	try :
		UserID = session['getLogInID'] if 'getLogInID' in session else ''
		CurrentBranch = session["ChangeBranch"] if 'ChangeBranch' in session else ''
		if UserID:
			user = MKT_LOGIN_USER.query.get(UserID)
			if user :
				user.LastTimeActivity = datetime.now()
				user.Branch = CurrentBranch
				db.session.add(user)
				db.session.commit()
				db.session.close()
				return True
			else:
				flash(msg_session_time_out)
				return render_template("TimeOut.html")

	except:
		return False


# Check time out user expire with stream
def sessionStreamLogOut():
	Session 	= False
	Dic 		= {}
	if 'getLogInID' in session:
		TIME_OUT 		= int(mktsetting.getSetting().TIME_OUT if mktsetting.getSetting().TIME_OUT else 15)
		CurrentUser 	= session['getLogInID']
		getNow 			= datetime.now()
		PlusExpireTime 	= getNow - timedelta(minutes=TIME_OUT)
		LoginUserObj 	= MKT_LOGIN_USER.query.filter(MKT_LOGIN_USER.LastTimeActivity <=  PlusExpireTime).\
										filter(MKT_LOGIN_USER.UserID==CurrentUser).first()
		if LoginUserObj:
			dellockrecordbyuser()
			session.clear()
			flash("Session time-out.")
			Session 	= False
		else:
			Session 	= True
	Dic.update({"Session":str(Session)})
	return Dic

def setModuleInternal(**kwargs):
	""" Check the module is allow only Morakot Team"""
	MorakotTeam = ['MORAKOT.V','ADMIN.S']
	if session['getLogInID'] in MorakotTeam:
		return True,''
	else:
		return False,"You can't access this module, It's allow only from Morakot Teams."
