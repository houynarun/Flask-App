# admin.py

from flask import request, url_for, render_template,flash,redirect,session,g,get_flashed_messages,jsonify
from flask.views import MethodView
from app import db
from formmodel import *
from autoid import *
from app.AutoID.models import *
from constant import * 
from app.Module.models import MKT_FORM
from globalfunction import * 
from flask import Markup
from app.mktcore.accessright import checkAccess,checkRecordAccBranch
import app.tools.mktnotification    as mktnotification
import app.tools.mktmoney           as mktmoney
import app.tools.mkttool            as mkttool
from flask.ext.login 		import login_required
import requests
from app import app
from app.mktcore.authentication	import getToken
import logging
# from app.Report.testreport import *
#admin = Blueprint('Admin', __name__, template_folder='templates')



tb=toolbar() # instance toolbar
class CRUDView(MethodView):
	template = 'crud.html'
	global_operation=''
	
	def __init__(self, endpoint,objform,g_id='',model=[],g_readonly='',get_maxfield=0, template=None ,form_type='MainForm',custom_form_data=None):
		self.form_type = form_type
		self.g_readonly=g_readonly
		self.custom_form_data = custom_form_data
		self.model = model
		self.endpoint = endpoint
		self.get_maxfield=get_maxfield
		self.g_id=g_id
		self.path = url_for('.%s' % self.endpoint)
		if template:
			self.template = template

		self.objform = objform        
		self.li_html=tb.toolbarevent('Cancel')

	def renderJsonFormat(self,data_custom='', **kwargs):
		Message = {"message":[""]}
		Status  = ""
		FormID  = ""
		Header 	= request.endpoint.split('.')[1]
		Operation 		= kwargs.get("operation",'')
		if Operation:
			self.form_type = 'Form'

		#It work when Posting data only
		if kwargs.get("RedirectUrl"):
			#get_flashed_messages() use for get all flash message ex: flash("This is flash message","success")
			Status = StatusCodes.ok()
			if get_flashed_messages(category_filter=["error"]):
				Status = StatusCodes.bad_request()
			Message 	= {"message":list(set(get_flashed_messages()))}
			RedirectUrl = kwargs.get("RedirectUrl").replace("/Morakot/",'')
			if "API" in kwargs.get("RedirectUrl"):
				RedirectUrl = kwargs.get("RedirectUrl").replace("/Morakot/API/",'')
			Name = RedirectUrl.split("/")[0]
			TypeUrl = kwargs.get('type_url','MainForm')
			return jsonify(redirect="/"+RedirectUrl,message=Message,name=Name,header=Header,type_url=TypeUrl,status=Status,token=getToken()),Status

		#Get status from form (Status use for check and create toolbar)
		if kwargs.get("form"):
			Status = kwargs.get("form").Status.data
			FormID = kwargs.get('g_id' , "")


		StatusCode 		= StatusCodes.ok() #Default status code is 200(Success)
		ButtonAction 	= []
		TabBar 			= []
		URL 			= kwargs.get("action","")
		
		#Create defualt more actions bar
		ListTabBar = ['ListAuth','ListLive','ListHist'] 
		if Operation not in ListTabBar:
			TabBar=tb.tabBar(url=URL)

		FormReadOnly = False
		hidEdit = kwargs.get("hidEdit")

		if kwargs.get("form"):
			FormReadOnly = kwargs.get("form").formReadOnly()
		
		if kwargs.get("li_html"):
			ButtonAction = tb.actionButton(listObj=zip(*kwargs.get("li_html"))[0],url = URL)
		#When form is form readonly
		if ((Operation=="Search") and FormReadOnly == "AUTH" and Status == 'AUTH') or '@' in FormID:
			ButtonAction[:] = [d for d in ButtonAction if d.get('text') != "Edit"]
		

		if hidEdit == False and FormReadOnly != 'AUTH':
			ButtonAction.append({"text":"Edit",
						"url":URL.replace("/Morakot",'')+"Edit",
						"icon":"edit",
						'method':'get',
						'type_url':'Form',
						'color':'#2EA3F2'})		

		if Status == "AUTH":
			if Operation != 'Edit':
				Reverse = 	{"text":"Reverse Record",
							"url":URL.replace("/Morakot",'')+"Reverse",
							"icon":"undo",
							'method':'get',
							'type_url':'Form',
							'color':'#F0AD4E'
							}
				ButtonAction.append(Reverse)
			ButtonAction[:] = [d for d in ButtonAction if d.get('text') != "Authorize" and d.get('text') !="Delete"]
		

		#When form read only is true
		if (Status and FormReadOnly == True) or ('@' in FormID) :
			ButtonAction = []

		if Operation == '':    			
			ButtonAction[:] = [d for d in ButtonAction if d.get('text') != "Edit"]
				

		
		ButtonFab 	=	{}		
		if len(ButtonAction) > 1:
			ButtonFab 		=  {
						  "icon": "more-vert",
						  "color": "#FFFFFF",
						  "button": ButtonAction
						  }
			ButtonAction 	= {}
		else:
			if len(ButtonAction) == 1 and (not '@' in FormID):
				ButtonAction[0].update({'color':'#FFFFFF'})
				ButtonAction = ButtonAction[0]
			else:
				ButtonAction = {}
		ToolBar = {
			"button_action":ButtonAction,
			"tab_bar":TabBar,
			"search":{
				"text":"Record ID",
				"url":URL.replace("/Morakot",'')+"Search",
				"icon":"search",
				'method':'get',
				'type_url':'Form',
				'color':''},
			'cancel':{
					"text": "Cancel",
					"url":URL.replace("/Morakot",'')+"Cancel",
					"icon":"undo",
					'method':'get',
					'color':'',
					'type_url':'Form'
					},
			'button_fab':ButtonFab
				}

		#get flask form validation
		if kwargs.get('form' , "") != "":
			if kwargs.get('form',None).errors:
				Message 	= kwargs.get('form',None).errors
				StatusCode 	= StatusCodes.not_acceptable()
				return jsonify({"message":Message , "static_method_type":"","data":{},'token':getToken(),"tool_bar":ToolBar,"header":Header, 'status' : StatusCode}),StatusCode

		#When method GET and has flash message
		if get_flashed_messages():
			Message 	= {"message":list(set(get_flashed_messages(category_filter=["error"])))} 
			#filter from flash message that error message
			if get_flashed_messages(category_filter=["error"]):
				if kwargs.get("StaticMethodType",""):
					Message.update({
						"static_method_type":kwargs.get("StaticMethodType","")
						})

				StatusCode = StatusCodes.not_acceptable()
			else:
				#filter from flash message that success message
				Message = { 
				"message":list(set(get_flashed_messages())),
				"static_method_type":""
				}

		#Get all properties of form as dictionary
		Data =	self.objform.getFormAttr(FormObject=kwargs.get("form"),Operation=kwargs.get("operation") , FormType = self.form_type , Header=kwargs.get('header' , '') , CustomButton = kwargs.get('custom_button',{}))

		#When if querys: it must be operation ListLive ListINAU or ListHist 
		if kwargs.get("querys"):
			Result,Status = Pagination.list(**kwargs)
			Result.update({"header":Header,'type':'List','token':getToken()})
			return jsonify(Result),Status

		if kwargs.get('customToolbar'):
			ToolBar = kwargs.get('customToolbar')
			if ToolBar[0] == 'BlankList':
				ToolBar = []


		if data_custom:
			if data_custom.get('ListError'):
				for row in	data_custom.get('ListError'):
					Message.update({
						row[0]:[row[1]]
						})

		return jsonify( status = StatusCode,token = getToken(), message = Message, data = Data,header=Header,record_id=kwargs.get('g_id' , "") , 
						tool_bar = ToolBar,type=self.form_type,body=kwargs.get('body',[]),
						total_record=kwargs.get("total_record"),
						total_page=kwargs.get("total_page"),
						current_page=kwargs.get("current_page")),StatusCode

	#template function
	def render_detail(self, **kwargs):
		#Work with Custom Form
		DataKwargsFromCustom 	= kwargs.get('DataKwargsFromCustom' , {})
		ToolBar = []
		Body 	= []
		form 	= ''

		if request.method == "GET":
			if self.form_type != 'Form' and self.form_type != 'MainForm':
				GetCustomResponse = self.custom_form_data(Operation=kwargs.get('operation')).process()
				GetCustomFormData =  getCustomFormData(GetCustomResponse=GetCustomResponse)
				ToolBar			= GetCustomFormData[0]
				Body 			= GetCustomFormData[1]
				DataKwargsFromCustom 			= GetCustomFormData[2]
				self.g_id 		= GetCustomFormData[3]
				GetForm   		= GetCustomFormData[4]
				CustomRedirect 	= GetCustomFormData[5]
				CustomType 		= GetCustomFormData[6]
				CustomButton	= GetCustomFormData[7]
				Header 			= GetCustomFormData[8]
				# varaible for pagination
				TotalRecord 	= GetCustomFormData[9]
				TotalPage		= GetCustomFormData[10]
				CurrentPage 	= GetCustomFormData[11]
				# end
				self.form_type 		= CustomType
				form 				= GetForm()
				kwargs['form'] 		= form
				kwargs['customToolbar'] 	= ToolBar
				kwargs['body'] 		= Body
				kwargs['globalID'] 	= DataKwargsFromCustom.get('ID',self.g_id)
				kwargs['g_id'] 		= self.g_id
				kwargs['custom_button'] = CustomButton
				kwargs['header'] 	= Header 
				kwargs['operation'] 	= '' 
				# varaible for pagination
				kwargs['total_record'] 	= TotalRecord 
				kwargs['total_page'] 	= TotalPage
				kwargs['current_page'] 	= CurrentPage
				#end
				kwargs.update(DataKwargsFromCustom)
				if CustomRedirect:
					if checkContentType()=="json" or 'API' in request.url:
						RedirectUrl =	CustomRedirect[0]
						TypeUrl 	=	CustomRedirect[1]
						return self.renderJsonFormat(RedirectUrl=RedirectUrl,type_url=TypeUrl)
					return redirect(CustomRedirect[0])
		kwargs.update(DataKwargsFromCustom)
		if "API" in request.url or checkContentType()=="json":
			return self.renderJsonFormat(data_custom=DataKwargsFromCustom,**kwargs)
		else:
			return render_template(self.template, path=self.path, **kwargs)	


	#template function for login
	def render_loginout(self, **kwargs):
		return render_template(self.loginout, path=self.path, **kwargs)

	#delimiter return index
	def return_index(self,item,search):
		try:
			item=item[:item.index(search)]
			return True
		except Exception as exe:
			return False

	#return param result
	def render_param(self):
		param=""
		self.get_maxfield=0
		if len(request.args)>0:
			self.get_maxfield=max_field_index(request.args,"fieldname")
	
			for i in range(1,int(self.get_maxfield)+1):
				
				
				if param=="":
					param=searchString(self.model[0],request.args.get("fieldname_1"),request.args.get("operator_1"),request.args.get("searchtext_1"))
				else:
					param = param+","+searchString(self.model[0],request.args.get("fieldname_"+str(i)),request.args.get("operator_"+str(i)),request.args.get("searchtext_"+str(i)))
		return param

	@login_required
	@checkLogOutSession
	@checkLogOutTime
	def get(self, obj_id='', operation='',page=1):

		if request.args.get("ID")!=None and (self.form_type == 'Form' or self.form_type == 'MainForm'):
			if operation=="":
				operation="Search"
			if obj_id=="":
				obj_id=request.args.get("ID")

		Page 		= int(request.args.get("offset",1))
		PerPage 	= int(request.args.get("limit",15))
		OrderBy 	= str(request.args.get("order_by" , "ID"))
		FilterBy 	= str(request.args.get("filter_by" , "ID"))
		Search 		=	str(request.args.get("search",""))

		RequestForm = request.form

		#flash(operation)
		#assign values
		action=self.path
		self.g_id=''
		g.formID=obj_id
		self.g_readonly=''
		notification='' # default notification 


		# Custom Form
		form    = ''
		ToolBar = []
		Body    = []
		Kwargs  = {}


		#check access right

		chk = checkAccess(self.path,operation)
		if chk != True:
			operation = operation
			if self.form_type == 'Form' or self.form_type == 'MainForm':
				flash(chk , "error")
				operation = ''
			return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
										formReadOnly=self.objform.formReadOnly(),operation = operation)
	
		# Add new field to model on the fly
		self.model = mkttool.alterModel(self.model)

		# Add new form control field on the fly
		self.objform = mkttool.alterForm(self.objform)


		objdb=manipulatedatatodb(self.objform,self.model,RequestForm,obj_id) # create instance object
		if operation!='':
			self.global_operation=operation

		#return blank form

		if operation =='New': #when user clicks on new navigation
			CheckFalse = False
			TableName = "" 
			self.li_html=tb.toolbarevent("New")
			
			# check before generating new ID
			newIDCheck = False
			newIDMSG = ""
			newIDCheck, newIDMSG = self.objform.beforeNewID()

			if newIDCheck == True :
				flash (msg_warning + newIDMSG ,"error")
				self.li_html=tb.toolbarevent("Cancel")
				self.form_type = 'Form'
				return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
										  formReadOnly=self.objform.formReadOnly(),operation = 'New')
				

			if obj_id!="" and obj_id!="Operation":

				CheckFalse, TableName = objdb.isDuplicate()
				if CheckFalse :
					if "@@" in TableName:
						flash(msg_error + TableName.replace("@@","") , "error")
					else:
						flash(msg_error+obj_id+" already exists in " + TableName , "error")
						
					self.li_html=tb.toolbarevent("Cancel")
					self.form_type = 'Form'
					return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
											  formReadOnly=self.objform.formReadOnly(),operation = 'New')
				else :
					#check record locked
					chk,inputter,inputdate=isrecordlocked(obj_id)


					if chk:

						flash(msg_recordlocked +inputter +", "+inputdate ,"error")
						self.li_html=tb.toolbarevent('Cancel')
						self.form_type = 'Form'
						return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
												 formReadOnly=self.objform.formReadOnly(),operation = 'New')
					else :
						addlockrecord(obj_id,self.model[0]().__class__.__name__) #add lock record

				if TableName != "" :
					flash (TableName , "error")
				self.g_id=obj_id #assign ID

			else:
				try:
					self.li_html=tb.toolbarevent('New')  
					#auto=eval("autoID('"+self.objform.setMasking()[1]+"','"+self.objform.setMasking()[0]+"')")
					#self.g_id=eval('auto.autonumber()')
					
					self.g_id = getAutoID (self.objform().__class__.__name__)
					if self.g_id != "" :
						#check record locked
						chk,inputter,inputdate=isrecordlocked(self.g_id)
						if chk:
							flash(msg_recordlocked +inputter +", "+inputdate , "error")
							self.li_html=tb.toolbarevent('Cancel')
							self.form_type = 'Form'
							return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
													  formReadOnly=self.objform.formReadOnly(),operation = 'New')
						else :
							addlockrecord(self.g_id,self.model[0]().__class__.__name__) #add lock record
						event_code = "703"
						Message = mktnotification.getEventCode()[event_code]
						# notification    = mktnotification.getSignal(obj_id,self.model[0],"AUTH",event_code)
						path  = str(request.path).split('/')[2]

						getUserLogInID = session['getLogInID']
						mktnotification.insertNotify({  
									'ID':self.g_id,
									'Path':path,
									'Status':"AUTH",
									'Code':event_code,
									'Model':"",
									'From':getUserLogInID, 
									'To':getUserLogInID,
									'Message':Message,
									'RecordType':'2'
						})    
					if self.g_id  == "" : # check id not assigned
						flash (msg_error + " invalid ID" , "error")
						self.li_html=tb.toolbarevent('Cancel')
						self.form_type = 'Form'
						return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
							formReadOnly=self.objform.formReadOnly(),operation = 'New')


				except Exception as exe:
					flash(msg_error +exe.message+ ",please define new ID..." "error")
					self.li_html=tb.toolbarevent('Cancel')
					return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
						formReadOnly=self.objform.formReadOnly(),operation = 'New')

			
			self.g_readonly='readonly'

			# define a static method to get values when new button is triggered
			#class subClass(self.objform):
			#    pass

			
			#subForm = subClass()
			#getString = self.objform.New()
			#subForm.CategoryType.default='Bank'
			#flash(subForm.CategoryType.default)
			#setattr(subForm,"BalanceType",'Cr')
			#for item in getString :
			#    eval("subForm." + item[0]).data = item[1] 
			#end of static method

		   # flash(subForm.CategoryType.data)
			form = objdb.form_model()


			return self.render_detail(form=form, action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
				formReadOnly=self.objform.formReadOnly(),operation = 'New')

		elif operation=='Delete': #when user click on delete navigation

			# call methods from FORM
			if self.objform.beforeDelete()==False:
				print msg_error+" please check your defined static method before record delete"
				return self.render_detail(form='', action=request.path,li_html=self.li_html,g_id='',g_readonly=self.g_readonly,disabled='',
					formReadOnly=self.objform.formReadOnly(),operation = 'Delete')
			# end
			self.li_html=tb.toolbarevent('Delete')
			objdb=manipulatedatatodb(self.objform,self.model,RequestForm,obj_id) # create instance object
			form=''
			if objdb.db_delete():
				self.li_html=tb.toolbarevent('Cancel')
				form=objdb.form_model()
				if checkContentType()=="json" or 'API' in request.url:
					self.form_type 		= 	'MainForm'
					return self.renderJsonFormat(RedirectUrl=request.endpoint.split('.')[1])
			return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
				formReadOnly=self.objform.formReadOnly(),notification=notification,operation = 'Delete')

		elif operation=='Authorize': #when user clicks on authorize navigation
		
			#obj_id = objdb.global_id 
			chk,inputter,inputdate=isrecordlocked(obj_id,Unlock=False)
			if chk:
				flash(msg_recordlocked +inputter +", "+inputdate ,"error")
				form = objdb.form_model('Delete')
				self.li_html=[('Cancel','')]
				self.g_readonly='readonly'
				
				return self.render_detail(form=form, action=action,li_html=self.li_html,g_id=obj_id,g_readonly=self.g_readonly,disabled='disabled',
					formReadOnly=self.objform.formReadOnly(),operation = 'Authorize')

			#if not checkApproval ():
			checkLimit = checkApproval(self.objform.__name__,obj_id, self.model[0],'') 
			if not checkLimit[0] :
				form = objdb.form_model('Delete')
				self.li_html = tb.toolbarevent('Search') # still enable save button
				flash(checkLimit[1] , "error")# Oop! over limit, please try again in your approval amount.
				return self.render_detail(form=form, action=action,li_html=self.li_html,g_id=obj_id,g_readonly=self.g_readonly,disabled='disabled',
					formReadOnly=self.objform.formReadOnly(), checkBranch="True",operation = 'Authorize')

				# return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',formReadOnly=self.objform.formReadOnly(),notification=notification)

			#end limit approval
			#accept override message check
			accept = request.args.get("accept")
			if accept != "override":
				status = False
				AcceptValidate = False
				form=objdb.form_model('Delete')
				self.li_html = tb.toolbarevent('Search') # still enable save button
				AcceptOverride = self.objform.IsAcceptOverrideINAU()
				if AcceptOverride:
					status = AcceptOverride[0]
					msg = AcceptOverride[1]
					if len(AcceptOverride) > 2:
						AcceptValidate = AcceptOverride[2]

				# noUrl  = request.path.split('/')[1] + "/" + request.path.split('/')[2] +"/Cancel/Operation/"
				yesUrl = request.path.split('/')[1] + "/" + request.path.split('/')[2] +"/Authorize/" + obj_id + "/"
				#window.location.href=url+"/Authorize/"+value_id+"/";
				if status == True:
					
					if not AcceptValidate:
						url="<a class='btn btn-flat btn-success btn-xs' href='javascript:void(0)' id='accept' onclick=fn_fadeIn();window.location.href='/"+ yesUrl +"?accept=override'; >Yes </a>"
						cancel="<a class='btn btn-flat btn-danger btn-xs' href='javascript:void(0)' data-dismiss='alert'> No</a>"
						if checkContentType() == "json":
							flash(msg , "error")
						else:
							flash(Markup("<span style=color:#d38e99>"+msg+"&nbsp;&nbsp;&nbsp;</span>"+url+" "+cancel) , "error")
					else:
						if checkContentType() == "json":
							flash(msg , "success")
						else:
							flash(Markup(msg) , "success")
					return self.render_detail(form=form, action=action,li_html=self.li_html,g_id=obj_id,g_readonly=self.g_readonly,disabled='disabled',
						formReadOnly=self.objform.formReadOnly(), checkBranch="True",operation = 'Authorize' , StaticMethodType = "IsAcceptOverride")
		

			# call methods from FORM
			if self.objform.beforeAuthorize()==False:
				print msg_error+" please check your defined static method before record authorize"
				return self.render_detail(form='', action=request.path,li_html=self.li_html,g_id='',g_readonly=self.g_readonly,disabled='',
					formReadOnly=self.objform.formReadOnly(),operation = 'Authorize')
			# end

			self.li_html=tb.toolbarevent('Cancel')
			form_authorize =objdb.form_authorize()
			if form_authorize:
				#Add notification
				event_code = "200"
				Message = mktnotification.getEventCode()[event_code]
				# notification    = mktnotification.getSignal(obj_id,self.model[0],"AUTH",event_code)
				path  = str(request.path).split('/')[3] if 'API' in request.path else str(request.path).split('/')[2]
				mktnotification.insertNotify({ 
							'ID':obj_id, 
							'Path':path,
							'Status':"AUTH",
							'Code':event_code,
							'Model':self.model[0].__name__,
							'From':form_authorize['Authorizer'], 'To':form_authorize['Inputter'],
							'Message':Message
				})
				# Delete lock record
				dellockrecord(obj_id)
				# End block notification
				self.li_html=tb.toolbarevent('Cancel')
				form=objdb.form_model('Delete')
				ObjRedirect = self.objform.redirectAuthorize()
				if ObjRedirect != None :
					if checkContentType()=="json":
						return self.renderJsonFormat(RedirectUrl=ObjRedirect)
					return redirect(ObjRedirect,code=302)

			if checkContentType()=="json" or 'API' in request.url:
				self.form_type 		= 	'MainForm'
				return self.renderJsonFormat(RedirectUrl=request.endpoint.split('.')[1])
			#flash(obj_id)
			return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
				formReadOnly=self.objform.formReadOnly(),notification=notification,operation = 'Authorize')
		
		#call review method
		elif operation =='Verify':

			# call methods from FORM
			if self.objform.beforeVerify()==False:
				print msg_error+" please check your defined static method before verifying a record"
				return self.render_detail(form='', action=request.path,li_html=self.li_html,g_id='',g_readonly=self.g_readonly,disabled='',
					formReadOnly=self.objform.formReadOnly(),operation = 'Verify')
			# end

			chk_status, chk_msg = objdb.form_verify()
			if chk_status :
				# Delete lock record
				dellockrecord(obj_id)
				self.li_html=tb.toolbarevent('Cancel')

				ObjRedirect = self.objform.redirectAfterVerify()
				if ObjRedirect != None :
					return redirect(ObjRedirect,code=302)


			flash(chk_msg ,"error")

			return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
				formReadOnly=self.objform.formReadOnly(),notification=notification,operation = 'Verify')


		elif operation =='Cancel': # when user click on cancel navigation
			if obj_id!="" and obj_id!="Operation":
				dellockrecord(obj_id)
			
			self.li_html=tb.toolbarevent('Cancel')
			return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',
				formReadOnly=self.objform.formReadOnly(),operation = 'Cancel')
		
		elif operation == "ListLive":
			self.template="list.html"
			formatField,Currency = self.objform.formatMoney() #call static method defined in form

			getparam=self.render_param()
			if len(self.objform.listField()) ==2 :
				listfield, filterfield = self.objform.listField()
				mlist=List(self.model[0],getparam, listfield,filterfield)
			else :
				listfield = self.objform.listField()
				mlist=List(self.model[0],getparam, listfield) 
			Model = self.model[0]
			

			return self.render_detail(important_field=self.objform.importantField(),action=action,querys=mlist.mktList(),fields=mlist.fields,searchfields=mlist.searchfields,nfield=self.get_maxfield, formatMoney=formatField,currencyField=Currency,
				toMoney=mktmoney.toMoney,float=float,curobj=mktmoney.getCurrencyObj,hidEdit=False,formReadOnly=self.objform.formReadOnly(),
				page = Page , per_page = PerPage , order_by = OrderBy , filter_by = FilterBy, model = Model , search = Search,operation = 'ListLive')
		
		elif operation == "ListAuth":
			self.template="list.html"

			formatField,Currency = self.objform.formatMoney() #call static method defined in form
			getparam=self.render_param()
			if len(self.objform.listField()) ==2 :
				listfield, filterfield = self.objform.listField()
				mlist=List(objdb.inau_object(self.model[0]),getparam,listfield,filterfield)
			else :
				listfield = self.objform.listField()
				mlist=List(objdb.inau_object(self.model[0]),getparam,listfield) 

			imp_module = importlib.import_module(self.model[0].__module__)        
			Model  = getattr(imp_module, self.model[0]().__class__.__name__ + '_INAU')
			
			return self.render_detail(important_field=self.objform.importantField() ,action=action,querys=mlist.mktList(),fields=mlist.fields,searchfields=mlist.searchfields,nfield=self.get_maxfield, formatMoney=formatField,currencyField=Currency,
				toMoney=mktmoney.toMoney,float=float,curobj=mktmoney.getCurrencyObj,hidEdit=False,formReadOnly=self.objform.formReadOnly(),
				page = Page , per_page = PerPage , order_by = OrderBy , filter_by = FilterBy, model = Model , search = Search,operation = 'ListAuth')
 
		elif operation == "ListHist":
			self.template="list.html"

			formatField,Currency = self.objform.formatMoney() #call static method defined in form
			getparam=self.render_param()
			if len(self.objform.listField()) ==2 :
				listfield, filterfield = self.objform.listField()
				mlist=List(objdb.hist_object(self.model[0]),getparam,listfield,filterfield)
			else :
				listfield = self.objform.listField()
				mlist=List(objdb.hist_object(self.model[0]),getparam,listfield) 

			imp_module = importlib.import_module(self.model[0].__module__)        
			Model  = getattr(imp_module, self.model[0]().__class__.__name__ + '_HIST')
			
			return self.render_detail(action=action,querys=mlist.mktList(),fields=mlist.fields,searchfields=mlist.searchfields,nfield=self.get_maxfield, formatMoney=formatField,currencyField=Currency,
				toMoney=mktmoney.toMoney,float=float,curobj=mktmoney.getCurrencyObj,hidEdit=False,formReadOnly=self.objform.formReadOnly(),
				page = Page , per_page = PerPage , order_by = OrderBy , filter_by = FilterBy, model = Model , search = Search,operation = 'ListHist')

		elif operation == "Reverse":

			try:

				getForm, getFormMsg = self.objform.reverseRec()				
				if getForm == True and getFormMsg != "" :
					flash (getFormMsg , "error")
					#Add notification
					event_code      = "600"
					path  = str(request.path).split('/')[3] if 'API' in request.path else str(request.path).split('/')[2]
					mktnotification.insertNotify({ 
								'ID':obj_id, 
								'Path':path,
								'Status':"AUTH",
								'Code':event_code,
								'Model':self.model[0].__name__,
							   
					})
					if obj_id!="" and obj_id!="Operation":
						dellockrecord(obj_id)
					if checkContentType()=="json" or 'API' in request.url:
						self.form_type 		= 	'MainForm'
						return self.renderJsonFormat(RedirectUrl=request.endpoint.split('.')[1])
					return self.render_detail(form='', action=action,li_html=self.li_html,g_id='',g_readonly=self.g_readonly,disabled='',
						formReadOnly=self.objform.formReadOnly(),notification=notification,operation = "Reverse")

				elif getForm == True :
					if objdb.db_reverse():

						#Add notification
						event_code      = "600"
						path  = str(request.path).split('/')[3] if 'API' in request.path else str(request.path).split('/')[2]
						mktnotification.insertNotify({ 
									'ID':obj_id, 
									'Path':path,
									'Status':"AUTH",
									'Code':event_code,
									'Model':self.model[0].__name__,
								   
						})
						if obj_id!="" and obj_id!="Operation":
							dellockrecord(obj_id)
						if checkContentType()=="json" or 'API' in request.url:
							self.form_type 		= 	'MainForm'
							return self.renderJsonFormat(RedirectUrl=request.endpoint.split('.')[1])	

						return self.render_detail(form='', action=action,li_html=self.li_html,g_id='',g_readonly=self.g_readonly,disabled='',
							formReadOnly=self.objform.formReadOnly(),notification=notification,operation = "Reverse")
				else :
					flash ( msg_error + "cannot reverse this record" ,"error")
					if obj_id!="" and obj_id!="Operation":
						dellockrecord(obj_id)

					return self.render_detail(form='', action=action,li_html=self.li_html,g_id='',g_readonly=self.g_readonly,disabled='',
						formReadOnly=self.objform.formReadOnly(),operation = "Reverse")

			except Exception as exe:
				flash (msg_error+ exe.message , "error")

			return self.render_detail(form='', action=action,li_html=self.li_html,g_id='',g_readonly=self.g_readonly,disabled='',
				formReadOnly=self.objform.formReadOnly(),operation = "Reverse")
			

		elif operation == 'Search': # when user presses on search box
			#check record locked
			form = objdb.form_model('Delete')
			#obj_id = objdb.global_id 
			chk,inputter,inputdate=isrecordlocked(objdb.global_id)
			#flash (str(chk))
			if chk:
				flash(msg_recordlocked +inputter +", "+inputdate ,"error")
				self.li_html=[('Cancel','')]
				self.g_readonly='readonly'
				return self.render_detail(form=form, action=action,li_html=self.li_html,g_id=obj_id,g_readonly=self.g_readonly,disabled='disabled',
					formReadOnly=self.objform.formReadOnly(),operation = "Search")
			
			if form!='':
				# return jsonify(Data = self.objform.json(FormObject=form))
				#check a record if it requires to review before authorize
				self.li_html = tb.toolbarevent('Search') # set default
				if g.getNAuthorize >1 :

					obj_query=objdb.inau_object(self.model[0]).query.filter_by(ID=obj_id).first()
					if obj_query :

						if hasattr(self.model[0], "Reviewcurr") :
							
							Reviewcurr = getattr(obj_query, "Reviewcurr")

							if Reviewcurr == None :
								Reviewcurr = 0

							if g.getNAuthorize - int(Reviewcurr) != 1:
		
								self.li_html = [('Delete',''),('Verify',''),('Edit',''),('Cancel','')]

				self.g_readonly='readonly'
				addlockrecord(obj_id,self.model[0]().__class__.__name__) #add lock record

			else:
				self.li_html=tb.toolbarevent('Cancel')

			if form != "":
				if session.get("ChangeBranch") != form.Branch.data :
					self.li_html=[('Cancel','')]

				ViewRecordDiffBranch = checkRecordAccBranch(form.Branch.data, self.model[0]().__class__.__name__)
				if not ViewRecordDiffBranch[0]:
					form = ""
					self.li_html = tb.toolbarevent('Cancel') # set default
					flash(ViewRecordDiffBranch[1] ,"success")
					return self.render_detail(form=form, action=action,li_html=self.li_html,g_id=obj_id,g_readonly=self.g_readonly,disabled='disabled',
						formReadOnly=self.objform.formReadOnly(),operation = "Search")

			return self.render_detail(form=form, action=action,li_html=self.li_html,g_id=obj_id,g_readonly=self.g_readonly,disabled='disabled',
				formReadOnly=self.objform.formReadOnly(), checkBranch="True",operation = "Search")

		elif operation=='Edit': #when user clicks on edit navigation

			g.formID=obj_id  #get ID from form of text ID
			chk,inputter,inputdate=isrecordlocked(obj_id)
			if chk:
				flash(msg_recordlocked +inputter +", "+inputdate , "error")
				self.li_html=tb.toolbarevent('Cancel')
				return self.render_detail(form='', action=action,li_html=self.li_html,g_id=obj_id,g_readonly=self.g_readonly,disabled='',
					formReadOnly=self.objform.formReadOnly(),operation = "Edit")

			form=objdb.form_model('Delete')
			m_disabled = ''
			if form!='':
				if session.get("ChangeBranch") != form.Branch.data :
					flash(msg_warning + 'Record is in different branch, not allow to edit' ,"error")
					self.li_html=[('Cancel','')]
					m_disabled = 'disabled'
				else :
					self.li_html=tb.toolbarevent('Edit')
					addlockrecord(obj_id,self.model[0]().__class__.__name__) #add lock record
			else:
				self.li_html=tb.toolbarevent('Save')

			return self.render_detail(form=form, action=action,li_html=self.li_html,g_id=obj_id,g_readonly=self.g_readonly,disabled=m_disabled,
				formReadOnly=self.objform.formReadOnly(),operation = "Edit")
			

		return self.render_detail(form='', action=action,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',formReadOnly=self.objform.formReadOnly(),notification=notification)
		

	#define post method
	@login_required
	@checkLogOutSession
	@checkLogOutTime
	def post(self, obj_id=''):

		try:
			notification='' # default notification 
			RequestForm = request.form

			form = ''
			ToolBar = []
			Body 	= []
			DataKwargsFromCustom 	= {}
			CustomFormData  = {}

			accept = request.args.get("accept")

			if accept:
				operation = "Override"
			else :
				operation = ""

			 #check access right
			chk = checkAccess(self.path,operation)

			if chk != True:
				flash(chk , "error")
				return self.render_detail(form='', action=request.path,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',formReadOnly=self.objform.formReadOnly())

			#if not checkApproval ():
			if g.getNAuthorize == 0:
				checkLimit = checkApproval  (self.objform.__name__,'', '',RequestForm) 
				if not checkLimit[0] :
					flash (checkLimit[1] , "error")# Oop! over limit, please try again in your approval amount.
					return self.render_detail(form='', action=request.path,li_html=self.li_html,g_id=self.g_id,g_readonly=self.g_readonly,disabled='',formReadOnly=self.objform.formReadOnly())

			#end limit approval
			

			g_id=RequestForm["ID"]
			
			# Standard
			if self.objform().postStandard():
				objdb = manipulatedatatodb(self.objform,self.model,RequestForm,g_id) # create instance object
				
				form=''
				form=objdb.form_model()
			else:
				form = self.objform(request.form)

			# End Standard


			#flash(request.form)
			if form.validate() == False:
				self.g_readonly='readonly'
				self.li_html = tb.toolbarevent('New') # still enable save button
			#end 
			
			if g_id=="":
				# flash("ID is invalid, please input ID." , "error")
				self.li_html = tb.toolbarevent('Save') #  enable new button
				# return self.render_detail(form=form, action=request.path,li_html=self.li_html,g_id=g_id,g_readonly=self.g_readonly,disabled='',formReadOnly=self.objform.formReadOnly())
			
			if request.method == 'POST' and form.validate() and g_id!="":
				# Delete lock record
				dellockrecord(g_id)
				#accept override message check
				accept = request.args.get("accept")
				if accept != "override":
					status = False
					AcceptValidate = False
					self.li_html = tb.toolbarevent('New') # still enable save button
					AcceptOverride = self.objform.IsAcceptOverride()
					if AcceptOverride:
						status = AcceptOverride[0]
						msg = AcceptOverride[1]
						if len(AcceptOverride) > 2:
							AcceptValidate = AcceptOverride[2]

					if status == True:
						url="<a class='btn btn-flat btn-success btn-xs' href='javascript:void(0)' id='accept' onclick=document.forms['frm'].action='"+request.path+"?accept=override';removeComma();fn_fadeIn();document.forms['frm'].submit();return >Yes </a>"
						cancel="<a class='btn btn-flat btn-danger btn-xs' href='javascript:void(0)' data-dismiss='alert'> No</a>"
						if checkContentType() == "json":
							flash(msg , "error")
						else:
							if not AcceptValidate:
								flash(Markup("<span style=color:#d38e99>"+msg+"&nbsp;&nbsp;&nbsp;</span>"+url+" "+cancel), "error")    
							else:
								flash(Markup(msg))
						return self.render_detail(form=form, action=request.path,li_html=self.li_html,g_id=g_id,g_readonly=self.g_readonly,disabled=''
							,formReadOnly=self.objform.formReadOnly() , StaticMethodType = "IsAcceptOverride")
				# call methods from FORM
				if form.beforeInsert() != True:
					flash(msg_error+" please check your defined static method before record inserted" ,"error")
					return self.render_detail(form= '', action = request.path, li_html = self.li_html, g_id ='',g_readonly = self.g_readonly,disabled='',formReadOnly=self.objform.formReadOnly())
				# end 
				if self.objform().postStandard():
					if objdb.db_model():					
						self.li_html = tb.toolbarevent('Cancel')
						ObjRedirect = form.redirectAfterInsert()
						if ObjRedirect != None:
							#Add notification
							event_code  = mktnotification.getCode(RequestForm['Status'],g.getNAuthorize)
							path  = str(request.path).split('/')[3] if 'API' in request.path else str(request.path).split('/')[2]
							mktnotification.insertNotify({ 
										'ID':g_id, 
										'Path':path,
										'Status':RequestForm['Status'],
										'Code':event_code,
										'Model':self.model[0].__name__,
							})
							RedirectUrl = ObjRedirect
							TypeUrl = 'Form'
							if type(ObjRedirect) == list:
								RedirectUrl =	ObjRedirect[0]
								TypeUrl 	=	ObjRedirect[1]								
							if checkContentType()=="json":
								return self.renderJsonFormat(RedirectUrl=RedirectUrl,type_url=TypeUrl)

							return redirect(RedirectUrl,code=302)

						#Add notification
						event_code  = mktnotification.getCode(RequestForm['Status'],g.getNAuthorize)
						path  = str(request.path).split('/')[3] if 'API' in request.path else str(request.path).split('/')[2]
						mktnotification.insertNotify({ 
									'ID':g_id, 
									'Path':path,
									'Status':RequestForm['Status'],
									'Code':event_code,
									'Model':self.model[0].__name__,
						})
						form =''
						g_id =''
						# Fix Double entry with refersh browser
						if checkContentType()=="json":
							return self.renderJsonFormat(RedirectUrl=request.path)
						return redirect(request.path)
					else:
						self.li_html = tb.toolbarevent('New') # still enable save button
				else:
					if self.form_type != 'Form':
						GetCustomResponse = self.custom_form_data(Operation='').process()
						GetCustomFormData =  getCustomFormData(GetCustomResponse=GetCustomResponse)
						ToolBar			= GetCustomFormData[0]
						Body 			= GetCustomFormData[1]
						DataKwargsFromCustom	= GetCustomFormData[2]
						self.g_id 		= GetCustomFormData[3]
						GetForm   		= GetCustomFormData[4]
						CustomRedirect 	= GetCustomFormData[5]
						CustomType 		= GetCustomFormData[6]
						CustomButton	= GetCustomFormData[7]
						Header 			= GetCustomFormData[8]
						CustomFormData['customToolbar'] 	= ToolBar
						CustomFormData['body'] 		= Body
						CustomFormData['globalID'] 	= DataKwargsFromCustom.get('ID',self.g_id)
						CustomFormData['custom_button'] = CustomButton
						CustomFormData['header'] 	= Header
						form = GetForm()
						self.form_type 		= CustomType
						if CustomRedirect:
							if checkContentType() == "json" or "API" in request.url:
								RedirectUrl =	CustomRedirect[0]
								TypeUrl 	=	CustomRedirect[1]
								return self.renderJsonFormat(RedirectUrl=RedirectUrl,type_url=TypeUrl)
							return redirect(CustomRedirect[0])
			return self.render_detail(form=form, action=request.path,li_html=self.li_html,g_id=g_id,g_readonly=self.g_readonly,disabled='',formReadOnly=self.objform.formReadOnly(),
									notification=notification,DataKwargsFromCustom=DataKwargsFromCustom,**CustomFormData)
		except Exception as ex:
			logging.error("Exception occurred", exc_info=True)
			flash(msg_error+ex.message , "error")
			return self.render_detail(form='', action=request.path,li_html=self.li_html,g_id='',g_readonly=self.g_readonly,disabled='',formReadOnly=self.objform.formReadOnly())

def  getCustomFormData(GetCustomResponse=None):
	ToolBar = []
	Body = []
	Kwargs = {}
	RecordID = ''
	if GetCustomResponse:
		ToolBar = GetCustomResponse.get('custom_tool_bar')
		Body = GetCustomResponse.get('body_dict')
		Kwargs = GetCustomResponse.get('kwargs')
		RecordID = GetCustomResponse.get('record_id')
		form = GetCustomResponse.get('form')
		CustomRedirect = GetCustomResponse.get('redirect')
		CustomType = GetCustomResponse.get('custom_type')
		CustomButton = GetCustomResponse.get('custom_button')
		Header 		=	GetCustomResponse.get('header')
		# varaible for paginantion
		TotalRecord 	= GetCustomResponse.get('total_record')
		TotalPage 		= GetCustomResponse.get('total_page')
		CurrentPage 	= GetCustomResponse.get('current_page')
		#end
	return [ToolBar,Body,Kwargs,RecordID,form,CustomRedirect,CustomType,CustomButton,Header,TotalRecord,TotalPage,CurrentPage]
