'''
Created Date: 04 Nov 2014
Author: Buntha Ly

Modified by: Buntha Ly
Modified Date: 21 Sept 2017
'''

from flask import flash,g
from auditrails import *
from .session import *
from app import db
from local import *
#from app.Menus.models import *
from datetime import datetime
from werkzeug.datastructures import ImmutableMultiDict
from werkzeug.security import generate_password_hash, \
	 check_password_hash
from constant import *
from sqlalchemy.inspection import inspect #check primary keys
from autoid import *
from app.tools.user import *
from globalfunction import searchString, returnFilter,checkRestrictBranch, excludeBranch
import app.tools.mkttool as mkttool
import importlib
import app.tools.mktnotification 	as mktnotification
import app.tools.mktsetting 		as mktsetting


#define global function to replace __None by ""
def replaceNone(value):
	if value == "__None":
		return ""
	else:
		return value

#mange list
class List:
	def __init__(self,model,getparam="",fields=[],filterlist=[],searchfields=[]):
		searchfields=[]
		modelName =model().__class__.__name__
		for cname in model.__table__.columns:
			myField=str(cname).replace(modelName+".","")
			searchfields.append(myField)

		if len(fields)==0:
			for cname in model.__table__.columns:
				myField=str(cname).replace(modelName+".","")
				if myField not in list_exclude:
					fields.append(myField)
	
		self.filterlist = filterlist
		self.fields=fields
		self.model=model
		self.searchfields=searchfields
		self.getparam=getparam
		self.modelName=modelName

	def mktList(self):
		try :

			#testing code to set default filter from static method in form
			param = ""
			#by default order by asc()
			orderField = self.model.ID.asc()
			#self.filterlist = ["AccCategory*EQ*22300 22301", "Currency*EQ*KHR USD" ] 
			if len (self.filterlist) >0 :
				for filteritem in self.filterlist :
					if filteritem.find("*") != -1:
						getsplit = filteritem.split("*")
						#flash(getsplit)
						if param == "":
							param = searchString (self.model, getsplit[0],getsplit[1],getsplit[2]) 
						else :
							param = param + "," + searchString (self.model, getsplit[0],getsplit[1],getsplit[2]) 
					else:
						if str(filteritem).upper() == 'DESC':
							orderField = self.model.ID.desc()
			#time.sleep(30) # delays for 5 seconds
			#filter from access list.
			getFilter = returnFilter (self.model, "self.model")

			if param != "" :
				if getFilter == "" :
					getFilter =  param
				else :
					getFilter = getFilter + "," + param

			if self.getparam=="":

				if getFilter != "" :
					resultSet=eval("self.model.query.filter(" + getFilter + ")")
				else :
				   # Filter INAU record by branch
					
					resultSet=self.model.query
					CheckINAU = self.modelName[-4:]
					if CheckINAU == "INAU":
						resultSet = resultSet.filter(self.model.Branch == getCurrentBranch())


			else:
				if getFilter != "" :
					resultSet=eval("self.model.query.filter("+self.getparam+"," + getFilter + ")")
				else :
					resultSet=eval("self.model.query.filter("+self.getparam+")")
				#flash(resultSet)
			resultSet = resultSet.order_by(orderField)
			
			return resultSet
		except Exception as exe:
			
			flash (msg_error+ exe.message)
			#raise
			return ""



		
#manage class toolbar
class menu:
	def __init__(self,new=[],save=[],delete=[],authroize=[]):
		self.new=new
		self.save=save
		self.delete=delete
		self.authroize=authroize


class toolbar:
	def toolbarevent(self,operation=""):
		if operation in ('New','Edit'):
			ul_list=[('Save',''),('Cancel','')]
		elif operation in ('Search'):
			ul_list=[('Delete',''),('Edit',''),('Authorize',''),('Cancel','')]
		else:
			ul_list=[('New',''),('Edit',''),('Cancel','')]
		return ul_list
	def actionButton(self,listObj=[],url = ''):
		ButtonAction = []
		if request.args.get('workflow') == 'y':
			ID 		= request.args.get('ID')
			FormID  = request.args.get('formID')
			InBranch = request.args.get('branch')
			Action = '/ReviewApproveCustom?ID=%s&formID=%s&InBranch=%s'%(ID,FormID,InBranch)
			ButtonAction = [{
				"text": 'Workflow',
				"url":Action,
				"icon":'pets',
				"method":'get',
				'color':'#5CB85C',
				'type_url':'Custom'
				}]
		# for row in zip(*kwargs.get("li_html"))[0]:
		for row in listObj:
			Icon = ""
			Method = "get"
			Text    = row
			Color = ''
			if row == "Show":
				row = "New"
			if row == "New":
				Icon = "add"
				Color = '#FFFFFF'
			elif row == "Edit":
				Icon = "edit"
				Color = '#2EA3F2'
			elif row == "Delete":
				Icon = "delete-forever"
				Color = '#D9534F'
			elif row == "Save":
				Icon = "save"
				row  = ""
				Color = '#2EA3F2'
				Method = "post"
			elif row == "Authorize":
				Icon = "done"
				Color = '#5CB85C'
			elif row == "Verify":
				Icon = "done"
				Color= '#5CB85C'

			Action = url.replace("/Morakot",'')+row
			if row == "New":
					Action += "/Operation"
			if "API" in Action:
				Action = url.replace("/Morakot/API",'')+ row
				if row == "New":
					Action += "/Operation"
			if row != 'Cancel':
				Tool = {
				"text": Text,
				"url":Action,
				"icon":Icon,
				"method":Method,
				'color':Color,
				'type_url':'Form'
				}
				ButtonAction.append(Tool)
		return ButtonAction
	def tabBar(self,url=''):
		TabBar = [
			{
			"text":"Live",
			"url":url.replace("/Morakot",'')+"ListLive/Operation/",
			"icon":"list",
			'method':'get',
			'color':'',
			'type_url':'Form'
			},
			{
			"text":"Unauthorize",
			"url":url.replace("/Morakot",'')+"ListAuth/Operation/",
			"icon":"list",
			'method':'get',
			'color':'',
			'type_url':'Form'
			},
			{
			"text":"History",
			"url":url.replace("/Morakot",'')+"ListHist/Operation/",
			"icon":"list",
			'method':'get',
			'color':'',
			'type_url':'Form'
			}
		]
		return TabBar

	
#end of class|


#class to check delimiter 
class checkindex :

	#the isindex return True if the delimiter is found
	def isindex(self,item,searchdelimiter):
		try:
			item=item[:item.index(searchdelimiter)]
			return True
		except Exception as exe:
			return False
	# end of method

	# the method split search string by returning key and value
	def delimiterdic(self,item,searchdelimiter):

		keyvalue=[]
		if self.isindex(item,searchdelimiter):
			keyvalue.append(item[item.index(searchdelimiter)+1:])
			keyvalue.append(item[:item.index(searchdelimiter)])
		return keyvalue
	# end of method

# end of class

class manipulatedatatodb:
	

	#field_exclude=("ID","Status","Curr","Inputter","Createdon","Authorizer","Authorizeon")

	#create constructor
	def __init__(self,frmobject="",model="",formrequest="",global_id=""):
		self.frmobject=frmobject
		self.model=model
		self.formrequest=formrequest
		self.global_id=global_id
		self.org_formrequest=formrequest #store the orginal form request
		self.g_list_trail = []
		#organizing fiels from request.form
		self.g_message_inau=''
		self.g_message=''
		self.g_inputter_old = ''
		self.g_createdon_old = '' 
		self.g_status_old = ''

	#check duplicate ID
	def isDuplicate(self):
		
		obj_query=self.inau_object(self.model[0]).query.get(self.global_id)
		if obj_query!=None:
			return True, self.inau_object(self.model[0])().__class__.__name__

		obj_query=self.model[0].query.get(self.global_id)
		if obj_query!=None:
			return True, self.model[0]().__class__.__name__

		getHistObject = self.hist_object(self.model[0])
		obj_query = getHistObject.query.get(self.global_id+"@0")
		if obj_query!= None:
			obj_subquery = getHistObject.query.filter(getHistObject.ID.like (self.global_id + "@%")).all()
			session["Curr"] = len (obj_subquery) 
			return False, "You're restoring a record from history with curr No: " + str(session["Curr"])

		#Validate a new record ID for model which was already configured in system auto ID.
		#check_autoID = True
		#flash(self.frmobject.__name__)
		check_autoID = MKT_AUTOID.query.get(self.frmobject.__name__)

		if check_autoID:
			# @@ is the flag for displaying message
			return True, "@@This version doesn't allow to manually input a new record ID."

		return False, ""

	# update record reviewing
	def updateReview(self, object_model, skip_access_right=False):
		#check verify right before executing
		if not skip_access_right:
			if g.AccessRight != '' and ('F' not in g.AccessRight  and 'ALL' not in g.AccessRight):

				return False, msg_permission

		if self.g_inputter_old == getUser().ID or self.g_inputter_old == '' :
			for index in range (1, g.getNAuthorize) :
				setattr (object_model, "Reviewcurr", 0 )
				setattr (object_model, "Reviewer_"+ str(index), None )
				setattr (object_model, "Reviewedon_"+ str(index), None)
			return True, ""


		#check attributte in model 
		if hasattr(object_model,'Reviewcurr') and  self.g_inputter_old != getUser().ID :

			if getUser().ID  in self.g_list_trail :
				return False, msg_cannot_verify

			Reviewcurr = getattr (object_model, 'Reviewcurr')
			if Reviewcurr == None :
				Reviewcurr = 0

			Reviewcurr = int(Reviewcurr)
			if Reviewcurr < g.getNAuthorize - 1 :
				setattr (object_model, "Reviewcurr", Reviewcurr + 1 )
				setattr (object_model, "Reviewer_"+ str(Reviewcurr + 1), getUser().ID )
				setattr (object_model, "Reviewedon_"+ str(Reviewcurr + 1), time.strftime('%Y-%m-%d %H:%M:%S'))
				if self.g_inputter_old != '':
					setattr (object_model,"Inputter", self.g_inputter_old)
					setattr (object_model, "Createdon", self.g_createdon_old)
			   
		return True, ""
	  
	
	#loop reviewer into the list
	def list_trail (self, object_model) :
		self.g_list_trail = []
		#look reviewer into list python
		for index in range(1, g.getNAuthorize) :
			if hasattr (object_model, "Reviewer_"+ str(index)) :
				self.g_list_trail.append (getattr (object_model, "Reviewer_"+ str(index)))
		
		#self.g_list_trail.append (object_model.Inputter )
		

	#verify record
	def form_verify (self):
		try:
			#check review status
			obj_query=self.inau_object(self.model[0]).query.filter_by(ID=self.global_id).first()
			if obj_query:
				#add reviewer and inputter
				self.list_trail (obj_query)
				self.g_list_trail.append (obj_query.Inputter)
				self.g_inputter_old = obj_query.Inputter
				self.g_createdon_old = obj_query.Createdon
				# do when inputter is different from current user sign on
				if getUser().ID  not in self.g_list_trail :
					chk_status, chk_msg = self.updateReview(obj_query)
					if chk_status:
						db.session.commit()
						return True, msg_review_0 + ", record id: " + self.global_id
					else:
						return False, msg_error + chk_msg
				else:
					return False,msg_error+ msg_cannot_verify
			else:
				return False,"Record %s not found!" % self.global_id
		
		except Exception as exe:
			db.session.rollback()
			return False, msg_error + exe.message
		

	def form_authorize(self):
		try:

			DictResult = {'Authorizer':getUser().ID}
			entry=[]
			index=0
			obj_model=self.model

			#check user id if it's the same inputter, reject
			for k in self.model :
				obj_query=self.inau_object(k).query.filter_by(ID=self.global_id).first()
				self.list_trail (obj_query)
				self.g_list_trail.append (obj_query.Inputter) # add inputter 
				if obj_query:
					 # Edit point 
					if mktsetting.getAppSetting("ENABLE_WORKFLOW") and mktsetting.getAppSetting("ENABLE_WORKFLOW")=="Y":
						if hasattr(self.inau_object(k),"RestrictAuth"):
							self.g_restrict_auth= obj_query.RestrictAuth 
							# 02.08.2018
							# related workflow change to allow authorizer and inputter can
							# if Restrict auth still None cannot authorize both same and different user
							# print "self.g_restrict_auth:",self.g_restrict_auth
							if self.g_restrict_auth == None:
								flash(msg_error + msg_in_workflow_process , "error")
								return False
							else:
								if obj_query.Status =="RNAU" :
									self.authorize_reverse ()
									return False
								break
					# End edit
					else:
						if getUser().ID in self.g_list_trail:

							flash(msg_error + msg_cannot_authorize , "error")
							return False
						else:
							if obj_query.Status =="RNAU" :
								self.authorize_reverse ()
								return False
							break
							
			#add record to history file
			self.add_recordtohist(obj_model)      
			#delete live record before adding new record or update record
			for k in self.model:
				db.session.query(k).filter_by(ID=self.global_id).delete(synchronize_session="fetch")

			#set record to authorize
			for k in self.model:
				
				obj_query=self.inau_object(k).query.filter_by(ID=self.global_id).all()

				if len(obj_query)!=0:

					for row in obj_query:
						entry.append(k())
						for cname in k.__dict__.keys():
							if hasattr(k,cname):
								if cname in ('Authorizeon'):
									field_value = time.strftime('%Y-%m-%d %H:%M:%S')
								elif cname in ('Status'):
									field_value ='AUTH'
								elif cname in ('Curr') :
									field_value = int(getattr(row,cname)) + 1
								elif cname in ('Authorizer'):    
									field_value = getUser().ID 
								else:
									field_value = getattr(row,cname)
								setattr(entry[index], cname,field_value)
								DictResult.update({'Inputter':row.Inputter})
						db.session.add(entry[index])
						index=index+1
				##else:
				#    flash(msg_error+msg_authorize_1)
				#    return False

			for k in self.model:
				db.session.query(self.inau_object(k)).filter_by(ID=self.global_id).delete(synchronize_session="fetch")

			db.session.commit()
			
			flash(msg_authorize_0 + ", record id: " + self.global_id , "success")
			return DictResult
		except Exception as exe:
			flash(msg_error +exe.message , "error")
			db.session.rollback()
			
			return False

	#form model
	def form_model(self,operation=''):
		try:
			
			class subClass(self.frmobject):
				__name__ = self.frmobject.__name__
				pass

			form=subClass()
			#pass value to frmobject
			requestdict=[]
			live_obj='' # return live object
			zeroIndex=0

			for k in self.model:

				#check record in history file
				if "@" in self.global_id:

					queryString = returnFilter (self.hist_object(k), "self.hist_object(k)")
					if queryString != "" :
						obj_query = eval ("self.hist_object(k).query.filter(self.hist_object(k).ID =='" + self.global_id + "'," + queryString + ").all()") 
						
					else :
						obj_query = self.hist_object(k).query.filter_by(ID = self.global_id).all()

				else:
					#check record in inau file
					queryString = returnFilter (self.inau_object(k), "self.inau_object(k)")

					if queryString != "" :
						#exclude branch criteria in case having branch access
						if excludeBranch() == True :
							queryString = ""    
						obj_query = eval ("self.inau_object(k).query.filter(self.inau_object(k).ID =='" + self.global_id + "'," + queryString + ").all()") 
					  
					else :
						obj_query = self.inau_object(k).query.filter_by(ID = self.global_id).all()

				if len(obj_query) == 0:
					if zeroIndex == 0 :

							queryString = returnFilter (k, "k")
							if queryString != "":
								#exclude branch criteria in case having branch access
								if excludeBranch() == True :
									queryString = ""    
								obj_query = eval ("k.query.filter(k.ID =='"+ self.global_id +"',"+  queryString +").all()")
							else :
								obj_query = k.query.filter_by(ID = self.global_id).all()

					else:
						if self.frmobject.isSort() != "" :  #static method to sort value in subform
							obj_query = k.query.filter_by(ID=self.global_id).order_by(eval("k."+self.frmobject.isSort())).all()
						else:
							obj_query = k.query.filter_by(ID=self.global_id).all()

				#check history record
				if self.frmobject.findinHist() == True and len(obj_query) == 0 :

					self.global_id = self.global_id +"@0"
					obj_query = self.hist_object(k).query.filter_by(ID = self.global_id).all()

				count = len(obj_query)
				if zeroIndex == 0:
					if count == 0 and operation == 'Delete':
						flash(msg_not_found_0 , "error")
						form =''
						return form
				zeroIndex = zeroIndex + 1
				self.global_id = self.global_id.split("@")[0]
				
				if count == 1:# Single Form
					for f in form:
						for row in obj_query:
							if hasattr(row,f.id):
								# Update by Sovankiry Rim - 29 June 2017
								# Fix add new field the vaule will store None and it's error on DateField-WTF Form 
								field_value = getattr(row,f.id)
								if field_value == None:
									field_value = ''
								field=()
								field=(f.id, field_value)
								requestdict.append(field)
				
				elif count>1: # Multi Value Form

					i=1
					for row in obj_query:
						if i==1:
							for f in form:
								if hasattr(row,f.id):

									# Fix add new field the vaule will store None and it's error on DateField-WTF Form 
									field_value = getattr(row,f.id)
									if field_value == None:
										field_value = ''
									field=()
									field=(f.id, field_value)
									requestdict.append(field)
						else:
							for f in form:
								if f.id not in field_exclude:
									if hasattr(row,f.id):

										# Fix add new field the vaule will store None and it's error on DateField-WTF Form 
										field_value = getattr(row,f.id)
										if field_value == None:
											field_value = ''
										field=()
										field=(f.id+"_"+str(i),field_value)
										requestdict.append(field)
						i=i+1

				if len(requestdict)>0:
					self.formrequest=ImmutableMultiDict(requestdict)
			#assign default to fields
			if len(self.org_formrequest)>0:
				self.formrequest=self.org_formrequest

			form_clone=self.frmobject.__dict__.copy()
			objindex=checkindex()

			for key in self.formrequest:
				if key not in form and key not in ('ID'):  # ID is id code from request.form
					getfield=objindex.delimiterdic(key,'_')
					 
					form_clone[getfield[1]].id=key

					setattr(subClass,key,form_clone[getfield[1]])

			#flash(self.formrequest)
			form=subClass(self.formrequest)
			
			return form
		except Exception as exe:
			db.session.rollback()
			raise

	#return live object from view
	def live_object(self,obj_model):
		
		imp_module = importlib.import_module(obj_model.__module__)        
		live_obj   = getattr(imp_module, obj_model.__class__.__name__) 
		return mkttool.alterModel([live_obj])[0]

	#return inau object from view
	def inau_object(self,obj_model):
		

		imp_module = importlib.import_module(obj_model.__module__)        
		inau_obj   = getattr(imp_module, obj_model().__class__.__name__ + '_INAU')
		return mkttool.alterModel([inau_obj])[0]

	def hist_object(self,obj_model):
		imp_module = importlib.import_module(obj_model.__module__)        
		hist_obj  = getattr(imp_module, obj_model().__class__.__name__ + '_HIST')

		return mkttool.alterModel([hist_obj])[0]        

	# return max field index of mulit value
	def max_field_index(self, fieldname):
		cindex=checkindex()
		max_value=""
		f_value=""
		for item in self.org_formrequest:
			if cindex.isindex(item,"_"):
				if cindex.delimiterdic(item,"_")[1]==fieldname:
					if f_value=="":
						f_value=cindex.delimiterdic(item,"_")[0]
					else:
						temp_value=cindex.delimiterdic(item,"_")[0]
						if int(f_value)<int(temp_value): # compare value to get max
							max_value=temp_value
							f_value=max_value

		# if there is only one value of delimiter to check
		if max_value=="":
			if f_value=="":
				return 1
			else:
				return f_value

		else:
			return max_value

	# set attributes and records for master and detail
	def set_attribute_multi(self,obj_model):
		try:
			primaryKeys=[] # get primary key
			checkKey=False # check key
			isAuthorize=True
			objindex=checkindex() #instance of chekindex
			entry=[]
			master_field='ID'
			index=0 #it is master table

			f=self.frmobject()

			f1=self.org_formrequest #form request

			#check restrict branch. If not in list, reject
			isRestrict = checkRestrictBranch (obj_model[0],f1)

			if isRestrict == False :
				return msg_error + "The account has been restricted for this login user"
			#end of check

			# call function to add records to history file
			if g.getNAuthorize == 0:
				self.add_recordtohist(obj_model)

			# for insert and update records
			for k in obj_model:
				#code change, update to N
				if g.getNAuthorize != 0 :
					isAuthorize=False
					k=self.inau_object(k)
					self.g_message_inau = " in INAU"

				if index==0:
					obj=k.query.get(self.global_id)
					if obj!=None:
						self.g_inputter_old = obj.Inputter
						self. g_createdon_old = obj.Createdon
						#add reviewer and  inputter to list trail
						self.list_trail (obj)                       
						entry.append(obj)
					else:
						entry.append(k())
					for f2 in f:
						if hasattr(entry[index],f2.id):
							status = replaceNone(" ".join(f1.getlist(f2.id))) if f1.getlist(f2.id)[0] != None else ''
							setattr(entry[index], f2.id,setAuditrail(f2.id,isAuthorize,status))

					index = index + 1

				else: #index !=0
					db.session.query(k).filter_by(ID=self.global_id).delete(synchronize_session="fetch")
					first_field=''
					for field in f:  # take the first field  and then break
						if field.id not in field_exclude and hasattr(k(),field.id):
							first_field=field.id
							break
					for i in range(1,int(self.max_field_index(first_field))+1):
						entry.append(k()) #next model
						if i==1:
							for f2 in f:
								if hasattr(entry[index],f2.id):
									status = replaceNone(" ".join(f1.getlist(f2.id))) if f1.getlist(f2.id)[0] != None else ''
									setattr(entry[index], f2.id,setAuditrail(f2.id,isAuthorize,status))

						else:
							for f2 in f:
								if hasattr(entry[index],f2.id):
									if f2.id not in field_exclude:
										status = replaceNone(" ".join(f1.getlist(f2.id+"_"+str(i)))) if f1.getlist(f2.id)[0] != None else ''
										setattr(entry[index], f2.id,setAuditrail(f2.id,isAuthorize,status))
									else:
										status = replaceNone(" ".join(f1.getlist(f2.id))) if f1.getlist(f2.id)[0] != None else ''
										setattr(entry[index], f2.id,setAuditrail(f2.id,isAuthorize,status))  
						index = index + 1
				
			for j in range(len(entry)):
				# increase version of Curr field
				primaryKeys=inspect(self.live_object(entry[j])).primary_key # get primary from tables
				
				if hasattr(entry[j],'Curr'):
					if getattr(entry[j],"Curr")!="":
						if g.getNAuthorize == 0 :  # do increase Curr
							setattr(entry[j],"Curr",int(getattr(entry[j],"Curr"))+1)
						else :
							setattr(entry[j],"Curr",getattr(entry[j],"Curr"))
					else:
						if g.getNAuthorize == 0 :

							if "Curr" in session  and session["Curr"] != 0:
								setattr(entry[j],"Curr", session["Curr"])
								session["Curr"] = 0
							else :
								setattr(entry[j],"Curr",0)
						else :
							if "Curr" in session  and session["Curr"] != 0:
								setattr(entry[j],"Curr", session["Curr"] -1 )
								session["Curr"] = 0
							else :
								setattr(entry[j],"Curr",-1)

				setattr(entry[j],master_field,self.global_id)

				for key in primaryKeys:
					
					if getattr(entry[j],key.name)!= "":
						checkKey=True
					else:
						checkKey=False
				
				if checkKey==True:            #this check if key has no value, won't add into database
					db.session.add(entry[j])
					checkKey=False

			#if check_edit :
			chk_status, chk_msg = self.updateReview(entry[0],skip_access_right=True)
		   
			if chk_status:
				db.session.commit()
			else :
				return msg_error + chk_msg

			return True


		except Exception as exe:
			db.session.rollback()
			"""
				Notes: By Kiry - When you want to raise error on legnth of field, that you cannot find what is the field error.
				Remove comment code on raise blow. 
			"""
			#raise
			print '%s'%exe
			return msg_error+ exe.message


	#delete method
	def db_delete(self):
		try:
			dellockrecord(self.global_id) # delete lock reord

			#Add notification
			CheckRecord = db.session.query(self.inau_object(self.model[0])).filter_by(ID=self.global_id).first()
			if CheckRecord:
				Status = CheckRecord.Status
				obj_id = self.global_id
				if Status == "RNAU": # Delete reverse record from un-authroize list
					event_code      = "501"

				if Status == "INAU": # Delete record from new record
					event_code      = "500"
				path  = str(request.path).split('/')[2]
				mktnotification.insertNotify({ 
							'ID':obj_id, 
							'Path':path,
							'Status':"AUTH",
							'Code':event_code,
							'Model':self.model[0].__name__,
				})
			else:
				flash(msg_not_found_0 , "error")
				return False

			
			for k in self.model:
				record=db.session.query(self.inau_object(k)).filter_by(ID=self.global_id).delete(synchronize_session="fetch")
				#if nrecord==0:
				#    flash(msg_delete_1)
				#    return True
			db.session.commit()
			
			flash(msg_delete_0 , "success")
			return True
		except Exception as exe:
			db.session.rollback()
			flash(msg_error + exe.message)
			return False

	#delete method
	def db_delete_live(self):
		try:
			dellockrecord(self.global_id) # delete lock reord
			for k in self.model:
				nrecord=db.session.query(k).filter_by(ID=self.global_id).delete(synchronize_session="fetch")
			
			db.session.commit()
			
			flash(msg_reverse , "success")
			return False
		except Exception as exe:
			db.session.rollback()
			flash(msg_error + exe.message , "error")
			return True

	#reverse method
	def db_reverse(self):
		try:

			if g.getNAuthorize == 0 :
				self.reverse_recordtohist(self.model) #add record to history file
				self.db_delete_live() #call delete record

			else :
				self.add_recordtoinau(self.model)
			return True    
				
		except Exception as exe:
			db.session.rollback()
			return msg_error + exe.message

	#db record management
	def db_model(self):
		try:
			flag=True
			obj_model=self.model
			db_flag=self.set_attribute_multi(obj_model)
			category = "success"
			if db_flag==True:
				self.g_message=msg_added_0+ 'record id: '+self.global_id +self.g_message_inau
				dellockrecord(self.global_id) #delete lock record
			else:
				self.g_message=db_flag
				flag=False
				category = "error"
				db.session.rollback()
			#
			flash(self.g_message , category)
			return flag
		except Exception as exe:
			db.session.rollback()
			#raise
			return False


	def add_recordtohist(self,obj_model):
		#add record to historical file
		obj_query=""
		for khis in obj_model:
			entryhist=[]
			indexhist=0
			obj_query=khis.query.filter_by(ID=self.global_id).all()
			if len(obj_query)>0:
				for row in obj_query:
					entryhist.append(self.hist_object(khis)())
					for cname in khis.__dict__.keys():
						if hasattr(khis,cname):
							if cname=="ID":
								field_value=getattr(row,cname)+"@"+getattr(row,"Curr")
							else:
								field_value=getattr(row,cname)
							setattr(entryhist[indexhist], cname,field_value)
								
					db.session.add(entryhist[indexhist])
					indexhist=indexhist+1
					#flash (str(indexhist))
		

	def reverse_recordtohist(self,obj_model):
		#add record to historical file
		obj_query=""
		for khis in obj_model:
			entryhist=[]
			indexhist=0
			obj_query=khis.query.filter_by(ID=self.global_id).all()
			if len(obj_query)>0:
				for row in obj_query:
					entryhist.append(self.hist_object(khis)())
					for cname in khis.__dict__.keys():
						if hasattr(khis,cname):
							if cname == "Status" :
								field_value = "REVE"

							elif cname in ('Inputter','Authorizer') :
								field_value = getUser().ID 
							elif cname in ('Createdon','Authorizeon') :
								field_value = time.strftime('%Y-%m-%d %H:%M:%S') 
							elif cname=="ID":
								field_value=getattr(row,cname)+"@"+getattr(row,"Curr")
							else:
								field_value=getattr(row,cname)
							setattr(entryhist[indexhist], cname,field_value)
								
					db.session.add(entryhist[indexhist])
					indexhist=indexhist+1
		

	def add_recordtoinau(self,obj_model):
		#add record to historical file
		try :
			obj_query=""

			#check record in INAU if exists?
			obj_query = self.inau_object(obj_model[0]).query.get(self.global_id)
			if obj_query !=None :
				flash (msg_error+ " cannot reverse the record in INAU status" , "error")
				return 

			for inau in obj_model:
				entryhist=[]
				indexhist=0
				obj_query=inau.query.filter_by(ID=self.global_id).all()
				if len(obj_query)>0:
					for row in obj_query:
						entryhist.append(self.inau_object(inau)())
						for cname in inau.__dict__.keys():
							if hasattr(inau,cname):
								if cname=="Status":
									field_value="RNAU"
								elif cname =="Inputter" :
									field_value = getUser().ID
								elif cname =="Createdon" :
									field_value = time.strftime('%Y-%m-%d %H:%M:%S')
								else:
									field_value=getattr(row,cname)
								setattr(entryhist[indexhist], cname,field_value)
									
						db.session.add(entryhist[indexhist])
						indexhist=indexhist+1
			db.session.commit()
			
			flash (msg_reverse , "success")
		except Exception as exe :
			db.session.rollback()
			flash (msg_error + exe.message , "error")


	def authorize_reverse (self):
		try :
			#add record to historical file
			obj_query=""
			for inau in self.model:
				entryhist=[]
				indexhist=0
				obj_query=self.inau_object(inau).query.filter_by(ID=self.global_id).all()
				if len(obj_query)>0:
					for row in obj_query:
						entryhist.append(self.hist_object(inau)())
						for cname in inau.__dict__.keys():
							if hasattr(inau,cname):
								if cname == "Status" :
									field_value = "REVE"
								elif cname in ('Authorizer') :
									field_value = getUser().ID 
								elif cname in ('Authorizeon') :
									field_value = time.strftime('%Y-%m-%d %H:%M:%S') 
								elif cname=="ID":
									field_value=getattr(row,cname)+"@"+getattr(row,"Curr")
								else:
									field_value=getattr(row,cname)
								setattr(entryhist[indexhist], cname,field_value)
									
						db.session.add(entryhist[indexhist])
						indexhist=indexhist+1
				db.session.query(self.inau_object(inau)).filter_by(ID=self.global_id).delete(synchronize_session="fetch")
				db.session.query(inau).filter_by(ID=self.global_id).delete(synchronize_session="fetch")
			db.session.commit()
			
			flash (msg_authorize_0+ ", record id: " + self.global_id , "success")
		except Exception as exe :
			db.session.rollback()
			flash (msg_error+exe.message , "error")

#end multi records

	




	
		  
