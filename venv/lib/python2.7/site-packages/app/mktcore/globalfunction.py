# encoding=utf8
import sys,types
reload(sys)
sys.setdefaultencoding('utf8')

from flask import flash,session,g, request,jsonify
from app.RestrictBranch.models import *
from app.Account.models import * 
from app.LimitApproval.models import *
from app.User.models  import MKT_USER
from decimal import *
from app.mktcore.constant import msg_error
import app.tools.mktmoney as mktmoney
from bs4 import BeautifulSoup
from operator import itemgetter
import app.tools.mktmoney 			as mktmoney


#class to check delimiter 
class checkindex :

	#the isindex return True if the delimiter is found
	def isindex(self,item,searchdelimiter):
		try:
			item=item[:item.index(searchdelimiter)]
			return True
		except Exception as exe:
			return False
	# end of method

	# the method split search string by returning key and value
	def delimiterdic(self,item,searchdelimiter):

		keyvalue=[]
		if self.isindex(item,searchdelimiter):
			keyvalue.append(item[item.index(searchdelimiter)+1:])
			keyvalue.append(item[:item.index(searchdelimiter)])
		return keyvalue
	# end of method

# end of class

def max_field_index(formrequest,fieldname):

	param=""
	get_maxfield=0
	if len(formrequest)>0:
		ListArgs    = [item for item in formrequest if fieldname in item] 
		get_maxfield=len(ListArgs)
	return get_maxfield


def isFloat(number):
	try:
		return float(number)
	except Exception as exe:
		return False



 # return search string
def searchString(model,fieldname,operator,searchtext,selfobject="self.model"):

	try :
		
		listoperator ={'EQ':'==', 'GT': '>', 'GE' : '>=','LT': '<','LE':'<=','LK':'like','BT':'between', "NE":"in"}
		datatype=model.__table__.columns[fieldname].type
	   
		if searchtext=="": 
			searchtext="0"
			

		if "VARCHAR" in str(datatype) or "CHAR" in str(datatype):
			likefield = searchtext # used for like operator
			searchtext="'"+searchtext+"'"


		if operator in ("GT", "GE", "LT", "LE") :

			searchstring= selfobject + "."+fieldname+ listoperator[operator] + searchtext

		elif operator=="LK":

			searchstring=selfobject + "."+fieldname+".like('%"+likefield+"%')"
				
		elif operator =="BT":

			getsplit=searchtext.split(" ")

			if len(getsplit) == 2:

				if "INTEGER" in str(datatype) or "FLOAT" in str(datatype) or "NUMERIC" in str(datatype) :

					searchstring=selfobject + "."+fieldname+".between("+getsplit[0]+","+getsplit[1]+")"
				else:

					searchstring=selfobject + "."+fieldname+".between("+getsplit[0]+"','"+getsplit[1]+")"
			else:
				searchstring=""
		elif operator == "NE" :
			return equalNotEqual (selfobject, fieldname,searchtext,datatype)
		elif operator == "EQ" :
			return equalNotEqual (selfobject, fieldname,searchtext,datatype,"")

		else:
			searchstring=""

		return searchstring
	except Exception as exe:
		flash ("Error,"+ exe.message)
		return ""

#define equal and not equal operator

def equalNotEqual (selfobject, fieldname,searchtext,datatype, objoperator = "~"):
	listvalue = ""
	searchstring  = ""
	if "INTEGER" in str(datatype) or "FLOAT" in str(datatype) or "NUMERIC" in str(datatype) :

		listvalue = "[" + str(searchtext).replace (" ", ",") +"]"
			
		searchstring = objoperator +  selfobject + "."+fieldname+".in_("+ listvalue +")"
	else:

		getsplit=str(searchtext).split(" ")

		for el in getsplit :
			if listvalue == "" :
				listvalue = "[" + el  
			else :
				listvalue = listvalue + "','" + el 

		listvalue = listvalue + "]"

		searchstring= objoperator + selfobject + "."+fieldname+".in_(" + listvalue + ")"
	return searchstring


# return search string
def returnFilter (model ,checkFlag = "") :
	# print model.ID
	# check filtering branch
	getFilterBranch = "" 
	getFilterBranch = checkAccessBranch (model,checkFlag)
	if  g.FilterBy  == ""  : # return emtyp string if no filter cond
		return getFilterBranch

	queryResult = ""
	getfilter = g.FilterBy.split (",")
	for i in range (0, len (getfilter)) :
		getDelimiter = getfilter [i].split ("*")
		# index 0, field name
		# index 1, operator
		# index 2, values
		if len (getDelimiter) >0 :

			if queryResult == "" :
				queryResult  = searchString (model, getDelimiter [0], getDelimiter [1], getDelimiter [2], checkFlag)
			else :

				queryResult   = queryResult + "," + searchString (model, getDelimiter [0], getDelimiter [1], getDelimiter [2], checkFlag)

	# check filtering branch
	if getFilterBranch != "":
		queryResult = queryResult + "," + getFilterBranch

	return queryResult

#function to exclude branch code
def excludeBranch():
	if 'ALL' in session['AccessBranch'] or session.get("ChangeBranch") in session['AccessBranch'] :
		return True
	else :
		return False

#check access branch
def checkAccessBranch (model,checkFlag = ""):

	modelName = modelName = model().__class__.__name__

	if '_HIST' in modelName  :
		modelName = modelName.replace("_HIST","")
	elif '_INAU' in modelName :
		modelName = modelName.replace("_INAU","")

	query = MKT_RESTRICT_BRANCH.query.filter_by(Model = modelName).all()
	
	if len (query) >0 :
		if not session.get("ChangeBranch") :
			session["ChangeBranch"] = ""

		querystring  = searchString (model, "Branch", "EQ", session["ChangeBranch"], checkFlag)
		
		return querystring
	else :
		return ""

#define a function to check access branch value from MKT_USER
#def checkUserAccessBranch():
#    query = MKT_A.query.filter_by(Model = modelName).all()
	


#define restrict branch
def checkRestrictBranch (model, frmRequest):
	isOkay = True
	modelName = model().__class__.__name__

	if '_HIST' in modelName or '_INAU' in modelName  :
		isOkay =  True
	else :
		query = MKT_RESTRICT_BRANCH.query.filter_by(Model = modelName).first()
		
		if query == None :
			isOkay = True
		else :
			frm = frmRequest
			if query.DebitAcc != "" :
				#check
				isOkay = isRestricted (frm[query.DebitAcc])     
						
			elif query.CreditAcc != "":
				#check
				isOkay = isRestricted (frm[query.CreditAcc])
	return isOkay

#is branch restricted
def isRestricted (ACCID) :
	isOkay = True
	queryAC = MKT_ACCOUNT.query.get(ACCID)
	
	if queryAC != None :
		# Fix Restricted branch that not working with keyword ALL (Branch)
		if queryAC.Branch in session["RestrictBranch"]:# or 'ALL' in session["RestrictBranch"]:
			isOkay = True
		else :
			isOkay = False

	return isOkay

def wordAmount(mstring):
	mdict={'K':1000,'T':1000,'M':1000000,'B':1000000000}

	if mstring:
		if mstring.find(',') != -1 :
			mstring=mstring.replace(",","")
	else:
		return False

	lastchar=mstring[-1:].upper()
	if lastchar in mdict:

		if isFloat(mstring[:-1])==False:
			return False
		else:
			return float(mstring[:-1])*mdict[lastchar]
	else:

		if isFloat(mstring)==False:
			return False
		else:
			return float(mstring)

#define LOA

#return inau object from view
def inau_object(obj_model):
		
	imp_module=__import__(obj_model.__module__)        
	inau_obj =eval('imp_module.'+obj_model().__class__.__name__ + '_INAU')
	return inau_obj

def checkApproval(formName, rectID= '', obj_model ='', formRequest=''):

	try:
		msg = ''
		query = MKT_LIMITAPPRO.query.filter_by(FormName = formName).first()
		if query :

			user = MKT_USER.query.get(session['getLogInID'])

			frm = formRequest
			userKey = user.ID 
			ruleKey = user.Role

			if rectID :

				imp_module=__import__(obj_model.__module__)        
				inau_obj =eval('imp_module.'+obj_model().__class__.__name__ + '_INAU')

				recortSet       = inau_object(obj_model).query.get(rectID)
				dicUserKey      = '%s*%s'%(userKey, getattr(recortSet, query.Currency))
				dicRuleKey      = '%s*%s'%(ruleKey, getattr(recortSet, query.Currency))
				FieldAmount     =  getattr(recortSet,query.FieldName) 


			else :

				dicUserKey      = '%s*%s'%(userKey, request.form[query.Currency])
				dicRuleKey      = '%s*%s'%(ruleKey, request.form[query.Currency])
				FieldAmount     = request.form[query.FieldName]
			#end if

			ruleDic = splitRules(query.Rules)

			getDicValue = []
			
			if dicUserKey in ruleDic :
				getDicValue = ruleDic.get(dicUserKey)
				currency = dicRuleKey.split('*')[1]
			elif dicRuleKey in ruleDic :
				getDicValue = ruleDic.get(dicRuleKey)
				currency = dicRuleKey.split('*')[1]


			if getDicValue :

				splitDicValute = getDicValue.split() # default space or comma

				if Decimal(splitDicValute[0]) <= Decimal(FieldAmount) <= Decimal(splitDicValute[1]):#Between
					return True,msg
				else:
					amount = mktmoney.formatNumber(float(splitDicValute[1]),DecimalPlace=0)
					msg =  msg_error +" Over limit approval %s %s, Please switch to other user for authorization."% (currency,amount)
					return False,msg
		return True,msg


	except Exception, e:
		raise e

# #function to split Rules
def splitRules(Rules):

	ruleArray = Rules.splitlines()
	ruleDic = {}
	for item in ruleArray :
		if item :
			subItem  = item.split("*")
			firstTwo = '%s*%s'%(subItem[0].strip(),subItem[1].strip())
			lastValue =  subItem[2].strip()
			ruleDic.update({firstTwo:lastValue})

	return ruleDic

	#end for     

def checkContentType():
	ContentType 	= 	request.headers.get('Content-Type')
	Accept 			=  	request.headers.get('Accept')  
	ResponesType 	= 	"html"
	if ContentType == "application/json" or Accept=="application/json":
		ResponesType = "json"

	elif ContentType == "application/xml" or Accept == "application/xml":
		ResponesType = "xml"

	elif ContentType == "application/javascript" or Accept == "application/javascript":
		ResponesType = "javascript"

	return ResponesType

def removePrefixURL(URL):
	""" 
		Remove prefix url Morakot.

	Example 1: You want to remove prefix '/Morakot'
		URL = '/Morakot/Customer'
	return:
		Customer

	"""
	ObjUrl = URL.split('/')[2:]
	setUrl = '/'.join(ObjUrl)
	if setUrl[-1:] =="/":
		setUrl = '/'.join(ObjUrl)[:-1]
	return setUrl


def addURLParam(URL,Param):
	"""
		Usge for add parameter to URL:
	
	Example 1: You want to add parameter to url 
		URL = '/Morakot/SearchOfficer'
		Param = 'action=viewall'
	return:
		 '/Morakot/SearchOfficer?action=viewall'

	Example 2: Your URL has previous parameter and you want to add more parameter
		URL = '/Morakot/SearchOfficer?q='
		Param = 'action=viewall'
	return:
		 '/Morakot/SearchOfficer?q=&action=viewall'

	"""


	""" We need to check url is already added parameter or not
	Example: 

		>>> s='/Morakot/SearchOfficer/?=q' 
		>>> s.split('/')[-1:]
		['SearchOfficer?=q']

	"""
	TempURL = URL.split('/')[-1:][0] #: Split to last index

	#: If symbol ? in url mean that URL was added parameter already
	if TempURL.find('?') != -1: #: Find symbol ?
		URL = "%s&%s"%(URL,Param)
	else:
		URL = "%s?%s"%(URL,Param)

	return URL

def setCustomRemoteURL(URL):

	TempURL = URL
	#: Case URL has Morakot Prefix, we need to remote
	if 'Morakot' in URL.split('/'):
		TempURL = removePrefixURL(URL)
	else:
		#: case URL has / in first latter. ie: /SearchOfficer
		#: We need to remove it too.
		if not URL.split('/')[0]:
			TempURL = URL[1:]
	
	return TempURL

def convertHotField(HotField = None):
	try:		
		HotFieldList 	  =  	 []
		for row in HotField:	
			GetSetValueTo 		= 	[]  #get data for set value to field
			GetSetValueToList 	= 	[]  #Set value to multi fields
			HotFieldDic			= 	{}  #Data as dic when action on field
			GetFieldID 			= 	row[0] #Action on this field
			GetParam 			= 	row[1].replace(" ","").split(",") #Get value from field and request as param
			GetRoute 			=	row[3].replace("/Morakot",'') #Get url for action
			GetEvent 			=  	row[4] #Trigger on event
			Route 				=	GetRoute + "?" #Request with parameter
			ParamList 			=	[] #Multi parameter when request
			FieldID 			= 	"" #Field to diplay
			Focus 				=	""
			Disable 			=	[] #field for disable

			if "select2" in GetEvent:
				GetEvent = GetEvent.replace("select2-",'') #if event has select2 mean this event is select2-focus we need to replace 'select2' to focus for mobile

			if row[2]:
				GetSetValueTo  	= 	row[2].replace(" ","").split(";")

			#This loop use for create url for request with parameter and value's parameter
			for row in GetParam:
				CheckGetValueOrNot = True # if value is static value (other value is get from field)
				if "$" not in row: #It mean value is static
					# row = "AccountType:'OverdraftAccount'"
					col = row.split(":")
					ValueFrom = col[1].replace("'",'')
					CheckGetValueOrNot = False
				else:
					# row = "PotentialCustomerID:$('#PotentialCustomer').val()"
					col 	  = row.split(":$('#")
					ValueFrom = col[1].replace("').val()",'')
				if "select" in row:				
					col 	  = row.split(":$('select#")
					ValueFrom = col[1].replace("').val()",'')
				Param     = col[0].lstrip()
				Route 	  = Route + Param + "=" + ValueFrom +"&"
				if CheckGetValueOrNot: # Check for dynamic value, static value don't need to add.
					ParamList.append(ValueFrom)

			# Remove the last charater "&"
			Route =  Route[:-1] if Route[-1:] == "&" else Route

			if GetSetValueTo:
				#This loop use for get data and display to other fields
				for row in GetSetValueTo:
					try:
						row = row.replace(" ","")
						if "select2" in row:
							#row =  $('#Gender').select2('data', {'id':data.Gender,'text':data.Gender})
							FieldID = row.split("').select2('data',{'id':data.")[0].replace("$('#",'') #Result FieldID=Gender
							GetData = row.split("').select2('data',{'id':data.")[1].split(",'text':data.")[0] #Result GetData=Gender
							Type 	= "Data"	

						elif "input" in row:
							#row = $('input[name=SpoFirstNameEn]').attr('readonly', data.Bool);
							if "attr" in row:
								FieldID = row.split("]').attr('readonly',data.")[0].replace("$('input[name=",'') #Result FieldID=SpoFirstNameEn
								GetData = row.split("]').attr('readonly',data.")[1].replace(")",'') #Result GetData=Bool

							if "val" in row:
								FieldID = row.split("]').val(data.")[0].replace("$('input[name=",'')
								GetData = row.split("]').val(data.")[1].replace(")",'')
							Type 	= "Boolean"

						elif "?" in row:
							#row=$('#FreqType').val()==='3' ? $('#Installment').prop('readonly',false)
							ValueDisable = row.split("?")[0].split("').val()==='")[1].replace("'",'') #Result ValueDisable=3
							FieldDisable = row.split("?")[1].split("')")[0].replace("$('#",'') #Result FieldDisable=FreqType
							Disable.append({
								"field":FieldDisable,
								"value":ValueDisable
								})

						elif "prop" in row:
							#row = $('#SpoOccupation').prop('disabled', data.Bool)
							FieldID = row.split("').prop('disabled',")[0].replace("$('#",'') #Result FieldID=SpoOccupation
							GetData = row.split("').prop('disabled',data.")[1].replace(")","") #Result GetData=Bool
							Type 	= "Boolean"

						elif "text" in row:
							FieldID = row.split("').text(data.")[0].replace("$('#",'')
							GetData = row.split("').text(data.")[1].replace(")",'')
							Type 	= "Data"

						elif "focus" in row:
							FieldID = ""
							FocusTo = row.split("').focus()")[0].replace("$('#",'')
							Focus 	= FocusTo

						elif "val" in row:
							if row:
								FieldID = row.split("').val(data.")[0].replace("$('#",'')
								GetData = row.split("').val(data.")[1].replace(")",'')
								Type 	= "Data"
								
						if FieldID:
							GetSetValueToList.append({
								FieldID:GetData,
								"type":Type
								})
							FieldID = ""
					except Exception as e:
						pass


			HotFieldDic.update({
				GetFieldID:GetFieldID,
				"param":ParamList,
				"action":Route,
				"set_value_to":GetSetValueToList,
				"event":GetEvent,
				"focus":Focus,
				"disabled":Disable
				})

			HotFieldList.append(HotFieldDic)
		return HotFieldList
	except Exception as e:
		pass

def convertHotSelectField(HotSelectField = None):
	try:
		
		HotSelectFieldList 	  	=  	 []
		#: Use for offline API with url for request all data.
		HotSelectGetAll 		=	 []

		for row in HotSelectField:	
			GetSetValueToList 	= 	[]
			HotSelectFieldDic 	= 	{}
			GetFieldID 			= 	row[0]
			GetParam 			= 	row[1].replace(" ","").split(",")
			ParamList 			=	[]
			GetRoute 			=	row[3].replace("/Morakot",'')
			GetEvent 			=  	row[4]
			#: GroupURL refer to url that process the same in group.
			#: Example: Address (Province, District, Commune), you are not need to create a new route
			#: for exsiting route.
			GroupURL			= 	row[5] if len(row)>5 else ''
			Route 				=	GetRoute + "?"
			RouteViewAll		= 	GetRoute +"?action=viewall"
			ClearField 			= 	[]
			#: Update key url & field 
			"""
			      "hot_select_field_url_get_all": [
			        {
			          "field": "Province",
			          "url": "/GetDistrict?getall"
			        },
			        {
			          "field": "District",
			          "url": "/GetCommune?getall"
			        }
			      ],
			"""
			HotSelectGetAll.append({'field':GetFieldID,'url':RouteViewAll})
			
			GetSetValueToList.append(row[2].replace(" ","").split(",")[0])

			for row in row[2].replace(" ",'').split(","):
				if "#" in row:
					ClearField.append(row.replace("#",''))

			for row in GetParam:
				try:
					CheckGetValueOrNot = True
					if "$" not in row:
						col = row.split(":")
						ValueFrom = col[1].replace("'",'')
						CheckGetValueOrNot = False
					elif "text" in row:
						# row = "Model:$('#Model option:selected').text()" in form AlterForm
						col = row.split(":$('#") 
						ValueFrom = col[1].replace("option:selected').text()",'')

					elif "select" in row:				
						col 	  = row.split(":$('select#")
						ValueFrom = col[1].replace("').val()",'')
					else:
						col 	  = row.split(":$('#")
						ValueFrom = col[1].replace("').val()",'')

					Param     = col[0].lstrip()
					Route 	  = Route + Param + "=" + ValueFrom + "&"
					if CheckGetValueOrNot:
						ParamList.append(ValueFrom)
				except Exception as e:
					pass

			# Remove the last charater "&"
			Route =  Route[:-1] if Route[-1:] == "&" else Route

			HotSelectFieldDic.update({
					GetFieldID:GetFieldID,
					"param":ParamList,
					"action":Route,
					"action_view_all":RouteViewAll,
					"set_value_to":GetSetValueToList,
					"event":GetEvent,
					"clear_field":ClearField,
					"group_url":GroupURL,
					})
			HotSelectFieldList.append(HotSelectFieldDic)


		return HotSelectFieldList,HotSelectGetAll
	except Exception as e:
		print 'Error: Convert Hot Select Field API %s'%e
		pass

class ConvertForm(object):
	@staticmethod
	def getFormAttr(FormObject = None , Operation = None , FormType = 'Form' , Header = '',CustomButton = {}):
		FormData         =      {}
		Properties       =      []
		TabList			 =		[]
		StaticMethod     =      {}
		TabDic 			 = 		{}
		DictOffline 	 =		{}#: List object of Offline API

		if FormObject:
			HotField           =    FormObject.hotField()
			HotSelectField 	   = 	FormObject.hotSelectField()
			RemoteSelectGetAll =	[]#: Use in offline API with remote select field to get url 
			#Convert hot select field to JSON data
			HotSelectFieldList,HotSelectGetAll = 	convertHotSelectField(HotSelectField=HotSelectField)
			#Convert hot field to JSON object 
			HotFieldList 	   = 	convertHotField(HotField=HotField)
			for field in FormObject:
				FieldID         =   field.__dict__.get('id') #Get field ID 
				Tab             =   field.__dict__.get('description','') #Get tab's field
				Choices         =   field.__dict__.get('choices',[]) # Get select field data
				Type            =   field.__dict__.get('type','') #Get type's field 
				Label           =   field.__dict__.get('label','').\
									__dict__.get('text','').split("<span ") #Get label's field
				Default         =   field.__dict__.get('default','') #Get default data's field
				Data 			=	field.__dict__.get('data','') #Get data's when form object has data
				RawData			=	field.__dict__.get('raw_data',[]) #Get raw_data's when form object has raw_data
				ProperDic       =   {}
				RequiredFields  =   ""
				RemoteUrlFor    =   ""

				

				#if type of defautl data is function (*Some default data's field is a function)
				if isinstance(Default , types.FunctionType) :
					#Can not get default value from lamada function.
					Default = ''

				#if default data is none we need to convert to string
				if Default == None:
					Default = ""

				#if data is none we use default data instead
				if Data is None or Data=="None" or Data == "":
					Data = Default if len(RawData) == 0 else RawData[0]
				
				#if type's is HiddenField we use RemoteSelectFields instead and action url on this field
				if Type == "HiddenField" or Type=='RemoteTextField':
					#: Morakot Freamwork on web app have HiddenField and RemoteTextField
					Type = "RemoteSelectFields"
					if FormType != 'Form':
						Type = "CustomRemoteSelectFields"
					
					#: If developer add parameter url will be overwite url from default value is field name.
					if hasattr(field,'dicRemote') and field.dicRemote.get('url'):
						
						#: The dicRemote.get('url') is equal /Morakot/SearchOfficer
						RemoteURL = field.dicRemote.get('url',FieldID)
						
						#: Case developer input prefix in url, we need to remove it.
						#: Because in mobile will auto add prefix.
						
						RemoteURL = setCustomRemoteURL(RemoteURL)
						
					else:
						#: By default remote url is the field id
						#: Case hiddenFeild, RemoteTextField doesn't provide url.
						RemoteURL = FieldID

					#: We need to add parameter
					RemoteUrlFor = "/%s"% addURLParam(RemoteURL,Param='q=')
					
					#: Usge for offline request review all record
					RemoteViewAll = "/%s"% addURLParam(RemoteURL,Param='action=viewall')
						
					#: Update Perperties dictionary of field to add URL for viewall
					#: RemoteViewAll usge for offline request.
					RemoteSelectGetAll.append({'field':FieldID,'url':RemoteViewAll})

				#get which field is required
				if field.flags.required:
					RequiredFields  = "*"

				#Convert from select field data to json format that has label and value
				if Choices:
					Choice 	= 	[]
					for row in Choices:
						if row:
							Result = {}
							Result.update({
								"label":row[1],
								"value":row[0]
							})
						Choice.append(Result)
					Choices = Choice
				#Convert select option html to json format	
				if Type == "QuerySelectField":
					QuerySelectField = eval("FormObject.%s"%FieldID)
					Soup = BeautifulSoup(str(QuerySelectField) , 'lxml')
					for item in Soup.findAll('option'):
						Text = str(item.string)
						Key = item.attrs['value']
						Result = {}
						Result.update({
							"label":Text,
							"value":Key
							})
						Choices.append(Result)
						
				if (Choices) :	
					#Value when update form data of field is not in field.__dict__.get('default','') or field.__dict__.get('data','')
					#It is in field.__dict__.get("raw_data",[])
					if (Data == "") and Type=="QuerySelectField" and (Operation=="Edit" or Operation=="Search"):
						Data = field.__dict__.get("raw_data",[])
						if Data:
							Data = Data[0]

					if Data == '' or Data == []: 
						Data = Choices[0].get("value")


				File = {}
				if Type == "DocumentField":
					File = FormObject.appendField()
						

				#Merge properties's form to json format
				ProperDic = ConvertForm.getProperties(Operation= Operation,FieldID=FieldID,Choices=Choices,Type=Type,
													Label=Label,RequiredFields=RequiredFields,
													RemoteUrlFor=RemoteUrlFor,Data=Data,
													FormObject=FormObject , HotField=HotFieldList , 
													HotSelectField = HotSelectFieldList,File=File)

				#Add Field into tab
				if Tab == "":
					Properties.append(ProperDic)
				else:
					TempList = []
					TempList.append(ProperDic)
					TabDic.update({
					Tab:TabDic.get(Tab,[])+TempList
					})			

			#Tab that is multi value
			for key,value in TabDic.iteritems():
				IsMultiValue = False
				if key in FormObject.isMultiValue():
					IsMultiValue = True
					CheckMul = []
					for row in value:
						if '_' in  row.get('name'):
							index = row.get('name').split('_')[1]
							row.update({'index':int(index)})
							CheckMul.append(row)
						else:
							row.update({'index':int(1)})
							CheckMul.append(row)
					value = sorted(CheckMul, key=itemgetter('index'))
				
				#Check if tab is iframe
				IsIframe 		= False
				IframeURL 		= ''
				IframeTypeUrl 	= ''
				IframeResource  = ''
				IframePros 		= {}
				for iframe in FormObject.urlParam():
					IframeName = value[0].get('name')
					if iframe.get('IframeName','') == IframeName:
						IsIframe  		= True
						IframeResource  = iframe.get('Resource','')
						IframeURL 		= iframe.get('iframeUrl','')+'?ID=ID&IframeName=&Resource='+IframeResource
						IframeTypeUrl 	= iframe.get('TypeUrl','Form')
						IframePros.update({
								"url": IframeURL.replace('/Morakot',''),
							    "type_url": IframeTypeUrl,
							    "name": key[2:],
							    'params':['ID',IframeResource]
							})
				if IsIframe:
					value = []

				#End check if tab is iframe
				TempDic = {
				           "index":key.split("-")[0],
						   "name":key[3:] if len(key.split('-')[0])>1 else key[2:],
						   "content":value,
						   'iframe_props':IframePros,
						   "multi_value":IsMultiValue,
						   'is_iframe':IsIframe
				}
				TabList.append(TempDic)
			#:Sort List of dictionary by key 'index' 
			TabList = sorted(TabList, key=itemgetter('index')) 
			
			#: Offline API Key for append two key with remote select field & hot select field
			#: The data content refer to field id & url for request to download all data.
			#: Example data:
			"""
				"hot_select_field_url_get_all": [
					{
					"field": "Province",
					"url": "/GetDistrict?getall"
					},
					{
					"field": "District",
					"url": "/GetCommune?getall"
					}
				],
				"remote_select_field_url_get_all": [
					{
					"field": "POCustomer",
					"url": "/GetPOCustomer?getall"
					},
					{
					"field": "AccountDD",
					"url": "/GetAccountDD?getall"
					}
				]
			"""
			DictOffline = {'remote_select_get_all':RemoteSelectGetAll,
							'hot_select_get_all':HotSelectGetAll}
		FormData.update({'properties':Properties,
						 'tab':TabList,
						 'header':Header,
						 'button':CustomButton,
						 #: Offline API for download data from remote & hotselectfield
						 'offline':DictOffline
				})

		return FormData

	@staticmethod
	def getProperties(Operation = "" ,FieldID="",Choices=[],Type="",
					  Label="",RequiredFields="",
					  RemoteUrlFor="",Data="",
					  FormObject=None , HotField = [] , 
					  HotSelectField = [] , File={}):

		StaticMethodHotField 		= []
		StaticMethodHotSelectField 	= []
		StatcMethodMoneyField 		= {}
		toMoney=mktmoney.toMoney

		for data in HotField:
			if data.get(FieldID,None):
				data.pop(FieldID,"")
				StaticMethodHotField.append(data)

		for data in HotSelectField:
			if data.get(FieldID,None):
				data.pop(FieldID,"")
				StaticMethodHotSelectField.append(data)		

		Disable 		=	False
		SetVisible 		=	False

		SetVisibleForm 	= 	list(FormObject.setVisible())
		SetDisable 		=	list(FormObject.setDisable())		
		MoneyField 		= 	(FormObject.moneyField())
		SetWidth 		=	dict(FormObject.setWidth())
		GetLenWidth 	=	SetWidth.get(FieldID)
		LenWidth 		=	4
		if GetLenWidth:
			if GetLenWidth == '160px':
				LenWidth = 2
			elif GetLenWidth == '214px':
				LenWidth = 3
			elif GetLenWidth == '100px':
				LenWidth = 1


		if (str(Type)=="DisabledTextField") or (FieldID in SetDisable):
			Disable 	= True

		if FieldID in SetVisibleForm or 'All' in SetVisibleForm:
			SetVisible 	= True

		if Operation == "Search" or Operation == 'Authorize':
			Disable = True
			
		if Operation != "New" and FieldID in FormObject.setDisableforEdit():
			Disable = True

		if MoneyField:
			for row in FormObject.moneyField():
				row = list(row)				
				TemData 	= 	0
				Currency = eval('FormObject.%s.default'%row[1])

				if isinstance(Currency , types.FunctionType) :
					try:
						Currency =  Currency().ID
					except Exception as e:
						Currency = str(Currency())
				if Currency == None:
					Currency 	= 	'USD'
				if Data:
					TemData  = Data
					

				if len(row) > 2: #Format money with sum field In form multiJournal
					if row[0] == FieldID:
						CurrencyObj = mktmoney.getCurrencyObj(Currency)
						Data 	= toMoney(float(TemData), CurrencyObj)
						Route 	= "/toMktmoney?Currency=%s&Money=%s"%(row[1],row[0])
						StatcMethodMoneyField.update({
						"param":[row[1]] + [row[0]],
						"action":Route,
						"set_value_to":[row[2]]
						})
				else:
					if row[0] == FieldID:
						CurrencyObj = mktmoney.getCurrencyObj(Currency)
						Data = toMoney(float(TemData), CurrencyObj)	
						Route = "/toMktmoney?Currency=%s&Money=%s"%(row[1],row[0])
						StatcMethodMoneyField.update({
						"param":[row[1]] + [row[0]],
						"action":Route,
						"set_value_to":[]
						})


		ProperDic = {}
		ProperDic.update({
						'name':FieldID,
						'choices':Choices,
						'type':Type,
						'label':Label[0],
						'required':RequiredFields,
						'remote_url_for':RemoteUrlFor,
						'default':str(Data),
						'file':File,
						"set_visible": SetVisible,
						'set_width':LenWidth,
						"disabled": Disable,
						'hot_field':StaticMethodHotField,
						'hot_select_field':StaticMethodHotSelectField,
						'money_field':StatcMethodMoneyField
						})
		return ProperDic

class Pagination(object):
	@staticmethod
	def list(**kwargs):
		URL = kwargs.get("action","")
		UrlForSearch = URL.replace("/Morakot",'')+kwargs.get("operation","")+'/Operation/'
		if kwargs.get("querys",None).first():
			List = []
					
			TotalRecord,TotalPage,Page,Querys =  Pagination.paginate(**kwargs)
			if Querys.first() is None:
				return ({"message":{"message":["No record"]}}),StatusCodes.not_acceptable()
			for row in Querys.all():
				ID = row.ID
				ListDic = {}
				TempList = []	
				TempListImportant = []
				for name in kwargs.get("fields"):
					TempListDic = {}
					data = eval("row.%s"%name)

					if len(kwargs.get("formatMoney",""))>0:
						if name in kwargs.get("formatMoney",""):
							toMoney =  kwargs.get("toMoney")
							curobj =  kwargs.get("curobj")
							currencyField =  kwargs.get("currencyField")
							data = toMoney(float(eval("row.%s"%name)),curobj(eval("row.%s"%currencyField)))
					TempListDic.update({
							"key":name,
							"value":str(data)						
							})

					if kwargs.get("important_field"):
						if name in kwargs.get("important_field"):
							TempListImportant.append(TempListDic)
					TempList.append(TempListDic)
				if TempListImportant == []:
					TempListImportant = TempList[0:3]
				ListDic.update({
					"columns":TempList,
					'important':TempListImportant,
					"url":URL.replace("/Morakot",'')+"?ID="+ID
					})
				List.append(ListDic)

			return {"message":{"message":[""]},"data":List,"total_page":TotalPage,"total_record":TotalRecord,"url" : UrlForSearch,"current_page":Page},StatusCodes.ok()	
		return {"message":{"message":["No record"]},'data':[]},StatusCodes.not_acceptable()	

	@staticmethod
	def paginate(**kwargs):
		# print "Panha Panha"

		Querys 	 	= 	kwargs.get("querys").order_by(None)
		Model 		=	kwargs.get("model")
		Page 	 	= 	int(kwargs.get("page"))
		PerPage  	= 	int(kwargs.get("per_page"))
		OrderBy 	=  	kwargs.get("order_by")
		FilterBy 	= 	kwargs.get("filter_by")
		Search 		=   kwargs.get("search")
		OrderByMode = 	kwargs.get("order_by_mode") # ASC or DESC

		if Search:
			Filter 		= 	eval("Model.%s"%FilterBy)
			Querys =  Querys.filter(Filter.ilike("%"+Search+"%"))
		if OrderBy:
			Order 		=	eval("Model.%s"%OrderBy)
			if OrderByMode=='DESC':
				Querys =  Querys.order_by(Order.desc())
			else:
				Querys =  Querys.order_by(Order.asc())

		TotalRecord = 	Querys.count()

		TotalPage 	= 	1

		# If PerPage = 0: Return all records without limitaion
		if PerPage == 0:
			return TotalRecord, TotalPage, Page, Querys

		TotalPage 	= 	(TotalRecord/PerPage)
		if TotalRecord%PerPage != 0 :
			TotalPage 	= 	(TotalRecord/PerPage)+1


		if Page <= 0 :
			Page = 1

		if Page > TotalPage:
			Page = TotalPage
		if Querys.first() is None:
			return TotalRecord,TotalPage,Page,Querys

		return TotalRecord,TotalPage,Page, Querys.limit(PerPage).offset((Page - 1) * PerPage)

class StatusCodes(object):
	@staticmethod
	def ok():
		return 200

	@staticmethod
	def created():
		return 201

	@staticmethod
	def accepted():
		return 202

	@staticmethod
	def none_authoritative_information():
		return 203

	@staticmethod
	def no_content():
		return 204

	@staticmethod
	def reset_content():
		return 205

	@staticmethod
	def partial_content():
		return 206

	@staticmethod
	def multiple_choices():
		return 300

	@staticmethod
	def moved_permanently():
		return 301

	@staticmethod
	def found():
		return 302

	@staticmethod
	def see_other():
		return 303

	@staticmethod
	def not_modified():
		return 304

	@staticmethod
	def use_proxy():
		return 305

	@staticmethod
	def reserved():
		return 306

	@staticmethod
	def temporary_redirect():
		return 307

	@staticmethod
	def bad_request():
		return 400

	@staticmethod
	def unauthorized():
		return 401

	@staticmethod
	def payment_required():
		return 402

	@staticmethod
	def forbidden():
		return 403

	@staticmethod
	def not_found():
		return 404

	@staticmethod
	def method_not_allowed():
		return 405

	@staticmethod
	def not_acceptable():
		return 406

	@staticmethod
	def proxy_authentication_required():
		return 407

	@staticmethod
	def request_timeout():
		return 408

	@staticmethod
	def conflict():
		return 409

	@staticmethod
	def gone():
		return 410

	@staticmethod
	def length_required():
		return 411

	@staticmethod
	def precondition_failed():
		return 412

	@staticmethod
	def request_entity_too_large():
		return 413

	@staticmethod
	def request_uri_too_long():
		return 414

	@staticmethod
	def unsupported_media_type():
		return 415

	@staticmethod
	def requested_range_not_satisfiable():
		return 416

	@staticmethod
	def expectation_failed():
		return 417

	@staticmethod
	def precondition_required():
		return 428

	@staticmethod
	def too_many_requests():
		return 428

	@staticmethod
	def request_header_fields_too_large():
		return 431

	@staticmethod
	def internal_server_error():
		return 500

	@staticmethod
	def not_implemented():
		return 501

	@staticmethod
	def bad_gateway():
		return 502

	@staticmethod
	def service_unavailable():
		return 503

	@staticmethod
	def gateway_timeout():
		return 504

	@staticmethod
	def version_not_supported():
		return 505

	@staticmethod
	def network_authentication_required():
		return 511

def FormatJsonMessage(message='',data={},status=200):
	return jsonify({"message":{"message":[message]},
					"data":data,							
					}),status
