# -*- coding: utf-8 -*-
from app.mktcore.imports 					import *
from .forms 								import *
from sqlalchemy 							import *
from app.mktcore.session 					import *

import app.tools.loantools.rescheduletools 	as mktschedule
import app.tools.mktsetting 				as mktsetting
import app.tools.mktdate 					as mktdate
import app.tools.user 						as mktuser
import app.tools.mktmoney 					as mktmoney
import app.tools.mkttool 					as mkttool
import app.tools.mktcustomer 				as mktcustomer
import app.tools.loantools.rescheduletools 	as mktschedule
import app.tools.mktcharge 					as mktcharge
import app.tools.mktpdcollection 			as mktpdcollection

from app.LoanContract.models 				import *
from app.Customer.models 					import MKT_CUSTOMER
from app.Branch.models 						import MKT_BRANCH
from app.Officer.models 					import MKT_OFFICER
from app.ScheduleDefine.models 				import *
from app.LoanAmendment.models 				import *
from app.mktcore.customform 				import *



class CLS_RepaymentSchedule(CLS_CustomForm):
	"""docstring for CLS_CustomerCentre"""
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):
		try:

			Schedule 			 = ""
			Currency 			 = "USD"
			LoanObj 			 = []
			CurrencyObj 		 = ""
			form 				 = FRM_REPAYMENT_SCHEDULE()
			Resource 			 = request.args.get('Resource') if 'Resource' in request.args else "AUTH"
			ContractID 			 = request.args.get('ID').strip() if 'ID' in request.args else ""
			# Get User Branch
			Branch 				 = request.args.get("Branch") if 'Branch' in request.args else mktuser.getBranch(session["ChangeBranch"]).ID
			Contract 			 = {}
			ListLoanAmendmentObj = []
			BodyDict = {}
			BodyList = []

			@staticmethod
			def setVisible():
				return []
			if ContractID:
				@staticmethod
				def setVisible():
					return ['All']			
			setattr(FRM_REPAYMENT_SCHEDULE,'setVisible' , setVisible)


			# Start Tool Bar

			self.customButton =	{
								'title':'Show',
								'type':'Hidden',
								'method':'get',
								'url':'/RepaymentSchedule/?ID=SearchLoanCentreID&Resource=Resource',
								'param':['SearchLoanCentreID','Resource'],
								'icon':'',
								'type_url':'Custom',
								'color':'#1b80c2'
								}
								

			# End Tool Bar

			kwargs = {	'Schedule':Schedule,
						'toMoney':mktmoney.toMoney,
						'float':float,
						'toDateShort':mktdate.toDateShort,
						'No':1,
						'form':form,
						'ContractID':ContractID,
						'Resource':Resource,
						'Contract':Contract,
						'ListLoanAmendmentObj':ListLoanAmendmentObj

					}
			HeaderAccStatement = []

			# if ContractID is not empty
			if ContractID:
				self.customType   = 'Custom'
				self.customButton = {}
				# if Mode is Auth
				if Resource.upper() == 'AUTH':
					# Schedule query from live
					Schedule = MKT_REP_SCHEDULE.query.\
							   order_by(MKT_REP_SCHEDULE.No.asc()).\
							   filter(MKT_REP_SCHEDULE.LoanID == ContractID).\
							   all()

				# if Mode Inau
				else:
					# Schedule query from INAU
					Schedule = MKT_REP_SCHEDULE_INAU.query.\
							   order_by(MKT_REP_SCHEDULE_INAU.No.asc()).\
							   filter(MKT_REP_SCHEDULE_INAU.LoanID == ContractID).\
							   all()

				# if Schedule Obj is empty
				if not Schedule:
					flash(msg_warning + "Repayment schedule not found." , 'error')

				# if Schedule Obj is not empty
				else:
					# if Mode is Auth
					if Resource.upper() == 'AUTH':

						LoanObj = MKT_LOAN_CONTRACT.query.get(ContractID)

						if LoanObj:
							ChargeObj 						= mktcharge.getChargeRegularObj(LoanID = LoanObj.ID, Currency = LoanObj.Currency)
							Penalty 						= str(mktpdcollection.getPenatyRate(LoanID = LoanObj.ID).get('PenaltyRate',0)).replace(",","")

							Contract['ID'] 					= LoanObj.ID
							Contract['BranchName'] 			= MKT_BRANCH.query.get(LoanObj.Branch)
							Contract['ContractCustomerID']	= LoanObj.ContractCustomerID
							Contract['Customer'] 			= MKT_CUSTOMER.query.get(LoanObj.ContractCustomerID)
							Contract['Account'] 			= LoanObj.Account
							Contract['Currency'] 			= LoanObj.Currency
							Contract['CurrencyObj'] 		= mktmoney.getCurrencyObj(LoanObj.Currency)
							Contract['LoanAmount'] 			= LoanObj.Amount
							Contract['LoanDisbursed'] 		= LoanObj.Disbursed
							Contract['ValueDate'] 			= LoanObj.ValueDate
							Contract['InterestRate'] 		= LoanObj.InterestRate
							Contract['MaturityDate'] 		= LoanObj.MaturityDate
							Contract['Term'] 				= LoanObj.Term
							Contract['Installment'] 		= LoanObj.Installment
							Contract['IRR'] 				= LoanObj.IRR
							Contract['Charge']				= mktmoney.formatNumber(ChargeObj[0].Charge) if ChargeObj else 0
							Contract['Penalty']				= Penalty

						else:
							flash(msg_error + "Loan contract not found.")

					# if Mode is INAU
					else:

						ListLoanAmendmentObj = MKT_LOAN_AMENDMENT_INAU.query.\
																   filter(MKT_LOAN_AMENDMENT_INAU.LoanID == ContractID).\
																   all()

						# If more than one Loan Amendment
						if len(ListLoanAmendmentObj) > 1:

							########### Start For API #########


							RepaymentScheduleDict = {}
							RepaymentScheduleList = []
							BodyList 			  = []
							BodyDict 			  = {}

							#Start Header
							HeaderRepaymentSchedule = []
							if Contract:
								HeaderRepaymentSchedule=getHeader(Contract=Contract,toMoney=mktmoney.toMoney)
							#End Header

							BodyList = getBody(Schedule=Schedule,toDateShort=mktdate.toDateShort,CurrencyObj=Contract.get('CurrencyObj'),toMoney=mktmoney.toMoney)
							
							kwargs.update({
								'Schedule':Schedule,
								'Resource':Resource,
								'Contract':Contract,
								'ListLoanAmendmentObj':ListLoanAmendmentObj
								})

							BodyDict.update({
								'header':HeaderRepaymentSchedule,'data':BodyList
								})
							if BodyList:
								self.body 		= BodyDict
							self.kwargs 	= kwargs
							self.form 		= FRM_REPAYMENT_SCHEDULE
							self.recordID 	= ContractID
							
							return True


							########### End For API #########



						# if ContractID exist in Loan Amendment INAU
						if ListLoanAmendmentObj:

							LoanAmendmentObj = ListLoanAmendmentObj[0]
							LoanObj = MKT_LOAN_CONTRACT.query.get(ContractID)

							# if Loan Obj is not exist
							if not LoanObj:
    								


								########### Start For API #########



								flash(msg_warning + "Loan contract %s not found in %s."%(ContractID,Resource))
								RepaymentScheduleDict = {}
								RepaymentScheduleList = []
								BodyList 			  = []
								BodyDict 			  = {}

								#Start Header
								HeaderRepaymentSchedule = []
								if Contract:
									HeaderRepaymentSchedule=getHeader(Contract=Contract,toMoney=mktmoney.toMoney)
								#End Header

								BodyList = getBody(Schedule=Schedule,toDateShort=mktdate.toDateShort,CurrencyObj=Contract.get('CurrencyObj'),toMoney=mktmoney.toMoney)
								
								kwargs.update({
									'Schedule':Schedule,
									'Resource':Resource,
									'Contract':Contract,
									'ListLoanAmendmentObj':ListLoanAmendmentObj
									})
								BodyDict.update({
									'header':HeaderRepaymentSchedule,'data':BodyList
									})
								if BodyList:
									self.body 		= BodyDict
								self.kwargs = kwargs
								self.form = FRM_REPAYMENT_SCHEDULE
								self.recordID = ContractID
								return True



								########### End For API #########
								
							else:
								ChargeObj 						= mktcharge.getChargeRegularObj(LoanID = LoanObj.ID, Currency = LoanObj.Currency)
								Penalty 						= str(mktpdcollection.getPenatyRate(LoanID = LoanObj.ID).get('PenaltyRate',0)).replace(",","")

								Contract['ID'] 				   = LoanObj.ID
								Contract['BranchName'] 		   = MKT_BRANCH.query.get(LoanObj.Branch)
								Contract['ContractCustomerID'] = LoanObj.ContractCustomerID
								Contract['Customer'] 		   = MKT_CUSTOMER.query.get(LoanObj.ContractCustomerID)
								Contract['Account'] 		   = LoanObj.Account
								Contract['Currency'] 		   = LoanObj.Currency
								Contract['CurrencyObj'] 	   = mktmoney.getCurrencyObj(LoanObj.Currency)
								Contract['Charge']				= mktmoney.formatNumber(ChargeObj[0].Charge) if ChargeObj else 0
								Contract['Penalty']				= Penalty


							if LoanAmendmentObj.AddDeduct == '1':
								Contract['LoanAmount']    = float(LoanObj.Amount) - float(LoanAmendmentObj.Amount)
								Contract['LoanDisbursed'] = float(LoanObj.Disbursed) - float(LoanAmendmentObj.Amount)
							else:
								Contract['LoanAmount']    = float(LoanObj.Amount) + float(LoanAmendmentObj.Amount)
								Contract['LoanDisbursed'] = float(LoanObj.Disbursed) + float(LoanAmendmentObj.Amount)

							CollectionDate =  db.session.query(MKT_REP_SCHEDULE_INAU.CollectionDate).\
																									 filter_by(LoanID=ContractID).all()
							if CollectionDate:
								ListMaturityDate 		  = sorted(CollectionDate)[-1]
								MaturityDate 			  = ''.join(ListMaturityDate)
								Contract['ValueDate']     = LoanObj.ValueDate
								Contract['InterestRate']  = LoanAmendmentObj.Interest
								Contract['MaturityDate']  = MaturityDate
								Contract['Term']          = LoanAmendmentObj.Term
								Contract['Installment']   = LoanAmendmentObj.Installment
								Contract['IRR'] 		  = ''

								ScheduelDefineObj 		  = MKT_SCHED_DEFINE_INAU.query.filter(MKT_SCHED_DEFINE_INAU.ID == ContractID).first()

								if ScheduelDefineObj:
									# if RepaymentMode IRR else IRR = ''
									if ScheduelDefineObj.RepMode == '4':
										IRRObj 					  = mktschedule.getIRR(Contract['LoanAmount'], 
																				float(LoanAmendmentObj.Interest), 
																				int(LoanAmendmentObj.Frequency), 
																				int(LoanAmendmentObj.Installment))
										Contract['IRR'] 		  = IRRObj[0]

							else:
    								



								########### Start For API #########


								flash('No Collection Date %s %s' % (ContractID, Resource))
								RepaymentScheduleDict = {}
								RepaymentScheduleList = []
								BodyList 			  = []
								BodyDict 			  = {}

								#Start Header
								HeaderRepaymentSchedule = []
								if Contract:
									HeaderRepaymentSchedule=getHeader(Contract=Contract,toMoney=mktmoney.toMoney)
								#End Header

								BodyList = getBody(Schedule=Schedule,toDateShort=mktdate.toDateShort,CurrencyObj=Contract.get('CurrencyObj'),toMoney=mktmoney.toMoney)
								
								kwargs.update({
									'Schedule':Schedule,
									'Resource':Resource,
									'Contract':Contract,
									'ListLoanAmendmentObj':ListLoanAmendmentObj
									})

								BodyDict.update({
									'header':HeaderRepaymentSchedule,'data':BodyList
									})
								if BodyList:
									self.body = BodyDict
								self.kwargs = kwargs								
								self.form = FRM_REPAYMENT_SCHEDULE
								self.recordID = ContractID
								return True


								########### End For API #########



						# if ContractID is not exist in Loan Amendment 
						else:

							LoanObj = MKT_LOAN_CONTRACT_INAU.query.get(ContractID)
							ChargeObj 						= mktcharge.getChargeRegularObj(LoanID = LoanObj.ID, Currency = LoanObj.Currency)
							Penalty 						= str(mktpdcollection.getPenatyRate(LoanID = LoanObj.ID).get('PenaltyRate',0)).replace(",","")
						
							
							
							########### Start For API #########
						
						
							if not LoanObj:
								flash(msg_warning + "Loan contract %s not found in %s."%(ContractID,Resource))
								RepaymentScheduleDict = {}
								RepaymentScheduleList = []
								BodyList 			  = []
								BodyDict 			  = {}

								#Start Header
								HeaderRepaymentSchedule = []
								if Contract:
									HeaderRepaymentSchedule=getHeader(Contract=Contract,toMoney=mktmoney.toMoney)
								#End Header

								BodyList = getBody(Schedule=Schedule,toDateShort=mktdate.toDateShort,CurrencyObj=Contract.get('CurrencyObj'),toMoney=mktmoney.toMoney)
								
								kwargs.update({
									'Schedule':Schedule,
									'Resource':Resource,
									'Contract':Contract,
									'ListLoanAmendmentObj':ListLoanAmendmentObj
									})

								BodyDict.update({
									'header':HeaderRepaymentSchedule,'data':BodyList
									})
								if BodyList:
									self.body = BodyDict
								self.kwargs = kwargs								
								self.form = FRM_REPAYMENT_SCHEDULE
								self.recordID = ContractID
								return True

								########### End For API #########

							else:
								ChargeObj 						= mktcharge.getChargeRegularObj(LoanID = LoanObj.ID, Currency = LoanObj.Currency)
								Contract['ID'] 					= LoanObj.ID
								Contract['BranchName'] 			= MKT_BRANCH.query.get(LoanObj.Branch)
								Contract['ContractCustomerID']	= LoanObj.ContractCustomerID
								Contract['Customer'] 			= MKT_CUSTOMER.query.get(LoanObj.ContractCustomerID)
								Contract['Account'] 			= LoanObj.Account
								Contract['Currency'] 			= LoanObj.Currency
								Contract['CurrencyObj'] 		= mktmoney.getCurrencyObj(LoanObj.Currency)
								Contract['LoanAmount'] 			= LoanObj.Amount
								Contract['LoanDisbursed'] 		= LoanObj.Disbursed
								Contract['ValueDate'] 			= LoanObj.ValueDate
								Contract['InterestRate'] 		= LoanObj.InterestRate
								Contract['MaturityDate'] 		= LoanObj.MaturityDate
								Contract['Term'] 				= LoanObj.Term
								Contract['Installment'] 		= LoanObj.Installment
								Contract['IRR'] 				= LoanObj.IRR
								Contract['Charge']				= mktmoney.formatNumber(ChargeObj[0].Charge) if ChargeObj else 0
								Contract['Penalty']				= Penalty

			
			
			########### Start For API #########



			# setattr(FRM_REPAYMENT_SCHEDULE,'Resource' ,SelectField("Resource",
			# 								choices=[('__None', '--None--'),('AUTH', 'AUTH'),('INAU', 'INAU')],
			# 				 				coerce=str,
			# 								default=Resource
			# 								))
			# setattr(FRM_REPAYMENT_SCHEDULE,'SearchLoanCentreID', RemoteTextField('Search LoanID or Name',default=ContractID))
			
			RepaymentScheduleDict = {}
			RepaymentScheduleList = []
			BodyList 			  = []
			BodyDict 			  = {}

			#Start Header
			HeaderRepaymentSchedule = []
			if Contract:
				HeaderRepaymentSchedule=getHeader(Contract=Contract,toMoney=mktmoney.toMoney)
			#End Header

			BodyList = getBody(Schedule=Schedule,toDateShort=mktdate.toDateShort,CurrencyObj=Contract.get('CurrencyObj'),toMoney=mktmoney.toMoney)
			
			kwargs.update({
				'Schedule':Schedule,
				'Resource':Resource,
				'Contract':Contract,
				'ListLoanAmendmentObj':ListLoanAmendmentObj
				})

			BodyDict.update({
				'header':HeaderRepaymentSchedule,'data':BodyList
				})
				
			# setattr(FRM_REPAYMENT_SCHEDULE,'Resource' ,SelectField("Resource",
			# 								choices=[('', '--None--'),('AUTH', 'AUTH'),('INAU', 'INAU')],
			# 				 				coerce=str,
			# 								default=Resource
			# 								))
			# setattr(FRM_REPAYMENT_SCHEDULE,'SearchLoanCentreID', RemoteTextField('Search LoanID or Name',default=ContractID))
			# print "After"
			if BodyList:
				self.body 	= BodyDict	
			self.kwargs 	= kwargs			
			self.form 		= FRM_REPAYMENT_SCHEDULE
			self.recordID 	= ContractID
			self.header 	= 'Repayment Schedule'
			return True

			########### End For API #########

		except:
			raise

@app.route("/Morakot/RepaymentSchedule/Print", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPrintReport():

	try:

		Currency 	= 'USD'
		ContractID 	= request.args.get('ID').strip() if request.args.get('ID') else ""
		Resource 	= request.args.get('Resource') if 'Resource' in request.args else "AUTH"
		Schedule 	= ""
		row 		= ""
		CustomerName= ""
		CurrencyObj = ""
		Company 	= ""
		CompanyKh 	= ""
		Officer 	= ""
		OfficerPhone= ""
		OfficerID 	= ""
		Address 	= ""
		CompanyLogo = ""
		HideTotal 	= mktsetting.getAppSetting('HideTotalRepayment')
		if not HideTotal:
			HideTotal = "N"

		getCompany 	= mkttool.getCompany()
		if getCompany:
			Company 	= 	getCompany.CompanyName
			CompanyKh 	=	getCompany.LocalName
			# Address 	=	getCompany.Address1 + " " + getCompany.Address2
			CompanyLogo =	getCompany.Logo

		if ContractID:
			if Resource.upper() == 'AUTH':
				Schedule = MKT_REP_SCHEDULE.query.\
						   order_by(MKT_REP_SCHEDULE.No.asc()).\
						   filter(MKT_REP_SCHEDULE.LoanID == ContractID).\
						   all()

			else:
				Schedule = MKT_REP_SCHEDULE_INAU.query.\
						   order_by(MKT_REP_SCHEDULE_INAU.No.asc()).\
						   filter(MKT_REP_SCHEDULE_INAU.LoanID == ContractID).\
						   all()

			if not Schedule:
				flash(msg_warning + "Contract number not found")

			row = MKT_LOAN_CONTRACT.query.get(ContractID)
			if row:
				BranchName 		= MKT_BRANCH.query.get(row.Branch)
				CustomerName 	= MKT_CUSTOMER.query.get(row.ContractCustomerID)
				Currency 		= row.Currency
				OfficerID 		= row.ContractOfficerID
				CurrencyObj 	= mktmoney.getCurrencyObj(Currency)
				Address 		= mktcustomer.getCustomerAddress(row.ContractCustomerID,Locale='kh')
				ChargeObj 		= mktcharge.getChargeRegularObj(LoanID = row.ID, Currency = row.Currency)
				ChargeRate 		= ChargeObj[0].Charge if ChargeObj else 0
				PenaltyRate		= mktpdcollection.getPenatyRate(LoanID = row.ID).get('PenaltyRate',0)

			else:
				row = MKT_LOAN_CONTRACT_INAU.query.get(ContractID)
				if row:
					BranchName 		= MKT_BRANCH.query.get(row.Branch)
					CustomerName 	= MKT_CUSTOMER.query.get(row.ContractCustomerID)
					Currency 		= row.Currency
					OfficerID 		= row.ContractOfficerID
					CurrencyObj 	= mktmoney.getCurrencyObj(Currency)
					Address 		= mktcustomer.getCustomerAddress(row.ContractCustomerID,Locale='kh')
					ChargeObj 		= mktcharge.getChargeRegularObj(LoanID = row.ID, Currency = row.Currency)
					ChargeRate 		= ChargeObj[0].Charge if ChargeObj else 0
					PenaltyRate		= mktpdcollection.getPenatyRate(LoanID = row.ID).get('PenaltyRate',0)
				else:
					flash(msg_warning + "Loan contract not found.")

			OfficerObj 	=	MKT_OFFICER.query.get(OfficerID)
			if OfficerObj:
				Officer 		= 	OfficerObj.LastName + " " + OfficerObj.FirstName
				OfficerPhone 	=	OfficerObj.Phone

		return render_template("schedule/repayment.html",
								Schedule 		=	Schedule,
								toMoney 		=	mktmoney.toMoney,
								formatNumber 	= 	mktmoney.formatNumber,
								Contract 		=	row,
								CurrencyObj 	=	CurrencyObj,
								Currency 		=	Currency,
								Company 		=	Company,
								CompanyKh 		=	CompanyKh,
								Officer 		=	Officer,
								OfficerPhone	=	OfficerPhone,
								OfficerID 		=	OfficerID,
								Address 		=	Address,
								ChargeRate 		= 	ChargeRate,
								PenaltyRate 	= 	PenaltyRate,
								CompanyLogo 	=	CompanyLogo,
								float 			=	float,
								CustomerName	=	CustomerName,
								toDateShort 	=	mktdate.toDateShort,
								getRateByFreq 	=	getRateByFreq,
								HideTotal 		= 	HideTotal
							)
	except:
		raise

def getRateByFreq(FreqType, Freq, Rate):
	try:
		
		RateDetail 	= 	0
		Text 		=	""

		if FreqType == '1':
			RateDetail 	= 	float(Rate) / float(12)
			Text 		=	u"%s ខែ" %Freq
		else:
			RateDetail = float(Rate) / float(52)
			Text 		=	u"%s សប្តាហ៍" %Freq

		RateDetail = float(RateDetail) * float(Freq)
		RateDetail = mktmoney.formatNumber(float(RateDetail), 2, 2)

		RateDetailText 	=	u"%s%% ក្នុង %s" %(RateDetail, Text)

		return RateDetailText

	except Exception, e:
		raise

@app.route('/Morakot/LoanNoSchedule', methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def LoanNoSchedule():
	# List = []
	# try:
		
	# 	LoanObj 	=	db.session.query(
	# 						MKT_LOAN_CONTRACT.ID
	# 					).\
	# 					outerjoin(
	# 						MKT_REP_SCHEDULE,
	# 						MKT_REP_SCHEDULE.LoanID == MKT_LOAN_CONTRACT.ID
	# 					).\
	# 					all()

	# 	if LoanObj:
	# 		for item in LoanObj:
	# 			List.append(item.ID)

	# except Exception, e:
	# 	raise

	# return 'List Loan: %s' %List
	ScheduleObj = db.session.query(MKT_REP_SCHEDULE.LoanID).distinct()
	ListLoan = []
	for row in ScheduleObj:
		ListLoan.append(str(row.LoanID))

	LoanObj 	= MKT_LOAN_CONTRACT.query.filter(~MKT_LOAN_CONTRACT.ID.in_(ListLoan))
	ListLoanNoSchedule = []
	for row in LoanObj:
		ListLoanNoSchedule.append(str(row.ID))
	return 'List Loan: %s'%ListLoanNoSchedule

def getHeader(Contract={} , toMoney = None):
	#First Header
	RepaymentSchedule = {'text':getLanguage('Repayment Schedule'),'size':'h3','url':'','type_url':'','icon':'','method':'','children':[]}
	FirstHeader = [RepaymentSchedule]
	#End First Header

	# Start Second Header
	ContractID = {'text':getLanguage('Contract ID')+': %s'% Contract.get('ID'),'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]} 
	ContractCustomerID = {'text':getLanguage('Customer ID')+': %s'% Contract.get('ContractCustomerID')	,'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ContractAccount = {'text':getLanguage('Account') +': %s'%Contract.get('Account'),'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	CustomerName = {'text':getLanguage('Customer Name')+': %s'%(Contract.get('Customer').LastNameEn + " " + Contract.get('Customer').FirstNameEn ),'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ContractBranch = {'text':getLanguage('Branch')+': %s'%Contract.get('BranchName').Description,'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ContractCurrency = {'text':getLanguage('Currency') +': %s'%Contract.get('Currency'),'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ContractLoanDisbursed = {'text':'Loan Disbursed'+': %s'% toMoney(float(Contract.get('LoanDisbursed')), Contract.get('CurrencyObj')),'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ContractLoanAmount = {'text':getLanguage('Loan Amount') +': %s'% toMoney(float(Contract.get('LoanAmount')), Contract.get('CurrencyObj')),'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	SecondHeader = [ContractID,ContractCustomerID,ContractAccount,CustomerName,ContractBranch,
					ContractCurrency,ContractLoanDisbursed,ContractLoanAmount
					]
	# End Second Header

	# Start Third Header
	ContractInterestRate = {'text':getLanguage('Interest Rate') +': %s'% Contract.get('InterestRate')+'% / Year','size':'h4','url':'','type_url':'','icon':'','method':'','children':[]} 
	ContractChargeRate = {'text':'Charge Rate'+': %s'% Contract.get('Charge')	+ '% / Year','size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ContractPenaltyRate = {'text':'Penalty Rate'+': %s'%Contract.get('Penalty')+'% / Day','size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	CustomerIRR = {'text':'IRR'+': %s'%(Contract.get('IRR','')) + '% / Year','size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ContractValueDate = {'text':getLanguage('Value Date')+': %s'%Contract.get('ValueDate').split("-")[2] + "-" + Contract.get('ValueDate').split("-")[1] + "-" + Contract.get('ValueDate').split("-")[0],'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ContractMaturityDate = {'text':getLanguage('Maturity Date') +': %s'%Contract.get('MaturityDate').split("-")[2] + "-" + Contract.get('MaturityDate').split("-")[1] + "-" + Contract.get('MaturityDate').split("-")[0],'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ContractTerm = {'text':getLanguage('Term')+': %s Months'%Contract.get('Term'),'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ContractInstallment = {'text':getLanguage('Installment') +': %s'%Contract.get('Installment'),'size':'h4','url':'','type_url':'','icon':'','method':'','children':[]}
	ThirdHeader = [ContractInterestRate,ContractChargeRate,ContractPenaltyRate,CustomerIRR,ContractValueDate,
					ContractMaturityDate,ContractTerm,ContractInstallment
					]
	# # End Third Header

	HeaderAccStatement=[FirstHeader,SecondHeader,ThirdHeader]
	return HeaderAccStatement

def getBody(Schedule=None,toDateShort=None,CurrencyObj=None,toMoney=None):
	BodyList = []
	RepaymentScheduleList = []
	RepaymentScheduleDict = {}
	if Schedule:
		for row in Schedule:
			No 				=	{'key':getLanguage('No'),'value':row.No}
			CollectionDate 	=	{'key':getLanguage('Collection Date'),'value':toDateShort(row.CollectionDate, "EN")}
			Principal		=	{'key':getLanguage('Principal'),'value':toMoney(float(row.Principal), CurrencyObj)}
			Interest 		=	{'key':getLanguage('Interest'),'value':toMoney(float(row.Interest), CurrencyObj)}
			Charge			=	{'key':'Charge','value':toMoney(float(row.Charge),CurrencyObj)} 
			TotalAmount		=	{'key':getLanguage('Total Amount'),'value':toMoney(float(row.Principal + row.Interest +row.Charge), CurrencyObj)} 
			Balance 		=	{'key':getLanguage('Balance'),'value':toMoney(float(row.Balance), CurrencyObj)} 
			NumberOfDay 	=	{'key':'NumberOfDay','value':row.NumDay}
			Column 			= 	[No,CollectionDate,Principal,Interest,Charge,TotalAmount,Balance,NumberOfDay]
			ImportantField  = 	[CollectionDate,Principal,Interest,TotalAmount]
			RepaymentScheduleList.append({'columns':Column,'urls':[],'important':ImportantField})

		RepaymentScheduleDict.update({
						'icon':'','name':'RepaymentSchedule','title':'Repayment Schedule','type':'Table','data':RepaymentScheduleList,'most_data':True,'expand':False
					})

		BodyList.append(RepaymentScheduleDict)
	return BodyList


registerCRUD(admin, '/RepaymentSchedule', 'RepaymentSchedule',FRM_REPAYMENT_SCHEDULE, [MKT_REP_SCHEDULE],template="schedule/schedule.html",form_type='MainCustom',custom_form_data=CLS_RepaymentSchedule)