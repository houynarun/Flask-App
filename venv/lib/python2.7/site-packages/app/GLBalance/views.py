from flask 						import request, url_for, render_template,flash,redirect,session, g
from .. 						import app, db
from sqlalchemy 				import or_, and_,func
from app.Login.forms 			import *
from app.mktcore.imports 		import *
from app.mktcore.session 		import *
from .forms 					import *
from sqlalchemy 				import *
from datetime 					import datetime, date, timedelta
from decimal 					import Decimal
import time
import calendar

from app.Branch.models 			import MKT_BRANCH
from app.GLBalance.models 		import MKT_GL_BALANCE, MKT_GL_BALANCE_BACKUP
from app.GL.models 				import MKT_GL_MAPPING_DE, MKT_GL_MAPPING
from app.Category.models 		import MKT_CATEGORY
from app.ConsolBalance.models 	import MKT_CONSOL_BALANCE
from app.Journal.models 		import MKT_JOURNAL
from app.Transaction.models 	import MKT_TRANSACTION

import app.tools.mktmoney 		as mktmoney
import app.tools.mktaccounting 	as mktaccounting
import app.tools.user 			as mktuser
import app.tools.mktgl 			as mktgl
import app.tools.mktdate 		as mktdate
import app.tools.mktmessage 	as mktmessage
import app.tools.mktreport 		as mktreport
import app.tools.mktsetting 	as mktsetting
import app.tools.mkttool 		as mkttool

import app.tools.mktsetting 	as mktsetting
from app.Currency.models 		import *
ExtendClass 			= 	mktsetting.ExtendModule()
ACC_ENTRY_MODULE_PREFIX =	ExtendClass.getUrlExtend(DictUrl=ACC_ENTRY_MODULE_PREFIX)

@app.route("/Morakot/GLBalance/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getGLBalance():

	try:

		#call checkAccess
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/GLBalance/", "Search")

		if getCheck != True:
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		AccessBranch 		= 	mktuser.getAccessBranch()
		BankDate 			= 	str(mktdate.getBankDate())
		Branch 				= 	request.args.get("Branch") if 'Branch' in request.args else mktuser.getCurrentBranch()
		BranchName 			= 	Branch
		form 				= 	FRM_GL_BALANCE()
		ID 					= 	request.args.get('ID') if 'ID' in request.args else ""
		DisplayOption 		=	request.args.get('DisplayOption') if 'DisplayOption' in request.args else "N"
		BeginTransaction 	= 	""
		Audit   			=   request.args.get("Audit") if 'Audit' in request.args else "1"
		StartDate 			= 	request.args.get('StartDate') if 'StartDate' in request.args else ""
		EndDate   			= 	request.args.get('EndDate') if 'EndDate' in request.args else ""
		Year    			= 	request.args.get('Year') if 'Year' in request.args else ""
		Month   			= 	request.args.get('Month') if 'Month' in request.args else ""
		ShowPrintBy 		=   request.args.get("ShowPrintBy") if 'ShowPrintBy' in request.args else "No"
		Currency 			=	request.args.get('Currency') if 'Currency' in request.args else ""
		AuditedStatus   	=   mkttool.getAudited(Year, Month)['Audit']


		DicModule 	= ACC_ENTRY_MODULE_PREFIX
		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)
		if Year and len(Year) == 4 and Year.isdigit():
			GroupMonth 	=	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		BeginingBalance 	= 	0
		EndingBalance		=	0
		GL_Balance 		= 	None
		GLMappingObj 	= 	MKT_GL_MAPPING.query
		SubGL 			=	''
		TransactionObj  = 	{}
		# Call Base Currency
		BaseCurrency 	= 	mktsetting.getAccSetting().BaseCurrency
		BaseCurrencyObj = 	mktmoney.getCurrencyObj(BaseCurrency)

		for row in MKT_TRANSACTION.query:
			TransactionObj.update({str(row.ID):row.Description})
		if ID:
			
			GL 			= 	GLMappingObj.filter(MKT_GL_MAPPING.ID == ID).first()
			Key 		= 	[]
			GL_Detail 	= 	""
			BalanceType =	""
			if GL:

				if not GL.SubGL:
					Detail = MKT_GL_MAPPING_DE.query.filter(MKT_GL_MAPPING_DE.ID == GL.ID).all()

					if Detail:

						for row in Detail:
							Key.append(row.ConsolKey)

					if Key:
						GL_Detail = MKT_JOURNAL.query.filter(MKT_JOURNAL.Currency==Currency)
						if StartDate:
						
							if EndDate:
								
								GL_Detail = GL_Detail.\
											filter(MKT_JOURNAL.TransactionDate.between(str(StartDate),str(EndDate)))
							else:
								GL_Detail = GL_Detail.\
											filter(MKT_JOURNAL.TransactionDate >= str(StartDate))

						else:
							# Block find Start Date and End Date
							StartDate  	= str(BankDate)
							EndDate 	= str(BankDate)
							NewDate 	= StartDate.split("-")
							StartDate 	= NewDate[0] + "-" + NewDate[1] + "-01"
							TransactionDate =""
							'''
								End Date : By Deafault Bank Date if Transaction bigger than bank 
											date the End date is equal transaction date
							'''
							EndDateObj 		= MKT_JOURNAL.query.\
														filter(MKT_JOURNAL.GL_KEYS.in_(Key)).\
														filter(MKT_JOURNAL.Currency==Currency).\
														filter(MKT_JOURNAL.Branch==Branch).\
														order_by(MKT_JOURNAL.TransactionDate.desc()).first()
	
							if EndDateObj:
								TransactionDate = str(EndDateObj.TransactionDate)
								if TransactionDate > BankDate:
									EndDate   =  str(TransactionDate)

							# Update by Sovankiry Rim - 01 July 2017
							# Case if current month doesn't have transation, it will choose the last month of record 
							GLOrigial = GL_Detail
							GL_Detail = GL_Detail.\
											filter(MKT_JOURNAL.TransactionDate.between(str(StartDate),str(EndDate)))
							if not GL_Detail.first() and TransactionDate:
								NewDate 	= TransactionDate.split("-")
								StartDate 	= NewDate[0] + "-" + NewDate[1] + "-01"
								EndDate 	= TransactionDate
								GL_Detail = GLOrigial.\
												filter(MKT_JOURNAL.TransactionDate.between(str(StartDate),str(EndDate)))

						if Branch.upper() != "ALL":

							GL_Detail 	= 	GL_Detail.\
											filter(MKT_JOURNAL.Branch == Branch).\
											order_by(MKT_JOURNAL.Branch.asc(),MKT_JOURNAL.TransactionDate.asc(),MKT_JOURNAL.ID.asc())
							
							# Get Begining balance if transaction date not in order
							BeginingBalance,BalanceType = getBeginingBalanceGL(Key,Branch,Currency,StartDate,EndDate)

						else:
							GL_Detail 	= 	GL_Detail.\
											order_by(MKT_JOURNAL.TransactionDate.asc(),MKT_JOURNAL.ID.asc())
										
							Branch = Branch.upper()

						GL_Detail = GL_Detail.\
									filter(MKT_JOURNAL.GL_KEYS.in_(Key)).\
									all()
						
					if not GL_Detail:
						flash(msg_warning + " GL %s has not transaction yet." %ID)
					else:
						'''
							The code below calculator ending balance than pass the result for jinja template
						'''
						EndingBalance = getEndingBalanceGL(GL_Detail,BalanceType,BeginingBalance)
						
				else:
					SubGL 	=	GL.SubGL
					# flash(msg_warning + "Please view its Sub GL: %s" %SubGL)

			else:
					flash(msg_warning + "Record not found.")


			return render_template("gl/detail.html",
									GL 				= GL,
									SubGL			= SubGL,
									GL_Detail 		= GL_Detail,
									ShowPrintBy     	= ShowPrintBy,
									Company  		= mkttool.getCompany(),
									PrintByAndDate  	= mktreport.getPrintByAndPrintDate,
									toMoney 			= mktmoney.toMoney,
									getCurrencyObj 	= mktmoney.getCurrencyObj(Currency),
									Currency 		= Currency,
									float 			= float,
									str 				= str,
									form 			= form,
									ID 				= ID,
									getAccBalanceType= mktaccounting.getAccBalanceType,
									Branch 			= Branch,
									BeginingBalance 	= BeginingBalance,
									EndingBalance 	= EndingBalance,
									StartDate 		= StartDate,
									EndDate 			= EndDate,
									BranchName 		= BranchName,
									AccessBranch 	= AccessBranch,
									getTextMsg 		= mktmessage.getTextMsg,
									TransactionObj 	= TransactionObj,
									BalanceType 		= BalanceType,
									Year 			= Year,
									DicModule 	    = DicModule,
									Month 			= Month,
									GroupYear 		= GroupYear,
									GroupMonth 		= GroupMonth,
									AuditedStatus  	= AuditedStatus,
									Audit  			= Audit,
									BaseCurrencyObj = BaseCurrencyObj
								)

		else:

			GL_Balance,AsOfDate 	= 	getGLConsolidate(Branch, Year=Year, Month=Month, Audit=Audit)

			return render_template("gl/list.html",
									GL_Balance 		= GL_Balance,
									GLMappingObj 	= GLMappingObj,
									ShowPrintBy     	= ShowPrintBy,
									Company  		= mkttool.getCompany(),
									PrintByAndDate  	= mktreport.getPrintByAndPrintDate,
									toMoney 			= mktmoney.toMoney,
									getCurrencyObj 	= mktmoney.getCurrencyObj,
									float 			= float,
									str 				= str,
									DicModule 	    = DicModule, 
									Branch 			= Branch,									  
									getTextMsg 		= mktmessage.getTextMsg,
									TransactionObj 	= TransactionObj,
									BranchName 		= BranchName,
									DisplayOption 	= DisplayOption,
									Year 			= Year,
									Month 			= Month,
									GroupYear 		= GroupYear,
									GroupMonth 		= GroupMonth,
									AuditedStatus   = AuditedStatus,
									Audit   		= Audit,
									AsOfDate 		= AsOfDate,
									BaseCurrencyObj 	= BaseCurrencyObj
								)
	except:
		raise

def getAuthorizeonDateGL(Key,Branch,Currency,StartDate):
	'''
		Get Authorizeon Date Refer to find Transaction Date that booking precursor

	=>	AE16210000002	2016-07-19
		AE16210000004	2016-07-05
		AE16210000006	2016-07-05
		AE16210000008	2016-07-05
		AE16210000010	2016-07-05
		AE16210000012	2016-07-01


	'''
	Authorizeon = "%s 00:00:00"%StartDate

	FirstTransaction =  MKT_JOURNAL.query.\
							filter(( MKT_JOURNAL.TransactionDate >= StartDate)).\
							filter(MKT_JOURNAL.GL_KEYS.in_(Key)).\
							filter(MKT_JOURNAL.Currency==Currency).\
							filter(MKT_JOURNAL.Branch == Branch).\
							order_by(MKT_JOURNAL.ID.asc()).first()
	if FirstTransaction:
		Authorizeon = FirstTransaction.Authorizeon
		
	return Authorizeon
def getBeginingBalanceGL(Key,Branch,Currency,StartDate,EndDate):
	try:
		BalanceType	=	""
		BegBalance	=	0
		Authorizeon =	getAuthorizeonDateGL(Key,Branch,Currency,StartDate)
		Transaction_list 	=	MKT_JOURNAL.query.\
								filter((
									((MKT_JOURNAL.TransactionDate >= StartDate) & (MKT_JOURNAL.TransactionDate <= EndDate)) | 
									((MKT_JOURNAL.Authorizeon >= Authorizeon) & (MKT_JOURNAL.TransactionDate < StartDate))
								)).\
								filter(MKT_JOURNAL.GL_KEYS.in_(Key)).\
								filter(MKT_JOURNAL.Currency==Currency).\
								filter(MKT_JOURNAL.Branch == Branch).\
								order_by(MKT_JOURNAL.ID.asc())

		BegBalance 	=	0
		BegCategory =	''

		for k in Key:
			
			JournalObj 	=	MKT_JOURNAL.query.\
							filter(MKT_JOURNAL.TransactionDate >= StartDate).\
							filter(MKT_JOURNAL.GL_KEYS == k).\
							filter(MKT_JOURNAL.Currency==Currency).\
							filter(MKT_JOURNAL.Branch == Branch).\
							order_by(MKT_JOURNAL.ID.asc()).first()
			if JournalObj:
				BegBalance +=	float(JournalObj.PrevBalance)
				BegCategory =	JournalObj.CategoryID

			else:
				JournalObj 	=	MKT_JOURNAL.query.\
								filter((MKT_JOURNAL.TransactionDate <= StartDate) & 
									(MKT_JOURNAL.Authorizeon <= Authorizeon)).\
								filter(MKT_JOURNAL.GL_KEYS == k).\
								filter(MKT_JOURNAL.Currency==Currency).\
								filter(MKT_JOURNAL.Branch == Branch).\
								order_by(MKT_JOURNAL.ID.desc()).first()

				if JournalObj:
					BegBalance +=	float(JournalObj.PrevBalance)
					BegCategory =	JournalObj.CategoryID
					BalanceType =	mktaccounting.getAccBalanceType(BegCategory)
					BegBalance 	=	BegBalance + float(JournalObj.Amount) if BalanceType == JournalObj.DebitCredit else BegBalance - float(JournalObj.Amount)

		if Transaction_list.all():
			FirstBeginingObj = Transaction_list.first()
			# BegBalance = float(FirstBeginingObj.PrevBalance)
			# BegCategory = FirstBeginingObj.CategoryID
			BalanceType = mktaccounting.getAccBalanceType(BegCategory)
			for row in Transaction_list:
				DrCr = row.DebitCredit
				# print 'Transaction Date',row.TransactionDate,row.ID,row.CategoryID
				if str(row.TransactionDate) < StartDate:
					BegBalance = float(BegBalance) + float(row.Amount) if BalanceType == DrCr else float(BegBalance) - float(row.Amount)

		return BegBalance,BalanceType

	except:
		raise

def getEndingBalanceGL(GL_Detail,BalanceType,Balance=0):
	try:
		for row in GL_Detail:
			DrCr = row.DebitCredit
			Balance = float(Balance) + float(row.Amount) if BalanceType == DrCr else float(Balance) - float(row.Amount)

		return Balance
	except:
		raise
@app.route("/Morakot/UpdateGLBalance/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def updateGLBalance():
	try:

		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/GLBalance/", "Search")
		if getCheck != True:

			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		Branch 		= request.args.get("Branch") if 'Branch' in request.args else session.get("ChangeBranch")
		# ConsolObj 	= getConsolKeyBalObj()
		# mktgl.setGLBalance(Branch)
		# Update GL Balance
		if Branch.upper() == "ALL":
			ListBranch  = [ row.ID for row in MKT_BRANCH.query]
		else:
			ListBranch = Branch.split()
			ListBranch = filter(None,ListBranch)
		for row in ListBranch:
			mktgl.getTreeGLCode(row)
		flash("GL was successfully updated for %s." %Branch)
		db.session.commit()
		return redirect(url_for("getGLBalance"))
	except:
		raise

def getGLConsolidate(Branch,ID="", Year="", Month="", Audit="1"):
	ListError = []
	GLBalance = []
	Condition = []
	AsOfDate  = str(mktdate.getBankDate())
	GLBalanceTable = MKT_GL_BALANCE
	if Year and Month:
		GLBalanceTable = MKT_GL_BALANCE_BACKUP
		Condition.append(GLBalanceTable.GLYear==Year)
		Condition.append(GLBalanceTable.GLMonth==Month)
		Condition.append(GLBalanceTable.Audit==Audit)
		AsOfObj =  MKT_GL_BALANCE_BACKUP.query.filter(*Condition).first()
		if AsOfObj:
			AsOfDate = '%s-%s-%s'%(AsOfObj.GLYear,AsOfObj.GLMonth,AsOfObj.GLDay)
	if Branch.upper() != "ALL":
		ListBranch = Branch.split()
		ListBranch = filter(None,ListBranch)
		BranchObj  = [ row.ID for row in MKT_BRANCH.query]
		for row in ListBranch:
			if not row in BranchObj:
				flash(msg_warning+'Branch %s not found.'%row)
				ListError.append('Branch %s not found.'%row)
		Condition.append(GLBalanceTable.Branch.in_(ListBranch))
	if ID:
		Condition.append(GLBalanceTable.ID==ID)

	if not ListError:
		GLBalance 	= db.session.query(
										GLBalanceTable.ID,
										GLBalanceTable.Currency,
										func.sum(GLBalanceTable.PrevMonthBal).label('PrevMonthBal'),
										func.sum(GLBalanceTable.CurrentPrevMonthBal).label('CurrentPrevMonthBal'),
										func.sum(GLBalanceTable.CurrentMonthBal).label('CurrentMonthBal'),
										func.sum(GLBalanceTable.PrevYearBal).label('PrevYearBal'),
										func.sum(GLBalanceTable.CurrentPrevYearBal).label('CurrentPrevYearBal'),
										func.sum(GLBalanceTable.YTDBal).label('YTDBal'),
										func.sum(GLBalanceTable.Balance).label('Balance'),
										func.sum(GLBalanceTable.LCYPrevMonthBal).label('LCYPrevMonthBal'),
										func.sum(GLBalanceTable.LCYCurrentPrevMonthBal).label('LCYCurrentPrevMonthBal'),
										func.sum(GLBalanceTable.LCYCurrentMonthBal).label('LCYCurrentMonthBal'),
										func.sum(GLBalanceTable.LCYPrevYearBal).label('LCYPrevYearBal'),
										func.sum(GLBalanceTable.LCYCurrentPrevYearBal).label('LCYCurrentPrevYearBal'),
										func.sum(GLBalanceTable.LCYYTDBal).label('LCYYTDBal'),
										func.sum(GLBalanceTable.LCYBalance).label('LCYBalance')
									).\
								filter(*Condition).\
								order_by(GLBalanceTable.Currency.asc(),GLBalanceTable.ID.asc()).\
								group_by(
									GLBalanceTable.ID,
									GLBalanceTable.Currency)
	return GLBalance,str(AsOfDate).replace('00','12')

def getConsolKeyBalObj():
	try:

		return MKT_CONSOL_BALANCE.query.all()

	except:
		raise

@app.route("/Morakot/GLBalance/Detail/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getGLDetail():
	try:

		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/GLBalance/", "Search")

		if getCheck != True:

			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		ID 			= 	request.args.get('ID') if 'ID' in request.args else ""
		Branch 		=	request.args.get('Branch') if 'Branch' in request.args else ""
		Year    	= 	request.args.get('Year') if 'Year' in request.args else ""
		Month   	= 	request.args.get('Month') if 'Month' in request.args else ""
		BaseCurrency= 	mktsetting.getAccSetting().BaseCurrency

		GLBalance 	= 	getGLConsolidate(Branch,ID,Year=Year, Month=Month)[0]

		if not GLBalance.all():
			flash(msg_warning + "GL not found.")
		else:
			GLBalance = GLBalance.first()
		return render_template("gl/gldetail.html",
								GLBalance 	=	GLBalance,
								ID 			=	ID,
								getTextMsg 	= 	mktmessage.getTextMsg,
								toMoney 		= 	mktmoney.toMoney,
								getCurrencyObj=	mktmoney.getCurrencyObj,
								VLOOKUP 		= 	mktreport.VLOOKUP,
								str 			= 	str,
								float 		=	float,
								BaseCurrency =	BaseCurrency,
								Branch 		= 	Branch)

	except:
		raise

@app.route("/Morakot/TrialBalance", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getTrialBalance():
	try:

		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/TrialBalance/", "Search")

		if getCheck != True:

			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		AccessBranch 		= 	mktuser.getAccessBranch()
		BankDate 			= 	mktdate.getBankDate()
		CompanyObj 			= 	mkttool.getCompany()
		BankName 			= 	""
		BaseCurrency 		= 	mktsetting.getAccSetting().BaseCurrency
		BaseCurrencyObj 	=	mktmoney.getCurrencyObj(BaseCurrency)
		HiddenGLLine 		=	mktsetting.getAppSetting('TBHiddenGLLine')
		AccSetting      	=   mktsetting.getAccSetting()
		YearEnd         	=   AccSetting.YEAR_END.strip()
		MonthOfYearEnd  	=   mkttool.getMonth(YearEnd)

		if HiddenGLLine:
			HiddenGLLine	=	HiddenGLLine.split()

		if CompanyObj:
			BankName = CompanyObj.CompanyName

		Branch 				= 	request.args.get('Branch') if 'Branch' in request.args else mktuser.getCurrentBranch()

		Audit   			=   request.args.get("Audit") if 'Audit' in request.args else "1"
		Period 				=	request.args.get('Period') if 'Period' in request.args else "1"
		HideMainGL 			=	request.args.get('HideMainGL') if 'HideMainGL' in request.args else "N"
		HideZeroBalance 	=	request.args.get("HideZeroBalance") if 'HideZeroBalance' in request.args else "Y"
		Rounding 			= 	request.args.get("Rounding") if 'Rounding' in request.args else "Y"
		ShowPrintBy 		=   request.args.get("ShowPrintBy") if 'ShowPrintBy' in request.args else "No"

		Year    			= 	request.args.get('Year') if 'Year' in request.args else ""
		Month   			= 	request.args.get('Month') if 'Month' in request.args else ""
		AuditedStatus   	=   mkttool.getAudited(Year, Month)['Audit']
		
		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).\
						group_by(MKT_GL_BALANCE_BACKUP.GLYear)

		MDic	=	{	"00":"31","01":"31","02":"28","03":"31","04":"30","05":"31","06":"30",
						"07":"31","08":"31","09":"30","10":"31","11":"30","12":"31"}
		
		PrevOption 	=	[Year,Month,Period]
		if Period == "2":
			if Year and Month:
				Month = int(Month)-1
				
			else:
				if Year:
					Month 	=	"00"
				else:
					Year 	=	str(BankDate.year)
					Month 	=	BankDate.month-1

			if Month == 0:
				Month 	= 	"12"
				Year 	=	str(int(Year)-1)

			Month 	=	str(Month).zfill(2)
			Period 	=	"1"

		if Year and len(Year) == 4 and Year.isdigit():
			GroupMonth 	=	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth, MKT_GL_BALANCE_BACKUP.GLDay).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth, MKT_GL_BALANCE_BACKUP.GLDay).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Condition 		= 	[]
		GLBalanceTable 	= 	MKT_GL_BALANCE

		if Year and Month:
			MonthObj		=	GroupMonth.filter(MKT_GL_BALANCE_BACKUP.GLMonth==Month).first()
			GLDay			=	MonthObj.GLDay if MonthObj else MDic[Month]
			BankDate		=	Year+'-'+Month+'-'+GLDay
			GLBalanceTable	=	MKT_GL_BALANCE_BACKUP

		AsOf =	str(BankDate).replace('00','12')
		if Period == '2':
			AsOf 	=	mktdate.getLastDayPrevMonth(datetime.strptime(str(BankDate), '%Y-%m-%d').date())
		elif Period == '3':
			StrDate =	str(BankDate).split('-')
			AsOf 	=	"%s-12-31" %(int(StrDate[0]) - 1)

		if Year and Month:
			GLBalanceTable	=	GLBalanceTable.query.filter(GLBalanceTable.GLYear==Year).\
								filter(GLBalanceTable.Audit==Audit).\
								filter(GLBalanceTable.GLMonth==Month).subquery()
		else:
			GLBalanceTable 	=	GLBalanceTable.query.subquery()

		Verified 		=	request.args.get('Verified') if 'Verified' in request.args else ''
		VerifiedGLMapping   =  {}
		TrialBalance 	= 	db.session.query(
								MKT_GL_MAPPING.ID.label('ID'),
								MKT_GL_MAPPING.SubGL,
								GLBalanceTable.c.ID.label('GLID'),
								func.sum(GLBalanceTable.c.LCYPrevMonthBal).label('PrevMonthBal'),
								func.sum(GLBalanceTable.c.LCYCurrentPrevMonthBal).label('CurrentPrevMonthBal'),
								func.sum(GLBalanceTable.c.LCYCurrentMonthBal).label('CurrentMonthBal'),
								func.sum(GLBalanceTable.c.LCYPrevYearBal).label('PrevYearBal'),
								func.sum(GLBalanceTable.c.LCYCurrentPrevYearBal).label('CurrentPrevYearBal'),
								func.sum(GLBalanceTable.c.LCYBalance).label('Balance'),
								func.sum(GLBalanceTable.c.LCYYTDBal).label('YTDBal'),
								MKT_GL_MAPPING.Description,
								MKT_GL_MAPPING.Currency,
								MKT_GL_MAPPING.BalanceType
							).\
							outerjoin(
								GLBalanceTable,
								GLBalanceTable.c.ID == MKT_GL_MAPPING.ID
							)
		'''
			SELECT * FROM "MKT_GL_MAPPING" LEFT JOIN "MKT_GL_BALANCE" ON "MKT_GL_BALANCE"."ID" ="MKT_GL_MAPPING"."ID"
			WHERE "MKT_GL_MAPPING"."Branch"='HO' and ("MKT_GL_BALANCE"."Branch"='BTB' or "MKT_GL_BALANCE"."Branch" is NULL)
		'''

		if HideMainGL == 'Y':
			TrialBalance 	=	TrialBalance.\
								filter(MKT_GL_MAPPING.SubGL == '')

		if HideZeroBalance == 'Y':
			TrialBalance 	=	TrialBalance.\
								filter(or_( 
											GLBalanceTable.c.LCYYTDBal != 0,
											GLBalanceTable.c.LCYBalance != 0,
											GLBalanceTable.c.LCYPrevYearBal != 0,
											GLBalanceTable.c.LCYPrevMonthBal != 0,
											GLBalanceTable.c.LCYCurrentMonthBal != 0,
											GLBalanceTable.c.LCYCurrentPrevYearBal != 0,
											GLBalanceTable.c.LCYCurrentPrevMonthBal != 0
											))
		
		checkVerified 		=	""
		if Branch.upper() == "ALL":
			BranchName 	= "ALL"
			Branch 		= Branch.upper()
			TrialBalance 	=	TrialBalance.\
								order_by(MKT_GL_MAPPING.ID.asc())
			
		else:
			BranchList 		=	Branch.split()
			TrialBalance 	=	TrialBalance.\
								filter(MKT_GL_MAPPING.Branch == "HO").\
								filter(or_( GLBalanceTable.c.Branch.in_(BranchList), GLBalanceTable.c.Branch == None)).\
								order_by(MKT_GL_MAPPING.ID.asc())

			BranchName 	= ""
			AccBranch 	= mktuser.getMultiBranch(Branch)
			if AccBranch:
				AccBranchID = ""
				for item in AccBranch:
					BranchName += item.Description + ", "
					AccBranchID += item.ID + " "

				BranchList 		=	Branch.split()
				BranchNotFound 	=	""
				for item in BranchList:
					if item.upper() not in AccBranchID:
						BranchNotFound += item + ", "

				BranchNotFound = BranchNotFound[:-2]
				if BranchNotFound:
					flash(msg_warning + "%s branches is not found." %BranchNotFound)
					return render_template("gl/TrialBalance.html", getTextMsg = mktmessage.getTextMsg)

				BranchName = BranchName[:-2]

			else:
				flash(msg_warning + " Branch not found.")
				return render_template("gl/TrialBalance.html", getTextMsg = mktmessage.getTextMsg)

		
		CheckBranch  = 	mktuser.checkAccessBrach(Branch)
		if not CheckBranch["Check"]:
			BackLink = request.referrer
			flash(msg_warning + " You can't access this %s branch." %CheckBranch["Branch"])
			return render_template('changebranch.html', BackLink=BackLink)
		
		
		TrialBalance = 	TrialBalance.\
						group_by(
							GLBalanceTable.c.ID,
							MKT_GL_MAPPING.SubGL,
							MKT_GL_MAPPING.ID,
							MKT_GL_MAPPING.Description,
							MKT_GL_MAPPING.Currency,
							MKT_GL_MAPPING.BalanceType
						).all()
		
		if Verified and Verified.upper() == "YES":
			VerifiedGLMapping 	= mktgl.getVerifiedGL()

		return render_template("gl/TrialBalance.html",
								ShowPrintBy     = ShowPrintBy,
								PrintByAndDate  = mktreport.getPrintByAndPrintDate,
								formatBalance	= formatBalance,
								toMoney 		= mktmoney.toMoney,
								getCurrencyObj 	= mktmoney.getCurrencyObj,
								BaseCurrencyObj = BaseCurrencyObj,
								float 			= float,
								str 			= str,
								int 			= int,
								Period 			= Period,
								HideZeroBalance = HideZeroBalance,
								HideMainGL 		= HideMainGL,
								Branch 			= Branch,
								BankName 		= BankName,
								AsOf 			= AsOf,
								TrialBalance 	= TrialBalance,
								BranchName 		= BranchName,
								Verified 		= Verified,
								AccessBranch 	= AccessBranch,
								getTextMsg 		= mktmessage.getTextMsg,
								BaseCurrency 	= BaseCurrency,
								HiddenGLLine 	= HiddenGLLine,
								Year 			= Year,
								Month 			= Month,
								GroupYear 		= GroupYear,
								GroupMonth 		= GroupMonth,
								VerifiedGLMapping=VerifiedGLMapping,
								AuditedStatus  = AuditedStatus,
								setFloat 		= setFloat,
								setDecimal 		= setDecimal,
								Audit 			= Audit,
								Rounding 		= Rounding,
								PrevOption 		= PrevOption
							)

	except:
		raise

def formatBalance(Number,getCurrencyObj,Rounding='Y'):
	if Rounding == "Y":
		Number = setFloat(Number)
		Number = mktmoney.toMoney(Number,getCurrencyObj)
		return Number

	elif Number == None or float(Number)==0: 
		Number=0
	
	Number = mktmoney.formatNumber(Number,1,9)
	return Number

def setFloat(Number):
	try:
		return float(Number)
	except Exception, e:
		return float(0)

def setDecimal(Number):
	try:
		return Decimal(Number)
	except Exception, e:
		return 0

@app.route("/Morakot/TrialBalanceII", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getTrialBalanceII():
	try:

		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/TrialBalance/", "Search")

		if getCheck != True:

			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		AccessBranch 		= 	mktuser.getAccessBranch()
		BankDate 			= 	mktdate.getBankDate()
		CompanyObj 			= 	mkttool.getCompany()
		BankName 			= 	""
		BaseCurrency 		= 	mktsetting.getAccSetting().BaseCurrency
		BaseCurrencyObj 	=	mktmoney.getCurrencyObj(BaseCurrency)
		HiddenGLLine 		=	mktsetting.getAppSetting('TBHiddenGLLine')
		AccSetting      	=   mktsetting.getAccSetting()
		YearEnd         	=   AccSetting.YEAR_END.strip()
		MonthEnd         	=   AccSetting.MONTH_END.strip()
		MonthOfYearEnd  	=   mkttool.getMonth(YearEnd)
		CurrencyObj 		= 	MKT_CURRENCY.query
		if HiddenGLLine:
			HiddenGLLine	=	HiddenGLLine.split()

		if CompanyObj:
			BankName = CompanyObj.CompanyName

		Branch 				= 	request.args.get('Branch') if 'Branch' in request.args else mktuser.getCurrentBranch()

		Audit   			=   request.args.get("Audit") if 'Audit' in request.args else "1"
		Period 				=	request.args.get('Period') if 'Period' in request.args else "1"
		HideMainGL 			=	request.args.get('HideMainGL') if 'HideMainGL' in request.args else "N"
		HideZeroBalance 	=	request.args.get("HideZeroBalance") if 'HideZeroBalance' in request.args else "Y"
		Rounding 			= 	request.args.get("Rounding") if 'Rounding' in request.args else "Y"
		ShowPrintBy 		=   request.args.get("ShowPrintBy") if 'ShowPrintBy' in request.args else "No"
		Currency 			= 	request.args.get("Currency") if 'Currency' in request.args else "ALL"
		Year    			= 	request.args.get('Year') if 'Year' in request.args else ""
		Month   			= 	request.args.get('Month') if 'Month' in request.args else ""
		AuditedStatus   	=   mkttool.getAudited(Year, Month)['Audit']

		GroupMonth 	= 	None
		GroupYear  	= 	db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).\
						group_by(MKT_GL_BALANCE_BACKUP.GLYear)

		MDic	=	{	"00":"31","01":"31","02":"28","03":"31","04":"30","05":"31","06":"30",
						"07":"31","08":"31","09":"30","10":"31","11":"30","12":"31"}
		PrevOption 	=	[Year,Month,Period]
		if Period == "2":
			if Year and Month:
				Month = int(Month)-1
				
			else:
				if Year:
					Month 	=	"00"
				else:
					Year 	=	str(BankDate.year)
					Month 	=	BankDate.month-1

			if Month == 0:
				Month 	= 	"12"
				Year 	=	str(int(Year)-1)

			Month 	=	str(Month).zfill(2)
			Period 	=	"1"

		if Year and len(Year) == 4 and Year.isdigit():
			GroupMonth 	=	db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth, MKT_GL_BALANCE_BACKUP.GLDay).\
							group_by(MKT_GL_BALANCE_BACKUP.GLMonth, MKT_GL_BALANCE_BACKUP.GLDay).\
							filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

		Condition 		= 	[]
		GLBalanceTable 	= 	MKT_GL_BALANCE

		if Year and Month:
			MonthObj  		=	GroupMonth.filter(MKT_GL_BALANCE_BACKUP.GLMonth==Month).first()
			GLDay			=	MonthObj.GLDay if MonthObj else MDic[Month]
			BankDate		=	Year+'-'+Month+'-'+GLDay
			# BankDate 		= 	Year+'-'+Month+'-'+MonthObj.GLDay
			GLBalanceTable 	= 	MKT_GL_BALANCE_BACKUP


		MonthDict 			=	{	'JAN': 1, 'FEB': 2, 'MAR': 3, 'APR': 4, 'MAY': 5, 'JUN': 6, 
									'JUL': 7, 'AUG': 8, 'SEP': 9, 'OCT': 10, 'NOV': 11, 'DEC': 12}
		ToDate =	str(BankDate)
		FromDate =	'%s-01'%ToDate[:7]
		if Period == '2':#current previous month
			ToDate 	=	mktdate.getLastDayPrevMonth(datetime.strptime(str(BankDate), '%Y-%m-%d').date())
			FromDate =	'%s-01'%str(ToDate)[:7]

		elif Period == '3':#current previous year
			StrDate				=	str(BankDate).split('-')
			MonthOfEndYear		=	MonthDict[YearEnd]
			LastDayOfMonth		=	calendar.monthrange(int(StrDate[0]) - 1, MonthOfEndYear)[1] if MonthEnd == 'END' else MonthEnd
			ToDate		=	"%s-%s-%s" %(int(StrDate[0]) - 1,str(MonthDict[YearEnd]).zfill(2), LastDayOfMonth)
			FromDate	=	str(datetime.strptime(str(ToDate), '%Y-%m-%d').date() + mktdate.timedelta(days=1))
			FromDate 	=	FromDate.replace(FromDate[:4], str(int(FromDate[:4])-1))

		elif Period == '4':#current year
			ToDate  	= 	BankDate
			FromDate 	= 	'%s-01-01'%str(BankDate)[:4]

		if Year and Month:
			GLBalanceTable	=	GLBalanceTable.query.filter(GLBalanceTable.GLYear==Year).\
								filter(GLBalanceTable.Audit==Audit).\
								filter(GLBalanceTable.GLMonth==Month).subquery()
		else:
			GLBalanceTable 	=	GLBalanceTable.query.subquery()

		Verified 		=	request.args.get('Verified') if 'Verified' in request.args else ''
		VerifiedGLMapping   =  {}
		LCY 	= "LCY" if Currency == 'ALL' else ""
		TrialBalance 	= 	db.session.query(
								MKT_GL_MAPPING.ID.label('ID'),
								MKT_GL_MAPPING.SubGL,
								GLBalanceTable.c.ID.label('GLID'),
								func.sum(getattr(GLBalanceTable.c,"%sPrevMonthBal"%LCY)).label('PrevMonthBal'),
								func.sum(getattr(GLBalanceTable.c,"%sCurrentPrevMonthBal"%LCY)).label('CurrentPrevMonthBal'),
								func.sum(getattr(GLBalanceTable.c,"%sCurrentMonthBal"%LCY)).label('CurrentMonthBal'),
								func.sum(getattr(GLBalanceTable.c,"%sPrevYearBal"%LCY)).label('PrevYearBal'),
								func.sum(getattr(GLBalanceTable.c,"%sCurrentPrevYearBal"%LCY)).label('CurrentPrevYearBal'),
								func.sum(getattr(GLBalanceTable.c,"%sBalance"%LCY)).label('Balance'),
								func.sum(getattr(GLBalanceTable.c,"%sYTDBal"%LCY)).label('YTDBal'),
								MKT_GL_MAPPING.Description,
								MKT_GL_MAPPING.Currency,
								MKT_GL_MAPPING.BalanceType
							).\
							outerjoin(
								GLBalanceTable,
								GLBalanceTable.c.ID == MKT_GL_MAPPING.ID
							)
		'''
			SELECT * FROM "MKT_GL_MAPPING" LEFT JOIN "MKT_GL_BALANCE" ON "MKT_GL_BALANCE"."ID" ="MKT_GL_MAPPING"."ID"
			WHERE "MKT_GL_MAPPING"."Branch"='HO' and ("MKT_GL_BALANCE"."Branch"='BTB' or "MKT_GL_BALANCE"."Branch" is NULL)
		'''

		'''Get P&L GL ID for checking TB current year because begining P&L account should be zero'''
		PLGL 	= 	[]
		MainGL 		= 	[]
		BSCatType 	=	AccSetting.IncCatType.split()+AccSetting.ExpCatType.split()
		IntSummaryGL=	getIncomeSummaryGL(AccSetting.IntSummaryCat)

		PLGLObj 	= 	db.session.query(
							MKT_CATEGORY.ID,
							MKT_GL_MAPPING_DE.ID.label('GLID')
						).outerjoin(MKT_GL_MAPPING_DE, MKT_CATEGORY.ID == MKT_GL_MAPPING_DE.GLCategory).\
						filter(MKT_CATEGORY.CategoryType.in_(BSCatType)).all()

		for g in PLGLObj:
			PLGL.append(g.GLID)
			MainGLObj = MKT_GL_MAPPING.query.filter(MKT_GL_MAPPING.SubGL.like('%'+str(g.GLID)+'%')).first()
			if MainGLObj and MainGLObj.ID not in MainGL:
				MainGL.append(MainGLObj.ID)

		PLGL 	=	list(set(PLGL+MainGL+IntSummaryGL))

		if HideMainGL == 'Y':
			TrialBalance 	=	TrialBalance.\
								filter(MKT_GL_MAPPING.SubGL == '')

		if HideZeroBalance == 'Y':
			TrialBalance 	=	TrialBalance.\
								filter(or_( 
											getattr(GLBalanceTable.c,"%sYTDBal"%LCY)!= 0,
											getattr(GLBalanceTable.c,"%sBalance"%LCY)!= 0,
											getattr(GLBalanceTable.c,"%sPrevYearBal"%LCY)!= 0,
											getattr(GLBalanceTable.c,"%sPrevMonthBal"%LCY)!= 0,
											getattr(GLBalanceTable.c,"%sCurrentMonthBal"%LCY)!= 0,
											getattr(GLBalanceTable.c,"%sCurrentPrevYearBal"%LCY)!= 0,
											getattr(GLBalanceTable.c,"%sCurrentPrevMonthBal"%LCY)!= 0
											))
		if Currency:
			CurrencyList 	= 	Currency.split()
			TrialBalance	= 	TrialBalance if 'ALL' in CurrencyList else TrialBalance.\
							 				filter(GLBalanceTable.c.Currency.in_(CurrencyList))
		checkVerified 		=	""
		if Branch.upper() == "ALL":
			BranchName 	= "ALL"
			Branch 		= Branch.upper()
			TrialBalance 	=	TrialBalance.\
								order_by(MKT_GL_MAPPING.ID.asc())
			
		else:
			BranchList 		=	Branch.split()
			TrialBalance 	=	TrialBalance.\
								filter(MKT_GL_MAPPING.Branch == "HO").\
								filter(or_( GLBalanceTable.c.Branch.in_(BranchList), GLBalanceTable.c.Branch == None)).\
								order_by(MKT_GL_MAPPING.ID.asc())

			BranchName 	= ""
			AccBranch 	= mktuser.getMultiBranch(Branch)
			if AccBranch:
				AccBranchID = ""
				for item in AccBranch:
					BranchName += item.Description + ", "
					AccBranchID += item.ID + " "

				BranchList 		=	Branch.split()
				BranchNotFound 	=	""
				for item in BranchList:
					if item.upper() not in AccBranchID:
						BranchNotFound += item + ", "

				BranchNotFound = BranchNotFound[:-2]
				if BranchNotFound:
					flash(msg_warning + "%s branches is not found." %BranchNotFound)
					return render_template("gl/TrialBalance.html", getTextMsg = mktmessage.getTextMsg)

				BranchName = BranchName[:-2]

			else:
				flash(msg_warning + " Branch not found.")
				return render_template("gl/TrialBalance.html", getTextMsg = mktmessage.getTextMsg)

		
		CheckBranch  = 	mktuser.checkAccessBrach(Branch)
		if not CheckBranch["Check"]:
			BackLink = request.referrer
			flash(msg_warning + " You can't access this %s branch." %CheckBranch["Branch"])
			return render_template('changebranch.html', BackLink=BackLink)
		
		
		TrialBalance = 	TrialBalance.\
						group_by(
							GLBalanceTable.c.ID,
							MKT_GL_MAPPING.SubGL,
							MKT_GL_MAPPING.ID,
							MKT_GL_MAPPING.Description,
							MKT_GL_MAPPING.Currency,
							MKT_GL_MAPPING.BalanceType
						).all()
		
		if Verified and Verified.upper() == "YES":
			VerifiedGLMapping 	= mktgl.getVerifiedGL()

				
		return render_template("gl/TrialBalanceII.html",
								ShowPrintBy     = ShowPrintBy,
								PrintByAndDate  = mktreport.getPrintByAndPrintDate,
								formatBalance	= formatBalance,
								toMoney 		= mktmoney.toMoney,
								getCurrencyObj 	= mktmoney.getCurrencyObj,
								BaseCurrencyObj = BaseCurrencyObj,
								float 			= float,
								str 			= str,
								int 			= int,
								Period 			= Period,
								PLGL 			= PLGL,
								HideZeroBalance = HideZeroBalance,
								HideMainGL 		= HideMainGL,
								Branch 			= Branch,
								BankName 		= BankName,
								# AsOf 			= AsOf,
								TrialBalance 	= TrialBalance,
								BranchName 		= BranchName,
								Verified 		= Verified,
								AccessBranch 	= AccessBranch,
								getTextMsg 		= mktmessage.getTextMsg,
								BaseCurrency 	= BaseCurrency,
								HiddenGLLine 	= HiddenGLLine,
								Year 			= Year,
								Month 			= Month,
								GroupYear 		= GroupYear,
								GroupMonth 		= GroupMonth,
								FromDate 		= FromDate,
								ToDate 			= ToDate,
								VerifiedGLMapping=VerifiedGLMapping,
								AuditedStatus  = AuditedStatus,
								setFloat 		= setFloat,
								setDecimal 		= setDecimal,
								Audit 			= Audit,
								Rounding 		= Rounding,
								PrevOption 		= PrevOption,
								Currency 		= Currency,
								CurrencyObj 	= CurrencyObj
							)

	except:
		raise

def getIncomeSummaryGL(Category):
	try:
		GLList 		=	[]
		GLDEObj		= 	db.session.query(MKT_GL_MAPPING_DE.ID).\
						filter(MKT_GL_MAPPING_DE.GLCategory==Category).all()
			
		for g in GLDEObj:
			GLList.append(g.ID)
			GLObj 	=	db.session.query(MKT_GL_MAPPING.ID,MKT_GL_MAPPING.SubGL).\
						filter(MKT_GL_MAPPING.SubGL.like('%'+g.ID+'%')).first()
		
			GLList.append(GLObj.ID)
		
		return GLList
		
	except Exception as e:
		raise