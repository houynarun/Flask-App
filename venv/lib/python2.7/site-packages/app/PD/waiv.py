from app.mktcore.imports 	import *
from flask 					import request, url_for, render_template,flash,redirect,session, g
from .. 					import app, db
from app.mktcore.session 	import *
from .forms 				import *
from sqlalchemy 			import *
from decimal 				import *

from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.PD.models 					import *
from app.Account.models 			import MKT_ACCOUNT
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE

import app.tools.mktmoney 		as mktmoney
import app.tools.mktdate 		as mktdate
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktparam 		as mktParam
import app.tools.mktsetting 	as mktsetting
import app.tools.mktaudit 		as mktaudit
import app.tools.mktloan 		as mktloan
import app.tools.mktreport		as mktreport
import app.tools.mktpdcollection as mktpdcollection

@app.route("/Morakot/PenaltyWaive/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPDWaiv():
	try:

		#call checkAccess
		getCheck = checkAccess ("/Morakot/PenaltyWaive/","Search")

		if getCheck:

			ID 		= request.args.get('ID').strip() if 'ID' in request.args else ""
			ListPD 	= ""
			PD 		= ""
			PDID 	= ""
			Loan 	= ""

			if ID:

				PDID	= 	"PD" + ID
				ListPD 	=	MKT_PD_DATE.query.\
							filter(MKT_PD_DATE.ID == PDID).\
							filter(MKT_PD_DATE.OutAmount > 0).\
							order_by(MKT_PD_DATE.DueDate.asc()).\
							all()

				PD 		=	MKT_PAST_DUE.query.get(PDID)
				Loan 	=	MKT_LOAN_CONTRACT.query.get(ID)

				if not ListPD:
					flash(msg_warning + "Loan contract %s have no area record." %ID)

			return render_template(
						'pd/waiv.html',
						ID 				= ID,
						PD 				= PD,
						PDID 			= PDID,
						ListPD 			= ListPD,
						toMoney 		= mktmoney.toMoney,
						getCurrencyObj 	= mktmoney.getCurrencyObj,
						float 			= float,
						str 			= str,
						Loan 			= Loan,
						VLOOKUP 		= mktreport.VLOOKUP,
						formatNumber 	= mktmoney.formatNumber
					)

		else:
			#Access right 
			flash (getCheck)

	except:
		raise

@app.route("/Morakot/PenaltyWaive/Set/", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def setPDWaiv():
	try:
		# Penalty Waive
		#call checkAccess
		getCheck = checkAccess ("/Morakot/PenaltyWaive/","Edit")

		if getCheck:
		
			ID = request.args.get('ID').strip() if 'ID' in request.args else ""
			LC = request.args.get('Loan').strip() if 'Loan' in request.args else ""
			DueDate = request.args.get('DueDate').strip() if 'DueDate' in request.args else ""

			if ID:

				PD 	=	MKT_PD_DATE.query.\
						filter(MKT_PD_DATE.PDID == ID).\
						filter(MKT_PD_DATE.DueDate == DueDate).\
						first()

				if PD:
					
					# Update MKT_PD_DATE
					Penalty 		= float(PD.OutPenAmount) if PD.OutPenAmount else float(0)
					PD.PenaltyDue 	= float(PD.PenaltyDue) - float(PD.OutPenAmount)
					PD.OutPenAmount = 0
					PD.TotODAmount 	= float(PD.TotODAmount) - float(Penalty)
					PD.OutAmount 	= float(PD.OutAmount) - float(Penalty)


					# Update Auditrail
					Audit 			= mktaudit.getAuditrail()
					PD.Status		= Audit['Status']
					PD.Curr 		= Audit['Curr']
					PD.Inputter		= Audit['Inputter']
					PD.Createdon 	= Audit['Createdon']
					PD.Authorizer 	= Audit['Authorizer']
					PD.Authorizeon	= Audit['Authorizeon']
					PD.Branch 		= Audit['Branch']

					db.session.add(PD)

					# Check if fully paid remove PD Date and update Schedule record
					OutAmount 			= float(PD.OutAmount)
					if OutAmount <= 0 :
						'''
							Notes By Kiry : If want move PD when fully paid to HIST please undo command below
						'''
						# # Remove PD Date
						# RemoveID = PD.PDID
						# db.session.query(MKT_PD_DATE.ID).filter(MKT_PD_DATE.PDID == RemoveID).delete()

						# Update Schedule
						CollectDate = 	PD.DueDate
						RepStatus 	= 	"4"
						mktloan.updateScheduleStatus(LC,CollectDate,RepStatus)

					ODObj 	=	MKT_PAST_DUE.query.get("PD" + LC)
					if ODObj:
						# print "Penalty %s" %Penalty
						# print ""
						ODObj.TotODAmount 		= 	float(ODObj.TotODAmount) - float(Penalty)
						ODObj.TotPenaltyDue 	=	float(ODObj.TotPenaltyDue) - float(Penalty)
						# Update Auditrail
						Audit 				= mktaudit.getAuditrail()
						ODObj.Status		= Audit['Status']
						ODObj.Curr 			= Audit['Curr']
						ODObj.Inputter		= Audit['Inputter']
						ODObj.Createdon 	= Audit['Createdon']
						ODObj.Authorizer 	= Audit['Authorizer']
						ODObj.Authorizeon	= Audit['Authorizeon']
						ODObj.Branch 		= Audit['Branch']
						db.session.add(ODObj)

					# print 'Done'

					db.session.commit()

					flash("Penalty %s was successfully removed." %ID)

				else:
					flash(msg_warning + "Past due not found.")

			return redirect(url_for("getPDWaiv", ID=LC))
		
		else:
			#Access right 
			flash (getCheck)

	except Exception, e:
		flash(e)
		raise

@app.route("/Morakot/PenaltyWaive/Prevent/", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def setPrevent():
	try:

		#call checkAccess
		getCheck = checkAccess ("/Morakot/PenaltyWaive/","Edit")

		if getCheck:
		
			ID = request.args.get("ID").strip() if 'ID' in request.args else ""

			if ID:

				LC 	=	MKT_LOAN_CONTRACT.query.get(ID)

				if LC:

					Penalty = LC.Penalty

					if str(Penalty).upper() == 'N':
						LC.Penalty = 'Y'

						db.session.add(LC)
						db.session.commit()

						flash("Loan contract %s was enabled penalty successfully." %ID)
					else:
						LC.Penalty = 'N'

						db.session.add(LC)
						db.session.commit()

						flash("Loan contract %s was disabled penalty successfully." %ID)

				else:
					flash(msg_warning + "Loan contract %s not found." %ID)

			return redirect(url_for("getPDWaiv", ID=ID))
		
		else:
			#Access right 
			flash (getCheck)

	except Exception, e:
		flash(e)
		raise

@app.route("/Morakot/Penalty/Collect/", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def updatePenaltyCollect():
	try:

		#call checkAccess
		getCheck = checkAccess ("/Morakot/PenaltyWaive/","Edit")

		if getCheck:
		
			ID 		= 	request.args.get("ID").strip() if 'ID' in request.args else ""
			Amount 	=	request.args.get("Amount") if "Amount" else "0"
			Amount 	=	Amount.replace(",", "")
			Amount 	=	Decimal(Amount)

			LC 	=	db.session.query(
						MKT_LOAN_CONTRACT.ID,
						MKT_LOAN_CONTRACT.Account,
						MKT_LOAN_CONTRACT.Currency,
						MKT_LOAN_CONTRACT.Branch,
						MKT_ACCOUNT.AvailableBal,
						MKT_ACCOUNT.AccCategory
					).\
					join(
						MKT_ACCOUNT,
						MKT_ACCOUNT.ID == MKT_LOAN_CONTRACT.Account
					).\
					filter(MKT_LOAN_CONTRACT.ID == ID).\
					first()

			if LC:
				Audit 		= mktaudit.getAuditrail()
				Inputter	= Audit['Inputter']
				Createdon 	= Audit['Createdon']
				Authorizer 	= Audit['Authorizer']
				Authorizeon	= Audit['Authorizeon']

				getPDParam 		=	mktParam.getPDParam()
				Setting 		= 	mktsetting.getAccSetting()
				AvailableBal 	=	LC.AvailableBal
				Account 		=	LC.Account
				Currency 		=	LC.Currency
				Branch 			=	LC.Branch
				AccCategory 	=	LC.AccCategory
				TranDate 		= 	str(mktdate.getBankDate())

				if Amount <= AvailableBal:

					PDID	= 	"PD" + ID

					PDDate 	=	MKT_PD_DATE.query.\
								filter(MKT_PD_DATE.ID == PDID).\
								filter(MKT_PD_DATE.OutAmount >0).\
								order_by(MKT_PD_DATE.NumDayDue.desc()).\
								all()
					
					if PDDate:

						for item in PDDate:
							PDDateID 		=	item.PDID
							CollectedAmt 	=	item.OutPenAmount
							CollectDate 	= 	item.DueDate

							if Amount > 0:
								CollectedAmt=	CollectedAmt if Amount >= CollectedAmt else Amount
								Amount 		=	Amount - CollectedAmt
								
								if CollectedAmt > 0:

									DrCr  		= 'Dr'
									Category 	= AccCategory
									if not Category:
										flash(msg_warning + "Account category not found.")

									Transaction = Setting.PenaltyTran
									GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
									DateTimeNow = mktdate.getDateTimeNow()
									Mode 		= ""

									if Transaction:
										# Debit Customer Account
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											Inputter,				# Inputter
											DateTimeNow, 			# Createdon
											Authorizer,				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											Account,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(CollectedAmt), 		# Amount
											"PD",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											PDID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode 					# Mode check to insert Journal for category
										)

										# Define new parameter for Credit Penalty Category
										DateTimeNow = mktdate.getDateTimeNow()
										DrCr 		= "Cr"
										Mode 		= "Direct"
										Category 	= getPDParam.ODPenaltyCat
										if not Category:
											flash(msg_warning + "Penalty income category not found.")

										GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
										# Credit Penalty Income Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											Inputter,				# Inputter
											DateTimeNow, 			# Createdon
											Authorizer,				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											"",						# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(CollectedAmt), 		# Amount
											"PD",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											PDID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode 					# Mode check to insert Journal for category
										)

										# Update MKT_PD_DATE
										item.OutPenAmount 	= item.OutPenAmount - CollectedAmt
										item.OutAmount 		= item.OutAmount - CollectedAmt
										db.session.add(item)

										# Check if fully paid remove PD Date and update Schedule record
										OutAmount 			= item.OutAmount
										if OutAmount <= 0 :
											'''
												Notes By Kiry : If want move PD when fully paid to HIST please undo command below
											'''
											# # Remove PD Date
											# RemoveID = item.PDID
											# db.session.query(MKT_PD_DATE.ID).filter(MKT_PD_DATE.PDID == RemoveID).delete()

											# Update Schedule
											
											RepStatus 	=	"4"
										else:
											RepStatus 	= 	"2"

										mktloan.updateScheduleStatus(ID,CollectDate,RepStatus,CollectedAmt)

										# Update MKT_PAST_DUE
										PDObj 				=	MKT_PAST_DUE.query.get(PDID)
										PDObj.TotODAmount 	= 	PDObj.TotODAmount 	- CollectedAmt
										PDObj.TotPenaltyDue =	PDObj.TotPenaltyDue - CollectedAmt
										db.session.add(PDObj)
										# Commit once loop transaction
										db.session.commit()
										flash("Penalty amount %s was successfully collected." %mktmoney.toMoney(float(CollectedAmt), mktmoney.getCurrencyObj(Currency)))

									else:
										flash(msg_warning + "Penalty collection transaction not found.")

					else:
						flash(msg_warning + "Past due %s not found for collection penalty."%PDID )

				else:
					flash(msg_warning + "Account#%s doesn't have sufficient fund. Current balance is KHR %s." %(Account, mktmoney.toMoney(float(AvailableBal), mktmoney.getCurrencyObj(Currency))))

			else:
				flash(msg_warning + "Loan contract %s not found." %ID)
		
		else:
			#Access right 
			flash (getCheck)

	except Exception, e:
		db.session.rollback()
		flash(msg_warning + "%s" %e)

	return redirect(url_for("getPDWaiv", ID=ID))

@app.route("/Morakot/Penalty/GetAmount/", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def GetAmount():
	#call checkAccess
	getCheck = checkAccess ("/Morakot/PenaltyWaive/","Search")
	if getCheck:
		Amount 		=	request.args.get("Amount") if "Amount" in request.args else 0
		Currency 	=	request.args.get("Currency") if "Currency" in request.args else ""
		Amount 		=	Amount.replace(",", "")
		try:
			Amount 		=	float(Amount)
		except Exception, e:
			return "%s" %e

		return mktmoney.toMoney(float(Amount), mktmoney.getCurrencyObj(Currency))
	return getCheck