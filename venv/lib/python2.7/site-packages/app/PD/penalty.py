from app.mktcore.wtfimports 	import *
from .models 					import *
from app.Account.models 		import *
from app.LoanContract.models 	import *
from app.Customer.models 		import *
from sqlalchemy					import *
from decimal 					import Decimal
from flask 						import flash
import app.tools.mktdate 		as mktdate
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktsetting 	as mktsetting
import app.tools.mktmessage 	as mktmessage
import app.tools.mktparam 		as mktparam
import app.tools.mktmoney 		as mktmoney
import app.tools.mktloan 		as mktloan
import app.tools.mktpdcollection   as mktpdcollection
import app.tools.mktautoid 		as mktautoid
import app.tools.mktaudit 			as mktaudit
import app.tools.user 					as mktuser
from app.PDParameter.models 		import MKT_PD_PARAM
from app.Tax.models 			import MKT_TAX

def setDefaultTranDate():
	return mktdate.getBankDate()

def setDefaultPDID():
	return request.args.get('PDID','')

def setDefaultLoanID():
	return request.args.get('LoanID','')

def setDefaultAmount():
	Amount 		= float(request.args.get('Amount',0))
	LoanID 		= setDefaultLoanID()
	TranDate 	= str(setDefaultTranDate())
	CollectGracePeriod 	= mktsetting.getAppSetting('CollectGracePeriod')
	if not CollectGracePeriod or CollectGracePeriod == 'No':
		PDObj 		= db.session.query(
										func.sum(MKT_PD_DATE.OutPenAmount).label('OutPenAmount')
									).\
									filter(MKT_PD_DATE.ID=='PD%s'%LoanID).\
									filter(MKT_PD_DATE.NextRunDate==TranDate).\
									filter(MKT_PD_DATE.ODStatus.in_(['PRE','GRA'])).\
									filter(MKT_PD_DATE.OutPenAmount>0).\
									group_by(MKT_PD_DATE.ID).all()
		if PDObj:
			if PDObj[0]:
				Amount -= float(PDObj[0].OutPenAmount)
				if Amount == 0:
					session.pop('_flashes', None)
					flash(msg_error+'The Amount in Grace period could not be waived/collected.')
	return Amount

def setDefaultDueDate():
	return request.args.get('DueDate','')

def setDefaultOperation():
	return request.args.get('Operation','')

def setDefaultCustomerName():
	CustomerName = ''
	LoanObj 	 = MKT_LOAN_CONTRACT.query.get(request.args.get('LoanID',''))
	if LoanObj:
		CustomerObj = MKT_CUSTOMER.query.get(LoanObj.ContractCustomerID) 
		if CustomerObj: CustomerName = '%s %s'%(CustomerObj.LastNameEn,CustomerObj.FirstNameEn) 
	return CustomerName

def setDefaultCurrency():
	Currency 	= ''
	LoanObj 	= MKT_LOAN_CONTRACT.query.get(request.args.get('LoanID',''))
	if LoanObj: Currency = LoanObj.Currency
	return Currency
def setDefaultInterestAmount():
	return request.args.get('InterestAmount','')

class FRM_PENALTY(exform):
	LoanID 			=	TextField(requiredlabel("Loan ID", "*"),[validators.Required()],default=setDefaultLoanID)
	CustomerName 	=	TextField("Customer Name",default=setDefaultCustomerName)
	Currency		=	TextField("Currency",default=setDefaultCurrency)
	PDID 			=	TextField("PDID",default=setDefaultPDID)
	DueDate 		= 	TextField("Due Date",default=setDefaultDueDate)
	TranDate 		= 	TextField(requiredlabel("Transaction Date", "*"),[validators.Required()],default=setDefaultTranDate)
	Operation 		=	SelectField(requiredlabel(getLanguage('Operation'),"*"),
						choices=[('C', 'Collect'),('W', 'Waive'),('WI','Waive Interest')],
						coerce=str,
						default=setDefaultOperation,
						validators=[validators.Required()])

	Amount 			= 	TextField(requiredlabel("Penalty Amount", "*"),[validators.Required()],default=setDefaultAmount)
	InterestAmount 	= 	TextField(requiredlabel("Interest Amount", "*"),[validators.Required()],default=setDefaultInterestAmount)
	Note 			=	TextAreaField(requiredlabel("Note", "*"),[validators.Required()])
	PDWaive			=	SelectField('PD Waive',
						choices=[('Y', 'Yes'),('N', 'No')],
						coerce=str,
						default="Y")

	def validate_TranDate(form, field):
		SystemDate 	=	str(mktdate.getBankDate())
		if SystemDate != field.data:
			raise ValidationError("Has to equal system date.")

	def validate_Amount(form, field):
		Amount 		= 	Decimal(field.data)
		Operation 	= 	request.form['Operation']
		PDID 		= 	request.form['PDID']
		LoanID 		= 	request.form['LoanID']

		if Operation in ["C","W"]:
			if Amount <= 0:
				raise ValidationError('Must be greater than 0')

			# Validate By App Setting "CollectGracePeriod"
			CollectGracePeriod 	= (mktsetting.getAppSetting('CollectGracePeriod')).split()
			if not CollectGracePeriod or CollectGracePeriod == 'No':
				CheckPD     =	checkPD(LoanID,PDID,Amount,Operation,request.form['TranDate'])
				if CheckPD[0]:
					raise ValidationError(CheckPD[1])

			if Operation == 'C':
				ContractObj = MKT_LOAN_CONTRACT.query.get(form.LoanID.data)
				AccountObj 	= MKT_ACCOUNT.query.get(ContractObj.Account)
				if AccountObj.AvailableBal < Amount:
					raise ValidationError("Account %s doesn't have sufficient fund. Current balance is %s."%(ContractObj.Account,mktmoney.formatNumber(float(AccountObj.AvailableBal),1,4)))

	def validate_InterestAmount(form,field):
		try:
			Amount 		= 	Decimal(field.data)
		except Exception as e:
			raise ValidationError('Must be in number format.')
		Operation 	= 	request.form['Operation']
		PDID 		= 	request.form['PDID']
		LoanID 		= 	request.form['LoanID']

		if Operation in ["WI"]:
			if Amount <= 0:
				raise ValidationError('Must be greater than 0')

			# Validate By App Setting "CollectGracePeriod"
			CollectGracePeriod 	= (mktsetting.getAppSetting('CollectGracePeriod')).split()
			if not CollectGracePeriod or CollectGracePeriod == 'No':
				CheckPD     =	checkInterestPD(LoanID,PDID,Amount,Operation,request.form['TranDate'])
				if CheckPD[0]:
					raise ValidationError(CheckPD[1])

	@staticmethod
	def setVisible():
		List = ['PDID','PDWaive']
		Operation 		= 	request.args.get('Operation')
		if not Operation:
			if request.method == "POST":
				Operation = request.form['Operation']
			if not Operation:
				ID 			= 	g.formID
				PDObj 		= 	MKT_PENALTY.query.get(ID)
				if not PDObj:
					PDObj = MKT_PENALTY_INAU.query.get(ID)
				if PDObj:
					Operation = PDObj.Operation

		if Operation in ["C","W"]:
			List.append("InterestAmount")

		if Operation in ["WI"]:
			List.append("Amount")

		return List

	@staticmethod
	def moneyField():
		return [["Amount","Currency"],["InterestAmount","Currency"]]

	@staticmethod
	def setDisable():
		return [('LoanID'),('PDID'),('DueDate'),('TranDate'),('Operation'),('Currency'),('CustomerName')]

	@staticmethod
	def listField():
		Fields = ["ID", "LoanID", "CustomerName", "Currency", "PDID","DueDate","TranDate","Operation","Amount","InterestAmount","Note"]
		return Fields, ["PDWaive*EQ*Y"]

	@staticmethod
	def beforeInsert():
		try:
			AuthLevel 	= g.getNAuthorize

			if AuthLevel == 0 :
				TranDate 	= 	request.form['TranDate']
				LoanID		= 	request.form['LoanID']
				Amount		= 	Decimal(request.form['Amount'])
				Note		= 	request.form['Note']
				PDID		= 	request.form['PDID']
				Operation	= 	request.form['Operation']
				InterestAmount = request.form['InterestAmount']
				Reference 	= 	request.form['ID']
				PDWaive 	= 	request.form['PDWaive']

				if Operation in ["C","W"]:
					return collectPenalty(LoanID=LoanID,Amount=Amount,TranDate=TranDate,Note=Note,PDID=PDID,Operation=Operation,Reference=Reference,PDWaive=PDWaive)

				if Operation in ["WI"]:
					return waiveInterest(LoanID=LoanID,Amount=InterestAmount,TranDate=TranDate,Note=Note,PDID=PDID,Operation=Operation,Reference=Reference,PDWaive=PDWaive)

			CurrentBranch = mktuser.getCurrentBranch()

			LoanID		= 	request.form['LoanID']

			LoanObj 	= 	MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID==LoanID).first()

			if LoanObj:
				Branch  = 	LoanObj.Branch

				if Branch != CurrentBranch:
					raise ValidationError('Please Switch Branch to %s Before Processing this Operation for %s'%(Branch,LoanID))

			return True
			
		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def beforeAuthorize():
		try:
			ID 		= 	g.formID
			PObj 	=	MKT_PENALTY_INAU.query.get(ID)
			if PObj:
				TranDate 		=	PObj.TranDate
				LoanID 			=	PObj.LoanID
				Amount 			=	PObj.Amount
				Note 			=	PObj.Note
				PDID 			=	PObj.PDID
				Operation		=	PObj.Operation
				InterestAmount 	= 	PObj.InterestAmount
				PDWaive 		=	PObj.PDWaive

				AuthLevel 	= g.getNAuthorize
				Audit = mktaudit.getAuditrail()
				Branch    	= Audit['Branch']
				Authorizer  = Audit['Authorizer']
				Authorizeon = Audit['Authorizeon']
				Status 	  	= Audit['Status']
				Curr 		= Audit['Curr']

				if AuthLevel == 1:
					Inputter    = PObj.Inputter
					Createdon   = PObj.Createdon
				else:
					Inputter    = Audit['Inputter']
					Createdon   = Audit['Createdon']

				if Operation in ["C","W"]:
					# Validate By App Setting "CollectGracePeriod"
					CollectGracePeriod 	= (mktsetting.getAppSetting('CollectGracePeriod')).split()
					if not CollectGracePeriod or CollectGracePeriod == 'No':
						CheckPD     =	checkPD(LoanID,PDID,Amount,Operation,TranDate)
						if CheckPD[0]:
							flash(msg_error + CheckPD[1])
							return False

					if Operation == 'C':
						ContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
						AccountObj 	= MKT_ACCOUNT.query.get(ContractObj.Account)
						if AccountObj.AvailableBal < Amount:
							flash(msg_error + "Account %s doesn't have sufficient fund. Current balance is %s."%(ContractObj.Account,mktmoney.formatNumber(float(AccountObj.AvailableBal),1,4)))
							return False

					return collectPenalty(
											LoanID=LoanID,
											Amount=Amount,
											TranDate=TranDate,
											Note=Note,
											PDID=PDID,
											Operation=Operation,
											Reference=ID,
											PDWaive=PDWaive,
											Branch=Branch,
											Authorizer=Authorizer,
											Authorizeon=Authorizeon,
											Status=Status,
											Curr=Curr,
											Inputter=Inputter,
											Createdon=Createdon)

				if Operation in ["WI"]:
					return waiveInterest(
											LoanID=LoanID,
											Amount=InterestAmount,
											TranDate=TranDate,
											Note=Note,
											PDID=PDID,
											Operation=Operation,
											Reference=ID,
											PDWaive=PDWaive,
											Branch=Branch,
											Authorizer=Authorizer,
											Authorizeon=Authorizeon,
											Status=Status,
											Curr=Curr,
											Inputter=Inputter,
											Createdon=Createdon)

			else:
				flash(msg_error+'Record %s not found.'%ID)
				db.session.rollback()
				db.session.close()
				return False

		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False
	
def collectPenalty(**kwargs):
	try:
		LoanID 			= kwargs.get("LoanID")
		Amount 			= Decimal(kwargs.get("Amount"))
		TranDate 		= kwargs.get("TranDate")
		Note			= kwargs.get("Note")
		PDID			= kwargs.get("PDID")
		Operation		= kwargs.get("Operation")
		Reference 		= kwargs.get("Reference")
		PDWaive 		= kwargs.get("PDWaive")
		# VAT customization
		VATAmt 			= 0
		TotalPDCol 		= Amount
		TaxCategory 	= ""

		Branch 			= kwargs.get("Branch")
		Authorizer 		= kwargs.get("Authorizer")
		Authorizeon 	= kwargs.get("Authorizeon")
		Status 			= kwargs.get("Status")
		Curr 			= kwargs.get("Curr")
		Inputter 		= kwargs.get("Inputter")
		Createdon 		= kwargs.get("Createdon")

		if Amount > 0:
			ContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
			Currency 	= ContractObj.Currency
			Account 	= ContractObj.Account
			Branch 		= ContractObj.Branch
			AccountObj 	= MKT_ACCOUNT.query.get(Account)
			Category 	= AccountObj.AccCategory
			ID 			= 'PD%s'%LoanID
			AccSetting 	= mktsetting.getAccSetting()
			Transaction = AccSetting.PenaltyTran
			DateTimeNow = mktdate.getDateTimeNow()
			PDParam 	= mktparam.getPDParam() # Get PD Paramater Setting

			TotalPDCol 	= 	Decimal(Amount)

			if Operation == 'C':
				# Define parameter for Debit Customer Account
				DrCr  		= 'Dr'
				if not Category:
					# Call method for error message
					error_msg = "Account category not found."
					mktmessage.setLogError(error_msg)

				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
				Mode 		= ""

				if Transaction:
					# Debit Customer Account
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						DateTimeNow, 			# Createdon
						"System",				# Authorizer
						DateTimeNow,			# Authorizeon
						"", 					# AEID
						Account,				# Account
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Decimal(Amount), 		# Amount
						"PD",					# Module
						Transaction, 			# Transaction
						TranDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode 					# Mode check to insert Journal for category
					)

					# Define new parameter for Credit Penalty Category
					DrCr 		= "Cr"
					Mode 		= "Direct"
					Category 	= PDParam.ODPenaltyCat
					if not Category:
						# Call method for error message
						error_msg = "Penalty income category not found."
						mktmessage.setLogError(error_msg)
						flash(error_msg)
						return False

					GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "PD", "", "", "", "", "", "", "", "", "")
					# Credit Penalty Category
					VATOnOff 	= mktsetting.getAppSetting('MEGA_VAT_NO_OFF')
					if VATOnOff == "Y":
						PDParamObj = MKT_PD_PARAM.query.get('SYSTEM')
						if PDParamObj:
							if PDParamObj.Tax !=None:
								TaxObj = MKT_TAX.query.get(PDParamObj.Tax)
								if TaxObj:
									TaxCategory = TaxObj.Category
									VATAmt 		= 	(Decimal(Amount) * Decimal(TaxObj.Rate))/110 
									VATAmt   	= 	mktmoney.toMoney(float(VATAmt), mktmoney.getCurrencyObj(Currency))
									VATAmt   	= 	float(VATAmt.replace(",",""))
									Amount 		= 	Decimal(Amount) - Decimal(VATAmt)
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						DateTimeNow, 			# Createdon
						"System",				# Authorizer
						DateTimeNow,			# Authorizeon
						"", 					# AEID
						Account,				# Account
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Decimal(Amount), 		# Amount
						"PD",					# Module
						Transaction, 			# Transaction
						TranDate, 				# TransactionDate
						ID, 					# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode 					# Mode check to insert Journal for category
					)
					
					# Post penalty collection with VAT if Yes in LC and Not None in PDParameter
					# Post VAT
					VATOnOff 	= mktsetting.getAppSetting('MEGA_VAT_NO_OFF')
					if VATOnOff == "Y":
						DrCr 		= 	"Cr"
						Mode 		= 	"Direct"
						Category 	= 	TaxCategory
						Amt 		= 	VATAmt
						Note 		=   "VAT on penalty"
						GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
						
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							Account,				# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							Decimal(Amt), 			# Amount
							"PD",					# Module
							Transaction, 			# Transaction
							TranDate, 				# TransactionDate
							"PD"+LoanID, 			# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode 					# Mode check to insert Journal for category
						)
					# End Posting
				else:
					error_msg = "Penalty collection transaction not found."
					mktmessage.setLogError(error_msg)
					flash(error_msg)
					return False

			if PDID:
				# Waive or collect penalty one by one.
				PDDateObj 	= MKT_PD_DATE.query.filter(MKT_PD_DATE.PDID==PDID).first()
				RepStatus,TotalCollection,ClearPenalty = mktpdcollection.subtractPDCollection(ID, PDID, PDDateObj.ODStatus, TotalPDCol, 0, 0, 0)
				TotalCollection = TotalCollection if Operation == 'C' else 0
				mktloan.updateScheduleStatus(LoanID,PDDateObj.DueDate,RepStatus,TotalCollection)
				
			else:
				# Waive or collect all penalty
				CollectedAmount = 0
				AutoIDList = []
				Index = 0

				PDDateObj 	= 	MKT_PD_DATE.query.\
								filter(MKT_PD_DATE.ID=='PD%s'%LoanID).\
								filter(MKT_PD_DATE.NextRunDate==TranDate).\
								order_by(MKT_PD_DATE.ODStatus.desc()).all()

				CuObj 			= MKT_CUSTOMER.query.get(ContractObj.ContractCustomerID)
				CustomerName 	= '%s %s' %(CuObj.LastNameEn, CuObj.FirstNameEn)

				for i in range(len(PDDateObj)):
					AutoIDList.append(mktautoid.getAutoID("FRM_PENALTY"))

				for p in PDDateObj:
					
					CollectedAmount = p.OutPenAmount if p.OutPenAmount <= TotalPDCol else TotalPDCol
					TotalPDCol -= CollectedAmount

					RepStatus,TotalCollection,ClearPenalty = mktpdcollection.subtractPDCollection(p.ID, p.PDID, p.ODStatus, CollectedAmount, 0, 0, 0)
					TotalCollection = TotalCollection if Operation == 'C' else 0
					mktloan.updateScheduleStatus(LoanID,p.DueDate,RepStatus,TotalCollection)
					CollectAmount 		= CollectedAmount if Operation != 'WI' else 0
					InterestDueAmount 	= p.InterestDue if Operation == 'WI' else 0
					AutoID 				= AutoIDList[Index]

					generatePenalty(
									AutoID=AutoID,
									LoanID=LoanID,
									CustomerName=CustomerName,
									Currency=Currency,
									PID=p.PDID,
									DueDate=p.DueDate,
									TranDate=TranDate,
									Operation=Operation,
									Note=Note,
									Reference=Reference,
									PDWaive=PDWaive,
									CollectAmount=CollectAmount,
									InterestDueAmount=InterestDueAmount,
									Branch=Branch,
									Status=Status,
									Curr=Curr,
									Inputter=Inputter,
									Createdon=Createdon,
									Authorizer=Authorizer,
									Authorizeon=Authorizeon)
					Index += 1

					if TotalPDCol <= 0:
						break
		return True

	except Exception as e:
		raise

def checkPD(LoanID,PDID,Amount,Operation,TranDate):
	try:
		Msg = 'Collected' if Operation in ['C'] else 'Waived'
		if PDID:
			PDObj  = MKT_PD_DATE.query.filter(MKT_PD_DATE.PDID==PDID).first()
			if PDObj:
				if PDObj.ODStatus in ['PRE','GRA']:
					return (True, "Penalty cannot collect in PRE and GRA period")

				if PDObj.OutPenAmount < Amount:
					return (True, "%s amount (%s) is more than penalty amount (%s)."%(Msg, Amount, PDObj.OutPenAmount))
			else:
				return (True, "PDID is not found.")

		else:
			PDObj  = db.session.query(
						MKT_PD_DATE.ID,
						func.sum(MKT_PD_DATE.OutPenAmount).label('PenAmount')
					).\
					filter(MKT_PD_DATE.ID=='PD%s'%LoanID).\
					filter(MKT_PD_DATE.NextRunDate==TranDate).\
					filter(MKT_PD_DATE.OutPenAmount>0).\
					group_by(MKT_PD_DATE.ID)

			if Operation == 'C':
				PDObj 	=	PDObj.filter(MKT_PD_DATE.ODStatus.in_(['PDO','NAB']))

			PDObj = PDObj.first()
			if PDObj:
				if PDObj.PenAmount < Amount:
					return (True, "%s amount (%s) is more than penalty amount (%s). Penalty GRE and PRE period cannot collect."%(Msg, Amount, PDObj.PenAmount))
			else:
				return (True, "Penalty record not found cannot waive/collect.")
		return (False,'')
	except Exception as e:
		raise

def checkInterestPD(LoanID,PDID,Amount,Operation,TranDate):
	try:
		Msg = 'Collected' if Operation not in ['WI'] else 'Waived'
		if PDID:
			PDObj  = MKT_PD_DATE.query.filter(MKT_PD_DATE.PDID==PDID).first()
			if PDObj:
				if PDObj.OutIntAmount < Amount:
					return (True, "%s amount (%s) is more than interest amount (%s)."%(Msg, Amount, PDObj.OutIntAmount))
			else:
				return (True, "PDID is not found.")

		else:
			PDObj  = db.session.query(
						MKT_PD_DATE.ID,
						func.sum(MKT_PD_DATE.OutIntAmount).label('PenAmount')
					).\
					filter(MKT_PD_DATE.ID=='PD%s'%LoanID).\
					filter(MKT_PD_DATE.NextRunDate==TranDate).\
					filter(MKT_PD_DATE.OutIntAmount>0).\
					group_by(MKT_PD_DATE.ID)

			PDObj = PDObj.first()
			if PDObj:
				if PDObj.PenAmount < Amount:
					return (True, "%s amount (%s) is more than interest amount (%s)."%(Msg, Amount, PDObj.PenAmount))
			else:
				return (True, "PD record not found cannot waive/collect.")
		return (False,'')
	except Exception as e:
		raise

def waiveInterest(**kwargs):
	try:
		LoanID 			= kwargs.get("LoanID")
		Amount 			= Decimal(kwargs.get("Amount"))
		TranDate 		= kwargs.get("TranDate")
		Note			= kwargs.get("Note")
		PDID			= kwargs.get("PDID")
		Operation		= kwargs.get("Operation")
		Reference 		= kwargs.get("Reference")
		PDWaive 		= kwargs.get("PDWaive")

		Branch 			= kwargs.get("Branch")
		Authorizer 		= kwargs.get("Authorizer")
		Authorizeon 	= kwargs.get("Authorizeon")
		Status 			= kwargs.get("Status")
		Curr 			= kwargs.get("Curr")
		Inputter 		= kwargs.get("Inputter")
		Createdon 		= kwargs.get("Createdon")

		if Amount > 0:
			ContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
			Currency 	= ContractObj.Currency
			Account 	= ContractObj.Account
			Branch 		= ContractObj.Branch
			AccountObj 	= MKT_ACCOUNT.query.get(Account)
			ID 			= 'PD%s'%LoanID

			if PDID:
				#update PD record
				PDDateObj 	= MKT_PD_DATE.query.filter(MKT_PD_DATE.PDID==PDID).first()
				RepStatus,TotalCollection,ClearPenalty = mktpdcollection.subtractPDCollection(ID, PDID, PDDateObj.ODStatus, 0, 0, Amount, 0)

				#update LC and post accounting
				kwargs.update({"PDWaive": "Y","UserReference": PDID})
				mktloan.updateLCAfterWaive(**kwargs)

				#change loan class
				mktpdcollection.loanClassification(LoanID=LoanID, Check="No")

			else:
				#for waive all interest
				CollectedAmount = 0
				AutoIDList = []
				Index = 0

				PDDateObj 	= 	MKT_PD_DATE.query.\
								filter(MKT_PD_DATE.ID=='PD%s'%LoanID).\
								filter(MKT_PD_DATE.NextRunDate==TranDate).\
								filter(MKT_PD_DATE.OutAmount > 0).\
								order_by(MKT_PD_DATE.ODStatus.desc()).all()

				CuObj 			= MKT_CUSTOMER.query.get(ContractObj.ContractCustomerID)
				CustomerName 	= '%s %s' %(CuObj.LastNameEn, CuObj.FirstNameEn)

				for i in range(len(PDDateObj)):
					AutoIDList.append(mktautoid.getAutoID("FRM_PENALTY"))

				CollectedAmount = 0
				for p in PDDateObj:
					CollectedAmount = p.OutIntAmount if p.OutIntAmount <= Amount else Amount
					Amount -= CollectedAmount

					RepStatus,TotalCollection,ClearPenalty = mktpdcollection.subtractPDCollection(p.ID, p.PDID, p.ODStatus, 0, 0, CollectedAmount, 0)
					# mktloan.updateScheduleStatus(LoanID,p.DueDate,RepStatus,TotalCollection)

					#update LC and post accounting
					kwargs.update({"PDWaive": "Y","UserReference": p.ID,"Amount": TotalCollection})

					mktloan.updateLCAfterWaive(**kwargs)					
					CollectAmount 			= CollectedAmount if Operation != 'WI' else 0
					InterestDueAmount 		= p.InterestDue if Operation == 'WI' else 0
					AutoID 					= AutoIDList[Index]

					generatePenalty(
									AutoID=AutoID,
									LoanID=LoanID,
									CustomerName=CustomerName,
									Currency=Currency,
									PID=p.PDID,
									DueDate=p.DueDate,
									TranDate=TranDate,
									Operation=Operation,
									Note=Note,
									Reference=Reference,
									PDWaive=PDWaive,
									CollectAmount=CollectAmount,
									InterestDueAmount=InterestDueAmount,
									Branch=Branch,
									Status=Status,
									Curr=Curr,
									Inputter=Inputter,
									Createdon=Createdon,
									Authorizer=Authorizer,
									Authorizeon=Authorizeon)

					Index += 1		

					#change loan class
					mktpdcollection.loanClassification(LoanID=LoanID, Check="No")

					if Amount <= 0:
						break

		return True

	except Exception as e:
		raise

def generatePenalty(**kwargs):
	PenaltyObj = MKT_PENALTY()
	PenaltyObj.ID 				= kwargs.get('AutoID')
	PenaltyObj.LoanID 			= kwargs.get('LoanID')
	PenaltyObj.CustomerName 	= kwargs.get('CustomerName')
	PenaltyObj.Currency 		= kwargs.get('Currency')
	PenaltyObj.PDID 			= kwargs.get('PID')
	PenaltyObj.DueDate 			= kwargs.get('DueDate')
	PenaltyObj.TranDate 		= kwargs.get('TranDate')
	PenaltyObj.Operation 		= kwargs.get('Operation')
	PenaltyObj.Amount 			= kwargs.get('CollectAmount')
	PenaltyObj.Note 			= kwargs.get('Note')
	PenaltyObj.InterestAmount 	= kwargs.get('InterestDueAmount')
	PenaltyObj.PDWaive 			= kwargs.get('PDWaive')
	PenaltyObj.Reference 		= kwargs.get('Reference')
	PenaltyObj.Branch 			= kwargs.get('Branch')
	PenaltyObj.Status 			= kwargs.get('Status')
	PenaltyObj.Curr 			= kwargs.get('Curr')
	PenaltyObj.Inputter 		= kwargs.get('Inputter')
	PenaltyObj.Createdon 		= kwargs.get('Createdon')
	PenaltyObj.Authorizer 		= kwargs.get('Authorizer')
	PenaltyObj.Authorizeon 		= kwargs.get('Authorizeon')
	db.session.add(PenaltyObj)
