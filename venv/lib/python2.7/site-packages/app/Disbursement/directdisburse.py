from app.mktcore.imports 		import *
from .forms 					import *
import app.mktcore.autoid 			as mktautoid
import app.mktcore.formmodel 		as mktformmodel
from app.VB.models				import MKT_VB
from app.VB.models				import MKT_GROUP
from app.Account.models 		import MKT_ACCOUNT
from collections 				import namedtuple
from app.GL.models 				import MKT_GL_MAPPING_DE
import app.tools.mktteller 			as mktteller
import app.tools.mktaudit 			as mktaudit
from app.Charge.models 			import MKT_CHARGE
from app.ChargeRate.models 		import MKT_CHARGE_RATE
import app.tools.mktaccounting 		as mktaccounting
import json


def loadCurrency():
	return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())

def loadOfficer():
	CurrentBranch = mktuser.getCurrentBranch()
	OfficerObj 	= MKT_OFFICER.query.filter(MKT_OFFICER.Branch ==CurrentBranch)
	return OfficerObj

def loadCurrentDate():
	return 	mktdate.getBankDate()

@app.route("/Morakot/GenerateDisbursementAccountEx", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeDisbursementGenerateAccountEx():
	Account = ""
	AccCategory = ""
	AvailableBal = 0
	Currency = str(request.args.get('Currency')).strip()
	CurrencyObj = MKT_CURRENCY.query.get(str(Currency))
	User = mktuser.getUser()
	CurrentBranch = mktuser.getCurrentBranch()
	CashAccountObj = MKT_CASH_ACCOUNT.query.\
					filter(MKT_CASH_ACCOUNT.ID == str(User.CashAccount),
							MKT_CASH_ACCOUNT.CashBranch == str(CurrentBranch).strip()
						).first()
	
	if CashAccountObj :
		AccountObj = MKT_ACCOUNT.query.\
						filter(MKT_ACCOUNT.ID.in_(str(CashAccountObj.Account).split()),
								MKT_ACCOUNT.Currency == Currency).\
						first()

		Account = str(AccountObj.ID) if AccountObj else ""
		AccCategory = str(AccountObj.AccCategory) if AccountObj else ""
		AvailableBal = mktmoney.toMoney(float(AccountObj.AvailableBal), CurrencyObj, 0) if AccountObj else 0
	
	return jsonify(	OfficerAccount=Account, 
					OfficerCategory=AccCategory, 
					AvailableBal=AvailableBal
					)


@app.route("/Morakot/DirectGroupDisbursement/AddLoanContract", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanContract(**kwargs):
	try:
		Amount 		= 0
		Account 	= ""
		Currency 	= ""
		Customer 	= ""
		ValueDate 	= ""
		Balance 	= 0
		LoanID 		= request.args.get("LoanID")
		ChargeKey = request.args.get("ChargeKeyList") if "ChargeKeyList" in request.url else ""
		ChargeKeyList = [Charge for Charge in str(ChargeKey).split(",") if Charge != ""]
		ChargeKeyDict = request.args.get("ChargeKeyDict") if "ChargeKeyDict" in request.url else ""
		ChargeKeyDict = eval(str(ChargeKeyDict))
		NewChargeKeyDict = {}
		LoanObj 	= MKT_LOAN_CONTRACT.query.get(LoanID)

		FormObj = MKT_FORM.query.filter(MKT_FORM.URL=="DirectGroupDisbursement").first()
		if FormObj:
			NAuthorize = int(FormObj.NAuthorize)
		else:
			NAuthorize = 0


		if LoanObj:
			CustomerObj = MKT_CUSTOMER.query.get(LoanObj.ContractCustomerID)
			Customer = CustomerObj.ID + " - " + CustomerObj.LastNameEn + " " + CustomerObj.FirstNameEn
			Account = LoanObj.Account
			AccObj = MKT_ACCOUNT.query.get(Account)
			Currency = AccObj.Currency
			ValueDate = str(LoanObj.ValueDate).strip()
			CurrencyObj=mktmoney.getCurrencyObj(AccObj.Currency)
			DisburseAmount= float(LoanObj.Disbursed)
			DetailObj = MKT_DISBURSE_DE.query
			VBID = str(CustomerObj.VBID)
			Group = str(CustomerObj.GroupID)
			Officer = str(LoanObj.ContractOfficerID)
			if AccObj:
				ActualAmount = mktofficer.getActualAmount(DetailObj,LoanID,DisburseAmount)
				Amount 	= mktmoney.toMoney(ActualAmount,CurrencyObj)
				Balance = mktmoney.toMoney(float(AccObj.Balance),CurrencyObj)
				COMAmount = mktmoney.toMoney(float(1000),CurrencyObj)

			LoanChargeObj = getLoanUpfrontCharge(LoanID, Currency)
			NewChargeKeyList = [str(Charge[0]) for Charge in LoanChargeObj]
			AllChargeKey = list(ChargeKeyList)
			AllChargeKey.extend(NewChargeKeyList)
			AllChargeKey = list(set(AllChargeKey))
			LoanChargeDict = {Charge[0]: [str(Charge[1]), str(Charge[2])] for Charge in LoanChargeObj}
			ResultObj = mktofficer.getDisburseSheet(NAuthorize,LoanID,Officer,Currency,ValueDate+" ","", "","Save")
			if len(LoanChargeObj)>0 :
				LoanCharge = [str(Charge[0]) for Charge in LoanChargeObj]
				# print "new loan charge", LoanCharge, eval(str(ChargeKeyDict))
				DifCharge = list(set(LoanCharge).difference(set(ChargeKeyList)))
				# print "dif charge", DifCharge
				
				if len(DifCharge) > 0:
					LoanChargeDifObj = filter(lambda x: x[0] in DifCharge, LoanChargeObj)

					for Charge in LoanChargeDifObj :
						NewChargeKeyDict.update({str(Charge[0]): [str(Charge[1]), str(Charge[2])]})
			
		return jsonify(LoanID = LoanID,
						Customer = Customer,
						Currency = Currency,
						ValueDate = ValueDate, 
						Amount = Amount, 
						Account = Account,
						Balance = Balance, 
						COMAmount = COMAmount,
						ChargeKey = json.dumps(ChargeKeyList),
						NewChargeKeyDict = json.dumps(NewChargeKeyDict),
						LoanChargeDict = json.dumps(LoanChargeDict),
						AllChargeKeyList = json.dumps(AllChargeKey)
						)
	except:
		raise


@app.route('/Morakot/DirectGroupDisbursement/<Operation>/Operation/', methods=['GET'])
@app.route('/Morakot/DirectGroupDisbursement/<Operation>/Operation/<ID>/', methods=['GET'])
@app.route('/Morakot/DirectGroupDisbursement/<Operation>/<ID>/', methods=['GET'])
@app.route('/Morakot/DirectGroupDisbursement/', methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def routeDirectGroupDisbursement(Operation="",ID="", template="disbursement/direct_disbursement.html"):
	ErrorMsg 	= []
	FieldRequired=[]
	QueryObj 	= []
	ResultObj 	= []
	DisburseObj = []
	OfficerObj 	= []
	CurrencyObj = []
	kwargs 		= []
	ListLoanID 	= []
	VBID 		= []
	Group 		= []

	TotalDisbursement 	= 0
	TotalLoanContract 	= 0
	OfficerBalance 		= 0
	BankDate 		= ""
	Action 			= "/Morakot/DirectGroupDisbursement/"
	ActionNoEndingSlash = "/Morakot/DirectGroupDisbursement"
	li_html 		= ""
	Form 			= ""
	g_id 			= ID
	g_readonly 		= ""
	disabled 		= ""

	AccSetting 	= mktsetting.getAccSetting()
	if AccSetting:
		BaseCurrency = AccSetting.BaseCurrency

	DefaultCurrency = BaseCurrency if BaseCurrency else ''

	classToolbar 	= mkttool.clsToolbar()
	FormName 		= "FRM_GENERATE_DISBURSE"
	Officer 		= request.args.get("Officer") 				if "Officer" 			in request.args else ""
	Currency 		= request.args.get("Currency") 				if "Currency" 			in request.args else ""
	ValueDateStart 	= request.args.get("ValueDateStart")		if "ValueDateStart" 	in request.args else ""
	ValueDateEnd 	= request.args.get("ValueDateEnd")			if "ValueDateEnd" 		in request.args else ""
	OfficerAccount 	= request.args.get("OfficerAccount") 		if "OfficerAccount" 	in request.args else ""
	OfficerCategory = request.args.get("OfficerCategory") 		if "OfficerCategory" 	in request.args else ""
	VBID 			= request.args.get("VBID") 					if "VBID" 				in request.args else ""
	Group 			= request.args.get("Group") 				if "Group" 				in request.args else ""
	StatusSave 		= request.args.get("Save") 					if "Save" 				in request.args else ""

	ValueDateRange 	= "%s %s"%(ValueDateStart,ValueDateEnd)
	#List
	get_maxfield = 0
	formatField,currencyField = ["TotalDisbursement","TotalActualAmount"],"Currency"# self.objform.formatMoney() #call static method defined in form
	listfield = ["ID", "Officer","OfficerAccount", "OfficerCategory", "Currency", "ValueDate", "TotalDisbursement", "TotalActualAmount", "VBID", "Group" ]#self.objform.listField()
	
	LocationSetting 	= mktsetting.getAppSetting('LANGUAGE')
	# set default to curreny
	if LocationSetting == 'MYANMAR':
		DefaultCurrency = 'MMK'

	if request.args.get("ID")!=None:
		if Operation == "":
			Operation 	= "Search"

	# Overwrite Operation
	if Operation == "Generate":
		# Block check access right
		getCheck 	= checkAccess ("/Morakot/DirectGroupDisbursement/","New")
	else:
		# Block check access right
		getCheck 	= checkAccess ("/Morakot/DirectGroupDisbursement/",Operation)
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template(template,ErrorMsg=ErrorMsg)

	# Get AuthLevel	
	FormObj = MKT_FORM.query.filter(MKT_FORM.URL=="DirectGroupDisbursement").first()
	if FormObj:
		NAuthorize = int(FormObj.NAuthorize)
	else:
		NAuthorize = 0

	#Initialize Object Table
	if NAuthorize == 0 :
		MainTable 	= MKT_DISBURSE
		DetailTable = MKT_DISBURSE_DE
	else:
		MainTable 	= MKT_DISBURSE_INAU
		DetailTable = MKT_DISBURSE_DE_INAU

	li_html 		= classToolbar.getToolbarevent("Cancel")

	
	#When record was saved.
	# ResultObj 		= mktofficer.getDisburseSheet(Resource,ID,Officer,Currency,ValueDate)
	
	if Operation == "New":
		g_id 			= mktautoid.getAutoID(FormName) if not ID else ID
		Form 			= "New"
		g_readonly		= "readonly"
		BankDate 		= str(loadCurrentDate())
		li_html 		= classToolbar.getToolbarevent("New")
		# ResultObj 		= mktofficer.getDisburseSheet(Resource,ID,Officer,Currency,ValueDate)
		if not g_id:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+"invalid ID")
			return render_template(template,Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)
		
		CheckDuplicateID = mktaudit.isDuplicate(MKT_DISBURSE,MKT_DISBURSE_INAU,MKT_DISBURSE_HIST,ID)
		if CheckDuplicateID[0]:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(CheckDuplicateID[1])

		CheckRestoreID = mktaudit.isRestoreID(MKT_DISBURSE,MKT_DISBURSE_INAU,MKT_DISBURSE_HIST,ID)
		if CheckRestoreID[0]:
			flash("You're restoring a record from history with curr No: "+ CheckRestoreID[1])

	elif Operation == "Generate":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("New")

		if StatusSave:
			ResultObj 			= mktofficer.getDisburseSheet(NAuthorize,ID,Officer,Currency,ValueDateRange,VBID, Group,"Save")
		else:
			ResultObj 			= mktofficer.getDisburseSheet(NAuthorize,ID,Officer,Currency,ValueDateRange,VBID, Group)

		TotalDisbursement 	= ResultObj['TotalDisbursement']
		TotalLoanContract 	= ResultObj['TotalLoanContract']
		OfficerBalance 		= ResultObj['OfficerBalance']
		ResultObj 			= ResultObj['ResultObj']
		if ResultObj == []:
			if not StatusSave:
				FieldRequired.append(('Loan Contract',"Your generate disburse don't have any contract."))

		# Block validation
		if not Officer:
			FieldRequired.append(('Officer','This field is required.'))

		if not Currency:
			FieldRequired.append(('Currency','This field is required.'))

		if not ValueDateStart:
			FieldRequired.append(('Value Date','This field is required.'))

		if not OfficerAccount:
			FieldRequired.append(('Till Account',"User doesn't have Till Account."))

		if not OfficerCategory:
			FieldRequired.append(('Till Category','This field is required.'))

	elif Operation == "Edit":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("New")
		ResultObj 			= mktofficer.getDisburseSheet(NAuthorize,ID,Officer,Currency,ValueDateRange,VBID, Group,"Save")
		TotalDisbursement 	= ResultObj['TotalDisbursement']
		TotalLoanContract 	= ResultObj['TotalLoanContract']
		OfficerBalance 		= ResultObj['OfficerBalance']
		DisburseObj 		= ResultObj['DisburseObj']
		Currency 			= ResultObj['Currency']
		ResultObj 			= ResultObj['ResultObj']
		if not ResultObj:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+" Record not found...")

	elif Operation == "Search":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("Search")
		ID 				= request.args.get('ID')
		g_id 			= ID
		disabled 		= "disabled"
		ResultObj 		= mktofficer.getDisburseSheet(NAuthorize,ID,Officer,Currency,ValueDateRange,VBID, Group,"Save")
		
		# checkHist
		if ID.find('@') != -1:
			ResultObj 		= mktofficer.getDisburseSheet(NAuthorize,ID,Officer,Currency,ValueDateRange,VBID, Group,"Hist")
			li_html 		= classToolbar.getToolbarevent("readonly")
		TotalDisbursement 	= ResultObj['TotalDisbursement']
		TotalLoanContract 	= ResultObj['TotalLoanContract']
		OfficerBalance 		= ResultObj['OfficerBalance']
		DisburseObj 		= ResultObj['DisburseObj']
		ResultObj 			= ResultObj['ResultObj']
		
		if DisburseObj:
			DisbursedStatus = DisburseObj.DisbursedStatus
			if DisbursedStatus == "Y":
				li_html 		= classToolbar.getToolbarevent("readonly")
				
		if not ResultObj:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+" Record not found...")
			
	elif Operation == "Authorize":
		template 		= "disbursement/direct_disbursement.html"
		Form 			= ""
		g_readonly 		= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		Disburse 		= MKT_DISBURSE_INAU.query.get(ID)
		if not Disburse:
			flash(msg_error + "No record to authorize.")
		else:
			Inputter	= Disburse.Inputter
			Createdon 	= Disburse.Createdon
			Branch 		= Disburse.Branch
			Status 		= Disburse.Status
			if not Status == "RNAU":
				
				# Check Generate Disbursement Sheet
				DisburseDetail = MKT_DISBURSE_DE_INAU.query.\
							  filter(MKT_DISBURSE_DE_INAU.ID == ID).\
							  all()
							  
				if not DisburseDetail:
					flash(msg_error + " Generate Disbursement Sheet Detail not found.")
					
			CheckAuth 	= mktofficer.setAuthorizeDisbursementSheet(NAuthorize,ID,Status,Inputter,Createdon,Branch)
			if CheckAuth[1] :
				
				DisbursementList = getDisburseList(ID)
				SuccessfullyPostAcc = PostAccountingDis(DisbursementList)
			if SuccessfullyPostAcc :
				flash(CheckAuth[1])
				db.session.commit()
		# return render_template(template,Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)
	
	elif Operation == "Reverse":
		Form 			= ""
		g_readonly 		= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		CheckReverse 	= mktofficer.setReverseDisbursementSheet(NAuthorize,ID)
		if not CheckReverse[0]:
			flash(CheckReverse[1])
		else:
			DisbursementList = GenDisburseList(ID, Reverse=True)
			SuccessfullyPostAcc = PostAccountingDis(DisbursementList)

			if SuccessfullyPostAcc :
				flash(CheckReverse[1])
				db.session.commit()

		return render_template(template,Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)
	
	elif Operation == "Delete":
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			ObjDelete 		= mktofficer.setDeleteDisbursement(ID)
			if not ObjDelete[0]:
				flash(ObjDelete[1])
				db.session.rollback()
			else:
				flash(ObjDelete[1])
				db.session.commit()
			return render_template(template,
										Action=Action,
										li_html=li_html,
										Form=Form,
										g_id=g_id,
										g_readonly=g_readonly)
	elif Operation == "ListLive":

		template="list.html"
		getparam=mkttool.render_param(get_maxfield,MKT_DISBURSE_INAU)
		filterfield=["DisbursedStatus*EQ*Y"]
		mlist=mktformmodel.List(MKT_DISBURSE,getparam, listfield,filterfield) 

		return render_template(template,querys=mlist.mktList(),fields=mlist.fields,searchfields=mlist.searchfields,nfield=get_maxfield,formatMoney=formatField,currencyField=currencyField,toMoney=mktmoney.toMoney,float=float,curobj=mktmoney.getCurrencyObj,hidEdit=False,formReadOnly=False)
	
	elif Operation == "ListAuth":

		template="list.html"
		getparam=mkttool.render_param(get_maxfield,MKT_DISBURSE_INAU)
		filterfield=["DisbursedStatus*EQ*N"]
		mlist=mktformmodel.List(MKT_DISBURSE_INAU,getparam, listfield,filterfield) #extend class
		
		return render_template(template,querys=mlist.mktList(),fields=mlist.fields,searchfields=mlist.searchfields,nfield=get_maxfield,formatMoney=formatField,currencyField=currencyField,toMoney=mktmoney.toMoney,float=float,curobj=mktmoney.getCurrencyObj,hidEdit=False,formReadOnly=False)

	elif Operation == "ListHist":

		template="list.html"
		getparam=mkttool.render_param(get_maxfield,MKT_DISBURSE_HIST)
		filterfield=["DisbursedStatus*EQ*Y"]
		mlist=mktformmodel.List(MKT_DISBURSE_HIST,getparam, listfield,filterfield) #extend class
		
		return render_template(template,querys=mlist.mktList(),fields=mlist.fields,searchfields=mlist.searchfields,nfield=get_maxfield,formatMoney=formatField,currencyField=currencyField,toMoney=mktmoney.toMoney,float=float,curobj=mktmoney.getCurrencyObj,hidEdit=False,formReadOnly=False)
 
	elif Operation == "Cancel":
		Form 			= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")

	else:
		Form 			= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		

	if request.method == "POST":
		kwargs			= request.form
		# flash(kwargs)
		print kwargs
		DisburseID		= kwargs["ID"]				if "ID" 				in kwargs else ""
		Officer 		= kwargs["Officer"]			if "Officer" 			in kwargs else ""
		Currency 		= kwargs["Currency"]		if "Currency" 			in kwargs else ""
		ValueDateStart  = kwargs["ValueDateStart"]	if "ValueDateStart" 	in kwargs else ""
		ValueDateEnd 	= kwargs["ValueDateEnd"]	if "ValueDateEnd" 		in kwargs else ""
		VBID 			= kwargs["VBID"]			if "VBID" 				in kwargs else ""
		Group 			= kwargs["Group"]			if "Group" 				in kwargs else ""

		ListLoanID		= [kwargs[str(item)] for item in kwargs if "LoanID" in item]
		ListLoanID.sort()
		
		
		InsertObj = mktofficer.insertDisbursementSheet(NAuthorize,DisburseID,kwargs)
		Status 	= InsertObj["Status"]
		Url 	= InsertObj["Url"]
		Message = InsertObj["Message"]
		
		#Error
		if not Status :
			ResultObj = str(request.form['ResultObj'].replace("'", '"'))
			ResultObj = eval(ResultObj)
			
			g_id 			= DisburseID
			Form 			= "New"
			g_readonly		= "readonly"
			li_html 		= classToolbar.getToolbarevent("New")

			FieldRequired.append(['Account',Message])
		else:
			#Successfully
			flash(Message)
			db.session.commit()
			db.session.close()
		# return redirect(Url)

	OfficerObj			= loadOfficer().order_by(MKT_OFFICER.ID.asc())#MKT_OFFICER.query.get(Officer)
	CurrencyObj 		= loadCurrency()
	VBObj				= MKT_VB.query
	GroupObj			= MKT_GROUP.query


	TotalCompulsory 	= 0
	TotalCompulsory = sum([float(row['CompulsoryAmount']) for row in ResultObj])

	# Get Till Account and Category
	Account = ""
	AccCategory = ""
	AvailableBal = 0
	User = mktuser.getUser()
	CurrentBranch = str(mktuser.getCurrentBranch()).strip()
	FilterCurrency = DefaultCurrency if Currency == "" else Currency
	CashAccountObj = MKT_CASH_ACCOUNT.query.\
					filter(MKT_CASH_ACCOUNT.ID == str(User.CashAccount).strip(),
							MKT_CASH_ACCOUNT.CashBranch == CurrentBranch).\
					first()

	
	if Operation == 'Search' :
		ID = request.args.get("ID")
		DisburseInaObj = MKT_DISBURSE_INAU.query.filter_by(ID=ID).first()
		if DisburseObj and DisburseObj.DisbursedStatus == "Y" :
			DisburseInaObj = DisburseObj

		if DisburseInaObj :
			CashAccountObj = MKT_CASH_ACCOUNT.query.\
								filter(MKT_CASH_ACCOUNT.Account == str(DisburseInaObj.OfficerAccount),
										MKT_CASH_ACCOUNT.CashBranch == CurrentBranch
									).\
								first()
	
	if CashAccountObj:
		AccountObj = MKT_ACCOUNT.query.\
						filter(MKT_ACCOUNT.ID.in_(str(CashAccountObj.Account).split()),
								MKT_ACCOUNT.Currency == FilterCurrency).\
						first()
		
		Account = str(AccountObj.ID) if AccountObj else ""
		AccCategory = str(AccountObj.AccCategory) if AccountObj else ""
		AvailableBal = mktmoney.toMoney(float(AccountObj.AvailableBal), CurrencyObj.first(), 0) if AccountObj else 0
	
	# Get Charge From Each Loan Contract
	ChargeInRow = {}
	ChargeDict = collections.defaultdict(set)
	ChargeMap  = {}
	for row in ResultObj :
		LoanID = str(row["ID"]).strip()
		Currency = str(row['Currency'])
		LoanChargeObj 	= getLoanUpfrontCharge(LoanID, Currency)
		
		if LoanChargeObj :
			for Charge in LoanChargeObj:
				ChargeDict[str(Charge[0])].add(str(Charge[2]))
				ChargeInRow.update({str(Charge[0]): float(Charge[1])})
				
			row.update({"UpFrontCharge":ChargeInRow})
			ChargeInRow = {}
		else :
			# To prevent jinja error when loan have no charge
			row.update({'UpFrontCharge': {}})
		
	for key, val in ChargeDict.iteritems():
		ChargeMap.update({key: list(val)[0]})

	ChargeKeyList = ""
	for Charge in list(ChargeDict.keys()) :
		ChargeKeyList += Charge + ","
	

	return render_template(template,
							Action=Action,
							ActionNoEndingSlash=ActionNoEndingSlash,
							li_html=li_html,
							Form=Form,
							g_id=g_id,
							g_readonly=g_readonly,
							ErrorMsg=ErrorMsg,
							FieldRequired=FieldRequired,
							float=float,
							BankDate=BankDate,
							kwargs=kwargs,
							QueryObj=QueryObj,
							ResultObj=ResultObj,
							toMoney=mktmoney.toMoney,
							getCurrencyObj=mktmoney.getCurrencyObj,
							OfficerObj=OfficerObj,
							DisburseObj=DisburseObj,
							CurrencyObj=CurrencyObj,
							Officer=Officer,
							Currency=Currency,
							OfficerBalance=OfficerBalance,
							TotalDisbursement=TotalDisbursement,
							TotalLoanContract=TotalLoanContract,
							getActualAmount=mktofficer.getActualAmount,
							ListLoanID=ListLoanID,
							TotalCompulsory=TotalCompulsory,
							VBObj=VBObj,
							GroupObj=GroupObj,
							DefaultCurrency=DefaultCurrency,
							Account=Account,
							AccCategory=AccCategory,
							AvailableBal=AvailableBal,
							disabled_ex=disabled,
							disabled="",
							ChargeList=ChargeMap,
							ChargeKeyList=ChargeKeyList
							)


def PostAccountingDis(DisbursementList, **kwargs):
	
	for row in DisbursementList :

		DrAcc 		= row.DrAccount
		DrCat 		= row.DrCategory
		DrCur 		= row.DrCurrency

		CrAcc 		= row.CrAccount
		CrCat 		= row.CrCategory
		CrCur 		= row.CrCurrency

		Amo  		= Decimal(row.Amount)
		LCYAmount 	= Decimal(row.LCYAmount)
		Module 		= row.Module
		Tran  		= row.Transaction
		TranDate 	= row.TranDate
		Ref 		= row.Reference
		Note 		= row.Note
		UserReference= row.ID

		Audit 		= mktaudit.getAuditrail()
		Inputter	= Audit['Inputter']
		Createdon 	= Audit['Createdon']
		Authorizer 	= Audit['Authorizer']
		Authorizeon	= Audit['Authorizeon']
		Branch 		= Audit['Branch']

		Check = mktteller.validateMaxMinAndConsoleBalance(Branch,DrAcc,DrCat,DrCur,
														  CrAcc,CrCat,CrCur,Amo,
														  TranDate=TranDate
														  )
		if not Check[0]:
			#Catch error
			flash(msg_error + Check[1])
			db.session.rollback()
			db.session.close()
			return False

		for i in range(0, 2):
			if i == 0:
				DrCr 		= 	"Dr"
				Mode 		= 	"" if mktteller.isCashCateogry(DrCat) else "Direct"
				Category 	= 	DrCat
				Currency 	= 	DrCur
				Account 	= 	DrAcc
			else:
				DrCr 		= 	"Cr"
				Mode 		= 	"" if mktteller.isCashCateogry(CrCat) else "Direct"
				Category 	= 	CrCat
				Currency 	= 	CrCur
				Account 	= 	CrAcc
			
			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
			DateTimeNow = mktdate.getDateTimeNow()
						
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				Inputter,				# Inputter
				Createdon, 				# Createdon
				Authorizer,				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amo), 			# Amount
				"LC",					# Module
				Tran, 					# Transaction
				TranDate, 				# TransactionDate
				Ref, 					# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference = UserReference
			)
			print "Start booking #%s -%s"%(i+1,DrCr)
		
	db.session.commit()
	
	return True


# Function to generate list of disbursement object for post accounting
def getDisburseList(ID, Reverse=False):
	DisbursementList = []
	DisburseObj = MKT_DISBURSE.query.filter_by(ID=ID).first()
	DisburseDeObj = MKT_DISBURSE_DE.query.filter_by(ID=ID).all()
	BaseCurrency = mktsetting.getAccSetting().BaseCurrency
	BaseCurrencyObj = MKT_CURRENCY.query.get(BaseCurrency)
	ReportingRate = float(BaseCurrencyObj.ReportingRate)
	
	PostAccountingObj = [
						"ID",
						"DrAccount",
						"DrCategory",
						"DrCurrency",
						"CrAccount",
						"CrCategory",
						"CrCurrency",
						"Amount",
						"LCYAmount",
						"Module",
						"Transaction",
						"TranDate",
						"Reference",
						"Note",
						]

	if DisburseObj and DisburseDeObj :
		DisburseObj.DisbursedStatus = 'Y'
		Transaction = "1" if not Reverse else "25"

		for row in DisburseDeObj :
			Note = "Group Loan Disbursement" if not Reverse else "Reverse Group Loan Disbursement"
			LoanContract = MKT_LOAN_CONTRACT.query.get(str(row.LoanID).strip())
			LCYAmount = float(row.Amount) * ReportingRate

			DisburseRec = namedtuple("DisburseRec", PostAccountingObj)
			
			DisburseRecObj = DisburseRec(
							 ID,
							 str(row.Account).strip() if not Reverse else str(DisburseObj.OfficerAccount).strip(),
							 str(row.AccCategory).strip() if not Reverse else str(DisburseObj.OfficerCategory).strip(),
							 str(DisburseObj.Currency).strip(),
							 str(DisburseObj.OfficerAccount).strip() if not Reverse else str(row.Account).strip(),
							 str(DisburseObj.OfficerCategory).strip() if not Reverse else str(row.AccCategory).strip(),
							 str(DisburseObj.Currency).strip(),
							 str(row.ActualAmount).strip(),
							 LCYAmount,
							 "LC",
							 '1',
							 str(LoanContract.ValueDate).strip() if LoanContract else "",
							 str(row.LoanID).strip(),
							 Note,
							)

			DisbursementList.append(DisburseRecObj)

			UpFrontFee = json.loads(row.UpFrontFee)
			Note = "Up-front Fee Collection" if not Reverse else "Up-front Fee Reversal"
			ChargeNote = "Deposit For Charge Fee" if not Reverse else "Reverse Deposit For Charge Fee"
			
			for key, val in UpFrontFee.iteritems() :
				if str(val) != '0' :
					Currency = str(DisburseObj.Currency).strip()
					ChargeRateObj = MKT_CHARGE_RATE.query.filter_by(ID=str(key)+Currency).first()
					ChargeCategory = str(ChargeRateObj.IncomeCat) if ChargeRateObj else ""
					ChargeAccountObj = MKT_ACCOUNT.query.filter_by(AccCategory=ChargeCategory).first()
					ChargeAccount = ChargeAccountObj.ID if ChargeAccountObj else ""

					LCYAmount = float(val) * ReportingRate
					
					FeeRec = namedtuple("FeeObj", PostAccountingObj)
					FeeRecObj = FeeRec(
									 ID,
									 str(DisburseObj.OfficerAccount).strip() if not Reverse else str(row.Account).strip(),
									 str(DisburseObj.OfficerCategory).strip() if not Reverse else str(row.AccCategory).strip(),
									 str(DisburseObj.Currency).strip(),
									 str(row.Account).strip() if not Reverse else str(DisburseObj.OfficerAccount).strip(),
									 str(row.AccCategory).strip() if not Reverse else str(DisburseObj.OfficerCategory).strip(),
									 str(DisburseObj.Currency).strip(),
									 str(val).strip(),
									 LCYAmount,
									 "LC",
									 '6' if not Reverse else '8',
									 str(LoanContract.ValueDate).strip() if LoanContract else "",
									 str(row.LoanID).strip(),
									 ChargeNote,
								)

					FeeRecObj1 = FeeRec(
									 ID,
									 str(row.Account).strip() if not Reverse else ChargeAccount,
								 	 str(row.AccCategory).strip() if not Reverse else ChargeCategory,
								 	 str(DisburseObj.Currency).strip(),
									 ChargeAccount if not Reverse else str(row.Account).strip(),
								 	 ChargeCategory if not Reverse else str(row.AccCategory).strip(),
									 str(DisburseObj.Currency).strip(),
									 str(val).strip(),
									 LCYAmount,
									 "LC",
									 '15' if not Reverse else '16',
									 str(LoanContract.ValueDate).strip() if LoanContract else "",
									 str(row.LoanID).strip(),
									 Note,
								)

					DisbursementList.extend([FeeRecObj, FeeRecObj1])

	return DisbursementList


def getLoanUpfrontCharge(LoanID, Currency) :

	LoanChargeObj = db.session.query(MKT_LOAN_CHARGE.ChargeKey, MKT_LOAN_CHARGE.ChargeUnearned,MKT_CHARGE.Description).\
							join(MKT_CHARGE, MKT_CHARGE.ID == MKT_LOAN_CHARGE.ChargeKey).\
							join(MKT_CHARGE_RATE, MKT_CHARGE_RATE.ID == MKT_CHARGE.ID+Currency).\
							filter(MKT_LOAN_CHARGE.ID == LoanID).\
							filter(MKT_CHARGE_RATE.ChargeMode == '1').all()
	return LoanChargeObj

