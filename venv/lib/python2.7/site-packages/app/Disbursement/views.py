'''
Created Date: 23 Sep 2015
Author: Sovankiry Rim

Modified by: Sovankiry
Modified Date: 01 Oct 2015
All Right Reserved Morakot Technology
Description :

'''


from app.mktcore.imports 	import *
from flask import request,flash,jsonify,redirect
from collections import defaultdict
from .models import *
from .forms import *
from .disburse import *
from app.Officer.models 		import *
from app.LoanContract.models 	import *
from app.Currency.models 		import *
from app.Customer.models 		import *
from app.Account.models 		import *
from app.Module.models 			import MKT_FORM

import app.tools.mktofficer 	as mktofficer
import app.tools.mktmoney 		as mktmoney
import app.tools.user 			as mktuser
import app.tools.mkttool 		as mkttool
import app.tools.mktaudit 		as mktaudit
#Block import core
import app.mktcore.autoid 		as mktautoid
import app.mktcore.formmodel 	as mktformmodel
import app.tools.grouploan.mktgrouploan	as mktgrouloan
from   app.VB.models			import MKT_VB
from   app.VB.models			import MKT_GROUP
from   app.LoanCollection.models import MKT_LOAN_COLLECTION

from app.Charge.models 			import MKT_CHARGE
from app.ChargeRate.models 		import MKT_CHARGE_RATE

import ast
from .directdisburse import *


@app.route("/Morakot/GenerateDisbursementAccount", methods=['GET'])
@app.route("/Morakot/API/GenerateDisbursementAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeDisbursementGenerateAccount():
	Currency  		= str(request.args.get('Currency'))
	Officer 		= str(request.args.get('Officer'))
	return mktofficer.getOfficerAcount(Officer,Currency)	

@app.route('/Morakot/DisbursementSheet/Search', methods=['GET'])
@app.route('/Morakot/API/DisbursementSheet/Search', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeDisbursementSearch():

	return mktofficer.getSearchOfficerByCurreny()

@app.route("/Morakot/DisbursementSheet/AddLoanContract", methods=['GET'])
@app.route("/Morakot/API/DisbursementSheet/AddLoanContract", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAddLoanContract():
	try:
		Amount 		= 0
		Account 	= ""
		Currency 	= ""
		Customer 	= ""
		ValueDate 	= ""
		Balance 	= 0
		LoanID 		= request.args.get("LoanID")
		LoanObj 	= MKT_LOAN_CONTRACT.query.get(LoanID)

		if LoanObj:
			CustomerObj = MKT_CUSTOMER.query.get(LoanObj.ContractCustomerID)
			Customer = CustomerObj.ID + " - " + CustomerObj.LastNameEn + " " + CustomerObj.FirstNameEn
			Account = LoanObj.Account
			AccObj = MKT_ACCOUNT.query.get(Account)
			Currency = AccObj.Currency
			ValueDate = LoanObj.ValueDate
			CurrencyObj=mktmoney.getCurrencyObj(AccObj.Currency)
			DisburseAmount= float(LoanObj.Disbursed)
			DetailObj = MKT_DISBURSE_DE.query
			if AccObj:
				ActualAmount = mktofficer.getActualAmount(DetailObj,LoanID,DisburseAmount)
				Amount 	= mktmoney.toMoney(ActualAmount,CurrencyObj)
				Balance = mktmoney.toMoney(float(AccObj.Balance),CurrencyObj)
				COMAmount = mktmoney.toMoney(float(1000),CurrencyObj)
				
		return jsonify(LoanID=LoanID,Customer=Customer,Currency=Currency,ValueDate=ValueDate, Amount=Amount, Account=Account,Balance=Balance, COMAmount = COMAmount)
	except:
		raise
@app.route("/Morakot/FilterGroup/", methods=['GET'])
@app.route("/Morakot/API/FilterGroup/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime

def routeFilterGroup():
	VBID  		= request.args.get('VBID') or request.args.get('ContractVB')
	search 		= request.args.get('q')
	view 		= request.args.get('view')
	GroupObj	= MKT_GROUP.query.filter(MKT_GROUP.VBID==VBID).filter(or_(MKT_GROUP.ID.ilike('%'+search+'%'), MKT_GROUP.GroupName.ilike('%'+search+'%'))).all()
	Data = []
	if GroupObj:
		for row in GroupObj:
			Data.append({'id':row.ID , 'text':row.ID +' - ' + row.GroupName})
	if view == 'yes' and Data == []:
		Data = [{'id':'' , 'text':'Search Group'}]
	return jsonify(items = Data)

@app.route("/Morakot/FilterVB/", methods=['GET'])
@app.route("/Morakot/API/FilterVB/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeFilterVB():
	OfficerID  		= str(request.args.get('Officer'))
	search 				= request.args.get('q')
	VBObj	= MKT_VB.query.filter(MKT_VB.OfficerID==OfficerID).filter(or_(MKT_VB.ID.ilike('%'+search+'%'), MKT_VB.Description.ilike('%'+search+'%'))).all()
	Data = []
	if VBObj:
		for row in VBObj:
			Data.append({'id':row.ID , 'text':row.ID +' - ' + row.Description})

	return jsonify(items = Data)

def loadCurrency():
	return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())

def loadOfficer():
	CurrentBranch = mktuser.getCurrentBranch()
	OfficerObj 	= MKT_OFFICER.query.filter(MKT_OFFICER.Branch ==CurrentBranch)
	return OfficerObj

def loadCurrentDate():
	return 	mktdate.getBankDate()


@app.route('/Morakot/GenerateDisbursement/<Operation>/Operation/', methods=['GET'])
@app.route('/Morakot/GenerateDisbursement/<Operation>/Operation/<ID>/', methods=['GET'])
@app.route('/Morakot/GenerateDisbursement/<Operation>/<ID>/', methods=['GET'])
@app.route('/Morakot/GenerateDisbursement/', methods=['GET','POST'])
@app.route('/Morakot/API/GenerateDisbursement/<Operation>/Operation/', methods=['GET'])
@app.route('/Morakot/API/GenerateDisbursement/<Operation>/Operation/<ID>/', methods=['GET'])
@app.route('/Morakot/API/GenerateDisbursement/<Operation>/<ID>/', methods=['GET'])
@app.route('/Morakot/API/GenerateDisbursement/', methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def GenerateDisbursement(Operation="",ID=""):

	ErrorMsg 		= []
	FieldRequired	= []
	QueryObj 		= []
	ResultObj 		= []
	DisburseObj 	= []
	OfficerObj 		= []
	CurrencyObj 	= []
	kwargs 			= []
	ListLoanID 		= []
	VBID 			= []
	Group 			= []

	TotalDisbursement 	= 0
	TotalLoanContract 	= 0
	OfficerBalance 		= 0
	BankDate 		= ""
	Action 			= "/Morakot/GenerateDisbursement/"
	li_html 		= ""
	Form 			= ""
	g_id 			= ID
	g_readonly 		= ""
	disabled 		= ""

	AccSetting 	= mktsetting.getAccSetting()
	if AccSetting:
		BaseCurrency = AccSetting.BaseCurrency

	DefaultCurrency = BaseCurrency if BaseCurrency else ''

	classToolbar 	= mkttool.clsToolbar()
	FormName 		= "FRM_GENERATE_DISBURSE"
	Officer 		= request.args.get("Officer") 				if "Officer" 			in request.args else ""
	Currency 		= request.args.get("Currency") 				if "Currency" 			in request.args else ""
	ValueDateStart 	= request.args.get("ValueDateStart")		if "ValueDateStart" 	in request.args else ""
	ValueDateEnd 	= request.args.get("ValueDateEnd")			if "ValueDateEnd" 		in request.args else ""
	OfficerAccount 	= request.args.get("OfficerAccount") 		if "OfficerAccount" 	in request.args else ""
	OfficerCategory = request.args.get("OfficerCategory") 		if "OfficerCategory" 	in request.args else ""
	VBID 			= request.args.get("VBID") 					if "VBID" 				in request.args else ""
	Group 			= request.args.get("Group") 				if "Group" 				in request.args else ""
	StatusSave 		= request.args.get("Save") 					if "Save" 				in request.args else ""

	ValueDateRange 	= "%s %s"%(ValueDateStart,ValueDateEnd)
	#List
	get_maxfield = 0
	formatField,currencyField = ["TotalDisbursement","TotalActualAmount"],"Currency"# self.objform.formatMoney() #call static method defined in form
	listfield = ["ID", "Officer","OfficerAccount", "OfficerCategory", "Currency", "ValueDate", "TotalDisbursement", "TotalActualAmount", "VBID", "Group" ]#self.objform.listField()
	
	LocationSetting 	= mktsetting.getAppSetting('LANGUAGE')
	# set default to curreny
	if LocationSetting == 'MYANMAR':
		DefaultCurrency = 'MMK'

	if request.args.get("ID")!=None:
		if Operation == "":
			Operation 	= "Search"

	# Overwrite Operation
	if Operation == "Generate":
		# Block check access right
		getCheck 	= checkAccess ("/Morakot/GenerateDisbursement/","New")
	else:
		# Block check access right
		getCheck 	= checkAccess ("/Morakot/GenerateDisbursement/",Operation)
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("disbursement/disbursement_sheet.html",ErrorMsg=ErrorMsg)

	# Get AuthLevel	
	FormObj = MKT_FORM.query.filter(MKT_FORM.URL=="GenerateDisbursement").first()
	if FormObj:
		NAuthorize = int(FormObj.NAuthorize)
	else:
		NAuthorize = 0

	#Initialize Object Table
	if NAuthorize == 0 :
		MainTable 	= MKT_DISBURSE
		DetailTable = MKT_DISBURSE_DE
	else:
		MainTable 	= MKT_DISBURSE_INAU
		DetailTable = MKT_DISBURSE_DE_INAU

	li_html 		= classToolbar.getToolbarevent("Cancel")

	#When record was saved.
	# ResultObj 		= mktofficer.getDisburseSheet(Resource,ID,Officer,Currency,ValueDate)
	
	if Operation == "New":
		g_id 			= mktautoid.getAutoID(FormName) if not ID else ID
		Form 			= "New"
		g_readonly		= "readonly"
		BankDate 		= str(loadCurrentDate())
		li_html 		= classToolbar.getToolbarevent("New")
		# ResultObj 		= mktofficer.getDisburseSheet(Resource,ID,Officer,Currency,ValueDate)
		if not g_id:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+"invalid ID","error")
			return render_template("disbursement/disbursement_sheet.html",Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)
		
		CheckDuplicateID = mktaudit.isDuplicate(MKT_DISBURSE,MKT_DISBURSE_INAU,MKT_DISBURSE_HIST,ID)
		if CheckDuplicateID[0]:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(CheckDuplicateID[1],"error")

		CheckRestoreID = mktaudit.isRestoreID(MKT_DISBURSE,MKT_DISBURSE_INAU,MKT_DISBURSE_HIST,ID)
		if CheckRestoreID[0]:
			flash("You're restoring a record from history with curr No: "+ CheckRestoreID[1],"error")

	elif Operation == "Generate":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("New")

		if StatusSave:
			ResultObj 			= mktofficer.getDisburseSheet(NAuthorize,ID,Officer,Currency,ValueDateRange,VBID, Group,"Save")
		else:
			ResultObj 			= mktofficer.getDisburseSheet(NAuthorize,ID,Officer,Currency,ValueDateRange,VBID, Group)

		TotalDisbursement 	= ResultObj['TotalDisbursement']
		TotalLoanContract 	= ResultObj['TotalLoanContract']
		OfficerBalance 		= ResultObj['OfficerBalance']
		ResultObj 			= ResultObj['ResultObj']
		if ResultObj == []:
			if not StatusSave:
				FieldRequired.append(('Loan Contract',"Your generate disburse don't have any contract."))

		# Block validation
		if not Officer:
			FieldRequired.append(('Officer','This field is required.'))

		if not Currency:
			FieldRequired.append(('Currency','This field is required.'))

		if not ValueDateStart:
			FieldRequired.append(('ValueDate','This field is required.'))

		if not OfficerAccount:
			FieldRequired.append(('OfficerAccount',"Officer doesn't have Wallet Account."))

		if not OfficerCategory:
			FieldRequired.append(('OfficerCategory','This field is required.'))

	elif Operation == "Edit":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("New")
		ResultObj 			= mktofficer.getDisburseSheet(NAuthorize,ID,Officer,Currency,ValueDateRange,VBID, Group,"Save")
		TotalDisbursement 	= ResultObj['TotalDisbursement']
		TotalLoanContract 	= ResultObj['TotalLoanContract']
		OfficerBalance 		= ResultObj['OfficerBalance']
		DisburseObj 		= ResultObj['DisburseObj']
		Currency 			= ResultObj['Currency']
		ResultObj 			= ResultObj['ResultObj']
		if not ResultObj:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+" Record not found...","error")

	elif Operation == "Search":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("Search")
		ID 				= request.args.get('ID',ID)
		g_id 			= ID
		disabled 		= "disabled"
		ResultObj 		= mktofficer.getDisburseSheet(NAuthorize,ID,Officer,Currency,ValueDateRange,VBID, Group,"Save")
		# checkHist
		
		if ID.find('@') != -1:
			ResultObj 			= mktofficer.getDisburseSheet(NAuthorize,ID,Officer,Currency,ValueDateRange,VBID, Group,"Hist")
			li_html 		= classToolbar.getToolbarevent("readonly")
		TotalDisbursement 	= ResultObj['TotalDisbursement']
		TotalLoanContract 	= ResultObj['TotalLoanContract']
		OfficerBalance 		= ResultObj['OfficerBalance']
		DisburseObj 		= ResultObj['DisburseObj']
		ResultObj 			= ResultObj['ResultObj']
		if DisburseObj:
			DisbursedStatus = DisburseObj.DisbursedStatus
			Status			= DisburseObj.Status
			if DisbursedStatus == "Y":
				li_html 		= classToolbar.getToolbarevent("readonly")
		
		if not ResultObj:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+" Record not found...","error")
			
	elif Operation == "Authorize":
		Form 			= ""
		g_readonly 		= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		Disburse 		= MKT_DISBURSE_INAU.query.get(ID)
		if not Disburse:
			flash(msg_error + "No record to authorize.","error")
		else:
			Inputter	= Disburse.Inputter
			Createdon 	= Disburse.Createdon
			Branch 		= Disburse.Branch
			Status 		= Disburse.Status
			if not Status == "RNAU":
				
				# Check Generate Disbursement Sheet
				DisburseDetail = MKT_DISBURSE_DE_INAU.query.\
							  filter(MKT_DISBURSE_DE_INAU.ID == ID).\
							  all()
							  
				if not DisburseDetail:
					flash(msg_error + " Generate Disbursement Sheet Detail not found.","error")
					
			CheckAuth 	= mktofficer.setAuthorizeDisbursementSheet(NAuthorize,ID,Status,Inputter,Createdon,Branch)
			if not CheckAuth[0]:
				flash(CheckAuth[1],"error")
			else:
				flash(CheckAuth[1])
				db.session.commit()
		if not ("API" in request.url or checkContentType()=="json"):
			return render_template("disbursement/disbursement_sheet.html",Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)
	
	elif Operation == "Reverse":
		Form 			= ""
		g_readonly 		= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		CheckReverse 	= mktofficer.setReverseDisbursementSheet(NAuthorize,ID)
		if not CheckReverse[0]:
			flash(CheckReverse[1],"error")
		else:
			flash(CheckReverse[1])
			db.session.commit()
		if not ("API" in request.url or checkContentType()=="json"):
			return render_template("disbursement/disbursement_sheet.html",Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)
	
	elif Operation == "Delete":
		Form 			= ""
		g_readonly 		= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		ObjDelete 		= mktofficer.setDeleteDisbursement(ID)
		if not ObjDelete[0]:
			flash(ObjDelete[1],"error")
			db.session.rollback()
		else:
			flash(ObjDelete[1])
			db.session.commit()
		if not ("API" in request.url or checkContentType()=="json"):
			return render_template("disbursement/disbursement_sheet.html",
										Action=Action,
										li_html=li_html,
										Form=Form,
										g_id=g_id,
										g_readonly=g_readonly)
	elif Operation == "ListLive":

		template="list.html"
		getparam=mkttool.render_param(get_maxfield,MKT_DISBURSE_INAU)
		filterfield=["DisbursedStatus*EQ*N"]
		mlist=mktformmodel.List(MKT_DISBURSE,getparam, listfield,filterfield) 

		if "API" in request.url or checkContentType()=="json":
			return renderDisbursementJson(request,
											data_custom = {'ListError': FieldRequired},
											querys=mlist.mktList(), 
											fields=mlist.fields,
											nfield=get_maxfield,
											searchfields=mlist.searchfields,
											formatMoney=formatField,
											currencyField=currencyField,
											toMoney=mktmoney.toMoney,
											float=float,
											curobj=mktmoney.getCurrencyObj,
											action = Action, 
											li_html = li_html, 
											g_id = g_id, 
											disabled = disabled, 
											hidEdit=False, 
											formReadOnly=False,
											operation=Operation)

		return render_template(template,querys=mlist.mktList(),fields=mlist.fields,searchfields=mlist.searchfields,nfield=get_maxfield,formatMoney=formatField,currencyField=currencyField,toMoney=mktmoney.toMoney,float=float,curobj=mktmoney.getCurrencyObj,hidEdit=False,formReadOnly=False)
	
	elif Operation == "ListAuth":

		template="list.html"
		getparam=mkttool.render_param(get_maxfield,MKT_DISBURSE_INAU)
		filterfield=["DisbursedStatus*EQ*N"]
		mlist=mktformmodel.List(MKT_DISBURSE_INAU,getparam, listfield,filterfield) #extend class
		if "API" in request.url or checkContentType()=="json":
			return renderDisbursementJson(request,
											data_custom = {'ListError': FieldRequired},
											querys=mlist.mktList(), 
											fields=mlist.fields,
											nfield=get_maxfield,
											searchfields=mlist.searchfields,
											formatMoney=formatField,
											currencyField=currencyField,
											toMoney=mktmoney.toMoney,
											float=float,
											curobj=mktmoney.getCurrencyObj,
											action = Action, 
											li_html = li_html, 
											g_id = g_id, 
											disabled = disabled, 
											hidEdit=False, 
											formReadOnly=False,
											operation=Operation)
			
		return render_template(template,querys=mlist.mktList(),fields=mlist.fields,searchfields=mlist.searchfields,nfield=get_maxfield,formatMoney=formatField,currencyField=currencyField,toMoney=mktmoney.toMoney,float=float,curobj=mktmoney.getCurrencyObj,hidEdit=False,formReadOnly=False)

	elif Operation == "ListHist":

		template="list.html"
		getparam=mkttool.render_param(get_maxfield,MKT_DISBURSE_HIST)
		filterfield=["DisbursedStatus*EQ*N"]
		mlist=mktformmodel.List(MKT_DISBURSE_HIST,getparam, listfield,filterfield) #extend class
		if "API" in request.url or checkContentType()=="json":
			return renderDisbursementJson(request,
											data_custom = {'ListError': FieldRequired},
											querys=mlist.mktList(), 
											fields=mlist.fields,
											nfield=get_maxfield,
											searchfields=mlist.searchfields,
											formatMoney=formatField,
											currencyField=currencyField,
											toMoney=mktmoney.toMoney,
											float=float,
											curobj=mktmoney.getCurrencyObj,
											action = Action, 
											li_html = li_html, 
											g_id = g_id, 
											disabled = disabled, 
											hidEdit=False, 
											formReadOnly=False,
											operation=Operation)
		
		return render_template(template,querys=mlist.mktList(),fields=mlist.fields,searchfields=mlist.searchfields,nfield=get_maxfield,formatMoney=formatField,currencyField=currencyField,toMoney=mktmoney.toMoney,float=float,curobj=mktmoney.getCurrencyObj,hidEdit=False,formReadOnly=False)
 
	elif Operation == "Cancel":
		Form 			= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")

	else:
		Form 			= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		

	if request.method == "POST":
		kwargs			= request.form
		# flash(kwargs)
		# print kwargs
		DisburseID		= kwargs["ID"]				if "ID" 				in kwargs else ""
		Officer 		= kwargs["Officer"]			if "Officer" 			in kwargs else ""
		Currency 		= kwargs["Currency"]		if "Currency" 			in kwargs else ""
		ValueDateStart  = kwargs["ValueDateStart"]	if "ValueDateStart" 	in kwargs else ""
		ValueDateEnd 	= kwargs["ValueDateEnd"]	if "ValueDateEnd" 		in kwargs else ""
		VBID 			= kwargs["VBID"]			if "VBID" 				in kwargs else ""
		Group 			= kwargs["Group"]			if "Group" 				in kwargs else ""

		ListLoanID		= [kwargs[str(item)] for item in kwargs if "LoanID" in item]
		ListLoanID.sort()
		
		
		InsertObj = mktofficer.insertDisbursementSheet(NAuthorize,DisburseID,kwargs)
		Status 	= InsertObj["Status"]
		Url 	= InsertObj["Url"]
		Message = InsertObj["Message"]
		
		#Error
		if not Status :
			ResultObj = str(request.form['ResultObj'].replace("'", '"'))
			ResultObj = eval(ResultObj)
			
			g_id 			= DisburseID
			Form 			= "New"
			g_readonly		= "readonly"
			li_html 		= classToolbar.getToolbarevent("New")

			FieldRequired.append(['Account',Message])
		else:
			#Successfully
			flash(Message)
			db.session.commit()
			db.session.close()
		# return redirect(Url)

	OfficerObj			= loadOfficer().order_by(MKT_OFFICER.ID.asc())#MKT_OFFICER.query.get(Officer)
	CurrencyObj 		= loadCurrency()
	VBObj				= MKT_VB.query
	GroupObj			= MKT_GROUP.query

	TotalCompulsory 	= 0
	TotalCompulsory = sum([float(row['CompulsoryAmount']) for row in ResultObj])

	# Get Charge From Each Loan Contract
	ChargeInRow = {}
	ChargeDict = collections.defaultdict(set)
	ChargeMap  = {}

	for row in ResultObj :
		LoanID = str(row["ID"]).strip()
		Currency = str(row['Currency'])
		LoanChargeObj 	= mktofficer.getLoanUpfrontCharge(LoanID, Currency)

		if LoanChargeObj :
			for Charge in LoanChargeObj:
				ChargeDict[str(Charge.ChargeKey)].add(str(Charge.Description))
				ChargeInRow.update({str(Charge[0]): float(Charge[1])})

			row.update({"UpFrontCharge":ChargeInRow})
			ChargeInRow = {}
		else :
			# To prevent jinja error when loan have no charge
			row.update({'UpFrontCharge': {}})
		
	for key, val in ChargeDict.iteritems():
		ChargeMap.update({key: list(val)[0]})

	ChargeKeyList = ""
	for Charge in list(ChargeDict.keys()) :
		ChargeKeyList += Charge + ","

	if "API" in request.url or checkContentType()=="json":
		return renderDisbursementJson(request, 
								data_custom = {'ListError': FieldRequired},
								RedirectUrl = "/Morakot/GenerateDisbursement" if request.method == "POST" or Operation in ['Delete', 'Reverse', 'Authorize'] else '',
								ResultObj = ResultObj,
								Officer = Officer,
								action = Action,
								float=float,
								li_html = li_html,
								g_id = g_id,
								g_readonly = g_readonly,
								disabled = disabled,
								toMoney=mktmoney.toMoney,
								getCurrencyObj=mktmoney.getCurrencyObj,
								operation = Operation)

	return render_template("disbursement/disbursement_sheet.html",
							Action=Action,
							li_html=li_html,
							Form=Form,
							g_id=g_id,
							g_readonly=g_readonly,
							disabled=disabled,
							ErrorMsg=ErrorMsg,
							FieldRequired=FieldRequired,
							float=float,
							BankDate=BankDate,
							kwargs=kwargs,
							QueryObj=QueryObj,
							ResultObj=ResultObj,
							toMoney=mktmoney.toMoney,
							getCurrencyObj=mktmoney.getCurrencyObj,
							OfficerObj=OfficerObj,
							DisburseObj=DisburseObj,
							CurrencyObj=CurrencyObj,
							Officer=Officer,
							Currency=Currency,
							OfficerBalance=OfficerBalance,
							TotalDisbursement=TotalDisbursement,
							TotalLoanContract=TotalLoanContract,
							getActualAmount=mktofficer.getActualAmount,
							ListLoanID=ListLoanID,
							TotalCompulsory=TotalCompulsory,
							VBObj=VBObj,
							GroupObj=GroupObj,
							DefaultCurrency=DefaultCurrency,
							ChargeList=ChargeMap,
							ChargeKeyList=ChargeKeyList)

@app.route('/Morakot/DisbursementSheet/<DisburseID>/Save/', methods=['GET','POST'])
@app.route('/Morakot/API/DisbursementSheet/<DisburseID>/Save/', methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def routeDisbursementSheetSave(DisburseID=""):
	ErrorMsg = []
	Url 	 = ""
	Officer 	= request.args.get("Officer") 	if "Officer" 	in request.args else ""
	Resource	= request.args.get("Resource") 	if "Resource" 	in request.args else ""
	Currency 	= request.args.get("Currency") 	if "Currency" 	in request.args else ""
	ValueDate 	= request.args.get("ValueDate") if "ValueDate" 	in request.args else ""
	VBID 		= request.args.get("VBID") 		if "VBID" 		in request.args else ""
	Group 		= request.args.get("Group") 	if "Group" 		in request.args else ""

	Url = "/Morakot/DisbursementSheet/%s/?Resource=%s&Officer=%s&Currency=%s&ValueDate=%s&VBID=%s&Group=%s"%(DisburseID,Resource,Officer,Currency,ValueDate,VBID,Group)
	# Block check access right
	getCheck 	= checkAccess ("/Morakot/GenerateDisbursement/","New")
	if getCheck != True:	
		ErrorMsg.append(msg_error+msg_permission)
		Url = "/Morakot/DisbursementSheet/%s/"% DisburseID
		return redirect(Url)

	if request.method == "POST":
		# flash(request.form)
		InsertObj = mktofficer.insertDisbursementSheet(DisburseID,request.form,request.args)
		Status 	= InsertObj["Status"]
		Url 	= InsertObj["Url"]
		Message = InsertObj["Message"]
		#Error
		if not Status :
			flash(msg_error+Message,"error")
		else:
			#Successfully
			flash(Message)

		db.session.commit()
		db.session.close()

		return redirect(Url)
	return redirect(Url)

def renderDisbursementJson(request, **kwargs):
	FormModel	= ''
	RequestForm	= request.form
	ObjForm		= FRM_DISBURSE
	Model		= [MKT_DISBURSE]

	if kwargs.get('operation') in ["ListLive", "ListAuth", "ListHist"]:
		if kwargs.get('operation') == "ListAuth":
			kwargs['model']	= MKT_DISBURSE_INAU
		elif kwargs.get('operation') == "ListHist":
			kwargs['model']	= MKT_DISBURSE_HIST
		else:
			kwargs['model']	= Model[0]
		kwargs['important_field'] = ObjForm.importantField()
		kwargs['page'] 		= int(request.args.get("offset", 1))
		kwargs['per_page']	= int(request.args.get("limit", 15))
		kwargs['order_by']	= str(request.args.get("order_by" , ""))
		kwargs['filter_by']	= str(request.args.get("filter_by" , ""))
		kwargs['search']	= str(request.args.get("search", ""))
	else:
		if request.method == "GET":
			objdb		= manipulatedatatodb(ObjForm, Model, RequestForm, kwargs.get('g_id')) # create instance object
			FormModel	= objdb.form_model()
		elif request.method == "POST":
			ObjForm 	= request.form

		Results = []
		for Result in kwargs.get('ResultObj',[]):
			Currency = mktmoney.getCurrencyObj(Result['Currency'])
			if "ChargeDict" in Result:
				Result["Welfarefund"]   = Result["ChargeDict"].get("Wel",mktmoney.toMoney(float(0), Currency))
				Result["Documentation"] = Result["ChargeDict"].get("Doc",mktmoney.toMoney(float(0), Currency))
				del Result["ChargeDict"]
			if 'CompulsoryAmount' in Result:
				Result['CompulsoryAmount'] = str(mktmoney.toMoney(float(Decimal(Result['CompulsoryAmount']).normalize()),Currency))
			Results.append(Result)
		kwargs["ResultObj"] = Results
		kwargs['form'] 		= FormModel
		kwargs['custom_config'] = {
			'Sections': 	[{ 'title': '', 'index': [5, 0, 1, 7, 8, 3, 4, 2, 6, 9] }],
			'DisabledField':{'Amount': False},
			'MoneyField': 	{'Amount': mktgrouloan.getMoneyField('Currency', 'Amount')},
			'GParams': 		['Officer','Currency','ValueDateStart','ValueDateEnd','VBID','Group','OfficerAccount', 'OfficerCategory','TotalDisbursement'],
			'GUrl': 		'/GenerateDisbursement/Generate/%s/?' % kwargs.get('g_id')
		}

	
	return mktgrouloan.renderCustomJsonFormat(**kwargs)
	
