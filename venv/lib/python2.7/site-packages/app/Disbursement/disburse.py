'''
Created Date: 23 Sep 2015
Author: Sovankiry Rim

Modified by: Sovankiry
Modified Date: 01 Oct 2015
All Right Reserved Morakot Technology
Description :

'''

from app.mktcore.imports 	import *
from flask import request,flash,jsonify,redirect
from .models import *
from .views import *
from decimal 					import *
from app.Account.models import *
from app.Officer.models 		import *
from app.LoanContract.models 	import *
from app.Currency.models 		import *
from app.Customer.models 		import *
from app.Module.models 			import MKT_FORM
from app.Charge.models 			import MKT_CHARGE
from app.ChargeRate.models 		import MKT_CHARGE_RATE

import app.tools.mktofficer 	as mktofficer
import app.tools.mktmoney 		as mktmoney
import app.tools.user 			as mktuser
import app.tools.mktdb 			as mktdb
import app.mktcore.autoid 		as mktautoid
import app.tools.grouploan.mktgrouploan	as mktgrouloan
import app.mktcore.formmodel 	as mktformmodel
import app.tools.mktteller 		as mktteller
import app.tools.mktaudit 		as mktaudit
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktsetting 	as mktsetting
import app.tools.mktdate 		as mktdate
import app.tools.mkttool 		as mkttool

@app.route('/Morakot/Disbursement/<Operation>/Operation/', methods=['GET'])
@app.route('/Morakot/Disbursement/<Operation>/Operation/<ID>/', methods=['GET'])
@app.route('/Morakot/Disbursement/<Operation>/<ID>/', methods=['GET'])
@app.route('/Morakot/Disbursement/', methods=['GET','POST'])
@app.route('/Morakot/API/Disbursement/<Operation>/Operation/', methods=['GET'])
@app.route('/Morakot/API/Disbursement/<Operation>/Operation/<ID>/', methods=['GET'])
@app.route('/Morakot/API/Disbursement/<Operation>/<ID>/', methods=['GET'])
@app.route('/Morakot/API/Disbursement/', methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def DisbursementSettlement(Operation="",ID=""):
	try:
		ErrorMsg 		= []
		ListError 		= []
		QueryObj 		= []
		DisburseObj 	= []
		OfficerObj 		= []
		CurrencyObj 	= []
		DicAmount  		= {}
		TotalDisburse	= 0
		TotalActual 	= 0
		OfficerBalance 	= 0
		CountLoan 		= 0
		Officer 		= ""
		OfficerAccount 	= ""
		Currency 		= ""
		Action 			= "/Morakot/Disbursement/"
		Form 			= ""
		g_id 			= ID
		g_readonly 		= ""
		disabled 		= ""
		VBID 			= ""
		Group 			= ""
		li_html 		= ""
		# Get Charge From Each Loan Contract
		ChargeDict 		= collections.defaultdict(set)
		ChargeMap 		= {}
		ChargeKeyList 	= ""

		# List
		get_maxfield = 0
		formatField,currencyField = ["TotalDisbursement","TotalActualAmount"],"Currency"# self.objform.formatMoney() #call static method defined in form
		listfield = ["ID", "Officer","OfficerAccount", "OfficerCategory", "Currency", "ValueDate", "TotalDisbursement", "TotalActualAmount", "VBID", "Group" ]#self.objform.listField()


		if request.args.get("ID")!=None:
			if Operation == "":
				Operation 	= "Search" 

		# Block check access right
		getCheck 	= checkAccess ("/Morakot/Disbursement/",Operation)
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			if not ("API" in request.url or checkContentType()=="json"):
				return render_template("disbursement/disbursement.html",ErrorMsg=ErrorMsg)
		
		# Get AuthLevel	
		FormObj = MKT_FORM.query.filter(MKT_FORM.URL=="Disbursement").first()
		if FormObj:
			NAuthorize = int(FormObj.NAuthorize)
		else:
			NAuthorize = 0

		classToolbar 	= mkttool.clsToolbar()
		if Operation == "New":
			Form 			= "New"
			g_readonly		= "readonly"
			li_html 		= classToolbar.getToolbarevent("New")
			DisbursementSheet 	= mktofficer.getDisbursementSheet(ID,"New")
			if DisbursementSheet['Status']:
				QueryObj		= DisbursementSheet['QueryObj']
				DisburseObj 	= DisbursementSheet['DisburseObj']
				OfficerObj		= DisbursementSheet['OfficerObj']
				OfficerAccount 	= DisbursementSheet['OfficerAccount']
				OfficerBalance	= DisbursementSheet['OfficerBalance']
				Currency 		= DisbursementSheet['Currency']
				TotalDisburse	= DisbursementSheet['TotalDisburse']
				TotalActual 	= DisbursementSheet['TotalActual']
				CountLoan 		= DisbursementSheet['CountLoan']
				DisbursedStatus = DisbursementSheet['DisbursedStatus']
				VBID 			= DisbursementSheet['VBID']
				Group 			= DisbursementSheet['Group']
				if DisbursedStatus == "Y":
					Form 			= ""
					g_readonly 		= ""
					li_html 		= classToolbar.getToolbarevent("Show")
					flash(msg_error+" Disbursement sheet was already to disbursed.","error")
					if not ("API" in request.url or checkContentType()=="json"):
						return render_template("disbursement/disbursement.html",
									Action=Action,
									li_html=li_html,
									Form=Form,
									g_id=g_id,
									g_readonly=g_readonly,
									ErrorMsg=ErrorMsg)
			else:
				Form 			= ""
				g_readonly		= ""
				li_html 		= classToolbar.getToolbarevent("Show")
				flash(DisbursementSheet['Message'],"error")

		elif Operation == "Edit":
			Form 			= "New"
			g_readonly		= "readonly"
			li_html 		= classToolbar.getToolbarevent("New")
			DisbursementSheet 	= mktofficer.getDisbursementSheet(ID,"Edit")
			if DisbursementSheet['Status']:

				QueryObj		= DisbursementSheet['QueryObj']
				DisburseObj 	= DisbursementSheet['DisburseObj']
				OfficerObj		= DisbursementSheet['OfficerObj']
				OfficerAccount 	= DisbursementSheet['OfficerAccount']
				OfficerBalance	= DisbursementSheet['OfficerBalance']
				Currency 		= DisbursementSheet['Currency']
				TotalDisburse	= DisbursementSheet['TotalDisburse']
				TotalActual 	= DisbursementSheet['TotalActual']
				CountLoan 		= DisbursementSheet['CountLoan']
				DisbursedStatus = DisbursementSheet['DisbursedStatus']
				VBID 			= DisbursementSheet['VBID']
				Group 			= DisbursementSheet['Group']
				if DisburseObj:
					if DisburseObj.Status == "AUTH":
						g_readonly		= "readonly"
						disabled 		= "disabled"
						li_html 		= classToolbar.getToolbarevent("readonly")
			else:
				Form 			= ""
				g_id 			= ""
				g_readonly 		= ""
				li_html 		= classToolbar.getToolbarevent("Show")
				flash(DisbursementSheet['Message'],"error")

		elif Operation == "ListLive":
			if "API" in request.url or checkContentType()=="json":
				getparam=mkttool.render_param(get_maxfield,MKT_DISBURSE)
				filterfield=["DisbursedStatus*EQ*Y"]
				mlist=mktformmodel.List(MKT_DISBURSE,getparam, listfield,filterfield) 
				return renderDisbursementSettlementJson(request,
													querys=mlist.mktList(), 
													fields=mlist.fields,
													nfield=get_maxfield,
													searchfields=mlist.searchfields,
													formatMoney=formatField,
													currencyField=currencyField,
													toMoney=mktmoney.toMoney,
													float=float,
													curobj=mktmoney.getCurrencyObj,
													action = Action, 
													li_html = li_html, 
													g_id = g_id, 
													disabled = disabled, 
													hidEdit=False, 
													formReadOnly=False,
													operation=Operation)

			QueryObj = mktofficer.getListLive()
			return render_template("disbursement/disbursement_list.html",
							QueryObj=QueryObj)
		
		elif Operation == "ListAuth":
			if "API" in request.url or checkContentType()=="json":
				getparam=mkttool.render_param(get_maxfield,MKT_DISBURSE_INAU)
				filterfield=["DisbursedStatus*EQ*I"]
				mlist=mktformmodel.List(MKT_DISBURSE_INAU,getparam, listfield,filterfield) 
				return renderDisbursementSettlementJson(request,
													querys=mlist.mktList(), 
													fields=mlist.fields,
													nfield=get_maxfield,
													searchfields=mlist.searchfields,
													formatMoney=formatField,
													currencyField=currencyField,
													toMoney=mktmoney.toMoney,
													float=float,
													curobj=mktmoney.getCurrencyObj,
													action = Action, 
													li_html = li_html, 
													g_id = g_id, 
													disabled = disabled, 
													hidEdit=False, 
													formReadOnly=False,
													operation=Operation)
			QueryObj = mktofficer.getListAuth()
			return render_template("disbursement/disbursement_list.html",
							QueryObj=QueryObj)

		elif Operation == "ListHist":
			if "API" in request.url or checkContentType()=="json":
				getparam=mkttool.render_param(get_maxfield,MKT_DISBURSE_HIST)
				filterfield=["DisbursedStatus*EQ*N"]
				mlist=mktformmodel.List(MKT_DISBURSE_HIST,getparam, listfield, filterfield) 
				return renderDisbursementSettlementJson(request,
													querys=mlist.mktList(), 
													fields=mlist.fields,
													nfield=get_maxfield,
													searchfields=mlist.searchfields,
													formatMoney=formatField,
													currencyField=currencyField,
													toMoney=mktmoney.toMoney,
													float=float,
													curobj=mktmoney.getCurrencyObj,
													action = Action, 
													li_html = li_html, 
													g_id = g_id, 
													disabled = disabled, 
													hidEdit=False, 
													formReadOnly=False,
													operation=Operation)

		elif Operation == "Delete":
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Show")
			ObjDelete = mktofficer.setDeleteDisbursement(ID)
			if not ObjDelete[0]:
				flash(ObjDelete[1],"error")
				db.session.rollback()
			else:
				flash(ObjDelete[1])
				db.session.commit()
			if not ("API" in request.url or checkContentType()=="json"):
				return render_template("disbursement/disbursement.html",
										Action=Action,
										li_html=li_html,
										Form=Form,
										g_id=g_id,
										g_readonly=g_readonly)
		elif Operation == "Authorize":
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Show")
			ObjAuth = mktofficer.setAuthorizeDisbursement(ID)
			if not ObjAuth[0]:
				flash(ObjAuth[1],"error")
				db.session.rollback()
			else:
				flash(ObjAuth[1])
				db.session.commit()
			if not ("API" in request.url or checkContentType()=="json"):
				return render_template("disbursement/disbursement.html",
										Action=Action,
										li_html=li_html,
										Form=Form,
										g_id=g_id,
										g_readonly=g_readonly)
		elif Operation == "Reverse":
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Show")
			flash(msg_warning+"The record was authorized and could not be reversed.","error")
			if not ("API" in request.url or checkContentType()=="json"):	
				return render_template("disbursement/disbursement.html",
										Action=Action,
										li_html=li_html,
										Form=Form,
										g_id=g_id,
										g_readonly=g_readonly)
		elif Operation == "Search":
			Form 			= "New"
			g_readonly		= "readonly"
			li_html 		= classToolbar.getToolbarevent("Search")
			DisburseID 		= request.args.get('ID',ID)
			g_id 			= DisburseID
			DisbursementSheet 	= mktofficer.getDisbursementSheet(DisburseID,"Search")

			if DisbursementSheet['Status']:
				QueryObj		= DisbursementSheet['QueryObj']
				DisburseObj 	= DisbursementSheet['DisburseObj']
				OfficerObj		= DisbursementSheet['OfficerObj']
				OfficerAccount 	= DisbursementSheet['OfficerAccount']
				OfficerBalance	= DisbursementSheet['OfficerBalance']
				Currency 		= DisbursementSheet['Currency']
				TotalDisburse	= DisbursementSheet['TotalDisburse']
				TotalActual 	= DisbursementSheet['TotalActual']
				CountLoan 		= DisbursementSheet['CountLoan']
				DisbursedStatus = DisbursementSheet['DisbursedStatus']
				VBID 			= DisbursementSheet['VBID']
				Group 			= DisbursementSheet['Group']
				disabled 		= "disabled"
				if DisburseObj.Status=="AUTH":
					li_html 		= classToolbar.getToolbarevent("readonly")
			else:
				Form 			= ""
				g_readonly 		= ""
				li_html 		= classToolbar.getToolbarevent("Show")
				flash(msg_not_found_0,"error")
				if not ("API" in request.url or checkContentType()=="json"):
					return render_template("disbursement/disbursement.html",
								Action=Action,
								li_html=li_html,
								Form=Form,
								g_id=g_id,
								g_readonly=g_readonly,
								ErrorMsg=ErrorMsg)

		elif Operation == "Cancel":
			Form 			= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Show")
		else:
			Form 			= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Show")

		for row in QueryObj :
			LoanID = str(row.ID).strip()
			Currency = str(row.Currency)

			LoanChargeObj 	= mktofficer.getLoanUpfrontCharge(LoanID, Currency)
			if LoanChargeObj :
				for Charge in LoanChargeObj:
					ChargeDict[str(Charge[0])].add(str(Charge[2]))

		for key, val in ChargeDict.iteritems():
			ChargeMap.update({key: list(val)[0]})

		for Charge in list(ChargeDict.keys()) :
			ChargeKeyList += Charge + ","

		#Block Save
		if request.method=="POST":
			DisburseID			= request.form['ID']
			kwargs				= request.form
			
			DicReference 		= {}
			TotalActualAmount 	= 0
			ListLoanID			= [item for item in kwargs if "LoanID" in item] # list of Loan'
			ListAmount			= [item for item in kwargs if "Amount" in item] # list of Loan
			ListCompulsory		= [item for item in kwargs if "Compulsory" in item] # list of Loan
			# Store ActualAmount when user change
			for row in ListAmount:
			 	DicAmount.update({row:kwargs[row]})
			DicCompul = {}
			for row in ListCompulsory:
			 	DicCompul.update({row:kwargs[row]})

			ListAmount.sort()
			ListLoanID.sort()

			g_id 			= DisburseID
			Form 			= "New"
			g_readonly		= "readonly"
			li_html 		= classToolbar.getToolbarevent("New")
			# During validation catch we need to show value again
			DisbursementSheet 	= mktofficer.getDisbursementSheet(DisburseID)
			if DisbursementSheet['Status']:
				QueryObj		= DisbursementSheet['QueryObj']
				OfficerObj		= DisbursementSheet['OfficerObj']
				OfficerAccount 	= DisbursementSheet['OfficerAccount']
				OfficerBalance	= DisbursementSheet['OfficerBalance']
				Currency 		= DisbursementSheet['Currency']
				TotalDisburse	= DisbursementSheet['TotalDisburse']
				TotalActual 	= DisbursementSheet['TotalActual']
				CountLoan 		= DisbursementSheet['CountLoan']
				DisburseObj 	= DisbursementSheet['DisburseObj']
				VBID 			= DisbursementSheet['VBID']
				Group 			= DisbursementSheet['Group']

			DisburseMain 	= MKT_DISBURSE.query.filter(MKT_DISBURSE.ID==DisburseID)
			DisburseDetail 	= MKT_DISBURSE_DE.query.filter(MKT_DISBURSE_DE.ID==DisburseID)

			#Block Validation
			if len(ListLoanID)==0:
				Form 			= ""
				g_readonly 		= ""
				li_html 		= classToolbar.getToolbarevent("Show")
				flash(msg_error+" No Loan Contract to disbursement.","error")
				if not ("API" in request.url or checkContentType()=="json"):
					return render_template("disbursement/disbursement.html",
							Action=Action,
							li_html=li_html,
							Form=Form,
							g_id=g_id,
							g_readonly=g_readonly,
							ErrorMsg=ErrorMsg)

			if len(ListLoanID) > DisburseDetail.count():

				Form 			= ""
				g_readonly 		= ""
				li_html 		= classToolbar.getToolbarevent("Show")
				flash(msg_error+" Current total Loan Contract to disbursement was more than disbursement sheet. Please re-generate disbursement sheet again.","error")
				if not ("API" in request.url or checkContentType()=="json"):
					return render_template("disbursement/disbursement.html",
								Action=Action,
								li_html=li_html,
								Form=Form,
								g_id=g_id,
								g_readonly=g_readonly,
								ErrorMsg=ErrorMsg)

			elif len(ListLoanID) < DisburseDetail.count():
				Form 			= ""
				g_readonly 		= ""
				li_html 		= classToolbar.getToolbarevent("Show")
				flash(msg_error+" Current total Loan Contract to disbursement was less than disbursement sheet. Please re-generate disbursement sheet again.","error")
				if not ("API" in request.url or checkContentType()=="json"):
					return render_template("disbursement/disbursement.html",
								Action=Action,
								li_html=li_html,
								Form=Form,
								g_id=g_id,
								g_readonly=g_readonly,
								ErrorMsg=ErrorMsg)

			#Check Duplicate LoanID
			DuplicateLoan   = [x for x in ListLoanID if ListLoanID.count(x) > 1]
			if DuplicateLoan:
				Form 			= ""
				g_readonly 		= ""
				li_html 		= classToolbar.getToolbarevent("Show")
				flash(msg_error+" Duplicate loan contract.")
				if not ("API" in request.url or checkContentType()=="json"):
					return render_template("disbursement/disbursement.html",
											Action=Action,
											li_html=li_html,
											Form=Form,
											g_id=g_id,
											g_readonly=g_readonly,
											ErrorMsg=ErrorMsg)
			DicLoan = {}
			DicCompulsory = {}
			DicCompulsoryAmount = {}

			for row in ListLoanID:
				LoanID = str(kwargs[row])
				if "API" in request.url or checkContentType()=="json":
					Amount = str(kwargs['ActualAmount_%s'%LoanID]).replace(',','')
					ComAmount = str(kwargs['ActualCompulsory_%s'%LoanID]).replace(',','')	
				else:
					Amount = str(kwargs['Amount_%s'%LoanID]).replace(',','')
					ComAmount = str(kwargs['Compulsory_%s'%LoanID]).replace(',','')
				Amount = float(Amount)
				DicLoan.update({LoanID:Amount})
				DicCompulsoryAmount.update({LoanID:ComAmount})

			# get id of compulsory from acc setting in term deposit setting
			AccCOM 	= str(mktsetting.getAppSetting('ACC_PRODUCT_COMPULSORY'))
			for item in QueryObj:
				if item.Compulsory>0:
					AccCompulsoryObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==item.ContractCustomerID).\
														 filter(MKT_ACCOUNT.Currency==item.Currency).\
														 filter(MKT_ACCOUNT.AccProduct == AccCOM).first()
					if AccCompulsoryObj:
						DicCompulsory.update({AccCompulsoryObj.ID:str(DicCompulsoryAmount[item.ID])+"-"+item.ID,item.ID:DicCompulsoryAmount[item.ID]})
			ObjCommit 	= mktofficer.setDisbursement(NAuthorize,DisburseMain,DisburseDetail,DisburseID,DicLoan,DicCompulsory)
			if not ObjCommit[0]:
				flash(msg_error+ObjCommit[1],"error")
				db.session.rollback()
				if not ("API" in request.url or checkContentType()=="json"):
					return render_template("disbursement/disbursement.html",
											Action=Action,
											li_html=li_html,
											Form=Form,
											g_id=g_id,
											g_readonly=g_readonly,
											ErrorMsg=ErrorMsg,
											ListError=ListError,
											QueryObj=QueryObj,
											DisburseObj=DisburseObj,
											formatNumber=mktmoney.formatNumber,
											OfficerObj=OfficerObj,
											Officer=Officer,
											Currency=Currency,
											OfficerBalance=OfficerBalance,
											TotalDisburse=TotalDisburse,
											TotalActual=TotalActual,
											CountLoan=CountLoan,
											DicAmount=DicAmount,
											DicCompul=DicCompul,
											VBID=VBID,
											Group=Group,
											ChargeList=ChargeMap,
											ChargeKeyList=ChargeKeyList)
			else:
				db.session.commit()
				db.session.close()
				flash(ObjCommit[1])
				if not ("API" in request.url or checkContentType()=="json"):
					return redirect("/Morakot/Disbursement/")

		if "API" in request.url or checkContentType()=="json":
			return renderDisbursementSettlementJson(request, 
									RedirectUrl = "/Morakot/Disbursement" if request.method == "POST" or Operation in ['Delete', 'Reverse', 'Authorize'] else '',
									QueryObj = QueryObj,
									Officer = Officer,
									action = Action,
									float=float,
									li_html = li_html,
									g_id = g_id,
									g_readonly = g_readonly,
									disabled = disabled,
									toMoney=mktmoney.toMoney,
									getCurrencyObj=mktmoney.getCurrencyObj,
									operation = Operation)
	
		return render_template("disbursement/disbursement.html",
						Action=Action,
						li_html=li_html,
						Form=Form,
						g_id=g_id,
						eval = eval,
						g_readonly=g_readonly,
						disabled=disabled,
						ErrorMsg=ErrorMsg,
						QueryObj=QueryObj,
						DisburseObj=DisburseObj,
						formatNumber=mktmoney.formatNumber,
						OfficerObj=OfficerObj,
						Officer=Officer,
						Currency=Currency,
						OfficerAccount=OfficerAccount,
						OfficerBalance=OfficerBalance,
						TotalDisburse=TotalDisburse,
						TotalActual=TotalActual,
						CountLoan=CountLoan,
						VBID=VBID,
						Group=Group,
						ChargeList=ChargeMap,
						ChargeKeyList=ChargeKeyList)
	except Exception, e:
		classToolbar 	= mkttool.clsToolbar()
		Form 			= ""
		g_readonly 		= ""
		li_html 		= classToolbar.getToolbarevent("Show")
		db.session.rollback()
		db.session.close()
		flash(msg_error+" %s"%e,"error")
		if "API" in request.url or checkContentType()=="json":
			return renderDisbursementSettlementJson(request, 
						RedirectUrl = "/Morakot/Disbursement" if request.method == "POST" or Operation in ['Delete', 'Reverse', 'Authorize'] else '',
						QueryObj = QueryObj,
						Officer = Officer,
						action = Action,
						float=float,
						li_html = li_html,
						g_id = g_id,
						g_readonly = g_readonly,
						disabled = disabled,
						toMoney=mktmoney.toMoney,
						getCurrencyObj=mktmoney.getCurrencyObj,
						operation = Operation)
		return render_template("disbursement/disbursement.html",
						Action=Action,
						li_html=li_html,
						Form=Form,
						g_id=g_id,
						g_readonly=g_readonly)
	
def renderDisbursementSettlementJson(request, **kwargs):
	FormModel	= ''
	RequestForm	= request.form
	ObjForm		= FRM_DISBURSE
	Model		= [MKT_DISBURSE]

	if kwargs.get('operation') in ["ListLive", "ListAuth", "ListHist"]:
		if kwargs.get('operation') == "ListAuth":
			kwargs['model']	= MKT_DISBURSE_INAU
		elif kwargs.get('operation') == "ListHist":
			kwargs['model']	= MKT_DISBURSE_HIST
		else:
			kwargs['model']	= Model[0]
		kwargs['important_field'] = ObjForm.importantField()
		kwargs['page'] 		= int(request.args.get("offset", 1))
		kwargs['per_page']	= int(request.args.get("limit", 15))
		kwargs['order_by']	= str(request.args.get("order_by" , ""))
		kwargs['filter_by']	= str(request.args.get("filter_by" , ""))
		kwargs['search']	= str(request.args.get("search", ""))
	else:
		if request.method == "GET":
			objdb		= manipulatedatatodb(ObjForm, Model, RequestForm, kwargs.get('g_id')) # create instance object
			FormModel	= objdb.form_model()
		elif request.method == "POST":
			ObjForm 	= request.form

		Results = []
		for row in kwargs.get('QueryObj',[]):
			Result = row.__dict__
			Currency = mktmoney.getCurrencyObj(Result['Currency'])
			Results.append({
				'LoanID': Result.get('ID'),
				'ID': Result.get('ID'),
				'Customer': '%s - %s %s' % (Result.get('ContractCustomerID'),Result.get('LastNameEn'),Result.get('FirstNameEn')),
				'Account': Result.get('Account'),
				'Currency': Result.get('Currency'),
				'ValueDate': Result.get('ValueDate'),
				'Amount': str(mktmoney.toMoney(float(Decimal(Result['Amount']).normalize()),Currency)),
				'ActualAmount': str(mktmoney.toMoney(float(Decimal(Result['ActualAmount']).normalize()),Currency)),
				'Compulsory': str(mktmoney.toMoney(float(Decimal(Result['Compulsory']).normalize()),Currency)),
				'ActualCompulsory': str(mktmoney.toMoney(float(Decimal(Result['ActualCompulsory']).normalize()),Currency)),
				'DocumentationFee': str(mktmoney.toMoney(float(Decimal(Result['DocumentationFee']).normalize()),Currency)),
				'WelfarefundFee': str(mktmoney.toMoney(float(Decimal(Result['WelfarefundFee']).normalize()),Currency)),
				'Reference': Result.get('Reference')
			})
		kwargs['disabled'] 		= 'disabled'
		kwargs["ResultObj"] 	= Results
		kwargs['form'] 			= FormModel
		kwargs['custom_config'] = {
			'Sections': 	[{ 'title': '', 'index': [4, 0, 1, 9, 10, 7, 3, 8, 11, 12, 6, 5] }],
			'DisabledField':{'ActualCompulsory': False, 'ActualAmount':False},
			'MoneyField': 	{'ActualAmount': mktgrouloan.getMoneyField('Currency', 'ActualAmount'), 'ActualCompulsory':mktgrouloan.getMoneyField('Currency', 'ActualCompulsory')},
			'GParams': 		['Officer','Currency','ValueDateStart','ValueDateEnd','VBID','Group','OfficerAccount', 'OfficerCategory','TotalDisbursement'],
			'GUrl': 		'/Disbursement/Generate/%s/?' % kwargs.get('g_id')
		}

	
	return mktgrouloan.renderCustomJsonFormat(**kwargs)