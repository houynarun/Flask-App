from app.mktcore.wtfimports 	import *
from sqlalchemy 				import *
from .models 					import *

from app.tools.mktroute			import *
from app.Currency.models 		import *
from app.VB.models 				import *
from app.LoanProduct.models 	import *
from app.LoanPurpose.models 	import *
from app.TemplateBase.models 	import *

import app.tools.mktofficer 			as mktofficer
import app.tools.mktloanapplication 	as mktloanapp
import app.tools.mktaccount				as mktaccount


@app.route("/Morakot/CompulsorySaving", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CompulsorySaving():

	Saving 			= request.args.get('CompulsorySaving')
	SavingRate 		= 0
	BoolSavingRate 	= False

	# Disable field Compulsory Rate when user select compulsory saving is yes
	if Saving == 'N':
		BoolSavingRate = True

	return jsonify(SavingRate = SavingRate,  BoolSavingRate = BoolSavingRate)

@app.route("/Morakot/VoluntarySaving", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def VoluntarySaving():

	Saving 			= request.args.get('VoluntarySaving')
	SavingRate 		= 0
	BoolSavingRate 	= False

	# Disable field Compulsory Rate when user select compulsory saving is yes
	if Saving == 'N':
		BoolSavingRate = True

	return jsonify(SavingRate = SavingRate,  BoolSavingRate = BoolSavingRate)
	
@app.route("/Morakot/GetOfficerID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getOfficerID():
	OfficerDic = {}
	VBID 		= request.args.get('VBID') 
	VbObj = MKT_VB.query.get(VBID)
	FreqTypeDic = {'ID':'',"Value":'--%s--' %getLanguage("None")}
	Frequency = ''
	if VbObj:
		Frequency 	= VbObj.Frequency
		if VbObj.FreqType == '1':
			FreqTypeDic.update({'ID':'1',"Value":'1. %s' %getLanguage("Monthly")})
		elif VbObj.FreqType == '2':
			FreqTypeDic.update({'ID':'2',"Value":'2. %s' %getLanguage("Weekly")})
		elif VbObj.FreqType == '3':
			FreqTypeDic.update({'ID':'3',"Value":"3. Daily"})

		OfficerObj = MKT_OFFICER.query.get(VbObj.OfficerID)
		if OfficerObj:
			OfficerDic.update({'ID':OfficerObj.ID,"Value":OfficerObj.ID+" - "+OfficerObj.FirstName})
		print OfficerDic['ID']

	return jsonify(
				Frequency	= Frequency,
				OfficerID	= OfficerDic['ID'],
				OfficerDesc = OfficerDic['Value'],
				FreqType	= FreqTypeDic['ID'],
				FreqTypeDesc= FreqTypeDic['Value']
			)

def loadVillageBank():
	return MKT_VB.query
def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).first()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def loadOfficer():  #define function 
	return MKT_OFFICER.query.filter_by(Branch=getCurrentBranch()).all()

def loadTemplateBase(ID = ''):  #define function 
	return MKT_TEMPLATE_BASE.query

def loadLoanProduct():
	return MKT_LOAN_PRODUCT.query

def loadLoanPurpose():
	return MKT_LOAN_PURPOSE.query.order_by(MKT_LOAN_PURPOSE.ID.asc())

class FRM_GROUP(exform):
	VBID 				= RemoteTextField(requiredlabel("Centre/Village Bank", "*"),
						validators=[validators.Required()])
	GroupName 			= TextField(requiredlabel("Group Name", "*"), [validators.Required()])
	MinMember 			= TextField(requiredlabel("Minimum Member", "*"), [validators.Required()])
	MaxMember 			= TextField(requiredlabel("Maximum Member", "*"), [validators.Required()])
	Currency 			= QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
						query_factory=loadCurrency,
						get_label=u'ID',
						default=lambda:loadCurrency('USD'),
						validators=[validators.Required()])
	LoanProduct 		= QuerySelectField(requiredlabel(getLanguage("Loan Product"), "*"),
						query_factory=loadLoanProduct,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Loan Product"),
						validators=[validators.Required()]
					)
	LoanPurpose 		= QuerySelectField(requiredlabel(getLanguage("Loan Purpose"), "*"),
						query_factory=loadLoanPurpose,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Loan Purpose"),
						validators=[validators.Required()]
					)
	InterestRate 		= TextField(requiredlabel("Interest Rate", "*"), [validators.Required()])
	FreqType 			= SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
						choices=[('', '--%s--' %getLanguage("None")),
								 ('1', '1. %s' %getLanguage("Monthly")), 
								 ('2', '2. %s' %getLanguage("Weekly")),
								 ('3', '3. %s' % "Daily")],
						coerce=str,
						validators=[validators.Required()],
						default=''
					)
	Frequency 			= TextField(requiredlabel("Frequency", "*"), [validators.Required()], default=1)
	Term 				= TextField(requiredlabel("Term", "*"), [validators.Required()])
	Installment 		= TextField(requiredlabel("Installment", "*"), [validators.Required()])
	ApprovedAmount 		= TextField("Approved Amount")
	OfficerID 			= QuerySelectField(requiredlabel('Loan Officer','*'),
							query_factory=loadOfficer,
							get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.optional()])

	CompulsorySaving 	= SelectField(requiredlabel("Compulsory Saving", "*"),
						choices=[('N', 'No'), 
								 ('Y', 'Yes')],
						coerce=str,
						validators=[validators.Required()],
						default='Y',
						description="1-%s" %"Compulsory Saving"
					)
	RateFixed 			= SelectField("Rate/Fix",
						choices=[('R', 'Rate'),
								 ('F', 'Fix')],
						coerce=str,
						default='R',
						description="1-%s" %"Compulsory Saving"
					)
	CompulsoryRate 		= TextField(requiredlabel("Calculation Rate", "*"),
						[validators.Required()], default = '0',
						description="1-%s" %"Compulsory Saving"
					)
	VoluntarySaving 	= SelectField(requiredlabel("Voluntary Saving", "*"),
						choices=[('N', 'No'), 
								 ('Y', 'Yes')],
						coerce=str,
						validators=[validators.Required()],
						default='Y',
						description="1-%s" %"Voluntary Saving"
					)
	TemplateBase 		= QuerySelectField('Template Base',
							query_factory=loadTemplateBase,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--')

	def validate_TemplateBase(form, field):

		TemplateBase 	= request.form.get('TemplateBase') if 'TemplateBase' in request.form else ''
		ApprovedAmount 	= request.form.get('ApprovedAmount') if 'ApprovedAmount' in request.form else ''
		Currency 		= request.form.get('Currency') if 'Currency' in request.form else ''

		Frequency 		= request.form.get('Frequency')
		FreqType 		= request.form.get('FreqType')
		Term 			= request.form.get('Term')
		AppDate 		= request.form.get('AppDate','')

		if not AppDate:
			AppDate = mktdate.getBankDate()

		Installment 	= mktloanapp.getNumberOfInstallment(Term, Frequency, FreqType, AppDate)
		if not TemplateBase == '__None':
			TemplateObj = MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID == TemplateBase).first()

			if int(TemplateObj.Installment) != int(Installment):

				raise ValidationError("Installment %s is not equal installment in template base %s."%(Installment,TemplateObj.Installment))

			elif float(TemplateObj.DisburseAmount) != float(ApprovedAmount):

				TBAmount 		= mktmoney.toMoney(float(TemplateObj.DisburseAmount), mktmoney.getCurrencyObj(Currency), 1)
				ApprovedAmount	= mktmoney.toMoney(float(ApprovedAmount), mktmoney.getCurrencyObj(Currency), 1)

				raise ValidationError("Approved Amount %s is not equal Approved Amount in template base %s"%(ApprovedAmount,TBAmount))

	def validate_MaxMember(form, field):
		MaxMember = request.form['MaxMember']
		MinMember = request.form['MinMember']
		if int(MaxMember) < int(MinMember):
			raise ValidationError('Maximum Member must greater than or equal Minimum Member')

	def validate_Term(form, field):

		Term 		= form.Term.data
		Currency 	= request.form['Currency']
		LoanProduct = request.form['LoanProduct']

		if Term:
			try:
				Term = float(Term)
			except:
				raise ValidationError("This field must be in numeric format.")
			# Call function to check Maximum and Minimum Term
			mktloanapp.checkMaxMinTerm(Term, Currency, LoanProduct)
		else:
			raise ValidationError("This field is required.")

	def validate_InterestRate(form, field):

		LoanPro 	= request.form['LoanProduct']
		CurrencyKey = request.form['Currency']
		InputRate 	= form.InterestRate.data

		try:
			InputRate = float(InputRate)
		except:
			raise ValidationError("This field must be in numeric format.")
		# Call function to check Maximum and Minimum Interest Rate
		Msg = mktaccount.checkInterestRate("LC", LoanPro, InputRate, CurrencyKey)

		if Msg:
			raise ValidationError(Msg)

	def validate_Frequency(form, field):
		try:
			Frequency = request.form['Frequency']
			Frequency = int(Frequency)
		except:
			raise ValidationError('This field is reqired only integer.')


	def validate_CompulsoryRate(formm, field):

		CompulsorySaving = request.form['CompulsorySaving']
		CompulsoryRate = request.form['CompulsoryRate']

		if CompulsoryRate:
			try:
				CompulsoryRate = float(CompulsoryRate)
			except:
				raise ValidationError("This field must be in numeric format.")

		if CompulsorySaving == 'Y' and CompulsoryRate == 0:
			raise ValidationError('This field is required.')


	def validate_VoluntaryRate(formm, field):

		VoluntarySaving = request.form['VoluntarySaving']
		VoluntaryRate = request.form['VoluntaryRate']

		if VoluntaryRate:
			try:
				VoluntaryRate = float(VoluntaryRate)
			except:
				raise ValidationError("This field must be in numeric format.")

		if VoluntarySaving == 'Y' and VoluntaryRate == 0:
			raise ValidationError('This field is required.')

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#InterestRate').val(data.InterestRate)"
		varname 		= "LoanProduct:$('#LoanProduct').val(),Currency:$('#Currency').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/LoanProductID", "change", "FreqType"]
		hotfield.append(fun)

		fielddisplay 	= "$('#LoanPurpose').select2('data', {'id':data.LoanPurpose.ID,'text':data.LoanPurpose.Description});"
		varname 		= "LoanProduct:$('#LoanProduct').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/LoanPurposeID", "click"]
		hotfield.append(fun)

		fielddisplay 	= "$('input[name=CompulsoryRate]').attr('readonly', data.BoolSavingRate);"
		fielddisplay 	+= "$('input[name=CompulsoryRate]').val( data.SavingRate);"
		varname  		= "CompulsorySaving:$('#CompulsorySaving').val()"
		fun 			= ["CompulsorySaving", varname, fielddisplay, "/Morakot/CompulsorySaving", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('input[name=VoluntaryRate]').attr('readonly', data.BoolSavingRate);"
		fielddisplay 	+= "$('input[name=VoluntaryRate]').val( data.SavingRate);"
		varname  		= "VoluntarySaving:$('#VoluntarySaving').val()"
		fun 			= ["VoluntarySaving", varname, fielddisplay, "/Morakot/VoluntarySaving", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment);"
		varname 		= "Term:$('#Term').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Frequency", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		# $('FreqType').val()=='3' ? $('#Installment').prop('disabled',false): $('#Installment').prop('disabled',true)
		fielddisplay 	= "$('#Installment').val(data.Installment);"
		fielddisplay 	+="$('#FreqType').val()==='3' ? $('#Installment').prop('readonly',false) : $('#Installment').prop('readonly',true);"
		varname 		= "Term:$('#Term').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["FreqType", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		fielddisplay="$('#OfficerID').select2('data',{'id':data.OfficerID,'text':data.OfficerDesc});$('#FreqType').select2('data',{'id':data.FreqType,'text':data.FreqTypeDesc});$('#Frequency').val(data.Frequency);"
		varname="VBID:$('#VBID').val()"
		fun=["VBID", varname ,fielddisplay, "/Morakot/GetOfficerID", "change"]
		hotfield.append(fun)
		return hotfield
	@staticmethod
	def moneyField():
		return [["ApprovedAmount", "Currency"]]

	@staticmethod
	def formatMoney():
		return ["ApprovedAmount"], "Currency"

	@staticmethod
	def setDisable():
		control_list = ['OfficerID', 'Installment']
		if request.method == "POST":
			CompulsorySaving = request.form['CompulsorySaving']
			VoluntarySaving = request.form['VoluntarySaving']
			# Not disbale field Compulsory Rate if Compulsory Saving is yes
			if CompulsorySaving == 'N':
				control_list.append('CompulsoryRate')

		if request.method == "GET":
			ID = g.formID
			GroupObj = MKT_GROUP.query.filter(MKT_GROUP.ID == ID).first()
			if not GroupObj:
				GroupObj = MKT_GROUP_INAU.query.filter(MKT_GROUP_INAU.ID == ID).first()
			if GroupObj:
				# Not disbale field Compulsory Rate if Compulsory Saving is yes
				if GroupObj.CompulsorySaving == 'N':
					control_list.append('CompulsoryRate')

		return control_list
