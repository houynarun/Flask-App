from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *
from decimal 					import *
from app.Category.models 		import *
from app.Currency.models 		import *
from app.Teller.models 			import *
from app.Category.models 		import MKT_CATEGORY
from app.TellerParam.models 	import MKT_TELLER_PARAM
from flask 						import redirect,url_for

import app.tools.mktdate 		as mktdate
import app.tools.mktparam 		as mktparam
import app.tools.mktaccount 	as mktaccount
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.mktmoney 		as mktmoney
import app.tools.user 			as mktuser

import app.tools.mktfundtransfer as mktfundtransfer
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktsetting 	as mktsetting

	
def getRecord():
	try:
		result = MKT_INCOME_EXPENSE_BOOKING.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_INCOME_EXPENSE_BOOKING.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'IncomeExpenseCat'	:str(row.IncomeExpenseCat)})
			return Dict
		else:
			return Dict
	except:
		raise
	

@app.route('/Morakot/loadCategoryByDrCr',methods=['GET'])
def getloadCategoryByDrCr():
	DrCr = ''
	TellerID = str(request.args.get('TellerID')) if request.args else ''
	dic = {}
	if TellerID :
		TellerObj = MKT_TELLER.query.get(TellerID)
		if TellerObj:
			TellerParam = mktparam.getTellerParam()
			if TellerParam:
				IncomeTran = TellerParam.IncomeTran
				if TellerObj.Transaction == IncomeTran :
					DrCr = "Cr"
				else:
					DrCr = "Dr"

	JOURNAL_ENTRY_EXCLUDED = mktsetting.getExcludedCategories()
	result = MKT_CATEGORY.query.filter_by(BalanceType = DrCr).\
							filter(~MKT_CATEGORY.ID.in_(JOURNAL_ENTRY_EXCLUDED)).\
							all()
	for row in  result:
		dic[row.ID] = row.Description
	return jsonify(results=dic)
	

@app.route("/Morakot/IncomeExpenseBookingHotField", methods=['GET'])
def getIncomeExpenseBookingHotField():
	Account 	= ''
	Amount 		= 0
	Category 	= ''
	Currency 	= ''
	Transaction = ''
	TranDate 	= ''
	Reference 	= ''
	Note 		= ''
	IncomeTran 	= ''
	ExpenseTran = ''
	Type 		= ''
	TellerID 	= request.args.get('TellerID') if 'TellerID' in request.args else ''
	QueryObj 	= MKT_TELLER.query.get(TellerID) if '__None' !=TellerID else []
	if QueryObj:
		TellerParam = mktparam.getTellerParam()
		if TellerParam:
			IncomeTran = TellerParam.IncomeTran
			ExpenseTran = TellerParam.ExpenseTran

		Transaction = QueryObj.Transaction
		TranDate 	= QueryObj.TranDate
		Reference 	= QueryObj.Reference
		Note 		= QueryObj.Note

		if Transaction == IncomeTran:
			Account 	= QueryObj.TDrAccount
			Category 	= QueryObj.DrCategory
			Currency 	= QueryObj.DrCurrency
			Type 		= "Income"
		else:
			Account 	= QueryObj.TCrAccount
			Category 	= QueryObj.CrCategory
			Currency 	= QueryObj.CrCurrency
			Type 		= "Expense"
		Amount 		= mktmoney.toMoney(float(QueryObj.Amount),mktmoney.getCurrencyObj(Currency))
	return jsonify(	Account 	= Account,
					Category 	= Category,
					Currency 	= Currency,
					Type 		= Type,
					Amount 		= Amount,
					Transaction	= Transaction,
					TranDate 	= TranDate,
					Reference 	= Reference,
					Note 		= Note)

def getTellerObj(ID):
	return MKT_TELLER.query.get(ID)

def loadCategory():
	DrCr = ''
	if "Type"in request.args:
		Type = request.args.get("Type")
		if Type == "Income":
			DrCr = "Cr"
		else:
			DrCr = "Dr"
	if not DrCr:
	
		if request.method == "GET":
			if "ID" in request.args:
				ID = request.args.get("ID")
			else:
				ID = g.formID
			
		else:
			ID = request.form['ID']

		TellerObj 	= getTellerObj(ID)
		if TellerObj:
			if str(TellerObj.ID)[:2] == "IP":
				DrCr = "Cr"
			else:
				DrCr = "Dr"

	ACC_CATEGORY_EXCLUDED = ["38982","11110","11120"] #Drawdown, Cash in vault at hand, Cash in transit
	TellerParamObj = MKT_TELLER_PARAM.query.get("SYSTEM")
	if TellerParamObj:
		ACC_CATEGORY_EXCLUDED.append(TellerParamObj.TillCategory)
		ACC_CATEGORY_EXCLUDED.append(TellerParamObj.VaultCategory)
		ACC_CATEGORY_EXCLUDED.append(TellerParamObj.WalletCategory)
		ACC_CATEGORY_EXCLUDED.append(TellerParamObj.SuspendCategory)
		ACC_CATEGORY_EXCLUDED.append(TellerParamObj.SurplusCategory)
		ACC_CATEGORY_EXCLUDED.append(TellerParamObj.ShortageCategory)

	JOURNAL_ENTRY_EXCLUDED = mktsetting.getExcludedCategories()
	JOURNAL_ENTRY_EXCLUDED.extend(ACC_CATEGORY_EXCLUDED)

	AccSetting 			=	mktsetting.getAccSetting()
	PriorYearCat 		=	AccSetting.PriorYearCat
	CurrentYearCat		=	AccSetting.CurrYearCat
	IncomeSummaryCat 	=	AccSetting.IntSummaryCat
	JOURNAL_ENTRY_EXCLUDED.extend([PriorYearCat,IncomeSummaryCat,CurrentYearCat])

	QueryObj = 	MKT_CATEGORY.query.\
							filter(~MKT_CATEGORY.ID.in_(JOURNAL_ENTRY_EXCLUDED)).\
							order_by(MKT_CATEGORY.ID.asc())
	if DrCr:
		QueryObj = QueryObj.filter(MKT_CATEGORY.BalanceType == str(DrCr))

	return QueryObj

def loadCurrency():
	return MKT_CURRENCY.query

# def loadIncomeExpense():

# 	return  mktteller.getTellerIncomeExpense()[0].all()

# def setDefaultTellerID():
# 	Result 		= ""
# 	if request.args:
# 		Result = request.args.get("TellerID")
# 	return Result

def setDefaultAccountSuspend():
	Result 		= ""
	if request.args:
		Result = request.args.get("Account")
	if not Result:
		if request.method == "GET":
			ID = g.formID
		else:
			ID = request.form['ID']
		TellerObj = getTellerObj(ID)
		if TellerObj:
			if str(TellerObj.ID)[:2] == "IP":
				Result = TellerObj.TCrAccount
			else:
				Result = TellerObj.TDrAccount
	return Result

def setDefaultCategorySuspend():
	Result 		= ""
	if request.args:
		Result = request.args.get("Category")

	if not Result:
		if request.method == "GET":
			ID = g.formID
		else:
			ID = request.form['ID']
		TellerObj = getTellerObj(ID)
		if TellerObj:
			if str(TellerObj.ID)[:2] == "IP":
				Result = TellerObj.CrCategory
			else:
				Result = TellerObj.DrCategory
	return Result

def setDefaultCurrency():
	Result 		= ""
	if request.args:
		Result = request.args.get("Currency")

	if not Result:
		if request.method == "GET":
			ID = g.formID
		else:
			ID = request.form['ID']

		TellerObj = getTellerObj(ID)
		if TellerObj:
			Result = TellerObj.DrCurrency

	return Result

def setDefaultType():
	Result 		= ""
	if request.args:
		Result = request.args.get("Type")

	if not Result:
		if request.method == "GET":
			ID = g.formID
		else:
			ID = request.form['ID']
		TellerObj = getTellerObj(ID)
		if TellerObj:
			if str(TellerObj.ID)[:2] == "IP":
				Result = "Income"
			else:
				Result = "Expense"
	return Result

def setDefaultAmount():
	return getDefaultValue('Amount')

def setDefaultTransaction():
	Result 		= ""
	if request.args:
		Result = request.args.get("Transaction")

	if not Result:
			
		if request.method == "GET":
			ID = g.formID
		else:
			ID = request.form['ID']

		TellerObj = getTellerObj(ID)
		if TellerObj:
			TellerParam = mktparam.getTellerParam()
			if TellerParam:
				if str(TellerObj.ID)[:2] == "IP":
					Result = TellerParam.IncomeBookingTran
				else:
					Result = TellerParam.ExpenseBookingTran

	return Result

def setDefaultTranDate():
	Result 		= ""
	if request.args:
		Result = request.args.get("TranDate")
		if Result:
			Result = datetime.strptime(str(Result),'%Y-%m-%d').date()

	if not Result:
		if request.method == "GET":
			ID = g.formID
		else:
			ID = request.form['ID']

		TellerObj = getTellerObj(ID)
		if TellerObj:
			Result = TellerObj.TranDate
			Result = datetime.strptime(str(Result),'%Y-%m-%d').date()

	return Result

def setDefaultReference():
	return getDefaultValue('Reference')

def setDefaultNote():
	return getDefaultValue('Note')

def getDefaultValue(Field):
	Result 		= ""
	if request.args:
		Result = request.args.get(Field)
	if not Result:
		if request.method == "GET":
			ID = g.formID
		else:
			ID = request.form['ID']
		TellerObj = getTellerObj(ID)
		if TellerObj:
			Result = getattr(TellerObj,Field)

	return Result

def setDefaultExchangeRate():
	return getDefaultValue('ExchangeRate')

def setDefaultLCYAmount():
	return getDefaultValue('LCYAmount')

class FRM_INCOME_EXPENSE_BOOKING(exform):

	IncomeExpenseCat 	= QuerySelectField(requiredlabel("Category","*"),
							get_label=lambda a: a.ID + " - " + a.Description,
							query_factory=loadCategory,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()])
	Type 		= TextField(requiredlabel("Type", "*"),[validators.Required()],default=setDefaultType)
	Currency 	= TextField(requiredlabel("Currency", "*"),[validators.Required()],default=setDefaultCurrency)
	Account 	= TextField(requiredlabel("Account", "*"),[validators.Required()],default=setDefaultAccountSuspend)
	Category 	= TextField(requiredlabel("Category", "*"),[validators.Required()],default=setDefaultCategorySuspend)
	Amount 		= TextField(requiredlabel("Amount", "*"),[validators.Required()],default=setDefaultAmount)
	Transaction = TextField(requiredlabel("Transaction", "*"),[validators.Required()],default=setDefaultTransaction)
	TranDate 	= DateField(requiredlabel("Transaction Date", "*"),[validators.Required()],default=setDefaultTranDate)
	Reference 	= TextField("Reference",[validators.Length( max=35)],default=setDefaultReference)
	Note 		= TextField("Note",[validators.Length( max=50)],default=setDefaultNote)
	ExchangeRate 	= TextField('Exchange Rate',description='1-Detail',default=setDefaultExchangeRate)
	LCYAmount 		= TextField('LCY Amount',description='1-Detail',default=setDefaultLCYAmount)

	def validate_IncomeExpenseCat(form,field):
		IncomeExpenseCat 	= request.form['IncomeExpenseCat']
		Type 				= str(request.form['Type'])
		Category 			= 	MKT_CATEGORY.query.get(IncomeExpenseCat)
		if Category:
			DrCr = Category.BalanceType
			if Type == "Income":
				if DrCr == "Dr":
					raise ValidationError("The category you are trying to credit is not an income.")
			if Type == "Expense":
				if DrCr == "Cr":
					raise ValidationError("The category you are trying to debit is not an expense.")

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data

		try:

			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)

	@staticmethod
	def setVisible():
		control_list = ['Transaction','Account','Category']
	
		return control_list


	@staticmethod
	def moneyField():
		return [("Amount","Currency")]

	@staticmethod
	def setWidth():
		control_list = [('TranDate', len3),('Category',len2),
						('Type',len2),('Amount', len3),
						('Currency',len2)	]

		return control_list

	@staticmethod
	def setDisable():
		EnableExchangeRateField = mktsetting.getAppSetting('EnableExchangeRateField')
		if EnableExchangeRateField == 'Yes':
			return [ ('Account'),('Category'), ('Currency'), ('Amount'), ('Note'), ('Reference'), ('TranDate'),('Type'),('LCYAmount')]
		return [ ('Account'),('Category'), ('Currency'), ('Amount'), ('Note'), ('Reference'), ('TranDate'),('Type'), ('ExchangeRate'),('LCYAmount')]

	@staticmethod
	def listField():

		Fields = ["ID","IncomeExpenseCat","Type","Account","Category","Currency", "Amount", "Transaction", "TranDate", "Reference"]

		return Fields

	@staticmethod
	def formatMoney(): # for listField
		return ["Amount"],"Currency"
		# Amount is the fields to be formatted based on Currency field

	# @staticmethod
	# def hotField():
	# 	hotfield = []

	# 	fielddisplay 	 = "$('#Account').val(data.Account); "
	# 	fielddisplay 	+= "$('#Category').val(data.Category);"
	# 	fielddisplay 	+= "$('#Currency').val(data.Currency);"
	# 	fielddisplay 	+= "$('#Type').val(data.Type);"
	# 	fielddisplay 	+= "$('#Amount').val(data.Amount);"
	# 	fielddisplay 	+= "$('#Transaction').val(data.Transaction);"
	# 	fielddisplay 	+= "$('#TranDate').val(data.TranDate);"
	# 	fielddisplay 	+= "$('#Reference').val(data.Reference);"
	# 	fielddisplay 	+= "$('#Note').val(data.Note);"
	# 	varname 		=  "TellerID:$('#TellerID').val()"
	# 	fun 			=  ["TellerID", varname, fielddisplay, "/Morakot/IncomeExpenseBookingHotField", "change"]
	# 	hotfield.append(fun)

	# 	return hotfield

	# @staticmethod
	# def hotSelectField():
	# 	hotfield=[]

	# 	fielddisplay="IncomeExpenseCat"
	# 	varname="TellerID:$('#TellerID').val()" 
	# 	fun=["TellerID", varname ,fielddisplay, "/Morakot/loadCategoryByDrCr", "click"]
	# 	hotfield.append(fun)

	# 	return hotfield

	@staticmethod
	def formReadOnly():

		return "AUTH"

	@staticmethod
	def beforeNewID ():
		# g.formID

		#Check Suspend Account
		CheckSuspendAccount = mktteller.isSuspendConfig()
		if not CheckSuspendAccount[0]:
			return True,CheckSuspendAccount[1]
		if g.formID !="Operation":
			ListAllow = mktteller.getTellerIncomeExpense()[1]
			if not g.formID in ListAllow:
				return True,"The record %s not found in pending Income/Expense transaction." % g.formID
		else:
			return True,"invalid ID"
		#Mean that user have cash account.
		return False,''
			
	# @staticmethod
	# def findinHist():
	# 	return True

	@staticmethod
	def beforeInsert():
		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel

		if AuthLevel == 0 :
			Audit 			= mktaudit.getAuditrail()
			Inputter		= Audit['Inputter']
			Createdon 		= Audit['Createdon']
			Authorizer 		= Audit['Authorizer']
			Authorizeon		= Audit['Authorizeon']
			Branch 			= Audit['Branch']
			IncomeExpenseCat = request.form['IncomeExpenseCat']
			Type 			= request.form['Type']
			Currency 		= request.form['Currency']
			Account 		= request.form['Account']
			Category 		= request.form['Category']
			Amount  		= Decimal(request.form['Amount'].replace(',',''))
			LCYAmount  		= Decimal(request.form['LCYAmount'].replace(',',''))
			Module 			= 'IE'
			Transaction 	= request.form['Transaction']
			TranDate 		= request.form['TranDate']
			Reference 		= request.form['ID']
			Note 			= request.form['Note']
			UserReference 	= Reference

			# Call function to commit add account by currency 
			CheckAccounting = mktteller.setIncomeExpenseBookingAccouting("Authorize",Inputter,Createdon,Authorizer,Authorizeon,Branch,IncomeExpenseCat,\
								Type,Currency,Account,Category,Amount,Module,Transaction,TranDate,Reference,Note,UserReference=UserReference,LCYAmount=LCYAmount)
			if not CheckAccounting[0]:
				flash(CheckAccounting[1])
				return False

		return True


	@staticmethod
	def beforeAuthorize():
		# Authorize have two transcations INAU, RNAU 
		try:
			
			# AuthLevel 	= g.getNAuthorize
			# print 'beforeAuthorize: %s'% AuthLevel
		
			ID 				= 	g.formID
			QueryObj 		=	MKT_INCOME_EXPENSE_BOOKING_INAU.query.get(ID)
			
			if not QueryObj:

				flash(msg_error + "The record %s not found in pending Income/Expense transaction." %ID)
				return False

			else:
				
				CheckAccounting = mktteller.setAuthorizeIncomeExpenseBooking(ID)
				if not CheckAccounting[0]:
					db.session.rollback()
					db.session.close()
					flash(CheckAccounting[1])
					return False

			return True
		except Exception, e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			QueryObj 	=	MKT_INCOME_EXPENSE_BOOKING.query.get(ID)
			
			if not QueryObj:

				return True,  "%s The record %s not found in pending Income/Expense transaction." %(msg_error, ID)

			else:

				Check = mktteller.validationReverse(MKT_INCOME_EXPENSE_BOOKING,MKT_INCOME_EXPENSE_BOOKING_INAU,ID)
				
				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					
					CheckAccounting = mktteller.setReverseIncomeExpenseBooking(AuthLevel,ID,Inputter,Createdon)
					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]
					else:
						#Successfully
						db.session.commit()
						db.session.close()
						return True,CheckAccounting[1]
				else:
					return True,Check[1]

			return True,"Cannot reverseRec"
		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e