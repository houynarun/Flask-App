from app.mktcore.wtfimports 	import 		*
from .models 					import 		*
from app.AutoID.models 			import 		MKT_RECORD_LOCK
from app.User.models 			import 		MKT_USER
import time

def loadUser():
	return MKT_USER.query

def loadUserRecordLock(ID):
	return MKT_RECORD_LOCK.query.filter(MKT_RECORD_LOCK.Inputter == ID).first()


class FRM_RESET_RECORD_LOCK(exform):
	UserID = QuerySelectField(requiredlabel("User", "*"),
						query_factory=loadUser,
						get_label='DisplayName',
						allow_blank=True,
						blank_text='--None--',
						validators=[validators.Required()]
						)



	def validate_UserID(form, field):
		ID = request.form['UserID']
		User = loadUserRecordLock(ID)
		if User is None:
			raise ValidationError(" User has no in record lock")

	@staticmethod
	def beforeInsert():
		AuthLevel 	= g.getNAuthorize
		if AuthLevel == 0:
			ID = request.form['UserID']
			MKT_RECORD_LOCK.query.filter(MKT_RECORD_LOCK.Inputter == ID).delete()
		return True

	@staticmethod
	def IsAcceptOverrideINAU():
		Override = True
		Validate = False
		Msg 	 = ""
		ID = g.formID
		UserID 	= db.session.query(MKT_RESET_RECORD_LOCK_INAU.UserID).filter(MKT_RESET_RECORD_LOCK_INAU.ID==ID).first()
		User = loadUserRecordLock(UserID)
		print User
		if User is None:
			Override = True
			Validate = True
			Msg 	 = " User has no in record lock"
		
		return Override, Msg,Validate


	@staticmethod
	def beforeAuthorize():
		ID = g.formID
		UserID 	= db.session.query(MKT_RESET_RECORD_LOCK_INAU.UserID).filter(MKT_RESET_RECORD_LOCK_INAU.ID==ID).first()
		MKT_RECORD_LOCK.query.filter(MKT_RECORD_LOCK.Inputter == UserID).delete()
		return True





