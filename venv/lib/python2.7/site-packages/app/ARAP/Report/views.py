from app.mktcore.imports 					import *
from app.Category.models 					import *
from ..Payable.models						import *
from ..Receivable.models 					import *
from ..ReceivableCustomer.models 			import *
from ..ARAPParameter.models 				import *

from app.Vendor.Vendor.models 				import *
from app.Transaction.models 				import MKT_TRANSACTION

import app.tools.mktdate						as mktdate
import app.tools.mkttool						as mkttool
import app.tools.mktaccounting 					as mktaccounting
import app.mktcore.globalfunction 				as globalfunction
import app.ARAP.tools.mktarap 					as mktarap
import app.tools.mktaccount 					as mktaccount

# =============== Block Hotfield 

@app.route('/Morakot/PayableInformation')
@checkLogOutSession
@checkLogOutTime
def getPayableInformation():
	try:

		Vendor 		= request.args.get('Vendor')
		Invoice 	= request.args.get('Invoice')
		Amount 		= request.args.get('Amount','0')
		Currency 	= request.args.get('Currency',mktaccounting.loadCurrency(True))
		DebitCategory 		= ''
		DebitCategoryDesc 	= ''
		CreditCategory 		= ''
		ParentID 			= ''
		CreditCategoryDesc  = '--None--'
		OutstandingAmount 	= '0'
		Tran				= '_None'
		TranDesc			= '--Choose Transaction--'
		if Vendor:
			Vendor 		= MKT_VENDOR.query.get(Vendor)
			if Vendor:
				# Lookup Category
				if Vendor.CreditCategory:
					Category = MKT_CATEGORY.query.get(Vendor.CreditCategory)
					if Category:
						CreditCategory 		= Category.ID
						CreditCategoryDesc 	= Category.ID + ' - ' + Category.Description

				if Vendor.DebitCategory:
					Category = MKT_CATEGORY.query.get(Vendor.DebitCategory)
					if Category:
						DebitCategory 		= Category.ID
						DebitCategoryDesc 	= Category.ID + ' - ' + Category.Description
				if Invoice:
					QueryObj = MKT_PAYABLE.query.filter(MKT_PAYABLE.Invoice==Invoice).first()
					if QueryObj:
						ParentID 		  = QueryObj.ID
						OutstandingAmount = float(QueryObj.OutstandingAmount)
						OutstandingAmount = mktmoney.toMoney(OutstandingAmount,mktmoney.getCurrencyObj(QueryObj.Currency))


		# Covert shortcut amount to number
		Amount 	= globalfunction.wordAmount(Amount)
		if Amount:
			Amount 		= mktmoney.toMoney(Amount,mktmoney.getCurrencyObj(Currency))

		param = mktarap.getARAPParam('AP')
		if param:
			Tran 	= param.ID
			TranDesc = ('%s - %s')%(param.ID,param.Description)

		return jsonify(
						CreditCategory 		=	CreditCategory,
						CreditCategoryDesc 	=	CreditCategoryDesc,
						DebitCategory 		=	DebitCategory,
						DebitCategoryDesc 	=	DebitCategoryDesc,
						Amount 				=	Amount,
						OutstandingAmount	=	OutstandingAmount,
						ParentID 			=	ParentID,
						Tran 				=	Tran,
						TranDesc 			=	TranDesc
						)
	except Exception as e:
		print 'e',e
		raise

@app.route('/Morakot/ReceivableInformation')
@checkLogOutSession
@checkLogOutTime
def getReceivableInformation():
	try:

		Customer 	= request.args.get('Customer')
		Invoice 	= request.args.get('Invoice')
		Amount 		= request.args.get('Amount','0')
		Currency 	= request.args.get('Currency',mktaccounting.loadCurrency(True))
		DebitCategory 		= ''
		DebitCategoryDesc 	= '--None--'
		ParentID 			= ''
		OutstandingAmount 	= '0'
		Tran				= '_None'
		TranDesc			= '--Choose Transaction--'
		if Customer:
			Customer 		= MKT_RECEIVABLE_CUSTOMER.query.get(Customer)
			if Customer:
				# Lookup Category

				if Customer.CustomerCategory:
					Category = MKT_CATEGORY.query.get(Customer.CustomerCategory)
					if Category:
						DebitCategory 		= Category.ID
						DebitCategoryDesc 	= Category.ID + ' - ' + Category.Description
				if Invoice:
					QueryObj = MKT_RECEIVABLE.query.filter(MKT_RECEIVABLE.Invoice==Invoice).first()
					if QueryObj:
						ParentID 		  = QueryObj.ID
						OutstandingAmount = float(QueryObj.OutstandingAmount)
						OutstandingAmount = mktmoney.toMoney(OutstandingAmount,mktmoney.getCurrencyObj(QueryObj.Currency))

		print Amount,'Amount'
		# Covert shortcut amount to number
		Amount 	= globalfunction.wordAmount(Amount)
		if Amount:
			Amount 		= mktmoney.toMoney(Amount,mktmoney.getCurrencyObj(Currency))

		param = mktarap.getARAPParam('AR')
		if param:
			Tran 	= param.ID
			TranDesc = ('%s - %s')%(param.ID,param.Description)
		print Amount,OutstandingAmount
		return jsonify(
						DebitCategory 		=	DebitCategory,
						DebitCategoryDesc 	=	DebitCategoryDesc,
						Amount 				=	Amount,
						OutstandingAmount	=	OutstandingAmount,
						ParentID 			= 	ParentID,
						Tran 				=	Tran,
						TranDesc 			=	TranDesc,
						)
	except Exception as e:
		print 'e',e
		raise

@app.route('/Morakot/ReceivableAmount')
@checkLogOutSession
@checkLogOutTime
def getReceivableAmount():
	
	try:
		Quantity 		= request.args.get('Quantity').replace(",","") if request.args.get('Quantity') else 0
		UnitPrice 		= request.args.get('UnitPrice') if request.args.get('UnitPrice') else 0
		Currency 		= request.args.get('Currency')
		
		UnitPrice 		= globalfunction.wordAmount(UnitPrice)

		dic 			= {}
		Amount 			= 0

		Amount 	= float(Quantity) * float(UnitPrice)
		VATAmount = (float(Amount) * 10) /100

		Amount 	= mktmoney.toMoney(Amount, mktmoney.getCurrencyObj(Currency))

		dic = {'Amount': Amount,'VATAmount':VATAmount}

		return jsonify(results = dic)

	except Exception as e:
		print 'e',e
		raise

@app.route('/Morakot/ReceivableVAT')
@checkLogOutSession
@checkLogOutTime
def getReceivableVAT():
	
	try:
		VAT 		= request.args.get('VAT').replace(",","") if request.args.get('VAT') else 'N'
		VATAmount 	= 0
		if VAT == 'N':
			VATAmount = 0
		return jsonify(VATAmount = VATAmount)

	except Exception as e:
		print 'e',e
		raise

# get account
@app.route("/Morakot/SettlementAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def SettlementAccount():
	return mktaccount.getSearchAccount()

# End Block hotfield ==============
