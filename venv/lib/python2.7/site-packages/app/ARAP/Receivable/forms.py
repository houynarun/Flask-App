from app.mktcore.wtfimports                 import *
from app.mktcore.imports                    import *
from .models                                import *
from ..ReceivableCustomer.models            import *

from decimal                                import *
from app.Category.models                    import *
from app.Tax.models                         import *

import app.tools.mktdate                        as mktdate
import app.tools.mktaudit                       as mktaudit
import app.tools.mktaccounting                  as mktaccounting
import app.tools.mkttool                        as mkttool
import app.tools.mktfundtransfer                as mktfundtransfer
import app.tools.user                           as mktuser
import app.tools.mktteller                      as mktteller
import app.tools.mktmoney                       as mktmoney
import app.tools.mktdb                          as mktdb
import app.tools.mktloanamendment               as mktamt
import app.ARAP.tools.mktarap                   as mktarap
import app.mktcore.autoid                       as autoid

def loadReceivableCustomer():
	return MKT_RECEIVABLE_CUSTOMER.query.filter(MKT_RECEIVABLE_CUSTOMER.Branch == mktuser.getCurrentBranch()).\
						order_by(MKT_RECEIVABLE_CUSTOMER.ID.asc()).all()

class FRM_RECEIVABLE(exform):

	Customer        = QuerySelectField( requiredlabel("Customer","*"),
										query_factory=loadReceivableCustomer, 
										blank_text=u'--None--',                             
										get_label=lambda a: a.ID + '-' + a.CustomerName,
										allow_blank=True,
										validators=[validators.Required()]
										)

	CustomerCategory= QuerySelectField( requiredlabel("Customer Category","*"),
										query_factory=mktaccounting.loadCategory, 
										blank_text=u'--None--',                             
										get_label=lambda a: a.ID + '-' + a.Description,
										allow_blank=True,
										validators=[validators.Required()]
										)
	Invoice         = TextField('Sales Invoice')

	Type            = SelectField('Type', choices=[('1','Sales'),('2','Cash Receipt')])

	Currency        = QuerySelectField(requiredlabel("Currency","*"),
										query_factory=mktaccounting.loadCurrency, 
										blank_text=u'--Choose Currency--',
										get_label=u'ID', 
										default = lambda:mktaccounting.loadCurrency('USD'),
										allow_blank=True,
										validators=[validators.Required()],
										)
	VAT             = SelectField('VAT', choices=[('Y','Yes'),('N','No')],default='N')
	VATAmount       = TextField('VAT Amount',default=0)
	VATCategory     = TextField('VAT Category')
	Amount          = TextField(requiredlabel('Total Amount','*'),
										default=0,
										validators=[validators.Required()]
										)
	OutstandingAmount = TextField(requiredlabel('Outstanding Amount','*'),
										default=0,
										validators=[validators.Required()],
										)
	Transaction     = QuerySelectField( requiredlabel('Transaction','*'),
										query_factory=mktaccounting.loadTransaction,
										allow_blank=True,
										blank_text='--Choose Transaction--',
										get_label=u'Description',
										validators=[validators.Required()]
										)
	TranDate        = DateField( requiredlabel('Transaction Date','*'),
										validators=[validators.Required()],
										default=mktdate.getBankDate,
										)
	Reference       = TextField('Reference')
	SendMode        = SelectField('Send Mode', 
										choices=[('N','Not yet send'),('Y','Alredy Sent')],
										default='N')
	Note            = TextAreaField(requiredlabel('Note','*'),
										validators=[validators.Required()]
										)

	CreditAccount   = TextField('Credit Account',description=u'1-%s' %"Receivable")
	CreditCategory  = QuerySelectField( requiredlabel("Credit Category","*"),
										query_factory=mktaccounting.loadCategory, 
										blank_text=u'--None--',
										get_label=lambda a: a.ID + '-' + a.Description,
										allow_blank=True,
										validators=[validators.Required()],
										description=u'1-%s' %"Receivable"
										)
	Quantity        = TextField(requiredlabel('Quantity','*'),default=0,description=u'1-%s' %"Receivable")
	UnitPrice       = TextField(requiredlabel('Unit Price','*'),default=0,description=u'1-%s' %"Receivable")
	CreditAmount    = TextField(requiredlabel('Credit Amount','*'),default=0,description=u'1-%s' %"Receivable")
	Remark          = TextAreaField(requiredlabel('Note','*'),
										validators=[validators.Required(),
										validators.Length(max=100)],
										description=u'1-%s' %"Receivable"
										)

	def validate_Amount(form,field):
		Amount = field.data
		if mkttool.isFloat(Amount):
			if Amount <= 0:
				raise ValidationError("Amount must be bigger than zero")

	def validate_OutstandingAmount(form,field):
		Amount = field.data
		if mkttool.isFloat(Amount):
			if Amount <= 0:
				raise ValidationError("Outstanding Amount must be bigger than zero")

	def validate_TranDate(form, field):

		TranDate    = form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)
	
	@staticmethod
	def moneyField():
		return [["CreditAmount","Currency","Amount"],["OutstandingAmount",'Currency'],["UnitPrice",'Currency'],["VATAmount",'Currency']]

	@staticmethod
	def setDisable():
		fields = [('OutstandingAmount'),('CustomerCategory'),('Amount'),('CreditAmount'),('VATAmount'),('Invoice')]
		return fields

	@staticmethod
	def setVisible():
		fields = [('CreditAccount'),('Type'),('VATCategory'),('SendMode')]
		return fields

	@staticmethod
	def setWidth():
		control_list= [('TranDate', len3)]   
		return control_list


	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def isMultiValue():
		controls_list=["1-Receivable"]
		return controls_list

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel   = g.getNAuthorize
			ID          = g.formID

			PayableObj  =   MKT_RECEIVABLE.query.get(ID)
			if not PayableObj:
				return True, "This record ID  is %s  %s not found." %(msg_error, ID)

			else:
				VATAmount           = PayableObj.VATAmount
				Amount              = PayableObj.Amount 
				OutstandingAmount   = PayableObj.OutstandingAmount

				if PayableObj.VAT == 'Y':
					Amount = float(Amount) + float(VATAmount)

				Balance = float(Amount) - float(OutstandingAmount)
				if not Balance == 0:
					return True, "%s This record %s was settled %s. Cannot reverse!" %(msg_error, ID, mktmoney.toMoney(float(Balance), mktmoney.getCurrencyObj(PayableObj.Currency), 2))

				Check = mktteller.validationReverse(MKT_RECEIVABLE,MKT_RECEIVABLE_INAU,ID)

				if not Check[0]:
					Audit       = mktaudit.getAuditrail()
					Inputter    = Audit['Inputter']
					Createdon   = Audit['Createdon']
					LoanList    = [ID]
					REID        = '%s%s'%(ID,'R')
					mktaudit.copyData(MKT_RECEIVABLE,MKT_RECEIVABLE_INAU,{'Inputter':Inputter,'Createdon':Createdon,'Status': 'INAU','Curr':'-1','ID':REID},LoanList)
					mktaudit.copyData(MKT_RECEIVABLE_DE,MKT_RECEIVABLE_DE_INAU,{'Inputter':Inputter,'Createdon':Createdon,'Status': 'INAU','Curr':'-1','ID':REID},LoanList)

					return True,"The record was reversed successfully, record id: %sR INAU"%ID

				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

	@staticmethod
	def hotField():
		hotfield = []
		fielddisplay = "$('#OutstandingAmount').val(data.Amount);"
		varname = "Amount:$('#Amount').val(),Currency:$('#Currency').val()"
		fun = ['Amount', varname, fielddisplay, '/Morakot/ReceivableInformation', 'change']
		hotfield.append(fun)


		fielddisplay = "$('#CustomerCategory').select2('data', {'id':data.DebitCategory,'text':data.DebitCategoryDesc});"
		fielddisplay += ";$('#Transaction').select2('data', {'id':data.Tran,'text':data.TranDesc});"
		varname = "Customer:$('#Customer').val()"
		fun = ['Customer', varname, fielddisplay, '/Morakot/ReceivableInformation', 'change']
		hotfield.append(fun)

		fielddisplay = ("$('#CreditAmount').val(data['results'].Amount)")
		varname = "Quantity:$('#Quantity').val(),Currency:$('#Currency').val(),UnitPrice:$('#UnitPrice').val()";
		varname += ",Currency:$('#Currency').val()"
		fun = ['UnitPrice', varname, fielddisplay, '/Morakot/ReceivableAmount', 'change']
		hotfield.append(fun)

		fielddisplay = ("$('#CreditAmount').val(data['results'].Amount)")
		varname = "Quantity:$('#Quantity').val(),Currency:$('#Currency').val(),UnitPrice:$('#UnitPrice').val()";
		varname += ",Currency:$('#Currency').val()"
		fun = ['Quantity', varname, fielddisplay, '/Morakot/ReceivableAmount', 'change']
		hotfield.append(fun)

		fielddisplay = ("$('#VATAmount').val(data.VATAmount)")
		varname = "VAT:$('#VAT').val()";
		fun = ['VAT', varname, fielddisplay, '/Morakot/ReceivableVAT', 'change']
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def IsAcceptOverride():
		VAT 		= request.form['VAT']
		Amount 		= request.form['Amount']
		Currency 	= request.form['Currency']
		appVAT 		= mktsetting.getAppSetting('VAT')
		TaxObj 		= MKT_TAX.query.filter(MKT_TAX.ID == appVAT).first()
		if VAT == 'Y' and TaxObj:
			VATAmount = (float(Amount) * float(TaxObj.Rate)) / 100
			TotalAmount = mktmoney.toMoney(float(Amount),mktmoney.getCurrencyObj(Currency),1)
			VATAmount   = mktmoney.toMoney(VATAmount,mktmoney.getCurrencyObj(Currency),1)
			return True,'System will collect VAT %s%s of total amount %s. VAT Amount is %s'%(int(TaxObj.Rate),'%',TotalAmount,VATAmount)
		else:
			return False,''

	@staticmethod
	def redirectAfterInsert():
		try:
			ID 			= request.form['ID']
			VAT 		= request.form['VAT']
			Amount 		= request.form['Amount']
			Currency 	= request.form['Currency']
			Invoice 	= request.form['Invoice']
			VATAmount 	= 0
			VATCategory = ''
			appVAT 		= mktsetting.getAppSetting('VAT')
			TaxObj 		= MKT_TAX.query.filter(MKT_TAX.ID == appVAT).first()
			if VAT == 'Y' and TaxObj:
				VATAmount = (float(Amount) * float(TaxObj.Rate)) / 100
				VATAmount = str(mktmoney.toMoney(VATAmount,mktmoney.getCurrencyObj(Currency))).replace(",","")
				VATCategory = TaxObj.Category

			OutstandingAmount = float(Amount) + float(VATAmount)
			updateDict = {'VATAmount':VATAmount,'OutstandingAmount':OutstandingAmount,"VATCategory":VATCategory}
			if not Invoice:
				updateDict.update({"Invoice":autoid.getAutoID('AR_INVOICE_NO')})
			mktdb.updateRecord(MKT_RECEIVABLE_INAU,[MKT_RECEIVABLE_INAU.ID == ID],updateDict)
			db.session.commit()

		except Exception as e:
			db.session.rollback()
			raise e
		return None

	@staticmethod
	def beforeDelete():

		ID 				= g.formID
		ReceivableObj 	= MKT_RECEIVABLE_INAU.query.filter(MKT_RECEIVABLE_INAU.ID == ID).first()

		if ReceivableObj:
			UserID 		= mktuser.getUser().ID
			DateTime 	= mktdate.getDateTimeNow()

			mktdb.updateRecord(MKT_RECEIVABLE_INAU,[MKT_RECEIVABLE_INAU.ID == ID],{'Authorizer':UserID,'Authorizeon':DateTime})
			mktdb.updateRecord(MKT_RECEIVABLE_DE_INAU,[MKT_RECEIVABLE_DE_INAU.ID == ID],{'Authorizer':UserID,'Authorizeon':DateTime})

			mktaudit.moveAUTHtoHIST(MKT_RECEIVABLE_INAU, MKT_RECEIVABLE_HIST, ID)
			mktaudit.moveAUTHtoHIST(MKT_RECEIVABLE_DE_INAU, MKT_RECEIVABLE_DE_HIST, ID)

		return True

	@staticmethod
	def beforeAuthorize():
		Validate = mktarap.beforeAuthValidate(Module='AR')
		if Validate[0]:
			Dict        = Validate[1]
			isReverse   = Validate[2]
			kwargs      = {}

			# post accounting when user reverse AP record
			if isReverse:
				ARDEObj = MKT_RECEIVABLE_DE_INAU.query.filter(MKT_RECEIVABLE_DE_INAU.ID == Dict.ID).all()
				ARList = []
				# Debit posting
				kwargs.update({ 'ID':Dict.ID,
								'Account':'',
								'Category':Dict.CustomerCategory,
								'Currency':Dict.Currency,
								'Amount':Dict.OutstandingAmount,
								'Transaction':Dict.Transaction,
								'TranDate':Dict.TranDate,
								'Reference':Dict.Reference,
								'Note':Dict.Note[:100],
								'DrCr':'Cr',
								'Module':'AR'
							})
				ARList.append(kwargs)
				if Dict.VAT == 'Y':
					kwargs  = {}
					kwargs.update({ 'ID':Dict.ID,
									'Account':'',
									'Category':Dict.VATCategory,
									'Currency':Dict.Currency,
									'Amount':Dict.VATAmount,
									'Transaction':Dict.Transaction,
									'TranDate':Dict.TranDate,
									'Reference':Dict.Reference,
									'Note':Dict.Note[:100],
									'DrCr':'Dr',
									'Module':'AR'
								})
					ARList.append(kwargs)
				# Credit posting
				for row in ARDEObj:
					kwargs      = {}
					kwargs.update({ 'ID':row.ID,
								'Account':row.CreditAccount,
								'Category':row.CreditCategory,
								'Currency':Dict.Currency,
								'Amount':row.CreditAmount,
								'Transaction':Dict.Transaction,
								'TranDate':Dict.TranDate,
								'Reference':Dict.Reference,
								'Note':row.Remark,
								'DrCr':'Dr',
								'Module':'AR'
							})
					ARList.append(kwargs)

				Reverse = mktarap.postMultiARAPJournal(ARList,True)

			else:
				ARDEObj = MKT_RECEIVABLE_DE_INAU.query.filter(MKT_RECEIVABLE_DE_INAU.ID == Dict.ID).all()
				ARList = []
				# Debit posting
				kwargs.update({ 'ID':Dict.ID,
								'Account':'',
								'Category':Dict.CustomerCategory,
								'Currency':Dict.Currency,
								'Amount':Dict.OutstandingAmount,
								'Transaction':Dict.Transaction,
								'TranDate':Dict.TranDate,
								'Reference':Dict.Reference,
								'Note':Dict.Note[:100],
								'DrCr':'Dr',
								'Module':'AR'
							})
				ARList.append(kwargs)
				if Dict.VAT == 'Y':
					kwargs  = {}
					kwargs.update({ 'ID':Dict.ID,
									'Account':'',
									'Category':Dict.VATCategory,
									'Currency':Dict.Currency,
									'Amount':Dict.VATAmount,
									'Transaction':Dict.Transaction,
									'TranDate':Dict.TranDate,
									'Reference':Dict.Reference,
									'Note':Dict.Note[:100],
									'DrCr':'Cr',
									'Module':'AR'
								})
					ARList.append(kwargs)
				# Credit posting
				for row in ARDEObj:
					kwargs      = {}
					kwargs.update({ 'ID':row.ID,
								'Account':row.CreditAccount,
								'Category':row.CreditCategory,
								'Currency':Dict.Currency,
								'Amount':row.CreditAmount,
								'Transaction':Dict.Transaction,
								'TranDate':Dict.TranDate,
								'Reference':Dict.Reference,
								'Note':row.Remark,
								'DrCr':'Cr',
								'Module':'AR'
							})
					ARList.append(kwargs)

				mktarap.postMultiARAPJournal(ARList)

			# raise
		else:
			flash(Validate[1])
			return Validate[0]