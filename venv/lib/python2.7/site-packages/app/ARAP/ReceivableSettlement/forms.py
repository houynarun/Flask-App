from app.mktcore.wtfimports 				import *
from app.mktcore.imports 					import *

from .models 								import *
from ..Receivable.models 					import *
from ..ReceivableCustomer.models 			import *

from decimal 								import *
from app.Category.models 					import *



import app.tools.mktdate						as mktdate
import app.tools.mktaudit 						as mktaudit
import app.tools.mktaccounting 					as mktaccounting
import app.tools.mkttool 						as mkttool
import app.tools.mktfundtransfer 				as mktfundtransfer
import app.tools.user 							as mktuser
import app.tools.mktteller 						as mktteller
import app.tools.mktmoney 						as mktmoney
import app.ARAP.tools.mktarap 					as mktarap


#function
def getRecord():
	try:
		result = MKT_RECEIVABLE.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_RECEIVABLE_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'ID':g.formID})
				Dict.update({'Customer'	:row.Customer})
		
			return Dict
		else:
			return Dict
	except:
		raise
#=========== Block Hot select field =============
@app.route('/Morakot/ReceivableSettlement/getInvoice',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getReceivableSettlementInvoice():
	Customer 	= request.args.get('Customer')
	dic 		= {}
	ReceivableID = ''
	Tran		= '_None'
	TranDesc	= '--Choose Transaction--'
	QueryObj	= MKT_RECEIVABLE.query.filter(MKT_RECEIVABLE.OutstandingAmount>0,
														MKT_RECEIVABLE.Customer==Customer).\
												order_by(MKT_RECEIVABLE.Invoice.asc())

	for row in QueryObj:
		if not row.ID[-1] == 'R':
			Description 		= row.Invoice + " - " +( row.Note[:35] +'...' if len(row.Note)> 35 else row.Note)
			dic[row.Invoice] 	= Description
			ReceivableID 		= row.ID

	param = mktarap.getARAPParam('ARS')
	if param:
		Tran 	= param.ID
		TranDesc = ('%s - %s')%(param.ID,param.Description)

	return jsonify(	results=dic,
					ReceivableID = ReceivableID,
					Tran 				=	Tran,
					TranDesc 			=	TranDesc)

def loadInvoiceChoise():  #define function 
	if request.method == 'POST':
		Customer = request.form["Customer"]
		QueryObj = MKT_RECEIVABLE.query.filter_by(Customer=Customer)
	else:
		if len(getRecord())>0:
			Record = getRecord()
			# print 'load Invoice with view'
			QueryObj =  MKT_RECEIVABLE.query.filter_by(ID=Record['ID'])  
		else:
			# print 'load Invoice with blank'
			QueryObj = MKT_RECEIVABLE.query.filter_by(ID='')

	ChoicesList = []
	if QueryObj:
		for row in QueryObj:
			Description = row.Invoice + " - " +( row.Note[:35] +'...' if len(row.Note)> 35 else row.Note)
			ChoicesList.append((row.Invoice, Description))
	return ChoicesList

#=========== End Block Hot select field =============

def loadReceivableCustomer():
	return MKT_RECEIVABLE_CUSTOMER.query.filter(MKT_RECEIVABLE_CUSTOMER.Branch == mktuser.getCurrentBranch()).\
											order_by(MKT_RECEIVABLE_CUSTOMER.ID.asc()).all()



class FRM_RECEIVABLE_SETTLEMENT(exform):

	ParentID  			= TextField('ParentID')

	Customer 			= QuerySelectField( requiredlabel("Customer","*"),
										query_factory=loadReceivableCustomer, 
										blank_text=u'--None--',								
										get_label=lambda a: a.ID + '-' + a.CustomerName,
										allow_blank=True,
										validators=[validators.Required()]
										)

	CustomerCategory 	= QuerySelectField( requiredlabel("Customer Category","*"),
										query_factory=mktaccounting.loadCategory, 
										blank_text=u'--None--',								
										get_label=lambda a: a.ID + '-' + a.Description,
										allow_blank=True,
										validators=[validators.Required()]
										)

	Invoice 		= SelectField('Invoice', coerce=str)

	Type 			= SelectField('Type', choices=[('2','Cash Payment'),('1','Purchase')])

	# SettlementAccount  	= RemoteTextField("Settlement Account",
	# 									dicRemote={'url':'/Morakot/getAccount'}
	# 									)
	SettlementAccount 	= HiddenField("Settlement Account")
	SettlementCategory 	= QuerySelectField( requiredlabel("Settlement Category","*"),
										query_factory=mktaccounting.loadCategory, 
										blank_text=u'--None--',								
										get_label=lambda a: a.ID + '-' + a.Description,
										allow_blank=True,
										validators=[validators.Required()]
										)

	Currency 		= QuerySelectField(requiredlabel("Currency","*"),
										query_factory=mktaccounting.loadCurrency, 
										blank_text=u'--Choose Currency--',
										get_label=u'ID', 
										default = lambda:mktaccounting.loadCurrency('USD'),
										allow_blank=True,
										validators=[validators.Required()],
										)
	Amount 			= TextField(requiredlabel('Settlement Amount','*'),
										validators=[validators.Required()]
										)
	OutstandingAmount = TextField(requiredlabel('Outstanding Amount','*'),
										validators=[validators.Required()],
										)
	Transaction 	= QuerySelectField(	requiredlabel('Transaction','*'),
										query_factory=mktaccounting.loadTransaction,
										allow_blank=True,
										blank_text='--Choose Transaction--',
										get_label=u'Description',
										validators=[validators.Required()]
										)
	TranDate 		= DateField( requiredlabel('Transaction Date','*'),
										validators=[validators.Required()],
										default=mktdate.getBankDate,
										)
	Reference 		= TextField('Reference')
	Note 			= TextAreaField(requiredlabel('Note','*'),
										validators=[validators.Required(),
													validators.Length(max=100)]
										)

	def __init__(self, *args, **kwargs):
		super(FRM_RECEIVABLE_SETTLEMENT, self).__init__(*args, **kwargs)
		self.Invoice.choices=loadInvoiceChoise()

	def validate_SettlementAccount(form, field):

		DrAccount 		= request.form['SettlementAccount']  if 'SettlementAccount' in request.form else ''
		DrCategory 		= request.form['SettlementCategory']  if 'SettlementCategory' in request.form else ''
		DrCurrency 		= request.form['Currency']  if 'Currency' in request.form else ''
		TranDate		= str(form.TranDate.data)
		Amount 			= form.Amount.data

		mktarap.ValidateAccount(DrAccount, DrCategory, DrCurrency, Amount, TranDate, 'Dr')

	def validate_SettlementCategory(form, field):
		try:
			DrAccount 		= request.form['SettlementAccount']  if 'SettlementAccount' in request.form else ''
			DrCategory 		= request.form['SettlementCategory']  if 'SettlementCategory' in request.form else ''
			DrCurrency 		= request.form['Currency'] if 'Currency' in request.form else ''
			Amount 			= form.Amount.data
			TranDate		= str(form.TranDate.data)

			mktarap.ValidateCategory(DrAccount, DrCategory, DrCurrency, Amount, TranDate,)
		except:
			raise

	def validate_Amount(form,field):
		Amount = field.data
		OutstandingAmount = form.OutstandingAmount.data
		if mkttool.isFloat(Amount):
			Amount = float(Amount)
			if Amount <= 0:
				raise ValidationError("The amount must be bigger than zero")
			if mkttool.isFloat(OutstandingAmount):
				OutstandingAmount = float(OutstandingAmount)
				if Amount > OutstandingAmount:
					raise ValidationError("The amount can not bigger than outstanding amount.")


	def validate_OutstandingAmount(form,field):
		Amount = field.data
		if mkttool.isFloat(Amount):
			if Amount <= 0:
				raise ValidationError("Outstanding Amount must be bigger than zero")

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)
	
	@staticmethod
	def moneyField():
		fields = [['Amount','Currency'],['OutstandingAmount','Currency']]
		return fields

	@staticmethod
	def setDisable():
		fields = [('OutstandingAmount'),('CustomerCategory')]
		return fields

	@staticmethod
	def setVisible():
		fields = [('Type'),('ParentID')]
		return fields

	@staticmethod
	def setWidth():
		control_list= [('TranDate', len3)]   
		return control_list


	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			ID 			= g.formID

			PayableObj 	=	MKT_RECEIVABLE_SETTLEMENT.query.get(ID)
			if not PayableObj:
				return True, "This record ID  is %s  %s not found." %(msg_error, ID)

			else:

				Check = mktteller.validationReverse(MKT_RECEIVABLE_SETTLEMENT,MKT_RECEIVABLE_SETTLEMENT_INAU,ID)

				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Dreatedon 	= Audit['Dreatedon']
					CheckAccounting = mktteller.setReverse('PayableSettlement',AuthLevel,'PS',MKT_RECEIVABLE_SETTLEMENT,MKT_RECEIVABLE_SETTLEMENT_INAU,ID,Inputter,Dreatedon)

					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

	@staticmethod
	def hotField():
		hotfield = []


		fielddisplay = "$('#CustomerCategory').select2('data', {'id':data.DebitCategory,'text':data.DebitCategoryDesc});"
		varname = "Customer:$('#Customer').val()"
		fun = ['Customer', varname, fielddisplay, '/Morakot/ReceivableInformation', 'change']
		hotfield.append(fun)

		fielddisplay = "$('#OutstandingAmount').val(data.OutstandingAmount); $('#Amount').val(data.OutstandingAmount); $('#ParentID').val(data.ParentID);"
		varname = "Invoice:$('#Invoice').val(), Customer:$('#Customer').val()"
		fun = ['Invoice', varname, fielddisplay, '/Morakot/ReceivableInformation', 'change']
		hotfield.append(fun)

		fielddisplay = "$('#Reference').val(data.ReceivableID);"
		fielddisplay += ";$('#Transaction').select2('data', {'id':data.Tran,'text':data.TranDesc});"
		varname="Customer:$('#Customer').val()"
		fun=["Customer", varname ,fielddisplay, "/Morakot/ReceivableSettlement/getInvoice", "click"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#SettlementCategory').select2('data', {'id':data.Category,'text':data.CategoryDesc});"
		fielddisplay	+=	"$('#Currency').select2('data', {'id':data.Currency,'text':data.Currency});"
		varname 		= "Account:$('#SettlementAccount').val(),Currency:$('#Currency').val(),TranDate:$('#TranDate').val()"
		fun 			= ["SettlementAccount", varname, fielddisplay, "/Morakot/FundTransferHotField", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotSelectField():
		hotfield=[]

		fielddisplay="Invoice"
		varname="Customer:$('#Customer').val()"
		fun=["Customer", varname ,fielddisplay, "/Morakot/ReceivableSettlement/getInvoice", "click"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeAuthorize():
		Validate = mktarap.beforeAuthValidate(Module='RS')


		if Validate[0]:
			Dict 		= Validate[1]
			isReverse 	= Validate[2]
			kwargs 		= {}

			if isReverse:
				kwargs.update({ 'ID':Dict.ID,
							'CreditAccount':Dict.SettlementAccount,
							'CreditCategory':Dict.SettlementCategory,
							'DebitAccount':'',
							'DebitCategory':Dict.CustomerCategory,
							'Currency':Dict.Currency,
							'Amount':Dict.Amount,
							'Transaction':Dict.Transaction,
							'TranDate':Dict.TranDate,
							'Reference':Dict.Reference,
							'Note':Dict.Note,
							'Module':'RS',
						})
				kwargs.update({'ParentObj':Dict,'ParentID':Dict.ParentID,'isReverse':isReverse})
				mktarap.postReverseARAPJournal(**kwargs)
			else:
				kwargs.update({ 'ID':Dict.ID,
							'DebitAccount':Dict.SettlementAccount,
							'DebitCategory':Dict.SettlementCategory,
							'CreditAccount':'',
							'CreditCategory':Dict.CustomerCategory,
							'Currency':Dict.Currency,
							'Amount':Dict.Amount,
							'Transaction':Dict.Transaction,
							'TranDate':Dict.TranDate,
							'Reference':Dict.Reference,
							'Note':Dict.Note,
							'Module':'RS',
						})
				kwargs.update({'ParentObj':Dict,'ParentID':Dict.ParentID})
				mktarap.postARAPJournal(**kwargs)
			# Update Outstanding Balance
			CheckUpdate = mktarap.updateOutstandingARAP(**kwargs)
			if not CheckUpdate[0]:
				flash(CheckUpdate[1])
				return CheckUpdate[0] # False

			return True
		else:
			flash(Validate[1])
			return Validate[0]