from app.mktcore.wtfimports 				import *
from decimal 								import *
from app.Category.models 					import *
from app.Account.models 					import *
from app.AccProduct.models 					import MKT_ACC_PRODUCT
from app.Transaction.models 				import MKT_TRANSACTION
from ..Payable.models 						import *
from ..PayableSettlement.models 			import *
from ..Receivable.models 					import *
from ..ReceivableSettlement.models 			import *
from ..ARAPParameter.models 				import *

import app.tools.mktdate						as mktdate
import app.tools.mktaudit 						as mktaudit
import app.tools.mktaccounting 					as mktaccounting
import app.tools.mkttool 						as mkttool
import app.tools.mktdb 							as mktdb
import app.tools.mktteller 						as mktteller

def getARAPParam(Module = ''):

	Transaction = []
	Param = MKT_ARAP_PARAM.query.filter(MKT_ARAP_PARAM.ID == 'SYSTEM').first()
	if Param and Module == 'AP':
		Transaction = MKT_TRANSACTION.query.filter(MKT_TRANSACTION.ID == Param.APTran).first()
	elif Param and Module == 'AR':
		Transaction = MKT_TRANSACTION.query.filter(MKT_TRANSACTION.ID == Param.ARTran).first()
	elif Param and Module == 'APS':
		Transaction = MKT_TRANSACTION.query.filter(MKT_TRANSACTION.ID == Param.APSettleTran).first()
	elif Param and Module == 'ARS':
		Transaction = MKT_TRANSACTION.query.filter(MKT_TRANSACTION.ID == Param.ARSettleTran).first()

	return Transaction

def loadTransaction():
	return MKT_TRANSACTION.query

def updateOutstandingARAP(**kwargs):
	try:
		QueryObj 	= []
		ParentID 	= kwargs.get('ParentID')
		Amount 		= kwargs.get('Amount',0)
		isReverse 	= kwargs.get('isReverse',False)
		if ParentID:

			if kwargs.get('Module')== 'PS':
				QueryObj = MKT_PAYABLE.query.get(ParentID)

			if kwargs.get('Module')== 'RS':
				QueryObj = MKT_RECEIVABLE.query.get(ParentID)
			#Update Outstanding amount
			if Amount and QueryObj:
				if isReverse:
					QueryObj.OutstandingAmount = float(QueryObj.OutstandingAmount) + float(Amount)
				else:
					QueryObj.OutstandingAmount = float(QueryObj.OutstandingAmount) - float(Amount)

				db.session.add(QueryObj)
		# app.logger.debug('Update Outstanding%s'%QueryObj.OutstandingAmount)
		return True,''

	except Exception as e:
		db.session.rollback()
		db.session.close()
		return False,msg_error+'%s'%e

def beforeAuthValidate(**kwargs):
	# Authorize have two transcations INAU, RNAU 
	try:
		Module 		=	kwargs.get('Module')
		ID 			= 	g.formID
		if Module:
			if Module == "AP":
				Table =	MKT_PAYABLE_INAU

			elif Module == 'PS':
				Table = MKT_PAYABLE_SETTLEMENT_INAU

			elif Module == "AR":
				Table =	MKT_RECEIVABLE_INAU

			elif Module == "RS":
				Table =	MKT_RECEIVABLE_SETTLEMENT_INAU

			QueryObj 	= Table.query.get(ID)

			# Check record is reverse
			isReverse 	= True if ID[-1] == 'R' else False

			if not QueryObj:
				return False,msg_error + "The record %s not found for authorization." %ID, isReverse
			else:
				return True,QueryObj, isReverse
		return False,'Missing module..', isReverse
	except Exception, e:
		db.session.rollback()
		db.session.close()
		return False,msg_error+'%s'%e, isReverse

def postARAPJournal(**kwargs):
	try:
		Audit 			= mktaudit.getAuditrail()
		Inputter		= Audit['Inputter']
		Createdon 		= Audit['Createdon']
		Authorizer 		= Audit['Authorizer']
		Authorizeon		= Audit['Authorizeon']
		Branch 			= Audit['Branch']
		
		DebitCategory 	= kwargs.get('DebitCategory')
		DebitAccount 	= kwargs.get('DebitAccount')
		CreditCategory	= kwargs.get('CreditCategory')
		CreditAccount	= kwargs.get('CreditAccount')

		TranDate		= kwargs.get('TranDate')
		Transaction		= kwargs.get('Transaction')
		UserReference 	= kwargs.get('Reference','')
		Reference 		= kwargs.get('ID','')
		Note			= kwargs.get('Note','')
		Module 			= kwargs.get('Module','')

		Amount			= kwargs.get('Amount')
		Invoice 		= kwargs.get('Invoice')
		Currency 		= kwargs.get('Currency')
		
		for i in range(0, 2):
			if i == 0:
				DrCr 		= 	"Dr"
				Category 	= 	DebitCategory
				Account 	= 	DebitAccount
				Mode 		= 	"Direct" if not Account else ''

			else:

				DrCr 		= 	"Cr"
				Category 	= 	CreditCategory
				Account 	= 	CreditAccount
				Mode 		= 	"Direct" if not Account else ''
			
			GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
			DateTimeNow = mktdate.getDateTimeNow()

			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				Inputter,				# Inputter
				Createdon, 				# Createdon
				Authorizer,				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				Category,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(Amount), 		# Amount
				Module,					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				Reference, 				# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=UserReference
			)
		return True,''
	except Exception as e:
		db.session.rollback()
		db.session.close()
		return False,msg_error+'%s'%e

def postReverseARAPJournal(**kwargs):
	try:
		ID 			= kwargs.get('ID')
		Module 		= kwargs.get('Module')

		if Module == "AP":
			Table 		=	MKT_PAYABLE
			Table_inau 	=	MKT_PAYABLE_HIST

		elif Module == 'PS':
			Table 		= MKT_PAYABLE_SETTLEMENT
			Table_inau 	= MKT_PAYABLE_SETTLEMENT_HIST

		elif Module == "AR":
			Table 		=	MKT_RECEIVABLE
			Table_inau 	=	MKT_RECEIVABLE_HIST

		elif Module == "RS":
			Table 		=	MKT_RECEIVABLE_SETTLEMENT
			Table_inau 	=	MKT_RECEIVABLE_SETTLEMENT_HIST

		if ID:
			reverseAP 	= postARAPJournal(**kwargs)
			if reverseAP[0]:
				ID 		= ID[:-1]
				mktaudit.moveAUTHtoHIST(Table, Table_inau, ID)
				mktdb.deleteRecord(Table,[Table.ID==ID])
	except Exception as e:
		db.session.rollback()
		db.session.close()
		return False,msg_error+'%s'%e


def postMultiARAPJournal(ObjList = [],reverse = False):
	try:
		Audit 			= mktaudit.getAuditrail()
		Inputter		= Audit['Inputter']
		Createdon 		= Audit['Createdon']
		Authorizer 		= Audit['Authorizer']
		Authorizeon		= Audit['Authorizeon']
		Branch 			= Audit['Branch']
		ID 				= ''
		if ObjList:
			for kwargs in ObjList:
				ID 				= kwargs.get('ID')
				TranDate		= kwargs.get('TranDate')
				Transaction		= kwargs.get('Transaction')
				UserReference 	= kwargs.get('Reference','')
				Reference 		= kwargs.get('ID','')
				Note			= kwargs.get('Note','')
				Module 			= kwargs.get('Module','')

				Amount			= kwargs.get('Amount')
				Invoice 		= kwargs.get('Invoice')
				Currency 		= kwargs.get('Currency')
				DrCr 			= kwargs.get('DrCr')
				Category 		= kwargs.get('Category')
				Account 		= kwargs.get('Account')
				Mode 			= "Direct" if not Account else ''

				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
				DateTimeNow = mktdate.getDateTimeNow()

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					Module,					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					Reference, 				# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
					UserReference=UserReference
				)
			if reverse and ID:
				mktaudit.moveAUTHtoHIST(MKT_RECEIVABLE, MKT_RECEIVABLE_HIST, ID[:-1])
				mktaudit.moveAUTHtoHIST(MKT_RECEIVABLE_DE, MKT_RECEIVABLE_DE_HIST, ID[:-1])
				mktdb.deleteRecord(MKT_RECEIVABLE,[MKT_RECEIVABLE.ID==ID[:-1]])
		else:
			return False, ''
		return True,''
	except Exception as e:
		db.session.rollback()
		db.session.close()
		return False,msg_error+'%s'%e


def ValidateAccount(Account, Category, Currency, Amount, TranDate,DrCr):

	if mktteller.isAmountInDecimal(Amount) and Account:
		Amount 		= Decimal(Amount)
		if Account and Amount !=0:
			AccObj = MKT_ACCOUNT.query.get(Account)
			if AccObj :
				AccCategory = AccObj.AccCategory
				AccCurrency = AccObj.Currency
				if AccCategory != Category:
					raise ValidationError("Debit category not belong to account.")
				if AccCurrency != Currency:
					raise ValidationError("Debit currency not belong to account.")

		CheckBalance = mktaccounting.checkMaxMinBalance(Account, Currency, Decimal(Amount), DrCr,TranDate=TranDate)
		if CheckBalance:
			raise ValidationError(CheckBalance)

def getAllAccountProductCategory():
	AccProObj = MKT_ACC_PRODUCT.query
	Category = [str(row.CategoryList) for row in AccProObj]
	return Category

def ValidateCategory(Account, Category, Currency, Amount, TranDate):

	if mktteller.isAmountInDecimal(Amount):
		Amount 			= Decimal(Amount)
		if Category:
			ListCashCategory = getAllAccountProductCategory()
			
			if Category in ListCashCategory:
				if not Account:
					CategoryDesc = Category
					CategoryObj = MKT_CATEGORY.query.get(Category)
					if CategoryObj:
						CategoryDesc = '%s - %s'%(Category,CategoryObj.Description)
					raise ValidationError("Debit account is required if you choose category %s"% CategoryDesc)