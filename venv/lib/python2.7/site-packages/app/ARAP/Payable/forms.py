from app.mktcore.wtfimports 				import *
from app.mktcore.imports 					import *
from .models 								import *
from ..PayableSettlement.models 			import *

from decimal 								import *
from app.Vendor.Vendor.models 				import *
from app.Category.models 					import *

import app.tools.mktdate						as mktdate
import app.tools.mktaudit 						as mktaudit
import app.tools.mktaccounting 					as mktaccounting
import app.tools.mkttool 						as mkttool
import app.tools.mktfundtransfer 				as mktfundtransfer
import app.tools.mktteller 						as mktteller
import app.tools.mktmoney 						as mktmoney
import app.ARAP.tools.mktarap 					as mktarap

ExtendClass 			= 	mktsetting.ExtendModule()
PAYABLE_LINK 			=	ExtendClass.getUrlExtend(Module="PayableSettlement")

def loadVendor():
	return MKT_VENDOR.query.all()

class FRM_PAYABLE(exform):

	Vendor 			= QuerySelectField( requiredlabel("Vendor","*"),
										query_factory=loadVendor, 
										blank_text=u'--None--',
										get_label=lambda a: a.ID + '-' + a.VendorName,
										allow_blank=True,
										validators=[validators.Required()]
										)

	VendorCategory 	= QuerySelectField( requiredlabel("Vendor Category","*"),
										query_factory=mktaccounting.loadCategory, 
										blank_text=u'--None--',
										get_label=lambda a: a.ID + '-' + a.Description,
										allow_blank=True,
										validators=[validators.Required()]
										)
	Invoice 		= TextField(requiredlabel('Purchase Invoice','*'),
										validators=[validators.Required(),
													validators.Length(max=100)])

	Type 			= SelectField('Type', choices=[('1','Purchase'),('2','Cash Payment')])

	DebitAccount  	= TextField('DebitAccount')

	DebitCategory 	= QuerySelectField( requiredlabel("Debit Category","*"),
										query_factory=mktaccounting.loadCategory, 
										blank_text=u'--None--',
										get_label=lambda a: a.ID + '-' + a.Description,
										allow_blank=True,
										validators=[validators.Required()]
										)

	Currency 		= QuerySelectField(requiredlabel("Currency","*"),
										query_factory=mktaccounting.loadCurrency, 
										blank_text=u'--Choose Currency--',
										get_label=u'ID', 
										default = lambda:mktaccounting.loadCurrency(True),
										allow_blank=True,
										validators=[validators.Required()],
										)
	Amount 			= TextField(requiredlabel('Amount','*'),
										validators=[validators.Required()]
										)
	OutstandingAmount = TextField(requiredlabel('Outstanding Amount','*'),
										validators=[validators.Required()],
										)
	Transaction 	= QuerySelectField(	requiredlabel('Transaction','*'),
										query_factory=mktarap.loadTransaction,
										blank_text='--Choose Transaction--',
										get_label=lambda a: a.ID + ' - ' + a.Description,
										allow_blank=True,
										validators=[validators.Required()]
										)
	TranDate 		= DateField( requiredlabel('Transaction Date','*'),
										validators=[validators.Required()],
										default=mktdate.getBankDate,
										)
	Reference 		= TextField('Reference')
	Note 			= TextAreaField(requiredlabel('Note','*'),
										validators=[validators.Required(),
													validators.Length(max=100)]
										)

	def validate_Amount(form,field):
		Amount = field.data
		if mkttool.isFloat(Amount):
			if Amount <= 0:
				raise ValidationError("Amount must be bigger than zero")

	def validate_OutstandingAmount(form,field):
		Amount = field.data
		if mkttool.isFloat(Amount):
			if Amount <= 0:
				raise ValidationError("Outstanding Amount must be bigger than zero")

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)

		if Check:

			raise ValidationError(Check)
	
	@staticmethod
	def moneyField():
		fields = [['Amount','Currency'],['OutstandingAmount','Currency']]
		return fields

	@staticmethod
	def setDisable():
		fields = [('OutstandingAmount'),('VendorCategory')]
		return fields

	@staticmethod
	def setVisible():
		fields = [('DebitAccount'),('Type')]
		return fields

	@staticmethod
	def setWidth():
		control_list= [('TranDate', len3)]   
		return control_list


	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def reverseRec():

		try:
			
			AuthLevel 	= g.getNAuthorize
			ID 			= g.formID

			PayableObj 	=	MKT_PAYABLE.query.get(ID)
			if not PayableObj:
				return True, "This record ID  is %s  %s not found." %(msg_error, ID)

			else:

				Balance = float(PayableObj.Amount) - float(PayableObj.OutstandingAmount)
				if not Balance == 0:
					ParentID 	= PayableObj.ID
					Vendor 		= PayableObj.Vendor
					Invoice 	= PayableObj.Invoice

					PayableSettleObj = db.session.query(MKT_PAYABLE_SETTLEMENT.ID).\
												filter(MKT_PAYABLE_SETTLEMENT.ParentID == ParentID,
													   MKT_PAYABLE_SETTLEMENT.Vendor == Vendor,
													   MKT_PAYABLE_SETTLEMENT.Invoice == Invoice).all()
					Msg = "%s This record %s was settled %s. Cannot reverse!" %(msg_error, ID, mktmoney.toMoney(float(Balance),mktmoney.getCurrencyObj(PayableObj.Currency), 2))

					for row in PayableSettleObj:
						Msg += Markup(' <b><a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a></b>, ' %(PAYABLE_LINK,row.ID,PAYABLE_LINK,row.ID,row.ID))

					return True, Msg

				Check = mktteller.validationReverse(MKT_PAYABLE,MKT_PAYABLE_INAU,ID)

				if not Check[0]:
					Audit 		= mktaudit.getAuditrail()
					Inputter	= Audit['Inputter']
					Createdon 	= Audit['Createdon']
					CheckAccounting = mktteller.setReverse('Payable',AuthLevel,'AP',MKT_PAYABLE,MKT_PAYABLE_INAU,ID,Inputter,Createdon)

					if not CheckAccounting[0]:
						#Catch error
						db.session.rollback()
						db.session.close()
						return True,CheckAccounting[1]

					#Successfully
					db.session.commit()
					db.session.close()
					return True,CheckAccounting[1]
				else:
					return Check

		except Exception, e:
			db.session.rollback()
			db.session.close()
			return True,msg_error+"%s"%e

	@staticmethod
	def hotField():
		hotfield = []
		fielddisplay = "$('#OutstandingAmount').val(data.Amount);"
		varname = "Amount:$('#Amount').val(),Currency:$('#Currency').val()"
		fun = ['Amount', varname, fielddisplay, '/Morakot/PayableInformation', 'change']
		hotfield.append(fun)


		fielddisplay = "$('#VendorCategory').select2('data', {'id':data.CreditCategory,'text':data.CreditCategoryDesc});"
		fielddisplay += ";$('#Transaction').select2('data', {'id':data.Tran,'text':data.TranDesc});"
		varname = "Vendor:$('#Vendor').val()"
		fun = ['Vendor', varname, fielddisplay, '/Morakot/PayableInformation', 'change']
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def beforeAuthorize():
		Validate = mktarap.beforeAuthValidate(Module='AP')
		if Validate[0]:
			Dict 		= Validate[1]
			isReverse 	= Validate[2]
			kwargs 		= {}

			# post accounting when user reverse AP record
			if isReverse:
				kwargs.update({ 'ID':Dict.ID,
							'CreditAccount':Dict.DebitAccount,
							'CreditCategory':Dict.DebitCategory,
							'DebitAccount':'',
							'DebitCategory':Dict.VendorCategory,
							'Currency':Dict.Currency,
							'Amount':Dict.Amount,
							'Transaction':'25',
							'TranDate':Dict.TranDate,
							'Reference':Dict.Reference,
							'Note':Dict.Note,
							'Module':'AP'
						})
				mktarap.postReverseARAPJournal(**kwargs)
			else:
				kwargs.update({ 'ID':Dict.ID,
							'DebitAccount':Dict.DebitAccount,
							'DebitCategory':Dict.DebitCategory,
							'CreditAccount':'',
							'CreditCategory':Dict.VendorCategory,
							'Currency':Dict.Currency,
							'Amount':Dict.Amount,
							'Transaction':Dict.Transaction,
							'TranDate':Dict.TranDate,
							'Reference':Dict.Reference,
							'Note':Dict.Note,
							'Module':'AP'
						})
				mktarap.postARAPJournal(**kwargs)
		else:
			flash(Validate[1])
			return Validate[0]