from app.mktcore.imports 			import *
from app.mktcore.wtfimports 		import *
from .models 						import *
from app.LoanContract.models 		import *
from app.PD.models 					import *
from app.PDParameter.models 		import *
from app.RepaymentSchedule.models 	import *
from app.Account.models 			import *
from app.Customer.models 			import *

import app.tools.mktaccounting 		as mktaccounting
import app.tools.mktpdcollection 	as mktpdcollection
import app.tools.mktloan 			as mktloan
import app.tools.mktdate 			as mktdate
import app.tools.user           	as mktuser
import app.tools.mktaudit 			as mktaudit
import app.tools.mktparam 			as mktParam

def loadContract():
	try:
		Branch 			=	mktuser.getCurrentBranch()
		LoanContract  	=	MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.Branch==Branch)	  

		return LoanContract

	except Exception as e:
		raise 


@app.route("/Morakot/getLoanAccountBalance", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanAccountBalance():
	LoanID 		= request.args.get('LoanID')
	SystemDate 	= str(mktdate.getBankDate())

	PDObj 		=	MKT_PAST_DUE.query.filter(MKT_PAST_DUE.ID=='PD%s'%LoanID).\
					filter(MKT_PAST_DUE.TotODAmount > 0)
	LoanObj    	=	MKT_LOAN_CONTRACT.query.get(LoanID)
	Amount 		=	0
	CustomerID 		= 	''
	CustomerName 	= 	''
	LoanBalance 	= 	0
	AccountID 		= 	''
	AccountBalance 	= 	0

	Principal 		= 	0
	PDPrincipal 	= 	0
	Interest 		= 	0
	PDInterest 		= 	0
	Penalty 		= 	0
	Charge 			=	0

	if LoanObj:
		LoanBalance 	= 	LoanObj.Amount
		CustomerObj 	=	MKT_CUSTOMER.query.get(LoanObj.ContractCustomerID)
		if CustomerObj:
			CustomerID 		= 	LoanObj.ContractCustomerID
			CustomerName 	= 	'%s %s'%(CustomerObj.LastNameEn,CustomerObj.FirstNameEn)

		PDObj 		=	MKT_PAST_DUE.query.filter(MKT_PAST_DUE.ID=='PD%s'%LoanID).\
									filter(MKT_PAST_DUE.TotODAmount > 0).first()
		if PDObj:
			PDPrincipal 	= 	PDObj.TotPrincipalDue
			PDInterest 		= 	PDObj.TotInterestDue
			Penalty 		= 	PDObj.TotPenaltyDue
			Charge 			=	PDObj.TotChargeDue


		ScheduleObj = 	MKT_REP_SCHEDULE.query.\
						filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
						filter(MKT_REP_SCHEDULE.CollectionDate == SystemDate).\
						filter(MKT_REP_SCHEDULE.RepStatus == '0').first()

		if ScheduleObj:
			Principal 	= 	ScheduleObj.Principal
			Interest 	= 	ScheduleObj.Interest

		AccountObj 	=	MKT_ACCOUNT.query.get(LoanObj.Account)
		if AccountObj:
			AccountID 		= 	LoanObj.Account
			AccountBalance 	=	AccountObj.AvailableBal

	return jsonify(CustomerID	= 	CustomerID,
				CustomerName 	= 	CustomerName,
				LoanBalance 	= 	str(LoanBalance),
				AccountID 		= 	AccountID,
				AccountBalance 	= 	str(AccountBalance),
				Principal 		= 	str(Principal),
				PDPrincipal 	= 	str(PDPrincipal),
				Interest 		= 	str(Interest),
				PDInterest 		= 	str(PDInterest),
				Penalty 		= 	str(Penalty),
				Charge 			=	str(Charge)
			)

class FRM_MANUAL_LOAN_COLLECTION(exform):

	LoanID 	= 	RemoteTextField(requiredlabel(getLanguage('Loan ID'), "*"), [validators.Required()])

	CustomerID 		= 	TextField("Customer ID",default='')
	CustomerName 	= 	TextField("Customer Name",default='')
	LoanBalance 	= 	TextField("Loan Balance",default='0')
	AccountID 		= 	TextField("Account ID",default='')
	AccountBalance 	= 	TextField("Account Balance",default='0')

	PDPrincipal 	= 	TextField("PD Principal",default='0')
	PDInterest 		= 	TextField("PD Interest",default='0')
	Charge 			= 	TextField("Charge",default='0')
	Penalty 		= 	TextField("Penalty",default='0')
	Principal 		= 	TextField("Principal",default='0')
	Interest 		= 	TextField("Interest",default='0')
	TranDate 		= 	TextField(requiredlabel("Transaction Date", "*"), [validators.Required()], default=mktdate.getBankDate)
	Reference 		= 	TextField("Reference",[validators.Length(max=35)])
	Note 			= 	TextAreaField("Note",[validators.Length(max=140)])

	def validate_AccountBalance(form, field):
		LoanID 		= 	request.form['LoanID']
		LoanObj 	= 	MKT_LOAN_CONTRACT.query.get(LoanID)

		if LoanObj:
			AccountObj 		=	MKT_ACCOUNT.query.get(LoanObj.Account)
			AccountBalance 	=	AccountObj.AvailableBal
			if AccountBalance <= 0:
				raise ValidationError("Cannot collect with Account Balance zero")

	def validate_TranDate(form, field):
		TranDate 	= field.data
		SystemDate 	= mktdate.getBankDate()

		if TranDate != str(SystemDate):
			raise ValidationError("Transaction Date cannot different from bank date")
		
	def validate_LoanID(form, field):
		SystemDate 	= mktdate.getBankDate()
		LoanID 		= request.form['LoanID']
		LoanObj 	= 	MKT_LOAN_CONTRACT.query.get(LoanID)
		if not LoanID:
			raise ValidationError("Loan contract not found")
			
		PDObj, ScheduleObj 	=	getObjForCollection(LoanID)
														
		if not PDObj and not ScheduleObj:
			raise ValidationError("Loan doesn't have PD or on collection date")
	
	def validate_Penalty(form, field):
		SystemDate 	= 	mktdate.getBankDate()
		LoanID 		= 	request.form['LoanID']
		LoanObj 	= 	MKT_LOAN_CONTRACT.query.get(LoanID)
		if not LoanID:
			raise ValidationError("Loan contract not found")
			
		PDObj, ScheduleObj 	=	getObjForCollection(LoanID)
	
		PDParamObj  =	MKT_PD_PARAM.query.get(LoanObj.LoanProduct)
		if not PDParamObj:
			PDParamObj  =	MKT_PD_PARAM.query.get('SYSTEM')

		if PDObj and PDParamObj.PenOption == 'M' and PDObj.TotPrincipalDue <= 0 and PDObj.TotInterestDue <= 0 :
			if not ScheduleObj:
				raise ValidationError(Markup("Have to collect manually by going to <a href='javascript:void(0)' onClick=CustomClickView('Penalty&nbspCollection','PenaltyWaive?ID=%s')>Penalty Collection Form</a>"%LoanID))


	@staticmethod
	def setDisable():
		Fields = [	('CustomerID'), ('CustomerName'), ('LoanBalance'), ('AccountID'), ('AccountBalance'), ('Charge'), 
					('Principal'), ('PDPrincipal'), ('Interest'), ('PDInterest'), ('Penalty'), ('TranDate')]

		return Fields

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#CustomerID').val(data.CustomerID); $('#CustomerName').val(data.CustomerName)"
		fielddisplay 	+= ";$('#LoanBalance').val(data.LoanBalance); $('#AccountID').val(data.AccountID)"
		fielddisplay 	+= ";$('#AccountBalance').val(data.AccountBalance); $('#Principal').val(data.Principal)"
		fielddisplay 	+= ";$('#PDPrincipal').val(data.PDPrincipal); $('#Interest').val(data.Interest)"
		fielddisplay 	+= ";$('#PDInterest').val(data.PDInterest); $('#Penalty').val(data.Penalty)"
		fielddisplay 	+= ";$('#Charge').val(data.Charge)"
		varname 		= "LoanID:$('#LoanID').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/getLoanAccountBalance", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def formReadOnly():
		return "AUTH"
		
	@staticmethod
	def IsAcceptOverride():
		Msg 		= 'Do you want to process loan collection?'
		Override 	= True

		return Override, Msg

	@staticmethod
	def IsAcceptOverrideINAU():
		Msg 		= 'Do you want to process loan collection?'
		Override 	= True

		return Override, Msg

	@staticmethod
	def beforeAuthorize():
		try:
			ID 			= 	g.formID
			MLCObj 		= 	MKT_MANUAL_LOAN_COLLECTION_INAU.query.get(ID)
			
			if MLCObj:
				Audit 		= 	mktaudit.getAuditrail()
				Inputter	= 	MLCObj.Inputter
				Authorizer 	= 	Audit['Authorizer']

				if Inputter.upper() == Authorizer.upper():
					flash(msg_error + "User who authorize must differ from inputter.")
					return False

				LoanID	= 	MLCObj.LoanID				
				return doCollection(LoanID,ID)

			return True
			
		except Exception as e:
			db.session.rollback()
			return False


	@staticmethod
	def beforeInsert():
		try:
			AuthLevel 	= g.getNAuthorize

			if AuthLevel == 0 :
				LoanID	= 	request.form['LoanID']
				ID 		=	request.form['ID']
				return doCollection(LoanID,ID)

			return True
			
		except Exception as e:
			db.session.rollback()
			raise
			return False

def doCollection(LoanID,ID):
	try:
		LoanObj 	= 	MKT_LOAN_CONTRACT.query.get(LoanID)

		if LoanObj:
			AccountObj 	=	MKT_ACCOUNT.query.get(LoanObj.Account)
			Amount 		=	AccountObj.AvailableBal
			
			if Amount <= 0:
				db.session.rollback()
				flash(msg_error+"Cannot collect with Account Balance zero")
				return False

			PDObj, ScheduleObj 	=	getObjForCollection(LoanID)

			if PDObj:
				mktpdcollection.setPDCollection('PD%s'%LoanID, EOD=0, ManualCollect=True, ManualCollectID=ID)

			Amount 	=	AccountObj.AvailableBal
			if Amount > 0 and ScheduleObj:
				mktloan.setLoanCollection(LoanID, EOD=0, ManualCollect=True, ManualCollectID=ID)

		return True

	except Exception as e:
		db.session.rollback()
		raise 

def getObjForCollection(LoanID):
	try:
		SystemDate 	=	str(mktdate.getBankDate())
		PDObj 		=	MKT_PAST_DUE.query.filter(MKT_PAST_DUE.ID=='PD%s'%LoanID).\
						filter(MKT_PAST_DUE.TotODAmount > 0).first()

		ScheduleObj = 	MKT_REP_SCHEDULE.query.\
						filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
						filter(MKT_REP_SCHEDULE.CollectionDate == SystemDate).\
						filter(MKT_REP_SCHEDULE.RepStatus == '0').first()

		return PDObj, ScheduleObj

	except Exception as e:
		db.session.rollback()
		raise