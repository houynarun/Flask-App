from app.mktcore.wtfimports import *
from .models import *
from app.tools.mktroute 				import *
import re


@app.route("/Morakot/MainConfiguration")
@checkLogOutSession
@checkLogOutTime
def getMainConfiguration():
	try:
		AuthType 		= request.args.get('AuthType')
		if AuthType		== 'S':
			Configuration  	= "secret-key\nsite-url"
		elif AuthType 	== 'U':
			Configuration 	= "username\npassword\nsite-url"
		elif AuthType 	== 'A':
			Configuration  	= "API-key\nsite-url"
		return jsonify(Configuration 	=	Configuration)
	except Exception as e:
		raise e

class FRM_EMBEDDING(exform):
	EmbeddedApp 			= 	TextField(requiredlabel("Embedded App","*"),[validators.Required()])
	AuthType				= 	SelectField("Authentication Type",
								choices=[('', '--None--'),('U', 'Username & Password'),('S', 'Secret Key'),('T','Token Key'),('A','API Key')],
								coerce=str,
								)
	Configuration			= 	TextAreaField("Configuration")
	Resource 				= 	TextField("Resource")


	def validate_Configuration(form,field):
		AuthType 			= 	request.form['AuthType']
		Configuration 		= 	request.form['Configuration']
		ConfigurationSplit 	= 	Configuration.splitlines()
		if "\n" not in Configuration:
			raise ValidationError("Invalid Syntax.")
		for row in ConfigurationSplit:
			Configure = row.strip().split()
			if len(Configure) == 1:
				raise ValidationError("Invalid Syntax.")
			if len(Configure) % 2 != 0:
				raise ValidationError("Invalid Syntax.")
		if AuthType != "" and Configuration == "":
			raise ValidationError("Please input configuration value.")

	def validate_Resource(form,field):
		AuthType 			= 	request.form['AuthType']
		Configuration 		= 	request.form['Configuration']
		Resource 			= 	request.form['Resource']
		ResourceList 		= 	Resource.split('.')
		Regx				= 	r'[?\-",*$%^/(){}|!#@&_=+><~`]+'
		Check 				= 	re.findall(Regx, Resource)
		if Check:
			raise ValidationError("Invalid Syntax.")
		if AuthType != "" and Configuration != "" and Resource == "":
			raise ValidationError("Please input resource value.")
		if Resource != "":
			if '.' not in Resource:
				raise ValidationError("Invalid Syntax.(app.Embedding.util.filename.classname).")
	@staticmethod
	def hotField():
		hotfield 		= []
		fielddisplay 	= "$('#Configuration').val(data.Configuration)"
		varname 		= "AuthType:$('#AuthType').val()"
		fun 			= ["AuthType", varname, fielddisplay, "/Morakot/MainConfiguration", "change"]
		hotfield.append(fun)
		return hotfield



	