from app.mktcore.wtfimports 			import *
from app.mktcore.imports 				import *
from flask 								import jsonify

from .models 							import *

import time

from app.Customer.models 				import MKT_CUSTOMER

import datetime

from app.Province.models				import *
from app.District.models				import *
from app.Commune.models					import *
from app.Village.models					import *
from app.Vendor.VendorType.models		import MKT_VENDOR_TYPE
from app.Category.models				import *

import app.tools.mktaddress 			as mktaddress


def getRecord():
	try:
		result = MKT_VENDOR_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_VENDOR.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'Province'			:str(row.Province)})
				Dict.update({'District'			:str(row.District)})
				Dict.update({'Commune'			:str(row.Commune)})
				Dict.update({'Village'			:str(row.Village)})
			return Dict
		else:
			return Dict

	except:
		raise

def loadProvince():
	return mktaddress.getProvince()

def loadDistrict():
	if request.method == 'POST':
		Province = request.form["Province"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])  
		else:
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

def loadCommune():
	if request.method == 'POST':
		District=request.form["District"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['Commune'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return mktaddress.getLoadCommune(District)

def loadVillage():
	if request.method == 'POST':
		Commune=request.form["Commune"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['Village'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)

def loadVendorType():
	return MKT_VENDOR_TYPE.query.all()

def loadCategory():
	return MKT_CATEGORY.query.all()

def custom_VATTIN(form, field):
	VATRegistered		= request.form['VATRegistered']
	VATTIN 				= request.form['VATTIN']

	if VATRegistered == 'Y' and len(VATTIN) <= 0:
		raise ValidationError("This field is required!")
		

class FRM_VENDOR(exform):
	VendorBranch 		= TextField(requiredlabel('Vendor Branch', '*'),
									validators=[validators.Required()])
	VendorName 			= TextField(requiredlabel('Vendor Name', '*'),
									validators=[validators.Required()])
	VendorLocalName 	= TextField('Vendor Local Name')
	DebitCategory 		= QuerySelectField('Debit Category Type',
									 query_factory=loadCategory, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Category Type--'
									)
	CreditCategory		= QuerySelectField(requiredlabel('Credit Category','*'),query_factory=loadCategory, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Category Type--',
									 validators=[validators.Required()]
									)
	VendorType 			= QuerySelectField(requiredlabel('Vendor Type','*'),query_factory=loadVendorType, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Vendor Type--',
									 validators=[validators.Required()]
									)
	CorporationDate 	= DateField(requiredlabel("Corporation 	Date", "*"),
									[validators.Required()])
	MOUSign				= SelectField(requiredlabel('MOU Sign', '*'),
									choices	= 	[('','--Choose MOU Sign--'),
												('Y','Yes'),
												('N','No')
												],
									coerce = str,
									validators=[validators.Required()]
									)
	Remark				= TextField('Remark')
	VATRegistered		= SelectField(requiredlabel('VAT Registered','*'),
									choices	= 	[('Y','Yes'),
												('N','No')
												],
									coerce = str,
									validators=[validators.Required()]
									)
	VATTIN 				= TextField('VATTIN',
									validators=[custom_VATTIN])

	#Address
	Address 			= TextField('Address',
									description='1-Address')

	Province 			= QuerySelectField(requiredlabel(getLanguage('Province'),'*'),
									 query_factory=loadProvince, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Province--',
									 validators=[validators.Required()],
									 description='1-Address'
									)
	District 			=QuerySelectField(requiredlabel(getLanguage('District'),'*'),
									 query_factory=loadDistrict, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose District--',
									 validators=[validators.Required()],
									 description='1-Address'
									)
	Commune 			= QuerySelectField(requiredlabel(getLanguage('Commune'),'*'),
									 query_factory=loadCommune, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Commune--',
									 validators=[validators.Required()],
									 description='1-Address'
									)
	Village 			= QuerySelectField('Village',
									 query_factory=loadVillage, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Village--',
									 description='1-Address'
									 )
	#Contact
	Mobile1				= TextField(requiredlabel('Mobile1', '*'),
									validators=[validators.Required()],
									description='2-Contact')
	Mobile2				= TextField('Mobile2',
									description='2-Contact')
	Email				= TextField('Email',
									description='2-Contact',
									validators=[validators.Optional(), validators.Email()])
	Website				= TextField('Website',
									description='2-Contact')
	Facebook 			= TextField('Facebook',
									description='2-Contact')
	LineID 				= TextField('LineID',
									description='2-Contact')
	WhatsApp 			= TextField('WhatsApp',
									description='2-Contact')
	Telegram			= TextField('Telegram',
									description='2-Contact')
	Viber				= TextField('Viber',
									description='2-Contact')

	@staticmethod
	def hotSelectField():
		hotfield 		=	[]

		fielddisplay 	= 	"District,#Commune, #Village"
		varname			= 	"ProvinceID:$('#Province').val()"
		fun 			= 	["Province", varname ,fielddisplay, "/Morakot/DistrictID", "click"]
		hotfield.append(fun)

		fielddisplay 	= 	"Commune, #Village"
		varname 		= 	"DistrictID:$('#District').val()"
		fun 			= 	["District", varname ,fielddisplay, "/Morakot/CommuneID", "click"]
		hotfield.append(fun)

		fielddisplay 	= 	"Village"
		varname 		= 	"CommuneID:$('#Commune').val()"
		fun 			= 	["Commune", varname ,fielddisplay, "/Morakot/VillageID", "click"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
 	def hotField():
 		hotfield = []
 
 		fielddisplay = "$('#VATTIN').attr('readonly', data.Condition);"
 		varname = "VATRegistered:$('#VATRegistered').val()"
 		fun = ["VATRegistered", varname, fielddisplay, "/Morakot/VATTINCondition", "change"]
 		hotfield.append(fun)
 
 		return hotfield

	@staticmethod
	def listField():
		return ['ID',
				'VendorBranch',
				'VendorName',
				'VendorLocalName',
				'Mobile1']

	




