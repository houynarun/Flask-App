from app.mktcore.imports 			import *
from .forms 						import *
from decimal import *

import app.tools.mktmoney 			as mktmoney
import app.tools.mktdate 			as mktdate
import app.tools.mktaccounting 		as mktaccounting
import app.tools.mkttool 			as mkttool

from app.Account.models 			import *
from app.AccEntry.models 			import *
from app.Transaction.models 		import *
from app.Dates.models 				import *
from app.Category.models 			import *
from app.AccProduct.models			import *
from app.OverdraftContract.models	import *
from app.mktcore.customform 		import *
from app.mktcore.globalfunction 	import *

import app.tools.mktsetting 	as mktsetting
ExtendClass 			= 	mktsetting.ExtendModule()
ACC_ENTRY_MODULE_PREFIX =	ExtendClass.getUrlExtend(DictUrl=ACC_ENTRY_MODULE_PREFIX)


class CLS_AccountStatement(CLS_CustomForm):
	"""docstring for CLS_CustomerCentre"""
	def __init__(self, Operation=''):
		self.Operation = Operation


	def globalProcess(self):
		#call checkAccess
		ErrorMsg    = []
		getCheck    = checkAccess("/Morakot/AccountStatement","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		#write your script
		session['TELLER'] = ''
		BankDate 	= str(mktdate.getBankDate())
		ACC 		= ""
		Currency 	= ""
		AccID 		= ""
		Description = ""
		CurrencyObj = ""
		AccStatement= ""
		SystemDate 	= ""
		DrCr 		= ""
		Dr 			= ""
		Cr 			= ""
		AsOfDate    = ""
		BalanceType = ""
		EndBalance  	= 0
		BeginingBalance = 0
		TotalIn 	= 0
		TotalOut 	= 0
		StartDispayRecord = 1
		DefaultView = True
		DicModule 	= ACC_ENTRY_MODULE_PREFIX
		AccID 		= str(request.args.get('ID')).strip() if request.args.get('ID') else ""
		StartDate 	= request.args.get('Start') if request.args.get('Start') else ""
		EndDate   	= request.args.get('End') if request.args.get('End') else ""

		## Variable for pagination
		Offset 	=	request.args.get('offset') if request.args.get('offset') else 1 # first record
		Limit 	=	request.args.get('limit') if request.args.get('limit') else 15 # number of record that wanna display 
		## End
		CheckCustom = request.args.get('CheckCustom','')
		ListDate 	= []
		toMoney		= mktmoney.toMoney
		self.form 	= FRM_ACCSTATEMENT

		if AccID:
			ACC = MKT_ACCOUNT.query.get(AccID)
			if ACC:
				# Check DrCr in Category
				AccCategory = ACC.AccCategory
				BalanceType = mktaccounting.getAccBalanceType(AccCategory)
				IsOverdraft = False

				# Query the AccProduct with it's Description
				AccProductObj = MKT_ACC_PRODUCT.query.get(ACC.AccProduct)
				if AccProductObj:
					Description = AccProductObj.Description

					AccProductMapping = mktsetting.getAppSetting('AccProductMapping')
					Dict = {}
					for a in AccProductMapping.splitlines():
						Mapping = a.split('*')
						Dict.update({Mapping[0]:Mapping[1]})
					if AccProductObj.ID in Dict.get('OverdraftAccount','').split():
						BalanceType = 'Dr' if BalanceType == 'Cr' else 'Cr'
						ACC.Balance = -ACC.Balance 
						ACC.AvailableBal = ACC.Balance 

						IsOverdraft = True
						ODCObj = MKT_OVERDRAFT_CONTRACT.query.filter(MKT_OVERDRAFT_CONTRACT.Account==ACC.ID).first()
						if ODCObj:
							ACC.AvailableBal = ODCObj.OffBalanceSheet 
							ACC.AccrInterest = ODCObj.AccrInterest 
							if ACC.MaturityDate < BankDate:
								ACC.AvailableBal = 0 

				SystemDate   = MKT_DATES.query.get('SYSTEM')
				if not StartDate:

					AsOfDate = SystemDate.SystemDate
					AccStatement,StartDate,EndDate = getDefaultAccStatement(AccID)

				else:
					if EndDate:
						if StartDate > EndDate:
							flash(msg_warning+"Start date must be smaller than end date!" , 'error')
						AsOfDate = str(EndDate)
					else:
						flash(msg_warning+"Please selecte end date!" , 'error')
					ListDate.append(StartDate)
					ListDate.append(EndDate)

					AccStatement = db.session.query(MKT_ACC_ENTRY.Account,MKT_ACC_ENTRY.Note,MKT_ACC_ENTRY.Reference,MKT_ACC_ENTRY.DebitCredit,MKT_ACC_ENTRY.TransactionDate,MKT_ACC_ENTRY.Transaction,MKT_TRANSACTION.Description.label("Description"),MKT_ACC_ENTRY.Amount,MKT_ACC_ENTRY.Module).\
														outerjoin(MKT_TRANSACTION, MKT_ACC_ENTRY.Transaction == MKT_TRANSACTION.ID).\
														filter(MKT_ACC_ENTRY.Account==str(AccID)).\
														filter(MKT_ACC_ENTRY.TransactionDate.between(str(StartDate),str(EndDate) ) ).\
														order_by(MKT_ACC_ENTRY.TransactionDate.asc(),MKT_ACC_ENTRY.ID.asc())
				
				BeginingBalance = getBeginBalance(AccID, StartDate,EndDate)

				CurrencyObj = mktmoney.getCurrencyObj(ACC.Currency)
				if not AccStatement.all():
					BeginingBalance = ACC.Balance
					
				if IsOverdraft: BeginingBalance = -BeginingBalance
			else:
				flash(msg_warning+"Account number %s not found"%AccID , 'error')	





		#For API
		if checkContentType() == 'json' or 'API' in request.url :
			BodyDict = {}
			BodyList = []
			# Start Tool Bar
			self.customButton = {
								'title':getLanguage('Show'),
								'type':'Hidden',
								'method':'get',
								'url':'/AccountStatement/?ID=SearchAccountID',
								'param':['SearchAccountID'],
								'icon':'',
								'type_url':'Custom',
								'color':'#1b80c2'
								}


			HeaderAccStatement = []
			Start = ''
			End   = ''
			if ListDate:
				Start = ListDate[0]
				End   = ListDate[1]
			setattr(FRM_ACCSTATEMENT,'SearchAccountID' , RemoteTextField('Search Account ID or Name',default=AccID))
			setattr(FRM_ACCSTATEMENT,'Start' , DateField('Start Date',default=Start))
			setattr(FRM_ACCSTATEMENT,'End' , DateField('End Date',default=End))
			def setVisible(self):
				return ['Start','End']
			setattr(FRM_ACCSTATEMENT,'setVisible',setVisible)
			if ACC:
				print 'hello'
				#First Header
				Company = {'text':mkttool.getCompany().CompanyName,'size':'h3'}
				AccountStatement = {'text': getLanguage('Account Statement'),'size':'h4'}
				AccountDate = {}
				if Start and End :
					if Start != End:
						AccountDate = {'text': 'From: %s To: %s'%(Start,End),'size':'h4'}
					else:
						AccountDate = {'text': 'Date: %s'%AsOfDate,'size':'h4'}
				else:
					AccountDate = {'text': getLanguage('As of') + " : %s"%AsOfDate ,'size':'h4'}
				FirstHeader = [Company,AccountStatement,AccountDate]
				#End First Header

				# Start Second Header
				AccountID = {'text':'Account Number'+': %s'%ACC.ID,'size':'h4'} 
				AccountName = {'text':getLanguage('Account Name')+': %s'%ACC.AccName,'size':'h4'}
				AccountProduct = {'text':'Account Product: %s'%Description,'size':'h4'}
				Currency = {'text':getLanguage('Currency')+': %s'%ACC.Currency,'size':'h4'}
				SecondHeader = [AccountID,AccountName,AccountProduct,Currency]
				# End Second Header

				# Start Third Header
				CurrentBalance = {'text':'Current Balance: %s'%toMoney(float(ACC.Balance), CurrencyObj,2),'size':'h4'} 
				AvailableBalance = {'text':'Available Balance: %s'%toMoney(float(ACC.AvailableBal), CurrencyObj,2),'size':'h4'} 
				AccrualInterest = {'text':'Accrual Interest: %s'%toMoney(float(ACC.AccrInterest), CurrencyObj,2),'size':'h4'}
				ThirdHeader = [CurrentBalance,AvailableBalance,AccrualInterest]
				# End Third Header
				HeaderAccStatement=[FirstHeader,SecondHeader,ThirdHeader]

			#End Header

			if AccStatement:		
				def setVisible(self):
					return ['All']
				setattr(FRM_ACCSTATEMENT,'setVisible',setVisible)
				self.customButton 	= 	{}
				self.customType 	=	'Custom'
				self.customToolBar 	=	[
								{
								'title':'Today Transactions',
								'type':'Button',
								'method':'get',
								'url':'/AccountStatement/?ID='+AccID+'&Start='+BankDate+'&End='+BankDate,
								'param':[],
								'icon':'eye',
								'type_url':'Custom',
								'color':'#53b953'
								},
								{
								'title':getLanguage('Custom'),
								'type':'Custom',
								'method':'get',
								'url':'/AccountStatement/?ID='+AccID+'&Start='+BankDate+'&End='+BankDate+'&CheckCustom=ButtonCustom',
								'param':[],
								'icon':'gear',
								'type_url':'Custom',
								'color':'#53b953'
								}
							]

				TotalAmount 		= {"TotalIn":0, "TotalOut":0}
				AccStatementDict 	= {}
				AccStatementList  	= []
				StartBeginingBalance = BeginingBalance
				## apply Pagination for account statement
				TotalRecord,TotalPage,Page, AccStatement =	Pagination.paginate(querys=AccStatement,per_page=Limit,page=Offset)

				# BodyDict.update({"total_record":TotalRecord,
				# 				 "total_page":TotalPage,
				# 				 "current_page":Page
				# 				 })
				self.total_record 	= TotalRecord
				self.total_page 	= TotalPage
				self.current_page 	= Page
				for row in AccStatement:
					InAmount 		=	''
					OutAmount 		=	''
					if BalanceType == row.DebitCredit:
						InAmount 	= 	toMoney(float(row.Amount),CurrencyObj)
					if BalanceType != row.DebitCredit:
						OutAmount 	= 	toMoney(float(row.Amount),CurrencyObj)

					Balance 		= 	float(row.Amount)
					if BalanceType==row.DebitCredit:
						BeginingBalance =  BeginingBalance + Balance
						TotalAmount.update({'TotalIn': TotalAmount.get('TotalIn') + Balance})
					else:
						BeginingBalance = BeginingBalance - Balance
						TotalAmount.update({'TotalOut': TotalAmount.get('TotalOut') + Balance})
					Date 			=	{'key':getLanguage('Date'),'value':row.TransactionDate}
					Transaction 		=	{'key':'Transaction','value':row.Transaction + '-' + row.Description}
					Note 			=	{'key':getLanguage('Note'),'value':row.Note}
					Reference 		=	{'key':getLanguage('Reference'),'value':row.Reference}
					In				=	{'key':'In','value':InAmount} 
					Out 			=	{'key':'Out','value':OutAmount} 
					Balance 		=	{'key':getLanguage('Balance'),'value':toMoney(float(BeginingBalance),CurrencyObj)} 
					Column 			= 	[Date,Transaction,Note,Reference,In,Out,Balance]
					ImportantTransaction = {'key':'Transaction','value':[
																	{'key':getLanguage('Date'),'value':row.TransactionDate},
																	{'key':'Transaction','value':row.Transaction + '-' + row.Description}
																	
															]}
					ImportantNote 		 = {'key':'Note' , 'value':[
															{'key':getLanguage('Note'),'value':row.Note},
															{'key':getLanguage('Reference'),'value':row.Reference}
											]}
					ImportanntInOut 	 = {'key':'In/Out','value':[
																{'key':'In','value':InAmount},
																{'key':'Out','value':OutAmount},
																{'key':getLanguage('Balance'),'value':toMoney(float(BeginingBalance),CurrencyObj)} 
											]}

					ImportantField 	=	[ImportantTransaction,ImportanntInOut,ImportantNote]

					AccStatementList.append({
											'columns':Column,
											'urls':[{'url':'/'+DicModule.get(row.Module)+'/?ID='+row.Reference,'type_url':'Form','icon':''}],
											'important':ImportantField
											})
				
				Date 			=	{'key':getLanguage('Date'),'value':''}
				Transaction 		=	{'key':'Transaction','value':'*** Total In/Out'}
				Note 			=	{'key':getLanguage('Note'),'value':''}
				Reference 		=	{'key':getLanguage('Reference'),'value':''}
				In				=	{'key':'In','value':toMoney(float(TotalAmount.get('TotalIn')), CurrencyObj)} 
				Out 			=	{'key':'Out','value':toMoney(float(TotalAmount.get('TotalOut')), CurrencyObj)} 
				Balance 		=	{'key':getLanguage('Balance'),'value':toMoney(0,CurrencyObj)} 
				Column 			= 	[Date,Transaction,Note,Reference,In,Out,Balance]


				ImportantTransaction = {'key':'Transaction','value':[
															{'key':'In','value':toMoney(float(TotalAmount.get('TotalIn')), CurrencyObj)}
															]}
				ImportantNote 		 = {'key':'Note' , 'value':[
															{'key':'Out','value':toMoney(float(TotalAmount.get('TotalOut')), CurrencyObj)} 
										]}
				ImportanntInOut 	 = {'key':'In/Out','value':[
														{'key':getLanguage('Balance'),'value':toMoney(0,CurrencyObj)}
										]}

				ImportantField 	=	[ImportantTransaction,ImportanntInOut,ImportantNote]
				if AccStatement.first():				
					AccStatementList.append({'columns':Column,'urls':[],'important':ImportantField})

				AccStatementDict.update({
								'icon':'','name':'AccountStatement','title':'Account Statement List','type':'Table','data':AccStatementList,'most_data':True,'expand':False
							})
				BodyList.append(AccStatementDict)


				Date 			=	{'key':getLanguage('Date'),'value':''}
				Transaction 		=	{'key':'Transaction','value':'000 - Begining Balance'}
				Note 			=	{'key':getLanguage('Note'),'value':''}
				Reference 		=	{'key':getLanguage('Reference'),'value':''}
				In				=	{'key':'In','value':''} 
				Message			=	{'key':"In",'value':[{'key':'','value':"You don't have any transaction yet."}]}
				MessageDetail   =	{'key':"You don't have any transaction yet.",'value':''} 
				Out 			=	{'key':'Out','value':''} 
				Balance 		=	{'key':getLanguage('Balance'),'value':toMoney(float(StartBeginingBalance),CurrencyObj)} 
				Column 			= 	[Date,Transaction,Note,Reference,In,Out,Balance]
				ImportantField 	=	[{'key':'','value':[Transaction]},{'key':'','value':[In,Out]},{'key':getLanguage('Balance'),'value':[Balance]}]
				
				if AccStatement.first():
					AccStatementList.insert(0,{'columns':Column,'urls':[],'important':ImportantField})
				else:
					AccStatementList.insert(0,{'columns':[MessageDetail],'urls':[],'important':[{'key':getLanguage('Date'),'value':[Date]},Message,Out]})


			BodyDict.update({
				'header':HeaderAccStatement,'data':BodyList
				})
			if CheckCustom=='ButtonCustom':
				self.customType    = 'Custom'
				BodyDict 		   = {'header':'','data':[]}
				def setVisible(self):
					return ['SearchAccountID']
				setattr(FRM_ACCSTATEMENT,'setVisible',setVisible)
				self.customButton  = {
										'title':'Apply',
										'type':'Button',
										'method':'get',
										'url':'/AccountStatement/?ID='+AccID+'&Start=Start&End=End',
										'param':['Start','End'],
										'icon':'eye',
										'type_url':'Custom',
										'color':'#53b953'
									}
				self.customToolBar = ['BlankList']

			
			self.body 			= BodyDict
			self.recordID 		= AccID
			self.header 		= 'Account Statement'
			return True
		
		self.kwargs 		= {
								'form':FRM_ACCSTATEMENT(),
								'Company':mkttool.getCompany(),
								'formatDate':mktdate.formatDate,
								'toMoney':mktmoney.toMoney,
								'float':float,
								'str':str,
								'CurrencyObj':CurrencyObj,
								'AsOfDate':AsOfDate,
								'ACC':ACC,
								'Description' : Description,
								'AccStatement':AccStatement,
								'DrCr':DrCr,
								'Dr':Dr,
								'Cr':Cr,
								'TotalIn':TotalIn,
								'TotalOut':TotalOut,
								'EndBalance':EndBalance,
								'BeginingBalance':BeginingBalance,
								'DicModule':DicModule,
								'ListDate':ListDate,
								'BalanceType':BalanceType,
								'BankDate':BankDate,
								'StartDispayRecord':StartDispayRecord
		}
		return True
		#End for API		

def getDefaultAccStatement(AccID):
	try:
		BankDate 	= mktdate.getBankDate()
		EndDate  	= str(BankDate)
		StartDate 	= str(BankDate)
		ListAccEntryID = []
		DateList = []
		AccStatementObj = db.session.query(MKT_ACC_ENTRY.ID,MKT_ACC_ENTRY.Account,MKT_ACC_ENTRY.Note,MKT_ACC_ENTRY.Reference,MKT_ACC_ENTRY.DebitCredit,MKT_ACC_ENTRY.TransactionDate,MKT_ACC_ENTRY.Transaction,MKT_TRANSACTION.Description.label("Description"),MKT_ACC_ENTRY.Amount,MKT_ACC_ENTRY.Module).\
									outerjoin(MKT_TRANSACTION, MKT_ACC_ENTRY.Transaction == MKT_TRANSACTION.ID).\
									filter(MKT_ACC_ENTRY.Account==str(AccID)).\
									order_by(MKT_ACC_ENTRY.ID.desc()).limit(10)

		for row in AccStatementObj:
			ListAccEntryID.append(row.ID)
			Date = row.TransactionDate
			DateList.append(Date)


		SortDateList 	= sorted(DateList, key=lambda x:mktdate.getDateISO(x))

		if SortDateList:
			StartDate 	= SortDateList[0]
			EndDate 	= SortDateList[-1]

		AccStatementObj = db.session.query(MKT_ACC_ENTRY.Account,MKT_ACC_ENTRY.Note,MKT_ACC_ENTRY.Reference,MKT_ACC_ENTRY.DebitCredit,MKT_ACC_ENTRY.TransactionDate,MKT_ACC_ENTRY.Transaction,MKT_TRANSACTION.Description.label("Description"),MKT_ACC_ENTRY.Amount,MKT_ACC_ENTRY.Module).\
									outerjoin(MKT_TRANSACTION, MKT_ACC_ENTRY.Transaction == MKT_TRANSACTION.ID).\
									filter(MKT_ACC_ENTRY.Account==str(AccID)).\
									filter(MKT_ACC_ENTRY.TransactionDate.between(StartDate,EndDate)).\
									order_by(MKT_ACC_ENTRY.TransactionDate.asc(),MKT_ACC_ENTRY.ID.asc())
		
		return AccStatementObj,StartDate,EndDate

	except:
		raise

def getBeginBalance(AccID,StartDate,EndDate):

	try:

		StartDate 	 = str(StartDate)
		BeginBalance = 0
		'''
			Find all  record that smaller or equal StartDate then sort by TransactionDate
			with desc() and ID asc()
			Example: StartDate : 2016-07-31 => 2016-08-01

			ID 		 		Date 			Dr/Cr 			Amount 				Prev
			JN001		2016-07-30 			Dr 				100 				0
			-----------------------------------------------------------------------
			JN002		2016-07-30			Dr 				50 					100
			JN003		2016-07-01			Dr 				50 					150

			=> Result JN001 2016-07-30 		Prev=0

			Date Finding of start record = 2016-07-30
			If Finding of start record date < StartDate => PrevBalance = PrevBalance
			+/- by balance type with Amount. To find the Ending balance of that record.


		'''
		TransactionList = MKT_ACC_ENTRY.query.\
						   filter(MKT_ACC_ENTRY.Account == str(AccID)).\
						   filter(MKT_ACC_ENTRY.TransactionDate <= StartDate).\
						   order_by(MKT_ACC_ENTRY.TransactionDate.desc(),MKT_ACC_ENTRY.ID.asc()).first()

		if TransactionList:
			"""
			 Case sum of amount by Dr/Cr with first transaction date in finding
			"""
			BegCategory = TransactionList.Category
			BalanceType = mktaccounting.getAccBalanceType(BegCategory)
			if TransactionList.TransactionDate < StartDate:
				BeginBalance = float(TransactionList.Amount) if TransactionList.DebitCredit == BalanceType else -float(TransactionList.Amount)

			BeginBalance 	 += float(TransactionList.PrevBalance)
			# print TransactionList.ID,TransactionList.Reference,BeginBalance
			
			'''
				Step 4 : If found Transaction Date that bigger than 
				the Transaction Date belong first Inserted, Take the PrevBalance
				Of that record.

				Ex:	Date: 2016-09-01 ==> 2016-09-18

				2016-09-19  	100 	===> Take the PrevBalance of this man.
				---------------------------
				2016-09-01	 	50 		80

				2016-09-01	 	30 		30

				2016-09-02	 	100 	0

				2016-09-02	 	50 		100			
													
			'''
			TranBiggerThanObj = MKT_ACC_ENTRY.query.\
								filter(MKT_ACC_ENTRY.Account == str(AccID)).\
								order_by(MKT_ACC_ENTRY.ID.asc()).\
								filter(MKT_ACC_ENTRY.TransactionDate > StartDate).\
								filter(MKT_ACC_ENTRY.ID < TransactionList.ID).first()
			if TranBiggerThanObj:
				# print "Is It In here"
				BeginBalance = float(TranBiggerThanObj.PrevBalance)
				# print "BeginBalance in tranBiggerThanObh",BeginBalance
				TransactionList = TranBiggerThanObj
			
			'''
				Step 2 : Query all record next to ID that have transactionDate smaller than StartDate
				And then Loop and calculate Base on It's BalanceType 
			'''
			RecordIDList    = MKT_ACC_ENTRY.query.\
							   filter(MKT_ACC_ENTRY.Account == str(AccID)).\
							   order_by(MKT_ACC_ENTRY.ID.asc()).\
							   filter(MKT_ACC_ENTRY.TransactionDate < StartDate).\
							   filter(MKT_ACC_ENTRY.ID > TransactionList.ID).all()
			'''

				Step 3 : If Step 2 can't find, => PrevBalance = 0
				Mean that the TransactionDate above is the smallest

				Ex:	Date: 2016-09-01 ==> 2016-09-04

				2016-09-02	Dr 	100 	0

				2016-09-02	Dr 	50 		100

				2016-09-03	Cr 	30 		150

				2016-09-02	Cr 	20 		120

				---------------------------
				2016-09-01	Cr 	20 		100			==> TransactionDate is the smallest
													==> PrevBalance = 0
				---------------------------

			'''
			if not RecordIDList:
				# print "It in RecordIDList"
				TranLessThanObj = MKT_ACC_ENTRY.query.\
							   filter(MKT_ACC_ENTRY.Account == str(AccID)).\
							   order_by(MKT_ACC_ENTRY.ID.asc()).\
							   filter(MKT_ACC_ENTRY.TransactionDate < StartDate).first()

				if not TranLessThanObj:
					BeginBalance = 0
				
			BegCategory = TransactionList.Category
			BalanceType = mktaccounting.getAccBalanceType(BegCategory)

			if RecordIDList:

				# print 'RecordIDList',BeginBalance,'Count',len(RecordIDList)
				for row in RecordIDList:
					
					DrCr 			= row.DebitCredit
					TransactionDate = row.TransactionDate
					# When record Transaction Date small than start will be calculator
					if row.TransactionDate < StartDate:
						# print row.ID,row.TransactionDate,row.DebitCredit,row.Amount
						BeginBalance = float(BeginBalance) + float(row.Amount) if BalanceType == DrCr else float(BeginBalance) - float(row.Amount)
			
			# print "Begining Balance",BeginBalance
		return BeginBalance
	except:
		raise

registerCRUD(admin, '/AccountStatement', 'AccountStatement',FRM_ACCSTATEMENT, [MKT_ACCSTATEMENT],template="accstatement.html",form_type='MainCustom',custom_form_data=CLS_AccountStatement)
