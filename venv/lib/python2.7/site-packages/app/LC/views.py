from .. 							import app, db
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.Account.models 			import MKT_ACCOUNT
from app.AccProduct.models 			import MKT_ACC_PRODUCT
from app.PD.models 					import * # MKT_PAST_DUE, MKT_PD_DATE
from decimal 						import *
from datetime 						import datetime, date, timedelta
from sqlalchemy 					import *

import app.tools.mktaccounting	 	as mktaccounting
import app.tools.mktmoney 			as mktmoney
import app.tools.mktdate			as mktdate
import app.tools.mktparam 			as mktParam
import app.tools.mktsetting 		as mktsetting
import app.tools.mktloan 			as mktloan
import app.tools.mktautoid 			as mktAutoID
import app.tools.mktkey 			as mktkey
import app.tools.mktpdcollection 	as mktpd
import app.tools.mktmessage 		as mktmessage

from app.mktcore.constant			import *

def setLoanCollection(LoanID="", EOD=1):
	try:

		NumOfRecord 	= 0
		NumOfBadRecord 	= 0

		EOD_DATE 	= mktdate.getBankDate()
		NextRunDate = mktdate.getBankDateObj().NextSystemDate
		NextRunDate = NextRunDate.strip()
		SCH_REP 	= MKT_REP_SCHEDULE.query.\
					  filter(MKT_REP_SCHEDULE.CollectionDate == str(EOD_DATE)).\
					  filter(MKT_REP_SCHEDULE.RepStatus == '0').\
		  			  all()

		if SCH_REP:
			for row in SCH_REP:
				ID 			= 	row.LoanID
				Principal 	= 	float(row.Principal) if row.Principal else float(0) # Define Principal
				Interest 	= 	float(row.Interest) if row.Interest else float(0)	# Define Interest
				ChargeAmount= 	float(row.Charge) if row.Charge else float(0)		# Define Charge
				Total 		= 	Principal + Interest + ChargeAmount					# Define Total = Principal + Interest
				AccBal 		= 	0
				
				TranDate 	= 	row.CollectionDate
				Mode 		= 	""
				PayPri 	 	= 	0
				PayInt 		= 	0

				PD_Penalty 		= 0
				PD_Charge 		= 0
				PD_Interest 	= 0
				PD_Principal 	= 0
				DueDate 		= row.CollectionDate

				LoanContract = MKT_LOAN_CONTRACT.query.get(ID)		# Lookup MKT_LOAN_CONTRACT record
				if LoanContract:
					Currency 	= 	LoanContract.Currency
					Branch 		= 	LoanContract.Branch
					LC_PRODUCT 	= 	LoanContract.LoanProduct
					CustomerID	=	LoanContract.ContractCustomerID
					LCID 		=	LoanContract.ID
					AssClass 	=	LoanContract.AssetClass

					Account = MKT_ACCOUNT.query.get(LoanContract.Account) 	# Lookup MKT_ACCOUNT record
					if Account:
						# get Account Balance
						Customer 	= Account.CustomerList
						AccBal 		= float(Account.AvailableBal) if Account.AvailableBal else float(0)
						AccountID 	= Account.ID
						Category 	= Account.AccCategory
						AccProduct 	= Account.AccProduct

						NumOfRecord += 1
						Param = mktParam.getPDParam().RepOrder
						Param = Param.split()

						Tran = mktsetting.getAccSetting()
						if not Tran:
							# Call method for error message
							error_msg = "Please setting up accounting setting."
							print "1"
							mktmessage.msgError(EOD, error_msg)

						k1 = Tran.GL_KEY1
						k2 = Tran.GL_KEY2
						k3 = Tran.GL_KEY3
						k4 = Tran.GL_KEY4
						k5 = Tran.GL_KEY5
						k6 = Tran.GL_KEY6
						k7 = Tran.GL_KEY7
						k8 = Tran.GL_KEY8
						k9 = Tran.GL_KEY9

						k1 = mktkey.getResultKey(k1, LCID, CustomerID)
						k2 = mktkey.getResultKey(k2, LCID, CustomerID)
						k3 = mktkey.getResultKey(k3, LCID, CustomerID)
						k4 = mktkey.getResultKey(k4, LCID, CustomerID)
						k5 = mktkey.getResultKey(k5, LCID, CustomerID)
						k6 = mktkey.getResultKey(k6, LCID, CustomerID)
						k7 = mktkey.getResultKey(k7, LCID, CustomerID)
						k8 = mktkey.getResultKey(k8, LCID, CustomerID)
						k9 = mktkey.getResultKey(k9, LCID, CustomerID)

						for p in Param:

							if p.upper() == "CH":

								if AccBal >= ChargeAmount :
									Amount = float(ChargeAmount)
								else :
									Amount 		= float(AccBal)
									PD_Charge 	= float(ChargeAmount) - float(AccBal)

								PayCharge 	= float(Amount)
								AccBal 		= float(AccBal) - float(Amount)

								DrCr 		= "Dr"
								Mode 		= ""
								Cate 		= Category
								GL_KEYS 	= mktaccounting.getConsolKey(Cate, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
								DateTimeNow = mktdate.getDateTimeNow()
								Transaction = mktsetting.getAccSetting().ChargeTran
								
								if not Transaction:
									# Call method for error message
									print "2"
									error_msg = "Charge collection transaction not found."
									mktmessage.msgError(EOD, error_msg)

								else:
									if float(Amount) > 0:
										# Debit Customer Account Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											AccountID,				# Account
											Cate,					# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(Amount), 		# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode 					# Mode check to insert Journal for category
										)

										DrCr 		= "Cr"
										Mode 		= "Direct"
										Cate 		= mktParam.getPDParam().ChargeIncCat
										if not Cate:
											# Call method for error message
											error_msg = "Charge income category not found, Please setting it up."
											mktmessage.msgError(EOD, error_msg)

										DateTimeNow = mktdate.getDateTimeNow()
										# Credit Charge Income Category
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"System",				# Inputter
											DateTimeNow, 			# Createdon
											"System",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											AccountID,				# Account
											Cate,					# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(Amount), 		# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode 					# Mode check to insert Journal for category
										)

							if p.upper() == 'IN':
								
								if float(Interest) > 0:
									if AccBal >= Interest :
										Amount = float(Interest)
									else :
										Amount 		= float(AccBal)
										PD_Interest = float(Interest) - float(AccBal)

									PayInt 		= float(Amount)
									AccBal 		= float(AccBal) - float(Amount)
									DrCr 		= 'Dr'
									Mode 		= ''
									Transaction = mktsetting.getAccSetting().InterestTran
									DateTimeNow = mktdate.getDateTimeNow()
									
									LC_Pro = MKT_LOAN_PRODUCT.query.get(LC_PRODUCT)
									if not LC_Pro:
										# Call method for error message
										error_msg = "Account product not found for loan-" + str(ID) +"."
										mktmessage.msgError(EOD, error_msg)
									
									if not Transaction:
										# Call method for error message
										error_msg = "Interest collection transaction not found."
										mktmessage.msgError(EOD, error_msg)

									if Amount > 0:
										GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
										# Debit Customer Account
										mktaccounting.postAccounting(
											"AUTH", 				# Status
											"0", 					# Curr
											"system",				# Inputter
											DateTimeNow, 			# Createdon
											"system",				# Authorizer
											DateTimeNow,			# Authorizeon
											"", 					# AEID
											AccountID,				# Account
											Category,				# Category
											Currency,				# Currency
											DrCr,					# DrCr
											Decimal(Amount), 			# Amount
											"LC",					# Module
											Transaction, 			# Transaction
											TranDate, 				# TransactionDate
											ID, 					# Reference
											"", 					# Note
											"", 					# JNID
											Branch,					# Branch
											GL_KEYS,				# GL_KEYS
											Mode 					# Mode check to insert Journal for category
										)

									PrevMonth 	= 	float(LoanContract.AccrIntPreMonth) if LoanContract.AccrIntPreMonth else float(0)
									CurrMonth 	= 	float(LoanContract.AccrIntCurrMonth) if LoanContract.AccrIntCurrMonth else float(0)
									IntIncomeToRev = 0

									if float(PrevMonth) >= float(Interest):
										DifferentAmount 	= 	float(PrevMonth) - float(Interest)
										AIRtoReverse 		= 	float(PrevMonth) if float(Amount) >= float(PrevMonth) else (float(Amount) + DifferentAmount)
										
										IntIncomeToRev 		= 	float(DifferentAmount)

										LoanContract.AccrInterest 		= 	(float(LoanContract.AccrInterest) if LoanContract.AccrInterest else float(0)) - float(DifferentAmount)
										LoanContract.IntIncEarned 		=	(float(LoanContract.IntIncEarned) if LoanContract.IntIncEarned else float(0)) - float(DifferentAmount)
										# LoanContract.AccrIntPreMonth 	= 	float(Interest) - float(LoanContract.AccrIntCurrMonth)

									else:
										DifferentAmount 				= 	float(Interest) - float(PrevMonth)
										AIRtoReverse 					= 	float(PrevMonth) if float(Amount) >= float(PrevMonth) else float(Amount)

										LoanContract.AccrInterest 		= 	(float(LoanContract.AccrInterest) if LoanContract.AccrInterest else float(0)) + float(DifferentAmount)
										LoanContract.IntIncEarned 		=	(float(LoanContract.IntIncEarned) if LoanContract.IntIncEarned else float(0)) + float(DifferentAmount)
										# LoanContract.AccrIntPreMonth 	= 	float(Interest)
									
									# AIR update with paid amount
									LoanContract.AccrInterest 			= 	(float(LoanContract.AccrInterest) if LoanContract.AccrInterest else float(0)) - float(Amount)
									LoanContract.AccrIntPreMonth 		= 	0 # After collected move AIR Premonth to zero(0)
									db.session.add(LoanContract)

									Amount 				=	(float(Amount) 		- float(AIRtoReverse)) if float(Amount) >= float(AIRtoReverse) else float(Amount)
									CurrIntIncome 		= 	(float(Interest) 	- float(PrevMonth)) if float(Interest) >= float(PrevMonth) else float(0)
									SettledIntIncome	=	float(CurrIntIncome) if float(Amount) >= float(CurrIntIncome) else float(Amount)
									NewIntReceivable 	=   float(Interest) 	- float(PrevMonth) - float(SettledIntIncome)

									
									Category = LC_Pro.IntReceivableCate.strip()

									if AIRtoReverse > 0:
										DateTimeNow = mktdate.getDateTimeNow()
										Transaction = mktsetting.getAccSetting().CrAccrIntTran
										Mode 		= "Direct"
										DrCr 		= "Cr"
										
										if Transaction:
											# Credit Reverse Accrued Interest Category
											GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
											mktaccounting.postAccounting(
												"AUTH", 				# Status
												"0", 					# Curr
												"system",				# Inputter
												DateTimeNow, 			# Createdon
												"system",				# Authorizer
												DateTimeNow,			# Authorizeon
												"", 					# AEID
												AccountID,				# Account
												Category,				# Category
												Currency,				# Currency
												DrCr,					# DrCr
												Decimal(AIRtoReverse), 	# Amount
												"LC",					# Module
												Transaction, 			# Transaction
												TranDate, 				# TransactionDate
												ID, 					# Reference
												"", 					# Note
												"", 					# JNID
												Branch,					# Branch
												GL_KEYS,				# GL_KEYS
												Mode 					# Mode check to insert Journal for category
											)

										else:
											# Call method for error message
											error_msg = "Accrued interest reversal transaction not found."
											mktmessage.msgError(EOD, error_msg)
										
									Category = LC_Pro.IntIncomeCate.strip()
									if SettledIntIncome > 0:
										DateTimeNow = mktdate.getDateTimeNow()
										Transaction = mktsetting.getAccSetting().DrAccrIntTran
										Mode 		= "Direct"
										DrCr 		= "Cr"
										
										if Transaction:
											GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
											# Credit Interest Income Category
											mktaccounting.postAccounting(
												"AUTH", 				# Status
												"0", 					# Curr
												"system",				# Inputter
												DateTimeNow, 			# Createdon
												"system",				# Authorizer
												DateTimeNow,			# Authorizeon
												"", 					# AEID
												AccountID,				# Account
												Category,				# Category
												Currency,				# Currency
												DrCr,					# DrCr
												Decimal(SettledIntIncome), 	# Amount
												"LC",					# Module
												Transaction, 			# Transaction
												TranDate, 				# TransactionDate
												ID, 					# Reference
												"", 					# Note
												"", 					# JNID
												Branch,					# Branch
												GL_KEYS,				# GL_KEYS
												Mode 					# Mode check to insert Journal for category
											)

										else:
											# Call method for error message
											error_msg = "Interest collection transaction not found."
											mktmessage.msgError(EOD, error_msg)

									if float(IntIncomeToRev) > 0:
										Category 	= LC_Pro.IntIncomeCate.strip()
										DateTimeNow = mktdate.getDateTimeNow()
										Transaction = mktsetting.getAccSetting().CrAccrIntTran
										Mode 		= "Direct"
										DrCr 		= "Dr"
										
										if Transaction:
											GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
											# Credit Interest Income Category
											mktaccounting.postAccounting(
												"AUTH", 				# Status
												"0", 					# Curr
												"system",				# Inputter
												DateTimeNow, 			# Createdon
												"system",				# Authorizer
												DateTimeNow,			# Authorizeon
												"", 					# AEID
												AccountID,				# Account
												Category,				# Category
												Currency,				# Currency
												DrCr,					# DrCr
												Decimal(IntIncomeToRev), # Amount
												"LC",					# Module
												Transaction, 			# Transaction
												TranDate, 				# TransactionDate
												ID, 					# Reference
												"", 					# Note
												"", 					# JNID
												Branch,					# Branch
												GL_KEYS,				# GL_KEYS
												Mode 					# Mode check to insert Journal for category
											)

										else:
											# Call method for error message
											error_msg = "Interest collection transaction not found."
											mktmessage.msgError(EOD, error_msg)
									

									if float(NewIntReceivable) > 0: # In case client has not paid enough interest

										if LC_Pro:
											Category = LC_Pro.IntReceivableCate.strip()
											if not Category:
												# Call method for error message
												error_msg = "Interest receivable category not found."
												mktmessage.msgError(EOD, error_msg)

											DateTimeNow = mktdate.getDateTimeNow()
											Transaction = mktsetting.getAccSetting().DrAccrIntTran
											Mode 		= "Direct"
											DrCr 		= "Dr"

											if Transaction:
												GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
												# Debit Accrued Interest Receivable Category
												mktaccounting.postAccounting(
													"AUTH", 				# Status
													"0", 					# Curr
													"system",				# Inputter
													DateTimeNow, 			# Createdon
													"system",				# Authorizer
													DateTimeNow,			# Authorizeon
													"", 					# AEID
													AccountID,				# Account
													Category,				# Category
													Currency,				# Currency
													DrCr,					# DrCr
													Decimal(NewIntReceivable), 	# Amount
													"LC",					# Module
													Transaction, 			# Transaction
													TranDate, 				# TransactionDate
													ID, 					# Reference
													"", 					# Note
													"", 					# JNID
													Branch,					# Branch
													GL_KEYS,				# GL_KEYS
													Mode 					# Mode check to insert Journal for category
												)

											else:
												# Call method for error message
												error_msg = "Interest collection transaction not found."
												mktmessage.msgError(EOD, error_msg)
										
											Category = LC_Pro.IntIncomeCate.strip()
											if not Category:
												# Call method for error message
												error_msg = "Interest income category not found."
												mktmessage.msgError(EOD, error_msg)

											DateTimeNow = mktdate.getDateTimeNow()
											Transaction = mktsetting.getAccSetting().DrAccrIntTran
											Mode 		= "Direct"
											DrCr 		= "Cr"

											if Transaction:
												GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
												# Credit Interest Income Category
												mktaccounting.postAccounting(
													"AUTH", 				# Status
													"0", 					# Curr
													"system",				# Inputter
													DateTimeNow, 			# Createdon
													"system",				# Authorizer
													DateTimeNow,			# Authorizeon
													"", 					# AEID
													AccountID,				# Account
													Category,				# Category
													Currency,				# Currency
													DrCr,					# DrCr
													Decimal(NewIntReceivable), 		# Amount
													"LC",					# Module
													Transaction, 			# Transaction
													TranDate, 				# TransactionDate
													ID, 					# Reference
													"", 					# Note
													"", 					# JNID
													Branch,					# Branch
													GL_KEYS,				# GL_KEYS
													Mode 					# Mode check to insert Journal for category
												)

											else:
												# Call method for error message
												error_msg = "Accrued interest booking transaction not found."
												mktmessage.msgError(EOD, error_msg)

										else:
											# Call method for error message
											error_msg = "Account product not found."
											mktmessage.msgError(EOD, error_msg)

							if p.upper() == 'PR':
								
								if float(Principal) != 0:
									Category = Account.AccCategory
									if AccBal >= Principal :
										Amount = Principal
									else :
										Amount = AccBal
										PD_Principal = float(Principal) - float(AccBal)

									AccBal = float(AccBal) - float(Amount)
									PayPri = float(Amount)
									Transaction = mktsetting.getAccSetting().PrincipalTran

									if Amount != 0:
										DateTimeNow = mktdate.getDateTimeNow()
										DrCr 		= "Dr"
										Mode 		= ""

										if Transaction:
											GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "LC", "", "", "", "", "", "", "", "", "")
											# Debit Customer Account
											mktaccounting.postAccounting(
												"AUTH", 				# Status
												"0", 					# Curr
												"system",				# Inputter
												DateTimeNow, 			# Createdon
												"system",				# Authorizer
												DateTimeNow,			# Authorizeon
												"", 					# AEID
												AccountID,				# Account
												Category,				# Category
												Currency,				# Currency
												DrCr,					# DrCr
												Decimal(Amount), 			# Amount
												"LC",					# Module
												Transaction, 			# Transaction
												TranDate, 				# TransactionDate
												ID, 					# Reference
												"", 					# Note
												"", 					# JNID
												Branch,					# Branch
												GL_KEYS,				# GL_KEYS
												Mode 					# Mode check to insert Journal for category
											)

										else:
											# Call method for error message
											error_msg = "Principal collection transaction not found."
											mktmessage.msgError(EOD, error_msg)

										DateTimeNow = mktdate.getDateTimeNow()
										DrCr 		= "Cr"
										Mode 		= "Direct"
										Category 		= LoanContract.Category

										if Transaction:
											GL_KEYS = mktaccounting.getConsolKey(Category, Currency, AssClass, "LC", k1, k2, k3, k4, k5, k6, k7, k8, k9)
											# Cradit LC Category
											mktaccounting.postAccounting(
												"AUTH", 				# Status
												"0", 					# Curr
												"system",				# Inputter
												DateTimeNow, 			# Createdon
												"system",				# Authorizer
												DateTimeNow,			# Authorizeon
												"", 					# AEID
												AccountID,				# Account
												Category,				# Category
												Currency,				# Currency
												DrCr,					# DrCr
												Decimal(Amount), 		# Amount
												"LC",					# Module
												Transaction, 			# Transaction
												TranDate, 				# TransactionDate
												ID, 					# Reference
												"", 					# Note
												"", 					# JNID
												Branch,					# Branch
												GL_KEYS,				# GL_KEYS
												Mode 					# Mode check to insert Journal for category
											)

										else:
											# Call method for error message
											error_msg = "Principal collection transaction not found."
											mktmessage.msgError(EOD, error_msg)

						Total_PD 	= float(PD_Principal) + float(PD_Interest) + float(PD_Charge) + float(PD_Penalty)
						Category 	= LoanContract.Category.strip()
						PenaltyType = mktParam.getPDParam().PenType.strip()
						PenaltyRate = mktParam.getPDParam().PenaltyRate.strip()
						PDID = "PD" + str(ID)
						if Total_PD > 0:
							mktloan.setPD(PDID, Customer, Currency, Category, PenaltyType,
										  PenaltyRate, DueDate, PD_Principal, PD_Interest,
										  PD_Charge, PD_Penalty, NextRunDate, ID, Branch)

						mktloan.updateAccrCurrInt(ID, Principal)

						# row.NextRunDate = NextRunDate
						PaymentAm 		= float(PayPri) + float(PayInt) + float(PayCharge)
						if float(Total) == float(PaymentAm):
							row.RepStatus 	= '3'
						elif float(PaymentAm) == 0:
							row.RepStatus 	= '1'
						else:
							row.RepStatus 	= '2'

						row.PartPaidAmt 	= float(PaymentAm)
						db.session.add(row)
						# Commit to DB per loan procceed
						db.session.commit()
						if float(Total) == float(PaymentAm):
							print "%s Full amount was collected: %s." %(ID, str(PaymentAm))
						elif float(PaymentAm) < float(Total) and float(PaymentAm) > 0:
							print "%s Partial amount was collected: %s." %(ID, str(PaymentAm))
						else:
							print "%s No amount was collected." %ID

						print "%s Accrued interest current intallment was updated." %ID
						
					else:
						# Call method for error message
						error_msg = "Account not found."
						mktmessage.msgError(EOD, error_msg)
				else:
					print "Loan contract not found."
		
		
		print mktmessage.getTextMsg("000001")
		print ""
		# Loan Classification
		mktpd.loanClassification()
		if EOD == 1:
			return ""
		else:
			return True

	except:
		db.session.rollback()
		raise