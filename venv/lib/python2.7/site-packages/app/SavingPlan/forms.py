from wtforms 							import DecimalField, IntegerField
from app.mktcore.wtfimports 			import *
from .models 							import *
from .. 								import app, db
from sqlalchemy 						import *
import time
from datetime 							import datetime, date, timedelta

from app.tools.mktcustomer 				import *
from app.tools.catetool 				import *
from decimal 							import *
import string
from app.tools.mktmoney 				import *
from app.tools.user 					import *
from app.tools.mktofficer 				import *
import app.tools.mktdate 				as mktdate
from app.tools.mktroute 				import *
from app.Account.models import *
from app.AccRuleDetail.models import *
from app.AccRule.models import *
import app.tools.mktaudit 					as mktaudit
from app.tools.saving.mktsaving 			import *
import app.tools.mktsetting as mktsetting

def loadAccProduct():
	SavingPlan = mktsetting.getAppSetting('ACC_PRODUCT_SAVING_PLAN')
	if not SavingPlan:
		raise ValueError('Missing App Setting ACC_PRODUCT_SAVING_PLAN, Please create App Setting of ACC_PRODUCT_SAVING_PLAN to mapping Saving Plan Account Product.')
	else:
		SavingPlan = SavingPlan.split()

	Product = MKT_ACC_PRODUCT.query.filter(MKT_ACC_PRODUCT.ProductType == 'E',MKT_ACC_PRODUCT.ID.in_(SavingPlan)).all()
	return Product

def loadCurrency():
	return MKT_CURRENCY.query

@app.route("/Morakot/SavingPlanAccountInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSavingPlanAccountInfo():
	try:
		Branch 		= session.get("ChangeBranch")
		CustomerID 	= request.args.get('CustomerID')
		AccPrefix 	= request.args.get('AccPrefix')
		Currency 	= request.args.get('Currency')
		dic 		= {}
		query 		= MKT_ACCOUNT.query.\
					  filter(MKT_ACCOUNT.CustomerList == CustomerID).\
					  filter(MKT_ACCOUNT.AccStatus == "O").\
					  filter(MKT_ACCOUNT.Branch == Branch).\
					  filter(MKT_ACCOUNT.Currency== Currency)
	  	SavingPlan = mktsetting.getAppSetting('ACC_PRODUCT_SAVING_PLAN')
		if not SavingPlan:
			raise ValueError('Missing App Setting ACC_PRODUCT_SAVING_PLAN, Please create App Setting of ACC_PRODUCT_SAVING_PLAN to mapping Saving Plan Account Product.')
		else:
			SavingPlan = SavingPlan.split()

	  	if AccPrefix == "AC":#saving plan
	  		query = query.filter(MKT_ACCOUNT.AccProduct.in_(SavingPlan))
	  	else:
	  		query = query.filter(~MKT_ACCOUNT.AccProduct.in_(SavingPlan))
		if query:
			for row in query:
				dic[row.ID] = row.ID

		return jsonify(results=dic)
	except:
		raise

@app.route("/Morakot/getMaturityDate", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getMaturityDateByTerm():
	MaturityDate = ""
	Term = request.args.get("Term")
	FirstDate = request.args.get("FirstDate")
	if FirstDate and Term:
		MaturityDate = mktdate.getNextMonth(mktdate.getDateISO(FirstDate),int(Term))
	# print "MaturityDate"
	return jsonify(MaturityDate=str(MaturityDate))

@app.route("/Morakot/getAccountInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAccountInfo():
	SavingAccount = request.args.get("SavingAccount")
	LoanID = request.args.get("LoanID")
	Term = request.args.get("Term")	

	AccProduct = ""
	AccProductDesc = ""
	InterestRate = 0
	Currency = ""

	AccountObj = MKT_ACCOUNT.query.get(SavingAccount)
	if AccountObj:		
		AccProduct = AccountObj.AccProduct
		InterestRate = AccountObj.InterestRate
		Currency = AccountObj.Currency

		ProductObj = MKT_ACC_PRODUCT.query.get(AccProduct)
		AccProductDesc = ProductObj.Description if ProductObj else ""

		AccountRuleObj = MKT_ACC_RULE_DE.query.get(ProductObj.Rule+AccountObj.Currency)
		if AccountRuleObj:
			if not LoanID:
				Term = int(AccountRuleObj.MinTerm) if AccountRuleObj.MinTerm else ""

	return jsonify(AccProduct=AccProduct,
					AccProductDesc=AccProductDesc,
					InterestRate=InterestRate,
					Term=Term,
					Currency=Currency)

@app.route("/Morakot/LoanInfo", methods=['GET'])
def getLoanInfo():
	try:
		LoanID 			= request.args.get("LoanID")
		CustomerID 		= ""
		Term 			= ""
		Currency		= ""
		FirstDate		= ""
		MaturityDate	= ""		

		row = MKT_LOAN_CONTRACT.query.get(LoanID)

		if row:
			CustomerID 		= str(row.ContractCustomerID)
			Currency 		= str(row.Currency)

			CustomerObj 	= MKT_CUSTOMER.query.get(CustomerID)
			if CustomerObj:
				CustomerName = CustomerObj.LastNameEn + " " + CustomerObj.FirstNameEn

			LoanInfo = getLoanInformation(LoanID=LoanID,Date=mktdate.getBankDate())
			if LoanInfo:
				Term = LoanInfo.get("Term")
				FirstDate = LoanInfo.get("FirstDate")
				MaturityDate = LoanInfo.get("MaturityDate")
				MaturityDate = str(mktdate.getNextMonth(mktdate.getDateISO(MaturityDate),int(1)))

		return jsonify(CustomerID=CustomerID,
						Term=Term,
						Currency=Currency,
						FirstDate=FirstDate,
						MaturityDate=MaturityDate)
	except:
		raise

@app.route("/Morakot/SavingAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def SavingAccount():
	return getSavingAccount()

@app.route("/Morakot/GeneralAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def GeneralAccount():
	return getSavingAccount(FilterBranch=True,SavingPlan=False)

def getSavingAccount(FilterBranch=True,SavingPlan=True,Customer=""):

	DefaultBranch 	= mktuser.getCurrentBranch()
	search 			= request.args.get('q')
	action 			= request.args.get('action') if 'action' in request.args else ""
	NAMES 			= []
	FilterCondition = []
	SavingPlanSetting = mktsetting.getAppSetting('ACC_PRODUCT_SAVING_PLAN')
	if not SavingPlanSetting:
		raise ValueError('Missing App Setting ACC_PRODUCT_SAVING_PLAN, Please create App Setting of ACC_PRODUCT_SAVING_PLAN to mapping Saving Plan Account Product.')
	else:
		SavingPlaSetting = SavingPlanSetting.split()

	#check if search text all in space
	if not search.isspace():
		search = search.strip()
		if not search is None:
			if action == "view":
				FilterCondition.append(MKT_ACCOUNT.ID == search)
			else:
				FilterCondition.append(or_(MKT_ACCOUNT.ID.like('%'+search.upper()+'%'),func.upper(MKT_ACCOUNT.AccName).like('%'+search.upper()+'%')))
				FilterCondition.append(MKT_ACCOUNT.AccStatus != "C")
				if FilterBranch:
					FilterCondition.append(MKT_ACCOUNT.Branch==DefaultBranch)
				if SavingPlan:
					FilterCondition.append(MKT_ACCOUNT.AccProduct.in_(SavingPlaSetting))

			Acc = 	MKT_ACCOUNT.query.filter(*FilterCondition).order_by(MKT_ACCOUNT.ID)
			for row in Acc:
				dic = {"id":row.ID, "text":"%s - %s - %s" %(row.ID,row.AccName,row.Currency)}
				NAMES.append(dic)

	# app.logger.debug(NAMES)
	return jsonify(items = NAMES)


class FRM_SAVING_PLAN(exform):
	LoanID 			= 	RemoteTextField("Loan ID")
	CustomerID 		= 	RemoteTextField(requiredlabel("Customer", "*"), [validators.Required()])
	SavingAccount 	= 	RemoteTextField(requiredlabel("Saving Plan Account", "*"),
								validators=[validators.Required()]
							)
	GeneralAccount 	= 	RemoteTextField(requiredlabel("Nominated Account", "*"),
								validators=[validators.Required()]
							)
	Currency 		=	TextField("Currency")
	AccProduct 		= 	QuerySelectField(requiredlabel('Account Product', '*'),
							query_factory=loadAccProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	InterestRate 	= 	TextField(requiredlabel("Interest Rate","*"),[validators.Required()])
	OpeningDate		= 	DateField(requiredlabel(getLanguage("Opening Date"), "*"), [validators.Required()], default=lambda:mktdate.getBankDate())
	TargetAmount 	= 	DecimalField("Target Amount", [validators.Optional()], default=0)
	# SavingBalance 	= 	DecimalField("Saving Balance", [validators.Optional()], default=0)
	Term 			= 	IntegerField(requiredlabel("%s (%s)" %(getLanguage("Term"), getLanguage("Month")), "*"), [validators.Required()])
	
	Cycle 			= 	IntegerField(requiredlabel(getLanguage("Cycle"), "*"), [validators.Required()], default=1)
	FirstDate 		=	DateField(requiredlabel("First Date", "*"), [validators.Required()], default=lambda:mktdate.getBankDate())
	MaturityDate 	=	DateField(requiredlabel(getLanguage("Maturity Date"), "*"), [validators.Required()])

	IFrame = MKTIframe("Schedule",dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, description='1-Schedule')
	
	def validate_Term(form,field):
		try:
			Term 			= int(form.Term.data)
			Currency 		= request.form['Currency']
			AccProduct    	=  request.form['SavingAccount']
			LoanID 			= request.form['LoanID']
			AccProductObj 	= MKT_ACCOUNT.query.get(AccProduct)
			# Call function to check Maximum and Minimum Term
			mktloanapp.checkMaxMinTermAccProduct(Term, Currency, AccProductObj.AccProduct if AccProductObj else "")

			check = checkSavingTerm(LoanID=LoanID,Term=Term)
			if not check[0]:
				raise ValidationError(check[1])
		except:
			raise

	def validate_TargetAmount(form,field):
		try:
			TargetAmount 	=	(form.TargetAmount.data)
			if TargetAmount <=0 :
				raise ValidationError('Target amount should be more than zero.')
		except Exception as e:	
			raise

	def validate_SavingAccount(form,field):
		try:
			Currency 		= 	request.form['Currency']
			SavingAcc    	=  	request.form['SavingAccount']
			LoanID 			= 	request.form['LoanID']
			GeneralAcc    	=  	request.form['GeneralAccount']
			Customer 		= 	request.form['CustomerID']

			SavingAccObj 	= 	MKT_ACCOUNT.query.get(SavingAcc)
			GeneralAccObj 	= 	MKT_ACCOUNT.query.get(GeneralAcc)
			LoanObj 		=	MKT_LOAN_CONTRACT.query.get(LoanID)
			#Validate if account belong to that customer
			if SavingAccObj.CustomerList != Customer:
				raise ValidationError("Saving Account not belong to customer %s." % Customer)

		except:
			raise

	def validate_GeneralAccount(form,field):
		try:
			Currency 		= 	request.form['Currency']
			SavingAcc    	=  	request.form['SavingAccount']
			LoanID 			= 	request.form['LoanID']
			GeneralAcc    	=  	request.form['GeneralAccount']
			Customer 		= 	request.form['CustomerID']

			SavingAccObj 	= 	MKT_ACCOUNT.query.get(SavingAcc)
			GeneralAccObj 	= 	MKT_ACCOUNT.query.get(GeneralAcc)
			LoanObj 		=	MKT_LOAN_CONTRACT.query.get(LoanID)
			#Validate if account belong to that customer
			if GeneralAccObj.CustomerList != Customer:
				raise ValidationError("General Account not belong to customer %s." % Customer)
		except:
			raise

	def validate_Currency(form,field):
		try:
			Currency 		= 	request.form['Currency']
			SavingAcc    	=  	request.form['SavingAccount']
			LoanID 			= 	request.form['LoanID']
			GeneralAcc    	=  	request.form['GeneralAccount']
			Customer 		= 	request.form['CustomerID']

			SavingAccObj 	= 	MKT_ACCOUNT.query.get(SavingAcc)
			GeneralAccObj 	= 	MKT_ACCOUNT.query.get(GeneralAcc)
			LoanObj 		=	MKT_LOAN_CONTRACT.query.get(LoanID)

			SavingCurrency 	= SavingAccObj.Currency if SavingAccObj else ""
			GeneralCurrency = GeneralAccObj.Currency if GeneralAccObj else ""
			LoanCurrency 	= LoanObj.Currency if LoanObj else ""

			ListCurrency 	= []
			if LoanObj:
				ListCurrency = [LoanCurrency,SavingCurrency,GeneralCurrency]				
			else:
				ListCurrency = [SavingCurrency,GeneralCurrency]

			Check = checkCurrency(ListCurrency=ListCurrency)
			if not Check[0]:
				raise ValidationError(Check[1])
		except:
			raise

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= 	"$('#MaturityDate').val(data.MaturityDate)"
		varname 		= 	"FirstDate:$('#FirstDate').val(), Term:$('#Term').val()"
		fun 			= 	["FirstDate", varname, fielddisplay, "/Morakot/getMaturityDate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#MaturityDate').val(data.MaturityDate)"
		varname 		= 	"FirstDate:$('#FirstDate').val(), Term:$('#Term').val()"
		fun 			= 	["Term", varname, fielddisplay, "/Morakot/getMaturityDate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#MaturityDate').val(data.MaturityDate)"
		varname 		= 	"FirstDate:$('#FirstDate').val(), Term:$('#Term').val()"
		fun 			= 	["TargetAmount", varname, fielddisplay, "/Morakot/getMaturityDate", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#AccProduct').select2('data', {'id':data.AccProduct,'text':data.AccProductDesc})"
		fielddisplay  	+= ",$('#InterestRate').val(data.InterestRate)"
		fielddisplay  	+= ",$('#Term').val(data.Term)"
		fielddisplay  	+= ",$('#Currency').val(data.Currency)"
		varname 		= "SavingAccount:$('#SavingAccount').val(),LoanID:$('#LoanID').val(),Term:$('#Term').val()"
		fun 			= ["SavingAccount", varname, fielddisplay, "/Morakot/getAccountInfo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CustomerID').select2('data', {'id':data.CustomerID,'text':data.CustomerName})"
		fielddisplay 	+= ",$('#Term').val(data.Term)"
		fielddisplay 	+= ",$('#FirstDate').val(data.FirstDate)"
		fielddisplay 	+= ",$('#MaturityDate').val(data.MaturityDate)"
		varname 		= "LoanID:$('#LoanID').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/LoanInfo", "change", "CustomerID"]
		hotfield.append(fun)


		return hotfield

	@staticmethod
	def moneyField():
		return [("TargetAmount", "Currency")]

	@staticmethod
	def formatMoney():
		return ["TargetAmount"], "Currency"

	@staticmethod
	def setDisable():
		return [('MaturityDate'),'InterestRate', 'AccProduct','Cycle','Currency']

	@staticmethod
	def urlParam():
		ID 			= request.form["ID"] if request.method == "POST" else g.formID 
		dicParam	= [{"IframeName":"IFrame", "iframeUrl":"/Morakot/SavingPlanScheduleDefine/View/",'Resource' : 'Status'}]
		return dicParam
	@staticmethod
	def listField():
		Fields 	=	["ID","CustomerID","SavingAccount","GeneralAccount","AccProduct",
					 "OpeningDate","MaturityDate","TargetAmount","Term","Cycle","Currency",
					 "FirstDate","InterestRate"]
		return Fields

	@staticmethod
	def redirectAfterInsert():
		ID 				= 	request.form['ID']
		NumOfAuth 		= 	g.getNAuthorize
		Resource 		= 	"INAU"
		
		if NumOfAuth == 0:
			PlanObj = MKT_SAVING_PLAN.query.get(ID)
			NextRunDate = PlanObj.FirstDate
			Resource = "AUTH"
			if PlanObj:
				PlanObj.NextRunDate  = 	NextRunDate
				db.session.add(PlanObj)
				db.session.commit()
		else:
			PlanObj = MKT_SAVING_PLAN_INAU.query.get(ID)
			NextRunDate = PlanObj.FirstDate
			if PlanObj:
				PlanObj.NextRunDate  = 	NextRunDate
				db.session.add(PlanObj)
				db.session.commit()
		
		return "/Morakot/SavingPlanScheduleDefine/New/?ID="+request.form['ID'] + "&Resource=" + Resource

	@staticmethod
	def beforeAuthorize():
		try:
			ID 			= g.formID
			PlanObj 	= MKT_SAVING_PLAN_INAU.query.get(ID)
			# check repayment schedule for this loan '''
			RepSchedule = MKT_SAVING_PLAN_SCHED_INAU.query.\
						  filter(MKT_SAVING_PLAN_SCHED_INAU.SPID == ID).\
						  order_by(MKT_SAVING_PLAN_SCHED_INAU.No.asc())

		  	if not PlanObj:
				flash(msg_error + "No record to authorize.")
				return False
			else:
				Audit 		= 	mktaudit.getAuditrail()
				Inputter	= 	PlanObj.Inputter
				Authorizer 	= 	Audit['Authorizer']
				Authorizeon = 	Audit['Authorizeon']
				Status 		= 	PlanObj.Status
				if Inputter.upper() == Authorizer.upper():
					flash(msg_error + " user who authorize must differ from input.")
					return False
				else:
					if Status != "RNAU":
						if not RepSchedule.all():
							flash(msg_warning + " Saving schedule not found for this saving plan %s." %ID)
							return False
						else:
							''' Authorize Schedule Difine and Repayment Schedule '''
							Auth = setAuthorizeSavingSchedule(ID)
							if not Auth[0]:
								flash(msg_warning + Auth[1])
								return False
						return True

		except:
			db.session.rollback()
			return False
			
	@staticmethod
	def formReadOnly():
		return "AUTH"

def setAuthorizeSavingSchedule(SPID):
	try:
		Audit 		= mktaudit.getAuditrail()
		Inputter	= Audit['Inputter']
		Createdon 	= Audit['Createdon']
		Authorizer 	= Audit['Authorizer']
		Authorizeon	= Audit['Authorizeon']

		# Check if existed move to HIST
		mktaudit.deleteAUTH(MKT_SAVING_PLAN_SCHED, SPID, "SPID")

		mktaudit.moveINAUtoAUTH(MKT_SAVING_PLAN_SCHED, MKT_SAVING_PLAN_SCHED_INAU, SPID, Inputter, Createdon, Authorizer, Authorizeon, "SPID")
		mktaudit.deleteAUTH(MKT_SAVING_PLAN_SCHED_INAU, SPID, "SPID")

		return True,""

	except:
		db.session.rollback()
		return False,"There something wrong when move schedule from INAU to LIVE."

def checkSavingTerm(**kwargs):
	LoanID = kwargs.get("LoanID")
	Term   = kwargs.get("Term")
	Result = True,""
	LoanInfo = getLoanInformation(LoanID=LoanID,Date=mktdate.getBankDate())
	if LoanInfo:
		if int(Term) > int(LoanInfo.get("Term")):
			Result =  False,"Term cannot over term in Loan Contract %s" % LoanInfo.get("Term")
	return Result

def checkCurrency(**kwargs):
	Result 			= True,""
	ListCurrency 	= kwargs.get("ListCurrency")
	if len(ListCurrency) > 0:
		if ListCurrency.count(ListCurrency[0]) != len(ListCurrency):
			Result = False, "Currency of both account and loan contract must be the same."
	return Result