from app.mktcore.imports 				import *
from .forms 							import *
from app.PotentialCustomerAct.views 	import *
from app.PotentialCustomer.views 		import *
from app.Rejected.models				import *
from app.Rejected.views 				import *
from app.LoanProduct 				 	import *
from app.tools							import mktdb
import app.tools.mktaudit 				as mktaudit
import app.tools.user 					as mktuser
import app.tools.mktdate					as mktdate
import app.tools.mktsetting   	as mktsetting
import json
import decimal
import app.tools.mktnotification    as mktnotify
import app.tools.mktmoney 		    as mktmoney
from app.mktcore.authentication import GetAPIReturnFormat,MesssageStandard
import app.tools.mktpoc 			as mktpoc

registerCRUD(admin, '/POCustomer', 'POCustomer',FRM_PO_CUSTOMER, [MKT_PO_CUSTOMER])
registerCRUD(admin, '/POCustomerStatus', 'POCustomerStatus',FRM_PO_CUSTOMER_STATUS, [MKT_PO_CUSTOMER_STATUS])

@app.route("/Morakot/POManage/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPOManage():
	try:	
		ErrorMsg    = []
		getCheck = checkAccess ("/Morakot/POManage/","Search")
		if getCheck != True:
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		IsIndividual 			= 	request.args.get("IsIndividual") if 'IsIndividual' in request.args else "N"
		TabSelected				=	request.args.get("TabSelected") if 'TabSelected' in request.args else ""
		Branch 	 				= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else mktuser.getCurrentBranch()
		BranchList 				=	Branch.split()

		UserID 					= 	request.args.get("UserID") if 'UserID' in request.args else "ALL"

		NewObj					=	getNewPO(Branch=Branch,IsIndividual=IsIndividual)
		POObj 					=	getPOList(Branch=Branch,IsIndividual=IsIndividual,TabSelected=TabSelected)
		ActivityObj 			= 	getActivity(Branch=Branch,UserID=UserID,IsIndividual=IsIndividual)
		IsAssigner 				= 	isAssigner()
		POStatusObj 		  	= 	getPOStatus()
		ReAssigneeObj 			= 	getUserAssigneeByRole(IsIndividual=IsIndividual)
		RejectedStageObj 		= 	getRejectedStage()
		return render_template("pocustomer/new/manage.html",
								Branch=Branch,
								NewObj=NewObj,
								POObj=POObj, 
								ActivityObj=ActivityObj,
								IsAssigner =IsAssigner,
								POStatusObj = POStatusObj,
								ReAssigneeObj =ReAssigneeObj,
								RejectedStageObj= RejectedStageObj)
	except:
		raise

@app.route("/Morakot/POManageIndividual/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPOManageIndvidual():
	try:	
		ErrorMsg    = []
		getCheck = checkAccess ("/Morakot/POManageIndividual/","Search")
		if getCheck != True:
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		IsIndividual 			= 	request.args.get("IsIndividual") if 'IsIndividual' in request.args else "Y"
		TabSelected				=	request.args.get("TabSelected") if 'TabSelected' in request.args else ""
		Branch 	 				= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else mktuser.getCurrentBranch()
		BranchList 				=	Branch.split()

		UserID 					= 	request.args.get("UserID") if 'UserID' in request.args else mktuser.getUser().ID


		NewObj					=	getNewPO(Branch=Branch,IsIndividual=IsIndividual)
		POObj 					=	getPOList(Branch=Branch,IsIndividual=IsIndividual,TabSelected=TabSelected)
		ActivityObj 			= 	getActivity(Branch=Branch,UserID=UserID,IsIndividual=IsIndividual)
		POStatusObj				= 	getPOStatus()
		ReAssigneeObj 			= 	getUserAssigneeByRole(IsIndividual=IsIndividual)
		IsAssigner 				= 	isAssigner()

		return render_template("pocustomer/new/individual.html",
								Branch=Branch,
								NewObj=NewObj,
								POObj=POObj, 
								ActivityObj=ActivityObj,
								UserID=UserID,
								POStatusObj = POStatusObj,
								IsAssigner= IsAssigner,
								ReAssigneeObj = ReAssigneeObj)
	except:
		raise

@app.route("/Morakot/NewInquiryRefresh", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def NewInquiryRefresh():
	try:	
		IsIndividual 			= 	request.args.get("IsIndividual") if 'IsIndividual' in request.args else "N"
		Branch 	 				= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else mktuser.getCurrentBranch()
		BranchList 				=	Branch.split()		

		NewObj					=	getNewPO(Branch=Branch,IsIndividual=IsIndividual)

		return render_template("pocustomer/new/new.html",
								NewObj=NewObj)
	except:
		raise

@app.route("/Morakot/InquiryRefresh", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def InquiryRefresh():
	try:	
		IsIndividual 			= 	request.args.get("IsIndividual") if 'IsIndividual' in request.args else "N"
		Branch 	 				= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else mktuser.getCurrentBranch()
		BranchList 				=	Branch.split()

		POObj					=	getPOList(Branch=Branch,IsIndividual=IsIndividual)
		ReAssigneeObj 			= 	getUserAssigneeByRole(IsIndividual=IsIndividual)
		IsAssigner 				= 	isAssigner()
		POStatusObj 			= 	getPOStatus()
		RejectedStageObj 		= 	getRejectedStage()
		# print "IsAssigner",IsAssigner
		return render_template("pocustomer/new/pocustomer.html",
								POObj=POObj,
								ReAssigneeObj= ReAssigneeObj,
								IsAssigner = IsAssigner,
								POStatusObj = POStatusObj,
								RejectedStageObj= RejectedStageObj)
	except:
		raise

@app.route("/Morakot/ActivityRefresh", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ActivityRefresh():
	try:	
		IsIndividual 			= 	request.args.get("IsIndividual") if 'IsIndividual' in request.args else "N"
		Branch 	 				= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else mktuser.getCurrentBranch()
		BranchList 				=	Branch.split()

		UserID 					= 	request.args.get("UserID") if 'UserID' in request.args else "ALL"

		ActivityObj 			= 	getActivity(Branch=Branch,IsIndividual=IsIndividual,UserID=UserID)
		RejectedStageObj 		= 	getRejectedStage()

		return render_template("pocustomer/new/activity.html",
								Obj=ActivityObj,
								RejectedStageObj = RejectedStageObj)
	except:
		raise


@app.route("/Morakot/SetAssignee/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def setAssignee():	
	try:
		ErrorMsg    = []
		getCheck = checkAccess ("/Morakot/SetAssignee/","Edit")
		if getCheck != True:
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		CurrentUser     = 	mktuser.getUser()				
		UserID			= 	request.args.get("UserID") if 'UserID' in request.args else "" #AssigneeID
		POCustomerID	= 	request.args.get("POCustomerID") if 'POCustomerID' in request.args else ""
		ReAssign		= 	request.args.get("ReAssign") if 'ReAssign' in request.args else "N"

		POCustomerObj 	= 	MKT_PO_CUSTOMER.query.get(POCustomerID)
		AssignStatus = "2"		
    	
		if POCustomerObj:
			Curr     = int(POCustomerObj.Curr)+1
			if ReAssign == "N":
				Data =  {'AssignTo'		: 	UserID,
							'POStatus'		: 	AssignStatus,
							'AssignDate'	: 	mktdate.getDateISO(),
							'Curr' 			:	str(Curr),
							'Inputter' 		:	mktuser.getUser().ID,
							'Createdon' 	: 	mktdate.getDateTimeNow(),
							'Authorizer' 	: 	mktuser.getUser().ID,
							'Authorizeon'	: 	mktdate.getDateTimeNow()}

				mktaudit.moveAUTHtoHIST(MKT_PO_CUSTOMER,MKT_PO_CUSTOMER_HIST,POCustomerID)
				mktdb.updateRecord(MKT_PO_CUSTOMER, [MKT_PO_CUSTOMER.ID == POCustomerID], Data)
				db.session.commit()

				mktnotify.insertNotify({ 'ID':POCustomerID, 
				            'Path':'POCustomer',
				            'Title':'Potentail Customer',
				            'From':CurrentUser.ID, 'To':UserID,
				            'Message':' was assigned to you.'
				})
	        if ReAssign == "Y":
	        	AssignTo = POCustomerObj.AssignTo	  
	        	if AssignTo != UserID:	

					Data =  {'AssignTo'		: 	UserID,
							'AssignDate'	: 	mktdate.getDateISO(),
							'Inputter' 		:	mktuser.getUser().ID,
							'Curr' 			:	str(Curr),
							'Createdon' 	: 	mktdate.getDateTimeNow(),
							'Authorizer' 	: 	mktuser.getUser().ID,
							'Authorizeon'	: 	mktdate.getDateTimeNow()}

					mktaudit.moveAUTHtoHIST(MKT_PO_CUSTOMER,MKT_PO_CUSTOMER_HIST,POCustomerID)
					mktdb.updateRecord(MKT_PO_CUSTOMER, [MKT_PO_CUSTOMER.ID == POCustomerID], Data)
					db.session.commit()
					#notifiy new assignee
					mktnotify.insertNotify({ 'ID':POCustomerID, 
						        'Path':'POCustomer',
						        'Title':'Potentail Customer',
						        'From':CurrentUser.ID, 'To':UserID,
						        'Message':' was re-assigned from %s to you.' % AssignTo
					})
					#notify old assignee for de-assign
					mktnotify.insertNotify({ 'ID':POCustomerID, 
						        'Path':'POCustomer',
						        'Title':'Potentail Customer',
						        'From':CurrentUser.ID, 'To':AssignTo,
						        'Message':' was de-assigned from you to %s.' % UserID
					})
		return "True"

	except Exception, e:
		raise
		db.session.rollback()
		return False


def getPOCustomer(**kwarg):

	Branch 			= 	kwarg.get("Branch")
	BranchList 		=	Branch.split()

	POStatus 		= 	kwarg.get("POStatus")
	POStatusList	=	POStatus.split()

	IsIndividual 	= 	kwarg.get("IsIndividual")

	POCustomerObj 	= 	db.session.query(MKT_PO_CUSTOMER).\
									order_by(MKT_PO_CUSTOMER.ID.desc(),
										     MKT_PO_CUSTOMER.DateOfContact.desc())

	if "ALL" not in POStatusList:
		POCustomerObj=	POCustomerObj.filter(MKT_PO_CUSTOMER.POStatus.in_(POStatusList))

	if "ALL" not in BranchList:
		POCustomerObj=	POCustomerObj.filter(MKT_PO_CUSTOMER.AssignBranch.in_(BranchList))

	if IsIndividual == "Y":
		UserID      =	mktuser.getUser().ID
		POCustomerObj = POCustomerObj.filter(MKT_PO_CUSTOMER.AssignTo==UserID)

	return POCustomerObj

def getUserByRole(RoleID=[]):
	UserObj	= db.session.query(MKT_USER).order_by(MKT_USER.DisplayName.asc())
	if RoleID:
		if "ALL" not in RoleID:
			UserObj = UserObj.filter(MKT_USER.Role.in_(RoleID))
	return UserObj

def getUserAssigneeByRole(IsIndividual=""):
	UserObj				= db.session.query(MKT_USER).order_by(MKT_USER.DisplayName.asc())
	DictAssingeeRole 	= mktpoc.getReAssignRoleSetting() # dict role from app setting
	UserLogin 			= mktuser.getUser()
	NumUserRole 		= UserLogin.Role # get user role
	AccessBranch 		= UserLogin.AccessBranch.split()
	ListUser 	=		[]
	if DictAssingeeRole:
		ListAssingeeRole 	= DictAssingeeRole.get(NumUserRole) # check role in app setting configure
		if ListAssingeeRole:
			if "ALL" not in ListAssingeeRole:
				for Row in UserObj: # loop user 
					if Row.ID not in ListUser: # check Assignee's ID in list user
						if "ALL" in Row.AccessBranch:
							ListUser.append(Row.ID) # append assigee user that their access branch ini assigner's access branach
						else:
							for Branch in AccessBranch: # looo branch in assigner's branch
								if Row.ID not in ListUser:# check Assignee's ID in list user
									if Branch in Row.AccessBranch.split():# check assigner's access branch in assignee's branch
										ListUser.append(Row.ID)

				UserObj = UserObj.filter(MKT_USER.Role.in_(ListAssingeeRole),MKT_USER.ID.in_(ListUser))
					# UserObj = UserObj.filter(MKT_USER.Role.in_(ListAssingeeRole),MKT_USER.AccessBranch.in_(AccessBranch))
		else:
			if IsIndividual:
				UserObj = UserObj.filter(MKT_USER.ID==UserLogin.ID)
			else:
				UserObj = None
	else:
		# if user not in config will set to none

		if IsIndividual:
			UserObj = UserObj.filter(MKT_USER.ID==UserLogin.ID)
		else:
			UserObj = None
	return UserObj

def getNewPO(**kwarg):
	Branch 			= 	kwarg.get("Branch")
	BranchList      =	Branch.split()
	IsIndividual 	= 	kwarg.get("IsIndividual")

	POStatus 		=	'1'

	### get UserObj ###
	UserObj 		=   getAssignee(BranchList)	
	### end ###	

	Param			= 	{"Branch": Branch, "POStatus": POStatus, "IsIndividual": IsIndividual}

	return [getPOCustomer(Branch=Branch, POStatus=POStatus, IsIndividual=IsIndividual), UserObj, Param]


def getPOList(**kwarg):
	Branch 			= 	kwarg.get("Branch")
	BranchList 		= 	Branch.split()
	# POStatus 		= 	kwarg.get("POStatus")
	IsIndividual 	= 	kwarg.get("IsIndividual")
	TabSelected	 	= 	kwarg.get("TabSelected")

	CurrentDate 	= 	mktdate.getDateISO()
	NextDate        =	mktdate.getNextDay(CurrentDate, 2)
	Param			= 	{"Branch": Branch, "IsIndividual": IsIndividual, "CurrentDate": CurrentDate,"NextDate": NextDate, "TabSelected": TabSelected}

	#UserObj 		=   db.session.query(MKT_USER)
	### get AssigneeObj ###	
	UserObj			=	getAssignee(BranchList)	
	### end ###	
	POStatusObj     =   db.session.query(MKT_PO_CUSTOMER_STATUS)
	AssignedObj 	= 	getPOCustomer(Branch=Branch,POStatus='2',IsIndividual=IsIndividual)
	NewAssignObj 	= 	AssignedObj.filter(MKT_PO_CUSTOMER.AssignDate==str(CurrentDate))
	POCustomerObj 	=	getPOCustomer(Branch=Branch,POStatus='ALL',IsIndividual=IsIndividual)

	RejectedStatusObj  	= 	MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.Closed=='N',MKT_PO_CUSTOMER_STATUS.Deal=='N').first()
	RejectedStatus 		= 	""
	if RejectedStatus:
		RejectedStatus = RejectedStatusObj.ID

	MeetingStatus      = mktsetting.getAppSetting("PO_MEETING_STATUS")
	if MeetingStatus:
		MeetingStatus = MeetingStatus.strip()

	#Reminder Upcoming followup customer
	UpcomingObj			= POCustomerObj.filter(MKT_PO_CUSTOMER.NextFollowDate<=str(NextDate)).\
										filter(MKT_PO_CUSTOMER.NextFollowDate>str(CurrentDate)).\
										filter(MKT_PO_CUSTOMER.POStatus!=RejectedStatus)
	#Reminder Today followup
	TodayObj 			= POCustomerObj.filter(MKT_PO_CUSTOMER.NextFollowDate==str(CurrentDate)).\
						  filter(MKT_PO_CUSTOMER.POStatus!=RejectedStatus)
                                                                         
  	#Past Due followup
  	PastDueObj 			= POCustomerObj.filter(MKT_PO_CUSTOMER.NextFollowDate < str(CurrentDate)).\
  										filter(MKT_PO_CUSTOMER.POStatus==MeetingStatus)

	#Rejected
	RejectedObj         = db.session.query(MKT_REJECTED)
	ReasonTypeObj		= db.session.query(MKT_REJECTED_REASON_TYPE)

	return [NewAssignObj, POCustomerObj, UserObj, POStatusObj,Param, UpcomingObj,TodayObj, PastDueObj, RejectedObj,ReasonTypeObj]

def getActivity(**kwarg):
	Branch 			= 	kwarg.get("Branch")
	BranchList		= 	Branch.split()
	IsIndividual 	= 	kwarg.get("IsIndividual")
	UserID 			= 	kwarg.get("UserID")

	CurrentDate 	= 	mktdate.getDateISO()
	NextDate        =	mktdate.getNextDay(CurrentDate, 2)
	Param			= 	{"Branch": Branch, "IsIndividual": IsIndividual, "CurrentDate": CurrentDate,"NextDate": NextDate, "UserID":UserID}

	### get UserObj ###
	UserObj			=	getAssignee(BranchList)
	### end ###	

	POStatusObj     =   db.session.query(MKT_PO_CUSTOMER_STATUS)
	POCustomerObj	= 	db.session.query(MKT_PO_CUSTOMER).\
								filter(MKT_PO_CUSTOMER.POStatus.in_(['2','3'])).\
								order_by(MKT_PO_CUSTOMER.POStatus.desc(),
										 MKT_PO_CUSTOMER.DateOfContact.asc())	

	ActObj			= 	db.session.query(MKT_PO_CUSTOMER_ACT).\
											order_by(MKT_PO_CUSTOMER_ACT.ID.asc(), 
													 MKT_PO_CUSTOMER_ACT.ActivityType.asc())

	ActTypeObj		= 	db.session.query(MKT_PO_CUSTOMER_ACT_TYPE)

	if "ALL" not in Branch:
		POCustomerObj 		= 	POCustomerObj.filter(MKT_PO_CUSTOMER.AssignBranch.in_(BranchList))

	if IsIndividual == "Y":
		UserID      =	mktuser.getUser().ID
		POCustomerObj = POCustomerObj.filter(MKT_PO_CUSTOMER.AssignTo==UserID)

		UserObj		=	UserObj.filter(MKT_USER.ID==UserID)

	return [ActObj, POCustomerObj, UserObj, POStatusObj,ActTypeObj,Param]

def getAssignee(BranchList):
	DictRoleID 		=   mktpoc.getReAssignRoleSetting()
	UserLogin 		= 	mktuser.getUser()
	NumUserRole 	= 	mktuser.getUserRole(UserLogin.ID) # get user role
	RoleID 			= []
	if DictRoleID:
		RoleID 		= DictRoleID.get(NumUserRole)
		if RoleID:
			RoleID.append(NumUserRole)
		else:
			RoleID= [NumUserRole]
	UserObj			=   getUserByRole(RoleID)
	ListID			= 	[]
	ListNotID		= 	[]
	if "ALL" not in BranchList:
		for row in UserObj:
			AccessBranch = row.AccessBranch.split()
			if "ALL" in AccessBranch:
				if row.ID not in ListID:
					ListID.append(row.ID)
			else:
				for item in AccessBranch:
					if item in BranchList:
						if row.ID not in ListID:
							ListID.append(row.ID)
					else:
						ListNotID.append(row.ID)
	if ListID:
		UserObj 		= 	UserObj.filter(MKT_USER.ID.in_(ListID))

	if ListNotID:
		UserObj			=	UserObj.filter(~(MKT_USER.ID.in_(ListNotID)))

	return UserObj
def isAssigner():
	"""
	- this function use to check re-assign role
	- True value meant that has permisstion to re-assign role
	- Fale value meant taht no permission to re-assing role and will disable button re-assign in screen  'List of Potential Customer By Status'
	"""
	DictReAssignRole 	= mktpoc.getReAssignRoleSetting()
	UserLogin 			= mktuser.getUser()
	NumUserRole 		= mktuser.getUserRole(UserLogin.ID) # get user role\
	if DictReAssignRole.get(NumUserRole):
		return True,UserLogin
	else:
		return False,UserLogin

def getPOStatus():
	""" 
	- loop up PO customer status and short field Order by asc
	- return PO customer status Obj
	"""
	POStatusObj 	=	MKT_PO_CUSTOMER_STATUS.query.order_by(MKT_PO_CUSTOMER_STATUS.Order.asc())
	return POStatusObj

def getRejectedStage():
	LOCAL_REGISTER_PATH = mktsetting.getAppSetting('LOCAL_REGISTER_PATH')

	if LOCAL_REGISTER_PATH=='local.FirstFinance':
		from local.FirstFinance.Rejected.models 	import MKT_REJECTED_STAGE
		RejectedStage 	=	db.session.query(MKT_REJECTED_STAGE)

	else:
		RejectedStage  	= ""
	return RejectedStage
### Pipeline Report ###
@app.route("/Morakot/POPipeline/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPOPipeline():
	try:
		Branch 	 				= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else mktuser.getCurrentBranch()
		BranchList 				=	Branch.split()

		return render_template("pocustomer/new/pipeline.html",
								Branch=Branch,)
	except:
		raise

@app.route("/Morakot/POCustomerSearch", methods=['GET'])
@app.route("/Morakot/API/POCustomerSearch/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPOCustomerAPI():
	Search 	    = request.args.get('q')
	Status 		= StatusCodes()

	POObjLive 		=	getQueryPO(Search=[MKT_PO_CUSTOMER.UserID==str(Search)]) # get  potential obj from table live
	POObjInau 		=	getQueryPO(POTable=MKT_PO_CUSTOMER_INAU,Search=[MKT_PO_CUSTOMER_INAU.UserID==str(Search)]) # get  potential obj from table live

	ListPOLive 		=	getPOData(POObj=POObjLive) # formate data
	ListPOInau 		=	getPOData(POObj=POObjInau,Resource='INAU') # format data

	DictResult 		=	{"potential":[]}
	
	if ListPOLive or ListPOInau:

		DictResult.get('potential').extend(ListPOLive)
		DictResult.get('potential').extend(ListPOInau)

		return GetAPIReturnFormat(Header="Your Loan Requested",Data=DictResult,Status=Status.ok(),Type="Custom")
	else:
		# print "Consumer don't have Potential Customer"
		return MesssageStandard(Messages=["You don't have requested loan"],Statuscode=Status.not_found())

def getQueryPO(POTable=MKT_PO_CUSTOMER,Search=[]):
	"""
	this function is used to query data for potential customer.

	param:
		- POTable (type Obj) = Potential Table. by defaul value Live Table. you can give Inau Table or HIST table to.
		- Search (type List):you can custom filter filter recored your self. Ex. Search = [MKT_PO_CUSTOMER.UserID=='ADMIN.S']
	return :
		query_obj

	"""
	POObj 		= db.session.query(POTable.ID,
								POTable.LoanAmount,
								POTable.Currency,
								MKT_PO_CUSTOMER_STATUS.Description,
								MKT_LOAN_PRODUCT.Description.label("ProductDes")).\
							join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID == POTable.POStatus).\
							join(MKT_LOAN_PRODUCT,MKT_LOAN_PRODUCT.ID == POTable.ProductInterest).\
							filter(*Search).\
							order_by(POTable.ID.desc())
	return POObj

def getPOData(POObj="",Resource='LIVE'):
	"""
	This function use to arrange data.

	param:
		- POObj: query obj.
		- Resource : this field use to file live or inau record
	return:
		- rtype: list of Dict
		- rvalue: [{'Amount':Amount in potentail customer,
					'product_description':'Description of laon product',
					'potentail_status':'Description of po status',
					'url':'url of Filtering List Live or List Auth record'. ex :/POCustomer/ListLive/Operation/?fieldname_1=ID&operator_1=EQ&searchtext_1=PO001
					},
					{....}]

	"""
	ListResult 		= []
	if POObj.first():
		# print "Found potential customer recored"
		for Row in POObj:
			ListStatus = "ListLive" # live record 
			if Resource=='INAU':
				ListStatus = "ListAuth" # Inaut record

			Url = "/POCustomer/%s/Operation/?fieldname_1=ID&operator_1=EQ&searchtext_1=%s"%(ListStatus,Row.ID) # url list record and filter
			
			DictRecored = {
							"amount":mktmoney.toMoney(float(Row.LoanAmount),mktmoney.getCurrencyObj(Row.Currency)),
							"product_description":Row.ProductDes,
							"potential_status":Row.Description,
							"url":Url
							}
			ListResult.append(DictRecored)
	return ListResult