from app.mktcore.wtfimports 				import *
from wtforms 								import DecimalField, IntegerField
from .models import *
import time
from app.LoanProduct.models 				import *
from app.Province.models					import *
from app.District.models					import *
from app.Commune.models						import *
from app.Village.models						import *
from app.Branch.models						import *
from app.PotentialCustomer.models			import *
from app.Officer.models						import *
from app.User.models						import *
from app.Currency.models					import *
from app.Customer.models					import *
from app.Rejected.models					import *

from app.tools								import mktdb
import app.Customer.forms 		as customer
import app.tools.mktdate 		as mktdate
import app.tools.mktaddress 	as mktaddress
import app.tools.mkttool 		as mkttool
import app.tools.user 			as mktuser
import app.tools.mktaudit 		as mktaudit
import app.tools.mktdate		as mktdate
import app.tools.mktsetting   	as mktsetting
import app.tools.mktloan 		as mktloan
from sqlalchemy 							import *
from flask									import Markup
import re 
import app.tools.mktpoc			as mktpoc

ExtendClass 			= 	mktsetting.ExtendModule()
PO_CUSTOMER_LINK 		= 	ExtendClass.getUrlExtend(Module="POCustomer")
CUSTOMER_LINK 			=	ExtendClass.getUrlExtend(Module="Customer")

def loadUserID():
	return  session['getLogInID']

@app.route('/Morakot/ChangePOStatus')
@app.route('/Morakot/API/ChangePOStatus')
def ChangePOStatus():
	AssignTo = request.args.get('AssignTo')
	if AssignTo != '' and AssignTo != '__None':
		AssignStatus =  mktsetting.getAppSetting('POTENTIAL_STATUS_ASSIGN')
		if AssignStatus:
			POStatusObj  =  MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.ID==AssignStatus)\
							.order_by(MKT_PO_CUSTOMER_STATUS.Order).first()

			if POStatusObj:
				POStatus 	=  POStatusObj.ID
				POStatusDec =  POStatus + ' - ' + POStatusObj.Description
				return jsonify( POStatus = POStatus,POStatusDec = POStatusDec , AssignedDate=str(mktdate.getDateISO()))
			else:
				return jsonify(POStatus='',POStatusDec='',AssignedDate='')
		else:
			return jsonify(POStatus='',POStatusDec='', AssignedDate=str(mktdate.getDateISO()))

	else:
		POStatusObj =  MKT_PO_CUSTOMER_STATUS.query.order_by(MKT_PO_CUSTOMER_STATUS.Order).first()
		POStatus 	=  POStatusObj.ID
		POStatusDec =  POStatus + ' - ' + POStatusObj.Description
		return jsonify( POStatus = POStatus,POStatusDec = POStatusDec , AssignedDate = '')


def loadLoanProduct():
	return mktloan.loadLoanProduct()

def loadBranch(ID=''):	
	if ID:
		QueryString = MKT_BRANCH.query.filter(MKT_BRANCH.ID==ID).one()
	else:
		QueryString = MKT_BRANCH.query

	return QueryString


def loadUser(ID=''):	
	
	SelfAssignRole 	= 	mktsetting.getAppSetting('SelfAssignRole').split()
	DictRole 		=	mktpoc.getReAssignRoleSetting()
	RoleID 		=	[]
	UserRole	=	mktuser.getUserRole(ID)
	if DictRole:
		for V,K in DictRole.iteritems():
			RoleID.append(V)
	if UserRole in SelfAssignRole:
		RoleID.append(UserRole)

	QueryString 	= 	MKT_USER.query.order_by(MKT_USER.DisplayName.asc())

	if ID:
		if UserRole in SelfAssignRole:
			QueryString = 	QueryString.filter(MKT_USER.ID==ID).one()
		else:
			if "ALL" not in RoleID:
				QueryString = QueryString.filter(MKT_USER.Role.in_(RoleID))		

	else:		
		if "ALL" not in RoleID:
			QueryString = QueryString.filter(MKT_USER.Role.in_(RoleID))	

	return QueryString

def loadPOStatus():
	return MKT_PO_CUSTOMER_STATUS.query.order_by(MKT_PO_CUSTOMER_STATUS.Order)

def custom_DateOfContact(form,field):

	DateOfContact = request.form['DateOfContact']

	if DateOfContact:
		# clear out processing errors
		field.errors[:] = []

		CheckFormatDate = mktdate.isDateISO(DateOfContact)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

	else:
		# clear out processing errors
		field.errors[:] = []

		# raise ValidationError("This field is required.")

"""
 Check name is khmer name or english name
 Return True if there is english character in it
 Return False if there is only unicode
"""
def checkName(Name):
	# Match character from a to z and A to Z
	pattern = r'[A-Za-z]'

	if re.search(pattern, Name, flags=0):

	    return True

	else:

		return False


#function
def getRecord():
	try:
		result = MKT_PO_CUSTOMER_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_PO_CUSTOMER.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'Province'			:str(row.Province)})
				Dict.update({'District'			:str(row.District)})
				Dict.update({'Commune'			:str(row.Commune)})
				Dict.update({'Village'			:str(row.Village)})

			return Dict
		else:
			return Dict

	except:
		raise

def loadProvince():
	return mktaddress.getProvince()

def loadDistrict():
	if request.method == 'POST':
		Province = request.form["Province"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])  
		else:
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

def loadCommune():
	if request.method == 'POST':
		District=request.form["District"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['Commune'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return mktaddress.getLoadCommune(District)

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def loadVillage():
	if request.method == 'POST':
		Commune=request.form["Commune"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['Village'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)

#PotentialCustomerStatus
class FRM_PO_CUSTOMER_STATUS(exform):
	Description =	TextField(requiredlabel("Description","*"),[validators.Required()])
	Closed 		=	SelectField(requiredlabel("Closed","*"),
							 choices=[('','--None--'),('Yes', 'Yes'),('No', 'No')],
							 default='',
							 coerce=str,
							 validators=[validators.Required()])
	Deal 		=	SelectField(requiredlabel("Deal","*"),
							 choices=[('','--None--'),('Yes', 'Yes'),('No', 'No')],
							 default='',
							 coerce=str,
							 validators=[validators.Required()])
	IsNew 		=	SelectField(requiredlabel("New","*"),
							 choices=[('No', 'No'),('Yes', 'Yes')],
							 default='',
							 coerce=str,
							 validators=[validators.Required()])
	Order 		=	TextField(requiredlabel("Order","*"),[validators.Required()])
	AllowStatus =	TextField('Allow Status')

	def validate_IsNew(form,field):

		Data 	= field.data
		if Data == 'Yes':
			CheckNew = MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.IsNew=='Yes').first()
			if CheckNew:
				raise ValidationError('Not allow to set status New ')

	def validate_Deal(form,field):
		Deal 	= field.data
		Closed 	= form.Closed.data
		if Closed=='Yes' and Deal == 'Yes':
			raise ValidationError('Not allow to set')
	def validate_Order(form,field):
		Data = field.data
		if len(Data) >10:
			raise ValidationError('Integer must be smaller then 999999999.')
		try:
			int(Data)
		except Exception as e:
			raise ValidationError('Allow integer only.')
			

#PotentialCustomer
class FRM_PO_CUSTOMER(exform):
	FirstNameEn 	=	TextField(requiredlabel("First Name (English)","*"),[validators.Required()])
	LastNameEn 		=	TextField(requiredlabel("Last Name (English)","*"),[validators.Required()])
	FirstNameKh 	=	TextField("First Name (Local)")
	LastNameKh 		=	TextField("Last Name (Local)")

	Gender 			=	SelectField(requiredlabel("Gender","*"),
							 choices=[('Male', 'Male'),('Female', 'Female'),('Other','Other')],
							 default='Male',
							 coerce=str,
							 validators=[validators.Required()])

	ExistingClient	=	SelectField("Existing Client",
							 choices=[('N','No'),('Y', 'Yes')],
							 default='N',
							 coerce=str)

	Currency 		= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=False,
							blank_text=u'--%s--' %getLanguage("None"),
							default=lambda:loadCurrency(mktsetting.getAccSetting().BaseCurrency),
							validators=[validators.Required()]
						)	

	LoanAmount		=	DecimalField(("Loan Amount"))
	PriceOfProperty	=	DecimalField("Price Of Property")


	ProductInterest =	QuerySelectField(requiredlabel('Loan Product','*'),
							query_factory=loadLoanProduct,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()])

	DateOfContact	=	DateField("Date Of Contact",
							format='%Y-%m-%d',
							default=mktdate.getDateISO(),
							validators=[custom_DateOfContact])

	POStatus		=	QuerySelectField('Potential Status',
							query_factory=loadPOStatus,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=False)

	AssignBranch	=	QuerySelectField('Assigned To Branch',
							query_factory=loadBranch,
							get_label=lambda a: a.Description,
							allow_blank=False,
							default=lambda:loadBranch(mktuser.getCurrentBranch()))

	AssignTo		= 	QuerySelectField('Assigned To',
							query_factory=loadUser,
							get_label=lambda a: a.ID + " - " + a.DisplayName,
							allow_blank=True,
							blank_text="--None--")

	AssignDate 		=	DateField('Assigned Date')


	NextFollowDate 	=	TextField("Next Follow Up Date")
	Note 			=	TextAreaField('Note')
	UserID 			=	TextField("User ID",
								 	default=lambda:loadUserID())
	

	Mobile1 		=	TextField(requiredlabel(getLanguage("Mobile Phone 1"),'*'),
							 validators=[validators.Required()],
							 description="1-Current Address and Contact")
	Mobile2 		=	TextField(getLanguage("Mobile Phone 2"), description="1-Current Address and Contact")

	Province 		= 	QuerySelectField('Province/Division/State',query_factory=loadProvince, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Province/Division/State--',
							 description="1-Current Address and Contact")

	District 		= 	QuerySelectField(getLanguage('District'),query_factory=loadDistrict, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose District--',
							 description="1-Current Address and Contact")
	Commune 		=	QuerySelectField('Commune/Township',query_factory=loadCommune, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Commune/Township--',
							 description="1-Current Address and Contact")
	Village 		=	QuerySelectField('Town/Village Tracts',query_factory=loadVillage, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Town/Village Tracts--',

							 description="1-Current Address and Contact")
	HouseNo 		=	TextField("House No",
							description="1-Current Address and Contact",
							validators=[validators.Length(max=25)])
	Street 		   =	TextField('Street',
							description="1-Current Address and Contact",
							validators=[validators.Length(max=40)])

	Email 			= 	TextField(getLanguage("Email"), [validators.Optional(),validators.Email(message=u'Invalid email address.')],
							 description="1-Current Address and Contact")

	Block	 		=	SelectField("Block",
							 choices=[('N', 'No'),('Y', 'Yes')],
							 coerce=str,
							 description="3-Block")

	BlockReason 	=	TextAreaField("Block Reason", description="3-Block")

	def validate_Mobile1(form,field):
		Mobile1 = form.Mobile1.data
		if Mobile1:
			if len(Mobile1) < 3:
				raise ValidationError("Invalid mobile phone number. Ex: 012xxxxxx")
			CheckMobileNumber, Msg = mkttool.isMobile(Mobile1)
			if not CheckMobileNumber:
				raise ValidationError(Msg)
	def validate_Mobile2(form,field):
		Mobile1 = form.Mobile2.data
		if Mobile1:
			if len(Mobile1) < 3:
				raise ValidationError("Invalid mobile phone number. Ex: 012xxxxxx")
			CheckMobileNumber, Msg = mkttool.isMobile(Mobile1)
			if not CheckMobileNumber:
				raise ValidationError(Msg)

	def validate_BlockReason(form, field):

		Block 			=	request.form['Block']
		BlockReason 	=	request.form['BlockReason']

		if Block == 'Y':
			if not BlockReason:
				raise ValidationError("This field is required.")
		else:
			if BlockReason:
				raise ValidationError("This field must be blank.")

	def validate_FirstNameEn(form, field):
		Msg 		= 	""
		ListID 		= 	""
		ID 			=	request.form['ID'] if request.method == "POST" else ""
		FirstNameEn =	request.form['FirstNameEn'] if request.method == "POST" else ""
		LastNameEn 	=	request.form['LastNameEn'] if request.method == "POST" else ""
		Gender 		=	request.form['Gender'] if request.method == "POST" else ""
		FullName 	=	"%s %s" %(LastNameEn, FirstNameEn)

		"""
			Exact duplicate customer: (Name, Gender, and DOB) or ID is the same. 
				=> This will not allow customer creation to be saved and suggest to use the existing one.
				Example:
				No 	Name 		Gender 		DOB 			Identification
				----------------------------------------------------------------------------
				1 	Jonh Sena 	Male 		1980-02-10		010123456
				2	Sena Jonh	Male 		1980-02-10		010987654
				3	Jonh Sena 	Male 		1980-09-09		010123456
			
			=> Customer 1 and 2 are duplicated because Name, Gender and DOB are the same
			=> Customer 1 and 3 are duplicated because ID are the same
			----------------------------------------------------------------------------
			=> Customer 2 and 3 are potential duplicated becuase only Name and Gender are the same
			* For potential duplicate customer, see staticmethod IsAcceptOverride()
		"""
		POCustomerObj 	=	MKT_PO_CUSTOMER.query.\
							filter(
									or_(
										and_(
											func.upper(MKT_PO_CUSTOMER.FirstNameEn)==FirstNameEn.upper(),
											func.upper(MKT_PO_CUSTOMER.LastNameEn)==LastNameEn.upper()
										),
										and_(
											func.upper(MKT_PO_CUSTOMER.FirstNameEn)==LastNameEn.upper(),
											func.upper(MKT_PO_CUSTOMER.LastNameEn)==FirstNameEn.upper(),
										)
									),
									MKT_PO_CUSTOMER.Gender == Gender,
									MKT_PO_CUSTOMER.ID != ID,
								).first()

		CustomerObj 	=	MKT_CUSTOMER.query.\
							filter(
									or_(
										and_(
											func.upper(MKT_CUSTOMER.FirstNameEn)==FirstNameEn.upper(),
											func.upper(MKT_CUSTOMER.LastNameEn)==LastNameEn.upper()
										),
										and_(
											func.upper(MKT_CUSTOMER.FirstNameEn)==LastNameEn.upper(),
											func.upper(MKT_CUSTOMER.LastNameEn)==FirstNameEn.upper(),
										)
									),
									MKT_CUSTOMER.Gender == Gender,
								).first()

		if POCustomerObj:
			if POCustomerObj.Block == "N":
				ListID = "<a href='javascript:void(0)' onClick=CustomClickView('%s-%s','%s?ID=%s')>%s</a>"\
							%(PO_CUSTOMER_LINK,POCustomerObj.ID,PO_CUSTOMER_LINK,POCustomerObj.ID,POCustomerObj.ID)

			if ListID:
				
				Br = "<br>" if Msg else ''
				Override 	= 	True
				CustomerInfo= "Potential Customer <b>%s %s, %s</b> is created on <b>%s</b> by User <b>%s</b> at Branch <b>%s</b>."\
							 %(POCustomerObj.LastNameEn, POCustomerObj.FirstNameEn, POCustomerObj.Gender, POCustomerObj.Createdon, POCustomerObj.Inputter, POCustomerObj.Branch)
				Msg 		+= 	'%s The potential customer you are trying to create is already existed. Please check potential customer %s.<br> %s<br>' %(Br, ListID,CustomerInfo)

			ListID = ''
			if POCustomerObj.Block == "Y":
				ListID += "<a href='javascript:void(0)' onClick=CustomClickView('%s-%s','%s?ID=%s')>%s</a>"\
							%(PO_CUSTOMER_LINK,POCustomerObj.ID,PO_CUSTOMER_LINK,POCustomerObj.ID,POCustomerObj.ID)

			if ListID:
				Override 	= 	True
				CustomerInfo= "Potential Customer <b>%s %s, %s</b> is created on <b>%s</b> by User <b>%s</b> at Branch <b>%s</b>."\
							 %(POCustomerObj.LastNameEn, POCustomerObj.FirstNameEn, POCustomerObj.Gender, POCustomerObj.Createdon, POCustomerObj.Inputter, POCustomerObj.Branch)
				Msg 		+= 	'The potential customer you are trying to create is existed in potential customer blacklist. Please check potential customer %s.<br> %s<br>' %(ListID,CustomerInfo)


		if CustomerObj:				
			ListID = ''
			if CustomerObj.Block == "Y":
				ListID += '<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a> '\
					 %(CUSTOMER_LINK,CustomerObj.ID,CUSTOMER_LINK,CustomerObj.ID,CustomerObj.ID)

			if ListID:
				Override 	= 	True
				CustomerInfo= "Customer <b>%s %s, %s</b> is created on <b>%s</b> by User <b>%s</b> at Branch <b>%s</b>."\
							 %(CustomerObj.LastNameEn, CustomerObj.FirstNameEn, CustomerObj.Gender, CustomerObj.Createdon, CustomerObj.Inputter, CustomerObj.Branch)
				Msg 		+= 	'The potential customer you are trying to create is existed in customer blacklist. Please check customer %s.<br> %s<br>' %(ListID,CustomerInfo)

		#Validate English only
		FirstNameEn 		= field.data 
		if not checkName(FirstNameEn):
			Msg += 'Please enter English character only.'

		if Msg:
			raise ValidationError(Markup(Msg))

	def validate_LastNameEn(form, field):
		LastNameEn = field.data.strip()
		if not checkName(LastNameEn):
			raise ValidationError('Please enter English character only')

	# def validate_FirstNameKh(form, field):
	# 	FirstNameKh = field.data.strip()
	# 	if FirstNameKh:
	# 		if checkName(FirstNameKh):
	# 			raise ValidationError('Please enter character only')

	# def validate_LastNameKh(form, field):
	# 	LastNameKh = field.data.strip()
	# 	if LastNameKh:
	# 		if checkName(LastNameKh):
	# 			raise ValidationError('Please enter character only')

	def validate_AssignDate(form, field):
		AssignTo = form.AssignTo.data
		if not AssignTo:
			if not field.data:
				field.errors[:]=''

	def validate_AssignDate(form, field):
		AssignTo = form.AssignTo.data
		if not AssignTo:
			if not field.data:
				field.errors[:]=''

	@staticmethod
	def listField():
		Fields = ["ID", "LastNameEn", "FirstNameEn", "LastNameKh", "FirstNameKh",
				  "LoanAmount","ProductInterest","POStatus",
				  "HouseNo", "Street", "Mobile1", "Mobile2","Email","Branch"]
		return Fields

	@staticmethod
	def setVisible():
		return ['NextFollowDate','MarketingOfficer','ExistingClient','PriceOfProperty','UserID']

	@staticmethod
	def setDisable():
		return ['POStatus']

	@staticmethod
	def moneyField():
		return [("PriceOfProperty", "Currency"), ("LoanAmount", "Currency")]


	@staticmethod
	def formatMoney(): # for listField 
		return ["PriceOfProperty","LoanAmount"],"Currency"

	@staticmethod
	def setWidth():
		control_list = [
						("HouseNo", len3),
						("DateOfContact",len3),
						("Currency",len2),
						("Gender",len2)
						]
		return control_list
		
	@staticmethod
	def hotSelectField():
		hotfield=[]

	
		fielddisplay="District,#Commune, #Village"
		varname="ProvinceID:$('#Province').val()"
		fun=["Province", varname ,fielddisplay, "/Morakot/DistrictID", "click"]
		hotfield.append(fun)

		fielddisplay="Commune, #Village"
		varname="DistrictID:$('#District').val()"
		fun=["District", varname ,fielddisplay, "/Morakot/CommuneID", "click"]
		hotfield.append(fun)

		fielddisplay="Village"
		varname="CommuneID:$('#Commune').val()"
		fun=["Commune", varname ,fielddisplay, "/Morakot/VillageID", "click"]
		hotfield.append(fun)
	
		return hotfield

	@staticmethod
	def hotField():
		hotfield=[]

	
		fielddisplay="$('#POStatus').select2('data', {'id':data.POStatus,'text':data.POStatusDec});"
		fielddisplay +="$('#AssignDate').val(data.AssignedDate)"
		varname="AssignTo:$('#AssignTo').val()"
		fun=["AssignTo", varname ,fielddisplay, "/Morakot/ChangePOStatus", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def redirectAfterInsert():
		try:

			PotentialCustomer 	= request.form["ID"]
			# POStatus 			= request.form["POStatus"]
			# AssignTo 			= request.form["AssignTo"]
			Block 				= request.form["Block"]

			POCustomerObj 		= MKT_PO_CUSTOMER.query.get(PotentialCustomer)
			RejectedObj   		= MKT_REJECTED.query.filter(MKT_REJECTED.CustomerID==PotentialCustomer).first()
			
			Rejected 	  		= RejectedObj.Rejected if RejectedObj else "N"
			POCustomerStatusObj = MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.Closed=='Yes',MKT_PO_CUSTOMER_STATUS.Deal=='No').first()
			Data 				= {}
			if POCustomerObj:
				#update Branch based on AssignBranch
				AssignBranch	= POCustomerObj.AssignBranch
				Branch 			= POCustomerObj.Branch
				if AssignBranch != Branch:
					Data.update({'Branch': AssignBranch})

				if Rejected == 'N' and Block == 'N':
					pass
				else:
					Data.update({'POStatus': POCustomerStatusObj.ID})

				if Data:
					Curr = 	int(POCustomerObj.Curr)+1
					Data.update({'Curr' 	:	str(Curr),
							'Inputter' 		:	mktuser.getUser().ID,
							'Createdon' 	: 	mktdate.getDateTimeNow(),
							'Authorizer' 	: 	mktuser.getUser().ID,
							'Authorizeon'	: 	mktdate.getDateTimeNow()})

					mktaudit.moveAUTHtoHIST(MKT_PO_CUSTOMER,MKT_PO_CUSTOMER_HIST,PotentialCustomer)
					mktdb.updateRecord(MKT_PO_CUSTOMER, [MKT_PO_CUSTOMER.ID == PotentialCustomer], Data)
					db.session.commit()	
			return None

		except Exception, e:
			raise
			flash(msg_error+'%s'%e)
			db.session.rollback()
			return False

	# @staticmethod
	# def IsAcceptOverride():

	# 	Override 	= False
	# 	Msg 		= ""
	# 	ID 			= request.form['ID']
	# 	Mobile1 	= request.form['Mobile1']
	# 	Mobile2     = request.form['Mobile2'] 
	# 	MobileList  = [("Mobile Phone 1", Mobile1),("Mobile Phone 2",Mobile2)]

	# 	for item in MobileList:
	# 		MobileLabel  = item[0]
	# 		MobileNumber = item[1]
	# 		if MobileNumber != "":
	# 			ListID = ""
	# 			POCustomerObj = MKT_PO_CUSTOMER.query.\
	# 											filter(or_(MKT_PO_CUSTOMER.Mobile1==MobileNumber,
	# 														 MKT_PO_CUSTOMER.Mobile2==MobileNumber)).\
	# 											filter(MKT_PO_CUSTOMER.ID!=ID)

	# 			CustomerObj = MKT_CUSTOMER.query.\
	# 											filter(or_(MKT_CUSTOMER.Mobile1==MobileNumber,
	# 														 MKT_CUSTOMER.Mobile2==MobileNumber))
	# 			if POCustomerObj.count() > 0:
	# 				for row in POCustomerObj:
	# 					ListID += "%s %s" % ('<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a>' %(PO_CUSTOMER_LINK,row.ID,PO_CUSTOMER_LINK,row.ID,row.ID), " ")
	# 				Override = True						

	# 			if CustomerObj.count() > 0:
					
	# 				for row in CustomerObj:
	# 					ListID += "%s %s" % ('<a href="javascript:void(0)" onClick=CustomClickView("%s-%s","%s?ID=%s")>%s</a>' %(CUSTOMER_LINK,row.ID,CUSTOMER_LINK,row.ID,row.ID), " ")
	# 				Override = True

	# 			if ListID:

	# 				Msg+="<span class='text-bold'>%s:</span> %s is already exist in %s <br>" % (MobileLabel,MobileNumber, ListID)

	# 	Msg += "Do you want to procceed?"
	# 	return Override, Msg
