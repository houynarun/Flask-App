from wtforms 						import DecimalField, IntegerField
from app.mktcore.wtfimports 		import *
from .models 						import *
import time
from sqlalchemy 					import *

import app.tools.catetool 			as mktcategory
import app.tools.mkttool 			as mkttool

from app.Currency.models 			import MKT_CURRENCY
from app.AssetClass.models 			import MKT_ASSET_CLASS
from app.Category.models 			import MKT_CATEGORY
from app.LoanProduct.models			import MKT_LOAN_PRODUCT

@app.route("/Morakot/ODInterestCat", methods=['GET'])
def ODInterestCat():
	return mktcategory.getCategoryAsSearch()

@app.route("/Morakot/ODPenaltyCat", methods=['GET'])
def ODPenaltyCat():
	return mktcategory.getCategoryAsSearch()

@app.route("/Morakot/PenaltyRecCat", methods=['GET'])
def PenaltyRecCat():
	return mktcategory.getCategoryAsSearch()

@app.route("/Morakot/ChargeIncCat", methods=['GET'])
def ChargeIncCat():
	return mktcategory.getCategoryAsSearch()

@app.route("/Morakot/ChargeRecCat", methods=['GET'])
def ChargeRecCat():
	return mktcategory.getCategoryAsSearch()

@app.route("/Morakot/RecoveryCat", methods=['GET'])
def RecoveryCat():
	return mktcategory.getCategoryAsSearch()

def checkPattern(Input):
	try:
		Partern = ['PE', 'CH', 'IN', 'PR']
		Input = Input
		Error = ""
		if Input:
			Input = Input.split()
			for item in Input:
				if item not in Partern:
					Error += " %s" %item

		return Error

	except:
		raise

def checkCurrecny(Input):
	try:
		Error = ""

		CurrencyObj = MKT_CURRENCY.query.all()
		Currency = []

		if CurrencyObj:
			for row in CurrencyObj:
				Currency.append(row.ID)

		if Input:
			Input = Input.split()
			for item in Input:
				if item[:3] not in Currency:
					Error += " %s" %item[:3]

		return Error

	except Exception, e:
		raise

def checkNumber(Input):
	try:
		
		Error = ""

		if Input:
			Input = Input.split()
			for item in Input:
				try:
					float(item[3:])
				except:
					Error += "The value must be currency and number for penalty rate %s. " %item[:3]

		return Error

	except Exception, e:
		raise

def checkMaxRate(Input, Type):
	try:

		Error = ""
		if Type == 'P':
			if Input:
				Input = Input.split()
				for item in Input:
					Value = float(item[3:])
					if Value > 100:
						Error += "Percent number must smaller than 100 for penalty rate %s. " %item[:3]

		return Error

	except:
		raise

def loanAssetClass():
	return MKT_ASSET_CLASS.query.order_by(MKT_ASSET_CLASS.ID.asc())

def loadCategory():
	return MKT_CATEGORY.query

class FRM_PD_PARAM(exform):

	PRE 		= TextField(requiredlabel("Pre Grace", "*"), [validators.Required()])
	GRA 		= TextField(requiredlabel("Grace", "*"), [validators.Required()])
	PDO 		= TextField(requiredlabel("Past Due", "*"), [validators.Required()])
	NAB 		= TextField(requiredlabel("Penalty Calculate Day", "*"), [validators.Required()])
	# WOF 		= IntegerField(requiredlabel("Write-off", "*"), [validators.Required()])
	# FWOF 		= IntegerField(requiredlabel("Financial Write-off", "*"), [validators.Required()])

	RepOrder 	= TextField(requiredlabel("Repayment Order", "*"), [validators.Required(), validators.Length(max=15)], default=u'PE CH IN PR')
	FWOFRepOrder = TextField(requiredlabel("FWOF Rep Order", "*"), [validators.Required(), validators.Length(max=15)], default=u'PR IN CH PE')

	PenType 	= SelectField("Penalty Type",
					choices=[('P', 'Percentage Base'), ('F', 'Fixed Base'), ('I', 'Interest Rate Base'), ("C","Custom")],
					default='P'
				)

	PenaltyRate = TextField("Penalty Rate", [validators.Optional()])
	PenCalBase 	= TextField("Penalty Cal Base", default=u'PR IN')

	PenOption  	= SelectField("Penalty Option",
					choices=[('__None', '--None--'), ('A', 'Automatic by System'), ('M', 'Manual')],
					default='__None',
					validators=[validators.Required()]
				)

	SuspPLNAB 	= SelectField(requiredlabel("Suspend PL at NAB", "*"),
					choices=[('Y', 'Yes'), ('N', 'No')],
					default='Y',
					validators=[validators.Required()]
				)

	RevPLNAB  	= SelectField(requiredlabel("Reverse PL at NAB", "*"),
					choices=[('Y', 'Yes'), ('N', 'No')],
					default='Y',
					validators=[validators.Required()]
				)

	SuspendDrCat 	= 	QuerySelectField("Suspend Debit Cat",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)

	SuspendCrCat 	= 	QuerySelectField("Suspend Credit Cat",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)

	RepMethod 		= IntegerField(requiredlabel("Repayment Method", "*"), [validators.Required()])
	
	ODPenaltyCat 	= 	QuerySelectField("Penalty Income Cat",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)

	PenaltyRecCat 	= 	QuerySelectField("Penalty Receivable Cat",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)

	PenaltyAmend 	= 	QuerySelectField("Penalty Amendment",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)

	PenaltyTerminate= 	QuerySelectField("Penalty Terminate",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)
	PenaltySuspend= 	QuerySelectField("Penalty Suspend",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)

	ChargeIncCat 	= 	QuerySelectField("Charge Income Cat",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)

	ChargeRecCat 	= 	QuerySelectField("Charge Accr Receivable Cat",
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)

	RecoveryCat 	= 	QuerySelectField(requiredlabel("Loan Recovery Cat", "*"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)

	WOFClass 		= 	QuerySelectField(requiredlabel("Loan Write-off Class", "*"),
							query_factory=loanAssetClass,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)

	SocialLoanWriteOff 	= 	QuerySelectField("Social Loan Write-off Cat",
								query_factory=loadCategory,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--'
							)

	PreTermination 		= 	TextField("Pre-Termination Calculate Base")
	AmendmentPenalty	= 	TextField("Amendment Penalty Calculate Base")
	# A = Number of Interest, B = Percentage of Outstanding, C = Percentage of Disbursed

	def validate_PRE(form, field):

		PRE_VAL = form.PRE.data

		try:

			PRE_VAL = int(PRE_VAL)

		except:
			raise ValidationError("This field must be in numeric format.")
		

	def validate_GRA(form, field):

		GRA_VAL = form.GRA.data

		try:
		
			GRA_VAL = int(GRA_VAL)

		except:
			raise ValidationError("This field must be in numeric format.")


	def validate_PDO(form, field):
		try:
			PDO = int(form.PDO.data)
		except:
			raise ValidationError("This field must be in numeric format.")

		PDO 	= int(form.PDO.data)
		GRA 	= int(form.GRA.data)
		PRE 	= int(form.PRE.data)
		if PDO < GRA:
			raise ValidationError("Past due must greater than or equal to grace.")
		
	def validate_NAB(form, field):

		PDO_VAL = form.PDO.data
		NAB_VAL = form.NAB.data

		try:
		
			NAB_VAL = int(NAB_VAL)

		except:
			raise ValidationError("This field must be in numeric format.")
		if PDO_VAL and NAB_VAL:
			if int(NAB_VAL) <= int(PDO_VAL):
				raise ValidationError("None accrued basis must bigger than past due.")


	def validate_RepOrder(form, field):
		try:
			Input 		= form.RepOrder.data
			Error 		= checkPattern(Input)
			if Error:
				raise ValidationError("Repayment order %s is incorrect, Please check with PE CH IN PR." %Error)

		except:
			raise

	def validate_FWOFRepOrder(form, field):
		try:

			Input = form.FWOFRepOrder.data
			Error = checkPattern(Input)

			if Error:
				raise ValidationError("FWOF rep order %s is incorrect, Please check with PE CH IN PR." %Error)

		except:
			raise

	def validate_RevPLNAB(form, field):
		try:
			SuspPLNAB 	= request.form['SuspPLNAB']
			RevPLNAB 	= request.form['RevPLNAB']
			if RevPLNAB.upper() == "Y":
				if SuspPLNAB.upper() != "Y":
					raise ValidationError("Please change suspend PL at NAB to 'Yes' if you want this field 'Yes'.")

		except:
			raise

	def validate_SuspendDrCat(form, field):
		try:

			RevPLNAB = request.form['RevPLNAB']
			if RevPLNAB.upper() == "Y":
				SuspendDrCat = request.form['SuspendDrCat']
				if SuspendDrCat == "__None" or SuspendDrCat == "":
					raise ValidationError("Please select suspend debit cat.")

		except:
			raise

	def validate_SuspendCrCat(form, field):
		try:

			RevPLNAB = request.form['RevPLNAB']
			if RevPLNAB.upper() == "Y":
				SuspendCrCat = request.form['SuspendCrCat']
				if SuspendCrCat == "__None" or SuspendCrCat == "":
					raise ValidationError("Please select suspend credit cat.")

		except:
			raise

	def validate_PenCalBase(form, field):
		try:

			PenCalBase 	= form.PenCalBase.data
			Error 		= checkPattern(PenCalBase)
			RepOrder 	= form.RepOrder.data

			if Error:
				raise ValidationError("Penalty cal base %s is incorrect, Please check with PE CH IN PR." %Error)
			if RepOrder:
				ListRepOrder 	= RepOrder.split()
				if 'PE' in ListRepOrder:
					if not PenCalBase:
						raise ValidationError('This field is requried.')
		except:
			raise

	def validate_PenaltyRate(form, field):
		try:
			Type = request.form['PenType']
			Input = form.PenaltyRate.data
			if Type != "C": #Custom Type

				Error = checkMaxRate(Input, Type)
				if Error:
					raise ValidationError(Error)

				Error = checkCurrecny(Input)
				if Error:
					raise ValidationError("Currency %s not found." %Error)

				Error = checkNumber(Input)
				if Error:
					raise ValidationError(Error)

		except Exception, e:
			raise

	def validate_ODPenaltyCat(form, field):
		ODPenaltyCat 	=	request.form['ODPenaltyCat']
		RepOrder 		=	request.form['RepOrder']

		if 'PE' in RepOrder:

			if ODPenaltyCat == "" or ODPenaltyCat == "__None":
				raise ValidationError("This field is requried.")

	def validate_PreTermination(form, field):
		PreTermination 	=	request.form['PreTermination']
		StrVal 			=	PreTermination.split()
		RepOrder 		=	request.form['RepOrder']

		if 'PE' not in RepOrder:
			raise ValidationError("PE param is require if Pre-Termination field not blank")

		if PreTermination:
			if len(StrVal) == 3 and StrVal[0] != "CUSTOM":
				
				if not mkttool.isInteger(StrVal[0]):  
					if not (StrVal[0][-1] == 'I' and mkttool.isInteger(StrVal[0][:-1])) and (StrVal[1] != "D"):
						raise ValidationError("First value must be in numeric format or numeric + I (Ex. 5I).")

					if StrVal[1] not in ['A', 'B', 'C','D', 'E', 'F']:
						raise ValidationError("Second value must be A, B, C, D, E or F.")
				try:
					if StrVal[1] != "D":
						float(StrVal[2])
				except Exception, e:
					raise ValidationError("Third value must be in numeric format.")

			elif StrVal and StrVal[0] != "CUSTOM":
				raise ValidationError("Wrong format. ex: 3 A 3 or 3 B 3")

	def validate_AmendmentPenalty(form, field):
		AmendmentPenalty 	=	request.form['AmendmentPenalty']
		StrVal 				=	AmendmentPenalty.split()
		if AmendmentPenalty:
			if len(StrVal) == 3 and StrVal[0] != "CUSTOM":
				
				if not mkttool.isInteger(StrVal[0]):  
					if not (StrVal[0][-1] == 'I' and mkttool.isInteger(StrVal[0][:-1])):
						raise ValidationError("First value must be in numeric format or numeric + I (Ex. 5I).")

				if StrVal[1] not in ['A', 'B', 'C','D', 'E','F']:
					raise ValidationError("Second value must be A, B, C, D or E.")

				# try:
				# 	print "StrVal[2]:",StrVal[2]
				# 	float(StrVal[2])
				# except Exception, e:
				# 	raise ValidationError("Third value must be in numeric format.")

			elif StrVal and StrVal[0] != "CUSTOM":
				raise ValidationError("Wrong format. ex: 3 A 3 or 3 B 3")

	@staticmethod
	def setWidth():
		return [("SuspPLNAB", len1), ("RevPLNAB", len1), ("RepMethod", len1),
				("RepOrder", len1), ("FWOFRepOrder", len1), ("PenCalBase", len1),
				("PenType", len2), ("PRE", len1), ("GRA", len1), ("PDO", len1),
				("NAB", len1), ("WOF", len1), ("FWOF", len1)]

	@staticmethod
	def listField():

		Fields = ["ID", "PRE", "GRA", "PDO", "NAB",
				  "RepOrder", "FWOFRepOrder"]
		return Fields

	@staticmethod
	def beforeInsert():
		try:
			ID = request.form['ID']
			List = []
			LoanObj = MKT_LOAN_PRODUCT.query.all()
			for row in LoanObj:
				ProductID = row.ID
				List.append(ProductID)
			if ID in List or ID=="SYSTEM":
				return True
			else:
		 		raise ValidationError("The ID : %s is not Loan Product"%ID)
		 		return False
		except:
			raise
