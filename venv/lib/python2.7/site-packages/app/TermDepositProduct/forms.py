from flask 							import g, flash
from app.mktcore.wtfimports 		import *
from .models 						import *
import time

from app.PeriodicInterest.models 	import MKT_PER_INTEREST
from app.Tax.models 				import MKT_TAX
from app.LoanRule.models 			import MKT_LOAN_RULE
from app.Category.models 			import MKT_CATEGORY

def loadPeriodicInterest():
	return MKT_PER_INTEREST.query

def loadTax():
	return MKT_TAX.query

def loadRule():
	return MKT_LOAN_RULE.query

def loadCategory():
	return MKT_CATEGORY.query

class FRM_TERM_DEPOSIT_PRODUCT(exform):

	Description 	=	TextField(requiredlabel("Description", "*"), [validators.Required()])

	RollOver 		=	SelectField(
							requiredlabel("Roll-over", "*"),
							choices=[
									  ('', '--None--'),
									  ('N', 'No'),
									  ('Y', 'Yes')
									],
							validators=[validators.Required()]
						)

	RollOverOption 	=	SelectField(
							"Roll-over Option",
							choices=[
									  ('', '--None--'),
									  ('P', 'Principal Only'),
									  ('IP', 'Interest Paid and Principal'),
									  ('BP', 'Account Balance and Principal')
									]
						)

	IntPostingFreq 	=	SelectField(
							requiredlabel("Int Posting Frequency", "*"),
							choices=[
									  ('', '--None--'),
									  ('1', '1. Weekly'),
									  ('2', '2. Monthly'),
									  ('3', '3. Quarterly'),
									  ('4', '4. Yearly')
									],
							validators=[validators.Required()]
						)

	InterestDayBasis 	=	SelectField(requiredlabel('Interest Day Basis', '*'),
								choices=[('', '--None--'),
										 ('1', '360/360'),
										 ('2', '365/360'),
										 ('3', '365/365')],
								coerce=str,
								validators=[validators.Required()]
							)

	InterestKey 	= 	QuerySelectField(requiredlabel('Interest Key', '*'),
	                        query_factory=loadPeriodicInterest,
	                        get_label=u'Description',
	                        allow_blank=True,
	                        blank_text=u'--None--',
	                        validators=[validators.Required()]
                        )

	TARole 			= 	QuerySelectField('Role',
	                        query_factory=loadRule,
	                        get_label=u'Description',
	                        allow_blank=True,
	                        blank_text=u'--None--'
                        )

	Tax 			= 	QuerySelectField('Tax',
	                        query_factory=loadTax,
	                        get_label=u'Description',
	                        allow_blank=True,
	                        blank_text=u'--None--'
                        )

	AIPCat 			= 	QuerySelectField(requiredlabel('Accr Int Payables Cat', '*'),
	                        query_factory=loadCategory,
	                        get_label=lambda a: a.ID + " - " + a.Description,
	                        allow_blank=True,
	                        blank_text=u'--None--',
	                        validators=[validators.Required()]
                        )

	IECat 			= 	QuerySelectField(requiredlabel('Int Expenses Cat', '*'),
	                        query_factory=loadCategory,
	                        get_label=lambda a: a.ID + " - " + a.Description,
	                        allow_blank=True,
	                        blank_text=u'--None--',
	                        validators=[validators.Required()]
                        )

	FixRate 		=	SelectField(
							"Fix/Rate",
							choices=[
									  ('', '--None--'),
									  ('F', 'Fix'),
									  ('R', 'Rate')
									],
							description="1-Pre-closing Charge"
						)
	PreClosingCharge=	TextField("Pre-closing Charge", default='0', description="1-Pre-closing Charge")
	
	def validate_RollOverOption(form, field):

		RollOver 		=	request.form['RollOver']

		if RollOver == 'Y':

			RollOverOption = request.form['RollOverOption']

			if not RollOverOption:

				raise ValidationError("This field is required.")

	def validate_PreClosingCharge(form, field):

		PreClosingCharge = request.form['PreClosingCharge']

		if PreClosingCharge:

			try:
				float(PreClosingCharge)
			except:
				raise ValidationError("This field must be in numeric format.")