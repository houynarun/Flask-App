from app.mktcore.wtfimports import *
from .models import *
import time
from flask 						import Markup,flash
from sqlalchemy 				import *
from decimal 					import *

from app.Transaction.models 	import MKT_TRANSACTION
from app.Currency.models 		import MKT_CURRENCY
from app.Category.models 		import MKT_CATEGORY

import app.tools.mktdate 		as mktdate
import app.tools.mktaudit 		as mktaudit
import app.tools.mktaccounting 	as mktaccounting
import app.tools.mktmoney 		as mktmoney
import app.tools.mktdb 			as mktdb
import app.tools.mktteller 		as mktteller
import app.tools.mktsetting 	as mktsetting
import app.tools.mktfundtransfer 	as mktfundtransfer

def loadTransaction():
	return MKT_TRANSACTION.query

def loadCategory():

	JOURNAL_ENTRY_EXCLUDED = mktsetting.getExcludedCategories()
	JOURNAL_ENTRY_EXCLUDED.extend(mktteller.getExcludeCashCategory())
	return 	MKT_CATEGORY.query.\
			filter(~MKT_CATEGORY.ID.in_(JOURNAL_ENTRY_EXCLUDED)).\
			all()

def loadCurrency():
	return MKT_CURRENCY.query.order_by(asc(MKT_CURRENCY.ID)).all()

def loadDefaultCurrency():
	return mktaccounting.getDefaultCurrency()

class FRM_MULTI_JOURNAL(exform):

	Currency 		= 	QuerySelectField(requiredlabel('Currency', "*"),
										query_factory=loadCurrency,
										get_label=u'ID',
										allow_blank=loadDefaultCurrency(),
										blank_text=u'--None--',
										validators=[validators.Required()]
										)
	Transaction 	= 	QuerySelectField(requiredlabel('Transaction', "*"),
										query_factory=loadTransaction,
										get_label=u'Description',
										allow_blank=True,
										blank_text=u'--Choose Transaction--',
										validators=[validators.Required()]
										)
	TranDate 		= 	DateField(requiredlabel("Transaction Date", "*"), [validators.Required()], default=mktdate.getBankDate)
	Reference 		= 	TextField("Reference",[validators.Length(max=35)])
	Note 			= TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=100),validators.Required()])
	TotalDebitAmount 	= 	TextField("Total Debit Amount",default=0)
	TotalCreditAmount 	= 	TextField("Total Credit Amount",default=0)
	DebitCategory 	=	QuerySelectField(requiredlabel("Debit Category","*"),
										query_factory=loadCategory,
										get_label=lambda a: a.ID + " - " + a.Description,
										allow_blank=True,
										blank_text=u'--None--',
										validators=[validators.Required()],
										description="1-Debit"
										)
	DebitAmount 	= 	TextField(requiredlabel("Amount","*"),[validators.Required()],description="1-Debit",default=0)
	CreditCategory 	=	QuerySelectField(requiredlabel("Credit Category","*"),
										query_factory=loadCategory,
										get_label=lambda a: a.ID + " - " + a.Description,
										allow_blank=True,
										blank_text=u'--None--',
										validators=[validators.Required()],
										description="2-Credit"
										)
	CreditAmount 	= 	TextField(requiredlabel("Amount","*"),[validators.Required()],description="2-Credit",default=0)

	def validate_TranDate(form, field):

		TranDate 	= request.form['TranDate']
		try:
			CheckFormatDate = mktdate.isDateISO(TranDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		# raise ValidationError(TranDate)
		if Check:

			raise ValidationError(Check)

	def validate_DebitCategory(form,field):

		MsgError 			= []
		ListCategory 		= []
		Audit 				= mktaudit.getAuditrail()
		Branch 				= Audit['Branch']
		args 				= request.form
		Currency 			= request.form['Currency']
		CurrencyObj 		= mktmoney.getCurrencyObj(Currency)
		CategoryObj 		= MKT_CATEGORY.query
		TranDate 			= request.form['TranDate']

		ListDebitCategory 	= [item for item in args if "DebitCategory" in item]
		ListDebitAmount	 	= [item for item in args if "DebitAmount" in item]	
		ListCreditCategory 	= [item for item in args if "CreditCategory" in item]



		ListDebitCategory.sort()
		ListDebitAmount.sort()
		ListCreditCategory.sort()

		TotalDebit 	= len(ListDebitCategory)
		TotalCredit = len(ListCreditCategory)

		# DebitCategory
		for index in range(0,TotalDebit):

			# Check Balance Category
			Category 	= args[ListDebitCategory[index]]
			Amount 		= Decimal(args[ListDebitAmount[index]])
			Balance 	= mktaccounting.getValidateConsolBalance(Amount, Category, Currency, Branch, 'Dr',TranDate=TranDate)
			ListCategory.append(Category)

			if Balance[0] == False:
				
				CategoryFilter 	= CategoryObj.get(Category)
				Description 	= CategoryFilter.Description
				MsgError.append("%s doesn't have sufficient fund. Current balance is %s." %(Description, mktmoney.toMoney(float(Balance[1]),CurrencyObj, 2)))
			
			# Check Amount
			if Amount <= 0:
				MsgError.append("Amount must be more then zero.")
			
			# check if Category Cash at Vault
			if mktteller.isCashCateogry(Category):
				CheckVault = mktteller.isUserVaultAccount()
				if not CheckVault[0]:
					MsgError.append(CheckVault[1])

		for index in range(0,TotalCredit):
			Category 	= args[ListCreditCategory[index]]
			ListCategory.append(Category)

		# Check Duplicate
		Duplicate   		= [x for x in ListCategory if ListCategory.count(x) > 1]
		if Duplicate:
			CategoryFilter 	= CategoryObj.get(Duplicate[0])
			Description 	= CategoryFilter.Description
			raise ValidationError("%s category is duplicated."%Description)

		Msg = ""
		if MsgError:
			for row in MsgError:
				TextMsg = "%s <br/>"%row				
				Msg+=TextMsg
			raise ValidationError(Markup(Msg))


	def validate_CreditCategory(form,field):

		MsgError 			= []
		ListCategory 		= []
		Audit 				= mktaudit.getAuditrail()
		Branch 				= Audit['Branch']
		args 				= request.form
		Currency 			= request.form['Currency']
		CurrencyObj 		= mktmoney.getCurrencyObj(Currency)
		CategoryObj 		= MKT_CATEGORY.query
		TranDate 			= request.form['TranDate']
		
		ListDebitCategory 	= [item for item in args if "DebitCategory" in item]
		ListCreditCategory 	= [item for item in args if "CreditCategory" in item]
		ListCreditAmount 	= [item for item in args if "CreditAmount" in item]

		ListDebitCategory.sort()
		ListCreditCategory.sort()
		ListCreditAmount.sort()

		TotalDebit 	= len(ListDebitCategory)
		TotalCredit = len(ListCreditCategory)

		# CreditCategory
		for index in range(0,TotalCredit):

			# Check Balance Category
			Category 	= args[ListCreditCategory[index]]
			Amount 		= Decimal(args[ListCreditAmount[index]])
			Balance 	= mktaccounting.getValidateConsolBalance(Amount, Category, Currency, Branch, 'Cr',TranDate=TranDate)
			ListCategory.append(Category)

			if Balance[0] == False:
				CategoryFilter 	= CategoryObj.get(Category)
				Description 	= CategoryFilter.Description
				MsgError.append("%s doesn't have sufficient fund. Current balance is %s." %(Description, mktmoney.toMoney(float(Balance[1]),CurrencyObj, 2)))
			
			# Check Amount
			if Amount <= 0:
				MsgError.append("Amount must be more then zero.")
			
			# check if Category Cash at Vault
			if mktteller.isCashCateogry(Category):
				CheckVault = mktteller.isUserVaultAccount()
				if not CheckVault[0]:
					MsgError.append(CheckVault[1])

		for index in range(0,TotalDebit):
			Category 	= args[ListDebitCategory[index]]
			ListCategory.append(Category)

		# Check Duplicate
		Duplicate   		= [x for x in ListCategory if ListCategory.count(x) > 1]
		if Duplicate:
			CategoryFilter 	= CategoryObj.get(Duplicate[0])
			Description 	= CategoryFilter.Description
			raise ValidationError("%s category is duplicated."%Description)

		Msg = ""
		if MsgError:
			for row in MsgError:
				TextMsg = "%s <br/>"%row
				Msg+=TextMsg

			raise ValidationError(Markup(Msg))

	def validate_DebitAmount(form,field):

		args 				= request.form
		Currency 			= request.form['Currency']
		TotalAmountDebit 	= 0
		TotalAmountCredit 	= 0
		CurrencyObj 		= mktmoney.getCurrencyObj(Currency)

		ListDebitAmount	 	= [item for item in args if "DebitAmount" in item]	
		ListCreditAmount 	= [item for item in args if "CreditAmount" in item]

		ListDebitAmount.sort()
		ListCreditAmount.sort()

		ListDebitAmount.remove('TotalDebitAmount')
		ListCreditAmount.remove('TotalCreditAmount')

		TotalDebit 	= len(ListDebitAmount)
		TotalCredit = len(ListCreditAmount)

		# DebitCategory
		for index in range(0,TotalDebit):
			TotalAmountDebit+= Decimal(args[ListDebitAmount[index]])

		# CreditCategory
		for index in range(0,TotalCredit):
			TotalAmountCredit+= Decimal(request.form[ListCreditAmount[index]])


		if TotalAmountDebit > TotalAmountCredit:
			TotalAmountDebit 	= mktmoney.formatNumber(TotalAmountDebit,0)
			TotalAmountCredit 	= mktmoney.formatNumber(TotalAmountCredit,0)
			raise ValidationError('The total amount of debit: %s is more then credit: %s'%(TotalAmountDebit,TotalAmountCredit))

		if TotalAmountDebit < TotalAmountCredit:
			TotalAmountDebit 	= mktmoney.formatNumber(TotalAmountDebit,0)
			TotalAmountCredit 	= mktmoney.formatNumber(TotalAmountCredit,0)
			raise ValidationError('The total amount of credit: %s is more then debit: %s'%(TotalAmountCredit,TotalAmountDebit))

	@staticmethod
	def moneyField():
		return [["DebitAmount","Currency","TotalDebitAmount"],["CreditAmount","Currency","TotalCreditAmount"]]

	@staticmethod
	def formatMoney(): # for listField
		return ["TotalDebitAmount","TotalCreditAmount"],"Currency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def setDisable():
		return [ ('TotalDebitAmount'),('TotalCreditAmount')]


	@staticmethod
	def isMultiValue():
		controls_list=["1-Debit","2-Credit"]
		return controls_list

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def findinHist():
		return True

	@staticmethod
	def beforeInsert():
		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel
		if AuthLevel == 0 :

			ID 				= request.form['ID']
			Currency 		= request.form['Currency']
			Transaction 	= request.form['Transaction']
			TranDate		= request.form['TranDate']
			Reference 		= request.form['Reference']
			Note 			= request.form['Note']
			args 			= request.form


			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			Branch 	 	= Audit['Branch']
			

			# Call function to commit 
			Check = insertMultiJournal(AuthLevel,Inputter,Createdon,Authorizer,Authorizeon,Branch,
								ID,Currency,Transaction,TranDate,Reference,Note,args)
			if not Check[0]:
				flash(msg_error+Check[1])
				return False


		return True

	@staticmethod
	def beforeAuthorize():
		# Call function to Authorize and has two transcations INAU, RNAU 
		AuthLevel 	= g.getNAuthorize
		Check 		= setAuthMultiJournal(AuthLevel,g.formID)
		# print "Check beforeAuthorize:%s"%Check[0]
		if not Check[0] :
			Msg = ""
			for row in Check[1]:
				TextMsg = "%s <br/>"%row
				Msg+=TextMsg
			flash(msg_error+Markup(Msg))
			return False

		else:
			return True

	@staticmethod
	def reverseRec():
		#in case, need to Check condition before reverseRec if Account has balance cannot reverse
		try:
			LabelInau 	= ""
			AuthLevel 	= g.getNAuthorize
			# print 'reverseRec: %s'% AuthLevel
			ID 			= g.formID
			Check 		= mktteller.validationReverse(MKT_MULTI_JOURNAL,MKT_MULTI_JOURNAL_INAU,ID)
		
			if not Check[0]:

				CheckReverse = setReverseMultiJournal(AuthLevel,ID)
				if CheckReverse[0]:
					if AuthLevel==1:
						LabelInau = "in INAU"
					db.session.commit()
					return True,"The record reversed successfully, record id: %sR %s"%(ID,LabelInau)
				else:
					# Fail
					db.session.rollback()
					return True,msg_error+"%s"%CheckReverse[1]
			else:
				return Check

		except Exception, e:
			db.session.rollback()
			return True,msg_error+"%s"%e

def setReverseMultiJournal(AuthLevel,ID):
	rowRecord 	= {}
	IDReverse 	= str(ID)+'R'

	if AuthLevel == 1:
		MultiTable 		= MKT_MULTI_JOURNAL_INAU
		DebitTable 		= MKT_MULTI_DEBIT_INAU
		CreditTable 	= MKT_MULTI_CREDIT_INAU
		Status			= "INAU"
		Curr 			= "-1"
		Authorizer 		= ""
		Authorizeon 	= ""
	else:
		MultiTable 		= MKT_MULTI_JOURNAL
		DebitTable 		= MKT_MULTI_DEBIT
		CreditTable 	= MKT_MULTI_CREDIT
		Status 			= "AUTH"
		Curr 			= "0"
		Audit 			= mktaudit.getAuditrail()
		Inputter 		= Audit['Inputter']
		Createdon 		= Audit['Createdon']
		Authorizer 		= Audit['Authorizer']
		Authorizeon 	= Audit['Authorizeon']
		Branch 			= Audit['Branch']

	MultiObj 		= MKT_MULTI_JOURNAL.query.get(ID)
	if MultiObj:

		
		Currency 	= MultiObj.Currency
		Transaction = MultiObj.Transaction
		TranDate 	= MultiObj.TranDate
		Reference	= MultiObj.Reference
		Note 		= MultiObj.Note
		Module 		= "MJ"

		rowRecord.update({
						'Status' 		: Status,
						'Curr' 			: Curr,
						'Authorizer' 	: Authorizer,
						'Authorizeon' 	: Authorizeon,
						'ID'			: IDReverse,
						'Currency'		: Currency,
						'Transaction' 	: Transaction,
						'TranDate'		: TranDate,
						'Reference'		: Reference,
						'Note' 			: Note
						})

		mktdb.insertTable(MultiTable,rowRecord)
		rowRecord 	= {}

		DebitObj 	= MKT_MULTI_DEBIT.query.filter(MKT_MULTI_DEBIT.ID==ID)
		CreditObj 	= MKT_MULTI_CREDIT.query.filter(MKT_MULTI_CREDIT.ID==ID)

		if CreditObj:
			for row in CreditObj:
				DrCr 		= "Dr"
				Category 	= row.CreditCategory
				Amount 		= row.CreditAmount

				rowRecord.update({
					"Status"		: 	Status,
					"Curr" 			: 	Curr,
					"Authorizer" 	: 	Authorizer,
					"Authorizeon" 	: 	Authorizeon,
					"ID"			:	IDReverse,
					"DebitCategory"	:	Category,
					"DebitAmount"	: 	Amount
					})
				mktdb.insertTable(DebitTable,rowRecord)
				rowRecord = {}

				# if Seft Authorize will post accounting
				if AuthLevel== 0:

					# commit accounting	
					CheckCommit = setCommitAccounting(Status,Curr,Inputter,Createdon,Authorizer,Authorizeon,
												Category,Currency,DrCr,Amount,Module,Transaction,TranDate,IDReverse,Note,Branch)
					if not CheckCommit[0]:
						db.session.rollback()
						return False,CheckCommit[1]

		if DebitObj:
			for row in DebitObj:
				DrCr 		= "Cr"
				Category 	= row.DebitCategory
				Amount 		= row.DebitAmount
				rowRecord.update({
					"Status"		: 	Status,
					"Curr" 			: 	Curr,
					"Authorizer" 	: 	Authorizer,
					"Authorizeon" 	: 	Authorizeon,
					"ID"			:	IDReverse,
					"CreditCategory":	Category,
					"CreditAmount"	: 	Amount
					})
				mktdb.insertTable(CreditTable,rowRecord)
				rowRecord = {}

				# if Seft Authorize will post accounting
				if AuthLevel== 0:

					# commit accounting	
					CheckCommit = setCommitAccounting(Status,Curr,Inputter,Createdon,Authorizer,Authorizeon,
												Category,Currency,DrCr,Amount,Module,Transaction,TranDate,IDReverse,Note,Branch)

					if not CheckCommit[0]:
						db.session.rollback()
						return False,CheckCommit[1]

		# if Seft Authorize will post accounting
		if AuthLevel== 0:				
			#Check after post accounting
			CheckPointObj = mktaccounting.setAccoutningCheckPoint("Direct",ID)
			if not CheckPointObj[0]:
				db.session.rollback()
				return False,CheckPointObj[1]

		return True,""
	else:
		return False,"Record not found..."

def setAuthMultiJournal(AuthLevel,ID):

	CategoryObj = MKT_CATEGORY.query
	MsgError 	= []
	rowRecord 	= {}
	MultiObj 		= MKT_MULTI_JOURNAL_INAU.query.get(ID)
	if MultiObj:

		Audit 			= mktaudit.getAuditrail()
		Status 			= MultiObj.Status
		Curr 			= MultiObj.Curr
		Inputter 		= MultiObj.Inputter
		Createdon 		= MultiObj.Createdon
		Branch 			= MultiObj.Branch
		Authorizer 		= Audit['Authorizer']
		Authorizeon 	= Audit['Authorizeon']
		Currency 		= MultiObj.Currency
		Transaction 	= MultiObj.Transaction
		TranDate 		= MultiObj.TranDate
		Reference		= MultiObj.Reference
		Note 			= MultiObj.Note
		Module  		= "MJ"
		CurrencyObj 	= MKT_CURRENCY.query.get(Currency)		

		DebitObj 		= MKT_MULTI_DEBIT_INAU.query.filter(MKT_MULTI_DEBIT_INAU.ID==ID)
		CreditObj 		= MKT_MULTI_CREDIT_INAU.query.filter(MKT_MULTI_CREDIT_INAU.ID==ID)

		if Inputter == Authorizer:
			return False,[msg_cannot_authorize]

		if DebitObj:
			for row in DebitObj:

				DrCr 		= "Dr"
				Category 	= row.DebitCategory
				Amount 		= row.DebitAmount
				# TranDate 	= row.TranDate

				# Check Balance of Category
				Balance 		= mktaccounting.getValidateConsolBalance(Amount, Category, Currency, Branch, 'Dr',TranDate=TranDate)
				if Balance[0] == False:
					CategoryFilter 	= CategoryObj.get(Category)
					Description 	= CategoryFilter.Description
					MsgError.append("%s doesn't have sufficient fund. Current balance is %s." %(Description, mktmoney.toMoney(float(Balance[1]),CurrencyObj, 2)))

				# commit accounting		
				CheckCommit = setCommitAccounting("AUTH","0",Inputter,Createdon,Authorizer,Authorizeon,
								Category,Currency,DrCr,Amount,Module,Transaction,TranDate,ID,Note,Branch)

				if not CheckCommit[0]:
					db.session.rollback()
					return False,[CheckCommit[1]]

		if CreditObj:
			for row in CreditObj:
				DrCr 		= "Cr"
				Category 	= row.CreditCategory
				Amount 		= row.CreditAmount
				# TranDate 	= row.TranDate

				# Check Balance of Category
				Balance 		= mktaccounting.getValidateConsolBalance(Amount, Category, Currency, Branch, 'Cr',TranDate=TranDate)
				if Balance[0] == False:
					CategoryFilter 	= CategoryObj.get(Category)
					Description 	= CategoryFilter.Description
					MsgError.append("%s doesn't have sufficient fund. Current balance is %s." %(Description, mktmoney.toMoney(float(Balance[1]),CurrencyObj, 2)))
				
				# commit accounting	
				CheckCommit = setCommitAccounting("AUTH","0",Inputter,Createdon,Authorizer,Authorizeon,
								Category,Currency,DrCr,Amount,Module,Transaction,TranDate,ID,Note,Branch)
				if not CheckCommit[0]:
					db.session.rollback()
					return False,[CheckCommit[1]]

		#Check after post accounting
		CheckPointObj = mktaccounting.setAccoutningCheckPoint("Direct",ID)
		if not CheckPointObj[0]:
			db.session.rollback()
			return False,[CheckPointObj[1]]

		if MsgError:
			db.session.rollback()
			return False,MsgError
		else:
			return True,''

def insertMultiJournal(AuthLevel,Inputter,Createdon,Authorizer,Authorizeon,Branch,ID,Currency,Transaction,
						TranDate,Reference,Note,args=""):
	try:
	
		if args:
			# print 'i am here in args'
			ListDebitCategory 	= [item for item in args if "DebitCategory" in item]
			ListDebitAmount	 	= [item for item in args if "DebitAmount" in item]	
			ListCreditCategory 	= [item for item in args if "CreditCategory" in item]
			ListCreditAmount 	= [item for item in args if "CreditAmount" in item]

			ListDebitCategory.sort()
			ListDebitAmount.sort()
			ListCreditCategory.sort()
			ListCreditAmount.sort()
			Module ="MJ"
			
			TotalDebit 	= len(ListDebitCategory)
			TotalCredit = len(ListCreditCategory)

			for index in range(0,TotalDebit):
				Category 	= args[ListDebitCategory[index]]
				DrCr 		= "Dr"
				Amount 		= args[ListDebitAmount[index]]
				# print 'Dr'
				# commit accounting	
				CheckCommit = setCommitAccounting("AUTH","0",Inputter,Createdon,Authorizer,Authorizeon,
								Category,Currency,DrCr,Amount,Module,Transaction,TranDate,ID,Note,Branch)

				if not CheckCommit[0]:
					db.session.rollback()
					return False,CheckCommit[1]

			for index in range(0,TotalCredit):
				Category 	= args[ListCreditCategory[index]]
				DrCr 		= "Cr"
				Amount 		= args[ListCreditAmount[index]]
				# print 'Cr'
				# commit accounting	
				CheckCommit = setCommitAccounting("AUTH","0",Inputter,Createdon,Authorizer,Authorizeon,
								Category,Currency,DrCr,Amount,Module,Transaction,TranDate,ID,Note,Branch)
	
				if not CheckCommit[0]:
					db.session.rollback()
					return False,CheckCommit[1]

			#Check after post accounting
			CheckPointObj = mktaccounting.setAccoutningCheckPoint("Direct",ID)
			if not CheckPointObj[0]:
				db.session.rollback()
				return False,CheckPointObj[1]

			# Successfully		
			return True,''

	except Exception, e:
		db.session.rollback()
		return False,e
	
def setCommitAccounting(Status,Curr,Inputter,Createdon,Authorizer,Authorizeon,
						Category,Currency,DrCr,Amount,Module,Transaction,TranDate,Reference,Note,Branch):

	# Check Cash Category

	if mktteller.isCashCateogry(Category):

		CashObj = mktaccounting.updateCashCateogry(Status,Curr,Inputter,Createdon,Authorizer,Authorizeon,
								Category,Currency,DrCr,Amount,Module,Transaction,TranDate,Reference,Note,Branch)
		# print "after updateCashCateogry"
		# print "CashObj:%s"%CashObj[0]
		if not CashObj[0]:
			db.session.rollback()
			# print "error cash at vault"
			return False,CashObj[1]

	#get Gl key	
	GL_KEYS = mktaccounting.getConsolKey(Category,Currency,"","")

	# commit accounting	
	mktaccounting.postAccounting(		
						Status, 				# Status
						Curr, 					# Curr
						Inputter,				# Inputter
						Createdon, 				# Createdon
						Authorizer,				# Authorizer
						Authorizeon,			# Authorizeon
						"", 					# AEID
						"",						# Account
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Amount, 				# Amount
						Module,					# Module
						Transaction, 			# Transaction
						TranDate, 				# TranDate
						Reference, 				# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# ConsolKey
						"Direct"				# Mode
						)
	# print "add to session"
	# Successfully
	return True,""
