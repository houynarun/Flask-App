from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from .models 					import *
from app.Officer.models 		import *
from app.LoanContract.models 	import *
from app.Currency.models 		import *
from app.Customer.models 		import *
from app.Account.models 		import *
from app.User.models 			import *
from app.CashAccount.models 	import *
from app.GroupLoan.models		import *
from app.VB.models				import *

import app.tools.mktofficer 	as mktofficer
import app.tools.mktmoney 		as mktmoney
import app.tools.user 			as mktuser
import app.tools.mktdate		as mktdate
import app.tools.mktaudit 		as mktaudit
import app.tools.mktfundtransfer 	as mktfundtransfer
import app.tools.mktnotification 	as mktnotification

from collections import defaultdict

def getRecord():
	try:
		result = MKT_LOAN_COLLECTION_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_LOAN_COLLECTION.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict.update({'ContractVB'	:str(row.ContractVB)})
				Dict.update({'VBGroup'		:str(row.VBGroup)})
			return Dict
		else:
			return Dict
	except Exception as e:
		return {}

def loanOfficer():
	CurrentBranch = mktuser.getCurrentBranch()
	OfficerObj 	= MKT_OFFICER.query.filter(MKT_OFFICER.UserID !=None).\
							filter(MKT_OFFICER.UserID !="")
	OfficerID=[]
	UserObj = MKT_USER.query
	CashObj = MKT_CASH_ACCOUNT.query
	for row in OfficerObj:
		UserID = row.UserID
		QueryUser = UserObj.get(UserID)
		if QueryUser:
			CashID 	= QueryUser.CashAccount
			QueryCashAcc = CashObj.get(CashID)
			if QueryCashAcc:
				if QueryCashAcc.Type == "W":
					OfficerID.append(UserID)

	OfficerObj = MKT_OFFICER.query.filter(MKT_OFFICER.UserID.in_(OfficerID))
	return  OfficerObj

def loanCurrency():
	return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())

def loadCurrentDate():
	return 	mktdate.getBankDate()

def loadGroupID():
	if request.method == 'POST':
		VBID = request.form["ContractVB"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_GROUP.query.filter_by(VBID=Record['ContractVB'])
		else:
			return MKT_GROUP.query.filter_by(VBID='').all()
	return MKT_GROUP.query.filter_by(VBID=VBID)

class FRM_LOAN_COLLECTION(exform):

	Officer 			= QuerySelectField(requiredlabel("Officer", "*"),
								query_factory=loanOfficer,
								get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()])
	Currency 			= QuerySelectField(requiredlabel("Currency", "*"),
								query_factory=loanCurrency,
								get_label="ID",
								allow_blank=False,
								blank_text=u'None',
								validators=[validators.Required()])
	OfficerAccount 		= TextField("Officer Account",[validators.Required("Officer dones't has Wallet Account.")])
	OfficerCategory 	= TextField("Officer Category",[validators.Required()])

	ValueDate 			= DateField(requiredlabel("Value Date", "*"), [validators.Required()],default=loadCurrentDate)
	ContractVB 			= RemoteTextField("Village Bank/Centre")
	VBGroup 			= QuerySelectField("Group",
							query_factory=loadGroupID,
							get_label=lambda a: a.ID + " - " + a.GroupName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()])
	TotalCollection 	= TextField("Total Collection",default=0)
	TotalActualAmount 	= TextField("Total ActualAmount",default=0)
	TotalSaving			= TextField("Total Saving",default=0)
	TotalAmount			= TextField("Total Amount",default=0)

	def validate_TranDate(form, field):

		TranDate 	= form.TranDate.data

		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()

		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	# @staticmethod
	# def setVisible():	
	# 	control_list=['OfficerAccount','OfficerCategory','Transaction']
	# 	return control_list

	@staticmethod
	def setWidth():
		control_list = [('OfficerCategory',len2),
						('ValueDate',len3),
						('Currency',len2)]

		return control_list

	@staticmethod
	def setDisable():
		return [ ('OfficerCategory'),('OfficerAccount'),('TotalCollection'),('TotalActualAmount'),('TotalSaving'),('TotalAmount')]

	@staticmethod
	def moneyField():
		return [("TotalDisbursement","Currency"),("TotalActualAmount","Currency")]

	@staticmethod
	def listField():

		Fields = ["ID", "Officer","OfficerAccount", "OfficerCategory", "Currency", "ValueDate","VBGroup", "ContractVB", "TotalDisbursement", "TotalActualAmount" ]

		return Fields, ["DisbursedStatus*EQ*N Y"]
	
	@staticmethod
	def importantField():
		return ["ID","VBGroup","ContractVB"]

	@staticmethod
	def formatMoney(): # for listField
		return ["TotalDisbursement","TotalActualAmount"],"Currency"
		# Amount is the fields to be formatted based on Currency field

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#OfficerAccount').val(data.OfficerAccount);$('#OfficerCategory').val(data.OfficerCategory);"
		varname 		= "Currency:$('#Currency').val(),Officer:$('#Officer').val()"
		fun 			= ["Officer", varname, fielddisplay, "/Morakot/GenerateDisbursementAccount", "change"]
		hotfield.append(fun)


		fielddisplay 	= "$('#OfficerAccount').val(data.OfficerAccount);$('#OfficerCategory').val(data.OfficerCategory);"
		varname 		= "Currency:$('#Currency').val(),Officer:$('#Officer').val()"
		fun 			= ["Currency", varname, fielddisplay, "/Morakot/GenerateDisbursementAccount", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay="VBGroup"
		varname="ContractVB:$('#ContractVB').val()" 
		fun=["ContractVB", varname ,fielddisplay, "/Morakot/GroupID", "click"]
		hotfield.append(fun)

		return hotfield
	
	@staticmethod
	def redirectAfterInsert():

		ID 				= 	request.form['ID']
		ValueDate 		= 	request.form['ValueDate']
		Officer 		= 	request.form['Officer']
		Currency 		= 	request.form['Currency']
		NumOfAuth 		= 	g.getNAuthorize
		Resource 		= 	"INAU"
		event_code 		=	"0"
		
		if NumOfAuth == 0:
			Resource = "AUTH"
			#Add notification
			Status 			= request.form['Status']
			event_code 		= mktnotification.getCode(Status,NumOfAuth)
			notification 	= mktnotification.getSignal(ID,MKT_DISBURSE,Status,event_code,'Disbursement') #ID,Model,Code
			mktnotification.insertNotify(notification)

		else:

			#Add notification
			Status 			= request.form['Status']
			event_code 		= mktnotification.getCode(Status,NumOfAuth)
			notification 	= mktnotification.getSignal(ID,MKT_DISBURSE_INAU,Status,event_code,'Disbursement') #ID,Model,Code
			mktnotification.insertNotify(notification)

		if int(event_code) == 300:
			return "/Morakot/DisbursementSheet/"+ID+"/?Resource="+Resource+"&Officer="+Officer+"&Currency="+Currency+"&ValueDate="+ValueDate + "&Edit=Yes"
		
		return "/Morakot/DisbursementSheet/"+ID+"/?Resource="+Resource+"&Officer="+Officer+"&Currency="+Currency+"&ValueDate="+ValueDate
	
	@staticmethod
	def beforeAuthorize():
		try:
			AuthLevel 	= g.getNAuthorize
			ID 			= g.formID
			Disburse 	= MKT_DISBURSE_INAU.query.get(ID)
			if not Disburse:
				flash(msg_error + "No record to authorize.")
				return False
			else:
				Inputter	= Disburse.Inputter
				Createdon 	= Disburse.Createdon
				Branch 		= Disburse.Branch
				Status 		= Disburse.Status
				if not Status == "RNAU":
					
					# Check Generate Disbursement Sheet
					DisburseDetail = MKT_DISBURSE_DE_INAU.query.\
								  filter(MKT_DISBURSE_DE_INAU.DisburseID == ID).\
								  all()
								  
					if not DisburseDetail:
						flash(msg_error + " Generate Disbursement Sheet not found.")
						return False
						
				CheckAuth 	= mktofficer.setAuthorizeDisbursementSheet(AuthLevel,ID,Status,Inputter,Createdon,Branch)
				if not CheckAuth[0]:
					flash(CheckAuth[1])
				else:
					return True

		except Exception, e:
			flash(msg_error+" %s"%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def beforeDelete():
		try:
			DisburseID = g.formID
			mktaudit.deleteAUTH(MKT_DISBURSE_DE_INAU, DisburseID, "DisburseID")
			return True
		except Exception, e:
			flash(msg_error+" %s"%e)
			return False

	@staticmethod
	def reverseRec():
		try:
			AuthLevel 	= g.getNAuthorize
			ID 			= g.formID
			CheckReverse = mktofficer.setReverseDisbursementSheet(AuthLevel,ID)
			if CheckReverse[0]:

				return True,""
			else:
				flash(msg_error+" %s"%CheckReverse[1])
				return False,""
		except Exception, e:

			flash(msg_error+" %s"%e)
			db.session.rollback()
			return False,""

class FRM_GROUP_COLLECTION_DE(exform):
	LoanCollectionID 	= TextField('Loan Collection')
	LoanID 				= TextField('Loan Contract')
	Currency 			= TextField('Currency',default='MMK')
	Customer 			= TextField('Customer')
	Account 			= TextField('Account')
	Collection 			= TextField('Collection')
	Principal 			= TextField('Principal')
	Interest 			= TextField('Interest')
	Charge 				= TextField('Charge')
	PDPrincipal 		= TextField('PD Principal')
	PDInterest 			= TextField('PD Interest')
	PDCharge 			= TextField('PD Charge')
	Penalty 			= TextField('Penalty')
	TotalAmount 		= TextField('Total Actualmount')
	ActualAmount 		= TextField('Actual Amount')
	SavingAmount 		= TextField('Saving Amount')

	@staticmethod
	def moneyField():
		return [("Principal", "Currency"), ("Interest", "Currency"), ("Charge", "Currency"), ("PDPrincipal", "Currency"), 
				("PDInterest", "Currency"), ("PDCharge", "Currency"), ("Penalty", "Currency"), ("TotalAmount", "Currency"), ("ActualAmount", "Currency"), ("SavingAmount", "Currency")]

	@staticmethod
	def formatMoney():
		return ["Principal", "Interest", "Charge", "PDPrincipal", "PDInterest", "PDCharge","Penalty","TotalAmount","ActualAmount","SavingAmount"], "Currency"

	@staticmethod
	def formReadOnly():
		return "AUTH"
