from app.mktcore.imports 			import *
from flask 							import request,flash,jsonify,redirect
from collections 					import defaultdict

from .models 						import *
from app.Officer.models 			import *
from app.LoanContract.models 		import *
from app.Currency.models 			import *
from app.Customer.models 			import *
from app.Account.models 			import *
from app.FundTransfer.models 		import *
from app.PD.models 					import *
from app.Village.models 			import *
import app.tools.mktloancollection 	as mktloancollection
import app.tools.mktmoney 			as mktmoney
import app.tools.user 				as mktuser
import app.tools.mkttool 			as mkttool
import app.tools.mktaudit 			as mktaudit
#Block import core
import app.mktcore.autoid 			as mktautoid
#Savoeun
from   app.VB.models            import MKT_VB
from   app.VB.models            import MKT_GROUP
import json


def loadCurrency():
	return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())

def loadOfficer():
	CurrentBranch = mktuser.getCurrentBranch()
	OfficerObj 	= MKT_OFFICER.query.filter(MKT_OFFICER.Branch ==CurrentBranch)
	return OfficerObj
#Filter Group of Village Bank/Centre


@app.route('/Morakot/DirectGLoanCollection/<Operation>/Operation/', methods=['GET'])
@app.route('/Morakot/DirectGLoanCollection/<Operation>/Operation/<ID>/', methods=['GET'])
@app.route('/Morakot/DirectGLoanCollection/<Operation>/<ID>/', methods=['GET'])
@app.route('/Morakot/DirectGLoanCollection/', methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def routeDirectGLoanCollection(template="loancollection/direct_loan_collection.html",Operation="",ID=""):

	ErrorMsg 	= []
	FieldRequired=[]
	QueryObj 	= []
	PDObj 		= []
	ResultObj 	= []
	DisburseObj = []
	OfficerObj 	= []
	CurrencyObj = []
	kwargs 		= []
	ListRepID 	= []
	AuditObj 	= []
	VisibleReference 	= False
	NAuthorize 		= 1
	Action 			= "/Morakot/DirectGLoanCollection/"
	li_html 		= ""
	Form 			= ""
	g_id 			= ID
	g_readonly 		= ""
	disabled 		= ""
	classToolbar 	= mkttool.clsToolbar()
	FormName 		= "FRM_LOAN_COLLECTION"
	LoanCollectDict = {}
	VolSavingDict   = {}

	Officer 			= request.args.get("Officer") 						if "Officer" 			in request.args else ""
	Currency 			= request.args.get("Currency") 						if "Currency" 			in request.args else ""
	CollectionDateStart = request.args.get("CollectionDateStart")			if "CollectionDateStart"in request.args else ""
	CollectionDateEnd 	= request.args.get("CollectionDateEnd")				if "CollectionDateEnd" 	in request.args else ""
	OfficerAccount 		= request.args.get("OfficerAccount") 				if "OfficerAccount" 	in request.args else ""
	OfficerCategory 	= request.args.get("OfficerCategory") 				if "OfficerCategory" 	in request.args else ""
	ContractVB 			= request.args.get("ContractVB") 					if "ContractVB" 		in request.args else ""
	VBGroup 			= request.args.get("VBGroup") 						if "VBGroup" 			in request.args else ""
	TotalCollection 	= 0
	TotalActualAmount 	= 0
	TotalSaving 		= 0
	TotalAmounts 		= 0
	AccSetting 	= mktsetting.getAccSetting()
	if AccSetting:
		BaseCurrency = AccSetting.BaseCurrency

	DefaultCurrency = BaseCurrency if BaseCurrency else ''

	CollectionDateRange 	= "%s %s"%(CollectionDateStart,CollectionDateEnd)

	if request.args.get("ID")!=None:
		if Operation == "":
			Operation 	= "Search"

	# Block check access right
	# Overwrite Operation
	if Operation == "Generate":
		getCheck 	= checkAccess ("/Morakot/DirectGLoanCollection/","New")
	else:
		
		getCheck 	= checkAccess ("/Morakot/DirectGLoanCollection/",Operation)
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("DirectGLoanCollection/loan_collection.html",ErrorMsg=ErrorMsg)
	
	#Initialize Object Table
	if Operation == "New":
		g_id 			= mktautoid.getAutoID(FormName) if not ID else ID
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("New")
		if not g_id:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+"invalid ID")
			return render_template(template,Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)	
		
		CheckDuplicateID = mktaudit.isDuplicate(MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,MKT_FUND_TRANSFER_HIST,g_id,[MKT_FUND_TRANSFER.Reference==g_id],[MKT_FUND_TRANSFER_INAU.Reference==g_id])
		if CheckDuplicateID[0]:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(CheckDuplicateID[1])

	elif Operation == "Generate":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("New")

		# Block validation
		if not Officer:
			FieldRequired.append(('Officer','This field is required.'))

		if not Currency:
			FieldRequired.append(('Currency','This field is required.'))

		if not CollectionDateStart:
			FieldRequired.append(('Collection Date','This field is required.'))

		QueryObj 	= mktloancollection.getLoanCollectionSheet(Officer,Currency,CollectionDateRange,ContractVB,VBGroup)
		PDObj 		= mktloancollection.getPDCollectionSheet(Officer,Currency,ContractVB,VBGroup)
		
		LC = []
		VolSavingDict = {}
		for row in QueryObj:
			# Check whether customer have voluntary saving account or not
			VoluntaryAccount = GetVoluntaryAcc(row.ContractCustomerID)
			VolSavingDict.update({str(row.ID): "Y" if VoluntaryAccount else "N"})
			# row.update({"HasVoluntaryAcc": "Y" if VoluntaryAccount else "N"})
			
			TotalCollection += float(row.Principal) + float(row.Interest)+ float(row.Charge)

			if row.LoanID in PDObj.keys() and PDObj[row.LoanID] in LC:
				LC.append(row.LoanID)
				PDObj[row.LoanID].update({'WITHLC':'Y'})
				TotalCollection += float(PDObj[row.LoanID]['PDPrincipal']) + float(PDObj[row.LoanID]['PDInterest']) + float(PDObj[row.LoanID]['PDCharge']) + float(PDObj[row.LoanID]['Penalty'])


		for key, value in PDObj.items():
			VoluntaryAccount = GetVoluntaryAcc(value["ContractCustomerID"])
			VolSavingDict.update({str(value['ID']): "Y" if VoluntaryAccount else "N"})
			
			if value['WITHLC'] == 'N':
				TotalCollection += float(value['PDPrincipal']) + float(value['PDInterest']) + float(value['PDCharge']) + float(value['Penalty'])
		
		TotalCollection		= mktmoney.toMoney(TotalCollection,mktmoney.getCurrencyObj(Currency))
		TotalActualAmount 	= TotalCollection

	elif Operation == "Edit":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("New")
		g_id 			= ID
		DirectGLoanCollectionObj = mktloancollection.getSearchLoanCollection(ID,'Search')
		kwargs 			= DirectGLoanCollectionObj['kwargs']
		ListRepID 		= DirectGLoanCollectionObj['ListRepID']
		
		for RepID in ListRepID :
			VoluntaryAccount = GetVoluntaryAcc(str(kwargs["CustomerID_"+str(RepID)]))
			VolSavingDict.update({str(RepID): "Y" if VoluntaryAccount else "N"})
		AuditObj 		= DirectGLoanCollectionObj['AuditObj']
		TotalSaving 	= DirectGLoanCollectionObj['kwargs']['TotalSaving']
		TotalAmounts 	= DirectGLoanCollectionObj['kwargs']['TotalAmounts']
		
		if AuditObj:
			Status = AuditObj['Status']
			if Status == "AUTH":
				disabled 		= "disabled"
				li_html 		= classToolbar.getToolbarevent("readonly")
		if not kwargs['Officer']:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+" Record not found...")

	elif Operation == "Search":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("Search")
		ID 				= request.args.get('ID')
		g_id 			= ID
		disabled 		= "disabled"
		DirectGLoanCollectionObj = mktloancollection.getSearchLoanCollection(ID,'Search')
		
		kwargs 			= DirectGLoanCollectionObj['kwargs']
		ListRepID 		= DirectGLoanCollectionObj['ListRepID']
		AuditObj 		= DirectGLoanCollectionObj['AuditObj']

		if len(kwargs) == 0 and len(AuditObj) == 0 and len(ListRepID) == 0 :
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+" Record not found...")
		else :
			TotalSaving 	= DirectGLoanCollectionObj['kwargs']['TotalSaving']
			TotalAmounts 	= DirectGLoanCollectionObj['kwargs']['TotalAmounts']
			
			VisibleReference= True
			if AuditObj:
				Status = AuditObj['Status']
				Branch = AuditObj['Branch']
				CurrentBranch = mktuser.getCurrentBranch()
				if Status == "AUTH":
					li_html 		= classToolbar.getToolbarevent("readonly")
				if Branch != CurrentBranch:
					li_html 		= classToolbar.getToolbarevent("readonly")
			if not kwargs['Officer']:
				Form 			= ""
				g_readonly 		= ""
				g_id 			= ""
				li_html 		= classToolbar.getToolbarevent("Cancel")
				flash(msg_warning+" Record not found...")
			
	elif Operation == "Authorize":
		Form 			= ""
		g_readonly 		= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		ObjAuth 		= mktloancollection.setAuthorizeLoanCollection(NAuthorize,ID)
		if not ObjAuth[0]:
			flash(ObjAuth[1])
			db.session.rollback()
		else:
			flash(ObjAuth[1])
			db.session.commit()
		return render_template(template,Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)
	
	elif Operation == "ListLive":
		QueryObj = mktloancollection.getListAuthLoanCollection("ListLive")
		template = "loancollection/loan_collection_list.html"
		return render_template(template,QueryObj=QueryObj,float=float,toMoney=mktmoney.toMoney,getCurrencyObj=mktmoney.getCurrencyObj,setHideEdit=True)

	elif Operation == "ListAuth":
		QueryObj = mktloancollection.getListAuthLoanCollection("ListAuth")
		template = "loancollection/loan_collection_list.html"
		return render_template(template,QueryObj=QueryObj,float=float,toMoney=mktmoney.toMoney,getCurrencyObj=mktmoney.getCurrencyObj,setHideEdit=False)
	
	elif Operation == "ListHist":
		QueryObj = mktloancollection.getListAuthLoanCollection("ListHist")
		template = "loancollection/loan_collection_list.html"
		return render_template(template,QueryObj=QueryObj,float=float,toMoney=mktmoney.toMoney,getCurrencyObj=mktmoney.getCurrencyObj,setHideEdit=False)

	elif Operation == "Delete":
		Form 			= ""
		g_readonly 		= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		ObjDelete 		= mktloancollection.setDeleteDirectGLoanCollection(ID)
		if not ObjDelete[0]:
			flash(ObjDelete[1])
			db.session.rollback()
		else:
			flash(ObjDelete[1])
			db.session.commit()
		return render_template(template,Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)
	
	elif Operation == "Cancel":
		Form 			= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")

	else:
		Form 			= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		

	if request.method == "POST":
		Form 			= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		kwargs			= request.form
		ID 				= kwargs['ID']
		Officer 		= kwargs['Officer']
		Currency 		= kwargs['Currency']
		OfficerAccount 	= kwargs['OfficerAccount']
		OfficerCategory = kwargs['OfficerCategory']
		TotalCollection = kwargs['TotalCollection']
		TotalActualAmount = kwargs['TotalActualAmount']
		ContractVB 		= kwargs['ContractVB']
		VBGroup 		= kwargs['VBGroup']
		TotalSaving 	= kwargs['TotalSaving']
		TotalAmount 	= kwargs['TotalAmounts']

		CollectionDateStart = kwargs['CollectionDateStart']
		CollectionDateEnd 	= kwargs['CollectionDateEnd']
		try :
			TotalActualAmount 	= float(TotalActualAmount.replace(",",""))
			TotalCollection 	= float(TotalCollection.replace(",",""))
			TotalSaving 		= float(TotalSaving.replace(",",""))
			TotalAmount 		= float(TotalAmount.replace(",",""))
		except Exception as e :
			print e
			pass

		CollectionDateRange 	= "%s %s"%(CollectionDateStart,CollectionDateEnd)
		ListLoanID		= [item for item in kwargs if "LoanID" in item]
		ListRepID 		= []
		for row in ListLoanID:
			RepID = row.split('_')[1]
			ListRepID.append(RepID)
		ListLoanID		= [str(kwargs[item]) for item in ListLoanID]
		ListLoanID.sort()
		ListRepID.sort()
		# Block validation
		if not Officer:
			FieldRequired.append(('Officer','This field is required.'))

		if not Currency:
			FieldRequired.append(('Currency','This field is required.'))

		LoanCollectDict = {
					'ID' 				: ID,
					'Officer' 			: Officer,
					'OfficerAccount' 	: OfficerAccount,
					'OfficerCategory' 	: OfficerCategory,
					'Currency' 			: Currency,
					'ValueDate' 		: CollectionDateRange,
					'TotalCollection' 	: TotalCollection,
					'TotalActualAmount' : TotalActualAmount,
					'ContractVB' 		: ContractVB,
					'VBGroup' 			: VBGroup,
					'TotalSaving' 		: TotalSaving,
					'TotalAmount' 		: TotalAmount,
		}
		CheckInsert = mktloancollection.insertLoanCollection(NAuthorize,ID,kwargs,ListRepID,LoanCollectDict)
		if not CheckInsert[0]:
			g_id 			= ID
			Form 			= "New"
			g_readonly		= "readonly"
			li_html 		= classToolbar.getToolbarevent("New")
			FieldRequired.append(('Message',CheckInsert[1]))
			db.session.rollback()
		else:
			db.session.commit()
			db.session.close()
			kwargs = []
			return redirect('/Morakot/DirectGLoanCollection')

		#Reset catch value to jinja
		

	OfficerObj			= loadOfficer().order_by(MKT_OFFICER.ID.asc())#MKT_OFFICER.query.get(Officer)
	CurrencyObj 		= loadCurrency()
	VBObj				= MKT_VB.query
	GroupObj			= MKT_GROUP.query

	# Get Till/Vault Account and Category
	Account = ""
	AccCategory = ""
	AvailableBal = 0
	User = mktuser.getUser()
	CurrentBranch = mktuser.getCurrentBranch()
	FilterCurrency = DefaultCurrency if Currency == "" else Currency
	CashAccountObj = MKT_CASH_ACCOUNT.query.\
					filter(MKT_CASH_ACCOUNT.ID == str(User.CashAccount),
						MKT_CASH_ACCOUNT.CashBranch == CurrentBranch).\
					first()

	if CashAccountObj:
		AccountObj = MKT_ACCOUNT.query.\
						filter(MKT_ACCOUNT.ID.in_(str(CashAccountObj.Account).split()),
								MKT_ACCOUNT.Currency == FilterCurrency).\
						first()
		
		Account = str(AccountObj.ID) if AccountObj else ""
		AccCategory = str(AccountObj.AccCategory) if AccountObj else ""
		AvailableBal = mktmoney.toMoney(float(AccountObj.AvailableBal), CurrencyObj.first(), 0) if AccountObj else 0
	
	return render_template(template,
							Action=Action,
							li_html=li_html,
							Form=Form,
							g_id=g_id,
							g_readonly=g_readonly,
							disabled=disabled,
							ErrorMsg=ErrorMsg,
							FieldRequired=FieldRequired,
							float=float,
							formatNumber=mktmoney.formatNumber,
							toMoney=mktmoney.toMoney,
							getCurrencyObj=mktmoney.getCurrencyObj,
							OfficerObj=OfficerObj,
							CurrencyObj=CurrencyObj,
							Currency=Currency,
							QueryObj=QueryObj,
							kwargs=kwargs,
							ListRepID=ListRepID,
							AuditObj=AuditObj,
							TotalCollection=TotalCollection,
							TotalActualAmount=TotalActualAmount,
							VisibleReference=VisibleReference,
							VBObj=VBObj,
							GroupObj=GroupObj,
							TotalSaving=TotalSaving,
							TotalAmounts=TotalAmounts,
							PDObj=PDObj,
							DefaultCurrency=DefaultCurrency,
							Account=Account,
							AccCategory=AccCategory,
							VolSavingDict=json.dumps(VolSavingDict)
							)


def GetVoluntaryAcc(CustomerID):
	VoluntarySaving = mktsetting.getAppSetting("ACC_PRODUCT_VOLUNTARY")

	VoluntaryAccount = MKT_ACCOUNT.query.\
						filter(MKT_ACCOUNT.AccProduct == VoluntarySaving,
								MKT_ACCOUNT.CustomerList == CustomerID
						).\
						first()

	return VoluntaryAccount