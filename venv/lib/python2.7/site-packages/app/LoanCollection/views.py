from app.mktcore.imports 			import *
from flask 							import request,flash,jsonify,redirect
from collections 					import defaultdict

from .models 						import *
from .forms							import *
from app.Officer.models 			import *
from app.LoanContract.models 		import *
from app.Currency.models 			import *
from app.Customer.models 			import *
from app.Account.models 			import *
from app.FundTransfer.models 		import *
from app.PD.models 					import *
from app.Village.models 			import *
from app.mktcore.autoid 			import *
import app.tools.mktloancollection 	as mktloancollection
import app.tools.mktmoney 			as mktmoney
import app.tools.user 				as mktuser
import app.tools.mkttool 			as mkttool
import app.tools.mktaudit 			as mktaudit
#Block import core
import app.mktcore.autoid 			as mktautoid
import app.tools.grouploan.mktgrouploan	as mktgrouloan
import app.mktcore.formmodel 		as mktformmodel
#Savoeun
from   app.VB.models            import MKT_VB
from   app.VB.models            import MKT_GROUP
from .directcollect 			import *


from .forms import *

registerCRUD(admin, '/LoanCollectionDE', 'LoanCollectionDE', FRM_GROUP_COLLECTION_DE, [MKT_LOAN_COLLECTION_DE])

def loadCurrency():
	return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())

def loadOfficer():
	CurrentBranch = mktuser.getCurrentBranch()
	OfficerObj 	= MKT_OFFICER.query.filter(MKT_OFFICER.Branch ==CurrentBranch)
	return OfficerObj
#check recordlock
def checkRecordLock(ID,FormName):
	obj=MKT_RECORD_LOCK.query.get(ID)
	if obj:
		return False, msg_recordlocked
	else:   
		addlockrecord(ID,FormName)
		return True,""

#Filter Group of Village Bank/Centre
@app.route("/Morakot/GroupFilter", methods=['GET'])
@app.route("/Morakot/API/GroupFilter", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
#for my
def routeGroupFilter():
	ContractVB  		= str(request.args.get('ContractVB'))
	# Officer 		= str(request.args.get('Officer'))
	GroupObj	= MKT_GROUP.query.filter(MKT_GROUP.VBID==ContractVB).all()
	Data = []
	if GroupObj:
		for row in GroupObj:
			Data.append({'value':row.ID , 'label':row.GroupName})
	return jsonify(data = Data)


@app.route('/Morakot/LoanCollection/Officer/', methods=['GET'])
@app.route('/Morakot/API/LoanCollection/Officer/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeAddMoreOfficer():
	
	QueryObj 			= []
	PDObj 				= []
	TotalCollection 	= 0
	TotalActualAmount 	= 0
	CountRow 			= 0
	Officer 			= request.args.get("Officer") 				if "Officer" 			in request.args else ""
	Currency 			= request.args.get("Currency") 				if "Currency" 			in request.args else ""
	StartDate 			= request.args.get("StartDate")				if "StartDate"			in request.args else ""
	EndDate 			= request.args.get("EndDate")				if "EndDate" 			in request.args else ""
	ContractVB 			= request.args.get("ContractVB") 			if "ContractVB" 		in request.args else ""
	VBGroup 			= request.args.get("VBGroup") 				if "VBGroup" 			in request.args else ""
	ListRepID 			= str(request.args.get("ListRepID")).split() 	if "ListRepID" 			in request.args else ""

	#Map CollectionDate
	CollectionDateRange = "%s %s"%(StartDate,EndDate)

	DicResult 	= {}
	RecordRow 	= []
	DisableAdd 	= True

	# Call function to get Query
	QueryObj 	= mktloancollection.getLoanCollectionSheet(Officer,Currency,CollectionDateRange,ContractVB,VBGroup,ListRepID)
	PDObj 		= mktloancollection.getPDCollectionSheet(Officer,Currency,ContractVB,VBGroup)
	

	if QueryObj:
		CurrencyObj = mktmoney.getCurrencyObj(Currency)
		for row in QueryObj:
			CountRow 	+=1

			Principal 	=  mktmoney.toMoney(float(row.Principal),CurrencyObj)
			Interest 	=  mktmoney.toMoney(float(row.Interest),CurrencyObj)
			Charge 		=  mktmoney.toMoney(float(row.Charge),CurrencyObj)

			PDPrincipal 	= PDObj[row.LoanID]['PDPrincipal'] if row.LoanID in PDObj.keys() else 0
			PDInterest 		= PDObj[row.LoanID]['PDInterest'] if row.LoanID in PDObj.keys() else 0
			PDCharge 		= PDObj[row.LoanID]['PDCharge'] if row.LoanID in PDObj.keys() else 0
			Penalty 		= PDObj[row.LoanID]['Penalty'] if row.LoanID in PDObj.keys() else 0

			PDPrincipal 	=  mktmoney.toMoney(float(PDPrincipal),CurrencyObj)
			PDInterest 		=  mktmoney.toMoney(float(PDInterest),CurrencyObj)
			PDCharge 		=  mktmoney.toMoney(float(PDCharge),CurrencyObj)
			Penalty 		=  mktmoney.toMoney(float(Penalty),CurrencyObj)

			TotalAmount = float(Principal.replace(',','')) + float(Interest.replace(',','')) + float(Charge.replace(',','')) + float(PDPrincipal.replace(',','')) + float(PDInterest.replace(',','')) + float(PDCharge.replace(',','')) + float(Penalty.replace(',',''))
			dic = {	"ID"			: row.ID,
					"LoanID"		: row.LoanID,
					"CustomerID"	: row.ContractCustomerID,
					"CustomerName"	: '%s %s'%(row.LastNameEn,row.FirstNameEn),
					"Village"		: row.Village,
					"Account"		: row.Account,
					"CollectionDate": row.CollectionDate,
					"Principal"		: Principal,
					"Interest"		: Interest,
					"Charge" 		: Charge,
					"PDPrincipal"	: PDPrincipal,
					"PDInterest"	: PDInterest,
					"PDCharge" 		: PDCharge,
					"Penalty" 		: Penalty,
					"TotalAmount"	: mktmoney.toMoney(TotalAmount,CurrencyObj),
					"SavingAmount" 	: 0,
					}
			RecordRow.append(dic)
			DisableAdd = False
			TotalCollection += TotalAmount

	TotalCollection		= mktmoney.toMoney(TotalCollection,CurrencyObj)
	TotalActualAmount 	= TotalCollection
	CountRow 			= mktmoney.formatNumber(CountRow,1,0)
	DicResult.update({
		'ResultObj':RecordRow,
		'TotalCollection':TotalCollection,
		'TotalActualAmount':TotalActualAmount,
		'CountRow':CountRow
		})
	return render_template( "loancollection/loan_collection_officer.html",
							DicResult=DicResult,
							TotalCollection=TotalCollection,
							TotalActualAmount=TotalActualAmount,
							DisableAdd=DisableAdd
							)

@app.route('/Morakot/LoanCollection/<Operation>/Operation/', methods=['GET'])
@app.route('/Morakot/LoanCollection/<Operation>/Operation/<ID>/', methods=['GET'])
@app.route('/Morakot/LoanCollection/<Operation>/<ID>/', methods=['GET'])
@app.route('/Morakot/LoanCollection/', methods=['GET','POST'])
@app.route('/Morakot/API/LoanCollection/<Operation>/Operation/', methods=['GET'])
@app.route('/Morakot/API/LoanCollection/<Operation>/Operation/<ID>/', methods=['GET'])
@app.route('/Morakot/API/LoanCollection/<Operation>/<ID>/', methods=['GET'])
@app.route('/Morakot/API/LoanCollection/', methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def LoanCollection(Operation="",ID=""):

	ErrorMsg 	= []
	FieldRequired=[]
	QueryObj 	= []
	PDObj 		= []
	ResultObj 	= []
	DisburseObj = []
	OfficerObj 	= []
	CurrencyObj = []
	kwargs 		= []
	ListRepID 	= []
	AuditObj 	= []
	VisibleReference 	= False
	NAuthorize 		= 1
	Action 			= "/Morakot/LoanCollection/"
	li_html 		= ""
	Form 			= ""
	g_id 			= request.args.get("ID", ID)
	g.formID		= g_id
	g_readonly 		= ""
	disabled 		= ""
	classToolbar 	= mkttool.clsToolbar()
	FormName 		= "FRM_LOAN_COLLECTION"
	LoanCollectDict = {}
	ListLoanID		= []
	LoanCollectionObj=[]

	Officer 			= request.args.get("Officer") 						if "Officer" 			in request.args else ""
	Currency 			= request.args.get("Currency") 						if "Currency" 			in request.args else ""
	CollectionDateStart = request.args.get("CollectionDateStart")			if "CollectionDateStart"in request.args else ""
	CollectionDateEnd 	= request.args.get("CollectionDateEnd")				if "CollectionDateEnd" 	in request.args else ""
	OfficerAccount 		= request.args.get("OfficerAccount") 				if "OfficerAccount" 	in request.args else ""
	OfficerCategory 	= request.args.get("OfficerCategory") 				if "OfficerCategory" 	in request.args else ""
	ContractVB 			= request.args.get("ContractVB") 					if "ContractVB" 		in request.args else ""
	VBGroup 			= request.args.get("VBGroup") 						if "VBGroup" 			in request.args else ""
	TotalCollection 	= 0
	TotalActualAmount 	= 0
	TotalSaving 		= 0
	TotalAmounts 		= 0
	AccSetting 	= mktsetting.getAccSetting()
	if AccSetting:
		BaseCurrency = AccSetting.BaseCurrency

	DefaultCurrency = BaseCurrency if BaseCurrency else ''

	CollectionDateRange 	= "%s %s"%(CollectionDateStart,CollectionDateEnd)

	if request.args.get("ID")!=None:
		if Operation == "":
			Operation 	= "Search"

	# Block check access right
	# Overwrite Operation
	if Operation == "Generate":
		getCheck 	= checkAccess ("/Morakot/LoanCollection/","New")
	else:
		
		getCheck 	= checkAccess ("/Morakot/LoanCollection/",Operation)
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("loancollection/loan_collection.html",ErrorMsg=ErrorMsg)

	#List
	get_maxfield = 0
	formatField,currencyField = ["TotalCollection","TotalActualAmount"],"Currency"# self.objform.formatMoney() #call static method defined in form
	listfield = ["ID", "Officer","OfficerAccount", "OfficerCategory", "Currency", "ValueDate", "TotalCollection", "TotalActualAmount", "TotalSaving", "TotalAmount", "ContractVB", "VBGroup" ]#self.objform.listField()

	#Initialize Object Table

	if Operation == "New":
		g_id 			= mktautoid.getAutoID(FormName) if not ID else ID
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("New")
		if not g_id:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+"invalid ID","error")
			return render_template("loancollection/loan_collection.html",Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)	
		
		CheckDuplicateID = mktaudit.isDuplicate(MKT_FUND_TRANSFER,MKT_FUND_TRANSFER_INAU,MKT_FUND_TRANSFER_HIST,g_id,[MKT_FUND_TRANSFER.Reference==g_id],[MKT_FUND_TRANSFER_INAU.Reference==g_id])
		if CheckDuplicateID[0]:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(CheckDuplicateID[1],"error")

	elif Operation == "Generate":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("New")

		# Block validation
		if not Officer:
			FieldRequired.append(('Officer','This field is required.'))

		if not Currency:
			FieldRequired.append(('Currency','This field is required.'))

		if not CollectionDateStart:
			FieldRequired.append(('CollectionDateStart','This field is required.'))

		if not CollectionDateEnd:
			FieldRequired.append(('CollectionDateEnd','This field is required.'))

		QueryObj 	= mktloancollection.getLoanCollectionSheet(Officer,Currency,CollectionDateRange,ContractVB,VBGroup)
		PDObj 		= mktloancollection.getPDCollectionSheet(Officer,Currency,ContractVB,VBGroup)
		LC = []
		for row in QueryObj:
			TotalCollection += float(row.Principal) + float(row.Interest)+ float(row.Charge)

			if row.LoanID in PDObj.keys() and PDObj[row.LoanID] in LC:
				LC.append(row.LoanID)
				PDObj[row.LoanID].update({'WITHLC':'Y'})
				TotalCollection += float(PDObj[row.LoanID]['PDPrincipal']) + float(PDObj[row.LoanID]['PDInterest']) + float(PDObj[row.LoanID]['PDCharge']) + float(PDObj[row.LoanID]['Penalty'])


		for key, value in PDObj.items():
			if value['WITHLC'] == 'N':
				TotalCollection += float(value['PDPrincipal']) + float(value['PDInterest']) + float(value['PDCharge']) + float(value['Penalty'])

		TotalCollection		= mktmoney.toMoney(TotalCollection,mktmoney.getCurrencyObj(Currency))
		TotalActualAmount 	= TotalCollection

	elif Operation == "Edit":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("New")
		g_id 			= ID
		LoanCollectionObj 	= mktloancollection.getSearchLoanCollection(ID,'Search')
		kwargs 			= LoanCollectionObj['kwargs']
		ListRepID 		= LoanCollectionObj['ListRepID']
		AuditObj 		= LoanCollectionObj['AuditObj']
		TotalSaving 	= LoanCollectionObj['kwargs']['TotalSaving']
		TotalAmounts 	= LoanCollectionObj['kwargs']['TotalAmounts']
		if AuditObj:
			Status = AuditObj['Status']
			if Status == "AUTH":
				disabled 		= "disabled"
				li_html 		= classToolbar.getToolbarevent("readonly")
		if not kwargs['Officer']:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+" Record not found...","error")

	elif Operation == "Search":
		Form 			= "New"
		g_readonly		= "readonly"
		li_html 		= classToolbar.getToolbarevent("Search")
		ID 				= request.args.get('ID', ID)
		g_id 			= ID
		disabled 		= "disabled"
		LoanCollectionObj 	= mktloancollection.getSearchLoanCollection(ID,'Search')
		kwargs 			= LoanCollectionObj['kwargs']
		ListRepID 		= LoanCollectionObj['ListRepID']
		AuditObj 		= LoanCollectionObj['AuditObj']
		TotalSaving 	= LoanCollectionObj['kwargs']['TotalSaving']
		TotalAmounts 	= LoanCollectionObj['kwargs']['TotalAmounts']
		VisibleReference= True
		if AuditObj:
			Status = AuditObj['Status']
			Branch = AuditObj['Branch']
			CurrentBranch = mktuser.getCurrentBranch()
			if Status == "AUTH":
				li_html 		= classToolbar.getToolbarevent("readonly")
			if Branch != CurrentBranch:
				li_html 		= classToolbar.getToolbarevent("readonly")
		if not kwargs['Officer']:
			Form 			= ""
			g_readonly 		= ""
			g_id 			= ""
			li_html 		= classToolbar.getToolbarevent("Cancel")
			flash(msg_warning+" Record not found...","error")

	elif Operation == "Authorize":
		Form 			= ""
		g_readonly 		= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		RecordLock 		= checkRecordLock(ID,FormName)
		if not RecordLock[0]:
			flash(msg_warning + " " + RecordLock[1])
			return render_template("loancollection/loan_collection.html",Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)

		ObjAuth 		= mktloancollection.setAuthorizeLoanCollection(NAuthorize,ID)
		if not ObjAuth[0]:
			flash(ObjAuth[1],"error")
			db.session.rollback()
			dellockrecord(ID)
		else:
			flash(ObjAuth[1])
			db.session.commit()
		if not ("API" in request.url or checkContentType()=="json"):
			return render_template("loancollection/loan_collection.html",Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)
	
	elif Operation == "ListLive":
		if "API" in request.url or checkContentType()=="json":
			getparam=mkttool.render_param(get_maxfield,MKT_LOAN_COLLECTION_INAU)
			mlist=mktformmodel.List(MKT_LOAN_COLLECTION,getparam, listfield) 
			return renderCollectionJson(request,
											data_custom = {'ListError': FieldRequired},
											querys=mlist.mktList(), 
											fields=mlist.fields,
											nfield=get_maxfield,
											searchfields=mlist.searchfields,
											formatMoney=formatField,
											currencyField=currencyField,
											toMoney=mktmoney.toMoney,
											float=float,
											curobj=mktmoney.getCurrencyObj,
											action = Action, 
											li_html = li_html, 
											g_id = g_id, 
											disabled = disabled, 
											hidEdit=False, 
											formReadOnly=False,
											operation=Operation)

		QueryObj = mktloancollection.getListAuthLoanCollection("ListLive")

		return render_template("loancollection/loan_collection_list.html",QueryObj=QueryObj,float=float,toMoney=mktmoney.toMoney,getCurrencyObj=mktmoney.getCurrencyObj,setHideEdit=True)

	elif Operation == "ListAuth":
		if "API" in request.url or checkContentType()=="json":
			getparam=mkttool.render_param(get_maxfield,MKT_LOAN_COLLECTION_INAU)
			mlist=mktformmodel.List(MKT_LOAN_COLLECTION_INAU,getparam, listfield) 
			return renderCollectionJson(request,
											data_custom = {'ListError': FieldRequired},
											querys=mlist.mktList(), 
											fields=mlist.fields,
											nfield=get_maxfield,
											searchfields=mlist.searchfields,
											formatMoney=formatField,
											currencyField=currencyField,
											toMoney=mktmoney.toMoney,
											float=float,
											curobj=mktmoney.getCurrencyObj,
											action = Action, 
											li_html = li_html, 
											g_id = g_id, 
											disabled = disabled, 
											hidEdit=False, 
											formReadOnly=False,
											operation=Operation)
		
		QueryObj = mktloancollection.getListAuthLoanCollection("ListAuth")

		return render_template("loancollection/loan_collection_list.html",QueryObj=QueryObj,float=float,toMoney=mktmoney.toMoney,getCurrencyObj=mktmoney.getCurrencyObj,setHideEdit=False)
	
	elif Operation == "ListHist":
		if "API" in request.url or checkContentType()=="json":
			getparam=mkttool.render_param(get_maxfield,MKT_LOAN_COLLECTION_INAU)
			mlist=mktformmodel.List(MKT_LOAN_COLLECTION_HIST,getparam, listfield) 
			return renderCollectionJson(request,
											data_custom = {'ListError': FieldRequired},
											querys=mlist.mktList(), 
											fields=mlist.fields,
											nfield=get_maxfield,
											searchfields=mlist.searchfields,
											formatMoney=formatField,
											currencyField=currencyField,
											toMoney=mktmoney.toMoney,
											float=float,
											curobj=mktmoney.getCurrencyObj,
											action = Action, 
											li_html = li_html, 
											g_id = g_id, 
											disabled = disabled, 
											hidEdit=False, 
											formReadOnly=False,
											operation=Operation)

		QueryObj = mktloancollection.getListAuthLoanCollection("ListHist")

		return render_template("loancollection/loan_collection_list.html",QueryObj=QueryObj,float=float,toMoney=mktmoney.toMoney,getCurrencyObj=mktmoney.getCurrencyObj,setHideEdit=False)

	elif Operation == "Delete":
		Form 			= ""
		g_readonly 		= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		ObjDelete 		= mktloancollection.setDeleteLoanCollection(ID)
		if not ObjDelete[0]:
			flash(ObjDelete[1],"error")
			db.session.rollback()
		else:
			flash(ObjDelete[1])
			db.session.commit()
		if not ("API" in request.url or checkContentType()=="json"):
			return render_template("loancollection/loan_collection.html",Action=Action,li_html=li_html,Form=Form,g_id=g_id,g_readonly=g_readonly)
	
	elif Operation == "Cancel":
		Form 			= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")

	else:
		Form 			= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		

	if request.method == "POST":
		Form 			= ""
		g_id 			= ""
		li_html 		= classToolbar.getToolbarevent("Cancel")
		kwargs			= request.form
		ID 				= kwargs['ID']
		Officer 		= kwargs['Officer']
		Currency 		= kwargs['Currency']
		OfficerAccount 	= kwargs['OfficerAccount']
		OfficerCategory = kwargs['OfficerCategory']
		TotalCollection = kwargs['TotalCollection']
		TotalActualAmount = kwargs['TotalActualAmount']
		ContractVB 		= kwargs['ContractVB']
		VBGroup 		= kwargs['VBGroup']
		TotalSaving 	= kwargs['TotalSaving']
		TotalAmount 	= kwargs['TotalAmount']
		print TotalAmount

		CollectionDateStart = kwargs['CollectionDateStart']
		CollectionDateEnd 	= kwargs['CollectionDateEnd']

		TotalActualAmount 	= float(TotalActualAmount.replace(",",""))
		TotalCollection 	= float(TotalCollection.replace(",",""))
		TotalSaving 		= float(TotalSaving.replace(",",""))
		TotalAmount 		= float(TotalAmount.replace(",",""))

		CollectionDateRange 	= "%s %s"%(CollectionDateStart,CollectionDateEnd)

		ListLoanID		= [item for item in kwargs if "LoanID" in item]
		ListRepID 		= []
		for row in ListLoanID:
			RepID = row.split('_')[1]
			ListRepID.append(RepID)
		ListLoanID		= [str(kwargs[item]) for item in ListLoanID]
		ListLoanID.sort()
		ListRepID.sort()
		# Block validation
		if not Officer:
			FieldRequired.append(('Officer','This field is required.'))

		if not Currency:
			FieldRequired.append(('Currency','This field is required.'))

		LoanCollectDict = {
					'ID' 				: ID,
					'Officer' 			: Officer,
					'OfficerAccount' 	: OfficerAccount,
					'OfficerCategory' 	: OfficerCategory,
					'Currency' 			: Currency,
					'ValueDate' 		: CollectionDateRange,
					'TotalCollection' 	: TotalCollection,
					'TotalActualAmount' : TotalActualAmount,
					'ContractVB' 		: ContractVB,
					'VBGroup' 			: VBGroup,
					'TotalSaving' 		: TotalSaving,
					'TotalAmount' 		: TotalAmount,
		}
		CheckInsert = mktloancollection.insertLoanCollection(NAuthorize,ID,kwargs,ListRepID,LoanCollectDict)
		if not CheckInsert[0]:
			g_id 			= ID
			Form 			= "New"
			g_readonly		= "readonly"
			li_html 		= classToolbar.getToolbarevent("New")
			FieldRequired.append(('Message',CheckInsert[1]))
			db.session.rollback()
			#ERROR
			# flash(CheckInsert[1], 'error')
		else:
			db.session.commit()
			db.session.close()
			kwargs = []
			if not ("API" in request.url or checkContentType()=="json"):
				return redirect('/Morakot/LoanCollection')

		#Reset catch value to jinja
		

	OfficerObj			= loadOfficer().order_by(MKT_OFFICER.ID.asc())#MKT_OFFICER.query.get(Officer)
	CurrencyObj 		= loadCurrency()
	VBObj				= MKT_VB.query
	GroupObj			= MKT_GROUP.query

	if "API" in request.url or checkContentType()=="json":
		return renderCollectionJson(request, 
								data_custom = {'ListError': FieldRequired},
								LoanCollectionObj = LoanCollectionObj,
								RedirectUrl = "/Morakot/LoanCollection" if request.method == "POST" or Operation in ['Delete', 'Reverse', 'Authorize'] else '',
								QueryObj = QueryObj,
								ResultObj = ResultObj,
								Officer = Officer,
								action = Action,
								li_html = li_html,
								toMoney=mktmoney.toMoney,
								getCurrencyObj=mktmoney.getCurrencyObj,
								g_id = g_id,
								g_readonly = g_readonly,
								disabled = disabled,
								operation = Operation,
								PDObj=PDObj)

	return render_template("loancollection/loan_collection.html",
							Action=Action,
							li_html=li_html,
							Form=Form,
							g_id=g_id,
							g_readonly=g_readonly,
							disabled=disabled,
							ErrorMsg=ErrorMsg,
							FieldRequired=FieldRequired,
							float=float,
							formatNumber=mktmoney.formatNumber,
							toMoney=mktmoney.toMoney,
							getCurrencyObj=mktmoney.getCurrencyObj,
							OfficerObj=OfficerObj,
							CurrencyObj=CurrencyObj,
							Currency=Currency,
							QueryObj=QueryObj,
							kwargs=kwargs,
							ListRepID=ListRepID,
							AuditObj=AuditObj,
							TotalCollection=TotalCollection,
							TotalActualAmount=TotalActualAmount,
							VisibleReference=VisibleReference,
							VBObj=VBObj,
							GroupObj=GroupObj,
							TotalSaving=TotalSaving,
							TotalAmounts=TotalAmounts,
							PDObj=PDObj,
							DefaultCurrency=DefaultCurrency)

def renderCollectionJson(request, **kwargs):
	PDObj 				= kwargs.get('PDObj')
	FormModel			= ''
	ObjForm				= FRM_LOAN_COLLECTION
	Model				= [MKT_LOAN_COLLECTION]
	RequestForm			= request.form
	LoanCollectionObj	= kwargs.get('LoanCollectionObj',[])

	if kwargs.get('operation') in ["ListLive", "ListAuth", "ListHist"]:
		if kwargs.get('operation') == "ListAuth":
			kwargs['model']	= MKT_LOAN_COLLECTION_INAU
		elif kwargs.get('operation') == "ListHist":
			kwargs['model']	= MKT_LOAN_COLLECTION_HIST
		else:
			kwargs['model']	= Model[0]
		kwargs['important_field'] = ObjForm.importantField()
		kwargs['page'] 		= int(request.args.get("offset", 1))
		kwargs['per_page']	= int(request.args.get("limit", 15))
		kwargs['order_by']	= str(request.args.get("order_by" , ""))
		kwargs['filter_by']	= str(request.args.get("filter_by" , ""))
		kwargs['search']	= str(request.args.get("search", ""))
	else:
		kwargs["ResultObj"] = []
		if len(LoanCollectionObj) > 0:
			LCKwargs = LoanCollectionObj['kwargs']
			for ID in LoanCollectionObj['ListRepID']:
				kwargs["ResultObj"].append(getGeneratedResultObj(
					LCKwargs['LoanID_%s'%ID], LCKwargs['LoanID_%s'%ID], LCKwargs['Account_%s'%ID], LCKwargs['Customer_%s'%ID],
					LCKwargs['CollectionDate_%s'%ID], LCKwargs['SavingAmount_%s'%ID], LCKwargs['Amount_%s'%ID],
					LCKwargs['TotalAmount_%s'%ID], LCKwargs['Principal_%s'%ID], LCKwargs['Interest_%s'%ID],
					LCKwargs['Charge_%s'%ID], LCKwargs['PDPrincipal_%s'%ID], LCKwargs['PDInterest_%s'%ID],
					LCKwargs['PDCharge_%s'%ID], LCKwargs['Penalty_%s'%ID], LCKwargs['Village_%s'%ID]
				))
		else:
			for Obj in kwargs.get('QueryObj',[]):
				Currency 	= mktmoney.getCurrencyObj(Obj.Currency)
				Principal	= Obj.Principal
				Interest	= Obj.Interest
				Charge		= Obj.Charge
				PDPrincipal	= PDObj[Obj.LoanID]['PDPrincipal'] if Obj.LoanID in PDObj.keys() and PDObj[Obj.LoanID]['WITHLC'] != 'D' else 0
				PDInterest	= PDObj[Obj.LoanID]['PDInterest'] if Obj.LoanID in PDObj.keys() and PDObj[Obj.LoanID]['WITHLC'] != 'D' else 0
				PDCharge	= PDObj[Obj.LoanID]['PDCharge'] if Obj.LoanID in PDObj.keys() and PDObj[Obj.LoanID]['WITHLC'] != 'D' else 0
				Penalty		= PDObj[Obj.LoanID]['Penalty'] if Obj.LoanID in PDObj.keys() and PDObj[Obj.LoanID]['WITHLC'] != 'D' else 0
				TotalAmount	= sum([Principal, Interest, Charge, PDPrincipal, PDInterest, PDCharge, Penalty])
				
				kwargs["ResultObj"].append(getGeneratedResultObj(
					Obj.ID, Obj.LoanID, Obj.Account, Obj.ContractCustomerID + "-" + Obj.LastNameEn +" "+ Obj.FirstNameEn, Obj.CollectionDate, 0,
					mktmoney.toMoney(float(TotalAmount),Currency),
					mktmoney.toMoney(float(TotalAmount),Currency),
					mktmoney.toMoney(float(Principal),Currency),
					mktmoney.toMoney(float(Interest),Currency),
					mktmoney.toMoney(float(Charge),Currency),
					mktmoney.toMoney(float(PDPrincipal),Currency),
					mktmoney.toMoney(float(PDInterest),Currency),
					mktmoney.toMoney(float(PDCharge),Currency),
					mktmoney.toMoney(float(Penalty),Currency),
					Obj.Village,
				))
		if request.method == "GET":
			objdb		= manipulatedatatodb(ObjForm, Model, RequestForm, kwargs.get('g_id')) # create instance object
			FormModel	= objdb.form_model()
			kwargs['form'] 	= FormModel
		
		kwargs['custom_config'] = {
			'Sections': 	[{ 'title': '', 'index': [5, 2, 0, 11, 9, 6, 13] },
							{ 'title': 'Loan Collection', 'index': [15, 4, 7] },
							{ 'title': 'Past Due', 'index': [12, 8, 1, 10] }],
			'DisabledField':{'Amount': False, 'SavingAmount': False},
			'MoneyField': 	{'Amount': mktgrouloan.getMoneyField('Currency', 'Amount'),'SavingAmount': mktgrouloan.getMoneyField('Currency', 'SavingAmount')},
			'GParams': 		['Officer','Currency','CollectionDateStart','CollectionDateEnd','ContractVB', 
								'VBGroup','OfficerAccount','OfficerCategory','TotalCollection', 'TotalActualAmount', 
								'TotalSaving', 'TotalAmount'],
			'GUrl': 		'/LoanCollection/Generate/%s/?' % kwargs.get('g_id')
		}
	
	return mktgrouloan.renderCustomJsonFormat(**kwargs)

def getGeneratedResultObj(*args):
	return {
		'ID': args[0],
		'LoanID': args[1],
		'Account': args[2],
		'Customer': args[3],
		'CollectionDate': args[4],
		'SavingAmount': args[5],
		'Amount': args[6],
		'TotalAmount': args[7],
		'Principal': args[8],
		'Interest': args[9],
		'Charge': args[10],
		'PDPrincipal': args[11],
		'PDInterest': args[12],
		'PDCharge': args[13],
		'Penalty': args[14],
		'Village': args[15]
	}