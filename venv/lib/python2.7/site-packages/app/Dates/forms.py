from datetime import date, datetime, timedelta

import app.tools.mktdate as mktdate
from app.BatchJob.models import *
from app.BjStat.models import *
from app.Branch.models import *
from app.mktcore.session import *
from app.mktcore.wtfimports import *

from .models import *


@app.route('/Morakot/Dates/getSystemDate',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSystemDate():
	SystemDate 			= 	request.args.get('SystemDate')
	CurrentDate 		=	datetime.strptime(SystemDate, '%Y-%m-%d').date()
	LastSystemDate 		=	CurrentDate - timedelta(days=1)
	NextSystemDate 		=	CurrentDate + timedelta(days=1)
	NextMonthEnd 		=	mktdate.getNextMonthEnd(CurrentDate)
	LastMonthEnd 		=	mktdate.getLastMonthEnd(CurrentDate)
	PrevLastMonthEnd 	=	mktdate.getLastMonthEnd(LastMonthEnd)
	JulianDate 			=	mktdate.getJulianDay(SystemDate)
	NextWeekend 		=	CurrentDate
	NextYearEnd 		=	mktdate.getNextYearEnd(CurrentDate)
	LastYearEnd 		=	mktdate.getLastYearEnd(CurrentDate)
	
	while NextWeekend.weekday() !=4 :
		NextWeekend = NextWeekend + timedelta(days=1)
	
	return jsonify(	LastSystemDate 		= 	str(LastSystemDate),
					NextSystemDate 		= 	str(NextSystemDate),
					NextWeekend 		= 	str(NextWeekend),
					NextMonthEnd 		= 	str(NextMonthEnd),
					LastMonthEnd 		= 	str(LastMonthEnd),
					PrevLastMonthEnd	= 	str(PrevLastMonthEnd),
					NextYearEnd 		= 	str(NextYearEnd),
					LastYearEnd 		= 	str(LastYearEnd),
					JulianDate 			=	str(JulianDate))  

def clearBJStat():

	QueryObj = MKT_BJ_STAT.query.all()

	if QueryObj:

		MKT_BJ_STAT.query.delete()
		db.session.commit()

		print "Clear table MKT_BJ_STAT was successfully."

	else:

		print "No record to clear."

class FRM_DATES(exform):

	SystemDate 		= 	DateField(requiredlabel("Current System Date", "*"), [validators.Required()])
	LastSystemDate 	= 	TextField(requiredlabel("Last System Date", "*"), [validators.Required()])
	NextSystemDate 	= 	DateField(requiredlabel("Next System Date", "*"), [validators.Required()])
	NextWeekend 	= 	DateField(requiredlabel("Next Weekend Date", "*"), [validators.Required()])
	NextMonthEnd 	= 	DateField(requiredlabel("Next Month End", "*"), [validators.Required()])
	LastMonthEnd 	= 	DateField(requiredlabel("Last Month End", "*"), [validators.Required()])
	PrevLastMonthEnd= 	DateField(requiredlabel("Prev Last Month End", "*"), [validators.Required()])
	NextYearEnd 	= 	DateField(requiredlabel("Next Year End", "*"), [validators.Required()])
	LastYearEnd 	= 	DateField(requiredlabel("Last Year End", "*"), [validators.Required()])
	JulianDate 		=	TextField(requiredlabel("Julian Date", "*"), [validators.Required()])


	@staticmethod
	def setWidth():
		form_control = [("SystemDate", len3), ("LastSystemDate", len3), ("NextWeekend", len3),
						("NextMonthEnd", len3), ("NextYearEnd", len3), ("JulianDate", len1), ("LastYearEnd", len3),
						("NextSystemDate", len3), ("LastMonthEnd", len3), ("PrevLastMonthEnd", len3)]

		return form_control

	@staticmethod
	def setDisable():
		return [("LastSystemDate"), ("NextMonthEnd"), ("NextSystemDate"), ("PrevLastMonthEnd"), 
				("NextYearEnd"), ("NextWeekend"), ("JulianDate"), ("LastMonthEnd"), ("LastYearEnd")]

	@staticmethod  # override form method
	def hotField(): 
		hotfield 		=	[]
		fielddisplay	=	"$('#LastSystemDate').val(data.LastSystemDate)"   
		fielddisplay 	+=	";$('#NextSystemDate').val(data.NextSystemDate)"  
		fielddisplay 	+=	";$('#NextWeekend').val(data.NextWeekend)"  
		fielddisplay 	+=	";$('#NextMonthEnd').val(data.NextMonthEnd)"  
		fielddisplay 	+=	";$('#LastMonthEnd').val(data.LastMonthEnd)"  
		fielddisplay 	+=	";$('#PrevLastMonthEnd').val(data.PrevLastMonthEnd)"  
		fielddisplay 	+=	";$('#NextYearEnd').val(data.NextYearEnd)"  
		fielddisplay 	+=	";$('#LastYearEnd').val(data.LastYearEnd)"  
		fielddisplay 	+=	";$('#JulianDate').val(data.JulianDate)"  
		
		varname 	=	"SystemDate:$('#SystemDate').val()" # $('#SystemDate').val() is parameter via get method
		fun 		=	["SystemDate",varname,fielddisplay,"/Morakot/Dates/getSystemDate","blur"]  # /Morakot/Dates/getSystemDate is url defined at @app.route('/Morakot/Dates/getSystemDate',methods=['GET'])
		hotfield.append(fun)
		return hotfield

	@staticmethod  # override form method
	def beforeInsert():

		try:

			AuthLevel 	=	g.getNAuthorize

			if AuthLevel == 0:

				BatchJobObj =	MKT_BATCH_JOB.query

				if BatchJobObj:

					for Row in BatchJobObj:

						SystemDate = request.form['SystemDate']
						# Update the NextRunDate base on Current Bank Date and BatchJob Freqency
						# When Changing SystemDate need to generate new NextRunDate in BatchJob
						# Or Otherwise the BatchJob will not run.

						NextRunDate, Message = mktdate.convertFreqToNextRunDate(SystemDate, Row.Frequency)

						Row.NextRunDate = NextRunDate
						db.session.add(Row)

				BranchObj = MKT_BRANCH.query

				if BranchObj:

					for Branch in BranchObj:

						Branch.ReportLocked = '10000'
						Branch.PrevYearAmount = 0
						Branch.PrevMonthAmount = 0
						db.session.add(Branch)

			clearBJStat()
			return True

		except Exception, e:
			raise
			flash(msg_error+'%s'%e)
			db.session.rollback()
			return False

	@staticmethod
	def beforeAuthorize():

		try:

			ID 			= 	g.formID
			Dates 		= 	MKT_DATES_INAU.query.get(ID)
			BatchJobObj =	MKT_BATCH_JOB.query

			if BatchJobObj:

				for Row in BatchJobObj:
					SystemDate = Dates.SystemDate

					# Update the NextRunDate base on Current Bank Date and BatchJob Freqency
					# When Changing SystemDate need to generate new NextRunDate in BatchJob
					# Or Otherwise the BatchJob will not run.
					NextRunDate, Message = mktdate.convertFreqToNextRunDate(SystemDate, Row.Frequency)
					Row.NextRunDate = NextRunDate
					db.session.add(Row)

			BranchObj = MKT_BRANCH.query

			if BranchObj:

				for Branch in BranchObj:
					Branch.ReportLocked = '10000'
					Branch.PrevYearAmount = 0
					Branch.PrevMonthAmount = 0
					db.session.add(Branch)

			clearBJStat()
			return True

		except Exception, e:

			flash(msg_error+'%s'%e)
			db.session.rollback()
			return False
