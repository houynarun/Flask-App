from app.mktcore.imports import *
from .forms import *
from app.User.models						import *
from app.mktcore.customform 				import *
import app.tools.mktaddress 		as mktaddress

registerCRUD(admin, '/POCustomerAct', 'POCustomerAct',FRM_PO_CUSTOMER_ACT, [MKT_PO_CUSTOMER_ACT])
registerCRUD(admin, '/POCustomerActType', 'POCustomerActType',FRM_PO_CUSTOMER_ACT_TYPE, [MKT_PO_CUSTOMER_ACT_TYPE])


# from datetime import datetime
# from threading import Timer

# x=datetime.today()
# y=x.replace(day=x.day+1, hour=10, minute=57, second=40, microsecond=0)
# delta_t=y-x

# secs=delta_t.seconds+1

# def hello_world():
#     print "hello world"
#     #...

# t = Timer(secs, hello_world)
# t.start()



@app.route('/Morakot/API/SearchPotentialCustomerID')
@app.route('/Morakot/SearchPotentialCustomerID')
def SearchPotentialCustomerID():
	CurrentBranch 	= mktuser.getCurrentBranch()
	search 			= request.args.get('q')
	action 			= request.args.get('action') if 'action' in request.args else ""
	AllowPutID 		= request.args.get('AllowPutID') if 'AllowPutID' in request.args else ""

	# ObjPOCustomer = db.session.query(	MKT_PO_CUSTOMER.ID,
	# 									MKT_PO_CUSTOMER.FirstNameEn,
	# 									MKT_PO_CUSTOMER.LastNameEn,
	# 									MKT_PO_CUSTOMER.LastNameEn,
	# 									MKT_PO_CUSTOMER.FirstNameEn,
	# 									MKT_PO_CUSTOMER.POStatus
	# 								).join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID==MKT_PO_CUSTOMER.POStatus).\
	# 								filter(MKT_PO_CUSTOMER_STATUS.Closed=='No').\
	# 								filter(or_(MKT_PO_CUSTOMER.ID.ilike('%'+search.upper()+'%'), 
	# 								func.upper(MKT_PO_CUSTOMER.FirstNameEn).ilike('%'+search.upper()+'%'),
	# 								func.upper(MKT_PO_CUSTOMER.LastNameEn).ilike('%'+search.upper()+'%'),
	# 								func.concat(func.upper(MKT_PO_CUSTOMER.LastNameEn),' ',func.upper(MKT_PO_CUSTOMER.FirstNameEn)).ilike('%'+search.upper()+'%'),
	# 								func.concat(func.upper(MKT_PO_CUSTOMER.FirstNameEn),' ',func.upper(MKT_PO_CUSTOMER.LastNameEn)).ilike('%'+search.upper()+'%')
	# 								)).all()
	ObjPOCustomer = MKT_PO_CUSTOMER.query.\
									filter(or_(MKT_PO_CUSTOMER.ID.ilike('%'+search.upper()+'%'), 
									func.upper(MKT_PO_CUSTOMER.FirstNameEn).ilike('%'+search.upper()+'%'),
									func.upper(MKT_PO_CUSTOMER.LastNameEn).ilike('%'+search.upper()+'%'),
									func.concat(func.upper(MKT_PO_CUSTOMER.LastNameEn),' ',func.upper(MKT_PO_CUSTOMER.FirstNameEn)).ilike('%'+search.upper()+'%'),
									func.concat(func.upper(MKT_PO_CUSTOMER.FirstNameEn),' ',func.upper(MKT_PO_CUSTOMER.LastNameEn)).ilike('%'+search.upper()+'%')
									)).all()
	NAMES = []
	for row in ObjPOCustomer:
		Label = row.ID + " - " + row.LastNameEn + " " + row.FirstNameEn
		dic = {"id":row.ID, "text": Label}
		NAMES.append(dic)

	return jsonify(items = NAMES)

@app.route('/Morakot/API/SearchOfficerID')
@app.route('/Morakot/SearchOfficerID')
def SearchOfficerID():	
	
	# SelfAssignRole 	= 	mktsetting.getAppSetting('SelfAssignRole').split()
	# RoleID 			=	mktsetting.getAppSetting('AssigneeRole').split()
	search 			= request.args.get('q')
	action 			= request.args.get('action') if 'action' in request.args else ""
	AllowPutID 		= request.args.get('AllowPutID') if 'AllowPutID' in request.args else ""
		
	ObjUser 		=	MKT_USER.query.\
						filter(or_(MKT_USER.ID.like('%'+search.upper()+'%'), 
						func.upper(MKT_USER.DisplayName).like('%'+search.upper()+'%'),
						func.upper(MKT_USER.LogInName).like('%'+search.upper()+'%')
						)).all()
	NAMES = []
	for row in ObjUser:
		Label = row.ID + " - " + row.DisplayName
		dic = {"id":row.ID, "text": Label}
		NAMES.append(dic)

	return jsonify(items = NAMES)

class FRM_VIEW_POCUSTOMER_ACT(exform):
	pass



class CLS_ViePOCustomerByCustomer(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):
		BodyList 		= []
		BodyDict 		= {}
		MostData 		= True
		self.customButton =	{
							'title':'Show',
							'type':'Hidden',
							'method':'get',
							'url':'/POCustomerByCustomer/?ID=SearchPotentialCustomerID',
							'param':['SearchPotentialCustomerID'],
							'icon':'',
							'type_url':'Custom',
							'color':'#1b80c2'
						}	
		RecordID = request.args.get('ID','')
		# ObjPOCustomerActi = MKT_PO_CUSTOMER_ACT.query.filter(MKT_PO_CUSTOMER_ACT.PotentialCustomer==RecordID).all()
		
		# ObjPOCustomer = db.session.query(MKT_PO_CUSTOMER).\
		# 				join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID==MKT_PO_CUSTOMER.POStatus).\
		# 				filter(MKT_PO_CUSTOMER.ID==RecordID,MKT_PO_CUSTOMER_STATUS.Closed=='No').first()

		ObjPOCustomer = MKT_PO_CUSTOMER.query.\
						filter(MKT_PO_CUSTOMER.ID==RecordID).first()

		#Potential Customer Information
		if hasattr(FRM_VIEW_POCUSTOMER_ACT,'SearchOfficerID'):
			delattr(FRM_VIEW_POCUSTOMER_ACT,'SearchOfficerID')
		setattr(FRM_VIEW_POCUSTOMER_ACT,'SearchPotentialCustomerID',RemoteTextField('Input Potential Customer ID Or Name',default=RecordID))
		if ObjPOCustomer:
			ObjPOCustomerActi = db.session.query(MKT_PO_CUSTOMER_ACT.TimeOfActivity,
												MKT_PO_CUSTOMER_ACT.ActivityDesc,
												MKT_PO_CUSTOMER_ACT.NextFollowDate,
												MKT_PO_CUSTOMER_ACT.ActivityBy,
												MKT_PO_CUSTOMER_ACT.DateOfActivity,
												MKT_PO_CUSTOMER_ACT.ID,
												MKT_PO_CUSTOMER_ACT.Branch,
												MKT_PO_CUSTOMER_ACT.PotentialCustomer,
												MKT_PO_CUSTOMER_ACT_TYPE.Description).\
											join(MKT_PO_CUSTOMER_ACT_TYPE,MKT_PO_CUSTOMER_ACT_TYPE.ID==MKT_PO_CUSTOMER_ACT.ActivityType).\
											filter(MKT_PO_CUSTOMER_ACT.PotentialCustomer==RecordID).order_by(MKT_PO_CUSTOMER_ACT.Createdon.desc()).all()


			ObjPoStatus = MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.ID==ObjPOCustomer.POStatus).first()
			delattr(FRM_VIEW_POCUSTOMER_ACT,'SearchPotentialCustomerID')
			self.customType = 'Custom'
			self.customButton = {}

			# RejectedStatus 	= '5'
			# AppliedStatus 	= '4'
			# MeetingStatus 	= '3'
			# AssignStatus 	= '2'
			# NewStatus 		= '1'

			PotentialCustomerDic  	= {}
			PoCusID 				= 'ID'
			PoCusName 				= 'Name'
			PoCusGender 			= 'Gender'
			PoCusDOC 				= 'Date Of Contact'
			PoCusMobile				= 'Mobile'
			PoNextFollowDate 		= 'Follow-up Date'
			PotentialStatusName 	= '' #Potential Status
			PotentialStatusColor 	= ''

			#Activity Type
			CurrentDate 	= 	mktdate.getDateISO()
			NextDate        =	mktdate.getNextDay(CurrentDate, 2)

			if ObjPOCustomer.NextFollowDate:
				NextFollowDate 	=	datetime.strptime(str(ObjPOCustomer.NextFollowDate), '%Y-%m-%d')

				if NextFollowDate <= datetime.strptime(str(NextDate),'%Y-%m-%d') and NextFollowDate > datetime.strptime(str(CurrentDate),'%Y-%m-%d') :
					PotentialStatusName = 'Upcoming'
					PotentialStatusColor = '#f4b04f'
				if NextFollowDate == datetime.strptime(str(CurrentDate),'%Y-%m-%d'):
					PotentialStatusName = 'Today'
					PotentialStatusColor = '#5cb85c'

				if NextFollowDate < datetime.strptime(str(CurrentDate),'%Y-%m-%d'):
					PotentialStatusName = 'Past Due'
					PotentialStatusColor = '#d9534f'


			ValuePoNextFollowDate 	= ObjPOCustomer.NextFollowDate
			ValuePoCusID 			= ObjPOCustomer.ID
			ValuePoCusName 			= ObjPOCustomer.LastNameEn + " " + ObjPOCustomer.FirstNameEn + " / " + ObjPOCustomer.LastNameKh + " " + ObjPOCustomer.FirstNameKh
			ValuePoCusGender 		= ObjPOCustomer.Gender
			ValuePoCusDateOfContact = ObjPOCustomer.DateOfContact
			Mobile 					= [ObjPOCustomer.Mobile1, ObjPOCustomer.Mobile2]
			ValuePoMobile			= ' / '.join(filter(None,Mobile))
			ValuePoAddress			= mktaddress.getAddress(
														ProvinceID = ObjPOCustomer.Province,
														DistrictID = ObjPOCustomer.District,
														CommuneID  = ObjPOCustomer.Commune,
														VillageID  = ObjPOCustomer.Village,
														HouseNo    = ObjPOCustomer.HouseNo,
														Street     = ObjPOCustomer.Street
													)
			# Branch 					= ObjPOCustomer.Branch	

			AssignTo 		=	"User is messing."
			CheckObjUser 	=	MKT_USER.query.get(ObjPOCustomer.AssignTo)
			if CheckObjUser:
				AssignTo  	=	CheckObjUser.ID + ' - ' + CheckObjUser.DisplayName

			PotentialCustomerList = [{'label':PoCusID,'value':ValuePoCusID ,'urls':[{'url':"/POCustomer/?ID="+ValuePoCusID,'type_url':'Form','icon':''}],'color':''},
									{'label':PoCusName,'value':ValuePoCusName,'urls':[],'color':''},
									{'label':PoCusGender,'value':ValuePoCusGender,'urls':[],'color':''},
									# {'label':PoCusDOC,'value':ValuePoCusDateOfContact,'urls':[],'color':''},
									{'label':PoCusMobile,'value':ValuePoMobile,'urls':[],'color':''},
									{'label':PoNextFollowDate,'value':ValuePoNextFollowDate +' - '+ PotentialStatusName,'urls':[],'color':PotentialStatusColor},
									# {'label':'Status','value':StatusName,'urls':[],'color':StatusColor}
									{'label':'Status','value':ObjPoStatus.Description,'urls':[],'color':'#1d89cf'},
									{'label':'AssignTo','value':ObjPOCustomer.AssignTo,'urls':[],'color':''},
									# {'label':'Address','value':ValuePoAddress,'urls':[],'color':''},
									{'label':'Address','value':ValuePoAddress,'urls':[],'color':''},
									{'label':'Note','value':ObjPOCustomer.Note,'urls':[],'color':''},
									]

			PotentialCustomerDic.update({
								'icon':'','size':'6','name':'PotentialCustomer','title': 'General Information','type':'List','data':PotentialCustomerList,'most_data':MostData
							})



			BodyList.append(PotentialCustomerDic)
			

			PotentialCustomerList = []
			PotentialCustomerDic = {}
			
			for col in ObjPOCustomerActi:

				Branch = {'key':'Branch' ,'value':col.Branch,'color':''} 
				MeetingType  = {'key':'Meeting Type' ,'value':col.Description,'color':'#4083a9'} 
				TimeOfActivity = {'key':'Time Of Activity' ,'value':col.TimeOfActivity,'color':''}  
				ActivityDesc = {'key':'Description' ,'value':col.ActivityDesc,'color':''}  
				NextFollowDate = {'key':'FollowUp Date' ,'value':col.NextFollowDate,'color':''}  
				ActivityBy = {'key':'Activity By' ,'value':col.ActivityBy,'color':''}  
				DateOfActivity = {'key':'Date Of Activity' ,'value':col.DateOfActivity+' '+col.TimeOfActivity,'color':''}  
			 
				# PotentialStatus = {'key':'Date Of Activity' ,'value':col.DateOfActivity,'color':''}  

				Column 			= 	[Branch, MeetingType,DateOfActivity,ActivityDesc,NextFollowDate]
				ImportantField 	= 	[MeetingType,ActivityDesc]

				PotentialCustomerList.append({'columns':Column,
									'urls':[
											{'url':'/POCustomerAct/?ID=%s'%col.ID,'type_url':'Form','icon':'eye','text':'View | '},
											{'url':'/POCustomerAct/New/?POID='+col.PotentialCustomer,'type_url':'Form','icon':'plus','text':'Add'}
										],
									'important':ImportantField
									})
				
			PotentialCustomerDic.update({
						'icon':'','size':'6','name':'PotentialCustomer','title': 'Recent Activity','type':'Table','data':PotentialCustomerList,'most_data':False
					})

			BodyList.append(PotentialCustomerDic)


		BodyDict.update({
				'header':[],'data':BodyList
				})
		#End Potential Customer Information
			
		self.kwargs 	=	{
					'recordID':RecordID,
					'bodyData':BodyDict
		}

		self.body 		= BodyDict
		self.recordID 	= RecordID
		self.form 		= FRM_VIEW_POCUSTOMER_ACT
		return True


	

	


class CLS_ViePOCustomerByOfficer(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):

		BodyList 		= []
		BodyDict 		= {}
		MostData 		= True
		CurrentDate 	= 	mktdate.getDateISO()
		NextDate        =	mktdate.getNextDay(CurrentDate, 2)
		self.customButton =	{
							'title':'Show',
							'type':'Hidden',
							'method':'get',
							'url':'/POCustomerByOfficer/?ID=SearchOfficerID',
							'param':['SearchOfficerID'],
							'icon':'',
							'type_url':'Custom',
							'color':'#1b80c2'
						}	
		RoleID = request.args.get('ID','')

		ObjUser 			= MKT_USER.query.get(RoleID)

		ObjPOCustomer 	 	= 	db.session.query(MKT_PO_CUSTOMER.NextFollowDate,
										 MKT_PO_CUSTOMER.ID,
										 MKT_PO_CUSTOMER.FirstNameEn,
										 MKT_PO_CUSTOMER.LastNameEn,
										 MKT_PO_CUSTOMER.FirstNameKh,
										 MKT_PO_CUSTOMER.LastNameKh,
										 MKT_PO_CUSTOMER.Gender,
										 MKT_PO_CUSTOMER.ProductInterest,
										 MKT_PO_CUSTOMER.DateOfContact,
										 MKT_PO_CUSTOMER.Branch,
										 MKT_PO_CUSTOMER.Note,
										 MKT_PO_CUSTOMER.Mobile1,
										 MKT_PO_CUSTOMER.Mobile2,
										 MKT_PO_CUSTOMER.HouseNo,
										 MKT_PO_CUSTOMER.Street,
										 MKT_PO_CUSTOMER.Province,
										 MKT_PO_CUSTOMER.District,
										 MKT_PO_CUSTOMER.Commune,
										 MKT_PO_CUSTOMER.Village,
										 MKT_PO_CUSTOMER.POStatus).\
								join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID==MKT_PO_CUSTOMER.POStatus).\
								filter(MKT_PO_CUSTOMER.AssignTo==RoleID)

		ObjPOCustomerAct = 	db.session.query(MKT_PO_CUSTOMER.NextFollowDate,
										 MKT_PO_CUSTOMER.ID,
										 MKT_PO_CUSTOMER.FirstNameEn,
										 MKT_PO_CUSTOMER.LastNameEn,
										 MKT_PO_CUSTOMER.FirstNameKh,
										 MKT_PO_CUSTOMER.LastNameKh,
										 MKT_PO_CUSTOMER.Gender,
										 MKT_PO_CUSTOMER.ProductInterest,
										 MKT_PO_CUSTOMER.DateOfContact,
										 MKT_PO_CUSTOMER.Branch,
										 MKT_PO_CUSTOMER.Note,
										 MKT_PO_CUSTOMER.Mobile1,
										 MKT_PO_CUSTOMER.Province,
										 MKT_PO_CUSTOMER.District,
										 MKT_PO_CUSTOMER.Commune,
										 MKT_PO_CUSTOMER.Village,
										 MKT_PO_CUSTOMER.POStatus,
										 MKT_PO_CUSTOMER_ACT.DateOfActivity,
										 MKT_PO_CUSTOMER_ACT.TimeOfActivity,
										 MKT_PO_CUSTOMER_ACT.ActivityDesc,
										 MKT_PO_CUSTOMER_ACT.ActivityType,
										 MKT_PO_CUSTOMER_ACT.PotentialCustomer,
										 MKT_PO_CUSTOMER_STATUS.Description,
										 MKT_PO_CUSTOMER_ACT_TYPE.Description.label('ActivityTypeDesc'),
										 MKT_PO_CUSTOMER_STATUS.Closed,
										 MKT_PO_CUSTOMER_STATUS.Deal
										).join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID== MKT_PO_CUSTOMER.POStatus).\
										join(MKT_PO_CUSTOMER_ACT,MKT_PO_CUSTOMER_ACT.PotentialCustomer==MKT_PO_CUSTOMER.ID).\
										join(MKT_PO_CUSTOMER_ACT_TYPE,MKT_PO_CUSTOMER_ACT_TYPE.ID==MKT_PO_CUSTOMER_ACT.ActivityType).\
										filter(MKT_PO_CUSTOMER.AssignTo==RoleID)


		#Potential Customer Information
		if hasattr(FRM_VIEW_POCUSTOMER_ACT,'SearchPotentialCustomerID'):
			delattr(FRM_VIEW_POCUSTOMER_ACT,'SearchPotentialCustomerID')
		setattr(FRM_VIEW_POCUSTOMER_ACT,'SearchOfficerID',RemoteTextField('Input Officer ID Or Name',default=RoleID))
		if ObjPOCustomer.first() and RoleID:

			delattr(FRM_VIEW_POCUSTOMER_ACT,'SearchOfficerID')
			self.customType = 'Custom'
			self.customButton = {}
			print(CurrentDate)
			ObjPOCustomer 		=	ObjPOCustomer.filter(MKT_PO_CUSTOMER_STATUS.Closed=='No',MKT_PO_CUSTOMER_STATUS.Deal=='No')
			ObjPOCustomerAct 	=	ObjPOCustomerAct.filter(MKT_PO_CUSTOMER_STATUS.Closed=='No',MKT_PO_CUSTOMER_STATUS.Deal=='No').\
										order_by(MKT_PO_CUSTOMER.NextFollowDate.desc()).all()
			POID 				= [NewID.PotentialCustomer for NewID in MKT_PO_CUSTOMER_ACT.query.all()]
			CountPastDue 		= ObjPOCustomer.filter(MKT_PO_CUSTOMER.NextFollowDate<str(CurrentDate),MKT_PO_CUSTOMER.ID.in_(POID)).count()
			CountToday			= ObjPOCustomer.filter(MKT_PO_CUSTOMER.NextFollowDate.ilike('%'+str(CurrentDate) + '%'),MKT_PO_CUSTOMER.ID.in_(POID)).count()
			CountUpcomming		= ObjPOCustomer.filter(MKT_PO_CUSTOMER.NextFollowDate <= str(NextDate),MKT_PO_CUSTOMER.NextFollowDate > str(CurrentDate),MKT_PO_CUSTOMER.ID.in_(POID)).count()
			ObjPOCustomerForCount	= db.session.query(MKT_PO_CUSTOMER).\
									join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID==MKT_PO_CUSTOMER.POStatus).\
									filter(MKT_PO_CUSTOMER.AssignTo==RoleID,MKT_PO_CUSTOMER_STATUS.IsNew=='No')
			GetAllStatus 		= [status.ID for status in MKT_PO_CUSTOMER_STATUS.query.all()]
			Branch 				= session.get('ChangeBranch','')
			CountNewCustomer 	= db.session.query(MKT_PO_CUSTOMER).join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID==MKT_PO_CUSTOMER.POStatus).\
								  filter(MKT_PO_CUSTOMER_STATUS.IsNew=='Yes',MKT_PO_CUSTOMER_STATUS.Branch==Branch).count()
			PoCustomerListSub 	= [{'label':'# New','value':CountNewCustomer ,'urls':[],'color':''}]
			for status in GetAllStatus:
				ObjPoStatusCount = MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.ID==status).first()
				if ObjPoStatusCount.IsNew == 'No':
					Count 	= ObjPOCustomerForCount.filter(MKT_PO_CUSTOMER.POStatus==status).count()
					Label 	= ObjPoStatusCount.Description
					PoCustomerListSub.append({'label':'# %s'%Label,'value':Count ,'urls':[],'color':''})

			PoCustomerTasksListSub = [{'label':'# Past Due','value':CountPastDue,'urls':[],'color':''},
									{'label':'# Today','value':CountToday,'urls':[],'color':''},
									{'label':'# Upcoming','value':CountUpcomming,'urls':[],'color':''}]

			DashboardList = 	[
									{'label':'Officer','value':ObjUser.ID +' - '+ObjUser.DisplayName ,'urls':[],'color':'','is_sub':False},
									{'label':'Potential Customer','value':PoCustomerListSub ,'urls':[],'color':'','is_sub':True},
									{'label':'Tasks','value':PoCustomerTasksListSub ,'urls':[],'color':'','is_sub':True}							
								]

			DashboardDic = {}
			DashboardDic.update({
								'icon':'','size':'6','name':'OfficerDashboard','title': 'Officer Dashboard','type':'List','data':DashboardList,'most_data':MostData
							})
			BodyList.append(DashboardDic)





			
			PotentialCustomerActDic = {}			
			PotentialCustomerActList = []
			No 	=	1
			POIDList = [NewID.ID for NewID in ObjPOCustomer.order_by(MKT_PO_CUSTOMER.NextFollowDate).all()]
			for POID in POIDList:
				ObjPOCustomerAct = 	db.session.query(MKT_PO_CUSTOMER.NextFollowDate,
										 MKT_PO_CUSTOMER.ID,
										 MKT_PO_CUSTOMER.FirstNameEn,
										 MKT_PO_CUSTOMER.LastNameEn,
										 MKT_PO_CUSTOMER.FirstNameKh,
										 MKT_PO_CUSTOMER.LastNameKh,
										 MKT_PO_CUSTOMER.Gender,
										 MKT_PO_CUSTOMER.ProductInterest,
										 MKT_PO_CUSTOMER.DateOfContact,
										 MKT_PO_CUSTOMER.Branch,
										 MKT_PO_CUSTOMER.Note,
										 MKT_PO_CUSTOMER.Mobile1,
										 MKT_PO_CUSTOMER.Province,
										 MKT_PO_CUSTOMER.District,
										 MKT_PO_CUSTOMER.Commune,
										 MKT_PO_CUSTOMER.Village,
										 MKT_PO_CUSTOMER.POStatus,
										 MKT_PO_CUSTOMER_ACT.DateOfActivity,
										 MKT_PO_CUSTOMER_ACT.TimeOfActivity,
										 MKT_PO_CUSTOMER_ACT.ActivityDesc,
										 MKT_PO_CUSTOMER_ACT.ActivityType,
										 MKT_PO_CUSTOMER_ACT.PotentialCustomer,
										 MKT_PO_CUSTOMER_ACT.ID.label('ActID'),
										 MKT_PO_CUSTOMER_ACT.NextAction,
										 MKT_PO_CUSTOMER_STATUS.Description,
										 MKT_PO_CUSTOMER_ACT_TYPE.Description.label('ActivityTypeDesc'),
										 MKT_PO_CUSTOMER_STATUS.Closed,
										 MKT_PO_CUSTOMER_STATUS.Deal

										).join(MKT_PO_CUSTOMER_ACT,MKT_PO_CUSTOMER_ACT.PotentialCustomer==MKT_PO_CUSTOMER.ID).\
										join(MKT_PO_CUSTOMER_ACT_TYPE,MKT_PO_CUSTOMER_ACT_TYPE.ID==MKT_PO_CUSTOMER_ACT.ActivityType).\
										join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID==MKT_PO_CUSTOMER_ACT_TYPE.POStatus).\
										filter(MKT_PO_CUSTOMER.ID==POID,MKT_PO_CUSTOMER_STATUS.Closed=='No',MKT_PO_CUSTOMER.AssignTo==RoleID).first()
										# ).join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID== MKT_PO_CUSTOMER.POStatus).\
										# join(MKT_PO_CUSTOMER_ACT,MKT_PO_CUSTOMER_ACT.PotentialCustomer==MKT_PO_CUSTOMER.ID).\
										# join(MKT_PO_CUSTOMER_ACT_TYPE,MKT_PO_CUSTOMER_ACT_TYPE.ID==MKT_PO_CUSTOMER_ACT.ActivityType).\
										# filter(MKT_PO_CUSTOMER.ID==POID).first()
					#Activity Type
				if ObjPOCustomerAct:
					PotentialStatusColor = ''
					PotentialStatusName = ''
					if ObjPOCustomerAct.NextFollowDate:
						NextFollowDate 	=	datetime.strptime(str(ObjPOCustomerAct.NextFollowDate), '%Y-%m-%d')
						if NextFollowDate <= datetime.strptime(str(NextDate),'%Y-%m-%d') and NextFollowDate > datetime.strptime(str(CurrentDate),'%Y-%m-%d') :
							PotentialStatusName = 'Upcoming'
							PotentialStatusColor = '#f4b04f'
						if NextFollowDate == datetime.strptime(str(CurrentDate),'%Y-%m-%d'):
							PotentialStatusName = 'Today'
							PotentialStatusColor = '#5cb85c'

						if NextFollowDate < datetime.strptime(str(CurrentDate),'%Y-%m-%d'):
							PotentialStatusName = 'Past Due'
							PotentialStatusColor = '#d9534f'

					NoNum  = {'key':'No' ,'value':No,'color':''}
					Name  = {'key':'Name' ,'value':ObjPOCustomerAct.LastNameEn + " " + ObjPOCustomerAct.FirstNameEn ,'color':''} 
					NextFollowDate = {'key':'Next Follow-up Date' ,'value':ObjPOCustomerAct.NextFollowDate,'color':''}  
					Status = {'key':'Status' ,'value':ObjPOCustomerAct.Description,'color':'#1d89cf'}  
					NextFollowDateStatus = {'key':'Follow-up Date' ,'value':PotentialStatusName,'color':PotentialStatusColor} 
					Description = {'key':'Description' ,'value':ObjPOCustomerAct.NextAction,'color':''}  

					# ActivityType = {'key':'Activity Type' ,'value':ObjPOCustomerAct.ActivityTypeDesc,'color':''}
					NextFollowDate = {'key':'FollowUp Date' ,'value':ObjPOCustomerAct.NextFollowDate,'color':''}  
					# ActivityBy = {'key':'Activity By' ,'value':col.ActivityBy,'color':''}  
					# DateOfActivity = {'key':'Date Of Activity' ,'value':col.DateOfActivity,'color':''}  
					# PotentialStatus = {'key':'Date Of Activity' ,'value':col.DateOfActivity,'color':''}  
					FollowUpDate = {'key':'Follow Up','value':'%s (%s)'%(ObjPOCustomerAct.NextFollowDate,PotentialStatusName),'color':PotentialStatusColor}

					Column 			= 	[NoNum,FollowUpDate,Name,Description]
					ImportantField 	= 	[Description,FollowUpDate]

					PotentialCustomerActList.append({'columns':Column,
										'urls':[
												{'url':'/POCustomerAct/?ID=%s'%ObjPOCustomerAct.ActID,'type_url':'Form','icon':'eye','text':'View | '},
												{'url':'/POCustomerAct/New/?POID=%s'%ObjPOCustomerAct.ID,'type_url':'Form','icon':'plus','text':'Add'}
											],
										'important':ImportantField
										})
					No+=1
			PotentialCustomerActDic.update({
						'icon':'','size':'6','name':'Tasks&Todo','title': 'Tasks & Todo ( %s )'%len(PotentialCustomerActList),'type':'Table','data':PotentialCustomerActList,'most_data':True,'expand':False

					})

			BodyList.append(PotentialCustomerActDic)








			

			#For Potential Customer
			PotentialCustomerDic = {}			
			PotentialCustomerList = []
			for col in ObjPOCustomer.all():
				ObjPoStatus = MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.ID==col.POStatus).first()


				#Activity Type
				CurrentDate 	= 	mktdate.getDateISO()
				NextDate        =	mktdate.getNextDay(CurrentDate, 10)
				PotentialStatusColor = ''
				PotentialStatusName = ''
				if col.NextFollowDate:
					NextFollowDate 	=	datetime.strptime(str(col.NextFollowDate), '%Y-%m-%d')
					if NextFollowDate <= datetime.strptime(str(NextDate),'%Y-%m-%d') and NextFollowDate > datetime.strptime(str(CurrentDate),'%Y-%m-%d')  :
						PotentialStatusName = 'Upcoming'
						PotentialStatusColor = '#f4b04f'
					if NextFollowDate == datetime.strptime(str(CurrentDate),'%Y-%m-%d'):
						PotentialStatusName = 'Today'
						PotentialStatusColor = '#5cb85c'

					if NextFollowDate < datetime.strptime(str(CurrentDate),'%Y-%m-%d') :
						PotentialStatusName = 'Past Due'
						PotentialStatusColor = '#d9534f'

				PoID  = {'key':'ID' ,'value':col.ID,'color':''} 
				Gender  = {'key':'Gender' ,'value':col.Gender,'color':''} 
				DateOfContact  = {'key':'Date Of Contact' ,'value':col.DateOfContact,'color':''} 
				Name  = {'key':'Name' ,'value':col.LastNameEn + " " + col.FirstNameEn ,'color':''} 
				NextFollowDate = {'key':'Next Follow Date' ,'value':col.NextFollowDate,'color':''}  
				Status = {'key':'Status' ,'value':ObjPoStatus.Description,'color':'#1d89cf'}  
				NextFollowDateStatus = {'key':'Next FollowDate Status' ,'value':PotentialStatusName,'color':PotentialStatusColor}  
				Mobiles 			 = [col.Mobile1, col.Mobile2]
				ValuePoMobile		 = ' / '.join(filter(None,Mobiles))
				Mobile = {'key':'Mobile' ,'value':ValuePoMobile,'color':''} 
				ValuePoAddress			= mktaddress.getAddress(
														ProvinceID = col.Province,
														DistrictID = col.District,
														CommuneID  = col.Commune,
														VillageID  = col.Village,
														HouseNo    = col.HouseNo,
														Street     = col.Street
													)
				Address = {'key':'Address' ,'value':ValuePoAddress,'color':''}  

				Column 			= 	[Status,PoID,Name,Gender,DateOfContact,Mobile,Address]
				ImportantField 	= 	[Status,Name,Gender]
				PotentialCustomerList.append({'columns':Column,
									'urls':[
											{'url':'/POCustomerByCustomer/?ID=%s'%col.ID,'type_url':'Custom','icon':'','text':'View'}
										],
									'important':ImportantField
									})
			PotentialCustomerDic.update({
						'icon':'','size':'12','name':'ActivePotentialCustomer','title': 'Active Potential Customer ( %s )'%len(PotentialCustomerList),'type':'Table','data':PotentialCustomerList,'most_data':True,'expand':False
					})

			BodyList.append(PotentialCustomerDic)
			#End Potential Customer
		else:
			if RoleID:

				flash('Warning, %s Record not found'%RoleID,'error')

			




		BodyDict.update({
				'header':[],'data':BodyList
				})
		#End Potential Customer Information
			
		self.kwargs 	=	{
					'recordID':RoleID,
					'bodyData':BodyDict
		}
		self.body 		= BodyDict
		self.recordID 	= RoleID
		self.form 		= FRM_VIEW_POCUSTOMER_ACT
		return True


class CLS_ViePOCustomerByCurrentOfficer(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation
		
	def globalProcess(self):

		BodyList 		= []
		BodyDict 		= {}
		MostData 		= True
		RoleID = session.get('getLogInID','')
		ObjPOCustomerAct = db.session.query(MKT_PO_CUSTOMER.NextFollowDate,
										 MKT_PO_CUSTOMER.ID,
										 MKT_PO_CUSTOMER.FirstNameEn,
										 MKT_PO_CUSTOMER.LastNameEn,
										 MKT_PO_CUSTOMER.FirstNameKh,
										 MKT_PO_CUSTOMER.LastNameKh,
										 MKT_PO_CUSTOMER.Gender,
										 MKT_PO_CUSTOMER.ProductInterest,
										 MKT_PO_CUSTOMER.DateOfContact,
										 MKT_PO_CUSTOMER.Branch,
										 MKT_PO_CUSTOMER.Note,
										 MKT_PO_CUSTOMER.Mobile1,
										 MKT_PO_CUSTOMER.Province,
										 MKT_PO_CUSTOMER.District,
										 MKT_PO_CUSTOMER.Commune,
										 MKT_PO_CUSTOMER.Village,
										 MKT_PO_CUSTOMER.POStatus,
										 MKT_PO_CUSTOMER_ACT.DateOfActivity,
										 MKT_PO_CUSTOMER_ACT.TimeOfActivity,
										 MKT_PO_CUSTOMER_ACT.ActivityDesc,
										 MKT_PO_CUSTOMER_ACT.PotentialCustomer,
										 MKT_PO_CUSTOMER_STATUS.Description,
										 MKT_PO_CUSTOMER_STATUS.Closed,
										 MKT_PO_CUSTOMER_STATUS.Deal
										).join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID== MKT_PO_CUSTOMER.POStatus).\
										join(MKT_PO_CUSTOMER_ACT,MKT_PO_CUSTOMER_ACT.PotentialCustomer==MKT_PO_CUSTOMER.ID).\
										filter(MKT_PO_CUSTOMER_STATUS.Closed=='No',MKT_PO_CUSTOMER_STATUS.Deal=='No',MKT_PO_CUSTOMER.AssignTo==RoleID).\
										order_by(MKT_PO_CUSTOMER.NextFollowDate.desc()).all()


		#Potential Customer Information
		if hasattr(FRM_VIEW_POCUSTOMER_ACT,'SearchPotentialCustomerID'):
			delattr(FRM_VIEW_POCUSTOMER_ACT,'SearchPotentialCustomerID')
		setattr(FRM_VIEW_POCUSTOMER_ACT,'SearchOfficerID',RemoteTextField('Input Officer ID Or Name',default=RoleID))
		if ObjPOCustomerAct:
			delattr(FRM_VIEW_POCUSTOMER_ACT,'SearchOfficerID')
			self.customType = 'Custom'
			RejectedStatus 	= '5'
			AppliedStatus 	= '4'
			MeetingStatus 	= '3'
			AssignStatus 	= '2'
			NewStatus 		= '1'
			

			


			PotentialCustomerActDic = {}			
			PotentialCustomerActList = []
			for col in ObjPOCustomerAct:
				# ObjPoStatus = MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.ID==col.POStatus).first()


				#Activity Type
				CurrentDate 	= 	mktdate.getDateISO()
				NextDate        =	mktdate.getNextDay(CurrentDate, 2)
				PotentialStatusColor = ''
				PotentialStatusName = ''
				if col.NextFollowDate:
					NextFollowDate 	=	datetime.strptime(str(col.NextFollowDate), '%Y-%m-%d')
					if NextFollowDate <= datetime.strptime(str(NextDate),'%Y-%m-%d') and NextFollowDate > datetime.strptime(str(CurrentDate),'%Y-%m-%d'):
						PotentialStatusName = 'Upcoming'
						PotentialStatusColor = '#f4b04f'
					if NextFollowDate == datetime.strptime(str(CurrentDate),'%Y-%m-%d'):
						PotentialStatusName = 'Today'
						PotentialStatusColor = '#5cb85c'

					if NextFollowDate < datetime.strptime(str(CurrentDate),'%Y-%m-%d') :
						PotentialStatusName = 'Past Due'
						PotentialStatusColor = '#d9534f'

				Name  = {'key':'Name' ,'value':col.LastNameEn + " " + col.FirstNameEn ,'color':''} 
				NextFollowDate = {'key':'Next Follow Date' ,'value':col.NextFollowDate,'color':''}  
				Status = {'key':'Status' ,'value':col.Description,'color':'#1d89cf'}  
				NextFollowDateStatus = {'key':'Next FollowDate Status' ,'value':PotentialStatusName,'color':PotentialStatusColor}  
				# NextFollowDate = {'key':'FollowUp Date' ,'value':col.NextFollowDate,'color':''}  
				# ActivityBy = {'key':'Activity By' ,'value':col.ActivityBy,'color':''}  
				# DateOfActivity = {'key':'Date Of Activity' ,'value':col.DateOfActivity,'color':''}  
				# PotentialStatus = {'key':'Date Of Activity' ,'value':col.DateOfActivity,'color':''}  

				Column 			= 	[Name,NextFollowDate,NextFollowDateStatus,Status]
				ImportantField 	= 	[Name,NextFollowDate,Status]
				PotentialCustomerActList.append({'columns':Column,
									'urls':[
											{'url':'/POCustomerByCustomer/?ID=%s'%col.ID,'type_url':'Custom','icon':'','text':'View'},
											{'url':'/ViewPOCustomerByCustomer/?ID=%s'%col.ID,'type_url':'Custom','icon':''},
											{'url':'/POCustomerAct/New/?POID=%s'%RecordID,'type_url':'Form','icon':'plus'}
										],
									'important':ImportantField
									})
			PotentialCustomerActDic.update({
						'icon':'','size':'12','name':'PotentialCustomer','title': 'Task To-do List','type':'Table','data':PotentialCustomerActList,'most_data':False,'expand':False
					})

			BodyList.append(PotentialCustomerActDic)




		BodyDict.update({
				'header':[],'data':BodyList
				})
		#End Potential Customer Information
			
		self.kwargs 	=	{
					'recordID':RoleID,
					'bodyData':BodyDict
		}
		self.body 		= BodyDict
		self.recordID 	= RoleID
		self.form 		= FRM_VIEW_POCUSTOMER_ACT
		return True


	

	
registerCRUD(admin, '/POCustomerByCustomer', 'POCustomerByCustomer',FRM_VIEW_POCUSTOMER_ACT, [],template="potentialcustomer/searchbycustomer.html",form_type='MainCustom',custom_form_data=CLS_ViePOCustomerByCustomer)
registerCRUD(admin, '/POCustomerByOfficer', 'POCustomerByOfficer',FRM_VIEW_POCUSTOMER_ACT, [],template="potentialcustomer/searchbyofficer.html",form_type='MainCustom',custom_form_data=CLS_ViePOCustomerByOfficer)
registerCRUD(admin, '/POCustomerByCurrentOfficer', 'POCustomerByCurrentOfficer',FRM_VIEW_POCUSTOMER_ACT, [],template="potentialcustomer/searchbycurrentofficer.html",form_type='Custom',custom_form_data=CLS_ViePOCustomerByCurrentOfficer)
