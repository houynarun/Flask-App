from  	app.mktcore.wtfimports 				import *
from 	.models 							import *
import 	time

from app.PotentialCustomer.models 			import *
from app.PotentialCustomerAct.models 		import *
import app.Customer.forms 					as customer
import app.PotentialCustomer.forms 			as pocustomer
import app.tools.user 						as mktuser

import app.tools.mktdate 					as mktdate
import app.tools.mktaudit 					as mktaudit
from app.tools								import mktdb
from sqlalchemy 							import or_, func

def loadPotentialCust(ID=''):
	# RejectedStatus = '5'
	# ExcludePOStatus = [RejectedStatus]
	
	Branch 			= mktuser.getCurrentBranch()	
	UserID 			= mktuser.getUser().ID	
	# IDForm 			= request.form['ID'] if  request.method == "POST" else g.formID
	# ActObj 			= MKT_PO_CUSTOMER_ACT.query.get(IDForm)
	# if ActObj: 
	# 	POObj 		= MKT_PO_CUSTOMER.query.get(ActObj.PotentialCustomer)
	# 	if POObj.POStatus == RejectedStatus:
	# 		del ExcludePOStatus[:]
	# 		ExcludePOStatus = ['1','2','3','4']
	POStatusList = [NewID.ID for NewID in MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.Closed=='No').all()]
	QueryString = MKT_PO_CUSTOMER.query.filter(MKT_PO_CUSTOMER.POStatus.in_(POStatusList)).\
						filter(MKT_PO_CUSTOMER.AssignTo==UserID).\
						filter(MKT_PO_CUSTOMER.AssignBranch==Branch).\
						order_by(MKT_PO_CUSTOMER.ID.asc())

	# QueryString 	= MKT_PO_CUSTOMER.query.\
	# 					filter(MKT_PO_CUSTOMER.AssignBranch==Branch).\
	# 					filter(~MKT_PO_CUSTOMER.POStatus.in_(ExcludePOStatus)).\
	# 					filter(MKT_PO_CUSTOMER.AssignTo==UserID).\
	# 					order_by(MKT_PO_CUSTOMER.ID.asc())

	if ID:
		QueryString = QueryString.filter(MKT_PO_CUSTOMER.ID==ID).first()
	else:
		QueryString = QueryString

	return QueryString

def loadPotentialStatus():	
	return MKT_PO_CUSTOMER_STATUS.query.order_by(MKT_PO_CUSTOMER_STATUS.Order.asc())

def loadActivityType():

	QueryObj 		= MKT_PO_CUSTOMER_ACT_TYPE.query.\
							order_by(MKT_PO_CUSTOMER_ACT_TYPE.Order.asc())
	return QueryObj

@app.route("/Morakot/checkActType",methods=["GET"])
@app.route("/Morakot/API/checkActType",methods=["GET"])
def checkActType():
	Bool  		  = 'false'

	ActivityType  = request.args.get('ActivityType')

	if ActivityType == '3':
		Bool 	  = 'true'

	return jsonify(Bool=Bool)

@app.route("/Morakot/checkNextFollowDate",methods=["GET"])
@app.route("/Morakot/API/checkNextFollowDate",methods=["GET"])
def checkNextDate():
	followDate    = 'false'
	ActivityType  =  request.args.get('ActivityType')

	if ActivityType == '3':
		followDate = 'true'
	return jsonify(followDate=followDate)

def custom_DateOfActivity(form,field):

	DateOfActivity = request.form['DateOfActivity']

	if DateOfActivity:
		# clear out processing errors
		field.errors[:] = []

		CheckFormatDate = mktdate.isDateISO(DateOfActivity)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

	else:
		# clear out processing errors
		field.errors[:] = []

		# raise ValidationError("This field is required.")

def custom_NextFollowDate(form,field):

	NextFollowDate = request.form['NextFollowDate']

	if NextFollowDate:
		# clear out processing errors
		field.errors[:] = []

		CheckFormatDate = mktdate.isDateISO(NextFollowDate)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

	else:
		# clear out processing errors
		field.errors[:] = []

		# raise ValidationError("This field is required.")
def loadPotentialStatus():
	return MKT_PO_CUSTOMER_STATUS.query

@app.route('/Morakot/RemoteLoadPOCustomer')
@app.route('/Morakot/API/RemoteLoadPOCustomer')
def remoteLoadPotentialCust():
	Branch 			= mktuser.getCurrentBranch()	
	UserID 			= mktuser.getUser().ID	
	search 	= 	request.args.get("q").strip()
	action 	= 	request.args.get('action')
	NAMES 	=	[]
	QueryString 	= db.session.query(
										MKT_PO_CUSTOMER.ID,
										MKT_PO_CUSTOMER.FirstNameEn,
										MKT_PO_CUSTOMER.LastNameEn,
										MKT_PO_CUSTOMER.FirstNameKh,
										MKT_PO_CUSTOMER.LastNameKh,
										MKT_PO_CUSTOMER_STATUS.Description
					).join(MKT_PO_CUSTOMER_STATUS,MKT_PO_CUSTOMER_STATUS.ID==MKT_PO_CUSTOMER.POStatus).\
					filter(MKT_PO_CUSTOMER.AssignBranch==Branch).\
					filter(or_(MKT_PO_CUSTOMER.ID.ilike('%'+search+'%'),
					MKT_PO_CUSTOMER.FirstNameEn.ilike('%'+search+'%'),
					MKT_PO_CUSTOMER.LastNameEn.ilike('%'+search+'%'),
					MKT_PO_CUSTOMER.FirstNameKh.ilike('%'+search+'%'),
					MKT_PO_CUSTOMER.LastNameKh.ilike('%'+search+'%')))

	# QueryString = MKT_PO_CUSTOMER.query.\
	# 					filter(MKT_PO_CUSTOMER.AssignBranch==Branch)
						

	if action == 'view':
		QueryString = QueryString.order_by(MKT_PO_CUSTOMER.ID.asc()).all()
	else:
		QueryString = QueryString.filter(MKT_PO_CUSTOMER.AssignTo==UserID).\
					  order_by(MKT_PO_CUSTOMER.ID.asc()).all()
	for row in QueryString:
		dic = {"id":row.ID, "text":'%s - %s %s (%s)'%(row.ID,row.LastNameEn, row.FirstNameEn,row.Description)}
		NAMES.append(dic)

	# app.logger.debug(NAMES)
	return jsonify(items = NAMES)

#PotentialActivityType
class FRM_PO_CUSTOMER_ACT_TYPE(exform):
	Description 	=	TextField(requiredlabel("Description","*"),[validators.Required()])
	POStatus 		=	QuerySelectField('Status',
							query_factory=loadPotentialStatus,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--')
	Order 			=	TextField('Order')

	def validate_Order(form,field):
		Data = field.data
		if len(Data) >10:
			raise ValidationError('Integer must be smaller then 999999999.')
		try:
			int(Data)
		except Exception as e:
			raise ValidationError('Allow integer only.')
	

#PotentialCustomer
class FRM_PO_CUSTOMER_ACT(exform):
	PotentialCustomer 	=	RemoteTextField(requiredlabel('Potential Customer','*'),dicRemote={'url':'/Morakot/RemoteLoadPOCustomer'},validators=[validators.Required()])
	ActivityType 		=	QuerySelectField(requiredlabel('Activity Type','*'),
							query_factory=loadActivityType,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							validators=[validators.Required()],
							blank_text=u'--None--')

	DateOfActivity		=	DateField("Date Of Activity",
							format='%Y-%m-%d',
							default=mktdate.getDateISO(),
							validators=[validators.Required(),custom_DateOfActivity])

	TimeOfActivity 		=	DateTimeField("Time Of Activity",
							validators=[custom_DateOfActivity])
	
	POStatus 			=	QuerySelectField('Potential Status',
							query_factory=loadPotentialStatus,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--')

	ActivityBy			=	QuerySelectField('ActivityBy',
							query_factory=pocustomer.loadUser,
							get_label=lambda a: a.DisplayName,
							allow_blank=True,
							blank_text=u'--None--')
	ActivityDesc 		=	TextAreaField(requiredlabel('Activity Description','*'),
							 validators=[validators.Required()])

	NextFollowDate 		=	DateField("Next Follow up Date",
							format='%Y-%m-%d',
							validators=[custom_NextFollowDate])
	NextAction 		=	TextAreaField('Next Action')

	def validate_DateOfActivity(form,field):
		ID 					=	request.form.get('ID')
		DateOfActivity 		= 	field.data
		PotentialCustomer 	= 	request.form.get('PotentialCustomer')
		ObjPOCustomer   	=	MKT_PO_CUSTOMER_ACT.query.filter(MKT_PO_CUSTOMER_ACT.PotentialCustomer==PotentialCustomer).\
								filter(MKT_PO_CUSTOMER_ACT.ID != ID).\
								order_by(MKT_PO_CUSTOMER_ACT.NextFollowDate.desc()).first()
		if ObjPOCustomer:
			if ObjPOCustomer.NextFollowDate:
				if datetime.strptime(str(DateOfActivity),'%Y-%m-%d') < datetime.strptime(str(ObjPOCustomer.NextFollowDate),'%Y-%m-%d'):
					Message 	=	'Date Activity must be bigger then previous next follow up date (%s)'%ObjPOCustomer.NextFollowDate
					raise ValidationError(Message)

	def validate_ActivityType(form,field):
		ActivityType = request.form.get('ActivityType')
		POCustomerID = request.form.get('PotentialCustomer')

		ObjPOCustomerActi = MKT_PO_CUSTOMER_ACT_TYPE.query.get(ActivityType)
		AllowStatus 	=	[]
		ObjPOCustomer = db.session.query(MKT_PO_CUSTOMER_STATUS.AllowStatus,
										MKT_PO_CUSTOMER_STATUS.Description,
										MKT_PO_CUSTOMER_STATUS.ID
								).join(MKT_PO_CUSTOMER,MKT_PO_CUSTOMER.POStatus==MKT_PO_CUSTOMER_STATUS.ID).\
								filter(MKT_PO_CUSTOMER.ID==POCustomerID).first()

		if ObjPOCustomer:
			AllowStatus = ObjPOCustomer.AllowStatus.split(' ')
			if not ObjPOCustomerActi.POStatus in AllowStatus:
				Message = 'Current status %s-%s not allow to set this activity type'%(ObjPOCustomer.ID,ObjPOCustomer.Description)
				raise ValidationError(Message)

	def validate_NextFollowDate(form, field): 
		ActivityType = request.form.get('ActivityType')

		ObjPOCustomerActi = MKT_PO_CUSTOMER_ACT_TYPE.query.get(ActivityType) 
		POStatus 			=	ObjPOCustomerActi.POStatus if ObjPOCustomerActi else ''
		ObjPOCustomerStatus = MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.Closed=='No',
																  MKT_PO_CUSTOMER_STATUS.Deal=='No',
																  MKT_PO_CUSTOMER_STATUS.ID==POStatus).first()
		if ObjPOCustomerStatus:
			if not form.NextFollowDate.data:
				raise ValidationError('This field is required.')	

		if form.DateOfActivity.data and form.NextFollowDate.data:
			if datetime.strptime(str(form.NextFollowDate.data),'%Y-%m-%d') < datetime.strptime(str(form.DateOfActivity.data),'%Y-%m-%d'):
				Message = 'Next Follow Up Date must be bigger than date of activity (%s)'%form.DateOfActivity.data
				raise ValidationError(Message)	

	def validate_NextAction(form, field): 
		ActivityType = request.form.get('ActivityType')
		ObjPOCustomerActi = MKT_PO_CUSTOMER_ACT_TYPE.query.get(ActivityType) 
		POStatus 			=	ObjPOCustomerActi.POStatus if ObjPOCustomerActi else ''
		ObjPOCustomerActi = MKT_PO_CUSTOMER_ACT_TYPE.query.get(ActivityType) 
		ObjPOCustomerStatus = MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.Closed=='No',
																  MKT_PO_CUSTOMER_STATUS.Deal=='No',
																  MKT_PO_CUSTOMER_STATUS.ID==POStatus).first()
		if ObjPOCustomerStatus:
			if not form.NextAction.data:
				raise ValidationError('This field is required.')	
	@staticmethod
	def formReadOnly():
		return ['AUTH']

	@staticmethod
	def setWidth():
		control_list = [
						("TimeOfActivity", len1),
						("DateOfActivity", len3),
						("NextFollowDate",len3),
						]
		return control_list

	@staticmethod
	def setVisible():
		return ['POStatus','ActivityBy']

	@staticmethod
	def setDisable():
		actType = request.form.get('ActivityType') if 'ActivityType' in request.form else request.args.get('ActivityType')
		if actType == '3':
			return ['NextFollowDate']
		else:
			return []

	@staticmethod
	def hotSelectField():
		hotfield=[]

	
		fielddisplay="District,#Commune, #Village"
		varname="ProvinceID:$('#Province').val()"
		fun=["Province", varname ,fielddisplay, "/Morakot/DistrictID", "click"]
		hotfield.append(fun)

		fielddisplay="Commune, #Village"
		varname="DistrictID:$('#District').val()"
		fun=["District", varname ,fielddisplay, "/Morakot/CommuneID", "click"]
		hotfield.append(fun)

		fielddisplay="Village"
		varname="CommuneID:$('#Commune').val()"
		fun=["Commune", varname ,fielddisplay, "/Morakot/VillageID", "click"]
		hotfield.append(fun)
	
		return hotfield

	@staticmethod
	def hotField():

		hotfield=[]
		# 'True':hide, False: show
		
		fielddisplay = 	"(data.Bool=='true')?\
					    $('#NextFollowDate').val('').attr('readonly','readonly').on('click focus',function(){$('body').find('.datepicker:last').css('display','none');}):\
					    $('#NextFollowDate').removeAttr('readonly').on('click focus',function(){$('body').find('.datepicker:last').css('display','block');});"
		varname 	= 	"ActivityType:$('#ActivityType').val()"
		fun 		= 	["ActivityType", varname ,fielddisplay, "/Morakot/checkActType", "change"]
		hotfield.append(fun)

		fielddisplay =  "(data.followDate=='true')?\
						$('body').find('.datepicker:last').css('display','none'):\
						$('body').find('.datapicker:last').css('display','block');"
		varname 	=	"ActivityType:$('#ActivityType').val()"
		fun 		=	["NextFollowDate", varname ,fielddisplay, "/Morakot/checkNextFollowDate", "click focus"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def redirectAfterInsert():	

		try:
			ID 					= request.form['ID']
			NextFollowDate 		= request.form['NextFollowDate']
			PotentialCustomer 	= request.form['PotentialCustomer']
			ActivityType 		= request.form['ActivityType']
			POCustomerObj 		= MKT_PO_CUSTOMER.query.get(PotentialCustomer)

			POCustomerStatusObj = db.session.query(
												   MKT_PO_CUSTOMER_ACT.ActivityType,
												   MKT_PO_CUSTOMER_ACT_TYPE.POStatus
												).join(MKT_PO_CUSTOMER_ACT_TYPE,MKT_PO_CUSTOMER_ACT_TYPE.ID==MKT_PO_CUSTOMER_ACT.ActivityType).\
												filter(MKT_PO_CUSTOMER_ACT.ActivityType==ActivityType).first()

			Data = {}
			if POCustomerStatusObj:
				POStatus = POCustomerStatusObj.POStatus
				Data.update({'POStatus': POStatus})

			POActObj = db.session.query(MKT_PO_CUSTOMER_ACT).\
									filter_by(PotentialCustomer=PotentialCustomer).\
									order_by(MKT_PO_CUSTOMER_ACT.ID.desc()).first()
			if POActObj:
				if ID == POActObj.ID:
					Data.update({'NextFollowDate': NextFollowDate})

			if Data:
				Curr = 	int(POCustomerObj.Curr)+1
				Data.update({'Curr' 	:	str(Curr),
						'Inputter' 		:	mktuser.getUser().ID,
						'Createdon' 	: 	mktdate.getDateTimeNow(),
						'Authorizer' 	: 	mktuser.getUser().ID,
						'Authorizeon'	: 	mktdate.getDateTimeNow()})

				mktaudit.moveAUTHtoHIST(MKT_PO_CUSTOMER,MKT_PO_CUSTOMER_HIST,PotentialCustomer)
				mktdb.updateRecord(MKT_PO_CUSTOMER, [MKT_PO_CUSTOMER.ID == PotentialCustomer], Data)
				db.session.commit()
			return None

		except Exception, e:
			raise
			flash(msg_error+'%s'%e)
			db.session.rollback()
			return False
	@staticmethod
	def reverseRec():
		POCustomerActObj = MKT_PO_CUSTOMER_ACT.query.get(g.formID)
		POID 			 = POCustomerActObj.PotentialCustomer if POCustomerActObj else ''
		if POID:
			POCustomerObj = MKT_PO_CUSTOMER.query.get(POID)
			if POCustomerObj:
				POCustomerActObj = db.session.query(MKT_PO_CUSTOMER_ACT_TYPE.POStatus).\
													join(MKT_PO_CUSTOMER_ACT,MKT_PO_CUSTOMER_ACT.ActivityType==MKT_PO_CUSTOMER_ACT_TYPE.ID).\
													filter(MKT_PO_CUSTOMER_ACT.PotentialCustomer==POCustomerObj.ID).\
													order_by(MKT_PO_CUSTOMER_ACT.DateOfActivity.desc()).first()
				print POCustomerActObj.POStatus
				POCustomerObj.POStatus = POCustomerActObj.POStatus if POCustomerActObj else ''
				db.session.add(POCustomerObj)
				db.session.commit()
				return False,''
		else:
			return False,''