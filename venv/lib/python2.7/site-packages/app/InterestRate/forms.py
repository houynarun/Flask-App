from wtforms import DecimalField
from app.mktcore.wtfimports import *
from .models import *
import time
from app.Interest.models import MKT_INTEREST
from app.Currency.models import MKT_CURRENCY

class FRM_INTEREST_RATE(exform):
	Description = TextField(requiredlabel("Description", "*"), [validators.Required()])
	Rate = TextField(requiredlabel("Rate","*"), [validators.Required('Rate is required number value.')])

	def validate_Rate(form, field):
		try:

			valRate = form.Rate.data
			valRate = valRate.split()
			NumOfLen = len(valRate)

			if NumOfLen == 1:
				float(valRate[0])

			elif NumOfLen == 2:
				Val1 = float(valRate[0])
				Val2 = float(valRate[1])

				if Val1 >= Val2:
					raise ValidationError("First value must be smaller than second value.")

			else:
				raise ValidationError("Only two values are allowed.")

		except:
			raise

	@staticmethod
	def beforeInsert():
		ID = request.form['ID']
		if len(ID) != 6:
			raise ValidationError(" The ID must be 6 digit")
		else:
			ID = ID[:3]
			Interest = MKT_INTEREST.query.get(ID)
			if Interest:
				ID = request.form['ID'][-3:]
				Currency = MKT_CURRENCY.query.get(ID)
				if Currency:
					return True
				else:
					raise ValidationError(" The currency key#%s does not exist" %ID)
					return False
			else:
				raise ValidationError(" The interest key#%s does not exist" %ID)
				return False