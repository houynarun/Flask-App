// Initialize Menu and Sortable
function Menu_init() {
	var oldContainer;
	$("ol.example").sortable({
	  group: 'nested',
	  exclude: '.unsortable', // exclude module description from being drage droped
	  afterMove: function ($placeholder, container,$closestItemOrContainer) {
	    if(oldContainer != container){
	      if(oldContainer)
	        oldContainer.el.removeClass("active");
	      container.el.addClass("active");

	      oldContainer = container;
	    }
	    // console.log($closestItemOrContainer);
	  },
	  onDrop: function ($item, container, _super) {
	    // container.el.removeClass("active");
	    _super($item, container);
	    // return false;
	    li = $item;

	    checkChild();

	    // function check if nested level is already 2 level,
	    // move the li item to it original parent by module ID
	    if(li.parents('li').parents('li').length >= 2)
	    {
	    		// for item created from no module
	    		$('ol.example:last').append(li); // append it to the last
	    		$('ol.example:last').find('ol').find(li).remove(); // then remove it from ol parent
	    }

	    // console.log(li);
	    var children = li.children().children();
	    var child;
	    var numOfChildren = children.length;
	    containerID = container.target[0].id;
	    if (containerID !== 'myUL')
	    {
	    	if(numOfChildren == 1){
		        li.children('a').css({
		            'visibility':'visible'
		        });
	    	}else {
	    		for (var element in children){
	    			child = children[element].nodeName;
	    			if(child=='LI'){
	    				$(children[element]).find('a').css('visibility','visible');
	    			}else if(child=='A'){
	    				$(children[element]).css('visibility','visible');
	    			}
	    		}
	    	}
	    }
	    else
	    {
	        li.children('a').css('visibility','hidden');
	    }
	  },
	  isValidTarget: function ($item, container) {
	      var depth = 1, // Start with a depth of one (the element itself)
	          maxDepth = 3,
	          children = $item.find('ol').first().find('li');

	      // Add the amount of parents to the depth
	      depth += container.el.parents('ol').length;

	      // Increment the depth for each time a child
	      while (children.length) {
	          depth++;
	          children = children.find('ol').first().find('li');
	      }

	      return depth <= maxDepth;
	  }

	});

	// init filter
	    // Function to change Icon
	    $('body').on('click','#changeIcon',function () {
	        $(this).popover({
	            html: true,
	            template: '<div class="popover iconPopover" role="tooltip" style="width:240px;top:0px !important;"><div class="popover-arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>',
	            content: function() {
	                return getIcons();
	            }
	        });
	    })

	/* Filterable Icons */
	$('body').on('keyup', 'input.search-icon', function() {
	    var input, filter, ul, li, a, i;
	    input = $(this).val();
	    filter = input.toUpperCase();
	    ul = $(this).siblings('i');
	    for (i = 0; i < ul.length; i++) {
	        if (ul[i].className.toUpperCase().indexOf(filter) > -1) {
	            ul[i].style.display = "";
	        } else {
	            ul[i].style.display = "none";

	        }
	    }
	})

	/* Pickup Icon */
    $('body').on('click', '#icon-picker i', function() {
        var icon = $(this).attr('class');
        $('#update-item').find('input#icons').val(icon);
        $('span#basic-addon1').html('<i class="'+icon+'"></i>')

        var li = $(this).parentsUntil('ol.example').parent(); // li that stat data-icon
        li[1].setAttribute("data-icon", icon); 
        $('[data-toggle="popover"]').popover('hide');
        // console.log(li[1]);
    });

    /* new Custom Menu Item */
    $('#new-parent').submit(function(e) {
        e.preventDefault();
        return false;
    });
    $('input.new-parent').keyup(function(e){
    	// alert(e.keyCode);
    	if(e.keyCode===13 && $('input.new-parent').val()!=''){
    		var newParent = $('input.new-parent').val();
    		appendItem = '<li data-act="Y" class="toggle-icon-up"><i></i>'+ newParent +' <a href="JavaScript:void(0)"><i class="fa fa-pencil modal-trigger" aria-hidden="true" data-toggle="modal" data-target="#update-item"></i></a><ol></ol></li>'
    		$('ol.example:last').append(appendItem);
    		$('input.new-parent').val('');
    	}
    })
}

function checkChild(){
	$('ol.example:last li ol').each(function(index,element){
	    if($(this).find('li').length==0){
	    	$(this).removeClass('white');
	        $(this).addClass('grey');
	    }
	})

}

/* Filter Menu Item */
function itemFilter(inputID,listID) {
	// alert('hello');
    var input, filter, ul, li, a, i;
    input = document.getElementById(inputID);
    filter = input.value.toUpperCase();
    ul = document.getElementById(listID);
    li = ul.getElementsByTagName("li");
    for (i = 0; i < li.length; i++) {
        if (li[i].innerHTML.toUpperCase().indexOf(filter) > -1) {
            li[i].style.display = "";
        } else {
            li[i].style.display = "none";
        }
    }
}

function trello_card()
{	
	short_cut();
	$('ol#myUL, ol.example2').slimScroll({height: '100%'});
	$('body').on('click',function(e){
		var element = $(e.target);

		if(element.is('li')==true && element.children('ol').children('li').length >= 1){
			e.stopPropagation();
			$(e.target).children('ol').slideToggle(function(){

				if(element.hasClass('toggle-icon-up')==true){
					element.removeClass('toggle-icon-up');
					element.addClass('toggle-icon-down');
				}else{
					// alert('has down');
					element.removeClass('toggle-icon-up');
					element.removeClass('toggle-icon-down');
					element.addClass('toggle-icon-up');
				}


			});
		}
	})

	var child;
	var li_element;
	var li_icons;

	 $('body').on('click','a i.fa-pencil',function(e) {

	 	// Get Modal object and it content
	 	var modal1 = $('#update-item');

	 	var modalBody = modal1.find('.modal-content');

	   var text = $(this).closest("li").clone()    //clone the element
	    .children() //select all the children
	    .remove()   //remove all the children
	    .end()  //again go back to selected element
	    .text();

	   modal1.find('input#menuitem').val(text);

	   li_element = $(this).closest('li');

	   /* check icon not allow to choose if li item is a sub */
	   // console.log(li_element.closest('ol').attr('class'));
	   // li_cls =li_element.closest('ol').attr('class')

	   // if(li_cls!='example' || li_cls==undefined)
	   // {
	   // 	$('#icon-picker').css('display','none');
	   // }


	   var li_icon = li_element.attr('data-icon');

	   modal1.find('input#icons').val(li_icon);

	   $('span#basic-addon1').html('<i class="'+li_icon+'"></i>')

	   var dataActive = li_element.attr('data-act');

	   if(dataActive=='Y'){
	   		$('#item-enable').prop('checked',true);
	   }else {
	   		$('#item-disable').prop('checked',true);
	   }

	   child = $(this).closest("li").children().not('i'); // all child of li except i

	   $('body').on('click','.saveChange',function(){
	   		var textarea = $('input#menuitem').val();
	   		var appendItem =  textarea;
	   		li_icons = $('#icons').val();
	   		li_element.text('').empty().append(appendItem).append(child).prepend('<i class="'+li_icons+'"></i>');

	   		ActiveOpt = '';
	   		IconOpt = '';
	   });

	   // Function to check li data-Acive
	   var exitloop;
	   $('input:radio').each(function(index,element){
	   	// li_element.removeAttr('data-act');
	   	$(this).on('change',function(){
	   		li_element.removeAttr('data-act');
	   		if($(this).attr('id')=='item-enable'){
	   			li_element.attr('data-act','Y');
	   		}else{
	   			li_element.attr('data-act','N');
	   		}
	   		exitloop = true;
	   		return false;
	   	})

	   })

	  // Function to change Icon
	  $('body').on('click', '#icon-picker i', function() {
	      var icon = $(this).attr('class');
	      li_element.attr("data-icon", icon); 
	      $('[data-toggle="popover"]').popover('hide');
	      $('i#icon_element').removeClass();
	      $('i#icon_element').addClass(icon);
	  })

	  });
  

	$('body').on('click','.fa-minus-circle', function()
	{
		con = confirm('Are you sure delete this menu item?');
		if (con == true){
			item = $(this).parentsUntil('li').parent()
			removeItem(item);
		}
	})
}



// Save Menu to Db
function SaveMenu()
{
	MenuID = $('#MenuID').val();
	jsonMenuItems = getMenuItemJSON(MenuID);
	MenuOperation('New')

	/* End Data Serialize */
}

// 1. Update Existing menu from select dropdown list
// 2. List Menu item in list by Menu By ID
function UpdateExisting()
{
	MenuID 		 = $("#ExistingMenu").val();
	MenuName 	 = $("#ExistingMenu option:selected").text();

	showmessageid(MenuID,MenuName);

	var jsonData = { 'MenuID': MenuID };
	$.ajax({
	    url: '/Morakot/GetExistingMenu',
	    type: 'POST',
	    data: JSON.stringify(jsonData),
	    contentType: "application/json; charset=utf-8",
	    dataType: "json",
	    success: function(data){
	            // $('#SaveMenu').addClass('SaveAs');
	            $('#SaveMenu').hide();
	            $('#Update').show();
	            $('#Delete').show();
	            $('ol.example:last').html(data.listMenu)
	            					.attr('data-MenuID',MenuID)
	            					.attr('data-MenuName',MenuName)
	            					.children('ol')
	            					.children()
	            					.unwrap();
	        },
	    error: function(data) {

	        }
	    });
}


/* Perform Menu Operation like add new, edit existing, and delete existing menu */
function MenuOperation(Opeartion='New')
{

	MenuID 		 = $('#ID').val();
	MenuName 	 = ($('#MenuName').val()=='')?$("#ExistingMenu option:selected").text():$('#MenuName').val();

	if (MenuName == null){
		return;
	}
	Opeartion 	= Opeartion;
	MenuItems 	= getMenuItemJSON(MenuID);
	jsonData 	= { 'MenuID': MenuID,'MenuName': MenuName,'MenuItem': MenuItems,'Opeartion':Opeartion };
	if (Opeartion=='Edit'){
		url = "/Morakot/MenuBuilder/Edit/"+MenuID;
	}
	if (Opeartion=='New'){
		url = "/Morakot/MenuBuilder/New/"+MenuID;
	}
	// url = "/Morakot/MenuBuilder";
	// console.log(jsonData);

	$.ajax({
	    url: url,
	    type: 'POST',
	    data: JSON.stringify(jsonData),
	    contentType: "application/json; charset=utf-8",
	    dataType: "json",
	    success: function(data){
	    			// window.location.reload();
   			window.location.replace("/Morakot/MenuBuilder");
	        },
	    error: function(data) {
	        // alert(' MenuUpdate() error');
	        if (data.status == 400) {
	            $('.message').html('<div class="alert alert-danger">'+
	                '<button type="button" class="close" data-dismiss="alert">&times;</button>'+
	                data.responseText + '</div>');
	        }
	       }
	    });
}

/* Function to get Menu Item In JSON Format */
function getMenuItemJSON(MenuID)
{
	var MenuID = MenuID;
	var Item = [];
	var MenuItems = [];
	var jsonItemParent = {};
	var jsonItemChild = {};
	var jsonMenuItems = [];

	$('ol.example:last > li').each(function(i,e){
	    if($(this).children('ol').children('li').length >= 1){
	        // Parent
	        // console.log("parentOfChild")
	        ptext = $.trim($(this).clone().children().remove().end().text());

	        var parentOfChild = ptext;
	        var ItemIDofParent = ((i+1)<=9)?MenuID+'0'+(i+1):MenuID+(i+1);
	        var FormIDofParent = ($(this).parent().prev().data('formid'))?$(this).parent().prev().data('formid'):'';
	        var IconofParent = $(this).data('icon');
	        // alert($(this).data('icon'));
	        var Active 	= $(this).data('act')!=''?$(this).data('act'):'Y';

	        // console.log('2 '+Active);

	        // Item Parent
	        Item.push(MenuID);
	        Item.push(ItemIDofParent);
	        Item.push(parentOfChild);
	        Item.push(IconofParent);
	        Item.push(FormIDofParent);
	        Item.push('');
	        Item.push(Active);
	        MenuItems.push(Item);

	        jsonItemParent = {}; // *******
	        jsonItemParent.ID = MenuID;
	        jsonItemParent.ItemID=ItemIDofParent;
	        jsonItemParent.ItemDesc=parentOfChild;
	        jsonItemParent.Icon=IconofParent;
	        jsonItemParent.Form=FormIDofParent;
	        jsonItemParent.Parents='';
	        jsonItemParent.Active=Active;
	        jsonMenuItems.push(jsonItemParent);

	        $(this).children('ol').children('li').each(function(ii,ee){
	            formID = $(this).data('formid')!=''?$(this).data('formid'):'';
	            formDesc = $.trim($(this).data('formdesc'));
	            Active = $(this).data('act')!=''?$(this).data('act'):'Y';
	            cicon = ($(this).attr('[class="fa"]'))?$(this).attr('class'):'';
	            ItemDesc = $.trim($(this).clone().children().remove().end().text());
	            
	            var child = $.trim($(this).text());
	            var item1 = ((i+1)<=9)?'0'+(i+1):(i+1);
	            var item2 = ((ii+1)<=9)?'0'+(ii+1):(ii+1);
	            var ItemIDofChild = MenuID+ item1 +'-'+ item2;
	            var FormIDofChild = ($(this).data('formid'))?$(this).data('formid'):'';
	            // Icon:
	            var IconofChild = ($(this).attr('[class="fa"]'))?$(this).attr('class'):'';

	            // console.log('3 '+Active);

	            // Item Child
	            Item.push(MenuID);
	            Item.push(ItemIDofChild);
	            // Item.push(child);
	            Item.push(IconofChild);
	            Item.push(FormIDofChild);
	            Item.push(ItemIDofParent);
	            Item.push(Active);
	            Item.push(ItemDesc);
	            MenuItems.push(Item);

	            jsonItemChild = {}; // *******
	            jsonItemChild.ID = MenuID;
	            jsonItemChild.ItemID=ItemIDofChild;
	            jsonItemChild.ItemDesc=ItemDesc;
	            jsonItemChild.Icon=IconofChild;
	            jsonItemChild.Form=FormIDofChild;
	            jsonItemChild.Parents=ItemIDofParent;
	            jsonItemChild.Active=Active;
	            jsonMenuItems.push(jsonItemChild);    

	            if($(this).has('ol li'))
	            {
	            	/* Second Level Menu  Ex. ItemID: 99-01-01 parent: 99-01 */
	            	// console.log('==================')
	            	// console.log('second level');
	            	// console.log('ItemIDofChild: '+ItemIDofChild);
	            	// console.log('==================')

	            	parentItemID = ItemIDofChild;

	            	$(this).children('ol').children('li').each(function(iii,eee){
	            		var childLi 	= $(this); // LI object

	            		// ptext = $.trim($(this).clone().children().remove().end().text());
	            		var childText 	= $.trim(childLi.text());
	            		var ItemID 		= ((iii+1)<=9)?ItemIDofChild+'-'+'0'+(iii+1):ItemIDofChild+'-'+(iii+1);
	            		var FormID 		= childLi.data('formid')!=''?childLi.data('formid'):'';
	            		// alert(childLi.data('icon'));
	            		var Icon 		= (childLi.data('icon')=='true')?childLi.data('icon'):'';
	            		// alert(Icon);
	            		var Active 		= childLi.data('act')!=''?childLi.data('act'):'Y';

	            		// alert('Menu: '+childText+' Active: '+Active);

	            		// console.log('4 '+Active);

	            		// // Item Child
	            		// Item.push(MenuID);
	            		// Item.push(ItemIDofChild);
	            		// // Item.push(child);
	            		// Item.push(IconofChild);
	            		// Item.push(FormIDofChild);
	            		// Item.push(ItemIDofParent);
	            		// Item.push('Y');
	            		// Item.push(ItemDesc);
	            		// MenuItems.push(Item);

	            		jsonItemChild = {}; // *******
	            		jsonItemChild.ID = MenuID;
	            		jsonItemChild.ItemID=ItemID;
	            		jsonItemChild.ItemDesc=childText;
	            		jsonItemChild.Icon=Icon;
	            		jsonItemChild.Form=FormID;
	            		jsonItemChild.Parents=parentItemID;
	            		jsonItemChild.Active=Active;
	            		jsonMenuItems.push(jsonItemChild);    

	            		// console.log(jsonMenuItems);
	            		
	            	});
	            }           
	        })
	    }else{
	        /*
	            Perform action if a list has no child
	        */
	        // console.log('Perform action if a list has no child');
	        var childLi 	= $(this); // LI object

	        // ptext = $.trim($(this).clone().children().remove().end().text());
	        var childText 	= childLi.text().trim();
	        var ItemID 		= ((i+1)<=9)?MenuID+'0'+(i+1):MenuID+(i+1);
	        var FormID 		= childLi.data('formid')!=''?childLi.data('formid'):'';
	        // alert('icon is '+childLi.data('icon'));
	        var Icon 		= (childLi.data('icon'))?childLi.data('icon'):'';
	        // var Active 		= (childLi.data('act')!='')?childLi.data('act'):'N';
	        var Active 		= childLi.data('act')!=''?childLi.data('act'):'Y';


	        jsonItemParent = {}; // *******
	        jsonItemParent.ID = MenuID;
	        jsonItemParent.ItemID=ItemID;
	        jsonItemParent.ItemDesc=childText;
	        jsonItemParent.Icon=Icon;
	        jsonItemParent.Form=FormID;
	        jsonItemParent.Parents='';
	        jsonItemParent.Active=Active;
	        jsonMenuItems.push(jsonItemParent);

	    }

	});
	// console.log(jsonMenuItems);
	return jsonMenuItems;
}


function collapse_all(){
	// alert('function collapse_all');

	var li = $('ol.example:last li');
	li.each(function(event){
		var hasChild = $(this).children('ol').children('li').length;
		if(hasChild >= 1){

			$(this).children('ol').slideUp();
			$('ol.example:last li').has('ol li').removeClass('toggle-icon-down').addClass('toggle-icon-up');
		}
	})
}

function expand_all(){

	var li = $('ol.example:last li');
	li.each(function(event){
		var hasChild = $(this).children('ol').children('li').length;

		if(hasChild >= 1){
			$(this).children().slideDown();
			$('ol.example:last li').has('ol li').removeClass('toggle-icon-up').addClass('toggle-icon-down');
		}
	})
}

function isValidMenuItem(){
	var str;
	var breakout;
	$('ol.example2 ol ol ol li a').each(function(){

		str = window.getComputedStyle($(this)[0], ':before').getPropertyValue('content');
		if(str!==''){
			$('.message').html('<div class="alert alert-danger">'+
			    '<button type="button" class="close" data-dismiss="alert">&times;</button>Unable to Save! Menu has too many nested level. Only 2 levels allowed.</div>');
			breakout = true;
			return false;
		} 
	});
	if($('ol.example:last').find('ol:empty').length >= 1){
		// console.log($('ol.example:last').find('ol:empty')); // check if parent menu item has sub item or not
		emptyLiText = $('ol:empty').parent('li').text();
		$('.message').html('<div class="alert alert-danger">'+
		    '<button type="button" class="close" data-dismiss="alert">&times;</button><b>Unable to Save:</b> Menu item <b>'+emptyLiText+'</b> is parent item but does not has sub-item inside.</div>');

		breakout=true;
		return false;
	}

	if(breakout){
		return false;
	}
}

function short_cut(){
	$(window).keydown(function(event) {
		// alert(event.keyCode);
		// Key N==Create New
		if (event.keyCode==67 && $('a[href="#target2"]').length==1 && $('a[href="#target2"]').is(':visible')){
			$('a[href="#target2"]').trigger('click');
			event.preventDefault();
		}

		// Key U==Update Existing
		if (event.keyCode==85 && $('a[href="#target3"]').length==1 && $('a[href="#target3"]').is(':visible')){
			$('a[href="#target3"]').trigger('click');
			event.preventDefault();
		}

		// Key Ctrl + C: Collapse All Right Menu
		if (event.ctrlKey && event.keyCode==67){
			collapse_all();
			event.preventDefault();
		}

		// Key Ctrl + X: Expand All Right Menu
		if (event.ctrlKey && event.keyCode==88){
			expand_all();
			event.preventDefault();
		}

		// Key Ctrl + S: Save Meun
		if (event.ctrlKey && event.keyCode==83)
		{	
			if ($('a#SaveMenu').length==1 && $('a#SaveMenu').is(':visible')){
				alert('SaveMenu');
				SaveMenu(); // Save Menu
			} 

			if ($('a#Update').length==1 && $('a#Update').is(':visible')){
				alert('Update Menu');
				MenuOperation('Edit'); // Update Menu
			} 

			event.preventDefault();
		
		}

	});
}
