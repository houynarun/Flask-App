from app.mktcore.imports 		import *
from flask 						import session, render_template, redirect, flash, Response, request
from flask.ext.login 			import login_user, logout_user, current_user, login_required
from .. 						import app
from sqlalchemy 				import *
from datetime 					import datetime, date, timedelta
from flask.ext.login 			import login_required
import time
from sys import argv

import subprocess
import glob
import sys
import os
import getpass
import logging
# import mktAuth								as mktAuth
import app.tools.user 						as mktUser
import app.tools.mktdate 					as mktdate
import app.tools.mktbjstat 					as mktbjstat
import app.tools.loantools.nonworkingday 	as mktDay
import app.tools.mktholiday 				as mktHoliday
import app.tools.mktsetting 				as mktsetting
import app.tools.mktdashboard 			    as mktdashboard
import app.tools.mktnotification 			as mktnotification

from app.BatchJob.models 		import MKT_BATCH_JOB
from app.LoginUser.models 		import MKT_LOGIN_USER
from app.User.models 			import MKT_USER
from app.BjStat.models 			import MKT_BJ_STAT
from app.PD.models 				import *
from app.SystemHealthCheck.models 	import *


getUserLogInID = ""

def getEODStatus():
	ResumeFile 	= app.config.get('EOD_LOG_RESUME')
	ObjFile 	= open(ResumeFile, 'r+')
	Resume 		= ObjFile.read()
	ObjFile.close()
	if 'Y' in Resume:
		return True
	else:
		return False

def getUserRole():

	UserObj = mktUser.getUser()
	Role = "0"

	if UserObj:
		Role = UserObj.Role

	return Role

@app.route('/Morakot/EOD/')
@checkLogOutSession
@checkLogOutTime
def getEOD():
	SysHealthCheckLog 	= 	db.session.query(MKT_SYSTEM_HEALTH_CHECK).filter(MKT_SYSTEM_HEALTH_CHECK.Level=="Critical").all()
	if SysHealthCheckLog:
		Result = mktdashboard.WidgetManager().getSysHealthCheckLog()
		return render_template("eod/error.html" , Obj = Result)	

	# Block check access right
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/EOD/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	# Check Holiday
	BankDateObj = 	mktdate.getBankDateObj()
	NextMonthEnd=   BankDateObj.NextMonthEnd
	SystemDate 	=	request.args.get('Date') if 'Date' in request.args else mktdate.getBankDate()
	Date 		=	request.args.get('Date') if 'Date' in request.args else ""
	Error 		=	"N"
	StopEODAfterMonthEnd	=	mktsetting.getAppSetting('StopEODAfterMonthEnd').strip()
	HolidayList =	mktbjstat.getHolidayList()
	StopEOD = False
	if NextMonthEnd == SystemDate:
		if StopEODAfterMonthEnd == "Yes": StopEOD = True

	# Check BjStat Record
	mktbjstat.startRecord()
	Percentage 	= 	0
	BjStat 		=	MKT_BJ_STAT.query.\
					filter(MKT_BJ_STAT.SystemDate == str(SystemDate)).\
					order_by(MKT_BJ_STAT.Order.asc()).\
					all()

	if 'Date' not in request.args:

		if getEODStatus():
			Error = 'Y'
		else:
		
			Bj 	=	MKT_BJ_STAT.query.\
					filter(MKT_BJ_STAT.SystemDate == str(SystemDate)).\
					filter(MKT_BJ_STAT.Progress == 'Y').\
					first()

			if Bj:

				return redirect("/Morakot/EOD/?Date="+str(SystemDate))

	# if not BjStat:
	# 	flash(msg_error + "Batch job not calculate yet for %s." %SystemDate)

	return render_template("eod/result.html",
							Percentage=Percentage,
							BjStat=BjStat,
							str=str,
							HolidayList=HolidayList,
							SystemDate=SystemDate,
							NextMonthEnd=NextMonthEnd,
							StopEOD=StopEOD,
							Date=Date,
							len=len,
							Error=Error)




@app.route('/Morakot/EOD/Running/')
@checkLogOutSession
@checkLogOutTime
def runningEOD():

	try:
		# Block check access right
		ErrorMsg 	= []
		getCheck 	= checkAccess("/Morakot/EOD/","Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)
		SystemDate 	=	mktdate.getBankDate()
		
		mktbjstat.startRecord()

		bashCommand = "run-eod ui"
		# process 	= subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
		# output 		= process.communicate()[0]
		subprocess.Popen("run-eod ui", shell=True)
		 #Add notification
		event_code = "701"
		Message = mktnotification.getEventCode()[event_code]
		# notification    = mktnotification.getSignal(obj_id,self.model[0],"AUTH",event_code)
		path  = str(request.path).split('/')[2]

		getUserLogInID = session['getLogInID']
		mktnotification.insertNotify({  
					'ID':"",
		            'Path':path,
		            'Status':"AUTH",
		            'Code':event_code,
		            'Model':"",
		            'From':getUserLogInID, 
		            'To':getUserLogInID,
		            'Message':Message
		})

		return render_template("eod/screen.html", SystemDate=SystemDate)

	except Exception, e:
		flash(msg_error+"%s"%e)
		return []

@app.route('/Morakot/EOD/Result/')
@checkLogOutSession
@checkLogOutTime
def getEODResult():
	# Block check access right
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/EOD/","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)
		
	dat = datetime.now()
	# SystemDate = '%s-%s-%s'% (dat.year, dat.month, dat.day)

	# Check Holiday
	SystemDate 	=	request.args.get('Date') if 'Date' in request.args else mktdate.getBankDate()
	Holiday 	= 	mktHoliday.getHoliday()
	check 		= 	True
	one_day 	= 	timedelta(days=1) # one day
	StartDate 	= 	datetime.strptime(str(SystemDate),'%Y-%m-%d').date()
	HolidayList	= 	[]

	while check:
		check = mktDay.isNonWorkingDay(StartDate, Holiday)
		if check:
			Item = StartDate
			Item = datetime.strptime(str(Item),'%Y-%m-%d')
			Item = str(Item).split()
			HolidayList.append(str(Item[0]))
			StartDate = StartDate + one_day

	# Check BjStat Record
	mktbjstat.startRecord()
	Percentage 	= 	0

	BjStat 		=	db.session.query(
									MKT_BJ_STAT.ID,
									MKT_BJ_STAT.JobID,
									MKT_BJ_STAT.Module,
									MKT_BJ_STAT.Description,
									MKT_BJ_STAT.SystemDate,
									MKT_BJ_STAT.CalendarDate,
									MKT_BJ_STAT.NumberOfRecord,
									MKT_BJ_STAT.Completed,
									MKT_BJ_STAT.NumberOfCompleted,
									MKT_BJ_STAT.Progress
								).\
					join(
							MKT_BATCH_JOB,
							MKT_BATCH_JOB.ID == MKT_BJ_STAT.JobID
						).\
					filter(MKT_BJ_STAT.SystemDate == str(SystemDate)).\
					order_by(MKT_BJ_STAT.ID.asc()).\
					all()

	if not BjStat:
		flash(msg_error + "Batch job not calculate yet for %s." %SystemDate)

	return render_template("eod/result.html",
							Percentage=Percentage,
							BjStat=BjStat,
							str=str,
							HolidayList=HolidayList,
							SystemDate=SystemDate)

#Genarate
def event_stream(Dic):

	yield 'retry:1000\ndata:%s\n\n' % Dic

def getShowBoxError():
	ResumeFile 	= app.config.get('EOD_LOG_RESUME')
	ObjFile 	= open(ResumeFile, 'r+')
	Resume 		= ObjFile.read()
	ObjFile.close()
	if 'S' in Resume:
		return True
	else:
		return False

def getShowSuccessBox():
	ResumeFile 	= app.config.get('EOD_LOG_RESUME')
	ObjFile 	= open(ResumeFile, 'r+')
	Resume 		= ObjFile.read()
	ObjFile.close()
	if 'D' in Resume:
		return True
	else:
		return False

@app.route("/Morakot/BJStatBar/")
def getBJStatBar():
	try:

		BankDate 	=	mktdate.getBankDate()
		SystemDate 	=	request.args.get('Date') if 'Date' in request.args else mktdate.getBankDate()
		Dic 		= 	{'Check':'0', 'OveralCompleted':'N', 'Duration_Overal':'0', 'BankDate':str(BankDate), 'Error':'', 'Success':''}
		BjStat 		=	MKT_BJ_STAT.query.\
						filter(MKT_BJ_STAT.SystemDate == str(SystemDate)).\
						order_by(MKT_BJ_STAT.ID.asc()).\
						all()

		AllRecord 	=	0
		NumberOfCompleted = 0

		if BjStat:

			Dic.update({'Check':'1'})
			AllDuration = 0

			for item in BjStat:

				AllRecord 	=	float(AllRecord) + float(item.NumberOfRecord)
				NumberOfCompleted += int(item.NumberOfCompleted)
				
				Duration = '00:00:00'

				if item.Duration:
					seconds  = int(item.Duration)
					AllDuration += seconds
					Duration = mktbjstat.formatTime(seconds)

				Dic.update({str(item.Module):str(item.Completed)})
				Dic.update({"Duration_%s"%str(item.Module):str(Duration)})
				Dic.update({"Num%s"%str(item.Module):item.NumberOfCompleted})
				Dic.update({"Rec%s"%str(item.Module):item.NumberOfRecord})
				if item.Progress == 'Y' and int(item.NumberOfRecord) == 0:
					Dic.update({str(item.Module):'100'})
				
			if float(AllRecord) <= 0:

				AllRecord = 100
				
			OveralPer 	=	float(100) / float(AllRecord) * float(NumberOfCompleted)
			Dic.update({'Overal':str(OveralPer)})
			Duration_Overal = mktbjstat.formatTime(AllDuration)
			Dic.update({"Duration_Overal":str(Duration_Overal)})

			if int(AllRecord) <= int(NumberOfCompleted):
				Dic.update({'OveralCompleted':'Y'})

				if getShowSuccessBox():
					Dic.update({'OveralCompleted':''})

				mktbjstat.makeLogFileOnError('D')

		if getEODStatus():

			Dic.update({"Error":"Yes"})
			
			if getShowBoxError():
				Dic.update({"Error":""})

			mktbjstat.makeLogFileOnError('Y S')

		# Clear query object
		del BjStat

		return Response(event_stream(Dic), mimetype='text/event-stream')

	except Exception, e:
		# raise
		mktbjstat.makeLogFileOnError('Y')
		Dic.update({"Error":str(mktbjstat.getMessageError())}) 
		# return redirect("/Morakot/EOD/?Error=Y")
		return Response(event_stream(Dic), mimetype='text/event-stream')
