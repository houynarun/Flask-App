from app.mktcore.wtfimports import *
from .models 				import *
from app.Province.models 	import MKT_PROVINCE
from app.District.models  	import MKT_DISTRICT
from app.tools.mktroute		import *
from flask					import flash

import time
import app.tools.mktaddress as mktaddress

def getRecord():
	try:

		result 	= 	MKT_BRANCH.query.filter_by(ID=g.formID).all()
		Dict 	= 	{}

		if result:
			
			for row in result:

				Dict.update({'Province'			:str(row.Province)})
				Dict.update({'District'			:str(row.District)})

		return Dict

	except:
		raise

def loadProvince():
	return MKT_PROVINCE.query

def loadDistrict():
	if request.method == 'POST':
		Province = request.form["Province"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])  
		else:
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

class FRM_BRANCH(exform):

	Description 		=	TextField(requiredlabel("Description", "*"), [validators.Required()])
	LocalDescription 	=	TextField(requiredlabel("Local Description", "*"), [validators.Required()])
	BranchManagerName 	=	TextField(requiredlabel("Manager Name", "*"), [validators.Required()])
	LocalBranchManagerName 	=	TextField(requiredlabel("Local Manager Name", "*"), [validators.Required()])
	ContactNumber 		=	TextField("Contact Number")
	
	Province 			= 	QuerySelectField(
								'Province',
								query_factory 	= 	loadProvince, 
								get_label 		= 	'Description',
								allow_blank 	=	True,
								blank_text 		=	'--None--'
							)

	District 			= 	QuerySelectField(
								'District',
								query_factory 	= 	loadDistrict, 
								get_label 		= 	'Description',
								allow_blank 	=	True,
								blank_text 		=	'--None--'
							)

	Address 			=	TextAreaField("Address")
	LocalAddress 			=	TextAreaField("Local Address")
	RegisteredDate 		= 	DateField(requiredlabel("Registered Date", "*"),
								format='%Y-%m-%d',
								validators=[validators.Required()]
							)

	ReportLocked 		=	TextField("Report Locked", default='10000')
	PrevMonthAmount 	=	TextField("PrevMonthAmount", default='0')
	PrevYearAmount 		=	TextField("PrevYearAmount", default='0')
	Location 			= 	LocationField("Location (late,long)")
	def validate_ReportLocked(form,field):
		ID = request.form['ID']
		BObj = MKT_BRANCH.query.get(ID)
		if BObj:
			if BObj.ReportLocked != request.form['ReportLocked'] or\
			str(BObj.PrevYearAmount) != request.form['PrevYearAmount'] or\
			str(BObj.PrevMonthAmount) != request.form['PrevMonthAmount']:
				raise ValidationError("Someone process adjustment back date that effect reserve value by branch, please cancel and start again.")

	@staticmethod
	def hotSelectField():

		hotfield 		=	[]

		fielddisplay 	=	"District"
		varname			=	"ProvinceID:$('#Province').val()"
		fun				=	["Province", varname ,fielddisplay, "/Morakot/DistrictID", "change"]
		
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setWidth():
		control_list = [('RegisteredDate', len3)]
		return control_list

	@staticmethod
	def setVisible():
		return ['ReportLocked','PrevYearAmount','PrevMonthAmount']

	@staticmethod
	def beforeInsert():
		try:
			AuthLevel 	= g.getNAuthorize

			if AuthLevel == 0 :
				ID = request.form['ID']
				BObj = MKT_BRANCH.query.get(ID)
				if BObj:
					if BObj.ReportLocked != request.form['ReportLocked'] or\
					str(BObj.PrevYearAmount) != request.form['PrevYearAmount'] or\
					str(BObj.PrevMonthAmount) != request.form['PrevMonthAmount']:
						flash(msg_error+"Someone process adjustment back date that effect reserve value by branch, please cancel and start again.")
						return False

			return True
			
		except Exception as e:
			raise

	@staticmethod
	def beforeAuthorize():
		try:
			ID 			= 	g.formID
			BIObj 		= 	MKT_BRANCH_INAU.query.get(ID)
			BObj 		= 	MKT_BRANCH.query.get(ID)
			
			if BObj:
				if BObj.ReportLocked != BIObj.ReportLocked or\
					BObj.PrevYearAmount != BIObj.PrevYearAmount or\
					BObj.PrevMonthAmount != BIObj.PrevMonthAmount:
					flash(msg_error+"Someone process adjustment back date that effect reserve value by branch, please cancel and start again.")
					return False
					
			return True
			
		except Exception as e:
			raise
