from wtforms 					import DecimalField, IntegerField
from app.mktcore.wtfimports 	import *
from .models 					import *
import time

import app.tools.catetool 		as mktcategory
import app.tools.mktparam 		as mktparam

from app.Category.models 		import MKT_CATEGORY

def loadCategory():
	return MKT_CATEGORY.query

class FRM_ASSET_CLASS(exform):

	Description 	= 	TextField(requiredlabel("Description", "*"), [validators.Required(), validators.Length(max=35)])
	ProResvCat 		=	QuerySelectField(requiredlabel("Prov Resv Cat","*"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)

	ProvExpCat 		=	QuerySelectField(requiredlabel("Prov Exp Cat","*"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)

	IncomeRecog 	= 	SelectField(requiredlabel("Income Recog", "*"),
							choices=[('Y', 'Yes'), ('N', 'No')],
							default='Y',
							validators=[validators.Required()]
						)

	AmountType 		= 	TextField("Amount Type")

	OverdueFr 		= 	DecimalField("Overdue Fr", [validators.Optional()], description="1-Asset Provision")
	OverdueTo 		= 	TextField("Overdue To", [validators.Optional()], description="1-Asset Provision")
	LoanType 		= 	SelectField(requiredlabel('Loan Type', '*'),
							choices=[('N', 'Normal'),
									 ('R', 'Restructured')],
							coerce=str,
							default='N',
							description="1-Asset Provision"
						)
	
	MoreThanOneYear = 	SelectField(requiredlabel('More Than One Year', '*'),
							choices=[('Y', 'Yes'),
									 ('N', 'No')],
							coerce=str,
							default='Y',
							description="1-Asset Provision"
						)

	ProvPerc 		=	DecimalField(requiredlabel("Provision Perc", "*"), [validators.Optional()], description="1-Asset Provision")
	WatchDay 		=	TextField("Watch Day", [validators.Optional()], description="1-Asset Provision")
	def validate_OverdueTo(form, field):
		try:

			OvTo = form.OverdueTo.data
			OvFr = form.OverdueFr.data

			# if int(OvTo) > 0:
			# 	if int(OvTo) <= int(OvFr):
			# 		raise ValidationError("Overdue To must bigger than Overdue Fr")

		except:
			raise

	@staticmethod
	def isMultiValue():
		controls_list=["1-Asset Provision"]
		return controls_list