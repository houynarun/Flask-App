from wtforms 							import DecimalField, IntegerField
from app.mktcore.wtfimports import *
from .models import *
import time

import app.tools.mktdate 				as mktdate
import app.tools.mktaccounting 			as mktaccounting
import app.tools.mktaccount 			as mktaccount
import app.tools.user 					as mktuser

from app.tools.mktofficer 				import *
from app.tools.user 					import *
from app.CategoryType.models 			import MKT_CATEG_TYPE
from app.AccProduct.models 				import MKT_ACC_PRODUCT
from app.Currency.models 				import MKT_CURRENCY

def loadCategoryType():
	return MKT_CATEG_TYPE.query

def loadParent():
	return MKT_CATEGORY.query

def loadAccProduct():
	result = ''
	AccProduct = MKT_ACC_PRODUCT.query.filter_by(ProductType='I')
	if AccProduct:
		result=AccProduct
	return result

def loadCurrency():
	return MKT_CURRENCY.query.order_by(asc(MKT_CURRENCY.ID)).all()

def loadBranch():
	return getUser().Branch

def loadCurrentDate():
	return mktdate.getBankDate()

def loadDefaultCurrency():
	return mktaccounting.getDefaultCurrency()

class FRM_ACCOUNT_INTERNAL(exform):

	AccName = TextField(requiredlabel("Account Name", "*"), [validators.Required()])
	Currency = QuerySelectField(requiredlabel("Currency", "*"),
					query_factory=loadCurrency,
					get_label=u'ID',
					allow_blank=loadDefaultCurrency(),
					blank_text=u'--None--',
					validators=[validators.Required()]
				)
	JAccount = SelectField('Joint Account',
					choices=[('N', 'No'),
							 ('Y', 'Yes')],
					coerce=str)

	AccProduct = QuerySelectField(requiredlabel('Account Product', '*'),
									query_factory=loadAccProduct,
									get_label=u'Description',
									allow_blank=True,
									blank_text=u'--None--',
									validators=[validators.Required()]
								)

	AccCategory = TextField(requiredlabel("Category", "*"), [validators.Required()])
	InterestRate = DecimalField("Interest Rate", [validators.Optional()])
	Charge = DecimalField("Charge", [validators.Optional()])
	AccStatus = SelectField('Status',
					choices=[('O', 'Open'),
							 ('C', 'Close')],
					coerce=str)
	OpenDate = DateField(requiredlabel("Opening Date", "*"), [validators.Required()], default=loadCurrentDate)
	ClosingDate = DateField("Closing Date", [validators.Optional()])


	Balance = DecimalField("Balance", [validators.Optional()], default=0,description="1-Other Info")
	AvailableBal 	= DecimalField("Available Balance", [validators.Optional()], default=0,description="1-Other Info")
	
	AccrInterest 	= DecimalField("Accrued Interest", [validators.Optional()], default=0, description="1-Other Info")
	AccrCurMonth 	= DecimalField("Accr Int Curr Month", [validators.Optional()], default=0, description="1-Other Info")
	AccrIntBooked 	= DecimalField("Accr Int was Booked", [validators.Optional()], default=0, description="1-Other Info")
	AccrCurCapital 	= DecimalField("Accr Int for Capitalization", [validators.Optional()], default=0, description="1-Other Info")

	Blocked = SelectField('Blocked',
					choices=[('N', 'No'),
							 ('Y', 'Yes')],
					coerce=str)

	def validate_AccProduct(form,field):
		
		AccProduct	= request.form['AccProduct']
		Currency 	= request.form['Currency']
		Branch 		= mktuser.getCurrentBranch()
		TellerParam = mktparam.getTellerParam()
		if TellerParam:
			SuspendAccPro 	= TellerParam.SuspendAccPro
			ShortageAccount = TellerParam.ShortageAccPro
			SurplusAccount 	= TellerParam.SurplusAccPro

			if AccProduct == SuspendAccPro:
				AccObj 		= mktaccount.getSuspendAccount(Currency,Branch)
				if AccObj:
					raise ValidationError('Cannot create duplications suspend account.')

			if AccProduct == ShortageAccount:
				AccObj 		= mktaccount.getShortageAccount(Currency,Branch)
				if AccObj:
					raise ValidationError('Cannot create duplications shortage account.')

			if AccProduct == SurplusAccount:
				AccObj 		= mktaccount.getSurplusAccount(Currency,Branch)
				if AccObj:
					raise ValidationError('Cannot create duplications surplus account.')

	def validate_InterestRate(form,field):
		if request.form['InterestRate']:
			try:
				InterestRate = float(request.form['InterestRate'])
			except Exception as e:
				raise ValidationError("Invalid format.")
			if InterestRate > 0:
				AccProduct	= request.form['AccProduct']
				ProductObj = MKT_ACC_PRODUCT.query.get(AccProduct)
				if ProductObj:
					if not ProductObj.InterestKey:
						raise ValidationError("Cannot set interest rate %s%%, Because this product doesn't have interest rate."%InterestRate)
			else:
				if InterestRate < 0:
					raise ValidationError("Invalid %s interst rate"%InterestRate)

	@staticmethod
	def setVisible():
		control_list=['Blocked','JAccount','Charge','Officer']
		return control_list

	@staticmethod
	def listField():
		AccProduct =  MKT_ACC_PRODUCT.query.filter(MKT_ACC_PRODUCT.ProductType=="I")
		InternalProduct = " ".join([str(row.ID) for row in AccProduct])
		FilterProduct = "AccProduct*EQ*%s"%InternalProduct
		Fields = ["ID", "AccName", "Currency", "AccProduct", "AccCategory",
				  "OpenDate","InterestRate", "Balance" , "AccrInterest", "AccStatus","Branch"]
		return Fields,[FilterProduct]

	@staticmethod
	def formatMoney():
		return ["Balance","AccrInterest",'AvailableBal'],"Currency"
		# Balance and AccrInterest are the fields to be formatted based on Currency field
	
	@staticmethod
	def moneyField():
		return [("Balance", "Currency"), ("Charge", "Currency"), ("AvailableBal", "Currency"), ("AccrInterest", "Currency"), ("AccrCurMonth", "Currency"), ("AccrCurCapital", "Currency"), ("AccrIntBooked", "Currency")]

	@staticmethod
	def setWidth():

		Fields = [('Currency', len1),
				  ('JAccount', len1),
				  ('JoinID', len2),
				  ('AccCategory', len2),
				  ('FixedRate', len1),
				  ('OpenDate', len3),
				  ('AccStatus', len1),
				  ('ClosingDate', len3),
				  ('Blocked', len1),
				  ('Normant', len1),
				  ('InterestRate',len1)]

		return Fields

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay = "$('#InterestRate').val(data.InterestKey); $('#Charge').val(data.ChargeRate); $('#FixedRate').val(data.FixedRate)"
		varname = "AccProductID:$('#AccProduct').val(), Currency:$('#Currency').val()"
		fun = ["Currency", varname, fielddisplay, "/Morakot/AccProductID", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#AccCategory').val(data.AccProCategory); $('#InterestRate').val(data.InterestKey); $('#Charge').val(data.ChargeRate); $('#FixedRate').val(data.FixedRate)"
		varname = "AccProductID:$('#AccProduct').val(), Currency:$('#Currency').val()"
		fun = ["AccProduct", varname, fielddisplay, "/Morakot/AccProductID", "change"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def setDisable():
		return [('AccCategory'), ('FixedRate'), ('AccrInterest'), ('Balance'),('AvailableBal'),('AccrInterest'),  ("AccrIntBooked"),
				('NextAccrDate'), ("AccrCurMonth"), ("AccrCurCapital")]

	@staticmethod
	def redirectAfterInsert():
		ID 				= 	request.form['ID']
		NumOfAuth 		= 	g.getNAuthorize
		BankDate 		=	mktdate.getBankDate()

		if NumOfAuth == 0:
			Acc = MKT_ACCOUNT.query.get(ID)
		else:
			Acc = MKT_ACCOUNT_INAU.query.get(ID)

		if not Acc:
			flash(msg_error + "Account not found.")
			return False

		Acc.NextAccrDate 	=	str(BankDate)
		db.session.add(Acc)
		db.session.commit()
		
		return None

	@staticmethod
	def reverseRec():
		ID = g.formID
		AllowReverse = mktaccount.isAllowReverseAccount(ID)
		if AllowReverse[0]:
			return True,''
		else:
			# Record not allow to reverse. 
			return True, AllowReverse[1]