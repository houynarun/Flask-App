from wtforms 							import DecimalField, IntegerField
from app.mktcore.wtfimports 			import *
from .models 							import *
from .. 								import app, db
from sqlalchemy 						import *
import time
from datetime 							import datetime, date, timedelta

from app.CategoryType.models 			import MKT_CATEG_TYPE
from app.AccProduct.models 				import MKT_ACC_PRODUCT
from app.Currency.models 				import MKT_CURRENCY
from app.JAccount.models 				import MKT_JACCOUNT
from app.InterestRate.models 			import MKT_INTEREST_RATE
from app.ChargeRate.models 				import MKT_CHARGE_RATE
from app.AccRuleDetail.models 			import MKT_ACC_RULE_DE
from app.User.models 					import MKT_USER
from app.Tax.models 					import MKT_TAX

from app.tools.mktcustomer 				import *
from app.tools.catetool 				import *
from decimal 							import *
import string
from app.tools.mktmoney 				import *
from app.tools.user 					import *
from app.tools.mktofficer 				import *
import app.tools.mktaccounting 			as mktaccounting
import app.tools.mktdate 				as mktdate
import app.tools.mktaccount 			as mktaccount
import app.tools.mktteller 				as mktteller

from app.tools.mktroute 				import *

def loadCategoryType():
	return MKT_CATEG_TYPE.query

def loadParent():
	return MKT_CATEGORY.query

def loadAccProduct():
	return MKT_ACC_PRODUCT.query.filter(MKT_ACC_PRODUCT.ProductType == 'E').all()

def loadCurrency():
	return MKT_CURRENCY.query.order_by(asc(MKT_CURRENCY.ID)).all()

def loadJAccount():
	return MKT_JACCOUNT.query

def loadTax():
	return MKT_TAX.query

def loadCurrentDate():
	return mktdate.getBankDate()

def loadDefaultCurrency():
	return mktaccounting.getDefaultCurrency()

class FRM_ACCOUNT(exform):

	CustomerList 	= 	RemoteTextField(requiredlabel("Customer", "*"), [validators.Required()])
	AccName 		= 	TextField(requiredlabel("Account Name", "*"), [validators.Required()])
	Currency 		= 	QuerySelectField(requiredlabel("Currency", "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=loadDefaultCurrency(),
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	JAccount 		= 	SelectField('Joint Account',
							choices=[('N', 'No'),
									 ('Y', 'Yes')],
							coerce=str,
							description='3-Joint Account'
						)

	JoinID 			= 	QuerySelectField('Join ID',
	                        query_factory=loadJAccount,
	                        get_label=u'ID',
	                        allow_blank=True,
	                        blank_text=u'--None--',
	                        description='3-Joint Account'
                        )

	AccProduct 		= 	QuerySelectField(requiredlabel('Account Product', '*'),
							query_factory=loadAccProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)

	AccCategory 	= TextField(requiredlabel("Category", "*"), [validators.Required()])

	InterestRate 	= TextField("Interest Rate", [validators.Optional()])
	FixedRate 		= TextField("Fixed/Rate",description="2-Charge")
	Charge 			= DecimalField("Charge", [validators.Optional()],description="2-Charge")

	OpenDate 		= DateField(requiredlabel("Opening Date", "*"), [validators.Required()], default=loadCurrentDate)

	AccStatus 		= SelectField('Status',
						choices=[('O', 'Open'),
								 ('C', 'Close')],
						coerce=str)

	ClosingDate 	= DateField("Closing Date", [validators.Optional()])
	Blocked 		= SelectField('Blocked',
						choices=[('N', 'No'),
								 ('Y', 'Yes')],
						coerce=str,
						description="4-%s"%getLanguage('Block'))

	BlockReason 	= TextAreaField("Block Reason",
						description="4-%s"%getLanguage('Block'))
	Dormant 		= SelectField('Dormant',
						choices=[('N', 'No'),
								 ('Y', 'Yes')],
						coerce=str,
						default='N',
						description="1-Other Info")

	OfficerID 		= RemoteTextField("Officer")
	Balance 		= DecimalField("Balance", [validators.Optional()], default=0, description="1-Other Info")
	AvailableBal 	= DecimalField("Available Balance", [validators.Optional()], default=0, description="1-Other Info")
	
	AccrInterest 	= DecimalField("Accrued Interest", [validators.Optional()], default=0, description="1-Other Info")
	AccrCurMonth 	= DecimalField("Accr Int Curr Month", [validators.Optional()], default=0, description="1-Other Info")
	AccrIntBooked 	= DecimalField("Accr Int was Booked", [validators.Optional()], default=0, description="1-Other Info")
	AccrCurCapital 	= DecimalField("Accr Int for Capitalization", [validators.Optional()], default=0, description="1-Other Info")

	# UserID 			= RemoteTextField("User", description="1-Other Info")

	def validate_Tax(form, field):

		InputRate = form.InterestRate.data

		try:
			if float(InputRate) > 0:
				Tax = request.form['Tax']
				if Tax == "__None" or Tax == "":
					raise ValidationError("This field is required.")
		except:
			raise

	def validate_Charge(form, field):
		Value = form.Charge.data
		if str(Value).find("%") != -1:
			Value = Value.split("%")[0]

		try:
			Value = Decimal(Value)
		except Exception as exe:
			raise ValidationError("The chare you have enter is wrong number value")

		form.Charge.data = Value

	def validate_InterestRate(form, field):
		AccPro = request.form['AccProduct']
		CurrencyKey = request.form['Currency']
		InputRate = form.InterestRate.data

		try:
			InputRate = float(InputRate)
		except:
			raise ValidationError("This field must be in numeric format.")

		Msg = mktaccount.checkInterestRate("AC", AccPro, InputRate, CurrencyKey)

		if Msg:
			raise ValidationError(Msg)
			
	def validate_AccStatus(form, field):
		try:

			AccountBalance = request.form['Balance']
			AccountStatus  = request.form['AccStatus']
			AccountCurrency= request.form['Currency']

			if AccountStatus.upper() == "C":
				# AccountBalance = float(AccountBalance) if AccountBalance else float(0)
				# if AccountBalance != float(0):
				# 	raise ValidationError("Account balance must be %s. Current balance is %s." %(mktmoney.toMoney(float(0), mktmoney.getCurrencyObj(AccountCurrency), 2), mktmoney.toMoney(float(AccountBalance), mktmoney.getCurrencyObj(AccountCurrency), 2)))
				Check = mktteller.isUserVaultAccount()
				if not Check[0]:
					raise ValidationError(Check[1])

		except:
			raise

	def validate_ClosingDate(form, field):

		AccountClosingDate 	= request.form['ClosingDate']
		AccountStatus  		= request.form['AccStatus']

		if AccountStatus.upper() == "C":
			try:
				datetime.strptime(str(AccountClosingDate),'%Y-%m-%d')
			except:
				raise ValidationError("This field must be in date format.")

	@staticmethod
	def moneyField():
		return [("Balance", "Currency"), ("Charge", "Currency"), ("AvailableBal", "Currency"), ("AccrInterest", "Currency"), ("AccrCurMonth", "Currency"), ("AccrCurCapital", "Currency"), ("AccrIntBooked", "Currency")]

	@staticmethod
	def formatMoney():
		return ["Balance", "AvailableBal", "AccrInterest", "AccrCurCapital", "AccrCurMonth", "AccrIntBooked"], "Currency"

	@staticmethod
	def setWidth():

		Fields = [('Currency', len1),
				  ('JAccount', len1),
				  ('JoinID', len2),
				  ('AccCategory', len2),
				  ('FixedRate', len1),
				  ('OpenDate', len3),
				  ('AccStatus', len1),
				  ('ClosingDate', len3),
				  ('Blocked', len1),
				  ('Normant', len1)]

		return Fields

	@staticmethod
	def listField():
		AccProduct = MKT_ACC_PRODUCT.query.filter(MKT_ACC_PRODUCT.ID != '101').\
										filter(MKT_ACC_PRODUCT.ProductType == 'E').\
										order_by(MKT_ACC_PRODUCT.ID)
		ProductExternal = ''
		for row in AccProduct:
			ProductExternal+=' %s'%row.ID

		Fields = ["ID", "CustomerList", "AccName", "Currency","AccProduct","AccCategory",
				  "OpenDate","AccStatus","ClosingDate","InterestRate", "Balance", "AvailableBal","Branch"]
		return Fields, ["AccProduct*EQ*%s"%ProductExternal]

	@staticmethod
	def setVisible():
		return [("AccCategory")] #these fields are visible, but data still accessible 

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= 	"$('#InterestRate').val(data.InterestKey); $('#Charge').val(data.ChargeRate); $('#FixedRate').val(data.FixedRate)"
		varname 		= 	"AccProductID:$('#AccProduct').val(), Currency:$('#Currency').val()"
		fun 			= 	["Currency", varname, fielddisplay, "/Morakot/AccProductID", "change"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#AccCategory').val(data.AccProCategory); $('#InterestRate').val(data.InterestKey); $('#Charge').val(data.ChargeRate); $('#FixedRate').val(data.FixedRate)"
		varname 		= 	"AccProductID:$('#AccProduct').val(), Currency:$('#Currency').val()"
		fun 			= 	["AccProduct", varname, fielddisplay, "/Morakot/AccProductID", "change"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#ClosingDate').val(data.ClosingDate)"
		varname			=	"AccStatus:$('#AccStatus').val()"
		fun 			=	["AccStatus", varname, fielddisplay, "/Morakot/AccountClosingDate", "change"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#AccName').val(data.CustomerName)"
		varname			=	"CustomerList:$('#CustomerList').val()"
		fun 			=	["CustomerList", varname, fielddisplay, "/Morakot/CustomerNameBySelected", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#JoinID').attr('readonly', data.Bool)"
		varname = "JAccountID:$('#JAccount').val()"
		fun = ["JAccount", varname, fielddisplay, "/Morakot/JoinID", "change"]
		hotfield.append(fun)

		return hotfield

	# @staticmethod
	# def hotSelectField():
	# 	hotfield = []

	# 	fielddisplay = "$('#JoinID').attr('readonly', data.Bool)"
	# 	varname = "JAccountID:$('#JAccount').val()"
	# 	fun = ["JAccount", varname, fielddisplay, "/Morakot/JoinID", "change"]
	# 	hotfield.append(fun)

	# 	return hotfield

	@staticmethod
	def setDisable():
		return [('AccCategory'), ('FixedRate'), ('AccrInterest'), ('Balance'), ("AccrIntBooked"),
				('NextAccrDate'), ('Branch'), ("AvailableBal"), ("AccrCurMonth"), ("AccrCurCapital")]

	# @staticmethod
	# def redirectAfterInsert():
	# 	ID 				= 	request.form['ID']
	# 	NumOfAuth 		= 	g.getNAuthorize
	# 	BankDate 		=	mktdate.getBankDate()

	# 	if NumOfAuth == 0:
	# 		Acc = MKT_ACCOUNT.query.get(ID)
	# 	else:
	# 		Acc = MKT_ACCOUNT_INAU.query.get(ID)

	# 	if not Acc:
	# 		flash(msg_error + "Account not found.")
	# 		return False

	# 	Acc.NextAccrDate 	=	str(BankDate)
	# 	db.session.add(Acc)
	# 	db.session.commit()

	# 	return None
	@staticmethod
	def redirectAfterInsert():
		ID 				= 	request.form['ID']
		NumOfAuth 		= 	g.getNAuthorize
		BankDate 		=	mktdate.getBankDate()

		if NumOfAuth == 0:
			Acc = MKT_ACCOUNT.query.get(ID)

			if Acc:
				AccStatus = Acc.AccStatus
				if AccStatus == 'C':
					# Check if account closing action
					UserID 	=	Acc.Inputter
					Check 	= 	mktaccount.setCloseAccount(ID, UserID, "AUTH")

		else:
			Acc = MKT_ACCOUNT_INAU.query.get(ID)

		if not Acc:
			flash(msg_error + "Account not found.")
			return False

		Acc.NextAccrDate 	=	str(BankDate)
		db.session.add(Acc)
		db.session.commit()

		return None

	@staticmethod
	def beforeAuthorize():
		ID 		= 	g.formID
		AccObj 	=	MKT_ACCOUNT_INAU.query.get(ID)

		if not AccObj:
			flash(msg_error + "Account %s not found." %ID)
			return False

		AccStatus = AccObj.AccStatus
		if AccStatus == 'C':
			# Check if account closing action
			UserID 	=	AccObj.Inputter
			Check 	= 	mktaccount.setCloseAccount(ID, UserID, "INAU")

			if not Check[0]:
				flash(msg_error + "%s" %Check[1])
				return False

		return True

	@staticmethod
	def reverseRec():
		ID = g.formID
		AllowReverse = mktaccount.isAllowReverseAccount(ID)
		if AllowReverse[0]:
			return True,''
		else:
			# Record not allow to reverse. 
			return True, AllowReverse[1]

	@staticmethod
	def IsAcceptOverride():

		Override 	= False
		Branch 		= mktuser.getCurrentBranch()
		Msg 		= ""
		ID 			= request.form['ID']
		AccStatus 	= request.form['AccStatus']
		Customer 	= request.form["CustomerList"]
		CustomerObj = MKT_CUSTOMER.query.get(Customer)
		
		if CustomerObj.Branch != Branch:
			Override 	= True
			Msg 		= "Customer <a href='javascript:void(0)' onClick=CustomClickView('Customer','Customer/?ID=%s')><u>%s</u></a> is from different Branch <b>%s</b>. " %(Customer, Customer, CustomerObj.Branch)
		
		if AccStatus == 'C':
			Override 	= True
			Msg 		= "You will be close this account %s." %ID

		Msg += " Do you want to procceed?"

		return Override, Msg

	@staticmethod
	def IsAcceptOverrideINAU():
		Override 		= False
		ID 				= g.formID
		print "ID", ID
		Branch 			= mktuser.getCurrentBranch()
		Msg 			= ""
		AccountnObj		= MKT_ACCOUNT_INAU.query.get(ID)
		Customer 		= AccountnObj.CustomerList
		CustomerObj 	= MKT_CUSTOMER.query.get(Customer)

		AccStatus 		= AccountnObj.AccStatus
		if CustomerObj.Branch != Branch:
			Override 	= True
			Msg 		= "Customer <a href='javascript:void(0)' onClick=CustomClickView('Customer','Customer/?ID=%s')><u>%s</u></a> is from different Branch <b>%s</b>. " %(Customer, Customer, CustomerObj.Branch)

		if AccStatus == 'C':
			Override 	= True
			Msg 		= "You will be close this account %s." %ID

		Msg 		+= "Do you want to procceed?"

		return Override, Msg