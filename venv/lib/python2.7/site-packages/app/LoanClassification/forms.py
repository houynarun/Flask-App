from flask 							import flash, g, Markup
from app.mktcore.wtfimports 		import *
from .models 						import *
from app.AssetClass.models			import MKT_ASSET_CLASS
from app.LoanContract.models		import MKT_LOAN_CONTRACT
import app.tools.mktpdcollection 	as mktpdcollection
import app.tools.user           	as mktuser

def loadAssetClass():
	return MKT_ASSET_CLASS.query.filter(~MKT_ASSET_CLASS.ID.like('%-%')).order_by(MKT_ASSET_CLASS.ID.asc())

class FRM_LOAN_CLASSIFICATION(exform):
	LoanID 			= 	RemoteTextField(requiredlabel('Loan Contract ID', "*"), [validators.Required()])
	Classification	= 	SelectField(requiredlabel('Classification Mode', '*'),
							choices=[('M', getLanguage('Manual')),
									 ('A', 'Automatic by System')],
							coerce=str,
							validators=[validators.Required()]
						)
	LoanClass 		= QuerySelectField(requiredlabel('Loan Class', "*"),
						query_factory=loadAssetClass,
						get_label=lambda a: a.ID + " - " + a.Description
					)
	WatchDay 		= 	TextField("Watch Day")
	Note 			= 	TextAreaField(requiredlabel(getLanguage("Note"), "*"), [validators.Required()])

	def validate_LoanID(form, field):
		ID 		= request.form['ID']
		LoanID 	= field.data
		Branch 	= mktuser.getCurrentBranch()
		LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID==LoanID).filter(MKT_LOAN_CONTRACT.Branch==Branch).first()
		if not LoanObj:
			raise ValidationError('Loan Contract not found in current branch')

		LCObj 	= MKT_LOAN_CLASSIFICATION.query.filter(MKT_LOAN_CLASSIFICATION.LoanID==LoanID).\
				  filter(MKT_LOAN_CLASSIFICATION.ID!=ID).first()
		if LCObj:
			raise ValidationError('Cannot create new record with the same LoanID.')

	def validate_WatchDay(form, field):
		WatchDay 		= request.form['WatchDay']
		print WatchDay
		if WatchDay:
			try:
				WatchDay = int(WatchDay)
			except:
				raise ValidationError('Watch Day must be integer.')

	@staticmethod
	def IsAcceptOverride():
		Msg 	= 'Are you sure want to process loan classification?'
		ID 		= request.form['ID']
		LoanID 	= request.form['LoanID']
		WatchDay= request.form['WatchDay']

		LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		LoanWatchDay = LoanObj.WatchDay if LoanObj else "0"
		if WatchDay:
			Msg += '<br> You will reset Watch Day in Loan Contract from %s to %s.' % (LoanWatchDay,WatchDay)
		
		Override 	= True

		return Override, Msg

	@staticmethod
	def IsAcceptOverrideINAU():
		Msg 			  = 'Are you sure want to process loan classification?'
		ID 				  =	g.formID
		ClassObj 		  =	MKT_LOAN_CLASSIFICATION_INAU.query.get(ID)
		if ClassObj:
			LoanID = ClassObj.LoanID
			WatchDay = ClassObj.WatchDay
			LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
			LoanWatchDay = LoanObj.WatchDay if LoanObj else "0"
			if WatchDay:
				Msg += '<br> You will reset Watch Day in Loan Contract from %s to %s.' % (LoanWatchDay,WatchDay)
		

		Override 	= True

		return Override, Msg

	@staticmethod
	def beforeAuthorize():
		try:
			ID 			= 	g.formID
			LCObj 		= 	MKT_LOAN_CLASSIFICATION_INAU.query.get(ID)
			
			if LCObj:
				LoanID	= 	LCObj.LoanID
				LoanObj =	MKT_LOAN_CONTRACT.query.get(LoanID)
				ClassifiedMode 	=	LCObj.Classification
				LoanClass 		=	LCObj.LoanClass
				WatchDay 		= 	LCObj.WatchDay
				LoanObj.Classification  =	LCObj.Classification
				if WatchDay:
					LoanObj.WatchDay = WatchDay
				db.session.add(LoanObj)
				mktpdcollection.loanClassification(LoanID, 0, "", "", "No", LoanClass=LoanClass, ClassifiedMode=ClassifiedMode, UserReference=ID)

			return True
			
		except Exception as e:
			db.session.rollback()
			return False


	@staticmethod
	def beforeInsert():
		try:
			AuthLevel 	= g.getNAuthorize

			if AuthLevel == 0 :
				LoanID	= 	request.form['LoanID']
				ID 		=	request.form['ID']
				LoanObj =	MKT_LOAN_CONTRACT.query.get(LoanID)
				ClassifiedMode 	=	request.form['Classification']
				LoanClass 		=	request.form['LoanClass']	
				WatchDay 		= 	request.form['WatchDay']			
				LoanObj.Classification  =	ClassifiedMode				
				if WatchDay:
					LoanObj.WatchDay = WatchDay
				db.session.add(LoanObj)
				mktpdcollection.loanClassification(LoanID, 0, "", "", "No", LoanClass=LoanClass, ClassifiedMode=ClassifiedMode, UserReference=ID)

			return True
			
		except Exception as e:
			raise
			db.session.rollback()
			return False

