from app.mktcore.imports import *
from .forms import *
from app.User.models import *
import app.tools.user 	as mktuser
from app.mktcore.globalfunction import StatusCodes
from app.mktcore.authentication import GetAPIReturnFormat,MesssageStandard
import datetime

registerCRUD(admin, '/UserLocationTracker', 'UserLocationTracker', FRM_USER_LOCATION_TRACKER, [MKT_USER_LOCATION_TRACKER])

@app.route("/Morakot/API/GetUserLocation/", methods=['POST','GET'])
@checkLogOutSession
@checkLogOutTime
def GetUserLocation():
	UserID 			= session['getLogInID']
	Result 			= saveUserLocation(UserID=UserID)
	if Result:
		return jsonify(status=200),200
	else:
		return jsonify(status=406),406

@app.route('/Morakot/ViewUserLocation/', methods=['GET'])
@app.route('/Morakot/API/ViewUserLocation/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ViewUserLocation():
	Status 		  = StatusCodes()
	now = datetime.datetime.now()
	DateTimeNow 	= mktdate.getDateTimeNow()
	UserOnlineObj = MKT_LOGIN_USER.query.all()
	if checkContentType() == 'json' or 'API' in request.url :
		if UserOnlineObj:
			return GetOnlineUsers(UserOnlineObj),Status.ok()
		return MesssageStandard(Messages=['No user has been found...'],Statuscode=404)
	else:
		return render_template('location/view-user-location.html')

@app.route('/Morakot/FindUserLocationHistory/', methods=['GET'])
@app.route('/Morakot/API/FindUserLocationHistory/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def FindUserLocationHistory():
	UserID 		 = request.args.get('ID')
	DateFilter   = request.args.get('Date')
	Status 		 = StatusCodes()
	if UserID and DateFilter:	 
		UserHistObj = MKT_USER_LOCATION_TRACKER.query.\
					  filter(MKT_USER_LOCATION_TRACKER.UserID==UserID,\
					  MKT_USER_LOCATION_TRACKER.Createdon.ilike("%"+DateFilter+"%")).all()
		if UserHistObj:
			return GetUserLocationHistory(UserHistObj),Status.ok()
		else:
			return GetUserLocationHistory(UserHistObj),Status.not_found()
	elif UserID and DateFilter==None:	 
		UserHistObj = MKT_USER_LOCATION_TRACKER.query.\
					  filter(MKT_USER_LOCATION_TRACKER.UserID==UserID).all()
		if UserHistObj:
			return GetUserLocationHistory(UserHistObj),Status.ok()
		else:
			return GetUserLocationHistory(UserHistObj),Status.not_found()
	return MesssageStandard(Messages=['No user location history has been found...'],Statuscode=Status.not_found())

@app.route('/Morakot/FilterUser/', methods=['GET'])
@app.route('/Morakot/API/FilterUser/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def FilterUser():
	Param 		= request.args.get('filter_by')
	Status 	    = StatusCodes()
	UserQuery   = MKT_USER.query
	if UserQuery:
		if Param == "All":
			UserObj = UserQuery.all()
			if UserObj:
				return GetUsers(UserObj),Status.ok()
		elif Param == "Online":
			UserObj = MKT_LOGIN_USER.query
			if UserObj:
				return GetOnlineUsers(UserObj),Status.ok()
		elif Param =="Offline":
			UserObj = UserQuery.all()
			if UserObj:
				return GetOfflineUsers(UserObj),Status.ok()
		else:
			MesssageStandard(Messages=['No user has been found...'],Statuscode=Status.not_found())
	return MesssageStandard(Messages=['No user has been found...'],Statuscode=Status.not_found())

@app.route('/Morakot/SearchUser/', methods=['GET'])
@app.route('/Morakot/API/SearchUser/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def SearchUser():
	DefaultBranch 	= mktuser.getCurrentBranch()
	search 			= request.args.get('q')
	action 			= request.args.get('action') if 'action' in request.args else ""
	NAMES 			= []
	FilterCondition = []
	#check if search text all in space
	if not search.isspace():
		search = search.strip()
		if not search is None:
			if action == "view":
				FilterCondition.append(MKT_USER.ID == search)
			else:
				FilterCondition.append(or_(MKT_USER.ID.like('%'+search.upper()+'%'),func.upper(MKT_USER.LogInName).like('%'+search.upper()+'%')))
			Acc = 	MKT_USER.query.filter(*FilterCondition).order_by(MKT_USER.ID)
			for row in Acc:
				dic = {"id":row.ID, "text":"%s - %s" %(row.ID,row.LogInName)}
				NAMES.append(dic)

	# app.logger.debug(NAMES)
	return jsonify(items = NAMES)

	# return MesssageStandard(Messages=['No user has been found...'],Statuscode=Status.not_found())
@app.route('/Morakot/FindUser/', methods=['GET'])
@app.route('/Morakot/API/FindUser/', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def FindUser():
	UserID 	  = request.args.get('ID')
	UserData  = []
	Messsages = ["No user has been found"]
	UserObj = MKT_USER.query.filter(MKT_USER.ID == UserID).first()
	if UserObj:
		return GetUser(UserObj)
	else:
		return GetAPIReturnFormat(Header="View User Location",Data=UserData,RecordID="",Status=StatusCodes.not_found(),Type="Map",Message=Messsages)
	return MesssageStandard(Messages=['No user has been found...'],Statuscode=StatusCodes.not_found())

def GetUser(user):
	UserDict 		= {}
	UserData 		= {}
	UserList 		= []
	Longitude 		= None
	Latitude 		= None
	OnlineStatus 	= False
	UserRoleDes  	= ""
	DateLastLogin 	= ""
	TimeLastLogin 	= ""
	ApiStatus 		= ""
	Messsages 		= [""]

	Location = user.LastLocation
	if Location:
		try:
			LocationSplit = Location.split(' ')
			Longitude 	  = float(LocationSplit[1])
			Latitude 	  = float(LocationSplit[0])
		except Exception as e:
			raise e
	if user.LastLocationDate:
		DateLastLogin = user.LastLocationDate
		TimeLastLogin = DateLastLogin.split()[1]
		TimeLastLogin = TimeLastLogin.rsplit(":", 1)[0]
		TimeLastLogin = GetTimeStatus(TimeLastLogin)
		DateLastLogin = DateLastLogin.split()[0]
	UserRoleObj = MKT_ROLE.query.get(user.Role)
	if UserRoleObj:
		UserRoleDes = UserRoleObj.Description
	UserLoginObj = MKT_LOGIN_USER.query.get(user.ID)
	if UserLoginObj:
		OnlineStatus = True
	if Location:
		ApiStatus = StatusCodes.ok()
		UserList.append({
							"user_id"		:user.ID,
							"role"			:UserRoleDes,
							"branch"		:user.Branch,
							"longitude"	:Longitude,
							"latitude"  	:Latitude,
							"login_name"	:user.LogInName,
							"display_name" :user.DisplayName,
							"online"		:OnlineStatus,
							"last_location_date":DateLastLogin,
							"last_location_time":TimeLastLogin
							})
		UserDict.update({"users"	:UserList})
		UserDict.update(GetUrlDict())
		UserData.update({"user":UserDict})
	if not ApiStatus:
		ApiStatus = StatusCodes.not_found()
		Messsages = ["User has no location found."]
		UserDict.update({"users"	:UserList})
		UserDict.update(GetUrlDict())
		UserData.update({"user":UserDict})
	return GetAPIReturnFormat(Header="View User Location",Data=UserData,RecordID="",Status=ApiStatus,Type="Map",Message=Messsages)


def GetUsers(Users):
	UserDict 		= {}
	UserData 		= {}
	UserList 		= []
	Longitude 		= None
	Latitude 		= None
	OnlineStatus 	= False
	UserRoleDes  	= ""
	DateLastLogin 	= ""
	TimeLastLogin 	= ""
	Status 		  	= StatusCodes()
	for user in Users:
		Location = user.LastLocation
		if Location:
			try:
				LocationSplit = Location.split(' ')
				Longitude 	  = float(LocationSplit[1])
				Latitude 	  = float(LocationSplit[0])
			except Exception as e:
				raise e
		if user.LastLocationDate:
			DateLastLogin = user.LastLocationDate
			TimeLastLogin = DateLastLogin.split()[1]
			TimeLastLogin = TimeLastLogin.rsplit(":", 1)[0]
			TimeLastLogin = GetTimeStatus(TimeLastLogin)
			DateLastLogin = DateLastLogin.split()[0]
		UserRoleObj = MKT_ROLE.query.get(user.Role)
		if UserRoleObj:
			UserRoleDes = UserRoleObj.Description
		UserLoginObj = MKT_LOGIN_USER.query.get(user.ID)
		if UserLoginObj:
			OnlineStatus = True
		if Location !=None:
			UserList.append({
							 "user_id"		:user.ID,
							 "role"			:UserRoleDes,
							 "branch"		:user.Branch,
							 "longitude"	:Longitude,
						 	 "latitude"  	:Latitude,
							 "login_name"	:user.LogInName,
							 "display_name" :user.DisplayName,
							 "online"		:OnlineStatus,
							 "last_location_date":DateLastLogin,
							 "last_location_time":TimeLastLogin
							 })
		UserDict.update({"users"	:UserList})
		UserDict.update(GetUrlDict())
		UserData.update({"user":UserDict})
	return GetAPIReturnFormat(Header="View User Location",Data=UserData,RecordID="",Status=Status.ok(),Type="Map")

def GetOnlineUsers(Users):
	UserDict 		= {}
	UserData 		= {}
	UserList 		= []
	Longitude 		= None
	Latitude 		= None
	UserRoleDes  	= ""
	DisplayName 	= ""
	LogInName 		= ""
	Location 		= None
	OnlineStatus 	= False
	DateLastLogin 	= ""
	TimeLastLogin 	= ""
	Status 		  	= StatusCodes()
	for user in Users:
		UserObj = MKT_USER.query.get(user.UserID)
		if UserObj:
			Location = UserObj.LastLocation
			DisplayName = UserObj.DisplayName
			LogInName 	= UserObj.LogInName
			if UserObj.LastLocationDate:
				DateLastLogin = UserObj.LastLocationDate
				TimeLastLogin = DateLastLogin.split()[1]
				TimeLastLogin = TimeLastLogin.rsplit(":", 1)[0]
				TimeLastLogin = GetTimeStatus(TimeLastLogin)
				DateLastLogin = DateLastLogin.split()[0]
			if Location:
				try:
					LocationSplit = Location.split()
					Longitude 	  = float(LocationSplit[1])
					Latitude 	  = float(LocationSplit[0])
				except Exception as e:
					raise e
		UserRoleObj = MKT_ROLE.query.get(user.Role)
		if UserRoleObj:
			UserRoleDes = UserRoleObj.Description
		OnlineStatus = True
		if Location:
			UserList.append({
							 "user_id"		:user.UserID,
							 "display_name" :DisplayName,
							 "login_name"	:LogInName,
							 "role"			:UserRoleDes,
							 "last_location_date":DateLastLogin,
							 "last_location_time":TimeLastLogin,
							 "branch"		:user.Branch,
							 "longitude"	:Longitude,
					 		 "latitude"  	:Latitude,
					 		 "online"		:OnlineStatus
							 })
		UserDict.update({"users"	:UserList})
		UserDict.update(GetUrlDict())
		UserData.update({"user":UserDict})
	return GetAPIReturnFormat(Header="View User Location",Data=UserData,RecordID="",Status=Status.ok(),Type="Map")

def GetTimeStatus(time):
	now = datetime.datetime.strptime(time, "%H:%M")
	timeformat = now.strftime("%I:%M %p")
	return timeformat

def GetOfflineUsers(Users):
	UserDict 		= {}
	UserData 		= {}
	UserList 		= []
	Longitude 		= None
	Latitude 		= None
	UserRoleDes  	= ""
	DisplayName 	= ""
	LogInName 		= ""
	DateLastLogin 	= ""
	TimeLastLogin 	= ""
	Location 		= None
	OnlineStatus 	= False
	Status 		  	= StatusCodes()
	for user in Users:
		Location = user.LastLocation
		DisplayName = user.DisplayName
		LogInName 	= user.LogInName
		if Location:
			try:
				LocationSplit = Location.split(' ')
				Longitude 	  = float(LocationSplit[1])
				Latitude 	  = float(LocationSplit[0])
			except Exception as e:
				raise e
		if user.LastLocationDate:
			DateLastLogin = user.LastLocationDate
			TimeLastLogin = DateLastLogin.split()[1]
			TimeLastLogin = TimeLastLogin.rsplit(":", 1)[0]
			TimeLastLogin = GetTimeStatus(TimeLastLogin)
			DateLastLogin = DateLastLogin.split()[0]
		UserRoleObj = MKT_ROLE.query.get(user.Role)
		if UserRoleObj:
			UserRoleDes = UserRoleObj.Description
		OnlineUserObj = MKT_LOGIN_USER.query.get(user.ID)
		if not OnlineUserObj and Location:
			UserList.append({
							 "user_id"		:user.ID,
							 "display_name" :DisplayName,
							 "login_name"	:LogInName,
							 "role"			:UserRoleDes,
							 "branch"		:user.Branch,
							 "longitude"	:Longitude,
					 		 "latitude"  	:Latitude,
					 		 "online"		:OnlineStatus,
					 		 "last_location_date":DateLastLogin,
							 "last_location_time":TimeLastLogin,
							 })
		UserDict.update({"users"	:UserList})
		UserDict.update(GetUrlDict())
		UserData.update({"user":UserDict})
	return GetAPIReturnFormat(Header="View User Location",Data=UserData,RecordID="",Status=Status.ok(),Type="Map")

def GetUserLocationHistory(UserHist):
	UserDict 	 = {}
	UserData 	 = {}
	UserList 	 = []
	UserRoleDes  = ""
	Status 		 = StatusCodes()
	ApiStatus 	 = ""
	Messages 	 = []
	DisplayName  = ""
	LogInName 	 = ""
	UserID 		 = ""
	OnlineStatus = False
	if UserHist:
		for UserHistObj in UserHist:
			ApiStatus = Status.ok()
			Messages  = [""]
			Location = UserHistObj.LastLocation
			if Location:
				try:
					LocationSplit = Location.split(' ')
					Longitude 	  = float(LocationSplit[1])
					Latitude 	  = float(LocationSplit[0])
				except Exception as e:
					raise e
			UserObj = MKT_USER.query.get(UserHistObj.UserID)
			if UserObj:
				DisplayName = UserObj.DisplayName
				LogInName   = UserObj.LogInName
				UserID 		= UserObj.ID
				LoginObj = MKT_LOGIN_USER.query.get(UserID)
				if LoginObj:
					OnlineStatus = True
				UserRoleObj = MKT_ROLE.query.get(UserObj.Role)
				if UserRoleObj:
					UserRoleDes = UserRoleObj.Description
			DateTime = UserHistObj.Createdon
			Time = ""
			TimeStatus = ""
			if DateTime:
				DT = DateTime.split()
				DateTime = DT[0]
				Time = DT[1]
				Time = Time.rsplit(":", 1)[0]
				Time = GetTimeStatus(Time)
			UserList.append({
						 "role"				  :UserRoleDes,
						 "branch"			  :UserHistObj.Branch,
						 "longitude"		  :Longitude,
						 "latitude"  		  :Latitude,
						 "last_location_date" :DateTime,
						 "last_location_time" :Time,
						 "display_name"		  :DisplayName,
						 "login_name" 		  :LogInName,
						 "user_id" 			  :UserID,
						 "online" 			  :OnlineStatus
						 })
			UserDict.update({"users":UserList})
			UserDict.update(GetUrlDict())
			UserData.update({"user":UserDict})
	if ApiStatus =="":
		ApiStatus = Status.not_found()
		Messages  = ["No user history has been found."]
		UserDict.update({"users":UserList})
		UserDict.update(GetUrlDict())
		UserData.update({"user":UserDict})
	return GetAPIReturnFormat(Header="Find User Location History",Data=UserData,RecordID="",Status=ApiStatus,Type="Map",Message=Messages)

def GetUrlDict():
	DictUrl = {}
	DictUrl.update({
		"url_filter"		:"/FilterUser/?filter_by=",
		"url_search"		:"/SearchUser/?q=",
		"url_find"			:"/FindUser/?ID=",
		"url_find_user_hist":"/FindUserLocationHistory/?ID=&Date=",
		"filter_params"		:[
								{"label":"Online Users","value":"Online"},
								{"label":"Offline Users","value":"Offline"},
								{"label":"All Users","value":"All"}
							]
		})
	return DictUrl