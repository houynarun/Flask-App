# -*- coding: utf-8 -*-
import sys, json
from app.mktcore.imports        import *
from flask                      import request, url_for, render_template,flash,redirect,session, g
from ..                         import app, db
from app.mktcore.session        import *
from sqlalchemy                 import *
from .LineReports               import *
from .LineReportDetails         import *
from datetime                   import datetime, date, timedelta
import time, calendar
from decimal                    import *

import app.tools.mktreport      as mktreport
import app.tools.mktsetting     as mktsetting
import app.tools.mktmoney       as mktmoney
import app.tools.user           as mktuser
import app.tools.mktdate        as mktdate
import app.tools.mktmessage     as mktmessage
import app.tools.mktmonthend    as mktmonthend
import app.tools.mktgl          as mktgl

from app.GLBalance.models       import *
from app.Branch.models          import MKT_BRANCH
from .FinancialWidgetReg        import FRM_FINANCIAL_WIDGET_REG

registerCRUD(admin, '/LineReport', 'LineReport', FRM_LINE_REPORT, [MKT_LINE_REPORT])
registerCRUD(admin, '/LineReportDetail', 'LineReportDetail', FRM_LINE_REPORT_DE, [MKT_LINE_REPORT_DE])
registerCRUD(admin, '/FinancialWidgetReg', 'FinancialWidgetReg', FRM_FINANCIAL_WIDGET_REG, [MKT_FINANCIAL_WIDGET_REG])


@app.route("/Morakot/FinancialReport/")
@checkLogOutSession
@checkLogOutTime
def getFinancialReport():

    try:

        ErrorMsg    = []
        checkID = request.args.get("ID") if "ID" in request.args else ""
        
        getCheck = checkAccess ("/Morakot/FinancialReport/?ID=%s" % checkID, "Search")

        if getCheck != True:

            ErrorMsg.append(msg_error+msg_permission)
            return render_template("permission.html",ErrorMsg=ErrorMsg)

        ID      =   request.args.get("ID") if "ID" in request.args else ""
        Branch  =   request.args.get("Branch") if 'Branch' in request.args else mktuser.getBranch(session["ChangeBranch"]).ID
        Period  =   request.args.get("Period")
        Audit   =   request.args.get("Audit") if 'Audit' in request.args else "1"
        Month   =   request.args.get("Month") if 'Month' in request.args else ""
        Year    =   request.args.get("Year") if 'Year' in request.args else ""
        ShowPrintBy =   request.args.get("ShowPrintBy") if 'ShowPrintBy' in request.args else "No"
        HideZeroBal =   request.args.get("HideZeroBal") if 'HideZeroBal' in request.args else "No"
        Day         =   ""
        GroupMonth  =   None
        GroupYear   =   db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)
        FinancialDebugMode  =   mktsetting.getAppSetting('FinancialDebugMode')
        DebugMode   =   True if FinancialDebugMode == 'Yes' else False 

        if Year and Month:
            if len(Year) != 4 or len(Month) != 2 or not Year.isdigit() or not Month.isdigit():
                flash(msg_warning + "Year must be 4 digit and Month 2 digit")
                return render_template("changebranch.html",BackLink=request.referrer)

            GLBalanceFilter = MKT_GL_BALANCE_BACKUP.query.\
                                filter(MKT_GL_BALANCE_BACKUP.GLYear == Year).\
                                filter(MKT_GL_BALANCE_BACKUP.GLMonth == Month).first()
            if not GLBalanceFilter:
                flash(msg_warning + "Selected Year and Month not found")
                return render_template("changebranch.html",BackLink=request.referrer)
            Day = GLBalanceFilter.GLDay
        if Year:
            GroupMonth = db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
                            group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
                            filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

        Report  =   MKT_LINE_REPORT.query.\
                    order_by(MKT_LINE_REPORT.ID.asc()).\
                    all()

        ReportData      =   getFinancialReportData(ID, Branch, Period,Year=Year,Month=Month,Day=Day, Audit=Audit)
        BranchObj       =   MKT_BRANCH.query.get(Branch)
        LockedStatus    =   BranchObj.ReportLocked[1] if BranchObj else 0
        AuditedStatus   =   mkttool.getAudited(Year, Month)['Audit']

        if ReportData.has_key('Error'):
            flash(msg_warning + ReportData['Error'])
            if ReportData.has_key('BackLink'):
                return render_template("changebranch.html",BackLink=ReportData['BackLink'])
            else:
                return render_template("changebranch.html",BackLink=request.referrer)
        else:
            Period = ReportData.get('Info')['Period']

        return render_template( "gl/FinancialReport.html",
                                ShowPrintBy     = ShowPrintBy,
                                Report          = Report,
                                PrintByAndDate  = mktreport.getPrintByAndPrintDate,
                                ReportData      = ReportData,
                                getLang         = mktmessage.getLang,
                                GroupYear       = GroupYear,
                                GroupMonth      = GroupMonth,
                                LockedStatus    = LockedStatus,
                                Period          = Period,
                                Audit           = Audit,
                                HideZeroBal     = HideZeroBal,
                                AuditedStatus   = AuditedStatus,
                                DebugMode       = DebugMode
                            )

    except:
        raise

@app.route("/Morakot/FinancialReportV2/")
@checkLogOutSession
@checkLogOutTime
def getFinancialReportV2():
    try:

        ErrorMsg    = []
        checkID = request.args.get("ID") if "ID" in request.args else ""
        getCheck = checkAccess ("/Morakot/FinancialReportV2/?ID=%s" % checkID, "Search")

        if getCheck != True:

            ErrorMsg.append(msg_error+msg_permission)
            return render_template("permission.html",ErrorMsg=ErrorMsg)

        ID      =   request.args.get("ID") if "ID" in request.args else ""
        Branch  =   request.args.get("Branch") if 'Branch' in request.args else mktuser.getBranch(session["ChangeBranch"]).ID
        Period  =   request.args.get("Period")
        Audit   =   request.args.get("Audit") if 'Audit' in request.args else "1"
        showTotal = request.args.get("showTotal")if "showTotal" in request.args else ""
        MonthList   =   request.args.get("MonthList") if 'MonthList' in request.args else ""
        # MonthList = MonthList.split() if MonthList !='' else ''
        # MonthList = [str(m).zfill(2) for m in MonthList] # format each item of month in 0#

        MonthList = request.args.getlist('MonthList') if request.args.getlist('MonthList') else ['01','02','03','04','05','06','07','08','09','10','11','12']

        BankDate = mktdate.getBankDate()
        CurrentMonth = str(BankDate).split('-')[1]
        CurrentYear = str(BankDate).split('-')[0]

        Year    =   request.args.get("Year") if 'Year' in request.args else "" 

        if Year =="":
            Year = CurrentYear

        ShowPrintBy =   request.args.get("ShowPrintBy") if 'ShowPrintBy' in request.args else "No"
        HideZeroBal =   request.args.get("HideZeroBal") if 'HideZeroBal' in request.args else "No"
        Day         =   str(BankDate).split('-')[2]
        GroupMonth  =   None
        GroupYear   =   db.session.query(MKT_GL_BALANCE_BACKUP.GLYear).group_by(MKT_GL_BALANCE_BACKUP.GLYear)
        FinancialDebugMode  =   mktsetting.getAppSetting('FinancialDebugMode')
        DebugMode   =   True if FinancialDebugMode == 'Yes' else False 
        ReportingMonth = ''

        if Year != CurrentYear:

            if MonthList and not isValidMonth(MonthList):
                flash(msg_warning + "List of Month is not valid or duplicate month")
                return render_template("changebranch.html",BackLink=request.referrer)

            if Year and MonthList:
                if len(Year) != 4 or len(MonthList) == 0 or not Year.isdigit() or not isValidMonth(MonthList): # or not Month.isdigit()
                    flash(msg_warning + "Year must be 4 digit and Month 2 digit")
                    return render_template("changebranch.html",BackLink=request.referrer)

                GLBalanceFilter = MKT_GL_BALANCE_BACKUP.query.\
                                    filter(MKT_GL_BALANCE_BACKUP.GLYear == Year).\
                                    filter(MKT_GL_BALANCE_BACKUP.GLMonth.in_(MonthList)).first()
                if not GLBalanceFilter:

                    flash(msg_warning + "Selected Year and Month not found")
                    return render_template("changebranch.html",BackLink=request.referrer)
                Day = GLBalanceFilter.GLDay

        if Year:
            ReportingMonth = '%s of Year %s'%(ReportingMonth,Year)
            GroupMonth = db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
                            group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
                            filter(MKT_GL_BALANCE_BACKUP.GLYear == Year)

        Report  =   MKT_LINE_REPORT.query.\
                    order_by(MKT_LINE_REPORT.ID.asc()).\
                    all()

        ReportDataDict  = []
        ReportData = {}

        if MonthList:
            Months = {
                       '01':'January',
                       '02':'February',
                       '03':'March',
                       '04':'April',
                       '05':'May',
                       '06':'June',
                       '07':'July',
                       '08':'August',
                       '09':'September',
                       '10':'October',
                       '11':'November',
                       '12':'December'
                                       }
            ReportingMonth = 'Months: '

            for m in MonthList:
                m = str(m).zfill(2)
                ReportingMonth = '%s %s '%(ReportingMonth, Months[m] if m in Months else '')

                if (Year == '' or Year == CurrentYear) and str(m) == CurrentMonth:
                    ReportData      =   getFinancialReportData(ID, Branch, Period,Year='',Month='',Day=Day, Audit=Audit)
                    ReportData['Info']['Month']=str(m)
                else:
                    ReportData      =   getFinancialReportData(ID, Branch, Period,Year=Year,Month=m,Day=Day, Audit=Audit)
                ReportData.update({'month':m})
                ReportDataDict.append(ReportData)

            ReportingMonth = "%s of %s"%(ReportingMonth,Year)

        else:
            ReportData      =   getFinancialReportData(ID, Branch, Period,Year=Year,Month='',Day=Day, Audit=Audit)

        BranchObj       =   MKT_BRANCH.query.get(Branch)
        LockedStatus    =   BranchObj.ReportLocked[1] if BranchObj else 0
        # AuditedStatus   =   mkttool.getAudited(Year, Month)['Audit']

        if ReportData:
            if ReportData.has_key('Error'):
                flash(msg_warning + ReportData['Error'])
                if ReportData.has_key('BackLink'):
                    return render_template("changebranch.html",BackLink=ReportData['BackLink'])
                else:
                    return render_template("changebranch.html",BackLink=request.referrer)
            else:
                Period = ReportData.get('Info')['Period']

        return render_template( "gl/FinancialReportV2.html",
                                ShowPrintBy     = ShowPrintBy,
                                Report          = Report,
                                PrintByAndDate  = mktreport.getPrintByAndPrintDate,
                                ReportData      = ReportData,
                                ReportDataDict  = ReportDataDict,
                                getLang         = mktmessage.getLang,
                                GroupYear       = GroupYear,
                                GroupMonth      = GroupMonth,
                                LockedStatus    = LockedStatus,
                                Period          = Period,
                                Audit           = Audit,
                                HideZeroBal     = HideZeroBal,
                                MonthList       = MonthList,
                                DebugMode       = DebugMode,
                                mktmoney        = mktmoney,
                                ReportingMonth  = ReportingMonth,
                                showTotal       = showTotal,
                                Year            = Year
                            )


    except:
        raise

@app.route("/Morakot/FinancialReport/GroupMonth/<Year>", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getGroupMonth(Year):
    GroupMonth = {}
    if Year and len(Year) == 4 and Year.isdigit() :
        GroupMonth = db.session.query(MKT_GL_BALANCE_BACKUP.GLMonth).\
                     group_by(MKT_GL_BALANCE_BACKUP.GLMonth).\
                     filter(MKT_GL_BALANCE_BACKUP.GLYear == Year).\
                     order_by(MKT_GL_BALANCE_BACKUP.GLMonth.asc()).all()
    
    return json.dumps(GroupMonth)

@app.route("/Morakot/FinancialReport/GetAuditedStatus/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAuditedStatus():
    Month   =   request.args.get("Month") if 'Month' in request.args else ""
    Year    =   request.args.get("Year") if 'Year' in request.args else ""
    Data    =   mkttool.getAudited(Year, Month)
    
    return json.dumps(Data)

@app.route("/Morakot/MonthEndClosing", methods=['POST','GET'])
@checkLogOutSession
@checkLogOutTime
def MonthEndClosing():
    try:
        getCheck = checkAccess ("/Morakot/MonthEndClosing/", "Search")
        
        if getCheck != True:
            return render_template("permission.html",ErrorMsg=getCheck)

        else:
            Message = ''
            AccSetting      =   mktsetting.getAccSetting()
            if AccSetting:
                if request.method == "POST":
                    EndMonthObj = mktmonthend.setManualEndMonth()

                    if not EndMonthObj[0]:
                        Message = msg_error+str(EndMonthObj[1])
                    else:
                        Message = "Month-end closing was successfully."
                        event_code = "704"
                        Message = mktnotification.getEventCode()[event_code]
                        # notification    = mktnotification.getSignal(obj_id,self.model[0],"AUTH",event_code)
                        path  = str(request.path).split('/')[2]

                        getUserLogInID = session['getLogInID']
                        mktnotification.insertNotify({  
                                'ID':"",
                                'Path':path,
                                'Status':"AUTH",
                                'Code':event_code,
                                'Model':"",
                                'From':getUserLogInID, 
                                'To':getUserLogInID,
                                'Message':Message
                         })
                    

            BranchObj   =   MKT_BRANCH.query
            IsYearEnd = False
            IsMonthEnd = False
            for b in BranchObj:
                ReportLocked = b.ReportLocked
                if ReportLocked[2] == '1':
                    IsYearEnd = True
                    
                if ReportLocked[1] == '1':
                    IsMonthEnd = True

            BankDate        =   mktdate.getBankDateObj()
            LastYearEnd     =   '%s %s'%(calendar.month_name[int(BankDate.LastYearEnd[5:7])],BankDate.LastYearEnd[:4])
            LastMonthEnd    =   '%s %s'%(calendar.month_name[int(BankDate.LastMonthEnd[5:7])],BankDate.LastMonthEnd[:4])

            return render_template('/gl/MonthEndClosing.html',
                    Message=Message, 
                    IsYearEnd=IsYearEnd,
                    IsMonthEnd=IsMonthEnd,
                    LastYearEnd=LastYearEnd,
                    LastMonthEnd=LastMonthEnd)

    except Exception, e:
      raise

def isValidMonth(MonthList):
    """ Check any month item in a list is a valid month or not """
    try:
        if len(MonthList) == 0:
            return False

        MonthList = [int(x) for x in MonthList]

        for item in MonthList:
            if int(item)>12 or MonthList.count(item) > 1:
                return False
        return True
    except Exception as e:
        return False

def getTextIndent(Indent):
    try:
        
        Result      =   ""
        Space       =   "&nbsp;&nbsp;&nbsp;"
        if int(Indent) > 0:
            Result = Space*int(Indent)

        return Result

    except Exception, e:
        raise

def getFormatPeriod(Period, PYear='', PMonth='', PDay=''):
    try:

        if PYear and PMonth: 
            if PMonth == '00': PMonth = '12'
            BankDate = PYear+'-'+PMonth+'-'+PDay
        else:
            BankDate = mktdate.getBankDate()
        
        Date        =   str(BankDate).split("-")
        Year        =   Date[0]
        Month       =   Date[1]
        Day         =   Date[2]
        AccSetting  =   mktsetting.getAccSetting()
        YearEnd     =   AccSetting.YEAR_END.strip()
        MonthEnd    =   AccSetting.MONTH_END.strip()
        MonthDict   =   {   'JAN': 1, 'FEB': 2, 'MAR': 3, 'APR': 4, 'MAY': 5, 'JUN': 6, 
                            'JUL': 7, 'AUG': 8, 'SEP': 9, 'OCT': 10, 'NOV': 11, 'DEC': 12}
            
        if int(Period) == 0:#Current month
            CurrentDate     = datetime.strptime(str(BankDate), '%Y-%m-%d').date()
            LastDayOfMonth  = calendar.monthrange(CurrentDate.year, CurrentDate.month)[1] if MonthEnd == 'END' else int(MonthEnd)
            CurrentMonthEnd = datetime.strptime('%s-%s-%s'%(CurrentDate.year, CurrentDate.month,LastDayOfMonth), '%Y-%m-%d').date()
            if CurrentMonthEnd < CurrentDate:
                PreviousMonth   = CurrentMonthEnd
            else:
                Year, Month     = CurrentDate.year, CurrentDate.month-1
                if Month == 0:
                    Month   =   12
                    Year    -=  1
                LastDayOfMonth  = calendar.monthrange(Year, Month)[1] if MonthEnd == 'END' else int(MonthEnd)
                PreviousMonth   = datetime.strptime('%s-%s-%s'%(Year, Month,LastDayOfMonth), '%Y-%m-%d').date()

            CurrentMOnth1   = PreviousMonth + timedelta(days=1)
            CurrentMOnth2   = BankDate
            CurrentMOnth1   = mktdate.formatDate(str(CurrentMOnth1))
            CurrentMOnth2   = mktdate.formatDate(str(CurrentMOnth2))
            AsOf            =   "<b>From:</b> " + str(CurrentMOnth1) + " <b>To:</b> " + str(CurrentMOnth2)
        elif int(Period) == 1:#Current previous month
            CurrentDate     = datetime.strptime(str(BankDate), '%Y-%m-%d').date()
            LastDayOfMonth  = calendar.monthrange(CurrentDate.year, CurrentDate.month)[1] if MonthEnd == 'END' else int(MonthEnd)
            CurrentMonthEnd = datetime.strptime('%s-%s-%s'%(CurrentDate.year, CurrentDate.month,LastDayOfMonth), '%Y-%m-%d').date()
            if CurrentMonthEnd < CurrentDate:
                PreviousMonth   = CurrentMonthEnd
            else:
                Year, Month     = CurrentDate.year, CurrentDate.month-1
                if Month == 0:
                    Month   =   12
                    Year    -=  1
                LastDayOfMonth  = calendar.monthrange(Year, Month)[1] if MonthEnd == 'END' else int(MonthEnd)
                PreviousMonth   = datetime.strptime('%s-%s-%s'%(Year, Month,LastDayOfMonth), '%Y-%m-%d').date()

            PreviousMonth1  = mktdate.formatDate(str(PreviousMonth))
            Year, Month     = PreviousMonth.year, PreviousMonth.month-1
            if Month == 0:
                Month   =   12
                Year    -=  1
            LastDayOfMonth  = calendar.monthrange(Year, Month)[1] if MonthEnd == 'END' else int(MonthEnd)
            PreviousMonth   = datetime.strptime('%s-%s-%s'%(Year, Month,LastDayOfMonth), '%Y-%m-%d').date()+ timedelta(days=1)
            PreviousMonth2  = mktdate.formatDate(str(PreviousMonth))
            AsOf            =   "<b>From:</b> " + str(PreviousMonth2) + " <b>To:</b> " + str(PreviousMonth1)
        elif int(Period) == 2:#Previous month
            CurrentDate     = datetime.strptime(str(BankDate), '%Y-%m-%d').date()
            LastDayOfMonth  = calendar.monthrange(CurrentDate.year, CurrentDate.month)[1] if MonthEnd == 'END' else int(MonthEnd)
            CurrentMonthEnd = datetime.strptime('%s-%s-%s'%(CurrentDate.year, CurrentDate.month,LastDayOfMonth), '%Y-%m-%d').date()
            if CurrentMonthEnd < CurrentDate:
                PreviousMonth   = CurrentMonthEnd
            else:
                Year, Month     = CurrentDate.year, CurrentDate.month-1
                if Month == 0:
                    Month   =   12
                    Year    -=  1
                LastDayOfMonth  = calendar.monthrange(Year, Month)[1] if MonthEnd == 'END' else int(MonthEnd)
                PreviousMonth   = datetime.strptime('%s-%s-%s'%(Year, Month,LastDayOfMonth), '%Y-%m-%d').date()

            PreviousMonth   =   mktdate.formatDate(str(PreviousMonth))
            AsOf            =   "<b>As of:</b> " + str(PreviousMonth)

        elif int(Period) == 3:#Year to date
            CurrentDate     =   datetime.strptime(str(BankDate), '%Y-%m-%d').date()
            MonthOfEndYear  =   MonthDict[YearEnd]
            LastDayOfMonth  =   calendar.monthrange(int(Year), MonthOfEndYear)[1] if MonthEnd == 'END' else MonthEnd
            YearToDate1     =   "%s-%s-%s" %(Year,str(MonthDict[YearEnd]).zfill(2), LastDayOfMonth)
            YearToDate1     =   datetime.strptime(str(YearToDate1), '%Y-%m-%d').date() + timedelta(days=1)

            if YearToDate1 >= CurrentDate:
                Year, Month, Day = YearToDate1.year-1, YearToDate1.month, YearToDate1.day
                YearToDate1      = datetime.strptime('%s-%s-%s'%(Year, Month,Day), '%Y-%m-%d').date()

            YearToDate2     = BankDate
            YearToDate1     = mktdate.formatDate(str(YearToDate1))
            YearToDate2     = mktdate.formatDate(str(YearToDate2))
            AsOf            =   "<b>From:</b> " + str(YearToDate1) + " <b>To:</b> " + str(YearToDate2)
        elif int(Period) == 4:#Current Previous Year
            CurrentDate     =   datetime.strptime(str(BankDate), '%Y-%m-%d').date()
            Year, Month     =   CurrentDate.year, CurrentDate.month 
            MonthOfEndYear  =   MonthDict[YearEnd]
            LastDayOfMonth  =   calendar.monthrange(Year, MonthOfEndYear)[1] if MonthEnd == 'END' else MonthEnd
            CurrentYearEnd  =   datetime.strptime("%s-%s-%s" %(Year,MonthOfEndYear, LastDayOfMonth), '%Y-%m-%d').date()
            
            if CurrentYearEnd < CurrentDate:
                PreYear2   = CurrentYearEnd
            else:
                Year, Month     = CurrentYearEnd.year - 1, CurrentYearEnd.month
                LastDayOfMonth  = calendar.monthrange(Year, Month)[1] if MonthEnd == 'END' else int(MonthEnd)
                PreYear2        = datetime.strptime('%s-%s-%s'%(Year, Month,LastDayOfMonth), '%Y-%m-%d').date()
                
            LastDayOfMonth  = calendar.monthrange(Year-1, MonthOfEndYear)[1] if MonthEnd == 'END' else int(MonthEnd)
            PreYear1    = datetime.strptime('%s-%s-%s'%(Year-1, MonthOfEndYear,LastDayOfMonth), '%Y-%m-%d').date() + timedelta(days=1)
            PreYear1    = mktdate.formatDate(str(PreYear1))
            PreYear2    = mktdate.formatDate(str(PreYear2))
            AsOf        =   "<b>From:</b> " + str(PreYear1) + " <b>To:</b> " + str(PreYear2)
        elif int(Period) == 5: # Previous Year
            CurrentDate     =   datetime.strptime(str(BankDate), '%Y-%m-%d').date()
            Year, Month     =   CurrentDate.year, CurrentDate.month 
            MonthOfEndYear  =   MonthDict[YearEnd]
            LastDayOfMonth  =   calendar.monthrange(Year, MonthOfEndYear)[1] if MonthEnd == 'END' else MonthEnd
            CurrentYearEnd  =   datetime.strptime("%s-%s-%s" %(Year,MonthOfEndYear, LastDayOfMonth), '%Y-%m-%d').date()
            
            if CurrentYearEnd < CurrentDate:
                PreYear2   = CurrentYearEnd
            else:
                Year, Month     = CurrentYearEnd.year - 1, CurrentYearEnd.month
                LastDayOfMonth  = calendar.monthrange(Year, Month)[1] if MonthEnd == 'END' else int(MonthEnd)
                PreYear2        = datetime.strptime('%s-%s-%s'%(Year, Month,LastDayOfMonth), '%Y-%m-%d').date()

            PreYear2    =   mktdate.formatDate(str(PreYear2))
            AsOf        =   "<b>As of:</b> " + str(PreYear2)

        elif int(Period) == 6: # As of
            Today   = BankDate
            Today   = mktdate.formatDate(str(Today))
            AsOf    =   "<b>As of:</b> " + str(Today)
        # else:

        return AsOf

    except:
        raise

def getFormat(OpenTag, Value):

    if OpenTag.upper() == "B":
        output = "<b>" + str(Value) + "</b>"
    elif OpenTag.upper() == "I":
        output = "<i>" + str(Value) + "</i>"
    elif OpenTag.upper() == "BI":
        output = "<b><i>" + str(Value) + "</i></b>"
    else:
        output = str(Value)

    return output

def getReportSubTotalByDic(Dic, LineValue):
    try:

        Balance     = 0
        if LineValue.find(':') != -1:
            ListValue   = LineValue.split(":")
            LineValue   = ListValue[1]

        if LineValue.find('>') != -1:
            # LineValue = LineValue.replace('>', '')
            NewStr      = LineValue.split('>')
            if len(NewStr) >= 1:
                FirstStr    =   NewStr[0]
                SecondStr   =   NewStr[1]
                LineValue   =   ""
                SecondStr   =   int(SecondStr) + 1
                
                for i in range(int(FirstStr), int(SecondStr)):
                    LineValue += str(i) + " "

        LineValue   = LineValue.split()

        for item in LineValue:

            Option      = "+"
            if item.find("-") != -1:
                Option  = "-"
                item    = item.replace("-", "")

            getDic = 0
            if item in Dic:
                getDic = Dic[item]

            if Option == "+":
                Balance     =   float(Balance) + float(getDic)
            else:
                Balance     =   float(Balance) - float(getDic)

        return Balance

    # except:
    except Exception, e:
        raise e
        return "Something went wrong!"

@app.route("/Morakot/AccountingPeriod/", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def setLockedReport():
    try:

        getCheck = checkAccess ("/Morakot/MonthEndClosing/", "Search")
        if getCheck != True:
            return render_template("permission.html",ErrorMsg=getCheck)

        else:
            Branch      =   mktuser.getCurrentBranch()
            BranchObj   =   MKT_BRANCH.query.get(Branch)
            TranDate    =   mktdate.getBankDate()
            Month       =   TranDate.month
            
            if BranchObj:
                ReportLocked    =   BranchObj.ReportLocked
                if request.method == "GET":
            
                    CurrentMonthLock    =   ReportLocked[0]
                    PreviousMonthLock   =   ReportLocked[1]
                    PreviousYearLock    =   ReportLocked[2]

                    return render_template("gl/AccountingPeriod.html",
                            CurrentMonthLock    =   CurrentMonthLock,
                            PreviousMonthLock   =   PreviousMonthLock,
                            PreviousYearLock    =   PreviousYearLock
                        )

                elif request.method == "POST":
                    CurrentMonthLock    =   '1' #if request.form.get('CurrentMonth') == "on" else '0'
                    PreviousMonthLock   =   '1' if request.form.get('PreviousMonth') == "on" else '0'
                    PreviousYearLock    =   '1' if request.form.get('PreviousYear') == "on" else '0'

                    AccSetting          =   mktsetting.getAccSetting()
                    YearEnd             =   AccSetting.YEAR_END.strip()
                    DayEndOfMonth       =   AccSetting.MONTH_END.strip()
                    MonthOfYearEnd      =   mkttool.getMonth(YearEnd)
                    FirstMonthOfYear    =   MonthOfYearEnd + 1

                    if FirstMonthOfYear == 13: 
                        FirstMonthOfYear = 1

                    if Month == FirstMonthOfYear:
                        if PreviousMonthLock == '1' or PreviousYearLock == '1':
                            PreviousYearLock    = '1' 
                            PreviousMonthLock   = '0'

                    if ReportLocked[3] == '1' and ReportLocked[4] == '1':
                        flash(msg_error + 'Record cannot save, please process month end closing.')
                        
                    elif ReportLocked[3] == '1' or ReportLocked[4] == '1':
                        if ReportLocked[3] == '1':
                            if PreviousMonthLock != ReportLocked[1]: flash(msg_warning + 'Previous Month cannot change to OFF.')
                            BranchObj.ReportLocked = CurrentMonthLock+ReportLocked[1]+PreviousYearLock+ReportLocked[3]+ReportLocked[4]
                        
                        elif ReportLocked[4] == '1':
                            if PreviousYearLock != ReportLocked[2]: flash(msg_warning + 'Previous Year cannot change to OFF.')
                            BranchObj.ReportLocked = CurrentMonthLock+PreviousMonthLock+ReportLocked[2]+ReportLocked[3]+ReportLocked[4]
                        flash('Record was saved successfully')

                    else:
                        BranchObj.ReportLocked = CurrentMonthLock+PreviousMonthLock+PreviousYearLock+ReportLocked[3]+ReportLocked[4]
                        flash('Record was saved successfully')
                        
                    db.session.add(BranchObj)
                    db.session.commit()

                    return redirect(url_for("setLockedReport"))

            else:
                return "Branch Not Found"

    except:
        db.session.rollback()
        raise

def checkAccessBrach(Branch):
    if Branch.upper() == "ALL":
        BranchName  =   "ALL"
    else:

        BranchNotFound  = ""
        AccBranchID     = ""
        BranchName      = ""
        AccBranch       = mktuser.getMultiBranch(Branch)
        
        if AccBranch:
            for item in AccBranch:
                BranchName += item.Description + ", "
                AccBranchID += item.ID + " "

        BranchList      =   Branch.split()
        for item in BranchList:
            if item.upper() not in AccBranchID:
                BranchNotFound += item + ", "

        BranchNotFound = BranchNotFound[:-2]
        if BranchNotFound:
            return False, "Warning: %s branches is not found." %BranchNotFound 

        BranchName = BranchName[:-2]

    CheckBranch = mktuser.checkAccessBrach(Branch)
    if not CheckBranch["Check"]:
        BackLink = request.referrer
        return False, "You can't access this %s branch." %CheckBranch["Branch"], BackLink 
    
    return True, BranchName

def getFinancialReportData(ID='',Branch='',Period='',Year='',Month='', Day='', Audit='1'):

    reload(sys)
    sys.setdefaultencoding('utf-8')
    
    Currency    = mktsetting.getAccSetting().BaseCurrency
    CheckBranch = checkAccessBrach(Branch)
    
    if CheckBranch[0] == True:
        BranchName = CheckBranch[1]
    else:
        if len(CheckBranch) == 3:
            return {'Error' : CheckBranch[1], 'BackLink': CheckBranch[2]}
        else:
            return {'Error' : CheckBranch[1]}

    if not Currency:
        return {'Error' : "Base currency not found, Please check accounting setting."}
    
    if ID:
        Report1 = MKT_LINE_REPORT.query.get(ID)
        if not Period:
            Period = Report1.DefaultPeriod if Report1 and Report1.DefaultPeriod else "0"

        ReportDetails   =   MKT_LINE_REPORT_DE.query.\
                            order_by(MKT_LINE_REPORT_DE.LineNumber.asc()).\
                            filter(MKT_LINE_REPORT_DE.Report == ID).\
                            all()

        if not ReportDetails:
            return {'Error' : "Report line %s no item yet." %ID}
    
    FinancialReportData = {}
    AmountByRow         = {}
    AsOf                = getFormatPeriod(Period,Year,Month,Day)

    GLMappingObj = MKT_GL_MAPPING.query

    Condition = []
    if Year and Month:
        GLTable   = MKT_GL_BALANCE_BACKUP
        Condition = [GLTable.GLYear == Year,GLTable.GLMonth == Month, GLTable.Audit == Audit]
    else:
        GLTable   = MKT_GL_BALANCE

    GLObj   =   GLTable.query.filter(*Condition)

    for row in ReportDetails:
        if row.LineType.upper() == "GH" :
            FinancialReportData[int(row.LineNumber)]={
                                        'ID'         : row.ID,
                                        'Type'       : 'GH', 
                                        'Format'     : row.Format,
                                        'Indent'     : getTextIndent(row.Indent), 
                                        'Description': row.LineDescription} 
        elif row.LineType.upper() == "LD" :
            Description = GLMappingObj.get(str(row.LineValue).replace('-', '')) 
            LineDescription = ''

            if Report1.Option == 'Y':
                LineDescription = str(row.LineValue) + ' - '
            if row.LineDescription :            
                LineDescription += row.LineDescription
            elif Description:
                LineDescription += Description.Description
            
            # get balance from gl that mapped
            NetOperatingProfit = 0
            ReportSubTotal = 0

            if '*' in row.LineValue:
                LineItems = row.LineValue.split('*')
                for li in LineItems:
                    if '.' in li:
                        ReportLine = li.split('.')
                        NetOperatingProfit += float(mktgl.getReportSubTotal(ReportLine[0].strip(), ReportLine[1].strip(), Currency, Branch, 0, GLTable=GLTable, GLObj=GLObj))
                        
                    else:
                        ReportSubTotal += mktgl.getGLValue(li, Branch, Period, GLTable=GLTable, GLObj=GLObj) 
                        
            else:
                ReportSubTotal = mktgl.getGLValue(row.LineValue, Branch, Period, GLTable=GLTable, GLObj=GLObj) 

            # if ReceiverReportID in row.Report and ReceiverLineNumber in str(row.LineNumber) :
            #     # get net profit of month before posting income summary 
            #     NetOperatingProfit = str(mktgl.getReportSubTotal(SenderReportID, SenderLineValue, Currency, Branch, 0, GLTable=GLTable, GLObj=GLObj)).replace(',', '')
                
            # if we view report in current month we need to add NetOperatingProfit to current balance 
            # because it doesn't post income summary yet for current month 
            if int(Period) == 0 or int(Period) == 3 or int(Period) == 6 :
                ReportSubTotal = float(ReportSubTotal) if Year and Month else float(ReportSubTotal) + float(NetOperatingProfit)
                
            else :
                ReportSubTotal = float(ReportSubTotal)
            
            AmountByRow.update({str(row.LineNumber):float(mktmoney.toMoney(float(ReportSubTotal), mktmoney.getCurrencyObj(Currency)).replace(',',''))})

            if float(ReportSubTotal) < 0 :
                SubTotal =  mktmoney.toMoney(abs(float(ReportSubTotal)), mktmoney.getCurrencyObj(Currency))
                SubTotal = '(%s)'%SubTotal

            else :
                SubTotal = mktmoney.toMoney(float(ReportSubTotal), mktmoney.getCurrencyObj(Currency))
                

            FinancialReportData[int(row.LineNumber)]={
                                        'ID'             : row.ID,
                                        'Type'           : 'LD', 
                                        'Indent'         : getTextIndent(row.Indent), 
                                        'Description'    : LineDescription, 
                                        'Currency'       : Currency,
                                        'CurrencySymbol' : mktmoney.getCurrencySymbol(Currency),
                                        'Format'         : row.Format,
                                        'Value'          : SubTotal } 
        
        elif row.LineType.upper() == "ST" :
            TotalNetIncome  =   getTotalLineAmount(row.LineValue,AmountByRow, Currency, Branch, GLTable=GLTable, GLObj=GLObj)
            AmountByRow.update({str(row.LineNumber):float(TotalNetIncome)})

            if float(TotalNetIncome) < 0 :
                SubTotal = mktmoney.toMoney(abs(float(TotalNetIncome)), mktmoney.getCurrencyObj(Currency))
                SubTotal = '(%s)'%SubTotal
            else :
                SubTotal = mktmoney.toMoney(float(TotalNetIncome), mktmoney.getCurrencyObj(Currency))

            FinancialReportData[int(row.LineNumber)]={
                                        'ID'             : row.ID,
                                        'Type'           : 'ST', 
                                        'Indent'         : getTextIndent(row.Indent), 
                                        'Description'    : row.LineDescription, 
                                        'Currency'       : Currency,
                                        'CurrencySymbol' : mktmoney.getCurrencySymbol(Currency),
                                        'Format'         : row.Format,
                                        'Value'          : SubTotal } 
        else :
            FinancialReportData[int(row.LineNumber)]={'Type'              : '','ID':'' }

    for row in ReportDetails:
        if row.LineType.upper() in ["ST","GH"] :
            TotalNetIncome  =   getTotalLineAmount(row.LineValue,AmountByRow, Currency, Branch, GLTable=GLTable, GLObj=GLObj)
            AmountByRow.update({str(row.LineNumber):float(TotalNetIncome)})

            if float(TotalNetIncome) < 0 :
                SubTotal = mktmoney.toMoney(abs(float(TotalNetIncome)), mktmoney.getCurrencyObj(Currency))
                SubTotal = '(%s)'%SubTotal
            else :
                SubTotal = mktmoney.toMoney(float(TotalNetIncome), mktmoney.getCurrencyObj(Currency))

            FinancialReportData[int(row.LineNumber)]={
                                        'ID'             : row.ID,
                                        'Type'           : row.LineType.upper(), 
                                        'Indent'         : getTextIndent(row.Indent), 
                                        'Description'    : row.LineDescription, 
                                        'Currency'       : Currency,
                                        'CurrencySymbol' : mktmoney.getCurrencySymbol(Currency),
                                        'Format'         : row.Format,
                                        'Value'          : SubTotal }

    ReportLocked = 'N'
    if Branch.upper() != 'ALL':
        ObjBranch = MKT_BRANCH.query.get(Branch)
        if ObjBranch:
            ReportLocked = ObjBranch.ReportLocked
    
    return {'Data'  : FinancialReportData, 
            'Info'  : { 'ReportLocked': ReportLocked,
                        'Branch' : Branch,
                        'Period' : Period,
                        'Year' : Year,
                        'Month' : Month,
                        'ID': ID},
            'Title' : { 'CompanyName': Report1.CompanyName,
                        'ReportName' : Report1.ReportName,
                        'AsOf'       :AsOf,
                        'BranchName' :BranchName}}

def getTotalLineAmount(LineValue,Dic,Currency, Branch, GLTable='', GLObj=''):
    try:
        TotalAmount  =   0 
        if '*' in LineValue:
            LineItems = LineValue.split('*')
            for li in LineItems:
                if '.' in li:
                    ReportLine = li.split('.')
                    TotalAmount += float(mktgl.getReportSubTotal(ReportLine[0].strip(), ReportLine[1].strip(), Currency, Branch, 0, GLTable=GLTable, GLObj=GLObj))
                    
                else:
                    TotalAmount += getReportSubTotalByDic(Dic, li) 
            
        else:
            TotalAmount = getReportSubTotalByDic(Dic, LineValue)

        return TotalAmount

    except Exception as e:
        raise e
@app.route("/Morakot/LineValue/<LineID>", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def LineValue(LineID):
    BaseCurrencyObj = mktmoney.getCurrencyObj(mktsetting.getAccSetting().BaseCurrency)
    LineDescription = ""
    GLBalance= ""
    LineValue=""
    LineObj = MKT_LINE_REPORT_DE.query.filter(MKT_LINE_REPORT_DE.ID==LineID).first()
    GLMappingObj = MKT_GL_MAPPING.query
    if LineObj:
        Branch = mktuser.getCurrentBranch()
        LineDescription = LineObj.LineDescription
        LineValue = LineObj.LineValue
        ListLineValue = LineValue.replace('-','').split()
        GLBalance = MKT_GL_BALANCE.query.filter(MKT_GL_BALANCE.ID.in_(ListLineValue)).\
                                filter(MKT_GL_BALANCE.Branch==Branch).\
                                order_by(MKT_GL_BALANCE.ID,MKT_GL_BALANCE.Currency)


    return render_template( "gl/linevalue.html",
                            LineID=LineID,
                            LineDescription=LineDescription,
                            LineValue=LineValue,
                            float=float,
                            toMoney=mktmoney.toMoney,
                            getCurrencyObj=mktmoney.getCurrencyObj,
                            BaseCurrencyObj=BaseCurrencyObj,
                            GLBalance=GLBalance,
                            GLMappingObj=GLMappingObj
                            )

@app.route("/Morakot/VerifyLineReport", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def verifyReportLine():
    LineReportObj   =   MKT_LINE_REPORT_DE.query.filter(MKT_LINE_REPORT_DE.LineType == "LD").all()
    Branch          =   mktuser.getCurrentBranch()

    DuplicateList   =   []
    LostList        =   []
    GlOfLineReport  =   []
    GlList          =   getListGLID()[0] 
    GlMappingObj    =   MKT_GL_MAPPING.query    
    GlBalanceObj    =   MKT_GL_BALANCE.query    

    if LineReportObj:
        for Line in LineReportObj:
            GlOfLineReport  += Line.LineValue.replace('-','').split()

    for gl in GlList:
        Count = GlOfLineReport.count(gl)
        if Count == 0:
            LostList.append(gl)
        elif Count > 1:
            DuplicateList.append(gl)


    Str = '<style>small{color:blue;}</style>'
    Str += '<h1>Unmap GL of Line Report</h1>'
    Str +=  '<ul>'
    for l in LostList:
        Label = ''
        Currency = 'USD'
        GlRecord = GlMappingObj.get(l)
        if GlRecord:
            Currency = GlRecord.Currency
            Label = GlRecord.Description
        LCYBal  = 0
        Bal     = 0
        GlBalRecord = GlBalanceObj.filter(MKT_GL_BALANCE.ID == l).filter(MKT_GL_BALANCE.Branch == Branch).first()
        if GlBalRecord:
            LCYBal  =   GlBalRecord.LCYBalance
            Bal     =   GlBalRecord.Balance
        if Bal != 0:
            Str +=  '<li><a href="/Morakot/GLBalance/?ID=%s&Currency=%s" target="_blank">%s</a> <small> [Bal:%s LCYBal:%s] </small>: %s - %s</li>'%(l,Currency,l,Bal,LCYBal,Label,Branch)
    Str +=  '</ul>'

    Str += '<h1>Duplicate GL of Line Report</h1>'
    Str +=  '<ul>'
    for d in DuplicateList:
        Label = ''
        Currency = 'USD'
        GlRecord = GlMappingObj.get(d)
        if GlRecord:
            Currency = GlRecord.Currency
            Label = GlRecord.Description
        LCYBal  = 0
        Bal     = 0
        GlBalRecord = GlBalanceObj.filter(MKT_GL_BALANCE.ID == d).filter(MKT_GL_BALANCE.Branch == Branch).first()
        if GlBalRecord:
            LCYBal  =   GlBalRecord.LCYBalance
            Bal     =   GlBalRecord.Balance
        Str +=  '<li><a href="/Morakot/GLBalance/?ID=%s&Currency=%s" target="_blank">%s</a> <small>[Bal:%s LCYBal:%s]</small>: %s</li>'%(d,Currency,d,Bal,LCYBal,Label)
    Str +=  '</ul>'


    # print GlList,'GlList'
    # print GlOfLineReport,'GlOfLineReport'
    # print LostList,'LostList'
    # print DuplicateList,'DuplicateList'

    return Str

def getListGLID():
    try:
        
        Dic     =   {}
        Main    =   []
        SubList =   getSubGLList()
        GLObj   =   MKT_GL_MAPPING.query.\
                    filter(~MKT_GL_MAPPING.ID.in_(SubList)).\
                    all()

        if GLObj:
            for item in GLObj:
                Sub     =   []
                if item.SubGL:
                    SubGL   =   item.SubGL
                    SubGL   =   SubGL.split()

                    for sub in SubGL:
                        Sub.append(sub)

                Dic.update({item.ID:Sub})
                Main.append(item.ID)

        return [Main, Dic]

    except Exception, e:
        raise

def getSubGLList():
    try:
        
        Dic     =   []
        GLObj   =   MKT_GL_MAPPING.query.\
                    filter(MKT_GL_MAPPING.SubGL != "")

        if GLObj:
            for item in GLObj:
                if item.SubGL:
                    SubGL   =   item.SubGL
                    SubGL   =   SubGL.split()

                    for sub in SubGL:
                        Dic.append(sub)

        return Dic

    except Exception, e:
        raise

