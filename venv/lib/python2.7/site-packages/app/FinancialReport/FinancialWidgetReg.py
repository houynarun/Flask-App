from flask 						import flash
from app.mktcore.wtfimports 	import *
from .models 					import *
from app.Branch.models 			import MKT_BRANCH
from app.Currency.models 		import MKT_CURRENCY



def loadLineReport():
	return MKT_LINE_REPORT.query

def loadFilterBranch():
	return MKT_BRANCH.query

def loadCurrency(curr=""):
	if curr != "":
		return  MKT_CURRENCY.query.filter_by(ID=curr).first()
	return MKT_CURRENCY.query.all()

def loadLineNumber():
	LineDetail = MKT_LINE_REPORT_DE.query
	LineReport = MKT_FINANCIAL_WIDGET_REG.query.get(g.formID).LineReport
	
	if "Edit" in request.url:
		LineReportDe = MKT_LINE_REPORT_DE.query.\
						join(MKT_LINE_REPORT, MKT_LINE_REPORT_DE.Report==MKT_LINE_REPORT.ID).\
						filter(MKT_LINE_REPORT.ID==LineReport).\
						all()
		return  LineReportDe

	return LineDetail


@app.route("/Morakot/GetLineNumber")
def getLineReport():
	LineReport = request.args.get('LineReport')
	LineNumber = 0
	LineDescription = ""
	Dic = {}

	LineReportDe = MKT_LINE_REPORT_DE.query.\
					join(MKT_LINE_REPORT, MKT_LINE_REPORT_DE.Report==MKT_LINE_REPORT.ID).\
					filter(MKT_LINE_REPORT.ID==LineReport).\
					all()
	
	if LineReportDe is not None:
		for row in LineReportDe:			
			LineNumber = row.LineNumber
			LineDescription = str(row.LineDescription)
			Dic[row.ID] = str(row.LineNumber) + " - " + row.LineDescription			
			
	return jsonify(results=Dic)


def getRecord():
	try:
		result = MKT_FINANCIAL_WIDGET_REG_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_FINANCIAL_WIDGET_REG.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict[row.ID] = str(row.LineNumber) + " - " + str(row.LineDescription)
			return Dict
		else:
			return Dict

	except:
		raise


class FRM_FINANCIAL_WIDGET_REG(exform):
	LineReport 		= QuerySelectField(	requiredlabel("Line Report","*"),
										query_factory=loadLineReport,
										get_label=lambda a: a.ID + " - " + a.ReportName,
										allow_blank=True,
										blank_text="-- Choose Line Report --",
										)
	LineNumber 		= QuerySelectField(	requiredlabel("Line Number","*"),
										query_factory=loadLineNumber,
										get_label=lambda a: str(a.LineNumber) + " - " + a.LineDescription,
										allow_blank=True,
										blank_text="-- Choose Line Number --",
										)
	# FilterBranch	= QuerySelectField(	requiredlabel("Filter Branch","*"),
	# 									query_factory=loadFilterBranch,
	# 									get_label=lambda a : a.ID + " - " + a.Description,
	# 									allow_blank=True,
	# 									blank_text="-- Choose Branch --",
	# 									)
	Period 			= SelectField(
									"Period",
									choices=[('0', 'Current Month'),
											 ('1', 'Current Previous Month'),
											 ('2', 'Previous Month'),
											 ('3', 'Year to Date'),
											 ('4', 'Current Previous Year'),
											 ('5', 'Previous Year'),
											 ('6', 'As of Today')
											 ],
									default='Y'
									)
	Label 			= TextField(requiredlabel("Label", "*"), validators=[validators.Length(max=100)])
	Currency		= QuerySelectField(requiredlabel("Currency", "*"),
										query_factory=loadCurrency,
										get_label=lambda a : a.ID,
										allow_blank=True,
										blank_text="-- Choose Currency --",
										default=lambda: loadCurrency('USD')
										)
	Icon 			= TextField(validators=[validators.Length(max=20)])


	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay = "LineNumber"
		varname = "LineReport:$('#LineReport').val()"

		func = ["LineReport", varname, fielddisplay, "/Morakot/GetLineNumber", "change"]

		hotfield.append(func)

		return hotfield