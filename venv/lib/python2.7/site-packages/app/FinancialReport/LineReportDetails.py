from flask 						import flash
from app.mktcore.wtfimports 	import *
from .models 					import *
from .. 						import app, db
import time

from app.GL.models 				import *
from app.AccSetting.models		import *

import app.tools.mktreport 		as mktreport
import app.tools.mktaudit 		as mktaudit
import app.tools.mktmonthend 	as mktmonthend

@app.route("/Morakot/ReportLineNumber", methods=['GET'])
def getReportLineNumber():
	try:

		ReportID 	= 	request.args.get('Report') if 'Report' in request.args else ""
		LineNumber 	= 	1

		LineReport 	= 	MKT_LINE_REPORT_DE.query.\
						filter(MKT_LINE_REPORT_DE.Report == ReportID)

		if LineReport:
			LineNumber 	= 	LineReport.\
							count()

			LineNumber 	=	int(LineNumber) + 1
			# LineNumber 	=	"{:0>3d}".format(LineNumber)

		return jsonify(LineNumber=str(LineNumber))

	except:
		raise

def loanLineReport():
	try:

		return MKT_LINE_REPORT.query

	except:
		raise

class FRM_LINE_REPORT_DE(exform):

	Report 			=	QuerySelectField(
							requiredlabel("Report Name", "*"),
							query_factory	= loanLineReport,
							get_label		= u'ReportName',
							allow_blank		= True,
							blank_text		= u'--Choose Line Report--',
							validators		= [validators.Required()]
						)

	LineNumber 		=	TextField(requiredlabel("Line Number", "*"), [validators.Required()])

	LineType 		=	SelectField(
							requiredlabel("Line Type", "*"),
							choices = [('GH', 'Group Header'),
									   ('LD', 'Line Detail'),
									   ('ST', 'Subtotal'),
									   ('SP', 'Space')],
							default ='LD',
							validators=[validators.Required()]
						)
	LineDescription =	TextField("Line Description")
	
	Format 			=	SelectField(
							requiredlabel("Format", "*"),
							choices = [('N', 'Normal'),
									   ('B', 'Bold'),
									   ('I', 'Italic'),
									   ('BI', 'Bold and Italic')],
							default='N',
							validators=[validators.Required()]
						)

	Indent 			=	TextField("Text Indent", default='0')
	LineValue 		=	TextAreaField("Line Value")

	def validate_Indent(form, field):
		try:
			int(request.form['Indent'])
		except Exception, e:
			raise ValidationError("This field must be in numeric format.") 

	def validate_LineValue(form, field):
		try:

			LineType 	= request.form['LineType']
			ID 			= request.form['ID']
			LineValue 	= request.form['LineValue']
			Report 		= request.form['Report']

			if LineType.upper() != "GH" or LineType.upper() != "SP":
				if not LineValue:
					raise ValidationError("This field is required.")
			else:
			
				if LineType.upper() == 'LD':

					Check 		=	LineValue.split()
					ValueList 	=	LineValue.split()
					
					if len(Check) > 1:
						# raise ValidationError(ValueList)
						if LineValue.find(':') != -1:
							NewStr 		= 	LineValue.split(':')
							ValueList 	=	NewStr[1].split()
							# raise ValidationError(ValueList)
						else:
							raise ValidationError("Wrong format for Subtotal value.")

					Value 	= 	""
					Existed = 	""
					for item in ValueList:
						item 		=	item.replace("-", "")
						GLBalance 	= 	MKT_GL_MAPPING.query.\
										filter(MKT_GL_MAPPING.ID == item).\
										all()

						if not GLBalance:
							Value += item + ", "
						else:

							Inserted 		=	MKT_LINE_REPORT_DE.query.get(ID)
							CheckExisted 	=	None
							if not Inserted:

								CheckExisted = 	MKT_LINE_REPORT_DE.query.\
												filter(MKT_LINE_REPORT_DE.Report == Report).\
												filter(MKT_LINE_REPORT_DE.LineValue.like('%' +item+ '%')).\
												all()

							else:

								CheckExisted = 	MKT_LINE_REPORT_DE.query.\
												filter(MKT_LINE_REPORT_DE.ID != ID).\
												filter(MKT_LINE_REPORT_DE.Report == Report).\
												filter(MKT_LINE_REPORT_DE.LineValue.like('%' +item+ '%')).\
												all()

							if CheckExisted:
								Existed += item + ", "

					Value = Value[:-2]
					if Value:
						raise ValidationError("GL %s not found." %Value)

					Existed = Existed[:-2]
					if Existed:
						raise ValidationError("GL %s already existed." %Existed)

				if LineType.upper() == 'ST':
					# LineValue 	= request.form['LineValue']
					if LineValue.find(":") != -1:
						LineValue 	= LineValue.split(":")
						LineValue 	= LineValue[1]
						# ValueList 	= LineValue.split()
						ValueList 	= LineValue
						Value 		= ""
						Double 		= ""

						if '>' in ValueList:

							CheckList = str(ValueList).split('>')

							try:

								CheckList1 = str(CheckList[0]).replace('[', '')
								CheckList1 = CheckList1.strip()
								int(CheckList1)

							except:
								raise ValidationError("This value (%s) must be in numeric format." %CheckList1)

							try:

								CheckList2 = str(CheckList[1]).replace(']', '')
								CheckList2 = CheckList2.strip()
								int(CheckList2)

							except:
								raise ValidationError("This value (%s) must be in numeric format." %CheckList2)

							if int(CheckList1) > int(CheckList2):
								raise ValidationError("This value %s must be bigger than %s." %(CheckList2, CheckList1))
							else:
								ValueList = ""
								CheckList2 = int(CheckList2) + 1
								for item in range(int(CheckList1), int(CheckList2)):
									ValueList += str(item) + " "

						ValueList = ValueList.split()
						# raise ValidationError(ValueList)
						for item in ValueList:
							item 		=	item.replace("-", "")
							LineDetail 	= 	MKT_LINE_REPORT_DE.query.\
											filter(~MKT_LINE_REPORT_DE.LineType.in_(["GH", "SP"])).\
											filter(MKT_LINE_REPORT_DE.LineNumber == item).\
											filter(MKT_LINE_REPORT_DE.Report == Report).\
											first()

							if not LineDetail:
								Value += item + ", "

							# Check Item if existed
							Count = 0
							for row in ValueList:
								row = row.replace("-", "")
								if item == row:
									Count  += 1

								if Count > 1:
									raise ValidationError(" Line value %s already existed." %item)

						Value = Value[:-2]
						if Value:
							raise ValidationError(" Line number %s not found." %Value)
							
					else:
						raise ValidationError("Wrong format for Subtotal value.")

		except:
			raise

	@staticmethod
	def hotField():

		hotfield 		= []

		fielddisplay 	= "$('#LineNumber').val(data.LineNumber)"
		varname 		= "Report:$('#Report').val()"
		fun 			= ["Report", varname, fielddisplay, "/Morakot/ReportLineNumber", "change"]
		hotfield.append(fun)

		return hotfield

	# @staticmethod
	# def setDisableforEdit():  # override base class method
	# 	return [('LineNumber')]

	@staticmethod
	def beforeInsert():

		ID 			= 	request.form['ID']
		Report 		= 	request.form['Report']
		LineNumber 	= 	request.form['LineNumber']

		LineObj 	=	MKT_LINE_REPORT_DE.query.get(ID)
		LineReportObj	=	MKT_LINE_REPORT_DE.query.\
							filter(MKT_LINE_REPORT_DE.Report == Report).\
							all()

		if LineReportObj:
			if not LineObj:
				updateLineNumber(LineReportObj, LineNumber)

			else:
				if int(LineObj.LineNumber) != int(LineNumber):
					updateLineNumber(LineReportObj, LineObj.LineNumber, True)
					updateLineNumber(LineReportObj, LineNumber)

		return True

	@staticmethod
	def reverseRec():
		try:

			ID 			= 	g.formID
			LineNumber 	=	""
			Report 		=	""
			LineObj		=	MKT_LINE_REPORT_DE.query.get(ID)

			if LineObj:

				LineNumber 	= 	LineObj.LineNumber
				Report 		=	LineObj.Report
				# Move reverse record to history and delete it
				# mktaudit.moveAUTHtoHIST(MKT_LINE_REPORT_DE, MKT_LINE_REPORT_DE_HIST, ID)
				# mktaudit.deleteAUTH(MKT_LINE_REPORT_DE, ID)

			LineReportObj	=	MKT_LINE_REPORT_DE.query.\
								filter(MKT_LINE_REPORT_DE.Report == Report).\
								all()
			
			if LineReportObj:
				updateLineNumber(LineReportObj, LineNumber, True)
				

			return True, ""#The record reversed successfully,

		except Exception, e:
			db.session.rollback()
			return True,msg_error+"%s"%e

	@staticmethod
	def IsAcceptOverride():
		Override 	= ""

		ID 			= request.form['ID']
		Report 		= request.form['Report']
		LineNumber 	= request.form['LineNumber']

		Existed 	=	MKT_LINE_REPORT_DE.query.get(ID)
		Check 		=	None
		Msg 		=	""
		if not Existed:
			Check 	= 	MKT_LINE_REPORT_DE.query.\
						filter(MKT_LINE_REPORT_DE.Report == Report).\
						filter(MKT_LINE_REPORT_DE.LineNumber == LineNumber).\
						first()

		if Check:

			Override 	= True
			Msg 		= "Line number %s is already existed. " %LineNumber

		#Show message overide for update report if report is in net income equity
		AccountingSetting = MKT_ACCOUNTING_SETTING.query.get('SYSTEM')

		if AccountingSetting and Existed and str(Existed.LineNumber) != str(LineNumber):

			NetIncomeToEquity = AccountingSetting.NetIncomeToEquity

			ReportList = [item.strip().split()[0] for item in NetIncomeToEquity.split(">")]

			if Report and Report.split()[0] in ReportList:
				Override 	= True
				Msg 		+= "Please make sure to update Report " + str(Report.split()[0]) + " Net Income to Equity Line in Accounting Setting. "

		Msg 		+= " Do you want to procceed?"
		MsgShow 	= True if Override else False
		return MsgShow, Msg

def updateTransferSetting(ReportID, LineNumber, IsReverse = False):
	try:

		TransferSetting		= 	mktmonthend.getTransferSetting()
		SenderReportID  	= 	TransferSetting['SenderReportID']
		SenderLineNumber 	= 	TransferSetting['SenderLineNumber']
		ReceiverReportID 	= 	TransferSetting['ReceiverReportID']  
		ReceiverLineNumber	= 	TransferSetting['ReceiverLineNumber'] 

		if ReportID == SenderReportID:
			if int(SenderLineNumber) >= int(LineNumber):
				SenderLineNumber = int(SenderLineNumber) + 1 if IsReverse == False else int(SenderLineNumber) - 1

		elif ReportID == ReceiverReportID:
			if int(ReceiverLineNumber) >= int(LineNumber):
				ReceiverLineNumber = int(ReceiverLineNumber) + 1 if IsReverse == False else int(ReceiverLineNumber) - 1

		TransferSetting = '%s %s > %s %s' %(SenderReportID, SenderLineNumber, ReceiverReportID, ReceiverLineNumber) 

		AccountingSetting = MKT_ACCOUNTING_SETTING.query.get('SYSTEM')
		AccountingSetting.NetIncomeToEquity = TransferSetting
		db.session.add(AccountingSetting)		
		
	except Exception, e:
		raise e

def updateLineNumber(LineReportObj, LineNumber, IsReverse = False):
	try:
		
		# updateTransferSetting(LineReportObj[0].Report, LineNumber, IsReverse)
		'''
		Increament by -1 : Mean that remove line number
		Increament by 1  : Mean that add new line number
		'''
		Increament = -1 if IsReverse == True else 1

		for item in LineReportObj:
			'''
				We are update line number recode if bigger than updated line.
				Ex : 
				Here The record line number you add new line number 9 to exists line number
				So line number 10 change to 11.
				-------------------------
					ID 			Line Number 	
					LN001		1
					LN002		2
					LN003		3
					. 			.
					. 			.
					LN009 		9
					LN010 		10

			'''
			if LineNumber and int(item.LineNumber) >= int(LineNumber):
					
				item.LineNumber = (int(item.LineNumber) if item.LineNumber else int(0)) + Increament

				LineType 		= item.LineType
				LineValue 		= item.LineValue

				if LineType.upper() in ["ST", "GH"]:
					Value1 = ''
					Value2 = ''
					if LineValue.find('>') != -1:
						Values 	=	LineValue.split('>')
						Value1 	=	Values[0].strip()
						Value2 	=	Values[1].strip()
						
						if int(Value1) >= int(LineNumber):
							Value1 = int(Value1) + Increament 
							Value2 = int(Value2) + Increament

						elif int(Value2) >= int(LineNumber):
							Value2 = int(Value2) + Increament

						item.LineValue = '%s>%s' %(Value1,Value2)

					else:
						Values 	=	LineValue.split()
						LineNumberList = ''
						
						if Values:
							for v in Values:
								v = v.strip()

							 	if v.find('-') != -1:
							 		Operator = '-'
							 		Value 	 =	abs(int(v))
							 	else:
							 		Operator = ''
							 		Value = int(v)

							 	if int(Value) >= int(LineNumber):
							 		Value = Value + Increament 

							 	LineNumberList 	+=	'%s%s ' %(Operator, Value)

						item.LineValue = LineNumberList

				db.session.add(item)

	except Exception, e:
		raise e