from app.tools.mktreport            import *
import app.tools.mktpdcollection    as mktpdcollection
import app.tools.mktaccounting      as mktaccounting
import app.tools.mktsetting         as mktsetting
import app.tools.mktmoney           as mktmoney
import app.tools.mktloan            as mktloan
import app.tools.mktloanamendment   as mktloanamendment
import app.tools.mktcharge          as mktcharge
from app.tools.mktcharge 			import *
from app.tools.mktdate 				import *

from app.FundTransfer.models    import MKT_FUND_TRANSFER
from app.Account.models         import MKT_ACCOUNT
from app.Customer.models        import MKT_CUSTOMER
from app.LoanContract.models    import MKT_LOAN_CHARGE, MKT_LOAN_CONTRACT
from app.Provisioning.models    import MKT_PROVISION
from app.AccEntry.models        import MKT_ACC_ENTRY
from app.AssetClass.models      import MKT_ASSET_CLASS_PRO
from app.PotentialCustomer.models       import MKT_PO_CUSTOMER
from app.RepaymentSchedule.models       import MKT_REP_SCHEDULE
from app.ChargeRate.models          import MKT_CHARGE_RATE
from app.ScheduleDefine.models      import *
from app.Collateral.models          import *
from app.Customer.models            import *
from app.Currency.models            import *
from app.PD.models                  import *
from app.LoanApplication.models     import *
from sqlalchemy                     import func, desc
from app.SupportTool.FixData.models import *
from flask                          import Markup
from .rpt_arap 						import *
try:
	from app.FixedAssetManagement.tools.mktuserfunction import *
except ImportError as e:
	print e

def getNumberDayDue(args):
	NumDayDue = mktpdcollection.getMaxNumDayDue(args[0])
	if NumDayDue: 
		return NumDayDue

	return '0'

def getOverdueDate(args):
	return mktpdcollection.getPastDueDate(args[0])["OverDueDate"]

def getFTCustomer(args):
	CustomerID      = ""
	CustomerName    = ""
	DrAcc = args[0]
	CrAcc = args[1]
	AccObj = MKT_ACCOUNT.query.filter(MKT_ACCOUNT.ID.in_([DrAcc,CrAcc]))
	if AccObj:
		for row in AccObj:
			CustomerID = row.CustomerList
			if CustomerID:
				CustObj = MKT_CUSTOMER.query.get(CustomerID)
				if CustObj:
					CustomerName = CustObj.LastNameEn +" " +CustObj.FirstNameEn
	return CustomerName

'''
	Function get sum of Loan Charge
	= MKT_LOAN_CHARGE.ChargeEarned + MKT_LOAN_CHARGE.ChargeUnearned
	Ex: getLoanCharge(LoanID)
'''
def getLoanCharge(args):
	LoanID      = args[0]
	LoanChargeObj   = db.session.query( func.sum(MKT_LOAN_CHARGE.ChargeEarned).label('SumChargeEarned'),
										func.sum(MKT_LOAN_CHARGE.ChargeUnearned).label('SumChargeUnearned')).\
								filter(MKT_LOAN_CHARGE.ID == LoanID).first()
	ChargedAmount = 0
	if LoanChargeObj:
		SumChargeEarned     = LoanChargeObj.SumChargeEarned if LoanChargeObj.SumChargeEarned else 0
		SumChargeUnearned   = LoanChargeObj.SumChargeUnearned if LoanChargeObj.SumChargeUnearned else 0
		ChargedAmount       = SumChargeEarned + SumChargeUnearned 

	return ChargedAmount

def ToBaseCurrency(args):
	Amount              = args[0]
	Currency            = args[1]
	ReportingRateObj    =   mktaccounting.getReportingRateObj()
	ExchangeRate        =   ReportingRateObj.get(Currency, 1)

	try:
		Amount = ProvisioningObj.Amount
		Amount = Amount / ExchangeRate
		return Amount
	except Exception as e:
		raise

''' Function to get provisioning percentage and amount:
	1. getProvisionPerc(AssetClass)
	2. getProvisionAmount(LoanID)
'''
def getProvisionPerc(args):

	AssetClass          = args[0]
	LoanType            = args[1]
	MoreThanOneYear     = args[2]

	ProvisionPerc       = '0'

	AssetClassObj       = MKT_ASSET_CLASS_PRO.query.filter(MKT_ASSET_CLASS_PRO.ID == AssetClass).\
													filter(MKT_ASSET_CLASS_PRO.LoanType == LoanType).\
													filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == MoreThanOneYear).first()
	if AssetClassObj:
		ProvisionPerc = AssetClassObj.ProvPerc

	return ProvisionPerc

def getProvisionAmount(args):
	LoanID      = args[0]
	AssetClass  = args[1]
	Currency    = args[2]
	ReportingRateObj    =   mktaccounting.getReportingRateObj()
	ExchangeRate = ReportingRateObj.get(Currency,1)
	ProvisioningObj = MKT_PROVISION.query.filter(MKT_PROVISION.LOANID == LoanID, MKT_PROVISION.ASSETID == AssetClass).first()

	Amount = 0
	if ProvisioningObj:
		Amount = ProvisioningObj.Amount
		
	return float(Amount)

def getAccountInfo(args):
	
	Module = __import__("app.urlregister")
	# from app.urlregister  import *
	ListLookUp  = args
	TableName   = getattr(Module,ListLookUp[0])
	Field       = ListLookUp[1]
	Field2      = ListLookUp[2]
	Value2      = ListLookUp[3]
	Field3      = ListLookUp[4]
	Value3      = ListLookUp[5]
	
	Condition   = [eval('TableName.%s'%Field2)==Value2,eval('TableName.%s'%Field3)==Value3]
	
	r = ''
	# QueryTable = TableName.query.filter(Condition).first()
	QueryTable = TableName.query.filter(eval('TableName.%s'%Field2)==Value2).filter(eval('TableName.%s'%Field3)==Value3).first()
	if QueryTable:
		r = getattr(QueryTable,Field)
	return r
	

# Report: Collection Report
def getTransactionAmount(args):
	ReverseTransaction  =   mktparam.getTellerParam().RevTransaction
	Reference = args[0]

	AccEntryObj = MKT_ACC_ENTRY.query.get(Reference)
	Amount = 0
	if AccEntryObj:
		if AccEntryObj.Transaction == ReverseTransaction:
			if AccEntryObj.DebitCredit == 'Dr':
				Amount = AccEntryObj.Amount * (-1)
			else:
				Amount = AccEntryObj.Amount
		else:
			Amount = AccEntryObj.Amount
	return Amount

# Report: Potential Customer - Inquiry Conversion
def getInquiryPercentage(args):

	Branch              = args[0].split()
	POStatus            = args[1].split() 
	Type                = args[2]
	ContactDate 		= args[3] if len(args) > 3 else ""

	POCustomerObj       = MKT_PO_CUSTOMER.query.filter(MKT_PO_CUSTOMER.AssignBranch.in_(Branch))
	if ContactDate:
		ReportedDateSplit 	=	ContactDate.split()
		StartDate 		= 	""
		EndDate 		=	""

		if len(ReportedDateSplit) == 2:
			StartDate = ReportedDateSplit[0]
			EndDate   = ReportedDateSplit[1]

		if StartDate and EndDate:
			POCustomerObj = POCustomerObj.\
									filter(MKT_PO_CUSTOMER.DateOfContact >= str(StartDate)).\
									filter(MKT_PO_CUSTOMER.DateOfContact <= str(EndDate))
		else:
			POCustomerObj = POCustomerObj.\
									filter(MKT_PO_CUSTOMER.DateOfContact.in_(ReportedDateSplit))

	TotalPO             = POCustomerObj.count()
	POCustomerObj       = POCustomerObj.filter(MKT_PO_CUSTOMER.POStatus.in_(POStatus))  
	TotalPOByStatus     = POCustomerObj.count()

	if TotalPO != 0:
		Percentage      = float(TotalPOByStatus) * float(100) / float(TotalPO)
		Percentage      = mktmoney.formatNumber(Percentage)
	else:
		Percentage      = 0.00

	if Type == "Percentage":
		return Percentage
	elif Type == "Num":
		return TotalPOByStatus
	else:
		return TotalPO

# Report: Loan Detail Listing - get totalCharge in schedual
def getTotalCharge(args):
	LoanID = args[0]
	TotCharge   = 0
	RepayObj    = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID)
	for row in RepayObj:
		TotCharge+=row.Charge
	return TotCharge
	
# Report: Loan Detail Listing - get charge earn, charge unearn, etc.
def getChargeInfo(args):
	LoanID          = args[0]
	Type            = args[1]
	LoanObj         = MKT_LOAN_CONTRACT.query.get(LoanID)
	Result          = ""

	if LoanObj:
		Currency    = LoanObj.Currency
		RegularFee  = "2" # RegularFee Type
		LoanChargeObj   =   db.session.query(MKT_LOAN_CHARGE, MKT_CHARGE_RATE).\
										filter(MKT_LOAN_CHARGE.ID ==LoanID).\
										filter(MKT_CHARGE_RATE.ChargeMode == RegularFee).\
										join(MKT_CHARGE_RATE,MKT_CHARGE_RATE.ID ==MKT_LOAN_CHARGE.ChargeKey+Currency).first()

		if LoanChargeObj:
			ChargeObj   = LoanChargeObj[0]
			ChargeRate  = LoanChargeObj[1]

			ChargeValue = ChargeObj.Charge #Charge Rate
			ChargeUnearned = ChargeObj.ChargeUnearned
			ChargeEarned   = ChargeObj.ChargeEarned

			if Type=="Rate":
				Result = ChargeValue
			elif Type=="Earned":
				Result = ChargeEarned

			elif Type=="UnEarned":
				Result = ChargeUnearned

	return Result

def getRepaymentMode(args):
	""" Return repayment mode and parameter is loan id """

	DictRepay = {'1':'Declining',
				 '2':'Annuity',
				 '3':'Flat',
				 '4':'IRR'}
	LoanID = args[0]
	RepayObj = MKT_SCHED_DEFINE.query.get(LoanID)
	if RepayObj:
		RepayMode = DictRepay.get(RepayObj.RepMode,'Repayment Not Found')
	else:
		RepayObj  = MKT_SCHED_MANUAL.query.filter(MKT_SCHED_MANUAL.LoanID == LoanID).first()
		if RepayObj:
			RepayMode = "Manual"
		else:
			RepayMode = "Upload"
	return RepayMode

def getLastPaymentDate(arg):
	TranList    =   getPaymentTransaction()
	LoanID      =   arg[0]
	AccEntry    =   MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Reference.ilike('%'+LoanID)).\
					filter(MKT_ACC_ENTRY.Transaction.in_(TranList)).\
					order_by(MKT_ACC_ENTRY.TransactionDate.desc()).first()
	LastPaymentDate = ''
	if AccEntry:
		LastPaymentDate = AccEntry.TransactionDate
	return LastPaymentDate

def getLastPaymentAmount(arg):
	TranList    =   getPaymentTransaction()
	LoanID      =   arg[0]
	AccEntry    =   db.session.query(
						MKT_ACC_ENTRY.DebitCredit,
						MKT_ACC_ENTRY.TransactionDate,
						func.sum(MKT_ACC_ENTRY.Amount).label('TAmount')).\
					filter(MKT_ACC_ENTRY.Reference.ilike('%'+LoanID)).\
					filter(MKT_ACC_ENTRY.DebitCredit=='Dr').\
					filter(MKT_ACC_ENTRY.Transaction.in_(TranList)).\
					group_by(MKT_ACC_ENTRY.DebitCredit,MKT_ACC_ENTRY.TransactionDate).\
					order_by(MKT_ACC_ENTRY.TransactionDate.desc()).first()
	LastPaymentAmount = 0
	if AccEntry:
		LastPaymentAmount = AccEntry.TAmount
	return LastPaymentAmount

def getPaymentTransaction():
	PDCharge 		= 	mktsetting.getAppSetting('PDCharge')
	PDInterest 		= 	mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= 	mktsetting.getAppSetting('PDPrincipal')
	# Penalty 		= 	mktsetting.getAppSetting('Penalty')
	AccSetting 		= 	mktsetting.getAccSetting()
	ChargeTran 		= 	AccSetting.ChargeTran
	InterestTran 	= 	AccSetting.InterestTran 
	PrincipalTran 	= 	AccSetting.PrincipalTran
	return [PrincipalTran,InterestTran,ChargeTran,PDPrincipal,PDInterest,PDCharge]

def getAmountByTransaction(arg):
	""" Return Amount by Transaction """
	LoanID      =   arg[0]
	AmendDate   =   arg[1]
	TranList    =   arg[2].split('*') if len(arg)==3 else ''
	AccEntry    =   db.session.query(func.sum(MKT_ACC_ENTRY.Amount).label('TAmount')).\
					filter(MKT_ACC_ENTRY.Reference.ilike('%'+LoanID)).\
					filter(MKT_ACC_ENTRY.Transaction.in_(TranList)).\
					filter(MKT_ACC_ENTRY.TransactionDate==AmendDate).first()
	AmountByTransaction=AccEntry.TAmount if AccEntry.TAmount else 0
	return AmountByTransaction

def getCollateralDetailNumber(args):
	"""
		This method use for get Collateral Detail Number.
		Args:
			args:
				LoanID (str): This param will represent the Loan ID. LC17052000010

		Returns:
			CollateralNumberList (str) : List of Collateral Detail Number as string separate by camma

		Examples:
			>>> print(getCollateralDetailNumber(args))
			str('CRHO052501941, CRHO052501941, CRHO052501941')
	"""
	LoanID = args[0]
	CollateralDetailList = db.session.query(MKT_COLLATERAL_DE).\
										join(MKT_COLLATERAL, MKT_COLLATERAL.ID==MKT_COLLATERAL_DE.CollateralID).\
										join(MKT_CUSTOMER, MKT_CUSTOMER.ID==MKT_COLLATERAL.CustomerID).\
										join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ContractCustomerID==MKT_CUSTOMER.ID).\
										filter(MKT_LOAN_CONTRACT.ID==LoanID).\
										all()
	CollateralNumberList = []

	if CollateralDetailList is not None:
		for CDObj in CollateralDetailList:
			CollateralNumberList.append(CDObj.CollateralNumber)

	return ', '.join(CollateralNumberList)

def getTotalValueOfCollateralDetail(args):
	"""
		This method use for get total value of  Collateral Detail from Customer ID.
		Args:
			args:
				LoanID (str): This param will represent the Loan ID. LC17052000010

		Returns:
			TotalPrice (str) : total price of Collateral Detail.

		Examples:
			>>> print(getCollateralDetailNumber(args))
			Decimale(20210.00)
	"""
	LoanID = args[0]
	CollateralDetailList = db.session.query(MKT_COLLATERAL_DE).\
										join(MKT_COLLATERAL, MKT_COLLATERAL.ID==MKT_COLLATERAL_DE.CollateralID).\
										join(MKT_CUSTOMER, MKT_CUSTOMER.ID==MKT_COLLATERAL.CustomerID).\
										join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ContractCustomerID==MKT_CUSTOMER.ID).\
										filter(MKT_LOAN_CONTRACT.ID==LoanID).\
										all()
	TotalPrice = 0

	if CollateralDetailList is not None:
		CurrencyList    = MKT_CURRENCY.query

		for CDObj in CollateralDetailList:
			CurrencyObj = CurrencyList.get(CDObj.Currency)
			TotalPrice += (CDObj.ValuationPrice * CurrencyObj.ReportingRate)
	
	return str(mktmoney.formatNumber(TotalPrice))

def getChargeAmount(args):
	LoanID 			= 	args[0]
	Currency 		= 	args[1]
	Amount 			= 	getLoanChargeAmount(LoanID,Currency)
	return Amount
def getFullCharge(args):
	LoanID=args[0]
	BankDateObj 	= 	mktdate.getBankDateObj()
	BankDate 		= 	BankDateObj.SystemDate
	Amount 			=	getAccrChargeAmount(LoanID=LoanID,TransactionDate=BankDate,GetFullCharge=True)
	return Amount
def getAgingSchedule(args):
	AssetClass 			= args[0]
	LoanType 			= args[1]
	MoreThanOneYear 	= args[2]
	Day=''
	AssetClassObj 		= MKT_ASSET_CLASS_PRO.query.filter(MKT_ASSET_CLASS_PRO.ID == AssetClass).\
													filter(MKT_ASSET_CLASS_PRO.LoanType == LoanType).\
													filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == MoreThanOneYear).first()
	if AssetClassObj:
		Day="Day:%s-%s" %(AssetClassObj.OverdueFr,AssetClassObj.OverdueTo)
		
	return Day

def getCollateralDetailValue(args):
	"""
		This method use for get total value of  Collateral Detail from Loan Contract ID.
		Args:
			args:
				LoanID (str): This param will represent the Loan ID. LC17052000010

		Returns:
			TotalPrice (str) : total price of Collateral Detail.

		Examples:
			>>> print(getCollateralDetailNumber(args))
			Decimale(20210.00)
	"""
	LoanID = args[0]
	CollateralDetailList = db.session.query(MKT_COLLATERAL_DE).\
										join(MKT_COLLATERAL, MKT_COLLATERAL.ID==MKT_COLLATERAL_DE.CollateralID).\
										join(MKT_LOAN_COLLATERAL, MKT_LOAN_COLLATERAL.Collateral==MKT_COLLATERAL.ID).\
										join(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.ID==MKT_LOAN_COLLATERAL.ID).\
										filter(MKT_LOAN_CONTRACT.ID==LoanID).\
										all()
	TotalPrice = 0

	if CollateralDetailList is not None:
		CurrencyList    = MKT_CURRENCY.query

		for CDObj in CollateralDetailList:
			CurrencyObj = CurrencyList.get(CDObj.Currency)
			TotalPrice += (CDObj.ValuationPrice * CurrencyObj.ReportingRate)
	
	return str(mktmoney.formatNumber(TotalPrice))

def getLoanChargeValue(args):
	'''
		Function get sum of Loan Charge
		= MKT_LOAN_CHARGE.ChargeEarned 
		Ex: getLoanChargeValue(LoanID)
	'''
	LoanID      = args[0]
	LoanChargeObj   = db.session.query( func.sum(MKT_LOAN_CHARGE.ChargeEarned).label('SumChargeEarned'),
										func.sum(MKT_LOAN_CHARGE.ChargeUnearned).label('SumChargeUnearned')).\
								filter(MKT_LOAN_CHARGE.ID == LoanID).first()
	SumChargeEarned = 0
	if LoanChargeObj:
		SumChargeEarned     = LoanChargeObj.SumChargeEarned if LoanChargeObj.SumChargeEarned else 0

	return SumChargeEarned

# Get Next Payment Date of Loan
def getNextPaymentDate(args):
	LoanID = args[0]
	NextPaymentDate = ''
	BankDate = mktsetting.getBankDate()
	RepSchedule = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
										filter(MKT_REP_SCHEDULE.CollectionDate >= BankDate).\
										order_by(MKT_REP_SCHEDULE.No.asc()).first()
	if RepSchedule:
		NextPaymentDate = RepSchedule.CollectionDate
	return NextPaymentDate

# Get number of day late for the late of last installment in PD Date
def getLoanAging(args):
	LoanID = args[0]
	LoanAgaing = ''
	PDDateObj   = MKT_PD_DATE.query.filter(MKT_PD_DATE.ID.ilike('%'+LoanID)).\
									order_by(MKT_PD_DATE.DueDate.desc()).\
									limit(1).first()
	if PDDateObj:
		LoanAgaing = PDDateObj.NumDayDue
	return LoanAgaing

def getLoanPreTermination(LoanID):
	""" Method to get Loan Pretermination Detail Amount
		Args:
			- Loan (str)        : List of Loan Contract
		Return:
			PDPanlty            : float
			PreTerminatePenalty : flaot
			TotalTermiante      : float
		Raise:
			None
	"""
	TotODAmount     = 0
	GRAPenalty      = 0
	CurrentCharge   = 0
	TotalTerminate  = 0
	LoanPreternationDic = { "PDPenalty":0,
							"PreTerminatePenalty":0,
							"TotalTerminate":0}

	Loan = MKT_LOAN_CONTRACT.query.get(LoanID)
	PDObj = MKT_PAST_DUE.query.get("PD" + str(LoanID))
	if Loan:
		LoanPreternation = mktloan.getLoanPreTerminationDetail(Loan,PDObj,None)
		PreTermination  = mktloanamendment.getTerminationPenalty(Loan.ID, Loan.Term, Loan.Installment, Loan.Frequency, Loan.FreqType, Loan.Disbursed,Loan.OutstandingAmount, Loan.LoanProduct)[1]
		if PDObj:
			PDDate      =   MKT_PD_DATE.query.filter(MKT_PD_DATE.ID == "PD" + str(LoanID)).\
							filter(MKT_PD_DATE.ODStatus == "GRA").first()
			if PDDate:
				GRAPenalty = PDDate.OutPenAmount
			TotODAmount     = PDObj.TotODAmount-GRAPenalty

		ChargeRegularObj = mktcharge.getChargeRegularObj(LoanID=Loan.ID,Currency=Loan.Currency)
		if ChargeRegularObj:
			CurrentCharge = ChargeRegularObj[0].AccrCurrent if ChargeRegularObj[0].AccrCurrent else 0

		TotalTerminate = float(Loan.Amount) + float(LoanPreternation["AccrCurrentInt"]) + float(TotODAmount)+ float(PreTermination) + float(CurrentCharge)
		if PreTermination:
			LoanPreternationDic.update({"PreTerminatePenalty":PreTermination})
		if LoanPreternation:
			LoanPreternationDic.update({"PDPenalty":LoanPreternation["PenaltyDue"],
										"TotalTerminate":TotalTerminate})
	return LoanPreternationDic
# Get Penalty of Loan 
def getPDPenalty(args):
	return getLoanPreTermination(args[0])["PDPenalty"]
# get Penalty of Termination Loan
def getPreTerminationPenalty(args):
	return getLoanPreTermination(args[0])["PreTerminatePenalty"]
# get Total All amount of Loan for Termination
def getTotalTermination(args):
	return getLoanPreTermination(args[0])["TotalTerminate"]
 
 # get Guarantor Information
def getGuarantorInformation(args):
	LoanID = args[0]
	Type = args[1]
	Result = ''
	Guarantor = MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID==LoanID).\
										order_by(MKT_GUARANTOR.ID.asc()).all()
	if Guarantor:
		for row in Guarantor:
			GuarantorInfo = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID==row.Guarantor).first()
			if Type == '1':
				Result += "%s %s, " %(GuarantorInfo.LastNameEn, GuarantorInfo.FirstNameEn)
			if Type == '2':
				Result += "%s, " %(mktaddress.getAddress(ProvinceID = GuarantorInfo.Province,
										 DistrictID = GuarantorInfo.District,
										 CommuneID     = GuarantorInfo.Commune,
										 VillageID     = GuarantorInfo.Village,
										 Locale='kh'))
			if Type == '3':
				Result += "%s, "%GuarantorInfo.Mobile1
			if Type == '4':
				Result += "%s %s, " %(GuarantorInfo.LastNameKh, GuarantorInfo.FirstNameKh)
	return Result[:-2]

def getAgingSchedule(args):
	AssetClass 			= args[0]
	LoanType 			= args[1]
	MoreThanOneYear 	= args[2]
	Day=''
	AssetClassObj 		= MKT_ASSET_CLASS_PRO.query.filter(MKT_ASSET_CLASS_PRO.ID == AssetClass).\
													filter(MKT_ASSET_CLASS_PRO.LoanType == LoanType).\
													filter(MKT_ASSET_CLASS_PRO.MoreThanOneYear == MoreThanOneYear).first()
	if AssetClassObj:
		Day="Day:%s-%s" %(AssetClassObj.OverdueFr,AssetClassObj.OverdueTo)
		
	return Day

def INSERTLINK(args):
	Endpoint	=	args[0]
	Value 		= 	args[1]
	Text 		= 	args[2]

	Text 			= 	"<span class='text-warning'>%s</span>"%Text
	Value 			=	"%s/?ID=%s" %(Endpoint,Value)
  	Link 			= 	"""<a href='javascript:void(0)' onClick=CustomClickView('%s','%s')><u>%s</u></a> """ % (Endpoint,Value,Text)

  	return Markup(Link)

def getFixDataHistory(args):
	FixDataID = args[0]
	Filter = ""
	FilterDic = {}
	RecordList = []
	ConditionDic = {"EQ":"=","BT":"<= <=","NE":"!=","GT":">","LT":"<","GE":">=","LE":"<="}
	NormalFilter= MKT_FIX_DATA.query.filter(MKT_FIX_DATA.ID == FixDataID).\
	 								 filter(MKT_FIX_DATA.Action == 'Update').\
	 								 filter(MKT_FIX_DATA.Option == 'No')
	AdvanceFilter = MKT_FIX_DATA_FILTER.query.filter(MKT_FIX_DATA_FILTER.ID == FixDataID).\
											  filter(MKT_FIX_DATA_FILTER.FilterField != "")
	if NormalFilter:
		for row in NormalFilter:
			RecordID = row.RecordID
			RecordList=RecordID.split()
			if len(RecordList) == 1:
				Filter = "ID= %s"%row.RecordID
			else:
				for index,row in enumerate(RecordList):
					Filter +="<br/>ID=%s"%RecordList[index] 
	if AdvanceFilter:
		for row in AdvanceFilter:
			if row.FilterField not in FilterDic:
				FilterDic.update({row.FilterField:{ConditionDic[row.AdvanceFilter]:row.FilterValue}})
		for k,v in FilterDic.iteritems():
			for key,value in v.iteritems():
				if key != '<= <=':
					Filter += "<br/>%s %s %s"%(k,key,value)
				else:
					Condition = key.split()
					ConditionValue = value.split()
					Filter += "<br/>%s %s %s %s %s"%(ConditionValue[0],Condition[0],k,Condition[1],ConditionValue[1])
	return Markup(Filter)
