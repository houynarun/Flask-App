# -*- coding: utf-8 -*-

from app.mktcore.wtfimports 		import *
from app.mktcore.imports 			import *
from app.mktcore.session 			import *
from flask 							import request,get_flashed_messages,Markup
from .models 						import *
from app.tools.mktbatchupload 		import batchupload
import requests

class FRM_BATCH_UPLOAD(exform):
	
	Module  			=	TextField("Module")
	Form  			=	TextField("Form")
	Table 			=	TextField(requiredlabel("Table","*"),[validators.Required()])
	ImportMode 		=	SelectField("Import Mode",
									choices=[("N","---None---"),
											 ("C","Clear"),
											 ("O","Override")],
									coerce=str
									)
	UploadType 	 	= 	SelectField(requiredlabel("Upload Type","*"),
									choices=[("", "---None---"),
											 ("1", "Batch Upload"),
											 ("2", "Data Enquiry Wing"),
											 ("3", "Data Enquiry True Money"),
											 ("4", "Data Enquiry Normal"),
											 ("5", "Import/Export"),
											 ("99", "Other")
											],
									coerce=str,
									validators=[validators.Required()],
									)
	BatchStatus 	= 	SelectField("Batch Upload Status",
									choices=[("", "---None---"),
											 ("1", "Success"),
											 ("2", "Fail")
											],
									coerce=str

									)
	FileUpload  	=	TextField(requiredlabel("Upload File","*"),[validators.Required()])
	FileUpload1 	= 	TextField("Upload File Debit")
	FileUpload2 	=	TextField("Upload File Credit")
	FileUploadIFrame = MKTIframe("FileUploaod",
								dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, 
								description='1-File Upload')
	FileUpload1IFrame = MKTIframe("FileUploaod1",
								dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, 
								description='2-File Upload Dr')
	FileUpload2IFrame = MKTIframe("FileUploaod2",
								dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, 
								description='3-File Upload Cr')
	DownloadIFrame 		= MKTIframe("DownLoad",
								dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, 
								description='4-Download')

	
	@app.route("/Morakot/FileDrCr/<Key>")
	def Record(Key):
		ID 		 = request.args.get('ID')
		Status,DictPath = batchupload.getAbsPath(ID)
		BatchObj = MKT_BATCH_UPLOAD_INAU.query.get(ID)
		EnquiryType = ['2','3','4']

		if not BatchObj:
			BatchObj = MKT_BATCH_UPLOAD.query.get(ID)
			if not BatchObj:
				BatchObj = MKT_BATCH_UPLOAD_HIST.query.get(ID)

		Dict ={Key:(False,"")}

		if Status:
			FileUpload 	 	= 	DictPath.get(Key) if DictPath.get(Key) else ""

			if BatchObj:
				if BatchObj.UploadType in EnquiryType:
					FileUpload = batchupload.getLocalDictCSV(FileUpload,BatchObj.UploadType)
				 	Dict.update({Key:FileUpload})
				else:
					FileUpload = batchupload.getLocalDictCSV(FileUpload) #return turple (True/False,Value)
					Dict.update({Key:FileUpload})
		return render_template("/batchupload/batchupload.html",Dict = Dict,Key=Key )
	
	@app.route("/Morakot/Download")
	def DownLoad():
		ID 		 		= request.args.get('ID')
		BatchObj 		= MKT_BATCH_UPLOAD.query.get(ID)
		PreFileErr 		= "error_"
		ListOriFile 	= []
		ListErrFile  	= []
		if not BatchObj:
			BatchObj 	= MKT_BATCH_UPLOAD_INAU.query.get(ID)
			if not BatchObj:
				BatchObj = MKT_BATCH_UPLOAD_HIST.query.get(ID.split("@")[0])
		if BatchObj:
			FileUpload 		= BatchObj.FileUpload
			FileUploadErr 	= PreFileErr+FileUpload
			if batchupload.checkFilePath(FileUpload):
				ListOriFile.append(FileUpload)
			if batchupload.checkFilePath(FileUploadErr):
				ListErrFile.append(FileUploadErr)

			if BatchObj.FileUpload1:
				FileUpload1 	= BatchObj.FileUpload1
				FileUploadErr1	= PreFileErr+FileUpload1
				if batchupload.checkFilePath(FileUpload1):
					ListOriFile.append(FileUpload1)
				if batchupload.checkFilePath(FileUploadErr1):
					ListErrFile.append(FileUploadErr1)

			if BatchObj.FileUpload2:
				FileUpload2 	= BatchObj.FileUpload2
				FileUploadErr2	= PreFileErr+FileUpload2
				if batchupload.checkFilePath(FileUpload2):
					ListOriFile.append(FileUpload2)
				if batchupload.checkFilePath(FileUploadErr2):
					ListErrFile.append(FileUploadErr2)

		return render_template("/batchupload/download.html",ListOriFile=ListOriFile,ListErrFile=ListErrFile )

	@staticmethod
	def urlParam():
		dicParam = [{"IframeName":"FileUploadIFrame", "iframeUrl":"/Morakot/FileDrCr/FileUpload", 'Resource' : 'Status', 'Optional':"Navbar=False"}]
		dicParam.append({"IframeName":"FileUpload1IFrame", "iframeUrl":"/Morakot/FileDrCr/FileUploadDr", 'Resource' : 'Status', 'Optional':"Navbar=False"})
		dicParam.append({"IframeName":"FileUpload2IFrame", "iframeUrl":"/Morakot/FileDrCr/FileUploadCr", 'Resource' : 'Status', 'Optional':"Navbar=False"})
		dicParam.append({"IframeName":"DownloadIFrame", "iframeUrl":"/Morakot/Download", 'Resource' : 'Status', 'Optional':"Navbar=False"})
		return dicParam

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
  	def redirectAfterInsert():
  		Dict 			=	request.form.to_dict()	
  		if g.getNAuthorize==0:
			ID =	Dict.get("ID")
			Result = batchupload.batchAuthorize(ID)	
			ListMsg = batchupload.flashMessage(Result,ID=ID)
			for Msg in ListMsg:
				flash(Msg)
		return None
	@staticmethod
	def redirectAuthorize():
		ID 					=	g.formID #batch upload ID
		Result = batchupload.batchAuthorize(ID)
		ListMsg = batchupload.flashMessage(Result,ID=ID)
		for Msg in ListMsg:
			flash(Msg)
		return None
