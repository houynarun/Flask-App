from datetime 					import datetime
from dateutil.relativedelta 	import relativedelta
from .models 					import *
from flask 						import flash
from app.mktcore.wtfimports 	import *
from app.User.models 			import *
from app.AssetClass.models 		import *
from app.CashAccount.models 	import *
from app.LoanContract.models	import *
from app.Customer.models	import *
from app.Account.models 		import MKT_ACCOUNT
from app.tools.mktroute 		import *
from wtforms 					import DecimalField, IntegerField

import app.tools.user 			as mktuser
import app.tools.mktdate 		as mktdate
import app.tools.mktcharge		as mktcharge
import app.tools.mktsetting 	as mktsetting
import app.tools.mktofficer 	as mktofficer
import app.tools.bank.mktoverdraft	as mktoverdraft
import app.tools.mktpdcollection	as mktpdcollection
import app.tools.loantools.nonworkingday	as nonworkingday


@app.route("/Morakot/ODAccountCurrency", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ODAccountCurrency():
	try:
		AccountID 		= request.args.get("AccountID")
		query 			= MKT_ACCOUNT.query.get(AccountID)
		Currency 		= ""

		if query:
			Currency 		= str(query.Currency)
			
		return jsonify(Currency=Currency)
	except:
		raise

@app.route("/Morakot/GetODProductInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getODProductInfo():
	try:
		AccProduct		= 	request.args.get("AccProduct")
		Currency		= 	request.args.get("Currency")
		AccProductObj	= 	MKT_ACC_PRODUCT.query.get(AccProduct)
		IntCapitalization 	=	3
		InterestRate 	= 	"0"
		if AccProductObj:
			IntCapitalization 	=	AccProductObj.IntCapitalization
			Category 			=	AccProductObj.CategoryList
			RateID 				= 	AccProductObj.InterestKey+Currency
			rate 				= 	MKT_INTEREST_RATE.query.get(RateID)
			InterestRate		= 	str(rate.Rate) if rate else "0"
			InterestRate 		= 	InterestRate.split()
			InterestRate 		= 	InterestRate[1] if len(InterestRate) > 1 else InterestRate[0]

		List = {'1': 'Daily', '2': 'Weekly','3': 'Monthly','4': 'Yearly'}

		return jsonify(IntCapitalization=IntCapitalization, Text=List[IntCapitalization], Category=Category, InterestRate=InterestRate)
	except:
		raise

@app.route("/Morakot/GetOffBalanceSheet", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getOffBalanceSheet():
	try:
		OffBalanceSheet	= request.args.get("LimitedAmount")
		return jsonify(OffBalanceSheet=str(OffBalanceSheet))
	except:
		raise

@app.route("/Morakot/GetMaturityDateOverdraft", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def GetMaturityDateOverdraft():
	try:

		ValueDate 		= request.args.get("ValueDate")
		Term 			= request.args.get("Term")
		MaturityDate	= ''
		if Term and ValueDate:
			ValueDate 		= 	datetime.strptime(ValueDate, "%Y-%m-%d").date()
			MaturityDate 	= 	ValueDate + relativedelta(months=int(Term)) 
			IsNonWorkingDay = 	nonworkingday.isNonWorkingDay(MaturityDate,1)
			
			while IsNonWorkingDay:
				MaturityDate 	= 	MaturityDate + relativedelta(days=1) 
				IsNonWorkingDay = 	nonworkingday.isNonWorkingDay(MaturityDate,1)
		
		return jsonify(MaturityDate=str(MaturityDate))
	except:
		raise

@app.route("/Morakot/AccountSuspendStatus", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAccountSuspendStatus():
	try:

		AccountType		= 	request.args.get("AccountType")
		AccProduct		= 	request.args.get("AccProduct")
		AssetClass 		=	mktpdcollection.getLoanAssetClass(0, AccountType, 'N','%sA'%AccProduct)
		print AssetClass,AccProduct

		AccClassObj 	=	MKT_ASSET_CLASS.query.get('%s-%sA'%(AssetClass,AccProduct))
		Suspend 		=	'N'
		if not AccClassObj:
			AccClassObj =	MKT_ASSET_CLASS.query.get(AssetClass)

		if AccClassObj:
			Suspend 	=	'N' if AccClassObj.IncomeRecog == 'Y' else 'Y'	

		return jsonify(Suspend=Suspend,AssetClass=AssetClass)
		
	except:
		raise

def getAccountProductSetup():
	AccProductMapping = mktsetting.getAppSetting('AccProductMapping')
	Dict = {}
	for a in AccProductMapping.splitlines():
		Mapping = a.split('*')
		Dict.update({Mapping[0]:Mapping[1]})

	return Dict.get('OverdraftAccount','').split()

def getAccountProductList():
	AccID = ''
	AccProductListID = getAccountProductSetup()
	AccProductObj = MKT_ACC_PRODUCT.query.filter(MKT_ACC_PRODUCT.ID.in_(AccProductListID))
	return AccProductObj

def loadOfficer():
	return mktofficer.loadOfficer()

def getRecord():
	try:
		result = MKT_OVERDRAFT_CONTRACT.query.get(g.formID)
		if not result:
			result = MKT_OVERDRAFT_CONTRACT_INAU.query.get(g.formID)
			if result:
				return [result.Account]

			else:
				return []
		else:
			return [result.Account]

	except:
		raise

def loadAccount():
	try:
		AccountObj 	= MKT_ACCOUNT.query.filter_by(ID='0').filter(MKT_ACCOUNT.AccStatus == 'O').all()
		Branch 		= mktuser.getCurrentBranch()
		if request.method == 'POST':
			CustomerID = request.form["CustomerID"]
			if CustomerID:
				AccountObj 	= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList == CustomerID).\
												filter(MKT_ACCOUNT.AccStatus == 'O')
		else:
			if len(getRecord()) > 0:
				AccountObj 	= MKT_ACCOUNT.query.filter_by(ID=getRecord()[0]).filter(MKT_ACCOUNT.AccStatus == 'O').all()

		return AccountObj
	except:
		raise

def loanBankDate():
	return mktdate.getBankDate()

def loadCollateral():
	Customer = request.form["CustomerID"] if request.method == 'POST' else ""
	if Customer:
		return MKT_COLLATERAL.query.filter(MKT_COLLATERAL.CustomerID == Customer)
	else:
		return MKT_COLLATERAL.query

def loadGuarantor():
	Branch 			= 	mktuser.getCurrentBranch()
	RestrictedObj 	= 	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()
	AsGurantor 		=	MKT_CUSTOMER.query.\
						filter(MKT_CUSTOMER.AsGurantor == 'Y').\
						filter(MKT_CUSTOMER.Block == 'N').\
						order_by(MKT_CUSTOMER.ID.asc())
	if RestrictedObj:
		AsGurantor 	=	AsGurantor.filter(MKT_CUSTOMER.Branch == Branch)

	return AsGurantor

def loadCoBorrower():
	Branch 			= 	mktuser.getCurrentBranch()
	RestrictedObj 	= 	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()
	CoBorrower 		= 	MKT_CUSTOMER.query.\
						filter(MKT_CUSTOMER.Block == 'N').\
						order_by(MKT_CUSTOMER.ID.asc())
	if RestrictedObj:
		CoBorrower 	=	CoBorrower.filter(MKT_CUSTOMER.Branch == Branch)

	return CoBorrower


class FRM_OVERDRAFT_CONTRACT(exform):

	CustomerID 		= 	RemoteTextField(requiredlabel(getLanguage("Customer"), "*"), [validators.Required()])
	Account 		= 	QuerySelectField(requiredlabel("Overdraft Account", "*"),
							query_factory=loadAccount,
							get_label=u'ID',
							allow_blank=False,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()]
						)
	Currency 		= 	TextField(requiredlabel(getLanguage("Currency"), "*"), [validators.Required()])
	LimitedAmount	=	TextField(requiredlabel("Limited Amount", "*"), [validators.Required()], default=0)
	OutstandingAmount=	TextField(requiredlabel(getLanguage("Outstanding Amount"), "*"), [validators.Required()], default=0)
	OffBalanceSheet =	TextField(requiredlabel("Off Balance Sheet", "*"), [validators.Required()], default=0)

	AccProduct		=	QuerySelectField(requiredlabel('Account Product','*'),
							query_factory=getAccountProductList,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	Category 		=	TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()], default='')
	InterestRate 	=	TextField(requiredlabel(getLanguage("Interest Rate"), "*"), default=0)
	ValueDate 		= 	DateField(requiredlabel(getLanguage("Value Date"), "*"), [validators.Required()], default=loanBankDate)
	Term 			= 	IntegerField(requiredlabel("%s (%s)" %(getLanguage("Term"), getLanguage("Month")), "*"), [validators.Required()])
	MaturityDate 	= 	DateField(getLanguage("Maturity Date"), [validators.Required()])
	NextRunDate 	= 	DateField("Next Run Date", [validators.Required()], default=loanBankDate)
	IntCapitalize 	= 	SelectField('Interest Capitalization',
							choices=[('1', 'Daily'),
									 ('2', 'Weekly'),
									 ('3', 'Monthly'),
									 ('4', 'Yearly'),
									 ('5', 'Maturity Date') ],
							coerce=str,
							default='3'
						)
	OfficerID 		= 	QuerySelectField(requiredlabel(getLanguage('Officer'),'*'),
							query_factory=loadOfficer,
							get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	AccountType 	= 	SelectField(requiredlabel('Account Type', '*'),
						choices=[('N', '%s' %getLanguage("Normal")),
								 ('R', '%s' %getLanguage("Restructured"))],
						coerce=str,
						default='N'
					)
	AssetClass		=	TextField(requiredlabel("Asset Class", "*"), [validators.Required()], default=0)
	NumDayDue		= 	TextField(requiredlabel("Number Day Due", "*"), [validators.Required()], default=0)
	Accrual			=	TextField("Accrual", default='Y')
	
	IntIncEarned 		= 	DecimalField(getLanguage("Interest Income Earned"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrIntPerDay 		= 	DecimalField("Accrued Interest Per Day", [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrInterest 		= 	DecimalField(getLanguage("Accrued Interest Receivable"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrIntCurrMonth 	= 	DecimalField(getLanguage("Accr Int Current Month"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrIntPreMonth 	= 	DecimalField("Accr Int Previous Month", [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	CapitalizedAmount 	= 	DecimalField("Capitalized Amount", [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	Suspend				=	TextField(requiredlabel("Suspend", "*"), [validators.Required()], default='N', description="1-%s" %getLanguage("Interest"))
	

	Collateral 			= 	QuerySelectField(getLanguage("Collateral"),
								query_factory=loadCollateral,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--%s--' %getLanguage("None"),
								description="2-%s" %getLanguage("Collateral")
							)
	Guarantor 		= 	QuerySelectField(getLanguage("Guarantor"),
							query_factory=loadGuarantor,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--None--',
							description="3-%s" %getLanguage("Guarantor")
						)

	CoBorrowerID 	= 	QuerySelectField(getLanguage("Co-Borrower"),
							query_factory=loadCoBorrower,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="4-%s" %getLanguage("Co-Borrower")
						)

	RelationIndicator 	= 	SelectField("Relation Indicator",
							choices=[('__None', '--None--'), ('1', 'Spouse'), ('2', 'Son/Daughter'), ('3', 'Relative'), ('4', 'Parent'), ('5', 'Friend')],
							coerce=str,
							default='__None',
							description="4-%s" %getLanguage("Co-Borrower")
						)

	def validate_Account(form, field):
		Account 	=	request.form['Account']
		AccountObj	=	MKT_ACCOUNT.query.get(Account)
		ODCObj 		=	MKT_OVERDRAFT_CONTRACT.query.filter(MKT_OVERDRAFT_CONTRACT.Account==Account).first()
		if ODCObj:
			raise ValidationError("Account is already used with contract %s."%ODCObj.ID)

	def validate_InterestRate(form, field):
		AccProduct   	= request.form['AccProduct'] 
		Currency   		= request.form['Currency'] 
		InterestRate	= request.form['InterestRate'] 
		AccProductObj	= MKT_ACC_PRODUCT.query.get(AccProduct)
		if AccProductObj:
			RateID 		= AccProductObj.InterestKey+Currency
			RateObj		= MKT_INTEREST_RATE.query.get(RateID)
			Rate		= str(RateObj.Rate) if RateObj else "0"
			RateList	= Rate.split()
			if len(RateList) == 2:
				if float(InterestRate) < float(RateList[0]) or float(InterestRate) > float(RateList[1]):
					raise ValidationError("Not in range %s."%Rate)

			elif float(Rate) != float(InterestRate):
				raise ValidationError("Must equal %s."%Rate)

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def moneyField():
		return [["CapitalizedAmount", "Currency"],["AccrIntPreMonth", "Currency"],["IntIncEarned", "Currency"],
				["OutstandingAmount", "Currency"],["LimitedAmount", "Currency"],["OffBalanceSheet", "Currency"],
				["AccrIntCurrMonth", "Currency"],["AccrInterest", "Currency"]
				]

	@staticmethod
	def isMultiValue():
		controls_list=["4-Co-Borrower","3-Guarantor"]
		return controls_list

	@staticmethod
	def setVisible():		
		return ['NextRunDate','Accrual']

	@staticmethod
	def setDisable():
		return [('Currency'), ('AssetClass'), ('NumDayDue'), ('AccrInterest'), ('OffBalanceSheet'),
				('IntIncEarned'), ('AccrIntPerDay'), ('AccrIntCurrMonth'), ('AccrIntPreMonth'), ('Category'),
				('AccrCurCapital'), ('CapitalizedAmount'), ('MaturityDate'), ('Suspend'), ('OutstandingAmount')]

	@staticmethod
	def hotField():
		hotfield = []
		fielddisplay 	= "$('#Currency').val(data.Currency)"
		varname 		= "AccountID:$('#Account').val()"
		fun 			= ["Account", varname, fielddisplay, "/Morakot/ODAccountCurrency", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Suspend').val(data.Suspend); $('#AssetClass').val(data.AssetClass)"
		varname 		= "AccountType:$('#AccountType').val(),AccProduct:$('#AccProduct').val()"
		fun 			= ["AccountType", varname, fielddisplay, "/Morakot/AccountSuspendStatus", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#MaturityDate').val(data.MaturityDate)"
		varname 		= "Term:$('#Term').val(), ValueDate:$('#ValueDate').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/GetMaturityDateOverdraft", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#MaturityDate').val(data.MaturityDate)"
		varname 		= "Term:$('#Term').val(), ValueDate:$('#ValueDate').val()"
		fun 			= ["ValueDate", varname, fielddisplay, "/Morakot/GetMaturityDateOverdraft", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#OffBalanceSheet').val(data.OffBalanceSheet), $('#OffBalanceSheet').focus(), $('#AccProduct').focus()"
		varname 		= "LimitedAmount:$('#LimitedAmount').val()"
		fun 			= ["LimitedAmount", varname, fielddisplay, "/Morakot/GetOffBalanceSheet", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#IntCapitalize').select2('data', {'id':data.IntCapitalization,'text':data.Text})"
		fielddisplay 	+= ";$('#Category').val(data.Category); $('#InterestRate').val(data.InterestRate)"
		varname 		= "AccProduct:$('#AccProduct').val(),Currency:$('#Currency').val()"
		fun 			= ["AccProduct", varname, fielddisplay, "/Morakot/GetODProductInfo", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay 	= "Account"
		varname 		= "CustomerID:$('#CustomerID').val(),AccountType:'OverdraftAccount'"
		fun 			= ["CustomerID", varname, fielddisplay, "/Morakot/ContractCustomerInfo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "Collateral"
		varname 		= "CustomerID:$('#CustomerID').val()"
		fun 			= ["CustomerID", varname, fielddisplay, "/Morakot/CollateralByClient", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeInsert():
		try:
			AuthLevel 	= g.getNAuthorize

			if AuthLevel == 0 :
				MaturityDate 	= 	request.form['MaturityDate']
				LimitedAmount 	= 	request.form['LimitedAmount']
				AccProduct 		= 	request.form['AccProduct']
				Category		= 	request.form['Category']
				Currency		= 	request.form['Currency']
				ID 				=	request.form['ID']
				Account 		= 	request.form['Account']
				Branch 			= 	mktuser.getCurrentBranch()
				AccountObj 		=	MKT_ACCOUNT.query.get(Account)
				AccountObj.MaturityDate 	=	MaturityDate
				AccountObj.LimitedAmount 	=	LimitedAmount
				AccountObj.AccCategory 		=	Category
				AccountObj.AccProduct 		=	AccProduct
				db.session.add(AccountObj)
				mktoverdraft.OVERDRAFT().postOffBalanceSheet(ID,LimitedAmount,Currency,Branch,TranDate='')

			return True
			
		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def beforeAuthorize():
		try:
			ID 		= 	g.formID
			ODCObj 	=	MKT_OVERDRAFT_CONTRACT_INAU.query.get(ID)
			if ODCObj:
				MaturityDate 	=	ODCObj.MaturityDate
				LimitedAmount 	=	ODCObj.LimitedAmount
				Account 		=	ODCObj.Account
				Branch 			=	ODCObj.Branch
				Category 		=	ODCObj.Category
				AccProduct		=	ODCObj.AccProduct
				Currency		=	ODCObj.Currency
				AccountObj 		=	MKT_ACCOUNT.query.get(Account)
				AccountObj.MaturityDate 	=	MaturityDate
				AccountObj.LimitedAmount 	=	LimitedAmount
				AccountObj.AccCategory 		=	Category
				AccountObj.AccProduct 		=	AccProduct
				db.session.add(AccountObj)
				mktoverdraft.OVERDRAFT().postOffBalanceSheet(ID,LimitedAmount,Currency,Branch,TranDate='')

				return True
				
			else:
				flash(msg_error+'Record %s not found.'%ID)
				db.session.rollback()
				db.session.close()
				return False	

		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

