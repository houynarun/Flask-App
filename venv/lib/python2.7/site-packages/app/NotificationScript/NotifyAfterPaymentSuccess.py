from app                    		import db
from app.Customer.models            import *
from app.Account.models 			import *
from app.FundTransfer.models		import *
from app.Teller.models		 		import *
from app.Notification.models 		import *

import app.tools.mktdate    		as mktdate
import app.tools.mktsetting  		as mktsetting
import app.tools.mktmoney 			as mktmoney
from app.tools.mktnotificationgateway import CLS_NOTIFICATION_GATEWAY

class CLS_NotifyAfterPaymentSuccess(object):
	def __init__(self,**kwargs):
		pass

	def getQueryObj(self,**kwargs):
		"""
		- param:
			-kwargs key:
				- DrCategoryList = type list , list of category that consider as payment from customer

		"""
		DR_CATEGORY_LIST  	=   kwargs.get("DR_CATEGORY_LIST",[])
		CR_CATEGORY_LIST 	= 	kwargs.get("CR_CATEGORY_LIST",[])		
		BASE_DATE 			= 	kwargs.get("BASE_DATE", "CurrentDate")			

		BankDate        =   mktdate.getBankDate()
		CurrentDate     =   mktdate.getDateISO()
		Date 			= 	eval(BASE_DATE)

		if DR_CATEGORY_LIST:
			DR_CATEGORY_LIST = DR_CATEGORY_LIST.split()

		if CR_CATEGORY_LIST:
			CR_CATEGORY_LIST = CR_CATEGORY_LIST.split()		

		FundTransferObj = 	db.session.query(MKT_FUND_TRANSFER.ID,
											 MKT_FUND_TRANSFER.Branch,
											 MKT_FUND_TRANSFER.DrAccount,
											 MKT_FUND_TRANSFER.DrCategory,
											 MKT_FUND_TRANSFER.CrAccount,
											 MKT_FUND_TRANSFER.CrCategory,
											 MKT_FUND_TRANSFER.DrCurrency,
											 MKT_FUND_TRANSFER.CrCurrency,
											 MKT_FUND_TRANSFER.Transaction,
											 MKT_FUND_TRANSFER.Amount,
											 MKT_FUND_TRANSFER.Reference,
											 MKT_FUND_TRANSFER.Note,
											 MKT_FUND_TRANSFER.TranDate,
											 MKT_FUND_TRANSFER.Authorizeon,
											 MKT_FUND_TRANSFER.Authorizer,
											 MKT_FUND_TRANSFER.Inputter,
											 MKT_FUND_TRANSFER.Createdon,
											 MKT_ACCOUNT.CustomerList.label("CustomerID"),
											 MKT_ACCOUNT.ID.label("AccountID")
											 ).\
								join(MKT_ACCOUNT,MKT_ACCOUNT.ID==MKT_FUND_TRANSFER.CrAccount).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_ACCOUNT.CustomerList).\
								filter(MKT_FUND_TRANSFER.TranDate==str(Date)).\
								filter(MKT_FUND_TRANSFER.DrCategory.in_(DR_CATEGORY_LIST)).\
								filter(MKT_FUND_TRANSFER.CrCategory.in_(CR_CATEGORY_LIST))
								

		TellerObj 		= 	db.session.query(MKT_TELLER.ID,
											 MKT_TELLER.Branch,
											 MKT_TELLER.TDrAccount.label("DrAccount"),
											 MKT_TELLER.DrCategory,
											 MKT_TELLER.TCrAccount.label("CrAccount"),
											 MKT_TELLER.CrCategory,
											 MKT_TELLER.DrCurrency,
											 MKT_TELLER.CrCurrency,
											 MKT_TELLER.Transaction,
											 MKT_TELLER.Amount,
											 MKT_TELLER.Reference,
											 MKT_TELLER.Note,
											 MKT_TELLER.TranDate,
											 MKT_TELLER.Authorizeon,
											 MKT_TELLER.Authorizer,
											 MKT_TELLER.Inputter,
											 MKT_TELLER.Createdon,
											 MKT_ACCOUNT.CustomerList.label("CustomerID"),
											 MKT_ACCOUNT.ID.label("AccountID")
											 ).\
								join(MKT_ACCOUNT,MKT_ACCOUNT.ID==MKT_TELLER.TCrAccount).\
								join(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_ACCOUNT.CustomerList).\
								filter(MKT_TELLER.TranDate==str(Date)).\
								filter(MKT_TELLER.DrCategory.in_(DR_CATEGORY_LIST)).\
								filter(MKT_TELLER.CrCategory.in_(CR_CATEGORY_LIST))

		return FundTransferObj, TellerObj	

	def getRecords(self,**kwargs):
		"""
		- param:
			-kwargs key:
				- DrCategoryList = type list , list of category that consider as payment from customer

		"""
		Result				=   {}
		FundTransferObj, TellerObj = self.getQueryObj(**kwargs)

		#filter duplicate send out ... base on reference
		NOTIFY_GATEWAY  = CLS_NOTIFICATION_GATEWAY()	
		FundTransferObj = NOTIFY_GATEWAY.checkGatewayReference(TableObj=FundTransferObj,ReferenceField=MKT_FUND_TRANSFER.ID,NotifyType=kwargs.get("NotifyType"))
		TellerObj =  NOTIFY_GATEWAY.checkGatewayReference(TableObj=TellerObj,ReferenceField=MKT_TELLER.ID,NotifyType=kwargs.get("NotifyType"))

		if mktsetting.getLocalRegisterPath()=='local.FirstFinance':
			FundTransferObj = 	FundTransferObj.filter(MKT_CUSTOMER.EnableSMS=="Y")
			TellerObj       = 	TellerObj.filter(MKT_CUSTOMER.EnableSMS=="Y")

		FundTransferObj = FundTransferObj.union(TellerObj)
			
		Recipients     	= 	[]
		RecipientsData 	= 	{}
		CommonData     	= 	{}
		References 		= 	[]

		if FundTransferObj.first():
			for Row in FundTransferObj:
				DepositObj  	= Row.__dict__
				AccountObj 		= MKT_ACCOUNT.query.get(Row.AccountID)
				CustomerObj 	= MKT_CUSTOMER.query.get(Row.CustomerID)

				AccountObj 		= AccountObj.__dict__
				CustomerObj 	= CustomerObj.__dict__

				Amount =  mktmoney.toMoney(float(Row.Amount),mktmoney.getCurrencyObj(Row.CrCurrency))
				DepositObj.update({"AmountFormatMoney": Amount})

				#remove _sa_instance_state obj
				if "_sa_instance_state" in DepositObj.keys():
					del DepositObj['_sa_instance_state']

				if "_sa_instance_state" in AccountObj.keys():
					del AccountObj['_sa_instance_state']

				if "_sa_instance_state" in CustomerObj.keys():
					del CustomerObj['_sa_instance_state']

				CusID = DepositObj.get('CustomerID')
				Recipients.append(CusID)
				References.append(DepositObj.get('ID'))
				RecipientsData.update({CusID:{"Deposit"	    :DepositObj,
											  "Account"	    :AccountObj,
											  "Customer"	:CustomerObj}
									  })
				CommonData = {}
		#keep that three key in dictionary 
		Result = {
					"Recipients" 	:Recipients,
					"References"	:References,
					"RecipientsData":RecipientsData,
					"CommonData"	:CommonData
				 }

		return Result

NOTIFY = CLS_NotifyAfterPaymentSuccess()
