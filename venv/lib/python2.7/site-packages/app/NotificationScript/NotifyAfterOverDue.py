from app                    		import db
from app.Customer.models            import *
from app.LoanContract.models        import *
from app.PD.models 					import *
from app.Notification.models 		import *
import app.tools.mktdate    		as mktdate
import app.tools.mktsetting 		as mktsetting
from app.tools.mktnotificationgateway import CLS_NOTIFICATION_GATEWAY

class CLS_NotifyAfterOverDue(object):	
	def __init__(self,**kwargs):
		pass

	def getQueryObj(self,**kwargs):
		"""
		- param:
			-kwargs key:
				- PRE_NOTIFY_DAY = type int , is pre payment day before loan collect

		"""
		NumberOfDay     =   kwargs.get("NOTIFY_DAY",2)
		BASE_DATE 		= 	kwargs.get("BASE_DATE","CurrentDate")

		BankDate        =   mktdate.getBankDate()
		CurrentDate     =   mktdate.getDateISO()
		CollectionDate  =   mktdate.getPreviousDay(eval(BASE_DATE),NumberOfDay=int(NumberOfDay))
		
		PastDueObj 		=	db.session.query(MKT_PAST_DUE,MKT_PD_DATE,MKT_CUSTOMER).\
									  	join(MKT_PD_DATE,MKT_PD_DATE.ID == MKT_PAST_DUE.ID).\
									  	join(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_PAST_DUE.Customer).\
									  	filter(MKT_PD_DATE.DueDate == str(CollectionDate)) 
		
		return PastDueObj

	def getRecords(self,**kwargs):
		"""
		For find customer who late in payment 2 days of current installment
			Param:
				NOTIFY_DAY: number of day late of current installment to notify
		"""
		Result			=   {}
		PastDueObj 		= 	self.getQueryObj(**kwargs)		

	  	#filter duplicate send out ... base on reference
	  	NOTIFY_GATEWAY  = CLS_NOTIFICATION_GATEWAY()	
	  	PastDueObj = 	NOTIFY_GATEWAY.checkGatewayReference(TableObj=PastDueObj,ReferenceField=MKT_PD_DATE.PDID,NotifyType=kwargs.get("NotifyType"))			
		if mktsetting.getLocalRegisterPath()=='local.FirstFinance':
			PastDueObj = 	PastDueObj.filter(MKT_CUSTOMER.EnableSMS=="Y")

		Recipients     	= 	[]
		RecipientsData 	= 	{}
		CommonData     	= 	{}
		References 		= 	[]

		if PastDueObj.first():
			for Row in PastDueObj:
				PDObj 		= Row[0].__dict__
				PDDateObj 	= Row[1].__dict__
				CustomerObj = Row[2].__dict__
				#remove _sa_instance_state obj
				if "_sa_instance_state" in PDObj.keys():
					del PDObj['_sa_instance_state']
				if "_sa_instance_state" in PDDateObj:
					del PDDateObj['_sa_instance_state']
				if "_sa_instance_state" in CustomerObj:
					del CustomerObj['_sa_instance_state']

				CusID = PDObj.get('Customer')
				Recipients.append(CusID)
				References.append(PDDateObj.get('PDID'))
				RecipientsData.update({CusID:{"PastDue"		:PDObj,
											  "PastDueDate"	:PDDateObj,
											  "Customer"	:CustomerObj}
									  })
				CommonData = {}

		#keep that three key in dictionary 
		Result = {
					"Recipients" 	:Recipients,
					"References"	:References,
					"RecipientsData":RecipientsData,
					"CommonData"	:CommonData
				 }

		return Result

NOTIFY = CLS_NotifyAfterOverDue()
