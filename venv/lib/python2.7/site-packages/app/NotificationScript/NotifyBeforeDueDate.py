from app                    		import db
from app.Customer.models            import *
from app.RepaymentSchedule.models   import *
from app.LoanContract.models        import *
from app.Notification.models 		import *
import app.tools.mktdate    		as mktdate
import app.tools.mktsetting  		as mktsetting
from app.tools.mktnotificationgateway import CLS_NOTIFICATION_GATEWAY

class CLS_NotifyBeforeDueDate(object):
	def __init__(self,**kwargs):
		pass

	def getQueryObj(self,**kwargs):
		"""
		- param:
			-kwargs key:
				- PRE_NOTIFY_DAY = type int , is pre payment day before loan collect

		"""
		NumberOfDay     =   kwargs.get("PRE_NOTIFY_DAY",2)
		BASE_DATE 		= 	kwargs.get("BASE_DATE","CurrentDate")
		BankDate        =   mktdate.getBankDate()
		CurrentDate     =   mktdate.getDateISO()	
		CollectionDate  =   mktdate.getNextDay(eval(BASE_DATE),NumberOfDay=int(NumberOfDay))

		ScheduleObj 	= 	db.session.query(MKT_REP_SCHEDULE,
									   		 MKT_LOAN_CONTRACT,
									   		 MKT_CUSTOMER).\
											join(MKT_LOAN_CONTRACT,
												 MKT_LOAN_CONTRACT.ID == MKT_REP_SCHEDULE.LoanID
											).\
											join(MKT_CUSTOMER,
												MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
											filter(MKT_REP_SCHEDULE.CollectionDate == str(CollectionDate))
		return ScheduleObj
		
	def getRecords(self,**kwargs):
		"""
		- param:
			-kwargs key:
				- PRE_NOTIFY_DAY = type int , is pre payment day before loan collect

		"""		
		Result			=   {}
		ScheduleObj 	= 	self.getQueryObj(**kwargs)		
		#filter duplicate send out ... base on reference
		NOTIFY_GATEWAY  = CLS_NOTIFICATION_GATEWAY()
		ScheduleObj = 	NOTIFY_GATEWAY.checkGatewayReference(TableObj=ScheduleObj,ReferenceField=MKT_REP_SCHEDULE.ID,NotifyType=kwargs.get("NotifyType"))		
		if mktsetting.getLocalRegisterPath()=='local.FirstFinance':
			ScheduleObj = 	ScheduleObj.filter(MKT_CUSTOMER.EnableSMS=="Y")
			
		Recipients     	= 	[]
		RecipientsData 	= 	{}
		CommonData     	= 	{}
		References 		= 	[]
		
		if ScheduleObj:
			for Row in ScheduleObj:
				ContractObj 	= Row[1].__dict__
				RepScheduleObj 	= Row[0].__dict__
				CustomerObj 	= Row[2].__dict__
				#remove _sa_instance_state obj
				if "_sa_instance_state" in ContractObj.keys():
					del ContractObj['_sa_instance_state']
				if "_sa_instance_state" in RepScheduleObj:
					del RepScheduleObj['_sa_instance_state']
				if "_sa_instance_state" in CustomerObj:
					del CustomerObj['_sa_instance_state']

				CusID = ContractObj.get('ContractCustomerID')
				Recipients.append(CusID)
				References.append(RepScheduleObj.get("ID"))
				RecipientsData.update({CusID:{"Contract"	:ContractObj,
											  "RepSchedule"	:RepScheduleObj,
											  "Customer"	:CustomerObj}
									  })
				CommonData = {}
		#keep that three key in dictionary 
		Result = {
					"Recipients" 	:Recipients,
					"References" 	:References,
					"RecipientsData":RecipientsData,
					"CommonData"	:CommonData
				 }

		return Result

NOTIFY = CLS_NotifyBeforeDueDate()
