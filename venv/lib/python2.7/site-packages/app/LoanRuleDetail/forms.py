from flask 					import flash
from wtforms 				import DecimalField, IntegerField
from app.mktcore.wtfimports import *
from .models 				import *
import time

from app.Currency.models 	import MKT_CURRENCY
from app.LoanRule.models 	import MKT_LOAN_RULE

class FRM_LOAN_RULE_DE(exform):
	Description = TextField(requiredlabel("Description", "*"), [validators.Required()])
	MinAmount = TextField(requiredlabel("Minimum Amount", "*"), [validators.Required()])
	MaxAmount = TextField(requiredlabel("Maximum Amount", "*"), [validators.Required()])
	MinTerm = IntegerField("Minimum Term", [validators.Optional()])
	MaxTerm = IntegerField("Maximum Term", [validators.Optional()])

	def validate_MinAmount(form, field):
		try:

			Min = form.MinAmount.data
			float(Min)

		except:
			raise ValidationError("This field must be in numeric format.")

	def validate_MaxAmount(form, field):
		Min = form.MinAmount.data
		Max = form.MaxAmount.data

		try:
			Max = float(Max)
			Min = float(Min)
		except:
			raise ValidationError("This field must be in numeric format.")

		if Max <= Min:
			raise ValidationError("Maximum amount must bigger than minimum amount.")


	@staticmethod
	def setWidth():
		return [("MinAmount", len2), ("MaxAmount", len2), ("MinTerm", len1),
				("MaxTerm", len1), ("Currency", len1)]

	@staticmethod
	def setDisable():
		return [("Currency")]
	
	@staticmethod
	def beforeInsert():
		ID = request.form['ID']
		if len(ID) != 6:
			raise ValidationError(" The ID must be 6 digit")
		else:
			ID = ID[:3]
			Interest = MKT_LOAN_RULE.query.get(ID)
			if Interest:
				ID = request.form['ID'][-3:]
				Currency = MKT_CURRENCY.query.get(ID)
				if Currency:
					return True
				else:
					raise ValidationError(" The currency key#%s does not exist" %ID)
					return False
			else:
				raise ValidationError(" The rule key#%s does not exist" %ID)
				return False