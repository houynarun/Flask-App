from app.mktcore.wtfimports import *
from app.mktcore.imports 	import *
from .models 	import *
import time
from decimal 	import *
from flask 		import Markup

from app.tools.user 			import *
from app.TellerParam.models 	import *
from app.Currency.models  		import *
from app.Account.models 		import *
from app.Branch.models 			import *

import app.tools.mktmoney 		as mktmoney
import app.tools.mktreport 		as mktreport
import app.tools.mktdate		as mktdate
import app.tools.mktparam 		as mktparam
import app.tools.mktaudit 		as mktaudit
import app.tools.mktteller 		as mktteller
import app.tools.mktdb 			as mktdb

from sqlalchemy import inspect

def loadBranch():
	return MKT_BRANCH.query

@app.route("/Morakot/CashAccountGenerateAccount", methods=['GET'])
@app.route("/Morakot/API/CashAccountGenerateAccount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeCreateVaultAccount():
	TellerParam = mktparam.getTellerParam()
	Account=""
	Type  		= str(request.args.get('Type'))
	ID  		= str(request.args.get('ID'))
	Currency 	= str(request.args.get('Currency')).split()
	if TellerParam:
		if Type == "V":
			Category 	= TellerParam.VaultCategory

		elif Type == "T":
			Category 	= TellerParam.TillCategory

		elif Type == "W":
			Category 	= TellerParam.WalletCategory
		if Category:	
			for item in Currency:
				Account += "%s%s%s "%(item,Category,ID)
			
	return jsonify(Account=Account)

@app.route("/Morakot/CashAccountBranch", methods=['GET'])
@app.route("/Morakot/API/CashAccountBranch", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeCreateVaultBranch():
	Description = ""
	Branch  	= str(request.args.get('CashBranch'))
	Type 		= str(request.args.get('Type'))
	Branch 		= mktreport.VLOOKUP(["MKT_BRANCH","ID",Branch,"Description"])
	if Type == "V":
		LabelType = "Vault"
	elif Type == "T":
		LabelType = "Till"
	elif Type == "W":
		LabelType = "Wallet"
	else:
		LabelType = ""
	if Branch:
		Description = "%s %s"%(Branch,LabelType)	
	return jsonify(Description=Description)

class FRM_CASH_ACCOUNT(exform):
	Type 		= SelectField(requiredlabel('Type',"*"),
					choices=[('V', 'Vault'),('T', 'Till'),('W','Wallet')],
					coerce=str,
					validators=[validators.Required()])
	CashBranch 	= QuerySelectField(requiredlabel('Branch','*'),query_factory=loadBranch, 
					get_label='Description',#Field Name
					allow_blank=True,
					blank_text='--None--',
					validators=[validators.Required()])
	Description = TextField(requiredlabel("Description", "*"), [validators.Required()])
	Currency 	= TextField(requiredlabel("Currency", "*"), [validators.Required()])
	Account 	= TextField("Account")

	def validate_Type(form,field):
		
		DicType 		= {'V':'Vault','T':'Till','W':'Wallet'}
		ID 				= request.form['ID']
		ChangeType		= str(request.form['Type'])
		QueryObj 		= MKT_CASH_ACCOUNT.query.get(ID)
		if QueryObj:
			LiveType = str(QueryObj.Type)
			if ChangeType != LiveType:
				raise ValidationError("Cannot change type of account from %s to %s."%(DicType[LiveType] if LiveType in DicType else'',DicType[ChangeType] if ChangeType in DicType else''))

	def validate_Account(form,field):

		# check Teller Param is configuration if not will be raise
		CheckTellerParam = mktteller.getValidationTellerParam()
		if not CheckTellerParam[0]:
			raise ValidationError(CheckTellerParam[1])
		# if internet slow or hotField not done will be check genarate account.
		Currency= len(form.Currency.data.split())
		Account = len(form.Account.data.split())
		if Currency != Account:
			raise ValidationError("Please re-write currency again to genarate account.")

	def validate_CashBranch(form,field):

		ID 		= request.form['ID']
		Currency= form.Currency.data
		Branch 	= request.form['CashBranch']
		# Check if change Branch Vault or Till account has balance cannot change Branch.
		CheckBranch = mktteller.getValidationCashAccountBranch(ID,Currency,Branch)
		if not CheckBranch[0]:
			raise ValidationError(CheckBranch[1])
	
	def validate_Currency(form,field):

		ID 				= request.form['ID']
		ListCurrency 	= str(request.form['Currency']).split()
		ListAccount 	= str(request.form['Account']).split()
		# Check currency not found and Duplicate
		DupCurreny 		= mktteller.getValidationDuplicateCurreny(ListCurrency)
		if not DupCurreny[0]:
			raise ValidationError(DupCurreny[1])

		# Get which one have been remove
		ChangeAccount 	= mktteller.getChangeAccount(ID,ListAccount)

		# Get List All Acount still open if not return []
		ListAccOpen 	= mktteller.getAccountOpen(ChangeAccount)
		if ListAccOpen:
			for item in ListAccOpen:
				if not item[2] in ListCurrency:
					raise ValidationError(Markup('Cash Account# %s still open with balance : %s <br /> You cannot remove currncy %s'%(item[0],item[2],item[1])))
	@staticmethod
	def setDisableforEdit():
		return [('Type')]

	@staticmethod
	def setDisable():
		return [('Account')]

	@staticmethod
	def setWidth():
		return [('Currency',len2)]

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#Account').val(data.Account);"
		varname 		= "Currency:$('#Currency').val(),Type:$('#Type').val(),ID:$('#ID').val()"
		fun 			= ["Currency", varname, fielddisplay, "/Morakot/CashAccountGenerateAccount", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Description').val(data.Description);"
		varname 		= "CashBranch:$('#CashBranch').val(),Type:$('#Type').val()"
		fun 			= ["CashBranch", varname, fielddisplay, "/Morakot/CashAccountBranch", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Description').val(data.Description);"
		varname 		= "CashBranch:$('#CashBranch').val(),Type:$('#Type').val()"
		fun 			= ["Type", varname, fielddisplay, "/Morakot/CashAccountBranch", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Account').val(data.Account);"
		varname 		= "Currency:$('#Currency').val(),Type:$('#Type').val(),ID:$('#ID').val()"
		fun 			= ["Type", varname, fielddisplay, "/Morakot/CashAccountGenerateAccount", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def IsAcceptOverride():

		ID 				= request.form['ID']
		ListCurrency 	= str(request.form['Currency']).split()
		ListAccount 	= str(request.form['Account']).split()
		# Get which one have been remove
		ChangeAccount 	= mktteller.getChangeAccount(ID,ListAccount)

		# Get List All Acount still close if not return []
		ListAccClose 	= mktteller.getAccountClose(ChangeAccount)

		msgAccClose=''
		for item in ListAccClose:
			msgAccClose += "You have removed %s currency and its cash account# %s will be closed. <br/>" %(item[1],item[0])
		Msg="%s %s Are you sure you want to procceed?" % (msgAccClose, '<br/>' if msgAccClose !='' else '')
		
		
		MsgShow = True if ListAccClose else False 
	
		return MsgShow,Msg #

	@staticmethod
	def beforeNewID ():
		Check = mktparam.getTellerParam()
		if not Check:
			return True,"Please configuration Teller Parameter first."
		else:
			#Mean Teller Parameter have been configuration.
			return False,""

	@staticmethod
	def beforeInsert():
		# print g.formID
		AuthLevel 	= g.getNAuthorize
		# print 'beforeInsert: %s'% AuthLevel
		if AuthLevel == 0 :

			ID 				= request.form['ID']
			Branch 			= request.form['CashBranch']
			ListCurrency 	= str(request.form['Currency']).split()
			ListAccount		= str(request.form['Account']).split()
			Type 			= request.form['Type']
			Audit 		= mktaudit.getAuditrail()
			Inputter	= Audit['Inputter']
			Createdon 	= Audit['Createdon']
			Authorizer 	= Audit['Authorizer']
			Authorizeon	= Audit['Authorizeon']
			

			# Call function to commit 
			CheckCommit = mktteller.insertCashAccount(AuthLevel,Inputter,Createdon,Authorizer,Authorizeon,Branch,ID,ListCurrency,ListAccount,Type)
			if not CheckCommit[0]:
				return False
		return True

	@staticmethod
	def beforeAuthorize():
		# Call function to Authorize and has two transcations INAU, RNAU 
		AuthLevel 	= g.getNAuthorize
		CheckCommit = mktteller.setAuthCashAccount(AuthLevel,g.formID)
		if not CheckCommit[0]:
			return False
		else:
			return True

	@staticmethod
	def reverseRec(): 
		#in case, need to check condition before reverseRec if Account has balance cannot reverse
		AuthLevel = g.getNAuthorize
		return mktteller.getValidationCashAccountReverse(AuthLevel,g.formID)
		
