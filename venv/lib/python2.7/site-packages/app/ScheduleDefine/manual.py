'''
	Created by Sovankiry Rim 
	Date: 01 June 2015
	All Right Reserved Morakot Technology
'''

from flask import request, url_for, render_template,flash,redirect
from app.mktcore.wtfimports import *
from .models 				import *
from app.mktcore.session 	import *
from .. import app,db
import collections
import decimal
from datetime import datetime, date, timedelta

import app.tools.loantools.rescheduletools as mktschedule # import funtion Reschedule
import app.tools.loantools.nonworkingday   as work  #import funtion from nonworking
import app.tools.mktdate 	as mktdate
import app.tools.mktmoney 	as mktmoney
import app.tools.mkttool  	as mkttool
import app.tools.mktdb		as mktdb
import app.tools.mktholiday as mktholiday
import app.tools.mktcharge	as mktcharge # added by sophiarith on 2016-05-26

from app.Charge.models 				import MKT_CHARGE
from app.RepaymentSchedule.models 	import *
from app.LoanContract.models 		import *
from app.LoanProduct.models 		import *
from app.LoanAmendment.models 		import *
# Cheeck accress right
from app.mktcore.imports 			import *
from .views 						import getNumDayFirstInst

def getLocale():
	LocationSetting 	= mktsetting.getAppSetting('LANGUAGE')
	if LocationSetting == 'MYANMAR':
		setLocale = 'EN'
	else:
		setLocale = 'KH'
	return setLocale

@app.route("/Morakot/ScheduleManual/<ContractID>", methods=['GET', 'POST'])
# @app.route("/Morakot/ScheduleManual/<ContractID>/<Amendment>/<Resource>", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def routeScheduleManual(ContractID=""):

	ErrorMsg 		= [] # refer to error and exit sub
	ManualObj 		= []
	LoanObj 		= ''
	Amend 		= ''

	AmtID		= request.args.get("AmtID") if "AmtID" 	in request.args else ""
	Amendment 	= request.args.get("Amendment") if "Amendment" 	in request.args else ""
	Resource	= request.args.get("Resource") 	if "Resource" 	in request.args else ""
	
	# Block check access right
	getCheck 	= checkAccess ("/Morakot/ScheduleManual/","New")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template('schedule/schedulemanual.html',ErrorMsg=ErrorMsg)
	if not Resource:
		ErrorMsg.append(msg_error+msg_permission)
		return render_template('schedule/schedulemanual.html',ErrorMsg=ErrorMsg)
	if not Amendment:
		ErrorMsg.append(msg_error+msg_permission)
		return render_template('schedule/schedulemanual.html',ErrorMsg=ErrorMsg)
	if 'Edit' in request.args:
		getCheckEdit 	= checkAccess ("/Morakot/ScheduleManual/","Edit")
		if getCheck != True:
			ErrorMsg.append(msg_error+msg_permission)
			return render_template('schedule/schedulemanual.html',ErrorMsg=ErrorMsg)
	# START
	if Resource == 'AUTH':
	
		LoanObj 		= MKT_LOAN_CONTRACT.query.get(ContractID)
		if Amendment != 'No':
			Amend 		= MKT_LOAN_AMENDMENT.query.get(AmtID)

	elif Resource == 'INAU':
		if Amendment == 'No':
			LoanObj 		= MKT_LOAN_CONTRACT_INAU.query.get(ContractID)
		else:
			LoanObj 		= MKT_LOAN_CONTRACT.query.get(ContractID)
			Amend 		= MKT_LOAN_AMENDMENT_INAU.query.get(AmtID)

	if not LoanObj:
		ErrorMsg.append(msg_error+'Loan contract not found.')
		return render_template('schedule/schedulemanual.html',ErrorMsg=ErrorMsg)


	LoanID			= LoanObj.ID
	LoanBalance		= float(LoanObj.Amount) #LoanBalance
	ValueDate		= LoanObj.ValueDate #ValueDate
	Rate 			= float(LoanObj.InterestRate) #Rate
	FrequencyType 	= int(LoanObj.FreqType) #Frequency Type 1= by Month ; 2= by Week
	Frequency 		= int(LoanObj.Frequency) #Frequency 2 mean every two months
	Term 			= LoanObj.Term #Term
	Currency		= LoanObj.Currency #Currency USD,KHR, THB
	CurrencyObj 	= mktmoney.getCurrencyObj(Currency)
	LoanProduct 	= LoanObj.LoanProduct # Loan Product
	ProductObj	 	= MKT_LOAN_PRODUCT.query.get(LoanProduct)
	InterestDayBasis= int(ProductObj.IntDayBasis) #InterestDayBasis 1=360 ; 2=365 ; 3=366
	FwdBwdKey		= int(ProductObj.FWDBWDKey) #FwdBwdKey  1=Move to back but within month; 2=Move to forward but within month; 3=Move to back day; 4=Move to forward day
	HolidayOption	= int(mktholiday.getHoliday()) #Holiday Option 1=Saturday + Sunday + Holiday ; 2=Sunday + Holiday; 3=Holiday only
	BaseDateKey		= int(1) # Use BaseDateKey 1 because in manual must be genarate Coldate follow FirstColDate;  	1 =Collection date refer to value date; 2= refer to Previous date
	AccrCurrentInt 	= 0
	PrevInstallment = 0
	RepSchedule = None
	'''
		Changes to schedule define manual by:
		1. keeping previous paid installments
		2. add new schedule generated at the amend date following previous last paid installments

		Requirements:
		1. Amend Date
		2. Loan Balance (Cannot take Disbursed Amount. It is no longer changed when Loan Contract is amended)
		3. Remained Installment (All Loan Contract installment excluding previous paid installments)

		* New Repayment Schedule after amendment will be the combination of previous paid installments and new schedule generated on amend date
		** 2017-02-07
	'''

	if Amend:
		if Amend.AddDeduct == '1': #Mode Deduct
			LoanBalance	= float(LoanBalance) - float(Amend.Amount) #LoanBalance
		elif Amend.AddDeduct == '2': #Mode Add
			LoanBalance	= float(LoanBalance) + float(Amend.Amount) #LoanBalance

		AccrCurrentInt  = float( mktmoney.toMoney(float(LoanObj.AccrCurrentInt),CurrencyObj).replace(',','') )

		AccrCurrentInt = float(AccrCurrentInt) - float(Amend.WaiveInterest) - float(Amend.CollectCurrInt)

		ValueDate		= Amend.AmendDate #ValueDate

		# Check if there are installments already paid
		RepScheduleObj 	= MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.CollectionDate <= ValueDate,
																	MKT_REP_SCHEDULE.LoanID == ContractID).all()
		PrevInstallment = len(RepScheduleObj) if RepScheduleObj else int(0)

		Rate 			= float(Amend.Interest) #Rate
		Term 			= Amend.Term #Term
		Currency		= Amend.Currency #Currency USD,KHR, THB		

		if AccrCurrentInt > 0 :
			SystemBankDate = mktdate.getBankDate()
		 	# Check if today is LC collect date
			RepSchedule =	MKT_REP_SCHEDULE.query.\
							filter(MKT_REP_SCHEDULE.CollectionDate == str(SystemBankDate)).\
							filter(MKT_REP_SCHEDULE.LoanID == LoanID).\
							filter(MKT_REP_SCHEDULE.RepStatus == "0").\
							first()

			if RepSchedule:
				AccrCurrentInt 	= float(0)
				PrincipleAmt 	=	float(RepSchedule.Principal) if RepSchedule.Principal else float(0)
				LoanBalance		-= 	PrincipleAmt
			else:
				flash('The first interest includes accrued interest %s from previous loan.'%  mktmoney.toMoney(AccrCurrentInt,CurrencyObj))
	# END

	# If you test with fix LD Uncommand below
	# START
	'''
	LoanID			= ContractID if ContractID else 'LC1511300002'#LC ID
	LoanBalance		= 1000 #LoanBalance
	ValueDate		= '2015-01-01' #ValueDate
	Rate 			= 24 #Rate
	FrequencyType 	= 1 #Frequency Type 1= by Month ; 2= by Week
	Frequency 		= 1 #Frequency 2 mean every two months
	Term 			= 12#Term
	InterestDayBasis= 2 #InterestDayBasis 1=360 ; 2=365 ; 3=366
	FwdBwdKey		= 1 #FwdBwdKey  1=Move to back but within month; 2=Move to forward but within month; 3=Move to back day; 4=Move to forward day
	HolidayOption	= 1 #Holiday Option 1=Saturday + Sunday + Holiday ; 2=Sunday + Holiday; 3=Holiday only
	Currency		= 'USD' #Currency USD,KHR, THB
	CurrencyObj 	= mktmoney.getCurrencyObj(Currency)
	BaseDateKey		= 1# 1 =Collection date refer to value date; 2= refer to Previous date
	'''
	# END

	Locale 			= getLocale()
	args			= request.args # list of request object
	kwargs			= {} # refer to value of user input
	TotalRow 		= [] # Count number of record of user input
	ListError		= [] # refer List of error
	DicRecord 		= {} # refer dic collection date after check PI(Type)
	InsertRecord 	= {} # refer dic store record for insert to database
	BalAmount 		= float(LoanBalance)
	CurColDate 		= datetime.strptime(str(ValueDate),'%Y-%m-%d').date() #datetime.date(2015, 1, 1)
	BaseFirstDate 	= datetime.strptime(str(ValueDate),'%Y-%m-%d').date()
	TempInterest 	= 0 # Count Frequency Interest
	Charge			= '' # refer change value
	DicCharge		= {} # refer to dic store change value
	LoanChargeObj 	= db.session.query(MKT_CHARGE.ID,MKT_CHARGE.Description,MKT_LOAN_CHARGE.RateFixed,MKT_LOAN_CHARGE.Charge).\
									filter(MKT_LOAN_CHARGE.ID==LoanID).\
									filter(MKT_LOAN_CHARGE.Mode=='2').\
									join(MKT_LOAN_CHARGE,MKT_LOAN_CHARGE.ChargeKey==MKT_CHARGE.ID)

	MaturityDate 	= ""
	TotalInterest 	= float(LoanObj.IntIncEarned) - float(LoanObj.AccrCurrentInt)
	# Add to DicCharge for take it to calulator Charge
	for row in LoanChargeObj:
		DicCharge.update({row.ID:[row.RateFixed,row.Charge]})
	# Start collection item to list

	Collection				= [item for item in args if "CollectionDate" in item] # list of Collection
	PI 						= [item for item in args if "PI" in item] # list of PI(Type)
	ChargeList 				= [item for item in args if "Charge" in item] # list of Charge
	PrincipalList 			= [item for item in args if "PrincipalAmount" in item] # list of PrincipalAmount
	InterestList 			= [item for item in args if "InterestAmount" in item] # list of InterestAmount
	InterestRateList		= [item for item in args if "InterestRate" in item]
	FrequencyCollection		= [item for item in args if "FrequencyCollection" in item] # list of FrequencyCollection



	# sort list
	Collection.sort()
	PI.sort()
	ChargeList.sort()
	PrincipalList.sort()
	InterestList.sort()
	InterestRateList.sort()
	FrequencyCollection.sort()

	record 	= 1
	for item in Collection:
		TotalRow.append(record)#Count record start from number one
		record+=1

	# Update kwargs and Validation
	for item in args:
		# Validation PrincipalList
		if item in PrincipalList:
			
			if mkttool.isMoney(request.args.get(item)):

				kwargs.update({item:float(request.args.get(item).replace(',',''))})
			else:
				if request.args.get(item)=='':
					ListError.append(["Principal", "This field is required."])
					kwargs.update({item:str(request.args.get(item))})
				else:
					ListError.append(["Principal", "This field required a number."])
					kwargs.update({item:str(request.args.get(item))})

		# Validation InterestList
		if item in InterestList:
			
			if mkttool.isMoney(request.args.get(item)):

				kwargs.update({item:float(request.args.get(item).replace(',',''))})
			else:
				if request.args.get(item)=='':
					ListError.append(["Interest", "This field is required."])
					kwargs.update({item:str(request.args.get(item))})
				else:
					ListError.append(["Interest", "This field required a number."])
					kwargs.update({item:str(request.args.get(item))})

		if item in InterestRateList:
				
			try:

				float(request.args.get(item))

				if item[-1] == "1":
					if request.args.get("PI_1") and request.args.get("PI_1") != "PIM"  and float(Rate) != float(request.args.get(item)):
						Msg = "Loan Contract" if not Amend else "Amendment"
						ListError.append(["Interest Rate", "First installment interest rate must be equal to %s Interest Rate %s" % (Msg, Rate)]) 
					else:
						kwargs.update({item:str(request.args.get(item))})
				else:
					kwargs.update({item:str(request.args.get(item))})

			except:
				ListError.append(["Interest Rate", "Interest Rate must be in numeric format."]) 


		# Validation FrequencyCollection
		elif item in FrequencyCollection:
			# Define frequency type
			FrequencyTypeList 	= ['D', 'W', 'M', 'Y']
			if mkttool.isString(request.args.get(item)):
				if request.args.get(item)=='':
					ListError.append(["Frequency","This field is required."]) 
				else:
					FrequencyObj = str(request.args.get(item)).split()
					if len(FrequencyObj) != 3:
						ListError.append(["Frequency","Incorrect format. Example: 7 D 2, 1 M 12, 1 Y 1"]) # Frequency FrequencyType No.Collection
						kwargs.update({item:str(request.args.get(item))})

					else:
						# Validate frequency type, if not in FrequencyTypeList, raise error
						if FrequencyObj[1].upper() in FrequencyTypeList:
							FrequencyObj = FrequencyObj
							kwargs.update({item:FrequencyObj})
						else:
							ListError.append(["Frequency","FrequencyType should be: D-Days, W-Weeks, M-Months, Y-Years."])
							kwargs.update({item:str(request.args.get(item))})
			else:
				ListError.append(["Frequency","Incorrect format. Example: 7 D 2, 1 M 12, 1 Y 1"])
				kwargs.update({item:str(request.args.get(item))})

		# Validation ChargeList

		elif item in ChargeList:
			kwargs.update({item:str(request.args.get(item))})
			index 	= ChargeList.index(item)
			Charge 	= request.args.get(item)
			Type	= request.args.get(PI[index])
			if 'C' in Type: # mean Collection Type contains Charge: ['C', 'PC', 'IC', 'PIC']
				try:
					float(request.args.get(item))
				except:
					ListError.append(['Charge','Charge must be in numeric format.'])
				index = index +1
			ListError.sort()

		# Validation Collection Date
		elif item in Collection:
			if mkttool.isString(request.args.get(item)):
				if request.args.get(item)=='':
					ListError.append(["Collection Date","This field is required."])
				else:
					if not mktdate.isDate(str(request.args.get(item))):
						ListError.append(["Collection Date","This field is inputted with wrong format(YYYY-MM-DD)"])
					if str(request.args.get(item))<	ValueDate:
						ListError.append(["Collection Date","Must be bigger then %s value date."%ValueDate])

				if Amend:
					if RepSchedule:
						if request.args.get(item) == RepSchedule.CollectionDate:
							ListError.append(['Collection Date',"This loan will be collected today. Choose different date."])
			kwargs.update({item:str(request.args.get(item))})

		# Validation PI
		elif item in PI:
			if mkttool.isString(request.args.get(item)):
				if request.args.get(item)=='':
					ListError.append(["Type","This field is required."])
			kwargs.update({item:str(request.args.get(item))})

	if ListError:
		return render_template('schedule/schedulemanual.html',
								TotalRow=TotalRow,
								kwargs=kwargs,
								LoanChargeObj=LoanChargeObj,
								ListError=ListError,
								Amendment=Amendment,
								AmtID=AmtID,
								ContractID=ContractID,
								Resource=Resource,
								Currency=Currency)

	# Save MKT_SCHED_MANUAL
	if request.args.get('SaveSchedule'):
		# Before insert need clear record old.
		mktdb.deleteRecord(MKT_SCHED_MANUAL,[MKT_SCHED_MANUAL.LoanID==LoanID])
		if Resource == 'INAU':
			# Before insert delete frist
			mktdb.deleteRecord(MKT_REP_SCHEDULE_INAU,[MKT_REP_SCHEDULE_INAU.LoanID==LoanID, MKT_REP_SCHEDULE_INAU.CollectionDate > ValueDate])
			# Remove auto Schedule Define
			mktdb.deleteRecord(MKT_SCHED_DEFINE_INAU,[MKT_SCHED_DEFINE_INAU.ID==LoanID])
		# Seft authorize
		elif Resource == 'AUTH':
			# Before insert delete frist
			mktdb.deleteRecord(MKT_REP_SCHEDULE,[MKT_REP_SCHEDULE.LoanID==LoanID, MKT_REP_SCHEDULE_INAU.CollectionDate > ValueDate])
			# Remove auto Schedule Define
			mktdb.deleteRecord(MKT_SCHED_DEFINE,[MKT_SCHED_DEFINE.ID==LoanID])

		#This loop for get TotalRow and insert main MKT_SCHED_MANUAL
		record 	= 1
		for item in Collection:
			#Insert MKT_SCHED_MANUAL to db
			Type = request.args.get('PI_%s'%record)

			if Type != "PIM":
				InterestRate 	= request.args.get("InterestRate_%s"%record)
				InterestAmount 	= 0 
			else:
				InterestRate 	= "0"
				InterestAmount 	= float(request.args.get('InterestAmount_%s'%record).replace(',',''))

			InsertRecord.update({	'ID'			:'%s%s'%(LoanID,record),
									'LoanID'		:LoanID,
									'CollectionDate':request.args.get('CollectionDate_%s'%record),
									'Type'			:request.args.get('PI_%s'%record),
									'Principal'		:float(request.args.get('PrincipalAmount_%s'%record).replace(',','')),
									'Interest'		:InterestAmount,
									'InterestRate'	:InterestRate,
									'Charge'		:request.args.get('ChargeAmount_%s'%record),
									'Frequency'		:request.args.get('FrequencyCollection_%s'%record)
								})

			mktdb.insertTable(MKT_SCHED_MANUAL,InsertRecord)
			InsertRecord = {}
			record+=1
	else:
		# When user edit schedule take from db
		if 'Edit' in request.args:
			#if edit reocrd 
			ManualObj = MKT_SCHED_MANUAL.query.filter(MKT_SCHED_MANUAL.LoanID==LoanID)
			if Resource == "AUTH":
				ScheduleObj = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID)
			elif Resource == "INAU":
				ScheduleObj = MKT_REP_SCHEDULE_INAU.query.filter(MKT_REP_SCHEDULE_INAU.LoanID==LoanID)

	for row in TotalRow:
		#Start from index 0
		index = int(row)-1

		FrequencyType 	= mktschedule.getFrequencyType(kwargs[FrequencyCollection[index]][1].upper())
		Frequency 		= int(kwargs[FrequencyCollection[index]][0])

		TempFrequency 	= Frequency
		NumberOfFreqCollection = int(kwargs[FrequencyCollection[index]][2]) * Frequency

		if PI[index] != "PIM":
			Rate 		= float(kwargs[InterestRateList[index]])

		for i in range(0, NumberOfFreqCollection):

			if PI[index] != "PIM":
				Rate 		= float(kwargs[InterestRateList[index]])

			# Calculate Collection Date
			if i == 0:
				#First Collection start from user input
				FirstColDate 	= datetime.strptime(str(kwargs[Collection[index]]),'%Y-%m-%d').date()
				DayValueDate 	= str(FirstColDate).split("-")[2] # split only date for BaseDateKey is FirstColDate
				if FirstColDate < CurColDate:
					CurColDate = datetime.strptime(str(ValueDate),'%Y-%m-%d').date()
				#Manual Schedule For Mifida Only
				PrevDate 		= FirstColDate
				DayPrevDate		= DayValueDate
				# Validate Holiday
				if work.isNonWorkingDay(FirstColDate,HolidayOption)==True:
					ListError.append(['Collection Date','%s Date is holiday.'%FirstColDate])
					return render_template('schedule/schedulemanual.html',
											TotalRow=TotalRow,
											kwargs=kwargs,
											LoanChargeObj=LoanChargeObj,
											ListError=ListError,
											AmtID=AmtID,
											Amendment=Amendment,
											ContractID=ContractID,
											Resource=Resource,
											Currency=Currency)
			else:

				# Every ColDate day is default BaseDateKey is FirstColDate when repeat 
				if FrequencyType == 1: # Only Month

					BaseFirstDate = '%s-%s-%s' %(CurColDate.year,CurColDate.month,DayValueDate)
				else:
					#Manual Schedule For Mifida Only
					BaseDateSetting = mktsetting.getAppSetting('MYANMAR_BASEDATE_KEY')
					if BaseDateSetting=='2':
						BaseFirstDate = '%s-%s-%s'%(PrevDate.year,PrevDate.month,DayPrevDate)
						NextBaseFirstDate = mktschedule.getNextWeek(BaseFirstDate,Frequency)
						HolidayByBranch = mktschedule.getNextSpecialWeek(NextBaseFirstDate,1)
						if HolidayByBranch:
							BaseFirstDate = mktschedule.getNextWeek(PrevDate,1)

						if Frequency == TempFrequency:
							PrevDate 		= mktschedule.getNextWeek(PrevDate,Frequency)
							DayPrevDate 	= str(PrevDate).split("-")[2]

					else:
						BaseFirstDate = CurColDate

				FirstColDate = mktschedule.getColDate(BaseFirstDate, #CurColDate
													FrequencyType,#Frequency Type
													Frequency,#Frequency
													FwdBwdKey,#FwdBwdKey
													HolidayOption,
													BaseDateKey,
													DayValueDate)

			DateFrom 		= CurColDate
			DateTo 			= FirstColDate
			NumberOfDay 	= mktschedule.getNumberOfDay(InterestDayBasis,DateFrom,DateTo)
			CurInterest 	= mktschedule.getInterestAmount(Rate,BalAmount,InterestDayBasis,DateFrom,DateTo)

			# Interest
			if kwargs[PI[index]] == "I": 
				# print 'I%s'%i
				if Frequency == TempFrequency:

					Principal 		= 0
					Charge 			= 0
					Interest 		= CurInterest + TempInterest
					TotalAmount 	= Principal + Interest
					BalAmount 		= BalAmount - Principal
					DicRecord.update({str(FirstColDate):{
									'Principal'		: DicRecord[str(FirstColDate)]['Principal']	if str(FirstColDate) in DicRecord else Principal,
									'Interest'		: Interest,
									'BalAmount'		: BalAmount,
									'Charge'		: Charge,
									'TotalAmount'	: '',
									'NumberOfDay'	: '',
									'InterestRate'	: Rate
									}})

					#Block start re use new value
					CurColDate		= FirstColDate
					TempInterest 	= 0
					TempFrequency	= 0
				else:
					Principal		= 0
					Interest		= 0
					TempInterest 	+= Interest # ?

			# Principal
			elif kwargs[PI[index]] == "P":
				# print 'P%s'%i
				if Frequency == TempFrequency:
					Principal 		= float(kwargs[PrincipalList[index]])
					Interest 		= 0
					Charge 			= 0
					TempInterest 	= CurInterest + TempInterest
					TotalAmount 	= Principal + Interest
					BalAmount 		= BalAmount - Principal
					DicRecord.update({str(FirstColDate):{
									'Principal'		:Principal,
									'Interest' 		:DicRecord[str(FirstColDate)]['Interest']    if str(FirstColDate) in DicRecord else Interest,
									'BalAmount'		:BalAmount,
									'Charge'		:Charge,
									'TotalAmount' 	:'',
									'NumberOfDay' 	:'',
									'P' 			: True,
									'InterestRate'	: Rate
									}})
					#Block start re use new value
					CurColDate  	= FirstColDate
					TempFrequency 	= 0
				else:
					Principal 		= 0
					Interest 		= 0
					TempInterest 	+= CurInterest 

			# Charge
			elif kwargs[PI[index]] == "C":
				# print 'C%s'%i
				if Frequency == TempFrequency:

					Charge 			= kwargs[ChargeList[index]]
					Principal		= 0
					Interest		= 0
					TotalAmount		= Principal + Interest
					BalAmount		= BalAmount - Principal
					DicRecord.update({str(FirstColDate):{
									'Principal'		: DicRecord[str(FirstColDate)]['Principal']		if str(FirstColDate) in DicRecord else Principal,
									'Interest'		: DicRecord[str(FirstColDate)]['Interest']		if str(FirstColDate) in DicRecord else Interest,
									'BalAmount'		: BalAmount,
									'Charge'		: Charge,
									'TotalAmount'	: '',
									'NumberOfDay' 	: '',
									'InterestRate'	: Rate
									}})

					#Block start re use new value
					CurColDate 		= FirstColDate
					TempInterest 	= 0
					TempFrequency	= 0
				else:

					Principal 		= 0
					Interest 		= 0
					TempInterest 	+= Interest # ?

			# Principal + Interest
			elif kwargs[PI[index]] == "PI":
				# print 'PI:%s'%i
				Charge 			= 0
				if Frequency == TempFrequency:
					Principal 		= float(kwargs[PrincipalList[index]])
					Interest 		= CurInterest + TempInterest

					TotalAmount 	= Principal + Interest
					BalAmount 		= BalAmount - Principal

					DicRecord.update({str(FirstColDate):{
									'Principal' 	: Principal,
									'Interest'		: DicRecord[str(FirstColDate)]['Interest'] if str(FirstColDate) in DicRecord else Interest,
									'BalAmount'		: BalAmount,
									'Charge'		: Charge,
									'TotalAmount'	: '',
									'NumberOfDay'	: '',
									'InterestRate'	: Rate
									}})
					# print 'DicRecord PI',DicRecord[str(FirstColDate)]['Charge']
					#Block start re use new value
					CurColDate 		= FirstColDate
					TempInterest 	= 0
					TempFrequency 	= 0
				else:

					Principal 		= 0
					Interest 		= 0
					TempInterest 	+= CurInterest

			# Principal + Charge
			elif kwargs[PI[index]] == "PC":
				# print 'PC%s'%i
				if Frequency == TempFrequency:

					Charge 			= kwargs[ChargeList[index]]
					Principal 		= float(kwargs[PrincipalList[index]])
					Interest 		= 0
					TempInterest 	= CurInterest + TempInterest


					TotalAmount 	= Principal + Interest
					BalAmount 		= BalAmount - Principal

					DicRecord.update({str(FirstColDate):{
									'Principal'		: Principal,
									'Interest'		: DicRecord[str(FirstColDate)]['Interest']    if str(FirstColDate) in DicRecord else Interest,
									'BalAmount'		: BalAmount,
									'Charge'		: Charge,
									'TotalAmount'	: '',
									'NumberOfDay'	: '',
									'InterestRate'	: Rate
									}})
					# print 'DicRecord PC',DicRecord[str(FirstColDate)]['Charge']
					#Block start re use new value
					CurColDate 		= FirstColDate
					TempFrequency 	= 0
				else:
					Principal 		= 0
					Interest 		= 0
					TempInterest 	+= CurInterest

			# Interest + Charge
			elif kwargs[PI[index]] == "IC":
				# print 'IC%s'%i
				if Frequency == TempFrequency:

					Charge 			= kwargs[ChargeList[index]]
					Principal 		= 0
					Interest 		= CurInterest + TempInterest
					TotalAmount 	= Principal + Interest
					BalAmount 		= BalAmount - Principal
					# flash('%s'%DicRecord[str(FirstColDate)]['NumberOfDay'])
					DicRecord.update({str(FirstColDate):{
									'Principal'		: Principal,
									'Interest'		: Interest,
									'BalAmount'		: BalAmount,
									'Charge'		: Charge,
									'TotalAmount'	: '',
									'NumberOfDay'	: '',
									'InterestRate'	: Rate
									}})
					#Block start re use new value
					CurColDate 		= FirstColDate
					TempInterest	= 0
					TempFrequency 	= 0
				else:

					Principal 		= 0
					Interest 		= 0
					TempInterest 	+= Interest

			# Principal + Interest + Charge
			elif kwargs[PI[index]] == "PIC":
				# print 'PIC:%s'%i
				if Frequency == TempFrequency:
					Charge 			= kwargs[ChargeList[index]]
					# print 'charge in PIC',Charge
					Principal 		= float(kwargs[PrincipalList[index]])
					Interest 		= CurInterest + TempInterest
					TotalAmount 	= Principal + Interest
					BalAmount 		= BalAmount - Principal
					DicRecord.update({str(FirstColDate):{
									'Principal'		:Principal,
									'Interest'		:Interest,
									'BalAmount'		:BalAmount,
									'Charge'		:Charge,
									'TotalAmount'	:'',
									'NumberOfDay'	:'',
									'InterestRate'	: Rate
									}})
					#Block start re use new value
					CurColDate 		= FirstColDate
					TempInterest 	= 0
					TempFrequency 	= 0
				else:
					Principal 		= 0
					Interest 		= 0
					TempInterest 	+= CurInterest

			# Principal + Interest Manual
			elif kwargs[PI[index]] == "PIM":
				# Charge 			= 0
				if Frequency == TempFrequency:
					Charge          = float(kwargs[ChargeList[index]]) if kwargs[ChargeList[index]] else 0
					Principal 		= float(kwargs[PrincipalList[index]])
					Interest 		= float(kwargs[InterestList[index]])
					TotalAmount 	= Principal + Interest
					BalAmount 		= BalAmount - Principal

					DicRecord.update({str(FirstColDate):{
									'Principal' 	: Principal,
									'Interest'		: Interest,
									'BalAmount'		: BalAmount,
									'Charge'		: Charge,
									'TotalAmount'	: '',
									'NumberOfDay'	: '',
									'PIM' 			: True,
									'InterestRate'	: Rate
									}})

					#Block start re use new value
					CurColDate 		= FirstColDate
					TempInterest 	= 0
					TempFrequency 	= 0
				else:
					Principal 		= 0
					Interest 		= 0
					TempInterest 	+= CurInterest
			# refer to update TempFrequency after final loop record
			TempFrequency +=1


	InsertRecord 	= 	{}
	ColRecord 		= 	[]
	RowRecord 		= 	[]
	DicRecord 		= 	collections.OrderedDict(sorted(DicRecord.items())) # Order by Collection Date
	BalAmount 		=	LoanBalance 
	InstallmentNo 	= 	1
	CurColDate 		= 	datetime.strptime(str(ValueDate),'%Y-%m-%d').date()
	TemporaryInterest= 	0

	# Get Total amount from schedule
	DictTotal 		= 	{}
	TotPrincipal 	=	0
	TotInterest 	=	0
	TotCharge 		=	0
	TotNumOfDay		=	0

	# Block re-calulate schedule
	for key,value in DicRecord.iteritems():

		#First Collection start from user input
		FirstColDate 	= datetime.strptime(str(key),'%Y-%m-%d').date()
		DateFrom 		= CurColDate
		DateTo 			= FirstColDate
		NumberOfDay 	= mktschedule.getNumberOfDay(InterestDayBasis,DateFrom,DateTo)
		Rate 			= value['InterestRate']
		
		if list(DicRecord).index(key)==0 and Amend:
			'''
			 Check amend number of day of the first installment before saving to schedule INAU
			 list(DicRecord) return list of collection date by order so at index 0 is the first
			 collection date.
			'''
			NumberOfDay = getNumDayFirstInst(ContractID,ValueDate,list(DicRecord)[0])
		else:
			NumberOfDay = mktschedule.getNumberOfDay(InterestDayBasis,DateFrom,DateTo)
		
		
		CurInterest 	= mktschedule.getInterestAmount(Rate,BalAmount,InterestDayBasis,DateFrom,DateTo)
		
		Principal 		= float(value['Principal'])

		if value['Charge']=='':
			Charge = 0
		else:
			Charge = float(value['Charge'])
			# ChargeList = DicCharge[value['Charge']]
			# if ChargeList[0] == 'F':
			# 	Charge=float(ChargeList[1])
			# elif ChargeList[0] == 'R':
			# 	# Calulator rate of Charge and Charge is percent 
			# 	Charge = float(LoanBalance * ChargeList[1] / 100)
		
		if value['Interest']==0:
			TotalAmount = Principal + Charge
			if 'PIM' in value: 
				CurInterest 		= 0
				AccrCurrentInt 		= 0
				TemporaryInterest   = 0
			elif 'P' in value:
				TemporaryInterest  += CurInterest
				CurInterest 		= 0
			else:
				CurInterest 	   += TemporaryInterest
				CurInterest 	   += AccrCurrentInt
				TemporaryInterest   = 0
				AccrCurrentInt 		= 0
		else:
			if 'PIM' in value:
				CurInterest = value['Interest']
			else:
				CurInterest 	   += AccrCurrentInt
				CurInterest 	   += TemporaryInterest
			
			TemporaryInterest 	= 0
			AccrCurrentInt 		= 0

		#Update Loan Contract
		TotalInterest	+=	CurInterest
		MaturityDate 	=	key

		# Update Total Amount
		TotPrincipal 	+= Principal
		TotInterest 	+= CurInterest
		TotCharge 		+= Charge
		TotNumOfDay 	+= NumberOfDay

		# Convert to money
		Charge 			= mktmoney.toMoney(Charge,CurrencyObj)
		Principal 		= mktmoney.toMoney(Principal,CurrencyObj)
		Interest 		= mktmoney.toMoney(CurInterest,CurrencyObj)

		TotalAmount 	= float(Principal.replace(',','')) + float(Interest.replace(',','')) + float(Charge.replace(',',''))
		TotalAmount 	= mktmoney.toMoney(TotalAmount,CurrencyObj)

		BalAmount 		= float(str(BalAmount)) - float(Principal.replace(',',''))
		BalAmountStr    = mktmoney.toMoney(float(str(BalAmount)),CurrencyObj)
		ColDateFormat 	= mktdate.toDateShort(key,Locale) if Locale!=None else key
		#print '%s:%s'%(key,value)

		ColRecord.append(InstallmentNo) # InstallmentNo
		ColRecord.append(ColDateFormat) # Collection Date
		ColRecord.append(Principal)
		ColRecord.append(Interest)
		# print "Charge",Charge
		ColRecord.append(Charge)
		ColRecord.append(TotalAmount)
		ColRecord.append(BalAmountStr)
		ColRecord.append(NumberOfDay)

		if request.args.get('SaveSchedule'):
			# Insert to RepaymentSchedule
			InsertRecord.update({	
									'ID'			: '%s%s'% (LoanID, InstallmentNo), 
									'Status'		: 'INAU',
									'LoanID'		: LoanID,
									'No'			: InstallmentNo,
									'CollectionDate': key,
									'Principal'		: float(Principal.replace(',','')),
									'Interest'		: float(Interest.replace(',','')),
									'Charge'		: float(Charge.replace(',','')),
									'Balance'		: float(BalAmountStr.replace(',','')),
									'NumDay'		: NumberOfDay,
									'RepStatus'		: '0',
									'PartPaidAmt' 	: float(0)
								})

			if Resource == 'INAU':
				''' insert schedule to MKT_REP_SCHEDULE_INAU '''
				mktdb.insertTable(MKT_REP_SCHEDULE_INAU,InsertRecord)
				InsertRecord 	= {}
			# Seft authorize
			elif Resource == 'AUTH':
				''' insert schedule to MKT_REP_SCHEDULE '''
				mktdb.insertTable(MKT_REP_SCHEDULE,InsertRecord)
				InsertRecord 	= {}

		RowRecord.append(ColRecord)
		ColRecord 		= []
		CurColDate 		= FirstColDate
		InstallmentNo 	+= 1

	DictTotal.update({'TotPrincipal':TotPrincipal, 'TotInterest': TotInterest, "TotCharge": TotCharge, "TotNumOfDay": TotNumOfDay})

	# Check Balance Amount to alert
	if BalAmount < 0:
		ListError.append(['Balance','Balance cannot be negative.'])

	HeaderTable 	= [	('No','L'),
						('Collection Date','L'),
						('Principal','R'),
						('Interest','R'),
						('Charge','R'),
						('Total Amount','R'),
						('Balance','R'),
						('NumberOfDay','R')
						]
	#if edit record will show from RepaymentSchedule
	Schedule		=  ScheduleObj.all() if ManualObj else RowRecord
	Installment 	=  len(ScheduleObj.all()) + int(PrevInstallment) if ManualObj else len(RowRecord) + int(PrevInstallment)

	if Amend and Schedule:
		# Display number of day on schedule defined manual before saving schedule
		RecordDict = list(DicRecord)
		if RecordDict:
			Schedule[0][len(Schedule[0])-1] = getNumDayFirstInst(ContractID,ValueDate,RecordDict[0])

	# When click button Save
	if request.args.get('SaveSchedule'):
		# Validation Balance 
		if BalAmount == 0 :
			if Resource == 'INAU':
				if Amendment == 'No':
					# Update Loan Contract
					mktdb.updateRecord(MKT_LOAN_CONTRACT_INAU,
							[MKT_LOAN_CONTRACT_INAU.ID==LoanID],
							{"MaturityDate":MaturityDate,
							"TotalInterest":TotalInterest
							})

			# Seft authorize
			elif Resource == 'AUTH':
				# Update Loan Contract
				mktdb.updateRecord(MKT_LOAN_CONTRACT,
						[MKT_LOAN_CONTRACT_INAU.ID==LoanID],
						{"MaturityDate":MaturityDate,
						"TotalInterest":TotalInterest
						})	

			# update loan charge
			LoanCharge = mktcharge.updateLoanCharge(LoanObj.ID, LoanObj.Installment, LoanObj.Disbursed, LoanObj.Currency, Resource)
			if LoanCharge[0] == False:
				error_msg = LoanCharge[1]
				ListError.append(['LoanCharge', error_msg])
			else:
				flash('Repayment schedule was saved successfully.')
				db.session.commit()
				
		else:
			ListError.append(['Balance','You cannot save the schedule. The balance must be zero.'])
			return render_template('schedule/schedulemanual.html',
									TotalRow=TotalRow,
									kwargs=kwargs,
									LoanChargeObj=LoanChargeObj,
									ListError=ListError,
									HeaderTable=HeaderTable,
									Schedule=Schedule,
									AmtID=AmtID,
									Amendment=Amendment,
									ContractID=ContractID,
									Resource=Resource,
									Currency=Currency,
									DictTotal=DictTotal,
									float=float,
									CurrencyObj=mktmoney.getCurrencyObj,
									toMoney=mktmoney.toMoney,
									formatNumber=mktmoney.formatNumber)

	return render_template('schedule/schedulemanual.html',
							float			=	float,
							toMoney 		=	mktmoney.toMoney,
							formatNumber 	=	mktmoney.formatNumber,
							CurrencyObj 	= 	mktmoney.getCurrencyObj,
							toDate 			=	mktdate.toDateShort,
							Locale 			=	Locale,
							kwargs 			=	kwargs,
							TotalRow 		=	TotalRow,
							LoanChargeObj 	=	LoanChargeObj,
							ListError 		=	ListError,
							HeaderTable 	=	HeaderTable,
							Schedule 		=	Schedule,
							DictTotal 		= 	DictTotal,
							AmtID 			=	AmtID,
							Amendment 		=	Amendment,
							ContractID 		=	ContractID,
							Resource 		=	Resource,
							Currency 		=	Currency,
							ManualObj 		=	ManualObj)