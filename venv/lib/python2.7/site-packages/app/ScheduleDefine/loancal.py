from app.mktcore.imports 					import *
from flask 									import g
from .forms 								import *
from .models 								import *
from .. 									import app, db
from datetime 								import datetime, date, timedelta
from app.mktcore.session 					import *
from decimal 								import *

import app.tools.loantools.rescheduletools 	as mktschedule
import app.tools.mktsetting 				as mktsetting
import app.tools.mktdate 					as mktdate
import app.tools.user 						as mktuser
import app.tools.mktmoney 					as mktmoney
import app.tools.mkttool 					as mkttool
import app.tools.mktdatamigration 			as mktdatamigration

import math

from app.LoanContract.models 				import *
from app.LoanProduct.models 				import *
from app.LoanAmendment.models 				import *
from app.RepaymentSchedule.models 			import *
from app.Currency.models					import *
from app.ChargeRate.models 					import *
from app.ChargeRate.forms 					import *





@app.route("/Morakot/LoanCalculator", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def LoanCalculator():
	AccSetting 				= mktsetting.getAccSetting()
	DisburseAmount 			= 0 							#DisburseAmount
	ValueDate 				= str(mktdate.getBankDate()) 	# ValueDate
	Rate 					= 24 							#Rate
	ChargeType 				= ""
	Charge 					= 0
	FrequencyType 			= 1 							#Frequency Type 1= by Month ; 2= by Week
	Frequency 				= 1 							#Frequency 2 mean every two months
	Term 			 		= 12 							#Term
	Installment 			= 12
	InterestDayBasis		= 2 							#InterestDayBasis 1=360 ; 2=365 ; 3=366
	FwdBwdKey 				= 1 							#FwdBwdKey  1=Move to back but within month; 2=Move to forward but within month; 3=Move to back day; 4=Move to forward day
	HolidayOption 			= 1 							#Holiday Option 1=Saturday + Sunday + Holiday ; 2=Sunday + Holiday; 3=Holiday only
	Currency 				= 'USD' 						#Currency USD,KHR, THB
	BaseDateKey 			= 1 							# 1 =Collection date refer to value date; 2= refer to Previous date
	FrequencyP 				= 1 							# Frequency Principle
	FrequencyI 				= 1 							# Frequency Interest
	RepaymentMode 			= 1 							# 1=Declining ; 2= Annuity ; 3=Flat
	FirstDate 				= ""
	PaymentHoliday 			= 0
	NumOfHolidayInstallment = 0
	WaiveInterest 			=""
	CriteriaRequired		= True
	ChargeRateType 			= FRM_CHARGE_RATE.RegularFeeType
	RegularFeeType 			= ChargeRateType.kwargs.get('choices',[])
	CurrencyObj 			= MKT_CURRENCY.query

	ParamCharge 			= {}

	if AccSetting:
		Currency 	= AccSetting.BaseCurrency

	if request.args:
		DisburseAmount 		= request.args.get('DisburseAmount') if request.args.get('DisburseAmount') else 0
		Currency 			= str(request.args.get('Currency'))  if request.args.get('Currency') else ''
		ValueDate 			= str(request.args.get('ValueDate'))  if request.args.get('ValueDate') else ''
		Rate 				= request.args.get('Rate') if request.args.get('Rate') else 0
		FrequencyType 		= int(request.args.get('FrequencyType'))  if request.args.get('FrequencyType') else 0
		Term 				= int(request.args.get('Term'))  if request.args.get('Term') else 0
		RepaymentMode 		= int(request.args.get('RepaymentMode'))  if request.args.get('RepaymentMode') else 0
		ChargeType 			= int(request.args.get('ChargeType')) if request.args.get('ChargeType') else ''
		Charge 				= float(request.args.get('Charge')) if request.args.get('Charge') else 0
		OptWaiveInterest 	= False

		ParamCharge 		= { 'Type':	ChargeType, 
								'FixAmount':Charge,
								'Percentage':Charge,
								'ChargeRate':Charge}

	Schedule 	= ''
	if request.args:
		CheckIfNumber 	= mkttool.isFloat(DisburseAmount)
		CheckRate 		= mkttool.isFloat(Rate)
		if CheckIfNumber or CheckRate:
			if DisburseAmount[0] == '-':
				flash(msg_warning+"Disburse Amount Can't be Negative.")
			elif Rate[0] == '-':
				flash(msg_warning+"Rate Can't be Negative.")
			else:
				if DisburseAmount != 0:
					if mkttool.isFloat(DisburseAmount):
						DisburseAmount = float(DisburseAmount)
						if mkttool.isFloat(Rate):
							Rate = float(Rate)
							if RepaymentMode in [1,3]:
								Schedule 	=	mktschedule.getScheduleDeclining(DisburseAmount,ValueDate,Rate,FrequencyType,
												Frequency,Term,InterestDayBasis,FwdBwdKey,
												HolidayOption,Currency,BaseDateKey,
												FrequencyP,FrequencyI,RepaymentMode,None,FirstDate,False,PaymentHoliday,
												NumOfHolidayInstallment,OptWaiveInterest,ParamCharge=ParamCharge)
							elif RepaymentMode == 2:
								Schedule 	= 	mktschedule.getScheduleAnnuity(DisburseAmount,
												ValueDate,Rate,FrequencyType,
												Frequency,Term,Currency,Locale='KH',ParamCharge=ParamCharge)
						else:
							flash(msg_warning+"Rate must be Number.")
					else:
						flash(msg_warning+"Disburse Amount must be Number.")

	HeaderTable 	=	['No','Collection Date','Principal','Interest','Charge','Total Amount','Balance','NumberOfDay']
	HeaderSchedule 	=	[	['Value Date :',ValueDate],['Disburse Amount:',DisburseAmount],['Currency',Currency],
							['Rate','%r'%Rate],['Frequency Type',FrequencyType],['Frequency',Frequency],
							['FwdBwdKey','Back within month' if FwdBwdKey==1 else 'Forward within month' if FwdBwdKey==2 else 'Back' if FwdBwdKey==3 else'Forward'],
							['Term',Term],['InterestDayBasis',InterestDayBasis],['Frequency Principle',FrequencyP]
						]
	return render_template('schedule/loancalculator.html',
							CurrencyObj 	= CurrencyObj,
							getCurrencyObj 	= mktmoney.getCurrencyObj(Currency),
							RegularFeeType 	= RegularFeeType,
							Schedule 		= Schedule,
							HeaderTable 	= HeaderTable,
							toMoney 		= mktmoney.toMoney,
							float 			= float,
							str 			= str,
							Currency 		= Currency,
							DisburseAmount 	= DisburseAmount,
							ValueDate 		= ValueDate,
							Rate 			= Rate,
							ChargeType 		= ChargeType,
							Charge 			= Charge,
							FrequencyType 	= FrequencyType,
							Term 			= Term,
							RepaymentMode 	= RepaymentMode,
							Installment 	= Installment)


@app.route("/Morakot/LoanEstimator", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def LoanEstimator():
	
	ErrorMsg 	= []
	getCheck 	= checkAccess("/Morakot/LoanEstimator","Search")
	if getCheck != True: 
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	Income 			= 0
	Expense 		= 0
	InterestRate 	= 0
	Tenor 			= 0
	PropertyPrice 	= 0
	Product 		= 0
	EMI 			= 0
	LVR 			= 0
	Principal 		= 0
	LoanProductObj 	= MKT_LOAN_PRODUCT.query.all()

	if request.args:
		Income 			= request.args.get('Income') if request.args else Income
		Expense 		= request.args.get('Expense') if request.args else Expense
		InterestRate 	= request.args.get('InterestRate') if request.args else InterestRate
		Tenor 			= request.args.get('Tenor') if request.args else Tenor
		PropertyPrice 	= request.args.get('PropertyPrice') if request.args else PropertyPrice
		Product 		= request.args.get('Product') if request.args else Product

		# Block calculation
		DSR 		= getProductMonthlyToNDI(Product) # 0.65 # Different by product type
		EMI 		= getMonthlyPayment(Income, Expense, DSR)
		Principal 	= getEstimatedDisbursedAmount(EMI, InterestRate, Tenor)
		LVR 		= getLoanToValueRatio(Principal, PropertyPrice)

		# Block format
		EMI 		= mktmoney.toMoney(float(EMI),mktmoney.getCurrencyObj('USD'),DecimalPlace=0, RndMode=1)
		Principal 	= mktmoney.toMoney(float(Principal),mktmoney.getCurrencyObj('USD'),DecimalPlace=0, RndMode=1)
		LVR 		= mktmoney.formatNumber(float(LVR),1,2)

	return render_template('schedule/loanestimator.html',
							Income 			= Income,
							Expense 		= Expense,
							InterestRate 	= InterestRate,
							Tenor 			= Tenor,
							PropertyPrice 	= PropertyPrice,
							Product 		= Product,
							Principal 		= Principal,
							EMI 			= EMI,
							LVR 			= LVR,
							formatNumber 	= mktmoney.formatNumber,
							float 			= float,
							LoanProductObj 	= LoanProductObj)


def getEstimatedDisbursedAmount(EMI, InterestRate, Tenor):
	""" 
		Get Estimated Disbursed Amount:
		Formular: P = EMI*(((1+InterestRate)**Tenor)-1) / InterestRate*((1+InterestRate)**Tenor)
	"""
	try:
		Principal 	= 0
		InterestRate= float(InterestRate)/float(100)
		Tenor 		= float(Tenor)

		Numerator	= EMI*(((1+InterestRate)**Tenor)-1)
		Denominator	= InterestRate*((1+InterestRate)**Tenor)

		if InterestRate:
			Principal 	= Numerator/Denominator
		if Principal <= 0:
			Principal = 0
		
		return Principal
	except ZeroDivisionError as e:
		raise
	except Exception as e:
		raise

def getMonthlyPayment(Income, Expense, DSR = 0.65):
	"""
		GetEstimatedMonthlyPayment:
		Formular: 
			NDI = Income - Expense
			DSR = MonthlyPayment / NDI (Maximum is 65% of NDI)
	"""
	try:
		Income 	= float(Income)
		Expense = float(Expense)

		NDI 	= Income - Expense
		Payment = DSR * NDI

		if Payment <= 0:
			Payment = 0

		return Payment
	except Exception as e:
		raise

def getLoanToValueRatio(DisbursedAmount, CollateralValue):
	"""
		Get LVR (Loan to value ratio):
		Formular: DisbursedAmount / CollateralValue (Maximum is 75% of CollateralValue)
	"""
	try:
		LVR = 0
		if CollateralValue:
			DisbursedAmount = float(DisbursedAmount)
			CollateralValue = float(CollateralValue)
			
			if CollateralValue > 0:
				LVR = (DisbursedAmount / CollateralValue) * 100

		return LVR
	except ZeroDivisionError as e:
		raise
	except Exception as e:
		raise

def getProductMonthlyToNDI(Product):
	""" Get Product Monthly To NDI """
	try:
		NDI = ''
		LoanProductObj =  MKT_LOAN_PRODUCT.query.filter(MKT_LOAN_PRODUCT.ID==Product).first()
		if LoanProductObj:
			NDI = float(LoanProductObj.MonthlyRepToNDI)/100
		return NDI
	except e:
		raise e