from app.mktcore.imports 					import *
from flask 									import g
from .forms 								import *
from .models 								import *
from .loancal 								import *
from .. 									import app, db
from datetime 								import datetime, date, timedelta
from app.mktcore.session 					import *
from decimal import *

import app.tools.loantools.rescheduletools 	as mktschedule
import app.tools.mktsetting 				as mktsetting
import app.tools.mktdate 					as mktdate
import app.tools.user 						as mktuser
import app.tools.mktholiday 				as mktholiday
import app.tools.mktloan 					as mktloan
import app.tools.mktrepayment 	 			as mktrepayment
import app.tools.mktmoney 					as mktmoney
import app.tools.mktnotification			as mktnotification
import app.tools.mktcharge					as mktcharge # added by sophiarith on 2016-05-03
import app.tools.mktloanapplication 		as mktloanapp
import app.tools.mkttool 					as mkttool
import app.tools.mktaudit					as mktaudit
import app.tools.mktdb 						as mktdb
import app.tools.loantools.rescheduletools 	as mktreschedule

from app.LoanContract.models 				import *
from app.LoanApplication.models 			import *
from app.LoanProduct.models 				import *
from app.LoanAmendment.models 				import *
from app.RepaymentSchedule.models 			import *
from app.Currency.models					import *
from app.ChargeRate.models 					import *
from operator 								import itemgetter
from app.mktcore.customform 				import *
#Capitalize Interest/Penalty 2018-04-11 Mony
from app.PD.models 							import *
import app.tools.mktloanamendment			as mktamt
#end

@app.route("/Morakot/SearchLoanContractID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def SearchLoanContractID():

	result=''
	result = mktloan.getSearchLoanContract()
	
	return result
	
@app.route("/Morakot/ScheduleDefine", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getScheduleDefine():
	return redirect("/Morakot/ScheduleDefine/?Operation=New")


class CLS_ScheduleDefine(CLS_CustomForm):
	def __init__(self, Operation=''):
		self.Operation = Operation		
	def globalProcess(self):
		try:
			#call checkAccess
			getCheck = checkAccess ("/Morakot/ScheduleDefine")
			if not getCheck:
				return render_template('permission.html')
			else:
				# Check for INAU or LIVE record
				Resource 	= request.args.get("Resource") 	if "Resource" 	in request.args else "AUTH"
				Amendment 	= request.args.get("Amendment") if "Amendment" 	in request.args else "No"
				AmtID 		= request.args.get("AmtID") 	if "AmtID" 		in request.args else "No"
				HeaderTable = ['No', 'Collection Date', 'Principal', 'Interest', 'Total Amount', 'Balance', 'NumberOfDay']
				Operation  	= request.args.get('Operation')
				ContractID 	= request.args.get('ContractID')
				CheckCustom = request.args.get('CheckCustom')

				# Define Default for Schedule Define
				# Define Non-Working Day Option
				ListError 		= []
				SystemBankDate 	= str(mktdate.getBankDate())
				DisburseAmount  = 0 # DisburseAmount
				LoanBalance 	= 0
				ValueDate       = datetime.today() # ValueDate
				Rate            = 0 # Rate
				FrequencyType   = 0 # Frequency Type 1 = by Month ; 2 = by Week
				Frequency       = 0 # Frequency 2 mean every two months
				Installment     = 0 # Installment
				InterestDayBasis= 0 # InterestDayBasis 1 = 360 ; 2 = 365 ; 3 = 366
				FwdBwdKey       = 1 # FwdBwdKey  1 = Move to back but within month; 2 = Move to forward but within month; 3 = Move to back day; 4 = Move to forward day
				HolidayOption   = int(mktholiday.getHoliday()) # Holiday Option 1 = Saturday + Sunday + Holiday; 2 = Sunday + Holiday; 3 = Saturday + Holiday; 4 = Holiday only
				Currency        = 'KHR' #C urrency USD,KHR, THB
				BaseDateKey     = 1 # 1 = Collection date refer to value date; 2 = refer to Previous date
				FrequencyP      = 1 # Frequency Principle
				FrequencyI      = 1 # Frequency Interest
				RepaymentMode   = 1 # 1=Declining ; 2= Annuity ; 3=Flat
				FirstInstallmentDate 	=	"" # First Installment Date, Allow user to set first installment date different ValueDate on Contract
				Schedule 		= "" # Schedule before generate
				AccrCurrentInt 	= 0
				OldSched 		= None
				IRR 			= '' # Default not use IRR ; Note Don't put 0 for default if 0 mean that Accr Interest will be taken Rate IRR
				#2018-07-13 payment-holiday
				PaymentHoliday 	= 0
				AnnuityAmount 	= 0
				NumOfHolidayInstallment = 0
				WaiveInterest 	= "Y"
				OptWaiveInterest= False
				#end
				Product 		= ""
				Define 			= ""
				OptSave 		= ""
				PrevInstallment = 0 # Number of installments smaller than amend date
				RegularFee 		= "2" #ChargeMode
				OldIRR = SetConfirmIRR(ContractID)
				Locale 			= 'KH'
				LocationSetting 	= mktsetting.getAppSetting('LANGUAGE')
				if LocationSetting == 'MYANMAR':
					Locale = 'EN'

				toMoney = mktmoney.toMoney
				getCurrencyObj = mktmoney.getCurrencyObj
				formatNumber = mktmoney.formatNumber
				#2018-07-13 payment-holiday
				DefaultAnnuityAmount=0 #for payment holiday to re-generate total amount and override on previous annunity amount
				#end

				ShowUpload = False
				MigrationMode = True #mktloanapp.isMigrationMode()
				UploadSchedule = mktloanapp.isUploadSchedule()

				if UploadSchedule:
					ShowUpload = True

				if MigrationMode:
					ShowUpload = True


				# Get annuitywith holiday setting
				AnnuityWithActualNumDay 	= mktsetting.getAppSetting('AnnuityWithActualDay')
				if not AnnuityWithActualNumDay:
					AnnuityWithActualNumDay = "N"


				# Check Loan Amendment
				Amend 		= None
				if AmtID:
					if Resource and Resource.upper() == "INAU":
						Amend = MKT_LOAN_AMENDMENT_INAU.query.get(AmtID)
					else:
						Amend = MKT_LOAN_AMENDMENT.query.get(AmtID)

				# Check Loan Contract
				if Resource == "INAU":
					Contract = MKT_LOAN_CONTRACT_INAU.query.get(ContractID)
					ChargeObj = MKT_LOAN_CHARGE_INAU.query.filter(MKT_LOAN_CHARGE_INAU.ID == ContractID)

					if not Contract and Amendment in ["YES","Topup"]:
						Contract = MKT_LOAN_CONTRACT.query.get(ContractID)
						ChargeObj = MKT_LOAN_CHARGE.query.filter(MKT_LOAN_CHARGE.ID == ContractID)
				else:
					Contract = MKT_LOAN_CONTRACT.query.get(ContractID)
					ChargeObj = MKT_LOAN_CHARGE.query.filter(MKT_LOAN_CHARGE.ID == ContractID)

				if not Contract:
					# flash(msg_error + " Loan contract not define.")
					ListError.append(['Loan contract','Loan contract %s not found.'%ContractID])

				else:
					Branch 				=	Contract.Branch
					Inputter 			=	Contract.Inputter
					Createdon 			=	Contract.Createdon
					Authorizer 			=	Contract.Authorizer
					Authorizeon 		=	Contract.Authorizeon
					ProductID 			= 	Contract.LoanProduct
					Product 			= 	MKT_LOAN_PRODUCT.query.get(ProductID)

					Status 				=	Contract.Status
					DisburseAmount 		= 	float(Contract.Disbursed)
					ApprovedAmount 		= float(Contract.ApprovedAmount)
					LoanBalance 		= 	float(Contract.Amount)
					ValueDate 			= 	str(Contract.ValueDate)
					FirstInstallmentDate= 	str(Contract.FirstCollectionDate)
					InterestRate 		= 	Contract.InterestRate
					InterestRate 		=	InterestRate.split()
					Rate 				= 	float(InterestRate[0])
					FrequencyType 		= 	int(Contract.FreqType)
					Frequency 			= 	int(Contract.Frequency)
					Installment 		= 	int(Contract.Installment)
					Currency 			= 	str(Contract.Currency)
					AccrCurrentInt 		=	float(Contract.AccrCurrentInt) if Contract.AccrCurrentInt else float(0)
					AccrIntPerDay 		=	float(Contract.AccrIntPerDay) if Contract.AccrIntPerDay else float(0)
					EnableChargeSchedule= mktcharge.isConfigChargeRegular()
					AccrCurrentCharge  	= mktcharge.getAccrCurrCharge(LoanID=ContractID, Currency=Currency,Amendment=True)
					AccrCurrentCharge  	= mktmoney.toMoney(float(AccrCurrentCharge), mktmoney.getCurrencyObj(Currency))
					AccrCurrentCharge 	= float(AccrCurrentCharge.replace(",", ""))
					Amendate 			=	Amend.AmendDate if Amend else SystemBankDate
					# Check if today is LC collect date
					RepSchedule =	MKT_REP_SCHEDULE.query.\
									filter(MKT_REP_SCHEDULE.CollectionDate == str(Amendate)).\
									filter(MKT_REP_SCHEDULE.LoanID == ContractID).\
									filter(MKT_REP_SCHEDULE.RepStatus == "0").\
									first()

					# If Loan on collection need subtract Principal collection
					if RepSchedule:
						AccrCurrentInt 	= 	float(0)
						AccrCurrentCharge = float(0)
						PrincipleAmt 	=	float(RepSchedule.Principal) if RepSchedule.Principal else float(0)
						LoanBalance 	-= 	PrincipleAmt
						#Capitalize Interest/Penalty 2018-04-11 Mony
						if Amend:
							if Amend.CapitalizeOption == "Y":
								LoanBalance 	+= 	PrincipleAmt
						#end

					RepaymentMode 		= 	int(Product.RepMode) if Product.RepMode else 1
					BaseDateKey 		= 	int(Product.BaseDateKey) if Product else 0
					InterestDayBasis 	= 	int(Product.IntDayBasis) if Product else 0
					FwdBwdKey 			=	int(Product.FWDBWDKey) if Product else FwdBwdKey
					if FrequencyType == 3:#in case loan daily will set default FwdBwdKey to Always Forward
						FwdBwdKey = "4" #Always Forward


					""" Customization for First Finance """
					FF_CUSTOMIZE 		= mktsetting.getAppSetting("SCHED_DEFINE_FF_CUSTOMIZE")
					PaymentDict 		= {}
					LoanAppPaymentMode 	= None
					DefaultBasedDateKey = None

					if FF_CUSTOMIZE == 'Y':
						Result = customize_FirstFinance(Contract, True)
						PaymentDict 		= Result[0]
						LoanAppPaymentMode 	= Result[1]
						RepaymentMode 		= Result[2]
						DefaultBasedDateKey = Result[3]
						BaseDateKey 		= Result[4]
						FrequencyP 			= Result[5]


					# Accrued interest before amend
					AccrCurrentInt 	= mktmoney.toMoney(float(AccrCurrentInt), mktmoney.getCurrencyObj(Currency))
					AccrCurrentInt 	= float(AccrCurrentInt.replace(",", ""))

					if Amend:
						if not RepSchedule:
							""" SUM accru and charge per day * day between bank date and amend date """
							AmendDate 		=	Amend.AmendDate
							NumDateDiff 	=	mktdate.getDateDiff(SystemBankDate,AmendDate) #day between bank date and amend date

							if int(NumDateDiff) >0:
								AccrIntPerDay 	=  	mktmoney.toMoney(float(AccrIntPerDay), mktmoney.getCurrencyObj(Currency))
								AccrIntPerDay 	= 	float(AccrIntPerDay.replace(",", ""))
								AccrCurrentInt +=   (AccrIntPerDay * int(NumDateDiff))
								
						# Waive Interest
						WaiveInterestAmount = mktmoney.toMoney(float(Amend.WaiveInterest), mktmoney.getCurrencyObj(Currency))
						WaiveInterestAmount = float(WaiveInterestAmount.replace(",", ""))
						if WaiveInterestAmount > 0:
							AccrCurrentInt = AccrCurrentInt - WaiveInterestAmount
						
						# Collect Interest
						CollectCurrInt 		= mktmoney.toMoney(float(Amend.CollectCurrInt), mktmoney.getCurrencyObj(Currency))
						CollectCurrInt		= float(CollectCurrInt.replace(",",""))

						if CollectCurrInt > 0:
							AccrCurrentInt = AccrCurrentInt - CollectCurrInt

						#Capitalize Interest/Penalty 2018-04-11 Mony
						#In case Capitalize interest accrual current interest will not added to next installment
						#because it will become principal when do capitalize
						CapitalizeOption = Amend.CapitalizeOption
						CapitalizeAmount = Amend.CapitalizeAmount
						if CapitalizeOption == "Y":
							AccrCurrentInt = 0
						#end

					Message = ''
					if AccrCurrentInt > 0:
						Message = Markup('The first interest includes accrued interest <b>%s</b> from previous loan.'%  mktmoney.toMoney(AccrCurrentInt, mktmoney.getCurrencyObj(Currency)))
					
					if AccrCurrentCharge > 0 :
						Message += " Charge includes accrued interest %s " % AccrCurrentCharge
					
					if Message:
						flash(Message)

					# Block add fee charge on repayment schedule
					ParamCharge = {}
					if ChargeObj.all():

						# Type=Type, FixAmount=FixAmount,
						# Disbursement=DisburseAmount, Percentage=Percentage,
						# LoanBlance=BalAmount, ChargeRate=ChargeRate, NumberOfDay=NumberOfDay

						for item in ChargeObj:
							ChargeKey 	=	item.ChargeKey + Currency
							Charge 		= 	item.Charge

							# Check MKT_CHARGE_RATE
							KeyObj 			=	MKT_CHARGE_RATE.query.\
												filter(MKT_CHARGE_RATE.ID == ChargeKey).\
												filter(MKT_CHARGE_RATE.ChargeMode == RegularFee).\
												first()

							if KeyObj:
								RegularFeeType = int(KeyObj.RegularFeeType)

								ParamCharge = { 'Type':RegularFeeType, 
												'FixAmount':Charge,
												'Percentage':Charge,
												'ChargeRate':Charge,
												'DisburseAmount':DisburseAmount,
												'ApprovedAmount':ApprovedAmount,
												'LoanID':ContractID,
												'AmendObj':Amend,
												'LoanObj':Contract,
												'Resource':Resource
												}

							# print 'ParamCharge',ParamCharge

				if request.method == 'POST':
					OptSave 		 		= 	str(request.form.get('OptSave',''))
					FwdBwdKey 		 		= 	int(request.form.get('FwdBwdKey',''))
					FrequencyP       		= 	request.form.get('PrincipalFreq','')
					FrequencyI       		= 	request.form.get('InterestFreq','')
					RepaymentMode    		= 	int(request.form.get('RepMode',''))
					Resource		 		= 	str(request.form.get('Resource',''))
					BaseDateKey 	 		= 	int(request.form.get('BaseDateKey',''))
					FirstInstallmentDate 	=	str(request.form.get('FirstInstallmentDate',''))
					#2018-07-13 payment-holiday
					PaymentHoliday 			= 	int(request.form.get('PaymentHoliday','')) if request.form.get('PaymentHoliday','') else ''
					NumOfHolidayInstallment =	int(request.form.get('NumOfHolidayInstallment')) if request.form.get('NumOfHolidayInstallment',0) else 0
					WaiveInterest 			=	str(request.form.get('WaiveInterest',''))
					AnnuityAmount 			= 	str(request.form.get('AnnuityAmount','')).replace(',','') if request.form.get('AnnuityAmount','0') else 0
					DefaultAnnuityAmount	= 	str(request.form.get('DefaultAnnuityAmount','')).replace(',','') if request.form.get('DefaultAnnuityAmount','0') else 0
					#end
					
					#Validate Frequency Principal allow only integer.
					if not FrequencyP:
						ListError.append(['Principal Frequency ', 'This field is required'])
						FrequencyP = 1
					else:
						if not mkttool.isInteger(FrequencyP):
							ListError.append(['Principal Frequency ', 'This field must be integer.'])
							FrequencyP = 1

					#Validate Interest Principal allow only integer.
					if not FrequencyI:
						ListError.append(['Interest Frequency ', 'This field is required'])
					else:
						if not mkttool.isInteger(FrequencyI):
							ListError.append(['Interest Frequency ', 'This field must be integer'])
							FrequencyI = 1

					if FwdBwdKey == 0:
						HolidayOption = 4 # 4 here doesn't care about holiday

					# Validate Annuity Amount
					if not AnnuityAmount:
						AnnuityAmount = 0
						# ListError.append(['Annuity Amount *: ','This field is required.'])
					else:
						if not mkttool.isFloat(AnnuityAmount):
							ListError.append(['Annuity Amount *: ','This field must be numberic.'])
							AnnuityAmount = 0 # Clear AnnuityAmount if incorrect format

					#2018-07-13 payment-holiday		
					if PaymentHoliday:
						
						if not NumOfHolidayInstallment:
							ListError.append(['#Of Holiday Installment ','This field is required.'])


						if Installment<NumOfHolidayInstallment:
							ListError.append(['#Of Holiday Installment ','Holiday installment must smaller then term installment'])

					if WaiveInterest == "Y":
						OptWaiveInterest = True
					else:
						OptWaiveInterest = False
					
					LocalRegisterPath =  mktsetting.getAppSetting("LOCAL_REGISTER_PATH")
					#validate 6 month of payment holiday for FF
					if LocalRegisterPath =='local.FirstFinance' and NumOfHolidayInstallment:
					 	ValidateNumOfHoliday = validateNumOfHoliday(NumOfHolidayInstallment=NumOfHolidayInstallment,MaxHolidayInstallment=6)
					 	if ValidateNumOfHoliday:
					 		ListError.append(ValidateNumOfHoliday)
					 	ValidateWaive = validateWaive(PaymentHoliday,WaiveInterest)
					 	if ValidateWaive:
					 		ListError.append(ValidateWaive)
					#end

				else:

					if Resource == "INAU":
						OldSched 		=	MKT_SCHED_DEFINE_INAU.query.\
											filter(MKT_SCHED_DEFINE_INAU.ID == ContractID).\
											first()
					else:
						OldSched 		=	MKT_SCHED_DEFINE.query.\
											filter(MKT_SCHED_DEFINE.ID == ContractID).\
											first()


				if not ListError:
					if OldSched:
						Define = OldSched
					else:
						Define = mktrepayment.postSchedule(ContractID, Resource, FwdBwdKey, FrequencyP, FrequencyI, RepaymentMode, BaseDateKey, FirstInstallmentDate, PaymentHoliday, NumOfHolidayInstallment, WaiveInterest,AnnuityAmount,DefaultAnnuityAmount)
						# this aviod AnnuityAmount take the old TotalAmount when put new Disbursment Amount
						AnnuityAmount 		= float(Define.AnnuityAmount) if Define.AnnuityAmount else 0

					FwdBwdKey 				= int(Define.FwdBwdKey)
					FrequencyP 				= int(Define.PrincipalFreq)
					FrequencyI 				= int(Define.InterestFreq)
					RepaymentMode 			= int(Define.RepMode)
					BaseDateKey 			= int(Define.BaseDateKey) if Define.BaseDateKey else int(1)
					FirstInstallmentDate 	= str(Define.FirstInstallmentDate) if Define.FirstInstallmentDate else ""
					PaymentHoliday 			= int(Define.PaymentHoliday) if Define.PaymentHoliday else 0
					NumOfHolidayInstallment = int(Define.NumOfHolidayInstallment) if Define.NumOfHolidayInstallment else ""
					WaiveInterest 			= str(Define.WaiveInterest) if Define.WaiveInterest else "N"
					DefaultAnnuityAmount	= str(Define.DefaultAnnuityAmount) if Define.DefaultAnnuityAmount else 0

				''' 
					Changes to schedule define by:
					1. keeping previous paid installments
					2. add new schedule generated at the amend date following previous last paid installments

					Requirements:
					1. Amend Date
					2. Loan Balance (Cannot take Disbursed Amount. It is no longer changed when Loan Contract is amended)
					3. Remained Installment (All Loan Contract installment excluding previous paid installments)

					* New Repayment Schedule after amendment will be the combination of previous paid installments and new schedule generated on amend date
					** 2017-02-07
				'''
				if Amend:
					RepScheduleObj 	= 	MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == ContractID)
					AddDed 			= Amend.AddDeduct
					AddDedAmount 	= float(Amend.Amount) if Amend.Amount else float(0)
					BackUpAmount 	= 0


					if int(AddDed) == 1:
						BackUpAmount = float(LoanBalance) - float(AddDedAmount)
					else:
						BackUpAmount = float(LoanBalance) + float(AddDedAmount)

					#Capitalize Interest/Penalty 2018-04-11 Mony
					#Calculate Principal Due Amount + Capitalize Int. Amount
					CapitalizeTotalAmount 	= mktamt.getCapitalizeTotalAmount(AmendID=Amend.ID,
																			  Resource="INAU",
																			  Type="2")
					#add capitalize interest, capitalize penalty to loan balance
					BackUpAmount = BackUpAmount + float(CapitalizeTotalAmount)
					#end

					LoanBalance 	= 	BackUpAmount
					ValueDate 		=	Amend.AmendDate
					Rate 			=	float(Amend.Interest) if Amend.Interest else float(0)

					PrevScheduleInstallment = 	RepScheduleObj.filter(MKT_REP_SCHEDULE.CollectionDate <= ValueDate).all()
					if PrevScheduleInstallment:
						PrevInstallment 		= len(PrevScheduleInstallment) 
					else:
						PrevScheduleInstallment =  int(0)

					Installment 			= 	int(Amend.Installment) - int(PrevInstallment) 

					if PrevInstallment >0:
						flash(Markup('Loan <a href="javascript:void(0)" onClick=CustomClickView("Loan&nbspCenter","LoanCentre/?ID=%s")><u>%s</u></a> has <b>%s installment(s)</b> already been paid. New <b>%s installment(s)</b> will be generated.'%(ContractID, ContractID, PrevInstallment, Installment)))
					''' Take next collection date as first installment date '''
					CurrScheduleInstallment = RepScheduleObj.filter(MKT_REP_SCHEDULE.CollectionDate > ValueDate).order_by(MKT_REP_SCHEDULE.CollectionDate).first()
					if CurrScheduleInstallment:
						if FirstInstallmentDate <= ValueDate:
							FirstInstallmentDate 	= CurrScheduleInstallment.CollectionDate
					else:
						FirstInstallmentDate = ""
					FrequencyType 	= 	int(Amend.FreqType)
					Frequency 		= 	int(Amend.Frequency)

				''' Validate First Installment Date '''
				if Installment <= 0:
					ListError.append(['New Installment','New Installment must be bigger than previous paid installments %s.'%PrevInstallment])
				if FirstInstallmentDate:
					if FirstInstallmentDate < SystemBankDate:
							ListError.append(['First Installment Date','Date must be bigger than system date.'])
				""" Validate Based date key First Date """
				if BaseDateKey == 3:
					if not FirstInstallmentDate:
						ListError.append(['First Installment Date','This field is required.'])

				if LoanBalance != 0:

					if not ListError:

						if RepaymentMode in [1,3]: # Mode Declining or Flat
							# Calculator Schedule
							Schedule = mktschedule.getScheduleDeclining(
													DisburseAmount=LoanBalance,
													ValueDate=ValueDate,
													Rate=Rate,
													FrequencyType=FrequencyType,
													Frequency=Frequency,
													Term=Installment,
													InterestDayBasis=InterestDayBasis,
													FwdBwdKey=FwdBwdKey,
													HolidayOption=HolidayOption,
													Currency=Currency,
													BaseDateKey=BaseDateKey,
													FrequencyP=FrequencyP,
													FrequencyI=FrequencyI,
													RepaymentMode=RepaymentMode,
													Locale=Locale,
													FirstDate=FirstInstallmentDate,
													InternalRateReturn=False,#Not use IRR
													PaymentHoliday=PaymentHoliday,
													NumOfHolidayInstallment=NumOfHolidayInstallment,
													OptWaiveInterest=OptWaiveInterest,
													ParamCharge=ParamCharge,
													AccrCurrentInt=AccrCurrentInt,
													AccrCurrentCharge=AccrCurrentCharge
													)
							#In case loan amendment the current AIR must be add with first interest collection before substrct with prinipal
							#For payment holiday: able to keep to first installment of holiday
							#Update by Mony - 2018-06-11 
							AccrCurrentInt 		= 0
							AccrCurrentCharge   = 0 

						elif RepaymentMode == 2: # Mote Annuity
							if AnnuityWithActualNumDay == "Y":
								Schedule = mktschedule.getScheduleActualNumDay(
													AccrCurrentCharge=AccrCurrentCharge,
													DisburseAmount=LoanBalance,
													ValueDate=ValueDate,
													Rate=Rate,
													FrequencyType=FrequencyType,
													Frequency=Frequency,
													Term=Installment,
													InterestDayBasis=InterestDayBasis,
													FwdBwdKey=FwdBwdKey,
													RepaymentMode=RepaymentMode,
													HolidayOption=HolidayOption,
													Currency=Currency,
													BaseDateKey=BaseDateKey,
													AnnuityAmount=AnnuityAmount,
													Locale=Locale,
													FirstDate=FirstInstallmentDate,
													AccrCurrentInt=AccrCurrentInt,
													ParamCharge=ParamCharge,
													PaymentHoliday=PaymentHoliday,
													NumOfHolidayInstallment=NumOfHolidayInstallment,
													OptWaiveInterest=OptWaiveInterest,
													DefaultAnnuityAmount=DefaultAnnuityAmount)
								#In case loan amendment the current AIR must be add with first interest collection before substrct with prinipal
								#Update by Sovankiry - 23/June 2017 with Ticket #473
								AccrCurrentInt 		= 0
								AccrCurrentCharge   = 0 
								AccrCurrentCharge   = 0 
							else:
								# Calculator Schedule
								Schedule = mktschedule.getScheduleAnnuity(
														LoanBalance,
														ValueDate,
														Rate,
														FrequencyType,
														Frequency,
														Installment,
														Currency,
														Locale,
														ParamCharge=ParamCharge,
														AccrCurrentInt=AccrCurrentInt,
														AccrCurrentCharge=AccrCurrentCharge
														)
								AccrCurrentInt 		= 0
								AccrCurrentCharge   = 0 

						elif RepaymentMode == 4: # Mode IRR
							IRRObj = mktschedule.getIRR(LoanBalance,Rate,FrequencyType,Installment)
							IRR = "%s"%IRRObj[0] # IRR Rate Per Year

							# Calculator Schedule IRR
							Schedule = mktschedule.getScheduleDeclining(
													LoanBalance,
													ValueDate,
													Rate,
													FrequencyType,
													Frequency,
													Installment,
													InterestDayBasis,
													FwdBwdKey,
													HolidayOption,
													Currency,
													BaseDateKey,
													FrequencyP,
													FrequencyI,
													RepaymentMode,
													Locale,
													FirstInstallmentDate,
													True,#Use IRR
													PaymentHoliday,
													NumOfHolidayInstallment,
													OptWaiveInterest,
													ParamCharge=ParamCharge,
													AccrCurrentInt=AccrCurrentInt,
													AccrCurrentCharge=AccrCurrentCharge
											)

						elif RepaymentMode == 5: #Upload
							# print 'Payment mode',RepaymentMode
							if 'fileUpload' in request.files:
								
								FileSchedule	 = 	request.files['fileUpload']

								if not FileSchedule.filename:
									ListError.append(('File Upload','This field is required.'))
									Record 	= db.session.query(MKT_REP_SCHEDULE_INAU).filter_by(LoanID=ContractID).delete()
									db.session.commit()
								else:
									if FileSchedule and mkttool.getAllowedFile(FileSchedule.filename):

										DictCSV = mkttool.getDictCSV(FileSchedule)
										CheckUpload = insertRepaymentSchedule( DictCSV, FileSchedule, Contract, Amend, ContractID)
										if CheckUpload[0]:
											ListError.extend(CheckUpload)
										else:
											Schedule = CheckUpload[1]
											flash("Repayment Schedule was uploaded successfully.")
									else:
										ListError.append(('File Upload','Invalid format allow file csv only.'))
							else:
								Record 	= db.session.query(MKT_REP_SCHEDULE_INAU).filter_by(LoanID=ContractID).delete()
								db.session.commit()

							
							# Start Past-Due Payment
							BodyDict = {}
							BodyList = []
							if Schedule:
								DicTotalAmount = {'TotPrincipal':0,'TotInterest':0,'Total':0,'TotNumDay':0, 'TotCharge': 0}
								FirstLoop = True
								PaymentScheduleList = []
								PaymentScheduleDict = {}
								for row in Schedule:
									Interest 	= '0' 
									Charge  	= '0'
									if FirstLoop:
										Interest = toMoney(float(str(row.get('Interest').replace(',',''))) + float(AccrCurrentInt),getCurrencyObj(Currency))
										Charge = toMoney(float(str(row.get('Charge').replace(',',''))) + float(AccrCurrentCharge),getCurrencyObj(Currency))
										FirstLoop = False
									else:
										Interest 	= row.get('Interest')
										Charge 		= row.get('Charge')

									GetTotalAmount = float(str(Interest.replace(',','')))+ float(str(row.get('Principal').replace(',',''))) +  float(Charge)
									DicTotalAmount = AddDataToList(DicTotalAmount,float(str(row.get('Principal').replace(',',''))), float(str(Interest.replace(',',''))), GetTotalAmount, row.get('NumberOfDay'), float(str(Charge.replace(',',''))))
									


									CollectionID 			=	{'key':'No','value':row.get('InstallmentNo')}
									CollectionDate 			=	{'key':'Collection Date','value':row.get('FormatCollectionDate')}
									Principal 				=	{'key':'Principal','value':row.get('Principal')}
									Interest				=	{'key':'Interest','value':Interest}
									Charge					=	{'key':'Charge','value':Charge}
									TotalAmount				=	{'key':'Total Amount','value':toMoney(GetTotalAmount,getCurrencyObj(Currency))} 
									Balance 				=	{'key':'Balance','value':row.get('Balance')} 
									NumberOfDay 			=	{'key':'NumberOfDay','value':row.get('NumberOfDay')} 
									
									Column 	= 	[CollectionDate,Principal,Interest,Charge,TotalAmount,Balance,NumberOfDay]
									PaymentScheduleList.append({'columns':Column,'urls':[],'important':[CollectionDate,Principal,TotalAmount]})

								CollectionID 			=	{'key':'','value':''}
								CollectionDate 			=	{'key':'Sub Total','value':''}
								Principal 				=	{'key':'Principal','value':toMoney(float(LoanBalance), getCurrencyObj(Currency), 1)}
								Interest				=	{'key':'Interest','value':toMoney(float(DicTotalAmount.get('TotInterest',0)), getCurrencyObj(Currency), 1)}
								Charge					=	{'key':'Charge','value':toMoney(float(DicTotalAmount.get('TotCharge')), getCurrencyObj(Currency), 1)}
								TotalAmount				=	{'key':'Total Amount','value':toMoney(float(DicTotalAmount.get('TotInterest'))+ LoanBalance, getCurrencyObj(Currency), 1)} 
								Balance 				=	{'key':'Balance','value':''} 
								NumberOfDay 			=	{'key':'NumberOfDay','value':formatNumber(float(DicTotalAmount.get('TotNumDay')), 1, 0)} 
								
								Column 	= 	[CollectionDate,Principal,Interest,Charge,TotalAmount,Balance,NumberOfDay]
								PaymentScheduleList.append({'columns':Column,'urls':[] , 'important':[CollectionDate,Principal,TotalAmount]})
								PaymentScheduleDict.update({
												'icon':'','name':'','title':'Schedule Define','type':'Table','data':PaymentScheduleList,'most_data':True,'expand':False
											   })
								BodyList.append(PaymentScheduleDict)
							# End Past-Due Payment

							BodyDict.update({
								'header':[],'data':BodyList
								})


							NewUrl 				= ''
							EditUrl 			= ''
							if Amendment == "No":
								NewUrl = '/LoanContract/New'
								EditUrl = '/LoanContract/Edit/%s'%ContractID
							elif Amendment == "Topup":
								NewUrl = '/LoanTopup/New'
								EditUrl = '/LoanTopup/Edit/%s'%AmtID
							else :
								NewUrl = '/LoanAmendment/New'
								EditUrl = '/LoanAmendment/Edit/%s'%AmtID
							
							SaveUrl 			= '/ScheduleDefine/?Operation=Save&ContractID=%s&Resource=%s&Amendment=%s&AmtID=%s'%(ContractID,Resource,Amendment,AmtID)
							GenerateScheduleUrl = '/ScheduleDefine/?Operation=New&ContractID=%s&Resource=%s&Amendment=%s&AmtID=%s'%(ContractID,Resource,Amendment,AmtID)
							ManualUrl 			= '/ScheduleManual/%s?Amendment=%s&Resource=%s&AmtID=%s'%(ContractID,Amendment,Resource,AmtID)
							

							CustomToolBar=[
									{'title':'New','type':'Button','method':'get','url':NewUrl,'param':[],'icon':'file-text-o','type_url':'Form'},
									{'title':'Save','type':'Button','method':'post','url':SaveUrl,'param':[],'icon':'floppy-o','type_url':'Custom'},
									{'title':'Edit','type':'Button','method':'get','url':EditUrl,'param':[],'icon':'pencil-square-o','type_url':'Form'},
									{'title':'Generate Schedule','type':'Button','method':'post','url':GenerateScheduleUrl,'param':[],'icon':'th','type_url':'Custom'},
								]
								# End Tool Bar 
							setAttributeScheduleDefine(Resource=Resource,AmtID=AmtID,Amendment=Amendment,FrequencyP=FrequencyP,FrequencyI=FrequencyI,
														AnnuityAmount=AnnuityAmount,FwdBwdKey=FwdBwdKey,RepMode=RepaymentMode,FirstInstallmentDate=FirstInstallmentDate,
														BaseDateKey=BaseDateKey,PaymentHoliday=PaymentHoliday,NumOfHolidayInstallment=NumOfHolidayInstallment,
														WaiveInterest=WaiveInterest,OptSave=OptSave)						
							self.form 			= FRM_SCHED_DEFINE
							self.recordID 		= ContractID
							self.header 		= 'Schedule Define For: %s'%ContractID
							self.customType     = 'Custom'
							self.kwargs = {
											'float' 				: float,
											'str' 					: str,
											'len' 					: len,
											'int' 					: int,
											'ContractID'			: ContractID,
											'Contract' 				: Contract,
											'Product' 				: Product,
											'Schedule' 				: Schedule,
											'HeaderTable' 			: HeaderTable,
											'FrequencyP' 			: FrequencyP,
											'FrequencyI' 			: FrequencyI,
											'AnnuityAmount'  		: AnnuityAmount,
											'FwdBwdKey' 			: FwdBwdKey,
											'RepaymentMode' 		: RepaymentMode,
											'LoanBalance' 			: LoanBalance,
											'DisburseAmount' 		: DisburseAmount,
											'Resource' 				: Resource,
											'Amendment' 			: Amendment,
											'AmtID' 				: AmtID,
											'AccrCurrentInt' 		: AccrCurrentInt,
											'AccrCurrentCharge' 	: AccrCurrentCharge,
											'Currency' 				: Currency,
											'BaseDateKey' 			: BaseDateKey,
											'OldSched' 				: OldSched,
											'FirstInstallmentDate'	: FirstInstallmentDate,
											'toMoney' 				: mktmoney.toMoney,
											'getCurrencyObj' 		: mktmoney.getCurrencyObj,
											'formatNumber' 			: mktmoney.formatNumber,
											'PaymentHoliday' 		: PaymentHoliday,
											'NumOfHolidayInstallment' : NumOfHolidayInstallment,
											'WaiveInterest' 		: WaiveInterest,
											'AnnuityWithActualNumDay' : AnnuityWithActualNumDay,
											'ListError' 			: ListError,
											'ShowUpload' 			: ShowUpload,
											'EnableChargeSchedule' 	: EnableChargeSchedule,
											'PaymentDict' 			: PaymentDict,
											'LoanAppPaymentMode'	: LoanAppPaymentMode,
											'DefaultBasedDateKey' 	: DefaultBasedDateKey,
											'FrequencyType' 		: FrequencyType,
											'PrevInstallment' 		: PrevInstallment
								}
							if CheckCustom == 'ButtonCustom':
								self.customType = 'Custom'
								def setVisible(self):
									return ['OptSave','Resource','Amendment','AmtID','PaymentHoliday','WaiveInterest','NumOfHolidayInstallment']
								setattr(FRM_SCHED_DEFINE,'setVisible',setVisible)
								self.customButton = {'title':'Generate Schedule','type':'Custom','method':'post','url':GenerateScheduleUrl,'param':[],'icon':'gear','type_url':'Custom','color':'#1b80c2'}
								return True
							def setVisible(self):
								return ['All']
							setattr(FRM_SCHED_DEFINE,'setVisible',setVisible)
							self.customToolBar 	= CustomToolBar						
							self.body 			= BodyDict
							
							return True
							
						if Schedule:
							# Validate Negative
							CheckNegativeSchedule = validateNegativeSchedule(Schedule)
							if CheckNegativeSchedule:
								ListError.extend(CheckNegativeSchedule)
							"""
							# Update Number of Day for the first installment from schedule define
							# Number of Days is taking from previous installment date before amend
							# minus installment date after amend.
							"""
							if Amend:
								Schedule[0]['NumberOfDay'] = getNumDayFirstInst(ContractID,ValueDate,str(Schedule[0].get('CollectionDate')))

						else:
							ListError.append(['Repayment Mode','Repayment Mode not found!'])
				else:
					ListError.append(['Disburse Amount','Must be more then zero.'])

				if Operation == "Save" and not ListError:

					# Add Old Record to Delete transaction
					if Resource == "INAU":
						Record = db.session.query(MKT_REP_SCHEDULE_INAU).filter_by(LoanID=ContractID).delete()
					else:
						Record = db.session.query(MKT_REP_SCHEDULE).filter_by(LoanID=ContractID).delete()

					TotalInterest 	= 0
					for row in Schedule:
						ID 				= ContractID
						LoanID 			= ContractID
						CollectionDate 	= u""
						Principal 		= ""
						Interest 		= ""
						Balance 		= ""
						NumDay 			= 0
						RepStatus 		= 0
						PartPaidAmt 	= 0
						No 				= int(row['InstallmentNo'])
						ID 				= str(ID) + str(No)
						MaturityDate 	= row['CollectionDate']
						CollectionDate 	= row['CollectionDate']
						Charge 			= str(row['Charge'].replace(",", ""))
						Principal 		= str(row['Principal'].replace(",", ""))
						Interest 		= str(row['Interest'].replace(",", ""))
						Balance 		= str(row['Balance'].replace(",", ""))
						NumDay 			= str(row['NumberOfDay'])

						# Adding accrued interest before amendment and next installment to the first installment of new generated schedule
						if No == 1 :
							if AccrCurrentInt > 0:
								Interest 	= float(Interest) + float(AccrCurrentInt)

							if AccrCurrentCharge > 0:
								Charge      = float(Charge) + float(AccrCurrentCharge)

						TotalInterest 	+= float(Interest)

						try:
							if Resource.upper() == "INAU":
								RepSchedule = MKT_REP_SCHEDULE_INAU(
												Status 			=	"INAU",
												Curr 			= 	"0",
												Inputter 		=	Inputter,
												Createdon 		= 	Createdon,
												Authorizer 		= 	Authorizer,
												Authorizeon 	= 	Authorizeon,
												ID 				= 	ID,
												LoanID 			= 	LoanID,
												No 				= 	No,
												CollectionDate 	=	CollectionDate,
												Principal 		= 	Principal,
												Interest 		= 	Interest,
												Balance 		= 	Balance,
												NumDay 			= 	NumDay,
												RepStatus 		= 	RepStatus,
												PartPaidAmt 	= 	PartPaidAmt,
												Branch 			=	Branch,
												Charge 			=	Charge
											)
							else:
								RepSchedule = MKT_REP_SCHEDULE(
												Status 			=	"AUTH",
												Curr 			= 	"0",
												Inputter 		=	Inputter,
												Createdon 		= 	Createdon,
												Authorizer 		= 	Authorizer,
												Authorizeon 	= 	Authorizeon,
												ID 				= 	ID,
												LoanID 			= 	LoanID,
												No 				= 	No,
												CollectionDate 	=	CollectionDate,
												Principal 		= 	Principal,
												Interest 		= 	Interest,
												Balance 		= 	Balance,
												NumDay 			= 	NumDay,
												RepStatus 		= 	RepStatus,
												PartPaidAmt 	= 	PartPaidAmt,
												Branch 			=	Branch,
												Charge 			=	Charge
											)

							db.session.add(RepSchedule)
						except:
							db.session.rollback()
							raise ValueError("Failed to save schedule.")

					if Amendment == "No":
						Contract.ValueDate 		= ValueDate
						Contract.MaturityDate 	= MaturityDate
						Contract.TotalInterest 	= TotalInterest
						Contract.IRR 			= IRR
						db.session.add(Contract)

					# update loan charge
					LoanCharge = mktcharge.updateLoanCharge(Contract.ID, Contract.Installment, Contract.Disbursed, Contract.Currency, Resource)
					if LoanCharge[0] == False:
						error_msg = LoanCharge[1]
						ListError.append(['LoanCharge', error_msg])

					if not ListError:
						if OldIRR[0]:
							flash(OldIRR[1],'success')
						flash("Schedule is successfully saved.",'success')
						db.session.commit()



				# Start Past-Due Payment
				BodyDict = {}
				BodyList = []
				if Schedule:
					DicTotalAmount = {'TotPrincipal':0,'TotInterest':0,'Total':0,'TotNumDay':0, 'TotCharge': 0}
					FirstLoop = True
					PaymentScheduleList = []
					PaymentScheduleDict = {}
					for row in Schedule:
						Interest 	= '0' 
						Charge  	= '0'
						if FirstLoop:
							Interest = toMoney(float(str(row.get('Interest').replace(',',''))) + float(AccrCurrentInt),getCurrencyObj(Currency))
							Charge = toMoney(float(str(row.get('Charge').replace(',',''))) + float(AccrCurrentCharge),getCurrencyObj(Currency))
							FirstLoop = False
						else:
							Interest 	= row.get('Interest')
							Charge 		= row.get('Charge')

						GetTotalAmount = float(str(Interest.replace(',','')))+ float(str(row.get('Principal').replace(',',''))) +  float(str(Charge).replace(',',''))
						DicTotalAmount = AddDataToList(DicTotalAmount,float(str(row.get('Principal').replace(',',''))), float(str(Interest.replace(',',''))), GetTotalAmount, row.get('NumberOfDay'), float(str(Charge.replace(',',''))))
						


						CollectionID 			=	{'key':'No','value':row.get('InstallmentNo')}
						CollectionDate 			=	{'key':'Collection Date','value':row.get('FormatCollectionDate')}
						Principal 				=	{'key':'Principal','value':row.get('Principal')}
						Interest				=	{'key':'Interest','value':Interest}
						Charge					=	{'key':'Charge','value':Charge}
						TotalAmount				=	{'key':'Total Amount','value':toMoney(GetTotalAmount,getCurrencyObj(Currency))} 
						Balance 				=	{'key':'Balance','value':row.get('Balance')} 
						NumberOfDay 			=	{'key':'NumberOfDay','value':row.get('NumberOfDay')} 
						
						Column 	= 	[CollectionDate,Principal,Interest,Charge,TotalAmount,Balance,NumberOfDay]
						PaymentScheduleList.append({'columns':Column,'urls':[],'important':[CollectionDate,Principal,TotalAmount]})

					CollectionID 			=	{'key':'','value':''}
					CollectionDate 			=	{'key':'Sub Total','value':''}
					Principal 				=	{'key':'Principal','value':toMoney(float(LoanBalance), getCurrencyObj(Currency), 1)}
					Interest				=	{'key':'Interest','value':toMoney(float(DicTotalAmount.get('TotInterest',0)), getCurrencyObj(Currency), 1)}
					Charge					=	{'key':'Charge','value':toMoney(float(DicTotalAmount.get('TotCharge')), getCurrencyObj(Currency), 1)}
					TotalAmount				=	{'key':'Total Amount','value':toMoney(float(DicTotalAmount.get('TotInterest'))+ LoanBalance, getCurrencyObj(Currency), 1)} 
					Balance 				=	{'key':'Balance','value':''} 
					NumberOfDay 			=	{'key':'NumberOfDay','value':formatNumber(float(DicTotalAmount.get('TotNumDay')), 1, 0)} 
					
					Column 	= 	[CollectionDate,Principal,Interest,Charge,TotalAmount,Balance,NumberOfDay]
					PaymentScheduleList.append({'columns':Column,'urls':[] , 'important':[CollectionDate,Principal,TotalAmount]})


					PaymentScheduleDict.update({
									'icon':'','name':'','title':'Schedule Define','type':'Table','data':PaymentScheduleList,'most_data':True,'expand':False
								   })
					BodyList.append(PaymentScheduleDict)
				# End Past-Due Payment

				BodyDict.update({
					'header':[],'data':BodyList
					})


				NewUrl 				= ''
				EditUrl 			= ''
				if Amendment == "No":
					NewUrl = '/LoanContract/New'
					EditUrl = '/LoanContract/Edit/%s'%ContractID
				elif Amendment == "Topup":
					NewUrl = '/LoanTopup/New'
					EditUrl = '/LoanTopup/Edit/%s'%AmtID
				else :
					NewUrl = '/LoanAmendment/New'
					EditUrl = '/LoanAmendment/Edit/%s'%AmtID
				
				SaveUrl 			= '/ScheduleDefine/?Operation=Save&ContractID=%s&Resource=%s&Amendment=%s&AmtID=%s'%(ContractID,Resource,Amendment,AmtID)
				GenerateScheduleUrl = '/ScheduleDefine/?Operation=New&ContractID=%s&Resource=%s&Amendment=%s&AmtID=%s'%(ContractID,Resource,Amendment,AmtID)
				ManualUrl 			= '/ScheduleManual/%s?Amendment=%s&Resource=%s&AmtID=%s'%(ContractID,Amendment,Resource,AmtID)
				CustomToolBar=[
						{'title':'New','type':'Button','method':'get','url':NewUrl,'param':[],'icon':'file-text-o','type_url':'Form','color':'#1b80c2'},
						{'title':'Save','type':'Button','method':'post','url':SaveUrl,'param':[],'icon':'floppy-o','type_url':'Custom','color':'#53b953'},
						{'title':'Edit','type':'Button','method':'get','url':EditUrl,'param':[],'icon':'pencil-square-o','type_url':'Form','color':'#f0ad4e'},
						{'title':'Custom','type':'Custom','method':'get','url':GenerateScheduleUrl+'&CheckCustom=ButtonCustom','param':[],'icon':'gear','type_url':'Custom','color':'#1b80c2'},
					]
					# End Tool Bar 
				setAttributeScheduleDefine(Resource=Resource,AmtID=AmtID,Amendment=Amendment,FrequencyP=FrequencyP,FrequencyI=FrequencyI,
														AnnuityAmount=AnnuityAmount,FwdBwdKey=FwdBwdKey,RepMode=RepaymentMode,FirstInstallmentDate=FirstInstallmentDate,
														BaseDateKey=BaseDateKey,PaymentHoliday=PaymentHoliday,NumOfHolidayInstallment=NumOfHolidayInstallment,
														WaiveInterest=WaiveInterest,OptSave=OptSave)	
				self.form 			= FRM_SCHED_DEFINE
				self.recordID 		= ContractID
				self.header 		= 'Schedule Define For: %s'%ContractID
				self.customType     = 'Custom'
				self.kwargs 		= {
									'float' 				: float,
									'str' 					: str,
									'len' 					: len,
									'int' 					: int,
									'ContractID'			: ContractID,
									'Contract' 				: Contract,
									'Product' 				: Product,
									'Schedule' 				: Schedule,
									'HeaderTable' 			: HeaderTable,
									'FrequencyP' 			: FrequencyP,
									'FrequencyI' 			: FrequencyI,
									'AnnuityAmount'  		: AnnuityAmount,
									'FwdBwdKey' 			: FwdBwdKey,
									'RepaymentMode' 		: RepaymentMode,
									'LoanBalance' 			: LoanBalance,
									'DisburseAmount' 		: DisburseAmount,
									'Resource' 				: Resource,
									'Amendment' 			: Amendment,
									'AmtID' 				: AmtID,
									'AccrCurrentInt' 		: AccrCurrentInt,
									'AccrCurrentCharge' 	: AccrCurrentCharge,
									'Currency' 				: Currency,
									'BaseDateKey' 			: BaseDateKey,
									'OldSched' 				: OldSched,
									'FirstInstallmentDate'	: FirstInstallmentDate,
									'toMoney' 				: mktmoney.toMoney,
									'getCurrencyObj' 		: mktmoney.getCurrencyObj,
									'formatNumber' 			: mktmoney.formatNumber,
									'PaymentHoliday' 		: PaymentHoliday,
									'NumOfHolidayInstallment' : NumOfHolidayInstallment,
									'WaiveInterest' 		: WaiveInterest,
									'AnnuityWithActualNumDay' : AnnuityWithActualNumDay,
									'ListError' 			: ListError,
									'ShowUpload' 			: ShowUpload,
									'EnableChargeSchedule' 	: EnableChargeSchedule,
									'PaymentDict' 			: PaymentDict,
									'LoanAppPaymentMode'	: LoanAppPaymentMode,
									'DefaultBasedDateKey' 	: DefaultBasedDateKey,
									'FrequencyType' 		: FrequencyType,
									'PrevInstallment' 		: PrevInstallment,
									"DefaultAnnuityAmount" 	: DefaultAnnuityAmount,
									}
				if CheckCustom == 'ButtonCustom':
					self.customType = 'Custom'
					def setVisible(self):
						return ['OptSave','Resource','Amendment','AmtID','PaymentHoliday','WaiveInterest','NumOfHolidayInstallment']
					setattr(FRM_SCHED_DEFINE,'setVisible',setVisible)
					self.customButton = {'title':'Generate Schedule','type':'Button','method':'post','url':GenerateScheduleUrl,'param':[],'icon':'gear','type_url':'Custom','color':'#1b80c2'}
					return True
				def setVisible(self):
					return ['All']
				setattr(FRM_SCHED_DEFINE,'setVisible',setVisible)
				self.customToolBar 	= CustomToolBar						
				# self.customButton 	= {'title':'Generate Schedule','type':'Button','method':'Post','url':GenerateScheduleUrl,'param':[],'icon':'th','type_url':'Custom','color':'#53b953'}
				self.body 			= BodyDict				
				return True
				
		except:
			raise

def validateNegativeSchedule(Schedule):

	ListError = []
	# ['Repayment Mode','Repayment Mode not found!']
	for row in Schedule:

		No 				= int(row['InstallmentNo'])
		Principal 		= float(row['Principal'].replace(",", ""))
		Interest 		= float(row['Interest'].replace(",", ""))
		Balance 		= float(row['Balance'].replace(",", ""))
		TotalAmount 	= str(row['TotalAmount'])
		TotalAmount		= TotalAmount.replace(",", "")
		TotalAmount 	= float(TotalAmount)

		if Principal < 0:
			ListError.append(['Principal','Installment %s can not be negative!'%No])
		if Interest < 0:
			ListError.append(['Interest','Installment %s can not be negative!'%No])
		if Balance < 0:
			ListError.append(['Balance','Installment %s can not be negative!'%No])
		if TotalAmount < 0:
			ListError.append(['Total Amount','Installment %s can not be negative!'%No])

		if ListError:
			return ListError
	return ListError



def insertRepaymentSchedule( DictCSV, FileCSV, LoanObj, Amend, ContractID):
	try:
		print "INSIDE method insertRepaymentSchedule()"
		Schedule 			= []
		ListError 			= []
		ListCollectionDate 	= []
		DictLoan 			= {}
		InvalidColumn 		= ''
		Audit 				= mktaudit.getAuditrail()
		BankDate 			= mktdate.getBankDate()
		AllowColumn 		=['LoanID','No','CollectionDate','Principal','Interest','Charge','Balance','NumDay','RepStatus','PartPaidAmt']
		
		if int(len(DictCSV)) == 0:
			ListError.append(['File Upload','Empty the contents of a file.'])
			return 	ListError

		MissingColumn =''
		UploadColumn = []

		for row in DictCSV[0]:
			UploadColumn.append(row)
		
		print "UploadColumn is "
		print UploadColumn
		
		for row in AllowColumn:
			if not row in UploadColumn:
				MissingColumn += "%s "%row

		for row in DictCSV[0]:
			if not row in AllowColumn:
				InvalidColumn += "%s "%row
		
		if MissingColumn:
			print "HELLO MISSING COLUMN"
			ListError.append(['Column Header','Missing colunm %s in csv file.'% MissingColumn])
			return 	ListError
			
		if InvalidColumn:
			ListError.append(['Column Header','Invalid colunm %s in csv file.'%InvalidColumn])
			return 	ListError

		

		

		DictCSV = setIndexDict(DictCSV)
		DictCSV = sorted(DictCSV, key=itemgetter('CollectionDate'))

		Disbursed 			= LoanObj.Disbursed
		LoanBalance 		= LoanObj.Amount
		OutstandingAmount 	= LoanObj.OutstandingAmount
		ValueDate 			= LoanObj.ValueDate
		Currency 			= LoanObj.Currency
		CurrencyObj 		= mktmoney.getCurrencyObj(Currency)
		Amendment = "No"
		if Amend:
			Amendment = "Yes"
			if Amend.AddDeduct == '1':
				LoanBalance 		= LoanObj.Amount - Amend.Amount
				OutstandingAmount 	= LoanObj.OutstandingAmount - Amend.Amount
			else:
				LoanBalance 		= LoanObj.Amount + Amend.Amount
				OutstandingAmount 	= LoanObj.OutstandingAmount + Amend.Amount
		
		Record 				= db.session.query(MKT_REP_SCHEDULE_INAU).filter_by(LoanID=ContractID).delete()
		
		TotalPrincipal 		= 0
		TotalOutstanding 	= 0
		TotalInterest		= 0
		No 					= 1
		LoanID 				= ContractID
		BalOfInstallment  	= LoanBalance

		for row in DictCSV:
			Index = row.get('Index')
			row.update({'LoanID':LoanID})

			# Block Update Default Branch if column don't have branch 
			Branch = row.get('Branch', None)

			if Audit:
				row.update(Audit)
			row.pop('', None)

			#Block charge
			Field 		= 'Charge'
			Required 	= validateScheduleRequired(Field,row)
			if Required:
				return Required

			CheckDecimal = validateScheduleDecimal(Field,row)
			if CheckDecimal:
				return CheckDecimal

			Charge 			= row.get(Field)
			Charge 			= float(str(Charge).replace(',',''))
			StrCharge 		= mktmoney.toMoney(Charge,CurrencyObj)
			Charge 			= float(str(StrCharge).replace(',',''))
			row.update({Field:Charge})



			# Block Add Column No
			row.update({'No':No})

			# Block Add Column ID
			ID = '%s%s'%(LoanID,No)
			row.update({'ID':ID})

			# Block Validate Column Principal
			Field 		= 'Principal'
			Required 	= validateScheduleRequired(Field,row)
			if Required:
				return Required

			CheckDecimal = validateScheduleDecimal(Field,row)
			if CheckDecimal:
				return CheckDecimal

			Principal 		= row.get(Field)
			Principal 		= float(str(Principal).replace(',',''))
			StrPrincipal 	= mktmoney.toMoney(Principal,CurrencyObj)
			Principal 		= float(str(StrPrincipal).replace(',',''))
			TotalPrincipal += Principal
			row.update({Field:Principal})

			BalOfInstallment -= Decimal(Principal)
			row.update({'Balance':mktmoney.toMoney(float(BalOfInstallment),CurrencyObj).replace(',','')})

			# Block Validate Column Collection Date
			Field = 'CollectionDate'
			Required 	= validateScheduleRequired(Field,row)
			if Required:
				return Required
			FormatDate 	= validateScheduleDate(Field,row)
			if FormatDate:
				return FormatDate

			CollectionDate = row.get(Field)
			ListCollectionDate.append(CollectionDate)
			CollectionDate = mktdate.getDateISO(CollectionDate)
			if CollectionDate >= BankDate:
				TotalOutstanding +=Principal
			
			if CollectionDate <= BankDate:
				return [(Field,"Row:%s, %s Collection date must be bigger than bank date."%(Index,CollectionDate))]

			# Block Validate Column Interest
			Field 		= 'Interest'
			Required 	= validateScheduleRequired(Field,row)
			if Required:
				return Required

			CheckDecimal = validateScheduleDecimal(Field,row)
			if CheckDecimal:
				return CheckDecimal

			Interest 		= row.get(Field)
			Interest 		= float(str(Interest).replace(',',''))
			StrInterest 	= mktmoney.toMoney(Interest,CurrencyObj)
			Interest 		= float(str(StrInterest).replace(',',''))
			row.update({Field:Interest})
			TotalInterest += Interest

			# Block Validate Column Balance
			Field 		= 'Balance'
			Required 	= validateScheduleRequired(Field,row)
			if Required:
				return Required

			CheckDecimal = validateScheduleDecimal(Field,row)
			if CheckDecimal:
				return CheckDecimal

			Balance 		= row.get(Field)
			Balance 		= float(str(Balance).replace(',',''))
			StrBalance 		= mktmoney.toMoney(Balance,CurrencyObj)
			Balance 		= float(str(StrBalance).replace(',',''))
			row.update({Field:Balance})

			if No == 1:
				if CollectionDate > BankDate:

					CheckBalance = float(LoanBalance) - Principal
					CheckBalance = Decimal(str(CheckBalance))
					Balance = Decimal(str(Balance))
					
					if CheckBalance != Balance:
						return [(Field,"Row:%s, Incorrect installment loan balance."%Index)]


			# Block Validate Column NumDay
			Field 		= 'NumDay'
			Required 	= validateScheduleRequired(Field,row)
			if Required:
				return Required

			CheckInteger = validateScheduleInteger(Field,row)
			if CheckInteger:
				return CheckInteger

			NumDay 		= row.get(Field)
			NumDay 		= int(str(NumDay).replace(',',''))
			row.update({Field:NumDay})

		

			# Block Validate Column NumDay
			Field 		= 'RepStatus'
			Required 	= validateScheduleRequired(Field,row)
			if Required:
				return Required

			CheckInteger = validateScheduleInteger(Field,row)
			if CheckInteger:
				return CheckInteger

			RepStatus = row.get(Field)
			RepStatus = int(str(RepStatus).replace(',',''))
			if RepStatus > 4:
				return [(Field,"%s Invalid format.  Example : 0 1 2 3 4"%row.get(Field))]

			if CollectionDate < BankDate :
				if RepStatus < 0 :
					return [(Field,"Collection date less than bank date and must be in status 1 2 3 4.")]

			row.update({Field:RepStatus})

			# Block Validate Column PartPaidAmt
			Field 		= 'PartPaidAmt'
			Required 	= validateScheduleRequired(Field,row)
			if Required:
				return Required

			CheckDecimal = validateScheduleDecimal(Field,row)
			if CheckDecimal:
				return CheckDecimal

			PartPaidAmt = row.get(Field)
			PartPaidAmt = float(str(PartPaidAmt).replace(',',''))
			StrPartPaidAmt = mktmoney.toMoney(PartPaidAmt,CurrencyObj)
			PartPaidAmt = float(str(StrPartPaidAmt).replace(',',''))

			row.update({Field:PartPaidAmt})


			# Pop index
			row.pop('Index')
			# Insert to table
			mktdb.insertTable(MKT_REP_SCHEDULE_INAU, row)

			TotalAmount = Interest + Principal + Charge
			TotalAmount = mktmoney.toMoney(TotalAmount,CurrencyObj)

			Schedule.append({
					'InstallmentNo':No,
					'FormatCollectionDate':str(CollectionDate),
					'Principal':StrPrincipal,
					'Interest':StrInterest,
					'Charge':StrCharge,
					'TotalAmount':str(TotalAmount),
					'Balance':StrBalance,
					'NumberOfDay':NumDay
				})

			No +=1

		# Check Duplicate loan
		DuplicateCollection   = [x for x in ListCollectionDate if ListCollectionDate.count(x) > 1]
		if DuplicateCollection:
			return [("CollectionDate","%s duplicate collection date."%DuplicateCollection)]

		# Validate Collection date must be have one repay bigger than bank date
		MoreThanBankDate = False
		for row in ListCollectionDate:
			CollectionDate = mktdate.getDateISO(row)
			if CollectionDate > BankDate:
				MoreThanBankDate = True

		if not MoreThanBankDate:
			return  [("CollectionDate","must be have one repay bigger than bank date.")]

		# Check Principal
		"""
			Fix rounding
		"""
		TotalPrincipal 		= Decimal(str(TotalPrincipal))
		TotalOutstanding 	= Decimal(str(TotalOutstanding))

		if not Amend:
			if TotalPrincipal < Disbursed:
				Field 	= 'Principal'
				Message = 'Total principal collection less than disbursment amount.'
				return [(Field,Message)]

		if TotalOutstanding < OutstandingAmount:
			Field 	= 'Principal'
			Message = 'Total principal collection less than outstanding amount.'
			return [(Field,Message)]

		if TotalOutstanding > OutstandingAmount:
			Field 	= 'Principal'
			Message = 'Total principal collection more than outstanding amount.'
			return [(Field,Message)]

		if Balance != 0 :
			Field 	= 'Balance'
			Message = 'The Last repayment of loan balance must be zero.'
			return [(Field,Message)]

		mktdb.updateRecord(MKT_LOAN_CONTRACT_INAU, 
							[MKT_LOAN_CONTRACT_INAU.ID==ContractID],
							{	"MaturityDate":str(CollectionDate),
								"TotalInterest":TotalInterest
							})

		if Amendment == "No":
			Installment = No-1
			LoanCharge  = mktcharge.updateLoanCharge(ContractID, Installment, LoanObj.Disbursed, Currency, 'INAU')
			if LoanCharge[0] == False:
				error_msg = LoanCharge[1]
				ListError.append(['LoanCharge', error_msg])

		mktdb.deleteRecord(MKT_SCHED_DEFINE_INAU, [MKT_SCHED_DEFINE_INAU.ID == ContractID])
		mktdb.deleteRecord(MKT_SCHED_MANUAL, [MKT_SCHED_MANUAL.LoanID == ContractID])

		db.session.commit()

		# return True,"Done"
		return ListError,Schedule
	except Exception, e:
		raise
		return [("File Upload","Internal problem %s"%e)]

		raise
	else:
		pass
	finally:
		pass

def setIndexDict(Dict):
	ListRecord = []
	Index = 2
	for row in Dict:
		row.update({'Index':Index})
		ListRecord.append(row)
		Index+=1
	return ListRecord

def validateScheduleRequired(Field,Dict):
	Index 		= Dict.get('Index')
	FieldValue 	= Dict.get(Field)
	if not FieldValue:
		Message = 'Row: %s, The field is required.'%Index
		return [(Field,Message)]

def validateScheduleInteger(Field,Dict):
	Index 		= Dict.get('Index')
	FieldValue 	= Dict.get(Field)
	if not mkttool.isInteger(FieldValue):
		Message = "Row: %s, %s Invalid format no decimal places."%(Index,FieldValue)
		return [(Field,Message)]

def validateScheduleDecimal(Field,Dict):
	Index 		= Dict.get('Index')
	FieldValue 	= Dict.get(Field)
	if not mkttool.isFloat(FieldValue):
		Message = "Row: %s, %s Invalid format allow only numberic."%(Index,FieldValue)
		return [(Field,Message)]

def validateScheduleDate(Field,Dict):
	Index 		= Dict.get('Index')
	FieldValue 	= Dict.get(Field)
	if not mktdate.isDate(FieldValue):
		Message = 'Row: %s, %s Invalid format YYYY-MM-DD.'%(Index,FieldValue)
		return [(Field,Message)]

def customize_FirstFinance(Contract, Flag = False):
	""" First Finance Customization
		1. Remove Flat and IRR option from Repayment Mode
		2. Auto complete payment mode from Loan Application.
			If Balloon payment mode, it will set payment mode to equal declining
			and set FrequencyP to equal Term in Loan Contract
		3. Set Default value in Based Date Key to First Date

		Args:
			Contract (sqlalchemyobject): loan contract sqlalchemy object
			Flag (boolean): set value to True to allow customization

		Return
			Result 	(tuple): tuple result
	"""

	FF_CUSTOMIZE 		= Flag
	BALLOON_MODE 		= '3'
	DECLINING_MODE 		= '1'

	PaymentDict 		= {}
	LoanAppPaymentMode 	= ""
	RepaymentMode 		= ""
	DefaultBasedDateKey = ""
	BaseDateKey 		= ""
	FrequencyP 			= 1

	if FF_CUSTOMIZE:
		# 1. Remove Flat and IRR option from Repayment Mode
		SchedPaymentMode = mktsetting.getAppSetting("SCHED_DEFINE_PAYMENT_MODE")
		PaymentDict		 = {}
		for line in SchedPaymentMode.splitlines():
			option = line.split("*")
			PaymentDict.update({str(option[0]):str(option[1])})

		# 2. Auto complete payment mode from Loan Application
		if Contract:
			LoanApplicationID 	= Contract.LoanApplicationID
			LoanAppObj 			= MKT_LOAN_APPLICATION.query.get(LoanApplicationID)
			LoanAppPaymentMode	= ""
			if LoanAppObj:
				LoanAppPaymentMode = LoanAppObj.RepaymentMode
				# if repayment mode is Balloon (3), set value to Declining (1)
				if LoanAppPaymentMode 	== BALLOON_MODE:
					LoanAppPaymentMode 	= DECLINING_MODE
					FrequencyP 			= int(Contract.Term)
				RepaymentMode 		= LoanAppPaymentMode

		# 3. Set Default value in of filed Based Date Key to First
		DefaultBasedDateKey = mktsetting.getAppSetting("SCHED_DEFINE_BASED_DATE_KEY")
		BaseDateKey 		= DefaultBasedDateKey

		Result = (PaymentDict,LoanAppPaymentMode,RepaymentMode,DefaultBasedDateKey,BaseDateKey,FrequencyP)

		return Result
#2018-07-13 payment-holiday
def validateNumOfHoliday(NumOfHolidayInstallment="",MaxHolidayInstallment=""):
	ListError =None
	PaymentHoliday 			= 	int(request.form['PaymentHoliday']) if request.form['PaymentHoliday'] else ''
	# PaymentHoliday =0 or None
	if int(PaymentHoliday)!=0:
		if NumOfHolidayInstallment and MaxHolidayInstallment:
			if int(NumOfHolidayInstallment)>int(MaxHolidayInstallment) :
				ListError=['#Of Holiday Installment ','Holiday installment could not over 6 installments']
	return ListError

def validateWaive(PaymentHoliday,WaiveInterest):
	ListError =None
	if int(PaymentHoliday)!=0:
		if int(PaymentHoliday)==2 and WaiveInterest=="Y":
			#interest only
			ListError=["Waive Interest","Waive interest must be no"]
		elif int(PaymentHoliday)==3 and WaiveInterest =="N":
			ListError=["Waive Interest","Waive interest must be yes"]
	return ListError
#end


def getNumDayFirstInst(ContractID,ValueDate,FirstCollectionDate):
	""" 
		Update Num of Day for Loan Amendment
		* Num of Day = one previous installment before amend date - Installment Date of first row from define schedule
			* Where:
				+ Installment Date of first row of define schedule is the first row of repayment schedule exclude paid status
				+ one previous installment before amend date: one installment date before amendment date. 
				Amendment Date now is also a Value Date
		Requirement:
			@ContractID : Loan Contract ID
			@ValueDate  : In Loan amendment, Amendment date is also a value date
			@FirstCollectionDate 	: the first collection date from schedule define.
	"""

	NumDayFirstInst = 0

	AmtDate 	  	= datetime.strptime(ValueDate,'%Y-%m-%d').date() # convert to formate date from string

	SchedAmendObj 	= MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==ContractID)\
										  .filter(MKT_REP_SCHEDULE.CollectionDate<=str(AmtDate))\
										  .order_by(MKT_REP_SCHEDULE.No.desc())\
										  .first()
	if SchedAmendObj:

		ColDateSchedule 	= datetime.strptime(SchedAmendObj.CollectionDate,'%Y-%m-%d').date()

		ColDateScheduleAmt = datetime.strptime(FirstCollectionDate,'%Y-%m-%d').date()

		NumDayFirstInst 	= ColDateScheduleAmt - ColDateSchedule
		NumDayFirstInst 	= int(NumDayFirstInst.days)
	return int(NumDayFirstInst)

def AddDataToList(TotalAmount, Principal, Interest, Total, NumDay, Charge=0):
	return { 
			"TotPrincipal":float(TotalAmount["TotPrincipal"])+float(Principal),
			"TotInterest":float(TotalAmount["TotInterest"])+float(Interest),
			"Total":float(TotalAmount["Total"])+float(Total),
			"TotNumDay":float(TotalAmount["TotNumDay"])+float(NumDay),
			"TotCharge":float(TotalAmount["TotCharge"])+float(Charge)
			}

def setAttributeScheduleDefine(Resource='',AmtID='',Amendment='',FrequencyP='',FrequencyI='',AnnuityAmount='',FwdBwdKey='',RepMode='',
								FirstInstallmentDate='',BaseDateKey='1',PaymentHoliday='',NumOfHolidayInstallment='0',
								WaiveInterest='',OptSave='',DefaultAnnuityAmount=0):
	setattr(FRM_SCHED_DEFINE, "PrincipalFreq", 	TextField("Principal Frequency",default=FrequencyP,validators=[validators.Required()]))
	setattr(FRM_SCHED_DEFINE, "InterestFreq", 	TextField("Interest Frequency",default=FrequencyI,validators=[validators.Required()]))
	setattr(FRM_SCHED_DEFINE, 'FwdBwdKey',	SelectField(requiredlabel("Fwd/Bwd Key", "*"),
							choices=[('0', '0. No Holiday'),
									 ('1', '1. Backward within month'),
									 ('2', '2. Forward within month'),
									 ('3', '3. Backward'),
									 ('4', '4. Forward')],
							coerce=str,
							default=FwdBwdKey,
							validators=[validators.Required()]
						))
	setattr(FRM_SCHED_DEFINE, 'RepMode' , SelectField(requiredlabel("Repayment Mode", "*"),
							choices=[('1', 'Declining'),
									 ('2', 'Annuity'),
									 ('3', 'Flat'),
									 ('4','IRR')],
							coerce=str,
							default=RepMode,
							validators=[validators.Required()]
						))
	
	setattr(FRM_SCHED_DEFINE,'FirstInstallmentDate',DateField("First Installment Date",format='%Y-%m-%d', validators=(validators.Optional(),) , default=FirstInstallmentDate))
	setattr(FRM_SCHED_DEFINE,'BaseDateKey',	SelectField('Base Date Key',
									choices=[('', '--None--'),
											 ('1', '1. Value Date'),
											 ('2', '2. Previous Date'),
											 ('3', '3. First Date')],
									coerce=str,
									default=BaseDateKey
								))
	setattr(FRM_SCHED_DEFINE, 'PaymentHoliday',	SelectField('Payment Holiday',
									choices=[('0', '--None--'),
											 ('1', '1. Principal Only'),
											 ('2', '2. Interest Only'),
											 ('3', '3. Both Principal+Interest'),
											 ('4', '4. Principal Only - Fix Annuity Amount')],
									coerce=str,
									default=PaymentHoliday
								))
	setattr(FRM_SCHED_DEFINE,'NumOfHolidayInstallment' , 	TextField("#Of Holiday Installment",default=NumOfHolidayInstallment))
	setattr(FRM_SCHED_DEFINE,'WaiveInterest', 	SelectField('Waive Interest',
									choices=[('', '--None--'),
											 ('N', 'No'),
											 ('Y', 'Yes')],
									coerce=str,
									default=WaiveInterest
								))
	setattr(FRM_SCHED_DEFINE,'OptSave',TextField("Opt Save" , default=OptSave))
	setattr(FRM_SCHED_DEFINE, "Resource", 	TextField("Resource",default=Resource))
	setattr(FRM_SCHED_DEFINE, "AmtID", 		TextField("AmtID",default=AmtID))
	setattr(FRM_SCHED_DEFINE, "AnnuityAmount", 		TextField("Annuity Amount",default=AnnuityAmount))
	setattr(FRM_SCHED_DEFINE, "Amendment", 	TextField("Amendment",default=Amendment))
	setattr(FRM_SCHED_DEFINE, "DefaultAnnuityAmount", 	TextField("DefaultAnnuityAmount",default=DefaultAnnuityAmount))
	return True

def SetConfirmIRR(LoanID):

	LoanObj = MKT_LOAN_CONTRACT_INAU.query.get(LoanID)
	if not LoanObj:
		LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	LoanID 	= LoanObj.ID,
	Amount 	= LoanObj.Amount,
	Disbursed 	= float(LoanObj.Disbursed)
	LoanType 	= LoanObj.LoanType
	Interest 	= float(LoanObj.InterestRate)
	Frequency 	= float(LoanObj.Frequency)
	FreqType 	= float(LoanObj.FreqType)
	Installment = float(LoanObj.Installment)
	IRR =  mktreschedule.getIRR(Disbursed,Interest,FreqType,Installment,Frequency)
	if LoanObj.IRR:
		OldIRR = float(LoanObj.IRR)
		OldIRR = float(mktmoney.formatNumber(OldIRR,1,2).replace(',',''))
		NewIRR = float(mktmoney.formatNumber(IRR[0],1,2).replace(',',''))
		if OldIRR!= NewIRR:
			return True,'IRR is changed from (%s) to (%s)' %(LoanObj.IRR, IRR[0])
	return False, ' '

registerCRUD(admin, '/ScheduleDefine', 'ScheduleDefine',FRM_SCHED_DEFINE, [MKT_SCHED_DEFINE],template="schedule/define.html",form_type='Custom',custom_form_data=CLS_ScheduleDefine)
