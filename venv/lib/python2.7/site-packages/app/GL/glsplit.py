from app.mktcore.wtfimports     import *
from app.mktcore.imports        import *
from decimal                    import *
from .models                    import *
from app.Currency.models        import MKT_CURRENCY
from app.Category.models        import MKT_CATEGORY 
from app.Transaction.models     import MKT_TRANSACTION
from app.ConsolBalance.models   import MKT_CONSOL_BALANCE
import app.tools.mktaccounting  as mktaccounting
import app.tools.mktdate        as mktdate
import app.tools.mktgl          as mktgl
import app.tools.user           as user

def loadTransaction():
    return MKT_TRANSACTION.query

def loadCategory():
    return MKT_CATEGORY.query

def loadCurrency():
    return MKT_CURRENCY.query

def loadCurrentDate():
    return  mktdate.getBankDate()

def getConsolBalanceObj(ID='', Branch=''):
    ConsolObj   =   MKT_CONSOL_BALANCE.query.\
                    filter(MKT_CONSOL_BALANCE.ID == ID).\
                    filter(MKT_CONSOL_BALANCE.Branch == Branch).\
                    first()
    return ConsolObj

class FRM_GL_SPLIT(exform):

    FromCategory    =   QuerySelectField(requiredlabel('From Category', "*"),
                            query_factory=loadCategory,
                            get_label=lambda a: a.ID + " - " + a.Description,
                            allow_blank=True,
                            blank_text=u'--None--',
                            validators=[validators.Required()])

    ToCategory  =   QuerySelectField(requiredlabel('To Category', "*"),
                        query_factory=loadCategory,
                        get_label=lambda a: a.ID + " - " + a.Description,
                        allow_blank=True,
                        blank_text=u'--None--',
                        validators=[validators.Required()])
    
    Currency    =   QuerySelectField(requiredlabel('Currency', '*'),
                        query_factory=loadCurrency,
                        get_label=u'ID',
                        allow_blank=True,
                        blank_text=u'--None--',
                        validators=[validators.Required()])

    Transaction =   QuerySelectField(requiredlabel('Transaction', '*'),
                        query_factory=loadTransaction,
                        get_label=lambda a: a.ID + " - " + a.Description,
                        allow_blank=True,
                        blank_text=u'--None--',
                        validators=[validators.Required()])

    TranDate    =   DateField(requiredlabel("Transaction Date", "*"), [validators.Required()], default=loadCurrentDate)
    Reference   =   TextField("Reference", [validators.Length(max=35)])
    Note        =   TextField("Note", [validators.Length(max=50)])

    CurrentMonthBal         =   TextField("Current Month",          description="1-FCY Balance", default=0)
    CurrentPrevMonthBal     =   TextField("Current Previous Month", description="1-FCY Balance", default=0)
    PrevMonthBal            =   TextField("Previous Month",         description="1-FCY Balance", default=0)
    YTDBal                  =   TextField("Year to Date",           description="1-FCY Balance", default=0)
    CurrentPrevYearBal      =   TextField("Current Previous Year",  description="1-FCY Balance", default=0)
    PrevYearBal             =   TextField("Previous Year",          description="1-FCY Balance", default=0)
    Balance                 =   TextField("Balance",                description="1-FCY Balance", default=0)

    LCYCurrentMonthBal      =   TextField("Current Month",          description="2-LCY Balance", default=0)
    LCYCurrentPrevMonthBal  =   TextField("Current Previous Month", description="2-LCY Balance", default=0)
    LCYPrevMonthBal         =   TextField("Previous Month",         description="2-LCY Balance", default=0)
    LCYYTDBal               =   TextField("Year to Date",           description="2-LCY Balance", default=0)
    LCYCurrentPrevYearBal   =   TextField("Current Previous Year",  description="2-LCY Balance", default=0)
    LCYPrevYearBal          =   TextField("Previous Year",          description="2-LCY Balance", default=0)
    LCYBalance              =   TextField("Balance",                description="2-LCY Balance", default=0)

    def validate_ToCategory(Form, Field):
        FromCategory   =   Form.FromCategory.data.ID if Form.FromCategory.data else ''
        ToCategory     =   Form.ToCategory.data.ID if Form.ToCategory.data else ''

        if FromCategory == ToCategory:
            raise ValidationError("From Category and To Category cannot the same.")

    @staticmethod
    def formReadOnly():
        return "AUTH"

    @staticmethod
    def hotField():
        hotfield = []

        fielddisplay    =  "$('#PrevMonthBal').val(data.PrevMonthBal); $('#CurrentPrevMonthBal').val(data.CurrentPrevMonthBal);"
        fielddisplay    += "$('#CurrentMonthBal').val(data.CurrentMonthBal); $('#PrevYearBal').val(data.PrevYearBal);"
        fielddisplay    += "$('#CurrentPrevYearBal').val(data.CurrentPrevYearBal);"
        fielddisplay    += "$('#YTDBal').val(data.YTDBal); $('#Balance').val(data.Balance);"

        fielddisplay    += "$('#LCYPrevMonthBal').val(data.LCYPrevMonthBal);"
        fielddisplay    += "$('#LCYCurrentPrevMonthBal').val(data.LCYCurrentPrevMonthBal);"
        fielddisplay    += "$('#LCYCurrentMonthBal').val(data.LCYCurrentMonthBal); $('#LCYPrevYearBal').val(data.LCYPrevYearBal);"
        fielddisplay    += "$('#LCYCurrentPrevYearBal').val(data.LCYCurrentPrevYearBal);"
        fielddisplay    += "$('#LCYYTDBal').val(data.LCYYTDBal); $('#LCYBalance').val(data.LCYBalance);"
        
        varname         = "Currency:$('#Currency').val(),FromCategory:$('#FromCategory').val()"
        fun1            = ["Currency", varname, fielddisplay, "/Morakot/GLSplitBalance", "change"]
        fun2            = ["FromCategory", varname, fielddisplay, "/Morakot/GLSplitBalance", "change"]
        hotfield.append(fun1)
        hotfield.append(fun2)

        return hotfield

    @staticmethod
    def beforeInsert():

        NumOfAuth       =   g.getNAuthorize
        
        if NumOfAuth == 0:
            ID              =   request.form['ID']
            FromCategory    =   request.form['FromCategory']
            ToCategory      =   request.form['ToCategory']
            Currency        =   request.form['Currency']
            Dic =   {
                'LCYPrevMonthBal'         :   Decimal(request.form['LCYPrevMonthBal'].replace(',', '')),   
                'LCYCurrentPrevMonthBal'  :   Decimal(request.form['LCYCurrentPrevMonthBal'].replace(',', '')),   
                'LCYCurrentMonthBal'      :   Decimal(request.form['LCYCurrentMonthBal'].replace(',', '')),   
                'LCYPrevYearBal'          :   Decimal(request.form['LCYPrevYearBal'].replace(',', '')),   
                'LCYCurrentPrevYearBal'   :   Decimal(request.form['LCYCurrentPrevYearBal'].replace(',', '')),   
                'LCYYTDBal'               :   Decimal(request.form['LCYYTDBal'].replace(',', '')),   
                'LCYBalance'              :   Decimal(request.form['LCYBalance'].replace(',', '')),   

                'PrevMonthBal'            :   Decimal(request.form['PrevMonthBal'].replace(',', '')),   
                'CurrentPrevMonthBal'     :   Decimal(request.form['CurrentPrevMonthBal'].replace(',', '')),   
                'CurrentMonthBal'         :   Decimal(request.form['CurrentMonthBal'].replace(',', '')),   
                'PrevYearBal'             :   Decimal(request.form['PrevYearBal'].replace(',', '')),   
                'CurrentPrevYearBal'      :   Decimal(request.form['CurrentPrevYearBal'].replace(',', '')),   
                'YTDBal'                  :   Decimal(request.form['YTDBal'].replace(',', '')),   
                'Balance'                 :   Decimal(request.form['Balance'].replace(',', ''))   
            }
            return updateConsolRecord(FromCategory, ToCategory, Currency, Dic)
            
        return True

    @staticmethod
    def beforeAuthorize():
        ID          =   g.formID
        GLSplitObj  =   MKT_GL_SPLIT_INAU.query.get(ID)
        Audit       =   mktaudit.getAuditrail()
        Inputter    =   GLSplitObj.Inputter
        Authorizer  =   Audit['Authorizer']
        
        # Cannot authorize by urseft
        if Inputter != Authorizer:
            if GLSplitObj:
                FromCategory    =   GLSplitObj.FromCategory
                ToCategory      =   GLSplitObj.ToCategory
                Currency        =   GLSplitObj.Currency
                Dic             =   {
                                        'LCYPrevMonthBal'         :   GLSplitObj.LCYPrevMonthBal,   
                                        'LCYCurrentPrevMonthBal'  :   GLSplitObj.LCYCurrentPrevMonthBal,   
                                        'LCYCurrentMonthBal'      :   GLSplitObj.LCYCurrentMonthBal,   
                                        'LCYPrevYearBal'          :   GLSplitObj.LCYPrevYearBal,   
                                        'LCYCurrentPrevYearBal'   :   GLSplitObj.LCYCurrentPrevYearBal,   
                                        'LCYYTDBal'               :   GLSplitObj.LCYYTDBal,   
                                        'LCYBalance'              :   GLSplitObj.LCYBalance,   

                                        'PrevMonthBal'            :   GLSplitObj.PrevMonthBal,   
                                        'CurrentPrevMonthBal'     :   GLSplitObj.CurrentPrevMonthBal,   
                                        'CurrentMonthBal'         :   GLSplitObj.CurrentMonthBal,   
                                        'PrevYearBal'             :   GLSplitObj.PrevYearBal,   
                                        'CurrentPrevYearBal'      :   GLSplitObj.CurrentPrevYearBal,   
                                        'YTDBal'                  :   GLSplitObj.YTDBal,   
                                        'Balance'                 :   GLSplitObj.Balance   
                                    }

                if GLSplitObj.Status == "INAU":
                    return updateConsolRecord(FromCategory, ToCategory, Currency, Dic)

                elif TableObj.Status == "RNAU":
                    return updateConsolRecord(FromCategory, ToCategory, Currency, Dic, IsReverse=True)

        return False

    @staticmethod
    def reverseRec():
        ID          =   g.formID
        NumOfAuth   =   g.getNAuthorize
        if NumOfAuth == 0:
            GLSplitObj  =   MKT_GL_SPLIT.query.get(ID)
            if GLSplitObj:
                FromCategory    =   GLSplitObj.FromCategory
                ToCategory      =   GLSplitObj.ToCategory
                Currency        =   GLSplitObj.Currency
                Dic             =   {
                                        'LCYPrevMonthBal'         :   GLSplitObj.LCYPrevMonthBal,   
                                        'LCYCurrentPrevMonthBal'  :   GLSplitObj.LCYCurrentPrevMonthBal,   
                                        'LCYCurrentMonthBal'      :   GLSplitObj.LCYCurrentMonthBal,   
                                        'LCYPrevYearBal'          :   GLSplitObj.LCYPrevYearBal,   
                                        'LCYCurrentPrevYearBal'   :   GLSplitObj.LCYCurrentPrevYearBal,   
                                        'LCYYTDBal'               :   GLSplitObj.LCYYTDBal,   
                                        'LCYBalance'              :   GLSplitObj.LCYBalance,   

                                        'PrevMonthBal'            :   GLSplitObj.PrevMonthBal,   
                                        'CurrentPrevMonthBal'     :   GLSplitObj.CurrentPrevMonthBal,   
                                        'CurrentMonthBal'         :   GLSplitObj.CurrentMonthBal,   
                                        'PrevYearBal'             :   GLSplitObj.PrevYearBal,   
                                        'CurrentPrevYearBal'      :   GLSplitObj.CurrentPrevYearBal,   
                                        'YTDBal'                  :   GLSplitObj.YTDBal,   
                                        'Balance'                 :   GLSplitObj.Balance   
                                    }

                return updateConsolRecord(FromCategory, ToCategory, Currency, Dic, IsReverse=True),''

        return True ,''
    
@app.route("/Morakot/GLSplitBalance", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getGLSplitBalance():

    FromCategory    =   request.args.get('FromCategory')
    Currency        =   request.args.get('Currency')
    Branch          =   user.getCurrentBranch()
    ConsolID        =   mktaccounting.getConsolKey(FromCategory,Currency)
    ConsolObj       =   getConsolBalanceObj(ID=ConsolID, Branch=Branch)

    return jsonify(
        LCYPrevMonthBal         =   str(ConsolObj.LCYPrevMonthBal)        if ConsolObj else 0,   
        LCYCurrentPrevMonthBal  =   str(ConsolObj.LCYCurrentPrevMonthBal) if ConsolObj else 0,   
        LCYCurrentMonthBal      =   str(ConsolObj.LCYCurrentMonthBal)     if ConsolObj else 0,   
        LCYPrevYearBal          =   str(ConsolObj.LCYPrevYearBal)         if ConsolObj else 0,   
        LCYCurrentPrevYearBal   =   str(ConsolObj.LCYCurrentPrevYearBal)  if ConsolObj else 0,   
        LCYYTDBal               =   str(ConsolObj.LCYYTDBal)              if ConsolObj else 0,   
        LCYBalance              =   str(ConsolObj.LCYBalance)             if ConsolObj else 0,   

        PrevMonthBal            =   str(ConsolObj.PrevMonthBal)           if ConsolObj else 0,   
        CurrentPrevMonthBal     =   str(ConsolObj.CurrentPrevMonthBal)    if ConsolObj else 0,   
        CurrentMonthBal         =   str(ConsolObj.CurrentMonthBal)        if ConsolObj else 0,   
        PrevYearBal             =   str(ConsolObj.PrevYearBal)            if ConsolObj else 0,   
        CurrentPrevYearBal      =   str(ConsolObj.CurrentPrevYearBal)     if ConsolObj else 0,   
        YTDBal                  =   str(ConsolObj.YTDBal)                 if ConsolObj else 0,   
        Balance                 =   str(ConsolObj.Balance)                if ConsolObj else 0 
        )

def updateConsolRecord(FromCategory, ToCategory, Currency, NewAmountDic, IsReverse=False):
    try:
        Branch          =   user.getCurrentBranch()

        FromConsolID    =   mktaccounting.getConsolKey(FromCategory,Currency)
        FromConsolObj   =   getConsolBalanceObj(ID=FromConsolID, Branch=Branch)
        
        ToConsolID      =   mktaccounting.getConsolKey(ToCategory,Currency)
        ToConsolObj     =   getConsolBalanceObj(ID=ToConsolID, Branch=Branch)
        
        Operator        =   -1 if IsReverse else 1 # use to reverse balance sign

        if FromConsolObj:
            FromConsolObj.LCYPrevMonthBal        -=   Operator * NewAmountDic['LCYPrevMonthBal']
            FromConsolObj.LCYCurrentPrevMonthBal -=   Operator * NewAmountDic['LCYCurrentPrevMonthBal']
            FromConsolObj.LCYCurrentMonthBal     -=   Operator * NewAmountDic['LCYCurrentMonthBal']
            FromConsolObj.LCYPrevYearBal         -=   Operator * NewAmountDic['LCYPrevYearBal']
            FromConsolObj.LCYCurrentPrevYearBal  -=   Operator * NewAmountDic['LCYCurrentPrevYearBal']
            FromConsolObj.LCYYTDBal              -=   Operator * NewAmountDic['LCYYTDBal']
            FromConsolObj.LCYBalance             -=   Operator * NewAmountDic['LCYBalance']

            FromConsolObj.PrevMonthBal           -=   Operator * NewAmountDic['PrevMonthBal']
            FromConsolObj.CurrentPrevMonthBal    -=   Operator * NewAmountDic['CurrentPrevMonthBal']
            FromConsolObj.CurrentMonthBal        -=   Operator * NewAmountDic['CurrentMonthBal']
            FromConsolObj.PrevYearBal            -=   Operator * NewAmountDic['PrevYearBal']
            FromConsolObj.CurrentPrevYearBal     -=   Operator * NewAmountDic['CurrentPrevYearBal']
            FromConsolObj.YTDBal                 -=   Operator * NewAmountDic['YTDBal']
            FromConsolObj.Balance                -=   Operator * NewAmountDic['Balance']

            db.session.add(FromConsolObj)
            # create new consol object if consol object not found
            if not ToConsolObj:
                ToConsolObj  =   mktgl.getNewConsoleBalance(ToConsolID, Branch, Currency)

            ToConsolObj.LCYPrevMonthBal          +=   Operator * NewAmountDic['LCYPrevMonthBal']
            ToConsolObj.LCYCurrentPrevMonthBal   +=   Operator * NewAmountDic['LCYCurrentPrevMonthBal']
            ToConsolObj.LCYCurrentMonthBal       +=   Operator * NewAmountDic['LCYCurrentMonthBal']
            ToConsolObj.LCYPrevYearBal           +=   Operator * NewAmountDic['LCYPrevYearBal']
            ToConsolObj.LCYCurrentPrevYearBal    +=   Operator * NewAmountDic['LCYCurrentPrevYearBal']
            ToConsolObj.LCYYTDBal                +=   Operator * NewAmountDic['LCYYTDBal']
            ToConsolObj.LCYBalance               +=   Operator * NewAmountDic['LCYBalance']

            ToConsolObj.PrevMonthBal             +=   Operator * NewAmountDic['PrevMonthBal']
            ToConsolObj.CurrentPrevMonthBal      +=   Operator * NewAmountDic['CurrentPrevMonthBal']
            ToConsolObj.CurrentMonthBal          +=   Operator * NewAmountDic['CurrentMonthBal']
            ToConsolObj.PrevYearBal              +=   Operator * NewAmountDic['PrevYearBal']
            ToConsolObj.CurrentPrevYearBal       +=   Operator * NewAmountDic['CurrentPrevYearBal']
            ToConsolObj.YTDBal                   +=   Operator * NewAmountDic['YTDBal']
            ToConsolObj.Balance                  +=   Operator * NewAmountDic['Balance']

            db.session.add(ToConsolObj)

            return True

        return False
    except Exception, e:
        raise e
    
    
