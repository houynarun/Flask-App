from wtforms 					import DecimalField, IntegerField, TextAreaField
from app.mktcore.wtfimports 	import *
from .models 					import *
import time

import app.tools.catetool 		as mktcategory
import app.tools.mktsetting 	as mktsetting
import app.tools.mktaccounting 	as mktaccounting
import app.tools.user 			as mktuser

from app.Currency.models 		import MKT_CURRENCY
from app.GLBalance.models 		import MKT_GL_BALANCE
from app.Category.models 		import MKT_CATEGORY
from app.AssetClass.models 		import MKT_ASSET_CLASS
from sqlalchemy import not_
@app.route('/Morakot/GLCategory', methods=['GET'])
def GLCategory():
	return mktcategory.getCategoryAsSearch()

@app.route("/Morakot/GLCategoryMapping", methods=['GET'])
def mappingCategory():
	item = ""
	Category = request.args.get("GLCategory") if "GLCategory" in request.args else ""
	Currency = request.args.get("Currency") if "Currency" in request.args else ""
	AssetClass = request.args.get("AssetClass") if "AssetClass" in request.args else ""
	print "Currency",Currency
	Currency = Currency if Currency != "__None" and Currency != "null" else ""
	Category = Category if Category != "__None" and Category != "null" else ""
	AssetClass = AssetClass if AssetClass != "__None" and AssetClass != "null" else ""

	Key1 = request.args.get("Key1") if "Key1" in request.args else ""
	Key2 = request.args.get("Key2") if "Key2" in request.args else ""
	Key3 = request.args.get("Key3") if "Key3" in request.args else ""
	Key4 = request.args.get("Key4") if "Key4" in request.args else ""
	Key5 = request.args.get("Key5") if "Key5" in request.args else ""
	Key6 = request.args.get("Key6") if "Key6" in request.args else ""
	Key7 = request.args.get("Key7") if "Key7" in request.args else ""
	Key8 = request.args.get("Key8") if "Key8" in request.args else ""
	Key9 = request.args.get("Key9") if "Key9" in request.args else ""

	item = mktaccounting.getConsolKey(Category, Currency, AssetClass, "", Key1, Key2, Key3, Key4, Key5, Key6, Key7, Key8, Key9)
	if item == "...........":
		item = ""
	return jsonify(item=item)

def loadCurrency():
	return MKT_CURRENCY.query

def loadParent():
	return MKT_GL_MAPPING_DE.query

def loadCategory():
	return MKT_CATEGORY.query.order_by(MKT_CATEGORY.ID.asc())

def loadAssetClass():
	AssetClassObj = MKT_ASSET_CLASS.query.filter(not_(MKT_ASSET_CLASS.ID.contains('-'))).\
											order_by(MKT_ASSET_CLASS.ID.asc()).all()

	return AssetClassObj

def checkSubGL(ID="", Cate=""):
	try:
		GL = MKT_GL_MAPPING.query.get(ID)
		if GL:
			if GL.BalanceType != Cate:
				return [True, False]
			else:
				return [True, True]
		else:
			return [False, True]

	except:
		raise

class FRM_GL_MAPPING_DE(exform):
	
	Description = TextField(requiredlabel("Description", "*"), [validators.Required(), validators.Length(max=100)])

	Currency = QuerySelectField(requiredlabel('Currency', '*'),
                        query_factory=loadCurrency,
                        get_label=u'ID',
                        allow_blank=True,
                        blank_text=u'--None--',
                        validators=[validators.Required()])

	BalanceType = SelectField(requiredlabel("Balance Type", "*"),
						choices=[('','--None--'),('Dr', 'Debit'), ('Cr', 'Credit')],
						validators=[validators.Required()]
				  )

	SubGL = TextField("Sub GL")

	GLCategory = QuerySelectField('Category',
                        query_factory=loadCategory,
                        get_label=lambda a: a.ID + " - " + a.Description,
                        allow_blank=True,
                        blank_text=u'--None--',
                        description="1-Mapping Detail")

	CurrencyI = QuerySelectField('Currency',
                        query_factory=loadCurrency,
                        get_label=u'ID',
                        allow_blank=True,
                        blank_text=u'--None--',
                        description="1-Mapping Detail")

	AssetClass = QuerySelectField('Loan Class',
                        query_factory=loadAssetClass,
                        get_label=lambda a: a.ID + " - " + a.Description,
                        allow_blank=True,
                        blank_text=u'--None--',
                        description="1-Mapping Detail")

	try:
		SettingObj = mktsetting.getAccSetting() if mktsetting.getAccSetting() else ""
		
		if SettingObj:

			if SettingObj.GL_KEY1:
				k 	= SettingObj.GL_KEY1.split(",")
				K1 	= TextField("Key1 - " + k[1], description="1-Mapping Detail")

			if SettingObj.GL_KEY2:
				k 	= SettingObj.GL_KEY2.split(",")
				K2 	= TextField("Key2 - " + k[1], description="1-Mapping Detail")
			
			if SettingObj.GL_KEY3:
				k 	= SettingObj.GL_KEY3.split(",")
				K3 	= TextField("Key3 - " + k[1], description="1-Mapping Detail")

			if SettingObj.GL_KEY4:
				k 	= SettingObj.GL_KEY4.split(",")
				K4 	= TextField("Key4 - " + k[1], description="1-Mapping Detail")

			if SettingObj.GL_KEY5:
				k 	= SettingObj.GL_KEY5.split(",")
				K5 	= TextField("Key5 - " + k[1], description="1-Mapping Detail")

			if SettingObj.GL_KEY6:
				k 	= SettingObj.GL_KEY6.split(",")
				K6 	= TextField("Key6 - " + k[1], description="1-Mapping Detail")

			if SettingObj.GL_KEY7:
				k 	= SettingObj.GL_KEY7.split(",")
				K7 	= TextField("Key7 - " + k[1], description="1-Mapping Detail")

			if SettingObj.GL_KEY8:
				k 	= SettingObj.GL_KEY8.split(",")
				K8 	= TextField("Key8 - " + k[1], description="1-Mapping Detail")

			if SettingObj.GL_KEY9:
				k 	= SettingObj.GL_KEY9.split(",")
				K9 	= TextField("Key9 - " + k[1], description="1-Mapping Detail")
	except Exception, e:
		print '%s'%e
		
	ConsolKey = TextField("Consol Key", description="1-Mapping Detail")

	def validate_SubGL(form, field):
		try:

			sub_gl = request.form['SubGL']
			if sub_gl:

				Cate 	= request.form['BalanceType']
				Msg 	= ""
				Msg1 	= ""
				Type 	= ""
				Type1 	= ""
				sub_gl 	= str(sub_gl).split()

				for item in sub_gl:
					
					check = checkSubGL(item, Cate)
					if not check[0]:
						Msg += "Error"
						Type += str(item) + ", "

					if not check[1]:
						Msg1 += "Error"
						Type1 += str(item) + ", "

				
				if Msg:
					raise ValidationError("The sub-gl " + Type + " not found.")

				#if Msg1:
				#	raise ValidationError("The balance type for " + Type1 + "must be matched with balance type.")

		except:
			raise

	def validate_GLCategory(form, field):
		try:
			
			Cate = request.form['BalanceType']
			check = request.form['GLCategory']

			if check and check != "__None":
				checkGLCategory = []
				controls_list = request.form
				LsGLCategory = [item for item in controls_list if "GLCategory" in item]
				LsGLCategory.sort()
				TotalGLCategory = len(LsGLCategory)

				for num in range(0, TotalGLCategory):
					checkGLCategory.append(request.form[LsGLCategory[num]])

				Msg = ""
				Type = ""
				for item in checkGLCategory:
					CrDr = mktaccounting.getAccBalanceType(item)
					Type += str(item) + ", "
					if CrDr != Cate:
						Msg += "Error"

				
				if Msg:
					raise ValidationError("The category type for " + Type + "must be matched with balance type.")

		except:
			raise

	def validate_CurrencyI(form, field):
		try:

			Cur = request.form['Currency']
			check = request.form['CurrencyI']
			if check and check != "__None":
				checkCurrency = []
				controls_list = request.form
				LsCurrency = [item for item in controls_list if "CurrencyI" in item]
				LsCurrency.sort()
				TotalCurrency = len(LsCurrency)

				for num in range(0, TotalCurrency):
					checkCurrency.append(request.form[LsCurrency[num]])

				for item in checkCurrency:
					if item not in Cur:
						raise ValidationError("The currency for: %s must be matches." %request.form['ID'])

		except:
			raise

	def validate_ConsolKey(form, field):
		try:

			GL_KEYS = form.ConsolKey.data

			checkConsolKey = []
			controls_list = request.form
			GL_KEYS_LIST = [item for item in controls_list if "ConsolKey" in item]
			GL_KEYS_LIST.sort()
			TotalKEYS = len(GL_KEYS_LIST)

			for num in range(0, TotalKEYS):

				checkConsolKey.append(request.form[GL_KEYS_LIST[num]])

			Duplicated   = [item for item in checkConsolKey if checkConsolKey.count(item) > 1]
			
			if Duplicated:
				raise ValidationError("The consol key [%s] for: %s already exist." %(Duplicated[0], request.form['ID']))

		except:
			raise

	@staticmethod
	def isMultiValue():
		control_list = ["1-Mapping Detail"]

		return control_list

	@staticmethod
	def setDisable():
		control_list = [("ConsolKey")]

		return control_list

	@staticmethod
	def setWidth():
		control_list = [('Currency', len1), ('BalanceType', len1)]

		return control_list

	@staticmethod
	def hotField():
		hotfield=[]

		k1 = ",Key1:$('#K1').val()" if mktsetting.getAccSetting().GL_KEY1 else ""
		k2 = ",Key2:$('#K2').val()" if mktsetting.getAccSetting().GL_KEY2 else ""
		k3 = ",Key3:$('#K3').val()" if mktsetting.getAccSetting().GL_KEY3 else ""
		k4 = ",Key4:$('#K4').val()" if mktsetting.getAccSetting().GL_KEY4 else ""
		k5 = ",Key5:$('#K5').val()" if mktsetting.getAccSetting().GL_KEY5 else ""
		k6 = ",Key6:$('#K6').val()" if mktsetting.getAccSetting().GL_KEY6 else ""
		k7 = ",Key7:$('#K7').val()" if mktsetting.getAccSetting().GL_KEY7 else ""
		k8 = ",Key8:$('#K8').val()" if mktsetting.getAccSetting().GL_KEY8 else ""
		k9 = ",Key9:$('#K9').val()" if mktsetting.getAccSetting().GL_KEY9 else ""


		parameters = "GLCategory:$('#GLCategory').val(),Currency:$('select#CurrencyI').val(),AssetClass:$('select#AssetClass').val()"
		parameters += k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9
		value = "$('#ConsolKey').val(data.item)"

		fielddisplay=value
		varname=parameters
		fun=["GLCategory", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "change"]
		hotfield.append(fun)

		fielddisplay=value
		varname=parameters
		fun=["CurrencyI", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "change"]
		hotfield.append(fun)

		fielddisplay=value
		varname=parameters
		fun=["AssetClass", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "change"]
		hotfield.append(fun)

		fielddisplay="$('#ConsolKey').val(data.item)"
		varname=parameters
		fun=["K1", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "blur"]
		hotfield.append(fun)

		fielddisplay="$('#ConsolKey').val(data.item)"
		varname=parameters
		fun=["K2", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "blur"]
		hotfield.append(fun)

		fielddisplay="$('#ConsolKey').val(data.item)"
		varname=parameters
		fun=["K3", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "blur"]
		hotfield.append(fun)

		fielddisplay="$('#ConsolKey').val(data.item)"
		varname=parameters
		fun=["K4", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "blur"]
		hotfield.append(fun)

		fielddisplay="$('#ConsolKey').val(data.item)"
		varname=parameters
		fun=["K5", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "blur"]
		hotfield.append(fun)

		fielddisplay="$('#ConsolKey').val(data.item)"
		varname=parameters
		fun=["K6", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "blur"]
		hotfield.append(fun)

		fielddisplay="$('#ConsolKey').val(data.item)"
		varname=parameters
		fun=["K7", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "blur"]
		hotfield.append(fun)

		fielddisplay="$('#ConsolKey').val(data.item)"
		varname=parameters
		fun=["K8", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "blur"]
		hotfield.append(fun)

		fielddisplay="$('#ConsolKey').val(data.item)"
		varname=parameters
		fun=["K9", varname ,fielddisplay, "/Morakot/GLCategoryMapping", "blur"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeNewID () :
		Branch = mktuser.getCurrentBranch()

		if Branch != 'HO':
			return True, "GL Mapping can only be created in Branch HO"  # when you click new Id button, it will display warning message
		else:
			return False, ""