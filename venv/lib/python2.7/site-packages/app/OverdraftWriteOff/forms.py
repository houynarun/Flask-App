from datetime 					import datetime
from .models 					import *
from flask 						import flash
from decimal 					import Decimal
from app.mktcore.wtfimports 	import *
from app.AccProduct.models 		import *
from app.Account.models 		import *
from app.AssetClass.models 		import *
from app.OverdraftContract.models import *
import app.tools.user 			as mktuser
import app.tools.mktloan 		as mktloan
import app.tools.mktdate 		as mktdate
import app.tools.mktaudit 		as mktaudit
import app.tools.mktparam 		as mktparam
import app.tools.mktsetting 	as mktsetting
import app.tools.mktaccounting 	as mktaccounting
import app.tools.bank.mktoverdraft	as mktoverdraft

def getODWriteOffAndRecoveryDict():
	try:
		Dict = {} 
		ODWriteOffAndRecovery = mktsetting.getAppSetting('ODWriteOffAndRecovery').splitlines()
		for o in ODWriteOffAndRecovery:
			KeyValue = o.split('*')
			Dict.update({KeyValue[0]:KeyValue[1]})

		return Dict
	except Exception as e:
		raise

def getOverdraftInformation():

	if request.method == 'POST':
		ID = request.form['ID']
	else:
		ID = g.formID

	Branch 			=  	mktuser.getBranch(session["ChangeBranch"]).ID
	Dict 			= 	getODWriteOffAndRecoveryDict()
	WriteOffClass 	= 	Dict.get('WriteOffClass','')

	OCObj 	= 	MKT_OVERDRAFT_CONTRACT.query.filter(MKT_OVERDRAFT_CONTRACT.AssetClass==WriteOffClass).\
				filter(MKT_OVERDRAFT_CONTRACT.Branch==Branch).\
				filter(MKT_OVERDRAFT_CONTRACT.ID==ID).first()

	return OCObj

def loadCustomerID():
	try:
		if request.method == 'POST':
			ID = request.form['ID']
		else:
			ID = g.formID

		CustomerID	= 	""
		OCObj 		= 	getOverdraftInformation()
		if OCObj:
			CustomerID = OCObj.CustomerID
		
		return CustomerID

	except:
		raise

def loadAccount():
	try:
		Account	= 	""
		OCObj 		= 	getOverdraftInformation()
		if OCObj:
			Account = OCObj.Account
		
		return Account
	except:
		raise

def loadCurrency():
	try:
		Currency	= 	""
		OCObj 		= 	getOverdraftInformation()
		if OCObj:
			Currency = OCObj.Currency
		
		return Currency
	except:
		raise

def loadAIRAmount():
	try:
		AIRAmount	= 	""
		OCObj 		= 	getOverdraftInformation()
		if OCObj:
			AIRAmount = OCObj.AccrInterest
		
		return AIRAmount
	except:
		raise
def loadOutstandingAmount():
	try:
		Amount	= 	""
		OCObj 		= 	getOverdraftInformation()
		if OCObj:
			Amount = OCObj.OutstandingAmount
			Account = OCObj.Account
			AccountObj = MKT_ACCOUNT.query.get(Account)
			Amount = AccountObj.Balance
		
		return Amount
	except:
		raise

def loadTotWriteOffAmount():
	try:
		Amount	= 	""
		OCObj 		= 	getOverdraftInformation()
		if OCObj:
			Amount = OCObj.OutstandingAmount+OCObj.AccrInterest
			Account = OCObj.Account
			AccountObj = MKT_ACCOUNT.query.get(Account)
			Amount = AccountObj.Balance+OCObj.AccrInterest

		return Amount
	except:
		raise

def loadBankDate():
	try:
		return mktdate.getBankDate()
	except:
		raise


class FRM_OVERDRAFT_WRITE_OFF(exform):
	CustomerID 			= 	TextField(requiredlabel("Customer ID", "*"), [validators.Required()],default=loadCustomerID)
	Account				= 	TextField(requiredlabel("Account", "*"), [validators.Required()],default=loadAccount)
	Currency 			=	TextField(requiredlabel("Currency", "*"), [validators.Required()],default=loadCurrency)
	TranDate			=	TextField(requiredlabel("Transation Date", "*"), [validators.Required()],default=loadBankDate)
	AIRAmount 			=	TextField(requiredlabel("AIR Amount", "*"), [validators.Required()],default=loadAIRAmount)
	OutstandingAmount	=	TextField(requiredlabel("Outstanding Amount", "*"), [validators.Required()], default=loadOutstandingAmount)
	TotWriteOffAmount	=	TextField(requiredlabel("Total Write Off Amount", "*"), [validators.Required()], default=loadTotWriteOffAmount)
	AmountForRecovery	=	TextField(requiredlabel("Amount For Recovery", "*"), [validators.Required()], default=loadTotWriteOffAmount)

	
	@staticmethod
	def beforeNewID () :
		OCObj 		= 	getOverdraftInformation()
		if not OCObj:
			return True, "This overdraft contract not allow to write-off."
		
		return False,''

	@staticmethod
	def setVisible():		
		return ['AmountForRecovery']

	@staticmethod
	def setDisable():
		return [('CustomerID'), ('Account'), ('Currency'), ('TranDate'),
				('AIRAmount'), ('OutstandingAmount'), ('TotWriteOffAmount')]

	@staticmethod
	def moneyField():
		return [('OutstandingAmount', 'Currency'), ('TotWriteOffAmount', 'Currency'),
				('AIRAmount', 'Currency'), ('AmountForRecovery', 'Currency')]

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def beforeAuthorize():
		ID = g.formID
		ODWObj = MKT_OVERDRAFT_WRITE_OFF_INAU.query.get(ID)
		setODWriteOff(ID,ODWObj.OutstandingAmount)
		return True

	@staticmethod
	def reverseRec():
		flash(msg_error + " Record not allow to reverse.")
		return False, ""

	@staticmethod
	def beforeInsert():
		ID 				= 	request.form['ID']
		Outstanding		= 	Decimal(request.form['OutstandingAmount'].replace(',',''))
		NumOfAuth 		= 	g.getNAuthorize
		Resource 		= 	"INAU"
		if int(NumOfAuth) == 0:
			setODWriteOff(ID,Outstanding)

		return True


def setODWriteOff(ID,Outstanding):
	try:
		OCObj = MKT_OVERDRAFT_CONTRACT.query.get(ID)
		if OCObj:
			Note 			=	""
			AccProduct  	= 	MKT_ACC_PRODUCT.query.get(OCObj.AccProduct)
			AIRCat 			= 	AccProduct.AccrReceivableCat	
			IntIncomeCat 	= 	AccProduct.IntIncomeCat
			AccSetting 		= 	mktsetting.getAccSetting()
			DateTimeNow 	= 	mktdate.getDateTimeNow()
			PDParamObj 		= 	mktparam.getPDParam()
			TranDate 		= 	mktdate.getBankDate()
			AIRAmount 		=	OCObj.AccrInterest
			Suspend 		=	OCObj.Suspend
			AssetClass 		=	OCObj.AssetClass
			Currency		=	OCObj.Currency
			Branch 			=	OCObj.Branch
			Dict 			= 	getODWriteOffAndRecoveryDict()
			OutstandingAmount 	=	Outstanding
		 	ReportingRateObj 	= 	mktaccounting.getReportingRateObj()

		 	Transaction =	Dict.get('WriteOffTran','')
		 	WriteOffCat = 	Dict.get('WriteOffCat','')
		 	if not WriteOffCat:
		 		AssetClassObj 	= 	MKT_ASSET_CLASS.query.filter(MKT_ASSET_CLASS.ID.ilike('%-' + '%sA'%OCObj.AccProduct)).first()
				
				if not AssetClassObj:
					AssetClassObj 	=	MKT_ASSET_CLASS.query.get(AssetClass)

		 		WriteOffCat 	= 	AssetClassObj.ProResvCat

			#Get Category Int.Income or Interest In Suspend
			Category,GL_KEYS,IntCurrency,IntIncome = mktloan.getCategoryIntIncome(ReportingRateObj,PDParamObj,AccProduct,
													AccSetting,Branch,Suspend,Currency,AIRAmount,AssetClass,
													"", "", "", "", "", "", "", "", "")
			Mode 		= "Direct"
			DrCr 		= "Dr"
			# Credit Interest Income Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				Category,				# Category
				IntCurrency,			# Currency
				DrCr,					# DrCr
				Decimal(IntIncome), 	# Amount
				"AC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				ID, 					# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=ID
			)

			Mode 		= 	"Direct"
			DrCr 		= 	"Cr"
			GL_KEYS 	= 	mktaccounting.getConsolKey(AIRCat, Currency, AssetClass, "AC", "", "", "", "", "", "", "", "", "")

			# Debit Accrued Interest Receivable Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				AIRCat,					# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(AIRAmount),		# Amount
				"AC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				ID, 					# Reference
				Note, 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=ID
			)

			Mode 		= 	"Direct"
			DrCr 		= 	"Dr"
			GL_KEYS 	= 	mktaccounting.getConsolKey(WriteOffCat, Currency, "", "AC", "", "", "", "", "", "", "", "", "")

			# Debit Accrued Interest Receivable Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				"",						# Account
				WriteOffCat,					# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(OutstandingAmount),		# Amount
				"AC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				ID, 					# Reference
				"", 					# Note
				"", 					# JNID
				Branch,					# Branch
				GL_KEYS,				# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=ID
			)

			Account 	= 	OCObj.Account
			AccountObj 	=	MKT_ACCOUNT.query.get(OCObj.Account)
			AccountCat 	= 	AccountObj.AccCategory
			AccountObj.AccrInterest = 0
			db.session.add(AccountObj)

			AccGLKey 	= 	mktaccounting.getConsolKey(AccountCat, Currency, AssetClass, "AC", "", "", "", "", "", "", "", "", "")
			Mode 		= 	"InDirect"
			DrCr 		= 	"Cr"
			# Debit Accrued Interest Receivable Category
			mktaccounting.postAccounting(
				"AUTH", 				# Status
				"0", 					# Curr
				"System",				# Inputter
				DateTimeNow, 			# Createdon
				"System",				# Authorizer
				DateTimeNow,			# Authorizeon
				"", 					# AEID
				Account,				# Account
				AccountCat,				# Category
				Currency,				# Currency
				DrCr,					# DrCr
				Decimal(OutstandingAmount),	# Amount
				"AC",					# Module
				Transaction, 			# Transaction
				TranDate, 				# TransactionDate
				ID, 					# Reference
				"", 					# Note
				"", 					# JNID
				Branch,					# Branch
				AccGLKey,			# GL_KEYS
				Mode, 					# Mode check to insert Journal for category
				UserReference=ID
			)

			if OutstandingAmount < OCObj.LimitedAmount:
				DiffAmount = OCObj.LimitedAmount-OutstandingAmount
				Overdraft = mktoverdraft.OVERDRAFT()
				Overdraft.postOffBalanceSheet(ID,DiffAmount,Currency,Branch,TranDate='',IsWithdraw=True)

			mktaudit.moveAUTHtoHIST(MKT_OVERDRAFT_CONTRACT, MKT_OVERDRAFT_CONTRACT_HIST, ID)
			mktaudit.deleteAUTH(MKT_OVERDRAFT_CONTRACT,ID)

	except Exception as e:
		raise



