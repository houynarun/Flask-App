from app import app
from app.mktcore.imports import *
from app.mktcore.session import *
from flask import flash
from app.Journal.models  import *

@app.route("/Morakot/JournalChecking",methods=['POST','GET'])
@checkLogOutSession
@checkLogOutTime
def journalChecking():
    Branch='ALL'
    StartDate=''
    EndDate=''
    JournalObj=''
    ListDict = []
    FilterOption=''
    try:
        if request.method=='POST':
            StartDate=request.form['from']
            EndDate=request.form['to']
            Branch  =request.form['Branch'].strip().upper() 
            BranchList=Branch.split()
            FilterOption=request.form['filteroption']
            FilterDeference=request.form['filterdeference']
            JournalObj=db.session.query(MKT_JOURNAL)
            JournalObj=JournalObj.filter(MKT_JOURNAL.TransactionDate.\
                        between(str(StartDate),str(EndDate)))
            JournalObj=JournalObj if 'ALL' in BranchList else JournalObj.\
                        filter(MKT_JOURNAL.Branch.in_(BranchList))
            Dict = {}
            if FilterOption=="None":
                JournalObj=db.session.query(MKT_JOURNAL.DebitCredit,func.sum(MKT_JOURNAL.Amount)).\
                            filter(MKT_JOURNAL.TransactionDate.between(str(StartDate),str(EndDate))).\
                            group_by(MKT_JOURNAL.DebitCredit)
                CrObj   = JournalObj.filter(MKT_JOURNAL.DebitCredit=='Cr')
                DrObj   = JournalObj.filter(MKT_JOURNAL.DebitCredit=='Dr')
                for index in range(len(CrObj.all())):
                    CrAmount = CrObj[index][1]
                    DrAmount = DrObj[index][1]
                    Dict={"CrAmount": CrAmount,"DrAmount": DrAmount}
                    ListDict.append(Dict)
            if FilterOption=="Reference":
                JournalObj=db.session.query(MKT_JOURNAL.Reference,func.sum(MKT_JOURNAL.Amount),\
                        MKT_JOURNAL.DebitCredit).\
                        filter(MKT_JOURNAL.TransactionDate.between(str(StartDate),str(EndDate))).\
                        group_by(MKT_JOURNAL.DebitCredit,MKT_JOURNAL.Reference).\
                        order_by(MKT_JOURNAL.Reference)
                CrObj   = JournalObj.filter(MKT_JOURNAL.DebitCredit=='Cr')
                DrObj   = JournalObj.filter(MKT_JOURNAL.DebitCredit=='Dr')
                for index in range(len(CrObj.all())):
                    CrReference = CrObj[index][0]
                    CrAmount = CrObj[index][1]
                    DrAmount = DrObj[index][1]
                    ResultObj=int(DrAmount-CrAmount)
                    if FilterDeference=="Hide":
                        if ResultObj != 0:
                            Dict={"Reference": CrReference,"CrAmount": CrAmount,"DrAmount": DrAmount}
                            ListDict.append(Dict)
                    elif FilterDeference=="Show":
                        if ResultObj == 0:
                            Dict={"Reference": CrReference,"CrAmount": CrAmount,"DrAmount": DrAmount}
                            ListDict.append(Dict)
                    else:
                        Dict={"Reference": CrReference,"CrAmount": CrAmount,"DrAmount": DrAmount}
                        ListDict.append(Dict)

            if FilterOption=='GL_KEYS':
                JournalObj=db.session.query(MKT_JOURNAL.GL_KEYS,func.sum(MKT_JOURNAL.Amount),\
                        MKT_JOURNAL.DebitCredit).\
                       filter(MKT_JOURNAL.TransactionDate.between(str(StartDate),str(EndDate))).\
                       group_by(MKT_JOURNAL.DebitCredit,MKT_JOURNAL.GL_KEYS).\
                       order_by(MKT_JOURNAL.GL_KEYS)
                CrObj   = JournalObj.filter(MKT_JOURNAL.DebitCredit=='Cr')
                DrObj   = JournalObj.filter(MKT_JOURNAL.DebitCredit=='Dr')
                for index in range(len(CrObj.all())):
                    CrGL_KEYS = CrObj[index][0]
                    print CrGL_KEYS
                    CrAmount = CrObj[index][1]
                    DrAmount = DrObj[index][1]
                    Dict={"GL_KEYS": CrGL_KEYS,"CrAmount": CrAmount,"DrAmount": DrAmount}
                    print Dict
                    ListDict.append(Dict)
                    print ListDict



    except Exception, e:
        db.session.rollback()
        raise
    return render_template('supporttool/journalchecking.html',Branch=Branch,
                                                              StartDate=StartDate,
                                                              EndDate=EndDate,
                                                              JournalObj=JournalObj,
                                                              ListDict=ListDict,
                                                              FilterOption=FilterOption)