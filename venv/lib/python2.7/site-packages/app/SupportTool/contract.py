from app.mktcore.imports 			import *
from app.mktcore.wtfimports 	import *
from .models 					import *
from app.LoanContract.models	import *
from app.Account.models 		import *
from app.AssetClass.models 		import *
from sqlalchemy 				import *
from flask 						import flash

class FRM_FIX_LOAN_CONTRACT(exform):

	LoanID 				= 	TextField(requiredlabel("Loan ID", "*"), [validators.Required()])
	Suspend 			=	TextField(requiredlabel("Suspend", "*"), [validators.Required()])
	LoanType			= 	TextField(requiredlabel("LoanType", "*"), [validators.Required()])
	AssetClass			= 	TextField(requiredlabel("AssetClass", "*"), [validators.Required()])
	Amount 				= 	TextField(requiredlabel("Balance", "*"), [validators.Required()])
	OutstandingAmount 	=	TextField(requiredlabel("OutstandingAmount", "*"), [validators.Required()])
	TotalInterest 		= 	TextField(requiredlabel("TotalInterest", "*"), [validators.Required()])
	AccrInterest 		= 	TextField(requiredlabel("AccrInterest", "*"), [validators.Required()])
	AccrCurrentInt		=	TextField(requiredlabel("AccrCurrentInt", "*"), [validators.Required()])
	AccrIntCurrMonth 	=	TextField(requiredlabel("AccrIntCurrMonth", "*"), [validators.Required()])
	AccrIntPreMonth 	= 	TextField(requiredlabel("AccrIntPreMonth", "*"), [validators.Required()])
	IntIncEarned		=	TextField(requiredlabel("IntIncEarned", "*"), [validators.Required()])
	AccrIntPerDay		=	TextField(requiredlabel("AccrIntPerDay", "*"), [validators.Required()])
	Note 				= 	TextAreaField(requiredlabel("Note", "*"), [validators.Required()])

	def validate_Suspend(form, field):
		Suspend	= 	field.data
		if Suspend not in ['Y','N']:
			raise ValidationError("Suspend must be Y or N")

	def validate_LoanType(form, field):
		LoanType	= 	field.data
		if LoanType not in ['R','N']:
			raise ValidationError("LoanType must be R or N")

	def validate_AssetClass(form, field):
		AssetClass	= 	field.data
		AssetClassObj = MKT_ASSET_CLASS.query
		Status = False
		for a in AssetClassObj:
			if a.ID == AssetClass:
				Status = True

		if not Status:
			raise ValidationError("Asset Class %s not found in system"%AssetClass)

	# @staticmethod
	# def formReadOnly():
	# 	return "AUTH"
	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#Suspend').val(data.Suspend); $('#LoanType').val(data.LoanType)"
		fielddisplay 	+= ";$('#AssetClass').val(data.AssetClass); $('#Amount').val(data.Amount)"
		fielddisplay 	+= ";$('#OutstandingAmount').val(data.OutstandingAmount); $('#TotalInterest').val(data.TotalInterest)"
		fielddisplay 	+= ";$('#AccrInterest').val(data.AccrInterest); $('#AccrCurrentInt').val(data.AccrCurrentInt)"
		fielddisplay 	+= ";$('#AccrIntCurrMonth').val(data.AccrIntCurrMonth); $('#AccrIntPreMonth').val(data.AccrIntPreMonth)"
		fielddisplay 	+= ";$('#IntIncEarned').val(data.IntIncEarned);$('#AccrIntPerDay').val(data.AccrIntPerDay)"
		varname 		= "LoanID:$('#LoanID').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/getFixLoanContractInfo", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeInsert():
		try:
			AuthLevel 	= g.getNAuthorize

			if AuthLevel == 0 :
				LoanObj  =   MKT_LOAN_CONTRACT.query.get(request.form["LoanID"])
				if LoanObj:
					LoanObj.Suspend             =   request.form["Suspend"]
					LoanObj.LoanType            =   request.form["LoanType"]
					LoanObj.AssetClass          =   request.form["AssetClass"]
					LoanObj.Amount              =   request.form["Amount"]
					LoanObj.OutstandingAmount   =   request.form["OutstandingAmount"]
					LoanObj.TotalInterest       =   request.form["TotalInterest"]
					LoanObj.AccrInterest        =   request.form["AccrInterest"]
					LoanObj.AccrCurrentInt      =   request.form["AccrCurrentInt"]
					LoanObj.AccrIntCurrMonth    =   request.form["AccrIntCurrMonth"]
					LoanObj.AccrIntPreMonth     =   request.form["AccrIntPreMonth"]
					LoanObj.IntIncEarned        =   request.form["IntIncEarned"]
					LoanObj.AccrIntPerDay       =   request.form["AccrIntPerDay"]
					db.session.add(LoanObj)

			return True
			
		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def beforeAuthorize():
		try:
			ID 		 = 	g.formID
			FLoanObj =	MKT_FIX_LOAN_CONTRACT.query.get(ID)
			if FLoanObj:
				LoanObj =	MKT_LOAN_CONTRACT.query.get(FLoanObj.LoanID)
				if LoanObj:
					LoanObj.Suspend             =   FLoanObj.Suspend
					LoanObj.LoanType            =   FLoanObj.LoanType
					LoanObj.AssetClass          =   FLoanObj.AssetClass
					LoanObj.Amount              =   FLoanObj.Amount
					LoanObj.OutstandingAmount   =   FLoanObj.OutstandingAmount
					LoanObj.TotalInterest       =   FLoanObj.TotalInterest
					LoanObj.AccrInterest        =   FLoanObj.AccrInterest
					LoanObj.AccrCurrentInt      =   FLoanObj.AccrCurrentInt
					LoanObj.AccrIntCurrMonth    =   FLoanObj.AccrIntCurrMonth
					LoanObj.AccrIntPreMonth     =   FLoanObj.AccrIntPreMonth
					LoanObj.IntIncEarned        =   FLoanObj.IntIncEarned
					LoanObj.AccrIntPerDay       =   FLoanObj.AccrIntPerDay
					db.session.add(LoanObj)
			else:
				flash(msg_error+'Record %s not found.'%ID)
				db.session.rollback()
				db.session.close()
				return False	

		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False
			

@app.route("/Morakot/getFixLoanContractInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFixLoanContractInfo():
	LoanID 		= request.args.get('LoanID')
	LoanObj    	=	MKT_LOAN_CONTRACT.query.get(LoanID)
	Suspend             =   ''
	LoanType            =   ''
	AssetClass          =   ''
	Amount              =   0
	OutstandingAmount   =   0
	TotalInterest       =   0
	AccrInterest        =   0
	AccrCurrentInt      =   0
	AccrIntCurrMonth    =   0
	AccrIntPreMonth     =   0
	IntIncEarned        =   0
	AccrIntPerDay       =   0

	if LoanObj:
		Suspend             =   LoanObj.Suspend
		LoanType            =   LoanObj.LoanType
		AssetClass          =   LoanObj.AssetClass
		Amount              =   LoanObj.Amount
		OutstandingAmount   =   LoanObj.OutstandingAmount
		TotalInterest       =   LoanObj.TotalInterest
		AccrInterest        =   LoanObj.AccrInterest
		AccrCurrentInt      =   LoanObj.AccrCurrentInt
		AccrIntCurrMonth    =   LoanObj.AccrIntCurrMonth
		AccrIntPreMonth     =   LoanObj.AccrIntPreMonth
		IntIncEarned        =   LoanObj.IntIncEarned
		AccrIntPerDay       =   LoanObj.AccrIntPerDay

	return jsonify(
			Suspend             =   str(Suspend),
			LoanType            =   str(LoanType),
			AssetClass          =   str(AssetClass),
			Amount              =   str(Amount),
			OutstandingAmount   =   str(OutstandingAmount),
			TotalInterest       =   str(TotalInterest),
			AccrInterest        =   str(AccrInterest),
			AccrCurrentInt      =   str(AccrCurrentInt),
			AccrIntCurrMonth    =   str(AccrIntCurrMonth),
			AccrIntPreMonth     =   str(AccrIntPreMonth),
			IntIncEarned        =   str(IntIncEarned),
			AccrIntPerDay       =   str(AccrIntPerDay)
		)