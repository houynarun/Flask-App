from app.mktcore.imports import *
from app.mktcore.session import *
from app.Provisioning.models import *
from app import db
import app.tools.mktdb	as mktdb
from app.LoanContract.models import *
from app.tools import mktaccounting 
from app.AssetClass.models import   *
from app.tools import mktpdcollection
from flask import flash
from datetime import datetime

'''
	This tool is used for booking provision that have step to do below:
	- ClearProvision from table provision by Branch,AssetClass,StartDate and EndDate
	- Booking Provision by LoanContract and Transaction Date
	+ For User can input below:
	  - textbox1:(Branch)
	  	-input the branch textbox that can write word 'ALL' for all branch and can input by name 
	  	 of each branch such as(HO,BTB,...) and this textbox can't input number
	  - textbox2:(AssetClass)
	  	-input the assetclass textbox that can write word 'ALL' for all assetclass and can input
	  	 by number of each asset class such as(0,10,20,...) and this textbox can't input character
	  - textbox3:(From)
	  	-input the from textbox that user can input startDate that they want to clear and book
	  	 provision by StartDate.What's StarDate?
	  - textbox4:(To)
	  	-input the to textbox that user can input endDate that they want to clear and book provision
	  	 by EndDate. What's EndDate?
	  - textbox5:(TransactionDate)
	  	- for this textbox user cant input the Date that they want to booking provision that this 
	  	  textbox can't input the date that bigger than system Date but user can input date before
	  	  system date.	    

'''
def clearProvision(BranchList,AssetClassList,StartDate,EndDate):

	ListLoan=[]
	#base query and filter
	ProvisionObj	= db.session.query(MKT_PROVISION)
	ProvisionObj	= ProvisionObj if 'ALL' in BranchList else ProvisionObj.\
							  filter(MKT_PROVISION.Branch.in_(BranchList))
	ProvisionObj	= ProvisionObj if 'ALL' in AssetClassList else ProvisionObj.\
							  filter(MKT_PROVISION.ASSETID.in_(AssetClassList))
	ProvisionObj	= ProvisionObj.\
							  filter(MKT_PROVISION.TranDate.between(str(StartDate),str(EndDate)))
	# delete provision and get LoanID when delete Provision	
	if ProvisionObj.first():
		ListLoan=[item.LOANID for item in ProvisionObj]
	ProvisionObj.delete(synchronize_session='fetch')
	return ListLoan
def bookProvision(BranchList,TranDate):

	LoanContractObj		= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.DisbursedStat=='Y',\
														MKT_LOAN_CONTRACT.OutstandingAmount>0).\
														order_by(MKT_LOAN_CONTRACT.Branch,MKT_LOAN_CONTRACT.ID)												
	LoanContractObj		= LoanContractObj if 'ALL' in BranchList else LoanContractObj.\
							 	filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
	"""
		Load Booking Provisioning with Current Year Profit
	"""
	if LoanContractObj.first():
		AccSetting 			= mktsetting.getAccSetting()
		ReportingRateObj 	= mktaccounting.getReportingRateObj()
		AssetClassObj 		= MKT_ASSET_CLASS.query
		BankDateObj 	= 	mktdate.getBankDateObj()
		BankDate 		= 	BankDateObj.SystemDate
		TranDate 		= TranDate
		mkt 				= '{:14},'*8

		print mkt.format('No','Branch','LoanID','DayDue','Out','Provision','Current Cls','New Cls')
		Counter 			= 	1
		for row in LoanContractObj:
			ID 					= 	row.ID
			AssetClass 			= 	row.AssetClass
			LoanType 			=	row.LoanType
			MoreThanOneYear 	=	row.MoreThanOneYear
			OutstandingAmount 	= 	row.OutstandingAmount
			Currency 			= 	row.Currency
			Branch 				= 	row.Branch
			Account 			= 	row.Account
			PDID 				= 	"PD" + str(ID)
			NumDayDue 			= 	mktpdcollection.getNumDayDue(PDID)
			if NumDayDue:
				NumDayDue = int(NumDayDue)

			NewAssetClass 		= 	mktpdcollection.getLoanAssetClass(NumDayDue, LoanType, MoreThanOneYear)
			
			# Provisioning Booking to New Class
			ProvisionAmount = 	mktpdcollection.getProvisioningAmount(AssetClass, OutstandingAmount, LoanType, MoreThanOneYear, NumDayDue)
			# print "Get Provisioning"
			if ProvisionAmount > 0 :
				
				print mkt.format(Counter,Branch,ID,NumDayDue,OutstandingAmount,ProvisionAmount,AssetClass,NewAssetClass)
				Counter+=1

				LoanAssetClass 	= AssetClassObj.get(AssetClass)
				if LoanAssetClass:
					ProvExpCat 	= LoanAssetClass.ProvExpCat
					ProResvCat	= LoanAssetClass.ProResvCat
				else:
					print "Loan %s AssetClass not found."% ID

				# Booking Provisioning To New Class
				"""
					Notes By : Sovankiry / Last Update: 09 October 2016
					Refer to loan provisioning booking that book when loan change class
					 
						Debit - Bad & Doubfull Debts 							Loan Loss Provision Booking		xxxx

						   Credit - Less Reserve for Specific loan loss 		Loan Loss Provision Booking  				xxxx
				"""

				# ReportingRate 			= ReportingRateObj.get(Currency) 
				LCYCurrency,LCYAmount 	= mktaccounting.setLCYAmount(ReportingRateObj,AccSetting,Currency,ProvisionAmount)

				DrCr  		= 'Dr'
				Category 	= ProvExpCat
				if BankDateObj.LastSystemDate == BankDateObj.LastYearEnd:
					Category 	= AccSetting.PriorYearCat
				Transaction = "34"
				GL_KEYS 	= mktaccounting.getConsolKey(Category, LCYCurrency, "", "", "", "", "", "", "", "", "", "", "")
				DateTimeNow = mktdate.getDateTimeNow()
				Mode 		= "Direct"
				Note 		= "Fixing Provision"
				# Debit 
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					LCYCurrency,			# Currency
					DrCr,					# DrCr
					Decimal(LCYAmount), 	# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 			# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				# Define new parameter
				DateTimeNow = mktdate.getDateTimeNow()
				DrCr 		= "Cr"
				Mode 		= "Direct"
				Category 	=  ProResvCat
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, "", "", "", "", "", "", "", "", "", "", "")
				
				# Credit 
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,			# Currency
					DrCr,					# DrCr
					Decimal(ProvisionAmount),# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					ID, 					# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)

				PROV = MKT_PROVISION.query.\
						filter(MKT_PROVISION.LOANID == ID).\
						filter(MKT_PROVISION.ASSETID == AssetClass).\
						first()

				if not PROV:
					# Update Auditrail
						
					PROV = MKT_PROVISION(
								Status		= 	"AUTH",
								Curr 		= 	"0",
								Inputter	= 	"System",
								Createdon 	= 	DateTimeNow,
								Authorizer 	= 	"System",
								Authorizeon	= 	DateTimeNow,
								Branch 		=	Branch,
								LOANID 		= 	ID,
								ASSETID 	=	AssetClass,
								TranDate 	=	TranDate,
								Amount 		=	LCYAmount,

							)

				PROV.ASSETID 	= AssetClass
				PROV.TranDate 	= TranDate
				PROV.Amount 	= LCYAmount
				db.session.add(PROV)
		return True
	else:
		return False
		

		
@app.route("/Morakot/FixProvision", methods=['POST','GET'])
@checkLogOutSession
@checkLogOutTime
def loadProvisioning():
	# set permission use this route for only ADMIN.S and MORAKOT.IT
	Session=setModuleInternal()
	if False in Session:
		return Session[1]
	
	try:
		#set fix data to form when loading form(methods=='GET')
		Branch='ALL'
		AssetClass='ALL'
		StartDate=''
		EndDate=''
		BankDateObj 	= 	mktdate.getBankDateObj()
		BankDate 		= 	BankDateObj.SystemDate
		TranDate=BankDate

		if request.method=='POST':
			# get value from user input on form
			Branch 			= 	request.form["Branch"].strip().upper() 
			BranchList  	=	Branch.split()
			AssetClass 		= 	request.form["AssetClass"].strip().upper() 
			AssetClassList	=	AssetClass.split()
			StartDate		=  request.form['from']
			EndDate			=  request.form['to']
			
			TranDate 		=  request.form['trandate']
			#Validate Transaction Date
			if TranDate > BankDate:
				Message = 'Transaction Date Must Bigger Than System Date'
				flash(msg_error+Message)
				return render_template('supporttool/provision.html',Branch=Branch,
																	AssetClass=AssetClass,
																	StartDate=StartDate,
																	EndDate=EndDate,
																	TranDate=TranDate)
			# Query And Clear Provision base on filter
			clearProvision(BranchList,AssetClassList,StartDate,EndDate)
			# Booking Provision
			Provision=bookProvision(BranchList,TranDate)
			if Provision:
				print "Booking provisioning completed 100%"	
				Message="Booking provisioning completed 100%"
				flash(Message)
				db.session.commit()
			else:
				Message="No Loan Contract Booking Provision"
				flash(msg_error+Message)
		return render_template('supporttool/provision.html',Branch=Branch,
															AssetClass=AssetClass,
															StartDate=StartDate,
															EndDate=EndDate,
															TranDate=TranDate)
	except Exception, e:
		db.session.rollback()
		raise