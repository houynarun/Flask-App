from app.mktcore.wtfimports import *
from .models 				import *
from flask 					import g, flash, Markup
from app.urlregister 		import *
import app.tools.mktaudit 	as mktaudit
from app.tools.mktroute		import *
from sqlalchemy.inspection  import inspect
from app.AutoID.models 		import *
import app.tools.mktdb 		as mktdb
import app.mktcore.autoid   as mktautoid
from .fixdatatools 			import *
from app.Module.models 		import *

@app.route('/Morakot/FieldName', methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def ListFieldName():
	TableName 	= 	request.args.get('TableName')
	return getFieldName(TableName)

@app.route('/Morakot/SelectAction', methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def getInsert():
	dic 	= False
	Choices = request.args.get('Action')
	if Choices == "Insert":
		dic = True
	else:
		dic = False
	return jsonify(Bool=dic)

@app.route('/Morakot/DisableAction',methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def getDisable():
	dicDelete 	= 	False
	dicUpdate	= 	False
	Choices 	= 	request.args.get('Action')
	Option 		=  	request.args.get('Option')
	if Choices == "Update":
		if Option == 'No':
			dicUpdate 	= 	True
		else: 
			dicUpdate 	= 	False
	if Choices == "Delete":
		if Option == 'No':
			dicDelete 	= 	True
			dicUpdate 	= 	True
		else: 
			dicDelete 	= 	True
	return jsonify(BoolUpdate	=	dicUpdate,
				   BoolDelete	=	dicDelete )

@app.route('/Morakot/DisableRecordID', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDisableRecordID():
	dic 		= 		False
	Action 		=	 	request.args.get('Action')
	if Action == "Delete":
		Option 	= 		request.args.get('Option')
		if Option == 'Yes':
			dic = True
		else:
			dic = False
	if Action == "Update":
		Option = request.args.get('Option')
		if Option == 'Yes':
			dic = True
		else:
			dic = False
	return jsonify(Bool=dic)

def getAutoID(TableName):
	"""Return Auto ID from Morakot VB"""
	Form 	  	= 	"FRM"+TableName[3:]
	AutoID 		= 	mktautoid.getAutoID('%s'%Form)
	AutoID 		= 	'%s%s' % (AutoID[:-5], AutoID[-2:])
	return AutoID
def custom_TableName(form,field):
	TableName 	  		= 	request.form['TableName']
	if TableName == '':
		raise ValidationError("This field is required.")
def custom_Action(form,field):
	Action 	  		= 	request.form['Action']
	if Action == '__None':
		raise ValidationError("This field is required.")
def custom_RecordID(form,field):
	TableName 	  		= 	request.form['TableName']
	if TableName != "getFilterObj":
		Table 	  		= 	eval(TableName) if TableName != '' else ''
		RecordID  		= 	request.form['RecordID']
		PrimaryValue 	= 	""
		RecordList 		= 	RecordID.split()
		if Table:
			GetPrimaryKey	= 	[key.name for key in inspect(Table).primary_key] if Table else []
			Action 	  		= 	request.form['Action']
			Option 			= 	request.form['Option']
			Form 	  		= 	"FRM"+TableName[3:]
			TableObj  		= 	Table.query
			InvalidID 		= 	checkInvalidID(TableName,RecordID)
			if Action == 'Insert':
				QueryObj 	= MKT_AUTOID.query.filter(MKT_AUTOID.ID == Form).first()
				if QueryObj and RecordID != "":
					raise ValidationError("This table will generate auto ID by System, So don't need to input Record ID.")
				if not QueryObj:
					TableObj 	= TableObj.filter(Table.ID == RecordID).first()
					if RecordID == "":
						raise ValidationError("This field is required.")
					if len(RecordList) > 1:
						raise ValidationError("Invalid Record ID.")
					if TableObj and len(GetPrimaryKey) == 1:
						raise ValidationError("This Record existed in table %s."%(TableName))
			if Action == 'Delete':
				if Option == 'No':
					if len(GetPrimaryKey) == 1:
						if len(RecordList) > 1:
							raise ValidationError("Invalid Record ID.")
						TableObj 	= TableObj.filter(Table.ID == RecordID).first()
						if not TableObj:
							raise ValidationError("This Record doesn't existed in table %s."%(TableName))
					if InvalidID and RecordID != "":
						raise ValidationError("Invalid Record ID.")
			if Action == 'Update':
				Option	  	= 	request.form['Option']
				TableObj 	= 	TableObj.filter(Table.ID == RecordID).first()
				if not TableObj and RecordID != "" and len(RecordList)== 1:
					raise ValidationError("Invalid Record ID.")
				if Option == 'No':
					if RecordID == "":
						raise ValidationError("This field is required.")
					if InvalidID:
						raise ValidationError("Invalid Record ID.")
def custom_FieldName(form,field):
	ListFieldName , TotalFieldName		= 	getControlList("FieldName")
	RecordID 	= request.form['RecordID']
	Option 		= request.form['Option']
	Action 		= request.form['Action']
	TableName 	= request.form['TableName']
	GetPrimaryKey  = []
	Table 		= eval(TableName) if TableName else ""
	if TableName:
		GetPrimaryKey	= 	[key.name for key in inspect(Table).primary_key]
	if Action == 'Update':
		RecordList 	= RecordID.split() if RecordID else ""
		if RecordList:
			if len(RecordList) != len(GetPrimaryKey):
				for i in range(0,TotalFieldName):
					FieldName = request.form[ListFieldName[i]]
					if FieldName == "__None":
						raise ValidationError("This field is required.")
			if len(RecordList) == len(GetPrimaryKey):
				for i in range(0,TotalFieldName):
					FieldName = request.form[ListFieldName[i]]
					if FieldName != "__None":
						raise ValidationError("This field must be empty.")
		else:
			for i in range(0,TotalFieldName):
				FieldName = request.form[ListFieldName[i]]
				if FieldName == "__None":
					raise ValidationError("This field is required.")
def custom_NewValue(form,field):
	ListNewValue , TotalNewValue		= 	getControlList("NewValue")
	RecordID 	= request.form['RecordID']
	Option 		= request.form['Option']
	Action 		= request.form['Action']
	TableName 	= request.form['TableName']
	GetPrimaryKey = []
	Table 		= eval(TableName) if TableName else ""
	if TableName:
		GetPrimaryKey	= 	[key.name for key in inspect(Table).primary_key]
	if Action == 'Update':
		RecordList 	= RecordID.split() if RecordID else ""
		if RecordList:
			if len(RecordList) != len(GetPrimaryKey):
				for i in range(0,TotalNewValue):
					NewValue = request.form[ListNewValue[i]]
					if NewValue == "":
						raise ValidationError("This field is required.")
		else:
			for i in range(0,TotalNewValue):
				NewValue = request.form[ListNewValue[i]]
				if NewValue == "":
					raise ValidationError("This field is required.")
def custom_FilterField(form,field):
	ListFilterField , TotalFilterField		= 	getControlList("FilterField")
	RecordID 	= request.form['RecordID']
	Option 		= request.form['Option']
	Action 		= request.form['Action']
	TableName 	= request.form['TableName']
	Table 		= eval(TableName) if TableName else ""
	if Option == 'Yes':
		for i in range(0,TotalFilterField):
			FilterField = request.form[ListFilterField[i]]
			if FilterField == "__None":
				raise ValidationError("This field is required.")
def custom_AdvanceFilter(form,field):
	ListAdvanceFilter , TotalAdvanceFilter		= 	getControlList("AdvanceFilter")
	RecordID 	= request.form['RecordID']
	Option 		= request.form['Option']
	Action 		= request.form['Action']
	TableName 	= request.form['TableName']
	if TableName:
		Table 		= eval(TableName)
	if Option == 'Yes':
		for i in range(0,TotalAdvanceFilter):
			AdvanceFilter = request.form[ListAdvanceFilter[i]]
			if AdvanceFilter == "__None":
				raise ValidationError("This field is required.")
def custom_FilterValue(form,field):
	ListFilterValue , TotalFilterValue		= 	getControlList("FilterValue")
	RecordID 	= request.form['RecordID']
	Option 		= request.form['Option']
	Action 		= request.form['Action']
	TableName 	= request.form['TableName']
	Table 		= eval(TableName) if TableName else ""
	if Option == 'Yes':
		for i in range(0,TotalFilterValue):
			FilterValue = request.form[ListFilterValue[i]]
			if FilterValue == "":
				raise ValidationError("This field is required.")
def processDelete(TableName,RecordID,Status,Option,ID):
	try:
		Table 		= 	eval(TableName) if TableName else ""
		ListFilterField, TotalFilterField	= 	getControlList("FilterField")
		ListAdvanceFilter, TotalAdvanceFilter 	= 	getControlList("AdvanceFilter")
		ListFilterValue, TotalFilterValue 	= 	getControlList("FilterValue")
		GetPrimaryKey   =	[key.name for key in inspect(Table).primary_key]
		FilterFieldList = 	[]
		FilterValueList	= 	[]
		ConditionDic 	= 	{}
		AdvanceFilterList = []
		RecordList 		= 	RecordID.split()
		for i in range(0,TotalFilterField):
			FilterField = 	request.form[ListFilterField[i]]
			AdvanceFilter = request.form[ListAdvanceFilter[i]]
			FilterValue = request.form[ListFilterValue[i]]
			FilterValueList.append(FilterValue)
			FilterFieldList.append(FilterField)
			ConditionDic.update({FilterField:TableName})
			AdvanceFilterList.append(AdvanceFilter)
		DeleteRecord 	=	deleteRecord(Option,FilterValueList,FilterFieldList,AdvanceFilterList,ConditionDic,TableName,RecordList,GetPrimaryKey).delete(synchronize_session='fetch')
		# mktdb.deleteRecord(MKT_FIX_DATA_INAU,[MKT_FIX_DATA_INAU.ID == ID])
		# mktdb.deleteRecord(MKT_FIX_DATA_DE_INAU,[MKT_FIX_DATA_DE_INAU.ID == ID])
		return Status
	except Exception as e:
		raise e
def processUpdate(TableName,RecordID,Status,Option,ID):
	Table 		= 	eval(TableName)
	RecordList 		= 	RecordID.split()
	ListNewValue, TotalNewValue 	= 	getControlList("NewValue")
	ListFieldName, TotalFieldName 	= 	getControlList("FieldName")
	ListFilterField, TotalFilterField 	= 	getControlList("FilterField")
	ListAdvanceFilter, TotalAdvanceFilter 	= 	getControlList("AdvanceFilter")
	ListFilterValue, TotalFilterValue 	= 	getControlList("FilterValue")
	GetPrimaryKey   =	[key.name for key in inspect(Table).primary_key]
	QueryObj 		= 	getFilterObj(TableName,GetPrimaryKey,RecordID)
	FilterValueList = []
	FilterFieldList = []
	ConditionList 	= []
	ConditionDic    = {}
	FieldNameList 	= []
	NewValueList 	= []
	if Option == 'No':
		for i in range(0,TotalFieldName):
			NewValue 	= 	request.form[ListNewValue[i]] if request.form[ListNewValue[i]] != "" else request.form[ListOldValue[i]]
			FieldName 	= 	request.form[ListFieldName[i]]
			for index,data in enumerate(QueryObj):
				OldValue 	= 	getattr(data,FieldName)
				FixDataHistObj = {
									'ID':"%s"%(ID)+"%s"%(index),
								 	'FixDataID': ID,
									'PK1': RecordList[0] if len(RecordList) >= 1 else "",
									'PK2': RecordList[1] if len(RecordList) >= 2 else "",
									'PK3': RecordList[2] if len(RecordList) >= 3 else "",
									'PK4': RecordList[3] if len(RecordList) >= 4 else "",
									'PK5': RecordList[4] if len(RecordList) >= 5 else "",
									'TableName':TableName,
									'Action':"Update",
									'FieldName':FieldName,
									'OldValue':OldValue,
									'NewValue':NewValue
								}
				mktdb.insertTable(MKT_FIX_DATA_HISTORY,FixDataHistObj)
				setattr(data,FieldName,NewValue)
		# mktdb.deleteRecord(MKT_FIX_DATA_INAU,[MKT_FIX_DATA_INAU.ID == ID])
		# mktdb.deleteRecord(MKT_FIX_DATA_DE_INAU,[MKT_FIX_DATA_DE_INAU.ID == ID])
	else:
		for i in range(0,TotalFilterField):
			FilterField 	= 	request.form[ListFilterField[i]]
			Condition 		= 	request.form[ListAdvanceFilter[i]]
			FilterValue 	= 	request.form[ListFilterValue[i]]
			FilterValueList.append(FilterValue)
			FilterFieldList.append(FilterField)
			ConditionList.append(Condition)
			ConditionDic.update({FilterField:TableName})
		for i in range(0,TotalFieldName):
			FieldName 		= 	request.form[ListFieldName[i]]
			NewValue 		= 	request.form[ListNewValue[i]]
			FieldNameList.append(FieldName)
			NewValueList.append(NewValue)
		AdvanceFilterObj	=	getAdvanceFilter(ConditionList,ConditionDic,FilterFieldList,FilterValueList,TableName).all()
		for Index,data in enumerate(AdvanceFilterObj):
			for index,row in enumerate(NewValueList):
				OldValue = getattr(data,FieldNameList[index])
				FieldName = FieldNameList[index] if index == 0 else FieldNameList[index]
				FixDataHistObj = {
									'ID':"%s"%(ID)+"%s"%(Index)+"%s"%(index),
								 	'FixDataID': ID,
									'PK1': RecordList[0] if len(RecordList) >= 1 else "",
									'PK2': RecordList[1] if len(RecordList) >= 2 else "",
									'PK3': RecordList[2] if len(RecordList) >= 3 else "",
									'PK4': RecordList[3] if len(RecordList) >= 4 else "",
									'PK5': RecordList[4] if len(RecordList) >= 5 else "",
									'TableName':TableName,
									'Action':"Update",
									'FieldName':FieldNameList[index],
									'OldValue':OldValue,
									'NewValue': NewValueList[index]
								}
				mktdb.insertTable(MKT_FIX_DATA_HISTORY,FixDataHistObj)
				setattr(data,FieldNameList[index],row)
		# mktdb.deleteRecord(MKT_FIX_DATA_INAU,[MKT_FIX_DATA_INAU.ID == ID])
		# mktdb.deleteRecord(MKT_FIX_DATA_DE_INAU,[MKT_FIX_DATA_DE_INAU.ID == ID])
	return Status
class FRM_FIX_DATA(exform):
	TableName   	=  SelectField(requiredlabel('Table Name', '*'),
							choices = getAllTable(),
							coerce 	= str,
							default = '',
							validators = [custom_TableName]
						)
	Action 			= 	SelectField(requiredlabel("Action","*"),
							validators=[custom_Action], 
							choices=[
									 ('__None','--None--'),
									 ('Insert', 'Insert'),
									 ('Update', 'Update'),
									 ('Delete','Delete')],
							coerce=str)
	Option 			= 	SelectField("Advance Filter",
							choices = [
										('__None','--None--'),
										('No','No'),
										('Yes','Yes')
									  ],
							coerce=str)
	RecordID 		= 	TextField(requiredlabel('Record ID', '*'), validators=[custom_RecordID])
	FilterField 	= 	QuerySelectField('Filter Field',
							 query_factory=loadFieldName, 
							 get_label=u'Description',
							 # allow_blank=True,
							 default="__None",
							 validators=[custom_FilterField],
							 description="1-Filter")

	AdvanceFilter 	= 	SelectField("Filter", 
								choices=[('__None','--None--'),
										('EQ','Equal'),
										('NE','Not Equal'),
										('GT','Greater Than'),
										('LT','Less Than'),
										('GE','Greater Than or Equal'),
										('LE','Less Than or Equal'),
										('BT','Between')],
								default = '',
								validators=[custom_AdvanceFilter],
							 	coerce=str, description="1-Filter")
	FilterValue 	=	TextField("Filter Value",validators=[custom_FilterValue],description='1-Filter')
	FieldName 		= 	QuerySelectField('Field Name',
							 query_factory=loadFieldName, 
							 validators=[custom_FieldName],
							 get_label=u'Description',
							 allow_blank=True,
							 default="__None",
							 blank_text="--None--",
							 description="2-Update Value")
	OldValue 		=	TextField("Old Value",description='2-Update Value')
	NewValue 		=	TextField("New Value",validators=[custom_NewValue],description='2-Update Value')

	def validate_TableName(form,field):
		TableName		= 	request.form['TableName']
		if TableName == "__None":
			raise ValidationError("This field is required.")
	def validate_Option(form,field):
		Action 		= request.form['Action']
		Option 		= request.form['Option']
		if Action != 'Insert':
			if Option == '__None':
				raise ValidationError("This field is required.")
		if Action == 'Insert':
			if Option != '__None':
				raise ValidationError("This field must be --None--.")
	def validate_Action(form,field):
		Action 		= 	request.form['Action']
		if Action 	== '':
			raise ValidationError("This field is required.")
	@staticmethod
	def setVisible():
		control_list=['FixDataID','OldValue','FilterID']
		return control_list

	@staticmethod
	def isMultiValue():
		return ['1-Filter','2-Update Value']

	@staticmethod
	def beforeInsert():
		try:
			TableName		= 	request.form['TableName']
			Table 			= 	eval(TableName)
			RecordID 		= 	request.form['RecordID']
			ID 				= 	request.form['ID']
			Action 			= 	request.form['Action']
			Option 			= 	request.form['Option']
			AuthLevel		=	g.getNAuthorize
			GetFieldName 	= 	renderFieldName(TableName)
			Status			=	True
			GetPrimaryKey   = 	[key.name for key in inspect(Table).primary_key]
			TableQuery 		= 	Table.query
			Form 			= 	"FRM"+TableName[3:]
			QueryObj 		= 	MKT_AUTOID.query.filter(MKT_AUTOID.ID == Form).first()
			RecordList  	= 	RecordID.split()
			ListFilterField, TotalFilterField 	=	getControlList("FilterField")
			ListFilter, TotalFilter 			= 	getControlList("AdvanceFilter")
			ListFilterValue , TotalFilterValue	= 	getControlList("FilterValue")
			ListFieldName , TotalFieldName		= 	getControlList("FieldName")
			ListNewValue , TotalNewValue		= 	getControlList("NewValue")
			if Action == 'Insert':
				if QueryObj:
					AutoID 		=  	getAutoID(TableName)
					FixDataObj 	= {
								 	'ID': ID,
									'TableName': TableName,
									'RecordID':AutoID,
									'Action':Action,
									'Option':""
								  }
					mktdb.insertTable(MKT_FIX_DATA_INAU,FixDataObj)
				else:
					FixDataObj 	= {
								 	'ID': ID,
									'TableName': TableName,
									'RecordID':RecordID,
									'Action':Action,
									'Option':""
								  }
					mktdb.insertTable(MKT_FIX_DATA_INAU,FixDataObj)
				if GetFieldName:
					for index,row in enumerate(GetFieldName):
						FixDataDeObj = {
						 	'ID': ID,
							'FixDataID': index,
							'FieldName':row,
							'OldValue':"",
							'NewValue':""
						}
						mktdb.insertTable(MKT_FIX_DATA_DE_INAU,FixDataDeObj)
						db.session.commit()
			if Action == "Update":
				FormObj 	= MKT_FORM.query.filter(MKT_FORM.URL == 'FixDataUpdate').first()
				if Option == 'No':
					RecordList 		= 	RecordID.split()
					TableQuery 		=	getFilterObj(TableName,GetPrimaryKey,RecordID).first()
					if len(RecordList) != len(GetPrimaryKey):
						if AuthLevel == 0: 
							if FormObj.NAuthorize == 0:
								if Status:
									Status  		= 	processUpdate(TableName,RecordID,Status,Option,ID)
								return Status
							else:
								FixDataObj 	= {
											 	'ID': ID,
												'TableName': TableName,
												'RecordID':RecordID,
												'Action':Action,
												'Option':Option,
												'Status':"INAU"
											  }
								mktdb.insertTable(MKT_FIX_DATA_INAU,FixDataObj)
								for index in range(0,TotalFieldName):
									FixDataDeObj = {
									 	'ID': ID,
										'FixDataID': index,
										'FieldName':request.form[ListFieldName[index]],
										'OldValue':"",
										'NewValue':request.form[ListNewValue[index]]
									}
									mktdb.insertTable(MKT_FIX_DATA_DE_INAU,FixDataDeObj)
					if len(RecordList) == len(GetPrimaryKey):
						if GetFieldName:
							FixDataObj = {
								 	'ID': ID,
									'TableName': TableName,
									'RecordID':RecordID,
									'Action':Action,
									'Option':Option,
									'Status':"INAU"
								}
							mktdb.insertTable(MKT_FIX_DATA_INAU,FixDataObj)
							for index,row in enumerate(GetFieldName):
								FixDataDeObj = {
								 	'ID': ID,
									'FixDataID': index,
									'FieldName':row,
									'OldValue':getattr(TableQuery,row),
									'NewValue':""
								}
								mktdb.insertTable(MKT_FIX_DATA_DE_INAU,FixDataDeObj)
				else:
					if AuthLevel == 0 and FormObj.NAuthorize == 0:
						if Status:
							Status  		= 	processUpdate(TableName,RecordID,Status,Option,ID)
						return Status
					else:
						if GetFieldName:
							FixDataObj = {
								 	'ID': ID,
									'TableName': TableName,
									'RecordID':"",
									'Action':Action,
									'Option':Option,
									'Status':"INAU"
								}
							mktdb.insertTable(MKT_FIX_DATA_INAU,FixDataObj)
							for index in range(0,TotalFilterField):
								FilterObj = {
									'ID':ID,
									'FilterID':index,
									'FilterField':request.form[ListFilterField[index]],
									'AdvanceFilter':request.form[ListFilter[index]],
									'FilterValue': request.form[ListFilterValue[index]]
								}
								mktdb.insertTable(MKT_FIX_DATA_FILTER_INAU,FilterObj)
							for index in range(0,TotalFieldName):
								FixDataDeObj = {
									'ID':ID,
									'FixDataID':index,
									'FieldName':request.form[ListFieldName[index]],
									'OldValue':"",
									'NewValue':request.form[ListNewValue[index]]
								}
								mktdb.insertTable(MKT_FIX_DATA_DE_INAU,FixDataDeObj)
			if Action == 'Delete':
				FormObj 	= MKT_FORM.query.filter(MKT_FORM.URL == 'FixDataDelete').first()
				if Option == 'No':
					if AuthLevel == 0 and FormObj.NAuthorize == 0:
						if Status:
							Status  		= 	processDelete(TableName,RecordID,Status,Option,ID)
						return Status
					else:
						FixDataObj = {
							 	'ID': ID,
								'TableName': TableName,
								'RecordID':RecordID,
								'Action':Action,
								'Option':Option,
								'Status':"INAU"
							}
						mktdb.insertTable(MKT_FIX_DATA_INAU,FixDataObj)
						FixDataDeObj = {
							'ID':ID,
							'FixDataID':0,
							'FieldName':"",
							'OldValue':"",
							'NewValue':""
						}
						mktdb.insertTable(MKT_FIX_DATA_DE_INAU,FixDataDeObj)
				else:
					if AuthLevel == 0 and FormObj.NAuthorize == 0:
						if Status:
							Status  		= 	processDelete(TableName,RecordID,Status,Option,ID)
						return Status
					else:
						FixDataObj = {
							 	'ID': ID,
								'TableName': TableName,
								'RecordID':"",
								'Action':Action,
								'Option':Option,
								'Status':"INAU"
							}
						mktdb.insertTable(MKT_FIX_DATA_INAU,FixDataObj)
						for index in range(0,TotalFilterField):
							FilterObj={
								'ID':ID,
								'FilterID':index,
								'FilterField':request.form[ListFilterField[index]],
								'AdvanceFilter':request.form[ListFilter[index]],
								'FilterValue': request.form[ListFilterValue[index]],
							}
							mktdb.insertTable(MKT_FIX_DATA_FILTER_INAU,FilterObj)
							
			return True
		except Exception as e:
			return False

	@staticmethod
	def redirectAfterInsert():
		Action 			= 	request.form['Action']
		ID 				= 	request.form['ID']
		TableName 		= 	request.form['TableName']
		RecordID 		= 	request.form['RecordID']
		RecordList 		= 	RecordID.split()
		Table 			= 	eval(TableName)
		GetPrimaryKey   = 	[key.name for key in inspect(Table).primary_key]
		Option	 		=	request.form['Option']
		if Action  == 'Insert':
			mktdb.deleteRecord(MKT_FIX_DATA,[MKT_FIX_DATA.ID == ID])
			mktdb.deleteRecord(MKT_FIX_DATA_DE,[MKT_FIX_DATA_DE.ID == ID])
			db.session.commit()
			return "/Morakot/FixDataInsert/Edit/"+ ID
		if Action  == 'Update':
			mktdb.deleteRecord(MKT_FIX_DATA,[MKT_FIX_DATA.ID == ID])
			mktdb.deleteRecord(MKT_FIX_DATA_DE,[MKT_FIX_DATA_DE.ID == ID])
			mktdb.deleteRecord(MKT_FIX_DATA_FILTER,[MKT_FIX_DATA_FILTER.ID == ID])
			if len(RecordList) != len(GetPrimaryKey):
				return "/Morakot/FixData/"
			if len(RecordList) == len(GetPrimaryKey):
				return "/Morakot/FixDataUpdate/Edit/"+ ID
			return "/Morakot/FixData/"
		# if Action == 'Delete':
		# 	# mktdb.deleteRecord(MKT_FIX_DATA,[MKT_FIX_DATA.ID == ID])
		# 	# mktdb.deleteRecord(MKT_FIX_DATA_FILTER,[MKT_FIX_DATA_FILTER.ID == ID])	
		# 	# db.session.commit()
		# 	return "/Morakot/FixData/"
	@staticmethod
	def formReadOnly():
		ID 			= 	request.form["ID"] if request.method == "POST" else g.formID
		QueryObj 	= 	MKT_FIX_DATA_INAU.query.get(ID)
		if QueryObj:
			return True
		return False
	@staticmethod
	def hotSelectField():
		hotfield 		=	[]
		fielddisplay	=	"FieldName,#FilterField"
		varname			=	"TableName:$('#TableName').val()"
		fun				=	["TableName", varname ,fielddisplay, "/Morakot/FieldName", "click"]
		hotfield.append(fun)
		return hotfield
	@staticmethod
	def hotField():
		hotfield 		= 	[]
		fielddisplay  	=	 "\
							if(data.Bool==true){\
								$('#container_tab').find('li a[href=\"#1-Filter\"],#1-Filter').css('visibility','hidden');$('#container_tab').find('li.active').remove('active');$('#container_tab').find('li a[href=\"#9-Audit\"]').parent().addClass('active');$('#container_tab').find('div.active').removeClass('active');$('#container_tab').find('div.in').removeClass('in');$('#container_tab').find('#9-Audit').addClass('active in');\
								$('#container_tab').find('li a[href=\"#2-UpdateValue\"],#2-UpdateValue').css('visibility','hidden');\
							}else{\
								$('#container_tab').find('li.active').removeClass('active');\
								$('#container_tab').find('div.active').removeClass('active');\
								$('#container_tab').find('div.in').removeClass('in');\
								$('#container_tab').find('li a[href=\"#1-Filter\"],#1-Filter').css('visibility','visible');$('#container_tab').find('li a[href=\"#1-Filter\"]').parent().addClass('active');$('#container_tab').find('li a[href=\"#1-Filter\"]').addClass('active');$('#container_tab').find('#1-Filter').addClass('in active');\
								$('#container_tab').find('li a[href=\"#2-UpdateValue\"],#2-UpdateValue').css('visibility','visible');};"
		fielddisplay 	+= 	"$('#Option').select2('readonly',data.Bool);"
		varname 		= 	"Action:$('#Action').val()"
		fun 			= 	["Action", varname, fielddisplay, "/Morakot/SelectAction","change"]
		hotfield.append(fun)

		fielddisplay 	  = 	"$('#FilterField').select2('readonly',data.BoolUpdate);"
		fielddisplay 	 += 	"$('#AdvanceFilter').select2('readonly', data.BoolUpdate);"
		fielddisplay 	 += 	"$('input[name=FilterValue]').attr('readonly', data.BoolUpdate);"
		fielddisplay 	 += 	"$('#FieldName').select2('readonly', data.BoolDelete);"
		fielddisplay 	 += 	"$('input[name=NewValue]').attr('readonly', data.BoolDelete);"
		varname 		  = "Option:$('#Option').val(),Action:$('#Action').val()"
		fun  			  = ["Option", varname, fielddisplay, "/Morakot/DisableAction", "change"]
		hotfield.append(fun)

		fielddisplay 	  = "$('input[name=RecordID]').attr('readonly', data.Bool);"
		varname 		  = "Option:$('#Option').val(),Action:$('#Action').val()"
		fun 			  = ["Option", varname, fielddisplay, "/Morakot/DisableRecordID", "change"]
		hotfield.append(fun)
		return hotfield

	@staticmethod
	def IsAcceptOverride():
		ID 				= 	request.form['ID']
		Msg 			= 	""
		Override   		= 	False
		TableName 		= 	request.form['TableName']
		Option 			= 	request.form['Option']
		Action 			=	request.form['Action']
		RecordID 		= 	request.form['RecordID']
		RecordList 		= 	RecordID.split()
		Table 			= 	eval(TableName)
		GetPrimaryKey   = 	[key.name for key in inspect(Table).primary_key]
		ListFilterField, TotalFilterField	= 	getControlList("FilterField")
		ListFilterValue, TotalFilterValue 	= 	getControlList("FilterValue")
		ListFieldName,TotalFieldName 		= 	getControlList("FieldName")
		ListNewValue, TotalNewValue 		= 	getControlList("NewValue")
		ListAdvanceFilter,TotalAdvanceFilter = 	getControlList("AdvanceFilter")
		ConditionDic	= 	{}
		FieldNameList 	= 	[]
		NewValueList 	= 	[]
		FilterFieldList = 	[]
		FilterValueList = 	[]
		ConditionList 	= 	[]
		if Action == "Update":
			if Option == 'Yes':
				for i in range(0,TotalFilterField):
					FilterField 	= 	request.form[ListFilterField[i]]
					AdvanceFilter 	= 	request.form[ListAdvanceFilter[i]]
					FilterValue 	= 	request.form[ListFilterValue[i]]
					FilterFieldList.append(FilterField)
					FilterValueList.append(FilterValue)
					ConditionList.append(AdvanceFilter)
					ConditionDic.update({FilterField:TableName})
				for i in range(0,TotalFieldName):
					FieldName 		= 	request.form[ListFieldName[i]]
					NewValue 		= 	request.form[ListNewValue[i]]
					NewValueList.append(NewValue)
					FieldNameList.append(FieldName)
				AdvanceFilterObj	=	getAdvanceFilter(ConditionList,ConditionDic,FilterFieldList,FilterValueList,TableName).all()
				for index,row in enumerate(AdvanceFilterObj):
					Msg 			= "Your updation are affect %s records."%(index+1) 
				Override   			= 		True
				Msg 			   += 		'<br/>Do you want to procceed?'
			else:
				QueryObj 		= 	getFilterObj(TableName,GetPrimaryKey,RecordID).all()
				if len(RecordList) != len(GetPrimaryKey): 
					for index,row in enumerate(QueryObj):
						Msg 			= "Your updation are affect %s records."%(index+1) 
					Override   			= 		True
					Msg 			   += 		'<br/>Do you want to procceed?'
				else:
					for index,row in enumerate(QueryObj):
						Msg 			= "Your updation are affect %s records."%(index+1) 
					Override   			= 		True
					Msg 			   += 		'<br/>Do you want to procceed?'
		if Action == "Delete":
			for i in range(0,TotalFilterField):
				FilterField 	= 	request.form[ListFilterField[i]]
				AdvanceFilter 	= 	request.form[ListAdvanceFilter[i]]
				FilterValue 	= 	request.form[ListFilterValue[i]]
				FilterFieldList.append(FilterField)
				FilterValueList.append(FilterValue)
				ConditionList.append(AdvanceFilter)
				ConditionDic.update({FilterField:TableName})
			DeleteRecord 	=	deleteRecord(Option,FilterValueList,FilterFieldList,ConditionList,ConditionDic,TableName,RecordList,GetPrimaryKey)
			for index,row in enumerate(DeleteRecord):
				Msg 			= 	"Your deletion are affect %s records."%(index+1) 
				Override   		= 	True
				Msg 		   += 	'<br/>Do you want to procceed?'
		return Override,Msg

