from app                    import db
from app.mktcore.wtfimports import *
from .models 				import *
from app.urlregister 		import *

'''This method use with SelectField that use for get all table on system'''
def getAllTable():
	tableList = []
	tableList.append(('','--None--'))
	for table in db.metadata.sorted_tables:
		if 'HIST' not in table.name:
			if 'MKT_FIX_DATA' not in table.name:
				if 'MKT_ALTERTABLE' not in table.name:
					if 'MKT_ALTERFORM' not in table.name:
						tableList.append((table.name, table.name))
	return tableList

'''This method use for get control from multi select'''
def getControlList(ControlID=""):
	controls_list 	= request.form
	ListControl		= [item for item in controls_list if ControlID in item]
	ListControl.sort()
	TotalControl 	= len(ListControl)
	return ListControl,TotalControl

'''This method use for render field of table to new forms'''
def renderFieldName(TableName=""):
	Result 			=	[]
	ResultList 		= 	[]
	class ShowFieldName():
		__tablename__ = TableName
		def __init__(self,Description):
			self.Description = Description
		def getTable(self):
			result = self.Description
			return result
	if TableName:
		ShowFieldName.__tablename__  = TableName
		for FieldName in eval(ShowFieldName.__tablename__).__table__.columns:
			FieldName 		= 	str(FieldName).split('.')[1]
			showFieldName 	= 	ShowFieldName('%s'%FieldName)
			Result.append(showFieldName.getTable())
	return Result[8:]

def getFieldName(TableName=""):
	ResultDic = {}
	class ShowFieldName():
		__tablename__ 	= 	TableName
		def __init__(self,Description):
			self.Description = Description
		def getTable(self):
			result 	=	self.Description
			return result
	if TableName:
		ShowFieldName.__tablename__  = TableName
		for FieldName in eval(ShowFieldName.__tablename__).__table__.columns:
			FieldName 		= 	str(FieldName).split('.')[1]
			showFieldName 	= 	ShowFieldName('%s'%FieldName)
			ResultDic.update({"%s"%showFieldName.getTable():showFieldName.getTable()})
	return jsonify(results = ResultDic)

'''This method use for load field name when select table that use it with QuerySelectField'''
def loadFieldName():
	TableName 	= 	""
	if request.method == 'POST':
		TableName 	= 	request.form["TableName"] if request.form else ""
	if request.method == 'GET':
		if TableName != '__None':
			ID 				= 	g.formID
			QueryINAUObj 	= 	MKT_FIX_DATA_INAU.query.get(ID)
			QueryLiveObj 	= 	MKT_FIX_DATA.query.get(ID)
			if QueryINAUObj:
				TableName 	= 	str(QueryINAUObj.TableName)
			if QueryLiveObj:
				TableName 	= 	str(QueryLiveObj.TableName)
	return getLoadFieldName(TableName)

def getLoadFieldName(TableName=	""):
	class ShowFieldName(db.Model):
		__tablename__ 	= 	"MKT_LOAN_CONTRACT"
		def __init__(self, ID,Description):
			super(ShowFieldName, self).__init__()
			self.ID 			= 	ID
			self.Description 	= 	Description
	Result = [ShowFieldName("__None","--None--")]
	if TableName:
		ShowFieldName.__tablename__  = TableName
		for FieldName in eval(ShowFieldName.__tablename__).__table__.columns:
			FieldName 	= 	str(FieldName).split('.')[1]
			Result.append(ShowFieldName("%s"%(FieldName),"%s"%(FieldName)))
	return Result

'''use for use advance filter'''
def getFilter(Oprs,kwargs):
	Module = __import__("app.urlregister")
	mapConditioneq 	= []
	if kwargs:
		for key in kwargs:
			if Oprs[key]=='EQ':   # ==
				mapConditioneq.append( getattr(getattr(Module,kwargs[key][0][0]),key).in_(kwargs[key][0][1].split()) )
			elif Oprs[key]=='NE': # Not Equal
				ValueSearch = kwargs[key][0][1].split()
				if 'None' in ValueSearch:
					ValueSearch.append('')
				mapConditioneq.append( ~ getattr(getattr(Module,kwargs[key][0][0]),key).in_(ValueSearch) )
			elif Oprs[key]=='BT': # between
				# if kwargs[key][0][1].find('\r') != -1: # the value search is list
				ColLeft  = ''
				ColRight = ''
				for item in kwargs[key][0][1].split():
					if not ColLeft:
						ColLeft = str(item)
					elif not ColRight:
						ColRight = str(item)
				mapConditioneq.append( getattr(getattr(Module,kwargs[key][0][0]),key).between(ColLeft, ColRight) )
			
			elif Oprs[key]=='GT': # > greater than
				if kwargs[key][0][1].find(',') != -1: # the value search is list
					for item in kwargs[key][0][1].split(','):
						mapConditioneq.append( getattr(getattr(Module,kwargs[key][0][0]),key) > str(item) )
				else:
					mapConditioneq.append( getattr(getattr(Module,kwargs[key][0][0]),key) > str(kwargs[key][0][1]) ) 
			
			elif Oprs[key]=='GE': # >= greater than equal	
				if kwargs[key][0][1].find(',') != -1: # the value search is list
					for item in kwargs[key][0][1].split(','):
						mapConditioneq.append( getattr(getattr(Module,kwargs[key][0][0]),key) >= item )
				else:
					mapConditioneq.append( getattr(getattr(Module,kwargs[key][0][0]),key) >= kwargs[key][0][1] ) 

			elif Oprs[key]=='LT':# < Less than
				if kwargs[key][0][1].find(',') != -1: # the value search is list
					for item in kwargs[key][0][1].split(','):
						mapConditioneq.append( getattr(getattr(Module,kwargs[key][0][0]),key) < item )
				else:
					mapConditioneq.append( getattr(getattr(Module,kwargs[key][0][0]),key) < kwargs[key][0][1] ) 
			
			elif Oprs[key]=='LE':# <= Less than equal
				if kwargs[key][0][1].find(',') != -1: # the value search is list
					for item in kwargs[key][0][1].split(','):
						mapConditioneq.append( getattr(getattr(Module,kwargs[key][0][0]),key) <= item )
				else:
					mapConditioneq.append( getattr(getattr(Module,kwargs[key][0][0]),key) <= kwargs[key][0][1] ) 
	return mapConditioneq

'''this method use for delete record'''
def deleteRecord(Option,FilterValueList,FilterFieldList,AdvanceFilterList,ConditionDic,TableName,RecordList,GetPrimaryKey):
	Oprs 			= 	{}
	kwargs 			= 	{}
	PrimaryKeyDic 	= 	{}
	mapCondition 	= 	[]
	Module 			= 	__import__("app.urlregister")
	Table 			= 	eval(TableName)
	if Option == 'Yes':
		for Index,ItemFilter in enumerate(FilterFieldList):
			Oprs.update({ItemFilter:AdvanceFilterList[Index]})
			kwargs.update({ItemFilter:[(ConditionDic[ItemFilter],FilterValueList[Index])]})
		mapCondition 	= 	getFilter(Oprs,kwargs)
		Result 			= 	Table.query.filter(*mapCondition)
	else:
		if len(RecordList) < len(GetPrimaryKey):
			GetPrimaryKey 	= 	GetPrimaryKey[0:len(RecordList)]
		GetFieldName 		= 	renderFieldName(TableName)
		if GetFieldName:
			GetFieldName.append("ID")
			for row in GetFieldName:
				FieldName = row
				PrimaryKeyDic.update({FieldName:TableName})
		if RecordList:
			for Index,Key in enumerate(GetPrimaryKey):
				kwargs.update({Key:[(PrimaryKeyDic[Key],RecordList[Index])]})
		for index,key in reversed(list(enumerate(kwargs))):
			# value = kwargs[key][0][1][0:][(len(kwargs)-1)-index] if len(RecordList) > 1 else kwargs[key][0][1][index-1]
			value 	=	 kwargs[key][0][1]
			mapCondition.append(getattr(getattr(Module,kwargs[key][0][0]),key) == value)
		Result 	= Table.query.filter(*mapCondition)		
	return Result

def getFilterObj(TableName,GetPrimaryKey,RecordID):
	Module 			= 	__import__("app.urlregister")
	kwargs 			= 	{}
	Table  			= 	eval(TableName)
	GetFieldName 	= 	renderFieldName(TableName)
	RecordList 		= RecordID.split()
	mapConditioneq 	= []
	PrimaryKeyDic 	= {}
	if len(RecordList) < len(GetPrimaryKey):
		GetPrimaryKey = GetPrimaryKey[0:len(RecordList)]
	if GetFieldName:
		GetFieldName.append("ID")
		for row in GetFieldName:
			FieldName 	= 	row
			PrimaryKeyDic.update({FieldName:TableName})
	if RecordList:
		for index,Key in enumerate(GetPrimaryKey):
			kwargs.update({Key:[(PrimaryKeyDic[Key],RecordList[index])]})
	for index,key in enumerate(kwargs):
		value 	= 	kwargs[key][0][1]
		mapConditioneq.append(getattr(getattr(Module,kwargs[key][0][0]),key) == value)
	QueryObj 	= Table.query.filter(*mapConditioneq)
	return QueryObj

'''This method use for check ID when insert update and delete'''
def checkInvalidID(TableName,RecordID,NewValueList=""):
	Table 			= 	eval(TableName)
	GetPrimaryKey	= 	[key.name for key in inspect(Table).primary_key]
	RecordList 		= 	RecordID.split()
	Module 			= 	__import__("app.urlregister")
	GetFieldName 	= 	renderFieldName(TableName)
	mapConditioneq 	= 	[]
	PrimaryKeyDic 	= 	{}
	kwargs 			= 	{}
	if len(RecordList) < len(GetPrimaryKey):
		GetPrimaryKey = GetPrimaryKey[0:len(RecordList)]
	if GetFieldName:
		GetFieldName.append("ID")
		for row in GetFieldName:
			FieldName = row
			PrimaryKeyDic.update({FieldName:TableName})
	if RecordList and not NewValueList:
		for Index,Key in enumerate(GetPrimaryKey):
			kwargs.update({Key:[(PrimaryKeyDic[Key],RecordList[Index])]})
	if NewValueList:
		GetPrimaryKey	= 	[key.name for key in inspect(Table).primary_key]
		for Index,Key in enumerate(GetPrimaryKey):
			kwargs.update({Key:[(PrimaryKeyDic[Key],NewValueList[Index])]})
	for index,key in enumerate(kwargs):
		value 	= kwargs[key][0][1]
		mapConditioneq.append(getattr(getattr(Module,kwargs[key][0][0]),key) == value)
	QueryObj 	= Table.query.filter(*mapConditioneq)
	if NewValueList:
		QueryObj 	= QueryObj.first()
	if not QueryObj:
		return True
	return False

'''this method use for advance filter with action equal update when option equal yes'''
def getAdvanceFilter(ConditionList,ConditionDic,FilterFieldList,FilterValueList,TableName):
	kwargs 			= {}
	Oprs 			= {}
	mapCondition 	= []
	Table  = eval(TableName)
	if ConditionList:
		for index,ItemFilter in enumerate(FilterFieldList):
			Oprs.update({ItemFilter:ConditionList[index]})
			kwargs.update({ItemFilter:[(ConditionDic[ItemFilter],FilterValueList[index])]})
		mapCondition 		= 	getFilter(Oprs,kwargs)
		AdvanceFilterObj 	= 	Table.query.filter(*mapCondition)
	return AdvanceFilterObj

