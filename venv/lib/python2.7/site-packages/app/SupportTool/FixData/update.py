from app.mktcore.wtfimports import *
from .models 				import *
from flask 					import g, flash, Markup
from app.urlregister 		import *
import app.tools.mktaudit 	as mktaudit
from app.tools.mktroute		import *
from sqlalchemy.inspection  import inspect
from .fixdatatools 			import *

'''This method use for remove invalid choice on SelectField or QuerySelectField'''
def custom_RemoveValidChoice(form, field):
	field.errors[:] = []

def process(TableName,RecordID,Status,Option,ID):
	Table 		= 	eval(TableName)
	RecordList 		= 	RecordID.split()
	ListNewValue, TotalNewValue 	= 	getControlList("NewValue")
	ListFieldName, TotalFieldName 	= 	getControlList("FieldName")
	ListOldValue, TotalOldValue 	= 	getControlList("OldValue")
	GetPrimaryKey   =	[key.name for key in inspect(Table).primary_key]
	mktdb.deleteRecord(MKT_FIX_DATA_FILTER,[MKT_FIX_DATA_FILTER.ID == ID])
	QueryObj 		= 	getFilterObj(TableName,GetPrimaryKey,RecordID)
	if Option == 'No':
		QueryObj 		= 	QueryObj.first()
		for i in range(0,TotalFieldName):
			NewValue 	= 	request.form[ListNewValue[i]] if request.form[ListNewValue[i]] != "" else request.form[ListOldValue[i]]
			FieldName 	= 	request.form[ListFieldName[i]]
			OldValue 	= 	getattr(QueryObj,FieldName)
			if NewValue != OldValue:
				if NewValue != OldValue:
					FixDataHistObj = {
							'ID':"%s"%(ID)+"%s"%(i),
						 	'FixDataID': ID,
							'PK1': RecordList[0] if len(RecordList) >= 1 else "",
							'PK2': RecordList[1] if len(RecordList) >= 2 else "",
							'PK3': RecordList[2] if len(RecordList) >= 3 else "",
							'PK4': RecordList[3] if len(RecordList) >= 4 else "",
							'PK5': RecordList[4] if len(RecordList) >= 5 else "",
							'TableName':TableName,
							'Action':"Update",
							'FieldName':FieldName,
							'OldValue':OldValue,
							'NewValue':NewValue
						}
					mktdb.insertTable(MKT_FIX_DATA_HISTORY,FixDataHistObj)
				setattr(QueryObj,FieldName,NewValue)
		mktdb.deleteRecord(MKT_FIX_DATA_INAU,[MKT_FIX_DATA_INAU.ID == ID])
		mktdb.deleteRecord(MKT_FIX_DATA_DE_INAU,[MKT_FIX_DATA_DE_INAU.ID == ID])
	return Status
class FRM_UPDATE(exform):
	TableName 		=  SelectField(requiredlabel('Table Name', '*'),
							choices = getAllTable(),
							coerce = str,
							default = '__None',
							validators = [validators.Required()]
						)
	Action 			=	TextField("Action",default="Update")
	Option 			= 	SelectField(requiredlabel("Advance Filter","*"),
							validators = [validators.Required()],
							choices = [
										('No','No'),
										('Yes','Yes')
									  ],
							coerce=str)
	RecordID 		=	TextField('Record ID')
	FixDataID 		=	TextField(requiredlabel("ID","*"),description='2-Update Value',validators=[validators.Required()])
	FilterID 		= 	TextField("ID",description='1-Filter')
	FilterField 	= 	QuerySelectField('Filter Field',
							 query_factory=loadFieldName, 
							 get_label=u'Description',
							 allow_blank=True,
							  blank_text="--None--",
							 default="__None",
							 validators=[custom_RemoveValidChoice],
							 description="1-Filter")
	AdvanceFilter 	=	SelectField("Filter",
							choices = [
										('__None','--None--'),
										('EQ','Equal'),
										('NE','Not Equal'),
										('GT','Greater Than'),
										('LT','Less Than'),
										('GE','Greater Than or Equal'),
										('LE','Less Than or Equal'),
										('BT','Between')
									  ],
							coerce =str,
							description='1-Filter')
	FilterValue 	= 	TextField("Filter Value",description='1-Filter')
	FieldName 		= 	QuerySelectField('Field Name',
							 query_factory=loadFieldName, 
							 get_label=u'Description',
							 allow_blank=True,
							 default="__None",
							 blank_text="--None--",
							 validators=[custom_RemoveValidChoice],
							 description="2-Update Value")
	OldValue 		=	TextField("Old Value",description='2-Update Value')
	NewValue 		=	TextField("New Value",description='2-Update Value')

	@staticmethod
	def setVisible():
		control_list 	= []
		if request.method == 'GET':
			ID 			= 	g.formID
			QueryObj 	= 	MKT_FIX_DATA_INAU.query.get(ID)
			if not QueryObj:
				QueryObj 	= 	MKT_FIX_DATA.query.get(ID)
			if QueryObj.Option == 'No':
				control_list	=	['FixDataID','AdvanceFilter','FilterField','FilterValue','FilterID']
			else:
				control_list	=	['FixDataID','RecordID','OldValue','FilterID']
		return control_list
	@staticmethod
	def setDisable():
		control_list 	=	[]
		if request.method == 'GET':
			ID 			= 	g.formID
			QueryObj 	= 	MKT_FIX_DATA_INAU.query.get(ID)
			if not QueryObj:
				QueryObj = MKT_FIX_DATA.query.get(ID)
			if QueryObj.Option == 'No':
				control_list 	= 	['OldValue','FieldName']
			else:
				control_list 	= 	[]
		return control_list

	@staticmethod
	def isMultiValue():
		if request.method 	== 'GET':
			ID 			= 	g.formID
			QueryObj 	= 	MKT_FIX_DATA_INAU.query.get(ID)
			if not QueryObj:
				QueryObj 	= 	MKT_FIX_DATA.query.get(ID)
			if QueryObj.Option == 'No':
				return ['2-Update Value']
			else:
				return ['1-Filter','2-Update Value']
	@staticmethod			
	def beforeInsert():
		AuthLevel				=	g.getNAuthorize
		ID 						= 	request.form['ID']
		Status					=	True
		if AuthLevel == 0:
			RecordID 			= 	request.form['RecordID']
			TableName			=	request.form['TableName']
			Option 				= 	request.form['Option']
			if Status:
				Status 			= 	process(TableName,RecordID,Status,Option,ID)
		return Status
	
	@staticmethod
	def validate_NewValue(form,field):
		ListNewValue, TotalNewValue 	= getControlList("NewValue")
		ListOldValue, TotalOldValue 	= getControlList("OldValue")
		for i in range(0,TotalNewValue):
			NewValue 	= 	request.form[ListNewValue[i]]
			OldValue 	= 	request.form[ListOldValue[i]]
			if NewValue == 	OldValue and NewValue != "":
				raise ValidationError("New value and old value must be difference.")

	@staticmethod
	def IsAcceptOverrideINAU():
		ID 			 	= 	g.formID
		Msg 			= 	""
		FixDataObj 		= 	MKT_FIX_DATA_INAU.query.get(ID)
		TableName 		= 	FixDataObj.TableName
		Option 			= 	FixDataObj.Option
		RecordID 		= 	FixDataObj.RecordID
		RecordList 		= 	RecordID.split()
		Table 			= 	eval(TableName)
		GetPrimaryKey   = 	[key.name for key in inspect(Table).primary_key]
		FixDataDeObj 	= 	MKT_FIX_DATA_DE_INAU.query.filter(MKT_FIX_DATA_DE_INAU.ID == ID)
		FilterObj 		= 	MKT_FIX_DATA_FILTER_INAU.query.filter(MKT_FIX_DATA_FILTER_INAU.ID == ID)
		ConditionDic	= 	{}
		FieldNameList 	= 	[]
		NewValueList 	= 	[]
		FilterFieldList = 	[]
		FilterValueList = 	[]
		ConditionList 	= 	[]
		if Option == 'Yes':
			for row in FilterObj:
				FilterField 	= 	row.FilterField
				Condition 		= 	row.AdvanceFilter
				FilterValue 	= 	row.FilterValue
				FilterValueList.append(FilterValue)
				FilterFieldList.append(FilterField)
				ConditionList.append(Condition)
				ConditionDic.update({FilterField:TableName})
			for row in FixDataDeObj:
				FieldName 		= 	row.FieldName
				NewValue 		= 	row.NewValue
				FieldNameList.append(FieldName)
				NewValueList.append(NewValue)
			AdvanceFilterObj	=	getAdvanceFilter(ConditionList,ConditionDic,FilterFieldList,FilterValueList,TableName).all()
			for index,row in enumerate(AdvanceFilterObj):
				Msg 			= "Your updation are affect %s records."%(index+1) 
			Override   			= 		True
			Msg 			   += 		'<br/>Do you want to procceed?'
		else:
			QueryObj 		= 	getFilterObj(TableName,GetPrimaryKey,RecordID).all()
			if len(RecordList) != len(GetPrimaryKey): 
				for index,row in enumerate(QueryObj):
					Msg 			= "Your updation are affect %s records."%(index+1) 
				Override   			= 		True
				Msg 			   += 		'<br/>Do you want to procceed?'
			else:
				for index,row in enumerate(QueryObj):
					Msg 			= "Your updation are affect %s records."%(index+1) 
				Override   			= 		True
				Msg 			   += 		'<br/>Do you want to procceed?'
		return Override,Msg

	@staticmethod
	def beforeAuthorize():
		ID 				= 	g.formID
		FixDataObj 		= 	MKT_FIX_DATA_INAU.query.get(ID)
		TableName   	= 	FixDataObj.TableName
		Table 			= 	eval(TableName)
		RecordID 		= 	FixDataObj.RecordID
		Action 			= 	FixDataObj.Action
		Option 			= 	FixDataObj.Option
		FixDataDeObj 	= 	MKT_FIX_DATA_DE_INAU.query.filter(MKT_FIX_DATA_DE_INAU.ID == ID).all()
		FilterObj 		= 	MKT_FIX_DATA_FILTER_INAU.query.filter(MKT_FIX_DATA_FILTER_INAU.ID == ID).all()
		GetPrimaryKey	= 	[key.name for key in inspect(Table).primary_key]
		RecordList 		= 	RecordID.split()
		QueryObj 		= 	getFilterObj(TableName,GetPrimaryKey,RecordID)
		Oprs 			= 	{}
		kwargs 			= 	{}
		TableHist 		= 	TableName+"_HIST"
		ConditionDic	= 	{}
		FieldNameList 	= 	[]
		NewValueList 	= 	[]
		FilterFieldList = 	[]
		FilterValueList = 	[]
		ConditionList 	= 	[]
		ConditionDic 	= 	{}
		mapCondition 	= 	[]
		OldValue 		= 	""
		if FixDataDeObj:
			if Option == 'No':
				if len(RecordList) != len(GetPrimaryKey): 
					for row in FixDataDeObj:
						NewValue 		= 	row.NewValue if row.NewValue != "" else row.OldValue
						FieldName 		= 	row.FieldName
						for index,data in enumerate(QueryObj):
							OldValue 	= 	getattr(data,FieldName)
							FixDataHistObj = {
									'ID':"%s"%(ID)+"%s"%(index),
								 	'FixDataID': ID,
									'PK1': RecordList[0] if len(RecordList) >= 1 else "",
									'PK2': RecordList[1] if len(RecordList) >= 2 else "",
									'PK3': RecordList[2] if len(RecordList) >= 3 else "",
									'PK4': RecordList[3] if len(RecordList) >= 4 else "",
									'PK5': RecordList[4] if len(RecordList) >= 5 else "",
									'TableName':TableName,
									'Action':Action,
									'FieldName':FieldName,
									'OldValue':OldValue,
									'NewValue':NewValue
								}
							mktdb.insertTable(MKT_FIX_DATA_HISTORY,FixDataHistObj)
							setattr(data,FieldName,NewValue)
				else:
					QueryObj 		= 	QueryObj.first()
					for index,row in enumerate(FixDataDeObj):
						NewValue 	= 	row.NewValue if row.NewValue != "" else row.OldValue
						FieldName 	= 	row.FieldName
						OldValue 	= 	getattr(QueryObj,FieldName)
						if NewValue != OldValue:
							FixDataHistObj = {
									'ID':"%s"%(ID)+"%s"%(index),
								 	'FixDataID': ID,
									'PK1': RecordList[0] if len(RecordList) >= 1 else "",
									'PK2': RecordList[1] if len(RecordList) >= 2 else "",
									'PK3': RecordList[2] if len(RecordList) >= 3 else "",
									'PK4': RecordList[3] if len(RecordList) >= 4 else "",
									'PK5': RecordList[4] if len(RecordList) >= 5 else "",
									'TableName':TableName,
									'Action':Action,
									'FieldName':FieldName,
									'OldValue':OldValue,
									'NewValue':NewValue
								}
							mktdb.insertTable(MKT_FIX_DATA_HISTORY,FixDataHistObj)
						setattr(QueryObj,FieldName,NewValue)
			else:		
				for row in FilterObj:
					FilterField 	= 	row.FilterField
					Condition 		= 	row.AdvanceFilter
					FilterValue 	= 	row.FilterValue
					FilterValueList.append(FilterValue)
					FilterFieldList.append(FilterField)
					ConditionList.append(Condition)
					ConditionDic.update({FilterField:TableName})
				for row in FixDataDeObj:
					FieldName 		= 	row.FieldName
					NewValue 		= 	row.NewValue
					FieldNameList.append(FieldName)
					NewValueList.append(NewValue)
				AdvanceFilterObj	=	getAdvanceFilter(ConditionList,ConditionDic,FilterFieldList,FilterValueList,TableName).all()
				for Index,data in enumerate(AdvanceFilterObj):
					for index,row in enumerate(NewValueList):
						OldValue = getattr(data,FieldNameList[index])
						FieldName = FieldNameList[index] if index == 0 else FieldNameList[index]
						FixDataHistObj = {
									'ID':"%s"%(ID)+"%s"%(Index)+"%s"%(index),
								 	'FixDataID': ID,
									'PK1': RecordList[0] if len(RecordList) >= 1 else "",
									'PK2': RecordList[1] if len(RecordList) >= 2 else "",
									'PK3': RecordList[2] if len(RecordList) >= 3 else "",
									'PK4': RecordList[3] if len(RecordList) >= 4 else "",
									'PK5': RecordList[4] if len(RecordList) >= 5 else "",
									'TableName':TableName,
									'Action':Action,
									'FieldName':FieldNameList[index],
									'OldValue':OldValue,
									'NewValue': NewValueList[index]
								}
						mktdb.insertTable(MKT_FIX_DATA_HISTORY,FixDataHistObj)
						setattr(data,FieldNameList[index],row)
		return True
	@staticmethod
	def redirectAfterInsert():
		return "/Morakot/FixData/"