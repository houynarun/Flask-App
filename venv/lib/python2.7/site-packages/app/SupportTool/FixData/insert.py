from app.mktcore.wtfimports import *
from .models 				import *
from flask 					import g, flash, Markup
import app.tools.mktaudit 	as mktaudit
import app.tools.user 		as mktuser
from app.tools.mktroute		import *
from sqlalchemy.inspection	import inspect
from app.AutoID.models 		import *
import ast
from .fixdatatools 			import *
from app.urlregister 		import *

def getControlList(ControlID=""):
	controls_list 	= request.form
	ListControl		= [item for item in controls_list if ControlID in item]
	ListControl.sort()
	TotalControl 	= len(ListControl)
	return ListControl,TotalControl

def process(TableName,RecordID,Status,ID):
	InsertData = {
					'Branch'	  : 	mktuser.getCurrentBranch(),
					'Status'	  :  	'AUTH',
					'Curr' 		  :  	0,
					'Inputter' 	  :		mktuser.getUser().ID,
					'Createdon'   : 	mktdate.getDateTimeNow(),
					'Authorizer'  : 	mktuser.getUser().ID,
					'Authorizeon' : 	mktdate.getDateTimeNow(),
					'ID'		  :		RecordID
				 }
	Table 		= 	eval(TableName)
	ListFieldName, TotalFieldName	= 	getControlList("FieldName")
	ListNewValue, TotalNewValue 	= 	getControlList("NewValue")
	for i in range(0,TotalFieldName):
		FieldName 	= 	request.form[ListFieldName[i]]
		NewValue 	= 	request.form[ListNewValue[i]]
		InsertData.update({"%s"%FieldName:NewValue})
	mktdb.insertTable(Table,InsertData)
	mktdb.deleteRecord(MKT_FIX_DATA_INAU,[MKT_FIX_DATA_INAU.ID == ID])
	mktdb.deleteRecord(MKT_FIX_DATA_DE_INAU,[MKT_FIX_DATA_DE_INAU.ID == ID])
	db.session.commit()
	return Status

class FRM_INSERT(exform):
	TableName   	=  SelectField(requiredlabel('Table Name', '*'),
							choices = getAllTable(),
							coerce = str,
							default = '__None',
							validators = [validators.Required()]
						)
	Action 			=   TextField("Action",default="Insert")
	RecordID 		= 	TextField(requiredlabel('Record ID', '*'), validators=[validators.Required()])
	Option 			= 	SelectField(requiredlabel("Option","*"),
							validators = [validators.Required()],
							choices = [
										('No','No'),
										('Yes','Yes')
									  ],
							coerce=str)
	FixDataID 			= 	TextField(requiredlabel("ID","*"),description='1-Fix Data Detail',validators=[validators.Required()])
	FieldName 		= 	TextField(requiredlabel("Field Name","*"),description='1-Fix Data Detail',validators=[validators.Required()])
	OldValue 		=	TextField("Old Value",default="",description='1-Fix Data Detail')
	NewValue 		=	TextField("New Value",description='1-Fix Data Detail')

	@staticmethod
	def setVisible():
		control_list 	=	['FixDataID','OldValue','Option']
		return control_list
	@staticmethod
	def setDisable():
		control_list 	= 	['FieldName']
		return control_list
	@staticmethod
	def isMultiValue():
		return ['1-Fix Data Detail']
	@staticmethod
	def beforeInsert():
		AuthLevel				=	g.getNAuthorize
		Status					=	True
		ID 						= 	request.form['ID']
		if AuthLevel == 0:
			RecordID 			= 	request.form['RecordID']
			TableName			=	request.form['TableName']
			if Status:
				Status  		= 	process(TableName,RecordID,Status,ID)
		return Status
	@staticmethod
	def beforeAuthorize():
		ID 			= 	g.formID
		Status 		= 	True
		FixDataObj 	= 	MKT_FIX_DATA_INAU.query.get(ID)
		FixDataDeObj= 	MKT_FIX_DATA_DE_INAU.query.filter(MKT_FIX_DATA_DE_INAU.ID == ID).all()
		TableName 	= 	FixDataObj.TableName
		RecordID 	= 	FixDataObj.RecordID
		InsertData 	= 	{
							'Branch'	  : 	mktuser.getCurrentBranch(),
							'Status'	  :  	'AUTH',
							'Curr' 		  :  	0,
							'Inputter' 	  :		FixDataObj.Inputter,
							'Createdon'   : 	FixDataObj.Createdon,
							'Authorizer'  : 	mktuser.getUser().ID,
							'Authorizeon' : 	mktdate.getDateTimeNow(),
							'ID'		  :		RecordID
						}
		if Status:
			for row in FixDataDeObj:
				FieldName 		= row.FieldName
				NewValue 		= row.NewValue
				InsertData.update({"%s"%FieldName:NewValue})
			mktdb.insertTable(eval(TableName),InsertData)
			db.session.commit()
		return Status
		

	def validate_NewValue(form, field):
		ID 				= 	request.form['ID']
		TableName 		= 	request.form['TableName']
		RecordID 		= 	request.form['RecordID']
		NewValueList 	= 	[RecordID]
		ListNewValue, TotalNewValue = getControlList("NewValue")
		for i in range(0,TotalNewValue):
			NewValue 	= 	request.form[ListNewValue[i]]
			NewValueList.append(NewValue)
		InvalidID  		= 	checkInvalidID(TableName,RecordID,NewValueList) 
		for i in range(0,TotalNewValue):
			if not InvalidID:
				raise ValidationError('This record already existed.')
	@staticmethod
	def redirectAfterInsert():
		return "/Morakot/FixData/"