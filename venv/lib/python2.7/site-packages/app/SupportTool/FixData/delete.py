from app.mktcore.wtfimports import *
from .models 				import *
from flask 					import g, flash, Markup
from app.urlregister 		import *
import app.tools.mktaudit 	as mktaudit
from app.tools.mktroute		import *
from sqlalchemy 			import *
from sqlalchemy.orm 		import *
from sqlalchemy.inspection  import inspect
from .fixdatatools 			import *
import app.tools.user 		as mktuser
import app.tools.mktdate 	as mktdate

'''This route use for paste --None-- Value to FieldName when select on FilterField'''
@app.route('/Morakot/PasteValueToFieldName', methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def pasteFieldName():
	FieldName 		= 	'__None'
	FieldNameDesc 	= 	'--None--'
	return jsonify(FieldName 		=	 FieldName,
				   FieldNameDesc 	= 	 FieldNameDesc)

def custom_RemoveValidChoice(form, field):
	field.errors[:] = []

def process(TableName,RecordID,Status,Option):
	Table 		= 	eval(TableName)
	ListFilterField, TotalFilterField	= 	getControlList("FilterField")
	ListAdvanceFilter, TotalAdvanceFilter 	= 	getControlList("AdvanceFilter")
	ListFilterValue, TotalFilterValue 	= 	getControlList("FilterValue")
	GetPrimaryKey   =	[key.name for key in inspect(Table).primary_key]
	FilterFieldList = 	[]
	FilterValueList	= 	[]
	ConditionDic 	= 	{}
	AdvanceFilterList = []
	RecordList 		= 	RecordID.split()
	for i in range(0,TotalFilterField):
		FilterField = 	request.form[ListFilterField[i]]
		AdvanceFilter = request.form[ListAdvanceFilter[i]]
		FilterValue = request.form[ListFilterValue[i]]
		FilterValueList.append(FilterValue)
		FilterFieldList.append(FilterField)
		ConditionDic.update({FilterField:TableName})
		AdvanceFilterList.append(AdvanceFilter)
	DeleteRecord 	=	deleteRecord(Option,FilterValueList,FilterFieldList,AdvanceFilterList,ConditionDic,TableName,RecordList,GetPrimaryKey).delete(synchronize_session='fetch')
	return Status

class FRM_DELETE(exform):
	TableName   	=  SelectField(requiredlabel('Table Name', '*'),
							choices = getAllTable(),
							coerce = str,
							default = '__None',
							validators = [validators.Required()]
						)
	FixDataID 			= 	TextField("ID",default="",description='2-Update Value')
	FilterID 			= 	TextField("ID",default="",description='1-Filter')
	FilterField 	= 	QuerySelectField('Filter Field',
							 query_factory=loadFieldName, 
							 get_label=u'Description',
							 allow_blank=True,
							  blank_text="--None--",
							 default="__None",
							 description="1-Filter",
							 validators=[custom_RemoveValidChoice],
							 )
	AdvanceFilter 	= SelectField("Filter", 
								choices=[('','--None--'),
										('EQ','Equal'),
										('NE','Not Equal'),
										('GT','Greater Than'),
										('LT','Less Than'),
										('GE','Greater Than or Equal'),
										('LE','Less Than or Equal'),
										('BT','Between')],
							 	coerce=str, description="1-Filter")
	FilterValue 	=	TextField("Filter Value",description='1-Filter')
	FieldName 		= 	TextField("Field Name",default="",description='2-Update Value')
	OldValue 		=	TextField("Old Value",default="",description='2-Update Value')
	NewValue 		=	TextField("Value",default="",description='2-Update Value')
	Action 			=   TextField("Action",default="Delete")
	Option 			= 	SelectField(requiredlabel("Advance Filter","*"),
							validators = [validators.Required()],
							choices = [
										('No','No'),
										('Yes','Yes')
									  ],
							coerce=str)
	RecordID 		= 	TextField('Record ID')

	@staticmethod
	def setVisible():
		control_list 	= []
		if request.method == 'GET':
			ID 			= 	g.formID
			QueryObj 	= 	MKT_FIX_DATA_INAU.query.get(ID)
			if not QueryObj:
				QueryObj 	= 	MKT_FIX_DATA.query.get(ID)
			if QueryObj.Option == 'Yes':
				control_list	=	['FixDataID','RecordID','NewValue','OldValue','FieldName','FilterID']
			else:
				control_list	=	['FixDataID','NewValue','AdvanceFilter','OldValue','FieldName','FilterField','FilterValue','FilterID']
		else:
			control_list	=	['FixDataID','OldValue','Action','Option','RecordID','FilterID']
		return control_list

	@staticmethod
	def isMultiValue():
		if request.method == 'GET':
			ID 			= 	g.formID
			QueryObj 	= 	MKT_FIX_DATA_INAU.query.get(ID)
			if not QueryObj:
				QueryObj 	= 	MKT_FIX_DATA.query.get(ID)
			if QueryObj.Option == 'Yes':
				return ['1-Filter']
			else:
				return []
	def validate_RecordID(form,field):
		TableName		= request.form['TableName']
		Table 			= eval(TableName)
		PrimaryValue 	= ""
		RecordID 		= request.form['RecordID']
		RecordList 		= RecordID.split()
		GetPrimaryKey	= [key.name for key in inspect(Table).primary_key]
		InvalidID 		= checkInvalidID(TableName,RecordID)
		if InvalidID:
			raise ValidationError("Invalid Record ID.")

	@staticmethod
	def beforeInsert():
		AuthLevel				=	g.getNAuthorize
		Status					=	True
		if AuthLevel == 0:
			RecordID 			= 	request.form['RecordID']
			TableName			=	request.form['TableName']
			Option 				= 	request.form['Option']
			if Status:
				Status  		= 	process(TableName,RecordID,Status,Option)
		return Status
	@staticmethod
	def beforeAuthorize():
		ID 				= 	g.formID
		FixDataObj 		=	MKT_FIX_DATA_INAU.query.get(ID)
		Option 			= 	FixDataObj.Option
		FixDataDeObj	= 	MKT_FIX_DATA_DE_INAU.query.filter(MKT_FIX_DATA_DE_INAU.ID == ID)
		FilterDataObj 	= 	MKT_FIX_DATA_FILTER_INAU.query.filter(MKT_FIX_DATA_FILTER_INAU.ID == ID)
		TableName 		= 	FixDataObj.TableName
		RecordID 		= 	FixDataObj.RecordID
		RecordList 		= 	RecordID.split()
		Table 	 		= 	eval(TableName)
		GetPrimaryKey   =	[key.name for key in inspect(Table).primary_key]
		FilterFieldList = 	[]
		FilterValueList	= 	[]
		ConditionDic 	= 	{}
		AdvanceFilterList = []
		for index,row in enumerate(FilterDataObj):
			FilterField 	= 	row.FilterField
			AdvanceFilter	= 	row.AdvanceFilter
			FilterValue 	= 	row.FilterValue
			FilterValueList.append(FilterValue)
			FilterFieldList.append(FilterField)
			ConditionDic.update({FilterField:TableName})
			AdvanceFilterList.append(AdvanceFilter)
		DeleteRecord 	=	deleteRecord(Option,FilterValueList,FilterFieldList,AdvanceFilterList,ConditionDic,TableName,RecordList,GetPrimaryKey).delete(synchronize_session='fetch')
		return True
	@staticmethod																																													
	def IsAcceptOverrideINAU():
		ID 			 	= 	g.formID
		Msg 			= 	""
		Override   		= 	False
		FixDataObj 		= 	MKT_FIX_DATA_INAU.query.get(ID)
		TableName 		= 	FixDataObj.TableName
		Option 			= 	FixDataObj.Option
		RecordID 		= 	FixDataObj.RecordID
		RecordList 		= 	RecordID.split()
		Table 			= 	eval(TableName)
		GetPrimaryKey   = 	[key.name for key in inspect(Table).primary_key]
		FixDataDeObj 	= 	MKT_FIX_DATA_DE_INAU.query.filter(MKT_FIX_DATA_DE_INAU.ID == ID)
		FilterDataObj 	= 	MKT_FIX_DATA_FILTER_INAU.query.filter(MKT_FIX_DATA_FILTER_INAU.ID == ID)
		FilterFieldList = 	[]
		FilterValueList	= 	[]
		ConditionDic 	= 	{}
		AdvanceFilterList = []
		for index,row in enumerate(FilterDataObj):
			FilterField 	= 	row.FilterField
			AdvanceFilter	= 	row.AdvanceFilter
			FilterValue 	= 	row.FilterValue
			FilterValueList.append(FilterValue)
			FilterFieldList.append(FilterField)
			AdvanceFilterList.append(AdvanceFilter)
			ConditionDic.update({FilterField:TableName})
		DeleteRecord 	=	deleteRecord(Option,FilterValueList,FilterFieldList,AdvanceFilterList,ConditionDic,TableName,RecordList,GetPrimaryKey)
		for index,row in enumerate(DeleteRecord):
			Msg 			= "Your deletion are affect %s records."%(index+1) 
		Override   			= 		True
		Msg 			   += 		'<br/>Do you want to procceed?'
		return Override,Msg
	@staticmethod
	def hotField():
		hotfield 		= []
		fielddisplay 	= "$('#FieldName').select2('data', {'id':data['FieldName'],'text':data['FieldNameDesc']})"
		varname 		= "FilterField:$('#FilterField').val()"
		fun 			= ["FilterField", varname, fielddisplay, "/Morakot/PasteValueToFieldName", "change"]
		hotfield.append(fun)
		return hotfield

