from app.mktcore.imports import *
from .account       import *
from .contract      import *
from app.AssetClass.models import *
from app.ConsolBalance.models import *
from app.Journal.models import *
from app.Category.models import *
import app.tools.mktaccounting            as mktaccounting
import app.tools.mktdate    as mktdate
from .provision              import *
from .journalchecking        import *


from app.SupportTool.FixData.views        import *


registerCRUD(admin, '/FixAccount', 'FixAccount', FRM_FIX_ACCOUNT, [MKT_FIX_ACCOUNT])
registerCRUD(admin, '/FixLoanContract', 'FixLoanContract', FRM_FIX_LOAN_CONTRACT, [MKT_FIX_LOAN_CONTRACT])


@app.route("/Morakot/FixConsolBalance", methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def fixConsolBalance():
    try:
        BranchObj   =   MKT_BRANCH.query
        if request.method == 'POST':
            Branch  =   request.form['Branch']
            Period  =   request.form['Period']
            print Branch
            if Period == '1':
                generateCurrentMonthConsole(Branch)
            else:
                generateCurrentPrevMonthConsole(Branch)
            flash('Consol Balance Current Month has been updated completely')

        return render_template('supporttool/consol.html', BranchObj=BranchObj)
    
    except Exception as e:
        raise 

def generateCurrentMonthConsole(Branch):
    try:
        DateObj     =   mktdate.getBankDateObj()
        LastMonthEnd=   DateObj.LastMonthEnd
        JournalObj  =   MKT_JOURNAL.query.filter(MKT_JOURNAL.TransactionDate > LastMonthEnd).filter(MKT_JOURNAL.Branch==Branch)
        ConsoleObj  =   MKT_CONSOL_BALANCE.query.filter(MKT_CONSOL_BALANCE.Branch==Branch)
        BalTypeObj  =   MKT_CATEGORY.query
        Dict        =   {}
        Dict1       =   {}
        AccSetting          =   mktsetting.getAccSetting()

        for j in JournalObj:
            BalType =   BalTypeObj.get(j.CategoryID)
            BalType =   BalType.BalanceType
             
            if BalType == j.DebitCredit:
                Dict.update({j.GL_KEYS:Dict.get(j.GL_KEYS,0)+j.Amount}) 
                Dict1.update({j.GL_KEYS:Dict1.get(j.GL_KEYS,0)+j.LCYAmount}) 
            else:
                Dict.update({j.GL_KEYS:Dict.get(j.GL_KEYS,0)-j.Amount}) 
                Dict1.update({j.GL_KEYS:Dict1.get(j.GL_KEYS,0)-j.LCYAmount}) 


        # print Dict
        for key, value in Dict.iteritems():
            ConsoleRecord = ConsoleObj.filter(MKT_CONSOL_BALANCE.ID==key).first()
            print ConsoleRecord.Branch,key,value
            
            ConsoleRecord.Balance       = (ConsoleRecord.Balance - ConsoleRecord.CurrentMonthBal)+value  
            ConsoleRecord.YTDBal        = (ConsoleRecord.YTDBal - ConsoleRecord.CurrentMonthBal)+value  
            ConsoleRecord.CurrentMonthBal = value
            db.session.add(ConsoleRecord)
        
        for key1, value1 in Dict1.iteritems():
            ConsoleRecord = ConsoleObj.filter(MKT_CONSOL_BALANCE.ID==key1).first()

            CurrentRate     =   Decimal(mktaccounting.getReportingRate(ConsoleRecord.Currency,SystemDate))
            Category        =   key1.split('.')[0]
            BSAccount       =   mktaccounting.isBSAccount(AccSetting,Category)

            if BSAccount:
                ConsoleRecord.LCYBalance    = ConsoleRecord.Balance * CurrentRate
                ConsoleRecord.LCYYTDBal     = ConsoleRecord.YTDBal * CurrentRate
                ConsoleRecord.LCYCurrentMonthBal = ConsoleRecord.CurrentMonthBal * CurrentRate

            else:
                ConsoleRecord.LCYBalance    = (ConsoleRecord.LCYBalance - ConsoleRecord.LCYCurrentMonthBal)+value1  
                ConsoleRecord.LCYYTDBal     = (ConsoleRecord.LCYYTDBal - ConsoleRecord.LCYCurrentMonthBal)+value1  
                ConsoleRecord.LCYCurrentMonthBal = value1  
            db.session.add(ConsoleRecord)


        db.session.commit()

    except Exception as e:
        raise



def generateCurrentPrevMonthConsole(Branch):
    try:
        DateObj             =   mktdate.getBankDateObj()
        SystemDate          =   DateObj.SystemDate
        LastMonthEnd        =   DateObj.LastMonthEnd
        PrevLastMonthEnd    =   DateObj.PrevLastMonthEnd

        AccSetting          =   mktsetting.getAccSetting()
        # RevaluationCat      =   AccSetting.RevCatType.split()

        JournalObj  =   MKT_JOURNAL.query.\
                        filter(MKT_JOURNAL.TransactionDate > PrevLastMonthEnd).\
                        filter(MKT_JOURNAL.TransactionDate <= LastMonthEnd).\
                        filter(MKT_JOURNAL.Branch==Branch)
        
        ConsoleObj  =   MKT_CONSOL_BALANCE.query.filter(MKT_CONSOL_BALANCE.Branch==Branch)
        BalTypeObj  =   MKT_CATEGORY.query
        Dict        =   {}
        Dict1       =   {}

        for j in JournalObj:
            BalType =   BalTypeObj.get(j.CategoryID)
            BalType =   BalType.BalanceType
             
            if BalType == j.DebitCredit:
                Dict.update({j.GL_KEYS:Dict.get(j.GL_KEYS,0)+j.Amount}) 
                Dict1.update({j.GL_KEYS:Dict1.get(j.GL_KEYS,0)+j.LCYAmount}) 
            else:
                Dict.update({j.GL_KEYS:Dict.get(j.GL_KEYS,0)-j.Amount}) 
                Dict1.update({j.GL_KEYS:Dict1.get(j.GL_KEYS,0)-j.LCYAmount}) 


        # print Dict
        for key, value in Dict.iteritems():
            ConsoleRecord = ConsoleObj.filter(MKT_CONSOL_BALANCE.ID==key).first()
            print ConsoleRecord.Branch,key,value
            
            ConsoleRecord.Balance       = (ConsoleRecord.Balance - ConsoleRecord.CurrentPrevMonthBal)+value  
            ConsoleRecord.YTDBal        = (ConsoleRecord.YTDBal - ConsoleRecord.CurrentPrevMonthBal)+value  
            ConsoleRecord.PrevMonthBal        = (ConsoleRecord.PrevMonthBal - ConsoleRecord.CurrentPrevMonthBal)+value  
            ConsoleRecord.CurrentPrevMonthBal = value  
            db.session.add(ConsoleRecord)
        
        for key1, value1 in Dict1.iteritems():
            ConsoleRecord   =   ConsoleObj.filter(MKT_CONSOL_BALANCE.ID==key1).first()
            CurrentRate     =   Decimal(mktaccounting.getReportingRate(ConsoleRecord.Currency,SystemDate))
            PreviousRate    =   Decimal(mktaccounting.getReportingRate(ConsoleRecord.Currency,LastMonthEnd))
            Category        =   key1.split('.')[0]
            BSAccount       =   mktaccounting.isBSAccount(AccSetting,Category)

            if BSAccount:
                ConsoleRecord.LCYBalance        =   ConsoleRecord.Balance * CurrentRate
                ConsoleRecord.LCYYTDBal         =   ConsoleRecord.YTDBal * CurrentRate
                ConsoleRecord.LCYPrevMonthBal   =   ConsoleRecord.PrevMonthBal * PreviousRate
                ConsoleRecord.LCYCurrentPrevMonthBal    =   ConsoleRecord.CurrentPrevMonthBal * PreviousRate

            else:
                ConsoleRecord.LCYBalance    = (ConsoleRecord.LCYBalance - ConsoleRecord.LCYCurrentPrevMonthBal)+value1  
                ConsoleRecord.LCYYTDBal     = (ConsoleRecord.LCYYTDBal - ConsoleRecord.LCYCurrentPrevMonthBal)+value1  
                ConsoleRecord.LCYPrevMonthBal           = (ConsoleRecord.LCYPrevMonthBal - ConsoleRecord.LCYCurrentPrevMonthBal)+value1  
                ConsoleRecord.LCYCurrentPrevMonthBal    = value1  

            db.session.add(ConsoleRecord)

        db.session.commit()

    except Exception as e:
        raise

    
