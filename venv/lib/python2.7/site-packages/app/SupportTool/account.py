from app.mktcore.wtfimports 	import *
from .models 					import *
from app.AccEntry.models 		import *
from app.Account.models 		import *
from app.Category.models 		import *
from sqlalchemy 				import *
from flask 						import flash

class FRM_FIX_ACCOUNT(exform):

	AccountList 	= TextAreaField(requiredlabel("Account", "*"), [validators.Required()])
	Note 			= TextAreaField(requiredlabel("Note", "*"), [validators.Required()])

	# @staticmethod
	# def formReadOnly():
	# 	return "AUTH"

	@staticmethod
	def beforeInsert():
		try:
			AuthLevel 	= g.getNAuthorize

			if AuthLevel == 0 :
				AccountList	= 	request.form['AccountList']
				AccountList =	AccountList.split()
				fixPrevAccountBalance(AccountList)

			return True
			
		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False

	@staticmethod
	def beforeAuthorize():
		try:
			ID 		= 	g.formID
			FAObj 	=	MKT_FIX_ACCOUNT.query.get(ID)
			if FAObj:
				AccountList = FAObj.AccountList.split()
				fixPrevAccountBalance(AccountList)
			else:
				flash(msg_error+'Record %s not found.'%ID)
				db.session.rollback()
				db.session.close()
				return False	

		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False
			

def fixPrevAccountBalance(AccountList=[]):
	try:
		for al in AccountList:
			
			AccEntryObj = MKT_ACC_ENTRY.query.filter(MKT_ACC_ENTRY.Account==al).\
							order_by(MKT_ACC_ENTRY.ID.asc())

			AEObj = db.session.query(
				MKT_ACC_ENTRY.DebitCredit,
				func.sum(MKT_ACC_ENTRY.Amount).label('SAmount')
				).group_by(MKT_ACC_ENTRY.DebitCredit).filter(MKT_ACC_ENTRY.Account==al)

			AccountObj = MKT_ACCOUNT.query.get(al)
			if AccountObj:
				Category 	= AccountObj.AccCategory
				CategoryObj = MKT_CATEGORY.query.get(Category)
				BalanceType = CategoryObj.BalanceType
				Ending = 0
				for x in AEObj:
					if x.DebitCredit == BalanceType:
						Ending = Ending + x.SAmount
					else:
						Ending = Ending - x.SAmount

				AccountObj.Balance = Ending
				AccountObj.AvailableBal = Ending
				db.session.add(AccountObj)


			Index = 0
			for a in AccEntryObj:
				if Index:
					a.PrevBalance =	(PA + PB) if DebitCredit == BalanceType else  (PB - PA)
					db.session.add(a)

					PB = a.PrevBalance
					PA = a.Amount
					DebitCredit = a.DebitCredit

				else:
					a.PrevBalance = 0
					db.session.add(a)
					PB = a.PrevBalance
					PA = a.Amount
					DebitCredit = a.DebitCredit

				Index += 1

	except Exception as e:
		raise
