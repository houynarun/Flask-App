from app.mktcore.wtfimports 	import *
from app.LoanContract.forms_my  import *
from app.Account.models			import MKT_ACCOUNT
from app.LoanProduct.models		import MKT_LOAN_PRODUCT
import app.tools.mktsetting 	as mktsetting

class FRM_LOAN_CONTRACT_MY_EX(FRM_LOAN_CONTRACT_MY):
	DisbursementDate  = DateField(requiredlabel("Disbursement Date","*"),[validators.Optional()])
	# Tab Loan Charge
	ChargeKey 	= 	QuerySelectField(getLanguage("Charge Key"),
						query_factory=loadCharge,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--None--',
						description=u'2-%s' %getLanguage("Loan Charge")
					)

	RateFixed 			= 	TextField(getLanguage("Rate") + "/" + getLanguage("Fixed"), description=u'2-%s' %getLanguage("Loan Charge"))
	Charge 				= 	TextField(getLanguage("Charge"),
								validators=[custom_Charge], 
								default=0,
								description=u'2-%s' %getLanguage("Loan Charge"))

	ChargePerInstallment= 	TextField("Charge Per Installment", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargePerDay		=   TextField("Charge Per Day", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargeLastBooked	=   TextField("Charge Last Booked", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	
	ChargeEarned 		= 	TextField("Charge Earned", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargeUnearned 		= 	TextField("Charge Unearn", default=0, description=u'2-%s' %getLanguage("Loan Charge"))

	# Tab Guarantor
	Guarantor 		= HiddenField(getLanguage("Guarantor"),description="3-%s" %getLanguage("Guarantor"))
	GTRelationIndicator = 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description="3-%s" %getLanguage("Guarantor")
						)
	Type 				= SelectField("Type",
								choices=[('G', 'Guarantor'), ('R', 'Referrer'), ('S', 'Successor')],
								coerce=str,
								default='G',
								description="3-%s" %getLanguage("Guarantor")
							)

	# Tab Co-Borrower
	CoBorrowerID 	  	=   HiddenField(getLanguage("Co-Borrower"), description="5-Co-Borrower")
	RelationIndicator 	= 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description="5-Co-Borrower"
						)
	Sector 			= 	QuerySelectField(requiredlabel("Sector", "*"),
							query_factory=loadSector,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()],
							description="6-%s" %"FRD"
						)
	Industry 		=	QuerySelectField(requiredlabel(getLanguage('Industry'),'*'),
							 query_factory=loadIndustry, 
							 get_label=lambda a: a.ID + " - " + a.Description,
							 allow_blank=True,
							 blank_text='--None--',
							 validators=[validators.Required()],
							description="6-%s" %"FRD"
					)
	Ownership 			= 	QuerySelectField(requiredlabel("Ownership", "*"),
							query_factory=loadOwnership,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()],
							description="6-%s" %"FRD"
					)

		
	def validate_ContractCustomerID(form,field):
		LoanProductID		= request.form['LoanProduct']
		LoanCurrency		= request.form['Currency']
		ContractCustomerID  = request.form['ContractCustomerID']
		Compulsory 			= mktsetting.getAppSetting('ACC_PRODUCT_COMPULSORY')
		LoanProductObj		= MKT_LOAN_PRODUCT.query.get(LoanProductID)
		AccountObj			= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==ContractCustomerID).\
												filter(MKT_ACCOUNT.AccProduct==Compulsory).\
												filter(MKT_ACCOUNT.Currency==LoanCurrency).first()
		CurrencyObj 		= MKT_CURRENCY.query.get(str(LoanCurrency))
		DisbursedAmount 	= float(form.Disbursed.data)


		if LoanProductObj:
			if LoanProductObj.CompulsorySaving == 'Y' and not AccountObj:
				raise ValidationError("Please create customer's Compulsory Saving Account first.")
			if AccountObj and AccountObj.AccStatus == 'C':
				raise ValidationError("Please open account #%s first."%AccountObj.ID)
			else:
				if AccountObj :
					if LoanProductObj.RateFixed == 'R':
						RequiredComAmo = DisbursedAmount * (float(LoanProductObj.CompulsoryRate)/100)
					elif LoanProductObj.RateFixed == 'F':
						RequiredComAmo = float(LoanProductObj.CompulsoryRate)

					if float(AccountObj.AvailableBal) < RequiredComAmo :
						NeededAmount = RequiredComAmo - float(AccountObj.AvailableBal)
						raise ValidationError("Customer's saving account #%s does not have sufficient balance. Need more %s."%(AccountObj.ID,mktmoney.toMoney(NeededAmount, CurrencyObj, 1)))
		else:
			raise ValidationError("Please choose Loan Product.")


	@staticmethod
	def setVisible():
		base = super(FRM_LOAN_CONTRACT_MY_EX, FRM_LOAN_CONTRACT_MY_EX).setVisible()
		control_list = ["DisbursementDate"]
		control_list.extend(base)

		return control_list


	@staticmethod
	def setDisable():
		base = super(FRM_LOAN_CONTRACT_MY_EX, FRM_LOAN_CONTRACT_MY_EX).setDisable()
		control_list = ["TotalInterest"]
		control_list.extend(base)

		return control_list