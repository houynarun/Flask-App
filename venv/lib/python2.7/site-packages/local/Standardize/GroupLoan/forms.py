from app.GroupLoan.forms 			import *
from app.tools.mktloan 				import loadRelationIndicators
import app.tools.mktcustomer 			as mktcustomer
from flask 							import Markup


@app.route("/Morakot/CoBorrowerID2", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CoBorrowerID2():
	return mktcustomer.getSearchCustomer()


def custom_Borrower(form, field):

	if request.form['BorrowerID']:
		GroupID = request.form['Group']
		GroupObj = MKT_GROUP.query.filter(MKT_GROUP.ID == GroupID).first();
		MinMember = 0
		if GroupObj:
			MinMember = GroupObj.MinMember
		controls_list 	= 	request.form
		ListBorrower	= 	[item for item in controls_list if "BorrowerID" in item and "CoBorrowerID" not in item]
		ListBorrower.sort()
		TotalBorrower =	len(ListBorrower)

		for i in range(0,TotalBorrower):
			if field.name == ListBorrower[i]:
				try:
					Borrower = request.form[ListBorrower[i]]
				except:
					continue
				if Borrower == '__None':
					raise ValidationError("This field is required.")
				if int(TotalBorrower) < int(MinMember):
					raise ValidationError("Please select more Borrower. Minimum Borrower is %s."%MinMember)



class FRM_GROUP_LOAN_CONTRACT_EX(FRM_GROUP_LOAN_CONTRACT):
	ContractVB 			= 	HiddenField(requiredlabel("Village Bank", "*"),
							validators=[validators.Required()])
	Group 				= 	QuerySelectField(requiredlabel('Group','*'),
							query_factory=loadGroupID,
							get_label=lambda a: a.ID + " - " + a.GroupName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()])
	Currency 			= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()])

	ValueDate 			= 	DateField(requiredlabel(getLanguage("Value Date"), "*"), [validators.Required()], default=loanBankDate)
	Cycle 				= 	IntegerField(requiredlabel(getLanguage("Cycle"), "*"), [validators.Required()], default=1)
	MaturityDate 		= 	DateField(getLanguage("Maturity Date"), [validators.Optional()])
	LoanProduct 		= 	QuerySelectField(requiredlabel(getLanguage("Loan Product"), "*"),
							query_factory=loadLoanProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()])
	Category 			= 	TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	InterestRate 		= 	TextField(requiredlabel(getLanguage("Interest Rate"), "*"), [validators.Required()])
	IRR 				= 	TextField("IRR")
	FreqType 			= 	SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
							choices=[('1', '1. Monthly'), 
									 ('2', '2. Weekly'),
									 ('3', '3. Daily')],
							coerce=str,
							validators=[validators.Required()]
						)
	Frequency 			= 	IntegerField(requiredlabel(getLanguage("Frequency"), "*"), [validators.Required()], default=1)
	Term 				= 	TextField(requiredlabel("%s (%s)" %(getLanguage("Term"), getLanguage("Month")), "*"), [validators.Required()])
	Installment 		= 	IntegerField(requiredlabel(getLanguage("Installment"), "*"), [validators.Required()])

	DeliqMode 			= 	SelectField(requiredlabel(getLanguage('Deliquency Mode'), '*'),
							choices=[('3', '3. %s' %getLanguage("Semi-Automatic")),
									 ('2', '2. %s' %getLanguage("Automatic")),
									 ('1', '1. %s' %getLanguage("Manual"))],
							coerce=str,
							validators=[validators.Required()])
	LoanType 			= 	SelectField(requiredlabel(getLanguage('Loan Type'), '*'),
							choices=[('N', '%s' %getLanguage("Normal")),
									 ('R', '%s' %getLanguage("Restructured"))],
							coerce=str,
							default='N')
	MoreThanOneYear 	= 	TextField(requiredlabel(getLanguage("More Than One Year"), "*"), [validators.Required()], default='N')
	ContractOfficerID 	= 	RemoteTextField(requiredlabel("New Officer", "*"),
							dicRemote={'url':'/Morakot/SearchOfficer'},
							validators=[validators.Required()]
							)

	BorrowerID 			= 	QuerySelectField(requiredlabel("Borrower", '*'),
							query_factory=loadBorrower,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " + a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--None--',
							description="1-%s" %"Borrower",
							validators=[custom_Borrower]
						)

	LoanPurpose 		= 	QuerySelectField(getLanguage("Loan Purpose"),
							query_factory=laodLoanPurpose,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description=u'1-%s' %"Borrower"
						)
	Disbursed	 		= 	TextField(requiredlabel(getLanguage("Disbursed Amount"), '*'),
							validators=[custom_Disburse], 
							default=0,
							description=u'1-%s' %"Borrower"
						)

	CompulsorySaving 	= 	SelectField("Compulsory Saving",
							choices=[('N', 'No'), ('Y', 'Yes')],
							coerce=str,
							default='N',
							description=u'1-%s' %"Borrower"
						)
	RateFixed 			= 	SelectField("Rate/Fixed",
							choices=[('R', 'Rate'), ('F', 'Fix')],
							coerce=str,
							default='R',
							description=u'1-%s' %"Borrower"
						)
	SavingRate 			= 	TextField(requiredlabel("Calculation Rate","*"),
							default=0,
							description=u'1-%s' %"Borrower",
							validators=[validators.Required()]
						)
	#Newly standardize
	VoluntarySaving 	= SelectField(requiredlabel("Voluntary Saving", "*"),
						choices=[('N', 'No'), 
								 ('Y', 'Yes')],
						coerce=str,
						validators=[validators.Required()],
						default='Y',
						description="1-%s" %"Borrower"
					)
	#
	CoBorrowerID 	  = HiddenField("Co-Borrower", description=u'1-%s' %"Borrower")
	RelationIndicator = QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description=u'1-%s' %"Borrower"
						)

	CoBorrowerID2 	  =  HiddenField("Co-Borrower 2", description=u'1-%s' %"Borrower")
	RelationIndicator2 = QuerySelectField("Relation Indicator 2",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description=u'1-%s' %"Borrower"
						)
	# 
	BorrowerTemplateBase = QuerySelectField("Template Base",
							query_factory=loadBorrowerTemplateBase,
							get_label=lambda a:a.ID+ ' - '+a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							description=u'1-%s' %"Borrower")

	ChargeKey 			= 	QuerySelectField(getLanguage("Charge Key"),
							query_factory=loadCharge,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description=u'2-%s' %getLanguage("Loan Charge"))

	Charge				= 	TextField(getLanguage("Charge"),
							validators=[custom_Charge], 
							default=0,
							description=u'2-%s' %getLanguage("Loan Charge"))

	PreDefine 			= 	QuerySelectField("Pre-define Schedule",
							query_factory=loadPreDefinenSchedule,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description=u'3-%s' %"Repayment Mode")

	FirstCollectionDate =	DateField("First Collection Date", [custom_FirstCollectionDate],
							description=u'3-%s' %"Repayment Mode"
						)
	RepMode 			= 	SelectField(requiredlabel("Repayment Mode", "*"),
							choices=[('1', 'Declining'),
									 ('2', 'Annuity'),
									 ('3', 'Flat'),
									 ('4', 'IRR'),
									 ('6', 'Template Base')],
							coerce=str,
							validators=[validators.Required()],
							description=u'3-%s' %"Repayment Mode"
						)
	TemplateBase 		= QuerySelectField("Template Base",
							query_factory=loadTemplateBase,
							get_label=lambda a:a.ID+ ' - '+a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							description=u'3-%s' %"Repayment Mode")

	FwdBwdKey 			= 	SelectField(requiredlabel("Fwd/Bwd Key", "*"),
							choices=[('0','No Holiday'),
									 ('1','Backward within month'),
									 ('2','Forward within month'),
									 ('3','Backward'),
									 ('4','Forward')],
							coerce=str,
							default='1',
							validators=[validators.Required()],
							description=u'3-%s' %"Repayment Mode"
						)
	AnnuityAmount 		= 	TextField(requiredlabel("Annuity Amount", "*"), [validators.Required()],default=0,description=u'3-%s' %"Repayment Mode")
	PrincipalFreq 		= 	IntegerField(requiredlabel("Principal Frequency", "*"), [validators.Required()],default=1,description=u'3-%s' %"Repayment Mode")
	InterestFreq 		= 	IntegerField(requiredlabel("Interest Frequency", "*"), [validators.Required()],default=1,description=u'3-%s' %"Repayment Mode")
	BaseDateKey 		= 	SelectField('Base Date Key',
									choices=[('1', '1. Value Date'),
											 ('2', '2. Previous Date'),
											 ('3', '3. First Date'),
											 ('4', '4. Week Day')],
									coerce=str,
									description=u'3-%s' %"Repayment Mode"
								)
	WeekDay 				= 	SelectField("Week Day",
								choices=[('MO', 'Monday'), 
									 ('TU', 'Tuesday'),
									 ('WE', 'Wednesday'),
									 ('TH', 'Thursday'),
									 ('FR', 'Friday'),
									 ('SA', 'Saturday'),
									 ('SU', 'Sunday')],
								coerce=str,
								description=u'3-%s' %"Repayment Mode"
							)
	WeekNum 				= 	SelectField("Week number",
								choices=[('1','1'), 
									 ('2','2'),
									 ('3','3'),
									 ('4','4'),
									 ('5','5')],
								coerce=str,
								description=u'3-%s' %"Repayment Mode"
							)

	Iframe				=	MKTIframe("View Repayment",dicIframe={'width':'100%','height':'1000','frameborder':'0'}, description='4-Reapyment Schedule')


	def validate_BorrowerID(form, field):
		try:
			GroupID = request.form['Group']
			if request.form['BorrowerID']:
				Borrower 		= []
				controls_list 	= request.form
				ListBorrower	= [item for item in controls_list if "BorrowerID" in item and "CoBorrowerID" not in item]
				ListBorrower.sort()
				TotalBorrower =	len(ListBorrower)

				for nub in range(0,TotalBorrower):
					getBorrower = request.form[ListBorrower[nub]]
					Borrower.append(getBorrower)

				# Duplicate Borrower when select on form
				DuplicateAcc   = [x for x in Borrower if Borrower.count(x) > 1]
				if DuplicateAcc:
					raise ValidationError("Must not be the same as customer #%s"%DuplicateAcc[0])

		except Exception, e:
			raise ValidationError("%s" %e)


	def validate_CompulsorySaving(form, field):
		try:
			GroupID = request.form['Group']
			Message = ""
			CompulsoryProduct = mktsetting.getAppSetting("ACC_PRODUCT_COMPULSORY")

			if request.form['CompulsorySaving']:
				Compulsory 		= []
				controls_list 	= request.form
				ListDisbursed 	= [item for item in controls_list if "Disbursed" in item]
				ListCompulsory	= [item for item in controls_list if "CompulsorySaving" in item]
				ListRateFixed 	= [item for item in controls_list if "RateFixed" in item]
				ListSavingRate 	= [item for item in controls_list if "SavingRate" in item]
				ListBorrower	= [item for item in controls_list if "BorrowerID" in item and "CoBorrowerID" not in item]
				
				ListCompulsory.sort()
				ListDisbursed.sort()
				ListRateFixed.sort()
				ListSavingRate.sort()
				ListBorrower.sort()

				TotalCompulsory =len(ListCompulsory)
				CompulAmount = 0

				for index in range(0,TotalCompulsory):
					getCompulsory = request.form[ListCompulsory[index]]
					getBorrower = request.form[ListBorrower[index]]
					getDisburused = str(request.form[ListDisbursed[index]]).replace(",","")
					getRateFixed = request.form[ListRateFixed[index]]
					getSavingRate = request.form[ListSavingRate[index]]

					if getRateFixed == "R" :
						CompulAmount = float(getDisburused) * (float(getSavingRate)/100)
					else :
						CompulAmount = float(getSavingRate)
					
					if getCompulsory == "Y" :
						Account = MKT_ACCOUNT.query.\
									filter(	MKT_ACCOUNT.CustomerList == getBorrower,
											MKT_ACCOUNT.AccProduct == CompulsoryProduct).\
									first()
						if Account :
							if float(Account.AvailableBal) < CompulAmount :
								if Message != "" :
									Message += "&nbsp;"*38
								NeededAmount = CompulAmount - float(Account.AvailableBal)
								CurrencyObj = MKT_CURRENCY.query.get(str(Account.Currency))
								AmountStr = mktmoney.toMoney(NeededAmount, CurrencyObj, 1)

								Message += "Compulsory account #<b>%s</b> of customer #<b>%s</b> does not have sufficient balance. You need more <b>%s</b>.<br/>"%(str(Account.ID), getBorrower, AmountStr)
						else :
							if Message != "" :
								Message += "&nbsp;"*38
							Message += "Customer <b>%s</b> does not have compulsory account yet.<br/>"%getBorrower
				
				if Message != "" :
					raise ValidationError(Markup(Message))

		except Exception, e:
			raise ValidationError(Markup("%s" %e))


	@staticmethod
	def beforeAuthorize():
		ID = g.formID
		NAuthorize = g.getNAuthorize
		
		if NAuthorize == 1 :
			GroupLoanBrrInauObj = MKT_GROUP_LOAN_BORROWER_INAU.query.filter_by(ID=ID).all()
			CoBorrowerObj = {}
			for row in GroupLoanBrrInauObj :
				CoBorrowerObj.update({str(row.BorrowerID): [
					{
						"ID": str(row.LoanID),
						"CoBorrowerID": str(row.CoBorrowerID),
						"CoBorrowerName": getCoBorrowerName(str(row.CoBorrowerID)),
						"RelationIndicator": str(row.RelationIndicator)
					},
					{
						"ID": str(row.LoanID),
						"CoBorrowerID": str(row.CoBorrowerID2),
						"CoBorrowerName": getCoBorrowerName(str(row.CoBorrowerID2)),
						"RelationIndicator": str(row.RelationIndicator2)
					}
					]})
			
			base = super(FRM_GROUP_LOAN_CONTRACT_EX, FRM_GROUP_LOAN_CONTRACT_EX).beforeAuthorize(LoanCoBorrower=CoBorrowerObj)

			return base

		return False


def getCoBorrowerName(CoBorrowerID):
	CoBorrowerObj = MKT_CUSTOMER.query.get(CoBorrowerID)
	
	if CoBorrowerObj :
		return str(CoBorrowerObj.LastNameEn) + " " + str(CoBorrowerObj.FirstNameEn)

	return ""