
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from decimal 						import Decimal
from app 							import db
from sqlalchemy 					import *
import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney


class CustomPenalty(object):
	def __init__(self,**kwargs):
		pass

	@staticmethod
	def setCustomPretermination(**kwargs):
		"""
			Example: If Client paid-off, client will be penalized 18% of the total remaining interest

			Disbursed: 2000, 
			ValueDate: 27/04/2017, 
			InterestRate: 15.60/year

			No.	Due Date	Balance B/F		Principal	Interest		Total		Balance C/F
			-----------------------------------------------------------------------------------
			# Installments Paid Date if Late
			1	03/05/2017	2,000.00		127.00		0.00			127.00		1,873.00
			2	05/06/2017	1,873.00		105.00		0.00			105.00		1,768.00

			# Paid-Off 
				08/06/2017 								2.00

			# Installments Not Yet Due Prepaid
			3	03/07/2017	1,768.00		111.00		21.00			132.00		1,657.00
			4	03/08/2017	1,657.00		110.00		22.00			132.00		1,547.00
			5	04/09/2017	1,547.00		111.00		21.00			132.00		1,436.00
			6	03/10/2017	1,436.00		114.00		18.00			132.00		1,322.00
			7	06/11/2017	1,322.00		113.00		19.00			132.00		1,209.00
			8	04/12/2017	1,209.00		117.00		15.00			132.00		1,092.00
			9	03/01/2018	1,092.00		118.00		14.00			132.00		974.00
			10	05/02/2018	974.00			118.00		14.00			132.00		856.00
			11	05/03/2018	856.00			122.00		10.00			132.00		734.00
			12	03/04/2018	734.00			123.00		9.00			132.00		611.00
			13	03/05/2018	611.00			124.00		8.00			132.00		487.00
			14	04/06/2018	487.00			125.00		7.00			132.00		362.00
			15	03/07/2018	362.00			127.00		5.00			132.00		235.00
			16	03/08/2018	235.00			129.00		3.00			132.00		106.00
			17	03/09/2018	106.00			106.00		1.00			107.00		0.00
			-----------------------------------------------------------------------------------
			Total							2,000.00	187.00			2,187.00
			
			=> Remaining Interest 	= (Interest from 03/07/2017 - 03/09/2018) - (Interest from 05/06/2017 - 03/07/2017)
									= 187 - 2
									= 185
			=> Total Penalty 		= Remaining Interest * 18 /100
									= 185 * 18 /100
									= 33.3

			Args:
				**kwargs 			(kwargs):
					NumOfDayLate	(int):		number of day late
					PaidOffDate		(str):		string date "2017-12-12"
					LoanObj 		(object):	sqlalchemy object of Loan Contract
					NewStr			(string):	string additional parameters, "CUSTOM 18"
			Return:
				TotalPenalty 		(string): 	string format money
			Raise:
				Exception
			Call:
				CustomPenalty.setCustomPretermination(**kwargs)
		"""	
		try:
			NumOfDay 				= kwargs.get("NumOfDay",0)
			PaidOffDate 			= kwargs.get("PaidOffDate","")
			LoanObj 				= kwargs.get("LoanObj",None)
			Param 					= kwargs.get("NewStr",[])

			NumOfInstallmentPenal 	= int(Param[1])

			SchedulesQuery			= MKT_REP_SCHEDULE.query

			ID 						= LoanObj.ID

			Schedules 				= SchedulesQuery.filter(MKT_REP_SCHEDULE.LoanID==LoanObj.ID)\
	 									.order_by(MKT_REP_SCHEDULE.No.asc()).all()
	 		TotalPenalty = 0
	 		IsNextInstallment = False

			for Schedule in Schedules:

				Principal = Schedule.Principal
				Interest  = Schedule.Interest
				PartPaidAmt = Schedule.PartPaidAmt

				#If next installment = True then penalty will be Principal + Interest * NumOfInstallmentPenal
				if IsNextInstallment:
					TotalPenalty = (float(Schedule.Principal)+float(Schedule.Interest))*float(NumOfInstallmentPenal)
					break

				#Days Till Next Installment
				DaysTNI = int(mktdate.getDateDiff(PaidOffDate, Schedule.CollectionDate))
				if DaysTNI > 0:
					IsNextInstallment = True
					continue

			return TotalPenalty
		except Exception, e:
			raise e



def getCustomTerminationPenalty(NumOfDay,PaidOffDate,LoanObj,NewStr):
	"""Method to access class CustomPenalty"""
	kwargs = {"NumOfDay":NumOfDay,"PaidOffDate":PaidOffDate,"LoanObj":LoanObj,"NewStr":NewStr}
	Amount = CustomPenalty.setCustomPretermination(**kwargs)
	return Amount
