from app.mktcore.imports 			import *
from app.LoanProduct.models 		import *
from app.TemplateBase.models 		import *
from app.VB.models 					import *

import app.mktcore.globalfunction 		as globalfunction
import app.tools.mktmoney				as mktmoney
import app.tools.user 					as mktuser
import app.tools.mktloanapplication 	as mktloanapp

@app.route("/Morakot/getTemplateBaseGenerateGroupLoan", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getTemplateBaseGenerateGroupLoan():

	ContractVB 		= request.args.get('ContractVB')
	Group 			= request.args.get('Group')
	GroupObj 		= MKT_GROUP.query.filter(MKT_GROUP.ID == Group).\
									  filter(MKT_GROUP.VBID == ContractVB).first()
	LoanProductID 	= ''
	ApprovedAmount 	= ''
	Frequency 		= ''
	FreqType 		= ''
	Term 			= ''
	AppDate 		= ''
	RepMode 		= ''
	FwdBwdKey 		= ''
	BaseDateKey 	= ''
	FBKDes 			= ''
	BDKDes 			= ''
	ReMode 			= ''
	ReModeDe 		= ''

	resultDict 		= {'ID':'__None','Description':'--None--','RepID':'1','RepDesc':'Declining'}
	resultFBK 		= {'0':'No Holiday', '1':'Backward within month', '2':'Forward within month', '3':'Backward', '4':'Forward'}
	resultBDK 		= {'1': '1. Value Date', '2': '2. Previous Date', '3': '3. First Date', '4': '4. Week Day'}
	resultRMS 		= {'1': 'Declining', '2': 'Annuity', '3': 'Flat', '4': 'IRR', '6':'Template Base'}

	if GroupObj:
		LoanProductID 	= GroupObj.LoanProduct
		ApprovedAmount 	= GroupObj.ApprovedAmount
		Frequency 		= GroupObj.Frequency
		FreqType 		= GroupObj.FreqType
		Term 			= GroupObj.Term

	if not AppDate:
		AppDate = mktdate.getBankDate()
	Installment 	= mktloanapp.getNumberOfInstallment(Term, Frequency, FreqType, AppDate)
	if LoanProductID:
		query = MKT_LOAN_PRODUCT.query.get(LoanProductID)
		if query:
			FwdBwdKey 		= query.FWDBWDKey
			FBKDes 			= resultFBK[FwdBwdKey]
			BaseDateKey 	= query.BaseDateKey
			BDKDes 			= resultBDK[BaseDateKey]
			RepMode 		= query.RepMode
			ReModeDe 		= resultRMS[RepMode]

			TemplateBaseList = str(query.TemplateBase).split()
			if TemplateBaseList:
				resultDict.update({'RepID':RepMode, 'RepDesc':ReModeDe})
				for row in TemplateBaseList:
					TBObj = MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID== row).first()
					if TBObj and RepMode == '6':
						TotalAmount = str(ApprovedAmount).replace(',','')
						if int(TBObj.Installment) == int(Installment) and float(TBObj.DisburseAmount) == float(TotalAmount):
							resultDict.update({'ID':TBObj.ID, 'Description':TBObj.ID + ' - '+ TBObj.Description})

	return jsonify(resultDict = resultDict, FwdBwdKey = FwdBwdKey, FBKDes = FBKDes, BaseDateKey = BaseDateKey, BDKDes = BDKDes)

@app.route("/Morakot/getTemplateBase", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getTemplateBase():

	LoanProductID 	= request.args.get('LoanProduct')
	ApprovedAmount 	= request.args.get('ApprovedAmount')
	Frequency 		= request.args.get('Frequency')
	FreqType 		= request.args.get('FreqType')
	Term 			= request.args.get('Term')
	AppDate 		= request.args.get('AppDate','')

	resultDict 		= {'ID':'__None','Description':'--None--'}

	if not AppDate:
		AppDate = mktdate.getBankDate()

	Installment 	= mktloanapp.getNumberOfInstallment(Term, Frequency, FreqType, AppDate)
	if LoanProductID:
		query = MKT_LOAN_PRODUCT.query.get(LoanProductID)
		if query:
			TemplateBaseList = str(query.TemplateBase).split()
			if TemplateBaseList:
				for row in TemplateBaseList:
					TBObj = MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID== row).first()
					if TBObj:
						TotalAmount = str(ApprovedAmount).replace(',','')
						if int(TBObj.Installment) == int(Installment) and float(TBObj.DisburseAmount) == float(TotalAmount):
							resultDict.update({'ID':TBObj.ID, 'Description':TBObj.ID + ' - '+ TBObj.Description})

	return jsonify(resultDict = resultDict)

@app.route("/Morakot/LoanPurposeID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanPurposeID():
	LoanProductID 	= request.args.get('LoanProduct')
	LoanPurpose		= {"ID":"","Description":"--None--"}

	if LoanProductID:
		query = MKT_LOAN_PRODUCT.query.get(LoanProductID)
		if query:
			LoanPurposeObj = MKT_LOAN_PURPOSE.query.get(query.LoanPurpose)
			if LoanPurposeObj:
				LoanPurpose.update({"ID":LoanPurposeObj.ID,"Description":LoanPurposeObj.ID+" - "+LoanPurposeObj.Description})
	return jsonify(LoanPurpose = LoanPurpose)

@app.route("/Morakot/VBDescription", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getVBDescription():

	VBID 	= request.args.get('VBID','')
	Description = ''
	VBObj = MKT_VB.query.get(VBID)
	if VBObj:
		Description = VBObj.Description
	return jsonify(Description = Description)

@app.route("/Morakot/SearchVB/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeSearchVB():
	search 				= request.args.get('q')
	Data = []
	if search:
		VBObj	= MKT_VB.query.filter(or_(MKT_VB.ID.ilike('%'+search+'%'), MKT_VB.Description.ilike('%'+search+'%'))).all()
		if VBObj:
			for row in VBObj:
				Data.append({'id':row.ID , 'text':row.ID +' - ' + row.Description})

	return jsonify(items = Data)

@app.route("/Morakot/Product/", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def routeSearchProduct():
	search 				= request.args.get('q')
	Data = []
	if search:
		ProductObj	= MKT_LOAN_PRODUCT.query.filter(or_(MKT_LOAN_PRODUCT.ID.ilike('%'+search+'%'), MKT_LOAN_PRODUCT.Description.ilike('%'+search+'%'))).all()
		if ProductObj:
			for row in ProductObj:
				Data.append({'id':row.ID , 'text':row.ID +' - ' + row.Description})

	return jsonify(items = Data)