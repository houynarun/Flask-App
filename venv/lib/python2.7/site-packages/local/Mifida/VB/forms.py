from app.mktcore.wtfimports 	import *
from sqlalchemy 				import *
from app.VB.models 				import *
from app.VB.forms 				import *
from app.VillageII.models 		import *
import time
import app.tools.mktdate 				as mktdate

def custom_MeetingTime(form,field):

	MeetingTime = request.form['MeetingTime']
	# clear out processing errors
	field.errors[:] = []

def getRecord():
	try:
		result = MKT_VB.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_VB_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict.update({'VBVillageII'	:row.VBVillageII})
			return Dict
		else:
			return Dict
	except:
		raise

def loadVBVillageII():
	if request.method == 'POST':
		Village=request.form["VBVillage"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE_II.query.filter_by(ID=Record['VBVillageII'])
		else:
			return MKT_VILLAGE_II.query.filter_by(ID='').all()

	return mktaddress.getLoadVillageII(Village)

class FRM_VB_EX(FRM_VB):
	VBProvince = QuerySelectField(requiredlabel('Province/Division/State', "*"),
                        query_factory=loadProvince,
                        get_label=u'Description',
                        allow_blank=True,
                        blank_text=u'--Choose Province/Division/State--',
                        validators=[validators.Required()])

	VBDistrict = QuerySelectField('District',
                        query_factory=loadDistrict,
                        get_label=u'Description',
                        allow_blank=True,
                        blank_text=u'--Choose District--')

	VBCommune = QuerySelectField('Commune/Township',
                        query_factory=loadCommune,
                        get_label=u'Description',
                        allow_blank=True,
                        blank_text=u'--Choose Commune/Township--')

	VBVillage = QuerySelectField('Town/Village Tracts',
                        query_factory=loadVillage,
                        get_label=u'Description',
                        allow_blank=True,
                        blank_text=u'--Choose Town/Village Tracts--')
	VBVillageII = QuerySelectField('Ward/Village',
                    query_factory=loadVBVillageII,
                    get_label=u'Description',
                    allow_blank=True,
                    blank_text=u'--Choose Ward/Village--')

	FreqType 			= SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
						choices=[('', '--%s--' %getLanguage("None")),
								 ('1', '1. %s' %getLanguage("Monthly")), 
								 ('2', '2. %s' %getLanguage("Weekly")),
								 ('3', '3. %s' % "Daily")],
						coerce=str,
						validators=[validators.Required()],
						default=''
					)
	Frequency 		= TextField(requiredlabel("Frequency", "*"), [validators.Required()], default=1)
	OfficerID       	= RemoteTextField(requiredlabel("Loan Officer", "*"),validators=[validators.Required()])
	MeetingDate			= DateField("Meeting Date",[validators.optional()])
	MeetingTime			= DateTimeField("Meeting Time",
							validators=[custom_MeetingTime])

	@staticmethod
	def listField():
		Branch 		= mktuser.getCurrentBranch()

		Fields = ["ID","Branch","Description","Coordinator","Telephone","VBProvince", "VBDistrict", "FreqType",
				  "Frequency","OfficerID" ,"MeetingTime","MeetingTime"]
		return Fields,["Branch*EQ*"+Branch]

	@staticmethod
	def hotSelectField():
		base 			= super(FRM_VB_EX, FRM_VB_EX).hotSelectField()
		hotfield=[]

		fielddisplay="VBVillageII"
		varname="VillageID:$('#VBVillage').val()"
		fun=["VBVillage", varname ,fielddisplay, "/Morakot/VillageIIID", "click"]
		hotfield.append(fun)

		hotfield.extend(base)
		return hotfield