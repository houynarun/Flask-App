from app.mktcore.imports 			import *
from app.CashAccount.models 		import *
from app.AccEntry.models 			import *
from app.User.models 				import *
from app.Branch.models 				import *
from app.LoanContract.models 		import *
from app.Customer.models 			import *
from app.RepaymentSchedule.models 	import *
import app.tools.mktdate			as mktdate
import app.tools.user 				as mktuser
import app.tools.mktmoney 			as mktmoney
import app.tools.mktteller 			as mktteller
import app.tools.mkttool 			as mkttool
from numpy 							import irr
from sqlalchemy						import *
from sqlalchemy 					import or_,and_
from sqlalchemy.sql.expression		import cast
from datetime 						import datetime
from app.LoanAmendment.models 		import *
from app.LoanProduct.models 		import *

@app.route("/Morakot/CUReport/CashMovement", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getCashMovement():
	Date 		= request.args.get('Date') if request.args.get('Date') else str(mktdate.getBankDate())
	Branch 		= mktuser.getCurrentBranch()
	Company 	= mkttool.getCompany().CompanyName
	Tellers 	= db.session.query(
						MKT_CASH_ACCOUNT.ID,
						MKT_CASH_ACCOUNT.Account,
						MKT_USER.DisplayName,
					).\
					join(MKT_USER, MKT_USER.CashAccount==MKT_CASH_ACCOUNT.ID).\
					filter(MKT_CASH_ACCOUNT.Type=='T').all()
	
	List 			= []
	TellerParam 	= mktparam.getTellerParam()
	OpenTillTran 	= TellerParam.OpenTillTran
	CloseTillTran 	= TellerParam.CloseTillTran
	BranchObj 		= MKT_BRANCH.query.get(Branch)
	BranchName 		= Branch

	if BranchObj and BranchObj.Description:
		BranchName 	= BranchObj.Description

	OpeningBal 		= {}
	ClosingBal 		= {}
	IDList 			= []
	for u in Tellers:
		if u.ID in IDList:
			List = updateUserName(List, u.DisplayName, u.ID)
			continue
		IDList.append(u.ID)

		AccountList = u.Account.split()
		AccEntry 	= db.session.query(
							func.sum(MKT_ACC_ENTRY.Amount).label('Amount'),
							MKT_ACC_ENTRY.DebitCredit, 
							MKT_ACC_ENTRY.Currency).\
						filter(MKT_ACC_ENTRY.Account.in_(AccountList)).\
						filter(MKT_ACC_ENTRY.TransactionDate == Date).\
						filter(MKT_ACC_ENTRY.Branch == Branch).\
						group_by(MKT_ACC_ENTRY.DebitCredit, MKT_ACC_ENTRY.Currency)
		
		OpeningBalObj 	= AccEntry.filter(MKT_ACC_ENTRY.Transaction == OpenTillTran)
		ClosingBalObj 	= AccEntry.filter(MKT_ACC_ENTRY.Transaction == CloseTillTran)
		
		#open
		# for col in OpeningBalObj:
		#     Currency    = str(col.Currency)
		#     OpeningBal  = OpeningBal.get(Currency,{Currency:{'Amount':0}})
		#     Amount      = OpeningBal.get(Currency).get('Amount')

		#     if col.DebitCredit == 'Cr':
		#         Amount = Amount - float(col.Amount)
		#     else:
		#         Amount = Amount + float(col.Amount)

		#     OpeningBal[Currency].update({'Amount':Amount})

		#close
		for cl in ClosingBalObj:
			Currency 	= str(cl.Currency)
			if not str(cl.Currency) in ClosingBal:
				ClosingBal.update({str(cl.Currency): {'Amount':0}})
			
			if cl.DebitCredit == 'Cr':
				Amount = ClosingBal[Currency].get('Amount') + float(cl.Amount)
			else:
				Amount = ClosingBal[Currency].get('Amount') - float(cl.Amount)

			ClosingBal[Currency].update({'Amount':Amount})

		for col in OpeningBalObj:
			Currency 	= str(col.Currency)
			if not str(col.Currency) in OpeningBal:
				OpeningBal.update({str(col.Currency): {'Amount':0}})
			
			if col.DebitCredit == 'Cr':
				Amount = OpeningBal[Currency].get('Amount') - float(col.Amount)
			else:
				Amount = OpeningBal[Currency].get('Amount') + float(col.Amount)

			OpeningBal[Currency].update({'Amount':Amount})

		Dict 	= {}
		for acc in AccEntry:

			Amount 	= float(acc.Amount)
			if not str(acc.Currency) in Dict:
				Dict.update({str(acc.Currency): {'Currency':acc.Currency, 'CrAmount':0, 'DrAmount':0}})
			
			if acc.DebitCredit == 'Cr':
				Dict[acc.Currency].update({'CrAmount':Amount})
			else:
				Dict[acc.Currency].update({'DrAmount':Amount})

		List.append({'ID':u.ID, 'Name':u.DisplayName, 'Data':Dict})

	return render_template("report/cashmovement.html", 
							List            =   List,
							Date            =   Date,
							Branch          =   Branch,
							Company         =   Company,
							mktmoney        =   mktmoney, 
							OpeningBal      =   OpeningBal,
							ClosingBal      =   ClosingBal,
							User            =   mktuser.getUser(),
							BranchName      =   BranchName)
def updateUserName(List,Name, ID):
	Count = 0
	for l in List:
		if l.get('ID') == ID:
			List[Count].update({'Name':l.get('Name')+', '+Name})
			break
		Count += 1
	return List

@app.route("/Morakot/CUGPS", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def goToGPS():
	return render_template('report/gps.html')

@app.route("/Morakot/CUReport/LoanEffectiveInterestRate", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanEffectiveInterestRate():
	try:
		Branch 		= request.args.get('Branch') if request.args.get('Branch') else mktuser.getCurrentBranch()
		Company 	= mkttool.getCompany().CompanyName
		LoanContractObj = db.session.query(
								MKT_LOAN_CONTRACT.ID,
								MKT_LOAN_CONTRACT.Account,
								MKT_LOAN_CONTRACT.Currency,
								MKT_LOAN_CONTRACT.Disbursed,
								MKT_LOAN_CONTRACT.Amount,
								MKT_LOAN_CONTRACT.OutstandingAmount,
								MKT_LOAN_CONTRACT.InterestRate,
								MKT_LOAN_CONTRACT.IRR,
								MKT_CUSTOMER.ID.label('CUID'),
								MKT_CUSTOMER.FirstNameEn,
								MKT_CUSTOMER.LastNameEn,
								MKT_CUSTOMER.FirstNameKh,
								MKT_CUSTOMER.LastNameKh,
								MKT_CUSTOMER.Gender
							).join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID)
		if Branch != 'ALL':
			LoanContractObj = LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(Branch.split()))

		LoanContractObj = LoanContractObj.all()
		
		return render_template('report/eir.html', 
				Branch=Branch, 
				formatNumber=mktmoney.formatNumber,
				getEIR=getEffectiveInterestRate, 
				LoanContractObj=LoanContractObj, 
				Company=Company)

	except Exception as e:
		raise e

def loanAmendment(LoanID,FirstDate,SecondDate):
	LoanAmendmentObj = db.session.query(
										MKT_LOAN_AMENDMENT.Branch,
										MKT_LOAN_AMENDMENT.LoanID,
										MKT_LOAN_AMENDMENT.Installment,

										MKT_LOAN_AMENDMENT.Amount,
										MKT_LOAN_AMENDMENT.AmendDate,
										MKT_LOAN_AMENDMENT.Operation,
										MKT_LOAN_AMENDMENT.AddDeduct
										).\
								  filter(MKT_LOAN_AMENDMENT.LoanID==LoanID).\
								  filter(MKT_LOAN_AMENDMENT.Operation=='AMT').\
								  filter(MKT_LOAN_AMENDMENT.Amount!=0).\
								  filter(MKT_LOAN_AMENDMENT.AmendDate.between(str(FirstDate),str(SecondDate))).all()
	return LoanAmendmentObj
def loanAmendmentOnly(LoanID,FirstDate,SecondDate):
	LoanAmendmentObj = db.session.query(
										MKT_LOAN_AMENDMENT.Branch,
										MKT_LOAN_AMENDMENT.LoanID,
										MKT_LOAN_AMENDMENT.Installment,

										MKT_LOAN_AMENDMENT.Amount,
										MKT_LOAN_AMENDMENT.AmendDate,
										MKT_LOAN_AMENDMENT.Operation,
										MKT_LOAN_AMENDMENT.AddDeduct
										).\
								  filter(MKT_LOAN_AMENDMENT.LoanID==LoanID).\
								  filter(MKT_LOAN_AMENDMENT.Operation=='AMT').\
								  filter(MKT_LOAN_AMENDMENT.Amount==0).\
								  filter(MKT_LOAN_AMENDMENT.AmendDate.between(str(FirstDate),str(SecondDate))).all()
	return LoanAmendmentObj


def getEffectiveInterestRate(LoanID,Disbursed):
	try:
		ScheduleObj 	= MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
							order_by(asc(cast(MKT_REP_SCHEDULE.No, Integer)))
		LoanContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		for index,s in enumerate(ScheduleObj):
			if index==0 : InterestList 	= [-(s.Balance+s.Principal)]
			FirstDate			= 	LoanContractObj.ValueDate if index==0 else ScheduleObj[index-1].CollectionDate
			SecondDate			=	s.CollectionDate
			LoanAmendmentObj	=	loanAmendment(s.LoanID,FirstDate,SecondDate)
			LoanAmentOnlyObj 		= 	loanAmendmentOnly(s.LoanID,FirstDate,SecondDate)
			for LoanAment in LoanAmendmentObj:
				if LoanAmendmentObj:
					InterestList.append(LoanAment.Amount if LoanAment.AddDeduct=='1' else -LoanAment.Amount)
			for LoanAmentOnly in LoanAmentOnlyObj:
				if LoanAmentOnlyObj:
					InterestList.append(LoanAmentOnly.Amount)
			InterestList.append(s.Interest+s.Principal)
			
		EIR = irr(InterestList)*100

		return EIR

	except Exception as e:
		raise e
def getAmendment(LoanID):
	LoanAmendmentObj	= 	db.session.query(MKT_LOAN_AMENDMENT).\
							  			filter(MKT_LOAN_AMENDMENT.LoanID==LoanID).\
							  			filter(MKT_LOAN_AMENDMENT.Amount!=0).\
							  			filter(MKT_LOAN_AMENDMENT.Operation=='AMT').all()
	return LoanAmendmentObj
@app.route("/Morakot/CUReport/SpecialReport",methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def specialReport():
	try:
		Branch 				= request.form.get('Branch') if request.form.get('Branch') else mktuser.getCurrentBranch()
		Product 			= request.form.get('Product') if request.form.get('Product') else ''
		LoanID 				= request.form.get('LoanID') if request.form.get('LoanID') else ''
		LoanList			= LoanID.split()
		ListRep 			= []
		TotalDiff 			= 0
		SpecialReportList	= []
		Company 			= mkttool.getCompany().CompanyName
		LoanContractObj 	= ''
		LoanProductObj		= db.session.query(MKT_LOAN_PRODUCT)
		YearCollection 		= 0
		TotalInterestByEIR  = 0
		TotalInterestByYear = 0
		if request.method=='POST':
			LoanContractObj		= db.session.query(
													MKT_LOAN_CONTRACT.ID,
													MKT_LOAN_CONTRACT.LoanProduct,
													MKT_LOAN_CONTRACT.Branch,
													MKT_LOAN_CONTRACT.ValueDate,
													MKT_LOAN_CONTRACT.Disbursed,
													MKT_REP_SCHEDULE.LoanID,
								 					MKT_REP_SCHEDULE.Balance,
								 					MKT_REP_SCHEDULE.No,
													MKT_REP_SCHEDULE.Principal,
													MKT_REP_SCHEDULE.Interest,
													MKT_REP_SCHEDULE.CollectionDate).\
													join(MKT_REP_SCHEDULE,MKT_REP_SCHEDULE.LoanID == MKT_LOAN_CONTRACT.ID).\
													order_by(MKT_LOAN_CONTRACT.ID,MKT_REP_SCHEDULE.CollectionDate)
			if Branch:
				LoanContractObj =  	LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch == Branch)
				
			if LoanID:
				LoanContractObj = 	LoanContractObj.filter(MKT_LOAN_CONTRACT.ID.in_(LoanList))
			else:
				LoanContractObj	=	LoanContractObj.filter(MKT_LOAN_CONTRACT.LoanProduct == Product)
			Year 			= 	''
			Loan 			= 	''
			OutStanding 	=	0
			status			=	True
			FirstDate		=	''
			SecondDate		=	''
			LoanAmentAdd	=	0
			

			for index, loan in enumerate(LoanContractObj):
				InterestOld 			= 	float(loan.Interest)
				Installment 			= 	loan.No
				PrincipalOld 			= 	float(loan.Principal)
				CollectionDate 			= 	loan.CollectionDate
				TotalPaid				= 	PrincipalOld + InterestOld
				EIR 					= 	getEffectiveInterestRate(loan.ID,loan.Disbursed)
				YearCollection			= 	datetime.strptime(CollectionDate,"%Y-%m-%d").year

				if not Year or not Loan: 
					Year 				= 	YearCollection
					Loan 				= 	loan.ID
					OutStanding 		= 	float(loan.Disbursed)
					FirstDate 			=   loan.ValueDate
					SecondDate			=	loan.CollectionDate
					LoanAmendmentObj 	= 	loanAmendment(loan.ID,FirstDate,SecondDate)
					LoanAmendmentOnly 	= 	loanAmendmentOnly(loan.ID,FirstDate,SecondDate)
					FirstDate 			=   loan.CollectionDate
					LoanAmendment 		=	getAmendment(loan.ID)
					if LoanAmendment:		
						LoanAmentAdd=0	
						for LoanAment in LoanAmendment:
							if LoanAment.Operation		==	'AMT':
								if LoanAment.AddDeduct	==	'2':
									LoanAmentAdd	 	= 	LoanAmentAdd	+	LoanAment.Amount
								else:
									Amount = LoanAment.Amount
									
						OutStanding 	= 	float(loan.Disbursed)	-	float(LoanAmentAdd)
					if LoanAmendmentOnly:
							for LoanAmentOnly in LoanAmendmentOnly:
								AmendDate 			= LoanAmentOnly.AmendDate
								Amount 				= float(LoanAmentOnly.Amount)
								Paid 				= float(LoanAmentOnly.Amount)
								Interest 		=	float(OutStanding)	* 	EIR/100
								Principal 		= 	Paid 				- 	Interest 
								OutStanding 	= 	float(OutStanding) 	- 	Principal
								TotalInterestByEIR	= TotalInterestByEIR  	+ 	Interest
								ListRep			= 	[loan.Branch,loan.ID,Installment,AmendDate,Amount,0,Paid,loan.Balance,EIR,Interest,Principal,OutStanding,' ',' ',' ',' ']
								SpecialReportList.append(ListRep)

				SecondDate			=	loan.CollectionDate
				LoanAmendmentObj 	= 	loanAmendment(loan.ID,FirstDate,SecondDate)
				LoanAmendmentOnly 	= 	loanAmendmentOnly(loan.ID,FirstDate,SecondDate)
				FirstDate 			=   loan.CollectionDate

				if YearCollection != Year or loan.ID != Loan:
					if loan.ID != Loan:
						LoanAmendment 		=	getAmendment(loan.ID)
						LoanAmendmentOnly 	=   loanAmendmentOnly(loan.ID,FirstDate,SecondDate)
						OutStanding 	= 	loan.Disbursed
						FirstDate 		=   loan.ValueDate
						if LoanAmendment:
							LoanAmentAdd=0
							for LoanAment in LoanAmendment:
								AmendDate   			= 	LoanAment.AmendDate
								if LoanAment.Operation		==	'AMT':
									if LoanAment.AddDeduct	==	'2':
										LoanAmentAdd		= 	LoanAmentAdd	+	LoanAment.Amount						
						
							OutStanding 		= 	float(loan.Disbursed)		-	float(LoanAmentAdd)
						if LoanAmendmentOnly:
							OutStanding 	= float(loan.Disbursed)

					if YearCollection != Year:
						ListRep[12]			=	Year
						ListRep[13]			=	TotalInterestByEIR
						ListRep[14]			=	TotalInterestByYear
						ListRep[15]			=	TotalDiff
					SpecialReportList[-1]	= ListRep
					Year   					= 	YearCollection
					Loan    				= 	loan.ID
					TotalInterestByEIR		= 	0
					TotalInterestByYear		= 	0	
					ListRep 				= 	[loan.Branch,loan.ID,Installment,CollectionDate,PrincipalOld,InterestOld,TotalPaid,loan.Balance,EIR,Interest,Principal,OutStanding,' ',' ',' ',' ']
				
				if loan.ID	==	Loan or YearCollection != Year:
					LoanAmendmentOnly 	=   loanAmendmentOnly(loan.ID,FirstDate,SecondDate)
					if LoanAmendmentOnly:
						for LoanOnly in LoanAmendmentOnly:
							if LoanOnly.Operation=='AMT':
								AmendDate   			= 	LoanOnly.AmendDate
								Amount 				= 	float(LoanOnly.Amount)
								Paid				= 	float(LoanOnly.Amount)
								Interest 		=	float(OutStanding)	* 	EIR/100
								Principal 		= 	Paid 				- 	Interest 
								OutStanding 	= 	float(OutStanding) 	- 	Principal
								TotalInterestByEIR	= TotalInterestByEIR  	+ 	Interest
								ListRep			= 	[loan.Branch,loan.ID,Installment,AmendDate,Amount,0,Paid,loan.Balance,EIR,Interest,Principal,OutStanding,' ',' ',' ',' ']
								SpecialReportList.append(ListRep)

					if LoanAmendmentObj:
						for LoanAment in LoanAmendmentObj:
							if LoanAment.Operation			==	'AMT':
								if LoanAment.AddDeduct		==	'1':
									AmendDate   			= 	LoanAment.AmendDate
									Amount 				= 	float(LoanAment.Amount)
									Paid				= 	float(LoanAment.Amount)
								else:
									AmendDate   			= 	LoanAment.AmendDate
									Amount 					= 	float(-LoanAment.Amount)
									Paid					= float(-LoanAment.Amount)
								Interest 		=	float(OutStanding)	* 	EIR/100
								Principal 		= 	Paid 				- 	Interest 
								OutStanding 	= 	float(OutStanding) 	- 	Principal
								TotalInterestByEIR	= TotalInterestByEIR  	+ 	Interest
								ListRep			= 	[loan.Branch,loan.ID,Installment,AmendDate,Amount,0,Paid,loan.Balance,EIR,Interest,Principal,OutStanding,' ',' ',' ',' ']
								SpecialReportList.append(ListRep)

					Interest 		=	float(OutStanding)	* 	EIR/100
					Principal 		= 	TotalPaid 			- 	Interest 
					OutStanding 	= 	float(OutStanding) 	- 	Principal
					if YearCollection == Year:
						TotalInterestByEIR	= TotalInterestByEIR  	+ 	Interest
						TotalInterestByYear	= TotalInterestByYear 	+ 	loan.Interest
						TotalDiff 			= TotalInterestByEIR 	- 	float(TotalInterestByYear)
						ListRep				= [loan.Branch,loan.ID,Installment,CollectionDate,PrincipalOld,InterestOld,TotalPaid,loan.Balance,EIR,Interest,Principal,OutStanding,' ',' ',' ',' ']
				SpecialReportList.append(ListRep)

			ListRep.insert(12,YearCollection)
			ListRep.insert(13,TotalInterestByEIR)
			ListRep.insert(14,TotalInterestByYear)
			ListRep.insert(15,TotalDiff)

		return render_template('report/special.html',
								Company 			= Company,
								LoanContractObj 	= LoanContractObj,
								formatNumber		= mktmoney.formatNumber,
								SpecialReportList	= SpecialReportList,
								Product 			= Product,
								Branch   			= Branch,
								LoanProductObj 		= LoanProductObj,
								LoanID				= LoanID
								)
	except Exception as e:
		raise e







