
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from decimal 						import Decimal
from app 							import db
from sqlalchemy 					import *
import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney


class CustomPenalty(object):
	def __init__(self,**kwargs):
		pass

	def getCustomParam(self,CurrencyID,Param):
		
		for PenaltyRule in Param[1:len(Param)]:
			
			if CurrencyID in PenaltyRule:
				CustomParam = PenaltyRule.split("*")
				
				return CustomParam[1],CustomParam[2]


	def setCustomPretermination(self,**kwargs):
	
		try:
			NumOfDay 				= kwargs.get("NumOfDay",0)
			PaidOffDate 			= kwargs.get("PaidOffDate","")
			LoanObj 				= kwargs.get("LoanObj",None)
			Param 					= kwargs.get("NewStr",[])
			
			ID 						= LoanObj.ID
			CurrencyID				= LoanObj.Currency

			TotalPenalty = 0

			NumOfDay, PenaltyAmount = self.getCustomParam(CurrencyID,Param)

			PenaltyBasedInt	= int(NumOfDay) * float(LoanObj.AccrIntPerDay) #Penalty Based On Accured Interest Per Day

			if PenaltyBasedInt > float(PenaltyAmount):
				TotalPenalty 	= PenaltyBasedInt
			else:
				TotalPenalty	= float(PenaltyAmount)  

			return TotalPenalty
		except Exception, e:
			raise e


def getCustomTerminationPenalty(NumOfDay,PaidOffDate,LoanObj,NewStr):
	"""Method to access class CustomPenalty"""
	kwargs = {"NumOfDay":NumOfDay,"PaidOffDate":PaidOffDate,"LoanObj":LoanObj,"NewStr":NewStr}
	Amount = CustomPenalty().setCustomPretermination(**kwargs)
	return Amount
