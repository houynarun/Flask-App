from app.mktcore.wtfimports 			import *
from app.mktcore.imports 				import *
from flask 								import flash
from decimal 							import *
from wtforms 							import DecimalField, IntegerField
from .models 							import *
from app.Customer.models 				import MKT_CUSTOMER
from app.LoanContract.models 			import *
from local.TGC.SubLoanDetail.models 	import *
from local.TGC.GuaranteeList.models 	import *
import app.tools.mktdb as mktdb
import app.tools.mktaudit as mktaudit
import datetime
import re


@app.route('/Morakot/GetLoanContract',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanContract():
	CustomerID = request.args.get('CustomerID')

	dic = {}
	result = MKT_LOAN_CONTRACT.query.filter_by(ContractCustomerID=CustomerID).all()
	for row in  result:
		dic[row.ID] = row.ID

	# Eliminate existing LC form list (New SubLoan)
	result = MKT_SUB_LOAN.query.filter_by(CustomerID=CustomerID).all()
	if result:
		for row in result:
			dic.pop(row.LoanID)

	return jsonify(results=dic)


def isCurrency(row, index, header):
	msg = ""
	if not re.match(r"^\d+(\.\d{1,9})?$", row.get(header)):
		msg = "row " + str(index + 2) + " invalid number format. " + header + " : " + row.get(header)
	return msg

def isPlateNo(row, index, header):
	msg = ""
	if not re.match(r"^[\w ]{2,7}\-\d{4,6}$", row.get(header).strip()):
		msg = "row " + str(index + 2) + " invalid plate number. " + header + " : " + row.get(header)
	return msg

def isGender(row, index, header):
	msg = ""
	if not re.match(r"^[MF]$", row.get(header)):
		msg = "row " + str(index + 2) + " invalid input 'M' or 'F'. " + header + " : " + row.get(header)
	return msg

def isCustomerName(row, index, header):
	msg = ""
	if not re.match(r"^[\w ]{3,50}$", row.get(header).strip()):
		msg = "row " + str(index + 2) + " " + header + " : " + row.get(header)
	return msg

def isDate(row, index, header):
	try:
		msg = ""
		if not re.match(r"^\d{4}-\d{2}-\d{2}$", row.get(header)):
			msg = "row " + str(index + 2) + " invalid format YYYY-MM-DD. " + header + " : " + row.get(header)

		datetime.datetime.strptime(row.get(header), '%Y-%m-%d')
		return msg
	except Exception as e:
		msg = "row " + str(index + 2) + " invalid date. " + header + " : " + row.get(header)
		return msg

def errorCheck(msg):
	result = ""
	if len(msg) > 0:
		for i in range(len(msg)):
			if msg[i] != "":
				result += "<br> ~ " + msg[i]

	if result != "":
		raise ValidationError(result)

def isValidCSV(DictCSV, Target):
	# Validate each value in CSV
	msg = []
	if Target == 'G':
		for index,row in enumerate(DictCSV):
			msg.append(isCurrency(row, index, "MarketPrice"))
			msg.append(isCurrency(row, index, "Tax"))
			msg.append(isCurrency(row, index, "LendingAmt"))
			msg.append(isCurrency(row, index, "Outstanding"))
			msg.append(isCurrency(row, index, "LTV"))
	else:
		for index,row in enumerate(DictCSV):
			msg.append(isCustomerName(row, index, "CustomerName"))
			msg.append(isGender(row, index, "Gender"))
			msg.append(isDate(row, index, "DisburseDate"))
			msg.append(isDate(row, index, "MaturityDate"))
			msg.append(isCurrency(row, index, "DisburseAmt"))
			msg.append(isCurrency(row, index, "OutstandingAmt"))
			msg.append(isCurrency(row, index, "Tenure"))
			msg.append(isCurrency(row, index, "FutureValueAmt"))
			msg.append(isCurrency(row, index, "FutureValue"))
			msg.append(isCurrency(row, index, "Installment"))

		errorCheck(msg)
	return True

def isRecordExist(DictCSV, ImportMode, LoanID, Target):
	# Validate value before insert.
	for index,row in enumerate(DictCSV):
		if Target == 'G':
			ListObj = MKT_GUARANTEE_LIST.query.filter_by(ID=row.get("ID")).first()
		else:
			ListObj = MKT_SUB_LOAN_DE.query.filter_by(ID=row.get("ID")).first()


		if ListObj:
			msg = "row:" + str(index + 2) + " ID:" + row.get("ID") + " has already existed in Loan:" + ListObj.LoanID
			if ImportMode == 'C' or ImportMode == 'O':
				if ListObj.LoanID != LoanID:
					raise ValidationError(msg)
			else:
				raise ValidationError(msg)
	return True

def getHistCurr(TABLE_HIST, ID):
	HistObj = db.session.query(func.substring(TABLE_HIST.ID,'@(.*)').label('Version')).\
					  filter(TABLE_HIST.ID.like( ID + '%')).\
					  order_by(desc(cast(func.regexp_replace(TABLE_HIST.ID, "(.*)@","","g"),Integer))).first()

	Curr 	= str(int(HistObj.Version)+1) if HistObj else '0'
	return Curr


def getRecord():
	try:
		result = MKT_SUB_LOAN.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_SUB_LOAN_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict.update({'ID'			:row.ID})
				Dict.update({'CustomerID'	:row.CustomerID})
				Dict.update({'LoanID'		:row.LoanID})
			return Dict
		else:
			return Dict
	except:
		raise

def getCycle(Amount, Installment):
	result = (float(Amount) - (float(Installment) * 12))
	if result < 0:
		return "0"
	else:
		return str(result)


def loadLoanContract():
	if request.method == 'POST':
		ID			= request.form["ID"]
		CustomerID	= request.form["CustomerID"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			ID			= Record['ID']
			CustomerID	= Record['CustomerID']
			LoanID		= Record['LoanID']
			return MKT_LOAN_CONTRACT.query.filter_by(ID=Record['LoanID']).all()
		else:
			ID			= ""
			CustomerID	= ""

	# Show only one LC on edit
	SubLoanObj = MKT_SUB_LOAN.query.filter_by(ID=ID).first()
	if SubLoanObj:
		return MKT_LOAN_CONTRACT.query.filter_by(ID=SubLoanObj.LoanID).all()

	# Get All Loan Contract from a Customer
	LoanObj = MKT_LOAN_CONTRACT.query.filter_by(ContractCustomerID=CustomerID).all()
	LoanInauObj = MKT_LOAN_CONTRACT_INAU.query.filter_by(ContractCustomerID=CustomerID).all()
	LoanObj.extend(LoanInauObj)

	# Get SubLoan Object List
	SubLoanObj = MKT_SUB_LOAN.query.filter_by(CustomerID=CustomerID).all()
	SubLoanList = []
	if SubLoanObj:
		for row in SubLoanObj:
			SubLoanList.append(row.LoanID)

	# Eliminate existing LC in subloan (Form Reload)
	result = []
	for row in LoanObj:
		if row.ID not in SubLoanList:
			result.append(row)

	return result


class FRM_SUB_LOAN(exform):
	CustomerID	=	HiddenField(requiredlabel("Customer","*"), validators=[validators.Required()])
	LoanID		=	QuerySelectField(requiredlabel("Loan Contract","*"),
						query_factory = loadLoanContract,
						get_label="ID",
						allow_blank=False,
						blank_text=u"",
						validators=[validators.Required()]
					)
	ImportMode	=	SelectField("Import Mode",
						choices=[('N','Add New'),('C','Clear'),('O','Overwrite')],
						coerce=str,
						default='N'
					)
	Target		=	SelectField("Target",
						choices=[('S','Sub Loan Detail'),('G','Guarantee List')],
						coerce=str,
						default='S'
					)
	FileUpload	=	FileField("File Upload")
	Description	=	TextAreaField("Description", validators=[validators.Length(max=50)])


	def validate_FileUpload(form, field):
		if request.method == 'POST':
			ID 				= request.form['ID']
			FileCSV			= request.files['FileUpload']
			isCSV			= mkttool.getAllowedFile(FileCSV.filename)

			if not FileCSV:
				raise ValidationError("This field is required.")
			if not isCSV:
				raise ValidationError("Allow file csv only.")


	@staticmethod
	def setDisableforEdit():
		return [('ID'),('CustomerID'),('LoanID'),('Target')]

	@staticmethod
	def hotSelectField():
		hotfield		= []

		fielddisplay	= "LoanID"
		varname			= "CustomerID:$('#CustomerID').val()"
		fun				= ["CustomerID", varname, fielddisplay, "/Morakot/GetLoanContract", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def reverseRec():
		try:
			SubLoanObj = MKT_SUB_LOAN.query.filter_by(ID=g.formID).first()
			SubLoanDetailObj = MKT_SUB_LOAN_DE.query.filter_by(LoanID=SubLoanObj.LoanID).all()
			if SubLoanDetailObj:
				for row in SubLoanDetailObj:
					mktaudit.moveAUTHtoHIST(MKT_SUB_LOAN_DE,MKT_SUB_LOAN_DE_HIST,row.ID)
					mktdb.deleteRecord(MKT_SUB_LOAN_DE,[MKT_SUB_LOAN_DE.ID == row.ID])
			GuaranteeListObj = MKT_GUARANTEE_LIST.query.filter_by(LoanID=SubLoanObj.LoanID).all()
			if GuaranteeListObj:
				for row in GuaranteeListObj:
					mktaudit.moveAUTHtoHIST(MKT_GUARANTEE_LIST,MKT_GUARANTEE_LIST_HIST,row.ID)
					mktdb.deleteRecord(MKT_GUARANTEE_LIST,[MKT_GUARANTEE_LIST.ID == row.ID])

			return True, ""
		except Exception, e:
			db.session.rollback()
			return False, "%s" %e

	@staticmethod
	def beforeInsert():
		try:
			if request.method	== 'POST':
				ID				= request.form['ID']
				LoanID			= request.form['LoanID']
				ImportMode		= request.form['ImportMode']
				Target			= request.form['Target']
				FileCSV			= request.files['FileUpload']
				DictCSV			= mkttool.getDictCSV(FileCSV)
				TotalDisburse	= 0
				LoanDisburse	= 0

				isValidCSV(DictCSV, Target)
				isRecordExist(DictCSV, ImportMode, LoanID, Target)

				# Get Disbursement Amount from LC
				LoanContractObj		= MKT_LOAN_CONTRACT.query.filter_by(ID=LoanID).first()
				if LoanContractObj:
					LoanDisburse	= LoanContractObj.Disbursed

				# MoveLiveToHist when user choose clear option
				if ImportMode == 'C':
					if Target == 'G':
						GuaranteeListObj = MKT_GUARANTEE_LIST.query.filter_by(LoanID=LoanID).all()
						for row in GuaranteeListObj:
							mktaudit.moveAUTHtoHIST(MKT_GUARANTEE_LIST,MKT_GUARANTEE_LIST_HIST,row.ID)
							mktdb.deleteRecord(MKT_GUARANTEE_LIST,[MKT_GUARANTEE_LIST.ID == row.ID])
					else:
						SubLoanDetailObj = MKT_SUB_LOAN_DE.query.filter_by(LoanID=LoanID).all()
						for row in SubLoanDetailObj:
							mktaudit.moveAUTHtoHIST(MKT_SUB_LOAN_DE,MKT_SUB_LOAN_DE_HIST,row.ID)
							mktdb.deleteRecord(MKT_SUB_LOAN_DE,[MKT_SUB_LOAN_DE.ID == row.ID])


				# Insert or Update Record
				if Target == 'G':
					for index,row in enumerate(DictCSV):
						row.update({'ID':row.get("ID")})
						row.update({'LoanID':LoanID})
						row.update({'Currency':LoanContractObj.Currency})

						GuaranteeListObj = MKT_GUARANTEE_LIST.query.filter_by(ID=row.get("ID")).first()
						if ImportMode == 'O':
							mktaudit.moveAUTHtoHIST(MKT_GUARANTEE_LIST,MKT_GUARANTEE_LIST_HIST,row.get("ID"))
							row.update({'Curr':getHistCurr(MKT_GUARANTEE_LIST_HIST, row.get("ID"))})

							mktdb.mergeTable(MKT_GUARANTEE_LIST,row)
						else:
							row.update({'Curr':getHistCurr(MKT_GUARANTEE_LIST_HIST, row.get("ID"))})
							mktdb.insertTable(MKT_GUARANTEE_LIST,row)

				else:
					for index,row in enumerate(DictCSV):
						row.update({'ID':row.get("ID")})
						row.update({'LoanID':LoanID})
						row.update({'Currency':LoanContractObj.Currency})
						row.update({'CustomerName':row.get("CustomerName").strip()})
						row.update({'PlateNo':row.get("PlateNo").strip()})

						EndOf03Cycle = getCycle(row.get('FutureValueAmt'), row.get('Installment'))
						EndOf06Cycle = getCycle(EndOf03Cycle, row.get('Installment'))
						EndOf09Cycle = getCycle(EndOf06Cycle, row.get('Installment'))
						EndOf12Cycle = getCycle(EndOf09Cycle, row.get('Installment'))
						EndOf15Cycle = getCycle(EndOf12Cycle, row.get('Installment'))

						row.update({'EndOf03Cycle': EndOf03Cycle})
						row.update({'EndOf06Cycle': EndOf06Cycle})
						row.update({'EndOf09Cycle': EndOf09Cycle})
						row.update({'EndOf12Cycle': EndOf12Cycle})
						row.update({'EndOf15Cycle': EndOf15Cycle})

						TotalDisburse += float(row.get('FutureValueAmt'))

						SubLoanDetailObj = MKT_SUB_LOAN_DE.query.filter_by(ID=row.get("ID")).first()
						if ImportMode == 'O':
							mktaudit.moveAUTHtoHIST(MKT_SUB_LOAN_DE,MKT_SUB_LOAN_DE_HIST,row.get("ID"))
							row.update({'Curr':getHistCurr(MKT_SUB_LOAN_DE_HIST, row.get("ID"))})

							mktdb.mergeTable(MKT_SUB_LOAN_DE,row)
						else:
							row.update({'Curr':getHistCurr(MKT_SUB_LOAN_DE_HIST, row.get("ID"))})
							mktdb.insertTable(MKT_SUB_LOAN_DE,row)

				# # Check Total Disburse and Loan Disburse
				# if LoanDisburse != TotalDisburse:
				# 	msg = "Loan Disbursement amount: " + str(round(LoanDisburse, 2)) + " is not equal to TotalDisburse:" + str(round(TotalDisburse, 2))
				# 	raise ValidationError(msg)

		except Exception as e:
			flash(Markup(msg_error + "Invalid in CSV file: %s"%e))
			return False	
		return True