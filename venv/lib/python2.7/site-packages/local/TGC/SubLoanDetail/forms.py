from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from flask 						import flash
from decimal 					import *
from wtforms 					import DecimalField, IntegerField
from .models 					import *
from local.TGC.SubLoan.models 	import MKT_SUB_LOAN
from app.LoanContract.models 	import *


@app.route("/Morakot/GetLoanCurrency", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanCurrency():
	try:
		LoanID 	= 	request.args.get('LoanID') if 'LoanID' in request.args else ""
		Currency 	= 	""

		LoanContractObj = MKT_LOAN_CONTRACT.query.filter_by(ID=LoanID).first()
		if LoanContractObj:
			Currency = LoanContractObj.Currency

		return jsonify(Currency=Currency)
	except:
		raise


@app.route("/Morakot/GetEndCycleAmount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getEndCycleAmount():
	try:
		FutureValueAmt	=	request.args.get('FutureValueAmt') if 'FutureValueAmt' in request.args else "0"
		Installment		=	request.args.get('Installment') if 'Installment' in request.args else "0"

		EndOf03Cycle = getCycle(FutureValueAmt, Installment)
		EndOf06Cycle = getCycle(EndOf03Cycle, Installment)
		EndOf09Cycle = getCycle(EndOf06Cycle, Installment)
		EndOf12Cycle = getCycle(EndOf09Cycle, Installment)
		EndOf15Cycle = getCycle(EndOf12Cycle, Installment)

		return jsonify(	EndOf03Cycle=EndOf03Cycle,
						EndOf06Cycle=EndOf06Cycle,
						EndOf09Cycle=EndOf09Cycle,
						EndOf12Cycle=EndOf12Cycle,
						EndOf15Cycle=EndOf15Cycle)
	except:
		raise


def getCycle(Amount, Installment):
	Amount = Amount.replace(",", "")
	Installment = Installment.replace(",", "")
	result = (float(Amount) - (float(Installment) * 12))
	if result < 0:
		return "0"
	else:
		return str(result)


class FRM_SUB_LOAN_DE(exform):
	LoanID			=	HiddenField(requiredlabel("Main Contract", "*"), [validators.Required()])
	Currency		=	TextField("Currency")
	CustomerName	=	TextField(requiredlabel("Customer Name", "*"),	validators=[validators.Required()])
	Gender			=	SelectField(requiredlabel("Gender", "*"),
							choices=[('F','Female'),('M','Male')],
							coerce=str,
							validators=[validators.Required()]
						)
	DisburseDate	=	DateField(requiredlabel("Disburse Date", "*"), validators=[validators.Required()])
	MaturityDate	=	DateField(requiredlabel("Maturity Date", "*"), validators=[validators.Required()])
	DisburseAmt		=	DecimalField(requiredlabel("Disburse Amount", "*"), validators=[validators.Required()], default=0)	
	OutstandingAmt	=	DecimalField(requiredlabel("Outstanding Amount", "*"), validators=[validators.Required()], default=0)	
	Tenure			=	TextField("Tenure", validators=[validators.Regexp(r"^\d{0,4}$")])
	FutureValue		=	DecimalField("Future Value", validators=[], default=0)		
	FutureValueAmt	=	DecimalField("Future Value Amount", validators=[], default=0)
	Installment		=	DecimalField("Installment", validators=[], default=0)
	PlateNo			=	TextField(requiredlabel("Motor Plate", "*"), validators=[validators.Required()])
	EndOf03Cycle	=	DecimalField("EndOf 3 Cycle", default=0)
	EndOf06Cycle	=	DecimalField("EndOf 6 Cycle", default=0)
	EndOf09Cycle	=	DecimalField("EndOf 9 Cycle", default=0)
	EndOf12Cycle	=	DecimalField("EndOf 12 Cycle", default=0)
	EndOf15Cycle	=	DecimalField("EndOf 15 Cycle", default=0)
	Description		=	TextAreaField("Description", validators=[validators.Length(max=50)])

	@staticmethod
	def setWidth():
		Fields = [('LoanID',		len3),
				  ('Currency',		len1),
				  ('CustomerName',	len3),
				  ('Gender',		len1),
				  ('DisburseDate',	len3),
				  ('MaturityDate',	len3),
				  ('DisburseAmt',	len3),
				  ('OutstandingAmt',len3),
				  ('Tenure',		len1),
				  ('FutureValueAmt',len3),
				  ('FutureValue',	len3),
				  ('Installment',	len3),
				  ('PlateNo',		len2),
				  ('EndOf03Cycle',	len3),
				  ('EndOf06Cycle',	len3),
				  ('EndOf09Cycle',	len3),
				  ('EndOf12Cycle',	len3),
				  ('EndOf15Cycle',	len3)]
		return Fields

	@staticmethod
	def setDisable():
		return [('ID'),('Currency'),('EndOf03Cycle'),('EndOf06Cycle'),
				('EndOf09Cycle'),('EndOf12Cycle'),('EndOf15Cycle')]

	@staticmethod
	def setDisableforEdit():
		return [('ID'),('LoanID'),('Currency'),('EndOf03Cycle'),
				('EndOf06Cycle'),('EndOf09Cycle'),
				('EndOf12Cycle'),('EndOf15Cycle')]

	@staticmethod
	def moneyField():
		return [["DisburseAmt",		"Currency"], 
				["OutstandingAmt",	"Currency"], 
				["FutureValueAmt",	"Currency"],
				["FutureValue",		"Currency"],
				["Installment",		"Currency"],
				["EndOf03Cycle",	"Currency"],
				["EndOf06Cycle",	"Currency"],
				["EndOf09Cycle",	"Currency"],
				["EndOf12Cycle",	"Currency"],
				["EndOf15Cycle",	"Currency"]]

	@staticmethod
	def formatMoney():
		return ["DisburseAmt", "OutstandingAmt", "FutureValueAmt", "FutureValue", "Installment",
				"EndOf03Cycle", "EndOf06Cycle", "EndOf09Cycle", "EndOf12Cycle", "EndOf15Cycle"], "Currency"

	@staticmethod
	def hotField():
		hotfield = []
		fielddisplay 	= 	"$('#Currency').val(data.Currency);"
		varname 		=	"LoanID:$('#LoanID').val()"
		fun 			=	["LoanID", varname, fielddisplay, "/Morakot/GetLoanCurrency", "change"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#EndOf03Cycle').val(data.EndOf03Cycle);"
		fielddisplay 	+= 	"$('#EndOf06Cycle').val(data.EndOf06Cycle);"
		fielddisplay 	+= 	"$('#EndOf09Cycle').val(data.EndOf09Cycle);"
		fielddisplay 	+= 	"$('#EndOf12Cycle').val(data.EndOf12Cycle);"
		fielddisplay 	+= 	"$('#EndOf15Cycle').val(data.EndOf15Cycle);"
		varname 		=	"Installment:$('#Installment').val(),FutureValueAmt:$('#FutureValueAmt').val()"
		fun 			=	["Installment", varname, fielddisplay, "/Morakot/GetEndCycleAmount", "change"]
		hotfield.append(fun)
		fun 			=	["FutureValueAmt", varname, fielddisplay, "/Morakot/GetEndCycleAmount", "change"]
		hotfield.append(fun)

		return hotfield