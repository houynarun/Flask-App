from flask 								import flash, g, Markup
from wtforms 							import DecimalField, IntegerField
from app.mktcore.wtfimports 			import *
from app.LoanAmendment.models 			import *
from app.LoanAmendment.forms 			import *
from app.tools.mktloan 					import *
from app.LoanContract.models 			import MKT_LOAN_CONTRACT
from app.LoanProduct.models 			import MKT_LOAN_PRODUCT

from local.TGC.SubLoan.models			import *
from local.TGC.SubLoanDetail.models		import *
from local.TGC.RedemCollateral.models	import *
import app.tools.mktdb 					as mktdb
import app.tools.mktaudit 				as mktaudit
import app.tools.mktsetting 			as mktsetting
import app.tools.mktdate	 			as mktdate
import app.tools.mktparam 				as mktparam
import app.tools.mktaccounting 			as mktaccounting

@app.route("/Morakot/GetRedemCollateral", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getRedemCollateral():
	try:
		LcID = request.args.get('LoanID') if 'LoanID' in request.args else ""
		Amount = 0
		RedemObj = MKT_REDEM_COLLATERAL.query.filter_by(LoanID=LcID, AmendID="").all()
		if RedemObj:
			for row in RedemObj:
				Amount += float(row.Principle)

		return jsonify(Amount=Amount)
	except:
		raise


def getHistCurr(TABLE_HIST, ID):
	HistObj = db.session.query(func.substring(TABLE_HIST.ID,'@(.*)').label('Version')).\
					  filter(TABLE_HIST.ID.like( ID + '%')).\
					  order_by(desc(cast(func.regexp_replace(TABLE_HIST.ID, "(.*)@","","g"),Integer))).first()
	Curr 	= str(int(HistObj.Version)+1) if HistObj else '0'
	return Curr


def amendSubLoan(LcID):
	RedemObj = MKT_REDEM_COLLATERAL.query.filter_by(LoanID=LcID, AmendID="").all()
	if RedemObj:
		for row in RedemObj:
			mktaudit.moveAUTHtoHIST(MKT_REDEM_COLLATERAL,MKT_REDEM_COLLATERAL_HIST,row.ID)
			Curr =  getHistCurr(MKT_REDEM_COLLATERAL_HIST, row.ID)
			AmendID = g.formID
			mktdb.updateRecord(MKT_REDEM_COLLATERAL,[MKT_REDEM_COLLATERAL.ID == row.ID],{'AmendID':AmendID, 'Curr':Curr})
			db.session.commit()


def moveSubLoanToHist(LcID):
	RedemObj = MKT_REDEM_COLLATERAL.query.filter_by(LoanID=LcID).all()
	if RedemObj:
		for row in RedemObj:
			mktaudit.moveAUTHtoHIST(MKT_REDEM_COLLATERAL,MKT_REDEM_COLLATERAL_HIST,row.ID)
			mktdb.deleteRecord(MKT_REDEM_COLLATERAL,[MKT_REDEM_COLLATERAL.ID == row.ID])

	RedemInauObj = MKT_REDEM_COLLATERAL_INAU.query.filter_by(LoanID=LcID).all()
	if RedemInauObj:
		for row in RedemInauObj:
			mktaudit.moveAUTHtoHIST(MKT_REDEM_COLLATERAL_INAU,MKT_REDEM_COLLATERAL_HIST,row.ID)
			mktdb.deleteRecord(MKT_REDEM_COLLATERAL_INAU,[MKT_REDEM_COLLATERAL_INAU.ID == row.ID])

	SubLoanDetailObj = MKT_SUB_LOAN_DE.query.filter_by(LoanID=LcID).all()
	if SubLoanDetailObj:
		for row in SubLoanDetailObj:
			mktaudit.moveAUTHtoHIST(MKT_SUB_LOAN_DE,MKT_SUB_LOAN_DE_HIST,row.ID)
			mktdb.deleteRecord(MKT_SUB_LOAN_DE,[MKT_SUB_LOAN_DE.ID == row.ID])

	SubLoanlObj = MKT_SUB_LOAN.query.filter_by(LoanID=LcID).all()
	if SubLoanlObj:
		for row in SubLoanlObj:
			mktaudit.moveAUTHtoHIST(MKT_SUB_LOAN,MKT_SUB_LOAN_HIST,row.ID)
			mktdb.deleteRecord(MKT_SUB_LOAN,[MKT_SUB_LOAN.ID == row.ID])


class FRM_LOAN_AMENDMENT_EX(FRM_LOAN_AMENDMENT):

	@staticmethod
	def hotField():
		base = super(FRM_LOAN_AMENDMENT_EX, FRM_LOAN_AMENDMENT_EX).hotField()
		hotfield=[]
		hotfield.extend(base)

		fielddisplay 	= 	"$('#Amount').val(data.Amount);$('#Amount').focus();"
		fielddisplay	+=	"$('#PenaltyAmount').focus();"
		varname 		=	"LoanID:$('#LoanID').val()"
		fun 			=	["LoanID", varname, fielddisplay, "/Morakot/GetRedemCollateral", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeAuthorize():
		base = super(FRM_LOAN_AMENDMENT_EX, FRM_LOAN_AMENDMENT_EX).beforeAuthorize()

		LoanAmendmentObj 	= MKT_LOAN_AMENDMENT_INAU.query.get(g.formID)
		LoanContractObj 	= MKT_LOAN_CONTRACT.query.get(LoanAmendmentObj.LoanID)
		if LoanAmendmentObj:
			LcID	= LoanAmendmentObj.LoanID
			Op		= LoanAmendmentObj.Operation

			if Op.upper() == "AMT":
				RedemObj = MKT_REDEM_COLLATERAL.query.filter_by(LoanID=LcID, AmendID="").all()
				if RedemObj:
					amendSubLoan(LcID)

			elif Op.upper() == "TMN":
				moveSubLoanToHist(LcID)

		return True