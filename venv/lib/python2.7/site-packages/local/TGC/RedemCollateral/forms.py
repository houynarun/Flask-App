from app.mktcore.wtfimports			import *
from app.mktcore.imports			import *
from flask							import flash
from decimal						import *
from wtforms						import DecimalField, IntegerField
from .models						import *
from app.LoanContract.models 		import *
from app.LoanProduct.models 		import *
from local.TGC.SubLoanDetail.models	import MKT_SUB_LOAN_DE

import app.tools.loantools.rescheduletools as mktreschedule
import app.tools.mktdb as mktdb
import decimal


@app.route("/Morakot/GetPrincipleAmt", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPrincipleAmt():
	try:
		Outstanding 	= 	request.args.get('Outstanding') if 'Outstanding' in request.args else ""
		Principle 		=	Outstanding.replace(",", "")
		Principle		=	str(float(Principle) * 70 / 100)

		return jsonify(Principle=Principle)
	except:
		raise

@app.route("/Morakot/GetSubLoanDetail", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSubLoanDetail():
	try:
		LoanID		=	request.args.get('LoanID') if 'LoanID' in request.args else ""
		SubLoanID 	= 	request.args.get('SubLoanID') if 'SubLoanID' in request.args else ""
		Principle	=	request.args.get('Principle') if 'Principle' in request.args else "0"
		NumberOfDay	= 	request.args.get('NumberOfDay') if 'NumberOfDay' in request.args else "0"
		Currency 	= 	""

		SubLoanDetailObj = MKT_SUB_LOAN_DE.query.filter_by(ID=SubLoanID).first()
		if SubLoanDetailObj:
			CustomerName = str(SubLoanDetailObj.CustomerName)
			Currency = str(SubLoanDetailObj.Currency)
			Outstanding = str(SubLoanDetailObj.FutureValueAmt)
			Principle = str(SubLoanDetailObj.FutureValueAmt * 70 / 100)

		InterestDue	= str(getInterestPerDay(LoanID, Principle) * float(NumberOfDay))

		return jsonify(Currency=Currency, Outstanding=Outstanding, 
						Principle=Principle, NumberOfDay=NumberOfDay,
						InterestDue=InterestDue, CustomerName=CustomerName)
	except:
		raise

@app.route("/Morakot/GetInterestDue", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getInterestDue():
	try:
		LoanID	= request.args.get('LoanID') if 'LoanID' in request.args else ""
		Principle	= request.args.get('Principle') if 'Principle' in request.args else "0"
		NumberOfDay	= request.args.get('NumberOfDay') if 'NumberOfDay' in request.args else "0"

		InterestDue	= str(getInterestPerDay(LoanID, Principle) * float(NumberOfDay))

		return jsonify(InterestDue=InterestDue)
	except:
		raise


@app.route('/Morakot/GetSubLoan',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSubLoan():
	LoanID = request.args.get('LoanID')

	dic = {}
	result = MKT_SUB_LOAN_DE.query.filter_by(LoanID=LoanID).all()
	for row in result:
		dic[row.ID] = row.ID + ' - ' + row.PlateNo

	result = MKT_REDEM_COLLATERAL.query.filter_by(LoanID=LoanID).all()
	result.extend(MKT_REDEM_COLLATERAL_INAU.query.filter_by(LoanID=LoanID).all())
	if result:
		for row in result:
			dic.pop(row.SubLoanID)

	return jsonify(results=dic)


def getInterestPerDay(LoanID, Principle):
	try:
		Principle = Principle.replace(",", "")
		LoanObj = MKT_LOAN_CONTRACT.query.filter_by(ID=LoanID).first()
		if LoanObj:
			LoanProductObj = MKT_LOAN_PRODUCT.query.filter_by(ID=LoanObj.LoanProduct).first()

			RatePerYear			= float(LoanObj.IRR) if LoanObj.IRR else float(LoanObj.InterestRate)
			InterestDayBasis	= int(LoanProductObj.IntDayBasis)
			SystemBankDate		= mktdate.getBankDate()

			InterestPerDay	= mktreschedule.getInterestPerDay(RatePerYear, float(Principle), \
									InterestDayBasis, SystemBankDate)

		return InterestPerDay
	except:
		raise


def getRecord():
	try:
		result = MKT_REDEM_COLLATERAL.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_REDEM_COLLATERAL_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict.update({'ID'			:row.ID})
				Dict.update({'LoanID'		:row.LoanID})
				Dict.update({'SubLoanID'	:row.SubLoanID})
				Dict.update({'Currency'		:row.Currency})
			return Dict
		else:
			return Dict
	except:
		raise

def loadBankDate():
	BankDate = mktdate.getBankDate()
	return BankDate


def loadSubLoan():
	if request.method == 'POST':
		ID		= request.form["ID"]
		LoanID	= request.form['LoanID']
	else:
		if len(getRecord())>0:
			Record = getRecord()
			ID			= Record['ID']
			LoanID		= Record['LoanID']
			SubLoanID	= Record["SubLoanID"]
			return MKT_SUB_LOAN_DE.query.filter_by(ID=Record['SubLoanID']).all()
		else:
			ID		= ""
			LoanID	= ""

	# Show only one LC on edit
	SubAmendObj = MKT_REDEM_COLLATERAL.query.filter_by(ID=ID).first()
	if not SubAmendObj:
		SubAmendObj = MKT_REDEM_COLLATERAL_INAU.query.filter_by(ID=ID).first()

	if SubAmendObj:
		return MKT_SUB_LOAN_DE.query.filter_by(ID=SubAmendObj.SubLoanID).all()

	# Get All SubLoan from a LoanID
	SubLoanObj = MKT_SUB_LOAN_DE.query.filter_by(LoanID=LoanID).all()

	SubAmendObj = MKT_REDEM_COLLATERAL.query.filter_by(LoanID=LoanID).all()
	SubAmendObj.extend(MKT_REDEM_COLLATERAL_INAU.query.filter_by(LoanID=LoanID).all())
	SubAmendList = []
	if SubAmendObj:
		for row in SubAmendObj:
			SubAmendList.append(row.SubLoanID)

	# Eliminate SubLoan that already amend
	result = []
	for row in SubLoanObj:
		if row.ID not in SubAmendList:
			result.append(row)

	return result


class FRM_REDEM_COLLATERAL(exform):
	LoanID 		= 	HiddenField(requiredlabel("Main Contract", "*"), [validators.Required()])
	AmendID		=	TextField("AmendID")
	SubLoanID	=	QuerySelectField(requiredlabel("Sub Loan ID","*"),
						query_factory = loadSubLoan,
						get_label=lambda a: a.ID + " - " + a.PlateNo,
						allow_blank=False,
						blank_text=u"",
						validators=[validators.Required()]
					)
	CustomerName=	TextField(requiredlabel("Customer Name", "*"), validators=[validators.Required()])
	Currency	=	TextField(requiredlabel("Currency", "*"), validators=[validators.Required()])
	AmendDate	= 	DateField(requiredlabel("Amend Date", "*"), validators=[validators.Required()], default=loadBankDate)
	Outstanding	=	DecimalField(requiredlabel("Loan Outstanding", "*"), validators=[validators.Required()], default=0)
	Principle	=	DecimalField(requiredlabel("Principle Amount", "*"), validators=[validators.Required()], default=0)
	NumberOfDay	=	TextField(requiredlabel("Number Of Days","*"),
						validators=[validators.Regexp(r"^\d{0,4}$"),
									validators.Required()],
						default="0")
	InterestDue	=	DecimalField("Interest Due", places=2, rounding=decimal.ROUND_UP, validators=[], default=0)
	Description	=	TextAreaField("Description", validators=[validators.Length(max=50)])

	
	@staticmethod
	def setDisable():
		return [('ID'),('AmendID'),('Currency'),('InterestDue'),('CustomerName')]

	@staticmethod
	def setVisible():
		control_list = ['AmendID']
		return control_list

	@staticmethod
	def setWidth():
		Fields = [('SubLoanID',		len3),
				  ('CustomerName',	len3),
				  ('Currency',		len1),
				  ('Gender',		len1),
				  ('Outstanding',	len3),
				  ('Principle',		len3),
				  ('NumberOfDay',	len1),
				  ('InterestDue',	len3),
				  ('AmendDate',		len3)]
		return Fields

	@staticmethod
	def setDisableforEdit():
		return [('ID'),('LoanID'), ('SubLoanID'), ('Currency'),('CustomerName')]

	@staticmethod
	def moneyField():
		return [["Outstanding", "Currency"],
				["Principle", "Currency"],
				["InterestDue", "Currency"]]

	@staticmethod
	def formatMoney():
		return ["Outstanding", "Principle", "InterestDue"], "Currency"

	@staticmethod
	def hotSelectField():
		hotfield  		= []
		fielddisplay	= "SubLoanID"
		varname 		= "LoanID:$('#LoanID').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/GetSubLoan", "change"]
		hotfield.append(fun)
		return hotfield

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= 	"$('#Principle').val(data.Principle);"
		fielddisplay 	+= 	"$('#Principle').change();"
		varname 		=	"Outstanding:$('#Outstanding').val()"
		fun 			=	["Outstanding", varname, fielddisplay, "/Morakot/GetPrincipleAmt", "change"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#InterestDue').val(data.InterestDue);"
		fielddisplay 	+= 	"$('#InterestDue').focus();$('#NumberOfDay').focus();"
		varname 		=	"Principle:$('#Principle').val(),NumberOfDay:$('#NumberOfDay').val(),"
		varname			+=	"LoanID:$('#LoanID').val()"
		fun 			=	["Principle", varname, fielddisplay, "/Morakot/GetInterestDue", "change"]
		hotfield.append(fun)
		fun 			=	["NumberOfDay", varname, fielddisplay, "/Morakot/GetInterestDue", "change"]
		hotfield.append(fun)

		fielddisplay 	= 	"$('#Currency').val(data.Currency);"
		fielddisplay 	+= 	"$('#CustomerName').val(data.CustomerName);"
		fielddisplay 	+= 	"$('#Outstanding').val(data.Outstanding);"
		fielddisplay 	+= 	"$('#Principle').val(data.Principle);"
		fielddisplay 	+= 	"$('#InterestDue').val(data.InterestDue);"
		fielddisplay 	+= 	"$('#Outstanding').focus();$('#Principle').focus();"
		fielddisplay 	+= 	"$('#InterestDue').focus();$('#NumberOfDay').focus();"
		varname 		=	"LoanID:$('#LoanID').val(),SubLoanID:$('#SubLoanID').val(),NumberOfDay:$('#NumberOfDay').val()"
		fun 			=	["SubLoanID", varname, fielddisplay, "/Morakot/GetSubLoanDetail", "change"]
		hotfield.append(fun)

		return hotfield