from app.mktcore.imports						import *

import app.tools.loantools.rescheduletools 		as mktreschedule
import app.tools.mktdate 						as mktdate
import app.tools.mktaddress						as mktaddress
import app.tools.mktmoney						as mktmoney

from app.LoanContract.models 					import MKT_LOAN_CONTRACT
from local.TGC.SubLoanDetail.models				import MKT_SUB_LOAN_DE
from app.LoanProduct.models						import MKT_LOAN_PRODUCT
from app.ScheduleDefine.models					import MKT_SCHED_DEFINE
from app.Customer.models						import MKT_CUSTOMER
from app.Currency.models						import MKT_CURRENCY

@app.route('/Morakot/SimulateRepSchedule', methods=['GET','POST'])
def simulateRepSchedule():

	ErrorMsg    = []
	getCheck = checkAccess ("/Morakot/SimulateRepSchedule/","Search")
	if getCheck != True:
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	if request.method == 'GET':
		return render_template('simulaterepsched.html',
					ID = "",
					Resource = "AUTH",
					Data = {})

	if request.method == 'POST':
		
		LCID 			= request.form["ID"]
		Resource		= request.form["Resource"]
		
		Data = {}

		#Get Loan Contract if not found return error msg
		LCObj		= MKT_LOAN_CONTRACT.query.get(LCID) if LCID else ""
		if not LCObj:
			Data.update({'Msg':"Loan Contract not found!"})
			Data.update({'Status':False})
			return render_template('simulaterepsched.html',
					ID = LCID,
					Resource = Resource,
					Data = Data)
		Data.update({'LCObj':LCObj})

		#Get Customer if not found return error msg
		CustomerObj 	= MKT_CUSTOMER.query.get(LCObj.ContractCustomerID)
		if not CustomerObj:
			Data.update({'Msg':"Customer not found!"})
			Data.update({'Status':False})
			return render_template('simulaterepsched.html',
					ID = LCID,
					Resource = Resource,
					Data = Data)
		Data.update({'CustomerObj':CustomerObj})
		
		#Get Currency Obj for mktmoney
		CurrencyObj 	= MKT_CURRENCY.query.get(LCObj.Currency)
		Data.update({'CurrencyObj':CurrencyObj})

		#Get Address for Customer
		Address 		= mktaddress.getAddress(ProvinceID = CustomerObj.Province,
												DistrictID = CustomerObj.District,
												CommuneID = CustomerObj.Commune,
												VillageID = CustomerObj.Village,
												HouseNo = CustomerObj.HouseNo,
												Street = CustomerObj.Street)
		Data.update({"Address":Address})

		#Get the repayment principal based on Sub Loan Contract
		GetPriStatus, PriRepList = getPrincipalRep(LCID=LCID)
		if not GetPriStatus:
			Data.update({'Msg':"Sub Loan Contract not found!"})
			Data.update({'Status':False})
			return render_template('simulaterepsched.html',
					ID = LCID,
					Resource = Resource,
					Data = Data)

		#Get Loan Product if not found return error msg
		LPObj		= MKT_LOAN_PRODUCT.query.get(LCObj.LoanProduct)
		if not LPObj:
			Data.update({'Msg':"Loan Product not found"})
			Data.update({'Status':False})
			return render_template('simulaterepsched.html',
					ID = LCID,
					Resource = Resource,
					Data = Data)

		#Query for schedule define of Loan Contract
		SchedDefineObj = MKT_SCHED_DEFINE.query.get(LCID)

		#Set default to 1 if Schedule define is not found
		FwdBwdKey = 1 if not SchedDefineObj else SchedDefineObj.FwdBwdKey

		RepSchedList = getRepSchedList(PriFrequency = 12,
									PriRepList = PriRepList,
									FwdBwdKey = FwdBwdKey,
									OutstandingAmount = LCObj.OutstandingAmount,
									ValueDate = LCObj.ValueDate,
									FreqType = LCObj.FreqType,
									Frequency = LCObj.Frequency,
									InterestRate = LCObj.InterestRate,
									IntDayBasis = LPObj.IntDayBasis)
		

		Data.update({'Status':True})
		Data.update({'RepSchedList':RepSchedList})

		return render_template('simulaterepsched.html',
									ID = LCID,
									LCObj = LCObj,
									Resource = Resource,
									mktmoney = mktmoney,
									mktdate = mktdate,
									Data = Data)

def getPrincipalRep(**kwargs):

	LCID		= kwargs.get("LCID", "")

	SubLoanDeList	= MKT_SUB_LOAN_DE.query.filter_by(LoanID = LCID).all()

	Status = False
	PrincipalDueList = [0,0,0,0]

	"""
		If found Sub Loan: will get the total amound of 03,06,12,15 Cycle from Sub Loan
		and return them as the principal due of the Repayment Schedule. 
		PrincipalDue List index 0 = sum of EndOf03Cycle
								1 = sum of EndOf06Cycle
								2 = sum of EndOf12Cycle
								3 = sum of EndOf15Cycle
	"""
	if SubLoanDeList:

		for SubLoanDe in SubLoanDeList:
			PrincipalDueList[0] = PrincipalDueList[0] + SubLoanDe.EndOf03Cycle
			PrincipalDueList[1] = PrincipalDueList[1] + SubLoanDe.EndOf06Cycle
			PrincipalDueList[2] = PrincipalDueList[2] + SubLoanDe.EndOf12Cycle
			PrincipalDueList[3] = PrincipalDueList[3] + SubLoanDe.EndOf15Cycle

		Status = True

	return Status, PrincipalDueList 

def getRepSchedList(**kwargs):

	PriFrequency		= kwargs.get("PriFrequency", 12)
	PriRepList 			= kwargs.get("PriRepList", [])
	FwdBwdKey 			= kwargs.get("FwdBwdKey", 1)
	OutstandingAmount 	= kwargs.get("OutstandingAmount", 0)
	ValueDate 			= kwargs.get("ValueDate", "")
	FreqType			= kwargs.get("FreqType", "")
	Frequency 			= kwargs.get("Frequency", "")
	InterestRate 		= kwargs.get("InterestRate", 0)
	IntDayBasis 		= kwargs.get("IntDayBasis", 0)

	RepSchedList = []

	#Loop for in Pricipal Repayment List, at least 4 round will be looped 
	for PriRep in PriRepList:

		#When the outstanding amount equal to 0 the process will stop then return result
		if OutstandingAmount == 0:
			break

		#Loop for the repayment only Interest period, default is 12 rounds
		for i in range(0,PriFrequency):
			
			DictData = {}

			PreviousColDate	= ValueDate if len(RepSchedList) == 0 else RepSchedList[len(RepSchedList)-1].get("NextColDate") 

			NextColDate		= mktreschedule.getColDate(PreviousColDate
													,int(FreqType),
													int(Frequency),
													FwdBwdKey,
													True)

			IntPerDay 	= mktreschedule.getInterestPerDay(float(InterestRate), 
													float(OutstandingAmount),
													float(IntDayBasis),
													NextColDate)

			NumOfDays 		= mktdate.getDateDiff(PreviousColDate, NextColDate)
			IntDue 			= float(IntPerDay) * float(NumOfDays)

			DictData.update({"NextColDate":NextColDate})
			DictData.update({"NumOfDays":NumOfDays})
			DictData.update({"PrincipalDue":0})
			DictData.update({"IntDue":IntDue})

			RepSchedList.append(DictData)

		"""	
			When Oustanding - PriRep*0.7 < 0 or PriRep == 0 the principal due 
			will be equal to the rest of the outstanding amount.
			Else the principal due will be equal to Principal sum from Sub Loan.
		"""
		if (float(OutstandingAmount) - (float(PriRep)*0.7)) < 0 or PriRep == 0:
			RepSchedList[len(RepSchedList)-1].update({"PrincipalDue":OutstandingAmount})
			OutstandingAmount = 0
		
		else:
			RepSchedList[len(RepSchedList)-1].update({"PrincipalDue":(float(PriRep)*0.7)})
			OutstandingAmount = float(OutstandingAmount) - (float(PriRep)*0.7)

	return RepSchedList