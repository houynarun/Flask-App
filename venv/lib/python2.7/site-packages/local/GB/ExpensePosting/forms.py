from app.mktcore.wtfimports 	import *
from sqlalchemy 				import *

from app.FundTransfer.models 	import *
from app.FundTransfer.forms 	import *

class FRM_EXPENSE_POSTING_EX(FRM_FUND_TRANSFER):
	CrCurrency 		= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=loadDefaultCurrency(),
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	DrAccount 		= 	RemoteTextField(getLanguage("Account"),
										dicRemote={'url':'/Morakot/getAccount'}
						)
	DrCategory 		= 	QuerySelectField(requiredlabel("Category","*"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'',
							validators=[validators.Required()]
						)
	DrCurrency 		= 	QuerySelectField(requiredlabel(getLanguage("Dr Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=loadDefaultCurrency(),
							blank_text=u'--None--',
							validators=[validators.Required()]
						)
	CrAccount 		= 	TextField(requiredlabel('Credit Account', "*"), [validators.Required("Till Account not found.")])
	CrCategory 		= 	TextField(requiredlabel("Credit Category", "*"), [validators.Required()])
	Amount 			= 	DecimalField(requiredlabel(getLanguage("Amount"), "*"), [validators.Required()], default=0)
	Transaction 	= 	QuerySelectField(requiredlabel(getLanguage("Transaction"), "*"),
							query_factory=loadTransaction,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("Choose Transaction"),
							validators=[validators.Required()]
						)

	TranDate 		= 	DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()], default=loadCurrentDate)
	Reference 		= 	TextField(getLanguage("Reference"))
	#2018-06-05 - Inter-Branch
	TargetBranch 	=	QuerySelectField('Target Branch',
							query_factory=mktaccounting.loadBranch,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--'
						)
	TargetBranchDrCr = SelectField("Target Branch Dr/Cr",
							choices=[('', '--None--'),('Dr', 'Debit'),('Cr', 'Credit')],
							coerce=str)
	#end
	Note 			= 	TextAreaField(requiredlabel(getLanguage("Note"),"*"),[validators.Required()])

	ExchangeRate 	= TextField(requiredlabel('Exchange Rate','*'),description='1-Detail',
												validators=[validators.Required(),
															mktteller.customValidateExchangeRate])

	LCYAmount 		= TextField(requiredlabel('LCY Amount','*'),description='1-Detail',
											validators=[validators.Required(),
														mktteller.customValidateLCYAmount])
	DrGLKey 		= TextField('Debit GL Key', description='1-Detail')
	CrGLKey 		= TextField('Credit GL Key', description='1-Detail')
	Module 			= TextField("Module", default="EP")

	@staticmethod
	def setVisible():
		base 			= super(FRM_EXPENSE_POSTING_EX, FRM_EXPENSE_POSTING_EX).setVisible()

		control_list	=['CrAccount','CrCategory','DrCurrency','Transaction','TargetBranch','TargetBranchDrCr','DrGLKey','CrGLKey']
		control_list.extend(base)

		return control_list

	@staticmethod
	def hotField():
		base 		= super(FRM_EXPENSE_POSTING_EX, FRM_EXPENSE_POSTING_EX).hotField()
		hotfield 	= []

		fielddisplay 	= "$('#CrAccount').val(data.CrAccount); "
		fielddisplay 	+= "$('#CrCategory').val(data.CrCategory);"
		fielddisplay	+="$('#Transaction').select2('data', {'id':data.TranCode,'text':data.TranCode});"
		fielddisplay	+="$('#DrCurrency').select2('data', {'id':data.Currency,'text':data.Currency});"
		varname 		= "Currency:$('#CrCurrency').val()"
		fun 			= ["CrCurrency", varname, fielddisplay, "/Morakot/ExpensePostingHotField", "change"]
		hotfield.append(fun)

		hotfield.extend(base)

		return hotfield

	@staticmethod
	def beforeNewID ():
		#Check Teller Account
		Check = mktteller.isUserTillAccount()
		if not Check[0]:
			return True,Check[1]

		#Check Suspend Account
		CheckSuspendAccount = mktteller.isSuspendConfig()
		if not CheckSuspendAccount[0]:
			return True,CheckSuspendAccount[1]

		return False,''
			
	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def findinHist():
		return True