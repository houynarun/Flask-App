from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from decimal 						import Decimal
from app 							import db
from sqlalchemy 					import *

import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney

class CustomPenalty(object):
	def __init__(self,**kwargs):
		pass

	@staticmethod
	def setCustomPretermination(**kwargs):
		"""
			Example: If Client paid-off before the maturity date and the number of dates from start date and paid date is smaller than collection date of (Loan-Term/2), So the system will charge this customer, else don't charge

			Disbursed: $ 5,000.00,
			ValueDate: 2017-12-29, 
			InterestRate: 18/year

			ID	Date		Principal	Interest	Total		Status				Loan Balance
			1	2018-01-29	$ 833.33	$ 77.50		$ 910.83	Full paid on time	$ 4,166.67
			2	2018-02-28	$ 833.33	$ 62.50		$ 895.83	Full paid on time	$ 3,333.34
			3	2018-03-29	$ 833.33	$ 48.33		$ 881.66	Not Yet Due			$ 2,500.01
			4	2018-04-27	$ 833.33	$ 36.25		$ 869.58	Not Yet Due			$ 1,666.68
			5	2018-05-29	$ 833.33	$ 26.67		$ 860.00	Not Yet Due			$ 833.35
			6	2018-06-29	$ 833.35	$ 12.92		$ 846.27	Not Yet Due			$ 0.00
				Total		$ 5,000.00	$ 264.17	$ 5,264.17
			Args:
				**kwargs 			(kwargs):
					NumOfDayLate	(int):		number of day late
					PaidOffDate		(str):		string date "2017-12-12"
					LoanObj 		(object):	sqlalchemy object of Loan Contract
					NewStr			(string):	string additional parameters, "CUSTOM"
			Return:
				TotalPenalty 		(string): 	string format money
			Raise:
				Exception
			Call:
				CustomPenalty.setCustomPretermination(**kwargs)
		"""

		NumOfDay 		= kwargs.get("NumOfDay",0)
		PaidOffDate 	= kwargs.get("PaidOffDate","")
		LoanObj 		= kwargs.get("LoanObj",None)
		Param 			= kwargs.get("NewStr",[])

		TotalPenalty 	= 0
		ScheduleObj 	= ''
		Condition 		= 0
		Installment 	= 0
		AccrCurrentInt	= 0

		ID 				= LoanObj.ID
		Product 		= LoanObj.LoanProduct

		matching = [s for s in Param if str(Product) in s]

		if not matching:
			return TotalPenalty

		ConList 	= str(matching).split('*')
		Condition 	= ConList[1]
		Installment = ConList[2][:-2]

		BankDate 		= mktdate.getBankDate()
		ScheduleObj		= db.session.query(MKT_REP_SCHEDULE.No,MKT_REP_SCHEDULE.CollectionDate).\
								filter(MKT_REP_SCHEDULE.LoanID==LoanObj.ID).\
								filter(MKT_REP_SCHEDULE.CollectionDate >= str(BankDate)).\
								order_by(MKT_REP_SCHEDULE.No).first()

		if ScheduleObj:
			# check Collection Date is equal Bank Date, if not equal get amount from accr Current Installment
			if not str(ScheduleObj.CollectionDate) == str(BankDate):
				AccrCurrentInt 	= LoanObj.AccrCurrentInt

			if eval('ScheduleObj.No %s'%Condition):
				ScheduleObj		= db.session.query(func.sum(MKT_REP_SCHEDULE.Interest).label("TotalInterest")).\
									filter(MKT_REP_SCHEDULE.LoanID==LoanObj.ID).\
									filter(MKT_REP_SCHEDULE.CollectionDate > str(BankDate)).\
									filter(MKT_REP_SCHEDULE.No <= str(Installment)).first()
				TotalPenalty = float(ScheduleObj.TotalInterest) - float(AccrCurrentInt) if ScheduleObj else 0

		TotalPenalty 	= mktmoney.toMoney(float(TotalPenalty),mktmoney.getCurrencyObj(LoanObj.Currency))

		return TotalPenalty

def getCustomTerminationPenalty(NumOfDay,PaidOffDate,LoanObj,NewStr):
	"""Method to access class CustomPenalty"""
	kwargs = {"NumOfDay":NumOfDay,"PaidOffDate":PaidOffDate,"LoanObj":LoanObj,"NewStr":NewStr}
	Amount = CustomPenalty.setCustomPretermination(**kwargs)
	return Amount