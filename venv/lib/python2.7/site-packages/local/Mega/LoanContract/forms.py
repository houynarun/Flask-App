from wtforms 						import DecimalField, IntegerField
from app.mktcore.wtfimports 		import *
from datetime 						import datetime, date, timedelta
from local.Mega.Supplier.models 	import *
from app.tools.mktloan 				import *
from decimal 						import *
from app.Tax.models 				import MKT_TAX
from ..tools.mktloan 				import LocalLoanEx

from app.LoanContract.models		import *
from app.LoanContract.forms 		import *
import app.tools.mktmoney 			as mktmoney
import app.tools.user 				as mktuser
import app.tools.mktdate	 		as mktdate
import app.tools.mktsetting 		as mktsetting
from   app.Currency.models 			import MKT_CURRENCY

@app.route("/Morakot/CollateralByCustomer", methods=['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def CollateralByCustomer():
	Customer = request.args.get("CustomerID") if "CustomerID" in request.args else ""
	CollalteralObj = 	MKT_COLLATERAL.query.\
						filter(MKT_COLLATERAL.CustomerID == Customer,MKT_COLLATERAL.Active =='Y').\
						all()
	dic = {}
	dic["__None"] = "--None--"
	if CollalteralObj:
		for row in  CollalteralObj:
			dic[row.ID] = row.ID + "-" + row.Description
	return jsonify(results=dic)

@app.route("/Morakot/getVATInputOutput", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getVATAmount():
	AssetValue  = request.args.get('AssetValue')
	Currency  	= request.args.get('Currency')
	VATInputOutput  = 0
	TaxRate   		= 0
	TaxID  = mktsetting.getAppSetting('VAT')
	TaxObj = MKT_TAX.query.get(TaxID)
	if TaxObj:
		if TaxObj.Rate !=None:
			TaxRate = TaxObj.Rate
	CurrencyObj    = mktmoney.getCurrencyObj(Currency)
	AssetValue 	   = mktmoney.toMoney(float(wordAmount(AssetValue)), CurrencyObj)
	VATInputOutput = (float(AssetValue.replace(',','')) * int(TaxRate))/100
	return jsonify(VATInputOutput = VATInputOutput)

@app.route("/Morakot/getSecurityDeposit", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSecurityDeposit():
	try:
		
		LoanAppID 		= request.args.get('LoanAppID')
		Amount 			= "0"
		Term 			= "0"
		FreqType 		= "1"
		Frequency 		= "0"
		FreqDesc 		= "1.Monthly"
		Installment 	= 0
		LNCustomerID 	= ""
		LoanProduct 	= ""
		Category 		= ""
		InterestRate 	= ""
		Currency 		= ""
		ProDesc 		= ""
		OnOff 			= ""
		OnOff1 			= ""
		Group 			= ""
		VBID 			= ""
		VB_Desc 		= ""
		CustomerName 	= ""
		LoanPurpose 	= ""
		PurDesc 		= ""
		SourceOfFund 	= ""
		SouDesc 		= ""
		MoreThanOneYear = "N"
		ContractOfficerID = ""
		OfficerName 	= ""

		Account 		= 	""
		AccountName 	= 	""
		SecurityDepoPercent    = mktsetting.getAppSetting('MEGA_SECURITY_DEPO')
		SecurityDepo 		   = 0

		query = MKT_LOAN_APPLICATION.query.get(LoanAppID)
		if query:

			CurrencyObj 	= MKT_CURRENCY.query.get(query.Currency)
			Amount 			= str(mktmoney.toMoney(float(query.Amount), CurrencyObj))
			Term 			= str(query.Term) if query.Term else "0"
			
			if int(Term) > 12:
				MoreThanOneYear = "Y"

			Frequency 		= str(query.Frequency)
			Installment 	= str(query.Installment)
			LNCustomerID 	= query.LNCustomerID

			Cus = MKT_CUSTOMER.query.get(LNCustomerID)
			if Cus:
				CustomerName 	= 	LNCustomerID + " - " + Cus.LastNameEn + " " + Cus.FirstNameEn

				AccountID 		= 	MKT_ACCOUNT.query.\
									filter(MKT_ACCOUNT.CustomerList == LNCustomerID)

				if AccountID.count() == 1:
					for item in AccountID:
						Account 		= 	item.ID
						AccountName 	=	item.ID

				ContractOfficerID 	= Cus.Officer
				Officer = MKT_OFFICER.query.get(ContractOfficerID)
				if Officer:
					OfficerName = "%s - %s - %s"%(Officer.ID,Officer.LastName,Officer.FirstName)

			LoanProduct  	= query.LoanProduct
			ProDesc 		= MKT_LOAN_PRODUCT.query.get(LoanProduct).Description
			Category 		= query.Category
			InterestRate 	= str(query.InterestRate)
			InterestRate 	= InterestRate.split()
			InterestRate 	= InterestRate[0]
			Currency 		= query.Currency

			# Guarantor 		= MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID == LoanAppID).all()
			# if Guarantor:
			# 	OnOff 		= "display: none;"

			# Collateral 		= MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID == LoanAppID).all()
			# if Collateral:
			# 	OnOff1 		= "display: none;"

			Group 			= query.Group
			
			VBID 			= query.VBID
			if not VBID:
				VBID 	=	"__None"
				VB_Desc =	"Select ContractVB"
			else:
				VB = MKT_VB.query.get(VBID)
				if VB:
					VB_Desc = VB.Description

			FreqType = query.FreqType
			if FreqType == "1":
				FreqDesc = "1.Monthly"
			elif FreqType == "2":
				FreqDesc = "2.Weekly"
			elif FreqType == "3":
				FreqDesc = "3.Daily"

			LoanPurpose = query.LoanPurpose
			if not LoanPurpose:
				LoanPurpose = 	"__None"
				PurDesc 	= 	"--None--"
			else:
				LP = MKT_LOAN_PURPOSE.query.get(LoanPurpose)
				if LP:
					PurDesc = LP.Description

			SourceOfFund = query.SourceOfFund
			if not SourceOfFund:
				SourceOfFund 	=	"__None"
				SouDesc 		=	"--None--"
			else:
				SF = MKT_SOURCE_OF_FUND.query.get(SourceOfFund)
				if SF:
					SouDesc = SF.Description

		CurrencyObj  = MKT_CURRENCY.query.get(Currency)
		Amount 		 = str(mktmoney.toMoney(float(query.Amount), CurrencyObj))
		SecurityDepo = (int(SecurityDepoPercent) * float(str(Amount.replace(',',''))))/100

		return jsonify(Amount=Amount, Installment=Installment, Term=Term, Frequency=Frequency,
						LNCustomerID=LNCustomerID, CustomerName=CustomerName,
						LoanProduct=LoanProduct, ProDesc=ProDesc, Category=Category,
						InterestRate=InterestRate, Currency=Currency, OnOff=OnOff,
						Group=Group, VBID=VBID, VB_Desc=VB_Desc, FreqType=FreqType,
						FreqDesc=FreqDesc, LoanPurpose=LoanPurpose, PurDesc=PurDesc,
						SourceOfFund=SourceOfFund, SouDesc=SouDesc, MoreThanOneYear=MoreThanOneYear,
						Account=Account, AccountName=AccountName,
						ContractOfficerID=ContractOfficerID, OfficerName=OfficerName, OnOff1=OnOff1,
						SecurityDepo= SecurityDepo)
	except Exception, e:
		raise

@app.route("/Morakot/getSecurityDepositChange", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSecurityDepositChange():
	SecurityDepo = 0
	AssetValue 	 = request.args.get('AssetValue')
	Currency  	 = request.args.get('Currency')
	SecurityDepoPercent    = mktsetting.getAppSetting('MEGA_SECURITY_DEPO')

	CurrencyObj  		   = mktmoney.getCurrencyObj(Currency)
	AssetValueAmount 	   = mktmoney.toMoney(float(wordAmount(AssetValue)), CurrencyObj)
	SecurityDepo 		   = (int(SecurityDepoPercent) * float(AssetValueAmount.replace(',','')))/100

	return jsonify(SecurityDepo= SecurityDepo)

def loadSupplier(ID=''):  #define function 
	Branch  =   mktuser.getCurrentBranch()
	if ID:
		return MKT_SUPPLIER.query.filter(MKT_SUPPLIER.Branch==Branch).\
								filter(MKT_SUPPLIER.Active=='Y').\
								filter(MKT_SUPPLIER.ID==ID)
	else:
		return MKT_SUPPLIER.query.filter(MKT_SUPPLIER.Branch==Branch).\
							 filter(MKT_SUPPLIER.Active=='Y') # tablename.query



@app.route("/Morakot/LoanProduct", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanProduct():
	ProductType = ['100','101'] # This variable use for store ID Loan Product ( Electronic Product)
	LoanProduct   	= request.args.get('LoanProduct')
	Bool 				= 	True
	
	if LoanProduct in ProductType:
		Bool 				= 	False

	return jsonify(
			Bool 				= Bool
		)



def custom_DownPayment(form,field):

	DownPayment 		= 	request.form['DownPayment'] if request.method == 'POST' else ""
	if DownPayment <= "0":
		raise ValidationError("DownPayment must be bigger than 0")

	else:
		field.errors[:] = []

def validate_PaymentDay(form,field):
	PaymentDay = request.form['PaymentDay']
	try:
		if PaymentDay:
			int(PaymentDay)
	except:
		raise ValidationError("This field allows numeric only.")


def custom_LeaseAssetValue(form,field):

	LeaseAssetValue 		= 	request.form['LeaseAssetValue'] if request.method == 'POST' else ""
	if LeaseAssetValue <= "0":
		raise ValidationError("LeaseAssetValue must be bigger than 0")

	else:
		field.errors[:] = []

@app.route("/Morakot/InputCurrency", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getInputCurrency():
	ProductType = ['100','101'] # This variable use for store ID Loan Product ( Electronic Product)
	LoanProduct 	= request.form["LoanProduct"] if request.method == 'POST' else ""
	BoolAmount             =     False
	# Disable CBC Product Type
	if LoanProduct in ProductType:
		BoolAmount                 =     True
	return jsonify(
			LoanProduct            = LoanProduct,
			BoolAmount             = BoolAmount,
		)


def Loan_Product(form, field):
	LoanProduct 	= request.form["LoanProduct"] if request.method == 'POST' else ""
	CBCProductType = request.form["CBCProductType"] if request.method == 'POST' else ""
	

	if LoanProduct == "100" or LoanProduct =="101":
		if CBCProductType == "":
			field.errors[:] = []
			raise ValidationError("This field is required.")
	else:
		field.errors[:] = []

def loadCollateral():
	Customer = request.form["ContractCustomerID"] if request.method == 'POST' else ""
	if Customer:
		return MKT_COLLATERAL.query.filter(MKT_COLLATERAL.CustomerID == Customer and MKT_COLLATERAL.Active=='1')
	else:
		return MKT_COLLATERAL.query.filter(MKT_COLLATERAL.CustomerID == "" and MKT_COLLATERAL.Active=='')

class FRM_LOAN_CONTRACT_EX(FRM_LOAN_CONTRACT):
	BookVAT 				= TextField("Book VAT",default='N')
	PaymentDay 				= 	TextField(requiredlabel('Payment Day','*'),
										validators=[validators.Required(),validate_PaymentDay],
										description="6-Asset")
	DownPayment 			= 	DecimalField("Down Payment",
										description="6-Asset")
	LeaseAssetValue  		= 	DecimalField(requiredlabel("Lease Asset Value","*"),
										validators=[validators.Required(),custom_LeaseAssetValue],
										description="6-Asset")
	SecurityDeposit				=   DecimalField(("Security Deposit"),description="6-Asset")
	SecurityDepositOutStanding	=   DecimalField(("Security Deposit OutStanding"),description="6-Asset")
	VATInput 					= 	DecimalField(("VAT Input"),description="6-Asset")
	VATOutput					=   DecimalField(("VAT Output"),description="6-Asset")
	AssetDescription 		= 	TextAreaField(requiredlabel("Asset Description","*"),
										description="6-Asset")
	CBCProductType 			= 	SelectField('CBC Product Type',
									choices 	= [('','--None--'),
												('MBL','MBL - Mobile Phone Loan'),
												('CPL','CPL - Computer Loan'),
												('CDL','CDL - Consumer Durables Loan')
												],
									coerce			= str,
									validators=[Loan_Product],
									default			= '')
	Supplier 				=	QuerySelectField('Supplier',
									query_factory=loadSupplier, 
									get_label='DealerName',
									allow_blank=True,
									default			= '__None__',
									blank_text='--None--'
								)

	Guarantor 		= 	QuerySelectField(getLanguage("Guarantor"),
							query_factory=loadGuarantor,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--None--',
							description="3-%s" %getLanguage("Guarantor")
						)

	GTRelationIndicator = 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description="3-%s" %getLanguage("Guarantor")
						)
	Type 				= SelectField("Type",
								choices=[('G', 'Guarantor'), ('R', 'Referrer'), ('S', 'Successor')],
								coerce=str,
								default='G',
								description="3-%s" %getLanguage("Guarantor")
							)

	CoBorrowerID 	= 	QuerySelectField(getLanguage("Co-Borrower"),
							query_factory=loadCoBorrower,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="5-%s" %getLanguage("Co-Borrower")
						)
	RelationIndicator 	= 	QuerySelectField(("Relation Indicator"),
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="5-%s" %getLanguage("Co-Borrower")
						)

	ChargeKey 	= 	QuerySelectField(getLanguage("Charge Key"),
						query_factory=loadCharge,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--None--',
						description=u'2-%s' %getLanguage("Loan Charge")
					)

	RateFixed 			= 	TextField(getLanguage("Rate") + "/" + getLanguage("Fixed"), description=u'2-%s' %getLanguage("Loan Charge"))
	Charge 				= 	TextField(getLanguage("Charge"),
								validators=[custom_Charge], 
								default=0,
								description=u'2-%s' %getLanguage("Loan Charge"))

	ChargePerInstallment= 	TextField("Charge Per Installment", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargePerDay		=   TextField("Charge Per Day", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargeLastBooked	=   TextField("Charge Last Booked", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	
	ChargeEarned 		= 	TextField("Charge Earned", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargeUnearned 		= 	TextField("Charge Unearn", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	# AccrCurrent 		= 	TextField("Accr Current Installment", default=0, description=u'2-%s' %getLanguage("Loan Charge"))

	Collateral 		= 	QuerySelectField(getLanguage("Collateral"),
							query_factory=loadCollateral,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="4-%s" %getLanguage("Collateral")
						)


	@staticmethod
	def moneyField():
		base 			= 		super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).moneyField()
		controls_list 	= 		[["Amount", "Currency"], ["ApprovedAmount", "Currency"], ["Disbursed", "Currency"], ["TotalInterest", "Currency"], ["AccrInterest", "Currency"], ["AccrIntPreMonth", "Currency"],
								["AccrCurrentInt", "Currency"], ["AccrIntCurrMonth", "Currency"], ["OutstandingAmount", "Currency"],
								["ChargePerInstallment", "Currency"], ["ChargeLastBooked", "Currency"], ["ChargeEarned", "Currency"], ["ChargeUnearned", "Currency"],
								["DownPayment","Currency"],["LeaseAssetValue","Currency"],["SecurityDepositOutStanding","Currency"],["VATInput","Currency"],["VATOutput","Currency"],["SecurityDeposit","Currency"]]
		controls_list.extend(base)
		return controls_list

	@staticmethod
  	def setVisible():
  		base 			= 	super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).setVisible()
		controls_list 	=['SecurityDepositOutStanding','BookVAT','LoanStatus']

		controls_list.extend(base)
		return controls_list
	@staticmethod
	def setDisable():
		base 		 = super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).setDisable()
		Fields 		 = []
		control_list = []
		ID 			 = g.formID if 'formID' in g else ''
		LoanProduct  = ''
		if ID:
			LoanContract 		= MKT_LOAN_CONTRACT_INAU.query.filter(MKT_LOAN_CONTRACT_INAU.ID==ID).first()
			if not LoanContract:
				LoanContract 	= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID==ID).first()
			LoanProduct 		= LoanContract.LoanProduct if LoanContract else ''

		else:
			LoanProduct   		= request.form.get('LoanProduct') if 'LoanProduct' in request.form else ''
		if LoanProduct == "100" or LoanProduct == "101":
			Fields = []
		else:
			Fields = [('CBCProductType')] 
		# Fields.append('SecurityDepositOutStanding')

		control_list=['ExchangeAmount']

		Fields.append(control_list)

		Fields.extend(base)
		return Fields


	@staticmethod
	def hotField():
		base 			= 		super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).hotField()
		hotfield 		=		[]

		fielddisplay 	=    "(data.Bool==true)?$('#CBCProductType').val('').select2().trigger('change'):'';"
		fielddisplay 	+=   "(data.Bool==true)?$('#CBCProductType').select2('readonly',true):$('#CBCProductType').select2('readonly',false);"
		varname 		= "LoanProduct:$('#LoanProduct').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/LoanProduct", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#VATInput').val(data.VATInputOutput),$('#VATOutput').val(data.VATInputOutput)"
		varname 		= "AssetValue:$('#LeaseAssetValue').val(),Currency:$('#Currency').val()"
		fun 			= ["LeaseAssetValue", varname, fielddisplay, "/Morakot/getVATInputOutput", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#SecurityDeposit').val(data.SecurityDepo),$('#SecurityDepositOutStanding').val(data.SecurityDepo)"
		varname 		= "AssetValue:$('#LeaseAssetValue').val(),Currency:$('#Currency').val()"
		fun 			= ["LeaseAssetValue", varname,fielddisplay,"/Morakot/getSecurityDepositChange","blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ContractCustomerID').select2('data', {'id':data.LNCustomerID,'text':data.CustomerName}),$('#Amount').val(data.Amount),$('#Disbursed').val(data.Amount),$('#OutstandingAmount').val(data.Amount),$('#Installment').val(data.Installment),$('#Term').val(data.Term),$('#Frequency').val(data.Frequency)"
		fielddisplay 	+= ",$('#LoanProduct').select2('data', {'id':data.LoanProduct,'text':data.ProDesc}),$('#Category').val(data.Category),$('#InterestRate').val(data.InterestRate),$('#ContractVB').select2('data', {'id':data.VBID,'text':data.VB_Desc})"
		fielddisplay 	+= ",$('#FreqType').select2('data', {'id':data.FreqType,'text':data.FreqDesc})"
		fielddisplay 	+= ",$('#LoanPurpose').select2('data', {'id':data.LoanPurpose,'text':data.PurDesc})"
		fielddisplay 	+= ",$('#SourceOfFund').select2('data', {'id':data.SourceOfFund,'text':data.SouDesc})"
		fielddisplay 	+= ",$('#ContractOfficerID').select2('data', {'id':data.ContractOfficerID,'text':data.OfficerName})"
		fielddisplay 	+= ",$('#Currency').val(data.Currency),$('#Group').val(data.Group),$('#ApprovedAmount').val(data.Amount)"
		fielddisplay 	+= ",$('a[href=#3-Guarantor]').attr('style', data.OnOff),$('div#3-Guarantor').attr('style', data.OnOff)"
		fielddisplay 	+= ",$('a[href=#4-Collateral]').attr('style', data.OnOff1),$('div#4-Collateral').attr('style', data.OnOff1)"
		fielddisplay 	+= ",$('#MoreThanOneYear').val(data.MoreThanOneYear),$('#SecurityDepositOutStanding').val(data.SecurityDepo),$('#SecurityDeposit').val(data.SecurityDepo)"
		fielddisplay 	+= ",$('#SecurityDeposit').focus(),$('#SecurityDepositOutStanding').focus(),$('#Disbursed').focus()"
		varname 		= "LoanAppID:$('#LoanApplicationID').val(),VATStatus:$('#VAT').val()"
		fun 			= ["LoanApplicationID", varname, fielddisplay, "/Morakot/getSecurityDeposit", "change", "ContractCustomerID" ]
		# hotfield.append(fun)
		# varname 		= "CustomerID:$('#ContractCustomerID').val()"
		# fun 			= ["LoanApplicationID", varname, fielddisplay, "/Morakot/LoanApplicationAccountInfo", "change", "ContractCustomerID" ]
		hotfield.append(fun)
		
		hotfield.extend(base)
		return hotfield

	@staticmethod
	def hotSelectField():
		base 			= 		super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).hotSelectField()
		hotfield=[]

		fielddisplay 	= "Collateral"
 		varname 		= "CustomerID:$('#ContractCustomerID').val()"
 		fun 			= ["ContractCustomerID", varname, fielddisplay, "/Morakot/CollateralByCustomer", "click",]
		hotfield.append(fun)
		
		hotfield.extend(base)
		return hotfield

		
	# Check drawdown exist money or not 
	@staticmethod
	def checkAccountMoneyExist(AccountID='',Amount=0):
		IsExist = False
		AccountObj = MKT_ACCOUNT.query.get(AccountID)
		if AccountObj:
			if AccountObj.AvailableBal > Amount:
				IsExist = True
		return IsExist

	@staticmethod
	def beforeAuthorize():
		# base 			= super(FRM_LOAN_CONTRACT_EX, FRM_LOAN_CONTRACT_EX).beforeAuthorize(postVAT=FRM_LOAN_CONTRACT_EX.postVAT)
		base 	= super(FRM_LOAN_CONTRACT_EX, FRM_LOAN_CONTRACT_EX).beforeAuthorize()
		ID 		= g.formID
		LcObj  	= MKT_LOAN_CONTRACT_INAU.query.get(ID)
		VATOnOff 	= 	mktsetting.getAppSetting('MEGA_VAT_NO_OFF')
		if LcObj:
			if VATOnOff =="Y" and LcObj.DisbursedStat=="Y":	
				LocalLoanEx.VATPosting(LCID=ID,Resource="INAU")
		return True
