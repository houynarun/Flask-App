from wtforms 							import SelectMultipleField
from app.mktcore.wtfimports import *
from app.mktcore.imports 		import *
from models import *

from app.Currency.models 			import *
from app.CollateralType.models 		import *
from app.Branch.models 				import *
from app.Province.models			import *
from app.District.models			import *
from app.Commune.models				import *
from app.Village.models				import *
from app.Collateral.models			import *
from app.Customer.models 			import *
from app.RelationIndicators.models  import *
from app.LoanApplication.models 	import MKT_LOAN_COLLATERAL
from app.tools.mktloan 				import *

import app.tools.user 				as mktuser
import app.tools.mktroute 			as mktroute
import app.tools.mktdate 			as mktdate
import app.tools.mktaddress 		as mktaddress
import app.tools.mktaudit 			as mktaudit
import app.tools.mktautoid          as mktAutoID

def getRecord():
	try:
		result = MKT_FORECLOSED_PROPERTY_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_FORECLOSED_PROPERTY.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'Province'			:str(row.Province)})
				Dict.update({'District'			:str(row.District)})
				Dict.update({'Commune'			:str(row.Commune)})
				Dict.update({'Village'			:str(row.Village)})
				Dict.update({'CollateralID'		:str(row.CollateralID)})
				Dict.update({'CollateralDetailID':str(row.CollateralDetailID)})
			return Dict
		else:
			return Dict

	except:
		raise

def loadCollateral():
	return MKT_COLLATERAL.query

def loadCollateralDetail():
	if request.method == 'POST':
		Collateral = request.form["CollateralID"]
		return MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID == Collateral)
	else:
		if len(getRecord())>0:
			Record = getRecord()
			CollateralObj = MKT_FORECLOSED_PROPERTY.query.filter(MKT_FORECLOSED_PROPERTY.CollateralDetailID==Record['CollateralDetailID'])
			if CollateralObj.first():
				return CollateralObj
			else:
				return MKT_COLLATERAL_DE.query.filter_by(CollateralID=Record['CollateralID'])
		else:	
			return MKT_COLLATERAL_DE.query.filter_by(CollateralID='')
	return MKT_COLLATERAL_DE.query

def loanBankDate():
	return mktdate.getBankDate()

def loadCustomer():
	return MKT_CUSTOMER.query

def loadCollateralType():
	return MKT_COLLATERAL_TYPE.query

def loadBranch():
	Branch = mktuser.getUser().Branch
	return MKT_BRANCH.query.filter_by(ID=Branch)

def loadCurrency():
	return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def loadRelationIndicators():
	return MKT_RELATION_INDICATORS.query

def loadProvince():
	return mktaddress.getProvince()

def loadDistrict():
	if request.method == 'POST':
		Province = request.form["Province"]
	else:
		if len(getRecord())>0:
			print "filter district"
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])  
		else:
			print "no filter"
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

def loadCommune():
	if request.method == 'POST':
		District=request.form["District"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['Commune'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return mktaddress.getLoadCommune(District)

def loadVillage():
	if request.method == 'POST':
		Commune=request.form["Commune"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['Village'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)


class FRM_FORECLOSED_PROPERTY(exform):

	CollateralID 	= 	QuerySelectField(requiredlabel(getLanguage("Collateral"), "*"),
							query_factory=loadCollateral,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()]
						)
	CollateralDetailID  = QuerySelectField(requiredlabel(("Collateral Detail"), "*"),
							query_factory=loadCollateralDetail,
							get_label=lambda a: a.ID,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()]
						)
	FCOperation 		= SelectField(requiredlabel(('Operation'), '*'),
									choices=[('','--None--'),
											 ('1',"1-Transfer to Foreclosed"),
											 ('2',"2-Sale"),
											 ('3',"3-Revalued")],
									coerce=str,
									validators=[validators.Required()]
									)
	FCStatus 			= SelectField(requiredlabel(('Status'), '*'),
									choices=[('','--None--'),
											 ('1',"Transfered"),
											 ('2',"Sold"),
											 ('3',"Revalued")],
									coerce=str,
									validators=[validators.Required()],
									default	= ''
									)
	FCDate	 			= DateField(requiredlabel("Transaction Date","*"),
							format='%Y-%m-%d',
							validators=[validators.Required()],
							default=loanBankDate
						)
	ForeclosedValue		= TextField(requiredlabel("Foreclosed Value","*"),validators=[validators.Required()])
	SaleValue			= TextField(("Sale Value"))
	NewValuationPrice   = TextField(("New Valuation Price"))
	CustomerID 			= RemoteTextField("New Collateral Owner")
	NewCollateralMainID = QuerySelectField(("New Collateral ID"),
							query_factory=loadCollateral,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							default = None
						)
	NewValuer 			= TextField(("New Valuer"))

	CollateralType 	= 	QuerySelectField(requiredlabel(getLanguage("Collateral Type"), "*"),
							query_factory=loadCollateralType,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()],
							description='2-Collateral Detail'
						)

	Currency 		= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()],
							description='2-Collateral Detail'
						)

	PurchasePrice 	= 	TextField(getLanguage("Purchased Price"),description='2-Collateral Detail')
	ValuationPrice 	= 	TextField(getLanguage("Valuation Price"),description='2-Collateral Detail')
	Valuer 			= 	TextField(getLanguage("Valuer"),description='2-Collateral Detail')
	
	IssuedDate 		= 	DateField(getLanguage("Issued Date"),
							format='%Y-%m-%d',
							default=mktdate.getDateISO(),
							validators=[validators.Optional()],
							description='2-Collateral Detail'
						)

	IssuedPlace 	= 	TextField(getLanguage("Issued Place"),[validators.length(max=50)],description='2-Collateral Detail')
	IssuedBy 		= 	TextField(getLanguage("Issued By"),[validators.length(max=100)],description='2-Collateral Detail')
	CollateralNumber= 	TextField("Collateral Number", [validators.length(max=25)],description='2-Collateral Detail')

	Province 		= 	QuerySelectField(getLanguage('Province'),
							query_factory=loadProvince, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Province--',
							description='2-Collateral Detail'
						)

	District 		= 	QuerySelectField(getLanguage('District'),
							query_factory=loadDistrict, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose District--',
							description='2-Collateral Detail'
						)

	Commune 		=	QuerySelectField(getLanguage('Commune'),
							query_factory=loadCommune, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Commune--',
							description='2-Collateral Detail'
						)

	Village 		=	QuerySelectField(getLanguage('Village'),
							query_factory=loadVillage, 
							get_label='Description',
							allow_blank=True,
							blank_text=u'--Choose Village--',
							description='2-Collateral Detail'
						)

	ReceivedDate 	= 	DateField(getLanguage("Received Date"),
							format='%Y-%m-%d',
							validators=[validators.Optional()],
							description='2-Collateral Detail'
						)
	ReceivedBy 		= 	TextField("Received By", [validators.length(max=35)],description='2-Collateral Detail')
	
	WithdrawalDate 	= 	DateField("Withdrawal Date",
							format='%Y-%m-%d',
							validators=[validators.Optional()],
							description='2-Collateral Detail'
						)
	
	WithdrawalBy 	= 	TextField("Withdrawal By", [validators.length(max=35)],description='2-Collateral Detail')

	Description 		= 	TextAreaField(getLanguage("Property Description"),description='2-Collateral Detail')

	OwnershipType 		=	SelectField('Ownership Type', 
								choices=[('1', 'Owned By Customer'),('2', 'Owned By Other')],
								coerce=str,
								description='1-Ownership')

	OwnerName 			= 	TextField('Owner Name',
								description='1-Ownership')
	OwnerSpouseName 	= 	TextField('Owner Spouse Name',
								description='1-Ownership')
	RelationIndicator 	= 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="1-Ownership"
						)
	def validate_ForeclosedValue(form,field):
		try:
			ForeclosedValue = request.form["ForeclosedValue"]
			if ForeclosedValue == "0":
				raise ValidationError(" This field is required.")
		except Exception as e:
			raise ValidationError("%s" %e)

	def validate_FCOperation(form,field):
		try:
			Collateral = request.form['CollateralID']
			Operation  = request.form['FCOperation']
			if Collateral:
				if Operation =="1" or Operation=="2":
					LoanCollateralObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.Collateral ==Collateral).first()
					if 	LoanCollateralObj:
						raise ValidationError('Loan is active you cannot transfer this collateral as foreclosed property.')

		except Exception as e:
			raise e
	def validate_FCDate(form,field):
		try:

			Holiday 	= mktHoliday.getHoliday()
			FCDate 		= request.form['FCDate']

			CheckFormatDate = mktdate.isDateISO(FCDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
				
			FCDate 	= datetime.strptime(str(FCDate),'%Y-%m-%d').date()
			check 		= mktDay.isNonWorkingDay(FCDate, Holiday)
			
			if check:
				raise ValidationError("Value date must be different holiday.")

			systemDate 	= 	mktdate.getBankDate()
			StrSysteDate=	str(systemDate).split("-")
			StrFCDate=	str(FCDate).split("-")

			SysMonth 	=	"%s%s" %(StrSysteDate[0], StrSysteDate[1])
			ValueMonth 	=	"%s%s" %(StrFCDate[0], StrFCDate[1])

			if int(ValueMonth) < int(SysMonth):
				raise ValidationError("Value date must be different previous month.")

		except:
			raise
	def validate_SaleValue(field,form):
		try:
			SaleValue = request.form['SaleValue']
			Operation = request.form['FCOperation']
			print "This is Operation:",Operation
			if Operation =="2":
				if float(SaleValue) == 0 or float(SaleValue) < 0 :
					raise ValidationError('Sale value cannot lower than 0 or equal 0')
		except Exception as e:
			raise e
	
	@staticmethod
	def setDisable():
		control_list = []
		ID 			= request.form["ID"] if request.method == "POST" else g.formID 
		Operation   = ""
		if request.method == "POST":
			Operation  = request.form['FCOperation']
			if Operation == "2":
				control_list = [('OwnerName'), 
								('OwnerSpouseName'),
								('FCStatus'),('CollateralType'),('Currency'),('PurchasePrice'),('ValuationPrice'),
								('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
								('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
								('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('NewValuationPrice'),
								('CustomerID'),('NewCollateralMainID'),('NewValuer')]
			elif Operation=="3":
				control_list = [('OwnerName'), 
								('OwnerSpouseName'),
								('FCStatus'),('CollateralType'),('Currency'),('PurchasePrice'),('ValuationPrice'),
								('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
								('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
								('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('SaleValue')]
			elif Operation =="1":
				control_list = [('OwnerName'), 
								('OwnerSpouseName'),
								('FCStatus'),('CollateralType'),('Currency'),('PurchasePrice'),('ValuationPrice'),
								('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
								('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
								('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('NewValuationPrice'),
								('CustomerID'),('NewCollateralMainID'),('SaleValue'),('NewValuer')]
			else:
				control_list = [('OwnerName'), 
								('OwnerSpouseName'),
								('FCStatus'),('CollateralType'),('Currency'),('PurchasePrice'),('ValuationPrice'),
								('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
								('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
								('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('NewValuationPrice'),
								('CustomerID'),('NewCollateralMainID'),('SaleValue'),('NewValuer')]

		else:
			ForeclosedObj = MKT_FORECLOSED_PROPERTY.query.get(ID)
			if ForeclosedObj:
				Operation  = ForeclosedObj.FCOperation
				if Operation == "2":
					control_list = [('OwnerName'), 
									('OwnerSpouseName'),
									('FCStatus'),('CollateralType'),('Currency'),('PurchasePrice'),('ValuationPrice'),
									('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
									('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
									('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('NewValuationPrice'),
									('CustomerID'),('NewCollateralMainID'),('NewValuer')]
				elif Operation=="3":
					control_list = [('OwnerName'), 
									('OwnerSpouseName'),
									('FCStatus'),('CollateralType'),('Currency'),('PurchasePrice'),('ValuationPrice'),
									('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
									('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
									('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('SaleValue')]
				elif Operation =="1":
					control_list = [('OwnerName'), 
									('OwnerSpouseName'),
									('FCStatus'),('CollateralType'),('Currency'),('PurchasePrice'),('ValuationPrice'),
									('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
									('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
									('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('NewValuationPrice'),
									('CustomerID'),('NewCollateralMainID'),('SaleValue'),('NewValuer')]
				else:
					control_list = [('OwnerName'), 
									('OwnerSpouseName'),
									('FCStatus'),('CollateralType'),('Currency'),('PurchasePrice'),('ValuationPrice'),
									('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
									('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
									('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('NewValuationPrice'),
									('CustomerID'),('NewCollateralMainID'),('SaleValue'),('NewValuer')]
			else:
				control_list = [('OwnerName'), 
								('OwnerSpouseName'),
								('FCStatus'),('CollateralType'),('Currency'),('PurchasePrice'),('ValuationPrice'),
								('Valuer'),('IssuedDate'),('IssuedBy'),('WithdrawalBy'),('WithdrawalDate'),('IssuedPlace'),
								('CollateralNumber'),('Province'),('District'),('Commune'),('Village'),('ReceivedDate'),
								('ReceivedBy'),('Description'),('OwnershipType'),('RelationIndicator'),('NewValuationPrice'),
								('CustomerID'),('NewCollateralMainID'),('SaleValue'),('NewValuer')]
		return control_list

	@staticmethod
	def moneyField():
		return [['PurchasePrice','Currency'], ['ValuationPrice','Currency'],['ForeclosedValue','Currency'],
				['NewValuationPrice','Currency'],['SaleValue','Currency']]

	@staticmethod
	def setWidth():
		control_list = [('IssuedDate', len3),('ReceivedDate',len3),('WithdrawalDate',len3),
						('Currency',len2)]

		return control_list


	@staticmethod
	def listField():
		Fields = ["ID", "CollateralID","Currency", "CollateralType", "PurchasePrice", "ValuationPrice", "CollateralNumber","ReceivedDate","WithdrawalDate"]

		return Fields

	@staticmethod
	def formatMoney(): # for listField 
		return ["PurchasePrice","ValuationPrice"],"Currency"
		
	@staticmethod
	def hotSelectField():
		hotfield=[]

		fielddisplay="District,#Commune, #Village"
		varname="ProvinceID:$('#Province').val()"
		fun=["Province", varname ,fielddisplay, "/Morakot/DistrictID", "click"]
		hotfield.append(fun)

		fielddisplay="Commune, #Village"
		varname="DistrictID:$('#District').val()"
		fun=["District", varname ,fielddisplay, "/Morakot/CommuneID", "click"]
		hotfield.append(fun)

		fielddisplay="Village"
		varname="CommuneID:$('#Commune').val()"
		fun=["Commune", varname ,fielddisplay, "/Morakot/VillageID", "click"]
		hotfield.append(fun)

		fielddisplay="CollateralDetailID, #CollateralDetailID"
		varname="CollateralID:$('#CollateralID').val()"
		fun=["CollateralID", varname ,fielddisplay, "/Morakot/getCollateralDetail", "click"]
		hotfield.append(fun)

		fielddisplay = "NewCollateralMainID"
		varname  	 = "CustomerID:$('#CustomerID').val()"
		fun 		 = ["CustomerID", varname, fielddisplay, "/Morakot/getCollateralByCustomer", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def isCollateralDetailExist(CollateralID = ''):
		IsExist = False
		CollateralDetailObj = MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID == CollateralID).first()
		if CollateralDetailObj:
			IsExist = True
		return IsExist
	@staticmethod
	def updateMainCollateralStatus(CollateralID = ''):
		UpdateStatus = "Not success"
		CollateralObj = MKT_COLLATERAL.query.get(CollateralID)
		if CollateralObj:
			if CollateralObj.Active != "2":
				CollateralObj.Active = "2"
				db.session.commit()
				db.session.flush()
				UpdateStatus = "Success"
		return UpdateStatus

	@staticmethod
	def redirectAfterInsert():
		AuthLevel 	= g.getNAuthorize
		ID 			= request.form["ID"] if request.method == "POST" else g.formID 
		if AuthLevel == 0:
			CollateralDetailID = request.form['CollateralDetailID']
			CollateralID 	   = request.form['CollateralID']
			Operation 		   = request.form['FCOperation']
			NewCollateralMainID= request.form['NewCollateralMainID']
			CustomerID		   = request.form['CustomerID']
			CollateralAutoID 		= ""
			CollateralDetailAutoID  = ""
			CollateralType 			= ""
			CustomerID	 			= ""
			Currency 				= ""
			PurchasePrice 			= 0
			ValuationPrice 			= 0
			Valuer 				   	= ""
			Description 			= ""
			IssuedDate 				= ""
			IssuedBy 				= ""
			IssuedPlace				= ""
			CollateralNumber 		= ""
			Province 				= ""
			District 				= ""
			Commune 				= ""
			Village 				= ""

			if Operation == "1":
				# move collateral to history
				try:
					# Transfer
					db.session.commit()
					mktaudit.moveAUTHtoHIST(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE_HIST,CollateralDetailID)
					mktaudit.deleteAUTH(MKT_COLLATERAL_DE,CollateralDetailID)
					db.session.commit()
					db.session.flush()
					CheckExist = FRM_FORECLOSED_PROPERTY.isCollateralDetailExist(CollateralID=CollateralID)
					if CheckExist == False:
						FRM_FORECLOSED_PROPERTY.updateMainCollateralStatus(CollateralID=CollateralID)
					# Post Accounting
				except Exception as e:
					raise e
				
			elif Operation == "2":
				try:
					# Sale
					db.session.commit()
					mktaudit.moveAUTHtoHIST(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE_HIST,CollateralDetailID)
					mktaudit.deleteAUTH(MKT_COLLATERAL_DE,CollateralDetailID)
					db.session.commit()
					db.session.flush()

					CheckExist = FRM_FORECLOSED_PROPERTY.isCollateralDetailExist(CollateralID=CollateralID)
					if CheckExist == False:
						db.session.commit()
						mktaudit.moveAUTHtoHIST(MKT_COLLATERAL,MKT_COLLATERAL_HIST,CollateralID)
						mktaudit.deleteAUTH(MKT_COLLATERAL,CollateralID)
						db.session.commit()
						db.session.flush()
					# Post Accounting
				except Exception as e:
					raise e
				
			elif Operation == "3":
				try:
					CollateralAutoID           = mktAutoID.getAutoID("FRM_COLLATERAL_EX")
					CollateralDetailAutoID     = mktAutoID.getAutoID("FRM_COLLATERAL_DE")
					CustomerID 				   = request.form['CustomerID']
					CollateralType 			   = request.form['CollateralType']
					Currency 				   = request.form['Currency']
					PurchasePrice 			   = request.form['PurchasePrice']
					ValuationPrice 			   = request.form['ValuationPrice']
					Valuer 				   	   = request.form['Valuer']
					Description 			   = request.form['Description']
					IssuedDate 				   = request.form['IssuedDate']
					IssuedPlace 			   = request.form['IssuedPlace']
					IssuedBy 				   = request.form['IssuedBy']
					CollateralNumber 		   = request.form['CollateralNumber']
					Province 				   = request.form['Province']
					District 				   = request.form['District']
					Commune 				   = request.form['Commune']
					Village 				   = request.form['Village']
					
					if NewCollateralMainID != "__None" and CustomerID !="":
						#Create Auto Collateral detail
						FRM_FORECLOSED_PROPERTY.generateCollateralDetail(CollateralDetailAutoID = CollateralDetailAutoID,
																		CollateralAutoID 		= CollateralAutoID,
																		CollateralType 			= CollateralType,
																		Currency 				= Currency,
																		PurchasePrice 			= PurchasePrice,
																		ValuationPrice 			= ValuationPrice,
								 										Valuer  				= Valuer,
								 										Description 			= Description,
								 										IssuedDate				= IssuedDate,
								 										IssuedPlace 			= IssuedPlace,
								 										IssuedBy				= IssuedBy,
								 										CollateralNumber 		= CollateralNumber,
								 										Province 				= Province,
								 										District 				= District,
								 										Commune 				= Commune,
								 										Village 				= Village)

						# Move foreclosed to hist
						FRM_FORECLOSED_PROPERTY.moveForeclosedToHist(ID=ID)
					elif NewCollateralMainID == "__None" and CustomerID !="":
						#Create Collateral Main
						FRM_FORECLOSED_PROPERTY.generateCollateralMain(CollateralAutoID=CollateralAutoID,CustomerID=CustomerID)

						#Create Auto Collateral detail
						FRM_FORECLOSED_PROPERTY.generateCollateralDetail(CollateralDetailAutoID = CollateralDetailAutoID,
																		CollateralAutoID 		= CollateralAutoID,
																		CollateralType 			= CollateralType,
																		Currency 				= Currency,
																		PurchasePrice 			= PurchasePrice,
																		ValuationPrice 			= ValuationPrice,
								 										Valuer  				= Valuer,
								 										Description 			= Description,
								 										IssuedDate				= IssuedDate,
								 										IssuedPlace 			= IssuedPlace,
								 										IssuedBy				= IssuedBy,
								 										CollateralNumber 		= CollateralNumber,
								 										Province 				= Province,
								 										District 				= District,
								 										Commune 				= Commune,
								 										Village 				= Village)
						
						# Move foreclosed to hist
						FRM_FORECLOSED_PROPERTY.moveForeclosedToHist(ID=ID)
					elif NewCollateralMainID != "__None" and CustomerID =="":
						#Create Auto Collateral detail
						FRM_FORECLOSED_PROPERTY.generateCollateralDetail(CollateralDetailAutoID = CollateralDetailAutoID,
																		CollateralAutoID 		= NewCollateralMainID,
																		CollateralType 			= CollateralType,
																		Currency 				= Currency,
																		PurchasePrice 			= PurchasePrice,
																		ValuationPrice 			= ValuationPrice,
								 										Valuer  				= Valuer,
								 										Description 			= Description,
								 										IssuedDate				= IssuedDate,
								 										IssuedPlace 			= IssuedPlace,
								 										IssuedBy				= IssuedBy,
								 										CollateralNumber 		= CollateralNumber,
								 										Province 				= Province,
								 										District 				= District,
								 										Commune 				= Commune,
								 										Village 				= Village)
						# Move foreclosed to hist
						FRM_FORECLOSED_PROPERTY.moveForeclosedToHist(ID=ID)
						
					else:
						#Nothing to create
						print "Nothing to create"
						
				except Exception as e:
					raise e
	@staticmethod
	def moveForeclosedToHist(ID = ''):
		try:
			db.session.commit()
			mktaudit.moveAUTHtoHIST(MKT_FORECLOSED_PROPERTY,MKT_FORECLOSED_PROPERTY_HIST,ID)
			mktaudit.deleteAUTH(MKT_FORECLOSED_PROPERTY,ID)
			db.session.commit()
			db.session.flush()
		except Exception as e:
			raise e
	@staticmethod
	def generateCollateralMain(CollateralAutoID='',CustomerID=''):
		try:
			CollateralObj ={'ID' 			: CollateralAutoID,
						    'CustomerID'    : CustomerID,
						    'Description' 	: "Auto generate-"+CustomerID
							}
			mktdb.insertTable(MKT_COLLATERAL,CollateralObj)
		except Exception as e:
			raise e
	@staticmethod
	def generateCollateralDetail(CollateralDetailAutoID='',CollateralAutoID='',CollateralType='',Currency='',PurchasePrice=0,ValuationPrice=0,
								 Valuer ='',Description='',IssuedDate='',IssuedPlace='',IssuedBy='',CollateralNumber='',Province='',District='',
								 Commune='',Village=''):
		try:
			CollateralDetailObj = { 'ID' 				: CollateralDetailAutoID,
									'CollateralID'  	: CollateralAutoID,
									'CollateralType'	: CollateralType,
									'Currency'			: Currency,
									'PurchasePrice' 	: PurchasePrice,
									'ValuationPrice'    : ValuationPrice,
									'Valuer' 			: Valuer,
									'Description' 		: Description,
									'IssuedDate' 		: IssuedDate,
									'IssuedPlace' 		: IssuedPlace,
									'IssuedBy' 			: IssuedBy,
									'CollateralNumber'	: CollateralNumber,
									'Province' 			: Province,
									'District' 			: District,
									'Commune'			: Commune,
									'Village' 			: Village
									}
			mktdb.insertTable(MKT_COLLATERAL_DE,CollateralDetailObj)
		except Exception as e:
			raise e
	@staticmethod
	def beforeAuthorize():
		try:		
			CollateralDetailID = request.form['CollateralDetailID']
			CollateralID 	   = request.form['CollateralID']
			Operation 		   = request.form['FCOperation']

			if Operation == "1":
				# move collateral to history
				# Transfer
				db.session.commit()
				mktaudit.moveAUTHtoHIST(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE_HIST,CollateralDetailID)
				mktaudit.deleteAUTH(MKT_COLLATERAL_DE,CollateralDetailID)
				db.session.commit()
				db.session.flush()
				CheckExist = FRM_FORECLOSED_PROPERTY.isCollateralDetailExist(CollateralID=CollateralID)
				if CheckExist == False:
					FRM_FORECLOSED_PROPERTY.updateMainCollateralStatus(CollateralID=CollateralID)
				# Post Accounting
			elif Operation == "2":
				# Sale
				db.session.commit()
				mktaudit.moveAUTHtoHIST(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE_HIST,CollateralDetailID)
				mktaudit.deleteAUTH(MKT_COLLATERAL_DE,CollateralDetailID)
				db.session.commit()
				db.session.flush()

				CheckExist = FRM_FORECLOSED_PROPERTY.isCollateralDetailExist(CollateralID=CollateralID)
				if CheckExist == False:
					db.session.commit()
					mktaudit.moveAUTHtoHIST(MKT_COLLATERAL,MKT_COLLATERAL_HIST,CollateralID)
					mktaudit.deleteAUTH(MKT_COLLATERAL,CollateralID)
					db.session.commit()
					db.session.flush()
				# Post Accounting

		except Exception, e:
			raise e
			return False

	@staticmethod
	def hotField():
		hotfield=[]

		fielddisplay =  "$('input[name=OwnerName]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=OwnerName]').val( data.OwnerName);"
		fielddisplay += "$('input[name=OwnerSpouseName]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=OwnerSpouseName]').val(data.OwnerSpouseName);"
		fielddisplay += "$('input[name=RelationIndicator]').attr('readonly', data.Bool);"
		fielddisplay += "$('input[name=RelationIndicator]').val(data.RelationIndicator);"

		varname  = "OwnershipType:$('#OwnershipType').val()"
		varname += ",OwnerName:$('#OwnerName').val()"
		varname += ",OwnerSpouseName:$('#OwnerSpouseName').val()"
		varname += ",RelationIndicator:$('#RelationIndicator').val()"

		fun = ["OwnershipType", varname, fielddisplay, "/Morakot/CollateralOwnership", "change"]
		hotfield.append(fun)

		# $('#CoOccupation').prop('disabled', data.Bool)

		fielddisplay = "$('#FCStatus').select2('data', {'id':data.data.ID,'text':data.data.Value});"
		fielddisplay += "$('input[name=SaleValue]').attr('readonly', data.SaleValue);"
		fielddisplay += "$('input[name=NewValuationPrice]').attr('readonly', data.NValuation);"
		fielddisplay += "$('#CustomerID').attr('readonly', data.NCollateralOwner);"
		fielddisplay += "$('#NewCollateralMainID').attr('readonly', data.NCollateralID);"
		fielddisplay += "$('input[name=NewValuer]').attr('readonly', data.NValuer);"
		varname  	 = "Operation:$('#FCOperation').val()"
		fun 		 = ["FCOperation", varname, fielddisplay, "/Morakot/getForeclosedStatus", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#CollateralType').select2('data', {'id':data.CollateralType.ID,'text':data.CollateralType.Value});"
		fielddisplay += "$('#Currency').select2('data', {'id':data.Currency.ID,'text':data.Currency.Value});"
		fielddisplay += "$('#PurchasePrice').val(data.PurchasedPrice);$('#ValuationPrice').val(data.ValuationPrice);"
		fielddisplay += "$('#IssuedDate').val(data.IssuedDate);$('#IssuedPlace').val(data.IssuedPlace);$('#IssuedBy').val(data.IssuedBy);"
		fielddisplay += "$('#Description').val(data.Description);$('#Valuer').val(data.Valuer);"
		fielddisplay += "$('#ReceivedDate').val(data.ReceivedDate);$('#ReceivedBy').val(data.ReceivedBy);$('#WithdrawalDate').val(data.WithdrawalDate);$('#WithdrawalBy').val(data.WithdrawalBy);"
		fielddisplay += "$('#CollateralNumber').val(data.CollateralNumber);$('#OwnerName').val(data.OwnerName);$('#OwnerSpouseName').val(data.OwnerSpouseName);"
		
		fielddisplay += "$('#Province').append('<option value='+data.ProvinceID+'>'+data.Province+'</option>')"
		fielddisplay += ",$('#District').append('<option value='+data.District.ID+'>'+data.District.Value+'</option>')"
		fielddisplay += ",$('#Commune').append('<option value='+data.Commune.ID+'>'+data.Commune.Value+'</option>')"
		fielddisplay += ",$('#Village').append('<option value='+data.Village.ID+'>'+data.Village.Value+'</option>')"

		fielddisplay += ",$('#Province').select2('data', {'id':data.Province.ID,'text':data.Province.Value})"
		fielddisplay += ",$('#District').select2('data', {'id':data.District.ID,'text':data.District.Value})"
		fielddisplay += ",$('#Commune').select2('data', {'id':data.Commune.ID,'text':data.Commune.Value})"
		fielddisplay += ",$('#Village').select2('data', {'id':data.Village.ID,'text':data.Village.Value});"

		fielddisplay += "$('#RelationIndicator').append('<option value='+data.RelationIndicator.ID+'>'+data.RelationIndicator.Value+'</option>')"
		fielddisplay += ",$('#RelationIndicator').select2('data', {'id':data.RelationIndicator.ID,'text':data.RelationIndicator.Value});"

		fielddisplay += "$('#OwnershipType').select2('data', {'id':data.OwnershipType.ID,'text':data.OwnershipType.Value});"
		varname  	 = "CollateralDetailID:$('#CollateralDetailID').val()"
		fun 		 = ["CollateralDetailID", varname, fielddisplay, "/Morakot/getAllCollateralInfoByID", "change"]
		hotfield.append(fun)

		fielddisplay = "$('#ForeclosedValue').val(data.ForeclosedValue);"
		varname  	 = "CollateralID:$('#CollateralID').val()"
		fun 		 = ["CollateralDetailID", varname, fielddisplay, "/Morakot/getForeclosedValue", "change"]
		hotfield.append(fun)

		return hotfield

