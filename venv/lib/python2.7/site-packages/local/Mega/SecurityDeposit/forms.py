from wtforms 					import DecimalField
from app.mktcore.wtfimports 	import *
from app.mktcore.imports 		import *
from app.FundTransfer.forms 	import FRM_FUND_TRANSFER
from app.FundTransfer.models 	import *
from app.Category.models 		import *
from app.Currency.models 		import MKT_CURRENCY
from app.Transaction.models 	import MKT_TRANSACTION
from app.LoanContract.models	import MKT_LOAN_CONTRACT
import app.tools.mktaccount 			as mktaccount
import app.tools.mktmoney 				as mktmoney
import app.tools.mktdate 				as mktdate
import app.tools.user 					as mktuser
import app.tools.mktaccounting 			as mktaccounting
import app.tools.mktloanapplication 	as mktloanapp
import app.tools.mktfundtransfer 		as mktfundtransfer
import app.tools.mktteller 				as mktteller
import app.tools.mktaudit 				as mktaudit
import app.tools.mktsetting 			as mktsetting
import app.tools.mkttool 				as mkttool
import app.mktcore.globalfunction 		as globalfunction

def loadTransaction():
	return MKT_TRANSACTION.query

def loadCurrentDate():
	return 	mktdate.getBankDate()

def loadCategory():

	JOURNAL_ENTRY_EXCLUDED = mktsetting.getExcludedCategories()
	CategoryObj = MKT_CATEGORY.query.filter(~MKT_CATEGORY.ID.in_(JOURNAL_ENTRY_EXCLUDED))
	return 	CategoryObj

def loadCurrency():
	return MKT_CURRENCY.query

def loadDefaultCurrency():
	return mktaccounting.getDefaultCurrency()

def getAllAccountProductCategory():
	AccProObj = MKT_ACC_PRODUCT.query
	Category = [str(row.CategoryList) for row in AccProObj]
	return Category

@app.route("/Morakot/getAllInfoByLoanID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getAllInfoByLoanID():
	depoAmount 		= 0
	DrCateDic 		= {}
	CurrencyDic 	= {}
	CrAccountDic 	= {}
	AccountDic 		= {}
	TransactionDic  = {}
	Currency   	= ""
	DDAccount   = ""
	Reference 	= ""
	Note 		= "Withdrawal security deposit amount"	
	LoanID 		= request.args.get('LoanID')
	DrCate 		= mktsetting.getAppSetting('MEGA_SECDEPO_CATE')
	CategoryObj = MKT_CATEGORY.query.get(DrCate)

	if CategoryObj:
		DrCateDic.update({"ID":CategoryObj.ID,
							"Value":CategoryObj.ID+" - "+CategoryObj.Description})

	LcObj  = MKT_LOAN_CONTRACT.query.get(LoanID)
	if LcObj:
		if LcObj.SecurityDepositOutStanding!= None:
			depoAmount = LcObj.SecurityDepositOutStanding
		Currency   = LcObj.Currency
		CurrencyObj = MKT_CURRENCY.query.get(Currency)
		if CurrencyObj:
			CurrencyDic.update({"ID":CurrencyObj.ID,
								"Value":CurrencyObj.ID})
		AccountObj = MKT_ACCOUNT.query.get(LcObj.Account)
		if AccountObj:
			CrAccountDic.update({"ID":AccountObj.ID,
								"Value":AccountObj.ID+" - "+AccountObj.AccName})
		AccCat 		= MKT_ACCOUNT.query.get(LcObj.Account)
		if AccCat:
			CategoryObj = MKT_CATEGORY.query.get(AccCat.AccCategory)
			if CategoryObj:
				AccountDic.update({'ID':CategoryObj.ID,"Value":CategoryObj.ID+" - "+CategoryObj.Description})
		Transaction = mktsetting.getAppSetting('MEGA_SECDEPO_TRANS_WTHD')
		TransactionObj = MKT_TRANSACTION.query.get(Transaction)
		if TransactionObj:
			TransactionDic.update({'ID':TransactionObj.ID,'Value':TransactionObj.ID+" - "+TransactionObj.Description})

	return jsonify(depoAmount = float(depoAmount),
				   Currency = Currency,
				   DrCate = DrCateDic,
				   CurrencyDic = CurrencyDic,
				   DDAccount = CrAccountDic,
				   AccountDic = AccountDic,
				   TransactionDic = TransactionDic,
				   Reference = LoanID,
				   Note = Note)

class FRM_SECURITY_DEPOSIT(FRM_FUND_TRANSFER):

	LoanID 			= 	RemoteTextField(requiredlabel('Loan Contract ID', "*"), [validators.Required()])
	Currency 		= 	TextField(requiredlabel(getLanguage("Currency"), "*"),validators=[validators.Required()])
	Amount 			=	DecimalField(requiredlabel(("Deposit Amount"), "*"), [validators.Required()], default=0)
	Note 			=	TextAreaField("Note")
	DrAccount 		= 	RemoteTextField(getLanguage("Dr Account"),description='1-Fund Transfer')
	DrCategory 		= 	QuerySelectField(("Dr Category"),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'',
							default='',
							description='1-Fund Transfer'
						)
	DrCurrency 		= 	QuerySelectField(requiredlabel(getLanguage("Dr Currency"), "*"),
	                        query_factory=loadCurrency,
	                        get_label=u'ID',
	                        allow_blank=loadDefaultCurrency(),
	                        blank_text=u'--None--',
	                        default='',description='1-Fund Transfer'
                        )
	CrAccount 		= 	RemoteTextField("Cr Account",description='1-Fund Transfer')
	CrCategory 		= 	QuerySelectField((getLanguage("Cr Category")),
							query_factory=loadCategory,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'',
							default='',description='1-Fund Transfer'
						)
	CrCurrency 		= 	QuerySelectField((getLanguage("Cr Currency")),
	                        query_factory=loadCurrency,
	                        get_label=u'ID',
	                        allow_blank=loadDefaultCurrency(),
	                        blank_text=u'--None--',
	                        default='',description='1-Fund Transfer'
                        )
	Transaction 	= 	QuerySelectField((getLanguage("Transaction")),
							query_factory=loadTransaction,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("Choose Transaction"),
							default='',description='1-Fund Transfer'
						)
	TranDate 		= 	DateField(requiredlabel(getLanguage("Transaction Date"), "*"), [validators.Required()], default=loadCurrentDate
						,description='1-Fund Transfer')
	Reference 		= 	TextField(getLanguage("Reference"),description='1-Fund Transfer')
	
	ExchangeRate 	= TextField('Exchange Rate',description='1-Fund Transfer')

	LCYAmount 		= TextField('LCY Amount',description='1-Fund Transfer')
	
	DrGLKey 		= TextField('Debit GL Key',description='1-Fund Transfer')
	CrGLKey 		= TextField('Credit GL Key',description='1-Fund Transfer')
	Module 			= TextField("Module", default="SD",description='1-Fund Transfer')

	def validate_DrCategory(form, field):
		pass
	def validate_CrCategory(form, field):
		pass
	def validate_Amount(form, field):
		try:
			SecDepoOutstanding = 0
			LoanID = request.form['LoanID']
			Amount = request.form['Amount']
			Currency = request.form['Currency']
			LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
			if LoanObj:
				SecDepoOutstanding = LoanObj.SecurityDepositOutStanding
				if Decimal(Amount) > Decimal(SecDepoOutstanding):
					raise ValidationError("Amount cannot bigger than security deposit outstanding in loan contract #%s,\
					 					  security deposit outstanding is %s" %(LoanID,mktmoney.toMoney(float(SecDepoOutstanding),\
					 					  mktmoney.getCurrencyObj(Currency), 2)))
				elif Decimal(Amount) == 0:
					raise ValidationError("Deposit amount is required!")
		except Exception as e:
			raise e

	@staticmethod
	def moneyField():
		return [("Amount", 'DrCurrency')]
	@staticmethod
	def setDisable():
		base 		= super(FRM_FUND_TRANSFER,FRM_SECURITY_DEPOSIT).setDisable()
		Fields = ['Currency','DrAccount','DrCategory','Amount','DrCurrency','CrAccount','CrCategory',
				 'CrCurrency','Transaction','TranDate','Reference','ExchangeRate','LCYAmount','DrGLKey','CrGLKey','Module']

		Fields.extend(base)
		return Fields
	@staticmethod
  	def setVisible():
		# controls_list 	=['DrAccount','DrCategory','DrCurrency','CrAccount','CrCategory','CrCurrency','Transaction',
		# 				  'TranDate','Reference','ExchangeRate','LCYAmount','DrGLKey','CrGLKey','Module']
		controls_list = []
		return controls_list

	@staticmethod
	def hotField():
		base 			= 		super(FRM_FUND_TRANSFER,FRM_SECURITY_DEPOSIT).hotField()
		hotfield 		=		[]

		fielddisplay 	= "$('#Amount').val(data.depoAmount);$('#Currency').val(data.Currency);"
		fielddisplay 	+= "$('#DrCategory').select2('data', {'id':data.DrCate.ID,'text':data.DrCate.Value});"
		fielddisplay 	+= "$('#DrCurrency').select2('data', {'id':data.CurrencyDic.ID,'text':data.CurrencyDic.Value});"
		fielddisplay 	+= "$('#CrAccount').select2('data', {'id':data.DDAccount.ID,'text':data.DDAccount.Value});"
		fielddisplay 	+= "$('#CrCategory').select2('data', {'id':data.AccountDic.ID,'text':data.AccountDic.Value});"
		fielddisplay 	+= "$('#Transaction').select2('data', {'id':data.TransactionDic.ID,'text':data.TransactionDic.Value});"
		fielddisplay 	+= "$('#Reference').val(data.Reference);$('#Note').val(data.Note);$('#Amount').focus();$('#Note').focus();"
		varname 		= "LoanID:$('#LoanID').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/getAllInfoByLoanID", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ExchangeRate').val(data.ExchangeRate);$('#LCYAmount').val(data.LCYAmount);"
		varname 		= "Currency:$('#DrCurrency').val(),Amount:$('#Amount').val(),TranDate:$('#TranDate').val(),ExchangeRate:$('#ExchangeRate').val()"
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/FundTransferExchangeRate", "blur"]
		hotfield.append(fun)
		
		hotfield.extend(base)
		return hotfield

	@staticmethod
	def redirectAuthorize():
		ID 			    = request.form["ID"] if request.method == "POST" else g.formID 
		SecurityAmount  = 0
		LcSecurityAmount = 0
		SecurityDepoObj = MKT_FUND_TRANSFER.query.get(ID)
		if SecurityDepoObj:
			SecurityAmount = SecurityDepoObj.Amount
			LcObj = MKT_LOAN_CONTRACT.query.get(SecurityDepoObj.LoanID)
			if LcObj:
				LcObj.SecurityDepositOutStanding = LcObj.SecurityDepositOutStanding - SecurityAmount
			db.session.commit()
			db.session.flush()

		return None
	@staticmethod
	def listField():
		Fields = ["ID", "LoanID","Currency","Amount",
				  "Note","DrCategory","DrCurrency","CrAccount",
				  "CrCategory", "Transaction","TransactionDate"]

		return Fields,["ID*LK*SD"]
	@staticmethod
	def beforeAuthorize():
		base 			= super(FRM_FUND_TRANSFER, FRM_SECURITY_DEPOSIT).beforeAuthorize()
		ID 			    = request.form["ID"] if request.method == "POST" else g.formID 

		SecurityDepoObj 	= MKT_FUND_TRANSFER_INAU.query.get(ID)
		if SecurityDepoObj:
			Inputter 	= SecurityDepoObj.Inputter
			Createdon 	= SecurityDepoObj.Createdon
			Authorizer 	= SecurityDepoObj.Authorizer
			Authorizeon = SecurityDepoObj.Authorizeon
			Account    	= SecurityDepoObj.CrAccount
			Category 	= ''
			Currency 	= SecurityDepoObj.Currency
			Amount   	= SecurityDepoObj.Amount
			Transaction = mktsetting.getAppSetting('MEGA_SECDEPO_TRANS_WTHD')
			TranDate 	= mktdate.getBankDate()
			Branch   	= SecurityDepoObj.Branch
			CrCate 		= SecurityDepoObj.CrCategory 
			DrCate 		= SecurityDepoObj.DrCategory
			LoanID 		= SecurityDepoObj.LoanID
			Note 		= SecurityDepoObj.Note

			for i in range(0, 2):
				if i == 0:
					DrCr = "Dr"
					Mode = ""
					Category = DrCate
					GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "SD", "", "", "", "", "", "", "", "", "")
				else:
					DrCr = "Cr"
					Mode = "Direct"
					Category = CrCate
					GL_KEYS = mktaccounting.getConsolKey(Category, Currency, "", "SD","", "", "", "", "", "", "", "", "")

				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					Inputter,				# Inputter
					Createdon, 				# Createdon
					Authorizer,				# Authorizer
					Authorizeon,			# Authorizeon
					"", 					# AEID
					Account,				# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Amount, 				# Amount
					"SD",					# Module
					Transaction, 			# Transaction
					TranDate, 				# TransactionDate
					LoanID, 				# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode 					# Mode check to insert Journal for category
				)
			# END POSTING
			db.session.commit()
			# Minus security deposit outstanding in loan contract 
			LcObj = MKT_LOAN_CONTRACT.query.get(LoanID)
			if LcObj: 
				if Amount < LcObj.SecurityDepositOutStanding:
					LcObj.SecurityDepositOutStanding = LcObj.SecurityDepositOutStanding - Amount
					db.session.commit()
					db.session.flush()
				elif Amount > LcObj.SecurityDepositOutStanding:
					LcObj.SecurityDepositOutStanding = 0
					db.session.commit()
					db.session.flush()
		return True
