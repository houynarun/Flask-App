from app.mktcore.wtfimports 	import *
from sqlalchemy 				import *
from app.GroupLoan.models 		import *
from app.GroupLoan.forms 		import *

@app.route("/Morakot/getTemplateBaseGroupLoan", methods=['GET'])
@app.route("/Morakot/API/getTemplateBaseGroupLoan", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getTemplateBaseGroupLoan():

	LoanProductID 	= request.args.get('LoanProduct')
	ApprovedAmount 	= request.args.get('ApprovedAmount')
	Frequency 		= request.args.get('Frequency')
	FreqType 		= request.args.get('FreqType')
	Term 			= request.args.get('Term')
	AppDate 		= request.args.get('AppDate','')
	RepMode 		= request.args.get('RepMode')
	resultDict 		= {'ID':'__None','Description':'--None--','RepID':'1','RepDesc':'Declining'}

	if not AppDate:
		AppDate = mktdate.getBankDate()
	Installment 	= mktloanapp.getNumberOfInstallment(Term, Frequency, FreqType, AppDate)

	if LoanProductID:
		query = MKT_LOAN_PRODUCT.query.get(LoanProductID)
		if query:
			TemplateBaseList = str(query.TemplateBase).split()
			if TemplateBaseList:
				resultDict.update({'RepID':'6', 'RepDesc':'Template Base'})
				for row in TemplateBaseList:
					TBObj = MKT_TEMPLATE_BASE.query.filter(MKT_TEMPLATE_BASE.ID== row).first()
					if TBObj:
						DisburseAmount = str(ApprovedAmount).replace(',','')
						if int(TBObj.Installment) == int(Installment) and float(TBObj.DisburseAmount) == float(DisburseAmount):
							resultDict.update({'ID':row,'Description': TBObj.ID + ' - ' + TBObj.Description})

	return jsonify(	resultDict = resultDict)

@app.route("/Morakot/DisbursementDate", methods=['GET'])
@app.route("/Morakot/API/DisbursementDate", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDisbursementDate():
	DisbursementDate 	= request.args.get('DisbursementDate')
	ValueDate 			= ''
	if DisbursementDate:
		ValueDate = DisbursementDate

	return jsonify(	ValueDate = ValueDate)

class FRM_GROUP_LOAN_CONTRACT_EX(FRM_GROUP_LOAN_CONTRACT):
	ContractVB 			= 	HiddenField(requiredlabel("Village Bank", "*"),
							validators=[validators.Required()])
	Group 				= 	QuerySelectField(requiredlabel('Group','*'),
							query_factory=loadGroupID,
							get_label=lambda a: a.ID + " - " + a.GroupName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()])
	Currency 			= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()])

	ValueDate 			= 	DateField(requiredlabel(getLanguage("Value Date"), "*"), [validators.Required()], default=loanBankDate)
	DisbursementDate 	= 	DateField(requiredlabel("Disbursement Date","*"),[validators.Required()])
	FirstCollectionDate =	DateField("First Collection Date", [custom_FirstCollectionDate])
	Cycle 				= 	IntegerField(requiredlabel(getLanguage("Cycle"), "*"), [validators.Required()], default=1)
	MaturityDate 		= 	DateField(getLanguage("Maturity Date"), [validators.Optional()])
	LoanProduct 		= 	QuerySelectField(requiredlabel(getLanguage("Loan Product"), "*"),
							query_factory=loadLoanProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()])
	Category 			= 	TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	InterestRate 		= 	TextField(requiredlabel(getLanguage("Interest Rate"), "*"), [validators.Required()])
	IRR 				= 	TextField("IRR")
	FreqType 			= 	SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
							choices=[('1', '1. Monthly'), 
									 ('2', '2. Weekly'),
									 ('3', '3. Daily')],
							coerce=str,
							validators=[validators.Required()]
						)
	Frequency 			= 	IntegerField(requiredlabel(getLanguage("Frequency"), "*"), [validators.Required()], default=1)
	Term 				= 	TextField(requiredlabel("%s (%s)" %(getLanguage("Term"), getLanguage("Month")), "*"), [validators.Required()])
	Installment 		= 	IntegerField(requiredlabel(getLanguage("Installment"), "*"), [validators.Required()])

	DeliqMode 			= 	SelectField(requiredlabel(getLanguage('Deliquency Mode'), '*'),
							choices=[('3', '3. %s' %getLanguage("Semi-Automatic")),
									 ('2', '2. %s' %getLanguage("Automatic")),
									 ('1', '1. %s' %getLanguage("Manual"))],
							coerce=str,
							validators=[validators.Required()])
	LoanType 			= 	SelectField(requiredlabel(getLanguage('Loan Type'), '*'),
							choices=[('N', '%s' %getLanguage("Normal")),
									 ('R', '%s' %getLanguage("Restructured"))],
							coerce=str,
							default='N')
	MoreThanOneYear 	= 	TextField(requiredlabel(getLanguage("More Than One Year"), "*"), [validators.Required()], default='N')
	ContractOfficerID 	= 	RemoteTextField(requiredlabel("Loan Officer", "*"),
								dicRemote={'url':'/Morakot/SearchOfficer'},
								validators=[validators.Required()]
						)

	BorrowerID 			= 	QuerySelectField(requiredlabel("Borrower", '*'),
							query_factory=loadBorrower,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " + a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--None--',
							description="1-%s" %"Borrower",
							validators=[custom_Borrower]
						)

	LoanPurpose 		= 	QuerySelectField(getLanguage("Loan Purpose"),
							query_factory=laodLoanPurpose,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description=u'1-%s' %"Borrower"
						)
	LoanPurposeRemark = TextAreaField("Loan Purpose Remark",description=u'1-%s' %"Borrower")
	Disbursed	 		= 	TextField(requiredlabel(getLanguage("Disbursed Amount"), '*'),
							validators=[custom_Disburse], 
							default=0,
							description=u'1-%s' %"Borrower"
						)

	CompulsorySaving 	= 	SelectField("Compulsory Saving",
							choices=[('N', 'No'), ('Y', 'Yes')],
							coerce=str,
							default='N',
							description=u'1-%s' %"Borrower"
						)
	RateFixed 			= 	SelectField("Rate/Fixed",
							choices=[('R', 'Rate'), ('F', 'Fix')],
							coerce=str,
							default='R',
							description=u'1-%s' %"Borrower"
						)
	SavingRate 			= 	TextField(requiredlabel("Calculation Rate","*"),
							default=0,
							description=u'1-%s' %"Borrower",
							validators=[validators.Required()]
						)

	BorrowerTemplateBase = QuerySelectField("Template Base",
							query_factory=loadBorrowerTemplateBase,
							get_label=lambda a:a.ID+ ' - '+a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							description=u'1-%s' %"Borrower")

	ChargeKey 			= 	QuerySelectField(getLanguage("Charge Key"),
							query_factory=loadCharge,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--',
							description=u'2-%s' %getLanguage("Loan Charge"))

	Charge				= 	TextField(getLanguage("Charge"),
							validators=[custom_Charge], 
							default=0,
							description=u'2-%s' %getLanguage("Loan Charge"))

	PreDefine 			= 	QuerySelectField("Pre-define Schedule",
							query_factory=loadPreDefinenSchedule,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--None--')

	RepMode 			= 	SelectField(requiredlabel("Repayment Mode", "*"),
							choices=[('1', 'Declining'),
									 ('2', 'Annuity'),
									 ('3', 'Flat'),
									 ('4', 'IRR'),
									 ('6', 'Template Base')],
							coerce=str,
							validators=[validators.Required()],
							description=u'3-%s' %"Repayment Mode"
						)
	TemplateBase 		= QuerySelectField("Template Base",
							query_factory=loadTemplateBase,
							get_label=lambda a:a.ID+ ' - '+a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							description=u'3-%s' %"Repayment Mode")

	FwdBwdKey 			= 	SelectField(requiredlabel("Fwd/Bwd Key", "*"),
							choices=[('0','No Holiday'),
									 ('1','Backward within month'),
									 ('2','Forward within month'),
									 ('3','Backward'),
									 ('4','Forward')],
							coerce=str,
							default='1',
							validators=[validators.Required()],
							description=u'3-%s' %"Repayment Mode"
						)
	AnnuityAmount 		= 	TextField(requiredlabel("Annuity Amount", "*"), [validators.Required()],default=0,description=u'3-%s' %"Repayment Mode")
	PrincipalFreq 		= 	IntegerField(requiredlabel("Principal Frequency", "*"), [validators.Required()],default=1,description=u'3-%s' %"Repayment Mode")
	InterestFreq 		= 	IntegerField(requiredlabel("Interest Frequency", "*"), [validators.Required()],default=1,description=u'3-%s' %"Repayment Mode")
	BaseDateKey 		= 	SelectField('Base Date Key',
									choices=[('1', '1. Value Date'),
											 ('2', '2. Previous Date'),
											 ('3', '3. First Date'),
											 ('4', '4. Week Day')],
									coerce=str,
									description=u'3-%s' %"Repayment Mode"
								)
	WeekDay 				= 	SelectField("Week Day",
								choices=[('MO', 'Monday'), 
									 ('TU', 'Tuesday'),
									 ('WE', 'Wednesday'),
									 ('TH', 'Thursday'),
									 ('FR', 'Friday'),
									 ('SA', 'Saturday'),
									 ('SU', 'Sunday')],
								coerce=str
							)
	WeekNum 				= 	SelectField("Week number",
								choices=[('1','1'), 
									 ('2','2'),
									 ('3','3'),
									 ('4','4'),
									 ('5','5')],
								coerce=str
							)

	Iframe				=	MKTIframe("View Repayment",dicIframe={'width':'100%','height':'1000','frameborder':'0'}, description='4-Reapyment Schedule')

	@staticmethod
	def hotSelectField():
		base 			= super(FRM_GROUP_LOAN_CONTRACT_EX, FRM_GROUP_LOAN_CONTRACT_EX).hotSelectField()
		hotfield = []

		fielddisplay 	= "BorrowerTemplateBase"
		varname 		= "LoanProduct:$('#LoanProduct').val(),RepMode:$('#RepMode').val()"
		fun 			= ["BorrowerID", varname, fielddisplay, "/Morakot/getTemplateBasefromProduct", "change",]
		hotfield.append(fun)

		fielddisplay 	= "TemplateBase"
		varname 		= "LoanProduct:$('#LoanProduct').val(),RepMode:$('#RepMode').val()"
		fun 			= ["RepMode", varname, fielddisplay, "/Morakot/getTemplateBasefromProduct", "change",]
		hotfield.append(fun)

		fielddisplay 	= "TemplateBase"
		varname 		= "LoanProduct:$('#LoanProduct').val(),RepMode:$('#RepMode').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/getTemplateBasefromProduct", "change",]
		hotfield.append(fun)

		hotfield.extend(base)
		return hotfield

	@staticmethod
	def hotField():
		base 			= super(FRM_GROUP_LOAN_CONTRACT_EX, FRM_GROUP_LOAN_CONTRACT_EX).hotField()
		hotfield 		= []

		fielddisplay 	= "$('#Term').val(data.Term);"
		fielddisplay 	+= "$('#FreqType').select2('data', {'id':data.FreqType,'text':data.FreqTypeDes});"
		varname 		= "LoanProduct:$('#LoanProduct').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/TermFrequencyType", "change", "Term"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment);"
		varname 		= "Term:$('#Term').val(),ValueDate:$('#ValueDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ValueDate').val(data.ValueDate);"
		varname 		= "DisbursementDate:$('#DisbursementDate').val()"
		fun 			= ["DisbursementDate", varname, fielddisplay, "/Morakot/DisbursementDate", "blur"]
		hotfield.append(fun)

		hotfield.extend(base)
		return hotfield

	@staticmethod
	def setVisible():
		base 			= super(FRM_GROUP_LOAN_CONTRACT_EX, FRM_GROUP_LOAN_CONTRACT_EX).setVisible()

		ListField = [("PreDefine"), ("WeekDay"), ("WeekNum")]
		ListField.extend(base)
		return ListField

	@staticmethod
	def isMultiValue():
		controls_list=["1-Borrower", "2-Loan Charge"]
		return controls_list

	@staticmethod
	def beforeAuthorize():
		try:
			ID 				= g.formID
			kwargs 			= {}
			GroupLoan 		= MKT_GROUP_LOAN_CONTRACT_INAU.query.get(ID)
			GroupBorrower 	= MKT_GROUP_LOAN_BORROWER_INAU.query.filter(MKT_GROUP_LOAN_BORROWER_INAU.ID==ID).all()
			if GroupLoan:
				DisbursementDate = GroupLoan.DisbursementDate
				for row in GroupBorrower:
					LoanPurposeRemark = row.LoanPurposeRemark
					kwargs.update({row.BorrowerID:{'DisbursementDate': DisbursementDate, 'LoanPurposeRemark': LoanPurposeRemark}})
				base = super(FRM_GROUP_LOAN_CONTRACT_EX,FRM_GROUP_LOAN_CONTRACT_EX).beforeAuthorize(**kwargs)
				return base
			else:
				return False
		except Exception as e:
			db.session.rollback()
			raise e