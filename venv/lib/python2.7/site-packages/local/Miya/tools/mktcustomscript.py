
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.Account.models 			import MKT_ACCOUNT
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from app.PD.models 					import *
from app.AccEntry.models 			import *
from app.AccProduct.models 			import *
from decimal 						import Decimal
from app 							import db
from sqlalchemy 					import *
import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney
import app.tools.mktsetting 		as mktsetting


class CustomPenalty(object):
	def __init__(self,**kwargs):
		pass


	@staticmethod
	def setCustomPretermination(**kwargs):
		"""
			Example: If Client paid-off before the maturity date and the number of dates from start date and paid date is smaller than collection date of (Loan-Term/2), So the system will charge this customer, else don't charge

			Disbursed: $ 5,000.00,
			ValueDate: 2017-12-29, 
			InterestRate: 18/year

			ID	Date		Principal	Interest	Total		Status				Loan Balance
			1	2018-01-29	$ 833.33	$ 77.50		$ 910.83	Full paid on time	$ 4,166.67
			2	2018-02-28	$ 833.33	$ 62.50		$ 895.83	Full paid on time	$ 3,333.34
			3	2018-03-29	$ 833.33	$ 48.33		$ 881.66	Not Yet Due			$ 2,500.01
			4	2018-04-27	$ 833.33	$ 36.25		$ 869.58	Not Yet Due			$ 1,666.68
			5	2018-05-29	$ 833.33	$ 26.67		$ 860.00	Not Yet Due			$ 833.35
			6	2018-06-29	$ 833.35	$ 12.92		$ 846.27	Not Yet Due			$ 0.00
				Total		$ 5,000.00	$ 264.17	$ 5,264.17
			Args:
				**kwargs 			(kwargs):
					NumOfDayLate	(int):		number of day late
					PaidOffDate		(str):		string date "2017-12-12"
					LoanObj 		(object):	sqlalchemy object of Loan Contract
					NewStr			(string):	string additional parameters, "CUSTOM"
			Return:
				TotalPenalty 		(string): 	string format money
			Raise:
				Exception
			Call:
				CustomPenalty.setCustomPretermination(**kwargs)
		"""
		try:
			NumOfDay 		= kwargs.get("NumOfDay",0)
			PaidOffDate 	= kwargs.get("PaidOffDate","")
			LoanObj 		= kwargs.get("LoanObj",None)
			Param 			= kwargs.get("NewStr",[])
			BankDate 		= mktdate.getBankDate()
			AccrInterest 	= 0
			LCObj 			= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID == LoanObj.ID).first()
			if LCObj:
				AccrInterest 	= str(mktmoney.toMoney(float(LCObj.AccrCurrentInt), mktmoney.getCurrencyObj(LCObj.Currency))).replace(',','')

			TotalPenalty 	= 0
			LoanCollected 	= 0
			TotalPDInterest = 0
			TotalInterest 	= 0

			# find total interest
			totalInterestObj = db.session.query(func.sum(MKT_REP_SCHEDULE.Interest).label('TotalInterest')).\
									 filter(MKT_REP_SCHEDULE.LoanID ==LoanObj.ID).one()
			if totalInterestObj:
				TotalInterest 		= totalInterestObj.TotalInterest  

			# find loan collected 

			LoanCollectedObj		= db.session.query(func.sum(MKT_REP_SCHEDULE.Interest).label('LoanCollected')).\
									 filter(MKT_REP_SCHEDULE.LoanID ==LoanObj.ID,\
												MKT_REP_SCHEDULE.CollectionDate < str(BankDate)).one()

			if not LoanCollectedObj.LoanCollected == None:
				LoanCollected 		= LoanCollectedObj.LoanCollected 

			# # find pd interest
			# PDObj = MKT_PAST_DUE.query.filter(MKT_PAST_DUE.LoanID == LoanObj.ID).first()

			# if PDObj:
			# 	TotalPDInterest 		= PDObj.TotInterestDue 

			# calculation 
			print TotalInterest, LoanCollected, AccrInterest
			TotalPenalty = float(TotalInterest) - ((float(LoanCollected) + float(AccrInterest)))

			return TotalPenalty
		except Exception, e:
			raise e

def getCustomTerminationPenalty(NumOfDay,PaidOffDate,LoanObj,NewStr):
	"""Method to access class CustomPenalty"""
	kwargs = {"NumOfDay":NumOfDay,"PaidOffDate":PaidOffDate,"LoanObj":LoanObj,"NewStr":NewStr}
	Amount = CustomPenalty.setCustomPretermination(**kwargs)
	return Amount

class CustomAccountSaving(object):
	def __init__(self,**kwargs):
		pass

	@staticmethod
	def setCustomAccruAccountSaving(**kwargs):
		"""
		
		"""
		try:
			AccID 			= kwargs.get("AccID",'')
			AccountObj 		= kwargs.get("AccountObj",'')

			BankDate 		= mktdate.getBankDate()
			MinTranDate 	= AccountObj.MinTranDate
			ListSystemDate  = str(BankDate).split('-')
			ListMinTranDate = str(MinTranDate).split('-')
			DD 				= ListSystemDate[2]
			MinDD 			= ListMinTranDate[2] if MinTranDate else 1

			MinAmount 		= 0
			TranDate 		= ''

			if int(DD) == int(04) and AccountObj.Balance == 0:
				MinAmount 	= AccountObj.Balance
				TranDate 	= str(BankDate)
			elif int(DD) > int(04) and int(MinDD) == int(04):
				MinAmount 	= 0
				TranDate 	= MinTranDate
			elif int(DD) > int(4) and int(MinDD) != int(04):
				if AccountObj.MinBalance >= AccountObj.Balance or AccountObj.MinBalance == 0:
					MinAmount 	= AccountObj.Balance
					TranDate 	= AccountObj.LastTranDate
				elif AccountObj.MinBalance < AccountObj.Balance:
					MinAmount 	= AccountObj.MinBalance
					TranDate 	= AccountObj.MinTranDate
			elif int(DD) == int(01):
				MinAmount 	= AccountObj.Balance
				TranDate 	= str(BankDate)
			else:
				MinAmount 	= AccountObj.MinBalance
				TranDate 	= AccountObj.MinTranDate
			return MinAmount, TranDate
		except Exception, e:
			raise e

def getCustomAccurAccountSaving(AccID,AccountObj,AccrMode):
	"""Method to access class CustomAccountSaving"""
	kwargs = {"AccID":AccID,"AccountObj":AccountObj,"AccrMode":AccrMode}
	Amount = CustomAccountSaving.setCustomAccruAccountSaving(**kwargs)
	return Amount