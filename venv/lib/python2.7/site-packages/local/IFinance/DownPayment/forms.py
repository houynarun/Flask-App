from app.mktcore.wtfimports 		import *
from .models						import *
from app.LoanContract.models 		import *
from flask 							import Markup
from app.Currency.models 			import MKT_CURRENCY
import app.mktcore.globalfunction     as globalfunction
import app.tools.mktmoney as mktmoney
from decimal 					import Decimal

@app.route("/Morakot/GetLoanAmount",methods=['GET'])
def getLoanAmount():
	LoanAmount 		= 0
	AssetPrice 		= 	request.args.get('AssetPrice') if 'AssetPrice' in request.args else 0
	Currency 		= 	request.args.get('Currency')
	AssetPrice 		= 	globalfunction.wordAmount(AssetPrice)
	if ',' in str(AssetPrice):
		AssetPrice 		= 	Decimal(AssetPrice).replace(',','')
	DownPayment 	= 	request.args.get('DownPayment') if 'DownPayment' in request.args else 0
	DownPayment 	= 	globalfunction.wordAmount(DownPayment)
	if ',' in str(DownPayment):
		DownPayment     = 	Decimal(DownPayment).replace(',','')

	LoanAmount  	= 	float(AssetPrice) - float(DownPayment)
	return jsonify(LoanAmount= LoanAmount)

@app.route("/Morakot/GetCurrency",methods=['GET'])
def getCurrency():
	Currency 	= ""
	LoanID 		= request.args.get('LoanID')
	LoanContractObj 	= MKT_LOAN_CONTRACT.query.get(LoanID)
	if LoanContractObj:
		Currency 	= LoanContractObj.Currency
	return jsonify(Currency=Currency)


class FRM_DOWN_PAYMENT(exform):
	LoanID			= RemoteTextField(requiredlabel("Loan ID","*"),[validators.Required()])
	Currency 		= TextField(requiredlabel("Currency","*"),[validators.Required()])
	AssetPrice 		= TextField(requiredlabel("Asset Price","*"),[validators.Required()])
	DownPayment 	= TextField(requiredlabel("Down Payment","*"),[validators.Required()])
	LoanAmount 		= TextField(requiredlabel("Loan Amount","*"),[validators.Required()])
	InvoiceNo 		= TextField(requiredlabel("Downpayment invoice no","*"),[validators.Required()])
	PurchaseInvoiceNo = TextField(requiredlabel("Purchase invoice no","*"),[validators.Required()])
	Reference 		= TextField("Reference")

	@staticmethod
	def moneyField():
		return [("AssetPrice", "Currency"),("DownPayment","Currency"),("LoanAmount","Currency")]
	@staticmethod
	def formatMoney():
		return ["AssetPrice","DownPayment","LoanAmount"],"Currency"
	@staticmethod
	def setDisable():
		return [('LoanAmount')]
	@staticmethod
	def hotField():
		hotfield =[]
		fielddisplay="$('#Currency').val(data.Currency)"
		varname="LoanID:$('#LoanID').val()"
		fun=["LoanID", varname ,fielddisplay, "/Morakot/GetCurrency", "change"]
		hotfield.append(fun)

		fielddisplay="$('#LoanAmount').val(data.LoanAmount)"
		varname="DownPayment:$('#DownPayment').val(),AssetPrice:$('#AssetPrice').val(),Currency:$('#Currency').val()"
		fun=["LoanAmount", varname ,fielddisplay, "/Morakot/GetLoanAmount", "focus"]
		hotfield.append(fun)
		return hotfield
	def validate_LoanAmount(form,field):
		LoanID 			= 	request.form['LoanID']
		LoanAmount 		= 	request.form['LoanAmount']
		LoanContranctObj 	= 	MKT_LOAN_CONTRACT.query.get(LoanID)
		if LoanContranctObj:
			if float(LoanAmount) != float(LoanContranctObj.ApprovedAmount):
				raise ValidationError(Markup("Loan Amount <b>%s</b> must be equal Approve Amount <b>%s</b> in Loan Contract."%(LoanAmount,LoanContranctObj.ApprovedAmount)))