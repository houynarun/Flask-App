from app.mktcore.imports 			import *
from sqlalchemy 					import *
from sqlalchemy.sql.expression 		import cast
from dateutil.relativedelta 		import relativedelta
from decimal 						import *
from collections 					import Counter
import sys
import sqlalchemy 					as sqlalchemy

from app.Currency.models 			import *
from app.LoanContract.models 		import *
from app.LoanProduct.models 		import *
from app.LoanApplication.models 	import *
from app.PD.models 					import *
from app.LoanPurpose.models 		import *
from app.AccProduct.models 			import *
from app.AssetClass.models 			import *
from .models 						import *

import app.tools.mktaccounting		as mktaccounting
import app.tools.mkttool 			as mkttool
import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney
import app.tools.mktsetting 		as mktsetting
import app.tools.user 				as user
import app.tools.mktdb 				as mktdb
import local.IFinance.tools.mktuserscript 		as mktuserscript

@app.route("/Morakot/Report/NPLSummary", methods = ['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def NPLSummary():
	BankDate 			= 	mktdate.getBankDate()
	Branch 				= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else session["ChangeBranch"]
	BranchList 			= 	Branch.split()
	Company 			= 	mkttool.getCompany().CompanyName
	AccSetting 			= 	mktsetting.getAccSetting()
	if AccSetting:
		BaseCurrency 	= 	AccSetting.BaseCurrency
	BaseCurrencyObj 	= 	mktmoney.getCurrencyObj(BaseCurrency)

	LoanProductObj 		=	db.session.query(	MKT_LOAN_PRODUCT.ID, MKT_LOAN_PRODUCT.Description).order_by(MKT_LOAN_PRODUCT.ID).all()
	LoanPurposeObj 		=	db.session.query(	MKT_LOAN_PURPOSE.ID, MKT_LOAN_PURPOSE.Description).order_by(MKT_LOAN_PURPOSE.ID).all()
	LoanConditionObj 	=	db.session.query(	MKT_LOAN_APPLICATION.Condition).distinct().order_by(MKT_LOAN_APPLICATION.Condition)
	AssetClassObj 		= 	db.session.query(	MKT_ASSET_CLASS.ID, MKT_ASSET_CLASS.Description).filter(MKT_ASSET_CLASS.ID != '0').order_by(MKT_ASSET_CLASS.ID).all()
	NPLSummaryObj 		= 	MKT_NPL_SUMMARY.query.order_by(MKT_NPL_SUMMARY.BankDate)

	FirstBankDate 		= 	""
	if NPLSummaryObj.all():
		FirstBankDate 	= 	NPLSummaryObj.first().BankDate
		StartMonth		= 	request.args.get('Start') if request.args.get('Start') else FirstBankDate[0:7]
	else:
		StartMonth		= 	str(BankDate)[0:7]
	EndMonth			= 	request.args.get('End') if request.args.get('End') else str(BankDate)[0:7]
	StartDate, EndDate 	= 	mktuserscript.formatStartEndDate(StartMonth, EndMonth)

	NPLSummaryObj 		= 	NPLSummaryObj.filter(MKT_NPL_SUMMARY.BankDate.between(str(StartDate), str(EndDate)))
	NPLSummaryObj 		= 	NPLSummaryObj if 'ALL' in BranchList else NPLSummaryObj.filter(MKT_NPL_SUMMARY.Branch.in_(BranchList))

	# Append all dictionary result to List
	ListResult = appendDicToList(NPLSummaryObj)
	NPLSummary 			= 	getNPLSummary(Branch)
	if EndDate > str(BankDate):
		ListResult.append(NPLSummary)
	if EndDate < FirstBankDate:
		flash(msg_error + "No data available.")

	# return jsonify(Result = ListResult)
	return render_template(	'report/nplsummary/nplsummary.html',
							Branch 			= Branch,
							Company 		= Company,
							BankDate 		= str(BankDate),
							Start 			= StartMonth,
							End 			= EndMonth,
							ListResult 		= ListResult,
							LoanProductObj 	= LoanProductObj,
							LoanPurposeObj	= LoanPurposeObj,
							LoanConditionObj= LoanConditionObj,
							AssetClassObj 	= AssetClassObj,
							mktmoney 		= mktmoney,
							BaseCurrencyObj = BaseCurrencyObj
						)

def getNPLSummary(Branch):
	BranchList 			=	Branch.split() 
	BankDate 			= 	mktdate.getBankDate()
	ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
	AccSetting 		= mktsetting.getAccSetting() #Get Acccounting Setting

	''' Query Objects '''
	LoanContractObj 	=	db.session.query(	MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.LoanProduct,
												MKT_LOAN_CONTRACT.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition,
												MKT_LOAN_CONTRACT.AssetClass,
												MKT_LOAN_CONTRACT.MoreThanOneYear,
												func.count(MKT_LOAN_CONTRACT.ID).label('NumberOfLoan'),
												func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("SumOutAmount")
											).\
										join(MKT_LOAN_APPLICATION, MKT_LOAN_APPLICATION.ID == MKT_LOAN_CONTRACT.LoanApplicationID).\
										join(MKT_PAST_DUE, MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
										filter(	MKT_LOAN_CONTRACT.OutstandingAmount > Decimal(0),
												MKT_LOAN_CONTRACT.DisbursedStat=="Y").\
										filter(or_(	MKT_PAST_DUE.TotPrincipalDue > Decimal(0), 
													MKT_PAST_DUE.TotInterestDue > Decimal(0))
													).\
										order_by(MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.LoanProduct,
												MKT_LOAN_CONTRACT.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition,
												MKT_LOAN_CONTRACT.AssetClass,
												MKT_LOAN_CONTRACT.MoreThanOneYear).\
										group_by(MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.LoanProduct,
												MKT_LOAN_CONTRACT.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition,
												MKT_LOAN_CONTRACT.AssetClass,
												MKT_LOAN_CONTRACT.MoreThanOneYear)
	if not 'ALL' in BranchList:
		LoanContractObj = LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))

	PortfolioExposure 	= 0
	NumberOfLoan 		= 0
	NPLSummary 			= {}

	#Dictionary of Amount of Loan Arrear 
	DicLoanArrearLT1Year= {}
	DicLoanArrearMT1Year= {}

	#Dictionary of Amount and Number filtered by LoanProduct
	DicAmountByPro 		= {}
	DicNumberByPro 		= {}

	#Dictionary of Amount and Number filtered by LoanPurpose
	DicAmountByPur 		= {}
	DicNumberByPur 		= {}

	#Dictionary of Amount and Number filtered by Condition
	DicAmountByCon 		= {}
	DicNumberByCon 		= {}

	for item in LoanContractObj:
		ExchangeRate 		= float(ReportingRateObj[item.Currency])
		PortfolioExposure 	+= float(item.SumOutAmount) * ExchangeRate 
		NumberOfLoan 		+= item.NumberOfLoan

		# Filter by LoanAssetClass and MoreThanOneYear
		if item.AssetClass + 'N' in DicLoanArrearLT1Year:
			CurrentAmount = DicLoanArrearLT1Year[item.AssetClass + 'N']
			Amount = CurrentAmount + (float(item.SumOutAmount) * ExchangeRate)
			DicLoanArrearLT1Year.update({item.AssetClass + 'N': float(Amount)})
		else:
			FirstAmount = float(item.SumOutAmount) * ExchangeRate
			DicLoanArrearLT1Year.update({item.AssetClass + 'N':FirstAmount})

		if item.AssetClass + 'Y' in DicLoanArrearMT1Year:
			CurrentAmount = DicLoanArrearMT1Year[item.AssetClass + 'Y']
			Amount = CurrentAmount + (float(item.SumOutAmount) * ExchangeRate)
			DicLoanArrearMT1Year.update({item.AssetClass + 'Y': float(Amount)})
		else:
			FirstAmount = float(item.SumOutAmount) * ExchangeRate
			DicLoanArrearMT1Year.update({item.AssetClass + 'Y':FirstAmount})

		# Filter by LoanProduct
		DicAmountByPro.update({item.LoanProduct: mktuserscript.getDictionaryAmount(item, DicAmountByPro, 'LoanProduct', ExchangeRate)})
		DicNumberByPro.update({item.LoanProduct: mktuserscript.getDictionaryNumber(item, DicNumberByPro, 'LoanProduct')})
		# Filter by LoanPurpose
		DicAmountByPur.update({item.LoanPurpose: mktuserscript.getDictionaryAmount(item, DicAmountByPur, 'LoanPurpose', ExchangeRate)})
		DicNumberByPur.update({item.LoanPurpose: mktuserscript.getDictionaryNumber(item, DicNumberByPur, 'LoanPurpose')})
		# Filter by Condition
		DicAmountByCon.update({item.Condition: mktuserscript.getDictionaryAmount(item, DicAmountByCon, 'Condition', ExchangeRate)})
		DicNumberByCon.update({item.Condition: mktuserscript.getDictionaryNumber(item, DicNumberByCon, 'Condition')})

	''' Calculate Ratio for each key, value in Dictionary '''
	DicRatioByPro = calculateRatio(DicNumberByPro, NumberOfLoan)
	DicRatioByPur = calculateRatio(DicNumberByPur, NumberOfLoan)
	DicRatioByCon = calculateRatio(DicNumberByCon, NumberOfLoan)

	NPLSummary.update( {
		'Header': 					str(BankDate),
		#Total loan outstanding of loan arrear and number
		'PortfolioExposure':		PortfolioExposure,
		'NumberOfLoan': 			NumberOfLoan,
		'DicLoanArrearLT1Year':		DicLoanArrearLT1Year,
		'DicLoanArrearMT1Year':		DicLoanArrearMT1Year,
		#Dictionary of loan outstanding and ratio of loan arrear filter by Product, Purpose, Condition
		'DicAmountByPro':			DicAmountByPro,
		'DicNumberByPro': 			DicNumberByPro,
		'DicRatioByPro': 			DicRatioByPro,

		'DicAmountByPur':			DicAmountByPur,
		'DicNumberByPur': 			DicNumberByPur,
		'DicRatioByPur': 			DicRatioByPur,

		'DicAmountByCon':			DicAmountByCon,
		'DicNumberByCon': 			DicNumberByCon,
		'DicRatioByCon': 			DicRatioByCon,
	})
	return NPLSummary

def sumDictionary(Data, NewObj = {}):
	Data 				= 	eval(Data)
	NumberOfLoanByPro	=	{}
	NumberOfLoanByPur	=	{}
	NumberOfLoanByCon	=	{}
	RatioOfLoanByPro 	= 	{}
	RatioOfLoanByPur 	= 	{}
	RatioOfLoanByCon 	= 	{}

	if NewObj:
		#Total loan outstanding and number
		PortfolioExposure	= 	float(Data['PortfolioExposure']) + float(NewObj['PortfolioExposure'])
		NumberOfLoan		= 	Data['NumberOfLoan'] + NewObj['NumberOfLoan']
		NumberOfLoanByPro	=	dict(Counter(Data['DicNumberByPro']) + Counter(NewObj['DicNumberByPro']))
		NumberOfLoanByPur	=	dict(Counter(Data['DicNumberByPur']) + Counter(NewObj['DicNumberByPur']))
		NumberOfLoanByCon	=	dict(Counter(Data['DicNumberByCon']) + Counter(NewObj['DicNumberByCon']))
		# Calculate Ratio
		RatioOfLoanByPro = calculateRatio(NumberOfLoanByPro, NumberOfLoan)
		RatioOfLoanByPur = calculateRatio(NumberOfLoanByPur, NumberOfLoan)
		RatioOfLoanByCon = calculateRatio(NumberOfLoanByCon, NumberOfLoan)
		''' Update Dictionary for ALL Branches '''
		NewObj.update({
			'PortfolioExposure':		PortfolioExposure,
			'NumberOfLoan': 			NumberOfLoan,
			'DicLoanArrearLT1Year':		dict(Counter(Data['DicLoanArrearLT1Year']) + Counter(NewObj['DicLoanArrearLT1Year'])),
			'DicLoanArrearMT1Year':		dict(Counter(Data['DicLoanArrearMT1Year']) + Counter(NewObj['DicLoanArrearMT1Year'])),
			#Sum dictionary of loan outstanding of loan arrear filter by Product, Purpose, Condition
			'DicAmountByPro':			dict(Counter(Data['DicAmountByPro']) + Counter(NewObj['DicAmountByPro'])),
			'DicAmountByPur':			dict(Counter(Data['DicAmountByPur']) + Counter(NewObj['DicAmountByPur'])),
			'DicAmountByCon':			dict(Counter(Data['DicAmountByCon']) + Counter(NewObj['DicAmountByCon'])),
			#Update NewObj to get sum of Dictionary
			'DicNumberByPro': 			NumberOfLoanByPro,
			'DicNumberByPur': 			NumberOfLoanByPur,
			'DicNumberByCon': 			NumberOfLoanByCon,
			#Update NewObj to get Ratio
			'DicRatioByPro': 			RatioOfLoanByPro,
			'DicRatioByPur': 			RatioOfLoanByPur,
			'DicRatioByCon': 			RatioOfLoanByCon
			})
	else:
		# If NewObj is empty, set NewObj to Data
		NewObj = Data
	return NewObj

def calculateRatio(DicResult, NumberOfLoan):
	Dict = {}
	if DicResult:
		for key in DicResult:
			if NumberOfLoan != 0:
				Dict.update({key: DicResult[key] / NumberOfLoan*100})
	return Dict 

def appendDicToList(QueryObj):
	''' Using Algorithm to get SubTotal '''
	LastBankDate 	= ''
	NewObj 			= {}
	ListDicObj 		= {}
	for item in QueryObj:
		SysBankDate 		= item.BankDate
		if SysBankDate == LastBankDate or LastBankDate == '':
			NewObj = sumDictionary(item.Data, NewObj)
		else:
			NewObj = eval(item.Data)
		ListDicObj.update({item.BankDate:NewObj})
		LastBankDate = SysBankDate

	''' Append dictonary value in ListDicObj to ListResult '''
	ListResult 		= []
	for key in ListDicObj:
		ListResult.append(ListDicObj[key])
	return ListResult




