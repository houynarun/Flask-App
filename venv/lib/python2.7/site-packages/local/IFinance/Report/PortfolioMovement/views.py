from app.mktcore.imports 			import *
from sqlalchemy 					import *
from sqlalchemy.sql.expression 		import cast
from dateutil.relativedelta 		import relativedelta
from decimal 						import *
from collections 					import Counter
import sys
import sqlalchemy 					as sqlalchemy

from app.Currency.models 			import *
from app.LoanContract.models 		import *
from app.LoanProduct.models 		import *
from app.LoanApplication.models 	import *
from app.PD.models 					import *
from app.LoanPurpose.models 		import *
from app.AccProduct.models 			import *
from app.Account.models 			import *
from app.LoanAmendment.models 		import *
from app.Journal.models 			import *
from .models 						import *

import app.tools.mktaccounting		as mktaccounting
import app.tools.mkttool 			as mkttool
import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney
import app.tools.mktsetting 		as mktsetting
import app.tools.user 				as user
import app.tools.mktdb 				as mktdb
import local.IFinance.tools.mktuserscript 		as mktuserscript

@app.route("/Morakot/Report/PortfolioMovement", methods = ['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def PortfolioMovement():
	BankDate 			= 	mktdate.getBankDate()
	Branch 				= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else session["ChangeBranch"]
	BranchList 			= 	Branch.split()
	Company 			= 	mkttool.getCompany().CompanyName
	AccSetting 			= 	mktsetting.getAccSetting()
	if AccSetting:
		BaseCurrency 	= 	AccSetting.BaseCurrency

	BaseCurrencyObj 	= 	mktmoney.getCurrencyObj(BaseCurrency)
	LoanProductObj 		=	db.session.query(	MKT_LOAN_PRODUCT.ID, MKT_LOAN_PRODUCT.Description).order_by(MKT_LOAN_PRODUCT.ID).all()
	LoanPurposeObj 		=	db.session.query(	MKT_LOAN_PURPOSE.ID, MKT_LOAN_PURPOSE.Description).order_by(MKT_LOAN_PURPOSE.ID).all()
	LoanConditionObj 	=	db.session.query(	MKT_LOAN_APPLICATION.Condition).distinct().order_by(MKT_LOAN_APPLICATION.Condition)
	PortfolioMovementObj= 	MKT_PORTFOLIO_MOVEMENT.query.order_by(MKT_PORTFOLIO_MOVEMENT.BankDate)

	#Set StartMonth to first record bankdate
	FirstBankDate = ''
	if PortfolioMovementObj.all():
		FirstBankDate 	= 	PortfolioMovementObj.first().BankDate
		StartMonth 		= 	request.args.get('Start') if request.args.get('Start') else FirstBankDate[0:7] # Strip to get only "Year-Month"
	else:
		StartMonth 		= 	str(BankDate)[0:7]
	EndMonth   			= 	request.args.get('End') if request.args.get('End') else str(BankDate)[0:7]
	StartDate, EndDate 	= 	mktuserscript.formatStartEndDate(StartMonth, EndMonth)

	PortfolioMovementObj = 	PortfolioMovementObj.filter(MKT_PORTFOLIO_MOVEMENT.BankDate.between(str(StartDate), str(EndDate)))
	PortfolioMovementObj = 	PortfolioMovementObj if 'ALL' in BranchList else PortfolioMovementObj.filter(MKT_PORTFOLIO_MOVEMENT.Branch.in_(BranchList))

	# Append all dictionary result to List
	ListResult 			= 	appendDicToList(PortfolioMovementObj)
	PortfolioMovement 	= 	getPortfolioMovement(Branch)
	if EndDate > str(BankDate):
		ListResult.append(PortfolioMovement)
	if EndDate < FirstBankDate:
		flash(msg_error + "No data available.")

	# return jsonify(result = ListResult)w
	return render_template(	'report/portfoliomovement/portfoliomovement.html',
							Branch 			= Branch,
							Company 		= Company,
							BankDate 		= str(BankDate),
							Start 			= StartMonth,
							End 			= EndMonth,
							ListResult 		= ListResult,
							LoanProductObj 	= LoanProductObj,
							LoanPurposeObj	= LoanPurposeObj,
							LoanConditionObj= LoanConditionObj,
							mktmoney 		= mktmoney,
							BaseCurrencyObj = BaseCurrencyObj
						)

def getPortfolioMovement(Branch):
	BranchList 			=	Branch.split() 
	BankDate 			= 	mktdate.getBankDate()
	FirstDay 			= 	mktdate.getFirstDay(BankDate)
	LastDay 			= 	mktdate.getLastDay(BankDate)
	ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
	AccSetting 			= 	mktsetting.getAccSetting() #Get Acccounting Setting

	# Get DrawDown Account
	AccProductObj 	= MKT_ACC_PRODUCT.query.get('101')
	if AccProductObj:
		DrawdownAccount = AccProductObj.CategoryList

	''' Query Objects '''
	LoanContractObj 	=	db.session.query(	MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.LoanProduct,
												MKT_LOAN_CONTRACT.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition,
												func.count(MKT_LOAN_CONTRACT.ID).label('NumberOfLoan'),
												func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("SumOutAmount")
											).\
										join(MKT_LOAN_APPLICATION, MKT_LOAN_APPLICATION.ID == MKT_LOAN_CONTRACT.LoanApplicationID).\
										filter(	MKT_LOAN_CONTRACT.OutstandingAmount > Decimal(0),
												MKT_LOAN_CONTRACT.DisbursedStat=="Y"
												).\
										order_by(MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.LoanProduct,
												MKT_LOAN_CONTRACT.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition).\
										group_by(MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.LoanProduct,
												MKT_LOAN_CONTRACT.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition)

	DrawDownAccObj 		= 	db.session.query(	MKT_ACCOUNT.Branch, MKT_ACCOUNT.Balance, MKT_ACCOUNT.Currency).\
										filter(MKT_ACCOUNT.AccProduct == '101').\
										group_by(MKT_ACCOUNT.Branch,
												MKT_ACCOUNT.Currency,
												MKT_ACCOUNT.Balance)

	JournalObj 			= 	db.session.query(	MKT_JOURNAL.Branch,
												MKT_JOURNAL.Currency,
												func.sum(MKT_JOURNAL.Amount).label('Amount')).\
										filter(MKT_JOURNAL.CategoryID==DrawdownAccount).\
										group_by(MKT_JOURNAL.Branch, MKT_JOURNAL.Currency)

	LoanContractHistObj = 	db.session.query(	MKT_LOAN_CONTRACT_HIST.Branch,
												MKT_LOAN_CONTRACT_HIST.Currency,
												MKT_LOAN_CONTRACT_HIST.LoanProduct,
												MKT_LOAN_CONTRACT_HIST.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition,
												func.count(MKT_LOAN_CONTRACT_HIST.ID).label('NumberOfLoan'),
												func.sum(MKT_LOAN_CONTRACT_HIST.OutstandingAmount).label("SumOutAmount")
											).\
										join(MKT_LOAN_APPLICATION, MKT_LOAN_APPLICATION.ID == MKT_LOAN_CONTRACT_HIST.LoanApplicationID).\
										order_by(MKT_LOAN_CONTRACT_HIST.Branch,
												MKT_LOAN_CONTRACT_HIST.Currency,
												MKT_LOAN_CONTRACT_HIST.LoanProduct,
												MKT_LOAN_CONTRACT_HIST.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition).\
										group_by(MKT_LOAN_CONTRACT_HIST.Branch,
												MKT_LOAN_CONTRACT_HIST.Currency,
												MKT_LOAN_CONTRACT_HIST.LoanProduct,
												MKT_LOAN_CONTRACT_HIST.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition)
	LoanAmendmentObj 	=	MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.Operation == 'TMN').order_by(MKT_LOAN_AMENDMENT.LoanID)

	if str(BankDate) >= str(FirstDay):
		LoanContractObj = LoanContractObj.filter(MKT_LOAN_CONTRACT.ValueDate.between(str(FirstDay), str(LastDay) ) )
		LoanAmendmentObj= LoanAmendmentObj.filter(MKT_LOAN_AMENDMENT.AmendDate.between(str(FirstDay), str(LastDay) ) )
		JournalObj 		= JournalObj.filter(MKT_JOURNAL.TransactionDate.between(str(FirstDay), str(LastDay) ) )
	else:
		LoanContractObj = LoanContractObj.filter(MKT_LOAN_CONTRACT.ValueDate.between(str(FirstDay), str(BankDate)))
		LoanAmendmentObj= LoanAmendmentObj.filter(MKT_LOAN_AMENDMENT.AmendDate.between(str(FirstDay), str(BankDate)))
		JournalObj 		= JournalObj.filter(MKT_JOURNAL.TransactionDate.between(str(FirstDay), str(BankDate) ) )

	# Custom Filter
	if not 'ALL' in BranchList:
		LoanContractObj = LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		LoanAmendmentObj= LoanAmendmentObj.filter(MKT_LOAN_AMENDMENT.Branch.in_(BranchList))
		DrawDownAccObj	= DrawDownAccObj.filter(MKT_ACCOUNT.Branch.in_(BranchList))
		JournalObj 		= JournalObj.filter(MKT_JOURNAL.Branch.in_(BranchList))

	InterestObj 		= 	JournalObj.filter(MKT_JOURNAL.Transaction == '10') # Transaction: Interest Collection
	PrincipalObj 		= 	JournalObj.filter(MKT_JOURNAL.Transaction == '11') # Transaction: Principal Collection
	PenaltyObj 			= 	JournalObj.filter(MKT_JOURNAL.Transaction == '13') # Transaction: Penalty Collection

	PDInterestObj 		= 	JournalObj.filter(MKT_JOURNAL.Transaction == '52') # Transaction: PD Interest Collection
	PDPrincipalObj 		= 	JournalObj.filter(MKT_JOURNAL.Transaction == '53') # Transaction: PD Principal Collection
	PDPenaltyObj 		= 	JournalObj.filter(MKT_JOURNAL.Transaction == '54') # Transaction: PD Penalty Collection

	#Get the highest version of LoanContractHistID
	ListTerminatedLoan = []
	ListHistID = []
	if LoanAmendmentObj.all():
		for obj in LoanAmendmentObj.all():
			if obj:
				ID = obj.LoanID
				Curr = db.session.query(MKT_LOAN_CONTRACT_HIST.ID).\
									filter(MKT_LOAN_CONTRACT_HIST.ID.like(ID+"%")).\
									count()
				if Curr > 0:
					Curr -= 1
				HistID = '%s@%s' % (ID, Curr)
			ListHistID.append(HistID)
		for item in ListHistID:
			LoanTerminateObj = LoanContractHistObj.filter(MKT_LOAN_CONTRACT_HIST.ID == item)
			if LoanTerminateObj:
				ListTerminatedLoan.append(LoanTerminateObj.first())

	# New Loan Contract
	NewLoanOutstanding 			= 0
	NumberOfNewLoan 			= 0
	CashCollection 				= 0
	DDBalance 					= 0
	CurrentDueAmount 			= 0
	ArrearAmount 				= 0
	PortfolioMovement 			= {}
	DicNewLoanAmountByPro 		= {}
	DicNewLoanNumberByPro 		= {}
	DicNewLoanAmountByPur 		= {}
	DicNewLoanNumberByPur 		= {}
	DicNewLoanAmountByCon 		= {}
	DicNewLoanNumberByCon 		= {}
	if LoanContractObj.first():
		for item in LoanContractObj:
			ExchangeRate 		= float(ReportingRateObj[item.Currency])
			NewLoanOutstanding 	+= float(item.SumOutAmount) * ExchangeRate 
			NumberOfNewLoan 	+= item.NumberOfLoan

			# Filter by LoanProduct
			DicNewLoanAmountByPro.update({item.LoanProduct: mktuserscript.getDictionaryAmount(item, DicNewLoanAmountByPro, 'LoanProduct', ExchangeRate)})
			DicNewLoanNumberByPro.update({item.LoanProduct: mktuserscript.getDictionaryNumber(item, DicNewLoanNumberByPro, 'LoanProduct')})
			# Filter by LoanPurpose
			DicNewLoanAmountByPur.update({item.LoanPurpose: mktuserscript.getDictionaryAmount(item, DicNewLoanAmountByPur, 'LoanPurpose', ExchangeRate)})
			DicNewLoanNumberByPur.update({item.LoanPurpose: mktuserscript.getDictionaryNumber(item, DicNewLoanNumberByPur, 'LoanPurpose')})
			# Filter by Condition
			DicNewLoanAmountByCon.update({item.Condition: mktuserscript.getDictionaryAmount(item, DicNewLoanAmountByCon, 'Condition', ExchangeRate)})
			DicNewLoanNumberByCon.update({item.Condition: mktuserscript.getDictionaryNumber(item, DicNewLoanNumberByCon, 'Condition')})
		# DDA Balance
		DDBalance 		= mktuserscript.convertToBaseCurrency(DrawDownAccObj, "Balance")
		# Collection from Loans
		TotInterest 	= mktuserscript.convertToBaseCurrency(InterestObj, "Amount")
		TotPrincipal 	= mktuserscript.convertToBaseCurrency(PrincipalObj, "Amount")
		TotCharge 		= mktuserscript.convertToBaseCurrency(PenaltyObj, "Amount")
		CurrentDueAmount= TotPrincipal + TotInterest + TotCharge
		# Collection from Loan arrear
		TotPDInterest 	= mktuserscript.convertToBaseCurrency(PDInterestObj, "Amount")
		TotPDPrincipal	= mktuserscript.convertToBaseCurrency(PDPrincipalObj, "Amount")
		TotPDCharge 	= mktuserscript.convertToBaseCurrency(PDPenaltyObj, "Amount")
		ArrearAmount	= TotPDPrincipal + TotPDInterest + TotPDCharge

		CashCollection 	= DDBalance + CurrentDueAmount + ArrearAmount

	PortfolioMovement.update( {
		'Header': 					str(BankDate),
		#Total loan outstanding and number
		'NewLoanOutstanding':		NewLoanOutstanding,
		'NumberOfNewLoan': 			NumberOfNewLoan,
		#Dictionary of loan outstanding and number filter by Product, Purpose, Condition
		'DicNewLoanNumberByPro'	: 	DicNewLoanNumberByPro,
		'DicNewLoanAmountByPro'	:	DicNewLoanAmountByPro,
		'DicNewLoanNumberByPur'	: 	DicNewLoanNumberByPur,
		'DicNewLoanAmountByPur'	:	DicNewLoanAmountByPur,
		'DicNewLoanNumberByCon'	: 	DicNewLoanNumberByCon,
		'DicNewLoanAmountByCon'	:	DicNewLoanAmountByCon,
		'CashCollection' 		: 	CashCollection,
		'Advance'				:	DDBalance,
		'CurrentDue'			:	CurrentDueAmount,
		'Arrear'				:	ArrearAmount,
	})

	# Terminated Loans
	TerminatedLoanOutstanding 	= 0
	NumberOfTerminateLoan 		= 0
	DicTerLoanAmountByPro 		= {}
	DicTerLoanNumberByPro 		= {}
	DicTerLoanAmountByPur 		= {}
	DicTerLoanNumberByPur 		= {}
	DicTerLoanAmountByCon 		= {}
	DicTerLoanNumberByCon 		= {}
	for item in ListTerminatedLoan:
		if item:
			ExchangeRate 				= float(ReportingRateObj[item.Currency])
			TerminatedLoanOutstanding 	+= float(item.SumOutAmount) * ExchangeRate 
			NumberOfTerminateLoan 		+= item.NumberOfLoan

			# Filter by LoanProduct
			DicTerLoanAmountByPro.update({item.LoanProduct: mktuserscript.getDictionaryAmount(item, DicTerLoanAmountByPro, 'LoanProduct', ExchangeRate)})
			DicTerLoanNumberByPro.update({item.LoanProduct: mktuserscript.getDictionaryNumber(item, DicTerLoanNumberByPro, 'LoanProduct')})
			# Filter by LoanPurpose
			DicTerLoanAmountByPur.update({item.LoanPurpose: mktuserscript.getDictionaryAmount(item, DicTerLoanAmountByPur, 'LoanPurpose', ExchangeRate)})
			DicTerLoanNumberByPur.update({item.LoanPurpose: mktuserscript.getDictionaryNumber(item, DicTerLoanNumberByPur, 'LoanPurpose')})
			# Filter by Condition
			DicTerLoanAmountByCon.update({item.Condition: mktuserscript.getDictionaryAmount(item, DicTerLoanAmountByCon, 'Condition', ExchangeRate)})
			DicTerLoanNumberByCon.update({item.Condition: mktuserscript.getDictionaryNumber(item, DicTerLoanNumberByCon, 'Condition')})

	PortfolioMovement.update( {
		'Header': 					str(BankDate),
		#Total loan outstanding and number
		'TerminatedLoanOutstanding':	TerminatedLoanOutstanding,
		'NumberOfTerminateLoan': 		NumberOfTerminateLoan,
		#Dictionary of loan outstanding and number filter by Product, Purpose, Condition
		'DicTerLoanNumberByPro': 		DicTerLoanNumberByPro,
		'DicTerLoanAmountByPro':		DicTerLoanAmountByPro,
		'DicTerLoanNumberByPur': 		DicTerLoanNumberByPur,
		'DicTerLoanAmountByPur':		DicTerLoanAmountByPur,
		'DicTerLoanNumberByCon': 		DicTerLoanNumberByCon,
		'DicTerLoanAmountByCon':		DicTerLoanAmountByCon,
	})
	return PortfolioMovement

def sumDictionary(Data, NewObj = {}):
	''' This function will sum each value in Dictionary when ALL branch is selected. '''

	# Convert String of Dictionary to Dictionary
	Data 				= 	eval(Data)
	if NewObj:
		#Total loan outstanding and number

		NewLoanOutstanding 			= float(Data['NewLoanOutstanding']) + float(NewObj['NewLoanOutstanding'])
		NumberOfNewLoan 			= Data['NumberOfNewLoan'] + NewObj['NumberOfNewLoan']

		TerminatedLoanOutstanding 	= float(Data['TerminatedLoanOutstanding']) + float(NewObj['TerminatedLoanOutstanding'])
		NumberOfTerminateLoan 		= Data['NumberOfTerminateLoan'] + NewObj['NumberOfTerminateLoan']
		''' Update Dictionary for ALL Branches '''
		NewObj.update({
			# New business
			'NewLoanOutstanding'	:			NewLoanOutstanding,
			'NumberOfNewLoan' 		: 				NumberOfNewLoan,
			'DicNewLoanNumberByPro'	: 		dict(Counter(Data['DicNewLoanNumberByPro']) + Counter(NewObj['DicNewLoanNumberByPro'])),
			'DicNewLoanAmountByPro'	:		dict(Counter(Data['DicNewLoanAmountByPro']) + Counter(NewObj['DicNewLoanAmountByPro'])),
			'DicNewLoanNumberByPur'	:		dict(Counter(Data['DicNewLoanNumberByPur']) + Counter(NewObj['DicNewLoanNumberByPur'])),
			'DicNewLoanAmountByPur'	:		dict(Counter(Data['DicNewLoanAmountByPur']) + Counter(NewObj['DicNewLoanAmountByPur'])),
			'DicNewLoanNumberByCon'	:		dict(Counter(Data['DicNewLoanNumberByCon']) + Counter(NewObj['DicNewLoanNumberByCon'])),
			'DicNewLoanAmountByCon'	:		dict(Counter(Data['DicNewLoanAmountByCon']) + Counter(NewObj['DicNewLoanAmountByCon'])),
			'CashCollection' 		: 		float(Data['CashCollection']) + float(NewObj['CashCollection']),
			'Advance'				:		float(Data['Advance']) + float(NewObj['Advance']),
			'CurrentDue'			:		float(Data['CurrentDue']) + float(NewObj['CurrentDue']),
			'Arrear'				:		float(Data['Arrear']) + float(NewObj['Arrear']),
			# Terminated Loan
			'TerminatedLoanOutstanding':	TerminatedLoanOutstanding,
			'NumberOfTerminateLoan'	: 		NumberOfTerminateLoan,
			'DicTerLoanNumberByPro'	:		dict(Counter(Data['DicTerLoanNumberByPro']) + Counter(NewObj['DicTerLoanNumberByPro'])),
			'DicTerLoanAmountByPro'	:		dict(Counter(Data['DicTerLoanAmountByPro']) + Counter(NewObj['DicTerLoanAmountByPro'])),
			'DicTerLoanNumberByPur'	:		dict(Counter(Data['DicTerLoanNumberByPur']) + Counter(NewObj['DicTerLoanNumberByPur'])),
			'DicTerLoanAmountByPur'	:		dict(Counter(Data['DicTerLoanAmountByPur']) + Counter(NewObj['DicTerLoanAmountByPur'])),
			'DicTerLoanNumberByCon'	:		dict(Counter(Data['DicTerLoanNumberByCon']) + Counter(NewObj['DicTerLoanNumberByCon'])),
			'DicTerLoanAmountByCon'	:		dict(Counter(Data['DicTerLoanAmountByCon']) + Counter(NewObj['DicTerLoanAmountByCon'])),
			})
	else:
		# If NewObj is empty, set NewObj to Data
		NewObj = Data
	return NewObj

def appendDicToList(QueryObj):
	''' Using Algorithm to get SubTotal '''
	LastBankDate 	= ''
	NewObj 			= {}
	ListDicObj 		= {}
	for item in QueryObj:
		SysBankDate 		= item.BankDate
		if SysBankDate == LastBankDate or LastBankDate == '':
			NewObj = sumDictionary(item.Data, NewObj)
		else:
			NewObj = eval(item.Data)
		ListDicObj.update({item.BankDate:NewObj})
		LastBankDate = SysBankDate

	''' Append dictonary value in ListDicObj to ListResult '''
	ListResult 		= []
	for key in ListDicObj:
		ListResult.append(ListDicObj[key])
	return ListResult
