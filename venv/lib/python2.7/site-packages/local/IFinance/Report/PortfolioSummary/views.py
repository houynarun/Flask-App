from app.mktcore.imports 			import *
from sqlalchemy 					import *
from sqlalchemy.sql.expression 		import cast
from dateutil.relativedelta 		import relativedelta
from decimal 						import *
from collections 					import Counter
import sys
import sqlalchemy 					as sqlalchemy

from app.Currency.models 			import *
from app.LoanContract.models 		import *
from app.LoanProduct.models 		import *
from app.LoanApplication.models 	import *
from app.PD.models 					import *
from app.LoanPurpose.models 		import *
from app.AccProduct.models 			import *
from app.Journal.models 			import *
from .models 						import *

import app.tools.mktaccounting		as mktaccounting
import app.tools.mkttool 			as mkttool
import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney
import app.tools.mktsetting 		as mktsetting
import app.tools.user 				as user
import app.tools.mktdb 				as mktdb
import local.IFinance.tools.mktuserscript 		as mktuserscript

@app.route("/Morakot/Report/PortfolioSummary", methods = ['GET', 'POST'])
@checkLogOutSession
@checkLogOutTime
def PortfolioSummary():
	BankDate 			= 	mktdate.getBankDate()
	Branch 				= 	request.args.get("Branch").strip().upper() if 'Branch' in request.args else session["ChangeBranch"]
	BranchList 			= 	Branch.split()

	Company 			= 	mkttool.getCompany().CompanyName
	AccSetting 			= 	mktsetting.getAccSetting()
	if AccSetting:
		BaseCurrency 	= 	AccSetting.BaseCurrency
	
	BaseCurrencyObj 	= 	mktmoney.getCurrencyObj(BaseCurrency)
	LoanProductObj 		=	db.session.query(	MKT_LOAN_PRODUCT.ID, MKT_LOAN_PRODUCT.Description).order_by(MKT_LOAN_PRODUCT.ID).all()
	LoanPurposeObj 		=	db.session.query(	MKT_LOAN_PURPOSE.ID, MKT_LOAN_PURPOSE.Description).order_by(MKT_LOAN_PURPOSE.ID).all()
	LoanConditionObj 	=	db.session.query(	MKT_LOAN_APPLICATION.Condition).distinct().order_by(MKT_LOAN_APPLICATION.Condition)
	PortfolioSummaryObj = 	MKT_PORTFOLIO_SUMMARY.query.order_by(MKT_PORTFOLIO_SUMMARY.BankDate)

	#Set StartMonth to first record bankdate
	FirstBankDate = ''
	if PortfolioSummaryObj.all():
		FirstBankDate 	= 	PortfolioSummaryObj.first().BankDate
		StartMonth 		= 	request.args.get('Start') if request.args.get('Start') else FirstBankDate[0:7]
	else:
		StartMonth		= 	str(BankDate)[0:7]
	EndMonth   			= 	request.args.get('End') if request.args.get('End') else str(BankDate)[0:7]
	StartDate, EndDate 	= mktuserscript.formatStartEndDate(StartMonth, EndMonth)

	PortfolioSummaryObj = 	PortfolioSummaryObj.filter(MKT_PORTFOLIO_SUMMARY.BankDate.between(str(StartDate), str(EndDate)))
	PortfolioSummaryObj = 	PortfolioSummaryObj if 'ALL' in BranchList else PortfolioSummaryObj.filter(MKT_PORTFOLIO_SUMMARY.Branch.in_(BranchList))

	# Append all dictionary result to List
	ListResult 			= 	appendDicToList(PortfolioSummaryObj)
	PortfolioSummary 	= 	getPortfolioSummary(Branch)
	if EndDate > str(BankDate):
		ListResult.append(PortfolioSummary)
	if EndDate < FirstBankDate:
		flash(msg_error + "No data available.")

	# return jsonify(result = ListResult)
	return render_template(	'report/portfoliosummary/portfoliosummary.html',
							Branch 			= Branch,
							Company 		= Company,
							BankDate 		= str(BankDate),
							Start 			= StartMonth,
							End 			= EndMonth,
							ListResult 		= ListResult,
							LoanProductObj 	= LoanProductObj,
							LoanPurposeObj	= LoanPurposeObj,
							LoanConditionObj= LoanConditionObj,
							mktmoney 		= mktmoney,
							BaseCurrencyObj = BaseCurrencyObj
						)

def getPortfolioSummary(Branch):
	BranchList 			=	Branch.split() 
	BankDate 			= 	mktdate.getBankDate()
	ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
	AccSetting 		= mktsetting.getAccSetting() #Get Acccounting Setting

	# Get DrawDown Account
	AccProductObj 	= MKT_ACC_PRODUCT.query.get('101')
	if AccProductObj:
		DrawdownAccount = AccProductObj.CategoryList

	ListInterest 	= []
	ListPrincipal 	= []
	ListPenalty 	= []

	PDCharge 		= mktsetting.getAppSetting('PDCharge')
	PDInterest 		= mktsetting.getAppSetting('PDInterest')
	PDPrincipal 	= mktsetting.getAppSetting('PDPrincipal')

	# Add All Transaction PD
	ListInterest.append(PDInterest)
	ListPrincipal.append(PDPrincipal)
	ListPenalty.append(PDCharge)

	if AccSetting:
		PenaltyTran 	= AccSetting.PenaltyTran
		InterestTran 	= AccSetting.InterestTran
		PrincipalTran 	= AccSetting.PrincipalTran
		# Add All Transaction Collection
		ListInterest.append(InterestTran)
		ListPenalty.append(PenaltyTran)
		ListPrincipal.append(PrincipalTran)

	''' Query Objects '''
	LoanContractObj 	=	db.session.query(	MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.LoanProduct,
												MKT_LOAN_CONTRACT.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition,
												MKT_LOAN_CONTRACT.MaturityDate,
												func.count(MKT_LOAN_CONTRACT.ID).label('NumberOfLoan'),
												func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("SumOutAmount"),
												func.sum(cast(MKT_LOAN_CONTRACT.InterestRate, sqlalchemy.Float)).label('SumInterestRate'),
												func.sum(MKT_LOAN_APPLICATION.DownPayment).label('SumDownPayment'),
												func.sum(cast(MKT_LOAN_CONTRACT.Term, sqlalchemy.Integer)).label("SumTerm")
											).\
										join(MKT_LOAN_APPLICATION, MKT_LOAN_APPLICATION.ID == MKT_LOAN_CONTRACT.LoanApplicationID).\
										filter(	MKT_LOAN_CONTRACT.OutstandingAmount > Decimal(0),
												MKT_LOAN_CONTRACT.DisbursedStat=="Y"
												).\
										order_by(MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.LoanProduct,
												MKT_LOAN_CONTRACT.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition).\
										group_by(MKT_LOAN_CONTRACT.Branch,
												MKT_LOAN_CONTRACT.Currency,
												MKT_LOAN_CONTRACT.LoanProduct,
												MKT_LOAN_CONTRACT.LoanPurpose,
												MKT_LOAN_APPLICATION.Condition,
												MKT_LOAN_CONTRACT.MaturityDate)

	JournalObj 			= 	db.session.query(	MKT_JOURNAL.Branch,
												MKT_JOURNAL.Currency,
												func.sum(MKT_JOURNAL.Amount).label('Amount')).\
										filter(MKT_JOURNAL.CategoryID==DrawdownAccount).\
										filter(MKT_JOURNAL.TransactionDate <= str(BankDate)).\
										group_by(MKT_JOURNAL.Branch, MKT_JOURNAL.Currency)

	InterestObj 		= 	JournalObj.filter(MKT_JOURNAL.Transaction.in_(ListInterest))
	PrincipalObj 		= 	JournalObj.filter(MKT_JOURNAL.Transaction.in_(ListPrincipal))
	PenaltyObj 			= 	JournalObj.filter(MKT_JOURNAL.Transaction.in_(ListPenalty))

	if not 'ALL' in BranchList:
		LoanContractObj = LoanContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchList))
		InterestObj 	= InterestObj.filter(MKT_JOURNAL.Branch.in_(BranchList))
		PrincipalObj 	= PrincipalObj.filter(MKT_JOURNAL.Branch.in_(BranchList))
		PenaltyObj 		= PenaltyObj.filter(MKT_JOURNAL.Branch.in_(BranchList))

	PortfolioExposure 	= 0
	NumberOfLoan 		= 0
	TotInterestRate		= 0
	TotInitialAdvance	= 0
	TotOriginalTerm 	= 0
	TotRemainingTerm	= 0
	TotInterest 		= 0
	TotPrincipal 		= 0
	TotCharge 			= 0

	PortfolioSummary 	= {}
	DicAmountByPro 		= {}
	DicNumberByPro 		= {}
	DicAmountByPur 		= {}
	DicNumberByPur 		= {}
	DicAmountByCon 		= {}
	DicNumberByCon 		= {}

	for item in LoanContractObj:
		ExchangeRate 		= float(ReportingRateObj[item.Currency])
		PortfolioExposure 	+= float(item.SumOutAmount) * ExchangeRate 
		NumberOfLoan 		+= item.NumberOfLoan
		TotInterestRate 	+= item.SumInterestRate 
		TotInitialAdvance 	+= float(item.SumDownPayment) * ExchangeRate 
		TotOriginalTerm 	+= item.SumTerm

		''' Calculate Remaining Term '''
		MaturityDate 		= datetime.strptime(str(item.MaturityDate),"%Y-%m-%d").date()
		DateDiff 			= relativedelta(MaturityDate, BankDate)
		RemainingTerm 				= 0
		if DateDiff.days > 16:
			RemainingTerm 	= DateDiff.years*12+DateDiff.months+1
		else:
			RemainingTerm 	= DateDiff.years*12+DateDiff.months
		TotRemainingTerm	+= RemainingTerm

		# Filter by LoanProduct
		DicAmountByPro.update({item.LoanProduct: mktuserscript.getDictionaryAmount(item, DicAmountByPro, 'LoanProduct', ExchangeRate)})
		DicNumberByPro.update({item.LoanProduct: mktuserscript.getDictionaryNumber(item, DicNumberByPro, 'LoanProduct')})
		# Filter by LoanPurpose
		DicAmountByPur.update({item.LoanPurpose: mktuserscript.getDictionaryAmount(item, DicAmountByPur, 'LoanPurpose', ExchangeRate)})
		DicNumberByPur.update({item.LoanPurpose: mktuserscript.getDictionaryNumber(item, DicNumberByPur, 'LoanPurpose')})
		# Filter by Condition
		DicAmountByCon.update({item.Condition: mktuserscript.getDictionaryAmount(item, DicAmountByCon, 'Condition', ExchangeRate)})
		DicNumberByCon.update({item.Condition: mktuserscript.getDictionaryNumber(item, DicNumberByCon, 'Condition')})
	
	TotInterest 	= mktuserscript.convertToBaseCurrency(InterestObj, "Amount")
	TotPrincipal 	= mktuserscript.convertToBaseCurrency(PrincipalObj, "Amount")
	TotCharge 		= mktuserscript.convertToBaseCurrency(PenaltyObj, "Amount")


	# Calculate Average
	AvgInterestRate 	= TotInterestRate / NumberOfLoan if NumberOfLoan > 0 else float(0)
	AvgInitialAdvance 	= TotInitialAdvance / NumberOfLoan if NumberOfLoan > 0 else float(0)
	AvgExposure 		= PortfolioExposure / NumberOfLoan if NumberOfLoan > 0 else float(0)
	AvgOriginalTerm 	= TotOriginalTerm / NumberOfLoan if NumberOfLoan > 0 else float(0)
	AvgRemainingTerm 	= TotRemainingTerm/ NumberOfLoan if NumberOfLoan > 0 else float(0)
	TotalPaymentMade 	= TotPrincipal + TotInterest + TotCharge
	AverageYield 		= TotalPaymentMade / PortfolioExposure if PortfolioExposure > 0 else float(0)

	PortfolioSummary.update( {
		'Header': 					str(BankDate),
		#Total loan outstanding and number
		'PortfolioExposure':		PortfolioExposure,
		'NumberOfLoan': 			NumberOfLoan,
		#Dictionary of loan outstanding and number filter by Product, Purpose, Condition
		'DicNumberByPro': 			DicNumberByPro,
		'DicAmountByPro':			DicAmountByPro,
		'DicNumberByPur': 			DicNumberByPur,
		'DicAmountByPur':			DicAmountByPur,
		'DicNumberByCon': 			DicNumberByCon,
		'DicAmountByCon':			DicAmountByCon,
		#Total Amount to Calculate Average
		'TotInterestRate':			TotInterestRate,
		'TotInitialAdvance':		TotInitialAdvance,
		'TotOriginalTerm':			TotOriginalTerm,
		'TotRemainingTerm':			TotRemainingTerm,
		#Average
		'WeightedInterestRate': 	AvgInterestRate,
		'WeightedInitialAdvance': 	AvgInitialAdvance,
		'WeightedExposure': 		AvgExposure,
		'WeightedOriginalTerm': 	AvgOriginalTerm,
		'WeightedRemainingTerm': 	AvgRemainingTerm,
		#Payment
		'TotalPaymentMade': 		TotalPaymentMade,
		'Interest': 				TotInterest,
		'Principal': 				TotPrincipal,
		'Charge': 					TotCharge,
		'AverageYield':				AverageYield
	})
	return PortfolioSummary

def sumDictionary(Data, NewObj = {}):
	Data 				= 	eval(Data)
	if NewObj:
		#Total loan outstanding and number
		PortfolioExposure	= 	float(Data['PortfolioExposure']) + float(NewObj['PortfolioExposure'])
		NumberOfLoan		= 	Data['NumberOfLoan'] + NewObj['NumberOfLoan']
		#Total Amount to Calculate Average
		TotInterestRate		=	float(Data['TotInterestRate']) + float(NewObj['TotInterestRate'])
		TotInitialAdvance	=	float(Data['TotInitialAdvance']) + float(NewObj['TotInitialAdvance'])
		TotOriginalTerm		=	Data['TotOriginalTerm'] + NewObj['TotOriginalTerm']
		TotRemainingTerm	=	Data['TotRemainingTerm'] + NewObj['TotRemainingTerm']
		TotPaymentMade 		= 	float(Data['TotalPaymentMade']) + float(NewObj['TotalPaymentMade'])
		
		#Calculate Average
		AvgInterestRate 	= TotInterestRate / NumberOfLoan if NumberOfLoan > 0 else float(0)
		AvgInitialAdvance 	= TotInitialAdvance / NumberOfLoan if NumberOfLoan > 0 else float(0)
		AvgExposure 		= PortfolioExposure / NumberOfLoan if NumberOfLoan > 0 else float(0)
		AvgOriginalTerm 	= TotOriginalTerm / NumberOfLoan if NumberOfLoan > 0 else float(0)
		AvgRemainingTerm 	= TotRemainingTerm/ NumberOfLoan if NumberOfLoan > 0 else float(0)
		AverageYield 		= TotPaymentMade / PortfolioExposure if PortfolioExposure > 0 else float(0)

		''' Update Dictionary for ALL Branches '''
		NewObj.update({
			'PortfolioExposure':		PortfolioExposure,
			'NumberOfLoan': 			NumberOfLoan,
			#Sum dictionary of loan outstanding and number filter by Product, Purpose, Condition
			'DicNumberByPro':			dict(Counter(Data['DicNumberByPro']) + Counter(NewObj['DicNumberByPro'])),
			'DicAmountByPro':			dict(Counter(Data['DicAmountByPro']) + Counter(NewObj['DicAmountByPro'])),
			'DicNumberByPur':			dict(Counter(Data['DicNumberByPur']) + Counter(NewObj['DicNumberByPur'])),
			'DicAmountByPur':			dict(Counter(Data['DicAmountByPur']) + Counter(NewObj['DicAmountByPur'])),
			'DicNumberByCon':			dict(Counter(Data['DicNumberByCon']) + Counter(NewObj['DicNumberByCon'])),
			'DicAmountByCon':			dict(Counter(Data['DicAmountByCon']) + Counter(NewObj['DicAmountByCon'])),
			#Average
			'WeightedInterestRate': 	AvgInterestRate,
			'WeightedInitialAdvance': 	AvgInitialAdvance,
			'WeightedExposure': 		AvgExposure,
			'WeightedOriginalTerm': 	AvgOriginalTerm,
			'WeightedRemainingTerm': 	AvgRemainingTerm,
			#Payment
			'TotalPaymentMade': 		TotPaymentMade,
			'Interest': 				float(Data['Interest']) + float(NewObj['Interest']),
			'Principal': 				float(Data['Principal']) + float(NewObj['Principal']),
			'Charge': 					float(Data['Charge']) + float(NewObj['Charge']),
			'AverageYield':				AverageYield
			})
	else:
		# If NewObj is empty, set NewObj to Data
		NewObj = Data
	return NewObj

def appendDicToList(QueryObj):
	''' 
		Using Algorithm to get SubTotal
		===============================
		1. QueryObj contains a list of query result from MKT_PORTFOLIO_SUMMARY
		2. If BankDate of items are the same: sum dictionary (item.Data)
		3. Else, set NewObj = item.Data
		4. Append new sum Dictionary to a ListResult
	'''
	LastBankDate 	= ''
	NewObj 			= {}
	ListDicObj 		= {}
	for item in QueryObj:
		SysBankDate 	= item.BankDate
		if SysBankDate == LastBankDate or LastBankDate == '':
			NewObj = sumDictionary(item.Data, NewObj)
		else:
			NewObj = eval(item.Data)
		ListDicObj.update({item.BankDate:NewObj})
		LastBankDate = SysBankDate

	''' Append dictonary in ListDicObj to ListResult '''
	ListResult 		= []
	for key in ListDicObj:
		ListResult.append(ListDicObj[key])
	return ListResult