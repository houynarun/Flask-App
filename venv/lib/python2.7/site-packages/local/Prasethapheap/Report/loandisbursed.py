from app.mktcore.imports 			import *
from app.tools.mktcustomreport		import *
import app.tools.mktdate		as mktdate
from app.LoanContract.models 		import *
from app.Customer.models 			import *
from app.Province.models 		import *
from app.District.models 		import *
from app.Commune.models 		import *
from app.Village.models 		import *
from app.Sector.models	        import *
from app.ScheduleDefine.models  import *
from app.LoanProduct.models 	import *
import app.tools.mktmoney 		as mktmoney
from app.Currency.models 		import *
import app.tools.mktsetting 	as mktsetting
import app.tools.user 			as mktuser

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	def loadSector():  #define function 
		return MKT_SECTOR.query # tablename.query
	def loadCurrency():
		return MKT_CURRENCY.query
	def loadProvince():
		return MKT_PROVINCE.query
	Branch 			=   TextField("Branch")
	Currency        =   QuerySelectField('Currency',
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=True,
							blank_text=u'ALL',
						)
	Sector 			= 	QuerySelectField('Sector',
							query_factory=loadSector,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'ALL',
						)
	LoanType        =   SelectField('Loan Type',
	                            choices=[
	                                     ('ALL','ALL'),
	                                     ('1','Group Loan'),
	                                     ('2','Individual')
	                                     ],
	                            coerce=str)
	ClientZone      =   SelectField('Client Zone',
	                            choices=[
	                                     ('ALL','ALL'),
	                                     ('0','Urban'),
	                                     ('1','Semi-Urban'),
	                                     ('2','Rural Area'),
	                                     ('3','Remote Area')
	                                     ],
	                            coerce=str)
	Province        =   QuerySelectField('Province',
							query_factory=loadProvince,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'ALL',
						)
@app.route('/Morakot/Report/Prasethpheap/LoanDisbursed', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDisbursed():
	""" Route to view each report """
	try:		
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		Currency 		=	request.args.get("Currency") if "Currency" in request.args else "__None"
		Sector 			=	request.args.get("Sector") if "Sector" in request.args else ""
		LoanType 		=	request.args.get("LoanType") if "LoanType" in request.args else ""
		ClientZone 		=	request.args.get("ClientZone") if "ClientZone" in request.args else ""
		Province 		= 	request.args.get("Province") if "Province" in request.args else ""
		Result 			=	getDisbursedReport(Branch=Branch,Currency=Currency,Sector=Sector,LoanType=LoanType,ClientZone=ClientZone,Province=Province)
		Parameters 		= 	{"Branch": Branch,"Currency":Currency,"Sector":Sector,"LoanType":LoanType,"Province":Province}
		FilterOption 	=	""

		SearchForm      =   FRM_CUSTOM_REPORT_SEARCH_EX()

		return CUSTOM_REPORT.getCustomReportTemplate(Parameters     =   Parameters,
													Result          =   Result,
													FilterOption    =   FilterOption,
													SearchForm      =   SearchForm
													)	
	except:
		raise

@app.route('/Morakot/Report/Prasethpheap/LoanDisbursed/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDisbursedExport():
	""" Route to view each report """
	try:
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		Currency 		=	request.args.get("Currency") if "Currency" in request.args else "__None" 
		Sector 			=	request.args.get("Sector") if "Sector" in request.args else ""
		LoanType 		=	request.args.get("LoanType") if "LoanType" in request.args else ""
		ClientZone 		=	request.args.get("ClientZone") if "ClientZone" in request.args else ""
		Province 		=	request.args.get("Province") if "Province" in request.args else ""
		Result 			=	getDisbursedReport(Branch=Branch,Currency=Currency,Sector=Sector,LoanType=LoanType,ClientZone=ClientZone,Province=Province)
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="LoanDisbursedReport")
		return response
	except Exception as e:
		raise

def getDisbursedReport(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch") if kwargs else "ALL"
		Currency 		= 	kwargs.get("Currency") if kwargs else "ALL"
		Sector 			= 	kwargs.get("Sector")
		LoanType 		= 	kwargs.get("LoanType")
		ClientZone 		= 	kwargs.get("ClientZone")
		Province 		= 	kwargs.get("Province")
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Disbursed and Portfolio Report"})
		ReportHeader.update({"Parameters": kwargs})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Loan ID', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Customer Name', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Gender', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Province', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'District', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Commune ', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Village', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Currency ', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Loan Size Amount', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Disbursed Amount', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Outstanding Amount', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Loan Product ', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="M")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Customer Type', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="N")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Repayment Mode', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="O")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Term', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="P")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Cycle', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="Q")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Sector', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="R")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Client Type', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="S")

		Data = getRecordRow(**kwargs)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise
def getRecordRowObj(**kwargs):
	Branch 				= 	kwargs.get("Branch")
	Currency 			= 	kwargs.get("Currency")
	Sector 				= 	kwargs.get("Sector")
	LoanType 			= 	kwargs.get("LoanType")
	ClientZone 			= 	kwargs.get("ClientZone")
	Province 			= 	kwargs.get("Province")
	OutstandingAmount 	= 	0
	NumberOfLoan 		= 	0
	DisbursedAmount 	= 	0
	SubTotalDic 		= 	{}
	SubTotalDicKHR 		= 	{}
	SubTotalDicUSD  	= 	{}
	LoanDisbursedGrandTotal 	= 0
	OutstandingGrandTotalUSD 	= 0
	OutstandingGrandTotalKHR 	= 0
	LoanDisbursedGrandTotalKHR 	= 0
	LoanDisbursedGrandTotalUSD 	= 0
	NumOfLoanGrandTotal 		= 0
	GroupLoanAppSetting = 	mktsetting.getAppSetting('PF_GROUP_LOAN_ID')
	QueryObj 			= 	db.session.query(MKT_LOAN_CONTRACT.Branch,
											 MKT_LOAN_CONTRACT.ID,
											 MKT_LOAN_CONTRACT.ContractCustomerID,
											 MKT_LOAN_CONTRACT.Currency,
											 MKT_LOAN_CONTRACT.Disbursed,
											 MKT_LOAN_CONTRACT.OutstandingAmount,
											 MKT_LOAN_CONTRACT.LoanProduct,
											 MKT_LOAN_CONTRACT.Term,
											 MKT_LOAN_CONTRACT.Cycle,
											 MKT_LOAN_CONTRACT.Sector,
											 MKT_LOAN_CONTRACT.ClientZone,
											 MKT_CUSTOMER.Province,
											 MKT_CUSTOMER.District,
											 MKT_CUSTOMER.Commune,
											 MKT_CUSTOMER.Village,
											 MKT_CUSTOMER.FirstNameEn,
											 MKT_CUSTOMER.LastNameEn,
											 MKT_CUSTOMER.Gender,
											 ).\
											join(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
											filter(MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
											filter(or_(and_(MKT_LOAN_CONTRACT.Disbursed >= 100, MKT_LOAN_CONTRACT.Disbursed <= 1000,MKT_LOAN_CONTRACT.Currency=='USD')
													  ,and_(MKT_LOAN_CONTRACT.Disbursed >= 1001, MKT_LOAN_CONTRACT.Disbursed <= 5000,MKT_LOAN_CONTRACT.Currency=='USD')
													  ,and_(MKT_LOAN_CONTRACT.Disbursed >= 5001, MKT_LOAN_CONTRACT.Disbursed <= 10000,MKT_LOAN_CONTRACT.Currency=='USD')
													  ,and_(MKT_LOAN_CONTRACT.Disbursed >= 10001, MKT_LOAN_CONTRACT.Disbursed <= 50000,MKT_LOAN_CONTRACT.Currency=='USD')
													  ,and_(MKT_LOAN_CONTRACT.Disbursed >= 400000, MKT_LOAN_CONTRACT.Disbursed <= 4000000,MKT_LOAN_CONTRACT.Currency=='KHR')
													  ,and_(MKT_LOAN_CONTRACT.Disbursed > 4000000, MKT_LOAN_CONTRACT.Disbursed <= 20000000,MKT_LOAN_CONTRACT.Currency=='KHR')
													  ,and_(MKT_LOAN_CONTRACT.Disbursed > 20000000, MKT_LOAN_CONTRACT.Disbursed <= 40000000,MKT_LOAN_CONTRACT.Currency=='KHR')
													  ,and_(MKT_LOAN_CONTRACT.Disbursed >= 40000000, MKT_LOAN_CONTRACT.Disbursed <= 200000000,MKT_LOAN_CONTRACT.Currency=='KHR')
													  )).\
											order_by(MKT_LOAN_CONTRACT.Branch,MKT_LOAN_CONTRACT.Currency,MKT_LOAN_CONTRACT.Disbursed)
	if Branch:
		Branch  = Branch.split()
		QueryObj	 	= QueryObj if 'ALL' in Branch else QueryObj.\
							 				filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))
	if Currency:
		QueryObj	 	= QueryObj if Currency == '__None' else QueryObj.\
							 				filter(MKT_LOAN_CONTRACT.Currency==Currency)
	if Sector:
		Sector  	= Sector.split()
		QueryObj	= QueryObj if '__None' in Sector else QueryObj.\
							 				filter(MKT_LOAN_CONTRACT.Sector.in_(Sector))
	if LoanType:
		if LoanType == '1':
			QueryObj	 	= QueryObj.filter(MKT_LOAN_CONTRACT.LoanProduct==GroupLoanAppSetting)
		elif LoanType == '2':
			QueryObj	 	= QueryObj.filter(~(MKT_LOAN_CONTRACT.LoanProduct ==GroupLoanAppSetting))
		else:
			QueryObj	 	= QueryObj
	if ClientZone:
		ClientZone  	= ClientZone.split()
		QueryObj	 	= QueryObj if 'ALL' in ClientZone else QueryObj.\
							 				filter(MKT_LOAN_CONTRACT.ClientZone.in_(ClientZone))
	if Province:
		Province  		= Province.split()
		QueryObj	 	= QueryObj if '__None' in Province else QueryObj.\
							 				filter(MKT_CUSTOMER.Province.in_(Province))
	if QueryObj:
		BranchObj 		= QueryObj.first()
		if BranchObj:
			FirstBranch = BranchObj.Branch
		CurrencyObj 	= QueryObj.first()
		if CurrencyObj:
			FirstCurrency 	= CurrencyObj.Currency
		for row in QueryObj:
			if FirstBranch != row.Branch:
				OutstandingAmount = 0
				DisbursedAmount   = 0
				NumberOfLoan 	  = 0
			if FirstCurrency != row.Currency:
				OutstandingAmount = 0
				DisbursedAmount   = 0
				NumberOfLoan 	  = 0
			if Currency == '__None':
				if row.Currency == 'KHR':
					OutstandingAmount += row.OutstandingAmount
					DisbursedAmount   += row.Disbursed
					NumberOfLoan  	  += 1
					NumOfLoanGrandTotal +=1
					OutstandingGrandTotalKHR += row.OutstandingAmount
					LoanDisbursedGrandTotalKHR += row.Disbursed
					SubTotalDic.update({row.Branch:{'KHR':{'OutstandingAmount':OutstandingAmount,
														   'DisbursedAmount':DisbursedAmount,
														   'NumberOfLoan':NumberOfLoan,
														   'NumOfLoanGrandTotal':NumOfLoanGrandTotal,
														   'OutstandingGrandTotalKHR':OutstandingGrandTotalKHR,
														   'LoanDisbursedGrandTotalKHR':LoanDisbursedGrandTotalKHR}}})
				elif row.Currency == 'USD':
					OutstandingAmount += row.OutstandingAmount
					DisbursedAmount   += row.Disbursed
					NumberOfLoan  	  += 1
					NumOfLoanGrandTotal += 1
					OutstandingGrandTotalUSD += row.OutstandingAmount
					LoanDisbursedGrandTotalUSD += row.Disbursed
					SubTotalDicUSD.update({row.Branch:{'USD':{'OutstandingAmount':OutstandingAmount,
														      'DisbursedAmount':DisbursedAmount,
														      'NumberOfLoan':NumberOfLoan,
														      'NumOfLoanGrandTotal':NumOfLoanGrandTotal,
														      'OutstandingGrandTotalUSD':OutstandingGrandTotalUSD,
														      'LoanDisbursedGrandTotalUSD':LoanDisbursedGrandTotalUSD}}})
					SubTotalDic[row.Branch].update(SubTotalDicUSD[row.Branch]) if row.Branch in SubTotalDic.keys() else SubTotalDic.update(SubTotalDicUSD)
			if Currency == 'KHR':
				OutstandingAmount += row.OutstandingAmount
				DisbursedAmount   += row.Disbursed
				NumberOfLoan  	  += 1
				NumOfLoanGrandTotal += 1
				OutstandingGrandTotalKHR += row.OutstandingAmount
				LoanDisbursedGrandTotalKHR += row.Disbursed
				SubTotalDic.update({row.Branch:{'KHR':{'OutstandingAmount':OutstandingAmount,
													   'DisbursedAmount':DisbursedAmount,
													   'NumberOfLoan':NumberOfLoan,
													   'NumOfLoanGrandTotal':NumOfLoanGrandTotal,
													   'OutstandingGrandTotalKHR':OutstandingGrandTotalKHR,
													   'LoanDisbursedGrandTotalKHR':LoanDisbursedGrandTotalKHR}}})
			if Currency == 'USD':
				OutstandingAmount += row.OutstandingAmount
				DisbursedAmount   += row.Disbursed
				NumberOfLoan  	  += 1
				NumOfLoanGrandTotal += 1
				OutstandingGrandTotalUSD += row.OutstandingAmount
				LoanDisbursedGrandTotalUSD += row.Disbursed
				SubTotalDic.update({row.Branch:{'USD':{'OutstandingAmount':OutstandingAmount,
													   'DisbursedAmount':DisbursedAmount,
													   'NumberOfLoan':NumberOfLoan,
													   'NumOfLoanGrandTotal':NumOfLoanGrandTotal,
													   'OutstandingGrandTotalUSD':OutstandingGrandTotalUSD,
													   'LoanDisbursedGrandTotalUSD':LoanDisbursedGrandTotalUSD}}})
			FirstBranch 	= row.Branch
			FirstCurrency 	= row.Currency
	return QueryObj,SubTotalDic

def getRepaymentObj(LoanID):
	RepaymentMode = ''
	RepaymentObj  = MKT_SCHED_DEFINE.query.filter(MKT_SCHED_DEFINE.ID == LoanID).first()
	if RepaymentObj:
		if RepaymentObj.RepMode == '1':
			if RepaymentObj.PrincipalFreq > 1:
				RepaymentMode = "Baloon"
			elif RepaymentObj.PrincipalFreq == 1:
				RepaymentMode = "Declining"
		else:
			RepaymentMode = "N/A"
	return RepaymentMode
def getClientZone(ClientZone):
	Zone     = ""
	if ClientZone == '0':
		Zone = "Urban"
	elif ClientZone == '1':
		Zone = "Semi-Urban"
	elif ClientZone == '2':
		Zone = "Rural Area"
	elif ClientZone == '3':
		Zone = "Remote Area"
	else:
		Zone = "N/A"
	return Zone
def getRecordRow(**kwargs):
	Branch 					= 	kwargs.get("Branch")
	Currency 				= 	kwargs.get("Currency")
	Sector 					= 	kwargs.get("Sector")
	LoanType 				= 	kwargs.get("LoanType")
	ClientZone 				= 	kwargs.get("ClientZone")
	Province 				= 	kwargs.get("Province")
	GroupLoanAppSetting 	= 	mktsetting.getAppSetting('PF_GROUP_LOAN_ID')
	RecordRow 				= 	[]
	NumberOfLoan 			=	0
	DisburseAmount 			=	0
	OutstandingAmount 		= 	0
	TotalNumberOfLoanUSD 	= 	0
	TotalNumberOfLoanKHR 	= 	0
	TotalDisbursedUSD 		= 	0
	TotalDisbursedKHR 		= 	0
	TotalOutstandingUSD  	= 	0
	TotalOutstandingKHR 	= 	0
	TotalNumberOfLoan 		=	0
	TotalDisbursed 			= 	0
	TotalOutstanding 		=	0	
	OutstandingGrandTotalKHR = 0
	OutstandingGrandTotalUSD = 0
	OutstandingGrandTotal 	 = 0
	LoanDisbursedGrandTotal  = 0
	NumOfLoanGrandTotal = 0
	if isFirstLoaded(**kwargs):
		QueryObj 		= 	getRecordRowObj(Branch=Branch,Currency=Currency,Sector=Sector,LoanType=LoanType,ClientZone=ClientZone,Province=Province)
		if QueryObj[0]:
			BranchObj = QueryObj[0].first()
			if BranchObj:
				PrevBranch = BranchObj.Branch
			CurrencyObj = QueryObj[0].first()
			if CurrencyObj:
				PrevCurrency = CurrencyObj.Currency
		ReportingRate = MKT_CURRENCY.query.get('KHR').ReportingRate
		BaseCurrency 		= 	mktsetting.getAccSetting().BaseCurrency
		if QueryObj:
			for index,row in enumerate(QueryObj[0].all()):
				CustomerName = row.LastNameEn + " " + row.FirstNameEn
				Province     = MKT_PROVINCE.query.get(row.Province)
				District 	 = MKT_DISTRICT.query.get(row.District)
				Commune 	 = MKT_COMMUNE.query.get(row.Commune)
				Village 	 = MKT_VILLAGE.query.get(row.Village)
				Sector 		 = MKT_SECTOR.query.get(row.Sector)
				ClientZone 	 = getClientZone(row.ClientZone)
				LoanProduct  = MKT_LOAN_PRODUCT.query.get(row.LoanProduct)
				RepaymentMode = getRepaymentObj(row.ID)
				if PrevBranch in QueryObj[1].keys():
					NumberOfLoan = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('NumberOfLoan',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					DisburseAmount = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('DisbursedAmount',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					OutstandingAmount = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('OutstandingAmount',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					TotalNumberOfLoanUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('NumberOfLoan',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					TotalNumberOfLoanKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('NumberOfLoan',0) if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					TotalDisbursedUSD = QueryObj[1].get(PrevBranch).get('USD',{}).get('DisbursedAmount',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					TotalDisbursedKHR = QueryObj[1].get(PrevBranch).get('KHR',{}).get('DisbursedAmount',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					TotalOutstandingUSD  = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('OutstandingAmount',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					TotalOutstandingKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('OutstandingAmount',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					TotalNumberOfLoan = TotalNumberOfLoanUSD + TotalNumberOfLoanKHR
					TotalDisbursed = TotalDisbursedUSD + TotalDisbursedKHR
					TotalOutstanding = TotalOutstandingUSD + TotalOutstandingKHR
					NumOfLoanGrandTotal = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('NumOfLoanGrandTotal',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					OutstandingGrandTotalKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('OutstandingGrandTotalKHR',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					OutstandingGrandTotalUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('OutstandingGrandTotalUSD',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					OutstandingGrandTotal  = OutstandingGrandTotalUSD + OutstandingGrandTotalKHR
					LoanDisbursedGrandTotalKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('LoanDisbursedGrandTotalKHR',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					LoanDisbursedGrandTotalUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('LoanDisbursedGrandTotalUSD',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					LoanDisbursedGrandTotal  = LoanDisbursedGrandTotalKHR + LoanDisbursedGrandTotalUSD
					
				if not PrevCurrency == row.Currency:
					RecordRow.append(({1: {"Value":"Total %s (%s)"%(PrevBranch,PrevCurrency)},
								   2: {"Value":NumberOfLoan},
								   3: {"Value":""},
								   4: {"Value":""},
								   5: {"Value":""},
								   6: {"Value":""},
								   7: {"Value":""},
								   8: {"Value":""},
								   9: {"Value":PrevCurrency},
								   10: {"Value":""},
								  11: {"Value":mktmoney.toMoney(float(DisburseAmount),mktmoney.getCurrencyObj(PrevCurrency))},
								  12: {"Value":mktmoney.toMoney(float(OutstandingAmount),mktmoney.getCurrencyObj(PrevCurrency))},
								  13: {"Value":""},
								  14: {"Value":""},
								  15: {"Value":""},
								  16: {"Value":""},
								  17: {"Value":""},
								  18: {"Value":""},
								  19: {"Value":""},
							 		},{"Class":"text-right text-bold","Style":""}))
				if not PrevBranch == row.Branch:
					RecordRow.append(({1: {"Value":"Total %s"%PrevBranch},
								   2: {"Value":TotalNumberOfLoan},
								   3: {"Value":""},
								   4: {"Value":""},
								   5: {"Value":""},
								   6: {"Value":""},
								   7: {"Value":""},
								   8: {"Value":""},
								   9: {"Value":BaseCurrency},
								  10: {"Value":""},
								  11: {"Value":mktmoney.toMoney(float(TotalDisbursed),mktmoney.getCurrencyObj(PrevCurrency))},
								  12: {"Value":mktmoney.toMoney(float(TotalOutstanding),mktmoney.getCurrencyObj(PrevCurrency))},
								  13: {"Value":""},
								  14: {"Value":""},
								  15: {"Value":""},
								  16: {"Value":""},
								  17: {"Value":""},
								  18: {"Value":""},
								  19: {"Value":""},
							 		},{"Class":"text-right text-bold","Style":""}))
				LoanSize  = ''
				if row.Currency == 'KHR':
					if 400000 <= row.Disbursed <= 4000000:
						LoanSize	= 	"400000- 4000000"
					elif 4000000 < row.Disbursed <= 20000000:
						LoanSize 	= "4000000 - 20000000"
					elif 20000000 < row.Disbursed <= 40000000:
						LoanSize 	= "20000000 - 40000000"
					elif 40000000 < row.Disbursed <= 200000000:
						LoanSize 	= "40000000 - 200000000"
				if row.Currency == 'USD':
					if 100 <= row.Disbursed <= 1000:
						LoanSize	= "100 - 1000"
					elif 1001 <= row.Disbursed <= 5000:
						LoanSize 	= "1001 - 5000"
					elif 5001 <= row.Disbursed <= 10000:
						LoanSize 	= "5001 - 10000"
					elif 10001 <= row.Disbursed <= 50000:
						LoanSize 	= "10001 - 50000"
				RecordRow.append(({1: {"Value":row.Branch},
						   2: {"Value":row.ID},
						   3: {"Value":CustomerName,"Class":"text-left"},
						   4: {"Value":row.Gender},
						   5: {"Value":Province.Description if Province else "N/A"},
						   6: {"Value":District.Description if District else "N/A"},
						   7: {"Value":Commune.Description if Commune else "N/A"},
						   8: {"Value":Village.Description if Village else "N/A"},
						   9: {"Value":row.Currency},
						  10: {"Value":LoanSize},
						  11: {"Value":mktmoney.toMoney(float(row.Disbursed),mktmoney.getCurrencyObj(row.Currency)),"Class":"text-right"},
						  12: {"Value":mktmoney.toMoney(float(row.OutstandingAmount),mktmoney.getCurrencyObj(row.Currency)),"Class":"text-right"},
						  13: {"Value":LoanProduct.Description if LoanProduct else "N/A"},
						  14: {"Value":"Group Loan" if row.LoanProduct == GroupLoanAppSetting else "Individual Loan"},
						  15: {"Value":RepaymentMode if RepaymentMode else "N/A"},
						  16: {"Value":row.Term},
						  17: {"Value":row.Cycle},
						  18: {"Value":Sector.Description if Sector else "N/A"},
						  19: {"Value":ClientZone},
						   },{"Style":""}))
				if index == len(QueryObj[0].all())-1:
					RecordRow.append(({1: {"Value":"Total %s (%s)"%(PrevBranch,PrevCurrency)},
							   2: {"Value":NumberOfLoan},
							   3: {"Value":""},
							   4: {"Value":""},
							   5: {"Value":""},
							   6: {"Value":""},
							   7: {"Value":""},
							   8: {"Value":""},
							   9: {"Value":PrevCurrency},
							  10: {"Value":""},
							  11: {"Value":mktmoney.toMoney(float(DisburseAmount),mktmoney.getCurrencyObj(PrevCurrency))},
							  12: {"Value":mktmoney.toMoney(float(OutstandingAmount),mktmoney.getCurrencyObj(PrevCurrency))},
							  13: {"Value":""},
							  14: {"Value":""},
							  15: {"Value":""},
							  16: {"Value":""},
							  17: {"Value":""},
							  18: {"Value":""},
							  19: {"Value":""},
							  	},{"Class":"text-right text-bold","Style":""}))
					RecordRow.append(({1: {"Value":"Total %s"%PrevBranch},
								   2: {"Value":TotalNumberOfLoan},
								   3: {"Value":""},
								   4: {"Value":""},
								   5: {"Value":""},
								   6: {"Value":""},
								   7: {"Value":""},
								   8: {"Value":""},
								   9: {"Value":BaseCurrency},
								  10: {"Value":""},
								  11: {"Value":mktmoney.toMoney(float(TotalDisbursed),mktmoney.getCurrencyObj(PrevCurrency))},
								  12: {"Value":mktmoney.toMoney(float(TotalOutstanding),mktmoney.getCurrencyObj(PrevCurrency))},
								  13: {"Value":""},
								  14: {"Value":""},
								  15: {"Value":""},
								  16: {"Value":""},
								  17: {"Value":""},
								  18: {"Value":""},
								  19: {"Value":""},
								  	},{"Class":"text-right text-bold","Style":""}))
					RecordRow.append(({1: {"Value":"Grand Total"},
								   2: {"Value":NumOfLoanGrandTotal},
								   3: {"Value":""},
								   4: {"Value":""},
								   5: {"Value":""},
								   6: {"Value":""},
								   7: {"Value":""},
								   8: {"Value":""},
								   9: {"Value":BaseCurrency},
								  10: {"Value":""},
								  11: {"Value":mktmoney.toMoney(float(LoanDisbursedGrandTotal),mktmoney.getCurrencyObj(PrevCurrency))},
								  12: {"Value":mktmoney.toMoney(float(OutstandingGrandTotal),mktmoney.getCurrencyObj(PrevCurrency))},
								  13: {"Value":""},
								  14: {"Value":""},
								  15: {"Value":""},
								  16: {"Value":""},
								  17: {"Value":""},
								  18: {"Value":""},
								  19: {"Value":""},
								  	},{"Class":"text-right text-bold","Style":""}))
				PrevBranch = row.Branch
				PrevCurrency = row.Currency

	RecordRow.append(({1: {"Value":""},
					   2: {"Value":""},
					   3: {"Value":""},
					   4: {"Value":""},
					   5: {"Value":""},
					   6: {"Value":""},
					   7: {"Value":""},
					   8: {"Value":""},
					   9: {"Value":""},
					  10: {"Value":""},
					  11: {"Value":""},
					  12: {"Value":""},
					  13: {"Value":""},
					  14: {"Value":""},
					  15: {"Value":""},
					  16: {"Value":""},
					  17: {"Value":""},
					  18: {"Value":""},
					  19: {"Value":""},
				},{"Class":"text-right text-bold","Style":""}))
	return RecordRow
def isFirstLoaded(**kwargs):
	# If it is first loanded, the bellow variables will None
	Branch 			= kwargs.get("Branch")
	Currency 		= 	kwargs.get("Currency")
	Sector 			= 	kwargs.get("Sector")
	LoanType 		= 	kwargs.get("LoanType")
	ClientZone 		= 	kwargs.get("ClientZone")
	Province 		= 	kwargs.get("Province")
	if (Branch or Currency or Sector or LoanType or ClientZone or Province) not in ['', None]:
		return True
	return False




