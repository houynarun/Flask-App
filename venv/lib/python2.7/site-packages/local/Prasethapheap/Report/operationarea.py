from app.mktcore.imports 			import *
from app.tools.mktcustomreport		import *
import app.tools.mktdate		as mktdate
from app.LoanContract.models 		import *
from app.Customer.models 			import *

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	Branch 			=   TextField("Branch")
@app.route('/Morakot/Report/Prasethapheap/OperationArea', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getArrears():
	""" Route to view each report """
	try:		
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else ""
		Result 			=	getArrearsReport(Branch=Branch)
		Parameters 		= 	{"Branch": Branch}
		FilterOption 	=	""

		SearchForm      =   FRM_CUSTOM_REPORT_SEARCH_EX()

		return CUSTOM_REPORT.getCustomReportTemplate(Parameters     =   Parameters,
													Result          =   Result,
													FilterOption    =   FilterOption,
													SearchForm      =   SearchForm
													)	
	except:
		raise

@app.route('/Morakot/Report/Prasethapheap/OperationArea/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getArrearsExport():
	""" Route to view each report """
	try:
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else ""  
		Result 			=	getArrearsReport(Branch=Branch)
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="OperationAreaReport")
		return response

	except Exception as e:
		raise

def getArrearsReport(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch")
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Operation Area Report"})
		ReportHeader.update({"Parameters": kwargs})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch Name', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'#Province', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'#District', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'#Commune', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'#Village', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		Data = getRecordRow(**kwargs)
		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }
		return Result
	except:
		raise

def getAreaObj(**kwargs):
	Branch 			 = 	kwargs.get("Branch")
	OperationAreaObj	 = 	db.session.query(MKT_LOAN_CONTRACT.Branch,
										func.count(distinct(MKT_CUSTOMER.Province)).label("Province"),
										func.count(distinct(MKT_CUSTOMER.District)).label("District"),
										func.count(distinct(MKT_CUSTOMER.Commune)).label("Commune"),
										func.count(distinct(MKT_CUSTOMER.Village)).label("Village")).\
									   join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
									   filter(MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
									   group_by(MKT_LOAN_CONTRACT.Branch)
	if Branch:
		Branch = Branch.split()
		OperationAreaObj	 	= OperationAreaObj if 'ALL' in Branch else OperationAreaObj.\
							 				filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))
	return OperationAreaObj

def getRecordRow(**kwargs):
	Branch 			= 	kwargs.get("Branch")
	ProductName 	= ""
	RecordRow = []
	ListHistID=[]
	if isFirstLoaded(**kwargs):
		AreaObj = getAreaObj(Branch=Branch)
		if AreaObj:
			for index,row in enumerate(AreaObj):
				BranchObj 	= 	MKT_BRANCH.query.get(row.Branch)
				RecordRow.append(({1: {"Value":index+1},
								   2: {"Value":BranchObj.Description},
								   3: {"Value":row.Province},
								   4: {"Value":row.District},
								   5: {"Value":row.Commune},
								   6: {"Value":row.Village},
								 },{"Class":"text-left","Style":""}))  
	RecordRow.append(({1: {"Value":""},
					   2: {"Value":""},
					   3: {"Value":""},
					   4: {"Value":""},
					   5: {"Value":""},
					   6: {"Value":""},
					 },{"Class":"text-right text-bold","Style":""}))
	return RecordRow
def isFirstLoaded(**kwargs):
	# If it is first loanded, the bellow variables will None
	Branch 			= kwargs.get("Branch")
	if (Branch) not in ['', None]:
		return True
	return False




