from app.mktcore.imports 			import *
from app.tools.mktcustomreport		import *
import app.tools.mktdate		as mktdate
from app.LoanContract.models 		import *
from app.Customer.models 			import *

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	Branch 			=   TextField("Branch")
	ReportedDate 	=	DateTextField("Reported Date")
@app.route('/Morakot/Report/Prasethapheap/Portfolio', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPortfolio():
	""" Route to view each report """
	try:		
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else ""
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else ""
		Result 			=	getPortfolioReport(Branch=Branch,ReportedDate=ReportedDate)
		Parameters 		= 	{"Branch": Branch,"ReportedDate":ReportedDate}
		FilterOption 	=	""

		SearchForm      =   FRM_CUSTOM_REPORT_SEARCH_EX()

		return CUSTOM_REPORT.getCustomReportTemplate(Parameters     =   Parameters,
													Result          =   Result,
													FilterOption    =   FilterOption,
													SearchForm      =   SearchForm
													)	
	except:
		raise

@app.route('/Morakot/Report/Prasethapheap/Portfolio/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPortfolioExport():
	""" Route to view each report """
	try:
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else "" 
		ReportedDate 	=	request.args.get("ReportedDate") if "ReportedDate" in request.args else "" 
		Result 			=	[]
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="ClosedLoansReport")

		return response

	except Exception as e:
		raise

def getPortfolioReport(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch")
		ReportedDate 	= 	kwargs.get("ReportedDate")
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Portfolio Report"})
		ReportHeader.update({"Parameters": kwargs})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Province', 
											Rowspan=0,Colspan=1,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'by Loan Size', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Amount', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Number of Clients', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'term & Cycle by clients', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Group by Clients ', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="K")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Individual by Client ', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="M")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Balloon by clients ', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="O")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Declining by clients', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="Q")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Sector by clients', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="S")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Product by clients ', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="U")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Arban by clients', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="W")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Semi-Arban by clients', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="Y")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Rural by clients', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="AA")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Remote by clients', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="AC")


		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'by Branch', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Male', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Female ', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="M")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="N")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="O")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="P")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="Q")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="R")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="S")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="T")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="U")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR ', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="V")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="W")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="X")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="Y")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="Z")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="AA")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="AB")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'USD', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="AC")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'KHR', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="AD")

		Data = getRecordRow(**kwargs)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getFirstRowObj(**kwargs):
	Branch 			= 	kwargs.get("Branch")
	Par1 			=	kwargs.get("Par1")
	Par2 			= 	kwargs.get("Par2")
	Par3 			= 	kwargs.get("Par3")
	#100-1000
	AmountCount 		= 	db.session.query(case([(
													(MKT_LOAN_CONTRACT.Cycle) == '1',
													(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
												)],
											else_=0
											).label('New'),
											 case([(
													(MKT_LOAN_CONTRACT.Cycle) > '1',
													(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
												)],
											else_=0
											).label('Exist'),).\
											join(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
											filter(MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
											filter(MKT_LOAN_CONTRACT.ApprovedAmount.between(Par1,Par2)).\
											group_by(MKT_LOAN_CONTRACT.Cycle).subquery()
	NumClientCount 		= 	db.session.query(
												case([(
													(MKT_CUSTOMER.Gender) == 'Male',
													(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
													)],
												else_=0
												).label('Male'),
												 case([(
														(MKT_CUSTOMER.Gender) == 'Female',
														(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
													)],
												else_=0
												).label('Female'),).\
											join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
											filter(MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
											filter(MKT_LOAN_CONTRACT.ApprovedAmount.between(Par1,Par2)).\
											group_by(MKT_CUSTOMER.Gender).subquery()
	UrbanCount 		= 	db.session.query(
											case([(
												(MKT_LOAN_CONTRACT.Currency) == 'USD',
												(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
												)],
											else_=0
											).label('UrbanUSD'),
											 case([(
													(MKT_LOAN_CONTRACT.Currency) == 'KHR',
													(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
												)],
											else_=0
											).label('UrbanKHR'),).\
											join(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
											filter(MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
											filter(MKT_LOAN_CONTRACT.ClientZone == '0').\
											filter(MKT_LOAN_CONTRACT.ApprovedAmount.between(Par1,Par2)).\
											group_by(MKT_LOAN_CONTRACT.Currency).subquery()	
	SemiUrbanCount 		= 	db.session.query(
											case([(
												(MKT_LOAN_CONTRACT.Currency) == 'USD',
												(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
												)],
											else_=0
											).label('SemiUrbanUSD'),
											 case([(
													(MKT_LOAN_CONTRACT.Currency) == 'KHR',
													(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
												)],
											else_=0
											).label('SemiUrbanKHR'),).\
											join(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
											filter(MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
											filter(MKT_LOAN_CONTRACT.ClientZone == '1').\
											filter(MKT_LOAN_CONTRACT.ApprovedAmount.between(Par1,Par2)).\
											group_by(MKT_LOAN_CONTRACT.Currency).subquery()
	RuralAreaCount 		= 	db.session.query(
											case([(
												(MKT_LOAN_CONTRACT.Currency) == 'USD',
												(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
												)],
											else_=0
											).label('RuralAreaUSD'),
											 case([(
													(MKT_LOAN_CONTRACT.Currency) == 'KHR',
													(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
												)],
											else_=0
											).label('RuralAreaKHR'),).\
											join(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
											filter(MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
											filter(MKT_LOAN_CONTRACT.ClientZone == '2').\
											filter(MKT_LOAN_CONTRACT.ApprovedAmount.between(Par1,Par2)).\
											group_by(MKT_LOAN_CONTRACT.Currency).subquery()
	RemoteAreaCount 	= 	db.session.query(
											case([(
												(MKT_LOAN_CONTRACT.Currency) == 'USD',
												(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
												)],
											else_=0
											).label('RemoteAreaUSD'),
											 case([(
													(MKT_LOAN_CONTRACT.Currency) == 'KHR',
													(func.count(MKT_LOAN_CONTRACT.ContractCustomerID))
												)],
											else_=0
											).label('RemoteAreaKHR'),).\
											join(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
											filter(MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
											filter(MKT_LOAN_CONTRACT.ClientZone == '3').\
											filter(MKT_LOAN_CONTRACT.ApprovedAmount.between(Par1,Par2)).\
											group_by(MKT_LOAN_CONTRACT.Currency).subquery()			
	
	NumClientCountSub 	= 	db.session.query(func.max(NumClientCount.c.Male).label("Male"),
											 func.max(NumClientCount.c.Female).label("Female")).subquery()
	AmountCountSub 		= 	db.session.query(func.max(AmountCount.c.New).label("New"),
											 func.max(AmountCount.c.Exist).label("Exist")).subquery()
	UrbanCountSub 		= 	db.session.query(func.max(UrbanCount.c.UrbanUSD).label("UrbanUSD"),
											 func.max(UrbanCount.c.UrbanKHR).label("UrbanKHR")).subquery()
	SemiUrbanCountSub 	= 	db.session.query(func.max(SemiUrbanCount.c.SemiUrbanUSD).label("SemiUrbanUSD"),
											 func.max(SemiUrbanCount.c.SemiUrbanKHR).label("SemiUrbanKHR")).subquery()
	RuralAreaCountSub 	= 	db.session.query(func.max(RuralAreaCount.c.RuralAreaUSD).label("RuralAreaUSD"),
											 func.max(RuralAreaCount.c.RuralAreaKHR).label("RuralAreaKHR")).subquery()
	RemoteAreaCountSub 	= 	db.session.query(func.max(RemoteAreaCount.c.RemoteAreaUSD).label("RemoteAreaUSD"),
											 func.max(RemoteAreaCount.c.RemoteAreaKHR).label("RemoteAreaKHR")).subquery()
	FirstRowObj 		= 	db.session.query(NumClientCountSub.c.Male,
											 NumClientCountSub.c.Female,
											 AmountCountSub.c.New,
											 AmountCountSub.c.Exist,
											 UrbanCountSub.c.UrbanUSD,
											 UrbanCountSub.c.UrbanKHR,
											 SemiUrbanCountSub.c.SemiUrbanUSD,
											 SemiUrbanCountSub.c.SemiUrbanKHR,
											 RuralAreaCountSub.c.RuralAreaUSD,
											 RuralAreaCountSub.c.RuralAreaKHR,
											 RemoteAreaCountSub.c.RemoteAreaUSD,
											 RemoteAreaCountSub.c.RemoteAreaKHR
											 ).all()
											
	return FirstRowObj

def getRecordRow(**kwargs):
	Branch 			= 	kwargs.get("Branch")
	ProductName 	= ""
	RecordRow = []
	ListHistID=[]
	ValueList 		= 	["100$-1,000$","1,001$-5,000$","5,001$-10,000$","10,001$-50,000$"]
	ValueList1 		= 	["100$-1,000$","1,001$-5,000$","5,001$-10,000$","10,001$-50,000$"]
	ValueList2 		= 	["100$-1,000$","1,001$-5,000$","5,001$-10,000$","10,001$-50,000$"]
	ValueList3 		= 	["100$-1,000$","1,001$-5,000$","5,001$-10,000$","10,001$-50,000$"]
	FirstRowObj 	= getFirstRowObj(Branch=Branch,Par1="100",Par2="1000")
	SecondRowObj 	= getFirstRowObj(Branch=Branch,Par1="1001",Par2="5000")
	ThirdRowObj 	= getFirstRowObj(Branch=Branch,Par1="5001",Par2="10000")
	FouthRowObj 	= getFirstRowObj(Branch=Branch,Par1="10001",Par2="50000")
	if isFirstLoaded(**kwargs):
		for index,row in enumerate(FirstRowObj):
			RecordRow.append(({1: {"Value":""},
						   2: {"Value":""},
						   3: {"Value":"100$-1,000$"},
						   4: {"Value":"400,000 - 4,000,000"},
						   5: {"Value":row.New if row.New else 0},
						   6: {"Value":row.Exist if row.Exist else 0},
						   7: {"Value":row.Male if row.Male else 0},
						   8: {"Value":row.Female if row.Female else 0},
						   9: {"Value":""},
						  10: {"Value":""},
						  11: {"Value":""},
						  12: {"Value":""},
						  13: {"Value":""},
						  14: {"Value":""},
						  15: {"Value":""},
						  16: {"Value":""},
						  17: {"Value":""},
						  18: {"Value":""},
						  19: {"Value":""},
						  20: {"Value":""},
						  21: {"Value":""},
						  22: {"Value":""},
						  23: {"Value":row.UrbanUSD if row.UrbanUSD else 0},
						  24: {"Value":row.UrbanKHR if row.UrbanKHR else 0},
						  25: {"Value":row.SemiUrbanUSD if row.SemiUrbanUSD else 0},
						  26: {"Value":row.SemiUrbanKHR if row.SemiUrbanKHR else 0},
						  27: {"Value":row.RuralAreaUSD if row.RuralAreaUSD else 0},
						  28: {"Value":row.RuralAreaKHR if row.RuralAreaKHR else 0},
						  29: {"Value":row.RemoteAreaUSD if row.RemoteAreaUSD else 0},
						  30: {"Value":row.RemoteAreaKHR if row.RemoteAreaKHR else 0},
						 },{"Class":"text-right text-bold","Style":""})) 
		for row in SecondRowObj:
			RecordRow.append(({1: {"Value":""},
						   2: {"Value":""},
						   3: {"Value":"1001$-5,000$"},
						   4: {"Value":">4,000,000- 20,000,000"},
						   5: {"Value":row.New if row.New else 0},
						   6: {"Value":row.Exist if row.Exist else 0},
						   7: {"Value":row.Male if row.Male else 0},
						   8: {"Value":row.Female if row.Female else 0},
						   9: {"Value":""},
						  10: {"Value":""},
						  11: {"Value":""},
						  12: {"Value":""},
						  13: {"Value":""},
						  14: {"Value":""},
						  15: {"Value":""},
						  16: {"Value":""},
						  17: {"Value":""},
						  18: {"Value":""},
						  19: {"Value":""},
						  20: {"Value":""},
						  21: {"Value":""},
						  22: {"Value":""},
						  23: {"Value":row.UrbanUSD if row.UrbanUSD else 0},
						  24: {"Value":row.UrbanKHR if row.UrbanKHR else 0},
						  25: {"Value":row.SemiUrbanUSD if row.SemiUrbanUSD else 0},
						  26: {"Value":row.SemiUrbanKHR if row.SemiUrbanKHR else 0},
						  27: {"Value":row.RuralAreaUSD if row.RuralAreaUSD else 0},
						  28: {"Value":row.RuralAreaKHR if row.RuralAreaKHR else 0},
						  29: {"Value":row.RemoteAreaUSD if row.RemoteAreaUSD else 0},
						  30: {"Value":row.RemoteAreaKHR if row.RemoteAreaKHR else 0},
						 },{"Class":"text-right text-bold","Style":""}))
		for row in ThirdRowObj:
			RecordRow.append(({1: {"Value":""},
						   2: {"Value":""},
						   3: {"Value":"5,001$-10,000$"},
						   4: {"Value":"> 20,000,000- 40,000,000"},
						   5: {"Value":row.New if row.New else 0},
						   6: {"Value":row.Exist if row.Exist else 0},
						   7: {"Value":row.Male if row.Male else 0},
						   8: {"Value":row.Female if row.Female else 0},
						   9: {"Value":""},
						  10: {"Value":""},
						  11: {"Value":""},
						  12: {"Value":""},
						  13: {"Value":""},
						  14: {"Value":""},
						  15: {"Value":""},
						  16: {"Value":""},
						  17: {"Value":""},
						  18: {"Value":""},
						  19: {"Value":""},
						  20: {"Value":""},
						  21: {"Value":""},
						  22: {"Value":""},
						  23: {"Value":row.UrbanUSD if row.UrbanUSD else 0},
						  24: {"Value":row.UrbanKHR if row.UrbanKHR else 0},
						  25: {"Value":row.SemiUrbanUSD if row.SemiUrbanUSD else 0},
						  26: {"Value":row.SemiUrbanKHR if row.SemiUrbanKHR else 0},
						  27: {"Value":row.RuralAreaUSD if row.RuralAreaUSD else 0},
						  28: {"Value":row.RuralAreaKHR if row.RuralAreaKHR else 0},
						  29: {"Value":row.RemoteAreaUSD if row.RemoteAreaUSD else 0},
						  30: {"Value":row.RemoteAreaKHR if row.RemoteAreaKHR else 0},
						 },{"Class":"text-right text-bold","Style":""}))
		for row in FouthRowObj:
			RecordRow.append(({1: {"Value":""},
						   2: {"Value":""},
						   3: {"Value":"10,001$-50,000$"},
						   4: {"Value":"> 40,000,000- 200,000,000"},
						   5: {"Value":row.New if row.New else 0},
						   6: {"Value":row.Exist if row.Exist else 0},
						   7: {"Value":row.Male if row.Male else 0},
						   8: {"Value":row.Female if row.Female else 0},
						   9: {"Value":""},
						  10: {"Value":""},
						  11: {"Value":""},
						  12: {"Value":""},
						  13: {"Value":""},
						  14: {"Value":""},
						  15: {"Value":""},
						  16: {"Value":""},
						  17: {"Value":""},
						  18: {"Value":""},
						  19: {"Value":""},
						  20: {"Value":""},
						  21: {"Value":""},
						  22: {"Value":""},
						  23: {"Value":row.UrbanUSD if row.UrbanUSD else 0},
						  24: {"Value":row.UrbanKHR if row.UrbanKHR else 0},
						  25: {"Value":row.SemiUrbanUSD if row.SemiUrbanUSD else 0},
						  26: {"Value":row.SemiUrbanKHR if row.SemiUrbanKHR else 0},
						  27: {"Value":row.RuralAreaUSD if row.RuralAreaUSD else 0},
						  28: {"Value":row.RuralAreaKHR if row.RuralAreaKHR else 0},
						  29: {"Value":row.RemoteAreaUSD if row.RemoteAreaUSD else 0},
						  30: {"Value":row.RemoteAreaKHR if row.RemoteAreaKHR else 0},
						 },{"Class":"text-right text-bold","Style":""}))  
	RecordRow.append(({1: {"Value":"No"},
									   2: {"Value":"District"},
									   3: {"Value":"by Loan Size","Style":"colspan:2"},
									   4: {"Value":""},
									   5: {"Value":"Amount"},
									   6: {"Value":""},
									   7: {"Value":"Number of Clients"},
									   8: {"Value":""},
									   9: {"Value":"term & Cycle by clients"},
									  10: {"Value":""},
									  11: {"Value":"Group by Clients"},
									  12: {"Value":""},
									  13: {"Value":"Individual by Client"},
									  14: {"Value":""},
									  15: {"Value":"Balloon by Clients"},
									  16: {"Value":""},
									  17: {"Value":"Declining by clients"},
									  18: {"Value":""},
									  19: {"Value":"Sector by clients"},
									  20: {"Value":""},
									  21: {"Value":"Product by clients"},
									  22: {"Value":""},
									  23: {"Value":"Arban by clients"},
									  24: {"Value":""},
									  25: {"Value":"Semi-Arban by clients"},
									  26: {"Value":""},
									  27: {"Value":"Rural by clients"},
									  28: {"Value":""},
									  29: {"Value":"Remote by clients"},
									  30: {"Value":""},
									 },{"Class":"text-right text-bold","Style":""}))
	RecordRow.append(({1: {"Value":""},
									   2: {"Value":""},
									   3: {"Value":"USD"},
									   4: {"Value":"KHR"},
									   5: {"Value":"USD"},
									   6: {"Value":"KHR"},
									   7: {"Value":"Male"},
									   8: {"Value":"Female"},
									   9: {"Value":"USD"},
									  10: {"Value":"KHR"},
									  11: {"Value":"USD"},
									  12: {"Value":"KHR"},
									  13: {"Value":"USD"},
									  14: {"Value":"KHR"},
									  15: {"Value":"USD"},
									  16: {"Value":"KHR"},
									  17: {"Value":"USD"},
									  18: {"Value":"KHR"},
									  19: {"Value":"USD"},
									  20: {"Value":"KHR"},
									  21: {"Value":"USD"},
									  22: {"Value":"KHR"},
									  23: {"Value":"USD"},
									  24: {"Value":"KHR"},
									  25: {"Value":"USD"},
									  26: {"Value":"KHR"},
									  27: {"Value":"USD"},
									  28: {"Value":"KHR"},
									  29: {"Value":"USD"},
									  30: {"Value":"KHR"},
									 },{"Class":"text-right text-bold","Style":""}))
	for row in ValueList1:
		RecordRow.append(({1: {"Value":""},
									   2: {"Value":""},
									   3: {"Value":row},
									   4: {"Value":""},
									   5: {"Value":""},
									   6: {"Value":""},
									   7: {"Value":""},
									   8: {"Value":""},
									   9: {"Value":""},
									  10: {"Value":""},
									  11: {"Value":""},
									  12: {"Value":""},
									  13: {"Value":""},
									  14: {"Value":""},
									  15: {"Value":""},
									  16: {"Value":""},
									  17: {"Value":""},
									  18: {"Value":""},
									  19: {"Value":""},
									  20: {"Value":""},
									  21: {"Value":""},
									  22: {"Value":""},
									  23: {"Value":""},
									  24: {"Value":""},
									  25: {"Value":""},
									  26: {"Value":""},
									  27: {"Value":""},
									  28: {"Value":""},
									  29: {"Value":""},
									  30: {"Value":""},
									 },{"Class":"text-right text-bold","Style":""})) 
	RecordRow.append(({1: {"Value":"No"},
									   2: {"Value":"Communce"},
									   3: {"Value":"by Loan Size","Style":"colspan:2"},
									   4: {"Value":""},
									   5: {"Value":"Amount"},
									   6: {"Value":""},
									   7: {"Value":"Number of Clients"},
									   8: {"Value":""},
									   9: {"Value":"term & Cycle by clients"},
									  10: {"Value":""},
									  11: {"Value":"Group by Clients"},
									  12: {"Value":""},
									  13: {"Value":"Individual by Client"},
									  14: {"Value":""},
									  15: {"Value":"Balloon by Clients"},
									  16: {"Value":""},
									  17: {"Value":"Declining by clients"},
									  18: {"Value":""},
									  19: {"Value":"Sector by clients"},
									  20: {"Value":""},
									  21: {"Value":"Product by clients"},
									  22: {"Value":""},
									  23: {"Value":"Arban by clients"},
									  24: {"Value":""},
									  25: {"Value":"Semi-Arban by clients"},
									  26: {"Value":""},
									  27: {"Value":"Rural by clients"},
									  28: {"Value":""},
									  29: {"Value":"Remote by clients"},
									  30: {"Value":""},
									 },{"Class":"text-right text-bold","Style":""}))
	RecordRow.append(({1: {"Value":""},
									   2: {"Value":""},
									   3: {"Value":"USD"},
									   4: {"Value":"KHR"},
									   5: {"Value":"USD"},
									   6: {"Value":"KHR"},
									   7: {"Value":"Male"},
									   8: {"Value":"Female"},
									   9: {"Value":"USD"},
									  10: {"Value":"KHR"},
									  11: {"Value":"USD"},
									  12: {"Value":"KHR"},
									  13: {"Value":"USD"},
									  14: {"Value":"KHR"},
									  15: {"Value":"USD"},
									  16: {"Value":"KHR"},
									  17: {"Value":"USD"},
									  18: {"Value":"KHR"},
									  19: {"Value":"USD"},
									  20: {"Value":"KHR"},
									  21: {"Value":"USD"},
									  22: {"Value":"KHR"},
									  23: {"Value":"USD"},
									  24: {"Value":"KHR"},
									  25: {"Value":"USD"},
									  26: {"Value":"KHR"},
									  27: {"Value":"USD"},
									  28: {"Value":"KHR"},
									  29: {"Value":"USD"},
									  30: {"Value":"KHR"},
									 },{"Class":"text-right text-bold","Style":""}))
	for row in ValueList2:
		RecordRow.append(({1: {"Value":""},
									   2: {"Value":""},
									   3: {"Value":row},
									   4: {"Value":""},
									   5: {"Value":""},
									   6: {"Value":""},
									   7: {"Value":""},
									   8: {"Value":""},
									   9: {"Value":""},
									  10: {"Value":""},
									  11: {"Value":""},
									  12: {"Value":""},
									  13: {"Value":""},
									  14: {"Value":""},
									  15: {"Value":""},
									  16: {"Value":""},
									  17: {"Value":""},
									  18: {"Value":""},
									  19: {"Value":""},
									  20: {"Value":""},
									  21: {"Value":""},
									  22: {"Value":""},
									  23: {"Value":""},
									  24: {"Value":""},
									  25: {"Value":""},
									  26: {"Value":""},
									  27: {"Value":""},
									  28: {"Value":""},
									  29: {"Value":""},
									  30: {"Value":""},
									 },{"Class":"text-right text-bold","Style":""})) 
	RecordRow.append(({1: {"Value":"No"},
									   2: {"Value":"Village"},
									   3: {"Value":"by Loan Size","Style":"colspan:2"},
									   4: {"Value":""},
									   5: {"Value":"Amount"},
									   6: {"Value":""},
									   7: {"Value":"Number of Clients"},
									   8: {"Value":""},
									   9: {"Value":"term & Cycle by clients"},
									  10: {"Value":""},
									  11: {"Value":"Group by Clients"},
									  12: {"Value":""},
									  13: {"Value":"Individual by Client"},
									  14: {"Value":""},
									  15: {"Value":"Balloon by Clients"},
									  16: {"Value":""},
									  17: {"Value":"Declining by clients"},
									  18: {"Value":""},
									  19: {"Value":"Sector by clients"},
									  20: {"Value":""},
									  21: {"Value":"Product by clients"},
									  22: {"Value":""},
									  23: {"Value":"Arban by clients"},
									  24: {"Value":""},
									  25: {"Value":"Semi-Arban by clients"},
									  26: {"Value":""},
									  27: {"Value":"Rural by clients"},
									  28: {"Value":""},
									  29: {"Value":"Remote by clients"},
									  30: {"Value":""},
									 },{"Class":"text-right text-bold","Style":""}))
	RecordRow.append(({1: {"Value":""},
									   2: {"Value":""},
									   3: {"Value":"USD"},
									   4: {"Value":"KHR"},
									   5: {"Value":"USD"},
									   6: {"Value":"KHR"},
									   7: {"Value":"Male"},
									   8: {"Value":"Female"},
									   9: {"Value":"USD"},
									  10: {"Value":"KHR"},
									  11: {"Value":"USD"},
									  12: {"Value":"KHR"},
									  13: {"Value":"USD"},
									  14: {"Value":"KHR"},
									  15: {"Value":"USD"},
									  16: {"Value":"KHR"},
									  17: {"Value":"USD"},
									  18: {"Value":"KHR"},
									  19: {"Value":"USD"},
									  20: {"Value":"KHR"},
									  21: {"Value":"USD"},
									  22: {"Value":"KHR"},
									  23: {"Value":"USD"},
									  24: {"Value":"KHR"},
									  25: {"Value":"USD"},
									  26: {"Value":"KHR"},
									  27: {"Value":"USD"},
									  28: {"Value":"KHR"},
									  29: {"Value":"USD"},
									  30: {"Value":"KHR"},
									 },{"Class":"text-right text-bold","Style":""}))
	for row in ValueList3:
		RecordRow.append(({1: {"Value":""},
									   2: {"Value":""},
									   3: {"Value":row},
									   4: {"Value":""},
									   5: {"Value":""},
									   6: {"Value":""},
									   7: {"Value":""},
									   8: {"Value":""},
									   9: {"Value":""},
									  10: {"Value":""},
									  11: {"Value":""},
									  12: {"Value":""},
									  13: {"Value":""},
									  14: {"Value":""},
									  15: {"Value":""},
									  16: {"Value":""},
									  17: {"Value":""},
									  18: {"Value":""},
									  19: {"Value":""},
									  20: {"Value":""},
									  21: {"Value":""},
									  22: {"Value":""},
									  23: {"Value":""},
									  24: {"Value":""},
									  25: {"Value":""},
									  26: {"Value":""},
									  27: {"Value":""},
									  28: {"Value":""},
									  29: {"Value":""},
									  30: {"Value":""},
									 },{"Class":"text-right text-bold","Style":""})) 
	return RecordRow
def isFirstLoaded(**kwargs):
	# If it is first loanded, the bellow variables will None
	Branch 			= kwargs.get("Branch")
	ReportedDate 	= kwargs.get("ReportedDate")

	if (Branch,ReportedDate) not in ['', None]:
		return True
	return False




