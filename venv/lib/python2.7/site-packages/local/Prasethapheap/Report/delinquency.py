from app.mktcore.imports 			import *
from app.tools.mktcustomreport		import *
import app.tools.mktdate		as mktdate
from app.LoanContract.models 		import *
from app.Customer.models 			import *
from app.Province.models 		import *
from app.District.models 		import *
from app.Commune.models 		import *
from app.Village.models 		import *
from app.Sector.models	        import *
from app.ScheduleDefine.models  import *
from app.PD.models 				import *
from app.LoanProduct.models 	import *
from app.Currency.models 		import *
import app.tools.mktpdcollection  as mktpdcollection
import app.tools.user 			as mktuser

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	def loadSector():  #define function 
		return MKT_SECTOR.query # tablename.query
	def loadCurrency():
		return MKT_CURRENCY.query
	def loadProvince():
		return MKT_PROVINCE.query
	Branch 			=   TextField("Branch")
	Currency        =   QuerySelectField('Currency',
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=True,
							blank_text=u'ALL',
						)
	Sector 		= 	QuerySelectField('Sector',
							query_factory=loadSector,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'ALL',
						)
	LoanType        =   SelectField('Loan Type',
	                            choices=[
	                                     ('ALL','ALL'),
	                                     ('1','Group Loan'),
	                                     ('2','Individual')
	                                     ],
	                            coerce=str)
	ClientZone        =   SelectField('Client Zone',
	                            choices=[
	                                     ('ALL','ALL'),
	                                     ('0','Urban'),
	                                     ('1','Semi-Urban'),
	                                     ('2','Rural Area'),
	                                     ('3','Remote Area')
	                                     ],
	                            coerce=str)
	Province        =   QuerySelectField('Province',
							query_factory=loadProvince,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'ALL',
						)
@app.route('/Morakot/Report/Prasethpheap/Delinquency', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDelinquency():
	""" Route to view each report """
	try:		
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		Currency 		=	request.args.get("Currency") if "Currency" in request.args else "__None"
		Sector 			=	request.args.get("Sector") if "Sector" in request.args else ""
		LoanType 		=	request.args.get("LoanType") if "LoanType" in request.args else ""
		ClientZone 		=	request.args.get("ClientZone") if "ClientZone" in request.args else ""
		Province 		=	request.args.get("Province") if "Province" in request.args else ""
		Result 			=	getDelinquencyReport(Branch=Branch,Currency=Currency,Sector=Sector,LoanType=LoanType,ClientZone=ClientZone,Province=Province)
		Parameters 		= 	{"Branch": Branch,"Currency":Currency,"Sector":Sector,"LoanType":LoanType,"ClientZone":ClientZone,"Province":Province}
		FilterOption 	=	""

		SearchForm      =   FRM_CUSTOM_REPORT_SEARCH_EX()

		return CUSTOM_REPORT.getCustomReportTemplate(Parameters     =   Parameters,
													Result          =   Result,
													FilterOption    =   FilterOption,
													SearchForm      =   SearchForm
													)	
	except:
		raise

@app.route('/Morakot/Report/Prasethpheap/Delinquency/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDelinquencyExport():
	""" Route to view each report """
	try:
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		Currency 		=	request.args.get("Currency") if "Currency" in request.args else "__None" 
		Sector 			=	request.args.get("Sector") if "Sector" in request.args else ""
		LoanType 		=	request.args.get("LoanType") if "LoanType" in request.args else ""
		ClientZone 		=	request.args.get("ClientZone") if "ClientZone" in request.args else ""
		Province 		=	request.args.get("Province") if "Province" in request.args else ""
		Result 			=	getDelinquencyReport(Branch=Branch,Currency=Currency,Sector=Sector,LoanType=LoanType,ClientZone=ClientZone,Province=Province)
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="DelinquencyandPARReport")

		return response

	except Exception as e:
		raise

def getDelinquencyReport(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch")
		Currency 		= 	kwargs.get("Currency")
		Sector 			= 	kwargs.get("Sector")
		LoanType 		= 	kwargs.get("LoanType")
		ClientZone 		= 	kwargs.get("ClientZone")
		Province 		= 	kwargs.get("Province")
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Delinquency and PARs Report"})
		ReportHeader.update({"Parameters": kwargs})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Loan ID', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Customer Name', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Gender', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Province', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'District', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Commune ', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Village ', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Currency ', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Outstanding Amount', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Loan Balance ', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Total Arrears', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'PR Due', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="M")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'IN Due', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="N")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'PE Due', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="O")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'CH Due', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="P")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Days', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="Q")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Day Due', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="R")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Loan Product', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="S")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'> 1 Year', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="T")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Repayment Mode', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="U")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Sector', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="V")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Client Type', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="W")

		Data = getRecordRow(**kwargs)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise
def getRecordRowObj(**kwargs):
	Branch 			= 	kwargs.get("Branch")
	Currency 		= 	kwargs.get("Currency")
	Sector 			= 	kwargs.get("Sector")
	LoanType 		= 	kwargs.get("LoanType")
	ClientZone 		= 	kwargs.get("ClientZone")
	Province 		= 	kwargs.get("Province")
	GroupLoanAppSetting = mktsetting.getAppSetting('PF_GROUP_LOAN_ID')
	OutstandingAmount = 0
	LoanBalance 	= 0
	NumberOfLoan 	= 0
	TotalArears 	= 0
	SubTotalDicUSD  = {}
	SubTotalDic 	= {}
	TotalPrinDue 	= 0
	TotalInDue 		= 0
	NumOfLoanGrandTotal =0
	OutstandingGrandTotalUSD = 0
	LoanBalanceGrandTotalUSD = 0
	ArrearGrandTotalUSD 	 = 0
	OutstandingGrandTotalKHR = 0
	LoanBalanceGrandTotalKHR = 0
	ArrearGrandTotalKHR 	 = 0
	PrincipalDue 	  = 0
	InterestDue 	  = 0
	PenaltyDue 		  = 0
	ChargeDue 		  = 0
	PrincipalDueGrandTotalUSD = 0
	InterestDueGrandTotalUSD = 0
	PenaltyDueGrandTotalUSD = 0
	ChargeDueGrandTotalUSD 	= 0
	PrincipalDueGrandTotalKHR = 0
	InterestDueGrandTotalKHR = 0
	PenaltyDueGrandTotalKHR = 0
	ChargeDueGrandTotalKHR 	= 0
	QueryObj 		= 	db.session.query(
										 MKT_CUSTOMER.Province,
										 MKT_CUSTOMER.District,
										 MKT_CUSTOMER.Commune,
										 MKT_CUSTOMER.Village,
										 MKT_CUSTOMER.FirstNameEn,
										 MKT_CUSTOMER.LastNameEn,
										 MKT_CUSTOMER.Gender,
										 MKT_LOAN_CONTRACT.Branch,
										 MKT_LOAN_CONTRACT.ID,
										 MKT_LOAN_CONTRACT.ContractCustomerID,
										 MKT_LOAN_CONTRACT.Currency,
										 MKT_LOAN_CONTRACT.Disbursed,
										 MKT_LOAN_CONTRACT.OutstandingAmount,
										 MKT_LOAN_CONTRACT.LoanProduct,
										 MKT_LOAN_CONTRACT.Term,
										 MKT_LOAN_CONTRACT.Cycle,
										 MKT_LOAN_CONTRACT.Sector,
										 MKT_LOAN_CONTRACT.ClientZone,
										 MKT_LOAN_CONTRACT.Amount,
										 MKT_LOAN_CONTRACT.MoreThanOneYear,
										 MKT_PAST_DUE.TotPrincipalDue,
										 MKT_PAST_DUE.TotInterestDue,
										 MKT_PAST_DUE.TotPenaltyDue,
										 MKT_PAST_DUE.TotChargeDue,
										 MKT_PAST_DUE.TotODAmount,
										 MKT_PAST_DUE.ID.label('PDID')
										 ).\
										join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
										join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID== MKT_LOAN_CONTRACT.ID).\
										filter(MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
										filter(MKT_PAST_DUE.LoanID == MKT_LOAN_CONTRACT.ID).\
										order_by(MKT_LOAN_CONTRACT.Branch,MKT_LOAN_CONTRACT.Currency)
	if Branch:
		Branch  = Branch.split()
		QueryObj	 	= QueryObj if 'ALL' in Branch else QueryObj.\
							 				filter(MKT_LOAN_CONTRACT.Branch.in_(Branch))
	if Currency:
		QueryObj	 	= QueryObj if Currency == '__None' else QueryObj.\
							 				filter(MKT_LOAN_CONTRACT.Currency == Currency)
	if Sector:
		Sector  = Sector.split()
		QueryObj	 	= QueryObj if '__None' in Sector else QueryObj.\
							 				filter(MKT_LOAN_CONTRACT.Sector.in_(Sector))
	if LoanType:
		if LoanType == '1':
			QueryObj	 	= QueryObj.filter(MKT_LOAN_CONTRACT.LoanProduct==GroupLoanAppSetting)
		elif LoanType == '2':
			QueryObj	 	= QueryObj.filter(~(MKT_LOAN_CONTRACT.LoanProduct ==GroupLoanAppSetting))
		else:
			QueryObj	 	= QueryObj
	if ClientZone:
		ClientZone  = ClientZone.split()
		QueryObj	 	= QueryObj if 'ALL' in ClientZone else QueryObj.\
							 				filter(MKT_LOAN_CONTRACT.ClientZone.in_(ClientZone))
	if Province:
		Province  = Province.split()
		QueryObj	 	= QueryObj if '__None' in Province else QueryObj.\
							 				filter(MKT_CUSTOMER.Province.in_(Province))
	BranchList = []
	BranchQuery 	= MKT_BRANCH.query
	for branch in BranchQuery:
		BranchList.append(branch.ID)
	if QueryObj:
		BranchObj = QueryObj.first()
		if BranchObj:
			FirstBranch = BranchObj.Branch
		CurrencyObj = QueryObj.first()
		if CurrencyObj:
			FirstCurrency = CurrencyObj.Currency
	OutstandingUSD 	= db.session.query(
							func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("OutstandingUSD"),
							MKT_LOAN_CONTRACT.Branch).\
							filter(and_(MKT_LOAN_CONTRACT.DisbursedStat == 'Y',MKT_LOAN_CONTRACT.OutstandingAmount > 0)).\
							filter(MKT_LOAN_CONTRACT.Currency == 'USD').\
							group_by(MKT_LOAN_CONTRACT.Branch)
	OutstandingKHR 	= db.session.query(
							func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label("OutstandingKHR"),
							MKT_LOAN_CONTRACT.Branch).\
							filter(and_(MKT_LOAN_CONTRACT.DisbursedStat == 'Y',MKT_LOAN_CONTRACT.OutstandingAmount > 0)).\
							filter(MKT_LOAN_CONTRACT.Currency == 'KHR').\
							group_by(MKT_LOAN_CONTRACT.Branch)
	for row in OutstandingKHR:
		SubTotalDic.update({row.Branch:{'KHR':{"TotalOutstandingKHR":row.OutstandingKHR}}})
	for row in OutstandingUSD:
		SubTotalDicUSD.update({row.Branch:{'USD':{"TotalOutstandingUSD":row.OutstandingUSD}}})
	SubTotalDic[row.Branch].update(SubTotalDicUSD[row.Branch])
	for row in QueryObj:
		if FirstBranch != row.Branch:
			OutstandingAmount = 0
			DisbursedAmount   = 0
			LoanBalance 	  = 0
			TotalPrinDue 	  = 0
			TotalInDue 		  = 0
			NumberOfLoan 	  = 0
			PrincipalDue 	  = 0
			InterestDue 	  = 0
			PenaltyDue 		  = 0
			ChargeDue 		  = 0
		if FirstCurrency != row.Currency:
			OutstandingAmount = 0
			DisbursedAmount   = 0
			NumberOfLoan 	  = 0
			LoanBalance 	  = 0
			TotalPrinDue 	  = 0
			TotalInDue 		  = 0
			PrincipalDue 	  = 0
			InterestDue 	  = 0
			PenaltyDue 		  = 0
			ChargeDue 		  = 0
			TotalArears 	  = 0
		if Currency == '__None':
			if row.Currency == 'KHR':
				OutstandingAmount += row.OutstandingAmount
				TotalArears 	  += row.TotODAmount
				LoanBalance   	  += row.Amount
				NumberOfLoan  	  += 1
				TotalPrinDue 	  += row.TotPrincipalDue
				PrincipalDue 	  += row.TotPrincipalDue
				InterestDue 	  += row.TotInterestDue
				PenaltyDue 		  += row.TotPenaltyDue
				ChargeDue 		  += row.TotChargeDue
				TotalInDue 		  += row.TotInterestDue
				NumOfLoanGrandTotal +=1
				OutstandingGrandTotalKHR += row.OutstandingAmount
				LoanBalanceGrandTotalKHR += row.Amount
				PrincipalDueGrandTotalKHR += row.TotPrincipalDue
				InterestDueGrandTotalKHR += row.TotInterestDue
				PenaltyDueGrandTotalKHR += row.TotPenaltyDue
				ChargeDueGrandTotalKHR 	+= row.TotChargeDue
				ArrearGrandTotalKHR 	+= row.TotODAmount
				SubTotalDic[row.Branch]['KHR'].update({'OutstandingAmount':OutstandingAmount,
													   'LoanBalance':LoanBalance,
													   'NumberOfLoan':NumberOfLoan,
													   'TotalArears':TotalArears,
													   'TotalPrinDue':TotalPrinDue,
													   'TotalInDue':TotalInDue,
													   'OutstandingGrandTotalKHR':OutstandingGrandTotalKHR,
													   'NumOfLoanGrandTotal':NumOfLoanGrandTotal,
													   'LoanBalanceGrandTotalKHR':LoanBalanceGrandTotalKHR,
													   'ArrearGrandTotalKHR':ArrearGrandTotalKHR,
													   'PrincipalDue':PrincipalDue,
													   'InterestDue':InterestDue,
													   'PenaltyDue':PenaltyDue,
													   'ChargeDue':ChargeDue,
													   'PrincipalDueGrandTotalKHR':PrincipalDueGrandTotalKHR,
													   'InterestDueGrandTotalKHR':InterestDueGrandTotalKHR,
													   'PenaltyDueGrandTotalKHR':PenaltyDueGrandTotalKHR,
													   'ChargeDueGrandTotalKHR':ChargeDueGrandTotalKHR})
			if row.Currency == 'USD':
				OutstandingAmount += row.OutstandingAmount
				LoanBalance   	  += row.Amount
				TotalArears 	  += row.TotODAmount
				TotalPrinDue 	  += row.TotPrincipalDue
				TotalInDue 		  += row.TotInterestDue
				PrincipalDue 	  += row.TotPrincipalDue
				InterestDue 	  += row.TotInterestDue
				PenaltyDue 		  += row.TotPenaltyDue
				ChargeDue 		  += row.TotChargeDue
				TotalInDue 		  += row.TotInterestDue
				NumberOfLoan  	  += 1
				NumOfLoanGrandTotal +=1
				OutstandingGrandTotalUSD += row.OutstandingAmount
				LoanBalanceGrandTotalUSD += row.Amount
				PrincipalDueGrandTotalUSD += row.TotPrincipalDue
				InterestDueGrandTotalUSD += row.TotInterestDue
				PenaltyDueGrandTotalUSD += row.TotPenaltyDue
				ChargeDueGrandTotalUSD 	+= row.TotChargeDue
				ArrearGrandTotalUSD 	+= row.TotODAmount
				SubTotalDicUSD[row.Branch]['USD'].update({'OutstandingAmount':OutstandingAmount,
														  'LoanBalance':LoanBalance,
														  'NumberOfLoan':NumberOfLoan,
														  'TotalArears':TotalArears,
														  'TotalPrinDue':TotalPrinDue,
														  'TotalInDue':TotalInDue,
														  'OutstandingGrandTotalUSD':OutstandingGrandTotalUSD,
														  'NumOfLoanGrandTotal':NumOfLoanGrandTotal,
														  'LoanBalanceGrandTotalUSD':LoanBalanceGrandTotalUSD,
														  'ArrearGrandTotalUSD':ArrearGrandTotalUSD,
														  'PrincipalDue':PrincipalDue,
														  'InterestDue':InterestDue,
														  'PenaltyDue':PenaltyDue,
														  'ChargeDue':ChargeDue,
														  'PrincipalDueGrandTotalUSD':PrincipalDueGrandTotalUSD,
													   	  'InterestDueGrandTotalUSD':InterestDueGrandTotalUSD,
													      'PenaltyDueGrandTotalUSD':PenaltyDueGrandTotalUSD,
													      'ChargeDueGrandTotalUSD':ChargeDueGrandTotalUSD
														  })
				SubTotalDic[row.Branch].update(SubTotalDicUSD[row.Branch])  if row.Branch in SubTotalDic.keys() else SubTotalDic.update(SubTotalDicUSD)
		if Currency == 'KHR':
			if Currency in SubTotalDic[row.Branch].keys():
				OutstandingAmount += row.OutstandingAmount
				TotalArears 	  += row.TotODAmount
				LoanBalance   	  += row.Amount
				NumberOfLoan  	  += 1
				TotalPrinDue 	  += row.TotPrincipalDue
				TotalInDue 		  += row.TotInterestDue
				PrincipalDue 	  += row.TotPrincipalDue
				InterestDue 	  += row.TotInterestDue
				PenaltyDue 		  += row.TotPenaltyDue
				ChargeDue 		  += row.TotChargeDue
				TotalInDue 		  += row.TotInterestDue
				NumOfLoanGrandTotal +=1
				OutstandingGrandTotalKHR += row.OutstandingAmount
				PrincipalDueGrandTotalKHR += row.TotPrincipalDue
				InterestDueGrandTotalKHR += row.TotInterestDue
				PenaltyDueGrandTotalKHR += row.TotPenaltyDue
				ChargeDueGrandTotalKHR 	+= row.TotChargeDue
				LoanBalanceGrandTotalKHR += row.Amount
				ArrearGrandTotalKHR 	+= row.TotODAmount
				SubTotalDic[row.Branch]['KHR'].update({'OutstandingAmount':OutstandingAmount,
													   'LoanBalance':LoanBalance,
													   'NumberOfLoan':NumberOfLoan,
													   'TotalArears':TotalArears,
													   'TotalPrinDue':TotalPrinDue,
													   'TotalInDue':TotalInDue,
													   'OutstandingGrandTotalKHR':OutstandingGrandTotalKHR,
													   'NumOfLoanGrandTotal':NumOfLoanGrandTotal,
													   'LoanBalanceGrandTotalKHR':LoanBalanceGrandTotalKHR,
													   'ArrearGrandTotalKHR':ArrearGrandTotalKHR,
													   'PrincipalDue':PrincipalDue,
													   'InterestDue':InterestDue,
													   'PenaltyDue':PenaltyDue,
													   'ChargeDue':ChargeDue,
													   'PrincipalDueGrandTotalKHR':PrincipalDueGrandTotalKHR,
													   'InterestDueGrandTotalKHR':InterestDueGrandTotalKHR,
													   'PenaltyDueGrandTotalKHR':PenaltyDueGrandTotalKHR,
													   'ChargeDueGrandTotalKHR':ChargeDueGrandTotalKHR
													   })
		if Currency == 'USD':
			if Currency in SubTotalDic[row.Branch].keys():
				OutstandingAmount += row.OutstandingAmount
				LoanBalance   	  += row.Amount
				TotalArears 	  += row.TotODAmount
				TotalPrinDue 	  += row.TotPrincipalDue
				TotalInDue 		  += row.TotInterestDue
				PrincipalDue 	  += row.TotPrincipalDue
				InterestDue 	  += row.TotInterestDue
				PenaltyDue 		  += row.TotPenaltyDue
				ChargeDue 		  += row.TotChargeDue
				TotalInDue 		  += row.TotInterestDue
				NumberOfLoan  	  += 1
				NumOfLoanGrandTotal +=1
				OutstandingGrandTotalUSD += row.OutstandingAmount
				PrincipalDueGrandTotalUSD += row.TotPrincipalDue
				InterestDueGrandTotalUSD += row.TotInterestDue
				PenaltyDueGrandTotalUSD += row.TotPenaltyDue
				ChargeDueGrandTotalUSD 	+= row.TotChargeDue
				LoanBalanceGrandTotalUSD += row.Amount
				ArrearGrandTotalUSD 	+= row.TotODAmount
				SubTotalDic[row.Branch]['USD'].update({'OutstandingAmount':OutstandingAmount,
													   'LoanBalance':LoanBalance,
													   'NumberOfLoan':NumberOfLoan,
													   'TotalArears':TotalArears,
													   'TotalPrinDue':TotalPrinDue,
													   'TotalInDue':TotalInDue,
													   'OutstandingGrandTotalUSD':OutstandingGrandTotalUSD,
													   'NumOfLoanGrandTotal':NumOfLoanGrandTotal,
													   'LoanBalanceGrandTotalUSD':LoanBalanceGrandTotalUSD,
													   'ArrearGrandTotalUSD':ArrearGrandTotalUSD,
													   'PrincipalDue':PrincipalDue,
													   'InterestDue':InterestDue,
													   'PenaltyDue':PenaltyDue,
													   'ChargeDue':ChargeDue,
													   'PrincipalDueGrandTotalUSD':PrincipalDueGrandTotalUSD,
													   'InterestDueGrandTotalUSD':InterestDueGrandTotalUSD,
													   'PenaltyDueGrandTotalUSD':PenaltyDueGrandTotalUSD,
													   'ChargeDueGrandTotalUSD':ChargeDueGrandTotalUSD
													   })
				# SubTotalDic[row.Branch]['USD'].update(SubTotalDicUSD[row.Branch]['USD'])
		FirstBranch 	= row.Branch
		FirstCurrency 	= row.Currency
	return QueryObj,SubTotalDic
def getClientZone(ClientZone):
	Zone     = ""
	if ClientZone == '0':
		Zone = "Urban"
	elif ClientZone == '1':
		Zone = "Semi-Urban"
	elif ClientZone == '2':
		Zone = "Rural Area"
	elif ClientZone == '3':
		Zone = "Remote Area"
	else:
		Zone = "N/A"
	return Zone
def getNumdayDue(PDID):
	NumdayDue = 0
	PDDateObj = MKT_PD_DATE.query.filter(MKT_PD_DATE.ID == PDID)
	for row in PDDateObj:
		NumdayDue += int(row.NumDayDue)
	return NumdayDue
def getRepaymentObj(LoanID):
	RepaymentMode = ''
	RepaymentObj  = MKT_SCHED_DEFINE.query.filter(MKT_SCHED_DEFINE.ID == LoanID).first()
	if RepaymentObj:
		if RepaymentObj.RepMode == '1':
			if RepaymentObj.PrincipalFreq > 1:
				RepaymentMode = "Baloon"
			elif RepaymentObj.PrincipalFreq == 1:
				RepaymentMode = "Declining"
		else:
			RepaymentMode = "N/A"
	return RepaymentMode
def getRecordRow(**kwargs):
	Branch 			= 	kwargs.get("Branch")
	Currency 		= 	kwargs.get("Currency")
	Sector 			= 	kwargs.get("Sector")
	LoanType 		= 	kwargs.get("LoanType")
	ClientZone 		= 	kwargs.get("ClientZone")
	Province 		= 	kwargs.get("Province")
	RecordRow = []
	ListHistID=[]
	GroupLoanAppSetting = mktsetting.getAppSetting('PF_GROUP_LOAN_ID')
	if isFirstLoaded(**kwargs):
		QueryObj 	= getRecordRowObj(Branch=Branch,Currency=Currency,Sector=Sector,LoanType=LoanType,ClientZone=ClientZone,Province=Province)
		if QueryObj[0]:
			BranchObj = QueryObj[0].first()
			if BranchObj:
				PrevBranch = BranchObj.Branch
			CurrencyObj = QueryObj[0].first()
			if CurrencyObj:
				PrevCurrency = CurrencyObj.Currency
			ReportingRate = MKT_CURRENCY.query.get('KHR').ReportingRate
			BaseCurrency 		= 	mktsetting.getAccSetting().BaseCurrency
			TotalNumberOfLoanKHR = 0
			TotalDisbursedKHR = 0
			TotalOutstandingKHR = 0
			TotalArearsKHR = 0
			NumberOfLoan = 0
			LoanBalance =0
			OutstandingAmount= 0
			TotalArears = 0
			TotalOutstanding = 0
			TotalPrinDue = 0
			TotalInDue = 0
			Par = 0
			Delinquency = 0
			SubTotalNumberOfLoan = 0
			SubTotalOutstanding = 0
			SubTotalLoanBalance =0
			SubTotalArears =0	
			TotalPar = 0
			for index,row in enumerate(QueryObj[0].all()):
				CustomerName = row.LastNameEn + " " + row.FirstNameEn
				Province     = MKT_PROVINCE.query.get(row.Province)
				District 	 = MKT_DISTRICT.query.get(row.District)
				Commune 	 = MKT_COMMUNE.query.get(row.Commune)
				Village 	 = MKT_VILLAGE.query.get(row.Village)
				Sector 		 = MKT_SECTOR.query.get(row.Sector)
				ClientZone 	 = getClientZone(row.ClientZone)
				LoanProduct  = MKT_LOAN_PRODUCT.query.get(row.LoanProduct)
				NumdayDue 	 = mktpdcollection.getMaxNumDayDue(row.PDID)
				RepaymentMode = getRepaymentObj(row.ID)
				if PrevBranch in QueryObj[1].keys():
					#NumberOfLoan
					NumberOfLoan = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('NumberOfLoan',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					TotalNumberOfLoanKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('NumberOfLoan',0) if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					TotalNumberOfLoanUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('NumberOfLoan',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					SubTotalNumberOfLoan = TotalNumberOfLoanUSD + TotalNumberOfLoanKHR
					#Loan Balance
					LoanBalance = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('LoanBalance',0)
					TotalLoanBalanceUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('LoanBalance',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					TotalLoanBalanceKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('LoanBalance',0)* ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					SubTotalLoanBalance = float(TotalLoanBalanceUSD) + float(TotalLoanBalanceKHR)

					#OutstandingAmount
					OutstandingAmount = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('OutstandingAmount',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					TotalOutstandingKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('OutstandingAmount',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					TotalOutstandingUSD  = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('OutstandingAmount',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					TotalOutstanding = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('TotalOutstanding%s'%PrevCurrency,0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					SubTotalOutstanding = float(TotalOutstandingUSD) + float(TotalOutstandingKHR)
					#Arrears
					TotalArears = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('TotalArears',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					TotalArearsKHR = QueryObj[1][PrevBranch]['KHR'].get('TotalArears',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					TotalArearsUSD  = QueryObj[1][PrevBranch]['USD'].get('TotalArears',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					SubTotalArears 		= float(TotalArearsKHR) + float(TotalArearsUSD) 
					#Principal Due
					TotalPrinDue  		 = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('TotalPrinDue',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					TotalPrinDueKHR 	 = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('TotalPrinDue',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					TotalPrinDueUSD 	 = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('TotalPrinDue',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					PrincipalDue 	  	 = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('PrincipalDue',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					PrincipalDueUSD   	 = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('PrincipalDue',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					PrincipalDueKHR   	 = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('PrincipalDue',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					SubTotalPrincipalDue = PrincipalDueUSD + PrincipalDueKHR
					#Interest Due
					TotalInDue 	 		= QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('TotalInDue',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					TotalInDueKHR 		= QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('TotalInDue',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					TotalInDueUSD 		= QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('TotalInDue',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					InterestDue 	  	= QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('InterestDue',0) if PrevCurrency in QueryObj[1].get(PrevBranch,{}).keys() else 0
					InterestDueKHR 	  	= QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('InterestDue',0)*ReportingRate if 'KHR' in QueryObj[1].get(PrevBranch,{}).keys() else 0
					InterestDueUSD 	  	= QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('InterestDue',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					SubTotalInterestDue = InterestDueKHR + InterestDueUSD
					#TotalOutstanding of branch
					TotalOutstandingParUSD 	= QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('TotalOutstandingUSD',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					TotalOutstandingParKHR 	= QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('TotalOutstandingKHR',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					TotalOutstandingPar 	= TotalOutstandingParKHR + TotalOutstandingParUSD
					#Penalty Due
					PenaltyDue 	  	  = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('PenaltyDue',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					PenaltyDueUSD 	  = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('PenaltyDue',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					PenaltyDueKHR 	  = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('PenaltyDue',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					SubTotalPenaltyDue = PenaltyDueUSD + PenaltyDueKHR
					#Charge Due
					ChargeDue 	  	  = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('ChargeDue',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					ChargeDueUSD 	  = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('ChargeDue',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					ChargeDueKHR 	  = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('ChargeDue',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					SubTotalChargeDue = ChargeDueUSD + ChargeDueKHR
					#PARs
					Par = ((TotalOutstandingKHR / TotalOutstandingParKHR) if TotalOutstandingKHR != 0 else 0)*100 if PrevCurrency == 'KHR' else ((TotalOutstandingUSD / TotalOutstandingParUSD) if TotalOutstandingUSD != 0 else 0)*100 
					TotalPar = float(SubTotalOutstanding) / float(TotalOutstandingPar)*100 if SubTotalOutstanding != 0 else 0
					#Delinquency
					Delinquency = (((TotalPrinDueUSD + InterestDueUSD)/TotalOutstandingParUSD) if (TotalPrinDueUSD + InterestDueUSD) != 0 else 0)*100 if PrevCurrency=='USD' else (((TotalPrinDueKHR + InterestDueUSD)/TotalOutstandingParKHR) if (TotalPrinDueKHR+ InterestDueKHR) != 0 else 0)*100
					DelinquencyKHR = ((TotalPrinDueKHR + InterestDueKHR)/TotalOutstandingParKHR)*100
					DelinquencyUSD = ((TotalPrinDueUSD + InterestDueUSD)/TotalOutstandingParUSD)*100 if (TotalPrinDueUSD + InterestDueUSD)!= 0 else 0
					TotalDelinquency = (float(SubTotalPrincipalDue+ SubTotalInterestDue) / float(TotalOutstandingPar))*100 if (SubTotalPrincipalDue+ SubTotalInterestDue) != 0 else 0 
					#GrandTotal
					NumOfLoanGrandTotal = QueryObj[1].get(PrevBranch,{}).get(PrevCurrency,{}).get('NumOfLoanGrandTotal',0) if PrevCurrency in QueryObj[1][PrevBranch].keys() else 0
					OutstandingGrandTotalKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('OutstandingGrandTotalKHR',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					OutstandingGrandTotalUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('OutstandingGrandTotalUSD',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					OutstandingGrandTotal  = OutstandingGrandTotalUSD + OutstandingGrandTotalKHR
					LoanBalanceGrandTotalKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('LoanBalanceGrandTotalKHR',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					LoanBalanceGrandTotalUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('LoanBalanceGrandTotalUSD',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					LoanBalanceGrandTotal  = LoanBalanceGrandTotalKHR + LoanBalanceGrandTotalUSD
					ArrearGrandTotalKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('ArrearGrandTotalKHR',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					ArrearGrandTotalUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('ArrearGrandTotalUSD',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					ArrearGrandTotal  = ArrearGrandTotalKHR + ArrearGrandTotalUSD
					PrincipalDueGrandTotalKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('PrincipalDueGrandTotalKHR',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					PrincipalDueGrandTotalUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('PrincipalDueGrandTotalUSD',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					PrincipalDueGrandTotal = PrincipalDueGrandTotalKHR + PrincipalDueGrandTotalUSD
					InterestDueGrandTotalKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('InterestDueGrandTotalKHR',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					InterestDueGrandTotalUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('InterestDueGrandTotalUSD',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					InterestDueGrandTotal = InterestDueGrandTotalKHR + InterestDueGrandTotalUSD
					PenaltyDueGrandTotalKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('PenaltyDueGrandTotalKHR',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					PenaltyDueGrandTotalUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('PenaltyDueGrandTotalUSD',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					PenaltyDueGrandTotal = PenaltyDueGrandTotalKHR + PenaltyDueGrandTotalUSD
					ChargeDueGrandTotalKHR = QueryObj[1].get(PrevBranch,{}).get('KHR',{}).get('ChargeDueGrandTotalKHR',0)*ReportingRate if 'KHR' in QueryObj[1][PrevBranch].keys() else 0
					ChargeDueGrandTotalUSD = QueryObj[1].get(PrevBranch,{}).get('USD',{}).get('ChargeDueGrandTotalUSD',0) if 'USD' in QueryObj[1][PrevBranch].keys() else 0
					ChargeDueGrandTotal = ChargeDueGrandTotalKHR + ChargeDueGrandTotalUSD

				if not PrevCurrency == row.Currency:
					RecordRow.append(({1: {"Value":"Total %s (%s)"%(PrevBranch,PrevCurrency)},
									   2: {"Value":NumberOfLoan},
									   3: {"Value":""},
									   4: {"Value":""},
									   5: {"Value":""},
									   6: {"Value":""},
									   7: {"Value":""},
									   8: {"Value":""},
									   9: {"Value":PrevCurrency},
									  10: {"Value":mktmoney.toMoney(float(OutstandingAmount),mktmoney.getCurrencyObj(PrevCurrency))},
									  11: {"Value":mktmoney.toMoney(float(LoanBalance),mktmoney.getCurrencyObj(PrevCurrency))},
									  12: {"Value":mktmoney.toMoney(float(TotalArears),mktmoney.getCurrencyObj(PrevCurrency))},
									  13: {"Value":mktmoney.toMoney(float(PrincipalDue),mktmoney.getCurrencyObj(PrevCurrency))},
									  14: {"Value":mktmoney.toMoney(float(InterestDue),mktmoney.getCurrencyObj(PrevCurrency))},
									  15: {"Value":mktmoney.toMoney(float(PenaltyDue),mktmoney.getCurrencyObj(PrevCurrency))},
									  16: {"Value":mktmoney.toMoney(float(ChargeDue),mktmoney.getCurrencyObj(PrevCurrency))},
									  17: {"Value":"PAR %"},
									  18: {"Value":float("{0:.2f}".format(Par))},
									  19: {"Value":"Delinquency %"},
									  20: {"Value":float("{0:.2f}".format(Delinquency))},
									  21: {"Value":""},
									  22: {"Value":""},
									  23: {"Value":""},
								 		},{"Class":"text-right text-bold","Style":""}))
				if not PrevBranch == row.Branch:
					RecordRow.append(({1: {"Value":"Total %s"%PrevBranch},
								   2: {"Value":SubTotalNumberOfLoan},
								   3: {"Value":""},
								   4: {"Value":""},
								   5: {"Value":""},
								   6: {"Value":""},
								   7: {"Value":""},
								   8: {"Value":""},
								   9: {"Value":BaseCurrency},
								  10: {"Value":mktmoney.toMoney(float(SubTotalOutstanding),mktmoney.getCurrencyObj(PrevCurrency))},
								  11: {"Value":mktmoney.toMoney(float(SubTotalLoanBalance),mktmoney.getCurrencyObj(PrevCurrency))},
								  12: {"Value":mktmoney.toMoney(float(SubTotalArears),mktmoney.getCurrencyObj(PrevCurrency))},
								  13: {"Value":mktmoney.toMoney(float(SubTotalPrincipalDue),mktmoney.getCurrencyObj(PrevCurrency))},
								  14: {"Value":mktmoney.toMoney(float(SubTotalInterestDue),mktmoney.getCurrencyObj(PrevCurrency))},
								  15: {"Value":mktmoney.toMoney(float(SubTotalPenaltyDue),mktmoney.getCurrencyObj(PrevCurrency))},
								  16: {"Value":mktmoney.toMoney(float(SubTotalChargeDue),mktmoney.getCurrencyObj(PrevCurrency))},
								  17: {"Value":"PAR %"},
								  18: {"Value":mktmoney.toMoney(float(TotalPar),mktmoney.getCurrencyObj(PrevCurrency))},
								  19: {"Value":"Delinquency %"},
								  20: {"Value":mktmoney.toMoney(float(TotalDelinquency),mktmoney.getCurrencyObj(PrevCurrency))},
								  21: {"Value":""},
								  22: {"Value":""},
								  23: {"Value":""},
							 		},{"Class":"text-right text-bold","Style":""}))
				DayDueDesc = ""
				if 	1 < NumdayDue <= 30:
					DayDueDesc = "1-30 days"
				elif 30 < NumdayDue <= 60:
					DayDueDesc = "> 30 days"
				elif 60 < NumdayDue <= 90:
					DayDueDesc = "60-90 days"
				elif 90 < NumdayDue <= 120:
					DayDueDesc = "90-120 days"
				elif 120 < NumdayDue <= 180:
					DayDueDesc = "120-180 days"
				elif 180 < NumdayDue <= 360:
					DayDueDesc = "180-360 days"
				else:
					DayDueDesc = "> 360 days"

				RecordRow.append(({1: {"Value":row.Branch},
							   2: {"Value":row.ID},
							   3: {"Value":CustomerName},
							   4: {"Value":row.Gender},
							   5: {"Value":Province.Description if Province else "N/A"},
							   6: {"Value":District.Description if District else "N/A"},
							   7: {"Value":Commune.Description if Commune else "N/A"},
							   8: {"Value":Village.Description if Village else "N/A"},
							   9: {"Value":row.Currency},
							  10: {"Value":mktmoney.toMoney(float(row.OutstandingAmount),mktmoney.getCurrencyObj(row.Currency)),"Class":"text-right"},
							  11: {"Value":mktmoney.toMoney(float(row.Amount),mktmoney.getCurrencyObj(row.Currency)) if row.Amount else "0.00" ,"Class":"text-right"},
							  12: {"Value":mktmoney.toMoney(float(row.TotODAmount),mktmoney.getCurrencyObj(row.Currency)) if row.TotODAmount else "0.00" ,"Class":"text-right"},
							  13: {"Value":mktmoney.toMoney(float(row.TotPrincipalDue),mktmoney.getCurrencyObj(row.Currency)) if row.TotPrincipalDue else "0.00" ,"Class":"text-right"},
							  14: {"Value":mktmoney.toMoney(float(row.TotInterestDue),mktmoney.getCurrencyObj(row.Currency)) if row.TotInterestDue else "0.00" ,"Class":"text-right"},
							  15: {"Value":mktmoney.toMoney(float(row.TotPenaltyDue),mktmoney.getCurrencyObj(row.Currency)) if row.TotPenaltyDue else "0.00" ,"Class":"text-right"},
							  16: {"Value":mktmoney.toMoney(float(row.TotChargeDue),mktmoney.getCurrencyObj(row.Currency)) if row.TotChargeDue else "0.00" ,"Class":"text-right"},
							  17: {"Value":DayDueDesc},
							  18: {"Value":NumdayDue},
							  19: {"Value":LoanProduct.Description if LoanProduct else "N/A"},
							  20: {"Value":"Yes" if row.MoreThanOneYear == 'Y' else "No"},
							  21: {"Value":RepaymentMode if RepaymentMode else "N/A"},
							  22: {"Value":Sector.Description if Sector else "N/A"},
							  23: {"Value":ClientZone},
							 },{"Class":"","Style":""}))
				
				if index == len(QueryObj[0].all())-1:
					RecordRow.append(({1: {"Value":"Total %s (%s)"%(PrevBranch,PrevCurrency)},
							   2: {"Value":NumberOfLoan},
							   3: {"Value":""},
							   4: {"Value":""},
							   5: {"Value":""},
							   6: {"Value":""},
							   7: {"Value":""},
							   8: {"Value":""},
							   9: {"Value":PrevCurrency},
							  10: {"Value":mktmoney.toMoney(float(OutstandingAmount),mktmoney.getCurrencyObj(PrevCurrency))},
							  11: {"Value":mktmoney.toMoney(float(LoanBalance),mktmoney.getCurrencyObj(PrevCurrency))},
							  12: {"Value":mktmoney.toMoney(float(TotalArears),mktmoney.getCurrencyObj(PrevCurrency))},
							  13: {"Value":mktmoney.toMoney(float(PrincipalDue),mktmoney.getCurrencyObj(PrevCurrency))},
							  14: {"Value":mktmoney.toMoney(float(InterestDue),mktmoney.getCurrencyObj(PrevCurrency))},
							  15: {"Value":mktmoney.toMoney(float(PenaltyDue),mktmoney.getCurrencyObj(PrevCurrency))},
							  16: {"Value":mktmoney.toMoney(float(ChargeDue),mktmoney.getCurrencyObj(PrevCurrency))},
							  17: {"Value":"PAR %"},
							  18: {"Value":mktmoney.toMoney(float(Par),mktmoney.getCurrencyObj(PrevCurrency))},
							  19: {"Value":"Delinquency %"},
							  20: {"Value":mktmoney.toMoney(float(Delinquency),mktmoney.getCurrencyObj(PrevCurrency))},
							  21: {"Value":""},
							  22: {"Value":""},
							  23: {"Value":""},
							  	},{"Class":"text-right text-bold","Style":""}))
					RecordRow.append(({1: {"Value":"Total %s"%PrevBranch},
								   2: {"Value":SubTotalNumberOfLoan},
								   3: {"Value":""},
								   4: {"Value":""},
								   5: {"Value":""},
								   6: {"Value":""},
								   7: {"Value":""},
								   8: {"Value":""},
								   9: {"Value":BaseCurrency},
								  10: {"Value":mktmoney.toMoney(float(SubTotalOutstanding),mktmoney.getCurrencyObj(PrevCurrency))},
								  11: {"Value":mktmoney.toMoney(float(SubTotalLoanBalance),mktmoney.getCurrencyObj(PrevCurrency))},
								  12: {"Value":mktmoney.toMoney(float(SubTotalArears),mktmoney.getCurrencyObj(PrevCurrency))},
								  13: {"Value":mktmoney.toMoney(float(SubTotalPrincipalDue),mktmoney.getCurrencyObj(PrevCurrency))},
								  14: {"Value":mktmoney.toMoney(float(SubTotalInterestDue),mktmoney.getCurrencyObj(PrevCurrency))},
								  15: {"Value":mktmoney.toMoney(float(SubTotalPenaltyDue),mktmoney.getCurrencyObj(PrevCurrency))},
								  16: {"Value":mktmoney.toMoney(float(SubTotalChargeDue),mktmoney.getCurrencyObj(PrevCurrency))},
								  17: {"Value":"PAR %"},
								  18: {"Value":mktmoney.toMoney(float(TotalPar),mktmoney.getCurrencyObj(PrevCurrency))},
								  19: {"Value":"Delinquency %"},
								  20: {"Value":mktmoney.toMoney(float(TotalDelinquency),mktmoney.getCurrencyObj(PrevCurrency))},
								  21: {"Value":""},
								  22: {"Value":""},
								  23: {"Value":""},
								  	},{"Class":"text-right text-bold","Style":""}))
					RecordRow.append(({1: {"Value":"Grand Total"},
								   2: {"Value":NumOfLoanGrandTotal},
								   3: {"Value":""},
								   4: {"Value":""},
								   5: {"Value":""},
								   6: {"Value":""},
								   7: {"Value":""},
								   8: {"Value":""},
								   9: {"Value":BaseCurrency},
								  10: {"Value":mktmoney.toMoney(float(OutstandingGrandTotal),mktmoney.getCurrencyObj(PrevCurrency))},
								  11: {"Value":mktmoney.toMoney(float(LoanBalanceGrandTotal),mktmoney.getCurrencyObj(PrevCurrency))},
								  12: {"Value":mktmoney.toMoney(float(ArrearGrandTotal),mktmoney.getCurrencyObj(PrevCurrency))},
								  13: {"Value":mktmoney.toMoney(float(PrincipalDueGrandTotal),mktmoney.getCurrencyObj(PrevCurrency))},
								  14: {"Value":mktmoney.toMoney(float(InterestDueGrandTotal),mktmoney.getCurrencyObj(PrevCurrency))},
								  15: {"Value":mktmoney.toMoney(float(PenaltyDueGrandTotal),mktmoney.getCurrencyObj(PrevCurrency))},
								  16: {"Value":mktmoney.toMoney(float(ChargeDueGrandTotal),mktmoney.getCurrencyObj(PrevCurrency))},
								  17: {"Value":""},
								  18: {"Value":""},
								  19: {"Value":""},
								  20: {"Value":""},
								  21: {"Value":""},
								  22: {"Value":""},
								  23: {"Value":""},
								  	},{"Class":"text-right text-bold","Style":""}))
				PrevBranch = row.Branch
				PrevCurrency = row.Currency
	RecordRow.append(({1: {"Value":""},
				   2: {"Value":""},
				   3: {"Value":""},
				   4: {"Value":""},
				   5: {"Value":""},
				   6: {"Value":""},
				   7: {"Value":""},
				   8: {"Value":""},
				   9: {"Value":""},
				  10: {"Value":""},
				  11: {"Value":""},
				  12: {"Value":""},
				  13: {"Value":""},
				  14: {"Value":""},
				  15: {"Value":""},
				  16: {"Value":""},
				  17: {"Value":""},
				  18: {"Value":""},
				  19: {"Value":""},
				  20: {"Value":""},
				  21: {"Value":""},
				  22: {"Value":""},
				  23: {"Value":""},
				 },{"Class":"text-right text-bold","Style":""}))
	
	return RecordRow
def isFirstLoaded(**kwargs):
	# If it is first loanded, the bellow variables will None
	Branch 			= kwargs.get("Branch")
	Currency 		= kwargs.get("Currency")
	Sector 			= 	kwargs.get("Sector")
	LoanType 		= 	kwargs.get("LoanType")
	ClientZone 		= 	kwargs.get("ClientZone")
	Province 		= 	kwargs.get("Province")
	if (Branch or Currency or Sector or LoanType or ClientZone or Province) not in ['', None]:
		return True
	return False




