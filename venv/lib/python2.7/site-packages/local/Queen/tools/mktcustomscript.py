
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from decimal 						import Decimal
from app 							import db
from sqlalchemy 					import *
import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney


class CustomPenalty(object):
	def __init__(self,**kwargs):
		pass

	@staticmethod
	def setCustomPretermination(**kwargs):
		"""
			Example: 
				- For Loan Term 1year if pay-off before 6-months will charge 5% of Outstanding
				- For Loan Term (>1year and <= 2years) if pay-off before 12-months will charge 5% of Outstanding
				- For Loan Term >2year if pay-off before 24-months will charge 3% of Outstanding

			- Format for configuration: ['Term<=12*ColNum<=6*5', '12<Term<=24*ColNum<12*5', 'Term>24*ColNum<=24*3']
				* Term: is term of loan contract
				* ColNum: is collection number of schedule each loan
				* *5,*3: is percentage of Outstanding

			Disbursed: $ 5,000.00,
			ValueDate: 2020-01-02, 
			Term: 6

			ID	Date		Principal	Interest	Total		Status				Loan Balance
			1	2020-02-02	$ 833.33	$ 77.50		$ 910.83	Full paid on time	$ 4,166.67
			2	2020-03-02	$ 833.33	$ 62.50		$ 895.83	Full paid on time	$ 3,333.34
			3	2020-04-02	$ 833.33	$ 48.33		$ 881.66	Not Yet Due			$ 2,500.01
			4	2020-05-02	$ 833.33	$ 36.25		$ 869.58	Not Yet Due			$ 1,666.68
			5	2020-06-02	$ 833.33	$ 26.67		$ 860.00	Not Yet Due			$ 833.35
			6	2020-07-02	$ 833.35	$ 12.92		$ 846.27	Not Yet Due			$ 0.00
				Total		$ 5,000.00	$ 264.17	$ 5,264.17
			Args:
				**kwargs 			(kwargs):
					NumOfDayLate	(int):		number of day late
					PaidOffDate		(str):		string date "2020-03-12"
					LoanObj 		(object):	sqlalchemy object of Loan Contract
					NewStr			(string):	string additional parameters, "CUSTOM"
			Return:
				TotalPenalty 		(string): 	string format money
			Raise:
				Exception
			Call:
				CustomPenalty.setCustomPretermination(**kwargs)
		"""

		try:
			NumOfDay 		= kwargs.get("NumOfDay",0)
			PaidOffDate 	= kwargs.get("PaidOffDate","")
			LoanObj 		= kwargs.get("LoanObj",None)
			Param 			= kwargs.get("NewStr",[])

			TotalPenalty 	= 0
			ScheduleObj 	= ''
			ConditionI 		= 0
			ConditionII 	= 0
			ColNum 			= 0

			ID 				= LoanObj.ID
			Term 			= int(LoanObj.Term)
			OutstandingAmount = float(LoanObj.OutstandingAmount)

			BankDate 		= mktdate.getBankDate()
			# This query use for get current installment of loan schedule
			ScheduleObj		= db.session.query(MKT_REP_SCHEDULE.No,MKT_REP_SCHEDULE.CollectionDate).\
									filter(MKT_REP_SCHEDULE.LoanID==LoanObj.ID).\
									filter(MKT_REP_SCHEDULE.CollectionDate >= str(BankDate)).\
									order_by(MKT_REP_SCHEDULE.No).first()
			if ScheduleObj:
				ColNum = ScheduleObj.No

			# Remove "CUSTOM" from Param
			Param.pop(0)

			for row in Param:
				# format of param: ['Term<=12*ColNum<=6*5', '12<Term<=24*ColNum<12*5', 'Term>24*ColNum<=24*3']
				ParamList 	= str(row).split('*')
				ConditionI 	= ParamList[0]
				ConditionII = ParamList[1]
				Percentage	= ParamList[2]
				if eval('%s %s %s'%(ConditionI,'and',ConditionII)):
					TotalPenalty = (OutstandingAmount *float(Percentage))/100

			TotalPenalty 	= mktmoney.toMoney(float(TotalPenalty),mktmoney.getCurrencyObj(LoanObj.Currency))

			return TotalPenalty
		except Exception, e:
			raise e

def getCustomTerminationPenalty(NumOfDay,PaidOffDate,LoanObj,NewStr):
	"""Method to access class CustomPenalty"""
	kwargs = {"NumOfDay":NumOfDay,"PaidOffDate":PaidOffDate,"LoanObj":LoanObj,"NewStr":NewStr}
	Amount = CustomPenalty.setCustomPretermination(**kwargs)
	return Amount
