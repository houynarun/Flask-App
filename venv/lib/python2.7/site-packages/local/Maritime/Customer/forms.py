# -*- coding: utf-8 -*-
from app.Customer.forms import *

#function
def getRecord():
	try:
		result = MKT_CUSTOMER_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_CUSTOMER.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'ProvinceOfBirth'	:str(row.ProvinceOfBirth)})
				Dict.update({'DistrictOfBirth'	:str(row.DistrictOfBirth)})
				Dict.update({'CommuneOfBirth'	:str(row.CommuneOfBirth)})
				Dict.update({'VillageOfBirth'	:str(row.VillageOfBirth)})
				Dict.update({'Province'			:str(row.Province)})
				Dict.update({'District'			:str(row.District)})
				Dict.update({'Commune'			:str(row.Commune)})
				Dict.update({'Village'			:str(row.Village)})
				Dict.update({'Sector'			:str(row.Sector)})
				Dict.update({'Industry'			:str(row.Industry)})
				Dict.update({'Branch'			:str(row.Branch)})
				Dict.update({'Officer'			:str(row.Officer)})


				Dict.update({'EmployerProvince'			:str(row.EmployerProvince)})
				Dict.update({'EmployerDistrict'			:str(row.EmployerDistrict)})
				Dict.update({'EmployerCommune'			:str(row.EmployerCommune)})
				Dict.update({'EmployerVillage'			:str(row.EmployerVillage)})

			return Dict
		else:
			return Dict

	except:
		raise


def loadVillageOfBirth():  #define function
	if request.method == 'POST':
		Commune=request.form["CommuneOfBirth"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			print "record",Record
			return MKT_VILLAGE.query.filter_by(ID=Record['VillageOfBirth'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)

class FRM_CUSTOMER_EX(FRM_CUSTOMER):
	PotentialCustomer 	= 	RemoteTextField("Potential Customer")
	FirstNameEn 	=	TextField(requiredlabel("%s (%s)" %(getLanguage("First Name"), getLanguage("English")),"*"),[validators.Required()])
	LastNameEn 		=	TextField(requiredlabel("%s (%s)" %(getLanguage("Last Name"), getLanguage("English")),"*"),[validators.Required()])
	FirstNameKh 	=	TextField("%s (%s)" %(getLanguage("First Name"), getLanguage("Khmer")))
	LastNameKh 		=	TextField("%s (%s)" %(getLanguage("Last Name"), getLanguage("Khmer")))

	Salutation 		=	SelectField(getLanguage("Salutation"),
							 choices=[('Mrs', 'Mrs'),('Mr', 'Mr'),('Miss','Miss')],
							 coerce=str)
	Gender 			=	SelectField(requiredlabel(getLanguage("Gender"),"*"),
							 choices=[('Female', 'Female'),('Male', 'Male'),('Other','Other')],
							 coerce=str,
							 validators=[validators.Required()])
	DateOfBirth 	=	DateField(requiredlabel(getLanguage("Date of Birth"), "*"),
							format='%Y-%m-%d',
							validators=[custom_DateOfBirth])

	CountryOfBirth 	=	QuerySelectField(getLanguage('Country of Birth'),query_factory=loadCountry, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='',
							 default=lambda:loadCountry('KH'),
							 validators=[validators.Required()])
	Nationality		=   QuerySelectField(getLanguage('Nationality'),query_factory=loadCountry, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text='',
							 default=lambda:loadCountry('KH'),
							 validators=[validators.Required()])
	ProvinceOfBirth =	QuerySelectField(getLanguage('Province of Birth'),query_factory=loadProvinceOfBirth, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Province--')
	DistrictOfBirth =	QuerySelectField(getLanguage('District of Birth'),query_factory=loadDistrictOfBirth, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose District--')
	CommuneOfBirth 	=	QuerySelectField(getLanguage('Commune of Birth'),query_factory=loadCommuneOfBirth, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Commune--')
	VillageOfBirth	=	QuerySelectField('Village of Birth',query_factory=loadVillageOfBirth, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Village--')
	AsGurantor 		=	SelectField(requiredlabel(getLanguage('As Guarantor'),"*"),
							 choices=[('N', 'No'),('Y', 'Yes')],
							 coerce=str,
							 validators=[validators.Required()])
	MaritalStatus 	=	SelectField(requiredlabel(getLanguage('Marital Status'),'*'),
							 choices=[('1', 'Married'),
							 		('2', 'Single'),
							 		('3','Divorced'),
							 		('4','Widow'),
							 		('5','Widower'),
							 		('6','Separated'),
							 		('7','Defacto'),
							 		('8','Unknown')],
							 coerce=str,
							 validators=[validators.Required()])
	Resident 		=	SelectField(getLanguage('Resident'),
							 choices=[('Y', 'Yes'),('N', 'No')],
							 coerce=str,
							 validators=[validators.Required()])

	Officer 		= 	QuerySelectField(requiredlabel(getLanguage('Officer'),'*'),
							query_factory=loadOfficer,
							get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()])
	EducationLevel 	=	QuerySelectField('Education Level',
								query_factory=loadEducationLevel, 
								get_label='Description',
								allow_blank=True,
								blank_text=u'--None--'
							)
	@staticmethod
	def hotSelectField():
		BaseHotSelectField = super(FRM_CUSTOMER_EX, FRM_CUSTOMER_EX).hotSelectField()
		hotfield=[]

		fielddisplay="VillageOfBirth"
		varname="CommuneID:$('#CommuneOfBirth').val()"
		fun=["CommuneOfBirth", varname ,fielddisplay, "/Morakot/VillageID", "click"]
		hotfield.append(fun)

		hotfield.extend(BaseHotSelectField)

		return hotfield
