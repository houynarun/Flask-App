from app import db
import sqlalchemy
from sqlalchemy.sql.expression 		import cast
from decimal 						import Decimal
from app.mktcore.imports 			import *
from app.AssetClass.models 			import MKT_ASSET_CLASS,MKT_ASSET_CLASS_PRO
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.ConsolBalance.models 		import MKT_CONSOL_BALANCE
from app.PD.models 					import MKT_PAST_DUE,MKT_PD_DATE
from app.Currency.models 			import MKT_CURRENCY
from app.Branch.models 				import MKT_BRANCH
from app.Journal.models 			import MKT_AIR_JOURNAL
from app.LoanAmendment.models 		import *

import app.tools.mktaccounting 		as mktaccounting
import app.tools.mktdate			as mktdate
import local.FirstFinance.tools.mktloanamendment as localmktamt
import app.tools.mktloanamendment 	as mktamt
import app.tools.mktmessage 		as mktmessage
import local.FirstFinance.tools.mktcharge 		 as ffmktcharg
# print 'starting running file'
class CLS_FF_BATCHJOB(object):
	""" Booking General NBC Provision and Addition Provision
		1. Booking General Provision
			- Reverse Previous Provision
			- Booking New Provision 1%

		2. Booking Additional Provision
			- Reverse Previous Provision
			- Reverse Previous Balance Of Additional specific provision
			- Finding Loan outstanding of PAR >= 180 days
			- Calculate amount for booking and post accounting
		How to Config: Provision & AIR
		If you aren't yet config batchjob
			$ go-vb
			$ python
			>>> 
			from local.FirstFinance.BatchJob.LocalProvision import *
			provision = CLS_FF_PROVISION()
			provision.setupProvision()
			provision.setupAIR()
	"""

	ZERO 				= float(0)
	PAR_NUMBER_OF_DAY 	= 180 # Late 180 Day

	# Transaction
	ACCR_BOOKING_TRAN 	= '19' #Accrued Interest Receivable Booking
	ACCR_REVERSE_TRAN 	= '20' #Accrued Interest Receivable Reversal
	LOAN_LOSS_TRAN 		= '21' #Loan Loss Provision Booking transaction
	REV_LOAN_LOSS_TRAN 	= '22' #Loan Loss Provision Reverse transaction
	
	# General Provision
	GEN_EXPEN_CAT 		= '67160'# General Provision Expense Category
	GEN_RESV_CAT 		= '17120'# Less Resv for General Loan Loss

	# NBC Provision
	NBC_EXPEN_CAT 		= '67110'# Bad and Doubtful Debts
	NBC_RESV_CAT 		= '17110'# (Less) Resv for Spec Loan Loss - NBC

	# Additional Specific
	ADD_EXPEN_CAT 		= '67161'# Additional Specific Provision 
	ADD_RESV_CAT 		= '17121'# (Less) Resv for Gen Loan Loss - Additional

	AIR_CONTRA_ACC 		= '251215'
	INT_CONTRA_ACC 		= '38512'
	CONTRA_NUMBER_DAY 	= 90

	def __getPAR180__(self,**kwargs):
		Branch 		= kwargs.get('Branch')
		Currency 	= kwargs.get('Currency')
		CurrencyObj = kwargs.get('CurrencyObj')

		#:2) Finding AIR of PAR >= 180 days
		# with loan outstanding > 0 and loan was disbursed
		LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.Branch == Branch).\
								filter(MKT_LOAN_CONTRACT.Currency == Currency).\
								filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
								filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
								filter(MKT_LOAN_CONTRACT.MoreThanOneYear == 'Y').\
								filter(MKT_LOAN_CONTRACT.AssetClass.in_(['0','20','30','40']))
		TotalOutstanding = 0
		for loan in LoanObj:

			LoanID = loan.ID
			#: Finding Past due of loan that bigger 
			PDObj = db.session.query(MKT_PAST_DUE.ID, MKT_PD_DATE.NumDayDue).\
									join(MKT_PD_DATE, MKT_PD_DATE.ID == MKT_PAST_DUE.ID).\
									filter( MKT_PAST_DUE.LoanID == LoanID).\
									filter(cast(MKT_PD_DATE.NumDayDue, sqlalchemy.Integer) >= self.PAR_NUMBER_OF_DAY).\
									filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
									order_by(cast(MKT_PD_DATE.NumDayDue, sqlalchemy.Integer).desc()).first()
			if PDObj:
				TotalOutstanding+= float(loan.OutstandingAmount)

		TotalOutstanding = self.__setBaseCurrenyBal__(Balance=TotalOutstanding,
							SetBaseCurrency=True,
							CurrencyObj=CurrencyObj
			)
		return TotalOutstanding


	def __setBaseCurrenyBal__(self,**kwargs):
		Balance 		= kwargs.get('Balance',0)
		SetBaseCurrency = kwargs.get('SetBaseCurrency',False)
		CurrencyObj 	= kwargs.get('CurrencyObj','')
		if SetBaseCurrency:
			if not CurrencyObj:
				raise Exception('CurrencyObj is required when you convert to local currency')
		if SetBaseCurrency:
			Balance = float(Balance) * float(CurrencyObj.ReportingRate)
		return Balance

	def __getPrevAmount__(self,**kwargs):
		Branch 		= kwargs.get('Branch')
		Currency 	= kwargs.get('Currency')
		Category 	= kwargs.get('Category')
		AssClass 	= kwargs.get('AssClass','')
		Key1 		= kwargs.get('Key1','')
		CurrencyObj 	= kwargs.get('CurrencyObj','')
		SetBaseCurrency = kwargs.get('SetBaseCurrency',False)
		FieldBalance 	= kwargs.get('FieldBalance','Balance')

		GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency,AssClass=AssClass,Key1=Key1)
		ConsoleObj = MKT_CONSOL_BALANCE.query.filter(MKT_CONSOL_BALANCE.ID == GL_KEYS,MKT_CONSOL_BALANCE.Branch == Branch).first()
		if ConsoleObj:
			Balance = float(getattr(ConsoleObj,FieldBalance))
			Balance = self.__setBaseCurrenyBal__(SetBaseCurrency=SetBaseCurrency,
											CurrencyObj=CurrencyObj,
											Balance=Balance)
			return float(Balance)
		else:
			return float(0)

	def setAIRContra(self):
		""" System will check all loan with AIR PAR > 90 and it's will perform the above procedures book the following entry 
		Formula :
			AIR / day late 				= AIR / # Days Late
			# Days Greater than 90 days = # Days Late - 90 Day
			Over Accrued 				= # Days Greater than 90 days * AIR / day late

			======== ============ ========== ============= =============== ============================ ==============
			Example | Asset Class|	AIR 	| # Days Late | AIR / day late| # Days Greater than 90 days| Over accrued|
			======== ============ ========== ============= =============== ============================ ==============
			Loan A	|	Sub std  |	$100 	|	100		  |		$1.0 	  |				10			   |	$10.0 
			Loan B	|	Doubtful |	$200 	|	120		  |		$1.7 	  |				30			   |	$50.0 
			Loan C	|	Loss loan|	$300 	|	150		  |		$2.0 	  |				60			   |	$120.0 

															Debit 			Credit
														=============	=============
		Interest in suspense-contra account PAR > 90 days	180
		AIR sub std-contra account PAR > 90 days							10
		AIR doubtful-contra account PAR > 90 days							50
		AIR loss loan-contra account PAR > 90 days							120
		+ Notes: System will booking only loan more than one year.
		* Code Guiline:

		"""
		Note = ""
		TransactionDate = str(mktdate.getBankDate())
		Reference = "AIR90-%s" %str(TransactionDate).replace("-", "")
		QueryBranch 	= MKT_BRANCH.query.order_by(MKT_BRANCH.ID.asc())
		QueryCurrency 	= MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())
		DictClass 		= {'0':'Standard Loan','20':'Sub-Standard Loan','30':'Doubtful Loan','40':'Loss loan'}
		for BranchObj in QueryBranch:
			Branch = BranchObj.ID
			for CurrencyObj in QueryCurrency:
				Currency = CurrencyObj.ID
				AssetClassObj = ['0','20','30','40']
				for AssClass in AssetClassObj:
					Key1 = 'Y'
					PrevAmount 	= self.__getPrevAmount__(Branch=Branch,
														Currency=Currency,
														AssClass=AssClass,
														Key1=Key1,
														Category=self.AIR_CONTRA_ACC)
					if PrevAmount:
						#: Booking reverse previous amount (Yesterday)
						for i in range(0, 2):
							if i == 0:
								DrCr 		= 	"Dr"
								Mode 		= 	"Direct"
								Category 	= 	self.AIR_CONTRA_ACC
								GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency,AssClass=AssClass,Key1=Key1)
							else:
								Category 	= 	self.INT_CONTRA_ACC
								DrCr 		= 	"Cr"
								Mode 		= 	"Direct"
								GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)

							Transaction = self.ACCR_REVERSE_TRAN
							
							DateTimeNow = mktdate.getDateTimeNow()
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								DateTimeNow, 			# Createdon
								"System",				# Authorizer
								DateTimeNow,			# Authorizeon
								"", 					# AEID
								"",						# Account
								Category,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								Decimal(PrevAmount), 	# Amount
								"JE",					# Module
								Transaction, 			# Transaction
								TransactionDate, 		# TransactionDate
								Reference, 				# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
							)
						
						PrevAmount  = mktmoney.toMoney(float(PrevAmount),CurrencyObj)
						print Branch,'Reverse AIR Contra account amount :',Currency,PrevAmount

					#:2) Finding AIR of PAR > 90 days
					# with loan outstanding > 0 and loan was disbursed
					LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.Branch == Branch).\
											filter(MKT_LOAN_CONTRACT.Currency == Currency).\
											filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
											filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
											filter(MKT_LOAN_CONTRACT.AssetClass == AssClass).\
											filter(MKT_LOAN_CONTRACT.MoreThanOneYear == Key1)
					TotalAccrInterest = 0
					for loan in LoanObj:

						LoanID = loan.ID
						#: Finding Past due of loan that bigger 
						PDObj = db.session.query(MKT_PAST_DUE.ID, MKT_PD_DATE.NumDayDue, MKT_PD_DATE.DueDate).\
												join(MKT_PD_DATE, MKT_PD_DATE.ID == MKT_PAST_DUE.ID).\
												filter( MKT_PAST_DUE.LoanID == LoanID).\
												filter(cast(MKT_PD_DATE.NumDayDue, sqlalchemy.Integer) > self.CONTRA_NUMBER_DAY).\
												filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
												order_by(cast(MKT_PD_DATE.NumDayDue, sqlalchemy.Integer).desc()).first()

						if PDObj:
							#: Block Calculate Amount Number Of Days Greater than 90 days
							NumDayDue 	= float(PDObj.NumDayDue)
							DueDate 	= PDObj.DueDate
							#: Add 90 Day after Due Date
							DayStart 	= str(mktdate.getNextDay(DueDate,self.CONTRA_NUMBER_DAY))
							DayEnd 		= str(TransactionDate)
							AIRObj 		= db.session.query(func.sum(MKT_AIR_JOURNAL.Amount).label('OverAccrued')).\
															filter(MKT_AIR_JOURNAL.DebitCredit == "Dr").\
															filter(MKT_AIR_JOURNAL.TransactionDate.between(str(DayStart), DayEnd)).\
															filter(MKT_AIR_JOURNAL.Reference == LoanID).first()
							OverAccrued = 0
							if AIRObj.OverAccrued:
								OverAccrued = float(AIRObj.OverAccrued)

							StrOverAccrued = mktmoney.toMoney(float(OverAccrued),CurrencyObj)

							TotalAccrInterest += OverAccrued
							# print LoanID,'Day late',DueDate
							# print LoanID,'# Days Late',NumDayDue
							# print LoanID,'Start Days Greater than 90 days',DayStart
							# print LoanID,'Over accrued',StrOverAccrued
							# print ''

					StrTotalAccrInterest = mktmoney.toMoney(float(TotalAccrInterest),CurrencyObj)
					TotalAccrInterest = float(str(StrTotalAccrInterest).replace(',',''))

					#: Booking reverse previous amount (Yesterday)
					if TotalAccrInterest > 0:
						for i in range(0, 2):
							if i == 0:
								DrCr 		= 	"Dr"
								Mode 		= 	"Direct"
								Category 	= 	self.INT_CONTRA_ACC # 
								GL_KEYS 	= 	mktaccounting.getConsolKey(Category, Currency)

							else:
								Category 	= 	self.AIR_CONTRA_ACC # 
								DrCr 		= 	"Cr"
								Mode 		= 	"Direct"
								GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency, AssClass=AssClass, Key1=Key1)

							Transaction = self.ACCR_BOOKING_TRAN
							DateTimeNow = mktdate.getDateTimeNow()
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								DateTimeNow, 			# Createdon
								"System",				# Authorizer
								DateTimeNow,			# Authorizeon
								"", 					# AEID
								"",						# Account
								Category,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								Decimal(TotalAccrInterest), 	# Amount
								"JE",					# Module
								Transaction, 			# Transaction
								TransactionDate, 		# TransactionDate
								Reference, 				# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
							)
					
						print Branch,'Over Accrued Interest',DictClass.get(AssClass),':' ,Currency, StrTotalAccrInterest

	def setGeneralPro(self):
		""" Booking General NBC provision 1% base on total loan Outstanding Amount
		* Code Guiline:
		1) Reverse Previous Balance Of General NBC provision
		2) Finding Total Loan outstanding 
		3) Calculate amount for booking and post accounting
		"""
		print 'General NBC provision...'
		Note = "General NBC provision"
		TransactionDate = str(mktdate.getBankDate())
		Reference = "GEN%s" %str(TransactionDate).replace("-", "")
		QueryBranch 	= MKT_BRANCH.query.order_by(MKT_BRANCH.ID.asc())
		QueryCurrency 	= MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())

		for BranchObj in QueryBranch:
			Branch = BranchObj.ID
			for CurrencyObj in QueryCurrency:
				Currency = CurrencyObj.ID

				PrevAmount 	= self.__getPrevAmount__(Branch=Branch,
													Currency=Currency,
													Category=self.GEN_RESV_CAT,
													FieldBalance="CurrentMonthBal")
				if PrevAmount:
					#: Booking reverse previous amount (Yesterday)
					for i in range(0, 2):
						if i == 0:
							DrCr 		= 	"Dr"
							Mode 		= 	"Direct"
							# Less Resv for General Loan Loss
							Category 	= 	self.GEN_RESV_CAT if PrevAmount > 0 else self.GEN_EXPEN_CAT
						else:
							# General Provision Expense
							Category 	= 	self.GEN_EXPEN_CAT if PrevAmount > 0 else self.GEN_RESV_CAT
							DrCr 		= 	"Cr"
							Mode 		= 	"Direct"

						Amount = abs(PrevAmount)
						Transaction = self.REV_LOAN_LOSS_TRAN
						GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
						DateTimeNow = mktdate.getDateTimeNow()
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							"",						# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							Decimal(Amount), 	# Amount
							"JE",					# Module
							Transaction, 			# Transaction
							TransactionDate, 		# TransactionDate
							Reference, 				# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
						)
					
					Amount  = mktmoney.toMoney(float(Amount),CurrencyObj)
					print Branch,'Reverse General provision amount :',Currency,Amount

				"""
				# with loan outstanding > 0 and loan was disbursed  
				LoanObj = db.session.query(func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Outstanding')).\
											filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
											filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
											filter(MKT_LOAN_CONTRACT.Branch == Branch).\
											filter(MKT_LOAN_CONTRACT.Currency == Currency).first()

				if LoanObj.Outstanding:
					TotalOutstanding = float(LoanObj.Outstanding)
					#: Convert to 1% of loan outstanding
					Outstanding = (TotalOutstanding * float(1)) /100
					Amount = mktmoney.toMoney(Outstanding,CurrencyObj)
					Amount = float(str(Amount).replace(',',''))
					
					#: Booking new amount (Today)
					for i in range(0, 2):
						if i == 0:
							DrCr 		= 	"Dr"
							Mode 		= 	"Direct"
							Category 	= 	self.GEN_EXPEN_CAT # General Provision Expense

						else:
							DrCr 		= 	"Cr"
							Mode 		= 	"Direct"
							Category 	= 	self.GEN_RESV_CAT # Less Resv for General Loan Loss
						Transaction = self.LOAN_LOSS_TRAN
						GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
						DateTimeNow = mktdate.getDateTimeNow()
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							"",						# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							Decimal(Amount), 		# Amount
							"JE",					# Module
							Transaction, 			# Transaction
							TransactionDate, 		# TransactionDate
							Reference, 				# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
						)

					Amount  	= mktmoney.toMoney(Amount,CurrencyObj)
					print Branch,'Booking General provision amount :',Currency,Amount
				"""

	def setAdditionPro(self):
		""" Booking Addition specific provision of First Finanace 
		* How to calculate
		Additional specific provision is calculated as the higher of 
		1) loan outstanding of PAR >= 180 days or 
		2) NBC provision + general provision
			> System will not book additional specific provision if PAR >=180 days is lower 
			 than General provision + NBC provision.
			> System will accrue additional specific provision at the end of each day,
			 but it will be reversed in the following day.
		* Code Guiline:
		1) Reverse Previous Balance Of Additional specific provision
		2) Finding Loan outstanding of PAR >= 180 days
		3) Calculate amount for booking and post accounting
		"""
		print '\nAddition specific provision...'
		Note = "Addition provision"
		TransactionDate = str(mktdate.getBankDate())
		Reference = "ADD%s" %str(TransactionDate).replace("-", "")
		QueryBranch 	= MKT_BRANCH.query.order_by(MKT_BRANCH.ID.asc())
		QueryCurrency 	= MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc())

		for BranchObj in QueryBranch:
			Branch = BranchObj.ID
			TotalOutstanding 	= 0
			GeneralPro 			= 0
			NBCPro 				= 0
			for CurrencyObj in QueryCurrency:
				Currency = CurrencyObj.ID

				#:1) Reverse Previous Balance Of Additional specific provision
				PrevAmount 	= self.__getPrevAmount__(Branch=Branch,
													Currency=Currency,
													Category=self.ADD_RESV_CAT,
													FieldBalance="CurrentMonthBal")
				if PrevAmount:
					#: Booking reverse previous amount (Yesterday)
					for i in range(0, 2):
						if i == 0:
							DrCr 		= 	"Dr"
							Mode 		= 	"Direct"
							# Additional Specific Provision
							Category 	= 	self.ADD_RESV_CAT if PrevAmount > 0 else self.ADD_EXPEN_CAT
						else:
							# (Less) Resv for Gen Loan Loss - Additional
							Category 	= 	self.ADD_EXPEN_CAT if PrevAmount > 0 else self.ADD_RESV_CAT
							DrCr 		= 	"Cr"
							Mode 		= 	"Direct"

						Amount = abs(PrevAmount)
						Transaction = self.REV_LOAN_LOSS_TRAN
						GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
						DateTimeNow = mktdate.getDateTimeNow()
						mktaccounting.postAccounting(
							"AUTH", 				# Status
							"0", 					# Curr
							"System",				# Inputter
							DateTimeNow, 			# Createdon
							"System",				# Authorizer
							DateTimeNow,			# Authorizeon
							"", 					# AEID
							"",						# Account
							Category,				# Category
							Currency,				# Currency
							DrCr,					# DrCr
							Decimal(Amount), 	# Amount
							"JE",					# Module
							Transaction, 			# Transaction
							TransactionDate, 		# TransactionDate
							Reference, 				# Reference
							Note, 					# Note
							"", 					# JNID
							Branch,					# Branch
							GL_KEYS,				# GL_KEYS
							Mode, 					# Mode check to insert Journal for category
						)
					
					Amount  = mktmoney.toMoney(float(Amount),CurrencyObj)
					print Branch,'Reverse addition provision amount:',Currency,Amount 
				"""
				GeneralPro 	+= float(self.__getPrevAmount__(Branch=Branch,
													Currency=Currency,
													Category=self.GEN_RESV_CAT,
													SetBaseCurrency=True,
													CurrencyObj=CurrencyObj))

				NBCPro 		+= float(self.__getPrevAmount__(Branch=Branch,
													Currency=Currency,
													Category=self.NBC_RESV_CAT,
													SetBaseCurrency=True,
													CurrencyObj=CurrencyObj))

				TotalOutstanding += float(self.__getPAR180__(Branch=Branch,
												Currency=Currency,
												CurrencyObj=CurrencyObj))
			if TotalOutstanding > 0:
				Currency 	= 'USD'
				CurrencyObj = MKT_CURRENCY.query.get(Currency)
				#Round Total Additional
				StrTotalOutstanding = mktmoney.toMoney(float(TotalOutstanding),CurrencyObj)
				TotalOutstanding = float(str(StrTotalOutstanding).replace(',',''))

				#Round Total NBC and General
				TotalNBCPro = float(GeneralPro) + float(NBCPro)
				StrTotalNBCPro = mktmoney.toMoney(float(TotalNBCPro),CurrencyObj)
				TotalNBCPro = float(str(StrTotalNBCPro).replace(',',''))

				print Branch,'Amount General provision       :',Currency,  mktmoney.toMoney(float(GeneralPro),CurrencyObj)
				print Branch,'Amount Specific provision      :',Currency,  mktmoney.toMoney(float(NBCPro),CurrencyObj)
				print '                                   ','--------------------\n',
				print Branch,'Total NBC provision            :',Currency, StrTotalNBCPro
				print Branch,'Amount Outstanding PAR > 180   :',Currency, StrTotalOutstanding
				if TotalNBCPro < TotalOutstanding:
					
					AdditionalAmt = TotalOutstanding - TotalNBCPro
					
					#: Booking reverse previous amount (Yesterday)
					if AdditionalAmt > 0:
						for i in range(0, 2):
							if i == 0:
								DrCr 		= 	"Dr"
								Mode 		= 	"Direct"
								Category 	= 	self.ADD_EXPEN_CAT # (Less) Resv for Gen Loan Loss - Additional
							else:
								Category 	= 	self.ADD_RESV_CAT # Additional Specific Provision
								DrCr 		= 	"Cr"
								Mode 		= 	"Direct"

							Transaction = self.LOAN_LOSS_TRAN
							GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
							DateTimeNow = mktdate.getDateTimeNow()
							mktaccounting.postAccounting(
								"AUTH", 				# Status
								"0", 					# Curr
								"System",				# Inputter
								DateTimeNow, 			# Createdon
								"System",				# Authorizer
								DateTimeNow,			# Authorizeon
								"", 					# AEID
								"",						# Account
								Category,				# Category
								Currency,				# Currency
								DrCr,					# DrCr
								Decimal(AdditionalAmt), 	# Amount
								"JE",					# Module
								Transaction, 			# Transaction
								TransactionDate, 		# TransactionDate
								Reference, 				# Reference
								Note, 					# Note
								"", 					# JNID
								Branch,					# Branch
								GL_KEYS,				# GL_KEYS
								Mode, 					# Mode check to insert Journal for category
							)
						
					AdditionalAmt  = mktmoney.toMoney(float(AdditionalAmt),CurrencyObj)
					print Branch,'Booking addition provision     :',Currency,AdditionalAmt
					print Branch,'Outstanding PAR > 180 bigger than total NBC provision.'
				else:
					
					print Branch,'No addition booking amount     :',Currency,0
					print Branch,'Outstanding PAR > 180 smaller than total NBC provision.'
				"""


	def setStandardProvisioning(self, Reverse=False):
		ListLoanExclude = [	'LCM0000003024',
							'LC18020600076',
							'LCM1703151663',
							'LCM1703171667',
							'LCM0150714528',
							'LCM0000003204',
							'LCM0000003205',
							'LCM1604041406']

		LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.AssetClass.in_(['0','10'])).\
										filter(MKT_LOAN_CONTRACT.OutstandingAmount >0).\
										filter(MKT_LOAN_CONTRACT.DisbursedStat =="Y").\
										filter(~MKT_LOAN_CONTRACT.ID.in_(ListLoanExclude)).\
										order_by(MKT_LOAN_CONTRACT.Branch.asc(),MKT_LOAN_CONTRACT.ID.asc())
		No =1
		Note = "Provision category was changed"
		TransactionDate = str(mktdate.getBankDate())
		
		for row in LoanObj:
			ID = row.ID
			Reference = ID
			Branch = row.Branch
			AssetClass = row.AssetClass
			OutstandingAmount = float(row.OutstandingAmount)
			Amount = (OutstandingAmount * float(1))/100
			Currency = row.Currency

			for i in range(0, 2):
				if i == 0:
					DrCr 		= 	"Dr"
					Mode 		= 	"Direct"
					Category 	= 	"67110" # Bad and Doubful Debts
					if Reverse:
						Category= self.GEN_EXPEN_CAT
				else:
					DrCr 		= 	"Cr"
					Mode 		= 	"Direct"
					Category 	= 	"17110" # Less Resv for Spec Loan Loss - NBC
					if Reverse:
						Category= self.GEN_RESV_CAT

				Transaction = self.LOAN_LOSS_TRAN
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
				DateTimeNow = mktdate.getDateTimeNow()
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TransactionDate, 		# TransactionDate
					Reference, 				# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
				)
			
			mkt = '{0:5} {1:5} {2:5} {3:5} {4:>10} {5:>10}'
			print mkt.format( No, Branch, ID, AssetClass, OutstandingAmount, Amount)
			No+=1


	def setFixWrongProvisionCat(self):
		ListLoanExclude = [	'LCM0000003024',
							'LC18020600076',
							'LCM1703151663',
							'LCM1703171667',
							'LCM0150714528',
							'LCM0000003204',
							'LCM0000003205',
							'LCM1604041406']

		DictLoan 		= {'LCM0000003024':69.4383,
							'LC18020600076':4.494600000,
							'LCM1703151663':146.271600000,
							'LCM1703171667':110.692400000,
							'LCM0150714528':96.322300000,
							'LCM0000003204':139.712000000,
							'LCM0000003205':45.522600000,
							'LCM1604041406':261.223900000}

		DictLoanBranch 	= {'LCM0000003024':'BM',
							'LC18020600076':'HO',
							'LCM1703151663':'BB',
							'LCM1703171667':'BB',
							'LCM0150714528':'BB',
							'LCM0000003204':'BB',
							'LCM0000003205':'BB',
							'LCM1604041406':'RK'}
		
		No =1
		Note = "Provision category was changed"
		TransactionDate = str(mktdate.getBankDate())
		
		for row in ListLoanExclude:
			ID = row
			Reference = ID
			Branch = DictLoanBranch.get(row)
			Currency = "USD"
			Amount = DictLoan.get(ID)
			if not Amount:
				raise Exception('Cannot find loan',ID)

			for i in range(0, 2):
				if i == 0:
					DrCr 		= 	"Dr"
					Mode 		= 	"Direct"
					Category 	= 	"67110" # Bad and Doubful Debts

				else:
					DrCr 		= 	"Cr"
					Mode 		= 	"Direct"
					Category 	= 	"17110" # Less Resv for Spec Loan Loss - NBC

				Transaction = self.LOAN_LOSS_TRAN
				GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
				DateTimeNow = mktdate.getDateTimeNow()
				mktaccounting.postAccounting(
					"AUTH", 				# Status
					"0", 					# Curr
					"System",				# Inputter
					DateTimeNow, 			# Createdon
					"System",				# Authorizer
					DateTimeNow,			# Authorizeon
					"", 					# AEID
					"",						# Account
					Category,				# Category
					Currency,				# Currency
					DrCr,					# DrCr
					Decimal(Amount), 		# Amount
					"LC",					# Module
					Transaction, 			# Transaction
					TransactionDate, 		# TransactionDate
					Reference, 				# Reference
					Note, 					# Note
					"", 					# JNID
					Branch,					# Branch
					GL_KEYS,				# GL_KEYS
					Mode, 					# Mode check to insert Journal for category
				)

				for i in range(0, 2):
					if i == 0:
						DrCr 		= 	"Dr"
						Mode 		= 	"Direct"
						Category 	= 	self.GEN_RESV_CAT

					else:
						DrCr 		= 	"Cr"
						Mode 		= 	"Direct"
						Category 	= 	self.GEN_EXPEN_CAT

					Transaction = self.LOAN_LOSS_TRAN
					GL_KEYS 	= mktaccounting.getConsolKey(Category, Currency)
					DateTimeNow = mktdate.getDateTimeNow()
					mktaccounting.postAccounting(
						"AUTH", 				# Status
						"0", 					# Curr
						"System",				# Inputter
						DateTimeNow, 			# Createdon
						"System",				# Authorizer
						DateTimeNow,			# Authorizeon
						"", 					# AEID
						"",						# Account
						Category,				# Category
						Currency,				# Currency
						DrCr,					# DrCr
						Decimal(Amount), 		# Amount
						"LC",					# Module
						Transaction, 			# Transaction
						TransactionDate, 		# TransactionDate
						Reference, 				# Reference
						Note, 					# Note
						"", 					# JNID
						Branch,					# Branch
						GL_KEYS,				# GL_KEYS
						Mode, 					# Mode check to insert Journal for category
					)

			mkt = '{0:5} {1:5} {2:5} {3:5}'
			print mkt.format( No, Branch, ID, Amount)
			No+=1

		
	def __validate__(self):
		from app.BatchJob.models import MKT_BATCH_JOB
		BatchJob = MKT_BATCH_JOB.query.filter(MKT_BATCH_JOB.Tool=='LocalProvision').first()
		if not BatchJob:
			return False,'Missing batchjob local provision. Please running setup to configuration'
		else:
			return True,''

	def setupProvision(self):
		from app.BatchJob.models import MKT_BATCH_JOB
		NextRunDate = str(mktdate.getBankDate())
		DateTimeNow = mktdate.getDateTimeNow()
		ObjInsert = MKT_BATCH_JOB.query.get('14')
		if not ObjInsert:
			Dict = {
					'Status':'AUTH',
					'Branch':'HO',
					'Curr':'0',
					'Inputter':'System',
					'Createdon':DateTimeNow,
					'Authorizer':'System',
					'Authorizeon':DateTimeNow,
					'ID':'14',
					'Description':'Local Provision',
					'Tool':'LocalProvision',
					'JobStatus':'1',
					'Frequency':'01D',
					'Enable':'Yes',
					'Order':'9',
					'Dependency':'',
					'NextRunDate':NextRunDate
			}
			ObjInsert 	= MKT_BATCH_JOB(**Dict)
			db.session.add(ObjInsert)
			print 'Prepare install batchjob...'
			print 'Batch job local provision was install sucessfully.'
			db.session.commit()

	def setupAIR(self):
		from app.BatchJob.models import MKT_BATCH_JOB
		NextRunDate = str(mktdate.getBankDate())
		DateTimeNow = mktdate.getDateTimeNow()
		ObjInsert = MKT_BATCH_JOB.query.get('15')
		if not ObjInsert:
			Dict = {
					'Status':'AUTH',
					'Branch':'HO',
					'Curr':'0',
					'Inputter':'System',
					'Createdon':DateTimeNow,
					'Authorizer':'System',
					'Authorizeon':DateTimeNow,
					'ID':'15',
					'Description':'Local Accrual >90',
					'Tool':'LocalAIR',
					'JobStatus':'1',
					'Frequency':'01D',
					'Enable':'Yes',
					'Order':'7',
					'Dependency':'',
					'NextRunDate':NextRunDate
			}
			ObjInsert 	= MKT_BATCH_JOB(**Dict)
			db.session.add(ObjInsert)
			print 'Prepare install batchjob...'
			print 'Batch job local AIR >90 was install sucessfully.'
			db.session.commit()

	def startAIR(self):
		""" Starting provision of First Finance
		1. Booking Accrued Interest Receivable > 90 Day
		"""
		print 'AIR Contra account PAR > 90 days...'
	
		#: Call Accrued Interest
		self.setAIRContra()

		db.session.commit()
		print 'Done...'
	

	def startProvision(self):
		""" Starting provision of First Finance
		1. Booking General Provision
		2. Booking Addition Provision
		"""
		print 'First Finance Provision...'
		ValidationRunning = self.__validate__()
		if ValidationRunning[0]:

			self.setFixWrongProvisionCat()

			self.setStandardProvisioning(Reverse=True)

			#: Call General Provision
			self.setGeneralPro()

			#: Call Addition Provision
			self.setAdditionPro()

			self.setStandardProvisioning()
			
			# db.session.commit()

			print 'Done...'
			print "Don't forget commit"
		else:
			print ValidationRunning[1]

	def loanAmendFuture(self):
		"""
		Definition:
			this function use in EOD process of loan amend future. 
		"""
		try:
			SystemBankDate 	=	mktdate.getBankDate()
			AmendObj 		=	MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.AmendDate==str(SystemBankDate),
															MKT_LOAN_AMENDMENT.AmendmentStat=="N")
			if AmendObj:
				for Row in AmendObj:
					ID  		=	Row.ID
					LoanID 		=	Row.LoanID
					AmendDate  	=	Row.AmendDate
					if str(AmendDate)== str(SystemBankDate):
						ffmktcharg.updateAdmendmentCharge(ID)
						ffmktcharg.updateLoanChargeAfterAmement(ID)
					localmktamt.updateApprovedAmount(ID)
					mktamt.getLoanAmendment(ID=ID,Date = AmendDate)
		except Exception as e:
			db.session.rollback()
			raise 
		
		
# print 'Finish running file'
#from local.FirstFinance.BatchJob.LocalProvision import *
#from local.FirstFinance.BatchJob.LocalAIR import *
#ff.startAIR()
