from app.mktcore.wtfimports 						import *
from app.IdType.models 								import *
from app.tools.mktroute 							import *
from app.Customer.models 							import *
from app.CollateralType.models 						import *
from app.Currency.models 							import *
from local.FirstFinance.FollowUp.models 			import *
from local.FirstFinance.FollowUp.forms 				import *
from local.FirstFinance.FollowUpCard.models 		import *

import app.tools.mktdb 								as mktdb

# Load Customer who already has followup card and in current Branch
def loadCustomer(ID=""):
	CurrentBranch = mktuser.getCurrentBranch()
	CustomerObj = MKT_CUSTOMER.query.\
					filter(MKT_CUSTOMER.Branch==CurrentBranch)

	if ID:
		CustomerObj = CustomerObj.filter(MKT_CUSTOMER.ID == ID).first()

	return CustomerObj

def loadFollowUpCard(CardID=""):
	REVIEW_SURVEY 	=	"2"
	CurrentBranch 	= 	mktuser.getCurrentBranch()
	CardObj 		=	MKT_FOLLOWUP_CARD.query.filter(MKT_FOLLOWUP_CARD.NextReviewType == REVIEW_SURVEY)
	if CardID:
		CardObj		=	CardObj.filter(MKT_FOLLOWUP_CARD.ID == CardID).first()
	return CardObj

def getDefaultValue(CardID="",Field=""):
	Value = ""
	if CardID:
		CardObj = MKT_FOLLOWUP_CARD.query.get(CardID)
		if CardObj:
			Value = getattr(CardObj, Field)

	return Value

def loadCollateralType():
	return MKT_COLLATERAL_TYPE.query

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

@app.route("/Morakot/getReview",methods=['GET'])
def getReview():
	CardID  	= request.args.get('CardID')
	ReviewDate	= ''
	Description	= ''
	Customer	= ''
	CustomerID	= ''

	if CardID !='__None':

		CardObj = MKT_FOLLOWUP_CARD.query.\
				  					filter(MKT_FOLLOWUP_CARD.ID==CardID).\
				  					first()
		if CardObj:
			ReviewDate = CardObj.NextFollowUpDate
			Description = CardObj.ActionPlan

			CustomerObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID==CardObj.CustomerID).first()

			Customer = "%s - %s %s" %(CustomerObj.ID,CustomerObj.LastNameEn,CustomerObj.FirstNameEn)
			CustomerID = CustomerObj.ID

			return jsonify(ReviewDate=ReviewDate,
						   Description=Description,
						   Customer=Customer,
						   CustomerID=CustomerID)
		else:
			return ''
	return ''

def CustomerCard(CustomerID, ReviewType):
	dic 		 = {}
	result 		 = MKT_FOLLOWUP_CARD.query.\
									filter(~MKT_FOLLOWUP_CARD.ID.in_(db.session.query(MKT_FOLLOWUP.CardID).filter(MKT_FOLLOWUP.ReviewType==ReviewType))).\
									filter(MKT_FOLLOWUP_CARD.CustomerID == CustomerID).\
									filter(MKT_FOLLOWUP_CARD.NextReviewType==ReviewType).\
									all()
	if result:
		for row in result:
			dic[row.ID] = '%s - %s' %(row.ID,row.NextFollowUpDate)
		print "Dic: ", dic
	return jsonify(results=dic)

@app.route("/Morakot/getCustomerReviewCard", methods=['GET'])
def getCustomerReviewCard():
	CustomerID 	 = request.args.get('CustomerID') if 'CustomerID' in request.args else ''
	return CustomerCard(CustomerID,'2')

class FRM_FOLLOWUP_REVIEW(exform):

	CustomerID 				= 		QuerySelectField(requiredlabel("Customer","*"),
										query_factory=loadCustomer,
										get_label=lambda a: a.ID + ' - ' + a.LastNameEn + " " + a.FirstNameEn,
										allow_blank=True,
										blank_text=u'--None--',
										default=lambda:loadCustomer(getDefaultValue(request.args.get("CardID") if 'CardID' in request.args else "","CustomerID")),
										validators=[validators.Required()]
									)

	CardID 					= 		QuerySelectField("Followup Card",
										query_factory=loadFollowUpCard,
										get_label=lambda a: a.ID + ' - ' + a.NextFollowUpDate,
										allow_blank=True,
										blank_text=u'--None--',
										default=lambda:loadFollowUpCard(request.args.get("CardID") if 'CardID' in request.args else ""),
									)

	ReviewDate 				= 		DateField(requiredlabel('Review Date','*'),
										format='%Y-%m-%d',
										default=lambda: mktdate.getDateISO(getDefaultValue(request.args.get("CardID") if 'CardID' in request.args else "","NextFollowUpDate")),
										validators=[validators.Required()])

	ReviewType 				= 		SelectField(requiredlabel('Review Type','*'),
										choices		=	[	('1', '1 - Client Survey'),
															('2', '2 - Client Review'),
															('3', '3 - PAR Folow Up'),
															('4', '4 - Other')
														],
										default="2",
										validators  =	[validators.Required()]
									)
	
	Description 			= 		TextAreaField(requiredlabel('Description','*'),
										default=lambda: getDefaultValue(request.args.get("CardID") if 'CardID' in request.args else "2","ActionPlan"),
									)

	# Review

	# -- Added New Feilds
	HouseHold 				= 		TextField(requiredlabel('Household Member','*'),
										validators=[validators.Required()],
										description="1-Review"

									)

	EmpType 				= 		SelectField(requiredlabel('Employment Type',"*"),
										 choices=[('C', 'Current'),('P','Previous')],
										 coerce=str,
										 validators=[validators.Required()],
										 description="1-Review"
									 )

	Employer 				= 		TextField(requiredlabel('Employer / Business','*'),
										validators=[validators.Required()],
										description="1-Review"
									)

	Currency 				= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
										query_factory=loadCurrency,
										get_label=u'ID',
										allow_blank=True,
										blank_text=u'--%s--' %getLanguage("None"),
										default=lambda:loadCurrency('USD'),
										validators=[validators.Required()],
										description="1-Review"
									)

	Income 					= 		TextField(requiredlabel('Income','*'),
										validators=[validators.Required()],
										description="1-Review"
									)

	TotExpense 				= 		TextField(requiredlabel('Total Expenses','*'),
										validators=[validators.Required()],
										description="1-Review"
									)

	UseLoan 				= 		TextField(requiredlabel('Usage of Loan','*'),
										validators=[validators.Required()],
										description="1-Review"
									)

	ValCol 					= 		TextField(requiredlabel('Value of Collateral','*'),
										validators=[validators.Required()],
										description="1-Review"
									)

	ColType 					= 		TextField(requiredlabel('Collateral Type','*'),
										validators=[validators.Required()],
										description="1-Review"
									)
	# -- ./ Added New Fields

	Satisfaction 			= 		SelectField(requiredlabel('Client Satifaction','*'),
										choices=[('', '--None--'), 
												  ('1','1 - Highly Satified'),
												  ('2','2 - Satifield'),
												  ('3','3 - Not Satified'),
												  ('4','4 - Very Un-Satified')],
										validators=[validators.Required()],
										description="1-Review"
									)

	Score 					= 		SelectField(requiredlabel('Client Score','*'),
										choices=[('', '--None--'),
												('1','1 - Good Client'),
												('2','2 - High Commitment but Low Capacity'),
												('3','3 - Low Commitment but with Acceptable Capacity'),
												('4','4 - Low Commitment and Low Capacity')],
										validators=[validators.Required()],
										description="1-Review"
									)

	ClientComment 			= 		TextAreaField('Client Comment',
										description="1-Review"
								)

	CROComment 			 	= 		TextAreaField('CRO Comment',
										description="1-Review"
								)

	Iframe 					= 		MKTIframe("View Followup Detail",
										dicIframe={'width':'100%','height':'730px','frameborder':'0'},
										description='2-Detail')


	def validate_CardID(form, field):
		CardID 			= 	request.form['CardID']
		ID 				= 	request.form["ID"]
		FollowUpObj 	= 	MKT_FOLLOWUP.query.\
										filter(MKT_FOLLOWUP.CardID == CardID,
											   MKT_FOLLOWUP.ID != ID).first()
		if FollowUpObj:
			FollowUpID = FollowUpObj.ID
			raise ValidationError(Markup("This Follow Up Card %s is already used. Please use this record \
								<a href='javascript:void(0)' onClick=CustomClickView('FollowUpReview-%s','FollowUpReview/?ID=%s')> %s</a>"\
								%(CardID,FollowUpID,FollowUpID,FollowUpID)))


	@staticmethod
	def urlParam():
		ID = request.args.get('FollowupID') if 'FollowupID' in request.args else ' '
		dicParam =''
		# if ID:
		dicParam= [{"IframeName":"Iframe", "iframeUrl":"/Morakot/FollowUpDetail/"+ID,'Resource' : 'Status'}]

		return dicParam

	@staticmethod
	def formatMoney():

		return ["Income","TotExpense","ValCol"], "Currency"

	@staticmethod
	def moneyField():
		controls_list 	= [	("Income", "Currency"), ("TotExpense", "Currency"), ("ValCol", "Currency")]
		return controls_list

	@staticmethod
	def setWidth():
		controls_list 	= [	("IssueDate",len3),
							("ExpiryDate",len3),
							("IssueDate2",len3),
							("ExpiryDate2",len3)]
		return controls_list

	@staticmethod
	def listField():

		Fields = ["ID", "CardID", "CustomerID", "ReviewType", "ReviewDate","Description"]
		# return Fields
		return Fields, ["ID*LK*CFR"]

	@staticmethod
	def setDisable():
		control_list = [('ReviewType')]
		return control_list

	@staticmethod
	def hotField():
		hotfield 		 = []

		fielddisplay 	  = "$('#CustomerID').select2('data', {'id':data.CustomerID,'text':data.Customer});"
		fielddisplay 	 += "$('#ReviewDate').val(data.ReviewDate);"
		fielddisplay 	 += "$('#Description').val(data.Description);"
		varname 		  = "CardID:$('#CardID').val()"
		fun 			  = ["CardID",varname,fielddisplay,"/Morakot/getReview","change"]
		hotfield.append(fun)

		
		# hotfield.append(fielddisplay)

		# fielddisplay	  = "$('#CardID').select2('data',{'id':data.CardID,'text':data.Card}).trigger('change');"
		# fielddisplay 	 += "$('#ReviewDate').val(data.ReviewDate);"
		# fielddisplay 	 += "$('#Description').val(data.Description);"

		# varname 		  = "CustomerID:$('#CustomerID').val()"
		# fun 			  = ["CustomerID",varname,fielddisplay,"/Morakot/getCustomerID","change"]
		# hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotSelectField():
		hotfield 		= []
		fielddisplay 	= "CardID"
		varname 		= "CustomerID:$('#CustomerID').val()"
		fun 			= ['CustomerID',varname,fielddisplay,'/Morakot/getCustomerReviewCard','change']
		hotfield.append(fun)
		return hotfield
