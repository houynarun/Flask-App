from app.mktcore.wtfimports 					import *
from app.IdType.models 							import *
from app.tools.mktroute 						import *
from local.FirstFinance.FollowUp.models 		import *
from local.FirstFinance.FollowUpCard.models 	import *

import app.tools.mktdb 							as mktdb


# Load Customer who already has followup card and in current Branch
def loadCustomer(ID=""):
	CurrentBranch = mktuser.getCurrentBranch()
	CustomerObj = MKT_CUSTOMER.query.\
					filter(MKT_CUSTOMER.Branch==CurrentBranch)
	if ID:
		CustomerObj = CustomerObj.filter(MKT_CUSTOMER.ID == ID).first()
	return CustomerObj

def loadFollowUpCard(CardID=""):
	REVIEW_PAR 		=	"3"
	CurrentBranch 	= 	mktuser.getCurrentBranch()
	CardObj 		=	MKT_FOLLOWUP_CARD.query.filter(MKT_FOLLOWUP_CARD.NextReviewType == REVIEW_PAR)
	if CardID:
		CardObj		=	CardObj.filter(MKT_FOLLOWUP_CARD.ID == CardID).first()
	return CardObj

def getDefaultValue(CardID="",Field=""):
	Value = ""
	if CardID:
		CardObj = MKT_FOLLOWUP_CARD.query.get(CardID)
		if CardObj:
			Value = getattr(CardObj, Field)
	return Value

def CustomerCard(CustomerID, ReviewType):
	dic 		 = {}
	result 		 = MKT_FOLLOWUP_CARD.query.\
									filter(~MKT_FOLLOWUP_CARD.ID.in_(db.session.query(MKT_FOLLOWUP.CardID).filter(MKT_FOLLOWUP.ReviewType==ReviewType))).\
									filter(MKT_FOLLOWUP_CARD.CustomerID == CustomerID).\
									filter(MKT_FOLLOWUP_CARD.NextReviewType==ReviewType).\
									all()
	if result:
		for row in result:
			dic[row.ID] = '%s - %s' %(row.ID,row.NextFollowUpDate)
	return jsonify(results=dic)

@app.route("/Morakot/getReview",methods=['GET'])
def getPARReview():
	CardID  	= request.args.get('CardID')
	ReviewDate	= ''
	Description	= ''
	Customer	= ''
	CustomerID	= ''
	if CardID !='__None':
		CardObj = MKT_FOLLOWUP_CARD.query.\
				  					filter(MKT_FOLLOWUP_CARD.ID==CardID).\
				  					first()
		ReviewDate = CardObj.NextFollowUpDate
		Description = CardObj.ActionPlan
		CustomerObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID==CardObj.CustomerID).first()
		Customer = "%s - %s %s" %(CustomerObj.ID,CustomerObj.LastNameEn,CustomerObj.FirstNameEn)
		CustomerID = CustomerObj.ID
		return jsonify(ReviewDate=ReviewDate,
					   Description=Description,
					   Customer=Customer,
					   CustomerID=CustomerID)
	return ''

@app.route("/Morakot/getCustomerCard", methods=['GET'])
def getCustomerCard():
	CustomerID 	 = request.args.get('CustomerID') if 'CustomerID' in request.args else ''
	return CustomerCard(CustomerID,'3')

class FRM_FOLLOWUP_PAR(exform):

	CustomerID 				= 		QuerySelectField(requiredlabel("Customer","*"),
										query_factory=loadCustomer,
										get_label=lambda a: a.ID + ' - ' + a.LastNameEn + " " + a.FirstNameEn,
										allow_blank=True,
										blank_text=u'--None--',
										default=lambda:loadCustomer(getDefaultValue(request.args.get("CardID") if 'CardID' in request.args else "","CustomerID")),
										validators=[validators.Required()]
									)

	CardID 					= 		QuerySelectField("Followup Card",
										query_factory=loadFollowUpCard,
										get_label=lambda a: a.ID + ' - ' + a.NextFollowUpDate,
										allow_blank=True,
										blank_text=u'--None--',
										default=lambda:loadFollowUpCard(request.args.get("CardID") if 'CardID' in request.args else "")
									)

	ReviewDate 				= 		DateField(requiredlabel('Review Date','*'),
										format='%Y-%m-%d',
										default=lambda: mktdate.getDateISO(getDefaultValue(request.args.get("CardID") if 'CardID' in request.args else "","NextFollowUpDate")),
										validators=[validators.Required()])

	ReviewType 				= 		SelectField(requiredlabel('Review Type','*'),
										choices=[('1', '1 - Client Survey'),
												  ('2', '2 - Client Review'),
												  ('3', '3 - PAR Folow Up'),
												  ('4', '4 - Other')],
										default="3",
										validators  =	[validators.Required()]
									)
	
	Description 			= 		TextAreaField(requiredlabel('Description','*'),
										default=lambda: getDefaultValue(request.args.get("CardID") if 'CardID' in request.args else "2","ActionPlan"),
									)

	# # 3- Followup PAR

	Complete 				= 		SelectField(requiredlabel('Complete','*'),
										choices=[('N', 'Not Yet Complete'), 
												  ('Y','Complete')
												  ],
										validators=[validators.Required()],
										description="1-Followup PAR"
									)

	RootCause 				= 		SelectField(requiredlabel('Root Cause','*'),
										choices=[('', '--None--'), 
												  ('1','1 - Financial Hardship'),
												  ('2','2 - Overstated Incomes'),
												  ('3','3 - Multiple Loans'),
												  ('4','4 - Bad Character'),
												  ('5','5 - Others')],
										validators=[validators.Required()],
										description="1-Followup PAR"
									)
	
	LoanStatus 				= 		SelectField(requiredlabel('Loan Status','*'),
										choices=[('', '--None--'),
												  ('1','1 - Sell Property'),
												  ('2','2 - Court Case'),
												  ('3','3 - Discussion'),
												  ('4','4 - Paid on time-followup'),
												  ('5','5 - Restructured'),
												  ('6','6 - Rescheduled')],
										validators=[validators.Required()],
										description="1-Followup PAR"
									)

	Action 					 =		TextAreaField(requiredlabel('Action Taken','*'),
										validators=[validators.Required()],
										description="1-Followup PAR"
									)

	Comment 				 = 		TextAreaField(requiredlabel('Comment','*'),
										validators=[validators.Required()],
										description="1-Followup PAR"
									)

	Iframe 					 = 		MKTIframe("View Followup Detail",
										dicIframe={'width':'100%','height':'730px','frameborder':'0'}, 
										description='2-Detail'
									)

	def validate_CardID(form, field):
		CardID 			= 	request.form['CardID']
		ID 				= 	request.form["ID"]
		FollowUpObj 	= 	MKT_FOLLOWUP.query.\
										filter(MKT_FOLLOWUP.CardID == CardID,
											   MKT_FOLLOWUP.ID != ID).first()
		if FollowUpObj:
			FollowUpID = FollowUpObj.ID
			raise ValidationError(Markup("This Follow Up Card %s is already used. Please use this record \
								<a href='javascript:void(0)' onClick=CustomClickView('FollowUpPAR-%s','FollowUpPar/?ID=%s')> %s</a>"\
								%(CardID,FollowUpID,FollowUpID,FollowUpID)))
		else:
			return ''

	@staticmethod
	def urlParam():
		ID = request.args.get('FollowupID') if 'FollowupID' in request.args else ' '
		dicParam = ''
		dicParam = [{"IframeName":"Iframe", "iframeUrl":"/Morakot/FollowUpDetail/"+ID,'Resource' : 'Status'}]
		return dicParam

	@staticmethod
	def listField():
		Fields = ["ID", "CardID", "CustomerID", "ReviewType", "ReviewDate", "Description"]
		return Fields, ["ID*LK*CFP"]

	@staticmethod
	def setDisable():
		control_list = [('ReviewType')]
		return control_list

	@staticmethod
	def hotField():
		hotfield 		 = []
		fielddisplay 	  = "$('#CustomerID').select2('data', {'id':data.CustomerID,'text':data.Customer});"
		fielddisplay 	 += "$('#ReviewDate').val(data.ReviewDate);"
		fielddisplay 	 += "$('#Description').val(data.Description);"
		varname 		  = "CardID:$('#CardID').val()"
		fun 			  = ["CardID",varname,fielddisplay,"/Morakot/getReview","change"]
		hotfield.append(fun)
		return hotfield

	@staticmethod
	def hotSelectField():
		hotfield 		= []
		fielddisplay 	= "CardID"
		varname 		= "CustomerID:$('#CustomerID').val()"
		fun 			= ['CustomerID',varname,fielddisplay,'/Morakot/getCustomerCard','change']
		hotfield.append(fun)
		return hotfield





