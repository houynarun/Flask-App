from app.mktcore.imports 		import *
from .forms 					import *
from .review 					import *
from .parfollowup				import *
from .surveydetail 				import *
from .models 					import *
from local.FirstFinance.SurveyQuestion.models 		import *
from app.Collateral.models 		import *
from app.CollateralType.models 	import *
from app.LoanApplication.models import *
from app.LoanPurpose.models 	import *
from app.LoanAmendment.models 		import *
from app.Sector.models 			import *

import app.tools.mktautoid 						as mktAutoID
import app.tools.mktaudit 						as mktaudit
import app.tools.mktdate 						as mktdate
import app.tools.mktaddress 					as mktaddress
import app.tools.user 							as mktuser
import app.tools.mktmoney 						as mktmoney
import collections
# import mktsetting 								as mktsetting

registerCRUD(admin, '/FollowUp', 'FollowUp', FRM_FOLLOWUP, [MKT_FOLLOWUP])
registerCRUD(admin, '/FollowUpReview', 'FollowUpReview', FRM_FOLLOWUP_REVIEW, [MKT_FOLLOWUP,MKT_FOLLOWUP_REVIEW])
registerCRUD(admin, '/FollowUpPar', 'FollowUpPar', FRM_FOLLOWUP_PAR, [MKT_FOLLOWUP,MKT_FOLLOWUP_PAR])
registerCRUD(admin, '/FollowUpSurvey', 'FollowUpSurvey', FRM_FOLLOWUP_SURVEY, [MKT_FOLLOWUP])


@app.route('/Morakot/LcReport',methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def LcReport():
	'''
		Report Loan Contract For CRO
		In Menu Client Followup Report
	'''
	Branch 				= 	mktuser.getCurrentBranch()
	stmt 				= 	exists().where(MKT_LOAN_CONTRACT.ID==MKT_LOAN_AMENDMENT.LoanID)
	ReportDict 			= 	{}

	Company 			= 	mkttool.getCompany().CompanyName
	BankDate 			= 	mktdate.getBankDate()
	BranchObj 			= 	db.session.query(MKT_BRANCH.ID,MKT_BRANCH.Description).order_by(MKT_BRANCH.ID.asc())
	CROObj 				= 	db.session.query(MKT_OFFICER.ID,MKT_OFFICER.FirstName,MKT_OFFICER.LastName).order_by(MKT_OFFICER.ID.asc())

	#Base Currency
	BaseCurrency 		= 	mktsetting.getAccSetting().BaseCurrency
	ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
	ExchangeRate 		= 	float(ReportingRateObj[BaseCurrency])
	CurrencyObj 		= 	mktmoney.getCurrencyObj(BaseCurrency)

	# Get Request
	FilterBranch 		= 	request.args.get('Branch') if 'Branch' in request.args else Branch
	FilterCRO 			= 	request.args.get('CRO') if 'CRO' in request.args else ''
	FilterCond 			= 	[]
	FilterCond.append(MKT_LOAN_CONTRACT.Branch==FilterBranch)
	if FilterCRO:
		FilterCond.append(MKT_CUSTOMER.CRO==FilterCRO)

	TotalCommiment 		= 	0
	TotalOutstanding 	= 	0
	TotalInterestEarned = 	0
	TotalDisbursed 		= 	0
	Total 				= 	{}


	LCObj = db.session.query(
							MKT_LOAN_CONTRACT.ID,
							MKT_LOAN_CONTRACT.Branch,
							MKT_LOAN_CONTRACT.Currency,
							MKT_LOAN_CONTRACT.ValueDate,
							MKT_LOAN_CONTRACT.MaturityDate,
							MKT_LOAN_CONTRACT.LoanProduct,
							MKT_LOAN_CONTRACT.Term,
							MKT_LOAN_CONTRACT.InterestRate,
							MKT_LOAN_CONTRACT.DisbursedStat,
							MKT_LOAN_CONTRACT.AssetClass,
							func.sum(MKT_LOAN_CONTRACT.Disbursed).label('Disbursed'),
							func.sum(MKT_LOAN_CONTRACT.ApprovedAmount).label('ApprovedAmount'),
							func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('OutstandingAmount'),
							func.sum(MKT_LOAN_CONTRACT.IntIncEarned).label('IntIncEarned'),
							MKT_CUSTOMER.ID.label('CustomerID'),
							MKT_CUSTOMER.FirstNameEn,
							MKT_CUSTOMER.LastNameEn,
							MKT_CUSTOMER.Gender,
							MKT_CUSTOMER.Sector,
							MKT_CUSTOMER.CRO
				).\
				join(MKT_CUSTOMER,MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
				group_by(
							MKT_CUSTOMER.ID,
							MKT_LOAN_CONTRACT.ID,
							MKT_LOAN_CONTRACT.Currency,
							MKT_CUSTOMER.FirstNameEn,
							MKT_CUSTOMER.LastNameEn,
							MKT_CUSTOMER.Gender,
							MKT_LOAN_CONTRACT.ValueDate,
							MKT_LOAN_CONTRACT.MaturityDate,
							MKT_LOAN_CONTRACT.LoanProduct,
							MKT_LOAN_CONTRACT.Term,
							MKT_LOAN_CONTRACT.InterestRate,
							MKT_LOAN_CONTRACT.AssetClass,
							MKT_CUSTOMER.CRO
				).\
				order_by(MKT_LOAN_CONTRACT.ID.asc(),
						 MKT_LOAN_CONTRACT.Currency.asc()).\
				filter(~stmt).\
				filter(*FilterCond)
	if  LCObj.first():
		for item in LCObj.all():
			Branch 					=	item.Branch
			ID 						=	item.ID
			CustomerID 				=	item.CustomerID
			CustomerName			= 	item.LastNameEn + ' ' + item.FirstNameEn
			Gender 					= 	item.Gender
			Account 				=	lookupTable('MKT_ACCOUNT','CustomerList','ID',item.CustomerID)
			Currency 				= 	item.Currency
			Disbursed 				= 	item.Disbursed
			TotalDisbursed 			+= 	Disbursed 				# 	Total Disbursed
			Commiment 				= 	float(item.ApprovedAmount) - float(item.Disbursed)
			TotalCommiment 			+= 	Commiment 				# 	Total Commiment
			Outstanding 			= 	item.OutstandingAmount
			TotalOutstanding 		+= Outstanding  			# 	Total Outstanding
			InterestEarned			= 	item.IntIncEarned
			TotalInterestEarned		+= InterestEarned 			# 	Total Interest Earned
			ValueDate 				= 	item.ValueDate
			MaturityDate 			= 	item.MaturityDate
			LoanProduct 			= 	item.LoanProduct
			Term 					= 	item.Term
			InterestRate 			= 	item.InterestRate
			DisbursedStat 			= 	item.DisbursedStat
			AssetClass 				=	item.AssetClass
			Sector 					= 	lookupTable('MKT_SECTOR','ID','Description',item.Sector)
			CRO 					= 	item.CRO
			CROName 				= 	getCROName(item.CRO)

			ReportDict.update({
								item.ID:{
									'Branch'		: 	Branch,
									'CustomerID'	:	CustomerID,	
									'CustomerName'	:	CustomerName,	
									'Gender'		:	Gender,
									'Account'		:	Account,
									'Currency'		:	Currency,
									'Disbursed'		:	mktmoney.toMoney(float(Disbursed)*ExchangeRate,mktmoney.getCurrencyObj(BaseCurrency)),
									'Commiment'		:	Commiment,
									'Outstanding'	:	mktmoney.toMoney(float(Outstanding)*ExchangeRate,mktmoney.getCurrencyObj(BaseCurrency)),
									'InterestEarned':	mktmoney.toMoney(float(InterestEarned)*ExchangeRate,mktmoney.getCurrencyObj(BaseCurrency)),
									'ValueDate'		:	ValueDate,
									'MaturityDate'	:	MaturityDate,
									'LoanProduct'	:	LoanProduct,
									'Term'			: 	Term,
									'InterestRate'	:	InterestRate,
									'DisbursedStat'	:	DisbursedStat,
									'AssetClass'	:	AssetClass,
									'Sector'		:	Sector,
									'CRO'			:	CRO,
									'CROName'		:	CROName
								}
							})

	Total.update({
			'TotalCommiment'		:	mktmoney.toMoney(float(TotalCommiment),mktmoney.getCurrencyObj(BaseCurrency)),
			'TotalOutstanding'		:	mktmoney.toMoney(float(TotalOutstanding),mktmoney.getCurrencyObj(BaseCurrency)),
			'TotalInterestEarned'	:	mktmoney.toMoney(float(TotalInterestEarned),mktmoney.getCurrencyObj(BaseCurrency)),
			'TotalDisbursed' 		: 	mktmoney.toMoney(float(TotalDisbursed),mktmoney.getCurrencyObj(BaseCurrency))
		})

	result 					= {
									'Company' 		: 	Company,
									'BankDate'		: 	str(BankDate),
									'BaseCurrency' 	: 	BaseCurrency,
									'Branch'		: 	Branch,
									'Total'			: 	Total,
									'CRO' 			: 	FilterCRO
							}

	return render_template('followup/lcreport.html',
							Result=result,
							ReportDict=ReportDict,
							BranchObj=BranchObj,
							CROObj=CROObj
							)

@app.route('/Morakot/FollowUpHistory',methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def SearchCustomer():

	msg = ''
	# get a list of customer 
	CurrentBranch 	=	mktuser.getCurrentBranch()
	CustomerObj 	=	MKT_CUSTOMER.query.filter(MKT_CUSTOMER.Branch==CurrentBranch)

	if request.method=='POST':

		CustomerID  = request.form['CustomerID'] if 'CustomerID' in request.form else ''
		if CustomerID:

			# Get Customer Object detail
			CustomerDetailObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID==CustomerID).first()
			# Get Officer Object detail
			OfficerObj = MKT_OFFICER.query.filter(MKT_OFFICER.ID==CustomerDetailObj.Officer).first()
			# Get Review detail from Customer ID
			FollowupObj = MKT_FOLLOWUP.query.\
						  order_by(asc(MKT_FOLLOWUP.ReviewDate)).\
						  filter(MKT_FOLLOWUP.CustomerID==CustomerID)

			if FollowupObj.all():
				ReviewObj = FollowupObj
				msg 	  = ''
			else:
				ReviewObj = ''
				msg 	  = 'Follow Up Card for %s - %s has not yet been Completed or Created!'% (CustomerID, CustomerDetailObj.LastNameEn + ' ' + CustomerDetailObj.FirstNameEn)
			return render_template('followup/searchcustomer.html',CustomerObj = CustomerObj,
																  CustomerID = CustomerID,
																  CustomerDetailObj = CustomerDetailObj,
																  OfficerObj = OfficerObj,
																  mktaddress= mktaddress,
																  ReviewObj = ReviewObj,
																  FollowupObj = MKT_FOLLOWUP, 
																  BranchObj = MKT_BRANCH,
																  msg = msg)

		return render_template('followup/searchcustomer.html',CustomerObj = CustomerObj)

	return render_template('followup/searchcustomer.html',CustomerObj = CustomerObj)

@app.route('/Morakot/Survey',methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def getSurveyTemplate():
	QuestionObj = db.session.query(MKT_SURVEY_QUESTION.ID,MKT_SURVEY_QUESTION.Description,MKT_SURVEY_QUESTION.AnswerType).all()
	return render_template('followup/survey.html',QuestionObj=QuestionObj)

@app.route('/Morakot/FollowUpDetail/<FollowupID>',methods=['GET','POST'])
@app.route('/Morakot/FollowUpDetail',methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def getFollowUpDetail(FollowupID=''):

	if FollowupID !=' ':

		FollowUpObj = db.session.query(MKT_FOLLOWUP.ID,
									   MKT_FOLLOWUP.CustomerID,
									   MKT_FOLLOWUP.ReviewDate,
									   MKT_FOLLOWUP.ReviewType,
									   MKT_FOLLOWUP.Description
									   ).\
								filter(MKT_FOLLOWUP.ID==FollowupID).\
								first()

		CustomerObj = db.session.query(MKT_CUSTOMER.ID,
									   MKT_CUSTOMER.FirstNameEn,
									   MKT_CUSTOMER.LastNameEn,
									   MKT_CUSTOMER.EmployerType,
									   MKT_CUSTOMER.MonthlyIncome,
									   MKT_CUSTOMER.NumberOfMember,
									   MKT_CUSTOMER.TotalExpenses
									   ).\
								filter(MKT_CUSTOMER.ID==FollowUpObj.CustomerID).\
								first()

		LoanApplicationObj = db.session.query(MKT_LOAN_APPLICATION.ID,
											  MKT_LOAN_APPLICATION.Amount,
											  MKT_LOAN_APPLICATION.Currency,
											  MKT_LOAN_APPLICATION.MonthlyRep,
											  MKT_LOAN_APPLICATION.LoanPurpose).\
								filter(MKT_LOAN_APPLICATION.LNCustomerID==CustomerObj.ID).\
								first()

		LoanCollateral   = db.session.query(MKT_LOAN_COLLATERAL.ID,MKT_LOAN_COLLATERAL.Collateral).\
								filter(MKT_LOAN_COLLATERAL.ID==LoanApplicationObj.ID).\
								first()
		CollateralDeObj  = db.session.query(MKT_COLLATERAL_DE).filter(MKT_COLLATERAL_DE.CollateralID==LoanCollateral.Collateral).all()

		# flash('hello3')

		return render_template('followup/detail.html',
								mktaddress=mktaddress,
								collateralType=MKT_COLLATERAL_TYPE,
								FollowupCard=MKT_FOLLOWUP_CARD,
								CollateralDeObj=CollateralDeObj,
								FollowUpObj=FollowUpObj,
								CustomerObj=CustomerObj,
								LoanApplicationObj=LoanApplicationObj,
								LoanPurpose=MKT_LOAN_PURPOSE,
								LoanApplication=MKT_LOAN_APPLICATION,
								toMoney=mktmoney.toMoney,
								float=float,
								CurrencyObj = mktmoney.getCurrencyObj
								)
	else:
		# print 'render empty detail.html template'
		return render_template('followup/detail.html')

@app.route('/Morakot/getDetail/<FollowupCardID>',methods=['GET','POST'])
@app.route('/Morakot/getDetail/',methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def getDetailReview(FollowupCardID=''):

	if FollowupCardID !=' ':

		# Follow up Detail Info
		FollowUpObj 					= 		db.session.query(MKT_FOLLOWUP_CARD.ID,
													   MKT_FOLLOWUP_CARD.CustomerID,
													   MKT_FOLLOWUP_CARD.NextFollowUpDate,
													   MKT_FOLLOWUP_CARD.NextReviewType,
													   MKT_FOLLOWUP_CARD.ActionPlan
													   ).\
												filter(MKT_FOLLOWUP_CARD.ID==FollowupCardID).\
												first()
		if FollowUpObj:
			CustomerID = FollowUpObj.CustomerID
		else:
			CustomerID = FollowupCardID # the parameter sent from detail.html is a customer ID

		# Customer Detail Info
		CustomerObj 				= 		db.session.query(MKT_CUSTOMER.ID,
												   MKT_CUSTOMER.FirstNameEn,
												   MKT_CUSTOMER.LastNameEn,
												   MKT_CUSTOMER.EmployerType,
												   MKT_CUSTOMER.MonthlyIncome,
												   MKT_CUSTOMER.NumberOfMember,
												   MKT_CUSTOMER.TotalExpenses
												   ).\
											filter(MKT_CUSTOMER.ID==CustomerID).\
											first()
		# Loan Information
		LoanApplicationObj 			= 		db.session.query(MKT_LOAN_APPLICATION.ID,
												   MKT_LOAN_APPLICATION.Amount,
												   MKT_LOAN_APPLICATION.Currency,
												   MKT_LOAN_APPLICATION.MonthlyRep,
												   MKT_LOAN_APPLICATION.LoanPurpose).\
											filter(MKT_LOAN_APPLICATION.LNCustomerID==CustomerObj.ID).\
											first()

		if  LoanApplicationObj:

			LoanCollateral 			= 		db.session.query(MKT_LOAN_COLLATERAL.ID,MKT_LOAN_COLLATERAL.Collateral).\
											filter(MKT_LOAN_COLLATERAL.ID==LoanApplicationObj.ID).\
											first()
			if LoanCollateral:
				# Collateral Detail Info
				CollateralDeObj  	= 		db.session.query(MKT_COLLATERAL_DE).filter(MKT_COLLATERAL_DE.CollateralID==LoanCollateral.Collateral).all()
			else:
				CollateralDeObj 	= ''
		else:
			LoanCollateral 			= ''

			CollateralDeObj 		= ''
			
			LoanApplicationObj 		= ''

		return render_template('followup/reviewdetail.html',
								collateralType=MKT_COLLATERAL_TYPE,
								mktaddress=mktaddress,
								CollateralDeObj=CollateralDeObj,
								FollowUpObj=FollowUpObj,
								CustomerObj=CustomerObj,
								LoanApplicationObj=LoanApplicationObj,
								LoanPurpose=MKT_LOAN_PURPOSE,
								LoanApplication=MKT_LOAN_APPLICATION,
								toMoney=mktmoney.toMoney,
								float=float,
								CurrencyObj = mktmoney.getCurrencyObj
								)
	else:
		return render_template('followup/detail.html')
	# else:
	# 	return render_template('followup/detail.html')

@app.route('/Morakot/getQA',methods=['GET','POST'])
@app.route('/Morakot/getQA/<FollowupID>',methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def getSurveyQuestion(FollowupID=""):

	QuestionObj 			= 		MKT_SURVEY_QUESTION.query.all()
	AnswerDeObj 			= 		MKT_ANSWER_DE
	FollowupID 		 		= 		request.args.get('ID') if 'ID' in request.args else ''

	# if it is from redirect
	if FollowupID !=' ':

		FollowupObj 	 	= 		MKT_FOLLOWUP.query.filter(MKT_FOLLOWUP.ID==FollowupID).first()
		FollowupSurveyObj 	= MKT_FOLLOWUP_SURVEY.query.filter(MKT_FOLLOWUP_SURVEY.ID==FollowupID).all()
		if FollowupObj:
			CustomerObj 	= MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID==FollowupObj.CustomerID).first()
			CustomerID  	= FollowupObj.CustomerID
			SurveyCurr		= FollowupObj.Curr if FollowupObj else ''
			return render_template('followup/survey.html',
									SurveyCurr=SurveyCurr,
									SurveyDeObj=FollowupSurveyObj,
									FollowupID=FollowupID,
									CustomerID=CustomerID,
									QuestionObj=QuestionObj,
									AnswerDeObj=AnswerDeObj)
		else:
	
			return render_template('followup/survey.html',
									QuestionObj=QuestionObj,
									AnswerDeObj=AnswerDeObj)
	else:
		return render_template('followup/survey.html',
								QuestionObj=QuestionObj,
								AnswerDeObj=AnswerDeObj)

@app.route('/Morakot/UpdateSurvey',methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def UpdateServey():
	result = False
	if request.method=='POST':

		FollowupID 	= request.form['CFU'] if 'CFU' in request.form else ''
		Curr 	   	= request.form['Curr'] if 'Curr' in request.form else ''
		dict 		= request.form
		if Curr:
			# print "DATA UPDATE"
			ID 		= request.form['Survey']
			Audit 		= mktaudit.getAuditrail()
			SurveyData 	= {}
			QuestionObj = MKT_SURVEY_QUESTION.query
			CFUID 		= request.form["CFU"]
			mktdb.deleteRecord(MKT_FOLLOWUP_SURVEY,[MKT_FOLLOWUP_SURVEY.ID==CFUID])

			for row in QuestionObj:
				ID 	   		= CFUID
				Answer 		= request.form.getlist('Answer[%s]' % row.ID)
				Question 	= row.ID
				SurveyData.update({
				'ID':ID,
				'Question':Question,
				'Answer':Answer[0] if len(Answer) > 0  else ""
				})
				mktdb.insertTable(MKT_FOLLOWUP_SURVEY,SurveyData)
			db.session.commit()
			result = True
		else:
			# print "DATA Insert"

			SurveyData 	= {}
			QuestionObj = MKT_SURVEY_QUESTION.query

			for row in QuestionObj:
				ID 		= request.form['Survey']
				Answer 	= request.form.getlist('Answer[%s]' % row.ID)
				# print "Answer %s %s" % (row.Description, Answer)

				Question = row.ID
				# Answer = request.form.getlist('A')
				SurveyData.update({
				'ID':ID,
				'Question':Question,
				'Answer':Answer[0] if len(Answer) > 0  else ""
				})
				mktdb.insertTable(MKT_FOLLOWUP_SURVEY,SurveyData)
				db.session.commit()
				# SurveyData = {}
			result=True
	return render_template('followup/survey.html',result=result)

def getCROName(OfficerID):
	FullName 	 = ''
	OfficerObj	 = db.session.query(MKT_OFFICER.FirstName,MKT_OFFICER.LastName).filter(MKT_OFFICER.ID==OfficerID).first()
	if OfficerObj:
		FullName = OfficerObj.LastName + ' ' + OfficerObj.FirstName
	return FullName

# print  lookupTable('MKT_VILLAGE','ID','Description',row.Village)
def lookupTable(TableName,Field,FieldLookUp,Value):
	if Value:
		karwgs = {Field:Value}
		QueryTable = eval(TableName).query.filter_by(**karwgs)
		if not QueryTable:
			return ""
		else:
			for row in QueryTable:
				if getattr(row,FieldLookUp):
					return getattr(row,FieldLookUp)
				else:
					return ""
	else:
		return ""

