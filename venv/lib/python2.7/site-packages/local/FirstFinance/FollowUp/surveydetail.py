from app.mktcore.wtfimports 	import *
from app.IdType.models 			import *
from app.tools.mktroute 		import *
from app.Customer.models 		import *
from local.FirstFinance.FollowUp.models 			import *
from local.FirstFinance.SurveyQuestion.models 		import *
from local.FirstFinance.SurveyAnswerDetail.models 	import *
from local.FirstFinance.FollowUpCard.models 		import *

import app.tools.mktdb 			as mktdb


# Load Customer who already has followup card and in current Branch
def loadCustomer(ID=""):
	CurrentBranch = mktuser.getCurrentBranch()
	CustomerObj = MKT_CUSTOMER.query.\
					filter(MKT_CUSTOMER.Branch==CurrentBranch)

	if ID:
		CustomerObj = CustomerObj.filter(MKT_CUSTOMER.ID == ID).first()

	return CustomerObj

def loadSchedule():
	CurrentBranch 	= mktuser.getCurrentBranch()
	ScheduleObj 	= MKT_FOLLOWUP_CARD.query.\
					  filter(MKT_FOLLOWUP_CARD.Branch==CurrentBranch).\
					  filter(MKT_FOLLOWUP_CARD.NextReviewType=='1')

	return ScheduleObj

def loadFollowUpCard(CardID=""):
	REVIEW_SURVEY 		=	"1"
	CurrentBranch 	= 	mktuser.getCurrentBranch()
	CardObj 		=	MKT_FOLLOWUP_CARD.query.filter(MKT_FOLLOWUP_CARD.NextReviewType == REVIEW_SURVEY)
	if CardID:
		CardObj		=	CardObj.filter(MKT_FOLLOWUP_CARD.ID == CardID).first()
	return CardObj

def getDefaultValue(CardID="",Field=""):
	Value = ""
	if CardID:
		CardObj = MKT_FOLLOWUP_CARD.query.get(CardID)
		if CardObj:
			Value = getattr(CardObj, Field)

	return Value

@app.route("/Morakot/getPARCustomerID",methods=['GET'])
def getSurveyCustomer():
	CustomerID 	= request.args.get("CustomerID")
	CardObj 	= MKT_FOLLOWUP_CARD.query.\
				  filter(MKT_FOLLOWUP_CARD.CustomerID==CustomerID).\
				  filter(MKT_FOLLOWUP_CARD.NextReviewType=='1').\
				  first()

	if CardObj:
		CardID  	= CardObj.ID 
		CustomerObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID==CardObj.CustomerID).first()
		CustomerID 	= CardObj.CustomerID
		Customer 	= "%s - %s %s" %(CustomerObj.ID,CustomerObj.LastNameEn,CustomerObj.FirstNameEn)

		Card 		= "%s - %s"%(CardID,CustomerID)


		ReviewDate 	= CardObj.NextFollowUpDate
		Description = CardObj.ActionPlan


		return jsonify(CardID=CardID,
					   Card=Card,
					   ReviewDate=ReviewDate,
					   Description=Description
					   )
	else:
		return ''



@app.route("/Morakot/getSurveyReview",methods=['GET'])
def getSurveyReview():
	CardID  	= request.args.get('CardID')
	ReviewDate	= ''
	Description	= ''
	Customer	= ''
	CustomerID	= ''

	if CardID !='__None':

		CardObj = MKT_FOLLOWUP_CARD.query.\
				  					filter(MKT_FOLLOWUP_CARD.ID==CardID).\
				  					first()
		ReviewDate = CardObj.NextFollowUpDate
		Description = CardObj.ActionPlan

		CustomerObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID==CardObj.CustomerID).first()

		Customer = "%s - %s %s" %(CustomerObj.ID,CustomerObj.LastNameEn,CustomerObj.FirstNameEn)
		CustomerID = CustomerObj.ID

		return jsonify(ReviewDate=ReviewDate,
					   Description=Description,
					   Customer=Customer,
					   CustomerID=CustomerID)
	return ''

def CustomerCard(CustomerID, ReviewType):
	dic 		 = {}
	result 		 = MKT_FOLLOWUP_CARD.query.\
									filter(~MKT_FOLLOWUP_CARD.ID.in_(db.session.query(MKT_FOLLOWUP.CardID).filter(MKT_FOLLOWUP.ReviewType==ReviewType))).\
									filter(MKT_FOLLOWUP_CARD.CustomerID == CustomerID).\
									filter(MKT_FOLLOWUP_CARD.NextReviewType==ReviewType).\
									all()
	if result:
		for row in result:
			dic[row.ID] = '%s - %s' %(row.ID,row.NextFollowUpDate)
		print "Dic: ", dic
	return jsonify(results=dic)

@app.route("/Morakot/getCustomerSurveyCard", methods=['GET'])
def getCustomerSurveyCard():
	CustomerID 	 = request.args.get('CustomerID') if 'CustomerID' in request.args else ''
	return CustomerCard(CustomerID,'1')

class FRM_FOLLOWUP_SURVEY(exform):
	# # 1- Followup Survey

	CustomerID 				= 		QuerySelectField(requiredlabel("Customer","*"),
										query_factory=loadCustomer,
										get_label=lambda a: a.ID + " - " + a.LastNameEn + " " + a.FirstNameEn,
										allow_blank=True,
										blank_text=u'--None--',
										default=lambda:loadCustomer(getDefaultValue(request.args.get("CardID") if 'CardID' in request.args else "","CustomerID")),
										validators=[validators.Required()]
									)

	CardID 					= 		QuerySelectField("Followup Card",
										query_factory=loadSchedule,
										get_label=lambda a: a.ID + ' - ' + a.NextFollowUpDate,
										allow_blank=True,
										blank_text=u'--None--',
										default=lambda:loadFollowUpCard(request.args.get("CardID") if 'CardID' in request.args else ""),
									)

	ReviewDate 				= 		DateField(requiredlabel('Review Date','*'),
										format='%Y-%m-%d',
										validators=[validators.Required()],
										default=lambda: mktdate.getDateISO(getDefaultValue(request.args.get("CardID") if 'CardID' in request.args else "","NextFollowUpDate")),
									)

	ReviewType 				= 		SelectField(requiredlabel('Review Type','*'),
										choices		=	[	('1', '1 - Client Survey'),
															('2', '2 - Client Review'),
															('3', '3 - PAR Folow Up'),
															('4', '4 - Other')
														],
										default='1',
										validators  =	[validators.Required()]
									)
	
	Description 			= 		TextAreaField(requiredlabel('Description','*'),
										validators=[validators.Required()],
										default=lambda: getDefaultValue(request.args.get("CardID") if 'CardID' in request.args else "2","ActionPlan"),
										)

	Iframe 				= MKTIframe("View Followup Detail",
								dicIframe={'width':'100%','height':'730px','frameborder':'0'},
								description='2-Detail')

	Iframe_1 = MKTIframe("View Followup Survey",
								dicIframe={'width':'100%','height':'2350px','frameborder':'0'},
								description='1-Survey')



	@staticmethod
	def urlParam():
		FollowupID = request.args.get('FollowupID') if 'FollowupID' in request.args else ' '
		ID = request.args.get('FollowupID') if 'FollowupID' in request.args else ' '
		dicParam =''
		# if ID:
		dicParam= [{"IframeName":"Iframe", "iframeUrl":"/Morakot/FollowUpDetail/"+ID,'Resource' : 'Status'},
				   {"IframeName":"Iframe_1", "iframeUrl":"/Morakot/getQA/"+FollowupID,'Resource' : 'Status'}]

		return dicParam

	@staticmethod
	def listField():

		Fields = ["ID", "CardID", "CustomerID", "ReviewType", "ReviewDate","Description"]
		# return Fields
		return Fields, ["ID*LK*CFS"]


	@staticmethod
	def setDisable():
		return [('ReviewType')]

	# @staticmethod
	# def setDisable():
	# 	control_list = [('ReviewType')]
	# 	return control_list

	@staticmethod
	def hotField():
		hotfield 		 = []

		fielddisplay 	  = "$('#CustomerID').select2('data', {'id':data.CustomerID,'text':data.Customer});"
		fielddisplay 	 += "$('#ReviewDate').val(data.ReviewDate);"
		# fielddisplay 	 += "$('#ReviewType').select2('data', {'id':data.ReviewTypeID,'text':data.ReviewType});"
		fielddisplay 	 += "$('#Description').val(data.Description);"

		varname 		  = "CardID:$('#CardID').val()"

		fun 			  = ["CardID",varname,fielddisplay,"/Morakot/getSurveyReview","change"]

		hotfield.append(fun)

		# fielddisplay	  = "$('#CardID').select2('data',{'id':data.CardID,'text':data.Card}).trigger('change');"
		# varname 		  = "CustomerID:$('#CustomerID').val()"
		# fun 			  = ["CustomerID",varname,fielddisplay,"/Morakot/getSurveyCustomerID","change"]
		# hotfield.append(fun)

		return hotfield


	@staticmethod
	def hotSelectField():
		hotfield 		= []
		fielddisplay 	= "CardID"
		varname 		= "CustomerID:$('#CustomerID').val()"
		fun 			= ['CustomerID',varname,fielddisplay,'/Morakot/getCustomerSurveyCard','change']
		hotfield.append(fun)
		return hotfield



	@staticmethod
	def reverseRec():
		# ID OF SURVEY MAIN
		ID = g.formID

		# Main Survey
		SurveyObj = MKT_FOLLOWUP.query.filter(MKT_FOLLOWUP_SURVEY.ID==ID).first()

		SurveyObj = MKT_FOLLOWUP_SURVEY.query.filter(MKT_FOLLOWUP_SURVEY.ID==ID).all()
		# Move reverse record to history and delete it
		for row in SurveyObj:
			mktaudit.moveAUTHtoHIST(MKT_FOLLOWUP_SURVEY,MKT_FOLLOWUP_SURVEY_HIST,row.ID)
			mktaudit.deleteAUTH(MKT_FOLLOWUP_SURVEY, row.ID)

		return True,''
