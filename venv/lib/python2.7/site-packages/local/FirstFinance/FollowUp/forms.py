from app.mktcore.wtfimports 	import *
from app.IdType.models 			import *
from app.tools.mktroute 		import *
from app.Customer.models 		import *
from local.FirstFinance.FollowUp.models 		import *
from local.FirstFinance.FollowUpCard.models 	import *


import app.tools.mktdb 			as mktdb

# Load Customer who already has Loan Application and in current Branch
def loadCustomer(ID=""):
	CurrentBranch 	=	mktuser.getCurrentBranch()
	CustomerObj 	=	MKT_CUSTOMER.query.\
									join(MKT_LOAN_APPLICATION,
										 MKT_LOAN_APPLICATION.LNCustomerID==MKT_CUSTOMER.ID
									).\
									filter(MKT_CUSTOMER.Branch==CurrentBranch)

	if ID:
		CustomerObj = CustomerObj.filter(MKT_CUSTOMER.ID==ID).first()
	else:
		CustomerObj = CustomerObj

	return CustomerObj

def loadSchedule():
	CurrentBranch 	= mktuser.getCurrentBranch()
	ScheduleObj 	= MKT_FOLLOWUP_CARD.query.filter().\
					  filter(MKT_FOLLOWUP_CARD.Branch==CurrentBranch)
	return ScheduleObj

def loadReviewType(ID=""):
	# print "ID review type is ",ID

	return ID

def loadDescription(ID=""):
	
	return ID

def getDefaultValue(FollowUpID="",Field=""):
	Value = ""
	if FollowUpID:
		FollowUpObj = MKT_FOLLOWUP.query.get(FollowUpID)
		if FollowUpObj:
			Value = getattr(FollowUpObj, Field)

	return Value


@app.route("/Morakot/getReviewType",methods=['GET'])
def getReviewType():
	
	ReviewType 	= request.args.get('ReviewType')

	# print "ReviewType is ",ReviewType

	Survey   = False
	Review 	 = False
	PAR 	 = False

	SurveyShowTab   = ''
	Review_ShowTab  = ''
	PAR_ShowTab 	= ''

	if ReviewType == '1':
		Review  = True
		PAR  	= True
	elif ReviewType == '2':
		Survey  = True
		PAR 	= True
	elif ReviewType == '3':
		Survey 	= True
		Review  = True
	else:
		Survey   = True
		Review 	 = True
		PAR 	 = True

	return jsonify(Survey=Survey,
				   Review=Review,
				   PAR=PAR)

@app.route("/Morakot/getScheduleID",methods=['GET'])
def getScheduleID():

	ScheduleID 			 = 	request.args.get('ScheduleID') if 'ScheduleID' in request.args else ''

	if ScheduleID != '__None':

		Customer 		 = 	''
		CustomerID 		 = 	''
		ReviewDate 		 = 	''
		ReviewType 		 = 	''
		ReviewTypeID 	 = 	''
		Description 	 = 	''

		ReviewTypeDict 	 = {'1':'1 - Client Survey','2':'2 - Client Review','3':'3 - PAR Follow Up','4':'4 - Other'}

		FollowupCardObj  = 	MKT_FOLLOWUP_CARD.query.\
							filter(MKT_FOLLOWUP_CARD.ID==ScheduleID).\
							first()

		CustomerObj 	 = 	MKT_CUSTOMER.query.\
							filter(MKT_CUSTOMER.ID==FollowupCardObj.CustomerID).\
							first()

		Customer 		 = 	"%s - %s %s"%(CustomerObj.ID,CustomerObj.LastNameEn,CustomerObj.FirstNameEn)

		CustomerID 		 = CustomerObj.ID

		ReviewDate 		 = 	FollowupCardObj.NextFollowUpDate

		ReviewType 		 = 	ReviewTypeDict[FollowupCardObj.NextReviewType]

		ReviewTypeID 	 = 	FollowupCardObj.NextReviewType

		Description 	 = 	FollowupCardObj.ActionPlan

		# print "Description ",Description
		# print "Review Date",ReviewDate
		# print "Review Type",ReviewType
		# print "Customer :",Customer
	else:
		Customer 		 = 	''
		CustomerID 		 = 	''
		ReviewDate 		 = 	''
		ReviewType 		 = 	''
		ReviewTypeID 	 = 	''
		Description 	 = 	''

	return jsonify(Customer=Customer,
				   CustomerID=CustomerID,
				   ReviewDate=ReviewDate,
				   ReviewType=ReviewType,
				   ReviewTypeID=ReviewTypeID,
				   Description=Description)

def custom_NextFollowUpDate(form,field):

	NextFollowUpDate = request.form['NextFollowUpDate']

	if NextFollowUpDate:
		# clear out processing errors
		field.errors[:] = []

		CheckFormatDate = mktdate.isDateISO(NextFollowUpDate)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

	else:
		# clear out processing errors
		field.errors[:] = []

class FRM_FOLLOWUP(exform):
	# Customer Detail
	# CustomerID				= RemoteTextField(requiredlabel(getLanguage("Customer"), "*"), validators=[validators.Required()])

	ScheduleID 				= 		QuerySelectField("Followup Card",
										query_factory=loadSchedule,
										get_label=lambda a: a.ID,
										allow_blank=True,
										blank_text=u'--None--'
										# default=lambda:loadSchedule(request.args.get("FollowUpID") if 'FollowUpID' in request.args else ''),
									)

	CustomerID 				= 		QuerySelectField(requiredlabel("Customer","*"),
										query_factory=loadCustomer,
										get_label=lambda a: a.ID + " - " + a.LastNameEn + " " + a.FirstNameEn,
										allow_blank=True,
										blank_text=u'--None--',
										default=lambda:loadCustomer(request.args.get("CustomerID") if 'CustomerID' in request.args else ""),
										validators=[validators.Required()]
									)

	# Review Detail
	ReviewDate 				= 		DateField(requiredlabel('Review Date','*'),
										format='%Y-%m-%d',
										default=lambda: mktdate.getDateISO(getDefaultValue(request.args.get("FollowUpID") if 'FollowUpID' in request.args else "","NextFollowUpDate")),
										validators=[validators.Required()])

	ReviewType 				= 		SelectField(requiredlabel('Review Type','*'),
										choices		=	[	('1', '1 - Client Survey'),
															('2', '2 - Client Review'),
															('3', '3 - PAR Folow Up')
															# ('4', '4 - Other')
														],
										default=lambda: loadReviewType(request.args.get('ReviewType') if 'ReviewType' in request.args else ''),
										validators  =	[validators.Required()]
									)
	
	Description 			= 		TextAreaField(requiredlabel('Description','*'),
										default=lambda: loadDescription(request.args.get("Description") if 'Description' in request.args else ""),
										validators=[validators.Required()])

	@staticmethod
	def hotField():
		hotfield 		 = []

		fielddisplay 	 = "$('#CustomerID').select2('data', {'id':data.CustomerID,'text':data.Customer});"
		fielddisplay 	+= "$('#ReviewDate').val(data.ReviewDate);"
		fielddisplay 	+= "$('#ReviewType').select2('data', {'id':data.ReviewTypeID,'text':data.ReviewType}).trigger('change');"
		fielddisplay 	+= "$('#Description').val(data.Description);"

		varname 		 = "ScheduleID:$('#ScheduleID').val()"
		fun 			 = ["ScheduleID",varname,fielddisplay,"/Morakot/getScheduleID","change"]
		hotfield.append(fun)

		return hotfield
