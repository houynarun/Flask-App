from app.mktcore.imports 				import *
from .models 							import *
from app.LoanApplication.models 		import *
from app.LoanApplication.forms 			import *
from app.Customer.models 				import *
from app.Province.models 				import *
from app.District.models 				import *
from app.Village.models 				import *
from app.Commune.models 				import *
from app.Customer.forms 				import *
from app.Rejected.models 				import *
from app.Customer.models 				import *
from app.Setting.models 				import *
from app.LoanAmendment.models 			import *

import app.tools.user 					as mktuser
import app.tools.mktaudit 				as mktaudit
import app.tools.mktdb 					as mktdb
import app.tools.mktsetting 			as mktsetting
import app.tools.mktnotification		as mktnotify
import app.tools.mktautoid 				as mktAutoID
import app.tools.mktaccounting			as mktaccounting
import local.FirstFinance.tools.mktloan as mktloan
import math


# registerCRUD(admin, '/LoanApprovalEx', 'LoanApprovalEx', FRM_LOAN_APPROVAL_EX, [MKT_LOAN_APPROVAL])

APPSTATUS_NEW 		=	"0"
APPSTATUS_SUBMIT	= 	"1"
APPSTATUS_REVIEWED  = 	"2"
APPSTATUS_APPROVED   = 	"3"
APPSTATUS_REJECTED  = 	"4"
APPSTATUS_CANCEL 	= 	"5"
APPSTATUS_CLOSED 	= 	"6"


ACTION_REVIEWED     = 	"1"
ACTION_APPROVED     = 	"2"
ACTION_REJECTED     = 	"3"
ACTION_COMMENT      = 	"4"
ACTION_RESET		= 	"5"

ACTION 				=	{ACTION_REVIEWED	: "Reviewed",
						 ACTION_APPROVED	: "Approved", 
						 ACTION_REJECTED	: "Rejected",
						 ACTION_COMMENT		: "Comment",
						 ACTION_RESET		: "Reset"}

NUM_OF_REVIEWER 	= 	mktsetting.getAppSetting('NumberOfReviewer').split("*") # Y = allow to approved if there are 2/3 of reviewer review the loan. Example: 3/3*Y
NUM_OF_APPROVER 	= 	mktsetting.getAppSetting('NumberOfApprover').split("*") # Y = change status to approved if 2/3 of approver approve the loan. Example: 2/3*Y

# NUM_OF_REVIEWER 	= 	'3/3.0*Y'.split("*") # Y = allow to approved if there are 2/3 of reviewer review the loan. Example: 3/3*Y
# NUM_OF_APPROVER 	= 	'2/3.0*Y'.split("*") # Y = change status to approved if 2/3 of approver approve the loan. Example: 2/3*Y
CHECK_ROLE_EXIST 	= 	"Y" # Y = allow to review/approval to next level role if role not exist

EXTRA_RECIEVER   	= 	mktsetting.getAppSetting('ExtraRoleReciever').split()
if not EXTRA_RECIEVER:
	EXTRA_RECIEVER 		=	['10'] #10 ==> Role CAO

def getLoanListApplication():	
	Branch             	=   mktuser.getCurrentBranch()
	LoanList         	=   [] # Store Loan APP Obj to whoever login, already condition!!
	UserID             	=   mktuser.getUser().ID
	RoleID             	=   mktuser.getUserRole(UserID)

	#Add condition to filter out already approval application
	#1. Find only role have right for review and approval => show record for user with role in config only.
	#2. Filter only LA that current user role not yet take action
	
	REVIEWER 	 = getRoleInApprovalRuleConfig(RoleType="Reviewer")
	APPROVER 	 = getRoleInApprovalRuleConfig(RoleType="Approver")
	ROLE_IN_RULE = REVIEWER + APPROVER
	QueryStatus  = [APPSTATUS_SUBMIT,APPSTATUS_REVIEWED]
	if RoleID in ROLE_IN_RULE:
		AccessBranch 		=	getAccessBranch(UserID=UserID)	
		LoanAppObj          =	db.session.query(MKT_LOAN_APPLICATION.ID,
											func.count(MKT_LOAN_APPROVAL.Inputter).label("NumRecords"),
											func.string_agg(MKT_LOAN_APPROVAL.Inputter,",").label("Users"),
										).\
										outerjoin(MKT_LOAN_CONTRACT, MKT_LOAN_CONTRACT.LoanApplicationID == MKT_LOAN_APPLICATION.ID).\
										outerjoin(MKT_LOAN_APPROVAL, MKT_LOAN_APPROVAL.LoanApplicationID == MKT_LOAN_APPLICATION.ID).\
										filter(MKT_LOAN_APPLICATION.AppStatus.in_(QueryStatus)).\
										filter(or_(MKT_LOAN_CONTRACT.LoanApplicationID==None,
												   MKT_LOAN_CONTRACT.LoanApplicationID=='')).\
										filter(or_(~MKT_LOAN_APPROVAL.Role.in_([RoleID]),
													MKT_LOAN_APPROVAL.LoanApplicationID==None,
													MKT_LOAN_APPROVAL.LoanApplicationID=='')).\
										group_by(MKT_LOAN_APPLICATION.ID).\
										order_by(MKT_LOAN_APPLICATION.AppDate.asc(),
												 MKT_LOAN_APPLICATION.ID.asc())

		if "ALL" not in AccessBranch:
			LoanAppObj 		=	LoanAppObj.filter(MKT_LOAN_APPLICATION.Branch.in_(AccessBranch))

		if RoleID in APPROVER and RoleID not in REVIEWER:
			LoanAppObj 		= 	LoanAppObj.having(func.count(MKT_LOAN_APPROVAL.Inputter)>0)
		# print LoanAppObj.count()
		for row in LoanAppObj:	
			# print row	
			AppObj             		= MKT_LOAN_APPLICATION.query.get(row.ID)
			CheckAviliableApproval 	= checkAviliableApproval(LoanApplicationID=row.ID,RoleID=RoleID)
			if CheckAviliableApproval[0]:
				print row
				LoanList.append(AppObj)

	return LoanList

@app.route('/Morakot/LoanApprovalEx/',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoadApproval():

	ErrorMsg    = []
	getCheck = checkAccess ("/Morakot/LoanApprovalEx/","Search")
	if getCheck != True:
		ErrorMsg.append(msg_error+msg_permission)
		return render_template("permission.html",ErrorMsg=ErrorMsg)

	LoanList = getLoanListApplication()
	Branch   = mktuser.getCurrentBranch()

	return render_template('LoanApproval/LoanReview.html',
						toMoney=mktmoney.toMoney,
						float=float,
						CurrencyObj = mktmoney.getCurrencyObj,
						ApprovalObj=MKT_LOAN_APPROVAL,
						User=MKT_USER,
						CustomerObj=MKT_CUSTOMER,
						LoanList = LoanList,
						Branch = Branch
						)

@app.route('/Morakot/LoanReviewDetail/',methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def getLoadApprovalDe():
	try:
		ErrorMsg    = []
		getCheck = checkAccess ("/Morakot/LoanReviewDetail/","Search")
		if getCheck != True:
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg) 
			
		ID = request.args.get('ID') if 'ID' in request.args else ''

		LoanAppObj   = MKT_LOAN_APPLICATION.query.get(ID)
		CustomerObj  = MKT_CUSTOMER.query.get(LoanAppObj.LNCustomerID)
		ApprovalObj  = MKT_LOAN_APPROVAL.query.filter(MKT_LOAN_APPROVAL.LoanApplicationID==ID)
		LoanApproval = MKT_LOAN_APPROVAL

		AccessRightDict 			= 	{}
		AccessRightDict.update({"Reviewed": checkAccessRight(LoanApplicationID=ID,Action=ACTION_REVIEWED)})
		AccessRightDict.update({"Approved": checkAccessRight(LoanApplicationID=ID,Action=ACTION_APPROVED)})
		AccessRightDict.update({"Rejected": checkAccessRight(LoanApplicationID=ID,Action=ACTION_REJECTED)})
		AccessRightDict.update({"Comment" : checkAccessRight(LoanApplicationID=ID,Action=ACTION_COMMENT)})
		AccessRightDict.update({"Reset"   : checkAccessRight(LoanApplicationID=ID,Action=ACTION_RESET)})

		#####
		if request.method == 'POST':
			UserID 					=	mktuser.getUser().ID
			UserRoleID 				=	mktuser.getUserRole(UserID)
			DateTime 				=	mktdate.getDateTimeNow()
			Date 					=	DateTime.split(" ")[0]

			Action 					=	request.form.get("Action") 
			LoanAppID 				=	request.form.get("LoanAppID") 
			Comment 				=	request.form.get("Comment")

			LoanData 				=	{}
			ApprovalData			=	{}
			CustomerData 			=	{}
			RejectedData 			=	{}
			LoanObj  				= 	MKT_LOAN_APPLICATION.query.get(LoanAppID)
			Branch 					=	mktuser.getCurrentBranch()

			#check exist review or approval
			#check order reviewer or approver
			CheckAviliableApproval = checkAviliableApproval(LoanApplicationID=LoanAppID,RoleID=UserRoleID)

			if not LoanObj:
				flash(msg_warning+'This loan application not found.')
			elif CheckAviliableApproval[0] == False:
				flash(msg_warning+CheckAviliableApproval[1])
			else:
				if LoanObj:
					Branch = LoanObj.Branch
					#add approval to MKT_LOAN_APPROVAL		
					# if Action not in [ACTION_RESET]:
					ApprovalData.update({'LoanApplicationID': LoanAppID,
										 'Action'			: Action,
										 'Comment'			: Comment,
										 'Role'				: UserRoleID})

					mktdb.insertTable(MKT_LOAN_APPROVAL,ApprovalData)
					# db.session.commit()	

					#update Loan Application Status
					AppStatus 		=	LoanObj.AppStatus
					ConfigData		=	getConfig(LoanApplicationID=LoanAppID)
					OrderReviewer 	=	ConfigData.get("OrderReviewer")			#index of user login role in list of reviewer
					OrderApprover 	=	ConfigData.get("OrderApprover")			#index of user login role in list of approver
					Reviewer 		=	ConfigData.get("Reviewer")				#list of reviwer roleid
					Approver 		=	ConfigData.get("Approver")				#list of approver roleid
					IsEnoughReviewer=	ConfigData.get("IsEnoughReviewer")		#check if loan have engouh reviewer for approval
					IsEnoughApprover=	ConfigData.get("IsEnoughApprover")		#check if loan have engouh approver
					IsEnoughRejected=	ConfigData.get("IsEnoughRejected")		#check if loan have engouh approver
					NotYetReviewRole=	ConfigData.get("NotYetReviewRole")
					NotYetApproveRole=	ConfigData.get("NotYetApproveRole")
					RecieverList 	=	getUserByRole(Role=[], Branch=Branch)
					Msg 			=	""

					CustomerObj 	=	MKT_CUSTOMER.query.get(LoanObj.LNCustomerID)

					ReviewedByOrder =	NUM_OF_REVIEWER[1]
					ApprovedByOrder =	NUM_OF_APPROVER[1]
					ApproverList	=	[]
					ReviewerList	=	[]
					RejectedList 	=	[]

					#for create loan application for co-borrower
					CoBorrowerList  = 	[]
					LoanDict 		= 	{}

					if Action == ACTION_REVIEWED:
						LoanData.update({"AppStatus": APPSTATUS_REVIEWED,'ReviewedBy':UserID, 'ReviewedDate':Date})
						if IsEnoughReviewer[0] == True:#enough reviewer based on config
							#notify to approver and reviewer if still able to review
							if ApprovedByOrder == "Y":#notify by order
								ApproverList.append(Approver[0])
							else:#notify not by order
								ApproverList = ApproverList + Approver

							if ReviewedByOrder == "Y":#notify by order								
								if len(NotYetReviewRole) > 0:
									ReviewerList.append(NotYetReviewRole[0])
							else:#not by order
								ReviewerList.extend(NotYetReviewRole)

							#set message and to reciever
							#Approver 
							if len(ApproverList) > 0:
								List = getUserByRole(Role=ApproverList, Branch=Branch)
								Msg  = " was already reviewd by %s. Please approve this loan application." % UserID
								RecieverList.append((List,Msg))

							#Reviewer
							if len(ReviewerList) > 0:
								List = getUserByRole(Role=ReviewerList, Branch=Branch)
								Msg  = " was already reviewed by %s. Please review more for this loan application." % UserID
								RecieverList.append((List,Msg))

						else:#not enough
							# notify to next reveiwer based on config
							if ReviewedByOrder == "Y":#notify by order
								List 			= 	getUserByRole(Role=[NotYetReviewRole[0]], Branch=Branch)
								Msg 			= 	" was already reviewed by %s. Please review more for this loan application." % UserID	
								if len(List) > 0:
									RecieverList.append((List,Msg))							
							else:#not by order
								List 		 	= 	getUserByRole(Role=NotYetReviewRole, Branch=Branch)
								Msg 			= 	" was already reviewed by %s. Please review more for this loan application." % UserID
								if len(List) > 0:
									RecieverList.append((List,Msg))	

					elif Action == ACTION_APPROVED:
						# if AppStatus not in [APPSTATUS_APPROVED, APPSTATUS_REJECTED]:		
						#check notify by order ?
						MainLoanObj = LoanObj
						LoanDict.update(MainLoanObj.__dict__)
						if "_sa_instance_state" in LoanDict:
							del LoanDict['_sa_instance_state']
						CoBorrowerObj  = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanAppID)
						LoanData.update({"AppStatus": APPSTATUS_APPROVED,"ApprovedDate":Date,"ApprovedBy":UserID})

						if IsEnoughApprover[0] == True:#enough approver based on config
							#notify to all for loan success approve and next approver if loan still able to approve
							#update loan application to approve	
							#update ApprovedDate and ApprovedBy of loan application when there are enough approvers

							# -- Close this block due to last approval not able to do anything so no need to notify specific msg to him.

							# if ApprovedByOrder == "Y":#notify by order								
							# 	if len(NotYetApproveRole) > 0:
							# 		ApproverList.append(NotYetApproveRole[0])
							# else:#not by order
							# 	ApproverList.extend(NotYetApproveRole)

							# #notify to last approver for more approve
							# List 			= 	getUserByRole(Role=ApproverList, Branch=Branch)
							# Msg 			= 	" was already approved with %s of LCC.\nYou cannot approve or reject but you can comment for this loan application. " % NUM_OF_APPROVER[0]
							# if len(ApproverList) > 0:
							# 	RecieverList.append((List,Msg))	
							# 	for item in Approver:
							# 		if item in ApproverList:
							# 			Approver.remove(item)	

							# -- End -- #				

							#notify to related person for this loan (CC,REVIEWER,APPROVER,CAO)							
							List 			= 	getUserByRole(Role=Reviewer+Approver,Branch=Branch)	
							CCObj 			= 	MKT_USER.query.filter(MKT_USER.ID==LoanObj.PreparedBy)
							List.extend(CCObj)
							Msg 			=	" was approved by %s. " % UserID if len(Approver) == 1 else " was approved with %s of LCC. " % NUM_OF_APPROVER[0]
							RecieverList.append((List,Msg))

							#notify to extra Reciever CAO
							ExtraRecieverRole = EXTRA_RECIEVER
							List = getUserByRole(Role=ExtraRecieverRole,Branch=Branch)
							Msg = " %s You can proceed loan contract with this loan application." % Msg
							RecieverList.append((List,Msg))

							#auto create loan application for co-borrower
							#check if loan already create for co-borrower							
							i = 1
							for row in CoBorrowerObj:
								Co_ID = "%s-%02d" % (row.ID,i)
								CoLoanObj = MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID==Co_ID)
								if CoLoanObj.count() == 0:
									LoanDict.update({"ID"			: 	Co_ID,
													 "AppStatus"	: 	APPSTATUS_APPROVED,
													 "CheckCoBorrower": "N",
													 "MonthlyRep"	: 	row.CBMonthlyRep,
													 "NDI"			:	row.CBNDI,
													 "MonthlyRepToNDI": row.CBMonthlyRepToNDI,
													 "LNCustomerID" : 	row.CoBorrowerID,
													 "SpouseID" 	:	row.CBSpouseID,
													 "Currency"		: 	row.CBCurrency,
													 "AppliedAmount":	row.CBAppliedAmount,
													 "Amount"		: 	row.CBAmount,
													 "Cycle"		:	row.CBCycle,
													 "LoanProduct"	:	row.CBLoanProduct,
													 "LoanPurpose"	:	row.CBLoanPurpose,
													 "Category"		: 	row.CBCategory,
													 "InterestRate"	:	row.CBInterestRate,
													 "RepaymentMode": 	row.CBRepaymentMode,
													 "FreqType"		:	row.CBFreqType,
													 "Frequency"	:	row.CBFrequency,
													 "Term"			:	row.CBTerm,
													 "Installment"	:	row.CBInstallment,
													 "EquivAmount"	: 	row.CBEquivAmount,
													 "EquivMonthlyRep":	row.CBEquivMonthlyRep,
													 "SplitAmount"	:	row.CBSplitAmount})
									i=i+1

									CoBorrowerList.append(LoanDict.copy())

						else:#not enough
							# notify to next reveiwer based on config
							#still keep status as Reviewed
							LoanData.update({"AppStatus": APPSTATUS_REVIEWED})
							if ApprovedByOrder == "Y":#notify by order
								List 			= 	getUserByRole(Role=[NotYetApproveRole[0]], Branch=Branch)
								Msg 			= 	" was approved by %s. Please approve more for this loan application." % UserID
								RecieverList.append((List,Msg))
							else:#not by order
								List 			= 	getUserByRole(Role=NotYetApproveRole, Branch=Branch)
								Msg 			= 	" was approved by %s. Please approve more for this loan application." % UserID
								RecieverList.append((List,Msg))													

					elif Action == ACTION_REJECTED:
						RejectedBy 				=	request.form.get("RejectedBy")
						RejectedReason 			=	request.form.get("RejectedReason")
						Block 					=	request.form.get("Block")
						BlockReason 			=	request.form.get("BlockReason")
						LoanData.update({"AppStatus": APPSTATUS_REJECTED,'RejectedBy':UserID, 'RejectedDate':Date})

						if UserRoleID in Reviewer:#user login is reviewer
							LoanData.update({"AppStatus": APPSTATUS_REJECTED})
							List 		= 	getUserByRole(Role=Reviewer + Approver,Branch=Branch)
							CCObj 		= 	MKT_USER.query.filter(MKT_USER.ID==LoanObj.PreparedBy)	
							List.extend(CCObj)
							Msg 		= 	"was rejected by %s. " % UserID
							RecieverList.append((List,Msg))

							ExtraRecieverRole = EXTRA_RECIEVER
							List = getUserByRole(Role=ExtraRecieverRole,Branch=Branch)
							Msg = "was rejected by %s. You cannot proceed loan contract using this loan application." % UserID
							RecieverList.append((List,Msg))

						else:#user login is approver
							if IsEnoughRejected[0] == True:
								#notify to all for loan success approve and next approver if loan still able to approve
								#update loan application to approve	

								# -- Close this block due to last approval not able to do anything so no need to notify specific msg to him.

								# if ApprovedByOrder == "Y":#notify by order								
								# 	if len(NotYetApproveRole) > 0:
								# 		ApproverList.append(NotYetApproveRole[0])
								# else:#not by order
								# 	ApproverList.extend(NotYetApproveRole)

								# #notify to last approver for more approve
								# List 			= 	getUserByRole(Role=ApproverList, Branch=Branch)
								# Msg 			= 	" was already rejected with %s of LCC.\nYou cannot approve or reject but you can comment for this loan application. " % NUM_OF_APPROVER[0]
								# if len(ApproverList) > 0:
								# 	RecieverList.append((List,Msg))	
								# 	for item in Approver:
								# 		if item in ApproverList:
								# 			Approver.remove(item)	

								# -- End -- #					

								#notify to related person for this loan (CC,REVIEWER,APPROVER,CAO)								
								List 			= 	getUserByRole(Role=Reviewer+Approver,Branch=Branch)	
								CCObj 			= 	MKT_USER.query.filter(MKT_USER.ID==LoanObj.PreparedBy)
								List.extend(CCObj)
								Msg 			=	" was rejected by %s." % UserID if len(Approver) == 1 else " was rejected with %s of LCC. " % NUM_OF_APPROVER[0]
								RecieverList.append((List,Msg))

								#notify to extra Reciever CAO
								ExtraRecieverRole = EXTRA_RECIEVER
								List = getUserByRole(Role=ExtraRecieverRole,Branch=Branch)
								Msg = " %s You cannot proceed loan contract with this loan application." % Msg
								RecieverList.append((List,Msg))

							else:#not enough
								LoanData.update({"AppStatus": APPSTATUS_REVIEWED})
								if ApprovedByOrder == "Y":#notify by order
									List 			= 	getUserByRole(Role=[NotYetApproveRole[0]], Branch=Branch)
									Msg 			= 	" was rejected by %s. Please make approval for this loan application." % UserID
									RecieverList.append((List,Msg))
								else:#not by order
									List 			= 	getUserByRole(Role=NotYetApproveRole, Branch=Branch)
									Msg 			= 	" was rejected by %s. Please make approval for this loan application." % UserID
									RecieverList.append((List,Msg))

						#Add Reject Data to MKT_REJECTED
						RejectedData.update({"Rejected": "Y",
											 "CustomerID": CustomerObj.ID,
											 "LoanAppID": LoanAppID,
											 "RejectedBy": RejectedBy,
											 "RejectedReason": RejectedReason,
											 "RejectedDate": DateTime.split()[0]})
						#Update Block to customer
						if Block == "Y":
							CustomerData.update({"Block": "Y","BlockReason": BlockReason})

					elif Action == ACTION_COMMENT:
						#add record to loan approval with action comment and no change status of loan application 
						#notify to person related that login user is comment on this loan application
						LoanData.update({"AppStatus": AppStatus})

						List 			= 	getUserByRole(Role=Reviewer+Approver,Branch=Branch)	
						CCObj 			= 	MKT_USER.query.filter(MKT_USER.ID==LoanObj.PreparedBy)
						List.extend(CCObj)						

						#notify to extra Reciever CAO
						ExtraRecieverRole = EXTRA_RECIEVER
						List.extend(getUserByRole(Role=ExtraRecieverRole,Branch=Branch))

						Msg 			=	" was commented by %s. \n %s" % (UserID, Comment)
						RecieverList.append((List,Msg))

					elif Action == ACTION_RESET:
						#1. find approver which already take action
						#2. remove approval from MKT_LOAN_APPROVAL which approved or rejected by LCC
						#3. remove rejected from MKT_REJECTED which take action by LCC
						#4. update status in MKT_LOAN_APPLICATION to Review
						#5. notify to done approval lcc

						DoneApproverID = []
						ApproverObj = db.session.query(MKT_LOAN_APPROVAL.Inputter).\
														filter(MKT_LOAN_APPROVAL.LoanApplicationID == LoanAppID).\
														filter(~MKT_LOAN_APPROVAL.Action.in_(ACTION_RESET)).\
														filter(MKT_LOAN_APPROVAL.Role.in_(Approver))
						for row in ApproverObj:
							DoneApproverID.append(row.Inputter)

						# print "DoneApproverID ", DoneApproverID

						if DoneApproverID:
							#2. remove approval by LCC
							mktaudit.deleteRecord(MKT_LOAN_APPROVAL,[MKT_LOAN_APPROVAL.LoanApplicationID == LoanAppID,MKT_LOAN_APPROVAL.Inputter.in_(DoneApproverID)],True)

							#3. remove rejected 
							mktaudit.deleteRecord(MKT_REJECTED,[MKT_REJECTED.LoanAppID == LoanAppID, MKT_REJECTED.Inputter.in_(DoneApproverID)],True)

							#4. update status to APPSTATUS_REVIEWED
							if AppStatus in [APPSTATUS_REJECTED]:
								mktdb.updateRecord(MKT_LOAN_APPLICATION, [MKT_LOAN_APPLICATION.ID == LoanAppID], {"AppStatus": APPSTATUS_REVIEWED})

							#5. notify to DoneApprover
							for item in DoneApproverID:
								Msg 	 = " was reset approval by %s. Please approved/rejected again." % (UserID)
								RecieverID = item
								LoanID     = LoanAppID
								#print "Reciever ", RecieverID
								mktnotify.insertNotify({
									'ID'	: 	LoanID, 
									'Path'	:	'LoanReviewDetail',
									'Title'	:	'Loan Application Review/Approval',
									'From'	: 	UserID, 'To': RecieverID,
									'Message': 	Msg
								})

					#Save Record to database
					if LoanData:
						# print "LoanData "
						try:
							#Update AppStatus to loan application and move old record to hist.
							Curr = 	int(LoanObj.Curr)+1
							LoanData.update({'Curr' :	str(Curr),
									'Inputter' 		:	LoanObj.Inputter,
									'Createdon' 	: 	LoanObj.Createdon,
									'Authorizer' 	: 	UserID,
									'Authorizeon'	: 	DateTime})
							# Move loan approval to history by loan application ID
							mktloan.moveLoanApprovalToHist(LoanAppID)
							mktaudit.moveAUTHtoHIST(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION_HIST,LoanAppID)
							mktdb.updateRecord(MKT_LOAN_APPLICATION, [MKT_LOAN_APPLICATION.ID == LoanAppID], LoanData)
							# db.session.commit()	

							#Add Reject to MKT_REJECTED if user reject
							if RejectedData:
								#add Reject to MKT_REJECTED
								ID = mktautoid.getAutoID("FRM_REJECTED")
								RejectedData.update({"ID":ID})
								mktdb.insertTable(MKT_REJECTED,RejectedData)
								# db.session.commit()

							"""
								Update Customer to block if user reject and choose block
								If Loan Application is rejected, below customers will be blocked
									1. Main Borrower and Spouse
									2. All CoBorrower and CoBorrower's Spouse
							"""
							if CustomerData:
								ListBlockedCus 	=	[LoanObj.LNCustomerID, LoanObj.SpouseID]
								LoanCoBorrowerObj 	=	MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID == LoanObj.ID).all()
								if LoanCoBorrowerObj:
									for row in LoanCoBorrowerObj:
										ListBlockedCus.append(row.CoBorrowerID)
										ListBlockedCus.append(row.CBSpouseID)

								# print "ListCustomer",ListBlockedCus

								ListCusObj 	= MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID.in_(ListBlockedCus)).all()
								for item in ListCusObj:
									Curr 	= int(item.Curr)+1
									CustomerData.update({	'Curr':			str(Curr),
															'Inputter':		LoanObj.Inputter,
															'Createdon': 	LoanObj.Createdon,
															'Authorizer': 	UserID,
															'Authorizeon': 	DateTime})

									mktaudit.moveAUTHtoHIST(MKT_CUSTOMER,MKT_CUSTOMER_HIST,item.ID)
									mktdb.updateRecord(MKT_CUSTOMER, [MKT_CUSTOMER.ID == item.ID], CustomerData)

							#Auto create loan application for co-borrower if loan already have enough approver
							if len(CoBorrowerList) > 0:
								CollateralObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanAppID).first()
								GuaranterObj  = MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID==LoanAppID)
								LoanApprovalObj   = MKT_LOAN_APPROVAL.query.filter(MKT_LOAN_APPROVAL.LoanApplicationID==LoanAppID)

								for CoBorrowerData in CoBorrowerList:
									#check if CoBorrower already exist
									#auto add loan application for co-borrower
									Co_ID = CoBorrowerData.get("ID")
									mktdb.insertTable(MKT_LOAN_APPLICATION,CoBorrowerData)
									# db.session.commit()

									#auto add loan collateral for co-borrower
									if CollateralObj:
										CollateralData = {"ID" 			: 	Co_ID,
														  "Collateral"	: 	CollateralObj.Collateral}

									  	mktdb.insertTable(MKT_LOAN_COLLATERAL,CollateralData)
										# db.session.commit()

									#auto add loan guranter for co-borrower
									if GuaranterObj:
										GuranterData = {}
										for row in GuaranterObj:
											GuranterData.update({"ID" 			: 	Co_ID,
																 "Guarantor"	:	row.Guarantor,
																 "GTRelationIndicator": row.GTRelationIndicator})

											mktdb.insertTable(MKT_GUARANTOR,GuranterData)
											# db.session.commit()

									#auto add loan approval for co-borrower new loan application
									if LoanApprovalObj:
										ApprovalDict = {}
										for row in LoanApprovalObj:									
											ApprovalDict = row.__dict__
											ApprovalDict.update({"LoanApplicationID": Co_ID,
																 "Inputter": row.Inputter,
																 "Authorizer": row.Authorizer,
																 "Comment": row.Comment,
																 "Action": row.Action})

											if '_sa_instance_state' in ApprovalDict:
												del ApprovalDict['_sa_instance_state']

											if 'ID' in ApprovalDict: del ApprovalDict['ID']

											mktdb.insertTable(MKT_LOAN_APPROVAL,ApprovalDict)
											# db.session.commit()

							db.session.commit()
						except Exception as e:
							db.session.rollback()
							print "Error: %s"%e

						#notification to reciever
						for item in RecieverList:
							Reciever = item[0]
							Msg 	 = item[1]	
							for row in Reciever:
								RecieverID = row.ID
								LoanID     = LoanAppID
								#print "Reciever ", RecieverID
								mktnotify.insertNotify({'ID': LoanID, 
									'Path':	'LoanReviewDetail',
									'Title':'Loan Application Review/Approval',
									'From': UserID, 'To': RecieverID,
									'Message': Msg
								})	

					flash("Record %s was %s successfully." % (LoanAppID, ACTION.get(Action)))
					return redirect(url_for('getLoadApproval'))		
		#####

		return render_template('LoanApproval/LoanReviewDetail.html',
								# LoanApplication=LoanApplication,
								mktmoney = mktmoney,
								ReportName="View Loan Details",
								LoanAppObj=LoanAppObj,
								CustomerObj=CustomerObj,
								ApprovalObj=ApprovalObj,
								LoanApproval=LoanApproval,
								AccessRightDict=AccessRightDict,
								TblCustomer=MKT_CUSTOMER,
								Product = MKT_LOAN_PRODUCT,
								Collateral = MKT_COLLATERAL,
								TblLoanPurpose = MKT_LOAN_PURPOSE,
								User = MKT_USER)
	except Exception, e:
		db.session.rollback()
		raise

@app.route('/Morakot/GetLoanReviewDetail/<ID>',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanReviewDetail(ID=''):
	ID = ID
	return render_template('LoanApproval/getLoanReview.html', ID=ID)

@app.route('/Morakot/GetLoanReviewBeforeReject/<ID>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanReviewBeforeReject(ID=''):

	ID = ID

	return render_template('LoanApproval/getBeforeReject.html',	ID=ID)

@app.route('/Morakot/LoanUpcomingReview',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanUpcoming():

	return render_template('LoanApproval/upcomingreview.html')

@app.route('/Morakot/Signature/',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSignature():
	LoanAppID 		= request.args.get('ID') if 'ID' in request.args else ''
	LoanAppHistID 	= request.args.get('ID') if 'ID' in request.args else ''
	Curr = ''
	if LoanAppID.find('@') > 0:
		# print "loan hist"
		a 		  = LoanAppID.find('@')
		Curr 	  = LoanAppID[a+1:] # get current version number
		LoanAppID = LoanAppID[:a] # get Loan Application ID without '@'

		ApprovalObj = MKT_LOAN_APPROVAL_HIST.query.filter(MKT_LOAN_APPROVAL_HIST.LoanApplicationID==LoanAppID,MKT_LOAN_APPROVAL_HIST.ID.ilike('%@'+Curr))
		LoanAppObj= MKT_LOAN_APPLICATION_HIST.query.get(LoanAppHistID)
	else:
		ApprovalObj = MKT_LOAN_APPROVAL.query.filter(MKT_LOAN_APPROVAL.LoanApplicationID==LoanAppID)
		LoanAppObj= MKT_LOAN_APPLICATION.query.get(LoanAppID)


	RejectedObj = MKT_REJECTED.query.\
							filter(MKT_REJECTED.LoanAppID == LoanAppID)

	return render_template('LoanApproval/signature.html',
							ApprovalObj=ApprovalObj,
							LoanAppObj=LoanAppObj,
							RejectedObj=RejectedObj,
							ACTION_APPROVED=ACTION_APPROVED,
							ACTION_REVIEWED=ACTION_REVIEWED,
							ACTION_REJECTED=ACTION_REJECTED,
							ACTION_COMMENT=ACTION_COMMENT)

def loadLoanApplication(ID=''):
	Branch  	=  	mktuser.getCurrentBranch()
	LoanObj 	= 	[]
	QueryString = 	MKT_LOAN_APPLICATION.query.\
						filter(MKT_LOAN_APPLICATION.Branch.in_([Branch])).\
						filter(MKT_LOAN_APPLICATION.AppStatus.in_([APPSTATUS_SUBMIT, APPSTATUS_REVIEWED, APPSTATUS_APPROVED])).\
						order_by(MKT_LOAN_APPLICATION.ID.asc())	
	if ID:
		QueryString = QueryString.filter(MKT_LOAN_APPLICATION.ID==ID)
	else:
		QueryString = QueryString

	return QueryString

def getUserByRole(Role=[], Branch="",ListID=''):
	List = []	
	UserObj = MKT_USER.query.filter(MKT_USER.Role.in_(Role))
	if Branch:
		for row in UserObj:
			AccessBranch = row.AccessBranch.split()
			if Branch in AccessBranch or "ALL" in AccessBranch:
				List.append(row)
	else:
		List = UserObj.all()

	if ListID:
		ListID = []
		for row in List:
			ListID.append(row.ID)
		return ListID

	return List

def getMinNumberOfApproval(Number,Type):
	TwoThirds = int(math.ceil((eval(Type[0]))* Number))
	return TwoThirds

def getLoanApprovalObj(**kwargs):
	Action 			=	kwargs.get("Action")
	LoanAppID		=	kwargs.get("LoanAppID")
	Role 			=	kwargs.get("Role")

	LoanApparovalObj=	db.session.query(MKT_LOAN_APPROVAL.LoanApplicationID,
											 MKT_LOAN_APPROVAL.Role,
											 MKT_ROLE.Description
										).\
										outerjoin(MKT_USER, 
											 MKT_USER.ID == MKT_LOAN_APPROVAL.Inputter
										).\
										outerjoin(MKT_ROLE, 
											 MKT_ROLE.ID == MKT_LOAN_APPROVAL.Role
										).\
										filter(~MKT_LOAN_APPROVAL.Action.in_([ACTION_RESET])).\
										group_by(
											MKT_LOAN_APPROVAL.Role,
											MKT_LOAN_APPROVAL.LoanApplicationID,
											MKT_ROLE.Description)
	if Action:
		LoanApparovalObj = LoanApparovalObj.filter(MKT_LOAN_APPROVAL.Action==Action)
	if LoanAppID:
		LoanApparovalObj = LoanApparovalObj.filter(MKT_LOAN_APPROVAL.LoanApplicationID==LoanAppID)
	if Role:
		LoanApparovalObj = LoanApparovalObj.filter(MKT_LOAN_APPROVAL.Role==Role)

	return LoanApparovalObj

def checkAccessRight(LoanApplicationID='', Action=''):
	'''
	Custom function to check whether login user able to approve or reviewed specific loan application.
	Action = ACTION_REVIEWED, ACTION_APPROVED, ACTION_REJECTED
	'''
	UserID 		=	mktuser.getUser().ID
	RoleID 		=	mktuser.getUserRole(UserID)	
	ConfigData	= 	getConfig(LoanApplicationID=LoanApplicationID)

	Access 		=   [False,"Permission Denied."]

	#check whether login user role in list of reviewer or approver ?
	Reviewer = ConfigData.get("Reviewer")
	Approver = ConfigData.get("Approver")
	NotYetApproveRole = ConfigData.get("NotYetApproveRole")

	LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanApplicationID)
	AppStatus  = LoanAppObj.AppStatus

	if Action == ACTION_REVIEWED:
		if RoleID in Reviewer:
			Access = [True,""]

	elif Action == ACTION_APPROVED:
		if RoleID in Approver:
			Access = [True,""]

	elif Action == ACTION_REJECTED:
		if RoleID in Reviewer + Approver:
			Access = [True,""]

	elif Action == ACTION_COMMENT:
		if RoleID in NotYetApproveRole and len(NotYetApproveRole) == 1 and len(Approver) > 1 and AppStatus in [APPSTATUS_APPROVED,APPSTATUS_REJECTED]:
			Access = [True,""]

	elif Action == ACTION_RESET:
		if RoleID in Approver:
			#check whether approver already take action on approval
			#allow to see reset button in case some approver take action and loan application status not yet approved
			ApprovalObj = db.session.query(MKT_LOAN_APPROVAL.Inputter,
										   MKT_USER.ID,
										   MKT_USER.Role
										).\
										join(
											MKT_USER, 
											MKT_USER.ID == MKT_LOAN_APPROVAL.Inputter
										).\
										filter(MKT_LOAN_APPROVAL.LoanApplicationID==LoanApplicationID).\
										filter(~MKT_LOAN_APPROVAL.Action.in_([ACTION_RESET])).\
										filter(MKT_USER.Role.in_(Approver)).first()
			if ApprovalObj and AppStatus not in [APPSTATUS_APPROVED]:
				Access = [True,""]

	return Access

def checkOrder(LoanApplicationID='', Action=''):
	'''
	Custom function to check whether login user able to approve or reviewed specific loan application.
	Action = ACTION_REVIEWED, ACTION_APPROVED, ACTION_REJECTED
	'''
	UserID 			=	mktuser.getUser().ID
	RoleID 			=	mktuser.getUserRole(UserID)	
	ConfigData		= 	getConfig(LoanApplicationID=LoanApplicationID)
	OrderReviewer  	= 	ConfigData.get("OrderReviewer")#index of user login role in list of reviewer
	OrderApprover  	= 	ConfigData.get("OrderApprover")#index of user login role in list of approver
	Reviewer      	= 	ConfigData.get("Reviewer")#list of reviwer roleid
	Approver 	   	= 	ConfigData.get("Approver")#list of approver roleid
	IsEnoughReviewer=	ConfigData.get("IsEnoughReviewer")#check if loan have engouh reviewer for approval
	Access 			=   [True,""]	

	if Action == ACTION_REVIEWED:
		if NUM_OF_REVIEWER[1] == "Y":
			Previous = OrderReviewer-1
			if Previous >=0:
				#check record if previous reviewer already review
				LoanApprovalObj = getLoanApprovalObj(LoanAppID=LoanApplicationID,Action=Action,Role=Reviewer[Previous]).first()
				if not LoanApprovalObj:
					RoleObj = MKT_ROLE.query.get(Reviewer[Previous])
					Access = [False,"This loan not yet previewed by previous previewer %s" % RoleObj.Description]

	elif Action == ACTION_APPROVED:
		if NUM_OF_APPROVER[1] == "Y":
			Previous = OrderApprover-1
			if Previous >=0:
				#check record if previous approver already approve
				LoanApprovalObj = getLoanApprovalObj(LoanAppID=LoanApplicationID,Action=Action,Role=Approver[Previous]).first()
				if not LoanApprovalObj:
					RoleObj = MKT_ROLE.query.get(Approver[Previous])
					Access = [False,"This loan not yet approved by previous approver %s" % RoleObj.Description]

		#check review already enough
		if IsEnoughReviewer[0] == False:
			Access = [False,IsEnoughReviewer[1]]	

	return Access

def checkLoanStatus(LoanApplicationID=''):
	# pass
	Able = [True,""]
	UserID 		=	mktuser.getUser().ID
	RoleID  	=	mktuser.getUserRole(UserID)
	LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanApplicationID)
	if LoanAppObj:
		ConfigData = getConfig(LoanApplicationID=LoanApplicationID)
		NotYetApproveRole = ConfigData.get("NotYetApproveRole")
		IsEnoughReviewer  = ConfigData.get("IsEnoughReviewer")
		if LoanAppObj.AppStatus == APPSTATUS_APPROVED:
			if RoleID not in NotYetApproveRole:
				Able = [False,"This loan already approved."]
		elif LoanAppObj.AppStatus == APPSTATUS_REJECTED:
			if RoleID not in NotYetApproveRole:
				Able = [False,"This loan already rejected."]
			else:
				if IsEnoughReviewer[0] == False:
					Able = [False,"This loan already rejected."]
	return Able

def getConfig(LoanApplicationID='',Branch=""):
	'''
		RULE
		================
		LoanAmount <= 5000 and TotalExposure <= 10000*17*7 				==> Condition*ReviewerRoleID*ApproverRoleID
		LoanAmount <= 5000 and TotalExposure > 10000*17 7 14*18 15 16	==> Condition*ReviewerRoleID*ApproverRoleID
		LoanAmount > 5000*17 7 14*18 15 16								==> Condition*ReviewerRoleID*ApproverRoleID
		================
		This function will return 
	'''
	RULE 		= 	mktsetting.getAppSetting('ApprovalRule').split("\n")
	UserID 		=	mktuser.getUser().ID
	RoleID 		=	mktuser.getUserRole(UserID)	
	
	LoanAppObj 	= 	MKT_LOAN_APPLICATION.query.get(LoanApplicationID)	
	if not Branch:
		Branch  	=  	mktuser.getCurrentBranch()

	LABranch 		=	LoanAppObj.Branch if LoanAppObj else mktuser.getCurrentBranch()
	RULE_BY_BRANCH = mktsetting.getAppSetting('ApprovalRule%s'%LABranch)
	if RULE_BY_BRANCH:
		RULE = RULE_BY_BRANCH.split("\n")

	Reviewer    = 	[]
	Approver    =   []
	OrderReviewer = ''
	OrderApprover = ''
	IsEnoughReviewer = [True,""]
	IsEnoughApprover = [True,""]
	IsEnoughRejected = [True,""]
	NotYetReviewRole = []
	NotYetApproveRole = []
	ApproverRole    = 	[]
	ReviewerRole    = 	[]
	DictResult  = 	{}

	if LoanAppObj:
		Currency 			=	LoanAppObj.Currency
		ID 					=	LoanAppObj.ID

		# LoanAmount 			=	getAmountBaseCurrency(Amount=LoanAppObj.Amount,Currency=Currency)
		
		##: Do not change LoanAmount, and TotalExposure variable name.
		LoanAmount 			=	getLoanAmount(LoanAppObj=LoanAppObj)
		TotalExposure 		= 	getTotalExpousure(LoanAppObj=LoanAppObj)

		# print "LoanAmount ", LoanAmount
		# print "TotalExpouse ", TotalExposure

		for rule in RULE:
			Rule = rule.split("*")
			Condition = Rule[0]
			if eval(Condition):
				Reviewer  = Rule[1].split()
				Approver  = Rule[2].split()
				# print LoanApplicationID , Condition

		#check exist role
		if CHECK_ROLE_EXIST == "Y":			
			for role in Reviewer:
				UserList = getUserByRole(Role=[role],Branch=Branch)
				if len(UserList) > 0:
					ReviewerRole.append(role)

			for role in Approver:
				UserList = getUserByRole(Role=[role],Branch=Branch)
				if len(UserList) > 0:
					ApproverRole.append(role)

			del Reviewer[:]
			del Approver[:]

			Reviewer = Reviewer + ReviewerRole
			Approver = Approver + ApproverRole

		else:
			Reviewer = Reviewer	
			Approver = Approver

		# print "DDD ", Reviewer
		#get order of role in config for store info to reviewer 1, 2, or 3		
		if RoleID in Reviewer: 
			OrderReviewer = Reviewer.index(RoleID)

		#get order of role in config for store info to approver 1, 2, or 3		
		if RoleID in Approver: 
			OrderApprover = Approver.index(RoleID)

		###### check whether loan already have enough reviewer ######			
		MinReviewer      =	getMinNumberOfApproval(Number=len(Reviewer),Type=NUM_OF_REVIEWER)
		LoanReviewObj 	 =	getLoanApprovalObj(Action=ACTION_REVIEWED,LoanAppID=LoanApplicationID)

		# print "MinReview ", MinReviewer
		# print "Count ", LoanReviewObj.count()

		if LoanReviewObj.count() < MinReviewer:
			IsEnoughReviewer = [False,"This loan need at least %s reviewer(s) to review before approval." % MinReviewer]	
		###### end check enough review ######

		###### check whether loan have enough approver ######		
		MinApprover       =	getMinNumberOfApproval(Number=len(Approver),Type=NUM_OF_APPROVER)
		LoanApproveObj 	  =	getLoanApprovalObj(Action=ACTION_APPROVED,LoanAppID=LoanApplicationID)
		# print "MinApprover ", MinApprover
		# print "Count ", LoanApproveObj.count()

		if LoanApproveObj.count() < MinApprover:
			IsEnoughApprover = [False,"This loan need at least %s approver(s) to approve before it can change status to Applied." % MinApprover]	

		###### end check enough approver ######

		###### check whether loan have enough rejected ######
		MinRejected       =	getMinNumberOfApproval(Number=len(Approver),Type=NUM_OF_APPROVER)
		LoanRejectedObj	  =	getLoanApprovalObj(Action=ACTION_REJECTED,LoanAppID=LoanApplicationID)

		if LoanRejectedObj.count() < MinRejected and RoleID in Approver: 
			IsEnoughRejected = [False,"This loan need at least %s approver(s) to reject before it can change status to rejected." % MinRejected]	

		###### end check enough rejected ######

		LoanApprovalObj  = 	getLoanApprovalObj(LoanAppID=LoanApplicationID)
		NotYetReviewRole = 	NotYetReviewRole + Reviewer
		for row in LoanApprovalObj:
			if row.Role in Reviewer:
				NotYetReviewRole.remove(row.Role)

		NotYetApproveRole = NotYetApproveRole + Approver
		for row in LoanApprovalObj:
			if row.Role in Approver:
				NotYetApproveRole.remove(row.Role)

		# print "Not Yet Review Role ", NotYetReviewRole
			
	DictResult = {"Reviewer"			: Reviewer,
				  "Approver"			: Approver,
				  "OrderReviewer"		: OrderReviewer,
				  "OrderApprover"		: OrderApprover,
				  "IsEnoughReviewer"	: IsEnoughReviewer,
				  "IsEnoughApprover"	: IsEnoughApprover,
				  "NotYetReviewRole"	: NotYetReviewRole,
				  "NotYetApproveRole"	: NotYetApproveRole,
				  "IsEnoughRejected"	: IsEnoughRejected}

	return DictResult

def getAmountBaseCurrency(Amount=0,Currency='USD'):
	ReportingRateObj 	= mktaccounting.getReportingRateObj()
	ExchangeRate 		= float(ReportingRateObj.get(Currency,'USD'))
	Amount 				= float(Amount) * ExchangeRate
	return Amount

def getTotalExpousure(LoanAppObj):
	TotalExposure = 0
	LoanProduct  = 	LoanAppObj.LoanProduct
	Currency 	 = 	LoanAppObj.Currency
	MainBorrower =  LoanAppObj.LNCustomerID
	CustomerList = 	[MainBorrower]
 
	TotalExposure = float(LoanAppObj.EquivAmount)
	CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID == LoanAppObj.ID)
	for row_co in CoBorrowerObj:
		#append borrower id to CustomerList
		CustomerList.append(row_co.CoBorrowerID)
		#add co-borrower amount to LoanAmount
		TotalExposure = TotalExposure + float(row_co.CBEquivAmount)


	for customer in CustomerList:
		CustomerID = customer
		ApplicationList = getApplicationMainBorrower(LoanAppObj=LoanAppObj,CustomerID=CustomerID)
		LoanAppAllObj 	= ApplicationList[0]
		LoanCBObj 		= ApplicationList[1]

		for row in LoanAppAllObj:
			TotalExposure	=	TotalExposure + mktloan.getLoanExposure(row,'MainBorrower')

		for row in LoanCBObj:
			TotalExposure   =	TotalExposure + mktloan.getLoanExposure(row,'CoBorrower')

	return TotalExposure	


def getAccessBranch(UserID):
	UserObj = MKT_USER.query.get(UserID)
	AccessBranch = []
	if UserObj:
		AccessBranch = UserObj.AccessBranch
		AccessBranch = AccessBranch.split()
	# print "AccessBranch ", AccessBranch
	return AccessBranch

def getLoanAmount(LoanAppObj):	
	LoanAmount = 0
	LoanProduct  = 	LoanAppObj.LoanProduct
	Currency 	 = 	LoanAppObj.Currency
	MainBorrower =  LoanAppObj.LNCustomerID
	CustomerList = 	[MainBorrower]

	#add main borrower amount to LoanAmount
	LoanAmount 	 = 	float(LoanAppObj.EquivAmount)
	CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID == LoanAppObj.ID)

	for row_co in CoBorrowerObj:
		#append borrower id to CustomerList
		CustomerList.append(row_co.CoBorrowerID)
		#add co-borrower amount to LoanAmount
		LoanAmount = LoanAmount + float(row_co.CBEquivAmount)

	for customer in CustomerList:
		CustomerID = customer
		Condition = [MKT_LOAN_APPLICATION.LoanProduct==LoanProduct]
		ApplicationList = getApplicationMainBorrower(LoanAppObj=LoanAppObj,Condition=Condition,CustomerID=CustomerID)
		LoanAppAllObj 	= ApplicationList[0]
		LoanCBObj 		= ApplicationList[1]

		for row in LoanAppAllObj:
			LoanAmount+= float(row.EquivAmount if row.EquivAmount else 0)

		for row in LoanCBObj:
			LoanAmount+= float(row.CBEquivAmount if row.CBEquivAmount else 0)

	return LoanAmount

def getApplicationMainBorrower(LoanAppObj,Condition="",CustomerID=""):
	RejectedStatus = [APPSTATUS_REJECTED,APPSTATUS_CANCEL,APPSTATUS_CLOSED]#4=Reject,5=Cancel,6=Closed
	MainBorrower =	LoanAppObj.LNCustomerID
	ID = LoanAppObj.ID
	if CustomerID:
		MainBorrower = CustomerID
	TopupObj = db.session.query(MKT_LOAN_AMENDMENT.LoanAppID).\
							filter(MKT_LOAN_AMENDMENT.Option=='1').\
							filter(MKT_LOAN_AMENDMENT.AddDeduct=='2').subquery()
	#Calculate TotalExposure
	LoanAppAllObj		= 	MKT_LOAN_APPLICATION.query.filter(~MKT_LOAN_APPLICATION.AppStatus.in_(RejectedStatus),\
														MKT_LOAN_APPLICATION.ID != ID,\
														or_(MKT_LOAN_APPLICATION.LNCustomerID == MainBorrower,
															MKT_LOAN_APPLICATION.SpouseID == MainBorrower)).\
														filter(~MKT_LOAN_APPLICATION.ID.in_(TopupObj))

	if Condition:
		LoanAppAllObj 	=	LoanAppAllObj.filter(*Condition)

	LoanAppAllObj 		=	LoanAppAllObj.all()


	ListLoanAppID 		= 	[item.ID.split("-")[0] for item in LoanAppAllObj]

	LoanCBObj 			= 	db.session.query(MKT_LOAN_CO_BORROWER)\
									.filter(MKT_LOAN_CO_BORROWER.ID != ID,
											~MKT_LOAN_CO_BORROWER.ID.in_(ListLoanAppID),
											or_(MKT_LOAN_CO_BORROWER.CoBorrowerID == MainBorrower,
												MKT_LOAN_CO_BORROWER.CBSpouseID == MainBorrower),
											~MKT_LOAN_APPLICATION.AppStatus.in_(RejectedStatus))\
									.join(MKT_LOAN_APPLICATION, MKT_LOAN_APPLICATION.ID == MKT_LOAN_CO_BORROWER.ID)

	if Condition:
		LoanCBObj 		=	LoanCBObj.filter(*Condition)

	LoanCBObj 			=	LoanCBObj.all()

	return LoanAppAllObj,LoanCBObj

def getRoleInApprovalRuleConfig(**kwargs):
	"""
		This function use for return list of role that have right for review and approve on LA which user config in AppSetting ApprovalRule%s
		Parameter:
			RoleType <string> 	: 	"Reviewer" or "Approver"
		Return
			List 				:	List of Reviewer or Approver from RuleCofing
	"""
	RoleType = kwargs.get("RoleType","")
	ROLE_IN_RULE = []
	AppSettingObj 	= 	MKT_APP_SETTING.query.filter(MKT_APP_SETTING.ID.like('ApprovalRule%'))
	for row in AppSettingObj:
		RULE = row.Value.split("\n")
		for rule in RULE:
			RULE_ELEMENT 	= rule.split("*")
			REVIEWER 		= RULE_ELEMENT[1].split()
			APPROVER 		= RULE_ELEMENT[2].split()
			if RoleType == "Reviewer":
				ROLE_IN_RULE.extend(item for item in REVIEWER if item not in ROLE_IN_RULE)
			elif RoleType == "Approver":
				ROLE_IN_RULE.extend(item for item in APPROVER if item not in ROLE_IN_RULE)
			else:
				ROLE_IN_RULE.extend(item for item in REVIEWER+APPROVER if item not in ROLE_IN_RULE)

	return ROLE_IN_RULE

def checkAviliableApproval(**kwargs):
	LoanApplicationID 	= 	kwargs.get("LoanApplicationID")
	RoleID 				= 	kwargs.get("RoleID")

	Result 				= 	False, "This loan already review/approval by %s role." % RoleID

	AppObj             	=    MKT_LOAN_APPLICATION.query.get(LoanApplicationID)
	AppStatus  			=	 AppObj.AppStatus		
	ConfigData         	=    getConfig(LoanApplicationID=AppObj.ID,Branch=AppObj.Branch)
	IsEnoughReviewer	=    ConfigData.get('IsEnoughReviewer')#check if loan have engouh reviewer for approval
	IsEnoughApprover	=    ConfigData.get('IsEnoughApprover')#check if loan have engouh approver
	NotYetReviewRole	=    ConfigData.get('NotYetReviewRole')
	NotYetApproveRole	=    ConfigData.get('NotYetApproveRole')
	Approver 			=	ConfigData.get('Approver')
	Reviewer 			=	ConfigData.get('Reviewer')

	if RoleID in Approver+Reviewer:
		if AppStatus in [APPSTATUS_SUBMIT,APPSTATUS_REVIEWED]:
			if len(NotYetReviewRole) > 0:
				if AppStatus not in [APPSTATUS_REJECTED,APPSTATUS_APPROVED]:
					if NUM_OF_REVIEWER[1] == 'Y':#preview by order
						if RoleID == NotYetReviewRole[0]:
							Result = True, ""
						else:
							Result = False, "You are not next reviewer."
					else:#not by order
						if RoleID in NotYetReviewRole:
							Result = True, ""
				else:
					Result = False, "This loan status is approved/rejected."

			if IsEnoughReviewer[0] == True:    
				if len(NotYetApproveRole) > 0:
					if NUM_OF_APPROVER[1] == 'Y':#preview by order
						if RoleID == NotYetApproveRole[0]:
							Result = True, ""
						else:
							Result = False, "You are not next approver."
					else:#not by order
						if RoleID in NotYetApproveRole:
							Result = True, ""
			else:
				if RoleID in Approver and RoleID not in Reviewer: #Show this message when approver try take action when loan not yet review enough
					Result = False, "This loan not yet have enough reviewer."
		else:
			Result = False, "This loan already approved/rejected."
	else:
		Result = False, "You are not in reviewer or approver role."

	return Result
