from app.mktcore.wtfimports 		import *
from app.mktcore.imports 			import *
from app.LoanContract.models 		import *
from .models 						import *
from app.LoanProduct.models 		import *
from app.AccProduct.models 			import *

import app.tools.mktaccounting 		as mktaccounting
import app.tools.mktteller			as mktteller
import app.tools.mktdate 			as mktdate
import app.tools.mktparam 			as mktparam
import app.tools.user 				as mktuser
import app.tools.mktfundtransfer 	as mktfundtransfer
import app.tools.mktaudit 			as mktaudit
import app.tools.mktsetting 		as mktsetting

import local.FirstFinance.tools.mktpostaccounting 	as mktpostaccounting

ACTUAL_PAYMENT_CURRENCY = 'USD' #FF buy insurance for customer in USD
#In case loan in KHR or other currency beside USD, user need to input exchange amount
#Example Amount = 400,000 KHR => Exchange Amount = 100 USD

CROSS_CURRENCY_POSTING = "N"

@app.route("/Morakot/ScheduleAddonPayment/GetLoanID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ScheduleAddonPaymentGetLoanID():
	Customer 		= request.args.get('CustomerID')
	CurrentBranch 	= mktuser.getCurrentBranch()

	LoanObj 		= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ContractCustomerID == Customer,\
													MKT_LOAN_CONTRACT.Branch == CurrentBranch).all()

	LoanInauObj = MKT_LOAN_CONTRACT_INAU.query.filter(MKT_LOAN_CONTRACT_INAU.ContractCustomerID == Customer,\
													MKT_LOAN_CONTRACT_INAU.Branch == CurrentBranch).all()
	LoanObj.extend(LoanInauObj)
	dic = {}
	if LoanObj:
		for row in LoanObj:
			dic[row.ID] = row.ID

	return jsonify(results=dic)

@app.route("/Morakot/ScheduleAddonPayment/GetCurrency", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def ScheduleAddonPaymentGetCurrency():
	Currency 	= ''
	Account 	= ''
	ApprovedAmount = ""
	LoanID 		= request.args.get('LoanID') if 'LoanID' in request.args else ''
	if LoanID:
		LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		if not LoanObj:
			LoanObj = MKT_LOAN_CONTRACT_INAU.query.get(LoanID)
			
		if LoanObj:
			Currency 		= LoanObj.Currency

	return jsonify(Currency=Currency)

def loadLoanContract():
	if request.method == 'POST':
		CustomerID = request.form["CustomerID"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			CustomerID = Record['CustomerID']
		else:
			CustomerID = ""

	LoanObj = MKT_LOAN_CONTRACT.query.filter_by(ContractCustomerID=CustomerID).all()
	LoanInauObj = MKT_LOAN_CONTRACT_INAU.query.filter_by(ContractCustomerID=CustomerID).all()
	LoanObj.extend(LoanInauObj)

	return LoanObj

#After Save record will be look up value from table store
def getRecord():
	try:
		result = MKT_SCHEDULE_ADDON_PAYMENT.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_SCHEDULE_ADDON_PAYMENT_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict = row.__dict__
			return Dict
		else:
			return Dict
	except:
		raise

def loadAddonPaymentType():
	TypeObj = MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query
	return TypeObj

def setPrepaidAddon(**kwargs):

	BankDate 		= 	mktdate.getBankDate()
	Reverse 		=	kwargs.get("Reverse")
	PostData 		=	kwargs.get("PostData")
	TypeObj 		=	kwargs.get("TypeObj")

	Amount 			= 	PostData.get("Amount",0)
	ExchangeAmount 	= 	PostData.get("ExchangeAmount",0)
	Currency 		= 	PostData.get("Currency")
	LCYAmount 		= 	PostData.get("LCYAmount",0)

	if PostData:
		if Reverse == True:
			#post reverse 
			DrCategory  = TypeObj.CrCategory
			DrAccount 	= ""
			DrMode 		= "Direct"
			CrCurrency 	= Currency

			CrCategory  = TypeObj.DrCategory
			CrAccount 	= ""
			CrMode 		= "Direct"	
			DrCurrency 	= Currency		

			Transaction = TypeObj.RevTransaction

			if CROSS_CURRENCY_POSTING == "Y":
				if Currency not in [ACTUAL_PAYMENT_CURRENCY]:
					DrCurrency = ACTUAL_PAYMENT_CURRENCY
					PostData.update({"DrAmount": LCYAmount})

		else:
			#post normal
			DrCategory  = TypeObj.DrCategory
			DrAccount 	= ""
			DrMode 		= "Direct"
			DrCurrency 	= Currency
			

			CrCategory  = TypeObj.CrCategory
			CrAccount 	= ""
			CrMode 		= "Direct"
			CrCurrency 	= Currency						

			Transaction = TypeObj.Transaction

			if CROSS_CURRENCY_POSTING == "Y":
				if Currency not in [ACTUAL_PAYMENT_CURRENCY]:
					CrCurrency = ACTUAL_PAYMENT_CURRENCY
					PostData.update({"CrAmount": LCYAmount})


		if mktteller.isCashCateogry(Category=DrCategory):
			DrAccount = mktteller.getInternalAccount(Branch=PostData.get("Branch"),Category=DrCategory,Currency=DrCurrency)
			DrMode 	  = "Indirect"

		if mktteller.isCashCateogry(Category=CrCategory):
			CrAccount = mktteller.getInternalAccount(Branch=PostData.get("Branch"),Category=CrCategory,Currency=CrCurrency)
			CrMode 	  = "Indirect"

		PostData.update({"Transaction"		:	Transaction,#Other Transacion
						 "Module"			:	"LC",
						 "DrAccount"		:	DrAccount,
						 "CrAccount"		:	CrAccount, #take account of vault in brach
						 "DrCategory"		:	DrCategory,#Prepaid Insurance
						 "CrCategory"		:	CrCategory,#Cash in valt
						 "DrMode"			:	DrMode,
						 "CrMode"			:	CrMode,
						 "DrCurrency"		: 	DrCurrency,
						 "CrCurrency"		: 	CrCurrency,
						 "LCYAmount"		:	LCYAmount})

		mktpostaccounting.setPostAccounting(**PostData)

def custom_Amount(form, field):
	"""
		1. Check Vault Balance if it able to cover Amount
	"""	
	ID 			=	request.form["ID"]
	Amount 		= 	request.form["Amount"]
	Branch  	= 	mktuser.getCurrentBranch()
	Currency	= 	request.form["Currency"]
	AddonType	= 	request.form["AddonPaymentType"]

	AddonObj 	= 	MKT_SCHEDULE_ADDON_PAYMENT.query.get(ID)
	ParamObj    = 	MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(AddonType)

	if ParamObj:
		if mktteller.isCashCateogry(Category=ParamObj.CrCategory):
			# Account 	= 	getAccount(Branch=Branch,Currency=Currency,Category=ParamObj.CrCategory)
			Account 	= 	mktteller.getInternalAccount(Branch=Branch,Currency=Currency,Category=ParamObj.CrCategory)
			AccountObj 	= 	MKT_ACCOUNT.query.get(Account)

			if AccountObj:
				AccProductObj = MKT_ACC_PRODUCT.query.filter(MKT_ACC_PRODUCT.ID == AccountObj.AccProduct).first()
				if not AddonObj:#new record (new)
					if Decimal(AccountObj.Balance) < Decimal(Amount):
						raise ValidationError("%s Account#%s doesn't have sufficient fund. Current balance is %s %s" % (AccProductObj.Description,AccountObj.ID,Currency, float(AccountObj.Balance)))
					
				else:#old record (edit)
					if Decimal(AddonObj.Amount) != Decimal(Amount):
						#NewBalance = Balance in Vault + Amount that we will reverse 
						NewBalance = Decimal(AccountObj.Balance) + Decimal(AddonObj.Amount)
						if Decimal(NewBalance) < Decimal(Amount):
							raise ValidationError("%s Account#%s doesn't have sufficient fund. Current balance is %s %s" % (AccProductObj.Description,AccountObj.ID,Currency, float(AccountObj.Balance)))
			else:
				raise ValidationError("There are no account for %s" % "")

def custom_StartDate(form,field):
	StartDate = request.form['StartDate']

	if StartDate:
		# clear out processing errors
		field.errors[:] = []
		CheckFormatDate = mktdate.isDateISO(StartDate)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

	else:
		# clear out processing errors
		field.errors[:] = []

def custom_EndDate(form,field):
	StartDate = request.form['StartDate']
	EndDate   = request.form['EndDate']

	if EndDate:
		# clear out processing errors
		field.errors[:] = []
		CheckFormatDate = mktdate.isDateISO(EndDate)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		
		if EndDate < StartDate:
			raise ValidationError("Start Date must be bigger than End Date.")
	else:
		# clear out processing errors
		field.errors[:] = []

def custom_ExchangeAmount(form, field):	
	if CROSS_CURRENCY_POSTING == "Y":
		ExchangeAmount 	= 	request.form["ExchangeAmount"]
		Currency		= 	request.form["Currency"]
		try:
			ExchangeAmount = Decimal(ExchangeAmount.replace(',',''))
		except:
			raise ValidationError("This field must be in numeric format.")

		if Currency not in [ACTUAL_PAYMENT_CURRENCY] and Currency: 
			if ExchangeAmount <= 0:
				raise ValidationError("Exchange Amount must be greater than 0.")
		else:
			if ExchangeAmount != 0:
				raise ValidationError("Exchange Amount must be 0. This field allow to input in case Currency is not %s only." % ACTUAL_PAYMENT_CURRENCY )	
	

class FRM_SCHEDULE_ADDON_PAYMENT_EX(exform):

	CustomerID 				= 	RemoteTextField(requiredlabel("Customer","*"),
										validators=[validators.Required()])
	LoanID 					= 	QuerySelectField(requiredlabel("Loan Contract","*"),
										query_factory = loadLoanContract,
										get_label 	= "ID",
										allow_blank=True,
										blank_text=u"",
										validators=[validators.Required()])

	Currency 				= 	TextField(requiredlabel("Currency","*"), validators=[validators.Required()])
	Amount 		 			= 	TextField(requiredlabel("Amount", "*"),
										validators=[validators.Required(),custom_Amount])
	ExchangeAmount 			= 	TextField("Exchange Amount (USD)",
										validators=[custom_ExchangeAmount],
										default=0)


	AddonPaymentType		= 	QuerySelectField(requiredlabel("Payment Type","*"),
										query_factory = loadAddonPaymentType,
										get_label 	= lambda a: a.ID + " - " + a.Description,
										allow_blank=True,
										blank_text=u"",
										validators=[validators.Required()])


	StartDate 				= 	DateField('Start Date',
										format='%Y-%m-%d',
										validators=[custom_StartDate])

	EndDate 				= 	DateField('End Date',
										format='%Y-%m-%d',
										validators=[custom_EndDate])

	TranDate 				= 	DateField(requiredlabel('Transaction Date','*'),
										format='%Y-%m-%d',
										default=mktdate.getBankDate(),
										validators=[validators.Required()])

	Reference 				= 	TextField("Reference")
	Note 					= 	TextAreaField(requiredlabel("Note", "*"),
										[validators.Required()])

	def validate_TranDate(form, field):

		TranDate     = form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()
		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	@staticmethod
	def setDisable():
		ListControl = ["Currency"]
		return ListControl

	@staticmethod
	def moneyField():
		ListControl = [["Amount","Currency"]]
		return ListControl

	@staticmethod
	def setVisible():
		ListControl = ["Reference"]
		if CROSS_CURRENCY_POSTING == "N":
			ListControl.append("ExchangeAmount")
		return ListControl

	@staticmethod
	def hotSelectField():
		hotfield  		= []
		fielddisplay 	= "LoanID"
		varname 		= "CustomerID:$('#CustomerID').val()"
		fun 			= ["CustomerID", varname, fielddisplay, "/Morakot/ScheduleAddonPayment/GetLoanID", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotField():
		hotfield  		= []
		fielddisplay 	= "$('#Currency').val(data.Currency)"
		varname 		= "LoanID:$('#LoanID').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/ScheduleAddonPayment/GetCurrency", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeInsert():
		try:
			ID					= 	request.form['ID']
			Branch 				= 	mktuser.getCurrentBranch()
			Amount 				= 	request.form["Amount"]
			AddonPaymentType   	= 	request.form["AddonPaymentType"]
			LoanID  			=	request.form["LoanID"]
			Currency 			=	request.form["Currency"]
			Note 				=	request.form["Note"]
			TranDate 			=	request.form["TranDate"]
			Reference 			= 	LoanID
			ExchangeAmount 		= 	request.form["ExchangeAmount"]

			NumOfAuth = g.getNAuthorize
			if NumOfAuth == 0:
				AddonObj = MKT_SCHEDULE_ADDON_PAYMENT.query.get(ID)
				if not AddonObj:#no record in live (new)
					AddonPaymentTypeObj 	=	MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(AddonPaymentType)
					PostData 		= 		{"Branch"		: 	Branch,
											"Reference"		: 	Reference,
											"Amount"		:	Decimal(Amount),
											"Currency"		:	Currency,
											"UserReference" : 	ID,
											"Note"			:   "%s" % (Note),
											"TranDate" 		:	TranDate,
											"Inputter" 		:	mktuser.getUser().ID,
											"LCYAmount"		:	ExchangeAmount}

					setPrepaidAddon(PostData=PostData,Reverse=False,TypeObj=AddonPaymentTypeObj)

				else:#edit record
					AddonPaymentTypeObj 	=	MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(AddonObj.AddonPaymentType)	
					#new addon
					NewAmount 	= 	Amount
					NewExchangeAmount = ExchangeAmount
					#old addon
					OldAmount  	= 	AddonObj.Amount
					OldExchangeAmount= AddonObj.ExchangeAmount

					if Decimal(NewAmount) != Decimal(OldAmount):					
						#reverse old accounting
						PostData 		= 	{"Branch"		: 	AddonObj.Branch,
											"Reference"		: 	AddonObj.LoanID,
											"Amount"		:	Decimal(OldAmount),
											"Currency"		:	AddonObj.Currency,
											"UserReference" : 	AddonObj.ID,
											"Note"			:   "%s" % (AddonObj.Note),
											"TranDate" 		:	AddonObj.TranDate,
											"Inputter" 		:	mktuser.getUser().ID,
											"LCYAmount"		:	OldExchangeAmount}

						setPrepaidAddon(PostData=PostData,Reverse=True,TypeObj=AddonPaymentTypeObj)

						#post new accounting
						AddonPaymentTypeObj 	=	MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(AddonPaymentType)
						PostData 		= 	{"Branch"		: 	Branch,
											"Reference"		: 	Reference,
											"Amount"		:	Decimal(NewAmount),
											"Currency"		:	Currency,
											"UserReference" : 	ID,
											"Note"			:   "%s" % (Note),
											"TranDate" 		:	TranDate,
											"Inputter" 		:	mktuser.getUser().ID,
											"LCYAmount"		:	NewExchangeAmount}

						setPrepaidAddon(PostData=PostData,Reverse=False,TypeObj=AddonPaymentTypeObj)

		except Exception as e:
			db.session.rollback()
			raise e
		return True	

	@staticmethod
	def beforeAuthorize():
		try:			
			ID 				=	g.formID
			AddonObj 		=	MKT_SCHEDULE_ADDON_PAYMENT.query.get(ID)
			AddonINAUObj 	=	MKT_SCHEDULE_ADDON_PAYMENT_INAU.query.get(ID)
			Status 			= 	AddonINAUObj.Status
			if Status == "RNAU":
				# print "Reverse"
				#Post reverse accounting
				PaymentObj = 	AddonINAUObj
				AddonPaymentTypeObj =	MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(PaymentObj.AddonPaymentType)
				PostData 			= 	{"Branch"			: 	PaymentObj.Branch,
											"Reference"		: 	PaymentObj.LoanID,
											"Amount"		:	Decimal(PaymentObj.Amount),
											"Currency"		:	PaymentObj.Currency,
											"UserReference" : 	PaymentObj.ID,
											"Note"			:   "%s" % (PaymentObj.Note),
											"TranDate" 		:	PaymentObj.TranDate,
											"Inputter" 		:	mktuser.getUser().ID,
											"LCYAmount"		:	Decimal(PaymentObj.ExchangeAmount)}

				setPrepaidAddon(PostData=PostData,Reverse=True,TypeObj=AddonPaymentTypeObj)
			else:
				if not AddonObj:#no record in live (new)
					# print "New"
					AddonObj  				= 	MKT_SCHEDULE_ADDON_PAYMENT_INAU.query.get(ID)
					AddonPaymentTypeObj 	=	MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(AddonObj.AddonPaymentType)
					
					Amount     		= 	AddonObj.Amount
					ExchangeAmount 	=	AddonObj.ExchangeAmount

					PostData 		= 	{"Branch"		: 	AddonObj.Branch,
										"Reference"		: 	AddonObj.LoanID,
										"Amount"		:	Decimal(Amount),
										"Currency"		:	AddonObj.Currency,
										"UserReference" : 	AddonObj.ID,
										"Note"			:   "%s" % (AddonObj.Note),
										"TranDate" 		:	AddonObj.TranDate,
										"Inputter" 		:	mktuser.getUser().ID,
										"LCYAmount"		: 	ExchangeAmount}

					setPrepaidAddon(PostData=PostData,Reverse=False,TypeObj=AddonPaymentTypeObj)

				else:#edit record	
					# print "Old"			
					#new addon
					NewAddonObj = MKT_SCHEDULE_ADDON_PAYMENT_INAU.query.get(ID)
					#old addon
					OldAddonObj = MKT_SCHEDULE_ADDON_PAYMENT.query.get(ID)

					NewAmount = NewAddonObj.Amount
					NewExchangeAmount = NewAddonObj.ExchangeAmount
					OldAmount = OldAddonObj.Amount
					OldExchangeAmount = OldAddonObj.ExchangeAmount

					if Decimal(NewAmount) != Decimal(OldAmount):					
						#reverse old accounting
						AddonPaymentTypeObj 	=	MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(OldAddonObj.AddonPaymentType)
						PostData 		= 	{"Branch"		: 	OldAddonObj.Branch,
											"Reference"		: 	OldAddonObj.LoanID,
											"Amount"		:	Decimal(OldAmount),
											"Currency"		:	OldAddonObj.Currency,
											"UserReference" : 	OldAddonObj.ID,
											"Note"			:   "%s" % (OldAddonObj.Note),
											"TranDate" 		:	OldAddonObj.TranDate,
											"Inputter" 		:	mktuser.getUser().ID,
											"LCYAmount"		: 	OldExchangeAmount}

						setPrepaidAddon(PostData=PostData,Reverse=True,TypeObj=AddonPaymentTypeObj)

						#post new accounting
						AddonPaymentTypeObj 	=	MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(NewAddonObj.AddonPaymentType)
						PostData 		= 	{"Branch"		: 	NewAddonObj.Branch,
											"Reference"		: 	NewAddonObj.LoanID,
											"Amount"		:	Decimal(NewAmount),
											"Currency"		:	NewAddonObj.Currency,
											"UserReference" : 	NewAddonObj.ID,
											"Note"			:   "%s" % (NewAddonObj.Note),
											"TranDate" 		:	NewAddonObj.TranDate,
											"Inputter" 		:	mktuser.getUser().ID,
											"LCYAmount"		: 	NewExchangeAmount}

						setPrepaidAddon(PostData=PostData,Reverse=False,TypeObj=AddonPaymentTypeObj)

		except Exception as e:
			db.session.rollback()
			raise e

		return None

	@staticmethod
	def IsAcceptOverrideINAU():
		Override 		= 	False
		Msg 			=	""
		Validate 		=	False

		ID 				=	g.formID
		AddonObj 		=	MKT_SCHEDULE_ADDON_PAYMENT.query.get(ID)
		AddonINAUObj 	=	MKT_SCHEDULE_ADDON_PAYMENT_INAU.query.\
										filter(MKT_SCHEDULE_ADDON_PAYMENT_INAU.ID == ID)

		AddonINAUObj 	= 	AddonINAUObj.first()

		Amount 			= 	AddonINAUObj.Amount
		Branch  		= 	AddonINAUObj.Branch
		Currency		= 	AddonINAUObj.Currency
		AddonType		= 	AddonINAUObj.AddonPaymentType

		# AddonObj 	= 	MKT_SCHEDULE_ADDON_PAYMENT.query.get(ID)
		ParamObj    = 	MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(AddonType)
		Account 	= 	mktteller.getInternalAccount(Branch=Branch,Currency=Currency,Category=ParamObj.CrCategory)
		AccountObj 	= 	MKT_ACCOUNT.query.get(Account)
		
		if mktteller.isCashCateogry(Category=ParamObj.CrCategory):
			if AccountObj:
				AccProductObj = MKT_ACC_PRODUCT.query.filter(MKT_ACC_PRODUCT.ID == AccountObj.AccProduct).first()
				if not AddonObj:#new record (new)
					if Decimal(AccountObj.Balance) < Decimal(Amount):
						raise ValidationError("%s Account#%s doesn't have sufficient fund. Current balance is %s %s" % (AccProductObj.Description,AccountObj.ID,Currency, float(AccountObj.Balance)))
					
				else:#old record (edit)
					if Decimal(AddonObj.Amount) != Decimal(Amount):
						#NewBalance = Balance in Vault + Amount that we will reverse 
						NewBalance = Decimal(AccountObj.Balance) + Decimal(AddonObj.Amount)
						if Decimal(NewBalance) < Decimal(Amount):
							raise ValidationError("%s Account#%s doesn't have sufficient fund. Current balance is %s %s" % (AccProductObj.Description,AccountObj.ID,Currency, float(AccountObj.Balance)))
			else:
				raise ValidationError("There are no account for %s" % "")

		return Override, Msg, Validate

	@staticmethod
	def reverseRec():
		try:
			AuthLevel 	= g.getNAuthorize
			ID 			= g.formID
			if AuthLevel == 0:
				#Post reverse accounting
				PaymentObj = MKT_SCHEDULE_ADDON_PAYMENT.query.get(ID)
				AddonPaymentTypeObj =	MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(PaymentObj.AddonPaymentType)
				PostData 			= 	{"Branch"		: 	PaymentObj.Branch,
											"Reference"		: 	PaymentObj.LoanID,
											"Amount"		:	Decimal(PaymentObj.Amount),
											"Currency"		:	PaymentObj.Currency,
											"UserReference" : 	PaymentObj.ID,
											"Note"			:   "%s" % (PaymentObj.Note),
											"TranDate" 		:	PaymentObj.TranDate,
											"Inputter" 		:	mktuser.getUser().ID,
											"LCYAmount"		: 	Decimal(PaymentObj.ExchangeAmount)}

				setPrepaidAddon(PostData=PostData,Reverse=True,TypeObj=AddonPaymentTypeObj)

			return True,""

		except Exception, e:
			flash(msg_error+" %s"%e)
			db.session.rollback()
			return False,""
