from app.mktcore.wtfimports 		import *
from app.mktcore.imports 			import *

from app.Category.models 			import *
from app.Transaction.models 		import *

import app.tools.mktteller			as mktteller

def loadCategory():
	return MKT_CATEGORY.query

def loadTransaction():
	return MKT_TRANSACTION.query

def isTillCategory(Category):
	TellerParam = mktparam.getTellerParam()
	if TellerParam:
		TillCategory 	= TellerParam.TillCategory
		if Category == TillCategory:
			return True
		else:
			return False
	else:
		return False

class FRM_SCHEDULE_ADDON_PAYMENT_TYPE_EX(exform):
	
	Description 		= 	TextField(requiredlabel('Description','*'),
										validators=[validators.Required()])

	LocalDescription	= 	TextField('Local Description')

	DrCategory 			= 	QuerySelectField(requiredlabel("Debit Category","*"),
											query_factory=loadCategory,
											get_label=lambda obj:"%s - %s"%(obj.ID,obj.Description),
											allow_blank=True,
											blank_text=u"---Choose Category---",
											validators=[validators.Required()])

	CrCategory 			= 	QuerySelectField(requiredlabel("Credit Category","*"),
											query_factory=loadCategory,
											get_label=lambda obj:"%s - %s"%(obj.ID,obj.Description),
											allow_blank=True,
											blank_text=u"---Choose Category---",
											validators=[validators.Required()])

	Transaction  		= 	QuerySelectField(requiredlabel("Transaction","*"),
											query_factory=loadTransaction,
											get_label=lambda obj:"%s - %s"%(obj.ID,obj.Description),
											allow_blank=True,
											blank_text=u"---Choose Transaction---",
											validators=[validators.Required()])

	RevTransaction  	= 	QuerySelectField(requiredlabel("Reverse Transaction","*"),
											query_factory=loadTransaction,
											get_label=lambda obj:"%s - %s"%(obj.ID,obj.Description),
											allow_blank=True,
											blank_text=u"---Choose Transaction---",
											validators=[validators.Required()])

	def validate_DrCategory(form,field):
		DrCategory = request.form['DrCategory']
		if mktteller.isCashCateogry(DrCategory):
			if not mktteller.isVaultCategory(DrCategory) or isTillCategory(DrCategory):
				raise ValidationError("For Cash Account, allow only Vault and Till Category.")

	def validate_CrCategory(form,field):
		CrCategory = request.form['CrCategory']
		if mktteller.isCashCateogry(CrCategory):
			if not mktteller.isVaultCategory(CrCategory) or isTillCategory(CrCategory):
				raise ValidationError("For Cash Account, allow only Vault and Till Category.")