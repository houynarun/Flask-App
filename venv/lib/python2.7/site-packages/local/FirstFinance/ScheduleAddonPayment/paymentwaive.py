from app.mktcore.wtfimports 		import *
from app.mktcore.imports 			import *
from app.LoanContract.models		import *
from app.ScheduleAddon.models 		import *
from app.Customer.models 			import *
from local.FirstFinance.ScheduleAddonPayment.models import *
import app.tools.mktdate 			as mktdate
import app.tools.user 				as mktuser
import app.tools.mktdb				as mktdb
import app.tools.mktfundtransfer 	as mktfundtransfer
import app.tools.mktsetting 		as mktsetting
import local.FirstFinance.tools.mktaddon as mktaddon
import app.tools.mktteller			as mktteller
import local.FirstFinance.tools.mktpostaccounting 	as mktpostaccounting


def setDefaultTranDate():
	return mktdate.getBankDate()

@app.route("/Morakot/LoanAddonInformation", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanAddonInformation():
	try:
		LoanID 		= request.args.get('LoanID')
		LoanObj 	= MKT_LOAN_CONTRACT.query.get(LoanID)
		Currency 	= ""
		CustomerName= ""
		PDAmount 	= 0
		AddonAmount = 0
		TotalAmount = 0
		if LoanObj:			
			CustomerObj = MKT_CUSTOMER.query.get(LoanObj.ContractCustomerID)
			if CustomerObj:
				CustomerName = "%s %s" % (CustomerObj.LastNameEn, CustomerObj.FirstNameEn)	
			Currency = LoanObj.Currency

			Insurance = mktaddon.getInsurance(LoanID=LoanObj.ID)
			#PDAmount = Insurance.get("PastDue")
			AddonAmount = Insurance.get("Remain")
			#TotalAmount = Insurance.get("TotalWaive")
			TotalAmount = float(PDAmount) + float(AddonAmount)

		return jsonify(CustomerName=CustomerName,
					   Currency=Currency,
					   PDAmount=PDAmount,
					   AddonAmount=AddonAmount,
					   TotalAmount=TotalAmount)

	except Exception, e:
		raise

@app.route("/Morakot/getTotalAmount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getTotalAmount():
	try:
		PDAmount 		= request.args.get('PDAmount',0)
		AddonAmount		= request.args.get('AddonAmount',0)

		PDAmount = PDAmount.replace(",","")
		AddonAmount = AddonAmount.replace(",","")

		TotalAmount 	= float(PDAmount) + float(AddonAmount)

		return jsonify(TotalAmount=TotalAmount)

	except Exception, e:
		raise

def custom_PDAmount(form, field):
	# Amount 			= 	request.form["PDAmount"]
	# LoanID 			= 	request.form["LoanID"]
	# Result = validateWaiveAmount(Amount=Amount,LoanID=LoanID,Key="PastDue")	
	# if not Result[0]:
	# 	raise ValidationError("%s" % Result[1])
	pass

def custom_AddonAmount(form, field):
	Amount 			= 	request.form["AddonAmount"]
	LoanID 			= 	request.form["LoanID"]
	Result = validateWaiveAmount(Amount=Amount,LoanID=LoanID,Key="TotalPay")
	if not Result[0]:
		raise ValidationError("%s" % Result[1])

def validateWaiveAmount(**kwargs):
	Amount = kwargs.get("Amount")
	LoanID = kwargs.get("LoanID")
	Key    = kwargs.get("Key")

	Insurance = mktaddon.getInsurance(LoanID=LoanID)
	try:
		Amount = Decimal(Amount)
	except:
		return False, "%s: This field must be in numeric format." % (Key)

	if Amount < 0:
		return False, "%s Amount must be greater than 0." % (Key)

	if float(Amount) > float(Insurance.get(Key)):
		return False, "%s Amount cannot greater than %s" % (Key,Insurance.get(Key))

	return True,""


class FRM_SCHEDULE_ADDON_PAYMENT_WAIVE(exform):	
	LoanID 			= 	RemoteTextField(requiredlabel('Loan Contract ID', "*"), [validators.Required()])
	CustomerName 	=	TextField("Customer Name")
	Currency		=	TextField("Currency")
	TranDate 		= 	TextField(requiredlabel("Transaction Date", "*"),[validators.Required()],default=setDefaultTranDate)
	Operation 		=	SelectField(requiredlabel(getLanguage('Operation'),"*"),
						choices=[('W', 'Waive')],
						coerce=str,
						validators=[validators.Required()])

	PDAmount 		= 	TextField(requiredlabel("PD Amount", "*"),[validators.Required(),custom_PDAmount],default=0)
	AddonAmount 	= 	TextField(requiredlabel("Remain Amount", "*"),[validators.Required(),custom_AddonAmount],default=0)
	TotalAmount 	= 	TextField(requiredlabel("Total Amount", "*"),[validators.Required()],default=0)
	Note 			=	TextAreaField(requiredlabel("Note", "*"),[validators.Required()])

	def validate_TranDate(form, field):
		TranDate     = form.TranDate.data
		try:
			TranDate = datetime.strptime(str(TranDate),'%Y-%m-%d').date()
		except:
			raise ValidationError("This field must be in date format.")

		Check = mktfundtransfer.checkPreMonthDateTransaction(TranDate)
		if Check:
			raise ValidationError(Check)

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#CustomerName').val(data.CustomerName),$('#Currency').val(data.Currency)"
		fielddisplay 	+= ",$('#PDAmount').val(data.PDAmount),$('#AddonAmount').val(data.AddonAmount),$('#TotalAmount').val(data.TotalAmount)"
		varname 		= "LoanID:$('#LoanID').val()"
		fun 			= ["LoanID", varname, fielddisplay, "/Morakot/LoanAddonInformation", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#TotalAmount').val(data.TotalAmount)"
		varname 		= "PDAmount:$('#PDAmount').val(),AddonAmount:$('#AddonAmount').val(),"
		fun 			= ["PDAmount", varname, fielddisplay, "/Morakot/getTotalAmount", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#TotalAmount').val(data.TotalAmount)"
		varname 		= "PDAmount:$('#PDAmount').val(),AddonAmount:$('#AddonAmount').val(),"
		fun 			= ["AddonAmount", varname, fielddisplay, "/Morakot/getTotalAmount", "blur"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setDisable():
		ListControl = ["Currency","CustomerName","TotalAmount"]
		return ListControl

	@staticmethod
	def setVisible():
		ListControl = ["PDAmount","TotalAmount"]
		return ListControl

	# @staticmethod
	# def moneyField():
	# 	ListControl = [["AddonAmount","Currency"],
	# 					["PDAmount","Currency"],
	# 					["TotalAmount","Currency"]]
	# 	return ListControl

	@staticmethod
	def IsAcceptOverrideINAU():
		Override 		= 	False
		Msg 			=	""
		Validate 		=	False

		ID 				=	g.formID
		WaiveObj 		=	MKT_SCHEDULE_ADDON_PAYMENT_WAIVE_INAU.query.get(ID)

		Amount 			= 	WaiveObj.AddonAmount
		LoanID 			= 	WaiveObj.LoanID

		Status 			= 	WaiveObj.Status
		if Status != "RNAU":
			# Result = validateWaiveAmount(Amount=Amount,LoanID=LoanID,Key="PastDue")
			# if not Result[0]:
			# 	Msg = Result[1]
			# 	Validate = True
			# 	Override = True

			Result = validateWaiveAmount(Amount=Amount,LoanID=LoanID,Key="TotalPay")
			if not Result[0]:
				Msg = Result[1]
				Validate = True
				Override = True

		return Override, Msg, Validate

	@staticmethod
	def beforeInsert():
		try:
			ID					= 	request.form['ID']
			Branch 				= 	mktuser.getCurrentBranch()
			PDAmount 			= 	request.form["PDAmount"]
			AddonAmount			= 	request.form["AddonAmount"]
			LoanID  			=	request.form["LoanID"]
			Currency 			=	request.form["Currency"]
			Note 				=	request.form["Note"]
			TranDate 			=	request.form["TranDate"]
			Reference 			= 	LoanID

			NumOfAuth = g.getNAuthorize
			if NumOfAuth == 0:
				WaiveObj = MKT_SCHEDULE_ADDON_PAYMENT_WAIVE.query.get(ID)				
				if not WaiveObj:#no record in live (new)					
					PostData 	= 	{"Branch"		: 	Branch,
									"Reference"		: 	Reference,
									"Currency"		:	Currency,
									"UserReference" : 	ID,
									"Note"			:   "%s" % (Note),
									"TranDate" 		:	TranDate,
									"Inputter" 		:	mktuser.getUser().ID,
									"LoanID"		:	LoanID}

					# if float(PDAmount) > 0:
					# 	PostData.update({"Amount": PDAmount})
					# 	setWaiveAddon(PostData=PostData,Reverse=False)
					# 	updatePDRecord(LoanID=LoanID,PDAmount=PDAmount,Reverse=False)

					if float(AddonAmount) > 0:
						PostData.update({"Amount": AddonAmount})
						setWaiveAddon(PostData=PostData,Reverse=False)
						updatePDRecord(LoanID=LoanID,PDAmount=AddonAmount,Reverse=False)

				else:#edit record
					pass

		except Exception as e:
			db.session.rollback()
			raise e
		return True	

	@staticmethod
	def beforeAuthorize():
		try:
			ID 				=	g.formID
			WaiveObj 		=	MKT_SCHEDULE_ADDON_PAYMENT_WAIVE.query.get(ID)
			WaiveINAUObj 	=	MKT_SCHEDULE_ADDON_PAYMENT_WAIVE_INAU.query.get(ID)
			Status 			= 	WaiveINAUObj.Status
			if Status == "RNAU":
				# pass
				print "Reverse"
				#Post reverse accounting
				WaiveObj = 	WaiveINAUObj
				LoanID = WaiveObj.LoanID
				PDAmount = WaiveObj.PDAmount
				AddonAmount = WaiveObj.AddonAmount
				TranDate = WaiveObj.TranDate

				PostData 	= 	{"Branch"		: 	WaiveObj.Branch,
								"Reference"		: 	WaiveObj.LoanID,
								"Currency"		:	WaiveObj.Currency,
								"UserReference" : 	WaiveObj.ID,
								"Note"			:   "%s" % (WaiveObj.Note),
								"TranDate" 		:	WaiveObj.TranDate,
								"Inputter" 		:	mktuser.getUser().ID,
								"LoanID"		:	LoanID}

				# if float(PDAmount) > 0:
				# 	PostData.update({"Amount": PDAmount})
				# 	setWaiveAddon(PostData=PostData,Reverse=True)
				# 	updatePDRecord(LoanID=LoanID,PDAmount=PDAmount,Reverse=True,TranDate=TranDate)

				if float(AddonAmount) > 0:
					PostData.update({"Amount": AddonAmount})
					setWaiveAddon(PostData=PostData,Reverse=True)
					updatePDRecord(LoanID=LoanID,PDAmount=AddonAmount,Reverse=True,TranDate=TranDate)
			else:
				if not WaiveObj:#no record in live (new)
					# print "New"
					WaiveObj = WaiveINAUObj
					LoanID = WaiveObj.LoanID
					PDAmount = WaiveObj.PDAmount
					AddonAmount = WaiveObj.AddonAmount

					PostData 	= 	{"Branch"		: 	WaiveObj.Branch,
									"Reference"		: 	WaiveObj.LoanID,
									"Currency"		:	WaiveObj.Currency,
									"UserReference" : 	WaiveObj.ID,
									"Note"			:   "%s" % (WaiveObj.Note),
									"TranDate" 		:	WaiveObj.TranDate,
									"Inputter" 		:	mktuser.getUser().ID,
									"LoanID"		:	LoanID}

					# if float(PDAmount) > 0:
					# 	PostData.update({"Amount": PDAmount})
					# 	setWaiveAddon(PostData=PostData,Reverse=False)
					# 	updatePDRecord(LoanID=LoanID,PDAmount=PDAmount,Reverse=False)

					if float(AddonAmount) > 0:
						PostData.update({"Amount": AddonAmount})
						setWaiveAddon(PostData=PostData,Reverse=False)
						updatePDRecord(LoanID=LoanID,PDAmount=AddonAmount,Reverse=False)

				else:#edit record
					pass

		except Exception as e:
			db.session.rollback()
			raise e

		return None 

	@staticmethod
	def formReadOnly():
		return "AUTH"

	@staticmethod
	def reverseRec():
		try:
			AuthLevel 	= g.getNAuthorize
			ID 			= g.formID
			if AuthLevel == 0:
				#Post reverse accounting
				WaiveObj = MKT_SCHEDULE_ADDON_PAYMENT_WAIVE.query.get(ID)
				LoanID = WaiveObj.LoanID
				PDAmount = WaiveObj.PDAmount
				AddonAmount = WaiveObj.AddonAmount
				TranDate = WaiveObj.TranDate

				PostData 	= 	{"Branch"		: 	WaiveObj.Branch,
								"Reference"		: 	WaiveObj.LoanID,
								"Currency"		:	WaiveObj.Currency,
								"UserReference" : 	WaiveObj.ID,
								"Note"			:   "%s" % (WaiveObj.Note),
								"TranDate" 		:	WaiveObj.TranDate,
								"Inputter" 		:	mktuser.getUser().ID,
								"LoanID"		:	LoanID}

				# if float(PDAmount) > 0:
				# 	PostData.update({"Amount": PDAmount})
				# 	setWaiveAddon(PostData=PostData,Reverse=True)
				# 	updatePDRecord(LoanID=LoanID,PDAmount=PDAmount,Reverse=True,TranDate=TranDate)

				if float(AddonAmount) > 0:
					PostData.update({"Amount": AddonAmount})
					setWaiveAddon(PostData=PostData,Reverse=True)
					updatePDRecord(LoanID=LoanID,PDAmount=AddonAmount,Reverse=True,TranDate=TranDate)

			return True,""

		except Exception, e:
			flash(msg_error+" %s"%e)
			db.session.rollback()
			return False,""

def setWaiveAddon(**kwargs):
	INSURANCE_EXPENSE_CATE = mktsetting.getAppSetting('INSURANCE_EXPENSE_CATE')
	if not INSURANCE_EXPENSE_CATE:
		INSURANCE_EXPENSE_CATE = "65890"
	INSURANCE_WAIVE_TRAN   = mktsetting.getAppSetting('INSURANCE_WAIVE_TRAN') # Transaction for waive insurance
	if not INSURANCE_WAIVE_TRAN:
		INSURANCE_WAIVE_TRAN = "67"

	INSURANCE_RECIEVABLE_CATE = '28974'

	Reverse 	=	kwargs.get("Reverse")
	PostData 	=	kwargs.get("PostData")
	TypeObj 	=	kwargs.get("TypeObj") #addon type
	Amount 		= 	PostData.get("Amount",0)
	Currency    = 	PostData.get("Currency")
	LoanID 		= 	kwargs.get("LoanID")

	TypeObj 	=	MKT_SCHEDULE_ADDON_PAYMENT.query.\
							filter(MKT_SCHEDULE_ADDON_PAYMENT.LoanID == LoanID).\
							first()
	if TypeObj:
		TypeObj = MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(TypeObj.AddonPaymentType)	

	if PostData:
		if Reverse == True:
			#post reverse 
			DrCategory  = TypeObj.CrCategory if TypeObj else INSURANCE_RECIEVABLE_CATE
			DrAccount 	= ""
			DrMode 		= "Direct"
			CrCurrency 	= Currency

			CrCategory  = INSURANCE_EXPENSE_CATE
			CrAccount 	= ""
			CrMode 		= "Direct"	

			Transaction = TypeObj.RevTransaction if TypeObj else "25"

		else:
			#post normal
			DrCategory  = INSURANCE_EXPENSE_CATE
			DrAccount 	= ""
			DrMode 		= "Direct"

			CrCategory  = TypeObj.CrCategory if TypeObj else INSURANCE_RECIEVABLE_CATE
			CrAccount 	= ""
			CrMode 		= "Direct"

			Transaction =	INSURANCE_WAIVE_TRAN

		if mktteller.isCashCateogry(Category=DrCategory):
			DrAccount = mktteller.getInternalAccount(Branch=PostData.get("Branch"),Category=DrCategory,Currency=Currency)
			DrMode 	  = "Indirect"

		if mktteller.isCashCateogry(Category=CrCategory):
			CrAccount = mktteller.getInternalAccount(Branch=PostData.get("Branch"),Category=CrCategory,Currency=Currency)
			CrMode 	  = "Indirect"

		PostData.update({"Transaction"		:	Transaction,#Other Transacion
						 "Module"			:	"LC",
						 "DrAccount"		:	DrAccount,
						 "CrAccount"		:	CrAccount, #take account of vault in brach
						 "DrCategory"		:	DrCategory,#Prepaid Insurance
						 "CrCategory"		:	CrCategory,#Cash in valt
						 "DrMode"			:	DrMode,
						 "CrMode"			:	CrMode})

		mktpostaccounting.setPostAccounting(**PostData)

def updatePDRecord(**kwargs):
	""" Method to update Insurance PD records when waive/collect insurance
		Flow:
			1. Query PD insurance (detail)
			2. Calculate maximum amount that able to waive for each pd (WaiveAmount)
			3. Update (withdraw) PastDue in addon (MKT_SCHEDULE_ADDON)
			4. Update (withdraw) PastDue and paiddate in case pd was fully waive in addon pd (MKT_SCHEDULE_ADDON_PD)
		Args:
			LoanID 		(str)	: string Loan contract ID
			PDAmount 	(float)	: amount of PD waive
			Reverse 	(bool) 	: False => Withdraw PD from pd record, True => update pd amount back to pd record
		Return:
			None
	"""	
	LoanID 		= kwargs.get("LoanID")
	PDAmount 	= kwargs.get("PDAmount", 0)
	Reverse 	= kwargs.get("Reverse",False)
	TranDate  	= kwargs.get("TranDate")

	BankDate 	= 	mktdate.getBankDate()
	NextRunDate = 	mktdate.getNextDay(BankDate,1)

	PastDueObj 	=	db.session.query(MKT_SCHEDULE_ADDON.ID,
									 MKT_SCHEDULE_ADDON.CustomerID,
									 MKT_SCHEDULE_ADDON.LoanID,
									 MKT_SCHEDULE_ADDON.ActualCollection,
									 MKT_SCHEDULE_ADDON.PastDue,
									 MKT_SCHEDULE_ADDON.AddonType,
									 MKT_SCHEDULE_ADDON.Currency,
									 MKT_LOAN_CONTRACT.Account,
									 MKT_LOAN_CONTRACT.Branch,
									 MKT_SCHEDULE_ADDON_PD.ID.label("PD_ID"),
									 MKT_SCHEDULE_ADDON_PD.CollectionDate,
									 MKT_SCHEDULE_ADDON_PD.PastDue.label("PD_PastDue"),
									 MKT_SCHEDULE_ADDON_PD.PDOutstanding).\
								join(
									MKT_LOAN_CONTRACT,
									MKT_LOAN_CONTRACT.ID == MKT_SCHEDULE_ADDON.LoanID
								).\
								join(
									MKT_SCHEDULE_ADDON_PD,
									MKT_SCHEDULE_ADDON_PD.ID == MKT_SCHEDULE_ADDON.ID+MKT_SCHEDULE_ADDON.AddonType
								).\
								filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
								filter(MKT_SCHEDULE_ADDON_PD.NextRunDate == str(BankDate)).\
								filter(MKT_SCHEDULE_ADDON.LoanID == LoanID).\
								filter(MKT_SCHEDULE_ADDON.AddonType=="100")
	print "TranDate ", TranDate
	if Reverse == False:
		PastDueObj = PastDueObj.\
						filter(MKT_SCHEDULE_ADDON_PD.PDOutstanding > 0)
	else:
		PastDueObj = PastDueObj.\
						filter(MKT_SCHEDULE_ADDON_PD.WaiveDate == str(TranDate))

	PastDueObj = PastDueObj.order_by(MKT_SCHEDULE_ADDON_PD.CollectionDate)

	if PastDueObj.all():
		Balance =	Decimal(PDAmount)
		for row in PastDueObj:
			CurrencyObj 	= 	mktmoney.getCurrencyObj(row.Currency)
			AddonObj 		= 	MKT_SCHEDULE_ADDON.query.get(row.ID)
			LoanID 			= 	row.LoanID

			PDOutstanding 	=	row.PDOutstanding			
			PastDue 		=	AddonObj.PastDue
			Currency		=	row.Currency
			PD_ID 			=	row.PD_ID
			ID				=	row.ID
			AddonType 		=	row.AddonType
			Branch			= 	row.Branch
			CollectionDate  = 	row.CollectionDate

			WaiveAmount 	= 	0

			if Reverse == False:
				if Balance >= PDOutstanding:
					WaiveAmount = PDOutstanding
				else:
					WaiveAmount = Balance
				
				Balance = Balance - WaiveAmount

				if WaiveAmount > 0:
					SchDeData = {}
					PastDue   =	PastDue - WaiveAmount
					SchDeData.update({"PastDue" : PastDue})
					mktdb.updateRecord(MKT_SCHEDULE_ADDON, [MKT_SCHEDULE_ADDON.ID == ID], SchDeData)

					PDOutstanding = PDOutstanding -	WaiveAmount
					PDData = {"PDOutstanding" : PDOutstanding,"Note": "Waive","WaiveDate" : str(BankDate)}
					mktdb.updateRecord(MKT_SCHEDULE_ADDON_PD, [MKT_SCHEDULE_ADDON_PD.ID == PD_ID,
													   MKT_SCHEDULE_ADDON_PD.CollectionDate == CollectionDate], PDData)
			else:
				PD_PastDue 	=	row.PD_PastDue #original PD amount not outstanding
				if Balance >= PD_PastDue:
					WaiveAmount = PD_PastDue
				else:
					WaiveAmount = Balance
				
				Balance = Balance - WaiveAmount

				if WaiveAmount > 0:
					SchDeData = {}
					PastDue   =	PastDue + WaiveAmount
					SchDeData.update({"PastDue" : PastDue})
					mktdb.updateRecord(MKT_SCHEDULE_ADDON, [MKT_SCHEDULE_ADDON.ID == ID], SchDeData)

					PDOutstanding = PDOutstanding +	WaiveAmount
					PDData = {"PDOutstanding" : PDOutstanding,"Note": "","WaiveDate" : ""}
					mktdb.updateRecord(MKT_SCHEDULE_ADDON_PD, [MKT_SCHEDULE_ADDON_PD.ID == PD_ID,
													   MKT_SCHEDULE_ADDON_PD.CollectionDate == CollectionDate], PDData)
	else:
		print "There are no past due to waive."