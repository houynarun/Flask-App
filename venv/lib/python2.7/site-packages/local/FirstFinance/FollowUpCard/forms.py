from app.mktcore.wtfimports 	import *
from app.IdType.models 			import *
from app.tools.mktroute 		import *
from app.Customer.models 		import *
from app.tools.mkttool 			import *
from local.FirstFinance.FollowUp.models 		import *
from .models 					import *


import app.tools.mktdb 			as mktdb
import app.tools.mktdate 		as mktdate
import app.tools.mktautoid 		as mktAutoID
import app.tools.mktaudit 		as mktaudit


from datetime 					import datetime
from dateutil.relativedelta 	import relativedelta

# Load Customer who already has Loan Application and in current Branch
def loadCustomer():
	CurrentBranch = mktuser.getCurrentBranch()
	CustomerObj = MKT_CUSTOMER.query.\
					filter(MKT_CUSTOMER.Branch==CurrentBranch)
	return CustomerObj

def loanLoadContract(ID=''):
	ID 			= request.form.get('CustomerID') if 'CustomerID' in request.form else ''
	LoanObj 	= ''

	if ID:
		LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ContractCustomerID==ID).all()

	return LoanObj

def loadAutoCardID(ID=''):

	return ID

@app.route("/Morakot/checkReviewType")
@checkLogOutSession
@checkLogOutTime
def checkReviewTypes():
	# True enable readonly
	# False disable readonly
	Bool  		= 'true'
	Par 		= 'true'
	Loan 		= 'true'
	Amend 		= 'true'
	ReviewType  = request.args.get('NextReviewType')

	if ReviewType == '4':
		Amend 	= 'false'
		Bool 	= 'false'
		Loan 	= 'false'
	elif ReviewType == '3':
		Par 	= 'false'

	return jsonify(Bool=Bool,
				   Par=Par,
				   Loan=Loan,
				   Amend=Amend,
				   ReviewType=ReviewType)

@app.route("/Morakot/getLoanIDByCustomer")
@checkLogOutSession
@checkLogOutTime
def	getLoanIDByCustomer():
	CustomerID = request.args.get('CustomerID')
	NextReviewType = request.args.get('NextReviewType')
	dic 		= {}
	LoanContractID = ''
	LoanContractObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ContractCustomerID==CustomerID).all()
	if LoanContractObj:
		for row in LoanContractObj:
			dic[row.ID] = u'%s' % (row.ID)
	return jsonify(results=dic)


@app.route("/Morakot/checkUpdateType")
@checkLogOutSession
@checkLogOutTime
def checkUpdateType():
	UpdateType 	=	request.args.get('UpdateType')
	Bool 		= 	'true'

	if UpdateType == '1':
		Bool  	= 	'true'
	else:
		Bool 	= 	'false'
	return jsonify(UpdateType=Bool)

@app.route('/Morakot/getLoanIDByReviewType')
@checkLogOutSession
@checkLogOutTime
def getLoanIDByReviewType():
	ReviewType 	= request.args.get('NextReviewType')
	CustomerID 	= request.args.get('CustomerID')
	dic 		= {}
	LoanContractID = ''
	if ReviewType == '4':
		LoanContractObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ContractCustomerID==CustomerID).all()
		if LoanContractObj:
			for row in LoanContractObj:
				dic[row.ID] = u'%s' % (row.ID)
	return jsonify(results=dic)

def custom_AmendDate(form,field):
	AmendDate = request.form['AmendDate']
	if AmendDate:
		# clear out processing errors
		field.errors[:] = []
		CheckFormatDate = mktdate.isDateISO(AmendDate)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
	else:
		# clear out processing errors
		field.errors[:] = []
		# raise ValidationError("This field is required.")

def setNextMonthDate(Date, FreqMonth):
	date = datetime.strptime(Date, '%Y-%m-%d')
	Datelist = []
	for month in range(0,FreqMonth+1):
		newDate = date + relativedelta(months=month)
		Datelist.append(newDate.strftime('%Y-%m-%d'))
	return Datelist

# return True or False
# Check this record is the main record or not
def HasAutoCardID(ID):
	CardObj = MKT_FOLLOWUP_CARD.query.filter(MKT_FOLLOWUP_CARD.ID==ID).first()

	if CardObj.AutoCardID:
		# print "A"
		return True
	else:
		# print "B"
		return False

# return auto card ID of provided Card ID
# else return ''
def getAutoCardID(ID):
	CardObj = MKT_FOLLOWUP_CARD.query.filter(MKT_FOLLOWUP_CARD.ID==ID).first()

	if CardObj:
		return CardObj.AutoCardID 
	else:
		return ''

class FRM_FOLLOWUP_CARD(exform):

	UpdateType 	 			= 	SelectField(requiredlabel('Type of Update','*'),
										choices=[	
													('1', '1 - Update only this card'),
													('2', '2 - Update this card and all sub-cards')
												],
										coerce=str
								)

	CustomerID 				= QuerySelectField(requiredlabel("Customer","*"),
										query_factory=loadCustomer,
										get_label=lambda a: a.ID + " - " + a.LastNameEn + " " + a.FirstNameEn,
										allow_blank=True,
										blank_text=u'--None--',
										validators=[validators.Required()]
								)
	
	NextReviewType 			= 	SelectField(requiredlabel('Review Type','*'),
										choices=[	('', '--None--'),
													('1', '1 - Client Survey'),
													('2', '2 - Client Review'),
													('3', '3 - PAR Follow Up'),
													('4', '4 - Request Amendment')
													# ('5', '5 - Other')
												],
											coerce=str,
											validators=[validators.Required()])

	AmendDate		 		= 	DateField('Request Amend Date',
										format='%Y-%m-%d',
										validators=[custom_AmendDate]
								)

	# LoanID 					= 	TextField('Loan ID')
	LoanID 					= 	QuerySelectField("Loan ID",
										query_factory=loanLoadContract,
										get_label=lambda a: a.ID,
										allow_blank=True,
										blank_text=u'--None--'
								)

	# -- Fields for auto create par followup card: Frequency Month

	FreqMonth 				= 	TextField('Number of Follow-Up')

	NextFollowUpDate 		= 	DateField(requiredlabel('Follow Up Date (Amendment Date)','*'),
										format='%Y-%m-%d',
										validators=[validators.Required()])

	ActionPlan 				= 	TextAreaField('Action Plan / Comment')

	@staticmethod
	def validate_LoanID(form,field):
		ReviewType 			= request.form.get('NextReviewType')
		LoanID  			= request.form.get('LoanID')
		# print "LoanIDDDDD: ",LoanID
		# print "REVIEWTYPE: ",ReviewType
		if ReviewType == '4' and LoanID == '__None':
			raise ValidationError('Required for Review Type Request Amendment')
		elif ReviewType != '4' and LoanID != '__None':
			raise ValidationError('Not Required for Review Type Not Request Amendment')
		else:
			return ''

	@staticmethod
	def validate_NextFollowUpDate(form,field):

		NextFollowUpDate 	= request.form.get('NextFollowUpDate')
		AmendDate 			= request.form.get('AmendDate')
		BankDate 			= mktdate.getBankDate()

		if NextFollowUpDate < str(BankDate):
			raise ValidationError("Cannot smaller than BankDate")

	@staticmethod
	def validate_NextReviewType(form,field):
		NextReviewType 		= request.form.get('NextReviewType')
		AmendDate 			= request.form.get('AmendDate')
		if NextReviewType != '4' and AmendDate != '':
			raise ValidationError('Amend Date should be empty for Review Type other than Request Amendment')
		else:
			return ''

	@staticmethod
	def validate_AmendDate(form,field):
		NextReviewType 		= request.form.get('NextReviewType')
		AmendDate 			= request.form.get('AmendDate')
		if NextReviewType=='4' and AmendDate=='':
			raise ValidationError('Amend Date is required for Review Type Request Amendment')

	@staticmethod
	def validate_FreqMonth(form,field):
		FreqMonth 			= request.form.get('FreqMonth')
		NextReviewType 		= request.form.get('NextReviewType')

		if NextReviewType == '3' and FreqMonth != '':
			if isInteger(FreqMonth):
				return ''
			else:
				raise ValidationError('Please enter number only')
		elif NextReviewType != '3' and FreqMonth !='':
			raise ValidationError('Should be Empty for review type not PAR Follow Up')
		else:
			return ''

	@staticmethod
	def validate_LoanID(form,field):
		NextReviewType 		= request.form.get('NextReviewType')
		LoanID 				= request.form.get('LoanID')
		if NextReviewType != '4' and LoanID != '__None':
			raise ValidationError('Should be Blank for Review Status Not Request Amendment')
		elif NextReviewType=='4' and LoanID =='__None':
			raise ValidationError('Loan ID is rquired for Review Type Request Amendment')
		else:
			return  ''


	@staticmethod
	def listField():
		Fields = ["ID", "CustomerID", "NextReviewType", "NextFollowUpDate", "ActionPlan","AmendDate","FreqMonth","AutoCardID"]
		return Fields

	@staticmethod 
	def setDisable():
		if request.method=='POST':
			NextReviewType = request.form.get('NextReviewType') if 'NextReviewType' in request.form else ''
			if NextReviewType=='4':
				return ['FreqMonth']
			elif NextReviewType=='3':
				return ['AmenDate','LoanID']
			elif NextReviewType=='2' or NextReviewType=='1':
				return ['AmendDate','LoanID','FreqMonth']
		else:
			Field = ['AmendDate','FreqMonth']
			return Field

	# Check visible Update type later
	@staticmethod
	def setVisible():
		ID 			= 	request.form.get("ID") if request.method == "POST" else g.formID
		CardObj 	= 	MKT_FOLLOWUP_CARD.query.get(ID)
		if CardObj and CardObj.Curr and CardObj.NextReviewType=='3':
			return ''
		else:
			return ['UpdateType']

	@staticmethod
	def hotField():
			hotfield=[]

			fielddisplay 	 =	"(data.Par=='false')?$('#FreqMonth').removeAttr('readonly'):$('#FreqMonth').val('').attr('readonly','readonly');"
			fielddisplay 	+= 	"(data.Loan=='false')?$('#LoanID').select2('readonly',false):$('#LoanID').select2('readonly', true);"
			fielddisplay 	+= 	"(data.Loan=='true')?$('#LoanID').val('__None').select2().trigger('change'):'';"
			
			# Disabled Calendar
			fielddisplay 	+= 	"(data.Amend=='true')?\
							    $('#AmendDate').val('').attr('readonly','readonly').on('click focus',function(){$('body').find('.datepicker:first').css('display','none');}):\
							    $('#AmendDate').removeAttr('readonly').on('click focus',function(){$('body').find('.datepicker:first').css('display','block');});"

			varname 		 =	"NextReviewType:$('#NextReviewType').val()"
			fun 			 =	["NextReviewType", varname ,fielddisplay, "/Morakot/checkReviewType", "change"]
			hotfield.append(fun)

			fielddisplay 	 = 	"(data.UpdateType=='false')?$('#FreqMonth').removeAttr('readonly'):$('#FreqMonth').attr('readonly','readonly');"
			varname 		 = 	"UpdateType:$('#UpdateType').val()"
			fun 			 = 	["UpdateType", varname, fielddisplay, "/Morakot/checkUpdateType", "change"]
			hotfield.append(fun)

			return hotfield

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay 	=  "LoanID"
		varname 		=  "CustomerID:$('#CustomerID').val(),"
		varname 		+= "NextReviewType:$('#NextReviewType').val(),"
		fun 			=  ["NextReviewType", varname, fielddisplay, "/Morakot/getLoanIDByReviewType", "change"]
		hotfield.append(fun)

		fielddisplay 	=  "LoanID"
		varname 		=  "CustomerID:$('#CustomerID').val(),"
		fun 			=  ["CustomerID", varname, fielddisplay, "/Morakot/getLoanIDByCustomer", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def redirectAfterInsert():
		NextReviewType  = 	request.form.get('NextReviewType')
		Curr 			= 	request.form.get('Curr') #Status add new ('') or eidt (0 or other)


		# Status Add New
		if Curr == '':
			if NextReviewType == '3':
				# print "A: PAR Review"
				FreqMonth  		 = request.form.get('FreqMonth')
				NextFollowupDate = request.form.get('NextFollowUpDate')
				ActionPlan		 = request.form.get('ActionPlan')
				Description 	 = request.form.get('Description')
				CustomerID 		 = request.form.get('CustomerID')
				ID  			 = request.form.get('ID') if 'ID' in request.form else g.formID
				CardData		 = {}

				if FreqMonth != '':
					if isInteger(FreqMonth):
						FreqMonthNum 	= int(FreqMonth)
				else:
					FreqMonthNum 	= 0
				# try:
				if FreqMonthNum > 1:
					NextFollowupDate = setNextMonthDate(NextFollowupDate,FreqMonthNum)
					AutoCardID 		 = ID
					for row in range(1,FreqMonthNum+1):
		
						ID 	   = mktAutoID.setAutoID("CFU", 5, "MKT_FOLLOWUP_CARD")
						CardData.update({
						'ID'				:ID,
						'CustomerID'		:CustomerID,
						'NextFollowUpDate'	:NextFollowupDate[row],
						'ActionPlan'		:ActionPlan,
						'NextReviewType'	:NextReviewType,
						'Description'		:Description,
						'FreqMonth'			:FreqMonth,
						'AutoCardID'		:AutoCardID
						})
						mktdb.insertTable(MKT_FOLLOWUP_CARD,CardData)
						db.session.commit()
						CardData = {}
				return None

			else:
				return None
		# Status Edit Record
		else:
			UpdateType 		= 		request.form.get('UpdateType')
			ID 				= 		request.form.get('ID')

			# Update only this current record
			if UpdateType == '1':

				return None
			else:
				# Update current and all sub-record
				FreqMonth  		 = request.form.get('FreqMonth')
				NextFollowupDate = request.form.get('NextFollowUpDate')
				ActionPlan		 = request.form.get('ActionPlan')
				Description 	 = request.form.get('Description')
				CustomerID 		 = request.form.get('CustomerID')
				ID  			 = request.form.get('ID') if 'ID' in request.form else g.formID
				CardData		 = {}
				# Check if it is the main record or not sub record
				if not HasAutoCardID(ID):
					mktdb.deleteRecord(MKT_FOLLOWUP_CARD,[MKT_FOLLOWUP_CARD.AutoCardID==ID])
					if FreqMonth != '':
						if isInteger(FreqMonth):
							FreqMonthNum 	= int(FreqMonth)
					else:
						FreqMonthNum 	= 0
					if FreqMonthNum > 1:
						NextFollowupDate = setNextMonthDate(NextFollowupDate,FreqMonthNum)
						AutoCardID 		 = ID
						for row in range(1,FreqMonthNum+1):
							ID 	   = mktAutoID.setAutoID("CFU", 5, "MKT_FOLLOWUP_CARD")
							CardData.update({
							'ID'				:ID,
							'CustomerID'		:CustomerID,
							'NextFollowUpDate'	:NextFollowupDate[row],
							'ActionPlan'		:ActionPlan,
							'NextReviewType'	:NextReviewType,
							'Description'		:Description,
							'FreqMonth'			:FreqMonth,
							'AutoCardID'		:AutoCardID
							})
							mktdb.insertTable(MKT_FOLLOWUP_CARD,CardData)
							CardData = {}
						db.session.commit()
				else:
					# It is a sub record, update from this record on ward
					# Update Sub record:
					AutoCardID 		 = getAutoCardID(ID)
					# print "Auto Card ID: ",AutoCardID
					mktdb.deleteRecord(MKT_FOLLOWUP_CARD,[MKT_FOLLOWUP_CARD.AutoCardID==AutoCardID,MKT_FOLLOWUP_CARD.NextFollowUpDate > NextFollowupDate])
					db.session.commit()
					if FreqMonth != '':
						if isInteger(FreqMonth):
							FreqMonthNum 	= int(FreqMonth)
					else:
						FreqMonthNum 	= 0
					NextFollowupDate = setNextMonthDate(NextFollowupDate,FreqMonthNum)

					for row in range(1,FreqMonthNum+1):

						ID 	   = mktAutoID.setAutoID("CFU", 5, "MKT_FOLLOWUP_CARD")
						CardData.update({
						'ID'				:ID,
						'CustomerID'		:CustomerID,
						'NextFollowUpDate'	:NextFollowupDate[row],
						'ActionPlan'		:ActionPlan,
						'NextReviewType'	:NextReviewType,
						'Description'		:Description,
						'FreqMonth'			:FreqMonth,
						'AutoCardID'		:AutoCardID
						})
						mktdb.insertTable(MKT_FOLLOWUP_CARD,CardData)
						CardData = {}

					db.session.commit()

			return None


