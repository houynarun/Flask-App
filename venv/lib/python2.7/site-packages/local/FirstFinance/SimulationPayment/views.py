from app.mktcore.imports 			import *
from app.LoanContract.models 		import *
from app.Customer.models 			import *
from app.PD.models 					import *
from app.Currency.models 			import *
from app.LoanAmendment.models 		import * 
from app.RepaymentSchedule.models 	import *
from app.PD.models					import *
from local.FirstFinance.ScheduleAddonPayment.models					import *
from app.ScheduleAddon.models		import *
from app.Company.models				import *

from app.tools.mktmoney 			import *
import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney
import app.tools.loantools.rescheduletools as mktreschedule
import local.FirstFinance.tools.mktcustomscript as mktcustom
from decimal import *

@app.route('/Morakot/SimulationPayment', methods=['POST','GET'])
def SimulationPayment():
	try:
		ErrorMsg    = []
		getCheck = checkAccess ("/Morakot/SimulationPayment/","Search")
		if getCheck != True:
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		LoanObj 		= 	getLoanObj()
		CurrencyObj 	=	MKT_CURRENCY.query

		LoanID 			= 	""
		Operation		= 	""
		AmendmentDate	= 	""
		DeductAmount 	=	""
		ContractObj		=	""
		CompanyObj 		=	""
		CustomerObj		=	""
		RequestDate		=	""

		DictData 	 	=	{}

		if request.method =='POST':
			LoanID 	 			= 	request.form["LoanID"]
			Operation 	 		= 	request.form["Operation"]
			AmendmentDate 	 	= 	request.form["AmendmentDate"]
			DeductAmount 	 	= 	request.form["DeductAmount"] if request.form["DeductAmount"] else 0
			RequestDate 		=	request.form["RequestDate"]

			ContractObj 		=	MKT_LOAN_CONTRACT.query.get(LoanID)
			if ContractObj:
				CurrencyObj		=	CurrencyObj.filter(MKT_CURRENCY.ID == ContractObj.Currency).first()
				CompanyObj		=	MKT_COMPANY.query.first()
				CustomerObj 	=	MKT_CUSTOMER.query.get(ContractObj.ContractCustomerID)
				#validate AmendmentDate
				IsValidAmendment = isValidAmendmentdate(LoanObj=ContractObj,AmendmentDate=AmendmentDate,RequestDate=RequestDate)
				IsValidDeductAmount = isValidDeductAmount(LoanObj=ContractObj,DeductAmount=DeductAmount,AmendmentDate=AmendmentDate,Operation=Operation)

				if not IsValidAmendment[0]:
					flash(msg_warning+ IsValidAmendment[1])
				elif not IsValidDeductAmount[0]:
					flash(msg_warning+ IsValidDeductAmount[1])
				else:
					DictData.update(mktcustom.getCustomAmendPenalty(LoanObj=ContractObj,DeductAmount=DeductAmount,AmendmentDate=AmendmentDate,Operation=Operation,NoticeDate=RequestDate))
			else:
				flash(msg_error + "There no loan contract #%s" % LoanID)

			DictData.update({"Operation": Operation,"AmendmentDate": AmendmentDate,"DeductAmount": float(DeductAmount),"RequestDate": RequestDate})
		# print DictData
		return render_template('simulationpayment/simpay.html',
										LoanObj 		=	LoanObj,
										ContractObj 	=	ContractObj,
										CurrencyObj 	=	CurrencyObj,
										CompanyObj 		=	CompanyObj,
										CustomerObj 	=	CustomerObj,
										LoanID 			=	LoanID,
										Operation		=	Operation,
										AmendmentDate	=	AmendmentDate,
										DeductAmount	=	DeductAmount,
										mktdate			=	mktdate,
										toMoney			=	mktmoney.toMoney,
										float			=	float,
										str				=	str,
										DictData		=	DictData,
										RequestDate		=	RequestDate)

	except Exception, e:
		raise

def getLoanObj():
	LoanObj 		= 	db.session.query(MKT_LOAN_CONTRACT,
							   MKT_CUSTOMER
							).\
							join(MKT_CUSTOMER,
								MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID
							).\
							filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
							filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y")

	return LoanObj

def isValidAmendmentdate(LoanObj,AmendmentDate,RequestDate):
	# CurrentDate = str(mktdate.getBankDate())
	MaturityDate= LoanObj.MaturityDate

	if  AmendmentDate:
		if AmendmentDate >= RequestDate and AmendmentDate <= MaturityDate:
			return True, ""
		else:
			return False, "AmendmentDate must be between %s and %s." % (RequestDate,MaturityDate)
	else:
		return False, "AmendmentDate is required."

def isValidDeductAmount(LoanObj,DeductAmount,AmendmentDate,Operation):
	LoanBalance = mktcustom.getLoanBalance(LoanObj.ID,AmendmentDate=AmendmentDate)
	Min = float(1)
	Max = LoanBalance

	if Operation == "AMT":
		if float(DeductAmount) >= Min and float(DeductAmount) <= float(Max):
			return True, ""
		else:
			return False, "Deduct Amount cannot be bigger than %s or over Loan Balance %s ." % (Min,Max)
	return True, ""