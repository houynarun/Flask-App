# -*- coding: utf-8 -*-

'''
Report Name : SUMMARY PAR

'''

from app.mktcore.imports                               import *
from sqlalchemy                                        import *
import sqlalchemy
from sqlalchemy.sql.expression                         import           cast
from app.Customer.models                               import *
from app.LoanContract.models                           import *
from app.Officer.models                                import *
from app.Currency.models                               import *
from app.PD.models                                     import *
import app.tools.mktreport                             as              mktreport
from local.FirstFinance.tools.mktaddon                 import          getInsurance
from app.tools.mktcustomreport                         import *
import local.FirstFinance.tools.mktloan                as              mktloan
from operator                   import itemgetter
import local.FirstFinance.Report.LoanPortfolio.portfolio         as             mktloancontract
import app.tools.mktmoney										as 			mktmoney
import app.tools.user 	as mktuser

from local.FirstFinance.Customer.models import *
from app.LoanProduct.models         import *
from app.Collateral.models			import *
from app.LoanApplication.models		import *
from decimal 					import *



@app.route('/Morakot/Report/FF/SummaryPAR/<ByCategory>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFSummaryPARByCategory(ByCategory):
	"""
	ByCategory:Branch, LoanProduct, CRO, CC, SourceofIncome, ReferalSource, ClientProfile.

	"""
	try:
		ErrorMsg    	= []
		DefualtUrl  	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint,ByCategory=ByCategory))
		getCheck    	= checkAccess(DefualtUrl,"Search")
		if getCheck 	!= True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		ByCategory      =   str(ByCategory)
		Branch          =   request.args.get("Branch") if "Branch" in request.args else "ALL" if ByCategory=="Branch" else mktuser.getCurrentBranch()

		Result          =   setSummaryPARByCategory(Branch=Branch,
												   ByCategory=ByCategory)
		Parameters      =   {"Branch": Branch}
		FilterOption    =   ""

		SearchForm 		= 	""

		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)      
	except:
		raise

@app.route('/Morakot/Report/FF/SummaryPAR/<ByCategory>/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFSummaryPARByCategoryExcel(ByCategory):
	"""
	ByCategory:Branch, LoanProduct, CRO, CC, SourceofIncome, ReferalSource, ClientProfile.

	"""
	try:
		ByCategory      =   str(ByCategory)
		Branch          =   request.args.get("Branch") if "Branch" in request.args else "ALL" if ByCategory=="Branch" else mktuser.getCurrentBranch()
		
		Result          =   setSummaryPARByCategory(Branch=Branch,
												   ByCategory=ByCategory)
		response        =   CUSTOM_REPORT.exportExcel(Result=Result,FileName="SummaryPARBy%s" % ByCategory)

		return response

	except Exception as e:
		raise

def getCategory(**kwargs):
	"""
	Return: {"CategoryObj": CategoryObj,"FieldName": FieldName,"GroupBy": GroupBy,"HeaderField": HeaderField}
	"""
	ByCategory 		= kwargs.get("ByCategory")
	IsDisbursed 	= kwargs.get("IsDisbursed")

	CategoryObj 	= ""
	FieldName   	= ""
	GroupBy     	= ""
	HeaderField 	= ""
	if ByCategory == "LoanProduct":
		CategoryObj     = MKT_LOAN_PRODUCT.query.order_by(MKT_LOAN_PRODUCT.ID)
		FieldName       = "row.ID + ' - ' + row.Description"
		GroupBy         = "MKT_LOAN_CONTRACT.LoanProduct"
		HeaderField     = "Loan Product"
	
	elif ByCategory == "CRO":
		CategoryObj     = MKT_OFFICER.query.order_by(MKT_OFFICER.LastName,MKT_OFFICER.FirstName)
		FieldName       = "row.ID + ' - ' + row.LastName + ' ' + row.FirstName"
		GroupBy         = "MKT_CUSTOMER.CRO"
		HeaderField     = "CRO"

	elif ByCategory == "CC":
		CategoryObj     = MKT_OFFICER.query.order_by(MKT_OFFICER.LastName,MKT_OFFICER.FirstName)
		FieldName       = "row.ID + ' - ' + row.LastName + ' ' + row.FirstName"
		GroupBy         = "MKT_LOAN_CONTRACT.ContractOfficerID"        
		HeaderField     = "CC"

	elif ByCategory == "LRO":
		CategoryObj     = MKT_OFFICER.query.order_by(MKT_OFFICER.LastName,MKT_OFFICER.FirstName)
		FieldName       = "row.ID + ' - ' + row.LastName + ' ' + row.FirstName"
		GroupBy         = "MKT_CUSTOMER.LRO"
		HeaderField     = "LRO"

	elif ByCategory == "SourceOfIncome":
		class CSourceOfIncome(db.Model):
			__tablename__ = 'MKT_CUSTOMER'
			def __init__(self, ID, Description):
				super(CSourceOfIncome, self).__init__()
				self.ID = ID
				self.Description = Description

		CategoryObj = [ CSourceOfIncome('1','Salaried Employee'),
						CSourceOfIncome('2', 'Worker'),
						CSourceOfIncome('3', 'Civil Servant'),
						CSourceOfIncome('4', 'Self-Employed')]

		FieldName       = "row.ID + ' - ' + row.Description"
		GroupBy         = "MKT_CUSTOMER.SourceOfIncome"
		HeaderField     = "Source of Income"



	elif ByCategory == "TitleType":
		class CTitleType(db.Model):
			__tablename__='MKT_COLLATERAL_DE'
			def __init__(self, ID,Description):
				super(CTitleType, self).__init__()
				self.ID = ID
				self.Description = Description
		CategoryObj = [ CTitleType('SoftTitle', 'Soft Title'),
						CTitleType('HardTitle', 'Hard Title'),
						CTitleType('LMap', '3-LMAP'),
						CTitleType('Other', '4-Other')]
		FieldName 		= "row.Description"
		GroupBy 		= "MKT_COLLATERAL_DE.TitleType"
		HeaderField		= "Title Type"
				

	elif ByCategory == "ReferralSource":
		CategoryObj     = MKT_REFERAL_SOURCE.query
		FieldName       = "row.ID + ' - ' + row.Description "
		GroupBy         = "MKT_CUSTOMER.ReferralSource"     
		HeaderField     = "Referal Source"

	elif ByCategory == "Branch":
		CategoryObj     = MKT_BRANCH.query
		FieldName       = "row.ID + ' - ' + row.Description "
		GroupBy         = "MKT_LOAN_CONTRACT.Branch"     
		HeaderField     = "Branch"

	elif ByCategory == "ClientProfile":
		class CHouseOwnership(db.Model):
			__tablename__ = 'MKT_CUSTOMER'
			def __init__(self, ID, Description):
				super(CHouseOwnership, self).__init__()
				self.ID = ID
				self.Description = Description

		CategoryObj = [ CHouseOwnership('1', 'Renter'),
						CHouseOwnership('2', 'Living with parents/family'),
						CHouseOwnership('3', 'Living in workplace'),
						CHouseOwnership('4', 'Living in own house'),
						CHouseOwnership('5', 'Evictees'),
						CHouseOwnership('6', 'Used to own house'),
						CHouseOwnership('99', 'Other')]

		FieldName       = "row.ID + ' - ' + row.Description"
		GroupBy         = "MKT_CUSTOMER.HouseOwnership"
		HeaderField     = "Client Profile"

	return {"CategoryObj": CategoryObj,"FieldName": FieldName,"GroupBy": GroupBy,"HeaderField": HeaderField}
	
def setSummaryPARByCategory(**kwargs):
	"""
	ByCategory:Branch, LoanProduct, CRO, CC, SourceofIncome, ReferalSource, ClientProfile.
	"""
	try:
		Branch          =   kwargs.get("Branch")
		ByCategory      =   kwargs.get("ByCategory")
		
		ReportHeader    =   CUSTOM_REPORT.getReportHeader()
		CategoryDict    =   getCategory(ByCategory=ByCategory)
		ReportHeader.update({"ReportTitle": "Summary PAR by %s" %  CategoryDict.get("HeaderField")})
		ReportHeader.update({"Parameters": {"Branch": Branch}})


		Data        = []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'%s' % CategoryDict.get("HeaderField"), 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'PAR > 0', 
											Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="E")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'PAR >= 30', 
											Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="H")


		Data = getPARByCategory(Branch=Branch,ByCategory=ByCategory)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getPARByCategory(**kwargs):
	"""
			used to return SUMMARY PAR report "MKT_LOAN_CONTRACT"  
			[
			   {    
					 1:     '1', 
					 2:     'KP - Kampot',         # Name of Branch and ID,
					 3:     '5',          		   # Number of loan Active by Category in PAR > 0 (Query All), = # of Loans
					 4:     '48,597.57',           $ Amount of Outstanding by Category in PAR > 0 (Query All), = $ of Loans
					 5:     '0.0581944770823'      % percantage of Loan by Category in PAR > 0 ($ of Loan in PAR 0 / Total Outstanding in branch), = % of Loans
					 6:     '0',            	   # Number of loan Active by Category in PAR > 30 (Query NumDayDue > 30 ), = # of Loans 
					 7:     '0.00',                $ Amount of Outstanding by Category in PAR > 30 (Query NumDayDue > 30 ), = $ of Loans
					 8:     '0.0',                 % percantage of Loan by Category in PAR > 30 ($ of Loan in PAR 30 / Total Outstanding in branch), = % of Loans
				 }, 
				 {    
					 1:     '2', 
					 2:     'PK - Phnom Proek',    # Name of Branch and ID,
					 3:     '3',          		   # Number of loan Active by Category in PAR > 0 (Query All), = # of Loans
					 4:     '41,858.81',           $ Amount of Outstanding by Category in PAR > 0 (Query All), = $ of Loans
					 5:     '0.065564633663'       % percantage of Loan by Category in PAR > 0 ($ of Loan in PAR 0 / Total Outstanding in branch), = % of Loans
					 6:     '0',            	   # Number of loan Active by Category in PAR > 30 (Query NumDayDue > 30 ), = # of Loans 
					 7:     '0.00',                $ Amount of Outstanding by Category in PAR > 30 (Query NumDayDue > 30 ), = $ of Loans
					 8:     '0.0',                 % percantage of Loan by Category in PAR > 30 ($ of Loan in PAR 30 / Total Outstanding in branch), = % of Loans
				 }, 
			]
	"""	
	Branch              =   kwargs.get("Branch")
	ByCategory          =   kwargs.get("ByCategory")

	RecordRow 			= []
	CategoryDict 		= getCategory(ByCategory=ByCategory)
	CategoryObj 		= CategoryDict.get("CategoryObj")
	FieldName  			= CategoryDict.get("FieldName")
	GroupBy     		= CategoryDict.get("GroupBy")

	CurrencyObj 		= MKT_CURRENCY.query

	#Calculate SummaryPAR
	CategoryDict 		= getCategory(ByCategory=ByCategory,IsDisbursed="Y")
	SummaryPARDict     	=   getSummaryPARByCategory(Branch=Branch,
											  GroupBy="%s" % (CategoryDict.get("GroupBy")),
											  CategoryObj=CategoryDict.get("CategoryObj"))


	No = 1
	BaseCurrency        = mktsetting.getAccSetting().BaseCurrency
	TotActiveCount      = 0
	TotalAmountPAR0     = float(0)
	TotInterestAmount   = float(0)
	TotalPerentagePAR0  = float(0)
	TotalPerentagePAR30  = float(0)
	"""  Detail function 
		- mktloancontract = import local.FirstFinance.Report.LoanPortfolio.portfolio
		- getActivePortfolioByCategory = find Total Outstanding in MKT_LOAN_PRODUCT by CategoryObj
	"""
	TotalOutstandingByCategory = mktloancontract.getActivePortfolioByCategory(Branch=Branch,
											  GroupBy="%s" % (CategoryDict.get("GroupBy")),
											  CategoryObj=CategoryDict.get("CategoryObj"))

	if CategoryObj:     
		for row in CategoryObj:    
			# print row         
			ActiveCount    		= 0 
			ActivePARAmount   	= float(0)

			TotalAmount 		= float(0)
			TotalCountPAR 		= 0
			TotalAmountPAR 		= float(0)
			ActiveDict     		= SummaryPARDict.get("%s" % (row.ID))
			if ActiveDict:
				ActiveCount   	= ActiveDict.get("Count")
				AmountPAR0   	= ActiveDict.get("Amount")
				CountPAR30 		= ActiveDict.get("CountPAR")
				AmountPAR30 	= ActiveDict.get("AmountPAR")
				
				PercentagePAR0 	= getSummaryPARPercentage(ActivePARAmount=AmountPAR0,TotalActiveOutstanding=TotalOutstandingByCategory.get(row.ID).get("Amount"))
				PercentagePAR30 = getSummaryPARPercentage(ActivePARAmount=AmountPAR30,TotalActiveOutstanding=TotalOutstandingByCategory.get(row.ID).get("Amount"))
				RecordRow.append(({1: {"Value":No,"Class":"text-center"},
								  2: {"Value":eval(FieldName),"Class":"text-left"},
								  3: {"Value":ActiveCount},
								  4: {"Value":mktmoney.toMoney(float(AmountPAR0),mktmoney.getCurrencyObj(BaseCurrency))},
								  5: {"Value":PercentagePAR0},
								  6: {"Value":CountPAR30},
								  7: {"Value":mktmoney.toMoney(float(AmountPAR30),mktmoney.getCurrencyObj(BaseCurrency))},
								  8: {"Value":PercentagePAR30},
								  },{"Class":"text-right","Style":""}))
				No+=1
		''' Get Record that have Unknown '''

		ActiveDict   = SummaryPARDict.get("Unknown", {})
		if  ActiveDict:
			PercentagePAR0 = getSummaryPARPercentage(ActivePARAmount=ActiveDict.get("Amount") if ActiveDict else 0,
														 TotalActiveOutstanding=TotalOutstandingByCategory.get("Unknown",{}).get("Amount"))
			PercentagePAR30 = getSummaryPARPercentage(ActivePARAmount=ActiveDict.get("AmountPAR") if ActiveDict else 0,
														 TotalActiveOutstanding=TotalOutstandingByCategory.get("Unknown",{}).get("Amount"))
			RecordRow.append(({1: {"Value":No,"Class":"text-center"},
								  2: {"Value":"Unknown","Class":"text-left"},
								  3: {"Value":ActiveDict.get("Count") if ActiveDict else 0},
								  4: {"Value":mktmoney.toMoney(float(ActiveDict.get("Amount") if ActiveDict else 0),mktmoney.getCurrencyObj(BaseCurrency))},
								  5: {"Value":PercentagePAR0},
								  6: {"Value":ActiveDict.get("CountPAR") if ActiveDict else 0},
								  7: {"Value":mktmoney.toMoney(float(ActiveDict.get("AmountPAR") if ActiveDict else 0),mktmoney.getCurrencyObj(BaseCurrency))},
								  8: {"Value":PercentagePAR30},
								 },{"Class":"text-right","Style":""}))
			No+=1

		''' FIND TOTAL '''
		TotActiveCount      = SummaryPARDict.get("Total",{}).get("Count")
		TotalAmountPAR0     = SummaryPARDict.get("Total",{}).get("Amount")
		TotalCountPAR30       = SummaryPARDict.get("Total",{}).get("TotalCountPAR")
		TotalAmountPAR30       = SummaryPARDict.get("Total",{}).get("TotalAmountPAR")
		TotalAll = TotalOutstandingByCategory.get("Total",{}).get("Amount")
		TotalPerentagePAR0 = mktmoney.formatNumber(float(TotalAmountPAR0) / float(TotalAll) * 100,Comma=1,DecimalPlace=4) if TotalAmountPAR0 else 0
		TotalPerentagePAR30 = mktmoney.formatNumber(float(TotalAmountPAR30) / float(TotalAll) * 100,Comma=1,DecimalPlace=4) if TotalAmountPAR30 else 0


	if TotActiveCount != 0:
		RecordRow.append(({1: {"Value":""},
						  2: {"Value":"Total"},
						  3: {"Value":TotActiveCount},
						  4: {"Value":mktmoney.toMoney(float(TotalAmountPAR0),mktmoney.getCurrencyObj(BaseCurrency))},
						  5: {"Value":TotalPerentagePAR0},
						  6: {"Value":TotalCountPAR30},
						  7: {"Value":mktmoney.toMoney(float(TotalAmountPAR30),mktmoney.getCurrencyObj(BaseCurrency))},
						  8: {"Value":TotalPerentagePAR30},
						 },{"Class":"text-right text-bold","Style":""}))

	return RecordRow


def getSummaryPARByCategory(**kwargs):
	"""
		Function to calculate Data of PAR. 
		find :
		- OutstandingAmount that have PAR > 0 and PAR > 30 : func.sum(MKT_LOAN_CONTRACT.OutstandingAmount)
		- Count Loan Contract PAR > AND PAR > 30 : func.count(MKT_LOAN_CONTRACT.ID)

		Args:
			**kwargs:
					Branch     (str):  BB
					GroupBy     (str):  Branch, LoanProduct, CC, CRO, ReferalSource, ClientProfile,SourecOfIncome
					CategoryObj  (class) :flask_sqlalchemy.BaseQuery
					BranchSplit	   (list): HO CM BB
				   
		Returns:
			 Dictdata (dict) : 
		{
			'KC': {'Count': 90L, 'Amount': 586225.4700000001, 'AmountPAR': 218638.67999999996, 'CountPAR': 34L},
			'PS': {'Count': 89L, 'Amount': 610791.9400000001, 'AmountPAR': 252109.90000000002, 'CountPAR': 40L},
		}

		Examples:
		SummaryPARDict     =   getSummaryPARByCategory(Branch=Branch,
											  GroupBy="%s" % (CategoryDict.get("GroupBy")),
											  CategoryObj=CategoryDict.get("CategoryObj"))
		SummaryPARDict.get(row.ID).get("Amount") 
		Result = 586225.4700000001, 610791.9400000001

	"""



	Branch              =   kwargs.get("Branch")
	GroupBy             =   kwargs.get("GroupBy")
	CategoryObj         =   kwargs.get("CategoryObj")
	BranchSplit         =   Branch.split()
	DictData = {}
	# ContractObj     =   db.session.query(func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Amount'),
	#                                      func.count(MKT_LOAN_CONTRACT.ID).label('Count'),
	#                                      MKT_LOAN_CONTRACT.Currency,
	#                                      func.max(MKT_PD_DATE.NumDayDue).label('NumDayDue'),
	#                                      eval(GroupBy).label("Category")
	#                                 ).\
	#                                 distinct(MKT_PD_DATE.ID).\
	#                                 join(MKT_CUSTOMER,MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
	#                                 join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
	#                                 join(MKT_PD_DATE,MKT_PD_DATE.ID==MKT_PAST_DUE.ID).\
	#                                 filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
	#                                 group_by(eval(GroupBy),
	#                                          MKT_LOAN_CONTRACT.Currency,MKT_PD_DATE.ID,MKT_PD_DATE.NumDayDue)

	ContractObj     =   db.session.query(func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Amount'),
										 func.count(MKT_LOAN_CONTRACT.ID).label('Count'),
										 MKT_LOAN_CONTRACT.Currency,
										 func.max(MKT_PD_DATE.NumDayDue).label('NumDayDue'),
										 eval(GroupBy).label("Category")
									).\
	 								distinct(MKT_PD_DATE.ID).\
									join(MKT_CUSTOMER,MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
									join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
									join(MKT_PD_DATE,MKT_PD_DATE.ID==MKT_PAST_DUE.ID).\
									join(MKT_LOAN_COLLATERAL,MKT_LOAN_COLLATERAL.ID==MKT_LOAN_CONTRACT.LoanApplicationID).\
									outerjoin(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE.CollateralID==MKT_LOAN_COLLATERAL.Collateral).\
									filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
									group_by(eval(GroupBy),
											 MKT_LOAN_CONTRACT.Currency,
											 MKT_PD_DATE.ID,
											 MKT_COLLATERAL_DE.ID,
											 MKT_PD_DATE.NumDayDue).\
									order_by(MKT_PD_DATE.ID,MKT_COLLATERAL_DE.ID,cast(MKT_PD_DATE.NumDayDue,sqlalchemy.Integer).desc())


	# ContractObj     =   db.session.query(func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Amount'),
	# 									 func.count(MKT_LOAN_CONTRACT.ID).label('Count'),
	# 									 MKT_LOAN_CONTRACT.Currency,
	# 									 func.max(MKT_PD_DATE.NumDayDue).label('NumDayDue'),
	# 									 eval(GroupBy).label("Category")
	# 								).\
	# 								distinct(MKT_PD_DATE.ID).\
	# 								join(MKT_CUSTOMER,MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
	# 								join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
	# 								join(MKT_PD_DATE,MKT_PD_DATE.ID==MKT_PAST_DUE.ID).\
	# 								filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
	# 								group_by(eval(GroupBy),
	# 										 MKT_LOAN_CONTRACT.Currency,
	# 										 MKT_PD_DATE.ID,
	# 										 MKT_PD_DATE.NumDayDue).\
	# 								order_by(MKT_PD_DATE.ID,cast(MKT_PD_DATE.NumDayDue,sqlalchemy.Integer).desc())

		
	if Branch and "ALL" not in BranchSplit:
		ContractObj = ContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchSplit))

	TotalAmount 	= float(0)
	TotalCount 		= 0
	TotalCountPAR 	=0
	TotalAmountPAR 	= 0
	for row in ContractObj:
		Key    = row.Category       
		if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
			Key = "Unknown"

		Count  		= DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
		Amount 		= DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

		CountPAR  	= DictData.get(Key,{}).get("CountPAR",{}) if Key in DictData else 0
		AmountPAR 	= DictData.get(Key,{}).get("AmountPAR",{}) if Key in DictData  else float(0)

		NumDayDue 	= DictData.get(Key,{}.get("NumDayDue",{} if Key in DictData else 0))
		Count+=row.Count
		Amount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)
		NumDayDue = row.NumDayDue
		
		if int(NumDayDue) >= 30:
			CountPAR+=row.Count
			AmountPAR +=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

			TotalCountPAR+=row.Count
			TotalAmountPAR+=row.Amount

		TotalCount+=row.Count
		TotalAmount+=float(row.Amount)
		DictData.update({"%s" % (Key): {"Count": Count,"Amount": Amount,"CountPAR":CountPAR, "AmountPAR":AmountPAR}})

	DictData.update({"%s" % ("Total"): {"Count": TotalCount,"Amount": TotalAmount,"TotalCountPAR":TotalCountPAR,"TotalAmountPAR":TotalAmountPAR}})

	return DictData


""" Summary PAR BY Monthly Income """

@app.route('/Morakot/Report/FF/SummaryPARIncomeLevel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSummaryPARIncome():
	
	try:
		ErrorMsg    		= []
		DefualtUrl  		= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    		= checkAccess(DefualtUrl,"Search")
		if getCheck 		!= True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch          	=   request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()

		Result          	=   setSummaryPARByMonthly(Branch=Branch)
		Parameters      	=   {"Branch": Branch}
		FilterOption    	=   ""

		SearchForm 		= 	""
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)     
	except:
		raise

@app.route('/Morakot/Report/FF/SummaryPARIncomeLevel/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSummaryPARIncomeExcel():
	"""
	ByCategory:Branch, LoanProduct, CRO, CC, SourceofIncome, ReferalSource, ClientProfile.

	"""
	try:
		Branch          =   request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		Result          =   setSummaryPARByMonthly(Branch=Branch)
		response        =   CUSTOM_REPORT.exportExcel(Result=Result,FileName="SummaryPARIncomeLevel")

		return response

	except Exception as e:
		raise

def setSummaryPARByMonthly(**kwargs):
	"""
	ByCategory:Branch, LoanProduct, CRO, CC, SourceofIncome, ReferalSource, ClientProfile.
	"""
	try:
		Branch          =   kwargs.get("Branch")
		
		ReportHeader    =   CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Summary PAR By Income Level"})
		ReportHeader.update({"Parameters": {"Branch": Branch}})


		Data        = []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Average Daily / Monthly Income', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'PAR > 0', 
											Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="E")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'PAR >= 30', 
											Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% of Loans', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="H")


		Data = getSummaryPARMonthly(Branch=Branch)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getSummaryPARMonthly(**kwargs):


	"""
			used to return SUMMARY PAR report "MKT_LOAN_CONTRACT"  
			[
			   {    
					 1:     '1', 
					 2:     'Up to US$300',        # MonthlyIncome,
					 3:     '5',          		   # Number of loan Active by Category in PAR > 0 (Query All), = # of Loans
					 4:     '48,597.57',           $ Amount of Outstanding by Category in PAR > 0 (Query All), = $ of Loans
					 5:     '0.0581944770823'      % percantage of Loan by Category in PAR > 0 ($ of Loan in PAR 0 / Total Outstanding in branch), = % of Loans
					 6:     '0',            	   # Number of loan Active by Category in PAR > 30 (Query NumDayDue > 30 ), = # of Loans 
					 7:     '0.00',                $ Amount of Outstanding by Category in PAR > 30 (Query NumDayDue > 30 ), = $ of Loans
					 8:     '0.0',                 % percantage of Loan by Category in PAR > 30 ($ of Loan in PAR 30 / Total Outstanding in branch), = % of Loans
				 }, 
				 {    
					 1:     '2', 
					 2:     'Between US$301 and US$700',    # MonthlyIncome,
					 3:     '3',          		   # Number of loan Active by Category in PAR > 0 (Query All), = # of Loans
					 4:     '41,858.81',           $ Amount of Outstanding by Category in PAR > 0 (Query All), = $ of Loans
					 5:     '0.065564633663'       % percantage of Loan by Category in PAR > 0 ($ of Loan in PAR 0 / Total Outstanding in branch), = % of Loans
					 6:     '0',            	   # Number of loan Active by Category in PAR > 30 (Query NumDayDue > 30 ), = # of Loans 
					 7:     '0.00',                $ Amount of Outstanding by Category in PAR > 30 (Query NumDayDue > 30 ), = $ of Loans
					 8:     '0.0',                 % percantage of Loan by Category in PAR > 30 ($ of Loan in PAR 30 / Total Outstanding in branch), = % of Loans
				 }, 
			]
	"""
	
	Branch              =   kwargs.get("Branch")
	ByCategory          =   kwargs.get("ByCategory","Branch")

	RecordRow 			= []
	CategoryDict 		= getCategory(ByCategory=ByCategory)
	CategoryObj 		= CategoryDict.get("CategoryObj")
	FieldName   		= CategoryDict.get("FieldName")
	GroupBy     		= CategoryDict.get("GroupBy")

	CurrencyObj 		= MKT_CURRENCY.query

	#Calculate SummaryPAR
	CategoryDict = getCategory(ByCategory=ByCategory)
	SummaryPARDictIncome     =   getPARIncome(Branch=Branch,
											  GroupBy="%s" % (CategoryDict.get("GroupBy")),
											  CategoryObj=CategoryDict.get("CategoryObj"))
	SummaryPARDaily     =   getPARDaily(Branch=Branch,
											  GroupBy="%s" % (CategoryDict.get("GroupBy")),
											  CategoryObj=CategoryDict.get("CategoryObj"))


	DictObj = getMonthlyIncome()
	DailyObj = getAverageDaily()

	No = 1
	BaseCurrency        = mktsetting.getAccSetting().BaseCurrency
	TotActiveCount      = 0
	
	TotalAll1 = float(0)
	TotalAll2 = float(0)

	if DailyObj:
		"""
			Calculate in Daily Income 
			Formalar = MonthlyIncome / 30
			- AverageDaily >= 0 and AverageDaily <= 6
			- AverageDaily >6 and AverageDaily <= 12
			- AverageDaily > 12
		"""
		for key,value in DailyObj.iteritems():
			PARDict      	=	 SummaryPARDaily.get(key)
			AmountPAR0   	= PARDict.get("Amount") if PARDict else 0
			CountPAR30 		= PARDict.get("CountPAR") if PARDict else 0
			AmountPAR30 	= PARDict.get("AmountPAR") if PARDict else 0
			TotalOutstanding = mktloancontract.getActivePortfolioByCategory(Branch=Branch,
											  GroupBy="%s" % (CategoryDict.get("GroupBy")),
											  CategoryObj=CategoryDict.get("CategoryObj"),
											  Filter=value.get("ActiveCondition"))

			PercentagePAR0 	= getSummaryPARPercentage(ActivePARAmount=AmountPAR0,TotalActiveOutstanding=TotalOutstanding.get("Total",{}).get("Amount"))
			PercentagePAR30 = getSummaryPARPercentage(ActivePARAmount=AmountPAR30,TotalActiveOutstanding=TotalOutstanding.get("Total",{}).get("Amount"))
			TotalAll1 += TotalOutstanding.get("Total",{}).get("Amount")
			if PARDict:
				RecordRow.append(({1: {"Value":No,"Class":"text-center"},
								  2: {"Value":value.get('DetailsPAR'),"Class":"text-left"},
								  3: {"Value":PARDict.get('Count')},
								  4: {"Value":PARDict.get('Amount')},
								  5:{"Value":PercentagePAR0},
								  6: {"Value":PARDict.get('CountPAR')},
								  7: {"Value":PARDict.get('AmountPAR')},
								  8: {"Value":PercentagePAR30}
								  },{"Class":"text-right","Style":""}))
				No+=1


		

		TotActiveCount      = SummaryPARDictIncome.get("Total",{}).get("Count")
		TotalAmountPAR0     = SummaryPARDictIncome.get("Total",{}).get("Amount") if SummaryPARDictIncome.get("Total",{}).get("Amount") else 0 
		TotalCountPAR30       = SummaryPARDictIncome.get("Total",{}).get("TotalCountPAR")
		TotalAmountPAR30       = SummaryPARDictIncome.get("Total",{}).get("TotalAmountPAR")

		TotalPerentagePAR0 = mktmoney.formatNumber(float(TotalAmountPAR0) / float(TotalAll1) * 100,Comma=1,DecimalPlace=4) if TotalAmountPAR0 else 0
		TotalPerentagePAR30 = mktmoney.formatNumber(float(TotalAmountPAR30) / float(TotalAll1) * 100,Comma=1,DecimalPlace=4) if TotalAmountPAR30 else 0


	if TotalAmountPAR0 != 0:
		RecordRow.append(({1: {"Value":""},
						  2: {"Value":"Total"},
						  3: {"Value":TotActiveCount},
						  4: {"Value":mktmoney.toMoney(float(TotalAmountPAR0),mktmoney.getCurrencyObj(BaseCurrency))},
						  5: {"Value":TotalPerentagePAR0},
						  6: {"Value":TotalCountPAR30},
						  7: {"Value":mktmoney.toMoney(float(TotalAmountPAR30),mktmoney.getCurrencyObj(BaseCurrency))},
						  8: {"Value":TotalPerentagePAR30},
						 },{"Class":"text-right text-bold","Style":""}))


	if DictObj:

		"""
			Calculate in Monthly Income
			Formalar = MonthlyIncome 
			- MonthlyIncome >= 0 and MonthlyIncome <= 300
			- MonthlyIncome >= 301 and MonthlyIncome <= 700
			- MonthlyIncome > 700 and MonthlyIncome <= 1000
			- MonthlyIncome > 1000
		"""
		Index = 1
		for key,value in DictObj.iteritems():
			PARDict      	=	 SummaryPARDictIncome.get(key)
			AmountPAR0   	= PARDict.get("Amount") if PARDict else 0
			CountPAR30 		= PARDict.get("CountPAR") if PARDict else 0
			AmountPAR30 	= PARDict.get("AmountPAR") if PARDict else 0

			TotalOutstanding = mktloancontract.getActivePortfolioByCategory(Branch=Branch,
											  GroupBy="%s" % (CategoryDict.get("GroupBy")),
											  CategoryObj=CategoryDict.get("CategoryObj"),
											  Filter=value.get("ActiveCondition"))
			

			PercentagePAR0 	= getSummaryPARPercentage(ActivePARAmount=AmountPAR0,TotalActiveOutstanding=TotalOutstanding.get("Total",{}).get("Amount"))
			PercentagePAR30 = getSummaryPARPercentage(ActivePARAmount=AmountPAR30,TotalActiveOutstanding=TotalOutstanding.get("Total",{}).get("Amount"))
			TotalAll2 += TotalOutstanding.get("Total",{}).get("Amount")

			if PARDict:
				RecordRow.append(({1: {"Value":Index,"Class":"text-center"},
								  2: {"Value":value.get('DetailsPAR'),"Class":"text-left"},
								  3: {"Value":PARDict.get('Count')},
								  4: {"Value":PARDict.get('Amount')},
								  5: {"Value":PercentagePAR0},
								  6: {"Value":PARDict.get('CountPAR')},
								  7: {"Value":PARDict.get('AmountPAR')},
								  8: {"Value":PercentagePAR30}
								  },{"Class":"text-right","Style":""}))
				Index+=1


		

		TotActiveCount      = SummaryPARDictIncome.get("Total",{}).get("Count")
		TotalAmountPAR0     = SummaryPARDictIncome.get("Total",{}).get("Amount") if SummaryPARDictIncome.get("Total",{}).get("Amount") else 0 
		TotalCountPAR30       = SummaryPARDictIncome.get("Total",{}).get("TotalCountPAR")
		TotalAmountPAR30       = SummaryPARDictIncome.get("Total",{}).get("TotalAmountPAR")

		TotalPerentagePAR0 = mktmoney.formatNumber(float(TotalAmountPAR0) / float(TotalAll2) * 100,Comma=1,DecimalPlace=4) if TotalAmountPAR0 else 0
		TotalPerentagePAR30 = mktmoney.formatNumber(float(TotalAmountPAR30) / float(TotalAll2) * 100,Comma=1,DecimalPlace=4) if TotalAmountPAR30 else 0


	if TotalAmountPAR0 != 0:
		RecordRow.append(({1: {"Value":""},
						  2: {"Value":"Total"},
						  3: {"Value":TotActiveCount},
						  4: {"Value":mktmoney.toMoney(float(TotalAmountPAR0),mktmoney.getCurrencyObj(BaseCurrency))},
						  5: {"Value":TotalPerentagePAR0},
						  6: {"Value":TotalCountPAR30},
						  7: {"Value":mktmoney.toMoney(float(TotalAmountPAR30),mktmoney.getCurrencyObj(BaseCurrency))},
						  8: {"Value":TotalPerentagePAR30},
						 },{"Class":"text-right text-bold","Style":""}))
	

	return RecordRow


def getPARIncome(**kwargs):



	"""
		Function to calculate Detail PAR by Aging  

	"""



	Branch              =   kwargs.get("Branch")
	GroupBy             =   kwargs.get("GroupBy")
	CategoryObj         =   kwargs.get("CategoryObj")
	BranchSplit         =   Branch.split()
	DictData = {}


	ContractObj     =   db.session.query(func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Amount'),
										 func.count(MKT_LOAN_CONTRACT.ID).label('Count'),
										 MKT_LOAN_CONTRACT.ID,
										 MKT_LOAN_CONTRACT.Currency,
										 MKT_CUSTOMER.MonthlyIncome.label('MonthlyIncome'),
										 func.max(MKT_PD_DATE.NumDayDue).label('NumDayDue'),
										 eval(GroupBy).label("Category")
									).\
	 								distinct(MKT_PD_DATE.ID).\
									join(MKT_CUSTOMER,MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
									join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
									join(MKT_PD_DATE,MKT_PD_DATE.ID==MKT_PAST_DUE.ID).\
									join(MKT_LOAN_COLLATERAL,MKT_LOAN_COLLATERAL.ID==MKT_LOAN_CONTRACT.LoanApplicationID).\
									outerjoin(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE.CollateralID==MKT_LOAN_COLLATERAL.Collateral).\
									filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
									group_by(eval(GroupBy),
											 MKT_LOAN_CONTRACT.Currency,
											 MKT_PD_DATE.ID,
											 MKT_CUSTOMER.MonthlyIncome,
											 MKT_LOAN_CONTRACT.ID,
											 MKT_COLLATERAL_DE.ID,
											 MKT_PD_DATE.NumDayDue).\
									order_by(MKT_PD_DATE.ID,MKT_COLLATERAL_DE.ID,cast(MKT_CUSTOMER.MonthlyIncome,sqlalchemy.Float),cast(MKT_PD_DATE.NumDayDue,sqlalchemy.Integer).desc())





	SubQuery = db.session.query(MKT_CUSTOMER.MonthlyIncome).\
							join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.SpouseID==MKT_CUSTOMER.ID).\
							join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.LoanApplicationID==MKT_LOAN_APPLICATION.ID).\
							order_by(cast(MKT_CUSTOMER.MonthlyIncome,sqlalchemy.Float))

	if Branch and "ALL" not in BranchSplit:
		ContractObj = ContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchSplit))

	DictObj = getMonthlyIncome()
	TotalAmount 	= float(0)
	TotalCount 		= 0
	TotalCountPAR 	=0
	TotalAmountPAR 	= 0
	for row  in ContractObj:
		AA = SubQuery.filter(MKT_LOAN_CONTRACT.ID==row.ID).first()
		if AA:
			AA.MonthlyIncome

		try:
			SpouseIncome = float(AA.MonthlyIncome)
		except Exception as e:
			SpouseIncome = 0


		for key,value in DictObj.iteritems():
			Key = key
			# if AA:
			MonthlyIncome = float(row.MonthlyIncome) + float(SpouseIncome)
			Count  		= DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
			Amount 		= DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

			CountPAR  	= DictData.get(Key,{}).get("CountPAR",{}) if Key in DictData else 0
			AmountPAR 	= DictData.get(Key,{}).get("AmountPAR",{}) if Key in DictData  else float(0)

			NumDayDue 	= DictData.get(Key,{}.get("NumDayDue",{} if Key in DictData else 0))
			if eval(value.get('Condition')):
				Count       +=		row.Count
				Amount 		+=		mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)
				NumDayDue 	= 		row.NumDayDue
				
				if int(NumDayDue) >= 30:
					CountPAR 		+=		row.Count
					AmountPAR 		+=		mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

					TotalCountPAR 	+=		row.Count
					TotalAmountPAR 	+=		row.Amount

				TotalCount 			+=		row.Count
				TotalAmount 		+=		float(row.Amount)
				DictData.update({Key: {"Count": Count,"Amount": Amount,"CountPAR":CountPAR, "AmountPAR":AmountPAR}})

			DictData.update({("Total"): {"Count": TotalCount,"Amount": TotalAmount,"TotalCountPAR":TotalCountPAR,"TotalAmountPAR":TotalAmountPAR}})
	
	return DictData

def getPARDaily(**kwargs):



	"""
		Function to calculate Detail PAR by  Average Daily 

	"""



	Branch              =   kwargs.get("Branch")
	GroupBy             =   kwargs.get("GroupBy")
	CategoryObj         =   kwargs.get("CategoryObj")
	BranchSplit         =   Branch.split()
	DictData = {}


	ContractObj     =   db.session.query(func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Amount'),
										 func.count(MKT_LOAN_CONTRACT.ID).label('Count'),
										 MKT_LOAN_CONTRACT.ID,
										 MKT_LOAN_CONTRACT.Currency,
										 MKT_CUSTOMER.MonthlyIncome.label('MonthlyIncome'),
										 func.max(MKT_PD_DATE.NumDayDue).label('NumDayDue'),
										 eval(GroupBy).label("Category")
									).\
	 								distinct(MKT_PD_DATE.ID).\
									join(MKT_CUSTOMER,MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID).\
									join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
									join(MKT_PD_DATE,MKT_PD_DATE.ID==MKT_PAST_DUE.ID).\
									join(MKT_LOAN_COLLATERAL,MKT_LOAN_COLLATERAL.ID==MKT_LOAN_CONTRACT.LoanApplicationID).\
									outerjoin(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE.CollateralID==MKT_LOAN_COLLATERAL.Collateral).\
									filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
									group_by(eval(GroupBy),
											 MKT_LOAN_CONTRACT.Currency,
											 MKT_PD_DATE.ID,
											 MKT_CUSTOMER.MonthlyIncome,
											 MKT_LOAN_CONTRACT.ID,
											 MKT_COLLATERAL_DE.ID,
											 MKT_PD_DATE.NumDayDue).\
									order_by(MKT_PD_DATE.ID,MKT_COLLATERAL_DE.ID,cast(MKT_CUSTOMER.MonthlyIncome,sqlalchemy.Float),cast(MKT_PD_DATE.NumDayDue,sqlalchemy.Integer).desc())




	SubQuery = db.session.query(MKT_CUSTOMER.MonthlyIncome).\
							join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.SpouseID==MKT_CUSTOMER.ID).\
							join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.LoanApplicationID==MKT_LOAN_APPLICATION.ID).\
							order_by(cast(MKT_CUSTOMER.MonthlyIncome,sqlalchemy.Float))

	if Branch and "ALL" not in BranchSplit:
		ContractObj = ContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchSplit))

	DailyObj = getAverageDaily()
	TotalAmount 	= float(0)
	TotalCount 		= 0
	TotalCountPAR 	=0
	TotalAmountPAR 	= 0
	for row  in ContractObj:
		AA = SubQuery.filter(MKT_LOAN_CONTRACT.ID==row.ID).first()
		if AA:
			AA.MonthlyIncome

		try:
			SpouseIncome = float(AA.MonthlyIncome)
		except Exception as e:
			SpouseIncome = 0

		for key,value in DailyObj.iteritems():
			Key = key
			MonthlyIncome = float(row.MonthlyIncome) + float(SpouseIncome)
			AverageDaily = MonthlyIncome / 30
			Count  		= DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
			Amount 		= DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

			CountPAR  	= DictData.get(Key,{}).get("CountPAR",{}) if Key in DictData else 0
			AmountPAR 	= DictData.get(Key,{}).get("AmountPAR",{}) if Key in DictData  else float(0)

			NumDayDue 	= DictData.get(Key,{}.get("NumDayDue",{} if Key in DictData else 0))
			if eval(value.get('Condition')):
				Count+=row.Count
				Amount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)
				NumDayDue = row.NumDayDue
				
				if int(NumDayDue) >= 30:
					CountPAR+=row.Count
					AmountPAR +=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

					TotalCountPAR+=row.Count
					TotalAmountPAR+=row.Amount

				TotalCount+=row.Count
				TotalAmount+=float(row.Amount)
				DictData.update({Key: {"Count": Count,"Amount": Amount,"CountPAR":CountPAR, "AmountPAR":AmountPAR}})

			DictData.update({("Total"): {"Count": TotalCount,"Amount": TotalAmount,"TotalCountPAR":TotalCountPAR,"TotalAmountPAR":TotalAmountPAR}})
	
	return DictData




def getMonthlyIncome():


	"""
		get Loan Contract that filter by monthly Income
		- DetailsPAR = For show in template
		- Condition = find Average by condition 
		- ActiveCondition = (MKT_CUSTOMER.MonthlyIncome) for filter to find Outstanding Amount In Loan Contract that use in Function  getActivePortfolioByCategory.

	"""
	DictObj = {1:{"DetailsPAR":"Up to US$300","Condition": "MonthlyIncome >= 0 and MonthlyIncome <= 300","ActiveCondition":[MKT_CUSTOMER.MonthlyIncome >=0,MKT_CUSTOMER.MonthlyIncome <=300]
				 },
			 2:{"DetailsPAR":"Between US$301 and US$700","Condition": "MonthlyIncome >= 301 and MonthlyIncome <= 700","ActiveCondition":[MKT_CUSTOMER.MonthlyIncome >=301,MKT_CUSTOMER.MonthlyIncome <=700]
			 },
			 3:{"DetailsPAR":"Between US$701 and US$1,000","Condition": "MonthlyIncome > 700 and MonthlyIncome <= 1000","ActiveCondition":[MKT_CUSTOMER.MonthlyIncome >700,MKT_CUSTOMER.MonthlyIncome <=1000]
			 },
			 4:{"DetailsPAR":"Above US$1,000","Condition": "MonthlyIncome > 1000","ActiveCondition":[MKT_CUSTOMER.MonthlyIncome >1000]
			 }
			}
	return DictObj


def getAverageDaily():
	"""
		get Loan Contract that filter by average Daily in monthly
		- DetailsPAR = For show in template
		- Condition = find Average by condition 
		- ActiveCondition = (MKT_CUSTOMER.MonthlyIncome /30) for filter to find Outstanding Amount In Loan Contract that use in Function  getActivePortfolioByCategory.

	"""
	DailyObj = {1:{"DetailsPAR":"Up to US$6","Condition": "AverageDaily >= 0 and AverageDaily <= 6","ActiveCondition":[MKT_CUSTOMER.MonthlyIncome/30 >=0,MKT_CUSTOMER.MonthlyIncome/30 <=6]
				 },
			 2:{"DetailsPAR":"Between US$6 and US$12","Condition": "AverageDaily >6 and AverageDaily <= 12","ActiveCondition":[(MKT_CUSTOMER.MonthlyIncome/30) >6,(MKT_CUSTOMER.MonthlyIncome/30) <=12]
			 },
			 3:{"DetailsPAR":"Above US$12","Condition": "AverageDaily > 12","ActiveCondition":[(MKT_CUSTOMER.MonthlyIncome/30) >12]
			 }
			}
	return DailyObj


	
def getSummaryPARPercentage(**kwargs):

	"""
			Function to calculate Percentage of PAR. 
			% loan is calculated using following formular:
			% loan  =  $ of Loan / Total Outstanding in branch

			Args:
				**kwargs:
						ActivePARAmount     (float):  Amount that find in PAR 
						TotalActiveOutstanding     (float):  Total OutstandingAmount by Category
					   
			Returns:
				 % loan    (float): percantage of PAR


			Examples:
				>>> float(ActivePARAmount) / float(TotalActiveOutstanding)

				float(0.0581944770823)
		"""


	ActivePARAmount        = kwargs.get("ActivePARAmount",0)
	TotalActiveOutstanding   = kwargs.get("TotalActiveOutstanding",0)
	if TotalActiveOutstanding == 0:
		return 0
	return mktmoney.formatNumber(float(ActivePARAmount) / float(TotalActiveOutstanding) * 100,Comma=1, DecimalPlace=4)

