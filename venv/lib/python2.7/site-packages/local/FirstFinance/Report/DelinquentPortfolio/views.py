# -*- coding: utf-8 -*-

'''
Report Name : DetailPARByBranch

'''
from app.mktcore.imports                               import *
from sqlalchemy                                        import *
import sqlalchemy
from sqlalchemy.sql.expression                         import           cast
from app.Customer.models                               import *
from app.LoanContract.models                           import *
from app.Officer.models                                import *
from app.Currency.models                               import *
from app.ScheduleAddon.models							import *
import app.tools.mktaccounting                         as              mktaccounting
from app.PD.models                                     import *
import app.tools.mktreport                             as              mktreport
from local.FirstFinance.tools.mktaddon                 import          getInsurance
from app.tools.mktcustomreport                         import *
import local.FirstFinance.tools.mktloan                as              mktloan
import app.tools.user                                  as              mktuser
from operator                   import itemgetter

import local.FirstFinance.Report.LoanPortfolio.portfolio         as             mktloancontract
import app.tools.mktmoney										as 			mktmoney



@app.route('/Morakot/Report/FF/DetailPARByBranch', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDetailPARByBranch():
	""" Route to view each report """
	try:        
		ErrorMsg        = []
		DefualtUrl      = CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck        = checkAccess(DefualtUrl,"Search")
		if getCheck     != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch          =   request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()

		Result          =   getReportPARByBranch(Branch=Branch)
		Parameters      =   {"Branch": Branch}
		FilterOption    =   ""

		SearchForm 		= 	""

		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)  
	except:
		raise

@app.route('/Morakot/Report/FF/DetailPARByBranch/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDetailPARByBranchExport():
	""" Route to view each report """
	try:
		Branch          =   request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		Result          =   getReportPARByBranch(Branch=Branch)
		response        =   CUSTOM_REPORT.exportExcel(Result=Result,FileName="DetailsPARByBranch")

		return response

	except Exception as e:
		raise

def getReportPARByBranch(**kwargs):
	try:
		Branch          =   kwargs.get("Branch")
		
		ReportHeader    =   CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Details PAR By Branch"})
		ReportHeader.update({"Parameters": kwargs})

		Data            = []

		""" Report Header Title """ 
		TableHeader     = {}    
 

		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'No', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Name of Clients', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Name of CC', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Name of CRO', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'At Approval', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Date', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Amount', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Outstanding Balance', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Default', 
											Rowspan=0,Colspan=5,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Date', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Principle', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Interest', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Insurance', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Total', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="M")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Of Days in Default', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="N")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Penalty Due', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="O")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Loan Class', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="P")

		Data            = getLoanContract(Branch=Branch)

		Result          = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getLoanContract(**kwargs):
	"""
			used to return DelinquentPortfolio report  
			[
				{    
					 1:     '1', 
					 2:     'Pech Sopheap',         # Name of Clients,
					 3:     'Phat Sophan',          # Name of CC,
					 4:     'Heng Sarin',           # Name of CRO,
					 5:     '2017-10-18'            # Approval Date,
					 6:     '15,500.00',            $ Approval Amount, 
					 7:     '155,280.08',           $ Outstanding Balance,
					 8:     '2018-01-12',           # DueDate in PD_Date,
					 9:     '86.51',                $ Default PrincipleDue in Past_Due,
					 10:    '82.53',                $ Default InterestDeu in Past_Due,
					 11:    '0.0',                  $ Default Insurance , 
					 12:    '169.04',               $ Total (Principle + Interest + Insurance),
					 13:    '3',                    # Of Days in Default
					 14:    '1.53'                  $ Penalty Due
					 15:    '10'                    # Loan Class in Loan Contract
				 }, 
				 {    
					 1:     '2', 
					 2:     'Nang Vy',              # Name of Clients,
					 3:     'Officer Legacy'        # Name of CC,
					 4:     'Heng Sarin',           # Name of CRO,
					 5:     '2015-10-27'            # Approval Date,
					 6:     '14,000.00',            $ Approval Amount, 
					 7:     '12,598.82' ,           $ Outstanding Balance,
					 8:     '2017-12-20',           # DueDate in PD_Date,
					 9:     '17.17',                $ Default PrincipleDue in Past_Due,
					 10:    '0.0',                  $ Default InterestDeu in Past_Due,
					 11:    '0.0',                  $ Default Insurance , 
					 12:    '17.17',                $ Total (Principle + Interest + Insurance),
					 13:    '26',                   # Of Days in Default
					 14:    '1.51'                  $ Penalty Due
					 15:    '10'                    # Loan Class in Loan Contract
				 }
			]
	"""


	"""
			Function to get detail customer and Loan contract. 
		   
			Args:
				**kwargs:
						Branch     (str):  Filter by Branch. 'ALL, CM , CM HO'
					
			Returns:
				Dict   (list): List of Dictionary 

			Raises:
				Null

	"""

	Branch              =   kwargs.get("Branch")
	BranchSplit         =   Branch.split()
	Index               =   0
	Dict                =   []

	LoanContract = db.session.query(MKT_CUSTOMER.ID.label('CustomerID'),
								   (MKT_CUSTOMER.LastNameEn + ' ' + MKT_CUSTOMER.FirstNameEn).label('FullName'),
									MKT_CUSTOMER.CRO,
									MKT_LOAN_CONTRACT.ID,
									MKT_LOAN_CONTRACT.ValueDate,
									MKT_LOAN_CONTRACT.ApprovedAmount,
									MKT_LOAN_CONTRACT.ContractOfficerID,
									MKT_LOAN_CONTRACT.ValueDate,
									MKT_LOAN_CONTRACT.ApprovedAmount,
									MKT_LOAN_CONTRACT.OutstandingAmount,
									MKT_LOAN_CONTRACT.Currency,
									MKT_LOAN_CONTRACT.AssetClass,
									MKT_PAST_DUE.TotPrincipalDue,
									MKT_PAST_DUE.TotInterestDue,
									MKT_PAST_DUE.TotPenaltyDue,
									MKT_PAST_DUE.ID.label('PastDueID'),
									MKT_CUSTOMER.Branch
									).\
									join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ContractCustomerID==MKT_CUSTOMER.ID).\
									join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
									filter(or_(MKT_PAST_DUE.TotPrincipalDue > 0, MKT_PAST_DUE.TotInterestDue > 0,)).\
									order_by(MKT_CUSTOMER.LastNameEn,MKT_CUSTOMER.FirstNameEn)
	
	TotalApprovedAmount         =   0
	TotalOutstanding            =   0
	TotalPrincipal              =   0
	TotalInterest               =   0 
	TotalInsurant               =   0
	MainTotal                   =   0
	TotalPenaltyDue             =   0
	Currency                    =   ''

	if Branch and "ALL" not in BranchSplit:
		LoanContract = LoanContract.filter(MKT_CUSTOMER.Branch.in_(BranchSplit))

	for item in LoanContract.all():
		MaxDueDate 				=		getMaxNumDayDue(item.PastDueID)
		Currency                =       item.Currency
		Index                   +=       1
		FullName                =       item.FullName
		CC                      =       mktreport.VLOOKUP(['MKT_OFFICER','ID',str(item.ContractOfficerID),'LastName','FirstName']) if item.ContractOfficerID else "Unknown"
		CRO                     =       mktreport.VLOOKUP(['MKT_OFFICER','ID',str(item.CRO),'LastName','FirstName']) if item.CRO else "Unknown"
		Date                    =       item.ValueDate
		ApprovedAmount          =       mktloan.toBaseCurrency(Amount=float(item.ApprovedAmount), Currency=item.Currency)
		Outstanding             =       mktloan.toBaseCurrency(Amount=float(item.OutstandingAmount), Currency=item.Currency)
		AssetClass              =       item.AssetClass
		DueDate                 =       MaxDueDate[1]
		Principal               =       mktloan.toBaseCurrency(Amount=float(item.TotPrincipalDue), Currency=item.Currency)
		Interest                =       mktloan.toBaseCurrency(Amount=float(item.TotInterestDue), Currency=item.Currency)
		InsurantAmount          =       getInsurance(item.ID)
		Insurant                =       mktloan.toBaseCurrency(Amount=float(InsurantAmount.get('PastDue')), Currency=item.Currency)
		Total                   =       float(Principal) + float(Interest) + float(Insurant)
		NumDayDue               =       MaxDueDate[0]
		TotPenaltyDue           =       mktloan.toBaseCurrency(Amount=float(item.TotPenaltyDue), Currency=item.Currency)
		Branch 					=		item.Branch
		
		Dict.append(({
						1   :       {"Value":Index,"Class":"text-center"},
						2 	: 		{"Value":Branch},
						3   :       {"Value":FullName,"Class":"text-left"},
						4   :       {"Value":CC,"Class":"text-left"},
						5   :       {"Value":CRO,"Class":"text-left"},
						6   :       {"Value":Date,"Class":"text-left"},
						7   :       {"Value":mktmoney.toMoney(float(ApprovedAmount),mktmoney.getCurrencyObj(Currency))},
						8   :       {"Value":mktmoney.toMoney(float(Outstanding),mktmoney.getCurrencyObj(Currency))},
						9   :       {"Value":DueDate},
						10  :       {"Value":mktmoney.toMoney(float(Principal),mktmoney.getCurrencyObj(Currency))},
						11  :       {"Value":mktmoney.toMoney(float(Interest),mktmoney.getCurrencyObj(Currency))},
						12  :       {"Value":Insurant},
						13  :       {"Value":Total}, # Total from (Principal + Interest + Insurant)
						14  :       {"Value":int(NumDayDue) if NumDayDue else 0},
						15  :       {"Value":mktmoney.toMoney(float(TotPenaltyDue),mktmoney.getCurrencyObj(Currency))},
						16  :       {"Value":AssetClass}
				},{"Class":"text-right","Style":""}))
		TotalApprovedAmount     +=      ApprovedAmount
		TotalOutstanding        +=      Outstanding
		TotalPrincipal          +=      Principal
		TotalInterest           +=      Interest
		TotalInsurant           +=      Insurant
		MainTotal               +=      Total
		TotalPenaltyDue         +=      TotPenaltyDue

	# print Dict[0][]
	# Dict = sorted(Dict, key=itemgetter(2))
	# [col.update({1: index+1}) for index, col in enumerate(Dict[0])]
	""" Main Total """
	if TotalApprovedAmount != 0:
		Dict.append(({
							1   :       {"Value":""},
							2   :       {"Value":""},
							3   :       {"Value":"Total"},
							4   :       {"Value":""},
							5   :       {"Value":""},
							6   :       {"Value":""},
							7   :       {"Value":mktmoney.toMoney(float(TotalApprovedAmount),mktmoney.getCurrencyObj(Currency))},
							8   :       {"Value":mktmoney.toMoney(float(TotalOutstanding),mktmoney.getCurrencyObj(Currency))},
							9   :       {"Value":""},
							10  :       {"Value":mktmoney.toMoney(float(TotalPrincipal),mktmoney.getCurrencyObj(Currency))},
							11  :       {"Value":mktmoney.toMoney(float(TotalInterest),mktmoney.getCurrencyObj(Currency))},
							12  :       {"Value":TotalInsurant},
							13  :       {"Value":MainTotal},
							14  :       {"Value":""},
							15  :       {"Value":mktmoney.toMoney(float(TotalPenaltyDue),mktmoney.getCurrencyObj(Currency))},
							16  :       {"Value":""}
			},{"Class":"text-right text-bold","Style":""}))

	return  Dict

def getMaxNumDayDue(ID): 
	""" This Function use for get record in MKT_PD_DATE  that have big NumDayDue 
		
		- ID = ID of MKT_PD_DATE 

	"""
	NumDayDue       = ''
	DueDate 		= ''
	PDDateObj       = MKT_PD_DATE.query.filter(MKT_PD_DATE.ID==ID).\
									filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
									order_by(MKT_PD_DATE.DueDate.asc(),
											MKT_PD_DATE.NumDayDue.desc()).\
									limit(1).distinct().first()
	if PDDateObj:
		NumDayDue = str(PDDateObj.NumDayDue)
		DueDate   = PDDateObj.DueDate
	   
	return NumDayDue,DueDate


""" DETAILS PAR BY AGING """

@app.route('/Morakot/Report/FF/SummaryPARByAging', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDetailsPARByAging():
	
	try:
		ErrorMsg    		= []
		DefualtUrl  		= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    		= checkAccess(DefualtUrl,"Search")
		if getCheck 		!= True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch          	=   request.args.get("Branch") if "Branch" in request.args else ""

		Result          	=   setDetailsPARByAging(Branch=Branch)
		Parameters      	=   {"Branch": Branch}
		FilterOption    	=   ""

		SearchForm 		= 	""
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)     
	except:
		raise

@app.route('/Morakot/Report/FF/SummaryPARByAging/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFDetailsPARByAgingExcel():
	"""
	ByCategory:Branch, LoanProduct, CRO, CC, SourceofIncome, ReferalSource, ClientProfile.

	"""
	try:
		Branch          =   request.args.get("Branch") if "Branch" in request.args else ""
		
		Result          =   setDetailsPARByAging(Branch=Branch)
		response        =   CUSTOM_REPORT.exportExcel(Result=Result,FileName="SummaryPARByAging")

		return response

	except Exception as e:
		raise

def getCategory(**kwargs):
	ByCategory 				= "Branch"

	CategoryObj 			= ""
	FieldName   			= ""
	GroupBy     			= ""
	HeaderField 			= ""

	if ByCategory 			== "Branch":
		CategoryObj     	= MKT_BRANCH.query
		FieldName       	= "row.ID + ' - ' + row.Description "
		GroupBy         	= "MKT_LOAN_CONTRACT.Branch"     
		HeaderField     	= "Branch"

	
	return {"CategoryObj": CategoryObj,"FieldName": FieldName,"GroupBy": GroupBy,"HeaderField": HeaderField}
	
def setDetailsPARByAging(**kwargs):
	
	try:
		Branch          =   kwargs.get("Branch")
		ByCategory      =   kwargs.get("ByCategory")
		
		ReportHeader    =   CUSTOM_REPORT.getReportHeader()
		CategoryDict    =   getCategory(ByCategory=ByCategory)
		ReportHeader.update({"ReportTitle": "Summary PAR By Aging"})
		ReportHeader.update({"Parameters": {"Branch": Branch}})


		Data        = []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Details PAR', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Outstanding Balance', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Due Principle', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Due Interest', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Due Insurace', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Total Due', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u' Total Penalty Due', 
											Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")


		Data 		= getDetailsPARAging(Branch=Branch,ByCategory=ByCategory)

		Result 		= {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getDetailsPARAging(**kwargs):


	"""
			used to return Details PAR By Aging  
			[
			   {    
					1:     		'1', 
					2:			'PAR 0 - 30 Days'		 # Details PAR
					3:     		'155,280.08',            $ Outstanding Balance,
					4:     		'86.51',                 $ Default PrincipleDue in Past_Due,
					5:    		'82.53',                 $ Default InterestDeu in Past_Due,
					6:    		'0.0',                   $ Default Insurance , 
					7:    		'169.04',                $ Total (Principle + Interest + Insurance),
					8:    		'1.53'                   $ Penalty Due
				}
				 {    
					  
					1:     		'1', 
					2:			'PAR 0 - 30 Days'		 # Details PAR
					3:    		'155,280.08',            $ Outstanding Balance,
					4:     		'86.51',                 $ Default PrincipleDue in Past_Due,
					5:    		'82.53',                 $ Default InterestDeu in Past_Due,
					6:    		'0.0',                   $ Default Insurance , 
					7:    		'169.04',                $ Total (Principle + Interest + Insurance),
					8:    		'1.53'                   $ Penalty Due
				 }, 
			]
	"""

	
	Branch              =   kwargs.get("Branch")
	ByCategory          =   kwargs.get("ByCategory")

	RecordRow 			= []
	CategoryDict 		= getCategory(ByCategory=ByCategory)
	CategoryObj 		= CategoryDict.get("CategoryObj")
	FieldName   		= CategoryDict.get("FieldName")
	GroupBy     		= CategoryDict.get("GroupBy")

	CurrencyObj 		= MKT_CURRENCY.query

	#Calculate SummaryPAR
	CategoryDict = getCategory(ByCategory=ByCategory)
	SummaryPARDict     =   getPARAging(Branch=Branch,
											  GroupBy="%s" % (CategoryDict.get("GroupBy")),
											  CategoryObj=CategoryDict.get("CategoryObj"))
	DictObj = getPARDict()

	No = 1
	BaseCurrency        = mktsetting.getAccSetting().BaseCurrency
	TotActiveCount      = 0
	TotalAmount     	= float(0)
	TotalPrincipal 		= float(0)
	TotalInterest 		= float(0)
	TotalPenalty 		= float(0)
	TotalDueAll 		= float(0)
	TotalInsurant 		= float(0)
	Insurant 			= float(0)
	# PARDict.get('Insurant'),
	if CategoryObj:
		for key,value in DictObj.iteritems():
			PARDict      	=	 SummaryPARDict.get(key)
			if PARDict:
				TotalDue 		=	 PARDict.get('Principle') + PARDict.get('Interest') + PARDict.get('Insurant')
				RecordRow.append(({1: {"Value":key,"Class":"text-center"},
								  2: {"Value":value.get('DetailsPAR'),"Class":"text-left"},
								  3: {"Value":PARDict.get('Amount')},
								  4: {"Value":PARDict.get('Principle')},
								  5: {"Value":PARDict.get('Interest')},
								  6: {"Value":PARDict.get('Insurant')},
								  7: {"Value":TotalDue},
								  8: {"Value":PARDict.get('Penalty')},
								  },{"Class":"text-right","Style":""}))
				No+=1

				''' FIND TOTAL '''
				TotalAmount      	+= PARDict.get("Amount")
				TotalPrincipal      += PARDict.get("Principle")
				TotalInterest      	+= PARDict.get("Interest")
				TotalPenalty      	+= PARDict.get("Penalty")
				TotalInsurant     	+= PARDict.get("Insurant")
				TotalDueAll 		+= TotalDue
		if TotalAmount != 0:
			RecordRow.append(({1: {"Value":""},
							  2: {"Value":"Total"},
							  3: {"Value":TotalAmount},
							  4: {"Value":TotalPrincipal},
							  5: {"Value":TotalInterest},
							  6: {"Value":TotalInsurant},
							  7: {"Value":TotalDueAll},
							  8: {"Value":TotalPenalty},
							 },{"Class":"text-right text-bold","Style":""}))

	return RecordRow

def getPARAging(**kwargs):



	"""
		Function to calculate Detail PAR by Aging  

	"""



	Branch              =   kwargs.get("Branch")
	GroupBy             =   kwargs.get("GroupBy")
	CategoryObj         =   kwargs.get("CategoryObj")
	BranchSplit         =   Branch.split()
	DictData = {}

	ContractObj     =   db.session.query(func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Amount'),
										 func.count(MKT_LOAN_CONTRACT.ID).label('Count'),
										 func.sum(MKT_PAST_DUE.TotPrincipalDue).label('Principle'),
										 func.sum(MKT_PAST_DUE.TotInterestDue).label('Interest'),
										 func.sum(MKT_PAST_DUE.TotPenaltyDue).label('Penalty'),
										 func.sum(MKT_SCHEDULE_ADDON.PastDue).label('Insurant'),
										 MKT_LOAN_CONTRACT.Currency,
										 func.max(MKT_PD_DATE.NumDayDue).label('NumDayDue'),
									).\
									distinct(MKT_PD_DATE.ID).\
									join(MKT_CUSTOMER, MKT_CUSTOMER.ID==MKT_LOAN_CONTRACT.ContractCustomerID).\
									join(MKT_PAST_DUE,MKT_PAST_DUE.LoanID==MKT_LOAN_CONTRACT.ID).\
									join(MKT_PD_DATE,MKT_PD_DATE.ID==MKT_PAST_DUE.ID).\
									outerjoin(MKT_SCHEDULE_ADDON,MKT_SCHEDULE_ADDON.LoanID==MKT_LOAN_CONTRACT.ID).\
									filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
									group_by(
											 MKT_LOAN_CONTRACT.Currency,
											 MKT_PD_DATE.ID,
											 MKT_PD_DATE.NumDayDue).\
									order_by(MKT_PD_DATE.ID,cast(MKT_PD_DATE.NumDayDue,sqlalchemy.Integer).desc())

	if Branch and "ALL" not in BranchSplit:
		ContractObj = ContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchSplit))

	DictObj = getPARDict()
	TotalAmount = float(0)
	TotalPrincipal = float(0)
	TotalInterest = float(0)
	TotalPenalty = float(0)
	TotalInsurant = float(0)
	for row in ContractObj:
		for key, value in DictObj.iteritems():
			Key    = key
			NumDayDue = row.NumDayDue
			Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)
			Principle = DictData.get(Key,{}).get("Principle",{}) if Key in DictData else float(0)
			Interest = DictData.get(Key,{}).get("Interest",{}) if Key in DictData else float(0)
			Penalty = DictData.get(Key,{}).get("Penalty",{}) if Key in DictData else float(0)
			Insurant = DictData.get(Key,{}).get("Insurant",{}) if Key in DictData else float(0)

			if eval(value.get('Condition')):
				Amount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)
				Principle+=mktloan.toBaseCurrency(Amount=float(row.Principle), Currency=row.Currency)
				Interest+=mktloan.toBaseCurrency(Amount=float(row.Interest), Currency=row.Currency)
				Penalty+=mktloan.toBaseCurrency(Amount=float(row.Penalty), Currency=row.Currency)
				InsurantAmount = float(row.Insurant) if row.Insurant else float(0) 
				Insurant+=mktloan.toBaseCurrency(Amount=float(InsurantAmount), Currency=row.Currency)

			TotalAmount+=float(Amount)
			TotalPrincipal +=float(Principle)
			TotalInterest +=float(Interest)
			TotalPenalty +=float(Penalty)
			TotalInsurant +=float(Insurant)
			DictData.update({key: {"Amount": Amount,"Principle":Principle,"Interest":Interest,"Penalty":Penalty,"Insurant":Insurant}})

		DictData.update({("Total"): {"Amount": TotalAmount,"Principle":TotalPrincipal,"Interest":TotalInterest,"Penalty":TotalPenalty,"Insurant":TotalInsurant}})

	return DictData

def getPARDict():
	DictObj = {1:{"DetailsPAR":"PAR 0 - 30 Days","Condition": "int(NumDayDue) >= 0 and int(NumDayDue) <= 30"
				 },
			 2:{"DetailsPAR":"PAR 31 - 60 Days","Condition": "int(NumDayDue) >= 31 and int(NumDayDue) <= 60"
			 },
			 3:{"DetailsPAR":"PAR 61 - 90 Days","Condition": "int(NumDayDue) >= 61 and int(NumDayDue) <= 90"
			 },
			 4:{"DetailsPAR":"PAR 91 - 120 Days","Condition": "int(NumDayDue) >= 91 and int(NumDayDue) <= 120"
			 },
			 5:{"DetailsPAR":"PAR 121 - 150 Days","Condition": "int(NumDayDue) >= 121 and int(NumDayDue) <= 150"
			 },
			 6:{"DetailsPAR":"PAR 151 - 180 Days","Condition": "int(NumDayDue) >= 151 and int(NumDayDue) <= 180"
			 },
			 7:{"DetailsPAR":"PAR 181 - 210 Days","Condition": "int(NumDayDue) >= 181 and int(NumDayDue) <= 210"
			 },
			 8:{"DetailsPAR":"PAR 211 - 240 Days","Condition": "int(NumDayDue) >= 211 and int(NumDayDue) <= 240"
			 },
			 9:{"DetailsPAR":"PAR 241 - 270 Days","Condition": "int(NumDayDue) >= 241 and int(NumDayDue) <= 270"
			 },
			 10:{"DetailsPAR":"PAR 271 - 300 Days","Condition": "int(NumDayDue) >= 271 and int(NumDayDue) <= 300"
			 },
			 11:{"DetailsPAR":"PAR 301 - 330 Days","Condition": "int(NumDayDue) >= 301 and int(NumDayDue) <= 330"
			 },
			 12:{"DetailsPAR":"PAR 331 - 360 Days","Condition": "int(NumDayDue) >= 331 and int(NumDayDue) <= 360"
			 },
			 13:{"DetailsPAR":"PAR > 360 Days","Condition": "int(NumDayDue) > 360"
			 }
			}
	return DictObj

