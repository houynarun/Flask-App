# -*- coding: utf-8 -*-

'''
Report Name : Portfolio by Product, CRO, CC

'''

from app.mktcore.imports 				import *
import app.tools.mktmessage 			as mktmessage
import app.tools.mktdate				as mktdate
from decimal 							import Decimal

import local.FirstFinance.tools.mktloan as mktloan
import app.tools.mktmoney 				as mktmoney
import app.tools.mktsetting     		as mktsetting
import app.tools.user           		as mktuser

from app.LoanApplication.models 		import *
from app.Customer.models				import *
from local.FirstFinance.Customer.models import *
from app.LoanProduct.models				import *
from app.Officer.models 				import *
from app.Currency.models 				import *
from app.LoanContract.models 			import *
from app.LoanAmendment.models 			import *
from app.Journal.models 				import *
from app.Collateral.models 				import *
from app.tools.mktcustomreport   		import *

from sqlalchemy.orm import aliased

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	ReportedDate 		=	DateTextField("Reported Date")

@app.route('/Morakot/Report/FF/Portfolio/<ByCategory>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFPortfolioByCategory(ByCategory):
	"""
	<ByCategory> : LoanProduct, CRO, CC

	"""
	try:
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint,ByCategory=ByCategory))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		ByCategory 		= 	str(ByCategory)
		SystemBankDate 	= str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else "ALL" if ByCategory=="Branch" else mktuser.getCurrentBranch()
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate

		Result 			=	setPortfolioByCategory(Branch=Branch,
												   ReportedDate=ReportedDate,
												   ByCategory=ByCategory)		

		Parameters 		= 	{"Branch": Branch,"ReportedDate": ReportedDate}
		FilterOption 	=	""		
		SearchForm 		= 	FRM_CUSTOM_REPORT_SEARCH_EX()

		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)
	except:
		raise

@app.route('/Morakot/Report/FF/Portfolio/<ByCategory>/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFPortfolioByCategoryExcel(ByCategory):
	"""
	<ByCategory> : LoanProduct, CRO, CC

	"""
	try:
		ByCategory 		= 	str(ByCategory)
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else "ALL" if ByCategory=="Branch" else mktuser.getCurrentBranch()
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate

		Result 			=	setPortfolioByCategory(Branch=Branch,
												   ReportedDate=ReportedDate,
												   ByCategory=ByCategory)

		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="PortfolioBy%s" % ByCategory)

		return response

	except Exception as e:
		raise

def getCategory(**kwargs):
	"""
	Return: 
	"""
	ByCategory = kwargs.get("ByCategory")
	IsDisbursed = kwargs.get("IsDisbursed")
	MainTable 	= kwargs.get("MainTable","")

	CategoryObj = ""
	FieldName   = ""
	GroupBy 	= ""
	HeaderField = ""
	if ByCategory == "LoanProduct":
		CategoryObj 	= MKT_LOAN_PRODUCT.query.order_by(MKT_LOAN_PRODUCT.ID)
		FieldName 		= "row.ID + ' - ' + row.Description"
		GroupBy 		= "MKT_LOAN_APPLICATION.LoanProduct"
		HeaderField  	= "Loan Product"
		if IsDisbursed == "Y":
			GroupBy 	= "MKT_LOAN_CONTRACT.LoanProduct"

	elif ByCategory == "CRO":
		CategoryObj		= MKT_OFFICER.query.order_by(MKT_OFFICER.LastName,MKT_OFFICER.FirstName)
		FieldName 		= "row.ID + ' - ' + row.LastName + ' ' + row.FirstName"
		GroupBy 		= "MKT_CUSTOMER.CRO"
		HeaderField  	= "CRO"

	elif ByCategory == "CC":
		CategoryObj		= MKT_OFFICER.query.order_by(MKT_OFFICER.LastName,MKT_OFFICER.FirstName)
		FieldName 		= "row.ID + ' - ' + row.LastName + ' ' + row.FirstName"
		GroupBy 		= "MKT_CUSTOMER.Officer"		
		HeaderField  	= "CC"
		if IsDisbursed == "Y":
			GroupBy 	= "MKT_LOAN_CONTRACT.ContractOfficerID"

	elif ByCategory == "LRO":
		CategoryObj		= MKT_OFFICER.query.order_by(MKT_OFFICER.LastName,MKT_OFFICER.FirstName)
		FieldName 		= "row.ID + ' - ' + row.LastName + ' ' + row.FirstName"
		GroupBy 		= "MKT_CUSTOMER.LRO"		
		HeaderField  	= "LRO"

	elif ByCategory == "SourceOfIncome":
		class CSourceOfIncome(db.Model):
			__tablename__ = 'MKT_CUSTOMER'
			def __init__(self, ID, Description):
				super(CSourceOfIncome, self).__init__()
				self.ID = ID
				self.Description = Description

		CategoryObj = [CSourceOfIncome('1','Salaried Employee'),
						CSourceOfIncome('2', 'Worker'),
						CSourceOfIncome('3', 'Civil Servant'),
						CSourceOfIncome('4', 'Self-Employed')]

		FieldName 		= "row.ID + ' - ' + row.Description"
		GroupBy 		= "MKT_CUSTOMER.SourceOfIncome"
		HeaderField  	= "Source of Income"
		if IsDisbursed == "Y":
			GroupBy 	= "MKT_CUSTOMER.SourceOfIncome"

	elif ByCategory == "ReferralSource":
		CategoryObj		= MKT_REFERAL_SOURCE.query
		FieldName 		= "row.ID + ' - ' + row.Description "
		GroupBy 		= "MKT_CUSTOMER.ReferralSource"		
		HeaderField  	= "Referal Source"
		if IsDisbursed == "Y":
			GroupBy 	= "MKT_CUSTOMER.ReferralSource"

		if MainTable == "POCustomer":
			GroupBy 	= "MKT_CUSTOMER.ReferralSource"

	elif ByCategory == "Branch":
		CategoryObj		= MKT_BRANCH.query
		FieldName 		= "row.ID + ' - ' + row.Description "
		GroupBy 		= "MKT_LOAN_APPLICATION.Branch"		
		HeaderField  	= "Branch"
		if IsDisbursed == "Y":
			GroupBy 	= "MKT_LOAN_CONTRACT.Branch"

		if MainTable == "POCustomer":
			GroupBy 	= "MKT_PO_CUSTOMER.Branch"

	elif ByCategory == "ClientProfile":
		class CHouseOwnership(db.Model):
			__tablename__ = 'MKT_CUSTOMER'
			def __init__(self, ID, Description):
				super(CHouseOwnership, self).__init__()
				self.ID = ID
				self.Description = Description

		CategoryObj = [CHouseOwnership('1', 'Renter'),
						CHouseOwnership('2', 'Living with parents/family'),
						CHouseOwnership('3', 'Living in workplace'),
						CHouseOwnership('4', 'Living in own house'),
						CHouseOwnership('5', 'Evictees'),
						CHouseOwnership('6', 'Used to own house'),
						CHouseOwnership('99', 'Other')]

		FieldName 		= "row.ID + ' - ' + row.Description"
		GroupBy 		= "MKT_CUSTOMER.HouseOwnership"
		HeaderField  	= "Client Profile"
		if IsDisbursed == "Y":
			GroupBy 	= "MKT_CUSTOMER.HouseOwnership"

	elif ByCategory == "TitleType":
		class CTitleType(db.Model):
			__tablename__ = 'MKT_CUSTOMER'
			def __init__(self, ID, Description):
				super(CTitleType, self).__init__()
				self.ID = ID
				self.Description = Description

		CategoryObj = [CTitleType('SoftTitle', 'Soft Title'),
						CTitleType('HardTitle', 'Hard Title'),
						CTitleType('LMap', 'LMap'),
						CTitleType('Other', 'Other')]

		FieldName 		= "row.Description"
		GroupBy 		= "MKT_COLLATERAL_DE.TitleType"
		HeaderField  	= "Title Type"
		if IsDisbursed == "Y":
			GroupBy 	= "MKT_COLLATERAL_DE.TitleType"

	return {"CategoryObj": CategoryObj,"FieldName": FieldName,"GroupBy": GroupBy,"HeaderField": HeaderField}
	
def setPortfolioByCategory(**kwargs):
	"""
	ByCategory: LoanProduct, CRO, CC
	"""
	try:
		Branch 			= 	kwargs.get("Branch")
		ReportedDate 	=	kwargs.get("ReportedDate")
		ByCategory 		= 	kwargs.get("ByCategory")
		
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		CategoryDict    = 	getCategory(ByCategory=ByCategory)
		ReportHeader.update({"ReportTitle": "Portfolio Summary by %s" %  CategoryDict.get("HeaderField")})
		ReportHeader.update({"Parameters": {"Branch": Branch,"ReportedDate": ReportedDate}})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
                                            Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'%s' % CategoryDict.get("HeaderField"), 
                                            Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Approval', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Loan', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ Loan', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="D")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Disbursed', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Loan', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ Loan', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="F")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Active Portfolio', 
                                            Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Loan', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ Loan', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% Portfolio', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		if ByCategory == "Branch":

			TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Active Client', 
	                                            Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
			TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Male', 
	                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
			TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Female', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
			TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Total', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
			TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Active Portfolio Average Int Rate', 
                                            Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="M")

		else :

			TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Active Portfolio Average Int Rate', 
	                                            Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")

		Data = getPortfolioByCategory(Branch=Branch,ReportedDate=ReportedDate,ByCategory=ByCategory)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getPortfolioByCategory(**kwargs):
	"""
	Result = [{1:"1",2:"Bonteay Meanchey",3:"BM", 4: "100", 5:"500,000",6: "100", 7:"500,000"}]
	"""
	Branch 				= 	kwargs.get("Branch")
	ReportedDate 		=	kwargs.get("ReportedDate")
	ByCategory 			=	kwargs.get("ByCategory")

	RecordRow = []
	CategoryDict = getCategory(ByCategory=ByCategory)
	CategoryObj = CategoryDict.get("CategoryObj")
	FieldName 	= CategoryDict.get("FieldName")
	GroupBy 	= CategoryDict.get("GroupBy")

	CurrencyObj = MKT_CURRENCY.query

	#Calculate Approval
	ApplicationDict	=  	getApprovalByCategory(Branch=Branch,
										  	  ReportedDate=ReportedDate,
										  	  GroupBy="%s" % (GroupBy),
										  	  CategoryObj=CategoryObj,
										  	  IsApproDate=True)

	#Calculate Disbursed
	CategoryDict = getCategory(ByCategory=ByCategory,IsDisbursed="Y")
	DisbursedDict1 	= 	getDisbursedByCategory(Branch=Branch,
										  	  ReportedDate=ReportedDate,
										  	  GroupBy="%s" % (CategoryDict.get("GroupBy")),
										  	  CategoryObj=CategoryDict.get("CategoryObj"))

	#Calculate ActivePortfolio
	CategoryDict = getCategory(ByCategory=ByCategory,IsDisbursed="Y")
	ActivePortfolioDict 	= 	getActivePortfolioByCategory(Branch=Branch,
										  	  ReportedDate=ReportedDate,
										  	  GroupBy="%s" % (CategoryDict.get("GroupBy")),
										  	  CategoryObj=CategoryDict.get("CategoryObj"))

	CategoryDict = getCategory(ByCategory=ByCategory,IsDisbursed="Y")
	InterestCurrentDict =	getInterestCurrentMonth(Branch=Branch,
										  	  ReportedDate=ReportedDate,
										  	  GroupBy="%s" % (CategoryDict.get("GroupBy")),
										  	  CategoryObj=CategoryDict.get("CategoryObj"))
	ActiveClientDict 		= 	getActiveClient(Branch)

	No = 1
	BaseCurrency 		= mktsetting.getAccSetting().BaseCurrency
	TotApprovalCount 	= 0
	TotApprovalAmount 	= float(0)
	TotDisbursedCount 	= 0
	TotDisbursedAmount 	= float(0)
	TotActiveCount 		= 0
	TotActiveAmount 	= float(0)
	TotInterestAmount  	= float(0)
	TotalInterestRate   = float(0)

	if CategoryObj:		
		for row in CategoryObj:				
			ApprovalCount  	= 0	
			ApprovalAmount 	= float(0)
			DisbursedCount  = 0	
			DisbursedAmount = float(0)
			ActiveCount  	= 0	
			ActiveAmount 	= float(0)
			InterestAmount  = float(0)

			ApprovalDict 	= ApplicationDict.get("%s" % (row.ID))
			if ApprovalDict:
				ApprovalCount 	= ApprovalDict.get("Count")
				ApprovalAmount 	= ApprovalDict.get("Amount")

			DisbursedDict 		= DisbursedDict1.get("%s" % (row.ID))
			if DisbursedDict:
				DisbursedCount 	= DisbursedDict.get("Count")
				DisbursedAmount = DisbursedDict.get("Amount")

			ActiveDict 		= ActivePortfolioDict.get("%s" % (row.ID))
			if ActiveDict:
				ActiveCount 	= ActiveDict.get("Count")
				ActiveAmount 	= ActiveDict.get("Amount")

			InterestDict 	= InterestCurrentDict.get("%s" % (row.ID))
			if InterestDict:
				InterestAmount = InterestDict.get("Amount")

			if ApprovalCount > 0 or DisbursedCount > 0 or ActiveCount > 0:
				PortfolioPercentage = getPortfolioPercentage(ActiveAmount=ActiveAmount,TotalActiveAmount=ActivePortfolioDict.get("Total",{}).get("Amount"))
				ActivePortfolioInRate = getActivePortfolioInRate(ActiveAmount=ActiveAmount,InterestCurrentMonth=InterestAmount)
				RecordRow.append(({1: {"Value":No,"Class": "text-center"},
								  2:  {"Value":eval(FieldName),"Class":"text-left"},
								  3:  {"Value":ApprovalCount}, 
								  4:  {"Value":mktmoney.toMoney(float(ApprovalAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  5:  {"Value":DisbursedCount},
								  6:  {"Value":mktmoney.toMoney(float(DisbursedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  7:  {"Value":ActiveCount},
								  8:  {"Value":mktmoney.toMoney(float(ActiveAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  9:  {"Value":PortfolioPercentage},
								  10: {"Value":ActivePortfolioInRate,"Style":"width: 7%"}	
								 },{"Class":"text-right","Style": ""}))
				if ByCategory == "Branch":
					# print "id", row.ID
					# print "record" ,RecordRow[int(No-1)]
					# print  "Active",ActiveClientDict
					RecordRow[int(No-1)][0].update({10:{"Value":ActiveClientDict[row.ID].get("Male")},
												   11: {"Value":ActiveClientDict[row.ID].get("Female")},
												   12: {"Value":ActiveClientDict[row.ID].get("Total")},
												   13: {"Value":ActivePortfolioInRate,"Style":"width: 7%"}

						})
				No+=1
				TotalInterestRate+=float(ActivePortfolioInRate)

		# Unknow
		ApprovalDict = ApplicationDict.get("Unknown",{})
		DisbursedDict = DisbursedDict1.get("Unknown",{})
		ActiveDict   = ActivePortfolioDict.get("Unknown", {})
		InterestDict = InterestCurrentDict.get("Unknown",{})
		if ApprovalDict or DisbursedDict or ActiveDict:
			PortfolioPercentage = getPortfolioPercentage(ActiveAmount=ActiveDict.get("Amount") if ActiveDict else 0,
														TotalActiveAmount=ActivePortfolioDict.get("Total",{}).get("Amount"))
			ActivePortfolioInRate = getActivePortfolioInRate(ActiveAmount=ActiveDict.get("Amount") if ActiveDict else 0,
								  							  InterestCurrentMonth=InterestDict.get("Amount") if InterestDict else 0)
			RecordRow.append(({1: {"Value":No,"Class":"text-center"},
							  2:  {"Value":"Unknown","Class":"text-left"},
							  3:  {"Value":ApprovalDict.get("Count") if ApprovalDict else 0}, 
							  4:  {"Value":mktmoney.toMoney(float(ApprovalDict.get("Amount") if ApprovalDict else 0),mktmoney.getCurrencyObj(BaseCurrency))},
							  5:  {"Value":DisbursedDict.get("Count") if DisbursedDict else 0},
							  6:  {"Value":mktmoney.toMoney(float(DisbursedDict.get("Amount") if DisbursedDict else 0),mktmoney.getCurrencyObj(BaseCurrency))},
							  7:  {"Value":ActiveDict.get("Count") if ActiveDict else 0},
							  8:  {"Value":mktmoney.toMoney(float(ActiveDict.get("Amount") if ActiveDict else 0),mktmoney.getCurrencyObj(BaseCurrency))},
							  9:  {"Value":PortfolioPercentage},
							  10: {"Value":ActivePortfolioInRate,"Style":"width: 7%"}
							 },{"Class":"text-right","Style":""}))
			No+=1
			TotalInterestRate+=float(ActivePortfolioInRate)

		#Total
		TotApprovalCount 	= ApplicationDict.get("Total",{}).get("Count")
		TotApprovalAmount 	= ApplicationDict.get("Total",{}).get("Amount")
		TotDisbursedCount 	= DisbursedDict1.get("Total",{}).get("Count")
		TotDisbursedAmount 	= DisbursedDict1.get("Total",{}).get("Amount")
		TotActiveCount 		= ActivePortfolioDict.get("Total",{}).get("Count")
		TotActiveAmount 	= ActivePortfolioDict.get("Total",{}).get("Amount")
		TotInterestAmount  	= InterestCurrentDict.get("Total",{}).get("Amount")
		RecordRow.append(({1: {"Value":""},
						  2: {"Value":"Total"},
						  3: {"Value":TotApprovalCount}, 
						  4: {"Value":mktmoney.toMoney(float(TotApprovalAmount),mktmoney.getCurrencyObj(BaseCurrency))},
						  5: {"Value":TotDisbursedCount},
						  6: {"Value":mktmoney.toMoney(float(TotDisbursedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
						  7: {"Value":TotActiveCount},
						  8: {"Value":mktmoney.toMoney(float(TotActiveAmount),mktmoney.getCurrencyObj(BaseCurrency))},
						  9: {"Value":""},
						  10: {"Value":""}
						 },{"Class":"text-right text-bold","Style":""}))

		if ByCategory =="Branch":
			RecordRow[len(RecordRow)-1][0].update({10: {"Value":ActiveClientDict.get("Male")},
												   11: {"Value":ActiveClientDict.get("Female")},
												   12: {"Value":ActiveClientDict.get("Total")},
												   13: {"Value":''}
				})

	# print RecordRow
	return RecordRow

def getApprovalByCategory(**kwargs):
	Branch 				=	kwargs.get("Branch","")
	ReportedDate 		= 	kwargs.get("ReportedDate","")
	GroupBy 			=	kwargs.get("GroupBy")
	CategoryObj 		=	kwargs.get("CategoryObj")
	AppStatus 			=	kwargs.get("AppStatus",['3'])
	Filter 				=	kwargs.get("Filter","")
	IsApproDate 		=	kwargs.get("IsApproDate")
	IsRejectDate 		=	kwargs.get("IsRejectDate")

	ReportedDateSplit 	=	ReportedDate.split()
	BranchSplit 		=	Branch.split()

	StartDate 		= 	""
	EndDate 		=	""

	if len(ReportedDateSplit) == 2:
		StartDate = ReportedDateSplit[0]
		EndDate   = ReportedDateSplit[1]

	#Calculate Approval
	DictData = {}

	ExcludeDEID 		=	getExcludeCollteralDEID()
	LoanCollateralObj 	= 	getLoanCollateralObj().subquery()
	ApplicationObj 		=	db.session.query(func.sum(MKT_LOAN_APPLICATION.Amount).label('Amount'),
											 func.count(MKT_LOAN_APPLICATION.ID).label('Count'),
											 MKT_LOAN_APPLICATION.Currency,
											 eval(GroupBy).label("Category")
										).\
										join(MKT_CUSTOMER,
											 MKT_LOAN_APPLICATION.LNCustomerID == MKT_CUSTOMER.ID
										).\
										outerjoin(LoanCollateralObj,
											      LoanCollateralObj.c.ID == MKT_LOAN_APPLICATION.ID).\
										outerjoin(MKT_COLLATERAL_DE,
												  MKT_COLLATERAL_DE.CollateralID == LoanCollateralObj.c.Collateral).\
										filter(MKT_LOAN_APPLICATION.AppStatus.in_(AppStatus)).\
										filter(or_(MKT_COLLATERAL_DE.ID == None,
											   ~MKT_COLLATERAL_DE.ID.in_(ExcludeDEID))).\
										group_by(eval(GroupBy),
												 MKT_LOAN_APPLICATION.Currency)

	if Branch and "ALL" not in BranchSplit:
		ApplicationObj = ApplicationObj.filter(MKT_LOAN_APPLICATION.Branch.in_(BranchSplit))

	if IsApproDate:
		if StartDate and EndDate:
			ApplicationObj = ApplicationObj.\
									filter(MKT_LOAN_APPLICATION.ApprovedDate >= str(StartDate)).\
									filter(MKT_LOAN_APPLICATION.ApprovedDate <= str(EndDate))
		else:
			ApplicationObj = ApplicationObj.\
								filter(MKT_LOAN_APPLICATION.ApprovedDate.in_(ReportedDateSplit))
	elif IsRejectDate:
		if StartDate and EndDate:
			ApplicationObj = ApplicationObj.\
									filter(MKT_LOAN_APPLICATION.RejectedDate >= str(StartDate)).\
									filter(MKT_LOAN_APPLICATION.RejectedDate <= str(EndDate))
		else:
			ApplicationObj = ApplicationObj.\
							filter(MKT_LOAN_APPLICATION.RejectedDate.in_(ReportedDateSplit))
	else :
		if ReportedDate:
			if StartDate and EndDate:
				ApplicationObj = ApplicationObj.\
									filter(MKT_LOAN_APPLICATION.AppDate >= str(StartDate)).\
									filter(MKT_LOAN_APPLICATION.AppDate <= str(EndDate))
			else:
				ApplicationObj = ApplicationObj.\
									filter(MKT_LOAN_APPLICATION.AppDate.in_(ReportedDateSplit))

	if Filter:
		ApplicationObj = ApplicationObj.filter(*Filter)

	TotalAmount = float(0)
	TotalCount  = 0
	for row in ApplicationObj:
		Key    = row.Category	
		# print row
		if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
			Key = "Unknown"

		Count  = DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
		Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

		Count+=row.Count
		Amount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

		DictData.update({"%s" % (Key): {"Count": Count,"Amount": Amount}})

		TotalAmount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)
		TotalCount+=row.Count

	DictData.update({"%s" % ("Total"): {"Count": TotalCount,"Amount": TotalAmount}})

	return DictData


def getDisbursedByCategory(**kwargs):
	Branch 				=	kwargs.get("Branch","")
	ReportedDate 		= 	kwargs.get("ReportedDate","")
	GroupBy 			=	kwargs.get("GroupBy")
	CategoryObj 		=	kwargs.get("CategoryObj")
	Filter 				=	kwargs.get("Filter","")

	ReportedDateSplit 	=	ReportedDate.split()
	BranchSplit 		=	Branch.split()

	StartDate 		= 	""
	EndDate 		=	""

	if len(ReportedDateSplit) == 2:
		StartDate = ReportedDateSplit[0]
		EndDate   = ReportedDateSplit[1]

	DictData = {}
	ExcludeDEID 		=	getExcludeCollteralDEID()
	LoanCollateralObj 	= 	getLoanCollateralObj().subquery()
	#Calculate Disbursed
	"""
		Formular :
		--------------------------------------------------------------------------------- 
			Disbursed = DefultDisbursed (Filter by date) + TopUp (Filter by date)
		---------------------------------------------------------------------------------
		* DefaultDisbursed = LoanContractDibursed (filter by date) - ALLTopUp (Not filter by date)
		Flow:
			1. Find DefaultDisbursed
			2. Find TopUp
			3. Find Disbursed

	"""
	#1. Find DefaultDisbursed
	ContractObj 	= 	db.session.query(func.sum(MKT_LOAN_CONTRACT.Disbursed).label('Amount'),
										 func.count(MKT_LOAN_CONTRACT.ID).label('Count'),
										 MKT_LOAN_CONTRACT.Currency,
										 eval(GroupBy).label("Category")
									).\
									join(MKT_CUSTOMER,
										 MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
									).\
									outerjoin(LoanCollateralObj,
											      LoanCollateralObj.c.ID == MKT_LOAN_CONTRACT.LoanApplicationID).\
									outerjoin(MKT_COLLATERAL_DE,
											  MKT_COLLATERAL_DE.CollateralID == LoanCollateralObj.c.Collateral).\
									filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
									filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
									filter(or_(MKT_COLLATERAL_DE.ID == None,
											   ~MKT_COLLATERAL_DE.ID.in_(ExcludeDEID))).\
									group_by(eval(GroupBy),
											 MKT_LOAN_CONTRACT.Currency)

	SubQueryLCObj 		= 	db.session.query(MKT_LOAN_CONTRACT.ID).\
									filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
									filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0)

	AllTopUpObj 	=  	db.session.query(func.sum(MKT_LOAN_AMENDMENT.Amount).label('Amount'),
										 func.count(MKT_LOAN_AMENDMENT.ID).label('Count'),
										 MKT_LOAN_AMENDMENT.Currency,
										 eval(GroupBy).label("Category")
									).\
									join(MKT_LOAN_CONTRACT,
										 MKT_LOAN_AMENDMENT.LoanID == MKT_LOAN_CONTRACT.ID
									).\
									join(MKT_CUSTOMER,
										 MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
									).\
									outerjoin(LoanCollateralObj,
											      LoanCollateralObj.c.ID == MKT_LOAN_CONTRACT.LoanApplicationID).\
									outerjoin(MKT_COLLATERAL_DE,
											  MKT_COLLATERAL_DE.CollateralID == LoanCollateralObj.c.Collateral).\
									filter(MKT_LOAN_AMENDMENT.Operation == "AMT").\
									filter(MKT_LOAN_AMENDMENT.AddDeduct == "2").\
									filter(or_(MKT_COLLATERAL_DE.ID == None,
											   ~MKT_COLLATERAL_DE.ID.in_(ExcludeDEID))).\
									group_by(eval(GroupBy),
											 MKT_LOAN_AMENDMENT.Currency)

	TopUpObj 		=  	AllTopUpObj

	if Branch and "ALL" not in BranchSplit:
		ContractObj = ContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchSplit))
		AllTopUpObj = AllTopUpObj.filter(MKT_LOAN_AMENDMENT.Branch.in_(BranchSplit))
		TopUpObj 	= TopUpObj.filter(MKT_LOAN_AMENDMENT.Branch.in_(BranchSplit))
		SubQueryLCObj 	= SubQueryLCObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchSplit))

	if ReportedDate:
		if StartDate and EndDate:
			ContractObj = ContractObj.\
									filter(MKT_LOAN_CONTRACT.ValueDate >= str(StartDate)).\
									filter(MKT_LOAN_CONTRACT.ValueDate <= str(EndDate))
			TopUpObj = TopUpObj.\
									filter(MKT_LOAN_AMENDMENT.AmendDate >= str(StartDate)).\
									filter(MKT_LOAN_AMENDMENT.AmendDate <= str(EndDate))

			SubQueryLCObj = SubQueryLCObj.\
									filter(MKT_LOAN_CONTRACT.ValueDate >= str(StartDate)).\
									filter(MKT_LOAN_CONTRACT.ValueDate <= str(EndDate))
		else:
			ContractObj = ContractObj.\
									filter(MKT_LOAN_CONTRACT.ValueDate.in_(ReportedDateSplit))
			TopUpObj = TopUpObj.\
									filter(MKT_LOAN_AMENDMENT.AmendDate.in_(ReportedDateSplit))
			SubQueryLCObj = SubQueryLCObj.\
									filter(MKT_LOAN_CONTRACT.ValueDate.in_(ReportedDateSplit))

	if Filter:
		ContractObj = ContractObj.filter(*Filter)
		AllTopUpObj = AllTopUpObj.filter(*Filter)
		TopUpObj 	= TopUpObj.filter(*Filter)
		SubQueryLCObj = SubQueryLCObj.filter(*Filter)

	AllTopUpObj = AllTopUpObj.filter(MKT_LOAN_AMENDMENT.LoanID.in_(SubQueryLCObj))
	CountTopUpObj = TopUpObj.filter(~MKT_LOAN_AMENDMENT.LoanID.in_(SubQueryLCObj))

	for row in ContractObj:
		Key    = row.Category
		if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
			Key = "Unknown"

		Count  = DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
		Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

		Count+=row.Count
		Amount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

		DictData.update({"%s" % (Key): {"Count": Count,"Amount": Amount}})

	if ContractObj.first():
		for row in AllTopUpObj:
			Key    = row.Category
			if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
				Key = "Unknown"

			Count  = DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
			Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)
			# Count+=row.Count
			Amount-=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

			DictData.update({"%s" % (Key): {"Count": Count,"Amount": Amount}})

	for row in TopUpObj:
		Key    = row.Category
		if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
			Key = "Unknown"

		Count  = DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
		Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

		# Count+=row.Count
		Amount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

		DictData.update({"%s" % (Key): {"Count": Count,"Amount": Amount}})

	for row in CountTopUpObj:
		Key    = row.Category
		if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
			Key = "Unknown"

		Count  = DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
		Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

		Count+=row.Count
		DictData.update({"%s" % (Key): {"Count": Count,"Amount": Amount}})

	TotalAmount = float(0)
	TotalCount  = 0
	for key,value in DictData.iteritems():
		TotalCount+= value.get("Count")
		TotalAmount+= value.get("Amount")

	DictData.update({"%s" % ("Total"): {"Count": TotalCount,"Amount": TotalAmount}})

	return DictData

def getActivePortfolioByCategory(**kwargs):
	Branch 				=	kwargs.get("Branch")
	ReportedDate 		= 	kwargs.get("ReportedDate")
	GroupBy 			=	kwargs.get("GroupBy")
	CategoryObj 		=	kwargs.get("CategoryObj")
	Filter 				=	kwargs.get("Filter","")
	
	BranchSplit 		=	Branch.split()

	#Calculate Active portfolio
	DictData = {}
	ExcludeDEID 		=	getExcludeCollteralDEID()
	LoanCollateralObj 	= 	getLoanCollateralObj().subquery()
	ContractObj 	  	= 	db.session.query(func.sum(MKT_LOAN_CONTRACT.OutstandingAmount).label('Amount'),
										 func.count(MKT_LOAN_CONTRACT.ID).label('Count'),
										 MKT_LOAN_CONTRACT.Currency,
										 eval(GroupBy).label("Category")
									).\
									join(MKT_CUSTOMER,
										 MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
									).\
									outerjoin(LoanCollateralObj,
											  LoanCollateralObj.c.ID == MKT_LOAN_CONTRACT.LoanApplicationID).\
									outerjoin(MKT_COLLATERAL_DE,
											  MKT_COLLATERAL_DE.CollateralID == LoanCollateralObj.c.Collateral).\
									filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
									filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
									filter(or_(MKT_COLLATERAL_DE.ID == None,
											   ~MKT_COLLATERAL_DE.ID.in_(ExcludeDEID))
									).\
									group_by(eval(GroupBy),
											 MKT_LOAN_CONTRACT.Currency)

	if Branch and "ALL" not in BranchSplit:
		ContractObj = ContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchSplit))

	if Filter:
		ContractObj = ContractObj.filter(*Filter)

	TotalAmount = float(0)
	TotalCount = 0
	for row in ContractObj:
		# print  row.Category,row.Count
		Key    = row.Category		
		if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
			Key = "Unknown"

		Count  = DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
		Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

		Count+=row.Count
		Amount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

		TotalCount+=row.Count
		TotalAmount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

		DictData.update({"%s" % (Key): {"Count": Count,"Amount": Amount}})

	DictData.update({"%s" % ("Total"): {"Count": TotalCount,"Amount": TotalAmount}})

	return DictData

def getInterestCurrentMonth(**kwargs):
	"""
	Average Interest per branch= SUM of each loan (interest $ of current month )/ loan outstanding of branch
	"""
	Branch 				=	kwargs.get("Branch")
	GroupBy 			=	kwargs.get("GroupBy")
	CategoryObj 		=	kwargs.get("CategoryObj")
	Filter 				=	kwargs.get("Filter","")

	BranchSplit 		=	Branch.split()

	BankDate 			=	str(mktdate.getBankDate())
	DateSplit 			=	BankDate.split("-")
	
	DictData = {}
	ExcludeDEID 		=	getExcludeCollteralDEID()
	LoanCollateralObj 	= 	getLoanCollateralObj().subquery()
	NumDayInMonth 		=	mktdate.getLastDayOfMonth(int(DateSplit[0]),int(DateSplit[1]))

	ContractObj = db.session.query(
									# func.sum(MKT_LOAN_CONTRACT.OutstandingAmount*cast(MKT_LOAN_CONTRACT.InterestRate,Float)/100/12).label('Amount'),
									func.sum(MKT_LOAN_CONTRACT.AccrIntPerDay*365/12).label('Amount'),
									# func.sum(MKT_LOAN_CONTRACT.AccrIntPerDay*NumDayInMonth).label('Amount'),
							 eval(GroupBy).label("Category"),
							 MKT_LOAN_CONTRACT.Currency
						).\
						join(MKT_CUSTOMER,
							 MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
						).\
						outerjoin(LoanCollateralObj,
								  LoanCollateralObj.c.ID == MKT_LOAN_CONTRACT.LoanApplicationID).\
						outerjoin(MKT_COLLATERAL_DE,
								  MKT_COLLATERAL_DE.CollateralID == LoanCollateralObj.c.Collateral).\
						filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
						filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
						filter(or_(MKT_COLLATERAL_DE.ID == None,
											   ~MKT_COLLATERAL_DE.ID.in_(ExcludeDEID))
									).\
						group_by(eval(GroupBy),
							     MKT_LOAN_CONTRACT.Currency)

	if Branch and "ALL" not in BranchSplit:
		ContractObj = ContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchSplit))

	if Filter:
		ContractObj = ContractObj.filter(*Filter)

	TotalAmount = float(0)
	for row in ContractObj:
		Key    = row.Category		
		if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
			Key = "Unknown"

		Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

		Amount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)
		TotalAmount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

		DictData.update({"%s" % (Key): {"Amount": Amount}})

	DictData.update({"%s" % ("Total"): {"Amount": TotalAmount}})
	return DictData

def getActivePortfolioInRate(**kwargs):
	ActiveAmount = kwargs.get("ActiveAmount",0)
	InterestCurrentMonth = kwargs.get("InterestCurrentMonth",0)
	return getPercentage(Amount=InterestCurrentMonth,DividedAmount=ActiveAmount,DecimalPlace=2)	

def getPortfolioPercentage(**kwargs):
	ActiveAmount 		= kwargs.get("ActiveAmount",0)
	TotalActiveAmount 	= kwargs.get("TotalActiveAmount",0)
	return getPercentage(Amount=ActiveAmount,DividedAmount=TotalActiveAmount,DecimalPlace=4)	

def getActiveClient(Branch):
	"""
		-This is getting  Active Client 

		-Args:
			Branch (String):this is use to filter by Branch
				
		-Retrun :
			Result 	={
						'BranchID1':{
									'Male':1000 ,# Total Male by branch
									'Female':2000 ,# Total Female by branch
									'Total':3000 # Total Male+ Female by Branch
						},
						'BranchID2':{
									'Male':1000 ,# Total Male by branch
									'Female':2000 ,# Total Female by branch
									'Total':3000 # Total Male+ Female by Branch
						},
						'Male':30000,Total Male all Branch
						'Female':20000,Total Female all Branch
						'Total':50000, Total Male+ Female all Branch
			}
	"""
	LC	 	= eval("MKT_LOAN_CONTRACT")
	LA 		= eval("MKT_LOAN_APPLICATION")
	CU 		= eval("MKT_CUSTOMER")

	LAObj 			= 	db.session.query(LA.LNCustomerID).distinct(LA.LNCustomerID).\
									join(LC,LA.ID==LC.LoanApplicationID).\
									filter(	LC.DisbursedStat=='Y',
											LC.OutstandingAmount>0)

	Branch 					= 	Branch.split() 

	if 'ALL' not in Branch and Branch:
		LAObj 		=	LAObj.filter(LA.Branch.in_(Branch))

	ActiveLoan 				= 	{}
	TotalMaleAllBranch 		=	0
	TotalFemaleAllBranch 	= 	0

	CusomberObj 		= 	db.session.query(CU.Branch,CU.Gender,func.count(CU.Gender)).\
								filter(CU.ID.in_(LAObj.subquery())).\
								group_by(CU.Gender,CU.Branch)

	if CusomberObj:
		Total 			=	0
		for Row in CusomberObj:
			TotalByBranch 			= 	0
			Branch,Gender,Number 	= 	Row #get value from turple
			TotalByBranch 			= 	Number # Number of gender by branch
			Total 					=	Number+Total 
			if Branch not in ActiveLoan:
				ActiveLoan.update({
									Branch:{
												Gender 	:Number,
												'Total' :TotalByBranch
											}
								})
			else:
				# sum total of male+ female by branch
				ActiveLoan[Branch].update({
											Gender:Number,
											'Total' : TotalByBranch + ActiveLoan[Branch].get('Total')
											})
			if Gender == 'Male':
				TotalMaleAllBranch = TotalMaleAllBranch + Number
			else:
				TotalFemaleAllBranch = TotalFemaleAllBranch + Number

		#check if Branch have not in ActiveLoan meant that record not found ,so we need set all branch to 0
		for ID in getBranch():
			Male 	=	"Male"
			Female 	=	"Female"
			if ID not in ActiveLoan.keys():
				ActiveLoan.update({
									ID:{
										'Male'	:0,
										'Female':0,
										'Total'	:0
										}
								})
			#if Male key not have in ActiveLoant set Male=0 
			if Male not in ActiveLoan[ID].keys():
				ActiveLoan[ID].update({
										Male	:0
								})
			#if Female key not have in ActiveLoant set Female=0 
			if Female not in ActiveLoan[ID].keys():
				ActiveLoan[ID].update({
										Female	:0
								})
		ActiveLoan.update({
							'Total'	:Total,
							'Male' 	:TotalMaleAllBranch,
							'Female':TotalFemaleAllBranch
						 })
	return ActiveLoan

def getExcludeCollteralDEID(**kwargs):
	ExcludeDEID 		=	[]
	CollateralDEObj  	= 	db.session.query(MKT_COLLATERAL_DE.CollateralID,
											func.count(MKT_COLLATERAL_DE.CollateralID).label("Count"),
											func.string_agg(MKT_COLLATERAL_DE.ID,",").label("DetailID")
											).\
										group_by(MKT_COLLATERAL_DE.CollateralID).\
										having(func.count(MKT_COLLATERAL_DE.CollateralID) > 1)
										
	for row in CollateralDEObj:
		DetailID = row.DetailID.split(",")
		DetailID.pop(0)
		ExcludeDEID.extend(DetailID)

	return ExcludeDEID

def getBranch():
	'''
		This use to get Branch ID 
		- Return :
			List =[BranchID1,BranchID2]
	'''
	BR 					= eval("MKT_BRANCH")
	BranchObj 			= 	BR.query.with_entities(BR.ID).all()
	BranchList  		= 	[]
	if BranchObj :
		for ID in BranchObj:
			Key,	=ID
			BranchList.append(Key)
	return BranchList

def getBaseCurrency():
	'''
		-This method use to get BaseCurrency 
		-Return :
			BaseCurrence='BaseCurrency'
	'''
	BaseCurrency 		= mktsetting.getAccSetting().BaseCurrency
	return BaseCurrency

def getToMoney(Amount):
	'''
		-This method use to get value after convert to money
		-Args:
			Amount (int or float) # Amount is number that needt to conver 
		-Return :
			Amouont = 200.00 # example
	'''
	Money = mktmoney.toMoney(float(Amount),mktmoney.getCurrencyObj(getBaseCurrency()))
	return Money

def getLoanCollateralObj(**kwargs):
	Obj = db.session.query(MKT_LOAN_COLLATERAL.ID,
						   func.string_agg(MKT_LOAN_COLLATERAL.Collateral,",").label("Collaterals"),
						   func.split_part(func.string_agg(MKT_LOAN_COLLATERAL.Collateral,","),",",1).label("Collateral")
						   ).\
						group_by(MKT_LOAN_COLLATERAL.ID)
	return Obj

def getPercentage(**kwargs):
	Amount 				= kwargs.get("Amount",0)
	DividedAmount 		= kwargs.get("DividedAmount",0)
	DecimalPlace 		= kwargs.get("DecimalPlace",4)

	Result = float(0)

	if DividedAmount > 0:
		Result = float(Amount) / float(DividedAmount) * 100
	Result = mktmoney.formatNumber(Result,0,DecimalPlace)

	return Result

###
#Query
###

def getLoanContractObj(**kwargs):
	Branch              =   kwargs.get("Branch","")
	ReportedDate        =   kwargs.get("ReportedDate","")
	Filter              =   kwargs.get("Filter","")
	ConditionStringList =   kwargs.get("ConditionStringList","")	

	ReportedDateSplit   =   ReportedDate.split()
	BranchSplit         =   Branch.split()
	StartDate           =   ""
	EndDate         	=   ""

	if len(ReportedDateSplit) == 2:
		StartDate = ReportedDateSplit[0]
		EndDate   = ReportedDateSplit[1]

	#Calculate Active portfolio
	MKT_SPOUSE          =   aliased(MKT_CUSTOMER)
	ExcludeDEID         =   getExcludeCollteralDEID()
	LoanCollateralObj 	= 	getLoanCollateralObj().subquery()
	ContractObj     	=   db.session.query(MKT_LOAN_CONTRACT.ID,
											 MKT_LOAN_CONTRACT.Amount,
											 MKT_LOAN_CONTRACT.Disbursed,
											 MKT_LOAN_CONTRACT.ApprovedAmount,
											 MKT_LOAN_CONTRACT.OutstandingAmount,
											 MKT_LOAN_CONTRACT.ContractCustomerID,
											 MKT_LOAN_CONTRACT.ValueDate,
											 MKT_LOAN_CONTRACT.Currency,
											 MKT_LOAN_CONTRACT.LoanProduct,
											 MKT_LOAN_CONTRACT.LoanPurpose,
											 MKT_LOAN_CONTRACT.LoanApplicationID,
											 MKT_LOAN_CONTRACT.LoanType,
											 MKT_LOAN_CONTRACT.AssetClass,
											 MKT_LOAN_CONTRACT.DisbursedStat,
											 MKT_LOAN_CONTRACT.MoreThanOneYear,
											 MKT_LOAN_CONTRACT.ContractOfficerID,
											 MKT_LOAN_CONTRACT.AccrIntPerDay,
											 MKT_LOAN_CONTRACT.Branch,
											 MKT_LOAN_CONTRACT.ValueDate,
											 MKT_CUSTOMER.MonthlyIncome.label("MonthlyIncome"),
											 MKT_CUSTOMER.HouseOwnership,
											 MKT_CUSTOMER.ReferralSource,
											 MKT_CUSTOMER.SourceOfIncome,
											 MKT_CUSTOMER.CRO,
											 func.coalesce(MKT_SPOUSE.MonthlyIncome, 0).label("SpouseMonthlyIncome"),
										 	 (func.coalesce(MKT_SPOUSE.MonthlyIncome, 0)+MKT_CUSTOMER.MonthlyIncome).label("AllMonthlyIncome"),
											 LoanCollateralObj.c.Collateral.label("Collateral"),
											 MKT_COLLATERAL_DE.TitleType
										).\
										join(MKT_CUSTOMER,
											 MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
										).\
										join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID==MKT_LOAN_CONTRACT.LoanApplicationID).\
										outerjoin(MKT_SPOUSE,MKT_LOAN_APPLICATION.SpouseID==MKT_SPOUSE.ID).\
										outerjoin(LoanCollateralObj,
												  LoanCollateralObj.c.ID == MKT_LOAN_CONTRACT.LoanApplicationID).\
										outerjoin(MKT_COLLATERAL_DE,
												  MKT_COLLATERAL_DE.CollateralID == LoanCollateralObj.c.Collateral).\
										filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
										filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
										filter(or_(MKT_COLLATERAL_DE.ID == None,
												   ~MKT_COLLATERAL_DE.ID.in_(ExcludeDEID))
										)

	if Branch and "ALL" not in BranchSplit:
		ContractObj = ContractObj.filter(MKT_LOAN_CONTRACT.Branch.in_(BranchSplit))
	if ReportedDate:
		if StartDate and EndDate:
			ContractObj = ContractObj.\
									filter(MKT_LOAN_CONTRACT.ValueDate >= str(StartDate)).\
									filter(MKT_LOAN_CONTRACT.ValueDate <= str(EndDate))
		else:
			ContractObj = ContractObj.\
									filter(MKT_LOAN_CONTRACT.ValueDate.in_(ReportedDateSplit))
	if Filter:
		ContractObj = ContractObj.filter(*Filter)
	if ConditionStringList:
		for item in ConditionStringList:
			ContractObj = ContractObj.filter(eval(item))

	return ContractObj

def getLoanApplicationObj(**kwargs):
	Branch 				=	kwargs.get("Branch","")
	ReportedDate 		=	kwargs.get("ReportedDate","")
	RejectedBy 			=	kwargs.get("RejectedBy","") #1 Reject by client, 2 Reject by FF
	Filter 				=	kwargs.get("Filter","")
	IsApproDate 		=	kwargs.get("IsApproDate")
	ConditionStringList =   kwargs.get("ConditionStringList","")

	ReportedDateSplit 	=   ReportedDate.split()
	BranchSplit         =   Branch.split()

	StartDate         	=	""
	EndDate         	=	""

	if len(ReportedDateSplit) == 2:
		StartDate = ReportedDateSplit[0]
		EndDate   = ReportedDateSplit[1]

	MKT_SPOUSE			=	aliased(MKT_CUSTOMER)
	ExcludeDEID 		=	getExcludeCollteralDEID()
	LoanCollateralObj 	=	getLoanCollateralObj().subquery()
	ApplicationObj 		=   db.session.query(MKT_LOAN_APPLICATION.ID,
											 MKT_LOAN_APPLICATION.Amount,
											 MKT_LOAN_APPLICATION.AppliedAmount,
											 MKT_LOAN_APPLICATION.LNCustomerID,
											 MKT_LOAN_APPLICATION.AppDate,
											 MKT_LOAN_APPLICATION.Currency,
											 MKT_LOAN_APPLICATION.LoanProduct,
											 MKT_LOAN_APPLICATION.LoanPurpose,
											 MKT_LOAN_APPLICATION.SpouseID,
											 MKT_LOAN_APPLICATION.AppStatus,
											 MKT_LOAN_APPLICATION.TypeOfLoan,
											 MKT_CUSTOMER.MonthlyIncome.label("MonthlyIncome"),
											 MKT_SPOUSE.MonthlyIncome.label("SpouseMonthlyIncome"),
										 	 (func.coalesce(MKT_SPOUSE.MonthlyIncome, 0)+MKT_CUSTOMER.MonthlyIncome).label("AllMonthlyIncome"),
											 LoanCollateralObj.c.Collateral.label("Collateral"),
											 MKT_COLLATERAL_DE.TitleType
											 ).\
										join(MKT_CUSTOMER,
											 MKT_LOAN_APPLICATION.LNCustomerID == MKT_CUSTOMER.ID
										).\
										outerjoin(MKT_SPOUSE,
											MKT_LOAN_APPLICATION.SpouseID == MKT_SPOUSE.ID
										).\
										outerjoin(LoanCollateralObj,
												  LoanCollateralObj.c.ID == MKT_LOAN_APPLICATION.ID).\
										outerjoin(MKT_COLLATERAL_DE,
												  MKT_COLLATERAL_DE.CollateralID == LoanCollateralObj.c.Collateral).\
										filter(or_(MKT_COLLATERAL_DE.ID == None,
											   ~MKT_COLLATERAL_DE.ID.in_(ExcludeDEID)))

	if Branch and "ALL" not in BranchSplit:
		ApplicationObj = ApplicationObj.filter(MKT_LOAN_APPLICATION.Branch.in_(BranchSplit))

	if IsApproDate:
			if StartDate and EndDate:
				ApplicationObj = ApplicationObj.\
										filter(MKT_LOAN_APPLICATION.ApprovedDate >= str(StartDate)).\
										filter(MKT_LOAN_APPLICATION.ApprovedDate <= str(EndDate))
			else:
				ApplicationObj = ApplicationObj.\
									filter(MKT_LOAN_APPLICATION.ApprovedDate.in_(ReportedDateSplit))
	else:
		if ReportedDate:
			if StartDate and EndDate:
				ApplicationObj = ApplicationObj.\
										filter(MKT_LOAN_APPLICATION.AppDate >= str(StartDate)).\
										filter(MKT_LOAN_APPLICATION.AppDate <= str(EndDate))
			else:
				ApplicationObj = ApplicationObj.\
										filter(MKT_LOAN_APPLICATION.AppDate.in_(ReportedDateSplit))

	if Filter:
		ApplicationObj = ApplicationObj.filter(*Filter)

	if ConditionStringList:
		for item in ConditionStringList:
			ApplicationObj = ApplicationObj.filter(eval(item))

	return ApplicationObj

def getLoanAmendmentObj(**kwargs):
	Branch              =   kwargs.get("Branch","")
	ReportedDate        =   kwargs.get("ReportedDate","")
	Filter              =   kwargs.get("Filter","")
	ConditionStringList =   kwargs.get("ConditionStringList","")

	ReportedDateSplit   =   ReportedDate.split()
	BranchSplit         =   Branch.split()

	StartDate       =   ""
	EndDate         =   ""

	if len(ReportedDateSplit) == 2:
		StartDate = ReportedDateSplit[0]
		EndDate   = ReportedDateSplit[1]

	MKT_SPOUSE          =   aliased(MKT_CUSTOMER)
	ExcludeDEID         =   getExcludeCollteralDEID()
	LoanCollateralObj 	= 	getLoanCollateralObj().subquery()
	AmendmentObj     	=   db.session.query(MKT_LOAN_AMENDMENT.ID,
											 MKT_LOAN_AMENDMENT.AmendDate,
											 MKT_LOAN_AMENDMENT.Amount,
											 MKT_LOAN_AMENDMENT.Operation,
											 MKT_LOAN_AMENDMENT.AddDeduct,
											 MKT_LOAN_AMENDMENT.LoanID,
											 MKT_LOAN_CONTRACT.Disbursed,
											 MKT_LOAN_CONTRACT.ApprovedAmount,
											 MKT_LOAN_CONTRACT.OutstandingAmount,
											 MKT_LOAN_CONTRACT.ContractCustomerID,
											 MKT_LOAN_CONTRACT.ValueDate,
											 MKT_LOAN_CONTRACT.Currency,
											 MKT_LOAN_CONTRACT.LoanProduct,
											 MKT_LOAN_CONTRACT.LoanPurpose,
											 MKT_LOAN_CONTRACT.LoanApplicationID,
											 MKT_LOAN_CONTRACT.LoanType,
											 MKT_LOAN_CONTRACT.AssetClass,
											 MKT_LOAN_CONTRACT.DisbursedStat,
											 MKT_LOAN_CONTRACT.MoreThanOneYear,
											 MKT_LOAN_CONTRACT.ContractOfficerID,
											 MKT_LOAN_CONTRACT.AccrIntPerDay,
											 MKT_LOAN_CONTRACT.Branch,
											 MKT_LOAN_CONTRACT.ValueDate,
											 MKT_CUSTOMER.MonthlyIncome.label("MonthlyIncome"),
											 MKT_CUSTOMER.HouseOwnership,
											 MKT_CUSTOMER.ReferralSource,
											 MKT_CUSTOMER.SourceOfIncome,
											 MKT_CUSTOMER.CRO,
											 func.coalesce(MKT_SPOUSE.MonthlyIncome, 0).label("SpouseMonthlyIncome"),
										 	 (func.coalesce(MKT_SPOUSE.MonthlyIncome, 0)+MKT_CUSTOMER.MonthlyIncome).label("AllMonthlyIncome"),
											 LoanCollateralObj.c.Collateral.label("Collateral"),
											 MKT_COLLATERAL_DE.TitleType
										).\
										join(MKT_LOAN_CONTRACT,
											 MKT_LOAN_AMENDMENT.LoanID == MKT_LOAN_CONTRACT.ID
										).\
										join(MKT_LOAN_APPLICATION,
											MKT_LOAN_APPLICATION.ID == MKT_LOAN_CONTRACT.LoanApplicationID).\
										join(MKT_CUSTOMER,
											 MKT_LOAN_CONTRACT.ContractCustomerID == MKT_CUSTOMER.ID
										).\
										outerjoin(MKT_SPOUSE,MKT_LOAN_APPLICATION.SpouseID==MKT_SPOUSE.ID).\
										outerjoin(LoanCollateralObj,
													  LoanCollateralObj.c.ID == MKT_LOAN_CONTRACT.LoanApplicationID).\
										outerjoin(MKT_COLLATERAL_DE,
												  MKT_COLLATERAL_DE.CollateralID == LoanCollateralObj.c.Collateral).\
										filter(or_(MKT_COLLATERAL_DE.ID == None,
												   ~MKT_COLLATERAL_DE.ID.in_(ExcludeDEID)))				

	if Branch and "ALL" not in BranchSplit:
		AmendmentObj    = AmendmentObj.filter(MKT_LOAN_AMENDMENT.Branch.in_(BranchSplit))

	if ReportedDate:
		if StartDate and EndDate:
			AmendmentObj = AmendmentObj.\
								filter(MKT_LOAN_AMENDMENT.AmendDate >= str(StartDate)).\
								filter(MKT_LOAN_AMENDMENT.AmendDate <= str(EndDate))
		else:
			AmendmentObj = AmendmentObj.\
								filter(MKT_LOAN_AMENDMENT.AmendDate.in_(ReportedDateSplit))
	if Filter:
		AmendmentObj    = AmendmentObj.filter(*Filter)

	if ConditionStringList:
		for item in ConditionStringList:
			AmendmentObj    = AmendmentObj.filter(eval(item))
			
	return AmendmentObj

def getInterestCurrentMonthObj(**kwargs):
	"""
	Average Interest per branch= SUM of each loan (interest $ of current month )/ loan outstanding of branch
	"""
	Branch 				=	kwargs.get("Branch","")
	Filter 				=	kwargs.get("Filter","")
	ConditionStringList =   kwargs.get("ConditionStringList","")

	BranchSplit 		=	Branch.split()

	BankDate 			=	str(mktdate.getBankDate())
	DateSplit 			=	BankDate.split("-")
	NumDayInMonth 		=	mktdate.getLastDayOfMonth(int(DateSplit[0]),int(DateSplit[1]))

	MKT_SPOUSE      =   aliased(MKT_CUSTOMER)
	ContractObj 	=	getLoanContractObj(**kwargs).subquery()
	ContractObj 	= 	db.session.query(ContractObj,(ContractObj.c.AccrIntPerDay*365/12).label("InterestPerMonth"))

	return ContractObj