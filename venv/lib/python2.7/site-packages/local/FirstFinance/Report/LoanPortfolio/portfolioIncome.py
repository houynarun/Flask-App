from sqlalchemy.sql.expression                         import           cast
from sqlalchemy                                        import *
import sqlalchemy
from decimal                    import *
from sqlalchemy.orm import aliased



from app.mktcore.imports        import *
import app.tools.mktmessage     as mktmessage
import app.tools.mktdate        as mktdate
from decimal                    import Decimal
from app.tools.mktcustomreport   import *
import local.FirstFinance.tools.mktloan as mktloan
import app.tools.mktmoney as mktmoney
import app.tools.mktsetting     as mktsetting
import app.tools.user           as mktuser

from app.LoanApplication.models     import *
from app.Customer.models            import *
from local.FirstFinance.Customer.models import *
from app.LoanProduct.models         import *
from app.Officer.models             import *
from app.Currency.models            import *
from app.LoanContract.models        import *
from app.LoanAmendment.models       import *
from app.Journal.models             import *
from app.Collateral.models          import *

import local.FirstFinance.Report.LoanPortfolio.portfolio  as FFPortfolio
import local.FirstFinance.Report.LoanPortfolio.portfolioDetail  as FFPorfolioDetail
import app.tools.mktdate 				as mktdate

"""Portfolio by Income Level"""


class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	ReportedDate        =   DateTextField("Reported Date")

@app.route('/Morakot/Report/FF/PortfolioByIncome', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFPortfolioByIncome():

	try:
		ErrorMsg    = []
		DefualtUrl  = CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		SystemBankDate 	= str(mktdate.getBankDate())
		Branch          =   request.args.get("Branch") if "Branch" in request.args  else mktuser.getCurrentBranch()
		ReportedDate    =   request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate

		Result          =   setPortfolioByIncomeLevel(Branch=Branch,
												   ReportedDate=ReportedDate,ByCategory="Branch")       

		Parameters      =   {"Branch": Branch,"ReportedDate": ReportedDate}
		FilterOption    =   ""      
		SearchForm      =   FRM_CUSTOM_REPORT_SEARCH_EX()

		return CUSTOM_REPORT.getCustomReportTemplate(Parameters     =   Parameters,
													Result          =   Result,
													FilterOption    =   FilterOption,
													SearchForm      =   SearchForm)
	except:
		raise

@app.route('/Morakot/Report/FF/PortfolioByIncome/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFPortfolioByIncomeLevelExcel():

	try:
		SystemBankDate 	= str(mktdate.getBankDate())
		Branch          =   request.args.get("Branch") if "Branch" in request.args  else mktuser.getCurrentBranch()
		ReportedDate    =   request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate
		Result          =   setPortfolioByIncomeLevel(Branch=Branch,
												   ReportedDate=ReportedDate,ByCategory="Branch")

		response        =   CUSTOM_REPORT.exportExcel(Result=Result,FileName="PortfolioBy Income Level" )

		return response

	except Exception as e:
		raise
	
def setPortfolioByIncomeLevel(**kwargs):
	try:
		Branch          =   kwargs.get("Branch")
		ReportedDate    =   kwargs.get("ReportedDate")
		ByCategory      =   kwargs.get("ByCategory")
		
		ReportHeader    =   CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Portfolio Summary by Income Level"})
		ReportHeader.update({"Parameters": {"Branch": Branch,"ReportedDate": ReportedDate}})

		Data        = []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Average Daily / Monthly Income',
										   Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Approval', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Loan', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ Loan', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="D")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Disbursed', 
											Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Loan', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ Loan', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="F")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Active Portfolio', 
											Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Loan', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ Loan', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% Portfolio', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="I")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Active Portfolio Average Int Rate', 
												Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")

		Data = getPortfolioByIncomeLevel(Branch=Branch,ReportedDate=ReportedDate,ByCategory=ByCategory)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getPortfolioByIncomeLevel(**kwargs):
	"""
	"""
	Branch 				= 	kwargs.get("Branch")
	ReportedDate 		= 	kwargs.get("ReportedDate")

	RecordRow 			= 	[]	
	BaseCurrency 		= 	mktsetting.getAccSetting().BaseCurrency

	# MKT_SPOUSE 			=	aliased(MKT_CUSTOMER)

	MONTHLY_LIST 		=	[{"Category": "Up to US$300"				,"Conditions":["%s.c.AllMonthlyIncome >=0" % "%s","%s.c.AllMonthlyIncome < 301"%"%s"]},
							 {"Category": "Between US$301 and US$700"	,"Conditions":["%s.c.AllMonthlyIncome >=301" % "%s","%s.c.AllMonthlyIncome < 701"%"%s"]},
							 {"Category": "Between US$701 and US$1,000"	,"Conditions":["%s.c.AllMonthlyIncome >=701" % "%s","%s.c.AllMonthlyIncome <=1000"%"%s"]},
							 {"Category": "Above US$1,000"				,"Conditions":["%s.c.AllMonthlyIncome > 1000" % "%s"]}]

 	DAILY_LIST 			= 	[{"Category": "Up to US$6"					,"Conditions":["(%s.c.AllMonthlyIncome / 30) >=0" % "%s","(%s.c.AllMonthlyIncome / 30) <=6"%"%s"]},
							 {"Category": "Between US$6 and US$12"		,"Conditions":["(%s.c.AllMonthlyIncome / 30) >6" % "%s","(%s.c.AllMonthlyIncome /30 )<= 12"%"%s"]},
							 {"Category": "Above US$12"					,"Conditions":["(%s.c.AllMonthlyIncome / 30)> 12" % "%s"]}]


 	#Approval
	AppFilter 			=	[MKT_LOAN_APPLICATION.AppStatus.in_(["3"])]
	kwargs.update({"Filter": AppFilter,"IsApproDate":True})
 	ApplicationObj 		= 	FFPortfolio.getLoanApplicationObj(**kwargs).subquery()
 	Application 		=	db.session.query(func.sum(ApplicationObj.c.Amount).label("Amount"),
	 											 func.count(ApplicationObj.c.ID).label("Count"),
	 											 ApplicationObj.c.Currency
	 											 ).\
	 											group_by(ApplicationObj.c.Currency)
	#Disbursed
	kwargs.update({"Filter":""})
	DisbursedObj 		=	FFPorfolioDetail.getDisbursedObj(**kwargs).subquery()
	Disbursed 	 		=	db.session.query(func.sum(DisbursedObj.c.DefaultDisbursed).label("Amount"),
	 											 func.count(distinct(DisbursedObj.c.LoanID)).label("Count"),
	 											 DisbursedObj.c.Currency
	 											 ).\
	 											group_by(DisbursedObj.c.Currency)
	#Acitve
	kwargs.update({"Filter": "","ReportedDate":""})
 	ContractObj 		= 	FFPortfolio.getLoanContractObj(**kwargs).subquery()
 	Contract 			=	db.session.query(func.sum(ContractObj.c.OutstandingAmount).label("Amount"),
	 											 func.count(ContractObj.c.ID).label("Count"),
	 											 ContractObj.c.Currency
	 											 ).\
	 											group_by(ContractObj.c.Currency)

	#Interest current month
	kwargs.update({"Filter": "","ReportedDate":""})
 	InterestObj 		= 	FFPortfolio.getInterestCurrentMonthObj(**kwargs).subquery()
 	Interest 			=	db.session.query(func.sum(InterestObj.c.InterestPerMonth).label("Amount"),
	 											 InterestObj.c.Currency
	 											 ).\
	 											group_by(InterestObj.c.Currency)

	#TotalOutstanding
	TotalActivePortfolio 	= float(0)
	for row in Contract:
		TotalActivePortfolio+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)	

	LIST = [DAILY_LIST,MONTHLY_LIST]

	for itemlist in LIST:
		No = 1
		TotMonthApprovalCount  	= 0	
		TotMonthApprovalAmount 	= float(0)
		TotMonthDisbursedCount  = 0	
		TotMonthDisbursedAmount = float(0)
		TotMonthActiveCount  	= 0	
		TotMonthActiveAmount 	= float(0)
		TotMonthInterestAmount  = float(0)

		for item in itemlist:
			Category = item.get("Category")
			Conditions = item.get("Conditions")
			#Approval
			ApprovalObj = Application
			#Disbursed
			DisbursedmentObj = Disbursed
			#Active
			ActiveObj = Contract
			
			#Interest Current Month
			InterestCurrentObj = Interest
			for condition in Conditions:
				ApprovalObj = ApprovalObj.filter(eval(condition % "ApplicationObj"))
				DisbursedmentObj = DisbursedmentObj.filter(eval(condition % "DisbursedObj"))
				ActiveObj = ActiveObj.filter(eval(condition % "ContractObj"))
				InterestCurrentObj = InterestCurrentObj.filter(eval(condition % "InterestObj"))

			ApprovalCount  	= 0	
			ApprovalAmount 	= float(0)
			DisbursedCount  = 0	
			DisbursedAmount = float(0)
			ActiveCount  	= 0	
			ActiveAmount 	= float(0)
			InterestAmount  = float(0)

			for row in ApprovalObj:
				ApprovalCount	+=row.Count
				ApprovalAmount	+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

			for row in DisbursedmentObj:
				DisbursedCount 	+= row.Count
				DisbursedAmount	+= mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

			for row in ActiveObj:
				ActiveCount 	+= row.Count
				ActiveAmount 	+= mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

			for row in InterestCurrentObj:
				InterestAmount 	+= mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

			if ApprovalCount > 0 or DisbursedCount > 0 or ActiveCount > 0:
				PortfolioPercentage = FFPortfolio.getPortfolioPercentage(ActiveAmount=ActiveAmount,TotalActiveAmount=TotalActivePortfolio)
				ActivePortfolioInRate = FFPortfolio.getActivePortfolioInRate(ActiveAmount=ActiveAmount,InterestCurrentMonth=InterestAmount)
				RecordRow.append(({1: {"Value":No,"Class": "text-center"},
								  2:  {"Value":Category,"Class":"text-left"},
								  3:  {"Value":ApprovalCount}, 
								  4:  {"Value":mktmoney.toMoney(float(ApprovalAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  5:  {"Value":DisbursedCount},
								  6:  {"Value":mktmoney.toMoney(float(DisbursedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  7:  {"Value":ActiveCount},
								  8:  {"Value":mktmoney.toMoney(float(ActiveAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  9:  {"Value":PortfolioPercentage},
								  10: {"Value":ActivePortfolioInRate,"Style":"width: 7%"}	
								 },{"Class":"text-right","Style": ""}))
				No+=1
				TotMonthApprovalCount  	+= ApprovalCount	
				TotMonthApprovalAmount 	+= float(ApprovalAmount)
				TotMonthDisbursedCount  += DisbursedCount
				TotMonthDisbursedAmount += float(DisbursedAmount)
				TotMonthActiveCount  	+= ActiveCount
				TotMonthActiveAmount 	+= float(ActiveAmount)
				TotMonthInterestAmount  += float(InterestAmount)
		#Total
		RecordRow.append(({1: {"Value":""},
							  2: {"Value":"Total"},
							  3: {"Value":TotMonthApprovalCount}, 
							  4: {"Value":mktmoney.toMoney(float(TotMonthApprovalAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  5: {"Value":TotMonthDisbursedCount},
							  6: {"Value":mktmoney.toMoney(float(TotMonthDisbursedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  7: {"Value":TotMonthActiveCount},
							  8: {"Value":mktmoney.toMoney(float(TotMonthActiveAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  9: {"Value":""},
							  10: {"Value":""}
							 },{"Class":"text-right text-bold","Style":""}))
		# No+=1
	
	return RecordRow