from app.mktcore.imports                               import *
from app.Customer.models                               import *
from app.LoanApplication.models                        import *
from app.LoanContract.models                           import *
from app.Collateral.models                             import *
from app.Officer.models                                import * 
from app.Province.models                               import *
from app.Village.models                                import *
from app.Commune.models                                import *
from app.District.models                               import *
from local.FirstFinance.LoanCancellation.models        import *
import app.tools.mktaccounting                         as              mktaccounting
import local.FirstFinance.tools.mktloan as mktloan

from local.FirstFinance.Customer.models import *

from app.LoanProduct.models         import *
from app.Currency.models 			import *
from app.Rejected.models 			import *
import app.tools.mktdate 				as mktdate

import local.FirstFinance.Report.LoanPortfolio.portfolio as FFportfolio
import local.FirstFinance.Report.LoanPortfolio.portfolioIncome as FFportfolioIncome
from app.tools.mktcustomreport   import *
from app.PotentialCustomer.models import *

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	ReportedDate 		=	DateTextField("Reported Date")

@app.route('/Morakot/Report/FF/LoanReject/<ByCategory>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFLoanRejectByCategory(ByCategory):
	"""
	<ByCategory> : LoanProduct, CRO, CC

	"""
	try:
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint,ByCategory=ByCategory))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		ByCategory 		= 	str(ByCategory)
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else ""
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate
		Result 			=	setLoanRejectByCategory(Branch=Branch,
															   ReportedDate=ReportedDate,
															   ByCategory=ByCategory)
		Parameters 		= 	{"Branch": Branch,"ReportedDate": ReportedDate}
		FilterOption 	=	""

		SearchForm 		= 	FRM_CUSTOM_REPORT_SEARCH_EX()
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)
	except:
		raise

@app.route('/Morakot/Report/FF/LoanReject/<ByCategory>/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFLoanRejectByCategoryExcel(ByCategory):
	try:
		ByCategory 		= 	str(ByCategory)
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else ""
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate

		Result 			=	setLoanRejectByCategory(Branch=Branch,
												   ReportedDate=ReportedDate,
												   ByCategory=ByCategory)
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="LoanRejectOrCancelBy%s" % ByCategory)

		return response

	except Exception as e:
		raise

def setLoanRejectByCategory(**kwargs):
	"""
	ByCategory: LoanProduct, CRO, CC
	"""
	try:
		Branch 			= 	kwargs.get("Branch")
		ReportedDate 	=	kwargs.get("ReportedDate")
		ByCategory 		= 	kwargs.get("ByCategory")
		
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		CategoryDict    = 	FFportfolio.getCategory(ByCategory=ByCategory)
		ReportHeader.update({"ReportTitle": "Summary of Rejection and Concellation by %s" %  CategoryDict.get("HeaderField")})
		ReportHeader.update({"Parameters": {"Branch": Branch,"ReportedDate": ReportedDate}})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
                                            Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'%s' % CategoryDict.get("HeaderField"), 
                                            Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Inquiry Rejected', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Inquiry', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ of Request Amount', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="D")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Rejected by FF', 
                                            Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Loans', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ of Loans', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'%s of Rejection to Portfolio' % '%', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="G")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Cancellation (Rejected by Client)', 
                                            Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Loans', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ of Loans', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'%s of Concellation to Portfolio' % '%', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="J")

		

		Data = getLoanRejectByCategory(Branch=Branch,ReportedDate=ReportedDate,ByCategory=ByCategory)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getLoanRejectByCategory(**kwargs):
	"""
	Result = [{1:"1",2:"Bonteay Meanchey",3:"BM", 4: "100", 5:"500,000",6: "100", 7:"500,000"}]
	"""
	Branch 				= 	kwargs.get("Branch")
	ReportedDate 		=	kwargs.get("ReportedDate")
	ByCategory 			=	kwargs.get("ByCategory")

	RecordRow = []
	CategoryDict = FFportfolio.getCategory(ByCategory=ByCategory)
	CategoryObj = CategoryDict.get("CategoryObj")
	FieldName 	= CategoryDict.get("FieldName")
	GroupBy 	= CategoryDict.get("GroupBy")

	CurrencyObj = MKT_CURRENCY.query

	#Calculate Rejected/Cancel by FF
	RejectedByFFDict 		=	getLoanRejectCancelByCategory(Branch=Branch,
										  	  	 ReportedDate=ReportedDate,
										  	  	 GroupBy="%s" % (GroupBy),
										  	  	 CategoryObj=CategoryObj,
										  	  	 RejectedBy=['2'])

	RejectedByClientDict 	=	getLoanRejectCancelByCategory(Branch=Branch,
										  	  	 ReportedDate=ReportedDate,
										  	  	 GroupBy="%s" % (GroupBy),
										  	  	 CategoryObj=CategoryObj,
										  	  	 RejectedBy=['1'])

	CategoryDict1 			= 	FFportfolio.getCategory(ByCategory=ByCategory,MainTable="POCustomer")
	POCustomerDict			=	getPOCustomerByCategory(Branch=Branch,
														ReportedDate=ReportedDate,
														GroupBy=CategoryDict1.get("GroupBy"),
														CategoryObj=CategoryDict1.get("CategoryObj"),
														Filter=[MKT_PO_CUSTOMER.POStatus.in_(['5'])])

	CategoryDict 			= 	FFportfolio.getCategory(ByCategory=ByCategory,IsDisbursed="Y")
	ActivePortfolioDict 	= 	FFportfolio.getActivePortfolioByCategory(Branch=Branch,
										  	  ReportedDate=ReportedDate,
										  	  GroupBy="%s" % (CategoryDict.get("GroupBy")),
										  	  CategoryObj=CategoryDict.get("CategoryObj"))

	DataDictList = [{"Prefix": "PO","Data": POCustomerDict},
					{"Prefix": "FF","Data": RejectedByFFDict},
					{"Prefix": "Client","Data": RejectedByClientDict},
					{"Prefix": "Active","Data": ActivePortfolioDict}]

	No = 1
	BaseCurrency 		= mktsetting.getAccSetting().BaseCurrency
	TotPOCount 	= 0
	TotPOAmount = float(0)
	TotFFCount 	= 0
	TotFFAmount 	= float(0)
	TotClientCount 	= 0
	TotClientAmount 	= float(0)
	TotActiveCount = 0
	TotActiveAmount = float(0)

	if CategoryObj:		
		for row in CategoryObj:	
			for item in DataDictList:
				Prefix = item.get("Prefix")
				Data   = item.get("Data",{}).get(row.ID)
				exec("%sCount = 0" % (Prefix)) 
				exec("%sAmount = float(0)" % (Prefix)) 
				if Data:
					exec("%sCount = %s.get('%s')" % (Prefix,Data,"Count")) 
					exec("%sAmount = %s.get('%s')" % (Prefix,Data,"Amount")) 

			if POCount > 0 or FFCount > 0 or ClientCount > 0:
				RecordRow.append(({1: {"Value":No,"Class":"text-center"},
								  2: {"Value":eval(FieldName),"Class":"text-left"},
								  3: {"Value":POCount}, 
								  4: {"Value":mktmoney.toMoney(float(POAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  5: {"Value":FFCount}, 
								  6: {"Value":mktmoney.toMoney(float(FFAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  7: {"Value":FFportfolio.getPercentage(Amount=POAmount+FFAmount,DividedAmount=ActiveAmount)},
								  8: {"Value":ClientCount},
								  9: {"Value":mktmoney.toMoney(float(ClientAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  10: {"Value":FFportfolio.getPercentage(Amount=POAmount+ClientAmount,DividedAmount=ActiveAmount)}
								  },{"Class":"text-right","Style":""}))
				No+=1

		#Unknow & Total
		for item in DataDictList:
			Prefix = item.get("Prefix")
			Data   = item.get("Data",{}).get("Unknown")
			TotalData = item.get("Data",{}).get("Total")
			exec("%sCount = 0" % (Prefix)) 
			exec("%sAmount = float(0)" % (Prefix)) 
			exec("Tot%sCount = 0" % (Prefix)) 
			exec("Tot%sAmount = float(0)" % (Prefix)) 
			if Data:
				exec("%sCount = %s.get('%s')" % (Prefix,Data,"Count")) 
				exec("%sAmount = %s.get('%s')" % (Prefix,Data,"Amount")) 
			if TotalData:
				exec("Tot%sCount = %s.get('%s')" % (Prefix,TotalData,"Count")) 
				exec("Tot%sAmount = %s.get('%s')" % (Prefix,TotalData,"Amount")) 

		if POCount > 0 or FFCount > 0 or ClientCount > 0:
			RecordRow.append(({1: {"Value":No,"Class":"text-center"},
								  2: {"Value":"Unknown","Class":"text-left"},
								  3: {"Value":POCount}, 
								  4: {"Value":mktmoney.toMoney(float(POAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  5: {"Value":FFCount}, 
								  6: {"Value":mktmoney.toMoney(float(FFAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  7: {"Value":FFportfolio.getPercentage(Amount=POAmount+FFAmount,DividedAmount=ActiveAmount)},
								  8: {"Value":ClientCount},
								  9: {"Value":mktmoney.toMoney(float(ClientAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  10: {"Value":FFportfolio.getPercentage(Amount=POAmount+ClientAmount,DividedAmount=ActiveAmount)}
								  },{"Class":"text-right","Style":""}))
			No+=1

		# Total
		if TotPOCount > 0 or TotFFCount > 0 or TotClientCount > 0:
			RecordRow.append(({1: {"Value":""},
								  2: {"Value":"Total"},
								  3: {"Value":TotPOCount}, 
								  4: {"Value":mktmoney.toMoney(float(TotPOAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  5: {"Value":TotFFCount}, 
								  6: {"Value":mktmoney.toMoney(float(TotFFAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  7: {"Value":FFportfolio.getPercentage(Amount=TotPOAmount+TotFFAmount,DividedAmount=TotActiveAmount)},
								  8: {"Value":TotClientCount},
								  9: {"Value":mktmoney.toMoney(float(TotClientAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  10: {"Value":FFportfolio.getPercentage(Amount=TotPOAmount+TotClientAmount,DividedAmount=TotActiveAmount)}
								  },{"Class":"text-right text-bold","Style":""}))
			No+=1
	return RecordRow

def getLoanRejectCancelByCategory(**kwargs):
	Branch 				=	kwargs.get("Branch","")
	ReportedDate 		= 	kwargs.get("ReportedDate","")
	GroupBy 			=	kwargs.get("GroupBy")
	CategoryObj 		=	kwargs.get("CategoryObj")
	RejectedBy 			=	kwargs.get("RejectedBy","") #1 Reject by client, 2 Reject by FF
	Filter 				=	kwargs.get("Filter","")

	ReportedDateSplit 	=	ReportedDate.split()
	BranchSplit 		=	Branch.split()

	StartDate 		= 	""
	EndDate 		=	""

	if len(ReportedDateSplit) == 2:
		StartDate = ReportedDateSplit[0]
		EndDate   = ReportedDateSplit[1]

	#Calculate Rejected & Cancellation
	DictData = {}

	ExcludeDEID 		=	FFportfolio.getExcludeCollteralDEID()
	LoanCollateralObj 	= 	FFportfolio.getLoanCollateralObj().subquery()
	ApplicationObj 		=	db.session.query(func.sum(MKT_LOAN_APPLICATION.Amount).label('Amount'),
											 func.count(MKT_LOAN_APPLICATION.ID).label('Count'),
											 MKT_LOAN_APPLICATION.Currency,
											 eval(GroupBy).label("Category")
										).\
										join(MKT_CUSTOMER,
											 MKT_LOAN_APPLICATION.LNCustomerID == MKT_CUSTOMER.ID
										).\
										outerjoin(LoanCollateralObj,
											      LoanCollateralObj.c.ID == MKT_LOAN_APPLICATION.ID).\
										outerjoin(MKT_COLLATERAL_DE,
												  MKT_COLLATERAL_DE.CollateralID == LoanCollateralObj.c.Collateral).\
										filter(or_(MKT_COLLATERAL_DE.ID == None,
											   ~MKT_COLLATERAL_DE.ID.in_(ExcludeDEID))).\
										group_by(eval(GroupBy),
												 MKT_LOAN_APPLICATION.Currency)

	if Branch and "ALL" not in BranchSplit:
		ApplicationObj = ApplicationObj.filter(MKT_LOAN_APPLICATION.Branch.in_(BranchSplit))

	if ReportedDate:
		if StartDate and EndDate:
			ApplicationObj = ApplicationObj.\
									filter(MKT_LOAN_APPLICATION.AppDate >= str(StartDate)).\
									filter(MKT_LOAN_APPLICATION.AppDate <= str(EndDate))
		else:
			ApplicationObj = ApplicationObj.\
									filter(MKT_LOAN_APPLICATION.AppDate.in_(ReportedDateSplit))
	if Filter:
		ApplicationObj = ApplicationObj.filter(*Filter)

	REJECTED_STATUS  	= 	"4"	
	SubRejectedOBj 		=	getRejectedObj().subquery()
	RejectedObj 		=	ApplicationObj.\
										join(SubRejectedOBj,
											 SubRejectedOBj.c.LoanAppID == MKT_LOAN_APPLICATION.ID
										).\
										filter(MKT_LOAN_APPLICATION.AppStatus.in_([REJECTED_STATUS]))										
	CANCEL_STATUS 		=	"5"
	CancellationObj 	=	ApplicationObj.\
										join(MKT_LOAN_CANCELLATION,
											 MKT_LOAN_CANCELLATION.LoanAppID == MKT_LOAN_APPLICATION.ID
										).\
										filter(MKT_LOAN_APPLICATION.AppStatus.in_([CANCEL_STATUS]))			

	if RejectedBy:
		RejectedObj	= RejectedObj.filter(SubRejectedOBj.c.RejectedBy.in_(RejectedBy))
		CancellationObj = CancellationObj.filter(MKT_LOAN_CANCELLATION.CancellationType.in_(RejectedBy))

	TotalAmount = float(0)
	TotalCount  = 0
	ObjList 	= [RejectedObj,CancellationObj]

	for Obj in ObjList:
		for row in Obj:
			Key    = row.Category
			if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
				Key = "Unknown"

			Count  = DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
			Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

			Count+=row.Count
			Amount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

			DictData.update({"%s" % (Key): {"Count": Count,"Amount": Amount}})

			TotalAmount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)
			TotalCount+=row.Count

	DictData.update({"%s" % ("Total"): {"Count": TotalCount,"Amount": TotalAmount}})

	return DictData

def getPOCustomerByCategory(**kwargs):
	Branch 				=	kwargs.get("Branch","")
	ReportedDate 		= 	kwargs.get("ReportedDate","")
	GroupBy 			=	kwargs.get("GroupBy")
	CategoryObj 		=	kwargs.get("CategoryObj")
	RejectedBy 			=	kwargs.get("RejectedBy","") #1 Reject by client, 2 Reject by FF
	Filter 				=	kwargs.get("Filter","")

	ReportedDateSplit 	=	ReportedDate.split()
	BranchSplit 		=	Branch.split()

	StartDate 		= 	""
	EndDate 		=	""

	if len(ReportedDateSplit) == 2:
		StartDate = ReportedDateSplit[0]
		EndDate   = ReportedDateSplit[1]

	#Calculate Rejected & Cancellation
	DictData = {}

	POCustomerObj 			=	db.session.query(func.sum(MKT_PO_CUSTOMER.LoanAmount).label('Amount'),
											 func.count(MKT_PO_CUSTOMER.ID).label('Count'),
											 MKT_PO_CUSTOMER.Currency,
											 eval(GroupBy).label("Category")
										 	).\
											outerjoin(MKT_CUSTOMER,
													  MKT_CUSTOMER.PotentialCustomer == MKT_PO_CUSTOMER.ID 
										  	).\
											group_by(eval(GroupBy),
												 MKT_PO_CUSTOMER.Currency)

	if Branch and "ALL" not in BranchSplit:
		POCustomerObj = POCustomerObj.filter(MKT_PO_CUSTOMER.Branch.in_(BranchSplit))

	if ReportedDate:
		if StartDate and EndDate:
			POCustomerObj = POCustomerObj.\
									filter(MKT_PO_CUSTOMER.DateOfContact >= str(StartDate)).\
									filter(MKT_PO_CUSTOMER.DateOfContact <= str(EndDate))
		else:
			POCustomerObj = POCustomerObj.\
									filter(MKT_PO_CUSTOMER.DateOfContact.in_(ReportedDateSplit))
	if Filter:
		POCustomerObj = POCustomerObj.filter(*Filter)

	TotalAmount = float(0)
	TotalCount  = 0
	ObjList 	= [POCustomerObj]

	for Obj in ObjList:
		for row in Obj:
			Key    = row.Category
			if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
				Key = "Unknown"

			Count  = DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
			Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

			Count+=row.Count
			Amount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)

			DictData.update({"%s" % (Key): {"Count": Count,"Amount": Amount}})

			TotalAmount+=mktloan.toBaseCurrency(Amount=float(row.Amount), Currency=row.Currency)
			TotalCount+=row.Count

	DictData.update({"%s" % ("Total"): {"Count": TotalCount,"Amount": TotalAmount}})

	return DictData

def getRejectedObj(**kwargs):
	Obj = db.session.query(MKT_REJECTED.LoanAppID,
						   func.split_part(func.string_agg(MKT_REJECTED.RejectedBy,","),",",1).label("RejectedBy"),
						   func.split_part(func.string_agg(MKT_REJECTED.RejectedReason,","),",",1).label("RejectedReason")
						).\
						group_by(MKT_REJECTED.LoanAppID)
	return Obj
