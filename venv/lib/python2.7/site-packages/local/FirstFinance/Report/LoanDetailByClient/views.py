from app.mktcore.imports                               import *
from app.Customer.models                               import *
from app.LoanApplication.models                        import *
from app.LoanContract.models                           import *
from app.Collateral.models                             import *
from app.Officer.models                                import * 
from app.Province.models                               import *
from app.Village.models                                import *
from app.Commune.models                                import *
from app.District.models                               import *
from app.Currency.models 							   import *
from local.FirstFinance.LoanCancellation.models        import *
from app.LoanContract.models 						   import *
import app.tools.user 			as mktuser
import app.tools.mktaccounting                         as              mktaccounting
# from local.FirstFinance.ReferralSource.models                         import *
from local.FirstFinance.Customer.models import *
from app.LoanProduct.models         import *
from app.tools.mktcustomreport                         import *
import app.tools.mktreport                             as              mktreport
from operator                   import itemgetter




@app.route('/Morakot/Report/FF/LoanDetailByClient', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanDetailsByClient():
	""" Route to view each report """
	try:        
		ErrorMsg        = []
		DefualtUrl      = CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck        = checkAccess(DefualtUrl,"Search")
		if getCheck     != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch          =   request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()

		Result          =   getLoanDetailsClient(Branch=Branch)
		Parameters      =   {"Branch": Branch}
		FilterOption    =   ""

		SearchForm 		= 	""
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)
	except:
		raise

@app.route('/Morakot/Report/FF/LoanDetailByClient/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanDetailsByClientExport():
	""" Route to view each report """
	try:
		Branch          =   request.args.get("Branch") if "Branch" in request.args else ""
		Result          =   getLoanDetailsClient(Branch=Branch)
		response        =   CUSTOM_REPORT.exportExcel(Result=Result,FileName="LoanDetailsByClient")

		return response

	except Exception as e:
		raise

def getLoanDetailsClient(**kwargs):
	try:
		Branch          =   kwargs.get("Branch")
		
		ReportHeader    =   CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Loan Details By Client"})
		ReportHeader.update({"Parameters": kwargs})

		Data            = []

		""" Report Header Title """ 
		TableHeader     = {}    
 
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
									Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Account', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Clinets Name', 
									Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Gender', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Total # of Household', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Date Approved', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Amount Approved', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Disbures Total', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Monthly Repayment', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Tenor Months', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Maturity Date', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Loan Type', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Int Rate', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="M")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Title Deed', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="N")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Property Area', 
											Rowspan=0,Colspan=4,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="O")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'City/Provincial', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="O")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'District/Khan', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="P")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Commune/SK', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="Q")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Village', 
											Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="R")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Property Price USD', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="S")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'CMV USD', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="T")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Income Source', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="U")
		TableHeader     = CUSTOM_REPORT.setTableHeader(Text=u'Assessed By', 
											Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="V")

		Data            = LDetali(Branch=Branch)

		Result          = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def LDetali(**kwargs):

	# FilterBranch 					= request.args.get('Branch').upper() if 'Branch' in request.args else ''
	# Branch 							=  FilterBranch if FilterBranch else mktuser.getCurrentBranch()
	# FilterCond 						= []

	# if FilterBranch and FilterBranch != 'ALL':
	# 	FilterCond.append(MKT_CUSTOMER.Branch==FilterBranch)
	# else:
	# 	FilterCond.append(MKT_CUSTOMER.Branch=='')

	Branch              =   kwargs.get("Branch")
	BranchSplit         =   Branch.split()
	Index = 0
	LoanApplication         = db.session.query(
									MKT_CUSTOMER.ID,
									(MKT_CUSTOMER.LastNameEn + ' ' + 	MKT_CUSTOMER.FirstNameEn).label('FullName'),
									MKT_CUSTOMER.Gender,
									MKT_CUSTOMER.NumberOfMember,
									MKT_CUSTOMER.SourceOfIncome,
									MKT_CUSTOMER.MonthlyIncome,
									MKT_LOAN_APPLICATION.AppDate,
									MKT_LOAN_CONTRACT.ID,
									MKT_LOAN_CONTRACT.ApprovedAmount,
									MKT_LOAN_CONTRACT.Disbursed,
									MKT_LOAN_APPLICATION.MonthlyRep,
									MKT_LOAN_CONTRACT.Term,
									MKT_LOAN_CONTRACT.MaturityDate,
									MKT_LOAN_CONTRACT.LoanType,
									MKT_LOAN_CONTRACT.InterestRate,
									MKT_LOAN_CONTRACT.Currency,
									MKT_COLLATERAL_DE.TitleType,
									MKT_COLLATERAL_DE.Province,
									MKT_COLLATERAL_DE.District,
									MKT_COLLATERAL_DE.Commune,
									MKT_COLLATERAL_DE.Village,
									MKT_COLLATERAL_DE.ValuationPrice,
									MKT_COLLATERAL_DE.PurchasePrice,
									MKT_COLLATERAL_DE.Valuer,
									MKT_CUSTOMER.Branch
								).\
								distinct(MKT_LOAN_CONTRACT.ID).\
								join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.ContractCustomerID==MKT_CUSTOMER.ID).\
								join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID==MKT_LOAN_CONTRACT.LoanApplicationID).\
								outerjoin(MKT_LOAN_COLLATERAL,MKT_LOAN_COLLATERAL.ID==MKT_LOAN_APPLICATION.ID).\
								outerjoin(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE.CollateralID==MKT_LOAN_COLLATERAL.Collateral).\
								filter(MKT_LOAN_APPLICATION.AppStatus=='3').\
								order_by(MKT_LOAN_CONTRACT.ID.asc())

								# join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.LNCustomerID==MKT_CUSTOMER.ID).\
								# join(MKT_LOAN_CONTRACT,MKT_LOAN_CONTRACT.LoanApplicationID==MKT_LOAN_APPLICATION.ID).\
								# join(MKT_COLLATERAL,MKT_COLLATERAL.CustomerID==MKT_LOAN_CONTRACT.ContractCustomerID).\
								# join(MKT_COLLATERAL_DE,MKT_COLLATERAL_DE.CollateralID==MKT_COLLATERAL.ID).\
								# filter(MKT_LOAN_APPLICATION.AppStatus=='3').\
								# order_by( MKT_CUSTOMER.LastNameEn.asc())

	# AccObj 					= db.session.query(MKT_ACCOUNT.ID)
	# ProvObj 				= db.session.query(MKT_PROVINCE.ID,MKT_PROVINCE.Description)
	# DistObj 				= db.session.query(MKT_DISTRICT.ID,MKT_DISTRICT.Description)
	# CommObj 				= db.session.query(MKT_COMMUNE.ID,MKT_COMMUNE.Description)
	# VillObj 				= db.session.query(MKT_VILLAGE.ID,MKT_VILLAGE.Description)

	LoanDescriptionDict 	= {'R':'Restructured','N':'Normal'}

	SourceOfIncomeDict 		= { '1': 'Salaried Employee',
								'2': 'Worker',
								'3': 'Civil Servant',
								'4': 'Self-Employed',
								'99': 'Unknown',
								'9':'AAA'
								}

	# # Report Header Title
	# Company 			= 	mkttool.getCompany().CompanyName
	# BankDate 			= 	mktdate.getBankDate()
	# BranchObj 			= 	db.session.query(MKT_BRANCH.ID,MKT_BRANCH.Description).order_by(MKT_BRANCH.ID.asc())

	# Get Base Currency and Exchange Rate
	BaseCurrency 		= 	mktsetting.getAccSetting().BaseCurrency
	ReportingRateObj 	= 	mktaccounting.getReportingRateObj()
	ExchangeRate 		= 	0
	ExchangeRateBasedCurrency =  float(ReportingRateObj[BaseCurrency]) 
	CurrencyObj 		= 	MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).distinct().all()
	CheckCurrency 		=	db.session.query(MKT_LOAN_APPLICATION.Currency).order_by(MKT_LOAN_APPLICATION.Currency.asc()).distinct(MKT_LOAN_APPLICATION.Currency)
	CurrencyDict 		= 	{'BasedCurrency':BaseCurrency}

	for currency in CurrencyObj:
		if currency.ID != BaseCurrency:
			CurrencyDict.update({'ForeignExchangeRate':float(ReportingRateObj[currency.ID])})

	TotalApprovedAmount = 	0
	TotalDisbursed 		= 	0
	TotalMonthlyRepayment = 0
	Total 				= 	{}
	ReportDict 				= []
	# print "****",LoanApplication.count()

	if Branch and "ALL" not in BranchSplit:
		LoanApplication = LoanApplication.filter(MKT_CUSTOMER.Branch.in_(BranchSplit))

	if LoanApplication.first():
		for item in LoanApplication.all():
			Index 					+= 1
			Currency 				= 		item.Currency
			ExchangeRate  			= 		float(ReportingRateObj[Currency])
			Account 				= 		item.ID
			FullName 				= 		item.FullName
			Gender 					= 		item.Gender
			HouseHoldMember 		= 		item.NumberOfMember
			SourceOfIncome 			= 		SourceOfIncomeDict[item.SourceOfIncome]
			ApprovedDate 			= 		item.AppDate
			ApprovedAmount 			= 		float(item.ApprovedAmount)*ExchangeRate
			Disbursed 				= 		float(item.Disbursed)*ExchangeRate
			MonthlyRepayment 		= 		float(item.MonthlyRep)*ExchangeRate
			
			# TotalApprovedAmount 	+= 		ApprovedAmount
			# TotalDisbursed 			+= 		Disbursed
			# TotalMonthlyRepayment 	+= 		MonthlyRepayment

			Term 					= 		item.Term
			MaturityDate 			= 		item.MaturityDate
			LoanType 				= 		LoanDescriptionDict[item.LoanType]
			InterestRate 			= 		item.InterestRate
			TitleType 				= 		item.TitleType
			# ProvinceObj 			= 		ProvObj.filter(MKT_PROVINCE.ID==item.Province).first()
			Province 				= 		 mktreport.VLOOKUP(['MKT_PROVINCE','ID',str(item.Province),'Description']) if item.Province else ""
			# DistrictObj 			=		DistObj.filter(MKT_DISTRICT.ID==item.District).first()
			District 				= 		 mktreport.VLOOKUP(['MKT_DISTRICT','ID',str(item.District),'Description']) if item.District else ""
			# CommuneObj 				= 		CommObj.filter(MKT_COMMUNE.ID==item.Commune).first()
			Commune 				= 		 mktreport.VLOOKUP(['MKT_COMMUNE','ID',str(item.Commune),'Description']) if item.Commune else ""
			# VillageObj				= 		VillObj.filter(MKT_VILLAGE.ID==item.Village).first()
			Village 				= 		 mktreport.VLOOKUP(['MKT_VILLAGE','ID',str(item.Village),'Description']) if item.Village else ""
			CMV 					= 		float(item.ValuationPrice)*ExchangeRate if item.ValuationPrice else 0
			AccessedBy 				= 		item.Valuer
			PropertyPrice 			= 		float(item.PurchasePrice)*ExchangeRate if item.PurchasePrice else 0
			MonthlyIncome 			= 		float(item.MonthlyIncome)*ExchangeRate if item.MonthlyIncome else 0
			Branch 					= 		item.Branch

			ReportDict.append(({
												1 	: 	{"Value":Branch},
												2 	: 	{"Value":Account},
												3 	: 	{"Value":FullName},
												4 	: 	{"Value":Gender},
												5 	: 	{"Value":HouseHoldMember},
												6 	: 	{"Value":ApprovedDate},
												7	: 	{"Value":mktmoney.toMoney(float(ApprovedAmount),mktmoney.getCurrencyObj(Currency))},
												8	: 	{"Value":mktmoney.toMoney(float(Disbursed),mktmoney.getCurrencyObj(Currency))},
												9 	: 	{"Value":mktmoney.toMoney(float(MonthlyRepayment),mktmoney.getCurrencyObj(Currency))},
												10 	: 	{"Value":Term},
												11 	: 	{"Value":MaturityDate},
												12 	: 	{"Value":LoanType},
												13 	: 	{"Value":InterestRate},
												14 	: 	{"Value":TitleType},
												15	: 	{"Value":Province},
												16 	: 	{"Value":District},
												17 	: 	{"Value":Commune},
												18 	: 	{"Value":Village},
												19 	: 	{"Value":mktmoney.toMoney(float(PropertyPrice),mktmoney.getCurrencyObj(Currency))},
												20 	: 	{"Value":CMV},
												21	:   {"Value":SourceOfIncome},
												22	:	{"Value":AccessedBy}
							},{"Class":"","Style":""}))
		# ReportDict = sorted(ReportDict, key=itemgetter(2))
		# [col.update({1: index+1}) for index, col in enumerate(ReportDict)]
	# Total 
	# Total.update({
	# 				'TotalApprovedAmount'		:mktmoney.toMoney(float(TotalApprovedAmount),mktmoney.getCurrencyObj(Currency)),
	# 				'TotalDisbursed'			:mktmoney.toMoney(float(TotalDisbursed),mktmoney.getCurrencyObj(Currency)),
	# 				'TotalMonthlyRepayment'		:mktmoney.toMoney(float(TotalMonthlyRepayment),mktmoney.getCurrencyObj(Currency))
	# 	})

	# Report Title and Header
			# ResultDict.update(	{
			# 							CustomerID: {
			# 								'Company' 		: 	Company,
			# 								'Title'			: 	'Loan Detail By Client',
			# 								'BankDate'		: 	str(BankDate),
			# 								'BaseCurrency' 	: 	BaseCurrency,
			# 								'CurrencyDict' 	: 	CurrencyDict,
			# 								'ExchangeRate' 	: 	ExchangeRate,
			# 								'Branch'		: 	Branch,
			# 								'Total' 		: 	Total
			# 						}

			# 					}	
			# 				)	
	return ReportDict