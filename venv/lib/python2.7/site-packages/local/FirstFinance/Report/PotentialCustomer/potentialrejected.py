# -*- coding: utf-8 -*-

'''
Report Name : Example Report

'''

from app.mktcore.imports 					import *
from app.PotentialCustomer.models 			import *
from app.LoanApplication.models 			import *
from app.Customer.models 					import *
from app.Branch.models						import *
from app.Rejected.models 					import *
import app.tools.mktmessage 				as mktmessage
import app.tools.mktdate					as mktdate
from decimal 								import Decimal
from app.tools.mktcustomreport   			import *
import app.tools.mktmoney 					as mktmoney

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	ReportedDate 		=	DateTextField("Reported Date")

@app.route('/Morakot/Report/FF/PORejected', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getPORejected():
	""" Route to view each report """
	try:		
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			=	request.args.get("Branch") if "Branch" in request.args and request.args.get("Branch") else "ALL"
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else ""
		Result 			=	getReport01(Branch=Branch,ReportedDate=str(ReportedDate))
		Parameters 		= 	{"Branch": Branch,"ReportedDate": str(ReportedDate)}
		FilterOption 	=	""

		# html = CUSTOM_REPORT.getCustomReportTemplate()
		SearchForm 		= 	FRM_CUSTOM_REPORT_SEARCH_EX()
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)	
	except:
		raise

@app.route('/Morakot/Report/FF/PORejected/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getRejectedExport():
	""" Route to view each report """
	try:
		Branch 			=	request.args.get("Branch") if "Branch" in request.args and request.args.get("Branch") else "ALL"
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else ""

		Result 			=	getReport01(Branch=Branch,ReportedDate=str(ReportedDate))
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="InquiryRejectionReport")

		return response

	except Exception as e:
		raise

def getReport01(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch")
		ReportedDate 	=	kwargs.get("ReportedDate")
		
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle":"Inquiry Rejection Report"})
		ReportHeader.update({"Parameters": kwargs})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Inquiry', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Rejected', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Rejected by Sale', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Rejected by UO', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Rejected by Customer', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Rejected by FF', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% Rejected at Sale stage', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% Rejected at Assesment stage', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% Rejected by Customer', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% Rejected by FF', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% Rejected/ Inquiry', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="M")

		Data = getRecordRow(**kwargs)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise


def getRecordRow(**kwargs):
	Branch 			= 	kwargs.get("Branch")
	ReportedDate 	=	kwargs.get("ReportedDate")
	AllPOObj 			= 	getPOObj(**kwargs)
	POStatusObj 		=	AllPOObj[0] # get obj rejected by status
	RejectedObj 		=	AllPOObj[1]
	RejectedStatus = 	mktsetting.getAppSetting('PO_CUS_REJECTED_STATUS')

	RecordRow = []
	Index = 1
	BranchObj		= 	MKT_BRANCH.query.order_by(MKT_BRANCH.ID)
	for Row in BranchObj:
		BranchID 			=	Row.ID
		if BranchID in Branch or "ALL" in Branch:
			Inquery 		=	POStatusObj.filter(MKT_PO_CUSTOMER.Branch==BranchID).count()

			Rejected 			 = 	getNumPOStatus(str(RejectedStatus),BranchID,POStatusObj) # get number of rejected
			
			RejectedStageBySale  = 	getRejectedStage('1',BranchID,RejectedObj)
			RejectedStageByUO    = 	getRejectedStage('2',BranchID,RejectedObj) 

			RejectedByClient	 = 	getRejectedBy('1',BranchID,RejectedObj)
			RejectedByFF    	 = 	getRejectedBy('2',BranchID,RejectedObj) 

			RateByFF		= 	(float(RejectedByFF)/float(Rejected))*100 if RejectedByFF and Rejected else 0
			RateByClient	= 	(float(RejectedByClient)/float(Rejected))*100 if RejectedByClient and Rejected else 0

			RateStageSale  	=	(float(RejectedStageBySale)/float(Rejected))*100 if RejectedStageBySale and Rejected else 0 # rejected stage by sale
			RateStageUO  	=	(float(RejectedStageByUO)/float(Rejected))*100 if RejectedStageByUO and Rejected else 0 # rejected stage by uo

			RageOfRejected 	= 	(float(Rejected)/float(Inquery))*100 if Rejected and Inquery else 0 # rate of customer rejected

			DictRow 	= { 1:{"Value":Index,"Class":"text-center"},
							2:{"Value":BranchID,"Class":"text-center"},
							3:{"Value":Inquery},
							4:{"Value":Rejected},
							5:{"Value":RejectedStageBySale},
							6:{"Value":RejectedStageByUO},
							7:{"Value":RejectedByClient},
							8:{"Value":RejectedByFF},
							9:{"Value":mktmoney.formatNumber(RateStageSale)},
							10:{"Value":mktmoney.formatNumber(RateStageUO)},
							11:{"Value":mktmoney.formatNumber(RateByClient)},
							12:{"Value":mktmoney.formatNumber(RateByFF)},
							13:{"Value":mktmoney.formatNumber(RageOfRejected)}
						  }
			RecordRow.append((DictRow,
						  {"Class":"text-right"}))

			Index +=1
			
	return RecordRow

def getPOObj(**kwargs):
	"""
	Args:
		Date: could be filter by ALL, Between and Specific date.By default by system date
		Branch: could be filter by ALL, Multiple, Specific branch. By default is current user branch.
	Return:
		PO customer's query obj
	"""
	ReportedDate 		=	kwargs.get("ReportedDate")
	Branch 	 			= 	kwargs.get("Branch")
	#---------------------:
	ReportedDate 		=	str(ReportedDate)
	ReportedDate 		=	ReportedDate.split() if ReportedDate else []
	Branch 				=	Branch.split() if Branch else []

	POStatusObj 		= 	MKT_PO_CUSTOMER.query
	Rejected 			= 	MKT_REJECTED.query.filter(MKT_REJECTED.Rejected=='Y')
	# filter branch:
	if "ALL" not in Branch and Branch:
		# if ALL haven't in branch and branch not null
		POStatusObj = POStatusObj.filter(MKT_PO_CUSTOMER.Branch.in_(Branch))
		Rejected	= Rejected.filter(MKT_REJECTED.Branch.in_(Branch))
	# filter date:
	if ReportedDate:
		if len(ReportedDate)==2:
			# filter between date

			POStatusObj =	POStatusObj.filter(MKT_PO_CUSTOMER.DateOfContact>=ReportedDate[0],
									MKT_PO_CUSTOMER.DateOfContact<=ReportedDate[1])

			Rejected =	Rejected.filter(MKT_REJECTED.RejectedDate>=ReportedDate[0],
									MKT_REJECTED.RejectedDate<=ReportedDate[1])
		else:
			# filter specific date
			POStatusObj = 	POStatusObj.filter(MKT_PO_CUSTOMER.DateOfContact.in_(ReportedDate))

			Rejected 	= 	Rejected.filter(MKT_REJECTED.RejectedDate.in_(ReportedDate))
			
	return (POStatusObj,Rejected)
def getNumPOStatus(POStatus,Branch,POStatusObj):
	Obj 	= 	POStatusObj.filter(cast(MKT_PO_CUSTOMER.POStatus,Integer)==int(POStatus),
							  MKT_PO_CUSTOMER.Branch==Branch)
	return Obj.count()

def getRejectedBy(RejectedBy,Branch,RejectedObj):
	Obj 	= 	RejectedObj.filter(cast(MKT_REJECTED.RejectedBy,Integer)==int(RejectedBy),
							  MKT_REJECTED.Branch==Branch,
							  MKT_REJECTED.LoanAppID==None)# Emtype value of column could not compare with  empty string
	return Obj.count()
def getRejectedStage(RejectedStage,Branch,RejectedObj):
	Obj 	= 	RejectedObj.filter(cast(MKT_REJECTED.RejectedStage,Integer)==int(RejectedStage),
							  MKT_REJECTED.Branch==Branch,
							  MKT_REJECTED.LoanAppID==None) # Emtype value from table could not compare with  empty string
	return Obj.count()