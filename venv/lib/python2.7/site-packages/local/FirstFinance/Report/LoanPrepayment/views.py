from app.LoanAmendment.models 							import  	*
from app.LoanContract.models 							import 		*
from app.AccEntry.models 								import 		*
from app.LoanProduct.models 							import 		*
from app.ConsolBalance.models 							import  	*
from app.GLBalance.models 								import 	 	*
from app.mktcore.imports 								import 		*
from local.FirstFinance.Report.LoanPortfolio.portfolio 		import 		*
import app.AccSetting.views 							as 	AccSetting 
import app.tools.mktsetting 							as mktsetting
import app.tools.mktmoney 								as mktmoney
import app.tools.user           						as mktuser
import app.tools.mktdate 								as mktdate
from local.FirstFinance.tools.mktloan 					import  	*

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	ReportedDate 		=	DateTextField("Reported Date")

def getNumberOfLoan(**kwargs):
	'''
		-This method use to get number of loan Prepayment
		-Args:
			-CategoryObj 	type(String) 
				CategoryObj can be "MKT_BRANCH" BranchObj or "MKT_LOAN_PRODUCT" ProductObj is base on
				URL paramenter <Branch> is (BranchObj) or <LoanProduct> is(ProductObj)
			-Branch 		type(String)
				is branch id that user filter
			-ReportedDate 	Type(Date)
				is date that user filter
			-FieldName 		type(String)
				is column name that use to group by
			-ByCategory  	type(String)
				use to check whether user view report by branch or product
		-Return:
			ResultDict 		={ID :Number,
							  ID1:Number,
							  ID2:Number,
							  ..........,
							  ..........,
							  Total:TotalNumber
							  }
	'''
	''' set sortcut for Table Name'''
	LM 		=	MKT_LOAN_AMENDMENT
	LC 		= 	MKT_LOAN_CONTRACT
	LCH 	= 	MKT_LOAN_CONTRACT_HIST
	'''get value from paramenter'''
	GroupBy 			= 	kwargs.get('GroupBy')
	CategoryObj 		= 	kwargs.get('CategoryObj')
	ByCategory 			= 	kwargs.get('ByCategory')
	Branch 				= 	kwargs.get('Branch')
	ReportedDate 		=	kwargs.get('ReportedDate') 
	FieldName 			= 	kwargs.get('FieldName')
	'''Declare variable'''
	MergeIDList 		=	[]
	AmendDict 			= 	{}
 	ContractDict   		= 	{}
	Result 				= 	{}
	TotalLoan			= 	0

	Branch 			= 	Branch.split()
	ReportedDate 	=	ReportedDate.split()

	LoanAmendObj 			= 	db.session.query(LM.LoanID).\
											distinct(LM.LoanID).\
											filter(LM.Operation=='AMT',
											LM.AddDeduct=='1',
											LM.Amount > 0) #AMT 		= Laon Amendment ,AddDeduct 	= 1 mean tha customer top up money to decrease principle		 #filter here

  	if "ALL" not in Branch and Branch :
		LoanAmendObj 		= 	LoanAmendObj.filter(LM.Branch.in_(Branch))

	if len(ReportedDate) == 2:
		LoanAmendObj 		= 	LoanAmendObj.filter(LM.AmendDate >= ReportedDate[0],
													LM.AmendDate <= ReportedDate[1])
		
	elif ReportedDate :
		LoanAmendObj 		= 	LoanAmendObj.filter(LM.AmendDate.in_(ReportedDate))
	''' 
		Type = Number , filter out LoandTerminateObj.ID in LoanAmendObj.ID
	'''
	LoanTermimatedObj 	= 	db.session.query(LM.LoanID.label('ID')).\
											distinct(LM.LoanID).\
											filter(~LM.ID.in_(LoanAmendObj),LM.Operation=='TMN')
											 					#TMN			= Loan Terminate
	if ReportedDate:
		if len(ReportedDate) == 2:
			LoanTermimatedObj 		= 	LoanTermimatedObj.filter(LM.AmendDate >= ReportedDate[0],
															LM.AmendDate <= ReportedDate[1]).\
															subquery()
		elif ReportedDate :
			LoanTermimatedObj 		= 	LoanTermimatedObj.filter(LM.AmendDate.in_(ReportedDate)).\
																subquery()
	else :
		LoanTermimatedObj 			=	LoanTermimatedObj.subquery()

 	'''
 		-Get LOAN_CONTRACT_HIST which  ID is biggest
		-Ex:
			-Befor @ sing are the same string, so we need to find right of @ , which one is biggest 
				LCM1702221657@0
				LCM1702221657@1
				LCM1702221657@2
			-what we want is only LCM1702221657@2
	'''
	LCHObj 			= 	db.session.query(func.substr(LCH.ID,1,13).label("HistID"),func.substr(LCH.ID,15,18)).\
											group_by(func.substr(LCH.ID,1,13),func.substr(LCH.ID,15,18))
 	Dict = dict()
 	ListID = [] # Contain ID of MKT_LOAN_CONTRACT_HIST
 	for Row in LCHObj:
 		ID,sub = Row
 		if ID in Dict:
 			if int(Dict[ID] )< int(sub ):
 				pop = ID+'@'+Dict[ID]
 				ListID.remove(pop)
 				ListID.append(ID+'@'+sub)
 				Dict[ID]=sub

 		else:

	 		Dict.update({
	 						ID :sub
	 					})
	 		ListID.append(ID+'@'+sub)

 	LoanContractHistObj 	= 	db.session.query(func.substr(LCH.ID,1,13).label('ID'),
 												 eval("LCH."+FieldName).label("GroupByField"),
 												 LCH.Branch.label('Branch')).\
 											filter(LCH.ID.in_(ListID)).\
 											subquery() # filter here
	''' 
		Join MKT_LOAN_AMENDMENT with MKT_LOAN_CONTRACT_HIST to find Terminate Amount

	'''
	LoanTermimatedObj 	=	db.session.query(LoanContractHistObj.c.GroupByField,
											 func.count(LoanContractHistObj.c.ID)).\
										join(LoanTermimatedObj,LoanContractHistObj.c.ID==LoanTermimatedObj.c.ID).\
										group_by(LoanContractHistObj.c.GroupByField)# filter

	''' 
		Group By 
	'''
	LoanContractObj 			= 	db.session.query(eval("LC."+FieldName),func.count(LC.ID)).\
												 filter(LC.ID.in_(LoanAmendObj)).\
												group_by(eval("LC."+FieldName)) # filter here 
	
	if "ALL" not in Branch and Branch :
		LoanContractObj 		=	LoanContractObj.filter(LC.Branch.in_(Branch))
		LoanTermimatedObj		= 	LoanTermimatedObj.filter(LoanContractHistObj.c.Branch.in_(Branch))

	''' add loand terminate to dict'''
	if LoanTermimatedObj.first():
		for Row  in LoanTermimatedObj:
			ID,Count 	= 	Row
			TotalLoan 	= 	TotalLoan + Count
			AmendDict.update({ID:Count})
		AmendDict.update({'Total':TotalLoan})
	else :
		for Row in CategoryObj:
			if Row.ID not in AmendDict:
				AmendDict.update({Row.ID:0})
		AmendDict.update({'Total':TotalLoan})
		
	''' Add loan contract to dict'''
	if LoanContractObj.first():
		TotalLoan 		=	0
		for Row  in LoanContractObj:
			ID,Count 	= 	Row
			TotalLoan 	= 	TotalLoan + Count
			ContractDict.update({ID:Count})
		ContractDict.update({'Total':TotalLoan})
	else :
		TotalLoan 		=	0
		for Row in CategoryObj:
			if Row.ID not in ContractDict:
				ContractDict.update({Row.ID:0})
		ContractDict.update({'Total':TotalLoan})

	''' Sum ContractDict and AmendDict'''
	for Row in CategoryObj:
		ID 			= 	Row.ID 
		Amend 		= 	AmendDict.get(ID) if ID in AmendDict else 0 
		Contract 	=	ContractDict.get(ID) if ID in ContractDict else 0
		Sum	 	 	= 	Amend 	+ 	Contract
		Result.update({ID:Sum})
	Total 			= 	AmendDict.get('Total') + ContractDict.get('Total')
	Result.update({'Total':Total})
	return Result

def getCategory(**kwargs):
	ByCategory 		= 	kwargs.get('ByCategory')
	if ByCategory 	== "Branch":
		CategoryObj =  	MKT_BRANCH.query
		GroupBy 	=	MKT_LOAN_CONTRACT.Branch
		FieldName 	= 	"Branch" # find Number of Loan 

	elif ByCategory == 	"LoanProduct" :
		CategoryObj =  	MKT_LOAN_PRODUCT.query
		GroupBy 	=	MKT_LOAN_CONTRACT.LoanProduct
		FieldName 	= 	"LoanProduct"
	Result 	= {
				'CategoryObj'	:	CategoryObj,
				'GroupBy'		:	GroupBy,
				'FieldName'	: 	FieldName
			}
	return Result

def getValueOfPrepaid(**kwargs):
	'''
		-This method use to get LCYPrevMonthBal and LCYCurrentMonthBal
		-Args:
			-CategoryObj 	type(String) 
				CategoryObj can be "MKT_BRANCH" BranchObj or "MKT_LOAN_PRODUCT" ProductObj is base on
				URL paramenter <Branch> is (BranchObj) or <LoanProduct> is(ProductObj)
			-Branch 		type(String)
				is branch id that user filter
			-ReportedDate 	Type(Date)
				is date that user filter
			-FieldName 		type(String)
				is column name that use to group by
			-ByCategory  	type(String)
				use to check whether user view report by branch or product
		-Return:
			ResultDict 		={ID :Amount,
							  ID1:Amount,
							  ID2:Amount,
							  ..........,
							  ..........,
							  Total:TotalAmount
							  }
	''' 
	GroupBy 			= 	kwargs.get('GroupBy')
	CategoryObj 		= 	kwargs.get('CategoryObj')
	ByCategory 			= 	kwargs.get('ByCategory')
	Branch 				= 	kwargs.get('Branch')
	ReportedDate 		=	kwargs.get('ReportedDate') 
	FieldName 			= 	kwargs.get('FieldName')

	AccSetting 			= 	mktsetting.getAccSetting()
	PDPrincipal			=	mktsetting.getAppSetting('PDPrincipal')
	PrincipalTran 		=	AccSetting.PrincipalTran
	PrinciplaList 		= 	[PDPrincipal,PrincipalTran]
	
	LoanTerminateDict 	= 	dict()
	LoanAmendDict		=	{}
	LM 		= 	MKT_LOAN_AMENDMENT
	LC 		= 	MKT_LOAN_CONTRACT
	LCH 	= 	MKT_LOAN_CONTRACT_HIST
	AE 		= 	MKT_ACC_ENTRY
	LoanAmendObj 		=	db.session.query(eval("LC."+FieldName).label("ID"),
												   LC.Currency,
												   func.sum(LM.Amount).label("Amount")).\
										filter(LM.Operation=='AMT',
											   LM.AddDeduct=='1',
											   LM.Amount > 0).\
										join(LM,LC.ID==LM.LoanID).\
										group_by(LC.Currency,
												 eval("LC."+FieldName))

	LCHObj 			= 	db.session.query(func.substr(LCH.ID,1,13).label("HistID"),func.substr(LCH.ID,15,18)).\
											group_by(func.substr(LCH.ID,1,13),func.substr(LCH.ID,15,18))
 	Dict = dict()
 	ListID = [] # Contain ID of MKT_LOAN_CONTRACT_HIST
 	for Row in LCHObj:
 		ID,sub = Row
 		if ID in Dict:
 			if int(Dict[ID] )< int(sub ):
 				pop = ID+'@'+Dict[ID]
 				ListID.remove(pop)
 				ListID.append(ID+'@'+sub)
 				Dict[ID]=sub

 		else:

	 		Dict.update({
	 						ID :sub
	 					})
	 		ListID.append(ID+'@'+sub)

 	LoanContractHistObj 	= 	db.session.query(func.substr(LCH.ID,1,13).label('LoanID'),
 												eval("LCH."+FieldName).label("GroupByField"),
 												LCH.Currency.label("Currency")).\
 											filter(LCH.ID.in_(ListID)).\
 											subquery() 

	LoanAmendTerminateObj 	=	db.session.query(LoanContractHistObj.c.GroupByField.label("ID"),
												     LoanContractHistObj.c.Currency,
												     func.sum(AE.Amount).label('Amount')).\
											filter(LM.Operation=='TMN',
											   	   AE.TransactionDate==LM.AmendDate,
											   	   AE.DebitCredit=='Dr',
											   	   AE.Transaction.in_(PrinciplaList)).\
											join(LM,LoanContractHistObj.c.LoanID==LM.LoanID).\
											join(AE,LoanContractHistObj.c.LoanID==AE.Reference).\
											group_by(LoanContractHistObj.c.Currency,
													 LoanContractHistObj.c.GroupByField)

	Branch 			= 	Branch.split()
	ReportedDate	= 	ReportedDate.split()

	if 'ALL' not in Branch and Branch:
		LoanAmendObj 	= 	LoanAmendObj.filter(LC.Branch.in_(Branch))
		LoanAmendTerminateObj 	= 	LoanAmendTerminateObj.filter(LM.Branch.in_(Branch))	
	if ReportedDate:
		if len(ReportedDate)==2:
			LoanAmendObj 	= 	LoanAmendObj.filter(LM.AmendDate>=ReportedDate[0],
													LM.AmendDate<=ReportedDate[1])
			LoanAmendTerminateObj 	= 	LoanAmendTerminateObj.filter(LM.AmendDate>=ReportedDate[0],
																	 LM.AmendDate<=ReportedDate[1])
		else :
			LoanAmendObj 			= 	LoanAmendObj.filter(LM.AmendDate.in_(ReportedDate))
			LoanAmendTerminateObj 	= 	LoanAmendTerminateObj.filter(LM.AmendDate.in_(ReportedDate))

	if LoanAmendTerminateObj.first():
		for Row in LoanAmendTerminateObj:
			ID 			= 	Row.ID
			Currency 	= 	Row.Currency
			Amount		= 	toBaseCurrency(float(Row.Amount),Currency)

			getAmount 	= 	LoanTerminateDict.get(ID,{}) if ID in LoanTerminateDict else float(0)

			Amount	 	= 	getAmount + Amount
			LoanTerminateDict.update( {
										ID:Amount
								})
	if LoanAmendObj.first():
		for Row in LoanAmendObj:
			ID 			= 	Row.ID
			Currency 	= 	Row.Currency
			Amount		= 	toBaseCurrency(float(Row.Amount),Currency)

			getAmount 	= 	LoanAmendDict.get(ID,{}) if ID in LoanAmendDict else float(0)

			Amount	 	= 	getAmount + Amount
			LoanAmendDict.update( {
										ID:Amount
								})
	Result 	= {}
	Total 	= 0
	for Row in CategoryObj:
		ID 			=	Row.ID 
		Amend 		= 	LoanAmendDict.get(ID) if ID in LoanAmendDict else 0
		Terminate 	=	LoanTerminateDict.get(ID) if ID in LoanTerminateDict else 0
		Amount  	= 	Amend + Terminate 
		Total 		= 	Total + Amount
		Result.update({ID 		: Amount ,
					   'Total'	: Total})
	return Result

def getLCYMonth(Status ='',**kwargs):
	'''
		-This method use to get LCYPrevMonthBal and LCYCurrentMonthBal
		-Args:
			-Status 		type(String)
				if Status == 'Start', get PrepaymentMonthStart else get PrepaymentMontEnd
			-CategoryObj 	type(String) 
				CategoryObj can be "MKT_BRANCH" BranchObj or "MKT_LOAN_PRODUCT" ProductObj is base on
				URL paramenter <Branch> is (BranchObj) or <LoanProduct> is(ProductObj)
			-Branch 		type(String)
				is branch id that user filter
			-ReportedDate 	Type(Date)
				is date that user filter
			-FieldName 		type(String)
				is column name that use to group by
			-ByCategory  	type(String)
				use to check whether user view report by branch or product
		-Return:
			ResultDict 		={ID :result,
							  ID1:result,
							  ID2:result,
							  ..........,
							  ..........,
							  Total:TotalAverage
							  }
	''' 
	CategoryObj 		= 	kwargs.get('CategoryObj')
	ByCategory 			= 	kwargs.get('ByCategory')
	Branch 				= 	kwargs.get('Branch')
	ReportedDate 		=	kwargs.get('ReportedDate') 
	FieldName 			= 	kwargs.get('FieldName')
	TotalAmount 		=	0
	Result 				=	{}
	BankDate 			=	str(mktdate.getBankDate())
	SplitBankDate 		=	BankDate.split('-')
	Year 				=	SplitBankDate[0]
	Month 				=	SplitBankDate[1]
	Day 				=	SplitBankDate[2] #get day of month

	LP 					=	MKT_LOAN_PRODUCT
	LM 					=	MKT_LOAN_AMENDMENT
	CB 					= 	"MKT_CONSOL_BALANCE"
	GLBalBak 			=	"MKT_GL_BALANCE_BACKUP"
	TempTable 			=	GLBalBak if Day=='01' else CB
	GroupByField 		= 	"%s.%s"%(TempTable,FieldName) if ByCategory!= 'LoanProduct' else "LP.ID"
	TableName			= 	TempTable if ByCategory=='LoanProduct' else  "LP"
	LCYMonthBal 		= 	"%s.LCYPrevMonthBal"%TempTable if Status=='Start' else "%s.LCYCurrentMonthBal"%TempTable
	
	LCYMonthBal 		= 	eval(LCYMonthBal)
	GroupByField 		= 	eval(GroupByField)
	CB 					=	MKT_CONSOL_BALANCE
	LoanPorductObj 		=	db.session.query(GroupByField.label("Category"),
													 func.sum(LCYMonthBal).label("Amount")).\
												group_by(GroupByField)
	if Day=='01':
		PreYear 		= 	str(mktdate.getNextMonth(date(int(Year), int(Month), int(Day)), -1))
		SplitPreYear	=	PreYear.split('-')
		Month 			=	SplitPreYear[1]
		TempTable 		=	eval(TempTable)
		LoanPorductObj 	=	LoanPorductObj.filter(TempTable.GLYear==str(Year),
												  TempTable.GLMonth==Month).\
											join(eval(TableName),LP.LNCategory==func.concat(func.left(TempTable.ID,4),
																func.right(TempTable.ID,-6)).label("ID"))
	else:
		LoanPorductObj 		=	LoanPorductObj.join(eval(TableName),CB.ID.like(LP.LNCategory+'.%'))
		
	Branch 				=	Branch.split()
	ReportedDate 		= 	ReportedDate.split()
		
	if 'ALL' not in Branch and Branch:
		LoanPorductObj 	= 	LoanPorductObj.filter(CB.Branch.in_(Branch))
	if LoanPorductObj.first():
		for Row in LoanPorductObj:
			ID 				=	Row.Category
			Amount 			=	Row.Amount
			TotalAmount 	= 	Amount + TotalAmount
			Result.update({ID:Amount})
		Result.update({'Total':TotalAmount})
		
	return Result

def getPortfolioByMonth(Status='',**kwargs):
	'''
		-This method use to get PrepaymentMontEnd and PrepaymentMonthStart
		-Args:
			-Status 		type(String)
				if Status == 'Start', get PrepaymentMonthStart else get PrepaymentMontEnd
			-CategoryObj 	type(String) 
				CategoryObj can be "MKT_BRANCH" BranchObj or "MKT_LOAN_PRODUCT" ProductObj is base on
				URL paramenter <Branch> is (BranchObj) or <LoanProduct> is(ProductObj)
			-Branch 		type(String)
				is branch id that user filter
			-ReportedDate 	Type(Date)
				is date that user filter
			-FieldName 		type(String)
				is column name that use to group by
			-ByCategory  	type(String)
				use to check whether user view report by branch or product
		-Return:
			ResultDict 		={ID :result,
							  ID1:result,
							  ID2:result,
							  ..........,
							  ..........,
							  Total:TotalAverage
							  }
	''' 
	CategoryObj 		= 	kwargs.get('CategoryObj')
	ByCategory 			= 	kwargs.get('ByCategory')
	Branch 				= 	kwargs.get('Branch')
	ReportedDate 		=	kwargs.get('ReportedDate') 
	FieldName 			= 	kwargs.get('FieldName')

	if Status=='Start':
		ResultDict 		= 	getLCYMonth(Status,
										CategoryObj	=	CategoryObj,
										ByCategory 	=	ByCategory,
										Branch 		=	Branch,
										ReportedDate= 	ReportedDate,
										FieldName 	= 	FieldName
										)
		return ResultDict
	else:
		ResultDict 			=	{}
		TotalAmount 		=	0
		PrevMonthDict 		= 	getLCYMonth("Start",
										CategoryObj	=	CategoryObj,
										ByCategory 	=	ByCategory,
										Branch 		=	Branch,
										ReportedDate= 	ReportedDate,
										FieldName 	= 	FieldName
										)
		CurrentMonthDict 	= 	getLCYMonth("",
										CategoryObj	=	CategoryObj,
										ByCategory 	=	ByCategory,
										Branch 		=	Branch,
										ReportedDate= 	ReportedDate,
										FieldName 	= 	FieldName
										)
		for Row in CategoryObj:
			ID 				=	Row.ID 
			PrevAmount 		=	PrevMonthDict.get(ID) if ID in PrevMonthDict else 0
			CurrentMonth 	= 	CurrentMonthDict.get(ID) if ID in CurrentMonthDict else 0 
			EndAmount 		=	PrevAmount 		+ 	CurrentMonth
			ResultDict.update({ID:EndAmount})
		TotalPreMonth  		=	PrevMonthDict.get('Total') if PrevMonthDict.get('Total') else 0
		TotalCurrentMonth 	=	CurrentMonthDict.get('Total') if CurrentMonthDict.get('Total') else 0
		TotalAmount	 		= 	TotalPreMonth +	TotalCurrentMonth
		ResultDict.update({'Total':TotalAmount})
		return ResultDict

def getPercentagePrepayment(**kwargs):
	'''
		-Get percentage of prepayment 
		-Args:
			-CategoryObj 	type(String) 
				CategoryObj can be "MKT_BRANCH" BranchObj or "MKT_LOAN_PRODUCT" ProductObj is base on
				URL paramenter <Branch> is (BranchObj) or <LoanProduct> is(ProductObj)
			-Branch 		type(String)
				is branch id that user filter
			-ReportedDate 	Type(Date)
				is date that user filter
			-FieldName 		type(String)
				is column name that use to group by
			-ByCategory  	type(String)
				use to check whether user view report by branch or product
		-Return
			ResultDict 		={ID :result,
							  ID1:result,
							  ID2:result,
							  ......... 
							  .........,
							  Total:TotalAverage
							  }
		-Formula 
			-Set
				LoanPrepaid 			=	Value of Loan Prepaid 
				PortfolioMonthStart 	=	Portfolio Month Start
				PortfolioMonthEnd		=	Portfolio Month End
				Average 				=	(PortfolioMonthStart+PortfolioMonthEnd)/2
			result 		=	LoanPrepaid/Average 
	'''
	CategoryObj 			= 	kwargs.get('CategoryObj')
	ValueLoanPrepaidDict 	= 	kwargs.get('LoanPrepaid')
	PortfolioMonthEndDict 	= 	kwargs.get('PortfolioMonthEnd')
	PortfolioMonthStartDict = 	kwargs.get('PortfolioMonthStart')
	ResultDict 				=	{}
	TotalAverage 			=	0
	for Row in CategoryObj:
		ID 				=	Row.ID
		LoanPrepaid 	=	ValueLoanPrepaidDict.get(ID) if ID in ValueLoanPrepaidDict else 0
		MonthEnd 		=	PortfolioMonthEndDict.get(ID) if ID in PortfolioMonthEndDict else 0
		MonthStart 		=	PortfolioMonthStartDict.get(ID) if ID in PortfolioMonthStartDict else 0
		Average 	 	= 	(MonthStart + MonthEnd)/2 
		Percentage 		= 	(Decimal(LoanPrepaid)/Decimal(Average))*100 if Average != 0 else 0
		ResultDict.update({ID : Percentage})

	TotalPrepaid 		=	ValueLoanPrepaidDict.get('Total')
	TotalMonthEnd 		= 	PortfolioMonthEndDict.get('Total')
	TotalMonthStart 	=	PortfolioMonthStartDict.get('Total')
	TotalAverage 		=	(TotalMonthEnd+TotalMonthStart)/2
	TotalPercentage 	=	(Decimal(TotalPrepaid)/Decimal(TotalAverage))*100	 if TotalAverage!=0 else 0
	ResultDict.update({'Total':TotalPercentage})

	return ResultDict

@app.route('/Morakot/Report/FF/Prepayment/<ByCategory>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFPrepayment(ByCategory):
	""" Route to view each report """
	try:
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint,ByCategory=ByCategory))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else "ALL" if ByCategory=="Branch" else mktuser.getCurrentBranch()
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate
		ByCategory 		= 	str(ByCategory)
		Result 			=	setReportPrepayment(Branch=Branch,ReportedDate=ReportedDate,ByCategory=ByCategory)
		Parameters 		= 	{"Branch": Branch,"ReportedDate": ReportedDate}
		FilterOption 	=	""

		SearchForm 		= 	FRM_CUSTOM_REPORT_SEARCH_EX()
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)	
	except:
		raise

@app.route('/Morakot/Report/FF/Prepayment/<ByCategory>/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFReportPrepaymentExport(ByCategory):
	""" Route to view each report """
	try:
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else "ALL" if ByCategory=="Branch" else mktuser.getCurrentBranch()
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate

		Result 			=	setReportPrepayment(Branch=Branch,ReportedDate=ReportedDate,ByCategory=ByCategory)
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="LoanPrepaymentBy%s" % ByCategory)

		return response

	except Exception as e:
		raise

def setReportPrepayment(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch")
		ReportedDate 	=	kwargs.get("ReportedDate")
		ByCategory 		= 	kwargs.get("ByCategory")
		Category 		=	'Loan Product' if ByCategory =='LoanProduct' else ByCategory
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Prepayment Summary By %s"%Category})
		ReportHeader.update({"Parameters": {"Branch": Branch,"ReportedDate": ReportedDate}})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=Category, 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Loan Prepaid', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Value Loan Prepaid', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ Portfolio - Month Start', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Portfolio - Month End', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% of Prepayment ', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		
		Data = getPrepaymentByCategory(Branch=Branch,ReportedDate=ReportedDate,ByCategory=ByCategory)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getPrepaymentByCategory(**kwargs):
	"""
		used to to return portfolio report  
	Result=	[
			{	
				1: '1', 
		 		2: 'Bonteay Meanchey',
		 		3: 'BM', 
		 		4: '100', #approval
		 		5: '500,000'$Approval,
		 		6: '200', #Disbursement 
		 		7: '2000',$Disbursement
		 		8: '10', #Active Portfolio
		 		9: '50', $Active Portfolio
		 		10:'1000',Male Active client
		 		11:'2000',Female Active Client 
				12:'3000',Total Active Client
		 	}, 
		 	{	
				1: '2', 
		 		2: 'Seam Reap',
		 		3: 'SR', 
		 		4: '100', #approval
		 		5: '500,000'$Approval,
		 		6: '200', #Disbursement 
		 		7: '2000',$Disbursement
		 		8: '10', #Active Portfolio
		 		9: '50', $Active Portfolio
		 		10:'2000',Male Active client
		 		11:'2000',Female Active Client 
				12:'4000',Total Active Client
		 	}
		]
	"""
	ByCategory 		= 	kwargs.get('ByCategory')
	Result 			= 	[]
	No 				= 	0
	CategoryDict 	= 	getCategory(ByCategory=ByCategory)
	GroupBy 		=	CategoryDict.get('GroupBy')
	CategoryObj 	= 	CategoryDict.get('CategoryObj')
	FieldName 		= 	CategoryDict.get('FieldName')
	Branch 			= 	kwargs.get('Branch')
	ReportedDate 	= 	kwargs.get('ReportedDate')
	
	NumberLoanDict 	= 	getNumberOfLoan(GroupBy 	=GroupBy,
										CategoryObj =CategoryObj,
										ByCategory 	=ByCategory,
										Branch  	=Branch,
										ReportedDate=ReportedDate,
										FieldName 	= FieldName
										)
	ValueLoanPrepaidDict	=	getValueOfPrepaid(GroupBy 		=	GroupBy,
												  CategoryObj	=	CategoryObj,
												  ByCategory 	=	ByCategory,
												  Branch 		=	Branch,
												  ReportedDate 	=	ReportedDate,
												  FieldName	 	=	FieldName)

	PortfolioMonthStart 	=	getPortfolioByMonth('Start',
													   GroupBy 		=	GroupBy,
													   CategoryObj	=	CategoryObj,
													   ByCategory 	=	ByCategory,
													   Branch 		=	Branch,
													   ReportedDate 	=	ReportedDate,
													   FieldName	 	=	FieldName)
	PortfolioMonthEnd 		=	getPortfolioByMonth('End',
													   GroupBy 		=	GroupBy,
													   CategoryObj	=	CategoryObj,
													   ByCategory 	=	ByCategory,
													   Branch 		=	Branch,
													   ReportedDate 	=	ReportedDate,
													   FieldName	 	=	FieldName)

	PercentagePrepaymentDict= 	getPercentagePrepayment(LoanPrepaid 		= 	ValueLoanPrepaidDict,
														PortfolioMonthStart	=	PortfolioMonthStart,
														PortfolioMonthEnd 	=	PortfolioMonthEnd,
														CategoryObj 		= 	CategoryObj)
	for Row in CategoryObj :
		LoanPrepaid 		= 	ValueLoanPrepaidDict.get(Row.ID) if Row.ID in ValueLoanPrepaidDict else 0
		MonthStart 			=	PortfolioMonthStart.get(Row.ID) if Row.ID in PortfolioMonthStart else 0
		MonthEnd 			= 	PortfolioMonthEnd.get(Row.ID) if Row.ID in PortfolioMonthEnd else 0

		if LoanPrepaid>0 or MonthStart>0 or MonthEnd>0:
			No 	+=	1
			Result.append(({	1:{"Value":No,"Class":"text-center"},
							2:{"Value":Row.ID+' -'+Row.Description,"Class":"text-left"},
							3:{"Value":NumberLoanDict.get(Row.ID) if Row.ID in NumberLoanDict else 0},
							4:{"Value":getToMoney(LoanPrepaid)},
							5:{"Value":getToMoney(MonthStart)},
							6:{"Value":getToMoney(MonthEnd)},
							7:{"Value":mktmoney.formatNumber(PercentagePrepaymentDict.get(Row.ID),0,4) 	if Row.ID in PercentagePrepaymentDict else 0}
						},{"Class":"text-right","Style":""}))

	Result.append(({	1:{"Value":''},
					2:{"Value":'Total'},
					3:{"Value":NumberLoanDict.get('Total')} ,
					4:{"Value":getToMoney( ValueLoanPrepaidDict.get('Total'))},
					5:{"Value":getToMoney( PortfolioMonthStart.get('Total'))},
					6:{"Value":getToMoney( PortfolioMonthEnd.get('Total'))},
					7:{"Value":mktmoney.formatNumber(PercentagePrepaymentDict.get('Total'),0,4)}
					},{"Class":"text-right text-bold","Style":""}))
	return Result
