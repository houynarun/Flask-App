from app.LoanAmendment.models 							import  	*
from app.LoanContract.models 							import 		*
from app.AccEntry.models 								import 		*
from app.LoanProduct.models 							import 		*
from app.ConsolBalance.models 							import  	*
from app.GLBalance.models 								import 	 	*
from app.mktcore.imports 								import 		*
from local.FirstFinance.Report.LoanPortfolio.portfolio 		import 		*
import app.AccSetting.views 							as 	AccSetting 
import app.tools.mktsetting 							as mktsetting
import app.tools.mktmoney 								as mktmoney
import app.tools.user           						as mktuser
import app.tools.mktdate 								as mktdate
from local.FirstFinance.tools.mktloan 					import  	*

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	ReportedDate 		=	DateTextField("Reported Date")

def getValueOfPrepaid(**kwargs):
	'''
		-This method use to get LCYPrevMonthBal and LCYCurrentMonthBal
		-Args:
			-CategoryObj 	type(String) 
				CategoryObj can be "MKT_BRANCH" BranchObj or "MKT_LOAN_PRODUCT" ProductObj is base on
				URL paramenter <Branch> is (BranchObj) or <LoanProduct> is(ProductObj)
			-Branch 		type(String)
				is branch id that user filter
			-ReportedDate 	Type(Date)
				is date that user filter
			-FieldName 		type(String)
				is column name that use to group by
			-ByCategory  	type(String)
				use to check whether user view report by branch or product
		-Return:
			ResultDict 		={ID :Amount,
							  ID1:Amount,
							  ID2:Amount,
							  ..........,
							  ..........,
							  Total:TotalAmount
							  }
	''' 
	Branch 				= 	kwargs.get('Branch')
	ReportedDate 		=	kwargs.get('ReportedDate') 

	AccSetting 			= 	mktsetting.getAccSetting()
	PDPrincipal			=	mktsetting.getAppSetting('PDPrincipal')
	PrincipalTran 		=	AccSetting.PrincipalTran
	PrinciplaList 		= 	[PDPrincipal,PrincipalTran]

	LM 		= 	MKT_LOAN_AMENDMENT
	LC 		= 	MKT_LOAN_CONTRACT
	LCH 	= 	MKT_LOAN_CONTRACT_HIST
	AE 		= 	MKT_ACC_ENTRY
	LoanAmendObj 		=	db.session.query(LM.LoanID.label("LoanID"),
											 LC.Currency,
											 LM.Branch,
											 LM.ID,
											 LM.Operation,
											 LM.AddDeduct,
											 LM.Customer,
	 										 LC.LoanProduct,
	 										 LM.Currency,
	 										 LM.AmendDate,
											 LM.Amount.label("Amount")).\
										filter(LM.Operation=='AMT',
											   LM.AddDeduct=='1',
											   LM.Amount > 0).\
										join(LC,LC.ID==LM.LoanID)
	LCHObj 			= 	db.session.query(func.substr(LCH.ID,1,13).label("HistID"),func.substr(LCH.ID,15,18).label('sub'))
 	Dict = dict()
 	ListID = [] # Contain ID of MKT_LOAN_CONTRACT_HIST
 	for Row in LCHObj:
 		ID 	= Row.HistID
 		sub = Row.sub
 		if ID in Dict:
 			if int(Dict[ID] )< int(sub ):
 				pop = ID+'@'+Dict[ID]
 				ListID.remove(pop)
 				ListID.append(ID+'@'+sub)
 				Dict[ID]=sub

 		else:

	 		Dict.update({
	 						ID :sub
	 					})
	 		ListID.append(ID+'@'+sub)

 	LoanContractHistObj 	= 	db.session.query(func.substr(LCH.ID,1,13).label('LoanID'),
 												LCH.Currency.label("Currency"),
 												LCH.LoanProduct.label("LoanProduct")).\
 											filter(LCH.ID.in_(ListID)).\
 											subquery() 

	LoanAmendTerminateObj 	=	db.session.query(LoanContractHistObj.c.LoanID.label("LoanID"),
	 											 LoanContractHistObj.c.Currency,
	 											 LM.Branch,
	 											 LM.ID,
	 											 LM.Operation,
	 											 LM.AddDeduct,
	 											 LM.Customer,
	 											 LoanContractHistObj.c.LoanProduct,
	 											 LM.Currency,
		 										 LM.AmendDate,
												 AE.Amount.label('Amount')).\
											filter(LM.Operation=='TMN',
											   	   AE.TransactionDate==LM.AmendDate,
											   	   AE.DebitCredit=='Dr',
											   	   AE.Transaction.in_(PrinciplaList)).\
											join(LM,LoanContractHistObj.c.LoanID==LM.LoanID).\
											join(AE,LoanContractHistObj.c.LoanID==AE.Reference)

	Branch 			= 	Branch.split()
	ReportedDate	= 	ReportedDate.split()

	if 'ALL' not in Branch and Branch:
		LoanAmendObj 	= 	LoanAmendObj.filter(LC.Branch.in_(Branch))
		LoanAmendTerminateObj 	= 	LoanAmendTerminateObj.filter(LM.Branch.in_(Branch))	
	if ReportedDate:
		if len(ReportedDate)==2:
			LoanAmendObj 	= 	LoanAmendObj.filter(LM.AmendDate>=ReportedDate[0],
													LM.AmendDate<=ReportedDate[1])
			LoanAmendTerminateObj 	= 	LoanAmendTerminateObj.filter(LM.AmendDate>=ReportedDate[0],
																	 LM.AmendDate<=ReportedDate[1])
		else :
			LoanAmendObj 			= 	LoanAmendObj.filter(LM.AmendDate.in_(ReportedDate))
			LoanAmendTerminateObj 	= 	LoanAmendTerminateObj.filter(LM.AmendDate.in_(ReportedDate))
	LoanAmendObj		=	LoanAmendObj.union(LoanAmendTerminateObj)
	

	return LoanAmendObj

@app.route('/Morakot/Report/FF/PrepaymentDetail', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFPrepaymentDetail():
	""" Route to view each report """
	try:
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate
		Result 			=	setReportPrepayment(Branch=Branch,ReportedDate=ReportedDate)
		Parameters 		= 	{"Branch": Branch,"ReportedDate": ReportedDate}
		FilterOption 	=	""

		SearchForm 		= 	FRM_CUSTOM_REPORT_SEARCH_EX()
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)	
	except:
		raise

@app.route('/Morakot/Report/FF/PrepaymentDetail/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFReportPrepaymentDetail():
	""" Route to view each report """
	try:
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate

		Result 			=	setReportPrepayment(Branch=Branch,ReportedDate=ReportedDate)
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="LoanPrepaymentDetail")

		return response

	except Exception as e:
		raise

def setReportPrepayment(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch")
		ReportedDate 	=	kwargs.get("ReportedDate")
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Prepayment Detail"})
		ReportHeader.update({"Parameters": {"Branch": Branch,"ReportedDate": ReportedDate}})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text="Branch", 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'ID', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Loan ID', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Customer', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Loan Product', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Operation', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Add Deduct', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Amount', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'LCYAmount', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Currency', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Amend Date', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
		Data = getPrepaymentDetail(Branch=Branch,ReportedDate=ReportedDate)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getPrepaymentDetail(**kwargs):
	"""
		used to to return portfolio report  
	Result=	[
			{	
				1: '1', 
		 		2: 'Bonteay Meanchey',
		 		3: 'BM', 
		 		4: '100', #approval
		 		5: '500,000'$Approval,
		 		6: '200', #Disbursement 
		 		7: '2000',$Disbursement
		 		8: '10', #Active Portfolio
		 		9: '50', $Active Portfolio
		 		10:'1000',Male Active client
		 		11:'2000',Female Active Client 
				12:'3000',Total Active Client
		 	}, 
		 	{	
				1: '2', 
		 		2: 'Seam Reap',
		 		3: 'SR', 
		 		4: '100', #approval
		 		5: '500,000'$Approval,
		 		6: '200', #Disbursement 
		 		7: '2000',$Disbursement
		 		8: '10', #Active Portfolio
		 		9: '50', $Active Portfolio
		 		10:'2000',Male Active client
		 		11:'2000',Female Active Client 
				12:'4000',Total Active Client
		 	}
		]
	"""
	Result 			= 	[]
	No 				= 	0
	ToLCYAmount 	= 	0 
	Branch 			= 	kwargs.get('Branch')
	ReportedDate 	= 	kwargs.get('ReportedDate')

	LoanAmendObj	=	getValueOfPrepaid(Branch 		=	Branch,
										  ReportedDate 	=	ReportedDate,
										)
	for Row in LoanAmendObj :
		No 	+=	1
		Result.append(({1:{"Value":No,"Class":"text-center"},
						2:{"Value":Row.Branch,"Class":"text-center"},
						3:{"Value":Row.ID},
						4:{"Value":Row.LoanID},
						5:{"Value":Row.Customer,"Class":"text-left"},
						6:{"Value":"%s - %s" % (Row.LoanProduct,getLoanProductDes(Row.LoanProduct)),"Class":"text-left"},
						7:{"Value":Row.Operation},
						8:{"Value":Row.AddDeduct},
						9:{"Value":getToMoney(Row.Amount),"Class":"text-right"},
						10:{"Value":toBaseCurrency(float(Row.Amount),Row.Currency),"Class":"text-right"},
						11:{"Value":Row.Currency},
						12:{"Value":Row.AmendDate},
					},{"Class":"","Style":""}))
		ToLCYAmount +=  toBaseCurrency(float(Row.Amount),Row.Currency)
	Result.append(({1:{"Value":''},
					2:{"Value":'Total','Class':'text-bold text-center'},
					3:{"Value":''},
					4:{"Value":''},
					5:{"Value":''},
					6:{"Value":''},
					7:{"Value":''},
					8:{"Value":''},
					9:{"Value":''},
					10:{"Value":getToMoney(ToLCYAmount)},
					11:{"Value":''},
					12:{"Value":''},
				},{"Class":"text-right text-bold","Style":""}))
	return Result
def getLoanProductDes(ProductID):
	ProductObj 	=	MKT_LOAN_PRODUCT.query.get(ProductID)
	return ProductObj.Description if ProductObj else ""
