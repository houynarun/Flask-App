from app.mktcore.imports 						import *
import app.tools.mktmessage 					as mktmessage
import app.tools.mktdate						as mktdate
from decimal 									import Decimal
from app.tools.mktcustomreport					import *
from app.Customer.models 						import *
from app.PotentialCustomer.models 				import *
from app.LoanApplication.models 				import *
from app.LoanPurpose.models 					import *
from app.LoanProduct.models 					import *
from app.Branch.models 							import *
from app.Officer.models 						import *
from app.User.models 							import *
from local.FirstFinance.Customer.referalsource 	import *
import app.tools.mktaddress 					as mktaddress
import local.FirstFinance.Report.LoanPortfolio.portfolio 	as loanportfolio
import local.FirstFinance.tools.mktloan  		as mktloan
import app.tools.mktmoney 						as mktmoney
import app.tools.user           				as mktuser
import app.resource.report.mktuserfunction 		as mktuserfunction

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	ReportedDate 		=	DateTextField("Reported Date")
class FRM_CUSTOM_REPORT_SEARCH_PIPELINE(FRM_CUSTOM_REPORT_SEARCH):
	ApplicationStatus 	=	SelectField('Application Status',
							choices=[('', '--None--'),
									 ('0','New'),
									 ('1','Submitted'),
									 ('2','Reviewed'),
									 ('3','Approved'),
									 ('4','Rejected'),
									 ('5','Cancelled'),
									 ('6','Closed')
									 ],
							coerce=str
						)

	AppliedDate 		=	DateTextField("Applied Date")
	ContactDate 		=	DateTextField("Contact Date")

APP_STATUS  	={	'0':'New',
					'1':'Submitted',
					'2':'Reviewed',
					'3':'Approved',
					'4':'Rejected',
					'5':'Cancelled',
					'6':'Closed'
				}
SOURCE_OF_INCOME 	=	{
							'1':'Salaried Employee',
							'2':'Worker',
							'3':'Civil Servant',
							'4':'Self-Employed'
						}
def getDetailInquiryByBranch(**kwargs):
	'''
		This method get detail inquiry by branch
		
		Args:
			
		Return:
			ListDict 	= [{	1:	No,
								2:	FullName,
								3:	Mobile1,
								4:	DateOfContact,
								5:	LoanPurpose,
								6:	ProductInterest,
								7:	LoanAmount,
								8:	Address,
								9:	Description ,
								10:	AssignTo
						}]
	'''
	Branch 			=	kwargs.get('Branch')
	ReportedDate	=	kwargs.get('ReportedDate')
	ResultList		=	[]
	No 				=	0
	TotalAmount 	=	0
	CUS  			=	MKT_CUSTOMER
	PO 				=	MKT_PO_CUSTOMER
	RS 				=	MKT_REFERAL_SOURCE
	PotentialCustomerObj 		= 	db.session.query(PO.ID,
													 CUS.ID.label("CustomerID"),
													 PO.FirstNameEn,
													 PO.LastNameEn,
													 PO.Mobile1,
													 PO.DateOfContact,
													 PO.ProductInterest,
													 PO.LoanAmount,
													 PO.HouseNo,
													 PO.Street,
													 PO.Village,
													 PO.Commune,
													 PO.District,
													 PO.Province,
													 # RS.Description,
													 PO.AssignTo,
													 PO.Branch
													 ).\
												outerjoin(CUS,CUS.PotentialCustomer==PO.ID)
												# outerjoin(RS,CUS.ReferralSource==RS.ID)
	Branch 			=	Branch.split()
	ReportedDate 	=	ReportedDate.split()
	if 'ALL' not in Branch and Branch:
		PotentialCustomerObj 		=	PotentialCustomerObj.filter(PO.Branch.in_(Branch))
	
	if ReportedDate:
		if len(ReportedDate)==2:
			PotentialCustomerObj 		=	PotentialCustomerObj.filter(PO.DateOfContact>=ReportedDate[0],
																		PO.DateOfContact<=ReportedDate[1])
		else :
			PotentialCustomerObj 		=	PotentialCustomerObj.filter(PO.DateOfContact.in_(ReportedDate))

	if PotentialCustomerObj.first():
		for Row in PotentialCustomerObj:
			No +=1
			ID 				=	Row.ID
			CustoemrID 		=	Row.CustomerID
			FirstNameEn 	=	Row.FirstNameEn
			LastNameEn		=	Row.LastNameEn
			Mobile1 		=	Row.Mobile1
			DateOfContact 	=	Row.DateOfContact
			ProductInterest	=	getProductType(Row.ProductInterest)
			LoanAmount		=	Row.LoanAmount if Row.LoanAmount else 0
			HouseNo 		=	Row.HouseNo
			Street 			=	Row.Street
			Village 		=	Row.Village
			Commune 		=	Row.Commune
			District 		=	Row.District
			Province		=	Row.Province
			# Description		=	Row.Description if Row.Description else ""	#Description of referal source
			AssignTo		=	Row.AssignTo
			# LoanPurpose		=	getLoanPurpose(CustoemrID)
			Address 		=	mktaddress.getAddress(ProvinceID=Province,
										   DistrictID=District,
										   CommuneID=Commune,
										   VillageID=Village,
										   HouseNo=HouseNo,
										   Street=Street,
										   Locale='en',
										   ShowLabel=False)
			Branch 			= 	Row.Branch
			FullName 		=	LastNameEn+ ' '+FirstNameEn 
			CustoemrDict	=	{	1:	{'Value':No,'Class':'text-center'},
									2:	{'Value':Branch},
									3:	{'Value':FullName},
									4:	{'Value':Mobile1},
									5:	{'Value':DateOfContact},
									6:	{'Value':ProductInterest},
									7:	{'Value':loanportfolio.getToMoney(LoanAmount),'Class':'text-right'},
									8:	{'Value':Address},
									9:	{'Value':getUser(AssignTo)}
								}
			ResultList.append((CustoemrDict,{}))
			TotalAmount 	=TotalAmount+LoanAmount
		CustoemrDict	=	{	1:	{'Value':''},
								2:	{'Value':''},
								3:	{'Value':'Total','Class':'text-bold'},
								4:	{'Value':''},
								5:	{'Value':''},
								6:	{'Value':''},
								7:	{'Value':loanportfolio.getToMoney(TotalAmount),'Class':'text-right text-bold'},
								8:	{'Value':''},
								9:	{'Value':''}
							}
		ResultList.append((CustoemrDict,{}))
	return ResultList
def getLoanPurpose(ID):
	'''
	ID =CustomerID 
	'''
	LA 					=	MKT_LOAN_APPLICATION
	LP 					=	MKT_LOAN_PURPOSE
	LoanApplicationObj	=	db.session.query(LA.ID,LP.Description).\
										filter(LA.LNCustomerID==ID).\
										join(LP,LP.ID ==LA.LoanPurpose).\
										order_by(LA.AppDate).first()
	if LoanApplicationObj:
		return LoanApplicationObj.Description
	else:
		return ''
def getProductType(ProductID):
	LoanPorductObj 		= 	db.session.query(MKT_LOAN_PRODUCT.Description).filter(MKT_LOAN_PRODUCT.ID==ProductID).first()
	if LoanPorductObj:
		return LoanPorductObj.Description
	else :
		return ""
def getUser(UserID):
	UserObj 		=	db.session.query(MKT_USER.DisplayName).\
									filter(MKT_USER.ID== UserID).first()
	return UserObj.DisplayName if UserObj else ""

@app.route('/Morakot/Report/FF/InquiryDetail', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFReportDetailInquiry():
	""" Route to view each report """
	try:
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		SystemBankDate 	= str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate
		Result 			=	getReportDetailInquiry(Branch=Branch,ReportedDate=ReportedDate)
		Parameters 		= 	{"Branch": Branch,"ReportedDate": ReportedDate}
		FilterOption 	=	""

		SearchForm 		= 	FRM_CUSTOM_REPORT_SEARCH_EX()
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)		
	except:
		raise

@app.route('/Morakot/Report/FF/InquiryDetail/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFReportDetailInquiryExport():
	""" Route to view each report """
	try:
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else ""

		Result 			=	getReportDetailInquiry(Branch=Branch,ReportedDate=ReportedDate)
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="DetailInquiryByBranch")

		return response

	except Exception as e:
		raise

def getReportDetailInquiry(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch")
		ReportedDate 	=	kwargs.get("ReportedDate")

		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Detail Inquiry By Branch"})
		ReportHeader.update({"Parameters": kwargs})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch',
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Name of Clients', 
                                    Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Contact Number', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Contact Date', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Product Type', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Request Amount', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Address', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Staffs Name', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		Data = getDetailInquiryByBranch(Branch=Branch,ReportedDate=ReportedDate)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

#Inquiry Pipeline by branch or products

@app.route('/Morakot/Report/FF/InquiryPipeline/<ByCategory>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFReportInquiryPipeLine(ByCategory):
	""" Route to view each report """
	try:		
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint,ByCategory=ByCategory))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else "ALL"
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else ""

		Result 			=	getReportInquiryPipeLine(Branch=Branch,ReportedDate=ReportedDate,ByCategory=ByCategory)
		Parameters 		= 	{"Branch": Branch,"ReportedDate": ReportedDate}
		FilterOption 	=	""

		SearchForm 		= 	FRM_CUSTOM_REPORT_SEARCH()
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)
	except:
		raise

@app.route('/Morakot/Report/FF/InquiryPipeline/<ByCategory>/Excel', methods=['GET'])
@checkLogOutSession	
@checkLogOutTime
def getFFReportInquiryPipeLineExport(ByCategory):
	""" Route to view each report """
	try:
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else ""
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate
		Result 			=	getReportInquiryPipeLine(Branch=Branch,ReportedDate=ReportedDate,ByCategory=ByCategory)
		ReportTitle 	= 	"SummaryofInquiryAndPipelineBy %s"%ByCategory
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName=ReportTitle)

		return response

	except Exception as e:
		raise

def getReportInquiryPipeLine(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch")
		ReportedDate 	=	kwargs.get("ReportedDate")
		ByCategory		=	kwargs.get("ByCategory")

		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportTitle 	= 	"Summary of Inquiry And Pipeline by %s"%ByCategory
		ReportHeader.update({"ReportTitle": ReportTitle})
		ReportHeader.update({"Parameters": {"Branch":Branch}})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
                                            Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
                                            Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Inquiry', 
                                            Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Loans', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ of Loans', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="D")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Conversion rate\n from Inquiry \nto Application\n (Amount applied/\n total inquiry)', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Pipeline', 
                                            Rowspan=0,Colspan=3,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# of Loans', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$ of Loans', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Conversion rate\n from Application\n to Approval\n (Total Approval/\n Total Applied)', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="H")

		Data = getRecordInquiryPipeLine(Branch=Branch,ReportedDate=ReportedDate,ByCategory=ByCategory)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise


def getRecordInquiryPipeLine(**kwargs):
	Branch 			= 	kwargs.get("Branch")
	ReportedDate 	=	kwargs.get("ReportedDate")
	ByCategory 		=	kwargs.get('ByCategory')
	CategoryDict 	=	getCategory(ByCategory=ByCategory)

	CategoryObj 	=	CategoryDict.get('CategoryObj')
	ProductObj 		=	CategoryDict.get('ProductObj')
	FieldName		=	CategoryDict.get('FieldName')
	NumberPoCustomerDict 		=	getNumberPoCustomer(Branch 			= 	Branch,
														ReportedDate 	=	ReportedDate,
														FieldName		= 	FieldName,
														ByCategory 		=	ByCategory)
	AmountInquiryDict 			=	getInquiryAmount(Branch 			=	Branch,
													 FieldName 			=	FieldName,
													 ByCategory 		=	ByCategory)
	InquiryRate 				=	getInquiryRate(AmountInquiryDict,
												   Branch 			=	Branch,
												   FieldName 		=	FieldName,
												   ByCategory 		=	ByCategory,
												   CategoryObj 		=	CategoryObj)
	NumberAppDict				=	getNumberLoan(Branch 		=	Branch,
												  ByCategory 	=	ByCategory)
	AmountAppDict 				=	getAmountLoan(Status=1,ApprovedAmount='Y',
												  Branch 		=	Branch,
												  ByCategory	= 	ByCategory)#Approved Amount
	AppliedAmountDict 			=	getAmountLoan(
												  Branch 		=	Branch,
												  ByCategory 	= 	ByCategory)#Applied Amount
	PipelineRateDict 			=	getPipelineRate(AmountAppDict		= 	AmountAppDict,
													AppliedAmountDict	= 	AppliedAmountDict,
													CategoryObj 		= 	CategoryObj)
	
	RecordRow 	= []

	No 			= 	0
	for Row in CategoryObj:

		ID 					= 	Row.ID
		Number 				= 	NumberPoCustomerDict.get(ID) if ID in NumberPoCustomerDict else 0
		AmountInquiry 		=	AmountInquiryDict.get(ID) if ID in AmountInquiryDict else 0
		Rate 				=	InquiryRate.get(ID) if ID in InquiryRate else 0
		NumberApp 			=	NumberAppDict.get(ID) if ID in NumberAppDict else 0
		# AmountApp 			=	AmountAppDict.get(ID) if ID in AmountAppDict else 0
		AppliedAmount 		=	AppliedAmountDict.get(ID) if ID in AppliedAmountDict else 0
		PipelineRate 		=	PipelineRateDict.get(ID) if ID in PipelineRateDict else 0

		if (Number or AmountInquiry or NumberApp ) > 0 :
			No 					+= 	1
			RecordRow.append(({
								1:{'Value':No,'Class':'text-center'},
								2:{'Value':Row.ID+'- '+ Row.Description,'Class':'text-left'},
								3:{'Value':Number if Number else '0'},
								4:{'Value':loanportfolio.getToMoney(AmountInquiry)},
								5:{'Value':mktmoney.formatNumber(Rate,4)},
								6:{'Value':NumberApp if NumberApp else 0},
								7:{'Value':loanportfolio.getToMoney(AppliedAmount)},
								8:{'Value': loanportfolio.getToMoney(PipelineRate)}
								},
								{'Class':'text-right'}))
	RecordRow.append(({
						1:{'Value':''},
						2:{'Value':'Total','Class':'text-bold'},
						3:{'Value':NumberPoCustomerDict.get('Total',0) },
						4:{'Value':loanportfolio.getToMoney(AmountInquiryDict.get('Total',0))},
						5:{'Value':''},
						6:{'Value':NumberAppDict.get('Total',0)},
						7:{'Value':loanportfolio.getToMoney(AppliedAmountDict.get('Total',0)),'Class':'text-right'},
						8:{'Value':''}
						},{'Class':'text-right text-bold'}
						))
	return RecordRow

def getNumberPoCustomer(**kwargs):
	'''
	-Get number of potential customer 
	-Return:
		Result ={ID:Value,
				ID:Value,
				ID:Value}
		note*:
			ID can be BranchID or LoanID depend on ByCategory
			Value is percentage
	'''
	Branch 			=	kwargs.get('Branch')
	ReportedDate	=	kwargs.get('ReportedDate')
	CategoryObj 	=	kwargs.get('CategoryObj')
	FieldName		=	kwargs.get('FieldName')
	ByCategory 		=	kwargs.get('ByCategory')

	PO 				=	MKT_PO_CUSTOMER
	FieldName 		=	'PO.Branch' if ByCategory =='Branch' else "PO.ProductInterest"

	PoCustomerObj 	=	db.session.query(func.count(eval(FieldName)).label('Number'),
													eval(FieldName).label('ID')).\
										group_by(eval(FieldName))

	Branch 			=	Branch.split()
	ReportedDate 	=	ReportedDate.split()
	'''
		Filter here
	'''
	if "ALL" not in Branch and Branch :
		PoCustomerObj 		=	PoCustomerObj.filter(PO.Branch.in_(Branch))
	ResultDict 	=	{}
	Total 		=	0
	if PoCustomerObj.first():
		for Row in PoCustomerObj:
			BranchID 		=	Row.ID
			Number 			= 	Row.Number
			Total 			=	Number+ Total
			ResultDict.update({BranchID:Number})
		ResultDict.update({'Total':Total})
	return ResultDict

def getCategory(**kwargs):
	ByCategory 		=	kwargs.get('ByCategory')
	if ByCategory	== 	'LoanProduct':
		Result 		=	{
							'CategoryObj' 	:	MKT_LOAN_PRODUCT.query ,
							'FieldName'	  	:	'ProductInterest'
						}
	elif ByCategory == 'Branch':
		Result 		=	{
							'CategoryObj' 	:	MKT_BRANCH.query,
							'FieldName'	  	:	'ProductInterest'
						}
	return Result

def getInquiryAmount(**kwargs):
	'''
	-get value loan amount in PO Customer
	-Return:
		Result ={ID:Value,
				ID:Value,
				ID:Value}
		note*:
			ID can be BranchID or LoanID depend on ByCategory
			Value is percentage
	'''
	Branch 			=	kwargs.get('Branch')
	ReportedDate	=	kwargs.get('ReportedDate')
	ByCategory 		=	kwargs.get('ByCategory')

	TotalAmount		=	0
	FieldCat 		=	None
	ResultDict 		=	{}
	PO 				=	MKT_PO_CUSTOMER
	FieldCat 		=	"PO.Branch" if ByCategory=='Branch' else "PO.ProductInterest"

	PoCustomerObj 	= 	db.session.query(eval(FieldCat).label('ID'),
									func.sum(PO.LoanAmount).label('Amount'),
									PO.Currency).\
									group_by(eval(FieldCat),PO.Currency)
	Branch 			=	Branch.split()
	if 'ALL' not in Branch and Branch :
		PoCustomerObj 	=	PoCustomerObj.filter(PO.Branch.in_(Branch))	

	if PoCustomerObj.first():
		for Row in PoCustomerObj:
			ID 				=	Row.ID
			Currency 		=	Row.Currency
			Amount 			=	Row.Amount
		 	OldAmount 		=	ResultDict.get(ID) if ID in ResultDict else 0 #check if ID already have 
			Amount 			= 	Decimal(Amount) + Decimal(OldAmount)

			TotalAmount 	=   TotalAmount+mktloan.toBaseCurrency(float(Row.Amount),Currency)

			ResultDict.update({
								ID:Amount
				})
		ResultDict.update({'Total':TotalAmount})
	return ResultDict

def getInquiryRate(AmountInquiryDict,**kwargs):
	'''
	-Get percentage of loan inquiry
	-Args:
		AmountInquiryDict 	type(Dict): dict of sum PO.Amount by group by Branch or Loan Product
	-Return:
		Result ={ID:Value,
				ID:Value,
				ID:Value}
		note*:
			ID can be BranchID or LoanID
			Value is percentage
	'''
	Branch 				=	kwargs.get('Branch')
	CategoryObj 		=	kwargs.get('CategoryObj')
	ByCategory 			=	kwargs.get('ByCategory')
	CUS 				=	MKT_CUSTOMER
	PO 					=	MKT_PO_CUSTOMER
	LA 					=	MKT_LOAN_APPLICATION
	AppliedAmountDict 	=	{}
	FieldName			=	eval('LA.Branch') if ByCategory=="Branch" else eval("LA.LoanProduct")
	CustomerObj 		= 	db.session.query(FieldName.label('ID'),
									func.sum(LA.AppliedAmount).label('AppliedAmount'),
									LA.Currency).\
									filter(LA.AppStatus=='3').\
									join(CUS,LA.LNCustomerID==CUS.ID).\
									join(PO,CUS.PotentialCustomer==PO.ID).\
									group_by(FieldName,LA.Currency)

	Branch 			=	Branch.split()
	if 'ALL' not in Branch and Branch :
		CustomerObj 		=	CustomerObj.filter(PO.Branch.in_(Branch))

	if CustomerObj.first():
		for Row in CustomerObj:
			ID 				=	Row.ID
			AppliedAmount 	= 	mktloan.toBaseCurrency(float(Row.AppliedAmount),Row.Currency)
			Currency 		=	Row.Currency
			OldAmount 		=	AppliedAmountDict.get(ID) if ID in AppliedAmountDict else 0
			AppliedAmount 	=	Decimal(AppliedAmount) + Decimal(OldAmount)
			AppliedAmountDict.update({ID:AppliedAmount})

	ResultDict ={}
	if CategoryObj.first():
		for Row in CategoryObj:
			ID 				=		Row.ID 
			Amount 			=		AppliedAmountDict.get(ID) if ID in AppliedAmountDict else 0
			TotalInquiry 	=		AmountInquiryDict.get(ID) if ID in AmountInquiryDict else 0
			Rate 			=		(Amount/TotalInquiry)*100 if TotalInquiry !=0 else 0
			ResultDict.update({ID:Rate})
	return ResultDict

	#			Pipe Line

def getNumberLoan(**kwargs):
	'''
	-Get Number of Loan application where status  == approved(3)
	-Return:
		Result ={ID:Value,
				ID:Value,
				ID:Value}
		note*:
			ID can be BranchID or LoanID
			Value is percentage
	'''
	Branch 				=	kwargs.get("Branch")
	ByCategory 			=	kwargs.get('ByCategory')
	ResultDict			=	{}
	TotalLoan 			=	0
	LA 					=	MKT_LOAN_APPLICATION
	FiedName 			=	eval("LA.Branch") if ByCategory == "Branch" else eval("LA.LoanProduct")
	LoanApplicationObj 	=	db.session.query(FiedName.label('ID'),func.count(FiedName).label('Count')).\
										group_by(FiedName)
	Branch 				=	Branch.split()
	if 'ALL' not in Branch and Branch:
		LoanApplicationObj 		=	LoanApplicationObj.filter(LA.Branch.in_(Branch))

	for Row in LoanApplicationObj:
		ID 				=	Row.ID
		Count 			=	Row.Count
		TotalLoan 		+= 	Count
		ResultDict.update({ID:Count})
	ResultDict.update({'Total':TotalLoan})
	return ResultDict

def getAmountLoan(Status='',ApprovedAmount='',**kwargs):
	'''
	-Get Amount,AppliedAmount in  Loan application where status  == approved(3)
	-Args:
		Status 	type(int) 	: Status=1 get AppliedAmount,Status !=1 get Amount (Loan Application)
	-Return:
		Result ={ID:Value,
				ID:Value,
				ID:Value}
		note*:
			ID can be BranchID or LoanID
			Value is percentage
	'''
	Branch 				=	kwargs.get("Branch")
	ByCategory 			=	kwargs.get("ByCategory")
	ResultDict			=	{}
	TotalLoan 			=	0
	LA 					=	MKT_LOAN_APPLICATION
	Field 				=	eval("LA.Amount") if Status==1 else eval("LA.AppliedAmount")
	GroupByField 		=	eval("LA.Branch") if ByCategory== "Branch" else eval("LA.LoanProduct")

	LoanApplicationObj 	=	db.session.query(GroupByField.label('ID'),
											 func.sum(Field).label('ApprovedAmount'),
											 LA.Currency).\
										group_by(GroupByField,LA.Currency)
	if ApprovedAmount=='Y':
	 	LoanApplicationObj 	=LoanApplicationObj.filter(LA.AppStatus=="3")

	Branch 				=	Branch.split()
	if 'ALL' not in Branch and Branch:
		LoanApplicationObj 		=	LoanApplicationObj.filter(LA.Branch.in_(Branch))

	for Row in LoanApplicationObj:
		ID 				=	Row.ID
		ApprovedAmount 	=	mktloan.toBaseCurrency(float(Row.ApprovedAmount),Row.Currency) #convert to base currency
		OldAmount 		=	ResultDict.get(ID) if ID in ResultDict else 0 #check if ID already have and get it
		ApprovedAmount 	= 	Decimal(ApprovedAmount) + Decimal(OldAmount)
		
		TotalLoan 		+= 	ApprovedAmount
		ResultDict.update({ID:ApprovedAmount})
	ResultDict.update({'Total':TotalLoan})
	return ResultDict

def getPipelineRate(**kwargs):
	'''
	-get percentage of pipline
	-Note: LA= "MKT_LOAN_APPLICATION"
	-Formular:
		Rate =	(Amount(LA.Amount)/AppliedAmount(LA.AppliedAmount))*100
	-Args:
		AmountAppDict 		type(Dict) :contain dictionary of Approved Amount that have key is branch ID or LoanID and value are amount
		AppliedAmountDict 	type(Dict) :contain dictionary of Applied Amount that have key is branch ID or LoanID  and value are amount
		CategoryObj 		type(Calss):it can be obj of class "MKT_BRANCH" or class "MKT_LOAN_PRODUCT", to knwo more check in getCategory() method
	-Return:
		Result ={ID:Value,
				ID:Value,
				ID:Value}
		note*:
			ID can be BranchID or LoanID
			Value is percentage
	'''
	AmountAppDict 		=	kwargs.get('AmountAppDict')
	AppliedAmountDict 	=	kwargs.get('AppliedAmountDict')
	CategoryObj	 		= 	kwargs.get('CategoryObj')
	ResultDict 			=	{}

	for Row in CategoryObj:
		ID 					=	Row.ID 
		ApprovedAmount 		=	AmountAppDict.get(ID) if ID in AmountAppDict else 0
		AppliedAmount 		=	AppliedAmountDict.get(ID) if ID in AppliedAmountDict else 0
		Result 				=	(ApprovedAmount/ AppliedAmount)*100 if AppliedAmount !=0 else 0
		ResultDict.update({ID :Result})
	return ResultDict

# Detail Pipeline by Branch

@app.route('/Morakot/Report/FF/PipelineDetail', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFReportPipelineDetail():
	""" Route to view each report """
	try:		
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		SystemBankDate 		= 	str(mktdate.getBankDate())
		Branch 				=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		AppliedDate 		= 	request.args.get("AppliedDate") if "AppliedDate" in request.args else SystemBankDate
		ContactDate 		= 	request.args.get("ContactDate") if "ContactDate" in request.args else SystemBankDate
		ApplicationStatus 	= 	request.args.get("ApplicationStatus") if "ApplicationStatus" in request.args else ""

		Result 			=	getReportPipelineDetail(Branch 		= Branch,
													AppliedDate = AppliedDate,
													ContactDate = ContactDate,
													ApplicationStatus=ApplicationStatus
													)
		Parameters 		= 	{"Branch": Branch,"AppliedDate": AppliedDate,"ContactDate":ContactDate,"ApplicationStatus":ApplicationStatus}
		FilterOption 	=	""

		SearchForm 		= 	FRM_CUSTOM_REPORT_SEARCH_PIPELINE()
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)
	except:
		raise

@app.route('/Morakot/Report/FF/PipelineDetail/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFReportPipelineDetailExport():
	""" Route to view each report """
	try:
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else mktuser.getCurrentBranch()
		AppliedDate 	= 	request.args.get("AppliedDate") if "AppliedDate" in request.args else SystemBankDate
		ContactDate 	= 	request.args.get("ContactDate") if "ContactDate" in request.args else SystemBankDate
		ApplicationStatus 	= 	request.args.get("ApplicationStatus") if "ApplicationStatus" in request.args else ""

		Result 			=	getReportPipelineDetail(Branch=Branch,
													AppliedDate=AppliedDate,
													ContactDate=ContactDate,
													ApplicationStatus =ApplicationStatus)
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="DetailsPipelineReportByBranch")

		return response

	except Exception as e:
		raise

def getReportPipelineDetail(**kwargs):
	try:
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportHeader.update({"ReportTitle": "Details Pipeline Report By Branch"})
		ReportHeader.update({"Parameters": kwargs})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Name of Clients', 
                                    Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Contact Number', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Contact Date',
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Loan Purpose', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Product Type', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Request Amount', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Address', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Referal Source', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="J")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Applied Date', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Source of Income', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="L")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Loan Status', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="M")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Staffs Name', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="N")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'ApproveAmount', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="O")

		Data = getPipelineDetail(**kwargs)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getPipelineDetail(**kwargs):
	Branch 			=	kwargs.get('Branch')
	AppliedDate 	=	kwargs.get('AppliedDate')
	ContactDate 	=	kwargs.get('ContactDate')
	ApplicationStatus 	= 	kwargs.get("ApplicationStatus")
	ResultList		=	[]

	CUS 			=	MKT_CUSTOMER
	LA 				=	MKT_LOAN_APPLICATION
	PO 				=	MKT_PO_CUSTOMER
	LoanApplicationObj 		=	db.session.query(LA.LoanPurpose,
												 LA.LNCustomerID,
												 CUS.LastNameEn,
												 CUS.FirstNameEn,
												 CUS.Mobile1,
												 PO.DateOfContact,
												 LA.LoanProduct,
												 LA.AppliedAmount,
												 CUS.Province,
												 CUS.District,
												 CUS.Commune,
												 CUS.Village,
												 CUS.HouseNo,
												 CUS.Street,
												 CUS.ReferralSource,
												 CUS.SourceOfIncome,
												 LA.AppDate,
												 LA.AppStatus, # loan Statuss
												 CUS.Officer,
												 LA.Amount,
												 LA.Branch
												 ).\
											join(CUS,LA.LNCustomerID==CUS.ID).\
											outerjoin(PO,PO.ID==CUS.PotentialCustomer).\
											order_by(CUS.LastNameEn,CUS.FirstNameEn)
	Branch 			=	Branch.split()
	AppliedDate 	=	AppliedDate.split()
	ContactDate 	=	ContactDate.split()

	if 'ALL' not in Branch and Branch:
		LoanApplicationObj 		=LoanApplicationObj.filter(LA.Branch.in_(Branch))

	if AppliedDate:
		if len(AppliedDate) ==2:
			LoanApplicationObj 		=	LoanApplicationObj.filter(LA.AppDate >= AppliedDate[0],
																  LA.AppDate <= AppliedDate[1])
		else :
			LoanApplicationObj 		=	LoanApplicationObj.filter(LA.AppDate.in_(AppliedDate))

	if ContactDate:
		if len(ContactDate) ==2:
			LoanApplicationObj 		=	LoanApplicationObj.filter(PO.DateOfContact >= ContactDate[0],
																  PO.DateOfContact <= ContactDate[1])
		else :
			LoanApplicationObj 		=	LoanApplicationObj.filter(PO.DateOfContact.in_(ContactDate))

	if ApplicationStatus :
		LoanApplicationObj 			=	LoanApplicationObj.filter(LA.AppStatus==ApplicationStatus)
	if LoanApplicationObj.first():
		Index 					= 	0
		TotalAppliedAmount 		= 	0
		for Row in LoanApplicationObj:
			Index 				+=	1
			CustomerID 			=	Row.LNCustomerID
			LoanPurpose 		=	getLoanPurpose1(Row.LoanPurpose)
			LastNameEn 			=	Row.LastNameEn
			FirstNameEn 		=	Row.FirstNameEn
			Mobile1 			=	Row.Mobile1
			DateOfContact 		=	Row.Dlocal/FirstFinance/Report/LoanInquiry/views.pyateOfContact if Row.DateOfContact else ''
			ProductType 		=	getProductType(Row.LoanProduct)
			AppliedAmount 		=	Row.AppliedAmount if Row.AppliedAmount else float(0)
			Province 			=	Row.Province
			District 			=	Row.District
			Commune 			=	Row.Commune
			Village 			=	Row.Village
			HouseNo 			=	Row.HouseNo
			Street 				=	Row.Street
			ReferralSource 		=	getReferalSource(Row.ReferralSource)
			AppliedDate 		=	Row.AppDate
			SourceOfIncome 		=	getSourceOfIncome(Row.SourceOfIncome)
			AppStatus 			=	getAppStatus(Row.AppStatus)
			Officer 			=	getOfficer( Row.Officer)
			ApprovedAmount 		=	Row.Amount if Row.Amount else 0

			FullName 			=	LastNameEn +' '+FirstNameEn
			Address 			=	mktaddress.getAddress(ProvinceID=Province,
										   DistrictID=District,
										   CommuneID=Commune,
										   VillageID=Village,
										   HouseNo=HouseNo,
										   Street=Street,
										   Locale='en',
										   ShowLabel=False)
			Branch 				=	Row.Branch
			TotalAppliedAmount	+= 	Decimal(AppliedAmount)
			ResultList.append(({
								1:{'Value':Index,'Class':'text-center'},
								2:{'Value':Branch},
								3:{'Value':FullName},
								4:{'Value':Mobile1},
								5:{'Value':DateOfContact},
								6:{'Value':LoanPurpose},
								7:{'Value':ProductType},
								8:{'Value':loanportfolio.getToMoney(AppliedAmount),'Class':'text-right'},
								9:{'Value':Address},
								10:{'Value':ReferralSource},
								11:{'Value':AppliedDate},
								12:{'Value':SourceOfIncome},
								13:{'Value':AppStatus},
								14:{'Value':Officer},
								15:{'Value':loanportfolio.getToMoney(ApprovedAmount)}
							},{}
				))
		#total applied amount
		ResultList.append(({
							1:{'Value':''},
							2:{'Value':''},
							3:{'Value':'Total','Class':'text-right text-bold'},
							4:{'Value':''},
							5:{'Value':''},
							6:{'Value':''},
							7:{'Value':''},
							8:{'Value':loanportfolio.getToMoney(TotalAppliedAmount),'Class':'text-right text-bold'},
							9:{'Value':''},
							10:{'Value':''},
							11:{'Value':''},
							12:{'Value':''},
							13:{'Value':''},
							14:{'Value':''},
							15:{'Value':''}
						},{}
			))
	return ResultList

def getLoanPurpose1(LoanID):
	LoanPurposeObj 		=	db.session.query(MKT_LOAN_PURPOSE.Description).\
										filter(MKT_LOAN_PURPOSE.ID==LoanID).first()
	return LoanPurposeObj.Description if LoanPurposeObj else ""

def getReferalSource(RefID):
	ReferalSourceObj 		=	db.session.query(MKT_REFERAL_SOURCE.Description).\
											filter(MKT_REFERAL_SOURCE.ID==RefID).first()
	return ReferalSourceObj.Description if ReferalSourceObj else ""
def getOfficer(OfficerID):
	OfficerObj 			=	db.session.query(MKT_OFFICER.FirstName,MKT_OFFICER.LastName).\
											filter(MKT_OFFICER.ID==OfficerID).first()
	if OfficerObj:
		LastName 		=	OfficerObj.LastName
		FirstName 		=	OfficerObj.FirstName
		Fullname 		=	LastName +' '+ FirstName
	return Fullname if OfficerObj else ''
def getSourceOfIncome(SourceID):
	return SOURCE_OF_INCOME.get(SourceID) if SourceID in SOURCE_OF_INCOME else ''

def getAppStatus(AppID):
	return APP_STATUS.get(AppID) if AppID in APP_STATUS else ""


#----> Potenatail Conversion <----#
class FRM_CUSTOM_REPORT_PO_CONVERSION_EX(FRM_CUSTOM_REPORT_SEARCH):
	ContactDate 		=	DateTextField("Date of Contact")

@app.route('/Morakot/Report/FF/POConversion', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFReportPOConversion():
	""" Route to view each report """
	try:		
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else "ALL"
		ContactDate 	= 	request.args.get("ContactDate") if "ContactDate" in request.args else ""

		Result 			=	getReportPOConversion(Branch=Branch,ContactDate=ContactDate)
		Parameters 		= 	{"Branch": Branch,"ContactDate": ContactDate}
		FilterOption 	=	""

		SearchForm 		= 	FRM_CUSTOM_REPORT_PO_CONVERSION_EX()
		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)
	except:
		raise

@app.route('/Morakot/Report/FF/POConversion/Excel', methods=['GET'])
@checkLogOutSession	
@checkLogOutTime
def getFFReportPOConversionExport():
	""" Route to view each report """
	try:
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else "ALL"
		ContactDate 	= 	request.args.get("ContactDate") if "ContactDate" in request.args else ""
		Result 			=	getReportPOConversion(Branch=Branch,ContactDate=ContactDate)
		ReportTitle 	= 	"Potential Customer Conversion"
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="PotentialCustomerConversion")

		return response

	except Exception as e:
		raise

def getReportPOConversion(**kwargs):
	try:
		Branch 			= 	kwargs.get("Branch")
		ContactDate 	=	kwargs.get("ContactDate")

		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		ReportTitle 	= 	"Potential Customer Conversion"
		ReportHeader.update({"ReportTitle": ReportTitle})
		ReportHeader.update({"Parameters": {"Branch":Branch,"ContactDate":ContactDate}})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Branch', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Of Applied', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% Applied', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="D")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Of Working', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% Working', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="F")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Of Rejected', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'% Rejected', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="H")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'# Total', 
                                            Rowspan=0,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")

		Data = getRecordPOConversion(Branch=Branch,ContactDate=ContactDate)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getRecordPOConversion(**kwargs):
	Branch 			= 	kwargs.get("Branch")
	ContactDate 	=	kwargs.get("ContactDate")

	ByCategory 		= 	"Branch"
	CategoryObj 	= 	getCategory(ByCategory=ByCategory)
	CategoryObj 	=	CategoryObj.get("CategoryObj")

	if Branch:
		if "ALL" not in Branch:
			BranchSplit = Branch.split()
			CategoryObj = CategoryObj.filter(MKT_BRANCH.ID.in_(BranchSplit))
	
	RecordRow 	= []
	No 			= 0
	for Row in CategoryObj:
		ID = Row.ID
		NumApplied = mktuserfunction.getInquiryPercentage([ID,'4','Num',ContactDate])
		PercApplied = mktuserfunction.getInquiryPercentage([ID,'4','Percentage',ContactDate])

		NumWorking = mktuserfunction.getInquiryPercentage([ID,'1 2 3','Num',ContactDate])
		PercWorking = mktuserfunction.getInquiryPercentage([ID,'1 2 3','Percentage',ContactDate])

		NumRejected = mktuserfunction.getInquiryPercentage([ID,'5','Num',ContactDate])
		PercRejected = mktuserfunction.getInquiryPercentage([ID,'5','Percentage',ContactDate])

		NumTotal = mktuserfunction.getInquiryPercentage([ID,'1 2 3 4 5','Num',ContactDate])

		No 					+= 	1
		RecordRow.append(({
							1:{'Value':No,'Class':'text-center'},
							2:{'Value':Row.ID+'- '+ Row.Description,'Class':'text-left'},
							3:{'Value':NumApplied},
							4:{'Value':PercApplied},
							5:{'Value':NumWorking},
							6:{'Value':PercWorking},
							7:{'Value':NumRejected},
							8:{'Value':PercRejected},
							9:{'Value':NumTotal}
							},
							{'Class':'text-right'}))
	return RecordRow

#----> End Potenatail Conversion <----#
