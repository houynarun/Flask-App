from app.mktcore.imports 	import *
from app.Officer.models 	import *
from app.LoanApplication.models import *
from app.LoanContract.models import *
from app.LoanProduct.models import *
from app.Customer.models 	import *
from app.Currency.models 	import *
from app.Collateral.models 	import *
from app.LoanAmendment.models import *

import app.tools.user 	as mktuser
import app.tools.mktdate as mktdate
import app.tools.mktaccounting as mktaccounting
import local.FirstFinance.tools.mktloan as mktloan

import local.FirstFinance.Report.LoanPortfolio.portfolio as FFportfolio
from app.tools.mktcustomreport   import *

class FRM_CUSTOM_REPORT_SEARCH_EX(FRM_CUSTOM_REPORT_SEARCH):
	ReportedDate 		=	DateTextField("Reported Date")

@app.route('/Morakot/Report/FF/ApplicationSummary/<ByCategory>', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFApplicationSummaryByCategory(ByCategory):
	"""
	<ByCategory> : LoanProduct, CRO, CC

	"""
	try:
		ErrorMsg    = []
		DefualtUrl 	= CUSTOM_REPORT.getDefaultReportUrl(CurrentUrl=url_for(request.endpoint,ByCategory=ByCategory))
		getCheck    = checkAccess(DefualtUrl,"Search")
		if getCheck != True: 
			ErrorMsg.append(msg_error+msg_permission)
			return render_template("permission.html",ErrorMsg=ErrorMsg)

		''' Setup parameters '''
		ByCategory 		= 	str(ByCategory)
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else "ALL" if ByCategory=="Branch" else mktuser.getCurrentBranch()
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate
		Result 			=	setApplicationSummaryByCategory(Branch=Branch,
															   ReportedDate=ReportedDate,
															   ByCategory=ByCategory)
		Parameters 		= 	{"Branch": Branch,"ReportedDate": ReportedDate}
		FilterOption 	=	""

		SearchForm 		= 	FRM_CUSTOM_REPORT_SEARCH_EX()

		return CUSTOM_REPORT.getCustomReportTemplate(Parameters		=	Parameters,
													Result 			=	Result,
													FilterOption 	=	FilterOption,
													SearchForm 		=	SearchForm)
	except:
		raise

@app.route('/Morakot/Report/FF/ApplicationSummary/<ByCategory>/Excel', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getFFApplicationSummaryByCategoryExcel(ByCategory):
	try:
		ByCategory 		= 	str(ByCategory)
		SystemBankDate 	= 	str(mktdate.getBankDate())
		Branch 			=	request.args.get("Branch") if "Branch" in request.args else "ALL" if ByCategory=="Branch" else mktuser.getCurrentBranch()
		ReportedDate 	= 	request.args.get("ReportedDate") if "ReportedDate" in request.args else SystemBankDate
		Result 			=	setApplicationSummaryByCategory(Branch=Branch,
												   ReportedDate=ReportedDate,
												   ByCategory=ByCategory)
		response 		= 	CUSTOM_REPORT.exportExcel(Result=Result,FileName="ApplicationSummary%s" % ByCategory)

		return response

	except Exception as e:
		raise

def setApplicationSummaryByCategory(**kwargs):
	"""
	ByCategory: LoanProduct, CRO, CC
	"""
	try:
		Branch 			= 	kwargs.get("Branch")
		ReportedDate 	=	kwargs.get("ReportedDate")
		ByCategory 		= 	kwargs.get("ByCategory")
		
		ReportHeader 	=	CUSTOM_REPORT.getReportHeader()
		CategoryDict    = 	FFportfolio.getCategory(ByCategory=ByCategory)
		ReportHeader.update({"ReportTitle": "Loan Application Summary by %s" %  CategoryDict.get("HeaderField")})
		ReportHeader.update({"Parameters": {"Branch": Branch,"ReportedDate": ReportedDate}})

		Data 		= []
		TableHeader = {}

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'No', 
                                            Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="A")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'%s' % CategoryDict.get("HeaderField"), 
                                            Rowspan=2,Colspan=0,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="B")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Total Requested', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'#', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="C")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="D")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Total Approved', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'#', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="E")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="F")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Total Rejected', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'#', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="G")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="H")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Total Disbursed', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'#', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="I")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="J")

		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'Total Committment (As of Date)', 
                                            Rowspan=0,Colspan=2,RowIndex=1, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'#', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="K")
		TableHeader = CUSTOM_REPORT.setTableHeader(Text=u'$', 
                                            Rowspan=0,Colspan=0,RowIndex=2, TableHeader=TableHeader, Class="text-center",ExcelCol="L")

		Data = getApplicationSummaryByCategory(Branch=Branch,ReportedDate=ReportedDate,ByCategory=ByCategory)

		Result = {'ReportHeader': ReportHeader, 'TableHeader': TableHeader, 'Data':Data }

		return Result
	except:
		raise

def getApplicationSummaryByCategory(**kwargs):
	"""
	Result = [{1:"1",2:"Bonteay Meanchey",3:"BM", 4: "100", 5:"500,000",6: "100", 7:"500,000"}]
	"""
	Branch 				= 	kwargs.get("Branch")
	ReportedDate 		=	kwargs.get("ReportedDate")
	ByCategory 			=	kwargs.get("ByCategory")

	RecordRow = []
	CategoryDict = FFportfolio.getCategory(ByCategory=ByCategory)
	CategoryObj = CategoryDict.get("CategoryObj")
	FieldName 	= CategoryDict.get("FieldName")
	GroupBy 	= CategoryDict.get("GroupBy")

	CurrencyObj = MKT_CURRENCY.query

	#Calculate Requested
	RequestedDicts		=  	FFportfolio.getApprovalByCategory(Branch=Branch,
										  	  ReportedDate=ReportedDate,
										  	  GroupBy="%s" % (GroupBy),
										  	  CategoryObj=CategoryObj,
										  	  AppStatus=['0','1','2','3','4','5','6'])

	#Calculate Approved
	ApprovedDicts		=  	FFportfolio.getApprovalByCategory(Branch=Branch,
										  	  ReportedDate=ReportedDate,
										  	  GroupBy="%s" % (GroupBy),
										  	  CategoryObj=CategoryObj,
										  	  AppStatus=['3'],
										  	  IsApproDate=True)

	#Calculate Rejected
	RejectedDicts		=  	FFportfolio.getApprovalByCategory(Branch=Branch,
										  	  ReportedDate=ReportedDate,
										  	  GroupBy="%s" % (GroupBy),
										  	  CategoryObj=CategoryObj,
										  	  AppStatus=['4'],
										  	  IsRejectDate=True)

	#Calculate Disbursed
	CategoryDict 		= 	FFportfolio.getCategory(ByCategory=ByCategory,IsDisbursed="Y")
	DisbursedDict1 		= 	FFportfolio.getDisbursedByCategory(Branch=Branch,
										  	  ReportedDate=ReportedDate,
										  	  GroupBy="%s" % (CategoryDict.get("GroupBy")),
										  	  CategoryObj=CategoryDict.get("CategoryObj"))

	#Calculate Commitment 	
	CategoryDict 		= 	FFportfolio.getCategory(ByCategory=ByCategory)
	CommitmentDicts 	=	getCommitmentAmountByCategory(Branch=Branch,
										  	  GroupBy="%s" % (CategoryDict.get("GroupBy")),
										  	  CategoryObj=CategoryDict.get("CategoryObj"))

	DataDictList = [{"Prefix": "Requested","Data": RequestedDicts},
					{"Prefix": "Approved","Data": ApprovedDicts},
					{"Prefix": "Rejected","Data": RejectedDicts},
					{"Prefix": "Disbursed","Data": DisbursedDict1},
					{"Prefix": "Commitment","Data": CommitmentDicts}]

	No = 1
	BaseCurrency 		= mktsetting.getAccSetting().BaseCurrency
	TotApprovedCount 	= 0
	TotApprovedAmount 	= float(0)
	TotDisbursedCount 	= 0
	TotDisbursedAmount 	= float(0)

	if CategoryObj:		
		for row in CategoryObj:	
			for item in DataDictList:
				Prefix = item.get("Prefix")
				Data   = item.get("Data",{}).get(row.ID)
				exec("%sCount = 0" % (Prefix)) 
				exec("%sAmount = float(0)" % (Prefix)) 
				if Data:
					exec("%sCount = %s.get('%s')" % (Prefix,Data,"Count")) 
					exec("%sAmount = %s.get('%s')" % (Prefix,Data,"Amount")) 

			if RequestedCount > 0 or ApprovedCount > 0 or RejectedCount or DisbursedCount > 0 or CommitmentCount > 0:
				RecordRow.append(({1: {"Value":No,"Class":"text-center"},
								  2:  {"Value":eval(FieldName),"Class":"text-left"},
								  3:  {"Value":RequestedCount}, 
								  4:  {"Value":mktmoney.toMoney(float(RequestedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  5:  {"Value":ApprovedCount},
								  6:  {"Value":mktmoney.toMoney(float(ApprovedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  7:  {"Value":RejectedCount},
								  8:  {"Value":mktmoney.toMoney(float(RejectedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  9:  {"Value":DisbursedCount},
								  10: {"Value":mktmoney.toMoney(float(DisbursedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
								  11: {"Value":CommitmentCount},
								  12: {"Value":mktmoney.toMoney(float(CommitmentAmount),mktmoney.getCurrencyObj(BaseCurrency))}
								 },{"Class":"text-right","Style":""}))
				No+=1

		#Unknow & Total
		for item in DataDictList:
			Prefix = item.get("Prefix")
			Data   = item.get("Data",{}).get("Unknown")
			TotalData = item.get("Data",{}).get("Total")
			exec("%sCount = 0" % (Prefix)) 
			exec("%sAmount = float(0)" % (Prefix)) 
			exec("Tot%sCount = 0" % (Prefix)) 
			exec("Tot%sAmount = float(0)" % (Prefix)) 
			if Data:
				exec("%sCount = %s.get('%s')" % (Prefix,Data,"Count")) 
				exec("%sAmount = %s.get('%s')" % (Prefix,Data,"Amount")) 
			if TotalData:
				exec("Tot%sCount = %s.get('%s')" % (Prefix,TotalData,"Count")) 
				exec("Tot%sAmount = %s.get('%s')" % (Prefix,TotalData,"Amount")) 

		if RequestedCount > 0 or ApprovedCount > 0 or RejectedCount or DisbursedCount > 0 or CommitmentCount >0:
			RecordRow.append(({1: {"Value":No,"Class":"text-center"},
							  2: {"Value":"Unknow","Class":"text-left"},
							  3: {"Value":RequestedCount}, 
							  4: {"Value":mktmoney.toMoney(float(RequestedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  5: {"Value":ApprovedCount},
							  6: {"Value":mktmoney.toMoney(float(ApprovedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  7: {"Value":RejectedCount},
							  8: {"Value":mktmoney.toMoney(float(RejectedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  9: {"Value":DisbursedCount},
							  10: {"Value":mktmoney.toMoney(float(DisbursedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  11: {"Value":CommitmentCount},
							  12: {"Value":mktmoney.toMoney(float(CommitmentAmount),mktmoney.getCurrencyObj(BaseCurrency))}
							 },{"Class":"text-right","Style":""}))
			No+=1

		# Total
		if TotRequestedCount > 0 or TotApprovedCount > 0 or TotRejectedCount or TotDisbursedCount > 0 or TotRequestedCount > 0 or TotCommitmentCount >0:
			RecordRow.append(({1: {"Value":""},
							  2: {"Value":"Total"},
							  3: {"Value":TotRequestedCount}, 
							  4: {"Value":mktmoney.toMoney(float(TotRequestedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  5: {"Value":TotApprovedCount},
							  6: {"Value":mktmoney.toMoney(float(TotApprovedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  7: {"Value":TotRejectedCount},
							  8: {"Value":mktmoney.toMoney(float(TotRejectedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  9: {"Value":TotDisbursedCount},
							  10: {"Value":mktmoney.toMoney(float(TotDisbursedAmount),mktmoney.getCurrencyObj(BaseCurrency))},
							  11: {"Value":TotCommitmentCount},
							  12: {"Value":mktmoney.toMoney(float(TotCommitmentAmount),mktmoney.getCurrencyObj(BaseCurrency))}
							 },{"Class":"text-right text-bold","Style":""}))
			No+=1

	return RecordRow

def getCommitmentAmountByCategory(**kwargs):
	"""
		CommitmentAmount = ApprovedAmount - DisbursedAmount
			* ApprovedAmount = Amount in loan application in case LA not yet used in LC and Loan Top
			* ApprovedAmount = ApprovedAmount in LC in case LA have LC or Top Up
			* DisbursedAmount = Disbursed in LC

		Note: 
			* Only LA with commitment > 0 is count, LA with SplitAmount = Y
		
		Flow:

			1. in case LA not in contract 	=> Commitment = Amount (Apporved Amount) in LA
			2. in case LA have in contract 	=> Commitment = ApporvedAmount in LC - Disbursed in LC

	"""
	Branch 				=	kwargs.get("Branch","")
	GroupBy 			=	kwargs.get("GroupBy")
	CategoryObj 		=	kwargs.get("CategoryObj")

	# GroupBy 			=	"MKT_LOAN_APPLICATION.Branch"

	BankDate 			= 	mktdate.getBankDate()
	BranchSplit 		=	Branch.split()
	LoanAppAgeInDay 	=	180 #LoanApplication approved over 180 will reset commitment to zero
	AppDate 			=	mktdate.getPreviousDay(BankDate,LoanAppAgeInDay)

	#Calculate Commitment	
	DictData = {}
	ExcludeDEID 		=	FFportfolio.getExcludeCollteralDEID()
	LoanCollateralObj 	= 	FFportfolio.getLoanCollateralObj().subquery()

	CommitmentAmountXpr	= 	case([(or_(MKT_LOAN_CONTRACT.ID == None,MKT_LOAN_CONTRACT.ID == ""), MKT_LOAN_APPLICATION.Amount),],
        						 else_ = MKT_LOAN_CONTRACT.ApprovedAmount - MKT_LOAN_CONTRACT.Disbursed)

	CommitmentObj 		=	db.session.query(func.sum(MKT_LOAN_APPLICATION.Amount).label('Amount'),
											 func.count(MKT_LOAN_APPLICATION.ID).label('Count'),
											 func.sum(MKT_LOAN_CONTRACT.Disbursed).label('Disbursed'),
											 func.sum(MKT_LOAN_CONTRACT.ApprovedAmount).label('ApprovedAmount'),
											 func.sum(CommitmentAmountXpr).label("Commitment"),
											 MKT_LOAN_APPLICATION.Currency,
											 eval(GroupBy).label("Category")
										).\
										join(MKT_CUSTOMER,
											 MKT_LOAN_APPLICATION.LNCustomerID == MKT_CUSTOMER.ID
										).\
										outerjoin(MKT_LOAN_CONTRACT,
												 MKT_LOAN_CONTRACT.LoanApplicationID == MKT_LOAN_APPLICATION.ID).\
										outerjoin(LoanCollateralObj,
												 LoanCollateralObj.c.ID == MKT_LOAN_APPLICATION.ID).\
										outerjoin(MKT_COLLATERAL_DE,
												  MKT_COLLATERAL_DE.CollateralID == LoanCollateralObj.c.Collateral).\
										outerjoin(MKT_LOAN_AMENDMENT,
												  MKT_LOAN_AMENDMENT.LoanAppID == MKT_LOAN_APPLICATION.ID).\
										filter(MKT_LOAN_APPLICATION.AppStatus.in_(['3'])).\
										filter(or_(MKT_COLLATERAL_DE.ID == None,
											   ~MKT_COLLATERAL_DE.ID.in_(ExcludeDEID))).\
										filter(CommitmentAmountXpr >0).\
										filter(MKT_LOAN_APPLICATION.SplitAmount == "Y").\
										filter(or_(MKT_LOAN_AMENDMENT.ID == None,MKT_LOAN_AMENDMENT.ID == "")).\
										group_by(eval(GroupBy),
												 MKT_LOAN_APPLICATION.Currency)

	if Branch and "ALL" not in BranchSplit:
		CommitmentObj = CommitmentObj.filter(MKT_LOAN_APPLICATION.Branch.in_(BranchSplit))

	TotalAmount = float(0)
	TotalCount = 0
	for row in CommitmentObj:
		# print row
		Key    = row.Category
		if row.Category not in [row_cate.ID for row_cate in CategoryObj]:
			Key = "Unknown"

		Count  = DictData.get(Key,{}).get("Count",{}) if Key in DictData else 0
		Amount = DictData.get(Key,{}).get("Amount",{}) if Key in DictData else float(0)

		Count+=row.Count
		Amount+=mktloan.toBaseCurrency(Amount=float(row.Commitment), Currency=row.Currency)

		DictData.update({"%s" % (Key): {"Count": Count,"Amount": Amount}})

		TotalAmount+=mktloan.toBaseCurrency(Amount=float(row.Commitment), Currency=row.Currency)
		TotalCount+=row.Count

	DictData.update({"%s" % ("Total"): {"Count": TotalCount,"Amount": TotalAmount}})

	# print DictData

	return DictData