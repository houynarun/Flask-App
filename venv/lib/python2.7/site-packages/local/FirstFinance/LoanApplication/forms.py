from app.mktcore.wtfimports 			import *
from app.LoanApplication.forms 			import *
from app.LoanApplication.models 		import *
from app.Collateral.models 				import *
from app.LoanProduct.models 			import MKT_LOAN_PRODUCT
from app.CBC.models 					import MKT_CBC, MKT_CBC_DE
from app.LoanAmendment.models 			import *

from local.FirstFinance.tools.mktroute 	import *

import app.tools.mktloanapplication 	as mktloanapp
import local.FirstFinance.LoanApproval.views 	as loanapproval
import local.FirstFinance.CBC.views 	as cbc
import decimal
import app.CBC.views as views
from flask 								import Markup
from app.tools.mktloan 					import *
import local.FirstFinance.tools.mktloan as  mktloan
def checkOperation(Operation,Url):
	"""
		Note: This Function used for check whether form is new, edit or view form
		Args:
			Operation 	(str)	:	Could be `Edit`, `New`, it could other operation that have in url
			Url 		(str)	: 	Url of your form, if you not apply url it will automatic take current url
		Return:
			False 	=> in case current url not contain check operation
			True 	=> in case current url contain check operation
		Example:
			Url = "http://localhost:5000/Morakot/LoanApplicationEx/New/Operation/"
			>>> checkOperation(Operation="New", Url="http://localhost:5000/Morakot/LoanApplicationEx/New/Operation/")
			>>> True
	"""
	Result = False
	UrlList = Url.split("/")
	if Operation in UrlList:
		Result = True

	return Result

def isViewForm():
	Url = request.url
	if checkOperation(Operation="Edit",Url=Url) or checkOperation(Operation="New",Url=Url):
		return False
	return True

def loadGuarantor():
	Branch 			= 	mktuser.getCurrentBranch()
	RestrictedObj 	= 	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()
	AsGurantor 		=	MKT_CUSTOMER.query.\
						filter(MKT_CUSTOMER.AsGurantor == 'Y').\
						filter(MKT_CUSTOMER.Block == 'N').\
						order_by(MKT_CUSTOMER.ID.asc())
	if RestrictedObj:
		IsViewForm = isViewForm()
		if not IsViewForm:
			AsGurantor 	=	AsGurantor.filter(MKT_CUSTOMER.Branch == Branch)

	return AsGurantor

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def getControlList(ControlID=""):
	controls_list 	= request.form
	ListControl		= [item for item in controls_list if ControlID in item]
	ListControl.sort()
	TotalControl 	= len(ListControl)
	return ListControl,TotalControl

def calculateLVR():
	ID 			= request.form['ID']
	Amount 		= request.form['Amount']
	Currency 	= request.form['Currency']

	TotalAmount = 0
	TotalAmount += mktloan.toBaseCurrency(float(Amount),Currency)

	ListCBAmount,TotalCBAmount 	= getControlList("CBAmount")
	ListCurrency, TotalCurrency = getControlList("CBCurrency")
	for i in range(0,TotalCBAmount):
		Amount = request.form[ListCBAmount[i]]
		Currency = request.form[ListCurrency[i]]
		TotalAmount += mktloan.toBaseCurrency(float(Amount), Currency)

	# get collateral total value
	Collateral 		= request.form['Collateral']
	CollateralObj 	= MKT_COLLATERAL.query.get(Collateral)
	CollateralValue = 0
	if CollateralObj:
		CollateralCurr 	= CollateralObj.Currency
		CollateralValue = float(CollateralObj.MinCollateralValue)
		# convert collateral value to based currency
		CollateralValue = mktloan.toBaseCurrency(CollateralValue, CollateralCurr)
	# else:
	# 	raise ValidationError("Collateral not found.")

	ExistingOutAmt 		= 0
	LoanCollateralObj 	= MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.Collateral == Collateral,
															MKT_LOAN_COLLATERAL.ID.ilike("LA%")).all()

	# Top up Loan Application that not yet use in LC take it to calculate,
	# If Top up loan Application that is already used in LC, skip it

	if LoanCollateralObj:
		RejectedStatus 	= ['4','5','6'] # exclude status Cancelled, Rejected, Closed
		LoanAppID 		= [str(item.ID) for item in LoanCollateralObj]

		TopupObj = MKT_LOAN_AMENDMENT.query.filter(
					MKT_LOAN_AMENDMENT.LoanAppID.in_(LoanAppID),\
					MKT_LOAN_AMENDMENT.Option=='1'
			).all()

		if TopupObj:
			for item in TopupObj:
				if str(item.LoanAppID) in LoanAppID:
					LoanAppID.remove(item.LoanAppID)

		LoanAppObj 		= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID.in_(LoanAppID),\
															~MKT_LOAN_APPLICATION.AppStatus.in_(RejectedStatus),\
															MKT_LOAN_APPLICATION.SplitAmount == "Y",
															MKT_LOAN_APPLICATION.ID != ID).all()

		# exclude all loan id where it is for coborrower. eg. LA17082200001-01
		ExcludedID 		= [item.ID.split("-")[0] for item in LoanAppObj if len(item.ID.split("-")) >= 2]

		LoanCBObj 			= db.session.query(MKT_LOAN_CO_BORROWER)\
										.join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID == MKT_LOAN_CO_BORROWER.ID)\
										.filter(MKT_LOAN_CO_BORROWER.ID.in_(LoanAppID),
												~MKT_LOAN_APPLICATION.AppStatus.in_(RejectedStatus),
												~MKT_LOAN_CO_BORROWER.ID.in_(ExcludedID),
												MKT_LOAN_APPLICATION.SplitAmount == "Y",
												MKT_LOAN_CO_BORROWER.ID != ID).all()
		if LoanAppObj:
			for item in LoanAppObj:
				ExistingOutAmt 	= mktloan.getLoanExposure(item,"MainBorrower")
				TotalAmount 	+= ExistingOutAmt

		if LoanCBObj:
			for item in LoanCBObj:
				ExistingOutAmt 	= mktloan.getLoanExposure(item,"CoBorrower")
				TotalAmount 	+= ExistingOutAmt
	LVR = mktloan.getLVR(TotalAmount,CollateralValue)

	return LVR

#After Save record will be look up value from table store
def getRecord():
	try:
		result = MKT_LOAN_APPLICATION.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_LOAN_APPLICATION_INAU.query.filter_by(ID=g.formID).all()
		Dict={} 
		if result:
			for row in result:
				Dict = row.__dict__
			return Dict
		else:
			return Dict
	except:
		raise

def loadSpouse():  #define function
	Branch 			= 	mktuser.getCurrentBranch()
	RestrictedObj 	= 	MKT_RESTRICT_BRANCH.query.filter(MKT_RESTRICT_BRANCH.Model == "MKT_CUSTOMER").first()
	CustomerObj 	= 	MKT_CUSTOMER.query
	if RestrictedObj:
		IsViewForm = isViewForm()
		if not IsViewForm:
			CustomerObj = CustomerObj.filter(MKT_CUSTOMER.Branch == Branch)

	SpouseObj 		= 	CustomerObj.filter(MKT_CUSTOMER.Block == 'N').order_by(MKT_CUSTOMER.ID.asc())

	if request.method == 'POST':
		return SpouseObj
	else:
		if len(getRecord())>0:
			Record 	= getRecord()
			MainBorrowerObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID == Record['LNCustomerID']).first()
			if MainBorrowerObj:
				return SpouseObj.filter(MKT_CUSTOMER.Gender != MainBorrowerObj.Gender)
		else:
			return SpouseObj.filter(MKT_CUSTOMER.ID == '')

def loadLoanProduct():
	Branch 			= 	mktuser.getCurrentBranch()
	ListLoan 		= 	[]
	LoanProductObj 	= 	MKT_LOAN_PRODUCT.query.all()
	for LoanProduct in LoanProductObj:
		if not LoanProduct.AllowBranch:
			AllowBranch= "ALL"
		if LoanProduct.AllowBranch:
			AllowBranch = LoanProduct.AllowBranch.split()
		if '-'+Branch not in AllowBranch :
			ListLoan.append(LoanProduct.ID)
			if 'ALL' not in AllowBranch:
				if Branch in AllowBranch:
					continue
				ListLoan.remove(LoanProduct.ID)

	return MKT_LOAN_PRODUCT.query.filter(MKT_LOAN_PRODUCT.ID.in_(ListLoan)).all()

def checkHomeEquityLoan(Msg,LoanAppID, CustomerID, LoanProductObj):
	ApprovedStatus 			= 	['3']
	if LoanProductObj.LoanEquity == 'Y':
		LoanAppObj 		= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.LNCustomerID == CustomerID,\
 															MKT_LOAN_APPLICATION.ID != LoanAppID,\
															MKT_LOAN_APPLICATION.AppStatus.in_(ApprovedStatus)).\
															order_by(MKT_LOAN_APPLICATION.ID.desc()).first()
		if not LoanAppObj:
			raise ValidationError(Markup(" %s must have <b>active loan</b> first to be able to apply for <b>%s</b>."%(Msg,LoanProductObj.Description)))
		if LoanAppObj:
			LoanProduct 	= MKT_LOAN_PRODUCT.query.get(LoanAppObj.LoanProduct)
			if LoanProduct.AllowEquity == 'N':
				raise ValidationError(Markup("%s that have <b>%s</b> cannot apply for <b>%s</b>."%(Msg,LoanProduct.Description,LoanProductObj.Description)))
	return False

def checkCustomerAge(CustomerID='',LoanProduct='',Term="",Label=""):
	try:
		Customer = MKT_CUSTOMER.query.get(CustomerID)

		if Customer:

			Age = int(mktdate.getAge(Customer.DateOfBirth))
			LP = MKT_LOAN_PRODUCT.query.get(LoanProduct) # LP = LoanProduct record

			if LP:
				if LP.MaxAge:
					if Age > int(LP.MaxAge):
						raise ValidationError("%s Customer's age must younger than or equal %s" %(Label,LP.MaxAge))
					else:
						TermInYear = float(Term)/12
						if float(Age) + float(TermInYear) > float(LP.MaxAge):
							TermAllowed = (int(LP.MaxAge) - Age) *12
							raise ValidationError("%s Customer is %s years old and allowed to request loan with max term %s month(s) only." %(Label,Age,TermAllowed))

				if LP.MinAge and Age < int(LP.MinAge):
					raise ValidationError("%s Customer's age must older than or equal %s" %(Label,LP.MinAge))
	except:
		raise


# reserve for remote field CBSpouse
@app.route("/Morakot/CBSpouseID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CBSpouseID():
	return mktcustomer.getSearchCustomer(FilterBlock=True)

@app.route("/Morakot/CBSpouseID_2", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CBSpouseID_2():
	return mktcustomer.getSearchCustomer(FilterBlock=True)

@app.route("/Morakot/CBSpouseID_3", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CBSpouseID_3():
	return mktcustomer.getSearchCustomer(FilterBlock=True)

@app.route("/Morakot/CBSpouseID_4", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CBSpouseID_4():
	return mktcustomer.getSearchCustomer(FilterBlock=True)

@app.route("/Morakot/CBSpouseID_5", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CBSpouseID_5():
	return mktcustomer.getSearchCustomer(FilterBlock=True)

@app.route("/Morakot/CoBorrowerID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CoBorrowerID():
	return mktcustomer.getSearchCustomer(FilterBlock=True)

@app.route("/Morakot/CoBorrowerID_2", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CoBorrowerID_2():
	return mktcustomer.getSearchCustomer(FilterBlock=True)

@app.route("/Morakot/CoBorrowerID_3", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CoBorrowerID_3():
	return mktcustomer.getSearchCustomer(FilterBlock=True)

@app.route("/Morakot/CoBorrowerID_4", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CoBorrowerID_4():
	return mktcustomer.getSearchCustomer(FilterBlock=True)

@app.route("/Morakot/CoBorrowerID_5", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def CoBorrowerID_5():
	return mktcustomer.getSearchCustomer(FilterBlock=True)


""" Custom validation for multi form
	1. define a custom validation
	2. get list of the same field from multi form using getControlList() function
		ex: CBAmount, CBAmount_2
	3. check for current validate control has the same name as the control
"""
def validateDuplicate(Customer,Label,Flag):
	"""
		Validate duplicate customer with:
			1. Main borrower
			2. Main borrower spouse
			3. Co borrower
			4. Co borrower spouse
		Args:
			Customer (str): string ID of Customer either CoBorrower or Spouse
			Label (str): Label to identify error field
			Flag (str): string to identify if validation for "CoBorrower" or "CBSpouse"
		Return:
		Raise:
			ValidationError (func): flash error message
	"""
	ListCoBorrower, TotalCoBorrower = getControlList("CoBorrowerID")
	ListCBSpouse, TotalCBSpouse 	= getControlList("CBSpouseID")

	MainBorrower 	= request.form['LNCustomerID']
	Spouse 			= request.form['SpouseID']

	FilteredList 	= [None,"","__None"]

	AllCoBorrower 	= []
	for nub in range(0,TotalCoBorrower):
		AllCoBorrower.append(request.form[ListCoBorrower[nub]])
	AllCoBorrower = [x for x in AllCoBorrower if x not in FilteredList]


	AllCBSpouse 	= []
	for nub in range(0,TotalCBSpouse):
		AllCBSpouse.append(request.form[ListCBSpouse[nub]])
	AllCBSpouse = [x for x in AllCBSpouse if x not in FilteredList]


	# Check Customer duplicate with Main Borrower
	if Customer == MainBorrower:
		raise ValidationError(Markup("<b>%s</b> duplicated with Main Borrower."%Label))

	# Check Customer duplicate with Spouse
	if Customer == Spouse:
		raise ValidationError(Markup("<b>%s</b> duplicated with Main Borrower's Spouse."%Label))

	# Check Customer duplicate with other Customer
	if Flag == "CBSpouse":
		# Check Spouse with CoBorrowers
		# Remove all duplicate from CoBorrower and append Customer to check Duplicate with CoBorrower
		AllCoBorrower = [AllCoBorrower.append(x) for x in AllCoBorrower if x not in AllCoBorrower]
		AllCoBorrower.append(Customer)
		DupCoBorrower = [x for x in AllCoBorrower if AllCoBorrower.count(x) > 1]
		if DupCoBorrower:
			raise ValidationError(Markup("<b>%s</b> duplicated with Co-Borrower(s)."%Label))

		# Check Spouse with other Spouse
		DupCBSpouse = [x for x in AllCBSpouse if AllCBSpouse.count(x) > 1]
		if DupCBSpouse:
			raise ValidationError(Markup("<b>%s</b> duplicated with Co-Borrowers' Spouse(s)."%Label))

	# Check Customer duplicate with other CBSpouse
	elif Flag == "CoBorrower":
		# Check with spouse
		# Remove all duplicate from CB Spouse and append Customer to check Duplicate with CBSpouse
		AllCBSpouse = [AllCBSpouse.append(x) for x in AllCBSpouse if x not in AllCBSpouse]
		AllCBSpouse.append(Customer)
		DupCBSpouse = [x for x in AllCBSpouse if AllCBSpouse.count(x) > 1]
		if DupCBSpouse:
			raise ValidationError(Markup("<b>%s</b> duplicated with Co-Borrowers' Spouse(s)."%Label))

		# Check with co-borrower
		DupCoBorrower = [x for x in AllCoBorrower if AllCoBorrower.count(x) > 1]
		if DupCoBorrower:
			raise ValidationError(Markup("<b>%s</b> duplicated with Co-Borrowers."%Label))



def getValidationLabel(CustomerObj, Index, Text):
	""" Concatinate label
		Args:
			CustomerObj (sqlalchemy object): customer object
			Index (int): index to identify label
			Text (str): label to identify Co-Borrower or Co-Borrower's Spouse
		Return:
			Label (str): concatinated label with index and customer name
	"""
	CustomerName = "%s %s"%(CustomerObj.LastNameEn, CustomerObj.FirstNameEn) if CustomerObj else ""
	Label = ""
	if CustomerName:
		Label = "%s %s - %s"%(Text,Index+1,CustomerName)
	else:
		Label = "%s %s"%(Text,Index+1)
	return Label

def validateBlockCustomer(CustomerID):
	CusObj 	=	MKT_CUSTOMER.query.get(CustomerID)
	if CusObj:
		Block 	=	CusObj.Block
		if Block == 'Y':
			BlockReason 	=	CusObj.BlockReason
			raise ValidationError("The customer %s was blocked, reason: %s." %(CustomerID, BlockReason))

def custom_CoBorrowerID(form, field):
	"""
		1. Check if CheckCoBorrower is Yes or No
		2. Check Maximum of CoBorrower
		3. Check Co-Borrower is Yes, Co-Borrower is required
		4. Check duplicate CoBorrower compare to MainBorrower, Spouse, Other CoBorrower and CoBorrower Spouse
	"""
	
	CheckCoBorrower	= request.form['CheckCoBorrower'] if request.method == "POST" else ""
	ListCoBorrower, TotalCoBorrower = getControlList("CoBorrowerID")
	ListCBLoanProduct,TotalCBLoanProduct = getControlList("CBLoanProduct")
	ListCBTerm, TotalCBTerm 		= getControlList("CBTerm")

	CustomerObj 	= MKT_CUSTOMER.query
	LoanProduct 	= request.form['LoanProduct'] if request.method == "POST" else ""
	LoanProductObj 	= MKT_LOAN_PRODUCT.query.get(LoanProduct)
	MaxCoBorrower 	= LoanProductObj.MaxCoBorrower if LoanProductObj else '0'
	Description 	= LoanProductObj.Description if LoanProductObj else ""


	# Check if CoBorrower is required or not
	if CheckCoBorrower == "Y":

		# Check maximum of CoBorrower
		if TotalCoBorrower <= int(MaxCoBorrower):
			for i in range(0,TotalCoBorrower):
				if field.name == ListCoBorrower[i]:
					CoBorrower 	= request.form[ListCoBorrower[i]]
					CBLoanPro 	= request.form[ListCBLoanProduct[i]]
					CBTerm 		= request.form[ListCBTerm[i]]
					
					CoBorrowerObj = CustomerObj.get(CoBorrower)
					Label = getValidationLabel(CoBorrowerObj,i,"Co-Borrower")

					# Check if CoBorrower is empty
					if not CoBorrower:
						raise ValidationError("%s This field is required."%Label)
					else:
						# Validate duplicate with other field
						validateDuplicate(CoBorrower,Label,"CoBorrower")
						# Validate Age
						checkCustomerAge(CoBorrower,CBLoanPro,CBTerm,Label)
						# Validate block
						validateBlockCustomer(CoBorrower)
		else:
			# Loop to show error message on all fields
			for i in range(0,TotalCoBorrower):
				if field.name == ListCoBorrower[i]:
					CoBorrower = request.form[ListCoBorrower[i]]
					if CoBorrower:
						raise ValidationError("Loan Product %s allows maximum of %s Co-Borrowers."%(Description, MaxCoBorrower))
	else:
		# Loop to show error message on all fields
		for i in range(0,TotalCoBorrower):
			if field.name == ListCoBorrower[i]:
				CoBorrower = request.form[ListCoBorrower[i]]
				if CoBorrower:
					raise ValidationError("Co-Borrower is not required.")

def custom_CBSpouseID(form, field):
	"""
		1. Check duplicate coborrower spouse
		2. Check Spouse required for CoBorrower
	"""
	
	CheckCoBorrower = request.form['CheckCoBorrower']
	ListCoBorrower, TotalCoBorrower = getControlList("CoBorrowerID")
	ListSpouseID, TotalSpouseID = getControlList("CBSpouseID")

	Status 		=	{ 	'1':'Married',
						'2':'Single',
						'3':'Divorced',
						'4':'Widow',
						'5':'Widower',
						'6':'Separated',
						'7':'Defacto',
						'8':'Unknown'}

	CustomerObj 	= MKT_CUSTOMER.query
	LoanProduct 	= request.form['LoanProduct'] if request.method == "POST" else ""
	LoanProductObj 	= MKT_LOAN_PRODUCT.query.get(LoanProduct)
	MaxCoBorrower 	= LoanProductObj.MaxCoBorrower if LoanProductObj else 0
	Description 	= LoanProductObj.Description if LoanProductObj else ""

	# Check if CoBorrower is required or not
	if CheckCoBorrower == "Y":

		# Check maximum of CoBorrower
		if TotalCoBorrower <= int(MaxCoBorrower):

			for i in range(0, TotalCoBorrower):
				if field.name == ListSpouseID[i]:
					CoBorrower 	= request.form[ListCoBorrower[i]]
					CBSpouse 	= request.form[ListSpouseID[i]]
					CoBorrowerObj = CustomerObj.get(CoBorrower)

					MaritalStatus 	= CoBorrowerObj.MaritalStatus if CoBorrowerObj else ""
					Name 			= "%s %s"%(CoBorrowerObj.LastNameEn, CoBorrowerObj.FirstNameEn) if CoBorrowerObj else ""

					if CoBorrower:
						# Check if Spouse is required or not
						Label = "Co-Borrower %s - %s"%(i+1, Name)
						
						# if MaritalStatus in ['1'] and CBSpouse in ['','__None']:
						# 	raise ValidationError(Markup("<b>%s</b>'s marital status is %s, spouse is required."%(Label,Status.get(MaritalStatus))))

						if MaritalStatus not in ['1'] and CBSpouse not in ['', '__None']:
							raise ValidationError(Markup("<b>%s</b> marital status is %s, spouse is not required."%(Label,Status.get(MaritalStatus))))

						# Check for duplicate
						if MaritalStatus in ['1'] and CBSpouse not in ['','__None']:
							CBSpouseObj = CustomerObj.get(CBSpouse)
							Label = getValidationLabel(CBSpouseObj,i,"Co-Borrower's Spouse")
							# Validate duplicate
							validateDuplicate(CBSpouse,Label,"CBSpouse")
							# Validate block
							validateBlockCustomer(CBSpouse)


def custom_CBCurrency(form, field):
	CheckCoBorrower = request.form['CheckCoBorrower']
	ListCurrency, TotalCurrency = getControlList("CBCurrency")
	if CheckCoBorrower == "Y":
		for i in range(0,TotalCurrency):
			if field.name == ListCurrency[i]:
				try:
					Currency = request.form[ListCurrency[i]]
				except Exception as e:
					raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))

def custom_CBAppliedAmount(form, field):
	CheckCoBorrower = request.form['CheckCoBorrower']
	ListAppliedAmount, TotalAppliedAmount = getControlList("CBAppliedAmount")
	if CheckCoBorrower == "Y":
		for i in range(0,TotalAppliedAmount):
			if field.name == ListAppliedAmount[i]:
				AppliedAmount = request.form[ListAppliedAmount[i]]
				if AppliedAmount == "0":
					raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))

def custom_CBAmount(form, field):
	CheckCoBorrower = request.form['CheckCoBorrower']
	ListAmount, TotalAmount = getControlList("CBAmount")
	ListCurrency, TotalCurrency = getControlList("CBCurrency")
	ListLoanProduct, TotalLoanProduct = getControlList("CBLoanProduct")
	
	if CheckCoBorrower == "Y":
		for i in range(0,TotalAmount):
			if field.name == ListAmount[i]:
				try:
					Amount = request.form[ListAmount[i]]
					Currency = request.form[ListCurrency[i]]
					LoanProduct = request.form[ListLoanProduct[i]]
				except:
					continue
				mktloanapp.checkMaxMinAmount(decimal.Decimal(Amount), 'Approved Amount', Currency, LoanProduct)

def custom_CBCycle(form, field):
	CheckCoBorrower = request.form['CheckCoBorrower']
	ListCycle, TotalCycle = getControlList("CBCycle")
	if CheckCoBorrower == "Y":
		for i in range(0,TotalCycle):
			if field.name == ListCycle[i]:
				Cycle = request.form[ListCycle[i]]
				if Cycle:
					try:
						int(Cycle)
					except Exception as e:
						raise ValidationError("(Co-Borrower %s) This field must be in numeric format."%(i+1))
				else:
					raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))

def custom_Topup(form, field):
	LoanProductList = []
	LNCustomerID 	= request.form['LNCustomerID']
	LoanProduct 	= request.form['LoanProduct']
	TypeOfLoan 		= request.form['TypeOfLoan']
	AppStatus 		= ['3']
	if TypeOfLoan=='2':
		AppObj = db.session.query(MKT_LOAN_APPLICATION.LoanProduct).filter(MKT_LOAN_APPLICATION.LNCustomerID==LNCustomerID).\
											filter(MKT_LOAN_APPLICATION.AppStatus.in_(AppStatus)).\
											filter(MKT_LOAN_APPLICATION.TypeOfLoan=='1').all()
		if AppObj:
			LoanProductList = [item[0] for item in AppObj]
			ProductDescription = []
			if not LoanProduct in LoanProductList:
				ProductList = db.session.query(MKT_LOAN_PRODUCT.Description).filter(MKT_LOAN_PRODUCT.ID.in_(LoanProductList)).all()
				if ProductList:
					ProductDescription = [str(item[0]) for item in ProductList]
				raise ValidationError(Markup("Loan product is different <b> %s </b>"%ProductDescription))


def custom_CBLoanProduct(form, field):
	CheckCoBorrower = request.form['CheckCoBorrower']
	ID 	= request.form['ID']
	ListCoBorrower, TotalCoBorrower 	= getControlList("CoBorrowerID")
	ListCurrency, TotalCurrency 		= getControlList("CBCurrency")
	ListLoanProduct, TotalLoanProduct 	= getControlList("CBLoanProduct")

	if CheckCoBorrower == "Y":
		for i in range(0,TotalLoanProduct):
			if field.name == ListLoanProduct[i]:
				LoanProduct = request.form[ListLoanProduct[i]]
				CoBorrowerID 	= request.form[ListCoBorrower[i]]

				if LoanProduct == "__None":
					raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))
				else:
					LoanProductObj 	= MKT_LOAN_PRODUCT.query.get(LoanProduct)
					if LoanProductObj:
						Currency 	= request.form[ListCurrency[i]]
						RuleID 	= str(LoanProductObj.Rule) + str(Currency)
						Rule 	= MKT_LOAN_RULE_DE.query.get(RuleID)

						if not Rule:
							raise ValidationError("(Co-Borrower %s) Loan product rule detail not define."%(i+1))

						Description 	= LoanProductObj.Description
						CheckHomeEquityLoan = checkHomeEquityLoan(("(Co-Borrower) "+str(i+1)),ID,CoBorrowerID,LoanProductObj)
						


def custom_CBCategory(form, field):
	CheckCoBorrower = request.form['CheckCoBorrower']
	ListCategory, TotalCategory	= getControlList("CBCategory")
	if CheckCoBorrower == "Y":
		for i in range(0,TotalCategory):
			if field.name == ListCategory[i]:
				Category = request.form[ListCategory[i]]
				if not Category:
					raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))

def custom_CBInterestRate(form, field):
	CheckCoBorrower = request.form['CheckCoBorrower']
	ListInterest, TotalInterest = getControlList("CBInterestRate")
	ListCurrency, TotalCurrency = getControlList("CBCurrency")
	ListLoanProduct, TotalLoanProduct = getControlList("CBLoanProduct")

	if CheckCoBorrower == "Y":
		for i in range(0, TotalInterest):
			if field.name == ListInterest[i]:
				InterestRate = request.form[ListInterest[i]]
				if not InterestRate:
					raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))
				else:
					LoanProduct = request.form[ListLoanProduct[i]]
					Currency 	= request.form[ListCurrency[i]]
					try:
						InputRate = float(InterestRate)
					except:
						raise ValidationError("(Co-Borrower %s) This field must be in numeric format."%(i+1))

					Msg = mktaccount.checkInterestRate("LC", LoanProduct, InputRate, Currency)
					if Msg:
						raise ValidationError('(Co-Borrower %s) %s'%(i+1,Msg))

def custom_CBRepaymentMode(form, field):
	CheckCoBorrower = request.form['CheckCoBorrower']
	ListRepaymentMode, TotalRepaymentMode = getControlList("CBRepaymentMode")
	if CheckCoBorrower == "Y":
		for i in range(0, TotalRepaymentMode):
			if field.name == ListRepaymentMode[i]:
				RepaymentMode = request.form[ListRepaymentMode[i]]
				if not RepaymentMode:
					raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))

def custom_CBFreqType(form, field):
	CheckCoBorrower = request.form['CheckCoBorrower']
	ListFreqType, TotalFreqType = getControlList("CBFreqType")
	if CheckCoBorrower == "Y":
		for i in range(0, TotalFreqType):
			if field.name == ListFreqType[i]:
				FreqType = request.form[ListFreqType[i]]
				if not FreqType:
					raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))

def custom_CBFrequency(form, field):
	CheckCoBorrower = request.form['CheckCoBorrower']
	ListFrequency, TotalFrequency = getControlList("CBFrequency")
	if CheckCoBorrower == "Y":
		for i in range(0, TotalFrequency):
			if field.name == ListFrequency[i]:
				Frequency = request.form[ListFrequency[i]]
				if Frequency:
					try:
						Frequency = int(Frequency)
					except Exception as e:
						raise ValidationError("(Co-Borrower %s) This field must be in numeric format."%(i+1))
				else:
					raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))

def custom_CBTerm(form, field):
	CheckCoBorrower 	= request.form['CheckCoBorrower']
	ListTerm, TotalTerm = getControlList("CBTerm")
	ListInstallment, TotalInstallment = getControlList("CBInstallment")
	ListCurrency, TotalCurrency = getControlList("CBCurrency")
	ListLoanProduct, TotalLoanProduct = getControlList("CBLoanProduct")

	if CheckCoBorrower == "Y":
		for i in range(0, TotalTerm):
			if field.name == ListTerm[i]:
				try:
					Term 		= request.form[ListTerm[i]]
					Installment = request.form[ListInstallment[i]]
					Currency 	= request.form[ListCurrency[i]]
					LoanProduct = request.form[ListLoanProduct[i]]
				except:
					continue

				if Installment:
					if not Term:
						raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))
					try:
						int(Term)
					except:
						raise ValidationError("(Co-Borrower %s) This field must be in numeric format."%(i+1))

				if Term:
					try:
						Term = int(Term)
					except:
						raise ValidationError("(Co-Borrower %s) This field must be in numeric format."%(i+1))
				else:
					raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))
					# Call function to check Maximum and Minimum Term
					mktloanapp.checkMaxMinTerm(Term, Currency, LoanProduct)

def custom_CBInstallment(form, field):
	CheckCoBorrower 	= request.form['CheckCoBorrower']
	AppDate 			= request.form['AppDate']
	ListTerm, TotalTerm = getControlList("CBTerm")
	ListInstallment, TotalInstallment = getControlList("CBInstallment")
	ListFreqType, TotalFreqType = getControlList("CBFreqType")
	ListFrequency, TotalFrequency = getControlList("CBFrequency")
	
	if CheckCoBorrower == "Y":
		for i in range(0, TotalInstallment):
			if field.name == ListInstallment[i]:
				Term 		= request.form[ListTerm[i]]
				Installment = request.form[ListInstallment[i]]
				FreqType 	= request.form[ListFreqType[i]]
				Frequency 	= request.form[ListFrequency[i]]
				if Term:
					if not Installment:
						raise ValidationError("(Co-Borrower %s) This field is required."%(i+1))
					try:
						int(Installment)
					except:
						raise ValidationError("(Co-Borrower %s) This field must be in numeric format."%(i+1))

				Check 		= mktloanapp.validateTermAndInstallment(Term, Installment, Frequency, FreqType, AppDate)
				if Check not in "OK":
					raise ValidationError(Check)

def custom_CBMonthlyRepToNDI(form,field):
	CheckCoBorrower 	= request.form['CheckCoBorrower']
	ListMonthlyRepToNDI, TotalMonthlyRepToNDI 	= getControlList("CBMonthlyRepToNDI")
	ListLoanProduct, TotalLoanProduct 			= getControlList("CBLoanProduct")
	LoanProductObj 		= MKT_LOAN_PRODUCT.query
	DSR = '65'
	
	if CheckCoBorrower == "Y":
		for i in range(0, TotalMonthlyRepToNDI):
			if field.name == ListMonthlyRepToNDI[i]:
				MonthlyRepToNDI = request.form[ListMonthlyRepToNDI[i]]
				LoanProduct 	= request.form[ListLoanProduct[i]]
				LoanCBProObj 	= LoanProductObj.get(LoanProduct)
				if LoanCBProObj:
					DSR = LoanCBProObj.MonthlyRepToNDI
				else:
					raise ValidationError("Loan Product not found.")
				
				if float(MonthlyRepToNDI) <= 0:
					raise ValidationError(Markup("(Co-Borrower %s) Monthly Repayment to NDI <b>(%s%%)</b> must be bigger than 0."%(i+1,mktmoney.formatNumber(float(MonthlyRepToNDI)))))
				if float(MonthlyRepToNDI) > float(DSR):
					raise ValidationError(Markup("(Co-Borrower %s) Monthly Repayment to NDI <b>(%s%%)</b> is over 65%%."%(i+1,mktmoney.formatNumber(float(MonthlyRepToNDI)))))

def custom_Guarantor(form, field):
	"""
		1. Check Duplicate Guarantor
		2. CheckGuarantor is Yes => Guarantor is required
	"""

	CheckGuarantor 	= request.form['CheckGuarantor'] if request.method == "POST" else ""
	
	controls_list 	= request.form
	ListGuarantor	= [item for item in controls_list if ("Guarantor" in item and "GuarantorType" not in item and "CheckGuarantor" not in item)]
	TotalGuarantor 	= len(ListGuarantor)
	ListGuarantor.sort()

	ListCoBorrower, TotalCoBorrower = getControlList("CoBorrowerID")
	ListCBSpouse, TotalCBSpouse 	= getControlList("CBSpouseID")
	MainBorrower 	= request.form['LNCustomerID']
	Spouse 			= request.form['SpouseID']

	AllGuarantor 	= []
	for nub in range(0,TotalGuarantor):
		AllGuarantor.append(request.form[ListGuarantor[nub]])

	AllCoBorrower 	= []
	for nub in range(0,TotalCoBorrower):
		AllCoBorrower.append(request.form[ListCoBorrower[nub]])

	AllCBSpouse 	= []
	for nub in range(0,TotalCBSpouse):
		AllCBSpouse.append(request.form[ListCBSpouse[nub]])

	if CheckGuarantor == "Y":
		for i in range(0,TotalGuarantor):
			if field.name == ListGuarantor[i]:
				Guarantor = request.form[ListGuarantor[i]]
				# GuarantorObj = MKT_CUSTOMER.query.get(Guarantor)
				# Label = getValidationLabel(GuarantorObj,i,"Guarantor")

				if Guarantor == "__None":
					raise ValidationError("(Guarantorr %s) Guarantor is required."%(i+1))
				else:
					if Guarantor == MainBorrower:
						raise ValidationError("(Guarantor %s) Guarantor and Main Borrower are duplicated."%(i+1))
					if Guarantor == Spouse:
						raise ValidationError("(Guarantor %s) Guarantor and Main Borrower's spouse are duplicated."%(i+1))

					DupGuarantor = [x for x in AllGuarantor if AllGuarantor.count(x) > 1]
					if DupGuarantor:
						raise ValidationError("(Guarantor %s) Guarantor and other Guarantor are duplicated."%(i+1))

					AllCoBorrower.append(Guarantor)
					DupCoBorrower = [x for x in AllCoBorrower if AllCoBorrower.count(x) > 1]
					if DupCoBorrower:
						raise ValidationError("(Guarantor %s) Gurantor and Co-Borrower are duplicated."%(i+1))

					AllCBSpouse.append(Guarantor)
					DupCBSpouse = [x for x in AllCBSpouse if AllCBSpouse.count(x) > 1]
					if DupCBSpouse:
						raise ValidationError("(Guarantor %s) Gurantor and Co-Borrower's spouse are duplicated."%(i+1))

					# # Validatae duplicate
					# validateGuarantor(GuarantorObj,Label,"Guarantor")
					# Validate Block
					validateBlockCustomer(Guarantor)

	else:
		for i in range(0,TotalGuarantor):
			if field.name == ListGuarantor[i]:
				Guarantor = request.form[ListGuarantor[i]]
				if Guarantor != "__None":
					raise ValidationError("(Guarantor %s) Guarantor is not required."%(i+1))

def checkCBCSuccess(LoanAppID):
	Result = True,[]
	CBCDetailList = []
	LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanAppID)
	if LoanAppObj:#Old Application
		CBCObj = MKT_CBC.query.filter_by(LoanAppID=LoanAppID)
		if CBCObj.count() > 0:#have in CBC Record
			for row in CBCObj.all():
				CBCDetailObj = MKT_CBC_DE.query.filter_by(ID=row.ID)
				for row in CBCDetailObj:
					if row.EnquiryID == "" or row.EnquiryID == None:
						CBCDetailList.append(row)
						# Result = False
				if CBCDetailList:
					Result = False, CBCDetailList
		else:#not yet have in CBC Records
			Result = False,[]

	else:#New Application
		Result = False,[]

	return Result

class FRM_LOAN_APPLICATION_EX(FRM_LOAN_APPLICATION):
	AppStatus 		= SelectField(getLanguage("Status"),
						choices=[	('0', 'New'), 
									('1', 'Submitted'), 
									('2', 'Reviewed'),
									('3', 'Approved'),
									('4', 'Rejected'),
									('5', 'Cancelled'),
									('6', 'Closed')
								],
						default='0',
						coerce=str
					)
	AppDate 		= DateField(requiredlabel(getLanguage("Application Date"), "*"), [validators.Required()], default=loadCurrentDate)
	TypeOfLoan		= SelectField(requiredlabel('Type of Loan','*'),
						choices=[
							('1', 'New'),
							('2', 'Top Up')
						],
						default='1',
						coerce=str,
						validators=[custom_Topup]
					)
	FirstHome		= SelectField(requiredlabel('First Home','*'),
					choices=[
						('', '--None--'),
						('Y', 'Yes'),
						('N', 'No')
					],
					default='',
					coerce=str,
					validators=[validators.Required()]
				)
	Refinance		= SelectField(requiredlabel('Refinance Loan','*'),
					choices=[
						('', '--None--'),
						('Y', 'Yes'),
						('N', 'No')
					],
					default='',
					coerce=str,
					validators=[validators.Required()]
				)
	VBID 			= RemoteTextField(getLanguage("Village Bank"))
	Group 			= IntegerField(getLanguage("Group"), [validators.Optional()])

	SourceOfFund 	= QuerySelectField(getLanguage("Source of Fund"),
						query_factory=loadSourceOfFund,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Source of Fund")
					)
	CBC 			= SelectField('Check CBC',
						choices=[
							('Y', 'Yes'),
							('N', 'No')
						],
						default='Y',
						coerce=str,
					)
	CheckGuarantor	= SelectField('Guarantor',
						choices=[
							('Y', 'Yes'),
							('N', 'No')
						],
						default='Y',
						coerce=str,
					)
	CheckCoBorrower = SelectField('Co-Borrower',
						choices=[
							('Y', 'Yes'),
							('N', 'No')
						],
						default='Y',
						coerce=str,
					)
	FireInsurance 	= SelectField(requiredlabel('Fire Insurance','*'),
						choices=[
							("", "--None--"),
							('Y', 'Yes'),
							('N', 'No')
						],
						default="",
						coerce=str,
						validators=[validators.Required()]
					)
	HealthInsurance	= SelectField(requiredlabel('Health Insurance','*'),
						choices=[
							("", "--None--"),
							('Y', 'Yes'),
							('N', 'No')
						],
						default="",
						coerce=str,
						validators=[validators.Required()]
					)
	PersonalAccident= SelectField(requiredlabel('Personal Accident','*'),
						choices=[
							("", "--None--"),
							('Y', 'Yes'),
							('N', 'No')
						],
						default="",
						coerce=str,
						validators=[validators.Required()]
					)
	OtherCondition 	= TextAreaField("Other Condition")
	InquiryAmount	= TextField(requiredlabel("Inquiry Amount","*"),
								validators=[validators.Required()])
	LVR 			= TextField("Loan to Value Ratio (%)",
						default = 0,)
	MonthlyRep 		= TextField("Monthly Repayment",
						default = 0)
	EquivMonthlyRep = TextField("Equivalent Monthly Repayment",
						default = 0)
	NDI 			= TextField("Total NDI",
						default = 0)
	MonthlyRepToNDI = TextField("Monthly Rep to NDI (%)",
						default = 0)

	# Tab Main Borrower Loan
	LNCustomerID 	= RemoteTextField(requiredlabel("Main Borrower","*"),
						description="1-Main Borrower",
						validators=[validators.Required()])
	SpouseID 		= QuerySelectField("Main Borrower Spouse",
						query_factory=loadSpouse,
						get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("None"),
						description="1-Main Borrower"
						)
	Collateral 		= 	QuerySelectField(requiredlabel(getLanguage("Collateral"),"*"),
						query_factory=loadCollateral,
						get_label=lambda a: a.ID + " - " + a.Description,
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("None"),
						description="1-Main Borrower"
					)
	Currency 		= QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
						query_factory=loadCurrency,
						get_label=u'ID',
						default=lambda:loadCurrency('USD'),
						description="1-Main Borrower",
						validators=[validators.Required()]
					)
	SplitAmount		= SelectField("No Split Amount",
						choices=[
							('Y', 'Yes'),
							('N', 'No')
							],
						default='Y',
						coerce=str,
						description="1-Main Borrower",
						)
	AppliedAmount 	= TextField(requiredlabel("Applied Amount", "*"), 
						description="1-Main Borrower",
						validators=[validators.Required()])
	Amount 			= TextField(requiredlabel("Approved Amount", "*"), 
						description="1-Main Borrower",
						validators=[validators.Required()])
	EquivAmount 	= TextField("Equivalent Approved Amount", 
						description="1-Main Borrower")
	Cycle 			= IntegerField(requiredlabel(getLanguage("Cycle"), "*"), 
						description="1-Main Borrower",
						validators=[validators.Required()], 
						default=1)
	LoanProduct 	= QuerySelectField(requiredlabel(getLanguage("Loan Product"), "*"),
						query_factory=loadLoanProduct,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Loan Product"),
						description="1-Main Borrower",
						validators=[validators.Required()]
					)
	LoanPurpose 	= QuerySelectField(getLanguage("Loan Purpose"),
						query_factory=loadLoanPurpose,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Loan Purpose"),
						description="1-Main Borrower",
					)
	Category 		= TextField(requiredlabel(getLanguage("Category"), "*"), 
						description="1-Main Borrower",
						validators=[validators.Required()])
	InterestRate 	= TextField(requiredlabel(getLanguage("Interest Rate"), "*"), 
						description="1-Main Borrower",
						validators=[validators.Required()], default=0)
	RepaymentMode	= SelectField(requiredlabel("Repayment Mode",'*'),
						choices=[('','--Choose Repayment Mode--'),
								 ('1', '1. Declining (Fixed Principal Payment)'),
								 ('2', '2. Annuity (EMI)'),
								 ('3', '3. Balloon Payment')],
						coerce=str,
						validators=[validators.Required()],
						description="1-Main Borrower"
					)
	FreqType 		= SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
						choices=[('', '--%s--' %getLanguage("None")), ('1', '1. %s' %getLanguage("Monthly")), ('2', '2. %s' %getLanguage("Weekly"))],
						coerce=str,
						validators=[validators.Required()],
						description="1-Main Borrower",
						default='1'
					)
	Frequency 		= IntegerField(requiredlabel(getLanguage("Frequency"), "*"), 
						description="1-Main Borrower",
						validators=[validators.Required()], default=1)
	Term 			= TextField(requiredlabel("Term (Month)", "*"),
						description="1-Main Borrower",
						validators=[validators.Required()])
	Installment 	= TextField(getLanguage("Installment"),
						description="1-Main Borrower",)

	# Tab Co-borrower
	## Note Below Variable will use CB as abbreviation for Co-Borrower
	CoBorrowerID 	= RemoteTextField(requiredlabel(getLanguage("Co-Borrower"),"*"),
						description="2-Co-Borrower",
						validators=[custom_CoBorrowerID])
	CBSpouseID 		= RemoteTextField("Co-Borrower Spouse",
						description="2-Co-Borrower",
						validators=[custom_CBSpouseID])
	RelationIndicator 		= 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="2-%s" %getLanguage("Co-Borrower")
						)
	CBCurrency 		= QuerySelectField(requiredlabel(getLanguage("Currency"),"*"),
						query_factory=loadCurrency,
						get_label=u'ID',
						default=lambda:loadCurrency('USD'),
						description="2-Co-Borrower",
						validators=[custom_CBCurrency])
	CBSplitAmount	= SelectField("No Split Amount",
						choices=[
							('Y', 'Yes'),
							('N', 'No')
							],
						default='Y',
						coerce=str,
						description="2-Co-Borrower",
						)
	CBAppliedAmount = TextField(requiredlabel("Applied Amount","*"),
						description="2-Co-Borrower",
						validators = [custom_CBAppliedAmount])
	CBAmount 		= TextField(requiredlabel("Approved Amount","*"),
						description="2-Co-Borrower",
						validators=[custom_CBAmount])
	CBEquivAmount 	= TextField("Equivalent Approved Amount", 
						description="2-Co-Borrower")
	CBCycle 		= TextField(requiredlabel(getLanguage("Cycle"),"*"),
						default = 1,
						description="2-Co-Borrower",
						validators=[custom_CBCycle])
	CBLoanProduct 	= QuerySelectField(requiredlabel(getLanguage("Loan Product"),"*"),
						query_factory=loadLoanProduct,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Loan Product"),
						description="2-Co-Borrower",
						validators=[custom_CBLoanProduct])
	CBLoanPurpose 	= QuerySelectField(getLanguage("Loan Purpose"),
						query_factory=loadLoanPurpose,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Loan Purpose"),
						description="2-Co-Borrower",
					)
	CBCategory 		= TextField(requiredlabel(getLanguage("Category"), "*"),
						description="2-Co-Borrower",
						validators=[custom_CBCategory])
	CBInterestRate 	= TextField(requiredlabel(getLanguage("Interest Rate"), "*"),
						description="2-Co-Borrower",
						validators=[custom_CBInterestRate])
	CBRepaymentMode	= SelectField(requiredlabel("Repayment Mode","*"),
						choices=[('','--Choose Repayment Mode--'),
								 ('1', '1. Declining (Fixed Principal Payment)'),
								 ('2', '2. Annuity (EMI)'),
								 ('3', '3. Balloon Payment')],
						coerce=str,
						description="2-Co-Borrower",
						validators = [custom_CBRepaymentMode])
	CBFreqType 		= SelectField(requiredlabel(getLanguage("Frequency Type"),"*"),
						choices=[('', '--%s--' %getLanguage("None")), ('1', '1. %s' %getLanguage("Monthly")), ('2', '2. %s' %getLanguage("Weekly"))],
						coerce=str,
						description="2-Co-Borrower",
						default='1',
						validators=[custom_CBFreqType])
	CBFrequency 	= TextField(requiredlabel(getLanguage("Frequency"), "*"),
						description="2-Co-Borrower",
						default='1',
						validators=[custom_CBFrequency])
	CBTerm 			= TextField(requiredlabel("Term (Month)","*"),
						description="2-Co-Borrower",
						validators=[custom_CBTerm])
	CBInstallment 	= TextField(getLanguage("Installment"),
						description="2-Co-Borrower",
						validators=[custom_CBInstallment])
	CBMonthlyRep 	= TextField("Monthly Repayment",
						default = 0,
						description="2-Co-Borrower")
	CBEquivMonthlyRep = TextField("Equivalent Monthly Repayment",
						description="2-Co-Borrower",
						default = 0)
	CBNDI			= TextField("Total NDI",
						default = 0,
						description="2-Co-Borrower")
	CBMonthlyRepToNDI = TextField("Monthly Rep to NDI (%)",
						default = 0,
						description="2-Co-Borrower",
						validators=[custom_CBMonthlyRepToNDI])

	# Tab Guarantor
	## Note Below Variable will use GT as abbreviation for Guarantor
	Guarantor 			= QuerySelectField(getLanguage("Guarantor"),
								query_factory=loadGuarantor,
								get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
								allow_blank=True,
								blank_text=u'--%s--' %getLanguage("None"),
								description="3-%s" %getLanguage("Guarantor"),
								validators=[custom_Guarantor])
	GTRelationIndicator 		= 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="3-%s" %getLanguage("Guarantor")
						)
	GuarantorType		= SelectField("Guarantor Type",
								choices=[('','--None--'),('1','Supported Guarantor'),('2','Unsupported Guarantor')],
								coerce=str,
								default='',
								description="3-%s" %getLanguage("Guarantor")
							)
	Type 				= SelectField("Type",
								choices=[('G', 'Guarantor'), ('R', 'Referrer'), ('S', 'Successor')],
								coerce=str,
								default='G',
								description="3-%s" %getLanguage("Guarantor")
							)

	# Tab Checklist
	CheckList = QuerySelectField(getLanguage("Check List Item"),
					query_factory=loadCheckList,
					get_label=u'Description',
					allow_blank=True,
					blank_text=u'--%s--' %getLanguage("Choose Check List"))
	YesNo = SelectField("%s/%s" %(getLanguage("Yes"), getLanguage("No")),
					choices=[('N', getLanguage('No')), ('Y', getLanguage('Yes'))],
					coerce=str)
	YesDate = DateField(getLanguage("Yes Date"), [validators.Optional()])

	PreparedBy 		= TextField(getLanguage("Prepared By"), default=loadUserID)
	PreparedDate 	= TextField(getLanguage("Prepared Date"), [validators.Optional()], default=mktdate.getDateTimeNow)
	ReviewedBy 		= TextField(getLanguage("Reviewed By"))
	ReviewedDate 	= DateField(getLanguage("Reviewed Date"), [validators.Optional()])
	ApprovedBy 		= TextField(getLanguage("Approved By"))
	ApprovedDate 	= DateField(getLanguage("Approved Date"), [validators.Optional()])
	RejectedBy 		= TextField(getLanguage("Rejected By"))
	RejectedDate 	= DateField(getLanguage("Rejected Date"), [validators.Optional()])

	Iframe = MKTIframe("Signature",dicIframe={'width':'100%','height':'3000px','frameborder':'0'}, description='4-Signatory')
	QuickLinkIFrame = MKTIframe("QuickLink",dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, description='5-Quick Link')


	def validate_LNCustomerID(form,field):
		parent = super(FRM_LOAN_APPLICATION_EX,FRM_LOAN_APPLICATION_EX).validate_LNCustomerID(form,field)
		Customer 	= request.form['LNCustomerID']
		LoanProduct = request.form['LoanProduct']
		Term 		= request.form['Term']

		CustomerObj = MKT_CUSTOMER.query.get(Customer)
		if CustomerObj:
			LoanProObj = MKT_LOAN_PRODUCT.query.get(LoanProduct)
			Age = int(mktdate.getAge(CustomerObj.DateOfBirth))
			if LoanProObj:
				TermInYear = float(Term)/12
				if float(Age) + float(TermInYear) > float(LoanProObj.MaxAge):
					TermAllowed = (int(LoanProObj.MaxAge) - Age) *12
					raise ValidationError("Customer is %s years old and allowed to request loan with max term %s month(s) only." %(Age,TermAllowed))

	def validate_CoBorrowerID(form,field):
		pass

	def validate_Guarantor(form,field):
		pass

	def validate_SpouseID(form, field):
		"""
			1. Check spouse required for Main CoBorrower
		"""
		Customer 	= request.form['LNCustomerID'] if request.method == "POST" else ""
		Spouse 		= request.form['SpouseID'] if request.method == "POST" else ""
		CustomerObj = MKT_CUSTOMER.query.get(Customer)
		Name 		= "%s %s"%(CustomerObj.LastNameEn, CustomerObj.FirstNameEn) if CustomerObj else ""
		Status 		={ 	'1':'Married',
						'2':'Single',
						'3':'Divorced',
						'4':'Widow',
						'5':'Widower',
						'6':'Separated',
						'7':'Defacto',
						'8':'Unknown'}

		if CustomerObj:
			MaritalStatus = CustomerObj.MaritalStatus

			# if MaritalStatus in ['1','6'] and Spouse == "__None":
			# 	raise ValidationError(Markup("Customer <b>%s</b>'s marital status is %s, spouse is required."%(Name,Status.get(MaritalStatus))))
			
			if MaritalStatus in ['1','6'] and Spouse != "__None":
				if Spouse == Customer:
					raise ValidationError("Customer and spouse cannot be the same person.")

			if MaritalStatus not in ['1','6'] and Spouse != "__None":
				raise ValidationError(Markup("Customer <b>%s</b>'s marital status is %s, spouse is not required."%(Name,Status.get(MaritalStatus))))

			# Validate Block
			validateBlockCustomer(Spouse)

	def validate_Collateral(form, field):
		Collateral 		= request.form['Collateral']
		LoanProduct 	= request.form['LoanProduct']
		LoanProductObj 	= MKT_LOAN_PRODUCT.query.get(LoanProduct)
		RequireCollateral = "Y"
		if LoanProductObj:
			RequireCollateral = LoanProductObj.Collateral
		if RequireCollateral == "Y":
			if Collateral == "__None":
				raise ValidationError("This field is required.")

	def validate_LoanProduct(form,field):
		LoanProduct = request.form['LoanProduct']
		ID 			= request.form['ID']
		Currency 	= request.form['Currency']
		parents = super(FRM_LOAN_APPLICATION_EX,FRM_LOAN_APPLICATION_EX).validate_LoanProduct(form,field)
		if LoanProduct:
			LNCustomerID 	= request.form['LNCustomerID']
			LoanProductObj 	= MKT_LOAN_PRODUCT.query.get(LoanProduct)
			Description 	= LoanProductObj.Description

			CheckHomeEquityLoan = checkHomeEquityLoan("Customer",ID,LNCustomerID,LoanProductObj)

	def validate_LVR(form,field):
		LVR 			= calculateLVR()
		LoanProduct 	= request.form['LoanProduct']
		LoanProductObj 	= MKT_LOAN_PRODUCT.query.get(LoanProduct)

		CheckLVR = '75'
		RequireCollateral = "Y"
		if LoanProductObj:
			CheckLVR = LoanProductObj.LVR
			RequireCollateral = LoanProductObj.Collateral
		else:
			raise ValidationError("Loan Product not found.")
		
		# if loan product require collateral then check LVR must be bigger than 0
		if RequireCollateral == "Y":
			if float(LVR) <= 0:
				raise ValidationError(Markup("LVR <b>(%s%%)</b> must be bigger than 0."%(mktmoney.formatNumber(float(LVR)))))
			if float(LVR) > float(CheckLVR):
				raise ValidationError(Markup("LVR <b>(%s%%)</b> is over %s%%."%(mktmoney.formatNumber(float(LVR)), CheckLVR)))
		else:
			if float(LVR) > float(CheckLVR):
				raise ValidationError(Markup("LVR <b>(%s%%)</b> is over %s%%."%(mktmoney.formatNumber(float(LVR)), CheckLVR)))

	def validate_MonthlyRepToNDI(form,field):
		MonthlyRepToNDI = field.data
		LoanProduct 	= request.form['LoanProduct']
		LoanProductObj 	= MKT_LOAN_PRODUCT.query.get(LoanProduct)
		DSR = '65'
		if LoanProductObj:
			DSR = LoanProductObj.MonthlyRepToNDI
		else:
			raise ValidationError("Loan Product not found.")

		if float(MonthlyRepToNDI) <= 0:
			raise ValidationError(Markup("Monthly Repayment to NDI <b>(%s%%)</b> must be bigger than 0."%(mktmoney.formatNumber(float(MonthlyRepToNDI)))))
		if float(MonthlyRepToNDI) > float(DSR):
			raise ValidationError(Markup("Monthly Repayment to NDI <b>(%s%%)</b> is over %s%%."%(mktmoney.formatNumber(float(MonthlyRepToNDI)), DSR)))
	def validate_CBC(form,field):
		if request.form['CBC']=='Y':
			checkServer = views.isServer()
			if checkServer[0]==False:
				raise ValidationError(checkServer[1])

	def validate_InquiryAmount(form,field):
		TotalCBAmount 		= 	0
		TotalAppliedAmount 	= 	0
		InquiryAmount 		= 	float(request.form['InquiryAmount'])
		MBAppliedAmount 	= 	request.form['AppliedAmount']
		CheckCoBorrower 	= 	request.form['CheckCoBorrower']
		ListCBAppliedAmount, TotalCBAppliedAmount	= getControlList("CBAppliedAmount")
		if CheckCoBorrower == "Y":
			for i in range(0,TotalCBAppliedAmount):
				if ListCBAppliedAmount[i]:
					CBAppliedAmount = request.form[ListCBAppliedAmount[i]]
				TotalCBAmount += float(CBAppliedAmount)
		TotalAppliedAmount  = float(MBAppliedAmount) + float(TotalCBAmount)
		if InquiryAmount < TotalAppliedAmount:
			raise ValidationError(Markup("Inquiry Amount must be bigger than or equal total loan amount (Main Borrower + Co-Borrower(s)): <b>%.2f</b>."%TotalAppliedAmount))

	@staticmethod
	def isMultiValue():
		controls_list=["2-Co-Borrower", "3-Guarantor"]
		return controls_list

	@staticmethod
	def setVisible():
		base = super(FRM_LOAN_APPLICATION_EX, FRM_LOAN_APPLICATION_EX).setVisible()
		controls_list = [('VBID'), ('Group'), ('SourceOfFund'),('CheckList'),('YesNo'),('YesDate'),
						 ('PreparedBy'), ('PreparedDate'), ('ReviewedBy'), ('ReviewedDate'),
						 ('ApprovedBy'), ('ApprovedDate'), ('RejectedBy'), ('RejectedDate')]
		controls_list.extend(base)
		return controls_list

	@staticmethod
	def setDisable():
		base = super(FRM_LOAN_APPLICATION_EX, FRM_LOAN_APPLICATION_EX).setDisable()
		controls_list = [('AppStatus'), ('LVR'), ('MonthlyRep'), ('MonthlyRepToNDI'), ('FeeCharge'),
						 ("CBCategory"), ("CBInstallment"), ('CBMonthlyRep'), ("CBMonthlyRepToNDI"),
						 ('CBFeeCharge'), ('NDI'), ('CBNDI'), ('EquivMonthlyRep'), ('EquivAmount'),
						 ('CBEquivAmount'), ('CBEquivMonthlyRep'), ('SplitAmount'), ('CBSplitAmount')]
		controls_list.extend(base)
		return controls_list

	@staticmethod
	def setWidth():
		base = super(FRM_LOAN_APPLICATION_EX, FRM_LOAN_APPLICATION_EX).setWidth()
		controls_list = [	('CBTerm', 				len1),
							('CBCycle', 			len1),
							('CBFrequency',			len1),
							('CBInstallment', 		len1),
							("AppStatus", 			len2),
							("LVR", 				len2),
							("MonthlyRep", 			len2),
							("MonthlyRepToNDI", 	len2),
							('CBMonthlyRepToNDI',	len2),
							('CBMonthlyRep', 		len2),
							('NDI',					len2),
							('CBNDI',				len2),
							("EquivMonthlyRep", 	len2),
							('AppliedAmount', 		len2),
							('Amount', 				len2),
							('EquivAmount',			len2),
							("CBEquivMonthlyRep", 	len2),
							('CBAppliedAmount', 	len2),
							('CBAmount', 			len2),
							('CBEquivAmount',		len2),
							('SplitAmount',			len1),
							('CBSplitAmount',		len1),
						]
		controls_list.extend(base)
		return controls_list

	@staticmethod
	def formatMoney():
		return ["InquiryAmount"],"Currency"

	@staticmethod
	def moneyField():
		base = super(FRM_LOAN_APPLICATION_EX, FRM_LOAN_APPLICATION_EX).moneyField()
		controls_list = [	
							['FeeCharge',			"Currency"],
							['MonthlyRep',			"Currency"],
							['NDI',					'Currency'],
							["CBAppliedAmount", 	"CBCurrency"], 
							["CBAmount", 			"CBCurrency"],
							["CBFeeCharge",			"CBCurrency"],
							['CBMonthlyRep',		"CBCurrency"],
							['CBNDI',				"CBCurrency"],
							['InquiryAmount',		"Currency"]

						]
		controls_list.extend(base)
		return controls_list

	@staticmethod
	def hotSelectField():
		base 			= super(FRM_LOAN_APPLICATION_EX, FRM_LOAN_APPLICATION_EX).hotSelectField()
		hotfield 		= []

		fielddisplay 	= "SpouseID"
		varname 		= "Customer:$('#LNCustomerID').val()"
		fun 			= ["LNCustomerID", varname, fielddisplay, "/Morakot/LoadDicSpouse", "change"]
		hotfield.append(fun)

		hotfield.extend(base)
		return hotfield

	@staticmethod
	def hotField():
		hotfield 		= []

		# hotfields from main class
		fielddisplay 	= "$('#Category').val(data.Category); $('#InterestRate').val(data.InterestRate); $('#InterestRate').focus();$('#RepaymentMode').focus()"
		varname 		= "LoanProduct:$('#LoanProduct').val(),Currency:$('#Currency').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/LoanProductID", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Category').val(data.Category); $('#InterestRate').val(data.InterestRate); $('#InterestRate').focus();$('#RepaymentMode').focus()"
		varname 		= "LoanProduct:$('#LoanProduct').val(),Currency:$('#Currency').val()"
		fun 			= ["Currency", varname, fielddisplay, "/Morakot/LoanProductID", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#YesDate').val(data.YesDate)"
		varname 		= "YesNo:$('#YesNo').val()"
		fun 			= ["YesNo", varname, fielddisplay, "/Morakot/YesNo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ReviewedBy').val(data.ReviewedBy),$('#ReviewedDate').val(data.ReviewedDate)"
		fielddisplay 	+= ",$('#ApprovedBy').val(data.ApprovedBy),$('#ApprovedDate').val(data.ApprovedDate)"
		fielddisplay 	+= ",$('#RejectedBy').val(data.RejectedBy),$('#RejectedDate').val(data.RejectedDate)"
		varname 		= "AppStatus:$('#AppStatus').val()"
		fun 			= ["AppStatus", varname, fielddisplay, "/Morakot/LoanAppStatus", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),AppDate:$('#AppDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CalculateInstallment", "blur"]
		hotfield.append(fun)

		fielddisplay 	= ("$('#Amount').val(data.Amount);$('#Amount').focus();$('#EquivAmount').focus()")
		varname 		= ("Amount:$('#AppliedAmount').val(),Currency:$('#Currency').val()")
		fun 			= ["AppliedAmount", varname, fielddisplay, "/Morakot/LoanApprovedAmount", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),AppDate:$('#AppDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Frequency", varname, fielddisplay, "/Morakot/CalculateInstallment", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),AppDate:$('#AppDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["FreqType", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CoBorrowerName').val(data.CustomerName);$('#CoBorrowerID').val(data.Customer)"
		varname 		= "CoBorrowerID:$('#CoBorrowerID').val()"
		fun 			= ["CoBorrowerID", varname, fielddisplay, "/Morakot/CustomerFullNameByID", "blur"]
		hotfield.append(fun)

		# hotfield for sub class
		# hot field for hidden field
		fielddisplay 	= "$('#CBSpouseID').select2({'data':data.results});$('#CBSpouseID').prev().css('display', 'block')"
		varname 		= "Customer:$('#CoBorrowerID').val()"
		fun 			= ["CoBorrowerID", varname, fielddisplay, "/Morakot/LoadListSpouse", "change"]
		hotfield.append(fun)

		fielddisplay 	= ("$('#RelationIndicator').select2('data', {'id':data['results']['RelationIndicator']['id'],'text':data['results']['RelationIndicator']['text']})")
		fielddisplay 	+=(";$('#CBSpouseID').select2('data', {'id':data['results']['CBSpouse']['id'],'text':data['results']['CBSpouse']['text']})")
		fielddisplay 	+=(";$('#CBCurrency').select2('data', {'id':'USD','text':'USD'})")
		fielddisplay 	+=(";$('#CBAppliedAmount').val(data['results'].CBAppliedAmount)")
		fielddisplay 	+=(";$('#CBAmount').val(data['results'].CBAmount)")
		fielddisplay 	+=(";$('#CBCycle').val(data['results'].CBCycle)")
		fielddisplay 	+=(";$('#CBLoanProduct').select2('data',{'id':data['results']['CBLoanProduct']['id'],'text':data['results']['CBLoanProduct']['text']})")
		fielddisplay 	+=(";$('#CBLoanPurpose').select2('data',{'id':data['results']['CBLoanPurpose']['id'],'text':data['results']['CBLoanPurpose']['text']})")
		fielddisplay 	+=(";$('#CBFreqType').select2('data',{'id':data['results']['CBFreqType']['id'],'text':data['results']['CBFreqType']['text']})")
		fielddisplay 	+=(";$('#CBFrequency').val(data['results'].CBFrequency)")

		varname 		= ("RelationIndicator:$('#RelationIndicator').val(),CBSpouseID:$('#CBSpouseID').val(),CBCurrency:$('#CBCurrency').val()")
		varname 		+=(",CBAppliedAmount:$('#CBAppliedAmount').val(),CBAmount:$('#CBAmount').val(),CBCycle:$('#CBCycle').val(),CBLoanPurpose:$('#CBLoanPurpose').val()")
		varname 		+=(",CBLoanProduct:$('#CBLoanProduct').val(),CBFreqType:$('#CBFreqType').val(),CBFrequency:$('#CBFrequency').val()")
		fun 			= ["CoBorrowerID", varname, fielddisplay, "/Morakot/SetDefault", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CBAmount').val(data.Amount);$('#CBAmount').focus();$('#CBEquivAmount').focus()"
		varname 		= "Amount:$('#CBAppliedAmount').val()"
		fun 			= ["CBAppliedAmount", varname, fielddisplay, "/Morakot/LoanApprovedAmount", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CBCategory').val(data.Category); $('#CBInterestRate').val(data.InterestRate); $('#CBInterestRate').focus();$('#CBRepaymentMode').focus()"
		fielddisplay 	+= ";$('#CBLoanPurpose').select2('data', {'id':'__None','text':'--Choose Loan Purpose--'})"
		varname 		= "LoanProduct:$('#CBLoanProduct').val(),Currency:$('#CBCurrency').val()"
		fun 			= ["CBLoanProduct", varname, fielddisplay, "/Morakot/LoanProductID", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CBCategory').val(data.Category); $('#CBInterestRate').val(data.InterestRate); $('#CBInterestRate').focus();$('#CBRepaymentMode').focus()"
		varname 		= "LoanProduct:$('#CBLoanProduct').val(),Currency:$('#CBCurrency').val()"
		fun 			= ["CBCurrency", varname, fielddisplay, "/Morakot/LoanProductID", "change"]
		hotfield.append(fun)
		
		fielddisplay 	= "$('#CBInstallment').val(data.Installment);$('#CBInstallment').focus(); $('#CBFeeCharge').focus(); $('#CBMonthlyRepToNDI').focus()"
		varname 		= "Term:$('#CBTerm').val(),AppDate:$('#AppDate').val(),FreqType:$('#CBFreqType').val(),Frequency:$('#CBFrequency').val()"
		fun 			= ["CBTerm", varname, fielddisplay, "/Morakot/CalculateInstallment", "blur"]
		hotfield.append(fun)

		# Calculate DSR - Monthly Repayment to NDI of Main Borrower
		fielddisplay 	= "$('#MonthlyRepToNDI').val(data.DSR);$('#MonthlyRep').val(data.CurrMonthlyRep);$('#NDI').val(data.NDI);$('#EquivMonthlyRep').val(data.EquivCurrMonthlyRep)"
		varname 		= "	ID:$('#ID').val(),\
							MainBorrower:$('#LNCustomerID').val(),\
							Spouse:$('#SpouseID').val(),\
							AppDate:$('#AppDate').val(),\
							Currency:$('#Currency').val(),\
							LoanProduct:$('#LoanProduct').val(),\
							Principal:$('#Amount').val(),\
							Interest:$('#InterestRate').val(),\
							Term:$('#Term').val(),\
							FreqType:$('#FreqType').val(),\
							Frequency:$('#Frequency').val(),\
							RepaymentMode:$('#RepaymentMode').val()"
		fun 			= ["LNCustomerID", varname, fielddisplay, "/Morakot/CalculateDSR", "change"]
		hotfield.append(fun)
		fun 			= ["SpouseID", varname, fielddisplay, "/Morakot/CalculateDSR", "change"]
		hotfield.append(fun)
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/CalculateDSR", "blur"]
		hotfield.append(fun)
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/CalculateDSR", "change"]
		hotfield.append(fun)
		fun 			= ["InterestRate", varname, fielddisplay, "/Morakot/CalculateDSR", "blur"]
		hotfield.append(fun)
		fun 			= ["RepaymentMode", varname, fielddisplay, "/Morakot/CalculateDSR", "change"]
		hotfield.append(fun)
		fun 			= ["Frequency", varname, fielddisplay, "/Morakot/CalculateDSR", "blur"]
		hotfield.append(fun)
		fun 			= ["FreqType", varname, fielddisplay, "/Morakot/CalculateDSR", "change"]
		hotfield.append(fun)
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CalculateDSR", "blur"]
		hotfield.append(fun)

		# Calculate DSR - Monthly Repayment to NDI of Co Borrower
		fielddisplay 	= "$('#CBMonthlyRepToNDI').val(data.DSR);$('#CBMonthlyRep').val(data.CurrMonthlyRep);$('#CBNDI').val(data.NDI);$('#CBEquivMonthlyRep').val(data.EquivCurrMonthlyRep)"
		varname 		= "	ID:$('#ID').val(),\
							MainBorrower:$('#CoBorrowerID').val(),\
							Spouse:$('#CBSpouseID').val(),\
							AppDate:$('#AppDate').val(),\
							Currency:$('#CBCurrency').val(),\
							LoanProduct:$('#CBLoanProduct').val(),\
							Principal:$('#CBAmount').val(),\
							Interest:$('#CBInterestRate').val(),\
							Term:$('#CBTerm').val(),\
							FreqType:$('#CBFreqType').val(),\
							Frequency:$('#CBFrequency').val(),\
							RepaymentMode:$('#CBRepaymentMode').val()"
		fun 			= ["CoBorrowerID", varname, fielddisplay, "/Morakot/CalculateDSR", "change"]
		hotfield.append(fun)
		fun 			= ["CBSpouseID", varname, fielddisplay, "/Morakot/CalculateDSR", "change"]
		hotfield.append(fun)
		fun 			= ["CBAmount", varname, fielddisplay, "/Morakot/CalculateDSR", "blur"]
		hotfield.append(fun)
		fun 			= ["CBLoanProduct", varname, fielddisplay, "/Morakot/CalculateDSR", "change"]
		hotfield.append(fun)
		fun 			= ["CBInterestRate", varname, fielddisplay, "/Morakot/CalculateDSR", "blur"]
		hotfield.append(fun)
		fun 			= ["CBRepaymentMode", varname, fielddisplay, "/Morakot/CalculateDSR", "change"]
		hotfield.append(fun)
		fun 			= ["CBFrequency", varname, fielddisplay, "/Morakot/CalculateDSR", "blur"]
		hotfield.append(fun)
		fun 			= ["CBFreqType", varname, fielddisplay, "/Morakot/CalculateDSR", "change"]
		hotfield.append(fun)
		fun 			= ["CBTerm", varname, fielddisplay, "/Morakot/CalculateDSR", "blur"]
		hotfield.append(fun)

		# Calculate Equivalent amount
		fielddisplay 	= "$('#EquivAmount').val(data.EquivAmount);$('#EquivAmount').focus();$('#Cycle').focus()"
		varname 		= ("Amount:$('#Amount').val(),Currency:$('#Currency').val()")
		fun 			= ["Amount", varname, fielddisplay, "/Morakot/CalculateEquivAmount", "blur"]
		hotfield.append(fun)
		fun 			= ["Currency", varname, fielddisplay, "/Morakot/CalculateEquivAmount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CBEquivAmount').val(data.EquivAmount);$('#CBEquivAmount').focus();$('#CBCycle').focus()"
		varname 		= "Amount:$('#CBAmount').val(),Currency:$('#CBCurrency').val()"
		fun 			= ["CBAmount", varname, fielddisplay, "/Morakot/CalculateEquivAmount", "blur"]
		hotfield.append(fun)
		fun 			= ["CBCurrency", varname, fielddisplay, "/Morakot/CalculateEquivAmount", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Cycle').val(data.Cycle)"
		varname 		= ("Customer:$('#LNCustomerID').val()")
		fun 			= ["LNCustomerID", varname, fielddisplay, "/Morakot/LoadCycle", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CBCycle').val(data.Cycle)"
		varname 		= ("Customer:$('#CoBorrowerID').val()")
		fun 			= ["CoBorrowerID", varname, fielddisplay, "/Morakot/LoadCycle", "change"]
		hotfield.append(fun)


		return hotfield

	@staticmethod
	def beforeAuthorize():
		return True

	@staticmethod
	def IsAcceptOverride():
		"""
			1. Check for existing loan application for this customer.
			2. Check if Customer and Spouse has the same gender
			3. Check if CoBorrower and Spouse has the same gender
			4. Check CBC
		"""
		Override, Msg = super(FRM_LOAN_APPLICATION_EX, FRM_LOAN_APPLICATION_EX).IsAcceptOverride()
		ID 			= request.form["ID"] if request.method == "POST" else ""
		MonthlyRepToNDI = request.form['MonthlyRepToNDI'] if request.method == "POST" else ""
		LVR 		= request.form['LVR'] if request.method == "POST" else ""
		ListMonthlyRepToNDI = getControlList("CBMonthlyRepToNDI")
		Customer 	= request.form['LNCustomerID'] if request.method == "POST" else ""
		Spouse 		= request.form['SpouseID'] if request.method == "POST" else ""
		
		CheckCoBorrower = request.form['CheckCoBorrower']
		ListCoBorrower, TotalCoBorrower = getControlList('CoBorrowerID')
		ListCBSpouse, TotalCBSpouse = getControlList('CBSpouseID')
		
		ListAllBorrower = [Customer,Spouse]
		ListAllBorrower.extend([request.form[item] for item in ListCoBorrower])
		ListAllBorrower.extend([request.form[item] for item in ListCBSpouse])

		ListAllBorrower.sort()

		ApprovedStatus 	= ['3']
		NewStatus 		= ['0','1','2']
		NonRejectedStatus = ApprovedStatus + NewStatus
		LoanAppObj 		= MKT_LOAN_APPLICATION.query.filter(or_(MKT_LOAN_APPLICATION.LNCustomerID.in_(ListAllBorrower),
																MKT_LOAN_APPLICATION.SpouseID.in_(ListAllBorrower)),\
															MKT_LOAN_APPLICATION.ID != ID,\
															MKT_LOAN_APPLICATION.AppStatus.in_(NonRejectedStatus))

		if LoanAppObj:
			Override 	= True
			for customer in ListAllBorrower:
				if customer:
					# Check for existing loan applications in MKT_LOAN_APPLICATION and MKT_LOAN_CO_BORROWER
					NewLoanAppObj = LoanAppObj.filter(or_(MKT_LOAN_APPLICATION.LNCustomerID == customer,
															MKT_LOAN_APPLICATION.SpouseID == customer)).all()
					CoBorrowerObj = db.session.query(MKT_LOAN_CO_BORROWER).filter(or_(MKT_LOAN_CO_BORROWER.CoBorrowerID == customer,
																						MKT_LOAN_CO_BORROWER.CBSpouseID == customer),
																						MKT_LOAN_CO_BORROWER.ID != ID,
																						MKT_LOAN_APPLICATION.AppStatus.in_(NewStatus))\
													.join(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION.ID == MKT_LOAN_CO_BORROWER.ID).all()
					NewLoanAppObj.extend(CoBorrowerObj)

					if NewLoanAppObj:
						Msg += "Customer <b>%s</b> already has existing loan application(s):"%(customer)
						for item in NewLoanAppObj:
							try:
								MonthlyRep 		= mktmoney.toMoney(float(item.EquivMonthlyRep),mktmoney.getCurrencyObj(mktsetting.getAccSetting().BaseCurrency)) if item.EquivMonthlyRep else 0
								MonthlyRepToNDI = item.MonthlyRepToNDI if item.MonthlyRepToNDI else 0
							except Exception as e:
								MonthlyRep 		= mktmoney.toMoney(float(item.CBEquivMonthlyRep),mktmoney.getCurrencyObj(mktsetting.getAccSetting().BaseCurrency)) if item.CBEquivMonthlyRep else 0
								MonthlyRepToNDI = item.CBMonthlyRepToNDI if item.CBMonthlyRepToNDI else 0
							Msg 	+= "<br>&emsp;<a href='javascript:void(0)' onClick=CustomClickView('Loan&nbspApplication-%s','LoanApplicationEx/?ID=%s')> %s</a> \
										(EquivMonthlyRep: $%s, MonthlyRepToNDI: %s%%)"%(item.ID,item.ID,item.ID,MonthlyRep,MonthlyRepToNDI)
				if Msg:
					Msg+="<br>"

		CustomerObj = MKT_CUSTOMER.query
		MainCusObj 	= CustomerObj.get(Customer)
		MainCusGender 	= MainCusObj.Gender if MainCusObj else ""
		MainCusName 	= "%s %s"%(MainCusObj.LastNameEn,MainCusObj.FirstNameEn) if MainCusObj else ""
		
		SpouseObj 	= CustomerObj.get(Spouse)
		SpouseName 	= "%s %s"%(SpouseObj.LastNameEn,SpouseObj.FirstNameEn) if SpouseObj else ""
		SpouseGender = SpouseObj.Gender if SpouseObj else ""
		if MainCusGender == SpouseGender:
			Override = True
			Msg 	+= "<br>" if Msg else ""
			Msg 	+= "Main Borrower <b>%s(%s)</b> and Spouse <b>%s(%s)</b> has the same gender."%(MainCusName, MainCusGender, SpouseName, SpouseGender)


		if CheckCoBorrower == 'Y':

			for i in range(0,TotalCoBorrower):
				CoBorrowerID 	= request.form[ListCoBorrower[i]]
				CoBorrowerObj	= CustomerObj.get(CoBorrowerID)
				CoBorrowerGender= CoBorrowerObj.Gender if CoBorrowerObj else ""
				CoBorrowerName 	= '%s %s'%(CoBorrowerObj.LastNameEn, CoBorrowerObj.FirstNameEn) if CoBorrowerObj else ""

				CBSpouseID 		= request.form[ListCBSpouse[i]]
				CBSpouseObj 	= CustomerObj.get(CBSpouseID)
				CBSpouseGender 	= CBSpouseObj.Gender if CBSpouseObj else ""
				CBSpouseName 	= "%s %s"%(CBSpouseObj.LastNameEn, CBSpouseObj.FirstNameEn) if CBSpouseObj else ""

				if CoBorrowerGender == CBSpouseGender:
					Override 	= True
					Msg 		+= "<br>" if Msg else ""
					Msg 		+= "(Co-Borrower %s) Co-Borrower <b>%s(%s)</b> and Spouse <b>%s(%s)</b> has the same gender."%(i+1, CoBorrowerName, CoBorrowerGender, CBSpouseName, CBSpouseGender)

		Branch 		= mktuser.getCurrentBranch()
		CustomerObj = MKT_CUSTOMER.query.get(Customer)
		if CustomerObj.Branch != Branch:
			Override 	= True
			Msg 		= (
							"Customer <a href='javascript:void(0)' onClick=CustomClickView('Customer','CustomerEx/?ID=%s')><u>%s</u></a> "
							"is from different Branch <b>%s</b>. "
						) % (Customer, Customer, CustomerObj.Branch)

		"""
		CBC checking
		========================================================================================================================
			CBC 	|	Descriptipon
		------------|-----------------------------------------------------------------------------------------------------------
			N		|	#CBC001
					|	- Will not check CBC automatic and not redirect to CBC page
					| 	- In case it is new loan application, there will be acceptoverride appear (Do you really not want ...)
					| 	- In case it old loan appplication, there no acceptoverride
		------------|------------------------------------------------------------------------------------------------------------	
			Y		|	#CBC002
					|	- Will check CBC automatic and redirect to CBC page. System will not check customer who already 
					|	  check in 30 days
					| 	- In case it is new loan application, There is no acceptoverride in this case. 
					|	  However, if there only guarantor left who not yet check cbc, system will check it as primary customer 
					|     (CBC rule cannot check guarantor alone without primary)
					|	  Acceptoverride will appear () => [not yet done]
					|	- In case it is old loan application, 
					|		* not all cbc checking success 	=> acceptoverride (This loan application already check CBC. Howerver, ...)
					|		* all cbc checking success 		=> acceptoverride (This loan application already check CBC. Click Yes to ..)
		____________|_________________________________________________________________________________________________________________

		"""
		CBCSuccess = checkCBCSuccess(ID) #Example result => False, [Obj]
		if request.form['CBC']=='N':#CBC001
			if not CBCSuccess[0]:
				Override = True
				Msg +=(
						"<div>Do you really not want to check CBC for this loan application? If so, you will not be able to submit this application.</div>"
					   )
		else:#CBC002
			if not CBCSuccess[0]:#not success all check
				Override = True
				Msg += (
							"<div>This loan application will proceed to checking CBC automatically</div>"
						)
				if len(CBCSuccess[1]) > 0:#old loan application
					CustomerList = ""
					for row in CBCSuccess[1]:
						CustomerLink = "<a href='javascript:void(0)' onClick=CustomClickView('Customer','CustomerEx/?ID=%s')>%s</a>" % (row.Customer, row.Customer)
						CBCLink 	 = "<a href='javascript:void(0)' onClick=CustomClickView('CBC','CBCEx/?ID=%s')>%s</a>" % (row.ID, row.ID)

						CustomerList+= "%s - %s <br>" % (CBCLink,CustomerLink)

					Msg+="<br>This loan application already check CBC. However, There are some customer(s) not successfully checking.<br> %s " % CustomerList
				else:#New Application
					pass

			else:#success all
				Override = True
				Msg +=(
							"<div>This loan application already check CBC. Click Yes to view history records of its CBC check.</div>"
						)

		Msg += " Do you want to proceed?"
		return Override, Msg

	@staticmethod
	def redirectAfterInsert():
		"""
			update LVR after insert to database
		"""
		try:
			# Url = super(FRM_LOAN_APPLICATION_EX, FRM_LOAN_APPLICATION_EX).redirectAfterInsert()
			ID 	= request.form['ID']
			LVR = calculateLVR()
			LVR = mktmoney.formatNumber(LVR)
			mktdb.updateRecord(MKT_LOAN_APPLICATION,[MKT_LOAN_APPLICATION.ID == ID],{'LVR':LVR})
			db.session.commit()
			
			NumOfAuth = g.getNAuthorize
			if NumOfAuth == 0:
				if request.form['CBC'] == 'Y':
					return "/Morakot/CBCSubmitEx/?ID=%s" % ID

		except Exception as e:
			db.session.rollback()
			raise e
		return None

	@staticmethod
	def redirectAuthorize():
		AuthLevel 	= g.getNAuthorize
		LoanAppObj 	= MKT_LOAN_APPLICATION.query.get(g.formID)
		ID = LoanAppObj.ID
		if LoanAppObj.CBC == 'Y':
			return "/Morakot/CBCSubmitEx/?ID=%s" % ID

		return None	

	@staticmethod
	def IsAcceptOverrideINAU():
		Override 		= False
		ID 				= g.formID
		Branch 			= mktuser.getCurrentBranch()
		Msg 			= ""
		LoanAppObj 		= MKT_LOAN_APPLICATION_INAU.query.get(ID)
		CheckCBC 		= LoanAppObj.CBC
		CBCObj 			= MKT_CBC.query.filter_by(LoanAppID=ID).limit(5)
		Customer 		= LoanAppObj.LNCustomerID
		CustomerObj 	= MKT_CUSTOMER.query.get(Customer)

		if CustomerObj.Branch != Branch:
			Override 	= True
			Msg 		= "Customer <a href='javascript:void(0)' onClick=CustomClickView('Customer','CustomerEx/?ID=%s')><u>%s</u></a> is from different Branch <b>%s</b>. " %(Customer, Customer, CustomerObj.Branch)

		#CBC checking
		CBCSuccess = checkCBCSuccess(ID) #Example result => False, [Obj]
		if request.form['CBC']=='N':
			if not CBCSuccess[0]:
				Override = True
				Msg +=(
						"<div>Do you really not want to check CBC for this loan application? If so, you will not be able to submit this application.</div>"
					   )
		else:
			if not CBCSuccess[0]:#not success all check
				Override = True
				Msg += (
							"<div>This loan application will proceed to checking CBC automatically</div>"
						)
				if len(CBCSuccess[1]) > 0:
					CustomerList = ""
					for row in CBCSuccess[1]:
						CustomerLink = "<a href='javascript:void(0)' onClick=CustomClickView('Customer','CustomerEx/?ID=%s')>%s</a>" % (row.Customer, row.Customer)
						CBCLink 	 = "<a href='javascript:void(0)' onClick=CustomClickView('CBC','CBC/?ID=%s')>%s</a>" % (row.ID, row.ID)

						CustomerList+= "%s - %s <br>" % (CBCLink,CustomerLink)

					Msg+="<br>This loan application already check CBC. However, There are some customer(s) not successfully checking.<br> %s " % CustomerList

				else:#new application
					pass

			else:
				Override = True
				Msg +=(
							"<div>This loan application already check CBC. Click Yes to view history records of its CBC check.</div>"
						)

		Msg += " Do you want to proceed?"
		return Override, Msg

	@staticmethod
	def formReadOnly():
		ID = request.form["ID"] if request.method == "POST" else g.formID 
		UserID = mktuser.getUser().ID
		RoleID = mktuser.getUserRole(UserID)

		Result = False
		LoanAppObj = MKT_LOAN_APPLICATION.query.get(ID)

		APPSTATUS_NEW 		=	loanapproval.APPSTATUS_NEW
		APPSTATUS_SUBMIT	= 	loanapproval.APPSTATUS_SUBMIT
		APPSTATUS_REVIEWED 	= 	loanapproval.APPSTATUS_REVIEWED
		APPSTATUS_APPROVED 	= 	loanapproval.APPSTATUS_APPROVED
		APPSTATUS_REJECTED 	= 	loanapproval.APPSTATUS_REJECTED
		APPSTATUS_CANCEL 	= 	loanapproval.APPSTATUS_CANCEL
		APPSTATUS_CLOSED 	= 	loanapproval.APPSTATUS_CLOSED

		if LoanAppObj:
			LoanAppID 	=	LoanAppObj.ID
			AppStatus 	= LoanAppObj.AppStatus
			Inputter 	= LoanAppObj.Inputter
			InputterObj = MKT_USER.query.get(Inputter)
			InputterRole = InputterObj.Role if InputterObj else ""

			ConfigData	= loanapproval.getConfig(LoanApplicationID=LoanAppID)
			Reviewer 	= ConfigData.get("Reviewer")
			Approver 	= ConfigData.get("Approver")

			LevelRole = Reviewer + Approver
			OrderLoginRole = 0
			if RoleID in LevelRole:
				OrderLoginRole = LevelRole.index(RoleID)
				
			OrderCurrentRole= 0
			if InputterRole in LevelRole:
				OrderCurrentRole = LevelRole.index(InputterRole)

			if AppStatus in [APPSTATUS_NEW,APPSTATUS_SUBMIT]:
				Result = False

			elif AppStatus in [APPSTATUS_REJECTED,APPSTATUS_CANCEL,APPSTATUS_APPROVED,APPSTATUS_CLOSED]:
				Result = "AUTH"

			elif AppStatus in [APPSTATUS_REVIEWED]:
				#check 
				if RoleID not in LevelRole:
					Result = "AUTH"
				else:
					if OrderLoginRole < OrderCurrentRole:
						Result = "AUTH"
					if RoleID in Approver:
						Result = False

		return Result

	@staticmethod
	def urlParam():
		ID 			= request.form["ID"] if request.method == "POST" else g.formID 
		dicParam	= [{"IframeName":"Iframe", "iframeUrl":"/Morakot/Signature/",'Resource' : 'Status'}]
		dicParam.append({"IframeName":"QuickLinkIFrame", "iframeUrl":"/Morakot/QuickLink/",'Resource' : 'Status'})
		return dicParam	

	@staticmethod
	def reverseRec():
		ID = g.formID
		LoanContractObj = MKT_LOAN_CONTRACT.query.\
							filter(MKT_LOAN_CONTRACT.LoanApplicationID == ID).first()

		if LoanContractObj:#already used in loan contract, this loan application cannot reverse
			return False, ''
		else:
			LoanAppObj = MKT_LOAN_APPLICATION.query.get(ID)
			APPSTATUS_NEW = "0"
			if LoanAppObj.AppStatus in [APPSTATUS_NEW]:
				return True, ''
			return False, ''
