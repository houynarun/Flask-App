from app.mktcore.imports 	import *
from app.LoanContract.models import *
from app.Customer.models 	import *
from app.Account.models 	import *
from app.LoanAmendment.models import *
from app.Charge.models 		import *
from .bank 					import *
from app.tools.mkttool		import formatNumberToWord
import app.tools.mktmoney 	as mktmoney



registerCRUD(admin, '/WithdrawalBankEx', 'WithdrawalBankEx', FRM_WITHDRAWAL_BANK_EX, [MKT_TELLER])

@app.route('/Morakot/WithdrawalSlip/', methods=['GET','POST'])
@checkLogOutSession
@checkLogOutTime
def WithdrawalSlip():
	LoanObjOpt = getLoanObj(AccBranch=True)
	if request.method=='POST':
		LoanID 			= request.form.get('LoanID') if 'LoanID' in request.form else ''
		AdvanceMortgage 		= request.form.get('AdvanceMortgage') if 'AdvanceMortgage' in request.form else ''
		Promotion 		= request.form.get('Promotion') if 'Promotion' in request.form else ''
		disbursedAmount = 0

		LoanContract 	= getLoanContractFormat(LoanID)

		disbursedAmount = getDisbursedAmount(LoanID)[0]

		isDisbAment 	= getDisbursedAmount(LoanID)[1]

		LoanObj 		= getLoanObj(AccBranch=True,LoanID=LoanID)[0]

		if isDisbAment == True:
			# get infor from LC
			ID 			= getAmendID(LoanID)[0] # ID of Loan Amend
			TransDate 	= getAmendID(LoanID)[1] # Last Amend Date
		else:
			ID 			= LoanID 				# ID of Loan Contract
			TransDate 	= LoanObj.ValueDate 	# Value date of Loan

		CurrencyObj 	= mktmoney.getCurrencyObj(LoanObj.Currency)

		ChargeAmount 	= getFee(ID) 		# Charge, ID of LC if Loan has no prog, else ID of loan Amend

		TotalCharge 	= getFeeProm(ID)[0] # Charge Amount

		TotalPromo 		= getFeeProm(ID)[1] # Promo Amount

		return render_template('Teller/withdslip.html',
								AdvanceMortgage=AdvanceMortgage,
								Promotion=Promotion,
								LoanObj=LoanObj,
								LoanObj1=LoanObjOpt,
								ID=LoanID,
								lookupTable=lookupTable,
								getFee=getFee,
								float=float,
								formatNumberToWord=formatNumberToWord,
								mktmoney=mktmoney,
								CurrencyObj=CurrencyObj,
								disbursedAmount=disbursedAmount,
								isDisbAment=isDisbAment,
								LoanContract=LoanContract,
								ChargeAmount=ChargeAmount,
								ChargeAmounts=ChargeAmount,
								TotalCharge=TotalCharge,
								TotalPromo=TotalPromo,
								TransDate = TransDate
								)

	else:
		return render_template('Teller/withdslip.html',
								LoanObj1=LoanObjOpt)

def getAmendID(LoanID):
	ID = ''
	TransDate = ''

	AmendObj = MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.LoanID==LoanID).order_by(MKT_LOAN_AMENDMENT.AmendDate.desc()).first()

	if AmendObj:
		ID = AmendObj.ID
		TransDate = AmendObj.AmendDate # return only date Transaction date

	return ID,TransDate

def getFeeProm(ID):
	'''
		Function to get total charge amount and total promotion amount
		return total charge amount and total promotion amount
	'''
	TotalCharge = 0
	TotalPromo  = 0

	FeeChargeObj = MKT_LOAN_CHARGE.query.filter(MKT_LOAN_CHARGE.ID==ID).all()
	if FeeChargeObj:
		for item in FeeChargeObj:
			# TotalCharge += item.ChargeEarned
			TotalCharge += item.DefaultCharge if item.DefaultCharge else 0
			TotalPromo 	+= item.PromotionAmount if item.PromotionAmount else 0

	return TotalCharge,TotalPromo

def	getLoanContractFormat(LoanID=''):
	'''
		Format Loan Contract as LoanID - CustomerName
		Return LoanID - CustomerName
	'''
	LoanContractFormat = ''
	if LoanID:
		LoanContractObj = getLoanObj(AccBranch=True,LoanID=LoanID)
		LoanContractFormat = '%s - %s'%(LoanContractObj[0].ID, (LoanContractObj[1].LastNameEn + ' ' + LoanContractObj[1].FirstNameEn))
	return LoanContractFormat

def getDisbursedAmount(LoanID):
	'''
		Get Disbursement Amount
		If Loan ID has in Loan Amentment, operation: ament(AMT), mode: add(2), get disbursed amount in loan ament
		Else get Disbursed Amount in Loan Contract
		Return Disbursement Amount
	'''
	disbursedAmount 	= 0
	isDisbAment			= False # True if it is DisbursedAmount in Loan Amenments
	LoanAmendmentObj 	= MKT_LOAN_AMENDMENT.query.\
											filter(MKT_LOAN_AMENDMENT.LoanID==LoanID).\
											filter(MKT_LOAN_AMENDMENT.Operation=='AMT').\
											filter(MKT_LOAN_AMENDMENT.AddDeduct=='2').\
											order_by(MKT_LOAN_AMENDMENT.Authorizeon.desc()).\
											first()
	if LoanAmendmentObj:
		disbursedAmount = LoanAmendmentObj.Amount
		isDisbAment 			= True
		# print "Loan Amendment: Disbursed %s"%(disbursedAmount)
	else:
		LoanContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		disbursedAmount = LoanContractObj.Disbursed
		# print "Loan Contract: Disbursed %s"%(disbursedAmount)
	return disbursedAmount, isDisbAment

# print  lookupTable('MKT_VILLAGE','ID','Description',row.Village)
def lookupTable(TableName,Field,FieldLookUp,Value):
	if Value:
		karwgs 		= {Field:Value}
		QueryTable  = eval(TableName).query.filter_by(**karwgs)
		if not QueryTable:
			return ""
		else:
			for row in QueryTable:
				if getattr(row,FieldLookUp):
					return getattr(row,FieldLookUp)
				else:
					return ""
	else:
		return ""


def getFee(ID):
	'''
		Function Return Fee amount
		FeeType: 100=Processing Fee(Rate), 101=Property Valuation Fee(Fixed)
		ID:	   Loan Contract ID
	'''
	# FeeType: 100=Processing Fee(Rate), 101=Property Valuation Fee(Fixed)
	# ID:	   Loan Contract ID If Loan not progresive, LN Amend ID if Loan top up progressive.

	FeeProm 		= {}
	ChargeAmount 	= []
	PromotionAmount = []
	Fee 			= {}
	TotalCharge 	= 0
	TotalPromo 		= 0
	TotalFeeProm 	= []
	ChargeFee = MKT_CHARGE.query.all()
	ChargeObj = MKT_LOAN_CHARGE.query.filter(MKT_LOAN_CHARGE.ID==ID)



	if ChargeObj:
		# print "Charge Obj:"
		for row in ChargeFee:
			ID 	 = row.ID 
			Desc = row.Description
			# Fee.append({'KeyCharge':ID,'Des':Desc})
			NewChargeObj = ChargeObj.filter(MKT_LOAN_CHARGE.ChargeKey == ID).first()
			item = NewChargeObj
			if item:
			# for item in NewChargeObj:
				# TotalCharge = item.ChargeEarned
				TotalCharge = item.DefaultCharge
				TotalPromo  = item.PromotionAmount
				FeeProm.update({ID:{'Description':Desc,'ChargeAmount':TotalCharge,'PromotionAmount':TotalPromo}})
			else:
				FeeProm.update({ID:{'Description':Desc,'ChargeAmount':0,'PromotionAmount':0}})


	return FeeProm

def getLoanObj(AccBranch=False, LoanID=''):
	queryObj 	= db.session.query(MKT_LOAN_CONTRACT,
								   MKT_CUSTOMER
								).\
								join(MKT_CUSTOMER,
									MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID
								)
	if not LoanID:
		if AccBranch==False:
			LoanObj 		= 	queryObj
		else:
			CurrentBranch  	= mktuser.getCurrentBranch()
			LoanObj 		= 	queryObj.filter(MKT_LOAN_CONTRACT.Branch==CurrentBranch)
	else:
		if AccBranch==False:
			LoanObj 		= 	queryObj.filter(MKT_LOAN_CONTRACT.ID==LoanID).first()
		else:
			CurrentBranch  	= mktuser.getCurrentBranch()
			LoanObj 		= 	queryObj.filter(MKT_LOAN_CONTRACT.Branch==CurrentBranch).filter(MKT_LOAN_CONTRACT.ID==LoanID).first()

	return LoanObj





