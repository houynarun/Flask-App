# Import default mktcore
from app.mktcore.wtfimports     import *
# Import module from customer
from app.Teller.bank           import *
from app.Teller.models          import *

def checkBank(Bank,ChequeNo):
	Msg = ''
	if Bank == '900' and ChequeNo != '':
		Msg = 'Not Required for Bank 900 - IBA Due to HO'
		raise ValidationError(Msg)
	elif Bank != '900' and ChequeNo == '':
		Msg = 'Required for Bank Not 900 - IBA Due to HO'
		raise ValidationError(Msg)
	else:
		return ''

def checkChequeNo(ChequeNo):
	withdObj 			 = ''
	withdObjINAU		 = ''
	withdObjHIST		 = ''

	if ChequeNo != '':
		withdObj 		 = 	MKT_TELLER.query.filter(MKT_TELLER.ChequeNo==ChequeNo).first()
		withdObjINAU 	 = 	MKT_TELLER_INAU.query.filter(MKT_TELLER_INAU.ChequeNo==ChequeNo).first()
		withdObjHIST 	 = 	MKT_TELLER_HIST.query.filter(MKT_TELLER_HIST.ChequeNo==ChequeNo).first()
		Msg 			 = 	''

	if withdObj:
		# print "Exists Live"
		Msg 	 = "%s is already exists in Live Record <a href='javascript:void(0)' onClick=CustomClickView('WithdrawalByBankEx-%s','WithdrawalBankEx/?ID=%s')><b>%s</b></a>." % (ChequeNo,withdObj.ID,withdObj.ID,withdObj.ID)
		raise ValidationError(Markup(Msg))
	elif withdObjINAU:
		# print "Exists unauthorized"
		Msg 	 = "%s is already exists in Un-Authorized Record <a href='javascript:void(0)' onClick=CustomClickView('WithdrawalByBankEx-%s','WithdrawalBankEx/?ID=%s')><b>%s</b></a>." % (ChequeNo,withdObjINAU.ID,withdObjINAU.ID,withdObjINAU.ID)
		raise ValidationError(Markup(Msg))
	elif withdObjHIST:
		# print "Exists Hist"
		Msg 	 = "%s is already exists in History Record <a href='javascript:void(0)' onClick=CustomClickView('WithdrawalByBankEx-%s','WithdrawalBankEx/?ID=%s')><b>%s</b></a>." % (ChequeNo,withdObjHIST.ID,withdObjHIST.ID,withdObjHIST.ID)
		raise ValidationError(Markup(Msg))
	else:
		# print "B Not Exists"
		return ''


class FRM_WITHDRAWAL_BANK_EX(FRM_WITHDRAWAL_BANK):

	CashType 	= TextField(requiredlabel("Cash Type", "*"), [validators.Required()],default='3')# 3= By Bank
	Bank 		= QuerySelectField(requiredlabel("Bank", "*"),
									query_factory=loadBank,
									get_label=lambda a: a.ID + " - " + a.Description,
									allow_blank=True,
									blank_text=u'--None--',
									validators=[validators.Required()])

	TCrAccount 	= TextField("Bank Account")
	CrCategory 	= TextField("Bank Category")
	CrCurrency 	= TextField("Bank Currency")

	TDrAccount 	= RemoteTextField(requiredlabel("Account","*"), [validators.Required()])
	DrCategory 	= TextField(requiredlabel("Category", "*"), [validators.Required()])
	DrCurrency 	= TextField(requiredlabel("Currency", "*"), [validators.Required()])

	Amount 		= TextField(requiredlabel("Amount", "*"), [validators.Required()])
	Transaction = TextField(requiredlabel("Transaction", "*"), [validators.Required()])

	# TranDate 	= DateField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	TranDate 	= TextField(requiredlabel("Transaction Date", "*"), [validators.Required()],default=loadCurrentDate)
	ChequeNo	= TextField("Cheque #", validators=[validators.Length(max=12)])
	Reference 	= TextField("Reference",[validators.Length( max=35)])
	Note 		= TextAreaField(requiredlabel("Note", "*"),[validators.Length(max=50),validators.Required()])


	def validate_ChequeNo(form,field):
		ID 		 		 = 	request.form['ID'] if 'ID' in request.form else ''
		ChequeNo 		 = 	request.form['ChequeNo'] if 'ChequeNo' in request.form else ''
		Bank 			 =  request.form['Bank'] if 'Bank' in request.form else ''
		# Valdiate check bank type if 900, cheque # is not required or cheque # is required.
		checkBank(Bank,ChequeNo)
		# Validate check cheque # is already exist or not (live, inau, hist)
		checkChequeNo(ChequeNo)

		return ''
