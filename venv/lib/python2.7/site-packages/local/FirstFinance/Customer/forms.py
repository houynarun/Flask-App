from app.mktcore.wtfimports 	import *

from app.Customer.forms 		import *
from app.Customer.models 		import *

from app.Currency.models 		import *
from app.PotentialCustomer.models import *
from app.IdType.models 			import *

import app.tools.mktdb 			as mktdb
import app.tools.user 					as mktuser
import app.tools.mktnotification    as mktnotify

from  .models import *

def loadReferalSource():

	return MKT_REFERAL_SOURCE.query.order_by(MKT_REFERAL_SOURCE.ID.asc()).all()


def loadPrimaryIdType():  #define function 
	return MKT_ID_TYPE.query.filter(MKT_ID_TYPE.ID.in_(['B','N','P'])) # BirthCertificate, NationalID, Passport

def loadSecondaryIdType():  #define function 
	return MKT_ID_TYPE.query.filter(~MKT_ID_TYPE.ID.in_(['B','N','P']))# tablename.query

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def custom_ID(form, field):
	IDType 	= request.form["IDType"] if request.method == 'POST' else ""
	IDType2 = request.form["IDType2"] if request.method == 'POST' else ""
	IDNumber2 = request.form["IDNumber2"] if request.method == 'POST' else ""
	IssuePlace2 = request.form["IssuePlace2"] if request.method == 'POST' else ""
	IssueDate2= request.form["IssueDate2"] if request.method == 'POST' else ""

	if IDType == "B":
		if IDType2 == "__None":
			field.errors[:] = []
			raise ValidationError("This field is required.")
		else:
			if not IDNumber2:
				field.errors[:] = []
				raise ValidationError("This field is required.")
			if not IssuePlace2:
				field.errors[:] = []
				raise ValidationError("This field is required.")
			if not IssueDate2:
				field.errors[:] = []
				raise ValidationError("This field is required.")
	else:
		field.errors[:] = []

"""
	Check whether total income or expense equal Net Total Income or Expense or not
	Return True if it is equal
	Return False if it is not equal
"""
def checkExpInc(IncExpPri,IncExpSec,NetTotal):
	TotalExpInc = float(IncExpPri) + float(IncExpSec)

	if TotalExpInc == float(NetTotal):

		return True 

	else:

		return False

	if TotalExpInc == float(NetTotal):

		return True 

	else:

		return False



class FRM_CUSTOMER_EX(FRM_CUSTOMER):

	# General Info
	FirstNameEn 			=	TextField(requiredlabel("Given Name","*"),[validators.Required()])
	LastNameEn 				=	TextField(requiredlabel("Surname","*"),[validators.Required()])
	FirstNameKh 			=	TextField(requiredlabel("Given Name (Khmer)","*"),[validators.Required()])
	LastNameKh 				=	TextField(requiredlabel("Surname (Khmer)","*"),[validators.Required()])

	Salutation 				=	SelectField(getLanguage("Salutation"),
									choices=[('Mrs', 'Mrs'),('Mr', 'Mr'),('Miss','Miss')],
									coerce=str)
	Gender 					=	SelectField(requiredlabel(getLanguage("Gender"),"*"),
									choices=[('Female', 'Female'),('Male', 'Male'),('Other','Transgender')],
									coerce=str,
									validators=[validators.Required()])
	DateOfBirth 			=	DateField(requiredlabel(getLanguage("Date of Birth"), "*"),
									format='%Y-%m-%d',
									validators=[custom_DateOfBirth])

	CountryOfBirth 			=	QuerySelectField(getLanguage('Country of Birth'),query_factory=loadCountry,
									get_label='Description',
									allow_blank=True,
									blank_text='',
									default=lambda:loadCountry('KH'),
									validators=[validators.Required()])
	Nationality				=	QuerySelectField(getLanguage('Nationality'),query_factory=loadCountry,
									get_label='Nationality',
									allow_blank=True,
									blank_text='',
									default=lambda:loadCountry('KH'),
									validators=[validators.Required()])
	ProvinceOfBirth 		=	QuerySelectField(requiredlabel(getLanguage('Province of Birth'),"*"),
									query_factory=loadProvinceOfBirth,
									get_label='Description',
									allow_blank=True,
									blank_text=u'--Choose Province--',
									validators=[validators.Required()])
	DistrictOfBirth 		=	QuerySelectField(getLanguage('District of Birth'),query_factory=loadDistrictOfBirth,
									get_label='Description',
									allow_blank=True,
									blank_text=u'--Choose District--')
	CommuneOfBirth 			=	QuerySelectField(getLanguage('Commune of Birth'),query_factory=loadCommuneOfBirth,
									get_label='Description',
									allow_blank=True,
									blank_text=u'--Choose Commune--')
	AsGurantor 				=	SelectField(requiredlabel(getLanguage('As Guarantor'),"*"),
									choices=[('N', 'No'),('Y', 'Yes')],
									coerce=str,
									validators=[validators.Required()])
	MaritalStatus 			=	SelectField(requiredlabel(getLanguage('Marital Status'),'*'),
									choices=[('1', '1 - Married'),
											('2', '2 - Single'),
											('3','3 - Divorced'),
											('4','4 - Widow'),
											('5','5 - Widower'),
											('6','6 - Separated'),
											('7','7 - Defacto'),
											('8','8 - Unknown')],
									coerce=str,
									validators=[validators.Required()])
	Resident 				=	SelectField(getLanguage('Resident'),
									choices=[('Y', 'Yes'),('N', 'No')],
									coerce=str,
									validators=[validators.Required()])
	HouseOwnership 			=	SelectField('Living Situation',
									choices=[	('1', '1 - Renter'),
												('2', '2 - Living with parents/family'),
												('3', '3 - Living in workplace'),
												('4', '4 - Living in own house'),
												('5', '5 - Evictees'),
												('6', '6 - Used to own house'),
												('99', '99 - Other')],
									coerce=str)
	NumberOfMember 			=	TextField('# Family Member',
									validators=[validators.Length(max=3)])
	ActiveMember 			=	TextField('# Active Member',
									validators=[validators.Length(max=3)])
	Officer 				= 	QuerySelectField(requiredlabel(getLanguage('Officer'),'*'),
									query_factory=loadOfficer,
									get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
									allow_blank=True,
									blank_text=u'--None--',
									validators=[validators.Required()])
	EducationLevel 			=	QuerySelectField('Education Level',
									query_factory=loadEducationLevel, 
									get_label='Description',
									allow_blank=True,
									blank_text=u'--None--')

	ReferralSource 			= QuerySelectField(requiredlabel('Referral Source','*'),
									 query_factory=loadReferalSource, 
									 get_label=lambda a: a.ID + " - " + a.Description,
									 allow_blank=True,
									 blank_text='--None--',
									 validators=[validators.Required()]
									 )

	ReferralRemark 			= TextAreaField('Referral Remark')
	Officer 				= 	QuerySelectField(requiredlabel('Officer (CC)','*'),
									query_factory=loadOfficer,
									get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
									allow_blank=True,
									blank_text=u'--None--',
									validators=[validators.Required()])

	CRO 					= 	QuerySelectField(requiredlabel('CRO','*'),
									query_factory=loadOfficer,
									get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
									allow_blank=True,
									blank_text=u'--None--',
									validators=[validators.Required()])

	LRO 					= 	QuerySelectField("LRO",
									query_factory=loadOfficer,
									get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
									allow_blank=True,
									blank_text=u'--None--'
									)
	
	OptNotify 				= SelectField("Notify to PVO",
									choices=[	('N', 'No'), 
												('Y', 'Yes') ],
									coerce=str,
									default='N                                                                                                                                                                               ')

	# Tab Communication Detail
	Facebook				= TextField("Facebook", 
									validators=[validators.Optional()],
									description="1-%s" %getLanguage('Current Address and Contact'))
	Linkedin				= TextField("Linkedin", 
									validators=[validators.Optional()],
									description="1-%s" %getLanguage('Current Address and Contact'))


	# Tab Emergency Detail
	EmergContactName 		= TextField('Emergency Contact Name',
									description="1-%s" %getLanguage('Current Address and Contact'),
									validators=[validators.Length(max=50)])
	EmergRelationship		= SelectField("Emergency Relationship",
									choices=[	('', '--None--'), 
												('1', '1 - Spouse'), 
												('2', '2 - Co-Borrower'),
												('3', '3 - Friend'),
												('4', '4 - Sister'),
												('5', '5 - Brother'),
												('6', '6 - Mother'),
												('7', '7 - Father'),
												('8', '8 - Neighbour'),
												('9', '9 - Colleague'),
												('99','99 - Other')],
									description="1-%s" %getLanguage('Current Address and Contact'),
									coerce=str,
									default='')
	EmergContactNumber		= TextField("Emergency Contact Number",
									validators=[validators.optional()],
									description="1-%s" %getLanguage('Current Address and Contact'))
	EmergFacebook			= TextField("Emergency Facebook",
									validators=[validators.optional()],
									description="1-%s" %getLanguage('Current Address and Contact'))
	EmergLinkedin			= TextField("Emergency Linkedin",
									validators=[validators.optional()],
									description="1-%s" %getLanguage('Current Address and Contact'))


	#-- Tab Spouse Info--
	""" Overwrite existing fields of spouse tab by removing tab. Then set visible to this fields."""
	SpoFirstNameEn 			=	TextField("%s (%s)" %(getLanguage("First Name"), getLanguage("English")))
	SpoLastNameEn 			=	TextField("%s (%s)" %(getLanguage("Last Name"), getLanguage("English")))
	SpoFirstNameKh 			=	TextField("%s (%s)" %(getLanguage("First Name"), getLanguage("Khmer")))
	SpoLastNameKh 			=	TextField("%s (%s)" %(getLanguage("Last Name"), getLanguage("Khmer")))
	SpoDateOfBirth 			=	DateField("Spouse Date of Birth",
							 		validators=[custom_SpoDateOfBirth]
								)
	SpouseNationality		=   QuerySelectField('Spouse Nationality',
									 query_factory=loadCountry, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text='',
									 default=lambda:loadCountry('KH'))
	SpoOccupation 			=	QuerySelectField(getLanguage('Occupation'),query_factory=loadPosition,
									 get_label='Description',
									 allow_blank=True,
									 blank_text='--None--'
								)

	Other 			=	TextField('Other',
									 description="2-Current Employment"
								)

	SpouseIDType 			=	QuerySelectField('ID Type of Spouse',
									query_factory=loadIdType, 
									get_label='Description',
									allow_blank=True,
									blank_text='--None--'
								)
	SpoNationalID 			=	TextField("# Of ID Type")
	SpouseIDIssueDate		=	DateField("Issue Date Of ID Type", validators=[custom_SpouseIDIssueDate])
	ACMember 				=	SelectField(requiredlabel(getLanguage('AC Member'),"*"),
									 choices=[('Y', 'Yes'),('N', 'No')],
									 coerce=str,
									 validators=[validators.Required()])
	CustomerType 			=	QuerySelectField('Customer Type',
									query_factory=loadCustomerType, 
									get_label='Description',
									allow_blank=True,
									blank_text='--None--')

	SpoOccupationRemark =	TextAreaField("Occupation Remark")

	# --Employment Detail--
	EmployerType 			=	SelectField(requiredlabel('Employment Type',"*"),
									 choices=[('C', 'Current')],
									 coerce=str,
									 validators=[validators.Required()],
									 description="2-%s" %('Current Employment'))

	SourceOfIncome 			=	SelectField(requiredlabel("Source of Income","*"),
									 choices=[	('',"--None--"),
									 			('1','1 - Salaried Employee'),
									 			('2', '2 - Worker'),
									 			('3', '3 - Civil Servant'),
									 			('4', '4 - Self-Employed')],
									 coerce=str,
									 validators=[validators.Required()],
									 description="2-%s" %('Current Employment'))
	SelfEmployed 			=	SelectField(requiredlabel(getLanguage('Self-Employed'),"*"),
									 choices=[('N', 'No'),('Y', 'Yes')],
									 coerce=str,
									 validators=[validators.Required()],
									 description="2-%s" %('Current Employment'))
	Sector 					=	QuerySelectField(requiredlabel(getLanguage('Sector'),'*'),query_factory=loadSector, 
									 get_label=lambda a: a.ID + " - " + a.Description,
									 allow_blank=True,
									 blank_text='--None--',
									 validators=[validators.Required()],
									 description="2-%s" %('Current Employment'))
	Industry 				=	QuerySelectField(requiredlabel(getLanguage('Industry'),'*'),query_factory=loadIndustry, 
									 get_label=lambda a: a.Description,
									 allow_blank=True,
									 blank_text='--None--',
									 validators=[validators.Required()],
									 description="2-%s" %('Current Employment'))
	Position 				=	QuerySelectField(requiredlabel('Occupation', '*'),query_factory=loadPosition, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text='--None--',
									 description="2-%s" %('Current Employment'))
	PositionRemark			=	TextAreaField("Occupation Remark",
									 description="2-%s" %('Current Employment'))

	LengthOfService 		=	TextField(isRequiredCBCLabel("Length Of Service(M)"),
									 validators=[validators.Length(max=3)],
									 description="2-%s" %('Current Employment'))

	CompanyName 			=	TextField(getLanguage("Company Name"),
									description="2-%s" %('Current Employment'),
									validators=[validators.Length(max=35)])

	CompanyBusiness 		=	TextField("Business Activity",
									description="2-%s" %('Current Employment'),
									validators=[validators.Length(max=50)])

	EmployerName 			=	TextField(isRequiredCBCLabel("Employer Name"),
									description="2-%s" %('Current Employment'),
									validators=[validators.Length(max=50)])

	EmployerAddressType 	= SelectField(isRequiredCBCLabel('Employer AddressType'),
									choices=[	('WORK', 'Work'),
												('RESID', 'Residential'),
												('POST', 'Correspondence'),
												('U', 'Unknown')
											],
									coerce=str,
									validators=[validators.Required()],
									description="2-%s" %('Current Employment'),
									default='WORK')

	EmployerProvince 		= QuerySelectField(isRequiredCBCLabel('Employer Province'),query_factory=loadEmpProvince,
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Province--',
									 description="2-%s" %('Current Employment'))

	EmployerDistrict 		= QuerySelectField(isRequiredCBCLabel('Employer District'),query_factory=loadEmpDistrict,
								 	get_label='Description',
								 	allow_blank=True,
									blank_text=u'--Choose District--',
									description="2-%s" %('Current Employment'))

	EmployerCommune 		= QuerySelectField(isRequiredCBCLabel('Employer Commune'),query_factory=loadEmpCommune,
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Commune--',
									 description="2-%s" %('Current Employment'))

	EmployerVillage 		= QuerySelectField(isRequiredCBCLabel('Employer Village'),query_factory=loadEmpVillage,
									 get_label='Description',
									 allow_blank=True,
									 blank_text=u'--Choose Village--',
									 description="2-%s" %('Current Employment'))

	EmployerAddress 		=	TextField('Employer Address',
									description="2-%s" %('Current Employment'),
									validators=[validators.Optional(),validators.Length(max=150)])

	YearEmployed 			=	TextField("Years Started",
									description="2-%s" %('Current Employment'))


	# Tab Income Detail
	Currency 				= 	QuerySelectField(getLanguage('Currency'),query_factory=loadCurrency,
									get_label='ID',
									allow_blank=False,
									blank_text='--None--',
									default=lambda:loadCurrency('USD'),
									description="3-%s" %"Income and Expense")
	PrimaryFreq 			= SelectField(requiredlabel(getLanguage("Frequency"), "*"),
									choices=[	('1', '1. %s' %('Monthly')),
												('2', '2. %s' %("Quarterly")),
												('3', '3. %s' %("Semester")),
												('4', '4. %s' %("Annually"))],
									description="3-%s" %"Income and Expense",
									coerce=str,
									validators=[validators.Required()]
								)
	PrimaryInc				= TextField(requiredlabel("Primary Income", "*"),
									description="3-%s" %"Income and Expense",
									validators=[validators.Required()])
	SecondaryFreq 			= SelectField(getLanguage("Frequency"),
									choices=[	('1', '1. %s' %('Monthly')),
												('2', '2. %s' %("Quarterly")),
												('3', '3. %s' %("Semester")),
												('4', '4. %s' %("Annually"))],
									description="3-%s" %"Income and Expense",
									coerce=str,
									validators=[validators.Required()]
								)
	SecondaryInc 			= TextField("Secondary Income",
									description="3-%s" %"Income and Expense",
									validators=[validators.Optional()])
	MonthlyIncome 			= TextField("Total Net Income",
									description="3-%s" %"Income and Expense",
									validators=[validators.Optional()])
	HouseholdExp			= TextField("Household Expenses",
									description="3-%s" %"Income and Expense",
									validators=[validators.Required()])
	PersonalExp				= TextField("Personal Expenses",
									description="3-%s" %"Income and Expense",
									validators=[validators.Optional()])
	TotalExpenses			= TextField("Total Expenses",
									description="3-%s" %"Income and Expense",
									validators=[validators.Optional()])

	# Tab Asset and Liability Detail
	AssetType			 	= TextField("Asset Type",
									description="4-%s" %"Asset and Liability")
	EstimatedValue	 		= TextField("Estimated Value",
									description="4-%s" %"Asset and Liability")
	BankAccountType 		= TextField("Bank Account Type",
									description="4-%s" %"Asset and Liability")
	SavingBal		 		= TextField("Saving Balance",
									description="4-%s" %"Asset and Liability")
	LenderName				= TextField(("Name of Lender(1)"),
									description="4-%s" %"Asset and Liability",
									validators=[validators.Length(max=50), validators.Optional()])
	OutstandingBal 			= TextField(("Outstanding Balance"),
									description="4-%s" %"Asset and Liability",
									validators=[validators.Optional()])
	MonthlyRep 				= TextField(("Monthly Repayment"),
									description="4-%s" %"Asset and Liability",
									validators=[validators.Length(max=50), validators.Optional()])
	LenderName2				= TextField(("Name of Lender(2)"),
									description="4-%s" %"Asset and Liability",
									validators=[validators.Optional()])
	OutstandingBal2 		= TextField(("Outstanding Balance"),
									description="4-%s" %"Asset and Liability",
									validators=[validators.Optional()])
	MonthlyRep2 			= TextField(("Monthly Repayment"),
									description="4-%s" %"Asset and Liability",
									validators=[validators.Optional()])


	# --Identification--
	# Primary
	IDType 					=	QuerySelectField(requiredlabel('ID Type (Primary)',"*"),
									 query_factory=loadPrimaryIdType, 
									 get_label='Description',
									 allow_blank=True,
									 blank_text='--None--',
									 validators=[validators.Required()],
									 description="5-%s" %getLanguage('Identification Document'))
	IDNumber 				=	TextField(requiredlabel("ID Number","*"),
									 validators=[validators.Required()],
									 description="5-%s" %getLanguage('Identification Document'))
	IssuePlace 				=	TextField(requiredlabel("Issue Place","*"),
									 description="5-%s" %getLanguage('Identification Document'),
									 validators=[validators.Length(max=35),validators.Required()])
	IssueDate 				=	DateField(requiredlabel("Issue Date","*"),
									 description="5-%s" %getLanguage('Identification Document'),
									 validators=[custom_IssueDate])
	ExpiryDate 				=	DateField("Expiry Date",
									 description="5-%s" %getLanguage('Identification Document'),
									 validators=[custom_ExpiryDate])

	# Secondary
	IDType2 				=	QuerySelectField('ID Type (Secondary)',
									 query_factory=loadSecondaryIdType,
									 get_label='Description',
									 allow_blank=True,
									 blank_text='--None--',
									 validators=[custom_ID],
									 description="5-%s" %getLanguage('Identification Document'))
	IDNumber2 				=	TextField("ID Number",
									 validators=[custom_ID],
									 description="5-%s" %getLanguage('Identification Document'))
	IssuePlace2				=	TextField("Issue Place",
									 description="5-%s" %getLanguage('Identification Document'),
									 validators=[validators.Length(max=35),custom_ID])
	IssueDate2 				=	DateField("Issue Date",
									 description="5-%s" %getLanguage('Identification Document'),
									 validators=[custom_IssueDate,custom_ID])
	ExpiryDate2				=	DateField("Expiry Date",
									 description="5-%s" %getLanguage('Identification Document'),
									 validators=[custom_ExpiryDate])


	# Tab Previous Employment
	PrevEmpName 			=	TextField(("Employer Name (1)"),
									description="6-%s" %('Previous Employment'),
									validators=[validators.Length(max=50)])
	PrevYearStarted			=	TextField(("Years Started"),
									description="6-%s" %('Previous Employment'),
									validators=[validators.Length(max=4)])
	PrevYearEnded			=	TextField(("Years Ended"),
									description="6-%s" %('Previous Employment'),
									validators=[validators.Length(max=4)])
	PrevReason				=	TextAreaField("Reason for leaving",
									description="6-%s" %('Previous Employment'),
									validators=[validators.Optional()])

	PrevEmpName2			=	TextField(("Employer Name (2)"),
									description="6-%s" %('Previous Employment'),
									validators=[validators.Length(max=50)])
	PrevYearStarted2		=	TextField(("Years Started"),
									description="6-%s" %('Previous Employment'),
									validators=[validators.Length(max=4)])
	PrevYearEnded2			=	TextField(("Years Ended"),
									description="6-%s" %('Previous Employment'),
									validators=[validators.Length(max=4)])
	PrevReason2				=	TextAreaField("Reason for leaving",
									description="6-%s" %('Previous Employment'),
									validators=[validators.Optional()])

	PrevEmpName3 			=	TextField(("Employer Name (3)"),
									description="6-%s" %('Previous Employment'),
									validators=[validators.Length(max=50)])
	PrevYearStarted3		=	TextField(("Years Started"),
									description="6-%s" %('Previous Employment'),
									validators=[validators.Length(max=4)])
	PrevYearEnded3			=	TextField(("Years Ended"),
									description="6-%s" %('Previous Employment'),
									validators=[validators.Length(max=4)])
	PrevReason3				=	TextAreaField("Reason for leaving",
									description="6-%s" %('Previous Employment'),
									validators=[validators.Optional()])

	def validate_EmergContactNumber(form,field):
		EmergContactNumber = form.EmergContactNumber.data
		if EmergContactNumber:
			if len(EmergContactNumber) < 3:
				raise ValidationError("Invalid mobile phone number. Ex: 012xxxxxx")
			CheckMobileNumber, Msg = mkttool.isMobile(EmergContactNumber)
			if not CheckMobileNumber:
				raise ValidationError(Msg)

	def validate_PrevYearStarted(form, field):
		isCheckYear(form.PrevYearStarted.data)

	def validate_PrevYearStarted2(form, field):
		isCheckYear(form.PrevYearStarted.data)

	def validate_PrevYearStarted3(form, field):
		isCheckYear(form.PrevYearStarted.data)

	def validate_PrevYearEnded(form, field):
		isCheckYear(form.PrevYearStarted.data)

	def validate_PrevYearEnded2(form, field):
		isCheckYear(form.PrevYearStarted.data)

	def validate_PrevYearEnded3(form, field):
		isCheckYear(form.PrevYearStarted.data)

	def validate_IDNumber2(form, field):
		IDNumber2 	= form.IDNumber2.data
		IDType2		= str(request.form['IDType2'])
		ID 			= request.form['ID']
		validateIDNumber(ID, IDType2, IDNumber2)

	def validate_MonthlyIncome(form, field):
		PrimaryIncome 	= request.form.get('PrimaryInc')
		SecondaryIncome = request.form.get('SecondaryInc')
		MonthlyIncome 	= request.form.get('MonthlyIncome')

		if not checkExpInc(PrimaryIncome,SecondaryIncome,MonthlyIncome):
			raise ValidationError('Sum of Primary Income and Secondary Income should be equal Net Total Income.')
		else:
			return ''

	def validate_TotalExpenses(form, field):
		HouseholdExp 	= request.form.get('HouseholdExp')
		PersonalExp = request.form.get('PersonalExp')
		TotalExpenses 	= request.form.get('TotalExpenses')

		if not checkExpInc(HouseholdExp,PersonalExp,TotalExpenses):
			raise ValidationError('Sum of Household Expenses and Personal Expenses should be equal Total Expense.')
		else:
			return ''

	def validate_BlockReason(form, field):

		Block 		=	request.form['Block']
		BlockReason =	request.form['BlockReason']

		if Block == 'Y':
			if not BlockReason:
				raise ValidationError("This field is required.")
		# else:
		# 	if BlockReason:
		# 		raise ValidationError("This field must be blank.")

	def validate_SpoNationalID(form, field):
		pass

	@staticmethod
	def setDisable():
		base = super(FRM_CUSTOMER_EX, FRM_CUSTOMER_EX).setDisable()
		controls_list = [("NetTotalIncome"),("TotalExpenses"),("MonthlyIncome"),("EmployerType"),("Currency")]
		controls_list.extend(base)
		return controls_list

	@staticmethod
	def setVisible():
		base = super(FRM_CUSTOMER_EX, FRM_CUSTOMER_EX).setVisible()
		controls_list 	= [	("ACMember"), ("CustomerType"), ("SpoFirstNameEn"), ("CompanyName"), ("SelfEmployed"),
							("SpoLastNameEn"), ("SpoFirstNameKh"), ("SpoLastNameKh"), ("SpoDateOfBirth"), ("SpouseNationality"),
							("SpoOccupation"), ("SpouseIDType"), ("SpoNationalID"), ("SpouseIDIssueDate"),
							("Other"),("YearEmployed"),("SpoOccupationRemark")]
		controls_list.extend(base) if base else controls_list
		return controls_list

	@staticmethod
	def formatMoney():

		return ["MonthlyIncome", "AverageMonthlyInc", "AverageMonthlyExp", "PrimaryInc", "SecondaryInc",
				"HouseholdExp", "PersonalExp", "TotalExpenses", "EstimatedValue", "SavingBal",
				"OutstandingBal", "MonthlyRep", "OutstandingBal2", "MonthlyRep2"], "Currency"

	@staticmethod
	def moneyField():
		base = super(FRM_CUSTOMER_EX, FRM_CUSTOMER_EX).moneyField()
		controls_list 	= [	("PrimaryInc", "Currency"), ("SecondaryInc", "Currency"), ("HouseholdExp", "Currency"),
							("PersonalExp", "Currency"), ("TotalExpenses", "Currency"),
							("EstimatedValue", "Currency"), ("SavingBal", "Currency"), ("OutstandingBal", "Currency"),
							("MonthlyRep", "Currency"), ("OutstandingBal2", "Currency"), ("MonthlyRep2", "Currency")]
		controls_list.extend(base)
		return controls_list

	@staticmethod
	def setWidth():
		base = super(FRM_CUSTOMER_EX,FRM_CUSTOMER_EX).setWidth()
		controls_list 	= [	("IssueDate",len3),
							("ExpiryDate",len3),
							("IssueDate2",len3),
							("ExpiryDate2",len3)]
		controls_list.extend(base)
		return controls_list



	@staticmethod
	def hotField():
		base = super(FRM_CUSTOMER_EX,FRM_CUSTOMER_EX).hotField()
		hotfield=[]
		
		# auto complete net total income
		fielddisplay 	= "$('#MonthlyIncome').val(data.NetTotalIncome);"
		varname 		=  "PrimaryFreq:$('#PrimaryFreq').val(),\
							PrimaryIncome:$('#PrimaryInc').val(),\
							SecondaryFreq:$('#SecondaryFreq').val(),\
							SecondaryIncome:$('#SecondaryInc').val(),\
							Currency:$('#Currency').val()"
		fun 			= ["PrimaryInc", varname, fielddisplay, "/Morakot/GetNetTotalIncome", "blur"]
		hotfield.append(fun)

		fun 			= ["SecondaryInc", varname, fielddisplay, "/Morakot/GetNetTotalIncome", "blur"]
		hotfield.append(fun)

		fun 			= ["PrimaryFreq", varname, fielddisplay, "/Morakot/GetNetTotalIncome", "change"]
		hotfield.append(fun)

		fun 			= ["SecondaryFreq", varname, fielddisplay, "/Morakot/GetNetTotalIncome", "change"]
		hotfield.append(fun)

		fun 			= ["Currency", varname, fielddisplay, "/Morakot/GetNetTotalIncome", "change"]
		hotfield.append(fun)

		# set hotfield for yes or no
		fielddisplay 	= "$('#SelfEmployed').select2('data', {'id':data.ID,'text':data.Desc})"
		varname 		= "SourceOfIncome:$('#SourceOfIncome').val()"
		fun 			= ['SourceOfIncome', varname, fielddisplay, "/Morakot/GetSelfEmployed", "change"]
		hotfield.append(fun)

		# auto complete total expense
		fielddisplay 	= "$('#TotalExpenses').val(data.TotalExpenses);"
		varname 		=  "Household:$('#HouseholdExp').val(),\
							Personal:$('#PersonalExp').val(),\
							Currency:$('#Currency').val()"
		fun 			= ["HouseholdExp", varname, fielddisplay, "/Morakot/GetTotalExpenses", "blur"]
		hotfield.append(fun)

		fun 			= ["PersonalExp", varname, fielddisplay, "/Morakot/GetTotalExpenses", "blur"]
		hotfield.append(fun)

		fun 			= ["Currency", varname, fielddisplay, "/Morakot/GetTotalExpenses", "change"]
		hotfield.append(fun)

		
		fielddisplay 	= "$('#Other').css('display':data.Bool)"
		varname 		= "SpoOccupation:"


		hotfield.extend(base)
		return hotfield

	@staticmethod
	def redirectAuthorize():
		CurrentUser     	= mktuser.getUser()
		CustomerID 			= 	g.formID
		CustomerObj 		= 	MKT_CUSTOMER.query.get(CustomerID)
		Curr 				= 	CustomerObj.Curr
		if CustomerObj:
			OptNotify 		= 	CustomerObj.OptNotify
			if OptNotify == 'Y' and Curr == '0': # Allow notify to PVO only when authorize customer, not on Edit Customer
				ToUserList  = MKT_USER.query.filter(MKT_USER.Role=='8').all() # Role PVO
				for row in ToUserList:
					mktnotify.insertNotify({ 'ID':CustomerID, 
						        'Path':'CustomerEx',
						        'Title':'Customer',
						        'From':CurrentUser.ID, 'To':row.ID,
						        'Message':' was authorized. Please create collateral.'
					})
		return None
