from app.LoanContract.forms 		import *
from app.LoanApplication.models		import *
from app.LoanContract.models		import *
from app.CheckList.models 			import *

import app.tools.mktaccounting 		as mktaccounting
import app.tools.mktteller			as mktteller
import app.tools.mktdate 			as mktdate
import app.tools.mktparam 			as mktparam
import app.tools.user 				as mktuser
import app.tools.mktaudit 			as mktaudit
import app.tools.mkttool 			as mkttool
import app.tools.mktnotification	as mktnotify

import local.FirstFinance.tools.mktpostaccounting 	as mktpostaccounting
import local.FirstFinance.tools.mktloan as mktloan
from decimal 						import *


# Set DEBUG_MODE to false to stop debug mode
DEBUG_MODE = False

@app.route("/Morakot/DrawdownByCustomer", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDrawdownByCustomer():
	try:
		Branch 		= session.get("ChangeBranch")
		CustomerID 	= request.args.get('CustomerID')
		Currency 	= request.args.get('Currency') if request.args.get('Currency') else ""
		dic 		= {}

		query 		= MKT_ACCOUNT.query.\
					  filter(MKT_ACCOUNT.CustomerList == CustomerID).\
					  filter(MKT_ACCOUNT.AccStatus == "O").\
					  filter(MKT_ACCOUNT.Branch == Branch)

		if Currency:
			query = query.filter(MKT_ACCOUNT.Currency == Currency)

		query = query.all()
		if query:
			for row in query:
				dic[row.ID] = row.ID

		return jsonify(results=dic)
	except:
		raise

@app.route("/Morakot/LoanAppCollateral", methods=["GET"])
@checkLogOutSession
@checkLogOutTime
def getLoanAppCollateral():
	try:
		LoanAppID 		= request.args.get('LoanAppID')
		dic = {}
		CollateralID = ""
		CollateralDesc = ""

		LoanCollateral 	= MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID == LoanAppID).first()
		if LoanCollateral:
			CollateralID = LoanCollateral.Collateral
			CollateralObj = MKT_COLLATERAL.query.get(CollateralID)
			if CollateralObj:
				CollateralDesc = "%s - %s"%(CollateralID,str(CollateralObj.Description))
				dic[CollateralID] = CollateralDesc

		return jsonify(results=dic)
	except:
		raise

def getControlList(ControlID=""):
	controls_list 	= request.form
	ListControl		= [item for item in controls_list if eval(ControlID)]
	ListControl.sort()
	TotalControl 	= len(ListControl)
	return ListControl,TotalControl

def custom_Promotion(form, field):
	Currency 	=	request.form['Currency']
	ListChargeKey,TotalChargeKey 	=	mkttool.getControlList('ChargeKey')
	ListPromotion,TotalPromotion 	=	mkttool.getControlList('PromotionAmount')
	Promotion=''

	for i in range(0,TotalPromotion):

		if field.name == ListPromotion[i]:
			ChargeKey = request.form[ListChargeKey[i]]
			Promotion = request.form[ListPromotion[i]]

			if ChargeKey and ChargeKey != '__None':
				if not mkttool.isFloat(Promotion):
					raise ValidationError('Promotion must be number.')
			else:
				if Promotion and float(Promotion) != float(0):
					raise ValidationError('Please choose Charge Key.')

def setPromotion(**kwargs):
	try:
		Reverse 		=	kwargs.get("Reverse")
		PostData 		=	kwargs.get("PostData")
		ChargeRateObj	=	kwargs.get("ChargeRateObj")
		Account 		=	kwargs.get("Account")
		AccountObj 		=	MKT_ACCOUNT.query.get(Account)
		AccCategory 	= 	AccountObj.AccCategory if AccountObj else "38982"

		if PostData:
			if Reverse == True:
				#post reverse 
				DrCategory  = AccCategory
				DrMode 		= "Indirect"
				DrAccount	= Account

				CrCategory  = ChargeRateObj.PromotionCat
				CrAccount 	= ""
				CrMode 		= "Direct"
				#check if InternalAccount
				# if mktteller.isCashCateogry(CrCategory):
				# 	CrAccount = mktteller.getInternalAccount(Branch=PostData.get("Branch"),Category=CrCategory,Currency=PostData.get("Currency"))
				# 	CrMode 	  = "Indirect"

				Transaction = ChargeRateObj.PromotionRevTran

			else:
				#post normal
				DrCategory  = ChargeRateObj.PromotionCat
				DrAccount 	= ""
				DrMode 		= "Direct"

				CrCategory  = AccCategory
				CrMode 		= "Indirect"
				CrAccount 	= Account
				#check if InternalAccount
				# if mktteller.isCashCateogry(DrCategory):
				# 	DrAccount = mktteller.getInternalAccount(Branch=PostData.get("Branch"),Category=DrCategory,Currency=PostData.get("Currency"))
				# 	DrMode 	  = "Indirect"

				Transaction = ChargeRateObj.PromotionTran

			PostData.update({"Transaction"		:	Transaction,
							 "Module"			:	"LC",
							 "DrAccount"		:	DrAccount,
							 "CrAccount"		:	CrAccount, 
							 "DrCategory"		:	DrCategory,
							 "CrCategory"		:	CrCategory,
							 "DrMode"			:	DrMode,
							 "CrMode"			:	CrMode})

			mktpostaccounting.setPostAccounting(**PostData)
			return True
		else:
			return False
	except Exception, e:
		db.session.rollback()

def getCollateralRecord():
	try:
		result = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID == g.formID).first()
		if not result:
			result = MKT_LOAN_COLLATERAL_INAU.query.filter(MKT_LOAN_COLLATERAL_INAU.ID == g.formID).first()

		if result:
			return result.Collateral
		else:
			return ""
	except:
		raise

def loadCollateral():
	LoanID 			= request.form['LoanApplicationID'] if request.method == "POST" else ""
	CollateralObj 	= MKT_COLLATERAL.query

	if request.method == 'POST':
		LoanColObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID == LoanID).first()
		if LoanColObj:
			CollateralObj = CollateralObj.filter(MKT_COLLATERAL.ID == LoanColObj.Collateral)
	else:
		CollateralID 	= getCollateralRecord()
		if CollateralID:
			CollateralObj = CollateralObj.filter_by(ID = CollateralID)
		else:
			CollateralObj = CollateralObj.filter_by(ID="")

	return CollateralObj

def loadCheckList():
	return MKT_CHECKLIST.query.order_by(MKT_CHECKLIST.ID.asc())

class FRM_LOAN_CONTRACT_EX(FRM_LOAN_CONTRACT):

	LoanApplicationID 	= 	RemoteTextField(getLanguage("Loan Application"))
	ContractCustomerID 	= 	RemoteTextField(requiredlabel(getLanguage("Customer"), "*"), [validators.Required()])
	Collateral 			= 	QuerySelectField(getLanguage("Collateral"),
								query_factory=loadCollateral,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--%s--' %getLanguage("None")
							)
	Account 			= 	QuerySelectField(requiredlabel(getLanguage("Drawdown Account"), "*"),
								query_factory=loadAccount,
								get_label=u'ID',
								allow_blank=False,
								blank_text=u'--%s--' %getLanguage("None"),
								validators=[validators.Required()]
							)

	Currency 		= 	TextField(requiredlabel(getLanguage("Currency"), "*"))
	ApprovedAmount	= 	DecimalField("Approved Amount", default=0)
	Disbursed 		= 	DecimalField(requiredlabel(getLanguage("Disbursed"), "*"), [validators.Required()])
	Amount 			= 	TextField(requiredlabel(getLanguage("Loan Balance"), "*"), [validators.Required()], default=0)
	OutstandingAmount 	=	TextField(requiredlabel(getLanguage("Loan Outstanding"), "*"), [validators.Required()], default=0)
	DisbursedBalance 	=	TextField("Disbursed Balance", default=0)
	ValueDate 		= 	DateField(requiredlabel(getLanguage("Value Date"), "*"), [validators.Required()], default=loanBankDate)
	FirstCollectionDate =	DateField("First Collection Date", [custom_FirstCollectionDate])
	Cycle 			= 	IntegerField(requiredlabel(getLanguage("Cycle"), "*"), [validators.Required()], default=1)
	MaturityDate 	= 	DateField(getLanguage("Maturity Date"), [validators.Optional()])

	LoanProduct 	= 	QuerySelectField(requiredlabel(getLanguage("Loan Product"), "*"),
							query_factory=loadLoanProduct,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()]
						)
	LoanPurpose 	= 	QuerySelectField(getLanguage("Loan Purpose"),
							query_factory=laodLoanPurpose,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
						)

	Category 		= 	TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	InterestRate 	= 	TextField(requiredlabel(getLanguage("Interest Rate"), "*"), [validators.Required()])
	IRR 			= 	TextField("IRR")
	FreqType 		= 	SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
							choices=[('1', '1. %s' %getLanguage('Monthly')), ('2', '2. %s' %getLanguage("Weekly"))],
							coerce=str,
							validators=[validators.Required()]
						)

	Frequency 		= 	IntegerField(requiredlabel(getLanguage("Frequency"), "*"), [validators.Required()], default=1)
	Term 			= 	IntegerField(requiredlabel("%s (%s)" %(getLanguage("Term"), getLanguage("Month")), "*"), [validators.Required()])
	Installment 	= 	IntegerField(requiredlabel(getLanguage("Installment"), "*"), [validators.Required()])

	DeliqMode 		= 	SelectField(requiredlabel(getLanguage('Deliquency Mode'), '*'),
							choices=[('3', '3. %s' %getLanguage("Semi-Automatic")),
									 ('2', '2. %s' %getLanguage("Automatic")),
									 ('1', '1. %s' %getLanguage("Manual"))],
							coerce=str,
							default='3',
							validators=[validators.Required()]
						)


	ContractVB 		= 	RemoteTextField(getLanguage("Village Bank"))
	Group 			= 	IntegerField(getLanguage("Group"), [validators.Optional()])

	SourceOfFund 	= 	QuerySelectField(getLanguage("Source of Fund"),
							query_factory=loadSourceOfFund,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
						)

	LoanType 		= 	SelectField(requiredlabel(getLanguage('Loan Type'), '*'),
							choices=[('N', '%s' %getLanguage("Normal")),
									 ('R', '%s' %getLanguage("Restructured"))],
							coerce=str,
							default='N'
						)
	
	AssetClass 		= 	TextField(requiredlabel(getLanguage("Asset Class"), "*"), [validators.Required()], default=loadAssetClass)

	MoreThanOneYear = 	TextField(requiredlabel(getLanguage("More Than One Year"), "*"), [validators.Required()], default='N')

	TotalInterest 	= 	DecimalField(getLanguage("Total Interest"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	IntIncEarned 	= 	DecimalField(getLanguage("Interest Income Earned"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrIntPerDay 	= 	DecimalField(getLanguage("Accrued Interest Per Day"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrInterest 	= 	DecimalField(getLanguage("Accrued Interest Receivable"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrCurrentInt 	= 	DecimalField(getLanguage("Accr Current Installment"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrIntCurrMonth = 	DecimalField(getLanguage("Accr Int Current Month"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	AccrIntPreMonth = 	DecimalField(getLanguage("Accr Int Previous Month"), [validators.Optional()], default=0, description="1-%s" %getLanguage("Interest"))
	Suspend 		= 	TextField(getLanguage("Suspend"), default='N', description="1-%s" %getLanguage("Interest"))
	DisbursedStat 	= 	TextField(requiredlabel(getLanguage("Disbursed Status"), "*"), [validators.Required()], default='N')

	ContractOfficerID 	= 	QuerySelectField(requiredlabel('Officer (CC)','*'),
							query_factory=loadOfficer,
							get_label=lambda a: a.ID + " - " + a.LastName + " " +a.FirstName,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()]
						)

	PayableTo1 			= 	TextField('Payable to #1')
	PayableTo2 			= 	TextField('Payable to #2')

	# Tab Loan Charge
	ChargeKey 			= 	QuerySelectField(getLanguage("Charge Key"),
								query_factory=loadCharge,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--None--',
								description=u'2-%s' %getLanguage("Loan Charge")
							)
	RateFixed 			= 	TextField(getLanguage("Rate") + "/" + getLanguage("Fixed"), description=u'2-%s' %getLanguage("Loan Charge"))
	Charge 				= 	TextField(getLanguage("Charge"),
								validators=[custom_Charge], 
								default=0,
								description=u'2-%s' %getLanguage("Loan Charge"))
	PromotionAmount 	= 	TextField("Promotion Amount",
								validators=[custom_Promotion], 
								default=0,
								description=u'2-%s' % getLanguage("Loan Charge"))
	ChargePerInstallment= 	TextField("Charge Per Installment", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargePerDay		= 	TextField("Charge Per Day", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargeLastBooked	= 	TextField("Charge Last Booked", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	
	ChargeEarned 		= 	TextField("Charge Earned", default=0, description=u'2-%s' %getLanguage("Loan Charge"))
	ChargeUnearned 		= 	TextField("Charge Unearn", default=0, description=u'2-%s' %getLanguage("Loan Charge"))

	Iframe				=	MKTIframe("View Repayment",dicIframe={'width':'100%','height':'1000','frameborder':'0'}, description='3-Reapyment Schedule')


	Guarantor 		= 	QuerySelectField(getLanguage("Guarantor"),
							query_factory=loadGuarantor,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--None--'
						)

	GTRelationIndicator = SelectField("Relation Indicator",
								choices=[('', '--None--'), ('1', 'Son/Daughter'), ('2', 'Relative'), ('3', 'Parents'), ('4', 'Friend')],
								coerce=str,
								default=''
							)

	Type 				= SelectField("Type",
								choices=[('G', 'Guarantor'), ('R', 'Referrer'), ('S', 'Successor')],
								coerce=str,
								default='G'
							)

	GuarantorType		= SelectField("Guarantor Type",
								choices=[('','--None--'),('1','Supported Guarantor'),('2','Unsupported Guarantor')],
								coerce=str,
								default=''
							)

	CoBorrowerID 	= 	QuerySelectField(getLanguage("Co-Borrower"),
							query_factory=loadCoBorrower,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
						)
	RelationIndicator 	= 	SelectField("Relation Indicator",
							choices=[('__None', '--None--'), ('1', 'Spouse'), ('2', 'Son/Daughter'), ('3', 'Relative'), ('4', 'Parent'), ('5', 'Friend')],
							coerce=str,
							default='__None'
						)
	QuickLinkIFrame = MKTIframe("QuickLink",
								dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, 
								description='4-Quick Link')
	CoBorrowerGuarantorIFrame = MKTIframe("CoBorrowerGuarantor",
								dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, 
								description='5-CoBorrower and Guarantor')

	# Tab disbursement check list
	CheckList 		= QuerySelectField(getLanguage("Check List Item"),
							query_factory=loadCheckList,
							get_label=lambda a: a.ID + ' - ' + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("Choose Check List"),
							description="6-Disbursement Check List"
						)
	
	CheckListIFrame 	= MKTIframe("Disbursement Check List",
								dicIframe={'width':'100%','height':'730px','frameborder':'0'},
								description='7-Disbursement Check List')

	# Tab Review
	Reviewcurr 			=	DisabledTextField("Curr.No",description='8-Review', default='0')
	Reviewer_1 			=	DisabledTextField("Reviewer 1",description='8-Review')
	Reviewedon_1 		=	DisabledTextField("Review DateTime",description='8-Review')
	Reviewer_2 			=	DisabledTextField("Reviewer 2",description='8-Review')
	Reviewedon_2 		=	DisabledTextField("Review DateTime",description='8-Review')



	@staticmethod
	def setDisable():
		
		base = super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).setDisable()
		control_list = []

		if not DEBUG_MODE:
			# control_list = ["DisbursedBalance","ApprovedAmount","LoanProduct","InterestRate","FreqType","Term",
			# 				"LoanPurpose","ContractOfficerID","Frequency"]
			control_list = ["DisbursedBalance","ApprovedAmount","LoanProduct","InterestRate","FreqType","Term",
							"LoanPurpose","Frequency","LoanType"]
		control_list.extend(base)
		return control_list

	@staticmethod
	def setVisible():

		base = super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).setVisible()
		control_list = []

		if not DEBUG_MODE:
			control_list = ["Guarantor","CoBorrowerID","RelationIndicator","DeliqMode","IRR","ContractVB","Group","Collateral","Type","GuarantorType","GTRelationIndicator"]
		control_list.extend(base)
		return control_list

	@staticmethod
	def moneyField():
		base = super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).moneyField()

		control_list = [["DisbursementBal","Currency"],['PromotionAmount',"Currency"]]
		control_list.extend(base)
		return control_list

	@staticmethod
	def formatMoney():
		base = super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).formatMoney()

		control_list = ["DisbursementBal"]
		control_list.extend(base[0])
		return control_list, base[1]

	@staticmethod
	def urlParam():
		dicParam = [{"IframeName":"Iframe", "iframeUrl":"/Morakot/Template/T00002", 'Resource' : 'Status', 'Optional':"Navbar=False"}]
		dicParam.append({"IframeName":"QuickLinkIFrame", "iframeUrl":"/Morakot/QuickLink/",'Resource' : 'Status'})
		dicParam.append({"IframeName":"CoBorrowerGuarantorIFrame", "iframeUrl":"/Morakot/Template/T00009",'Resource' : 'Status'})
		dicParam.append({"IframeName":"CheckListIFrame", "iframeUrl":"/Morakot/disbchecklist",'Resource' : 'Status'})
		return dicParam

	@staticmethod
	def isMultiValue():
		base = super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).isMultiValue()
		controls_list=["6-Disbursement Check List"]
		controls_list.extend(base)
		return controls_list


	@staticmethod
	def hotSelectField():
		base = super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).hotSelectField()

		for item in base:
			if "/Morakot/ContractCustomerInfo" in item[3] and "ContractCustomerID" in item[0]:
				item[1] = item[1] + ",Currency:$('#Currency').val()"
				item[3] = "/Morakot/DrawdownByCustomer"
			if "/Morakot/CollateralByClient" in item[3] and "ContractCustomerID" in item[0]:
				item[1] = "LoanAppID:$('#LoanApplicationID').val()"
				item[3] = "/Morakot/LoanAppCollateral"
		return base


	@staticmethod
	def beforeAuthorize():
		# print "befor authorize"
		try:

			ID 			= g.formID
			Disbursed 	= MKT_LOAN_CONTRACT_INAU.query.get(ID)

			BasedMethod = super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).beforeAuthorize()
			""" Based method return True or False
				if Based method return True, derived method can be proceeded
				if Based method return False, there is error in based method, derived method cannot be proceeded
			"""
			if BasedMethod:
				LoanChargeObj = MKT_LOAN_CHARGE_INAU.query.filter(MKT_LOAN_CHARGE_INAU.ID == ID)
				if LoanChargeObj.all():
					for row in LoanChargeObj:
						ChargeRateObj	=	MKT_CHARGE_RATE.query.filter(MKT_CHARGE_RATE.ID == '%s%s' % (row.ChargeKey,Disbursed.Currency)).first()
						PostData 		= 	{	"Branch"		: Disbursed.Branch,
												"Reference"		: ID,
												"Amount"		: Decimal(row.PromotionAmount),
												"Currency"		: Disbursed.Currency,
												"UserReference" : ChargeRateObj.ID,
												"Note"			: "Charge Promotion",
												"TranDate" 		: Disbursed.ValueDate,
												"Inputter" 		: mktuser.getUser().ID
											}

						setPromotion(PostData=PostData,Reverse=False,ChargeRateObj=ChargeRateObj,Account=Disbursed.Account)
				"""
					Move checklist from INAU to Live
				"""
				# AppStatusObj  = MKT_APP_STATUS_INAU.query.filter(MKT_APP_STATUS_INAU.ID==ID).all()
				# Audit 		= mktaudit.getAuditrail()
				# AppStatusItems={}
				# if AppStatusObj:
				# 	mktdb.deleteRecord(MKT_APP_STATUS_INAU,[MKT_APP_STATUS_INAU.ID==ID])
				# 	for item in AppStatusObj:
				# 		AppStatusItems.update({
				# 			"ID":item.ID,
				# 			"CheckList":item.CheckList
				# 		})
				# 		mktdb.insertTable(MKT_APP_STATUS,AppStatusItems)
				# 		db.session.commit()

				return True
			else:
				return False

		except Exception, e:
			flash("%s"%e)
			db.session.rollback()
			return False

	@staticmethod
	def redirectAfterInsert():
		REGULAR_FEE = '2'
		try:
			base = super(FRM_LOAN_CONTRACT_EX,FRM_LOAN_CONTRACT_EX).redirectAfterInsert()
			ID 			= request.form['ID']
			Disbursed 	= request.form['Disbursed']
			FF_CHARGE_BASE = mktsetting.getAppSetting("CHARGE_CAL_BASE")
			ApprovedAmt = request.form['ApprovedAmount'] if FF_CHARGE_BASE else Disbursed
			Currency 	= request.form['Currency']

			ListChargeKey, TotalChargeKey 	= getControlList("'ChargeKey' in item")
			ListRateFixed, TotalRateFixed 	= getControlList("'RateFixed' in item")
			ListCharge, TotalCharge 		= getControlList("item == 'Charge' or 'Charge_' in item")
			ListPromotion, TotalPromotion 	= getControlList("'Promotion' in item")

			LoanContractObj = MKT_LOAN_CONTRACT_INAU.query.get(ID)

			TotalCharge = 0
			for i in range(0,TotalChargeKey):
				ChargeKey 	= request.form[ListChargeKey[i]]
				ChargeKey 	+= Currency
				RateFixed 	= request.form[ListRateFixed[i]]
				Charge 		= request.form[ListCharge[i]]
				Promotion 	= request.form[ListPromotion[i]]
				KeyObj 		=	MKT_CHARGE_RATE.query.filter(MKT_CHARGE_RATE.ID == ChargeKey).first()

				ChargeUnearned 	= 0
				if KeyObj:
					ChargeMode = KeyObj.ChargeMode
					if ChargeMode != REGULAR_FEE:
						MinimumAmount 	=float(KeyObj.MinimumAmount)
						if RateFixed == 'F':
							ChargeUnearned 	=	float(Charge)
						elif RateFixed == "R":
							NewCharge = (float(ApprovedAmt) * float(Charge)) / 100
							if NewCharge < MinimumAmount:
								NewCharge = MinimumAmount
							ChargeUnearned = NewCharge

				ChargeAmt 	= ChargeUnearned - float(Promotion)
				TotalCharge += ChargeAmt

			DisbursedBalance = float(Disbursed) - float(TotalCharge)
			if LoanContractObj:
				LoanContractObj.DisbursedBalance = DisbursedBalance
				db.session.add(LoanContractObj)
				db.session.commit()
			LoanAppID = LoanContractObj.LoanApplicationID
			#auto create co-borrower and quarantor 
		 	mktloan.autoCloneLAToLC(LoanAppID=LoanAppID,LCID=ID,Table="INAU",Option="Y")
			return base
		except Exception, e:
			flash("%s"%e)
			db.session.rollback()

	@staticmethod
	def redirectAfterVerify():
		LIST_ROLE 	= ['15'] #CFO ROLE
		ID 			= g.formID
		LoanObj 	= MKT_LOAN_CONTRACT_INAU.query.get(ID)
		CurrentUser	= mktuser.getUser()
		if LoanObj:
			Reviewcurr = LoanObj.Reviewcurr

			# Review by BM and F
			if Reviewcurr == 2:
				ToUserList  = MKT_USER.query.filter(MKT_USER.Role.in_(LIST_ROLE)).all() # Role PVO
				for row in ToUserList:
					mktnotify.insertNotify({'ID':ID,
											'Path':'LoanContractEx',
											'Title':'Loan Contract',
											'From':CurrentUser.ID,
											'To':row.ID,
											'Message':' was reviewed. Please authorized the record.'
											})
		return None


