from app.mktcore.wtfimports 	import *
from app.Collateral.detail 		import *
from app.Collateral.forms 		import *
from app.Collateral.models 		import *
from app.User.models 			import *
from local.FirstFinance.Collateral.forms import *

import app.tools.mktaccounting		as mktaccounting
import decimal
import app.tools.mktdb 			as mktdb
import app.tools.mktdate 		as mktdate
from app.mktcore 				import exform
import app.tools.mktnotification 	as mktnotify
import app.tools.mktsetting   	as mktsetting
import app.tools.mkttool 					as mkttool
from app.tools.mktloan 			import *

def loadCC():
	Branch 		= mktuser.getCurrentBranch()
	CCObj 		= MKT_USER.query.filter_by(Role='2').\
								 filter_by(AccessBranch=Branch).\
								 all()
	return CCObj

def loadCustomer():
	CurrentBranch = mktuser.getCurrentBranch()
	CustomerObj = MKT_CUSTOMER.query.\
					filter(MKT_CUSTOMER.Branch==CurrentBranch)

	return CustomerObj

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def loadCollateral(ID=''):
	if ID:
		return MKT_COLLATERAL.query.filter(MKT_COLLATERAL.ID==ID).first()
	else:
		Branch = mktuser.getCurrentBranch()
		return MKT_COLLATERAL.query.filter(MKT_COLLATERAL.Branch==Branch).all()

def UpdateCollateralValue(**kwargs):
	CollateralID = kwargs.get('CollateralID')
	CollateralDeINAU = kwargs.get('CollateralDeINAU')

	ValuationPrice         = CollateralDeINAU.ValuationPrice
	ForceSale             = CollateralDeINAU.ForceSaleValue
	PurchasePrice        = CollateralDeINAU.PurchasePrice


	if PurchasePrice and PurchasePrice <= ValuationPrice:
		MinCollateralValue     = (float(PurchasePrice))
	else:
		MinCollateralValue     = (float(ValuationPrice))


	CollateralObj = MKT_COLLATERAL.query.filter(MKT_COLLATERAL.ID==CollateralID).first()

	if CollateralObj:

		NewValuationPrice         = float(CollateralObj.ValuationPrice) - float(ValuationPrice)
		NewForceSale             = float(CollateralObj.ForceSale) - float(ForceSale)
		NewPurchasePrice         = float(CollateralObj.PurchasePrice) - float(PurchasePrice)
		NewMinCollateralValue     = float(CollateralObj.MinCollateralValue) - float(MinCollateralValue)

		try:
			mktdb.updateRecord(
				MKT_COLLATERAL,
				[MKT_COLLATERAL.ID==CollateralID],
				{'ForceSale':NewForceSale,'PurchasePrice':NewPurchasePrice,'ValuationPrice':NewValuationPrice,'MinCollateralValue':NewMinCollateralValue}
				)
			db.session.commit()

			return True
		except:
			db.session.rollback()
			raise

@app.route("/Morakot/OwnerType",methods=['GET'])
def getOwnerShip():
	OwnershipType 	= request.args.get('OwnershipType')
	SpoID 	  	= 'false'
	OtherID1	= 'false'
	OtherID2	= 'false'

	if OwnershipType == '1': # Owner By Customer
		OtherID1 = 'true'
		OtherID2 = 'true'
	else:
		SpoID 	 = 'true'

	return jsonify(
					SpoID=SpoID,
					OtherID1=OtherID1,
					OtherID2=OtherID2)


class FRM_COLLATERAL_DE_EX(FRM_COLLATERAL_DE):

	CollateralID 				= 	QuerySelectField(requiredlabel(getLanguage("Collateral"), "*"),
										query_factory=loadCollateral,
										get_label=lambda a: a.ID + " - " + a.Description,
										allow_blank=True,
										blank_text=u'--%s--' %getLanguage("None"),
										default=lambda:loadCollateral(request.args.get("CollID") if 'CollID' in request.args else ""),
										validators=[validators.Required()]
									)

	CollateralType 				= 	QuerySelectField(requiredlabel(getLanguage("Collateral Type"), "*"),
										query_factory=loadCollateralType,
										get_label=u'Description',
										allow_blank=True,
										blank_text=u'--%s--' %getLanguage("None"),
										validators=[validators.Required()]
									)

	StatusOfRegistration 		= 	SelectField(requiredlabel("Status of Registration","*"),
										validators=[validators.Required()],
										choices=[('', '--None--'), ('1', '1-Registered at Commune'),
												('2', '2-Registered at District'),
												('3', '3-Registered at Cadastral Office')],
										coerce=str,
										default='--None--'
									)

	# CreditConsultant 			= 	QuerySelectField(requiredlabel('Credit Consultant','*'),
	# 									[validators.required()],
	# 									query_factory=loadCC, 
	# 									get_label='DisplayName',
	# 									allow_blank=True,
	# 									blank_text=u'--None--',
	# 								)

	Currency 					= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
										query_factory=loadCurrency,
										get_label=u'ID',
										allow_blank=False,
										default=lambda:loadCurrency('USD'),
										validators=[validators.Required()],
									)

	CollateralStatus 			=  SelectField("Status",
										choices=[('1','Received'),('2','Withdrawn')],
										coerce=str,
										default ='Receive'
									)

	ReceivedDate 				= 	DateField("Received Date",
										format='%Y-%m-%d'
									)
	ReceivedBy 					= 	TextField("Received By")

	WithdrawalDate 				= 	DateField("Withdrawn Date", format='%Y-%m-%d')

	WithdrawalBy 				= 	TextField("Withdrawn By")

	Description 				= 	TextAreaField(getLanguage("Property Description"))

	TitleName					= 	TextField(requiredlabel('Title Name','*'),
										validators=[validators.Required()],
										description="2-Ownership")

	PropertyType 				= 	SelectField(requiredlabel("Property Type","*"),
										validators=[validators.Required()],
										choices=[('', '--None--'), ('1', 'Land and Building of a Borei'),
												('2', 'Land and Building'),
												('3', 'Residential Land'),
												('4', 'Farm Land'),
												('5', 'Building')],
										coerce=str,
										default='--None--',
										description='1-Property Details'
									)

	TotalLandSquare 			= 	TextField("Land Size (SQM)",
										description="1-Property Details")
	
	TotalBuildingSquare 		= 	TextField("Building Size (SQM)",
										description="1-Property Details")

	Province 					= 	QuerySelectField(requiredlabel('Province','*'),
										validators=[validators.required()],
										query_factory=loadProvince, 
										get_label='Description',
										allow_blank=True,
										blank_text=u'--Choose Province--',
										description='1-Property Details'
									)

	District 					= 	QuerySelectField(requiredlabel('District','*'),
										validators=[validators.required()],
										query_factory=loadDistrict, 
										get_label='Description',
										allow_blank=True,
										blank_text=u'--Choose District--',
										description='1-Property Details'
									)

	Commune 					=	QuerySelectField(requiredlabel('Commune','*'),
										query_factory=loadCommune, 
										validators=[validators.required()],
										get_label='Description',
										allow_blank=True,
										blank_text=u'--Choose Commune--',
										description='1-Property Details'
									)

	Village 					=	QuerySelectField(requiredlabel('Village','*'),
										query_factory=loadVillage, 
										validators=[validators.required()],
										get_label='Description',
										allow_blank=True,
										blank_text=u'--Choose Village--',
										description='1-Property Details'
									)

	HouseNo 					= 	TextField("House No",
										description="1-Property Details")

	StreetNo 					= 	TextField("Street",
										description="1-Property Details")

	BoundaryNorth 				= 	TextField(requiredlabel("North Boundary","*"),
										validators=[validators.Required()],
										description="1-Property Details")

	BoundarySouth 				= 	TextField(requiredlabel("South Boundary","*"),
										validators=[validators.Required()],
										description="1-Property Details")

	BoundaryEast 				= 	TextField(requiredlabel("East Boundary","*"),
										validators=[validators.Required()],
										description="1-Property Details")

	BoundaryWest 				= 	TextField(requiredlabel("West Boundary","*"),
										validators=[validators.Required()],
										description="1-Property Details")

	GoogleEarthURL 				= 	TextField(requiredlabel("Google Earth URL","*"),
										validators=[validators.Required(),validators.URL()],
										description="1-Property Details")

	Photo		 				= 	TextField(requiredlabel("Photo URL","*"),
										validators=[validators.Required(), validators.URL()],
										description="1-Property Details")

	# Ownership Details 

	OwnerName 					= 	TextField('Registered Owner',
										description='2-Ownership')

	TitleName 					= 	TextField(requiredlabel('Title Name','*'),
										validators=[validators.Required()],
										description='2-Ownership')

	CollateralNumber			= 	TextField(requiredlabel("Title Number","*"),
										validators=[validators.Required()],
										description="2-Ownership")

	TitleType 					= 	SelectField("Title Type",
										choices=[('', '--None--'),
												 ('SoftTitle', '1-Soft Title'),
												 ('HardTitle', '2-Hard Title'),
												 ('LMap', '3-LMAP'),
												 ('Other', '4-Other')],
										coerce=str,
										default='__None',
										description='2-Ownership'
									)

	IssuedBy 					= 	TextField(requiredlabel("Title Issued By","*"),
										validators=[validators.Required()],
										description="2-Ownership")

	IssuedDate 					= 	DateField(requiredlabel("Title Issued Date","*"),
										format='%Y-%m-%d',
										default=mktdate.getDateISO(),
										validators=[validators.Required()],
										description="2-Ownership"
										)

	IssuedPlace 				= 	TextField(getLanguage("Issued Place"),
										[validators.length(max=50)],
										description="2-Ownership"
									)

	OwnerName 					= 	TextField(requiredlabel('Name On Title','*'),
										validators=[validators.Required()],
										description='2-Ownership')

	OwnershipType 				=	SelectField('Ownership Type', 
										choices=[('1', 'Owned By Customer'),
												 ('2', 'Owned By Other')],
										coerce=str,
										description='2-Ownership')
	# New Field 1
	SpoID 						= 	QuerySelectField('Co-Owner ID',
										query_factory=loadCustomer, 
										get_label=lambda a: a.ID + ' - ' + a.LastNameEn + " " + a.FirstNameEn,
										allow_blank=True,
										blank_text=u'--None--',
										description='2-Ownership'
									)

	OwnerSpouseName 			= 	TextField('Owner Spouse Name',
										description='2-Ownership')

	# OtherID1
	OtherID1					= QuerySelectField('Other ID 1',
										query_factory=loadCustomer, 
										get_label=lambda a: a.ID + ' - ' + a.LastNameEn + " " + a.FirstNameEn,
										allow_blank=True,
										blank_text=u'--None--',
										description='2-Ownership'
									)

	# OtherName1
	OtherName1 					= TextField('Other Name 1',description='2-Ownership')

	# OtherID2
	OtherID2 					= QuerySelectField('Other ID 2',
										query_factory=loadCustomer, 
										get_label=lambda a: a.ID + ' - ' + a.LastNameEn + " " + a.FirstNameEn,
										allow_blank=True,
										blank_text=u'--None--',
										description='2-Ownership'
									)

	# OtherName2
	OtherName2 					= TextField('Other Name 2',description='2-Ownership')

	RelationIndicator 		= 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="2-Ownership"
						)

	# 3-Property Values
	CMVBuilding 	=	TextField('CMV of Building',
									description="3-Property Values")
	CMVLandField 	=	TextField('CMV of Land Field',
									description="3-Property Values")
	ValuationPrice  = 	TextField(requiredlabel('Current Market Value','*'),
										validators=[validators.required()],
										description="3-Property Values")
	ForceSaleValue 				= 	TextField(requiredlabel('Force Sale Value','*'),
										validators=[validators.required()],
										description="3-Property Values")

	PurchasePrice 				= 	TextField(getLanguage("Purchased Price"),
										description="3-Property Values")
	Valuer 						= 	TextField(getLanguage("Valuer"), [validators.length(max=50)],
										description="3-Property Values")


	def validate_GoogleEarthURL(form,field):
		url = str(request.form['GoogleEarthURL'])

		if url.find('google.com') == -1 and url.find('goo.gl') == -1:
			raise ValidationError('Should be a google domain example: http://google.com or http://www.google.com')

	def validate_TotalLandSquare(form,field):
		Land = request.form['TotalLandSquare']

		if Land:
			try:
				Number = float(Land)
			except ValueError:
				Number = None

			if Number is None:
				raise ValidationError('Please enter Number Only')
			elif Number < 0:
				raise ValidationError('Number should be Greater Than 0')
			else:
				return ''

	def validate_TotalBuildingSquare(form,field):
		Building = request.form['TotalBuildingSquare']

		if Building:
			try:
				Number = float(Building)
			except ValueError:
				Number = None

			if Number is None:
				raise ValidationError('Please enter Number only')
			elif Number < 0:
				raise ValidationError('Number should be Greater than 0')
			else:
				return ''

	def validate_Photo(form,field):
		Photo = str(request.form['Photo'])
		if Photo.find('google.com') == -1 and Photo.find('goo.gl') == -1:
			raise ValidationError('Should be a google domain example: http://google.com or http://www.google.com')

	def validate_ReceivedDate(form,field):

		ReceivedDate = request.form['ReceivedDate']

		if ReceivedDate:
			# clear out processing errors
			field.errors[:] = []
			CheckFormatDate = mktdate.isDateISO(ReceivedDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		else:
			# clear out processing errors
			field.errors[:] = []

	def validate_WithdrawalDate(form,field):

		WithdrawDate = request.form['WithdrawalDate']
		ReceivedDate = request.form['ReceivedDate']
		Status 		 = str(request.form['CollateralStatus'])

		try:
			WithdrawBy 		= 	str(request.form["WithdrawalBy"])
		except Exception, e:
			WithdrawBy 		= 	unicode(request.form["WithdrawalBy"])

		if WithdrawDate:
			# clear out processing errors
			field.errors[:] = []
			CheckFormatDate = mktdate.isDateISO(WithdrawDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")
		else:
			# clear out processing errors
			field.errors[:] = []

		if Status 	== '2' and WithdrawDate  == '':
			raise ValidationError('Cannot be blank for collateral status Withdraw')
		elif Status == '2' and (ReceivedDate > WithdrawDate):
			raise ValidationError("Should be later than Received Date")
		elif Status == '1' and WithdrawDate != '':
			raise ValidationError('Should be blank for collatral status Receive')

	def validate_WithdrawalBy(form,field):

		Status 		 = str(request.form['CollateralStatus'])
		# WithdrawDate = request.form['WithdrawalDate']

		try:
			WithdrawBy 		= 	str(request.form["WithdrawalBy"])
		except Exception, e:
			WithdrawBy 		= 	unicode(request.form["WithdrawalBy"])

		if Status == '2' and WithdrawBy == '':
			raise ValidationError("Cannot be blank for collateral status Withdraw")
		elif Status == '1' and WithdrawBy != '':
			raise ValidationError('Should be blank for collatral staus Receive')

	def validate_OtherID1(form,field):
		ownershipType = request.form.get('OwnershipType')
		OtherID1 	  = request.form.get('OtherID1')

		if ownershipType == '2' and OtherID1=='__None':
			raise ValidationError('Other ID1 is required for Ownership Type Owned by Other')
		else:
			return ''

	def validate_OtherName1(form,field):
		ownershipType = request.form.get('OwnershipType')
		OtherName1 	  = request.form.get('OtherName1')
		if ownershipType == '2' and OtherName1=='':
			raise ValidationError('Other Name 1 is required for Ownership Type Owned by Other')
		else:
			return ''

	def validate_CollateralStatus(form,field):
		CollateralStatus = request.form.get('CollateralStatus')
		CollateralID = request.form.get('CollateralID')
		if CollateralStatus=='2':
			Check = checkCollateralIsUsed(CollateralID)
			if Check[0]:
				raise ValidationError(Check[1])
		else:
			return ''

	@staticmethod
	def setWidth():

		MainObj = super(FRM_COLLATERAL_DE_EX, FRM_COLLATERAL_DE_EX).setWidth()
		NewList = [	('ValuationDate', len3),
					('Valuer',len3),
					('StreetNo', ''),
					('HouseNo', len3),
					('ReceivedDate',''),
					('WithdrawalDate',''),
					('CMVBuilding',len3),
					('CMVLandField',len3),
					('ValuationPrice',len3),
					('ForceSaleValue',len3),
					('PurchasePrice',len3),
					('Valuer',len3)]
		MainObj.extend(NewList)
		return MainObj

	@staticmethod
	def setDisable():
		MainObj = super(FRM_COLLATERAL_DE_EX,FRM_COLLATERAL_DE_EX).setDisable()
		ID = g.get('formID') if 'formID' in g else ''
		ActivityType = ''

		if ID and ID !='Operation':
			ColDe = MKT_COLLATERAL_DE.query.get(ID)
			if not ColDe:
				ColDe = MKT_COLLATERAL_DE_INAU.query.get(ID)
				if ColDe:
					ActivityType = ColDe.OwnershipType

		if not ActivityType:
			ActivityType = request.form.get('OwnershipType')

		controls_list = ['ValuationPrice','OtherID1','OtherID2','OtherName1','OtherName2']
		if ActivityType == '2': # owned by other
			# readonly spoID and OwnerName
			controls_list.append('SpoID')
			# controls_list.remove('OwnerName')
			# remove readonly to OtherID1, OtherName1, OtherID2 and OtherName2
			controls_list.remove('OtherID1')
			controls_list.remove('OtherName1')
			controls_list.remove('OtherID2')
			controls_list.remove('OtherName2')

		MainObj.extend(controls_list)
		# if MainObj and 'OwnerName' in MainObj and 'OwnerSpouseName' in MainObj:
		if MainObj and 'OwnerSpouseName' in MainObj:
			MainObj.remove('OwnerName')
			MainObj.remove('OwnerSpouseName')


			return MainObj
		else:
			return MainObj

	@staticmethod
	def setVisible():
		Parent = super(FRM_COLLATERAL_DE_EX,FRM_COLLATERAL_DE_EX).setVisible()
		controls_list = ['OwnerSpouseName']
		controls_list.extend(Parent)

		return controls_list

	@staticmethod
	def hotField():
		base = super(FRM_COLLATERAL_DE_EX,FRM_COLLATERAL_DE_EX).hotField()

		NewHotField = []
		fielddisplay 	= 	"$('#ValuationPrice').val(data.Total);"
		varname			=	"Building:$('#CMVBuilding').val(),LandField:$('#CMVLandField').val(),Currency:$('#Currency').val()"
		fun 			=	["CMVBuilding", varname, fielddisplay, "/Morakot/CalculateCMV", "blur"]
		NewHotField.append(fun)
		fun 			=	["CMVLandField", varname, fielddisplay, "/Morakot/CalculateCMV", "blur"]
		NewHotField.append(fun)

		fielddisplay 	= 	"(data.SpoID=='true')?$('#SpoID').select2('readonly',true):$('#SpoID').select2('readonly',false);"
		fielddisplay 	+= 	"(data.SpoID=='true')?$('#SpoID').val('__None').select2().trigger('change'):'';"
		# fielddisplay 	+= 	"(data.SpoID=='true')?$('#OwnerName').val('').attr('readonly','readonly'):$('#OwnerName').removeAttr('readonly');"
		fielddisplay 	+= 	"(data.OtherID1=='true')?$('#OtherID1').val('__None').select2().trigger('change'):'';"
		fielddisplay 	+= 	"(data.OtherID1=='true')?$('#OtherID1').select2('readonly',true).trigger('change'):$('#OtherID1').select2('readonly',false);"
		fielddisplay 	+= 	"(data.OtherID1=='true')?$('#OtherName1').val('').attr('readonly','readonly'):$('#OtherName1').removeAttr('readonly');"
		fielddisplay 	+= 	"(data.OtherID2=='true')?$('#OtherID2').val('__None').select2().trigger('change'):'';"
		fielddisplay 	+= 	"(data.OtherID2=='true')?$('#OtherID2').select2('readonly',true):$('#OtherID2').select2('readonly',false);"
		fielddisplay 	+= 	"(data.OtherID2=='true')?$('#OtherName2').val('').attr('readonly','readonly'):$('#OtherName2').removeAttr('readonly');"

		varname			= 	"OwnershipType:$('#OwnershipType').val()"

		fun 			= 	["OwnershipType",varname,fielddisplay,"/Morakot/OwnerType","change"]

		NewHotField.append(fun)

		for item in base:
			if item[0] !='OwnershipType':
				NewHotField.append(item)

		return NewHotField

	@staticmethod
	def moneyField():

		MainObj = super(FRM_COLLATERAL_DE_EX,FRM_COLLATERAL_DE_EX).moneyField()
		NewList = [	["PropertyCurrentMarketValue","Currency"],["ForceSaleValue","Currency"],
					['CMVBuilding','Currency'],['CMVLandField','Currency']]
		MainObj.extend(NewList)
		return MainObj

	@staticmethod
	def redirectAuthorize():
		ID   					= g.formID
		CollateralObj 			= MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.ID==ID).first()
		CollateralID 			= CollateralObj.CollateralID
		CollateralDeObj 		= MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID==CollateralID).\
								  filter(MKT_COLLATERAL_DE.CollateralStatus=='1').\
								  all()

		ValuationPrice 			= 0
		ForceSale 				= 0
		PurchasePrice 			= 0
		MinCollateralValue		= 0
		Currency 				= ''
		ReportingRateObj 		= mktaccounting.getReportingRateObj()

		if CollateralDeObj:
			for row in CollateralDeObj:
				ExchangeRate 			=  float(ReportingRateObj[row.Currency])
				ValuationPrice 			+= (float(row.ValuationPrice)*ExchangeRate)
				ForceSale 				+= (float(row.ForceSaleValue)*ExchangeRate)
				PurchasePrice 			+= (float(row.PurchasePrice)*ExchangeRate)
				
				if row.PurchasePrice and row.PurchasePrice <= row.ValuationPrice:
					MinCollateralValue 	+= (float(row.PurchasePrice)*ExchangeRate)
				else:
					MinCollateralValue 	+= (float(row.ValuationPrice)*ExchangeRate)

			try:
				mktdb.updateRecord(
					MKT_COLLATERAL,
					[MKT_COLLATERAL.ID==CollateralID],
					{'ForceSale':ForceSale,'PurchasePrice':PurchasePrice,'ValuationPrice':ValuationPrice,'MinCollateralValue':MinCollateralValue}
					)
				db.session.commit()
			except:
				db.session.rollback()
				raise
		return None

	@staticmethod
	def beforeAuthorize():
		 # Record need to authorized after reverse
		 ID                     = g.formID  # ID Collateral Detail
		 ValuationPrice         = 0
		 ForceSale             = 0
		 PurchasePrice         = 0

		 CollateralDeINAU = MKT_COLLATERAL_DE_INAU.query.filter(MKT_COLLATERAL_DE_INAU.ID==ID).first()

		 if CollateralDeINAU:
			 Status = CollateralDeINAU.Status
			 
			 if Status == "RNAU":     # Check if record is reverse unauthorized
				 CollateralID         = CollateralDeINAU.CollateralID  
				 UpdateCollateralValue(CollateralID=CollateralID,CollateralDeINAU=CollateralDeINAU)

			 elif Status == "INAU":
				 CollateralDeLiveObj = MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.ID==ID).first()
			 
				 if CollateralDeLiveObj:
					 CollateralIDLive = CollateralDeLiveObj.CollateralID
					 CollateralID     = CollateralDeINAU.CollateralID
					 if CollateralIDLive != CollateralID: # check if change collateral ID or not

						 IDToUpdate = CollateralIDLive

						 UpdateCollateralValue(CollateralID=IDToUpdate,CollateralDeINAU=CollateralDeINAU)

		 return True
		
	@staticmethod
	def IsAcceptOverride():
		Override = False
		Msg = ''

		CMV = request.form['ValuationPrice'];
		FSV = request.form['ForceSaleValue'];

		if CMV and FSV:
			CMV = CMV.replace(',','').strip()
			FSV = FSV.replace(',','').strip()

			if float(CMV) < float(FSV):
				Override = True
				Msg = 'Force Sale Value is bigger than Current Market Value. Do you want to continue?'
				return Override,Msg
			else:
				return Override,Msg
		else:
			return Override,Msg
