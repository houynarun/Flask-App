from app.mktcore.wtfimports 	import *
from app.Customer.models 		import MKT_CUSTOMER
from app.Collateral.models 		import *
from app.Collateral.forms 		import *
from app.LoanApplication.models import *
from app.Currency.models 		import *
import time

import app.tools.mktaudit 			as mktaudit
import app.tools.user 			as mktuser
import app.tools.mktroute 		as mktroute

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def checkCollateralIsUsed(CollateralID):
	Message = ""
	if CollateralID:
		LoanColObj = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.Collateral == CollateralID).\
												filter(MKT_LOAN_COLLATERAL.ID.ilike('LA%'))
		if LoanColObj.first():
			for item in LoanColObj:
				LoanAppObj = MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID == item.ID).first()
				if LoanAppObj is None or LoanAppObj.AppStatus in ('4','5','6'):
					continue
				else:
					Message += " %s"%item.ID
	if Message:
		return True, msg_error+"Collateral is found in Loan Application:"+Message+". This collateral cannot be withdrawn."
	else:
		return False, ""

class FRM_COLLATERAL_EX(FRM_COLLATERAL):

	CustomerID 		= 	RemoteTextField(requiredlabel(getLanguage("Customer"), "*"), [validators.Required()])

	Currency 					= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
										query_factory=loadCurrency,
										get_label=u'ID',
										allow_blank=False,
										default=lambda:loadCurrency('USD'),
										validators=[validators.Required()],
									)

	ValuationPrice 				= 	TextField(requiredlabel('Current Market Value','*'),
										validators=[validators.required()])


	ForceSale 					= 	TextField(requiredlabel('Force Sale Value','*'),
										validators=[validators.required()])

	PurchasePrice 				= 	TextField(getLanguage("Purchased Price"))
	MinCollateralValue 			= 	TextField("Minimum Collateral Value")

	Description 				= 	TextAreaField(requiredlabel(getLanguage("Description"), "*"), [validators.Required(), validators.length(max=300)])



	@staticmethod
	def setVisible():		
		control_list = ['Currency']
		return control_list
	
	@staticmethod
	def formatMoney():
		return ("ForceSale","PurchasePrice","ValuationPrice","MinCollateralValue"), "Currency"
	@staticmethod
	def moneyField():

		return [  ["ForceSale","Currency"],
				  ["PurchasePrice","Currency"],
				  ["ValuationPrice","Currency"],
				  ["MinCollateralValue","Currency"]]

	@staticmethod
	def setDisable():

		return [("ForceSale"),
				("PurchasePrice"),
				("ValuationPrice"),
				('MinCollateralValue')]

	@staticmethod
	def hotField():

		hotfield 	 	=[]
		fielddisplay 	= 	"$('#Description').text(data.CustomerName)"
		varname			=	"CustomerList:$('#CustomerID').val()"
		fun 			=	["CustomerID", varname, fielddisplay, "/Morakot/CustomerNameBySelected", "change"]
		hotfield.append(fun)
		return hotfield

	@staticmethod
	def redirectAfterInsert():
		Curr 		     = request.form["Curr"]
		if Curr == '':
			return "/Morakot/CollateralDetailEx/New/Operation/?CollID="+request.form['ID']
		else:
			return None

	@staticmethod
	def reverseRec():
		ID = g.formID
		Message = ""
		CheckCol,Message = checkCollateralIsUsed(ID)
		if CheckCol:
			return CheckCol,Message
		else:
			#check if collateral have detail (not allow reverse)
			ColDeObj = MKT_COLLATERAL_DE.query.filter(MKT_COLLATERAL_DE.CollateralID == ID)
			if ColDeObj.first():
				Message+="Cannot reverse this collateral. Please remove its detail "
				for row in ColDeObj:
					Message+="%s " % row.ID
				Message+=" first."
			if Message:
				return True, msg_error+Message

			return True,""