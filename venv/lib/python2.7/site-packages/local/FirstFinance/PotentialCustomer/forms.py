from app.PotentialCustomer.forms 	import *
from app.User.models 				import *
from app.mktcore.wtfimports 	import *
import app.tools.user 			as mktuser
import app.tools.mktsetting 	as mktsetting

def custom_AssignDate(form,field):

		AssignDate = request.form['AssignDate']

		if AssignDate:
			# clear out processing errors
			field.errors[:] = []

			CheckFormatDate = mktdate.isDateISO(AssignDate)
			if not CheckFormatDate:
				raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

		else:
			# clear out processing errors
			field.errors[:] = []

class FRM_PO_CUSTOMER_EX(FRM_PO_CUSTOMER):

	FirstNameEn 	=	TextField(requiredlabel("First Name (English)","*"),[validators.Required()])
	LastNameEn 		=	TextField(requiredlabel("Last Name (English)","*"),[validators.Required()])
	FirstNameKh 	=	TextField("First Name (Local)")
	LastNameKh 		=	TextField("Last Name (Local)")

	Gender 			=	SelectField(requiredlabel("Gender","*"),
							 choices=[('Male', 'Male'),('Female', 'Female'),('Other','Other')],
							 default='Male',
							 coerce=str,
							 validators=[validators.Required()])

	ExistingClient	=	SelectField("Existing Client",
							 choices=[('N','No'),('Y', 'Yes')],
							 default='N',
							 coerce=str)

	Currency 		= 	QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
							query_factory=loadCurrency,
							get_label=u'ID',
							allow_blank=False,
							blank_text=u'--%s--' %getLanguage("None"),
							default=lambda:loadCurrency(mktsetting.getAccSetting().BaseCurrency),
							validators=[validators.Required()]
						)	

	LoanAmount		=	DecimalField(("Loan Amount"))
	PriceOfProperty	=	DecimalField("Price Of Property")


	ProductInterest =	QuerySelectField(requiredlabel('Loan Product','*'),
							query_factory=loadLoanProduct,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--None--',
							validators=[validators.Required()])

	DateOfContact	=	DateField("Date Of Contact",
							format='%Y-%m-%d',
							default=mktdate.getDateISO(),
							validators=[custom_DateOfContact])

	POStatus		=	QuerySelectField('Potential Status',
							query_factory=loadPOStatus,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=False)

	AssignBranch	=	QuerySelectField('Assigned To Branch',
							query_factory=loadBranch,
							get_label=lambda a: a.Description,
							allow_blank=False,
							default=lambda:loadBranch(mktuser.getCurrentBranch()))

	AssignTo		= 	QuerySelectField('Assign To',
							query_factory=loadUser,
							get_label=lambda a: a.DisplayName,
							allow_blank=True,
							default=lambda:loadUser(mktuser.getUser().ID),
							blank_text="--None--")
	AssignDate 		=	DateField('Assigned Date',
								format='%Y-%m-%d',
								validators=[custom_AssignDate])

	Note 			=	TextAreaField('Note')
	

	Mobile1 		=	TextField(requiredlabel(getLanguage("Mobile Phone 1"),'*'),
							 validators=[validators.Required()],
							 description="1-Current Address and Contact")
	Mobile2 		=	TextField(getLanguage("Mobile Phone 2"), description="1-Current Address and Contact")

	Province 		= 	QuerySelectField(getLanguage('Province'),query_factory=loadProvince, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Province--',
							 description="1-Current Address and Contact")

	District 		= 	QuerySelectField(getLanguage('District'),query_factory=loadDistrict, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose District--',
							 description="1-Current Address and Contact")
	Commune 		=	QuerySelectField(getLanguage('Commune'),query_factory=loadCommune, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Commune--',
							 description="1-Current Address and Contact")
	Village 		=	QuerySelectField(getLanguage('Village'),query_factory=loadVillage, 
							 get_label='Description',
							 allow_blank=True,
							 blank_text=u'--Choose Village--',
							 description="1-Current Address and Contact")
	HouseNo 		=	TextField("House No",
							description="1-Current Address and Contact",
							validators=[validators.Length(max=25)])
	Street 		   =	TextField('Street',
							description="1-Current Address and Contact",
							validators=[validators.Length(max=40)])

	Email 			= 	TextField(getLanguage("Email"), [validators.Optional(),validators.Email(message=u'Invalid email address.')],
							 description="1-Current Address and Contact")

	Block	 		=	SelectField("Block",
							 choices=[('N', 'No'),('Y', 'Yes')],
							 coerce=str,
							 description="3-Block")

	BlockReason 	=	TextAreaField("Block Reason", description="3-Block")

	def validate_Block(form,field):
		Block 		=	request.form['Block']

		if Block == 'Y':
			RejectedStatus  = 	mktsetting.getAppSetting('PO_CUS_REJECTED_STATUS')
			ID 				=	request.form['ID']
			NumAuth 		=	g.getNAuthorize
			if int(NumAuth)==0:
				POObj 			=	MKT_PO_CUSTOMER.query.filter(MKT_PO_CUSTOMER.ID==ID).first()										
			else:
				POObj 			=	MKT_PO_CUSTOMER_INAU.query.filter(MKT_PO_CUSTOMER_INAU.ID==ID).first()
			
			if POObj:
				if int(POObj.POStatus) != 5:
					raise ValidationError("Potential customer need to reject before blocking.")



	@staticmethod
	def setDisable():
		return [('AssignTo'),('POStatus')]

	@staticmethod
	def setVisible():
		return [('AssignDate'),('NextFollowDate')]
	@staticmethod
	def redirectAfterInsert():
		try:

			PotentialCustomer 	= request.form["ID"]
			POStatus 			= request.form["POStatus"]
			AssignTo 			= request.form["AssignTo"]
			Block 				= request.form["Block"]

			POCustomerObj 		= MKT_PO_CUSTOMER.query.get(PotentialCustomer)
			RejectedObj   		= MKT_REJECTED.query.filter(MKT_REJECTED.CustomerID==PotentialCustomer).first()
			
			Rejected 	  		= RejectedObj.Rejected if RejectedObj else "N"
			
			RejectedStatus 		= mktsetting.getAppSetting("PO_CUS_REJECTED_STATUS")
			NewStatus 	 		= MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.Closed=='No',
																	MKT_PO_CUSTOMER_STATUS.Deal=='No',
																	MKT_PO_CUSTOMER_STATUS.IsNew=='Yes').first()
			NewStatus 			= NewStatus.ID if NewStatus else ""
			AssignStatus 		= mktsetting.getAppSetting("PO_CUS_ASSIGN_STATUS")
			Data 				= {}
			if POCustomerObj:
				#update Branch based on AssignBranch
				AssignBranch	= POCustomerObj.AssignBranch
				Branch 			= POCustomerObj.Branch
				if AssignBranch != Branch:
					Data.update({'Branch': AssignBranch})

				if Rejected == 'N' and Block == 'N':
					if POStatus == RejectedStatus:
						Data.update({'POStatus': NewStatus,
									 'NextFollowDate': '',
									 'AssignTo':'',
									 'AssignDate':''})

					if POStatus == NewStatus and AssignTo != '__None':
						Data.update({'POStatus': AssignStatus,'AssignDate': mktdate.getDateISO()})
				else:
					Data.update({'POStatus': RejectedStatus})


				if Data:
					Curr = 	int(POCustomerObj.Curr)+1
					Data.update({'Curr' 	:	str(Curr),
							'Inputter' 		:	mktuser.getUser().ID,
							'Createdon' 	: 	mktdate.getDateTimeNow(),
							'Authorizer' 	: 	mktuser.getUser().ID,
							'Authorizeon'	: 	mktdate.getDateTimeNow()})

					mktaudit.moveAUTHtoHIST(MKT_PO_CUSTOMER,MKT_PO_CUSTOMER_HIST,PotentialCustomer)
					mktdb.updateRecord(MKT_PO_CUSTOMER, [MKT_PO_CUSTOMER.ID == PotentialCustomer], Data)
					db.session.commit()	
			return None

		except Exception, e:
			raise
			flash(msg_error+'%s'%e)
			db.session.rollback()
			return False