from app.mktcore.wtfimports 			import *
from app.mktcore.imports 				import *
from wtforms.validators 				import *
from .models 						import *
from app.Collateral.models 			import *
from app.LoanContract.models 		import *
from app.LoanApplication.models 	import *
from app.PD.models 					import *
from app.Customer.models 			import *


import app.tools.mktcustomer 				as mktcustomer
import app.tools.mktloan 					as mktloan
import app.tools.user 						as mktuser
import app.tools.mktdb 			as mktdb
from flask                             import g, flash,Markup


def getRecord():
	try:
		result = MKT_CUSTOMER_MAPPING.query.get(g.formID)
		if not result:
			result = MKT_CUSTOMER_MAPPING_INAU.query.get(g.formID)
			if result:
				return [result.DrawDownID]

			else:
				return []
		else:
			return [result.DrawDownID]

	except:
		raise


@app.route("/Morakot/LoanContractID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def LoanContractID():
	return mktloan.getSearchLoanContract(FilterBranch=True)

@app.route("/Morakot/MainCustomerID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def MainCustomerID():
	return mktcustomer.getSearchCustomer()

@app.route("/Morakot/DrawDownByCustomerID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getDrawDownAccount():
	try:
		Branch 		= mktuser.getCurrentBranch()
		CustomerID 	= request.args.get('MainCustomerID')
		dic 		= {}
		query 		= MKT_ACCOUNT.query.\
					  filter(MKT_ACCOUNT.CustomerList == CustomerID).\
					  filter(MKT_ACCOUNT.AccStatus == "O").\
					  filter(MKT_ACCOUNT.AccCategory=='38982').\
					  filter(MKT_ACCOUNT.Branch == Branch).\
					  all()
		if query:
			for row in query:
				# dic[row.ID] = row.ID + "  - " + row.Currency+ " " + row.AccName
				dic[row.ID] = row.ID

		return jsonify(results=dic)
	except:
		raise

@app.route('/Morakot/getLoanApplicationByLC', methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanAppIDByLC():
	LoanContractID  = request.args.get('LoanContractID')
	LoanAppID 		= ''
	LoanContractObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID==LoanContractID).first()
	if LoanContractObj:
		LoanAppID = LoanContractObj.LoanApplicationID

	return jsonify(LoanAppID=LoanAppID)



def loadCollateral():
	Branch 		= mktuser.getCurrentBranch()
	return MKT_COLLATERAL.query.filter(MKT_COLLATERAL.Branch==Branch)

def loadSpouse():
	Branch 		= mktuser.getCurrentBranch()

	CustomerObj = MKT_CUSTOMER.query.filter(MKT_CUSTOMER.Branch==Branch)

	return CustomerObj

def loadDDA():
	try:
		AccountObj 	= MKT_ACCOUNT.query.filter_by(ID='0').filter(MKT_ACCOUNT.AccStatus == 'O').all()
		Branch 		= mktuser.getCurrentBranch()
		if request.method == 'POST':
			CustomerID = request.form["MainCustomerID"]

			if CustomerID:
				AccountObj 	= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList == CustomerID).\
												filter(MKT_ACCOUNT.AccStatus == 'O')
		else:
			if len(getRecord()) > 0:
				AccountObj 	= MKT_ACCOUNT.query.filter_by(ID=getRecord()[0]).filter(MKT_ACCOUNT.AccStatus == 'O').all()

		return AccountObj
	except:
		raise

class FRM_CUSTOMER_MAPPING(exform):
	LoanContractID 	= 	RemoteTextField(requiredlabel("Loan Contract ID","*"),[validators.Required()])

	LoanApplicationID 		= 	TextField("Loan Application ID")

	MainCustomerID 	= 	RemoteTextField(requiredlabel("Main Customer","*"), [validators.Required()])

	# Spouse 
	SpouseID 		= 	QuerySelectField("Spouse ID",
							query_factory=loadSpouse,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " + a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
						)
	# DD
	DrawDownID 			= 	QuerySelectField(requiredlabel("DrawDown Account","*"),
							query_factory=loadDDA,
							get_label=lambda a: a.ID + " - " + a.AccName + " - " + a.Currency,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							validators=[validators.Required()]
						)

	CollateralID 	= 	QuerySelectField(getLanguage("Collateral"),
							query_factory=loadCollateral,
							get_label=lambda a: a.ID + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"))

	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay 	= "DrawDownID"
		varname 		= "MainCustomerID:$('#MainCustomerID').val()"
		fun 			= ["MainCustomerID", varname, fielddisplay, "/Morakot/DrawDownByCustomerID", "change"]
		
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def hotField():
		hotfield=[]

		fielddisplay 	= 	"$('#LoanApplicationID').val(data.LoanAppID);"

		varname 		= "LoanContractID:$('#LoanContractID').val()"
		fun 			= ["LoanContractID", varname, fielddisplay, "/Morakot/getLoanApplicationByLC", "change"]
		
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setDisable():
		return [("LoanApplicationID")]


						
	def validate_MainCustomerID(form, field):
		try:
			MainCustomerID = request.form['MainCustomerID']
			DDA    		= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==MainCustomerID).first()
			Account = DDA.ID if DDA else ""
		
			if Account == "__None" or Account == "":

					raise ValidationError("This Customer Don't have Account.")

		except:
			raise

	def validate_DrawDownID(form, field):
		try:
			LCID 		= request.form.get('LoanContractID')
			DrawDownID 	= request.form.get('DrawDownID')

			LCObj 			= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID==LCID).first()
			DrawDownObj 	= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.ID==DrawDownID).filter(MKT_ACCOUNT.AccCategory=='38982').first() if DrawDownID else ''

			if LCObj and DrawDownObj:
				Currency = LCObj.Currency
				AccCurrency = DrawDownObj.Currency

				if Currency != AccCurrency:
					raise ValidationError('Loan Contract Currency and Draw Down Account does not have the same Currency')

		except:
			raise

	def validate_SpouseID(form, field):
		try:
			CustomerID 	= request.form.get('MainCustomerID')
			SpouseID 	= request.form.get('SpouseID')

			if CustomerID == SpouseID:
				raise ValidationError('Main Customer ID should not the same as Spouse ID')

		except Exception as e:
			raise e

	@staticmethod
	def beforeInsert():
		try:
			AuthLevel = g.getNAuthorize
			if AuthLevel == 0:
				LoanContractID  = request.form['LoanContractID']
				MainCustomerID  = request.form['MainCustomerID']
				CollateralID  	= request.form['CollateralID']
				SpouseID 		= request.form['SpouseID']
				DrawDownID 		= request.form['DrawDownID']

				LoanContract = MKT_LOAN_CONTRACT.query.get(LoanContractID)
				AccountID = LoanContract.Account
				Currency  = LoanContract.Currency
				LoanAppID = LoanContract.LoanApplicationID

				# DDA    		= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==MainCustomerID).\
				# 								filter(MKT_ACCOUNT.Currency==Currency).\
				# 								filter(MKT_ACCOUNT.AccCategory=='38982').first()
				# Account = DDA.ID if DDA else ""
				Account = DrawDownID
				LoanApp = MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID==LoanAppID).first()
				PD = MKT_PAST_DUE.query.filter(MKT_PAST_DUE.LoanID==LoanContractID).first()

				# Update Loan Contract
				if LoanContract:
					dataLC = {}

					if LoanContract.ContractCustomerID != MainCustomerID :
						dataLC.update({'ContractCustomerID':MainCustomerID})

						if AccountID != '' and AccountID != DrawDownID:
							dataLC.update({'Account':DrawDownID})
						if dataLC:
							try:
								mktdb.updateRecord(
									MKT_LOAN_CONTRACT,
									[MKT_LOAN_CONTRACT.ID==LoanContractID],
									dataLC
									)
							except:
								raise 

				# Update Loan Application
				if LoanApp:
					DataUpdate 	  = {}

					if LoanApp.LNCustomerID != MainCustomerID:
						DataUpdate.update({'LNCustomerID':MainCustomerID})

					if LoanApp.SpouseID != SpouseID:
						DataUpdate.update({'SpouseID':SpouseID})
					if DataUpdate:
						try:
							mktdb.updateRecord(
								MKT_LOAN_APPLICATION,
								[MKT_LOAN_APPLICATION.ID==LoanAppID],DataUpdate)
						except Exception as e:
							raise e
						else:
							pass

				# Update PD
				if PD:
					if PD.Customer != MainCustomerID:
						try:
							mktdb.updateRecord(
								MKT_PAST_DUE,
								[MKT_PAST_DUE.LoanID==LoanContractID],
								{'Customer':MainCustomerID})
						except Exception as e:
							raise e
						else:
							pass

				# Update Collateral
				if CollateralID != "":
					
					LoanCollateral = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanAppID)
					if LoanCollateral:
						InsertRecord	= {}
						try:
							mktdb.deleteRecord(MKT_LOAN_COLLATERAL,[MKT_LOAN_COLLATERAL.ID==LoanAppID])
							InsertRecord.update({
								'ID':LoanAppID,
								'Collateral':CollateralID
								})
							mktdb.insertTable(MKT_LOAN_COLLATERAL,InsertRecord)
							# db.session.commit()
						except Exception as e:
							raise e

			return True
		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False


	@staticmethod
	def beforeAuthorize():
		try:
			ID = g.formID

			CustomerMapping = MKT_CUSTOMER_MAPPING_INAU.query.get(ID)
			if CustomerMapping:
				LoanContractID = CustomerMapping.LoanContractID
				MainCustomerID = CustomerMapping.MainCustomerID
				CollateralID  	= CustomerMapping.CollateralID

				SpouseID 		= CustomerMapping.SpouseID
				DrawDownID 		= CustomerMapping.DrawDownID

				LoanContract = MKT_LOAN_CONTRACT.query.get(LoanContractID)
				AccountID = LoanContract.Account
				Currency  = LoanContract.Currency
				LoanAppID = LoanContract.LoanApplicationID

				# DDA    		= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList==MainCustomerID).\
				# 								filter(MKT_ACCOUNT.Currency==Currency).\
				# 								filter(MKT_ACCOUNT.AccCategory=='38982').first()
				# Account = DDA.ID if DDA else ""
				Account = DrawDownID
				LoanApp = MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID==LoanAppID).first()
				PD = MKT_PAST_DUE.query.filter(MKT_PAST_DUE.LoanID==LoanContractID).first()

				if LoanContract:
					dataLC = {}

					if LoanContract.ContractCustomerID != MainCustomerID :
						dataLC.update({'ContractCustomerID':MainCustomerID})

						if AccountID != '' and AccountID != DrawDownID:
							dataLC.update({'Account':DrawDownID})
						if dataLC:
							try:
								mktdb.updateRecord(
									MKT_LOAN_CONTRACT,
									[MKT_LOAN_CONTRACT.ID==LoanContractID],
									dataLC
									)
							except:
								raise 

				# Update Loan Application
				if LoanApp:
					DataUpdate 	  = {}

					if LoanApp.LNCustomerID != MainCustomerID:
						DataUpdate.update({'LNCustomerID':MainCustomerID})

					if LoanApp.SpouseID != SpouseID:
						DataUpdate.update({'SpouseID':SpouseID})
					if DataUpdate:
						try:
							print "DataUpdate: ",DataUpdate
							print mktdb.updateRecord(
								MKT_LOAN_APPLICATION,
								[MKT_LOAN_APPLICATION.ID==LoanAppID],DataUpdate)
						except Exception as e:
							raise e
						else:
							pass

				# Update PD
				if PD:
					if PD.Customer != MainCustomerID:
						try:
							mktdb.updateRecord(
								MKT_PAST_DUE,
								[MKT_PAST_DUE.LoanID==LoanContractID],
								{'Customer':MainCustomerID})
						except Exception as e:
							raise e
						else:
							pass

				# Update Collateral
				if CollateralID != "":
					
					LoanCollateral = MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanAppID)
					if LoanCollateral:
						InsertRecord	= {}
						try:
							mktdb.deleteRecord(MKT_LOAN_COLLATERAL,[MKT_LOAN_COLLATERAL.ID==LoanAppID])
							InsertRecord.update({
								'ID':LoanAppID,
								'Collateral':CollateralID
								})
							mktdb.insertTable(MKT_LOAN_COLLATERAL,InsertRecord)
							# db.session.commit()
						except Exception as e:
							raise e

			return True
		except Exception as e:
			flash(msg_error+'%s'%e)
			db.session.rollback()
			db.session.close()
			return False