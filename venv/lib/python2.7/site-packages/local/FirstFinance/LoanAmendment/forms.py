from app.LoanAmendment.forms 							import *
from app.Account.models 								import *
from app.LoanAmendment.models 							import *
from app.LoanContract.models 							import MKT_LOAN_CONTRACT
from app.LoanApplication.models 						import MKT_LOAN_APPLICATION
from app.ScheduleAddon.models 							import *

import app.tools.user 									as mktuser
import app.tools.mktloan 								as mktloan

import local.FirstFinance.tools.mktcustomscript 		as mktcustom
import local.FirstFinance.tools.mktpostaccounting 		as mktpostaccounting
import local.FirstFinance.tools.mktloan 				as mktloan
import app.tools.user 									as mktuser
import local.FirstFinance.tools.mktaddon 				as mktaddon
import local.FirstFinance.tools.mktloanamendment 		as localmktamt

@app.route("/Morakot/SetAmendmentMode", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def setAmendmentMode():
	Operation = request.args.get("Operation")
	Bool = True
	if Operation == "AMT":
		Bool = True
	else:
		Bool = False

	return jsonify(Bool=Bool)


def setPostCollectInsurance(**kwargs):

	BankDate 		= 	mktdate.getBankDate()
	PostData 		=	kwargs.get("PostData")
	LoanObj 		=	kwargs.get("LoanObj")
	Reverse 		=	kwargs.get("Reverse",False)

	ParamInsuranceID 	=	'100'
	ParamObj 			=	MKT_SCHEDULE_ADDON_PARAM.query.get(ParamInsuranceID)

	if PostData:
		if Reverse == True:
			#post reverse
			CrCategory  		= 	"38982"
			CrAccount 			= 	LoanObj.Account
			CrMode 				= 	"Indirect"
			Transaction 		= 	"25" #Collect Insurace

			if ParamObj:
				DrCategory		=	ParamObj.Category
				DrAccount 		=	""
				DrMode			=	"Direct"
				# Transaction 	=	ParamObj.CollectionTran
		else:
			#post normal		
			DrCategory  = 	"38982" #DrawDown
			DrAccount 	= 	LoanObj.Account
			DrMode 		= 	"Indirect"

			CrCategory  		= 	"28974" #Insurance Recievable
			CrAccount 			= 	""
			CrMode 				= 	"Direct"
			Transaction 		= 	"62" #Collect Insurace

			if ParamObj:
				CrCategory		=	ParamObj.Category
				CrAccount 		=	""
				CrMode			=	"Direct"
				Transaction 	=	ParamObj.CollectionTran

		PostData.update({"Transaction"		:	Transaction,#Other Transacion
						 "Module"			:	"LC",
						 "DrAccount"		:	DrAccount,
						 "CrAccount"		:	CrAccount, #take account of vault in brach
						 "DrCategory"		:	DrCategory,#Prepaid Insurance
						 "CrCategory"		:	CrCategory,#Cash in valt
						 "DrMode"			:	DrMode,
						 "CrMode"			:	CrMode})

		mktpostaccounting.setPostAccounting(**PostData)


class FRM_LOAN_AMENDMENT_EX(FRM_LOAN_AMENDMENT):
	LoanID 			= 	RemoteTextField(requiredlabel('Loan Contract ID', "*"), [validators.Required()])
	Customer 		= 	TextField(getLanguage("Customer Name"))
	Operation 		= 	SelectField(requiredlabel(getLanguage('Operation'), '*'),
							choices=[('AMT', getLanguage('Amendment')),
									 ('TMN', getLanguage('Termination'))],
							coerce=str,
							validators=[validators.Required()]
						)
	AddDeduct 		= QuerySelectField(requiredlabel(getLanguage('Mode'), "*"),
						query_factory=loadAddDeduct,
						get_label=u'Description'
						)
	AmendDate 		= 	DateField(requiredlabel(getLanguage("Amend Date"), "*"), [validators.Required()], default=loadBankDate)
	Currency 		=	TextField(getLanguage("Currency"), default="KHR")
	Amount 			=	TextField(requiredlabel(getLanguage("Principal Amount"), "*"), default=0)
	PenaltyAmount	=	TextField("Penalty Terminate", default="0")
	WaiveInterest	=	TextField("Waive Current Interest", default="0")
	InterestOld 	=	TextField(getLanguage("Old Interest"), [validators.Required()], default=0)
	Interest 		=	TextField(requiredlabel(getLanguage("New Interest"), "*"), [validators.Required()], default=0)
	LoanType 		= 	SelectField(getLanguage('Loan Type'),
							choices=[('N', getLanguage('Normal')),
									 ('R', getLanguage('Restructured'))],
							coerce=str,
							default='N')
	Restructure 	=  	SelectField('Restructure',
							choices=[('Y', getLanguage('Yes')),
									 ('N', getLanguage('No'))],
							coerce=str,
							default='N')
	#Capitalize Interest/Penalty 2018-04-11 Mony
	CapitalizeOption 	= 	SelectField("Capitalize Option",
							choices=[('N', "No"),
									 ('Y', "Yes")],
							coerce=str,
							default='N')
	CapitalizeAmount	=	TextField("Capitalize Int. Amount", default="0")
	#end
	LastPaidAmount 	=	TextField("Last Paid Amount", default=0)
	InstallAmount 	=	TextField("Installment Amount", default=0)
	AmendmentStat 	= 	TextField(requiredlabel("Amendment Stat",'*'),default='N')
	KeepPrevSchedule	=	SelectField('Keep Previous Schedule',
							choices=[('Y', getLanguage('Yes')),
									 ('N', getLanguage('No'))],
							coerce=str,
							default='Y')
	TerminatedBy 	= SelectField("Terminated By",
						choices=[('','--Choose Terminated By--'),
								 ('1', '1. Client Paid Off'), 
								 ('2', '2. Client Rejected'), 
								 ('3', '3. Company Rejected'),
								 ('4', '4. Company Technical Issue')],
						coerce=str,
					)
	Reason 			=	TextAreaField("Reason")

	QuickLinkIFrame =	MKTIframe("QuickLink",
									dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, 
									description='2-Quick Link')

	QuickLinkIFrame =	MKTIframe("QuickLink",
									dicIframe={'width':'100%','height':'1000px','frameborder':'0'}, 
									description='2-Quick Link')

	Iframe				=	MKTIframe("View Repayment",dicIframe={'width':'100%','height':'1000','frameborder':'0'}, description='3-Reapyment Schedule')
	# Tab Review
	Reviewcurr 			=	DisabledTextField("Curr.No",description='4-Review', default='0')
	Reviewer_1 			=	DisabledTextField("Reviewer 1",description='4-Review')
	Reviewedon_1 		=	DisabledTextField("Review DateTime",description='4-Review')
	Reviewer_2 			=	DisabledTextField("Reviewer 2",description='4-Review')
	Reviewedon_2 		=	DisabledTextField("Review DateTime",description='4-Review')


	def validate_TerminatedBy(form, field):

		Operation 		=	request.form['Operation']
		TerminatedBy 	=	request.form['TerminatedBy']

		if Operation == 'TMN':
			if not TerminatedBy:
				raise ValidationError("This field is required.")
		else:
			if TerminatedBy:
				raise ValidationError("This field must be blank.")

	def validate_Amount(form,field):
		LoanID 			= request.form['LoanID']
		kwargs 			= {}
		Insurance 		= mktaddon.getInsurance(LoanID=LoanID)
		InsuranceAmount = Insurance.get("TotalPay")
		kwargs.update({"Additional": [{'Title': "Insurance", "Value": InsuranceAmount}]})

		# validate new add principal must not exceed total approved amount of all loan application
		Amount 			= request.form['Amount']
		Currency 		= request.form['Currency']
		Mode 			= request.form['AddDeduct']
		Operation 		= request.form['Operation']
		AmendmentDate 	= request.form['AmendDate']

		try:
			Amount = float(str(Amount).replace(',',''))
		except:
			raise ValidationError("This field must be in number.")

		#---------------------------
		#Note => close for migration only will open back
		#---------------------------

		if Amount > 0:
			if Operation == 'AMT':
				if Mode == "2":# Mode = Add
					validationApprovalAmount(LoanID,Amount,Currency)
				if Mode == "1":
					validationDeductAmount(LoanID,AmendmentDate,Amount,Currency)

		#end

		parents = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).validate_Amount(form,field,**kwargs)


	#Capitalize Interest/Penalty 2018-04-11 Mony
	def validate_CapitalizeAmount(form,field):
		LoanID = request.form["LoanID"]
		AmendDate = request.form["AmendDate"]
		CapitalizeOption = request.form["CapitalizeOption"]

		parents = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).validate_CapitalizeAmount(form,field)

		if CapitalizeOption == "Y":
			#allow capitalize once in 6 months
			Period = isAvialiableCapitalizePeriod(LoanID=LoanID,AmendDate=AmendDate)
			if Period[0] == False:
				raise ValidationError(Period[1])
			#allow capitalize for LC that restructure maximum 2 times. 
			Restructure = isAvialiableRestructureTime(LoanID=LoanID)
			if Restructure[0] == False:
				raise ValidationError(Restructure[1])		
	#end

	@staticmethod
	def setVisible():
		base = super(FRM_LOAN_AMENDMENT_EX, FRM_LOAN_AMENDMENT_EX).setVisible()
		controls_list 	= [("VB")]
		controls_list.extend(base) if base else controls_list
		return controls_list

	@staticmethod
	def setDisable():
		base = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).setDisable()
		controls_list = [('AddDeduct')]
		controls_list.extend(base)
		return controls_list

	@staticmethod
	def urlParam():
		ID = g.get('formID') if 'formID' in g else ''
		LoanID = ''
		if ID and ID != 'Operation':
			if 'LN' in ID or 'LT' in ID:
				LoanAmendmentObjINAU = MKT_LOAN_AMENDMENT_INAU.query.get(ID)
				# print "hello"
				if LoanAmendmentObjINAU:
					LoanID = LoanAmendmentObjINAU.LoanID

		dicParam = []
		dicParam.append({"IframeName":"QuickLinkIFrame", "iframeUrl":"/Morakot/QuickLink/",'Resource' : 'Status'})
		if LoanID !='':
			# print 'LoanID: ',LoanID
			dicParam.append({"IframeName":"Iframe", "iframeUrl":"/Morakot/viewRepaymentSchedule/"+LoanID, 'Resource' : 'Status', 'Optional':"Navbar=False"})
		return dicParam

	@staticmethod
	def hotField():
		base = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).hotField()

		hotfield 	= []

		fielddisplay = "$('#AddDeduct').select2('readonly', data.Bool)"
		varname 	= "Operation:$('#Operation').val()"
		fun 		= ["Operation",varname,fielddisplay,"/Morakot/SetAmendmentMode","change"]
		hotfield.append(fun)

		hotfield.extend(base)
		return hotfield

	@staticmethod
	def beforeAuthorize():
		try:
			TerminatedOpts 		= ["4"] # this option will not close loan application
			ID 					= g.formID
			Status 				= ""
			LoanAmendmentObj 	= MKT_LOAN_AMENDMENT_INAU.query.get(ID)
			LoanObj 			= ""
			LoanAppObj 			= ""
			if LoanAmendmentObj:
				Status 			= LoanAmendmentObj.Status
				LcID 			= LoanAmendmentObj.LoanID
				Op 				= LoanAmendmentObj.Operation
				TerminatedBy	= LoanAmendmentObj.TerminatedBy
				LoanAppID 		= LoanAmendmentObj.LoanAppID
				LoanContractObj = MKT_LOAN_CONTRACT.query.get(LcID)

				if Op.upper() == "TMN":
					""" 1. When terminate loan contract, it will also close loan application
						2. In case there are top up loan applications, it will also close those loan application as well
					"""
					if TerminatedBy not in TerminatedOpts:
						mktloan.setClosedLoanApplication(LcID)
				else:
					"""Loan Contract Approved amount will be topped up when there is loan applicaton chosen"""
					localmktamt.updateApprovedAmount(ID=ID,EOD=0,Resource='INAU')

				#---Insurance reverse in case remain insurance negative---#
				"""
				This block used for transaction in case remain insurance negative
					1. Post reverese accounting from its nature with remain insurance amount
							Dr 		Insurance Recievable 		xxx
								Cr 		DrawDown					xxx

					2. Withdraw remain insurance from ActualCollection in SCHCEDULE_ADDON
				"""
				Operation 			=	LoanAmendmentObj.Operation
				Insurance 			=	mktaddon.getInsurance(LoanID=LoanAmendmentObj.LoanID)
				InsuranceAmount 	= 	Insurance.get("TotalPay")
				if Operation.upper() == "TMN":
					if InsuranceAmount < 0:
						NewInsuranceAmount = abs(InsuranceAmount)
						Reverse 		= True
						PostData 		= {	"Branch"		: 	LoanAmendmentObj.Branch,
											"Reference"		: 	LoanAmendmentObj.LoanID,
											"Amount"		:	Decimal(NewInsuranceAmount),
											"Currency"		:	LoanAmendmentObj.Currency,
											"UserReference" : 	LoanAmendmentObj.ID,
											"Note"			:	"return insurance to customer.",
											"TranDate" 		:	LoanAmendmentObj.AmendDate,
											"Inputter" 		:	mktuser.getUser().ID}

						setPostCollectInsurance(PostData=PostData,LoanObj=LoanContractObj,Reverse=Reverse)
						#move insurance to Hist
						Condition={"LoanID": LoanAmendmentObj.LoanID}
						mktaddon.moveAddonToHist(**Condition)

				#---End---#

				parents = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).beforeAuthorize()

				#collect insurance
				if parents:
					#post accounting for insurance
					if Operation.upper() == "TMN":
						if InsuranceAmount >= 0:
							Reverse = False
							PostData 			= {	"Branch"		: 	LoanAmendmentObj.Branch,
													"Reference"		: 	LoanAmendmentObj.LoanID,
													"Amount"		:	Decimal(InsuranceAmount),
													"Currency"		:	LoanAmendmentObj.Currency,
													"UserReference" : 	LoanAmendmentObj.ID,
													"Note"			:	"Collect remain insurance.",
													"TranDate" 		:	LoanAmendmentObj.AmendDate,
													"Inputter" 		:	mktuser.getUser().ID}
							
							setPostCollectInsurance(PostData=PostData,LoanObj=LoanContractObj,Reverse=Reverse)
							#move insurance to Hist
							Condition={"LoanID": LoanAmendmentObj.LoanID}
							mktaddon.moveAddonToHist(**Condition)
				else:
					return False
				return True
			else:
				return False
		except Exception as e:
			print 'Error in loan amendment extend %s'%e
			db.session.rollback()
			db.session.close()
			raise Exception('Error: %s'%e)

	# @staticmethod
	# def redirectAfterInsert():
	# 	base = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).redirectAfterInsert()
	# 	return base

	@staticmethod
	def IsAcceptOverride():
		LoanID 	= request.form['LoanID']
		kwargs 	= {}

		kwargs.update(AcceptOverrideProcess(LoanID))
		parents = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).IsAcceptOverride(**kwargs)

		return parents

	@staticmethod
	def IsAcceptOverrideINAU():
		AmtID 	= g.formID
		AmtObj 	= MKT_LOAN_AMENDMENT_INAU.query.get(AmtID)
		kwargs 	= {}
		if AmtObj:
			LoanID 	= AmtObj.LoanID

			kwargs.update(AcceptOverrideProcess(LoanID))
			parents = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).IsAcceptOverrideINAU(**kwargs)

			return parents


def AcceptOverrideProcess(LoanID):
	Dict = {}
	Insurance 		=	mktaddon.getInsurance(LoanID=LoanID)
	InsuranceAmount = 	Insurance.get("TotalPay")

	Dict.update({"Additional": [{'Title': "Insurance", "Value": InsuranceAmount}]})
	return Dict

def validationApprovalAmount(LoanID,Amount,Currency):
	ContractObj = MKT_LOAN_CONTRACT.query.get(LoanID)
	ApprovedAmount = ContractObj.ApprovedAmount if ContractObj else 0
	Disbursed 	= ContractObj.Disbursed if ContractObj else 0

	if float(Disbursed) + float(Amount) > ApprovedAmount:
		ApprovedAmount 	= mktmoney.toMoney(float(ApprovedAmount),mktmoney.getCurrencyObj(Currency))
		Disbursed 		= mktmoney.toMoney(float(Disbursed),mktmoney.getCurrencyObj(Currency))
		raise ValidationError("Added principal amount must not exceed Approved Amount: %s %s. Current Disbursed Amount is %s %s"
							%(Currency, ApprovedAmount, Currency, Disbursed))


def validationDeductAmount(LoanID,AmendmentDate,Amount,Currency):
	LoanBalance = mktcustom.getLoanBalance(LoanID=LoanID,AmendmentDate=AmendmentDate)
	if float(Amount) >= float(LoanBalance):
		LoanBalance = mktmoney.toMoney(float(LoanBalance),mktmoney.getCurrencyObj(Currency))
		raise ValidationError("Deducted principal amount must be less than %s %s" % (Currency,LoanBalance))

#Capitalize Interest/Penalty 2018-04-11 Mony
def isAvialiableCapitalizePeriod(**kwargs):
	LoanID = kwargs.get("LoanID")
	AmendDate = kwargs.get("AmendDate")
	Result = True,""

	#allow capitalize once in 6 months
	CAPITALIZE_NUM_DAY_PERIOD = mktsetting.getAppSetting('CAPITALIZE_NUM_DAY_PERIOD')
	if not CAPITALIZE_NUM_DAY_PERIOD:
		CAPITALIZE_NUM_DAY_PERIOD = 180

	CAPITALIZE_NUM_DAY_PERIOD = int(CAPITALIZE_NUM_DAY_PERIOD)
	PrevDate = mktdate.getPreviousDay(AmendDate,CAPITALIZE_NUM_DAY_PERIOD)
	CapitalizeObj = MKT_LOAN_AMENDMENT.query.\
								filter(MKT_LOAN_AMENDMENT.LoanID==LoanID).\
								filter(or_(MKT_LOAN_AMENDMENT.CapitalizeOption=="Y")).\
								filter(MKT_LOAN_AMENDMENT.AmendDate > str(PrevDate)).\
								order_by(MKT_LOAN_AMENDMENT.AmendDate.desc())

	if CapitalizeObj.first():
		CapitalizeObj = CapitalizeObj.first()
		Result = False, "Your last capitalize is on %s. You need to wait %s days from %s to able to do capitalize again." % (CapitalizeObj.AmendDate,CAPITALIZE_NUM_DAY_PERIOD,CapitalizeObj.AmendDate)

	return Result

def isAvialiableRestructureTime(**kwargs):
	LoanID = kwargs.get("LoanID")
	Result = True,""

	#allow capitalize max 2 time for restructure loan
	CAPITALIZE_MAX_RESTRUCTURE = mktsetting.getAppSetting('CAPITALIZE_MAX_RESTRUCTURE')
	if not CAPITALIZE_MAX_RESTRUCTURE:
		CAPITALIZE_MAX_RESTRUCTURE = 2
		
	CAPITALIZE_MAX_RESTRUCTURE = int(CAPITALIZE_MAX_RESTRUCTURE)
	CapitalizeObj = MKT_LOAN_AMENDMENT.query.\
								filter(MKT_LOAN_AMENDMENT.LoanID==LoanID).\
								filter(MKT_LOAN_AMENDMENT.LoanType == "R").\
								filter(MKT_LOAN_AMENDMENT.CapitalizeOption=="Y")

	Count = CapitalizeObj.count()
	if Count > CAPITALIZE_MAX_RESTRUCTURE:	
		Result = False, "You can capitalize maximum 2 times only."

	return Result
#end
