from app.LoanAmendment.forms 							import *
from app.Account.models 								import *
from app.LoanAmendment.models 							import *
from app.LoanContract.models 							import MKT_LOAN_CONTRACT
from app.LoanApplication.models 						import MKT_LOAN_APPLICATION
from app.Charge.models 									import *
from app.ScheduleAddon.models 							import *
from .forms 											import *

import local.FirstFinance.tools.mktcustomscript 		as mktcustom
import local.FirstFinance.tools.mktpostaccounting 		as mktpostaccounting
import app.tools.user 									as mktuser
import app.tools.mktsetting 							as mktsetting
import app.LoanContract.forms 							as loancontractform
import app.tools.mktcharge 								as mktcharge
import local.FirstFinance.tools.mktcharge 				as ffmktcharg
import app.tools.mkttool 								as mkttool
import app.tools.mktdate 								as mktdate
def getRecord():
	try:
		Result 		= []
		ID = g.formID
		AmendObj 	= MKT_LOAN_AMENDMENT.query.get(ID)

		if not AmendObj:
			AmendObj = MKT_LOAN_AMENDMENT_INAU.query.get(ID)

		if AmendObj:
			Result 	= [AmendObj.LoanAppID]

		return Result
	except:
		raise

def loadLoanApp(LoanID="",Customer = "",Currency="",ID=""):
	Branch 			= mktuser.getCurrentBranch()
	APPROVED_STATUS = ["3"] # Loan Application Approve status
	TOPUP_TYPE 		= ["2"] # Loan Application type of loan

	LoanAppObj 	= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.Branch == Branch,
													MKT_LOAN_APPLICATION.AppStatus.in_(APPROVED_STATUS),\
													MKT_LOAN_APPLICATION.TypeOfLoan.in_(TOPUP_TYPE))
	if LoanID:
		LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		LoanProduct = LoanObj.LoanProduct if LoanObj else ""

		LoanAppObj 	= LoanAppObj.filter(MKT_LOAN_APPLICATION.Currency == Currency,\
										MKT_LOAN_APPLICATION.LNCustomerID == Customer,\
										MKT_LOAN_APPLICATION.LoanProduct == LoanProduct)\
								.filter(~MKT_LOAN_APPLICATION.ID.in_(db.session.query(MKT_LOAN_AMENDMENT.LoanAppID)\
																				.filter(MKT_LOAN_AMENDMENT.ID != ID,\
																						MKT_LOAN_AMENDMENT.LoanAppID != None)))\
								.filter(~MKT_LOAN_APPLICATION.ID.in_(db.session.query(MKT_LOAN_AMENDMENT_INAU.LoanAppID)\
																				.filter(MKT_LOAN_AMENDMENT_INAU.ID != ID,\
																						MKT_LOAN_AMENDMENT_INAU.LoanAppID != None)))
	else:
		if request.method == "POST":
			LoanAppObj = LoanAppObj
		else:
			if len(getRecord()) > 0:
				LoanAppObj = LoanAppObj.filter(MKT_LOAN_APPLICATION.ID.in_(getRecord()))
			else:
				LoanAppObj 	= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID == '')

	return LoanAppObj

def custom_LoanAppID(form,field):
	LoanAppID 	= request.form['LoanAppID']
	Option 		= request.form['Option']
	#---------------------------
	#Note => close for migration only will open back
	#---------------------------
	VALIDATE_LA_TOPUP = mktsetting.getAppSetting('VALIDATE_LA_TOPUP')
	if not VALIDATE_LA_TOPUP:
		VALIDATE_LA_TOPUP = "Y" 

	if VALIDATE_LA_TOPUP == "Y":
		if Option 	== '1': #Option Top-Up
			if LoanAppID == "__None":
				raise ValidationError("This field is required.")

	#end
def custom_DefaultCharge(form, field):
		ListChargeKey,TotalChargeKey 	=	mkttool.getControlList('ChargeKey')
		ListDefaultCharge,TotalPromotion 	=	mkttool.getControlList('DefaultCharge')
		DefaultCharge=''
		for i in range(0,TotalPromotion):
			if field.name == ListDefaultCharge[i]:
				ChargeKey = request.form[ListChargeKey[i]]
				DefaultCharge = request.form[ListDefaultCharge[i]]

				if ChargeKey and ChargeKey != '__None':
					if not mkttool.isFloat(DefaultCharge):
						raise ValidationError('Default must be number.')
				else:
					if DefaultCharge and float(DefaultCharge) != float(0):
						raise ValidationError('Please choose Charge Key.')
	
def loadCharge():
	ChargeObj 		=	MKT_CHARGE.query.join(MKT_CHARGE_RATE,MKT_CHARGE_RATE.ID.like(MKT_CHARGE.ID+'%')).\
										filter(MKT_CHARGE_RATE.ChargeMode=='1')
	return ChargeObj
@app.route("/Morakot/LoanAmendment/LoanAppByCustomer", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanAppByCustomer():
	try:
		Branch 			= mktuser.getCurrentBranch()
		APPROVED_STATUS = ["3"]
		TOPUP_TYPE 		= ["2"]
		LoanAppDict 	= {}
		LoanID 			= request.args.get("LoanID")
		ID 				= request.args.get("ID")
		if LoanID:
			LoanObj 		= MKT_LOAN_CONTRACT.query.get(LoanID)
			if LoanObj:
				Currency 		= LoanObj.Currency
				Customer 		= LoanObj.ContractCustomerID if LoanObj else ""
				LoanAppObj 		= loadLoanApp(LoanID,Customer,Currency,ID)
				LoanAppDict[""] = "--None--"
				if LoanAppObj.first():
					for item in LoanAppObj:
						LoanAppDict[item.ID] = item.ID
		return jsonify(results=LoanAppDict)
	except:
		raise

@app.route("/Morakot/LoanTopUp/LoanAppAction", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanAppAction():
	try:
		LoanAppID 	= request.args.get("LoanAppID")
		# set disable field
		Disabled 	= True
		# set operation 
		OperationID	= "AMT"
		OperationDesc = "Amendment"
		# set mode
		ModeID 		= 2 # Add mode
		ModeDesc 	= "Add"

		LoanAppObj 	= MKT_LOAN_APPLICATION.query.get(LoanAppID)
		Amount 		= float(LoanAppObj.Amount) if LoanAppObj else 0

		return jsonify(	Bool =			Disabled,
						OperationID =	OperationID,
						OperationDesc =	OperationDesc,
						ModeID = 		ModeID,
						ModeDesc =		ModeDesc,
						Amount = 		Amount)
	except:
		raise

@app.route("/Morakot/LoanTopUp/SetOption", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def setOption():
	try:
		Option 	= request.args.get("Option")
		# set disable field
		Bool = True
		LoanAppID = ""
		LoanAppDesc = "--None--"

		if Option == "2": # Add principal only
			Bool = True
		else: # Top up
			Bool = False

		return jsonify(	Bool=Bool,
						LoanAppID=LoanAppID,
						LoanAppDesc=LoanAppDesc)
	except:
		raise


@app.route("/Morakot/LoanTopUp/LoadLoanAppInfo", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def loadLoanAppInfo():
	LoanAppID 	= request.args.get("LoanAppID")
	LoanAppObj 	= MKT_LOAN_APPLICATION.query.get(LoanAppID)
	Interest 	= request.args.get("Interest")
	Frequency 	= request.args.get("Frequency")
	FreqType 	= request.args.get("FreqType")
	Term 		= request.args.get("Term")
	Installment = request.args.get("Installment")

	if LoanAppObj:
		Interest 	= LoanAppObj.InterestRate
		Frequency 	= LoanAppObj.Frequency
		FreqType 	= LoanAppObj.FreqType
		Term 		= LoanAppObj.Term
		Installment = LoanAppObj.Installment

	return jsonify(Interest = Interest,
					Frequency=Frequency,
					FreqType=FreqType,
					Term=Term,
					Installment=Installment)

class FRM_LOAN_TOPUP(FRM_LOAN_AMENDMENT_EX):
	LoanID 			= 	RemoteTextField(requiredlabel('Loan Contract ID', "*"), [validators.Required()])
	Customer 		= 	TextField(getLanguage("Customer Name"))
	Option 			= 	SelectField(requiredlabel("Option","*"),
							choices =[('1','Top-Up'),('2',"Progressive Drawdown")],
							coerce=str,
							validators=[validators.Required()])
						
	LoanAppID 		= 	QuerySelectField(requiredlabel("Top-up Loan Application","*"),
							query_factory=loadLoanApp,
							get_label=u"ID",
							blank_text=u"--None--",
							allow_blank=True,
							validators=[custom_LoanAppID]
						)
	Operation 		= 	SelectField(requiredlabel(getLanguage('Operation'), '*'),
							choices=[('AMT', getLanguage('Amendment')),
									 ('TMN', getLanguage('Termination'))],
							coerce=str,
							validators=[validators.Required()]
						)
	AddDeduct 		= QuerySelectField(requiredlabel(getLanguage('Mode'), "*"),
							query_factory=loadAddDeduct,
							get_label=u'Description'
						)
	AmendDate 		= 	DateField(requiredlabel("Top-up Date", "*"), [validators.Required()], default=loadBankDate)
	Currency 		=	TextField(getLanguage("Currency"), default="KHR")
	Amount 			=	TextField(requiredlabel(getLanguage("Principal Amount"), "*"), default=0)
	PenaltyAmount	=	TextField("Penalty Terminate", default="0")
	WaiveInterest	=	TextField("Waive Current Interest", default="0")
	InterestOld 	=	TextField(getLanguage("Old Interest"), [validators.Required()], default=0)
	Interest 		=	TextField(requiredlabel(getLanguage("New Interest"), "*"), [validators.Required()], default=0)
	LoanType 		= 	SelectField(getLanguage('Loan Type'),
							choices=[('N', getLanguage('Normal')),
									 ('R', getLanguage('Restructured'))],
							coerce=str,
							default='N')
	Restructure 	=  	SelectField('Restructure',
						choices=[('Y', getLanguage('Yes')),
								 ('N', getLanguage('No'))],
						coerce=str,
						default='N')
	#Capitalize Interest/Penalty 2018-04-11 Mony
	CapitalizeOption 	= 	SelectField("Capitalize Option",
							choices=[('N', "No"),
									 ('Y', "Yes")],
							coerce=str,
							default='N')
	CapitalizeAmount	=	TextField("Capitalize Int. Amount", default="0")
	#end
	LastPaidAmount 	=	TextField("Last Paid Amount", default=0)
	InstallAmount 	=	TextField("Installment Amount", default=0)
	KeepPrevSchedule	=	SelectField('Keep Previous Schedule',
							choices=[('Y', getLanguage('Yes')),
									 ('N', getLanguage('No'))],
							coerce=str,
							default='Y')
	TerminatedBy 	= SelectField("Terminated By",
						choices=[('','--Choose Terminated By--'),
								 ('1', '1. Client Paid Off'), 
								 ('2', '2. Client Rejected'), 
								 ('3', '3. Company Rejected'),
								 ('4', '4. Company Technical Issue')],
						coerce=str,
					)
	AmendmentStat 	= 	TextField(requiredlabel("Amendment Stat",'*'),default='N')
	Reason 			=	TextAreaField("Reason")

	#Loan Amend Charge
	ChargeKey 	= 	QuerySelectField(getLanguage("Charge Key"),
						query_factory= loadCharge,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--None--',
						description='2-Charge'
					)
	RateFixed 			= 	TextField(getLanguage("Rate") + "/" + getLanguage("Fixed"), description=u'2-Charge')
	Charge 				= 	TextField(getLanguage("Charge"),
								validators=[loancontractform.custom_Charge], 
								default=0,
								description=u'2-Charge')

	DefaultCharge 		= 	TextField("Default Charge",
								validators=[custom_DefaultCharge],
								default=0,
								description=u'2-Charge')
	
	ChargePerInstallment= 	TextField("Charge Per Installment", default=0, description=u'2-Charge')
	ChargePerDay		= 	TextField("Charge Per Day", default=0, description=u'2-Charge')
	ChargeLastBooked	= 	TextField("Charge Last Booked", default=0, description=u'2-Charge')
	
	ChargeEarned 		= 	TextField("Charge Earned", default=0, description=u'2-Charge')
	ChargeUnearned 		= 	TextField("Charge Unearn", default=0, description=u'2-Charge')


	def validate_Amount(form,field):

		LoanAppID 	= request.form['LoanAppID'] if request.method == "POST" else ""
		Amount 		= request.form['Amount'] if request.method == "POST" else ""
		Currency 	= request.form['Currency'] if request.method == "POST" else ""

		if float(Amount) <= 0:
			raise ValidationError("Added principal amount must be bigger than zero.")
		# validation for Loan Top up
		if LoanAppID != "__None":
			LoanAppObj 	= MKT_LOAN_APPLICATION.query.get(LoanAppID)
			ApprovedAmount = LoanAppObj.Amount if LoanAppObj else 0

			#---------------------------
			#Note => close for migration only will open back
			#---------------------------

			# if float(Amount) > ApprovedAmount:
			# 	ApprovedAmount = mktmoney.toMoney(float(ApprovedAmount),mktmoney.getCurrencyObj(Currency))
			# 	raise ValidationError("Added principal amount must not exceed loan application Top-up amount: %s %s"%(Currency, ApprovedAmount))

			#end
		else:
			parents = super(FRM_LOAN_TOPUP,FRM_LOAN_TOPUP).validate_Amount(form,field)

	def validate_ChargeKey(form,field):
		if request.form['ChargeKey']:
				
			ChargeKey 		= 	[]
			controls_list 	= 	request.form
			ListChargeKey	= 	[item for item in controls_list if "ChargeKey" in item]
			ListChargeKey.sort()
			TotalChargeKey =	len(ListChargeKey)

			for nub in range(0,TotalChargeKey):
				ChargeKey.append(request.form[ListChargeKey[nub]])

			DuplicateItem   = [x for x in ChargeKey if ChargeKey.count(x) > 1]
			if DuplicateItem:
				ChangeKeyObj = MKT_CHARGE.query.get(DuplicateItem[0])
				ChangeKeyDesc = ChangeKeyObj.Description if ChangeKeyObj else ''
				raise ValidationError("%s are duplicated."%ChangeKeyDesc)

	@staticmethod
	def setVisible():
		base = super(FRM_LOAN_TOPUP, FRM_LOAN_TOPUP).setVisible()
		controls_list 	= [('Operation'),('AddDeduct'),('TerminatedBy'),('LastPaidAmount'),
							('InstallAmount'),('KeepPrevSchedule'),('PenaltyAmount'),('VB'),
							('WaiveInterest'),('ChargePerInstallment'),('ChargePerDay'),
							('ChargeLastBooked'),('ChargeEarned'),('ChargeUnearned'),
							('CapitalizeAmount'),('CapitalizeOption')]
		controls_list.extend(base) if base else controls_list
		return controls_list

	@staticmethod
	def setDisable():
		base = super(FRM_LOAN_TOPUP, FRM_LOAN_TOPUP).setDisable()
		if "AmendDate" in base:
			base.remove("AmendDate")
		controls_list = []
		if request.method == "POST":
			Option = request.form['Option']
			if Option == "2": # Mode Add principal
				controls_list.append(('LoanAppID'))
		else:
			ID 			=	g.formID
			AmendObj 	=	MKT_LOAN_AMENDMENT_INAU.query.get(ID)
			if not AmendObj:
				AmendObj 	=	MKT_LOAN_AMENDMENT.query.get(ID)
			if AmendObj:
				Option 	=	AmendObj.Option
				if Option=="2":
					controls_list.append(('LoanAppID'))

		controls_list.append(('DefaultCharge'))
		controls_list.append(('RateFixed'))
		controls_list.extend(base)
		return controls_list
	@staticmethod
	def isMultiValue():
		controls_list=["2-Charge"]
		return controls_list

	@staticmethod
	def moneyField():
		base = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).moneyField()
		controls_list 	=	[["DefaultCharge", "Currency"],
							 ["Charge", "Currency"],
							 ["ChargePerInstallment", "Currency"],
							 ["ChargeLastBooked", "Currency"],
							 ["ChargePerDay", "Currency"],
							 ["ChargeEarned", "Currency"],
							 ["ChargeUnearned", "Currency"]]
		controls_list.extend(base)
		return controls_list

	@staticmethod
	def listField():
		return ["ID", "Customer", "LoanID", "LoanAppID", "Option", "Amount", "AmendDate",], ["ID*LK*LT"]

	@staticmethod
	def hotSelectField():
		base = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).hotSelectField()

		fielddisplay = "LoanAppID"
		varname 	 = "ID:$('#ID').val(),LoanID:$('#LoanID').val()"
		fun 		 = ["LoanID",varname,fielddisplay,"/Morakot/LoanAmendment/LoanAppByCustomer","change"]
		base.append(fun)
		fun 		 = ["Option",varname,fielddisplay,"/Morakot/LoanAmendment/LoanAppByCustomer","change"]
		base.append(fun)

		fielddisplay 	= "$('#RateFixed').val(data.RateFixed); $('#Charge').val(data.Charge)"
		fielddisplay 	+=";$('#ChargePerInstallment').val(data.ChargePerInstallment)"
		fielddisplay 	+=";$('#ChargePerDay').val(data.ChargePerDay)"
		fielddisplay 	+=";$('#ChargeEarned').val(data.ChargeEarned)"
		fielddisplay 	+=";$('#ChargeUnearned').val(data.ChargeUnearned)"
		fielddisplay 	+=";$('#ChargeLastBooked').val(data.ChargeLastBooked)"
		varname 		= "ChargeKeyID:$('#ChargeKey').val(), Currency:$('#Currency').val()"
		fun 			= ["ChargeKey", varname, fielddisplay, "/Morakot/ChargeKeyInfo", "change"]
		base.append(fun)
		
		return base

	@staticmethod
	def hotField():
		base = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).hotField()

		hotfield = []
		fielddisplay = "$('#Operation').select2('data',{'id':data.OperationID, 'text':data.OperationDesc}),$('#Operation').select2('readonly', data.Bool)"
		fielddisplay += ",$('#AddDeduct').select2('data',{'id':data.ModeID, 'text':data.ModeDesc}),$('#AddDeduct').select2('readonly', data.Bool)"
		fielddisplay += ",$('#Amount').val(data.Amount),$('#Amount').blur()"
		# fielddisplay += ",$('#Interest').attr('readonly', data.Bool)"
		# fielddisplay += ",$('#FreqType').select2('readonly', data.Bool)"
		# fielddisplay += ",$('#Frequency').attr('readonly', data.Bool)"
		# fielddisplay += ",$('#Term').attr('readonly', data.Bool)"
		# fielddisplay += ",$('#Installment').attr('readonly', data.Bool)"

		varname 	 = "LoanAppID:$('#LoanAppID').val()"
		fun 		 = ["LoanAppID",varname,fielddisplay,"/Morakot/LoanTopUp/LoanAppAction","change"]
		hotfield.append(fun)
		
		fun 		 = ["LoanID",varname,fielddisplay,"/Morakot/LoanTopUp/LoanAppAction","change"]
		hotfield.append(fun)
		
		fielddisplay = "$('#LoanAppID').select2('data',{'id':data.LoanAppID, 'text':data.LoanAppDesc}),$('#LoanAppID').select2('readonly',data.Bool)"
		varname 	 = "Option:$('#Option').val()"
		fun 		 = ["Option",varname,fielddisplay,"/Morakot/LoanTopUp/SetOption","change"]
		hotfield.append(fun)

		fielddisplay = "$('#Interest').val(data.Interest),\
						$('#Frequency').val(data.Frequency),\
						$('#FreqType').val(data.FreqType),\
						$('#Term').val(data.Term),\
						$('#Installment').val(data.Installment)"
		varname 	 = "LoanAppID:$('#LoanAppID').val(),\
						Interest:$('#InterestOld').val(),\
						Frequency:$('#FrequencyOld').val(),\
						FreqType:$('#FreqTypeOld').val(),\
						Term:$('#TermOld').val(),\
						Installment:$('#InstallmentOld').val()"
		fun 		 = ["LoanAppID",varname,fielddisplay,"/Morakot/LoanTopUp/LoadLoanAppInfo","change"]
		hotfield.append(fun)
		fun 		 = ["Option",varname,fielddisplay,"/Morakot/LoanTopUp/LoadLoanAppInfo","change","LoanAppID"]
		hotfield.append(fun)

		fielddisplay 	= "$('#RateFixed').val(data.RateFixed); $('#Charge').val(data.Charge)"
		fielddisplay 	+=";$('#ChargePerInstallment').val(data.ChargePerInstallment)"
		fielddisplay 	+=";$('#ChargePerDay').val(data.ChargePerDay)"
		fielddisplay 	+=";$('#ChargeEarned').val(data.ChargeEarned)"
		fielddisplay 	+=";$('#ChargeUnearned').val(data.ChargeUnearned)"
		fielddisplay 	+=";$('#ChargeLastBooked').val(data.ChargeLastBooked)"
		varname 		= "ChargeKeyID:$('#ChargeKey').val(), Currency:$('#Currency').val()"
		fun 			= ["ChargeKey", varname, fielddisplay, "/Morakot/ChargeKeyInfo", "change"]
		hotfield.append(fun)

		hotfield.extend(base)
		return hotfield
	
	@staticmethod
	def redirectAfterInsert():
		base = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).redirectAfterInsert()
		if base:
			LoanID 		= request.form['LoanID']
			Resource 	= "INAU"
			AmtID 		= request.form['ID']
			Manual 		= MKT_SCHED_MANUAL.query.\
							filter(MKT_SCHED_MANUAL.LoanID == LoanID).\
							all()
			if Manual:
				return "/Morakot/ScheduleManual/"+ LoanID +"?Amendment=Topup&AmtID=" + AmtID + "&Resource=" + Resource + "&Edit=Yes"
			return "/Morakot/ScheduleDefine/?Operation=New&ContractID=" + LoanID + "&Resource=" + Resource + "&Amendment=Topup&AmtID=" + AmtID
		else:
			return None

	@staticmethod
	def beforeAuthorize():
		try:
			ID 			= g.formID
			AmendObj 	= MKT_LOAN_AMENDMENT_INAU.query.get(ID)
			if AmendObj:
				AmendDate 	= AmendObj.AmendDate
				SystemdDate = mktdate.getBankDate()
				#In beforeAuthorize in main amendment form have one commit in update schedule methoda
				#Need to execute main form first because it will roll back when there error
				#In case we execute this form later than charge when there error it will not roll back charge
				#Keep it outside check date for update schedule
				base = super(FRM_LOAN_TOPUP,FRM_LOAN_TOPUP).beforeAuthorize()
				if not base:
					return False

				if str(AmendDate) == str(SystemdDate):
					ChargeStat 			= ffmktcharg.updateAdmendmentCharge(ID,Resouce="INAU",EOD=0)
					if not ChargeStat:
						print "Error updateAdmendmentCharge."
						return False
					UpdateChargeStat	= ffmktcharg.updateLoanChargeAfterAmement(ID,Resouce="INAU",EOD=0)
					if not UpdateChargeStat:
						print "Error updateLoanChargeAfterAmement."
						return False
		except Exception as e:
			db.session.rollback()
			raise e

	@staticmethod
	def IsAcceptOverride():
		LoanID 			= request.form['LoanID'] if request.method == "POST" else ""
		LoanAppID 		= request.form['LoanAppID'] if request.method == "POST" else ""
		kwargs 			= {}

		kwargs.update(AcceptOverrideProcess(LoanID,LoanAppID))
		parents = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).IsAcceptOverride(**kwargs)

		return parents

	@staticmethod
	def IsAcceptOverrideINAU():
		AmtID 	= g.formID
		AmtObj 	= MKT_LOAN_AMENDMENT_INAU.query.get(AmtID)
		kwargs 	= {}
		if AmtObj:
			LoanID 		= AmtObj.LoanID
			LoanAppID 	= AmtObj.LoanAppID

			kwargs.update(AcceptOverrideProcess(LoanID,LoanAppID))
			parents = super(FRM_LOAN_AMENDMENT_EX,FRM_LOAN_AMENDMENT_EX).IsAcceptOverrideINAU(**kwargs)

			return parents


def AcceptOverrideProcess(LoanID, LoanAppID):
	Dict = {}

	if LoanAppID != "__None":
		LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanAppID)
		Dict.update({"LoanAppID":True,"LoanAppObj":LoanAppObj})

	return Dict
