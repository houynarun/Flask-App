from app.mktcore.imports 				import *
import app.tools.mktmessage 			as mktmessage
import app.tools.mktdate				as mktdate
from decimal 							import Decimal
from app                    		import db
from app.Customer.models            import *
from app.LoanContract.models        import *
from app.PD.models 					import *
from app.Notification.models 		import *
import app.tools.mktdate    		as mktdate
import app.tools.mktsetting 		as mktsetting
from app.tools.mktnotificationgateway import CLS_NOTIFICATION_GATEWAY

class CLS_FFNotifyAfterOverDue(object):	
	def __init__(self,**kwargs):
		pass

	def getQueryObj(self,**kwargs):
		"""
		- param:
			-kwargs key:
				- PRE_NOTIFY_DAY = type int , is pre payment day before loan collect

		"""
		NumberOfDay     =   kwargs.get("NOTIFY_DAY",2)
		BASE_DATE 		= 	kwargs.get("BASE_DATE","CurrentDate")

		BankDate        =   mktdate.getBankDate()
		CurrentDate     =   mktdate.getDateISO()
		CollectionDate  =   mktdate.getPreviousDay(eval(BASE_DATE),NumberOfDay=int(NumberOfDay))

		PastDueObj 		=	db.session.query(MKT_PAST_DUE.LoanID,
											 MKT_PAST_DUE.Customer.label("CustomerID"),
											 func.sum(cast(MKT_PD_DATE.NumDayDue,Integer)).label('TotalNumDayDue')
										 ).\
									  	join(MKT_PD_DATE,MKT_PAST_DUE.ID == MKT_PD_DATE.ID).\
									  	join(MKT_CUSTOMER,MKT_CUSTOMER.ID == MKT_PAST_DUE.Customer).\
									  	filter(or_(MKT_PD_DATE.OutPriAmount > 0,
									  			   MKT_PD_DATE.OutIntAmount > 0)).\
									  	filter(MKT_CUSTOMER.EnableSMS=="Y").\
									  	group_by(MKT_PAST_DUE.LoanID,MKT_PAST_DUE.Customer).\
									  	having((func.sum(cast(MKT_PD_DATE.NumDayDue,Integer))) == int(NumberOfDay))

		PastDueObj 	    = 	PastDueObj.subquery()
	  	LastQuery 		= 	db.session.query(PastDueObj.c.CustomerID).\
	  								group_by(PastDueObj.c.CustomerID)

		return LastQuery

	def getRecords(self,**kwargs):
		"""
		For find customer who late in payment 2 days of current installment
			Param:
				NOTIFY_DAY: number of day late of current installment to notify
		"""
		Result			=   {}

		PastDueObj 		= 	self.getQueryObj(**kwargs)

		Recipients     	= 	[]
		RecipientsData 	= 	{}
		CommonData     	= 	{}
		References 		= 	[]

		if PastDueObj.first():
			for Row in PastDueObj:
				CustomerObj = MKT_CUSTOMER.query.get(Row.CustomerID)
				CustomerObj = CustomerObj.__dict__
				PDDateObj   = Row.__dict__

				CusID = Row.CustomerID
				Recipients.append(CusID)
				RecipientsData.update({CusID:{"PastDueDate"	:PDDateObj,
											  "Customer"	:CustomerObj}
											   })
				CommonData = {}

		#keep that three key in dictionary 
		Result = {
					"Recipients" 	:Recipients,
					"References"	:References,
					"RecipientsData":RecipientsData,
					"CommonData"	:CommonData
				 }

		return Result

	

NOTIFY = CLS_FFNotifyAfterOverDue()
