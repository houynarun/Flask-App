from app.mktcore.imports 				import *
import app.tools.mktmessage 			as mktmessage
import app.tools.mktdate				as mktdate
from decimal 							import Decimal
from app                    		import db
from app.Customer.models            import *
from app.RepaymentSchedule.models   import *
from app.LoanContract.models        import *
from app.Notification.models 		import *
import app.tools.mktdate    		as mktdate
import app.tools.mktsetting  		as mktsetting
from app.tools.mktnotificationgateway import CLS_NOTIFICATION_GATEWAY
from app.NotificationScript.NotifyBeforeDueDate import CLS_NotifyBeforeDueDate
from app.ScheduleAddon.models 		import *
import app.tools.mktmoney				as mktmoney
import app.tools.loantools.rescheduletools 		as mktreschedule
from decimal import *

class CLS_FFNotifyBeforeDueDate(CLS_NotifyBeforeDueDate):
	def __init__(self,**kwargs):
		pass

	def getInsurance(self,**kwargs):
		LoanID = kwargs.get("LoanID")
		CollectionDate = kwargs.get("CollectionDate")

		Result = {"InsuranceAmount": 0,"InsurancePastDueAmount": 0}
		AddonObj = db.session.query( MKT_SCHEDULE_ADDON.ActualCollection,
									 MKT_SCHEDULE_ADDON.PastDue,
									 MKT_SCHEDULE_ADDON.Currency,
									  MKT_SCHEDULE_ADDON.AddonType,
									 MKT_SCHEDULE_ADDON_DE.Value,
									 MKT_SCHEDULE_ADDON_DE.StartInstallment,
									 MKT_SCHEDULE_ADDON_DE.EndInstallment,
									 MKT_LOAN_CONTRACT.Account,
									 MKT_LOAN_CONTRACT.Branch,
									 MKT_LOAN_CONTRACT.OutstandingAmount,
									 MKT_LOAN_CONTRACT.Disbursed,
									 MKT_REP_SCHEDULE.CollectionDate,
									 MKT_REP_SCHEDULE.NumDay,
									 MKT_REP_SCHEDULE.Balance,
									 MKT_REP_SCHEDULE.No,
									 MKT_SCHEDULE_ADDON_PARAM.ID.label("ParamID"),
									 MKT_SCHEDULE_ADDON_PARAM.CollectionTran.label("CollectionTran"),
									 MKT_SCHEDULE_ADDON_PARAM.PDCollectionTran.label("PDCollectionTran"),
									 MKT_SCHEDULE_ADDON_PARAM.Category.label("Category"),
									 MKT_SCHEDULE_ADDON_PARAM.Mode.label("Mode"),
									 MKT_SCHEDULE_ADDON_PARAM.Description.label("Description")).\
								join(
									MKT_SCHEDULE_ADDON_DE, 
									MKT_SCHEDULE_ADDON_DE.ID == MKT_SCHEDULE_ADDON.ID
								).\
								join(
									MKT_LOAN_CONTRACT,
									MKT_LOAN_CONTRACT.ID == MKT_SCHEDULE_ADDON.LoanID
								).\
								join(
									MKT_REP_SCHEDULE,
									MKT_REP_SCHEDULE.LoanID == MKT_SCHEDULE_ADDON.LoanID
								).\
								join(
									MKT_SCHEDULE_ADDON_PARAM,
									MKT_SCHEDULE_ADDON_PARAM.ID == MKT_SCHEDULE_ADDON.AddonType
								).\
								filter(MKT_LOAN_CONTRACT.DisbursedStat == "Y").\
								filter(MKT_LOAN_CONTRACT.OutstandingAmount > 0).\
								filter(MKT_REP_SCHEDULE.CollectionDate == str(CollectionDate)).\
								filter(MKT_SCHEDULE_ADDON_DE.StartInstallment <= MKT_REP_SCHEDULE.No).\
								filter(MKT_SCHEDULE_ADDON_DE.EndInstallment >= MKT_REP_SCHEDULE.No).\
								filter(MKT_LOAN_CONTRACT.ID == LoanID).\
								order_by(MKT_SCHEDULE_ADDON_PARAM.CollectionOrder.asc())
		if AddonObj.first(): 
			for row in AddonObj:
				Mode 			=	row.Mode #1=Fixed Amount, 2=Charge Percentage of loan outstanding, 3=#Calculate the same interest,Actual Number Of Day
				Value 			=	row.Value
				AddonType 		=	row.AddonType
				Currency 		=	row.Currency
				CurrencyObj 	= 	mktmoney.getCurrencyObj(Currency)

				#Calculate Collection Value, Collection mean amount (addon) that need to collect from customer. 
				#It calculate based on cofig
				Condition 		=	{"Type"				: int(Mode),
									 "Percentage"		: Value,
									 "FixAmount"		: Value,
									 "LoanOutstanding"	: row.Disbursed,
									 "NumberOfDay"		: row.NumDay,
									 "LoanBlance"		: row.Balance,
									 "ChargeRate"		: Value
									}
				Collection 		=	mktreschedule.calculateCharge(**Condition)
				Collection 		= 	mktmoney.toMoney(float(Collection), CurrencyObj)
				Collection 		= 	str(Collection).replace(',', '')
				Collection 		= 	Decimal(Collection)

				Result.update({"InsuranceAmount": Collection,"InsurancePastDueAmount": row.PastDue})

		return Result

	def getQueryObj(self,**kwargs):
		"""
		- param:
			-kwargs key:
				- PRE_NOTIFY_DAY = type int , is pre payment day before loan collect

		"""
		NumberOfDay     =   kwargs.get("PRE_NOTIFY_DAY",2)
		BASE_DATE 		= 	kwargs.get("BASE_DATE","CurrentDate")
		BankDate        =   mktdate.getBankDate()
		CurrentDate     =   mktdate.getDateISO()	
		CollectionDate  =   mktdate.getNextDay(eval(BASE_DATE),NumberOfDay=int(NumberOfDay))

		ScheduleObj 	= 	db.session.query(func.sum(MKT_REP_SCHEDULE.Principal).label('TotalPrincipal'),
											 func.sum(MKT_REP_SCHEDULE.Interest).label('TotalInterest'),
											 func.sum(MKT_REP_SCHEDULE.Charge).label('TotalCharge'),
											 MKT_CUSTOMER.ID.label('CustomerID'),
											 func.string_agg(MKT_REP_SCHEDULE.LoanID,",").label("LoanIDs"),
											 MKT_REP_SCHEDULE.CollectionDate,
											 MKT_LOAN_CONTRACT.Currency
									   		 ).\
											join(MKT_LOAN_CONTRACT,
												 MKT_LOAN_CONTRACT.ID == MKT_REP_SCHEDULE.LoanID
											).\
											join(MKT_CUSTOMER,
												MKT_CUSTOMER.ID == MKT_LOAN_CONTRACT.ContractCustomerID).\
											filter(MKT_REP_SCHEDULE.CollectionDate == str(CollectionDate)).\
											group_by(MKT_CUSTOMER.ID,MKT_REP_SCHEDULE.CollectionDate,MKT_LOAN_CONTRACT.Currency)
		return ScheduleObj
		
	def getRecords(self,**kwargs):
		"""
		- param:
			-kwargs key:
				- PRE_NOTIFY_DAY = type int , is pre payment day before loan collect

		"""	
		NumberOfDay     =   kwargs.get("PRE_NOTIFY_DAY",2)
		BASE_DATE 		= 	kwargs.get("BASE_DATE","CurrentDate")
		BankDate        =   mktdate.getBankDate()
		CurrentDate     =   mktdate.getDateISO()	
		CollectionDate  =   mktdate.getNextDay(eval(BASE_DATE),NumberOfDay=int(NumberOfDay))
		Result			=   {}
		ScheduleObj 	= 	self.getQueryObj(**kwargs)
		if mktsetting.getLocalRegisterPath()=='local.FirstFinance':
			ScheduleObj = 	ScheduleObj.filter(MKT_CUSTOMER.EnableSMS=="Y")
			
		Recipients     	= 	[]
		RecipientsData 	= 	{}
		CommonData     	= 	{}
		References 		= 	[]

		if ScheduleObj:
			for Row in ScheduleObj:
				CustomerObj = MKT_CUSTOMER.query.get(Row.CustomerID)
				CustomerObj = CustomerObj.__dict__

				TotInsuranceAmount = 0
				TotInsurancePastDueAmount = 0

				LoanIDs = Row.LoanIDs
				LoanIDs = LoanIDs.split(",")
				ContractObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID.in_(LoanIDs))
				ContractList = []
				for row in ContractObj:
					ContractList.append(row.__dict__)
					InsuranceDict = self.getInsurance(LoanID=row.ID,CollectionDate=CollectionDate)
					TotInsuranceAmount = TotInsuranceAmount + InsuranceDict.get("InsuranceAmount")
					TotInsurancePastDueAmount = TotInsurancePastDueAmount + InsuranceDict.get("InsurancePastDueAmount")

				RepScheduleObj = {}
				RepScheduleObj = Row.__dict__
				CusID = Row.CustomerID
				Recipients.append(CusID)
				RecipientsData.update({CusID:{"Contract"	:ContractList,
											  "RepSchedule"	:RepScheduleObj,
											  "Customer"	:CustomerObj,
											  "Insurance" 	:{"TotalAmount": TotInsuranceAmount, "TotalPastDueAmount": TotInsurancePastDueAmount}}
									  })
				CommonData = {}
		#keep that three key in dictionary 
		Result = {
					"Recipients" 	:Recipients,
					"References" 	:References,
					"RecipientsData":RecipientsData,
					"CommonData"	:CommonData
				 }

		return Result

NOTIFY = CLS_FFNotifyBeforeDueDate()
