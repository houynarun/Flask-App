from app.LoanWriteOff.forms 						import *
from app.ScheduleAddon.models 						import *
from app.LoanWriteOff.models						import *
from local.FirstFinance.ScheduleAddonPayment.models import *
from decimal 										import Decimal

import app.tools.user 								as mktuser
import app.tools.mktdb								as mktdb
import app.tools.mktsetting 						as mktsetting
import local.FirstFinance.tools.mktpostaccounting 	as mktpostaccounting
import local.FirstFinance.tools.mktaddon 			as mktaddon
import local.FirstFinance.tools.mktloan 			as mktloan

def loadInsuranceAmount():
	if request.method == 'POST':
		ID = request.form['ID']
	else:
		ID = g.formID

	Amount = float(0)
	Insurance = mktaddon.getInsurance(LoanID=ID)
	Amount = Insurance.get("TotalPay")
	return Amount

# def loadWOFAmountWithAddon():
# 	Amount = loadWOFAmount()
# 	InsuranceAmount = loadInsuranceAmount()
# 	return float(Amount) + float(InsuranceAmount)

class FRM_WRITE_OFF_EX(FRM_WRITE_OFF):
	"""Derived class extended from FRM_WRITE_OFF"""

	AddonAmount 		=	TextField(requiredlabel("Insurance Amount", "*"), [validators.Required()], default=loadInsuranceAmount)
	Branch 				=	TextField(requiredlabel("Branch", "*"), [validators.Required()], default=loadBranch)
	Description 		=	TextAreaField("Description")

	@staticmethod
	def setDisable():
		base = super(FRM_WRITE_OFF_EX, FRM_WRITE_OFF_EX).setDisable()
		controls_list 	= [("AddonAmount")]
		controls_list.extend(base) if base else controls_list
		return controls_list

	@staticmethod
	def beforeInsert():
		try:
			LoanID = request.form['ID']
			mktloan.setClosedLoanApplication(LoanID)

			parent = super(FRM_WRITE_OFF_EX,FRM_WRITE_OFF_EX).beforeInsert()
			if parent:
				NumOfAuth 		= 	g.getNAuthorize
				Resource 		= 	"INAU"
				if int(NumOfAuth) == 0:
					PostData = {"Branch":request.form['Branch'],
								"Currency":request.form['Currency'],
								"Reference":request.form['ID'],
								"AddonAmount": request.form['AddonAmount'],
								"TotWOFAmount": request.form['WOFAmount']}
					setWriteOffInsurance(LoanID,**PostData)

					#: Set loan applications to closed
					
				return True
			else:
				return False
		except Exception as e:
			db.session.rollback()
			raise (Exception("Error:%s"%e))

	@staticmethod
	def beforeAuthorize():
		try:
			LoanID = g.formID
			mktloan.setClosedLoanApplication(LoanID)

			parent = super(FRM_WRITE_OFF_EX,FRM_WRITE_OFF_EX).beforeAuthorize()
			if parent:
				WrittenOffObj = MKT_WRITE_OFF_INAU.query.get(LoanID)
				if WrittenOffObj:
					PostData = {"Branch":WrittenOffObj.Branch,
								"Currency":WrittenOffObj.Currency,
								"Reference":WrittenOffObj.ID,
								"AddonAmount":WrittenOffObj.AddonAmount,
								"TotWOFAmount":WrittenOffObj.WOFAmount}
					setWriteOffInsurance(LoanID,**PostData)
					return True
				else:
					return False
			else:
				return False
		except Exception as e:
			db.session.rollback()
			raise (Exception("Error:%s"%e))

def setWriteOffInsurance(LoanID,**kwargs):
	""" Method to process write off insurance payment
		Flow:
			1. Post accounting for write-off insurance
			2. move related records to hist.
			3. update insurance amount to write-off detail
		Args:
			LoanID (str): string Loan ID
		Return:
			None
	"""
	try:
		PostData = getWrittenOffData(LoanID)
		if PostData:
			kwargs.update(PostData)
			#print ("Kwargs",kwargs)
			mktpostaccounting.setPostAccounting(**kwargs)

		Condition = {"LoanID": LoanID}
		mktaddon.moveAddonToHist(**Condition)

		mktdb.updateRecord(MKT_WRITE_OFF_DE, [MKT_WRITE_OFF_DE.ID == LoanID], {"AddonAmount": kwargs.get("AddonAmount",0),"TotWOFAmount": kwargs.get("TotWOFAmount")})
	except Exception as e:
		db.session.rollback()
		raise (Exception("Error:%s"%e))

def getWrittenOffInsuranceAmt(LoanID):
	""" Method to get written-off insurance amount
		= prepaid insurance - actual collection
		Args:
			LoanID (str): string Loan Contract id
		Return:
			WrittenOffAmt (float): total written-off insurance amount 
	"""
	WrittenOffAmt 	= float(0)
	Insurance 		= mktaddon.getInsurance(LoanID=LoanID)
	WrittenOffAmt 	= Insurance.get("TotalPay")

	return WrittenOffAmt


def getWrittenOffData(LoanID):

	INSURANCE_EXPENSE_CATE = mktsetting.getAppSetting('INSURANCE_EXPENSE_CATE')
	if not INSURANCE_EXPENSE_CATE:
		INSURANCE_EXPENSE_CATE = "65890"
	LOAN_WRITE_OFF_TRANSACTION = "26" # Transaction for Loan Write Off
	INSURANCE_RECIEVABLE_CATE = '28974'

	SchedAddonTypeObj 	= MKT_SCHEDULE_ADDON_PAYMENT.query.filter_by(LoanID=LoanID).first()
	AddonPaymentType 	= SchedAddonTypeObj.AddonPaymentType if SchedAddonTypeObj else ""
	UserReference 		= SchedAddonTypeObj.ID if SchedAddonTypeObj else ""

	SchedPaymentTypeObj = MKT_SCHEDULE_ADDON_PAYMENT_TYPE.query.get(AddonPaymentType)
	PostData = {}
	if SchedPaymentTypeObj:
		CrCategory = SchedPaymentTypeObj.DrCategory
	else:
		CrCategory = INSURANCE_RECIEVABLE_CATE

	Amount = getWrittenOffInsuranceAmt(LoanID)
	PostData = {"Amount": 		Amount,
				"Inputter":		"System",
				"Module":		'LC',
				"TranDate":		str(mktdate.getBankDate()),
				"Transaction":	LOAN_WRITE_OFF_TRANSACTION,
				"DrMode":		"Direct",
				"DrCategory":	INSURANCE_EXPENSE_CATE,
				"DrAccount":	"",
				"CrMode":		"Direct",
				"CrCategory":	CrCategory,
				"CrAccount":	"",
				"Note":			"",
				"UserReference":UserReference}
				
	if Amount < 0:
		Amount = abs(Amount)
		PostData = {"Amount": 		Amount,
					"Inputter":		"System",
					"Module":		'LC',
					"TranDate":		str(mktdate.getBankDate()),
					"Transaction":	LOAN_WRITE_OFF_TRANSACTION,
					"DrMode":		"Direct",
					"DrCategory":	CrCategory,
					"DrAccount":	"",
					"CrMode":		"Direct",
					"CrCategory":	INSURANCE_EXPENSE_CATE,
					"CrAccount":	"",
					"Note":			"",
					"UserReference":UserReference}

	return PostData