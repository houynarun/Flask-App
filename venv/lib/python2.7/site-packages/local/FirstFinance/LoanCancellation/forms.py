from wtforms 							import SelectMultipleField, DecimalField

from app.mktcore.wtfimports 			import *
from app.Customer.models 				import *
from app.LoanApplication.models 		import *
from .models 							import *
from app.VB.models 						import *
from local.FirstFinance.tools.mktroute 	import *
from datetime 							import datetime

import app.tools.mktaudit 				as mktaudit
import app.tools.mktdb 					as mktdb
import app.tools.mktdate	 			as mktdate
import app.tools.mktsetting 			as mktsetting

#After Save record will be look up value from table store
def getRecord():
	try:
		result = MKT_LOAN_CANCELLATION.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_LOAN_CANCELLATION_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict = row.__dict__
			return Dict
		else:
			return Dict
	except:
		raise


def loadLoanApplication():  #define function
	if request.method == 'POST':
		CustomerID = request.form["CustomerID"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_LOAN_APPLICATION.query.filter_by(LNCustomerID=Record['CustomerID'])  
		else:
			return MKT_LOAN_APPLICATION.query.filter_by(LNCustomerID='')

	return MKT_LOAN_APPLICATION.query.filter_by(LNCustomerID=CustomerID) # tablename.query


class FRM_LOAN_CANCELLATION(exform):

	CustomerID 			= RemoteTextField(requiredlabel(getLanguage("Customer"), "*"), [validators.Required()])
	LoanAppID 			= QuerySelectField(requiredlabel('Loan Application','*'),
						  	query_factory = loadLoanApplication,
						  	get_label 	= 'ID',
						  	allow_blank 	= True,
						  	blank_text 	= u'')
	Currency 			= TextField("Currency")
	CancellationType 	= SelectField(requiredlabel('Cancellation Type','*'),
							[validators.Required()],
							choices = [ ('','--None--'),
							 			('1','Canceled By Client'),
										('2','Canceled By Company'),
										('3','Canceled By Mistake'),
										('4','Commitment Cancel')],
							coerce  = str,
							default = 'No')
	CanceledAmount 	= TextField(requiredlabel("Canceled Amount", "*"), default = 0)
	Reason 				= TextAreaField(requiredlabel('Reason','*'),
							validators = [validators.Required(),validators.Length(max=150)])

	def validate_CancellationType(form, field):
		DISBURSE_DATE 	= mktsetting.getAppSetting('MAX_DISBURSE_DATE')
		LoanAppID		= request.form['LoanAppID']
		CanceledAmount = request.form['CanceledAmount']
		CancellationType= request.form['CancellationType']
		BankDate 		= mktdate.getBankDate()
		LoanAppObj		= ''
		NumDay 			= ''
		if CancellationType=='4':
			if LoanAppID:
				LoanAppObj 	= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID == LoanAppID).first()
				Days 		= BankDate - datetime.strptime(str(LoanAppObj.AppDate),'%Y-%m-%d').date()
				NumDay 		= str(Days).split(',')[0][:-4]
				if int(NumDay) <= int(DISBURSE_DATE):
					raise ValidationError("Loan Commitment (%s) cannot be cancelled due to grace period is still under (%s days)" % (CanceledAmount,DISBURSE_DATE))

	def validate_CanceledAmount(form, field):
		CommitmentAmount 			= 0
		LoanAppID		= request.form['LoanAppID']
		CanceledAmount = request.form['CanceledAmount']
		CancellationType = request.form['CancellationType']

		if LoanAppID:
			LoanObj 	= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.LoanApplicationID==LoanAppID).first()
			
			if LoanObj:
				CommitmentAmount 		= float(LoanObj.ApprovedAmount) - float(LoanObj.Disbursed)

			if not LoanObj:
				# Type of Loan Application Top up, get loan contract from loan amendment
				LoanAmendObj = MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.LoanAppID==LoanAppID).first()
				if LoanAmendObj:
					LoanID = LoanAmendObj.LoanID
					LoanObj 	= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID==LoanID).first()

					if LoanObj:
						CommitmentAmount 		= float(LoanObj.ApprovedAmount) - float(LoanObj.Disbursed)


		if CancellationType=='4':
			if not float(CommitmentAmount):
				raise ValidationError("This Loan doesn't have Commitment Amount to be canceled")
			if float(CanceledAmount) < 0:
				raise ValidationError("This field is required.")
			if float(CommitmentAmount) < float(CanceledAmount):
				raise ValidationError("Cancelled Commitment Amount should not bigger than Commitment Amount: %s"%CommitmentAmount)

	@staticmethod
	def hotField():

		hotfield 	=[]

		# Show Currency in Currency field
		fielddisplay =  "$('input[name=CanceledAmount]').attr('readonly', data.isCanceledAmount);"
		fielddisplay += "$('input[name=CanceledAmount]').val( data.CommitmentAmount);"
		fielddisplay += "$('input[name=Currency]').val( data.Currency);"
		varname = "LoanAppID:$('#LoanAppID').val()"
		varname += ",CancellationType:$('#CancellationType').val()"
		fun = ["LoanAppID", varname, fielddisplay, "/Morakot/CancellationType", "change"]
		hotfield.append(fun)

		# Disable and Enable CanceledAmount 
		fielddisplay =  "$('input[name=CanceledAmount]').attr('readonly', data.isCanceledAmount);"
		fielddisplay += "$('input[name=CanceledAmount]').val( data.CommitmentAmount);"
		fielddisplay += "$('input[name=Currency]').val( data.Currency);"
		varname = "LoanAppID:$('#LoanAppID').val()"
		varname += ",CancellationType:$('#CancellationType').val()"
		fun = ["CancellationType", varname, fielddisplay, "/Morakot/CancellationType", "change","CanceledAmount"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def setDisable():
		controls_list = [('Currency'),('CanceledAmount')]
		if request.method == "POST":
			CancellationType = request.form['CancellationType']
			if CancellationType=='4':
				controls_list = [('Currency')]

		if request.method == "GET":
			ID 					= 	g.formID
			LoanCancelObj		=	MKT_LOAN_CANCELLATION_INAU.query.get(ID)
			if LoanCancelObj:
				if LoanCancelObj.CancellationType == '4':
					controls_list = [('Currency')]
		return controls_list

	@staticmethod
	def moneyField():
		controls_list = [["CanceledAmount","Currency"]]
		return controls_list

	@staticmethod
	def hotSelectField():
		
		hotfield 	 	= []
		fielddisplay 	= "LoanAppID"
		varname  		= "CustomerID:$('#CustomerID').val()"
		fun 			= ["CustomerID", varname, fielddisplay, "/Morakot/LoanIDByCustomer", "change"]
		
		hotfield.append(fun)
		return hotfield

	@staticmethod
	def redirectAuthorize():
		ID = g.formID
		LoanCancelObj 	= MKT_LOAN_CANCELLATION.query.get(ID)
		if LoanCancelObj:
			# 4 is Commitment Cancel
			if not LoanCancelObj.CancellationType == '4':
				LoanAppID 	= LoanCancelObj.LoanAppID
				AppStatus 	= '5' #AppStatus: Cancel
				LoanAppObj 	= MKT_LOAN_APPLICATION.query.get(LoanAppID)
				Curr 		= 0
				if LoanAppObj:
					Curr 	= LoanAppObj.Curr
				Audit 		= mktaudit.getAuditrail()
				Audit.update({	'Curr'		: int(Curr)+1,
								'AppStatus'	: AppStatus})
				try:
				# Move Loan Application to  HIST
					mktaudit.moveAUTHtoHIST(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION_HIST,LoanAppID)
					# Update Loan Application status to cancel
					mktdb.updateRecord(MKT_LOAN_APPLICATION,[MKT_LOAN_APPLICATION.ID == LoanAppID], Audit)
					db.session.commit()
				except Exception as e:
					db.session.rollback()
					raise e
		return None

	@staticmethod
	def beforeAuthorize():
		try:
			ID 				= g.formID
			LoanCancelObj 	= MKT_LOAN_CANCELLATION_INAU.query.get(ID)

			# Update ApprovedAmount in MKT_LOAN_CONTRACT
			if LoanCancelObj.CancellationType =='4':
				LoanObj 		= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.LoanApplicationID==LoanCancelObj.LoanAppID).first()
				if LoanObj:
					LoanObj.ApprovedAmount = LoanObj.ApprovedAmount - LoanCancelObj.CanceledAmount
					db.session.add(LoanObj)

				if not LoanObj:
					# Type of Loan Application Top up, get loan contract from loan amendment
					LoanAppID = LoanCancelObj.LoanAppID
					LoanAmendObj = MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.LoanAppID==LoanAppID).first()
					if LoanAmendObj:
						LoanID = LoanAmendObj.LoanID
						LoanObj 	= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID==LoanID).first()

						if LoanObj:
							LoanObj.ApprovedAmount = LoanObj.ApprovedAmount - LoanCancelObj.CanceledAmount
							db.session.add(LoanObj)

		except Exception as e:
			db.session.rollback()
			raise Exception('Error: %s'%e)
