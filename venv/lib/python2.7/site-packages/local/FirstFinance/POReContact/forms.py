
from app.mktcore.wtfimports                 import *
from wtforms                                import DecimalField
from .models                                import *
from app.PotentialCustomer.models           import *
from app.PotentialCustomerAct.models        import *
from app.Currency.models                    import *
from app.LoanProduct.models                 import *
from app.User.models                        import *
import app.tools.mktdate                    as mktdate
import app.tools.mktsetting                 as mktsetting
import app.tools.user                       as mktuser
import app.tools.mktloan                    as mktloan
import app.tools.mkttool                    as mkttool
import local.FirstFinance.tools.mktpoc 		as mktpoc
import app.tools.mktaudit 					as mktaudit
def loadPotentialCust(ID=''):   
	Branch          = mktuser.getCurrentBranch()    
	UserID          = mktuser.getUser().ID  
	QueryString     = MKT_PO_CUSTOMER.query.filter(MKT_PO_CUSTOMER.AssignBranch==Branch).\
											order_by(MKT_PO_CUSTOMER.ID.asc())

	if ID:
		QueryString = QueryString.filter(MKT_PO_CUSTOMER.ID==ID).first()
	else:
		QueryString = QueryString

	return QueryString

def loadPotentialStatus():
	AssignedStatus 	=	mktsetting.getAppSetting('PO_CUS_ASSIGN_STATUS')
	return MKT_PO_CUSTOMER_STATUS.query.filter(MKT_PO_CUSTOMER_STATUS.ID==AssignedStatus)

def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.filter_by(ID=ID).one()
	else:
		return MKT_CURRENCY.query.order_by(MKT_CURRENCY.ID.asc()).all()

def loadLoanProduct():
	return mktloan.loadLoanProduct()

def custom_DateOfContact(form,field):

	DateOfContact = request.form['DateOfContact']

	if DateOfContact:
		# clear out processing errors
		field.errors[:] = []

		CheckFormatDate = mktdate.isDateISO(DateOfContact)
		if not CheckFormatDate:
			raise ValidationError("Incorrect date format, should be YYYY-MM-DD")

	else:
		# clear out processing errors
		field.errors[:] = []

		# raise ValidationError("This field is required.")
def loadUser(ID=''):
	if ID:
		QueryString     =   MKT_USER.query.filter(MKT_USER.ID==ID).one()
	else:
		QueryString     =   MKT_USER.query
	return QueryString

class FRM_PO_CUSTOMER_RECONTACT(exform):
	PotentialCustomer   =   QuerySelectField(requiredlabel('Potential Customer','*'),
								query_factory=loadPotentialCust,
								get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
								allow_blank=True,
								validators=[validators.Required()],
								default=lambda:loadPotentialCust(request.args.get("POID") if 'POID' in request.args else ""),
								blank_text=u'--None--')
	ExistingClient      =   SelectField("Existing Client",
										 choices=[('N','No'),('Y', 'Yes')],
										 default='Y',
										 coerce=str)
	Currency            =   QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
								query_factory=loadCurrency,
								get_label=u'ID',
								allow_blank=False,
								blank_text=u'--%s--' %getLanguage("None"),
								default=lambda:loadCurrency(mktsetting.getAccSetting().BaseCurrency),
								validators=[validators.Required()])
	LoanAmount          =   DecimalField(("Loan Amount"),default=0)

	ProductInterest     =   QuerySelectField(requiredlabel('Loan Product','*'),
								query_factory=loadLoanProduct,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=True,
								blank_text=u'--None--',
								validators=[validators.Required()])

	DateOfContact       =   DateField(requiredlabel("Date Of Contact",'*'),
								format='%Y-%m-%d',
								default=mktdate.getDateISO(),
								validators=[custom_DateOfContact,validators.Required()])

	POStatus            =   QuerySelectField('Potential Status',
								query_factory=loadPotentialStatus,
								get_label=lambda a: a.ID + " - " + a.Description,
								allow_blank=False)
	AssignTo            =   QuerySelectField('Assigned To',
								query_factory=loadUser,
								get_label=lambda a: a.ID + " - " + a.DisplayName,
								allow_blank=False,
								default=lambda: loadUser(mktuser.getUser().ID))
	Mobile1             =   TextField(requiredlabel(getLanguage("Mobile Phone 1"),'*'),
								validators=[validators.Required()])
	Note                =   TextAreaField(requiredlabel('Note','*'),
								validators=[validators.Length(max=100),validators.Required()])

	def validate_Mobile1(form,field):
		Mobile1 = form.Mobile1.data
		if Mobile1:
			if len(Mobile1) < 3:
				raise ValidationError("Invalid mobile phone number. Ex: 012xxxxxx")
			CheckMobileNumber, Msg = mkttool.isMobile(Mobile1)
			if not CheckMobileNumber:
				raise ValidationError(Msg)


	@staticmethod
	def setVisible():
		return ['AssignTo','POStatus']

	@staticmethod
	def beforeInsert():
		Audit 				 =	mktaudit.getAuditrail()
		PotentialCustomerID  =	request.form['PotentialCustomer'] # PO Customer ID
		Data   				 =  request.form.to_dict()
		Data.update(Audit) # when create new recored there aren't value of audit trial
		""" block  remove out field that is not property of FRM_PO_CUSTOMER"""
		del Data["ID"]  # ID of PO Re-contact
		del Data['PotentialCustomer'] 
		"""endblock del"""

		Status = mktpoc.updatePO(PotentialCustomerID,**Data)

		return Status

	@staticmethod
	def moneyField():
		return [("LoanAmount", "Currency")]