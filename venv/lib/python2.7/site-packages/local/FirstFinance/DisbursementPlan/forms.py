from app.mktcore.wtfimports import *
from app.mktcore.imports 	import *
from flask import jsonify
from .models import *
import time

from .models 							import *
from app.Customer.models 				import *
from app.LoanApplication.models 		import *
from app.Currency.models 				import *
from app.Account.models 				import *

import app.tools.mktaudit 				as mktaudit
import app.tools.mktdb 					as mktdb
import app.tools.mktdate 				as mktdate
import app.tools.mktmoney 				as mktmoney
import app.tools.user 					as mktuser
import app.mktcore.globalfunction 		as globalfunction
import app.tools.mktsetting 			as mktsetting
import datetime


# Route used in Disbursement plan
@app.route("/Morakot/DisbursementPlan/GetLoanID", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def DisbursementPlanGetLoanID():
	Customer 		= request.args.get('CustomerID')
	CurrentBranch 	= mktuser.getCurrentBranch()
	AppStatus 		= '3' # AppStatus Approve

	ListLoanID 		= []
	DisburseObj 	= MKT_DISBURSEMENT_PLAN.query
	if DisburseObj.first():
		ListLoanID = [item.LoanAppID for item in DisburseObj]

	LoanAppObj 		= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.LNCustomerID == Customer,\
														~MKT_LOAN_APPLICATION.ID.in_(ListLoanID),\
														MKT_LOAN_APPLICATION.Branch == CurrentBranch,\
														MKT_LOAN_APPLICATION.AppStatus == AppStatus).all()
	dic = {}
	if LoanAppObj:
		for row in LoanAppObj:
			dic[row.ID] = row.ID

	return jsonify(results=dic)


@app.route("/Morakot/DisbursementPlan/GetCurrency", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def DisbursementPlanGetCurrency():
	Currency 	= ''
	Account 	= ''
	ApprovedAmount = ""
	LoanAppID 			= request.args.get('LoanAppID') if 'LoanAppID' in request.args else ''
	if LoanAppID:
		LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanAppID)
		if LoanAppObj:
			Currency 		= LoanAppObj.Currency
			ApprovedAmount 	= LoanAppObj.Amount
			ApprovedAmount 	= mktmoney.toMoney(float(ApprovedAmount),mktmoney.getCurrencyObj(Currency))
			CustomerID 		= LoanAppObj.LNCustomerID
			AccObj 			= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.AccProduct == "101").\
												filter(MKT_ACCOUNT.CustomerList == CustomerID).\
												filter(MKT_ACCOUNT.Currency == Currency).first()
			if AccObj:
				Account = AccObj.ID

	return jsonify(Currency=Currency, Account=Account, ApprovedAmount = ApprovedAmount)

@app.route("/Morakot/DisbursementPlan/FullDrawdown", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def DisbursementPlanFullDrawdown():
	ApprovedAmount	= request.args.get('ApprovedAmount') if 'ApprovedAmount' in request.args else ''
	Type 			= request.args.get('Type') if 'Type' in request.args else ''
	Amount 			= 0
	if Type == '1':
		Amount = ApprovedAmount

	return jsonify(Amount = Amount)

#After Save record will be look up value from table store
def getRecord():
	try:
		result = MKT_DISBURSEMENT_PLAN.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_DISBURSEMENT_PLAN_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			for row in result:
				Dict = row.__dict__
			return Dict
		else:
			return Dict
	except:
		raise

def loadLoanApplication():  #define function
	if request.method == 'POST':
		CustomerID = request.form["CustomerID"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_LOAN_APPLICATION.query.filter_by(LNCustomerID=Record['CustomerID'])
		else:
			return MKT_LOAN_APPLICATION.query.filter_by(LNCustomerID='')

	return MKT_LOAN_APPLICATION.query.filter_by(LNCustomerID=CustomerID) # tablename.query


def getControlList(ControlID=""):
	controls_list 	= request.form
	ListControl		= [item for item in controls_list if eval(ControlID)]
	ListControl.sort()
	TotalControl 	= len(ListControl)
	return ListControl,TotalControl

def custom_Amount(form, field):
	ListAmount,TotalAmount 	= getControlList('"Amount" in item and item != "ApprovedAmount"')
	Type 		= request.form['Type']
	LoanAppID 	= request.form['LoanAppID']

	LoanAppObj 	= MKT_LOAN_APPLICATION.query.get(LoanAppID)
	if LoanAppObj:
		ApprovedAmount 	= LoanAppObj.Amount
		FormatAmount 	= mktmoney.toMoney(float(ApprovedAmount),mktmoney.getCurrencyObj(LoanAppObj.Currency))

		if Type == '1': # full drawdown
			for i in range(0,TotalAmount):
				if field.name == ListAmount[i]:
					# validate only the first amount because it is full drawdown
					Amount = request.form[ListAmount[0]]
					# Full drawdown mode can only have one drawdown
					if int(TotalAmount) > 1:
						raise ValidationError('(Disbursement %s) Full Drawdown type allows one disbursement only'%(i+1))
					elif float(Amount) != float(ApprovedAmount):
						raise ValidationError('(Disbursement %s) Disbursement Amount cannot exceed Approved Amount %s' %((i+1),FormatAmount))

		if Type == '2': # progressive drawdown
			TotalDisburse 	= 0
			for i in range(0,TotalAmount):
				Amount = request.form[ListAmount[i]]
				Amount = float(Amount)
				TotalDisburse += Amount
				if field.name == ListAmount[i]:
					if float(TotalDisburse) > float(ApprovedAmount):
						raise ValidationError('(Disbursement %s) Total Disbursement amount cannot exceed Approved Amount %s'%((i+1),FormatAmount))

def custom_DisbursementDate(form, field):
	ListDate,TotalDate = getControlList('"DisbursementDate" in item')
	Type 			= request.form['Type']
	LoanAppID 		= request.form['LoanAppID']

	LoanAppObj 		= MKT_LOAN_APPLICATION.query.get(LoanAppID)
	AppliedDate 	= ""


	if LoanAppObj:
		AppliedDate 	= LoanAppObj.AppDate

		for i in range(0,TotalDate):
			if field.name == ListDate[i]:
				DisbursedDate= request.form[ListDate[i]]
				# Validate against system date
				# BankDate 		= mktdate.getBankDate()
				# if str(DisbursedDate) < str(BankDate):
				# 	raise ValidationError('(Disbursement %s) Disbursement Date cannot be smaller than System Date %s'%((i+1),str(BankDate)))
				
				# Validate against approved date
				if str(DisbursedDate) < str(AppliedDate):
					raise ValidationError('(Disbursement %s) Disbursement must be bigger than Applied Date %s'%((i+1),str(AppliedDate)))
				
				# Validate duration that can be disbursed after loan approval
				MaxDisburseDate = mktsetting.getAppSetting('MAX_DISBURSE_DATE')
				if not MaxDisburseDate:
					raise ValidationError("AppSetting 'MAX_DISBURSE_DATE' is missing.")
				Duration 	= mktdate.getDateDiff(str(AppliedDate), str(DisbursedDate))
				if int(Duration) > int(MaxDisburseDate):
					raise ValidationError('(Disbursement %s) Disbursement duration after approval is exceeding maximum duration %s'%((i+1),MaxDisburseDate))

class FRM_DISBURSEMENT_PLAN(exform):
	CustomerID 			= RemoteTextField(requiredlabel(getLanguage("Customer"), "*"), [validators.Required()])
	LoanAppID 			= QuerySelectField(requiredlabel('Loan Application','*'),
									  query_factory = loadLoanApplication,
									  get_label 	= 'ID',
									  allow_blank 	= True,
									  blank_text 	= u'')

	Account 			= TextField(requiredlabel("Drawdown Account", "*"), [validators.Required()])
	Currency 			= TextField(requiredlabel("Currency", "*"), [validators.Required()])
	ApprovedAmount 		= TextField('Approved Amount')
	Type 				= SelectField(requiredlabel('Type of Drawdown','*'),
								choices=[
									("", "--None--"),
									('1', '1 - Full Drawdown'),
									('2', '2 - Progressive Drawdown')
								],
								default="",
								coerce=str,
								validators=[validators.Required()])
	DisbursementDate 	= DateField(requiredlabel("Disbursement Date","*"), description="1-Details", validators=[validators.Required(),custom_DisbursementDate])
	Amount 				= TextField(requiredlabel("Disbursement Amount", "*"), 
									description="1-Details",
									validators=[validators.Required(),custom_Amount])

	def validate_LoanAppID(form, field):
		ID 			= request.form['ID']
		LoanAppID 	= request.form['LoanAppID']
		DisbursedObj = MKT_DISBURSEMENT_PLAN.query.filter(MKT_DISBURSEMENT_PLAN.LoanAppID == LoanAppID,MKT_DISBURSEMENT_PLAN.ID != ID).first()
		if DisbursedObj:
			DisbursedID = DisbursedObj.ID
			raise ValidationError(Markup("This Loan application %s already has disbursement plan. Please use this record \
										<a href='javascript:void(0)' onClick=CustomClickView('Disbursement&nbspPlan-%s','DisbursementPlan/?ID=%s')> %s</a>"\
										%(LoanAppID,DisbursedID,DisbursedID,DisbursedID)))

	@staticmethod
	def setDisable():
		return [('Currency'),('Account'),('ApprovedAmount')]

	@staticmethod
	def isMultiValue():
		controls_list=["1-Details"]
		return controls_list

	@staticmethod
	def moneyField():
		
		controls_list = [["ApprovedAmount","Currency"],["Amount", "Currency"]]
		return controls_list

	@staticmethod
	def hotSelectField():
		
		hotfield 	 	= []
		fielddisplay 	= "LoanAppID"
		varname  		= "CustomerID:$('#CustomerID').val()"
		fun 			= ["CustomerID", varname, fielddisplay, "/Morakot/DisbursementPlan/GetLoanID", "change"]
		
		hotfield.append(fun)
		return hotfield

	@staticmethod
	def hotField():
		hotfield 		= []

		fielddisplay 	= "$('#Currency').val(data.Currency);$('#Account').val(data.Account);$('#ApprovedAmount').val(data.ApprovedAmount)" 
		varname 		= "LoanAppID:$('#LoanAppID').val()"
		fun 			= ["LoanAppID", varname, fielddisplay, "/Morakot/DisbursementPlan/GetCurrency", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Amount').val(data.Amount)" 
		varname 		= "ApprovedAmount:$('#ApprovedAmount').val(),Type:$('#Type').val()"
		fun 			= ["Type", varname, fielddisplay, "/Morakot/DisbursementPlan/FullDrawdown", "change"]
		hotfield.append(fun)
		return hotfield