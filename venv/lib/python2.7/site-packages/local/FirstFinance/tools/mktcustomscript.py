from app.LoanContract.models 						import *
from app.Customer.models 							import *
from app.PD.models 									import *
from app.Currency.models 							import *
from app.LoanAmendment.models 						import * 
from app.RepaymentSchedule.models 					import *
from app.PD.models									import *
from app.ScheduleAddon.models						import *
from app.Company.models								import *
from app.LoanProduct.models 						import *

from local.FirstFinance.FollowUpCard.models			import *
from local.FirstFinance.ScheduleAddonPayment.models	import *

from app.tools.mktmoney 							import *
import app.tools.mktdate 							as mktdate
import app.tools.mktmoney 							as mktmoney
import app.tools.loantools.rescheduletools 			as mktreschedule
import local.FirstFinance.tools.mktaddon 			as mktaddon
import app.tools.mktsetting 						as mktsetting
from sqlalchemy 									import or_, and_,func

def isWithinValidDuration(ValueDate,DurationInDays):
	CurrentDate = 	mktdate.getBankDate()
	NumDay 		= 	mktdate.getDateDiff(From=ValueDate,To=CurrentDate)

	if NumDay <= DurationInDays:
		#within duration
		return True
	else:
		return False

def getPreviousDeductAmount(LoanID,PreviousDate):
	MaxDeductAmount		=	0
	LoanAmendObj 		=	MKT_LOAN_AMENDMENT.query.\
										filter(MKT_LOAN_AMENDMENT.LoanID == LoanID).\
										filter(MKT_LOAN_AMENDMENT.Operation == "AMT").\
										filter(MKT_LOAN_AMENDMENT.AddDeduct == "1").\
										filter(MKT_LOAN_AMENDMENT.Amount > 0)
	if PreviousDate:
		LoanAmendObj 	= 	LoanAmendObj.\
										filter(MKT_LOAN_AMENDMENT.AmendDate >= str(PreviousDate))
	if LoanAmendObj.first():
		for row in LoanAmendObj:
			MaxDeductAmount = float(MaxDeductAmount) + float(row.Amount)

	return MaxDeductAmount

def getLoanBalance(LoanID,AmendmentDate):
	Amount = 0
	ScheduleObj = MKT_REP_SCHEDULE.query.\
						filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
						filter(MKT_REP_SCHEDULE.CollectionDate < str(AmendmentDate)).\
						order_by(MKT_REP_SCHEDULE.CollectionDate.desc()).first()

	if ScheduleObj:
		Amount = ScheduleObj.Balance
	else:
		LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)
		Amount  = LoanObj.OutstandingAmount

	return float(Amount)

def getInterestSchedule(LoanID,AmendmentDate,Limit):
	Amount = 0
	ScheduleObj = MKT_REP_SCHEDULE.query.\
						filter(MKT_REP_SCHEDULE.LoanID==LoanID).\
						filter(MKT_REP_SCHEDULE.CollectionDate >= str(AmendmentDate)).\
						order_by(MKT_REP_SCHEDULE.CollectionDate.asc())

	if Limit:
		ScheduleObj = ScheduleObj.limit(Limit)

	if ScheduleObj.all():
		for row in ScheduleObj:
			Amount = Amount + row.Interest

	return float(Amount), ScheduleObj.all()

def getPenaltyOnNotice(LoanID,AmendmentDate,NoticeDate):
	PenaltyOnNotice = 0
	NumDayNotify 	= mktdate.getDateDiff(From=NoticeDate,To=AmendmentDate)
	NumDayPenalty 	= 0

	PENALTY_OPTION 		= "1"
	NUM_DAY_MUST_NOTIFY = mktsetting.getAppSetting('NUM_DAY_MUST_NOTIFY')
	NUM_DAY_MUST_NOTIFY = int(NUM_DAY_MUST_NOTIFY) if NUM_DAY_MUST_NOTIFY else 90

	LoanObj 		= MKT_LOAN_CONTRACT.query.get(LoanID)
	InterestRate 	= LoanObj.InterestRate
	LoanProduct 	= LoanObj.LoanProduct
	LoanBalance 	= getLoanBalance(LoanID=LoanID,AmendmentDate=AmendmentDate)
	OutstandingAmount = LoanObj.OutstandingAmount

	if NumDayNotify < NUM_DAY_MUST_NOTIFY:
		if PENALTY_OPTION == "1":#actual interest based on days notify
			LoanProductObj  = MKT_LOAN_PRODUCT.query.get(LoanProduct)
			InterestDayBasis = 1
			if LoanProductObj:
				InterestDayBasis = LoanProductObj.IntDayBasis

			NumDayPenalty 	= NUM_DAY_MUST_NOTIFY - NumDayNotify
			InterestPerDay 	= mktreschedule.getInterestPerDay(RatePerYear=float(InterestRate),OutstandingAmount=float(OutstandingAmount),InterestDayBasis=int(InterestDayBasis),Date=AmendmentDate)
			PenaltyOnNotice = InterestPerDay * NumDayPenalty

		elif PENALTY_OPTION == "2":#3 months interest ahead
			InterestAmount  = getInterestSchedule(LoanID=LoanID,AmendmentDate=AmendmentDate,Limit=3)
			PenaltyOnNotice = InterestAmount[0]

	Data = {"PenaltyOnNotice": float(PenaltyOnNotice),
			"NumDayNotify"	 : NumDayNotify,
			"NumDayPenalty"	 : NumDayPenalty}

	return Data

def getPenaltyOnAmend(LoanID,AmendmentDate,DeductAmount,Operation='TMN'):
	PenaltyOnAmend 				 = 0
	PENALTY_RATE 				 = mktsetting.getAppSetting('PENALTY_RATE')
	PENALTY_RATE 			  	 = float(PENALTY_RATE) if PENALTY_RATE else 3

	PreviousDeductAmountInMonths = 0
	NUM_DAY_OF_DEDUCT			 = mktsetting.getAppSetting('NUM_DAY_OF_DEDUCT')
	NUM_DAY_OF_DEDUCT 			 = int(NUM_DAY_OF_DEDUCT) if NUM_DAY_OF_DEDUCT else 6*30

	PreviousDate 				 = mktdate.getPreviousDay(Date=AmendmentDate,NumberOfDay=NUM_DAY_OF_DEDUCT)
	PreviousDeductAmountInMonths = getPreviousDeductAmount(LoanID=LoanID,PreviousDate=PreviousDate)

	AmountToPay 	= float(DeductAmount)
	if Operation == "TMN":
		AmountToPay = AmountToPay+float(PreviousDeductAmountInMonths)
	
	PenaltyOnAmend 	= AmountToPay * PENALTY_RATE / float(100)

	return PenaltyOnAmend

def getMaxDeductAmount(LoanID,Amount):	
	MAX_DEDUCT_PERCENTAGE 	= 	mktsetting.getAppSetting('MAX_DEDUCT_PERCENTAGE')
	MAX_DEDUCT_PERCENTAGE 	= 	float(MAX_DEDUCT_PERCENTAGE) if MAX_DEDUCT_PERCENTAGE else 70
	MaxDeductAmount 		=	0
	MaxDeductAmount 		=	Amount * MAX_DEDUCT_PERCENTAGE / float(100)
	MaxDeductAmount 		=	float(MaxDeductAmount) - getPreviousDeductAmount(LoanID=LoanID,PreviousDate="")

	return MaxDeductAmount
	
def getNoticeDate(LoanObj):
	CustomerID 				=	LoanObj.ContractCustomerID
	LoanID 					=	LoanObj.ID
	ACTION_REQUEST_AMENT	=	'4'
	CardObj					= 	MKT_FOLLOWUP_CARD.query.\
									filter(MKT_FOLLOWUP_CARD.CustomerID==CustomerID).\
									filter(MKT_FOLLOWUP_CARD.NextReviewType==ACTION_REQUEST_AMENT).\
									filter(MKT_FOLLOWUP_CARD.LoanID==LoanID).\
									order_by(MKT_FOLLOWUP_CARD.AmendDate.desc()).first()
	if CardObj:
		return CardObj.AmendDate
	else:
		return mktdate.getBankDate()

def getCustomAmendPenalty(**kwargs):
	try:
		WITHIN_LOAN_AGE 		= 	mktsetting.getAppSetting('WITHIN_LOAN_AGE') #age of loan (years), whether loan within 3 years or over 3 years (not term of loan)
		WITHIN_LOAN_AGE 		= 	float(WITHIN_LOAN_AGE) if WITHIN_LOAN_AGE else 3

		ContractObj				=	kwargs.get("LoanObj")
		DeductAmount 			=	kwargs.get("DeductAmount") if kwargs.get("DeductAmount") else 0
		AmendmentDate 			=	kwargs.get("AmendmentDate")
		Operation	 			=	kwargs.get("Operation")
		NoticeDate	 			=	kwargs.get("NoticeDate", mktdate.getBankDate())
		AddDeduct				=	kwargs.get("AddDeduct",'1')
		Simulation 				= 	kwargs.get("Simulation",True)

		ValueDate 				=	ContractObj.ValueDate
		Disbursed 				=	float(ContractObj.Disbursed)
		OutstandingAmount		=	float(ContractObj.OutstandingAmount)
		InterestRate 			=	float(ContractObj.InterestRate)
		AccrCurrentInt 			=	float(ContractObj.AccrCurrentInt)
		LoanID 					=	ContractObj.ID

		#Penalty Amend
		PenaltyOnNotice 		= 	float(0)
		PenaltyOnAmend 			= 	float(0)
		PenaltyAmend 			=	float(0)
		DictPenalty				=	{}

		#PD
		TotODAmount 			= 	0
		TotPrincipalDue 		= 	0
		TotInterestDue 			= 	0
		TotPenaltyDue 			= 	0
		TotChargeDue 			= 	0

		#Insurance
		Insurance 				= 	0
		DictInsurance 			= 	{}
		LoanBalance 			= 	getLoanBalance(LoanID=LoanID,AmendmentDate=AmendmentDate)

		#other		
		DictData 	 			=	{"PenaltyAmend"			: 	float(0),
							 		 "LoanBalance" 			: 	float(0),
							 		 "PDPrincipal" 			: 	float(0),
							 		 "PDInterest"			: 	float(0),
							 		 "PDPenalty"			:	float(0),
							 		 "PDCharged"			:	float(0),
							 		 "TotPD"				: 	float(0),
							 		 "Insurance"			:	float(0),
							 		 "TotPayment"			: 	float(0),
							 		 "PenaltyOnAmend"		:	float(0),
							 		 "PenaltyOnNotice"		:	float(0),
							 		 }

		PrinPD 					= 	getPrinciplePD(LoanID)

		# print "Simulation ", Simulation
 		if Simulation == True and Operation == "TMN": 			
 			DeductAmount = LoanBalance + PrinPD

		elif Simulation == False and Operation == "TMN":
			DeductAmount = OutstandingAmount

		# print "DeductAmount ", DeductAmount
		
		#check duration of loan contract		
		IsWithinDuration = isWithinValidDuration(ValueDate=ValueDate,DurationInDays=WITHIN_LOAN_AGE * 365)
		if IsWithinDuration:# Loan within 3 year
			if Operation == "AMT" and AddDeduct == '1':#partial Prepayment
				#check deduct amount if it exceed limitation
				MaxDeductAmount 	=	getMaxDeductAmount(LoanID=LoanID,Amount=Disbursed)

				if float(DeductAmount) <= float(MaxDeductAmount):#no penalty
					print "no penalty"
				elif float(DeductAmount) > float(MaxDeductAmount):#penalty
					#### find Penalty on amend ####
					PenaltyOnAmend 	= getPenaltyOnAmend(LoanID=LoanID,AmendmentDate=AmendmentDate,DeductAmount=DeductAmount,Operation=Operation)

					#### find Penalty on notice ####
					DictPenalty 	= getPenaltyOnNotice(LoanID=LoanID,AmendmentDate=AmendmentDate,NoticeDate=NoticeDate)
					PenaltyOnNotice = DictPenalty.get("PenaltyOnNotice")

			elif Operation == "TMN":#terminate
				# print "Terminate "
				# print "DeductAmount 1 ", DeductAmount
				# DeductAmount 		 = LoanBalance
				# print "DeductAmount 2 ", DeductAmount
				#### find Penalty on amend ####
				PenaltyOnAmend 	= getPenaltyOnAmend(LoanID=LoanID,AmendmentDate=AmendmentDate,DeductAmount=DeductAmount,Operation=Operation)

				#### find Penalty on notice ####
				DictPenalty 	= getPenaltyOnNotice(LoanID=LoanID,AmendmentDate=AmendmentDate,NoticeDate=NoticeDate)
				PenaltyOnNotice = DictPenalty.get("PenaltyOnNotice")

				#### find remain insurance ####		
				DictInsurance 	= 	mktaddon.getInsurance(LoanID=LoanID)	
				Insurance 		= 	DictInsurance.get("TotalPay")

		else:#Loan after 3 years
			if Operation == "AMT" and AddDeduct == '1':#partial Prepayment
				#check deduct amount if it exceed limitation
				MaxDeductAmount 	=	getMaxDeductAmount(LoanID=LoanID,Amount=Disbursed)

				if float(DeductAmount) <= float(MaxDeductAmount):#no penalty
					print "No penalty"

				elif float(DeductAmount) > float(MaxDeductAmount):#penalty
					#### find Penalty on notice ####
					DictPenalty 	= getPenaltyOnNotice(LoanID=LoanID,AmendmentDate=AmendmentDate,NoticeDate=NoticeDate)
					PenaltyOnNotice = DictPenalty.get("PenaltyOnNotice")

			elif Operation == "TMN":#terminate
				# DeductAmount 		 = LoanBalance
				#### find Penalty on notice ####
				DictPenalty 	= getPenaltyOnNotice(LoanID=LoanID,AmendmentDate=AmendmentDate,NoticeDate=NoticeDate)
				PenaltyOnNotice = DictPenalty.get("PenaltyOnNotice")

				#### find remain insurance ####		
				DictInsurance 	= 	mktaddon.getInsurance(LoanID=LoanID)	
				Insurance 		= 	DictInsurance.get("TotalPay")

		### TotalPenalty for amend (Penalty deduct over amount + penalty not notice) ####
		PenaltyOnAmend = mktmoney.toMoney(float(PenaltyOnAmend),mktmoney.getCurrencyObj(ContractObj.Currency))
		PenaltyOnAmend = float(PenaltyOnAmend.replace(',',''))

		PenaltyOnNotice = mktmoney.toMoney(float(PenaltyOnNotice),mktmoney.getCurrencyObj(ContractObj.Currency))
		PenaltyOnNotice = float(PenaltyOnNotice.replace(',',''))

		PenaltyAmend 	= float(PenaltyOnAmend) + float(PenaltyOnNotice)

		Insurance 		= mktmoney.toMoney(float(Insurance),mktmoney.getCurrencyObj(ContractObj.Currency))
		Insurance 		= float(Insurance.replace(',',''))

		DictData.update({"PenaltyAmend"		: float(PenaltyAmend),
						 "LoanBalance"		: float(LoanBalance),
						 "PenaltyOnAmend"	: float(PenaltyOnAmend),
						 "PenaltyOnNotice"	: float(PenaltyOnNotice),
						 "Insurance"		: float(Insurance),
						 "DictInsurance"	: DictInsurance,
						 "DictPenalty"		: DictPenalty
						 })

		#### find PD for principal interest and penalty ####
		PDObj = MKT_PAST_DUE.query.get("PD" + str(LoanID))
		if PDObj:
			TotODAmount 	= PDObj.TotODAmount
			TotPrincipalDue = PDObj.TotPrincipalDue
			TotInterestDue 	= PDObj.TotInterestDue
			TotPenaltyDue 	= PDObj.TotPenaltyDue
			TotChargeDue 	= PDObj.TotChargeDue

			PDDateObj = db.session.query(func.sum(MKT_PD_DATE.OutPenAmount).label("GracePDPenAmount")).\
									filter(MKT_PD_DATE.ODStatus.in_(["GRA"])).\
									filter(MKT_PD_DATE.ID=="PD" + str(LoanID)).first()

			if PDDateObj and PDDateObj.GracePDPenAmount !=None:
				TotPenaltyDue = TotPenaltyDue - PDDateObj.GracePDPenAmount
				TotODAmount   = TotODAmount - PDDateObj.GracePDPenAmount
				
			DictData.update({"PDPrincipal" 			: 	float(TotPrincipalDue),
					 		 "PDInterest"			: 	float(TotInterestDue),
					 		 "PDPenalty"			:	float(TotPenaltyDue),
					 		 "PDCharged"			:	float(TotChargeDue),
					 		 "TotPD"				:	float(TotODAmount)})

		#### TotPayment after amend
		TotPayment = float(PenaltyAmend) + float(TotODAmount) + float(Insurance)
		DictData.update({"AccrCurrentInt": AccrCurrentInt})
		if Operation == "TMN":
			TotPayment = TotPayment + LoanBalance + AccrCurrentInt
		elif Operation == "AMT":
			TotPayment = TotPayment + float(DeductAmount)

		DictData.update({"TotPayment" :	float(TotPayment)})

		return DictData
		
	except Exception, e:
		raise e		

def getPrinciplePD(LoanID):
	PrincipalDue 	= float(0)
	PDObj 			= db.session.query(MKT_PAST_DUE.TotPrincipalDue,MKT_PD_DATE.ID).\
										filter(MKT_PAST_DUE.LoanID==LoanID).\
										join(MKT_PD_DATE,MKT_PD_DATE.ID==MKT_PAST_DUE.ID).\
										first()

	if PDObj:
		PrincipalDue = float(PDObj.TotPrincipalDue)

	return PrincipalDue



def getCustomTerminationPenalty(**kwargs):
	try:
		
		NumOfDay 				=	kwargs.get("NumOfDay")				#not use
		PaidOffDate 			=	kwargs.get("PaidOffDate")
		LoanObj 				=	kwargs.get("LoanObj")
		NewStr 					=	kwargs.get("NewStr")				#['CUSTOM','TMN']
		AmendmentAmount 		=	kwargs.get("AmendmentAmount", 0)
		AddDeduct 				=	kwargs.get("AddDeduct")				#not use

		# print "NumbOfDay ", NumOfDay
		# print "PaidOffDate ", PaidOffDate
		# print "NewStr ", NewStr
		# print "AmendAmount, DeductAmount ", AmendmentAmount
		# print "AddDeduct ", AddDeduct
		BankDate = mktdate.getBankDate()
		Result = float(0)
		LoanObj 					=	MKT_LOAN_CONTRACT.query.\
												filter(MKT_LOAN_CONTRACT.MaturityDate >= str(BankDate)).\
												filter(MKT_LOAN_CONTRACT.ID == LoanObj.ID).first()
		if LoanObj:
			DeductAmount 			=	float(str(AmendmentAmount).replace(',',''))
			AmendmentDate 			=	PaidOffDate
			Operation 				=	NewStr[1] if len(NewStr) > 1 else ""
			NoticeDate				=	getNoticeDate(LoanObj=LoanObj)

			Condition 				=	{"LoanObj"		: LoanObj,
										 "DeductAmount"	: DeductAmount,
										 "AmendmentDate": AmendmentDate,
										 "Operation"	: Operation,
										 "NoticeDate"	: NoticeDate,
										 "AddDeduct"	: AddDeduct,
										 "Simulation"	: False
										}

			DictPenalty 			=	getCustomAmendPenalty(**Condition)
			Result = float(DictPenalty.get("PenaltyAmend"))

		return Result

	except Exception, e:
		raise e
		