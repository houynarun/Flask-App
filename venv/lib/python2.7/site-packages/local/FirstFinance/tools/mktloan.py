from app 									import db
from app.LoanApplication.models 			import *
from app.LoanContract.models 				import *
from app.LoanAmendment.models 				import MKT_LOAN_AMENDMENT
from local.FirstFinance.ScheduleAddonPayment.models	import *
from app.RepaymentSchedule.models 			import MKT_REP_SCHEDULE
from sqlalchemy 							import func

from local.FirstFinance.LoanApproval.models 				import *

import app.tools.mktsetting 				as mktsetting
import app.tools.mktdb 						as mktdb
import app.tools.mktaccounting				as mktaccounting
import app.tools.loantools.rescheduletools 	as mktreschedule
import app.tools.mktloanapplication			as mktloanapp
import app.tools.mktdate 					as mktdate
import app.tools.user 						as mktuser
import app.tools.mktaudit 					as mktaudit
import local.FirstFinance.tools.mktaddon 	as mktaddon
import app.tools.mktaudit 			 		as mktaudit


def getLoanExposure(LoanAppObj, Type = "MainBorrower"):
	"""
		This function get exposure amount of loan
	"""
	ApprovedAmount 		= 0
	DisbursedAmount 	= 0
	OutstandingAmount 	= 0
	OutstandingCommit 	= 0
	Exposure 			= 0
	ReportingRateObj 	= mktaccounting.getReportingRateObj()
	ApprovedStatus 		= ['3']
	NewStatus 			= ['0','1','2']
	if LoanAppObj:
		# Loan Application Object
		if Type == "MainBorrower":
			LoanAppID 		= LoanAppObj.ID
			ContractObj 	= MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.LoanApplicationID == LoanAppID,\
															 MKT_LOAN_CONTRACT.DisbursedStat == "Y",\
															 MKT_LOAN_CONTRACT.OutstandingAmount > 0).all()
			ExchangeRate 		= getExchangeRateEquivalent(LoanAppID)
			if ContractObj:
				for row in ContractObj:
					Currency 			= row.Currency
					ApprovedAmount 		= float(row.ApprovedAmount)
					DisbursedAmount 	+= float(row.Disbursed)
					OutstandingAmount 	+= float(row.OutstandingAmount)

				OutstandingCommit 		= ApprovedAmount - DisbursedAmount
				Exposure 				+= (OutstandingAmount + OutstandingCommit)*ExchangeRate
			else:
				# Currency 		= LoanAppObj.Currency
				# ExchangeRate 	= float(ReportingRateObj.get(Currency,'USD'))
				ApprovedAmount 	= float(LoanAppObj.EquivAmount if LoanAppObj.EquivAmount else 0)
				Exposure 		= ApprovedAmount
		# Loan Co Borrower Object
		elif Type == "CoBorrower":
			# Currency 		= LoanAppObj.CBCurrency
			# ExchangeRate 	= float(ReportingRateObj.get(Currency,'USD'))
			ApprovedAmount 	= float(LoanAppObj.CBEquivAmount if LoanAppObj.CBEquivAmount else 0)
			Exposure 		= ApprovedAmount
	return Exposure

def getNDI(CusObj):
	"""
		NDI = Income - Expense - Total Monthly Repayment (liability)
	"""
	NDI 			= 0
	if CusObj:
		Currency 	= CusObj.Currency if CusObj.Currency else ""
		Income 		= CusObj.MonthlyIncome if CusObj.MonthlyIncome else 0
		Expense 	= CusObj.TotalExpenses if CusObj.TotalExpenses else 0
		MonthlyRep 	= CusObj.MonthlyRep if CusObj.MonthlyRep else 0
		MonthlyRep2 = CusObj.MonthlyRep2 if CusObj.MonthlyRep2 else 0
		NDI 		= Income - Expense - MonthlyRep - MonthlyRep2

		# convert Total NDI to based currency
		NDI 		= toBaseCurrency(float(NDI), Currency)
	return NDI 

def getMonthlyRepayment(**kwargs):
	RepaymentMode 	= kwargs.get('RepaymentMode','')
	Principal 		= kwargs.get('Principal',0)
	Interest 		= kwargs.get('Interest',0)
	Term 			= kwargs.get('Term',0)
	FreqType 		= kwargs.get('FreqType','')
	Frequency 		= kwargs.get('Frequency',0)
	AppDate 		= kwargs.get('AppDate','')
	LoanProduct 	= kwargs.get('LoanProduct','')

	try:
		MonthlyRepayment= 0
		Principal 	= float(Principal)
		Interest 	= float(Interest)
		Tenor 		= mktloanapp.getNumberOfInstallment(Term, Frequency, FreqType, AppDate)

		if RepaymentMode == '2': #EMI or Annuity mode
			MonthlyRepayment = mktreschedule.getRepaymentAnnuity(Principal 	= Principal,
																 Interest 	= Interest,
																 Tenor 		= Tenor)
			
		if RepaymentMode in ['1','3']: # Fixed principal (Declining) or Balloon
			MonthlyRepayment = mktreschedule.getRepaymentDeclining(	Principal 	= Principal,
																	Interest 	= Interest,
																	Tenor 		= Tenor,
																	LoanProduct = LoanProduct,
																	AppDate 	= AppDate,
																	NumOfDay 	= 30)
			
		return MonthlyRepayment
	except Exception as e:
		db.session.close()
		print 'Error: %s'%e

def getLVR(TotalExposure, CollateralValue):
	"""
		LVR = TotalExposure / CollateralValue
		* TotalExposure = new_loan_application_approve_amount + (outstanding_amount + outstanding_commitment) of all loan using this collateral
		* CollateralValue = total of min of current_market_value or purchase_price of all collateral details under collateral
		* OutstandingCommitment = approve_amount - disbursed_amount
	"""
	TotalExposure 	= float(TotalExposure)
	CollateralValue = float(CollateralValue)
	LVR 			= 0
	try:
		LVR = (TotalExposure / CollateralValue) * 100
	except Exception as e:
		LVR = 0

	return LVR

def getMonthlyRepToNDI(TotalMonthlyRep=0, TotalNDI=0):
	"""
		1. DSR (Debt Service Ratio) or Monthly Repayment to NDI = Total repayment to all loans by the clients (and spouse) / NDI
			DSR a ratio to measure whether customer can afford to pay back loan or not. 
			DSR <= 65%
		2. NDI = Total Income (of the borrower and Spouse) - total Expenses (of the borrower and the spouse) - total monthly repayment on liabilities (of the borrower and the spouse)
			(different from above Total monthly repayment, this refers to liabilities field in Customer module)
		3. Monthly Repayment can be calculated based on repayment Mode
			(refer to function getMonthlyRepayment() for formular)
		** for more info, refer to BRD01, section BRD01-08, page 09 of FirstFinance BRD
		** Noted that this customization in FirstFinance is only for USD dollar
	"""
	TotalMonthlyRep = float(TotalMonthlyRep)
	TotalNDI 		= float(TotalNDI)
	MonthlyRepToNDI = 0
	try:
		MonthlyRepToNDI = (TotalMonthlyRep / TotalNDI) * 100
	except Exception as e:
		MonthlyRepToNDI = 0

	return MonthlyRepToNDI

def toBaseCurrency(Amount=0, Currency=""):
	ReportingRateObj = mktaccounting.getReportingRateObj()
	ExchangeRate 	 = float(ReportingRateObj.get(Currency,0))

	Amount = Amount * ExchangeRate
	return Amount

def moveLoanApprovalToHist(LoanApplicationID,opt=''):
	"""
		Move loan approval to history
		@Param: Loan Application ID of Loan Contract
	"""
	try:

		LoanApprovalObj = MKT_LOAN_APPROVAL.query.filter(MKT_LOAN_APPROVAL.LoanApplicationID==LoanApplicationID).all()
		AppID = [item.ID for item in LoanApprovalObj]
		if LoanApprovalObj:
			AppID = [str(item.ID) for item in LoanApprovalObj]
			LoanApplicationObj = MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID==LoanApplicationID).first()

			for ID in AppID:
				mktaudit.moveAUTHtoHIST(MKT_LOAN_APPROVAL, MKT_LOAN_APPROVAL_HIST, ID, Curr=LoanApplicationObj.Curr)
				if opt=='TMN':
					# Delete record in Live in Loan Application
					mktaudit.deleteAUTH(MKT_LOAN_APPROVAL, ID)
	except Exception as e:
		raise e

def setClosedLoanApplication(LoanID):
	""" method to set loan application status to closed
		Args: 
			LoanID : Locan Contract ID

		Returns:
			Boolean value

		Raises:
			n/a
	"""

	LoanContractObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.ID==LoanID).first()

	if LoanContractObj:
		LoanApplicationID = LoanContractObj.LoanApplicationID
		moveLoanApprovalToHist(LoanApplicationID,opt='TMN')

	ListLoanApp     = []
	LoanTopUpObj    = MKT_LOAN_AMENDMENT.query.filter(  MKT_LOAN_AMENDMENT.Operation == "AMT",          # Operation Amendment
														MKT_LOAN_AMENDMENT.AddDeduct == "2",            # Mode Add
														MKT_LOAN_AMENDMENT.LoanAppID != "",             # Has Loan Application ID
														MKT_LOAN_AMENDMENT.LoanID == LoanID,# Belong to Loan Contract
														MKT_LOAN_AMENDMENT.Amount > 0).\
												distinct(MKT_LOAN_AMENDMENT.LoanAppID)
	if LoanTopUpObj.first():
		ListLoanApp     = [item.LoanAppID for item in LoanTopUpObj]

	LA_STATUS_CLOSED = "6"
	if ListLoanApp:
		StatusClose = LA_STATUS_CLOSED # Loan Application Closed Status
		for ID in ListLoanApp:
			mktdb.updateRecord(MKT_LOAN_APPLICATION,[MKT_LOAN_APPLICATION.ID == ID],{'AppStatus':StatusClose})
			# Move record in Live to Hist in Loan Application
			mktaudit.moveAUTHtoHIST(MKT_LOAN_APPLICATION, MKT_LOAN_APPLICATION_HIST, ID)
			mktaudit.moveAUTHtoHIST(MKT_LOAN_CO_BORROWER, MKT_LOAN_CO_BORROWER_HIST, ID)
			mktaudit.moveAUTHtoHIST(MKT_LOAN_COLLATERAL, MKT_LOAN_COLLATERAL_HIST, ID)
			mktaudit.moveAUTHtoHIST(MKT_GUARANTOR, MKT_GUARANTOR_HIST, ID)
			# Delete record in Live in Loan Application
			mktaudit.deleteAUTH(MKT_LOAN_APPLICATION, ID)
			mktaudit.deleteAUTH(MKT_LOAN_CO_BORROWER, ID)
			mktaudit.deleteAUTH(MKT_LOAN_COLLATERAL, ID)
			mktaudit.deleteAUTH(MKT_GUARANTOR, ID)

		return True
	else:
		return False

def getListLoanTopUp():
	try:
		SystemBankDate 	= mktsetting.getBankDate()
		LoanMaturityList 	= MKT_LOAN_MATURITY.query.filter(MKT_LOAN_MATURITY.LoanStatus == 'MRT').\
													filter(MKT_LOAN_MATURITY.Date == SystemBankDate).all()
		if LoanMaturityList:
			for loanObj in LoanMaturityList:
				setClosedLoanApplication(loanObj.ID)
				Condition={"LoanID":loanObj.ID}
				mktaddon.moveAddonToHist(**Condition)
			db.session.commit()
	except Exception as e:
		raise

def autoCloneLAToLC(**kwargs):
	'''
	-Auto create co-borrower ,guarantor ,collateral

	Option = Y ,copy co-borrower to MKT_LOAN_CO_BORROWER
	Option = N or "" ,no copy
	Table  = Table Name you want to insert

	'''
	LoanAppID 	=	kwargs.get('LoanAppID','')
	LCID 		=	kwargs.get('LCID','')
	Option 		=	kwargs.get('Option','')
	Table 		=	kwargs.get('Table','') # run backgroun and auto copy to Live record
	LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanAppID)
	
	if Table == 'HIST':
		"""
		if Table ==HIST need LOAN ID is hist

		ex. LoanID=LA18030600639@0

		"""
		LoanAppObj = MKT_LOAN_APPLICATION_HIST.query.get(LoanAppID)
	if LoanAppObj:
		#auto create co-borrower, guarantor, and collatateral
		GuarantorObj 	= MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID == LoanAppID)
		CollateralObj 	= MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID == LoanAppID)
		
		GuarantorDict 	= {}
		CollateralDict  = {}
		SpouseDict 		= {}

		# UserID 			=	mktuser.getUser().ID 
		# DateTime 		=	mktdate.getDateTimeNow()

		UserID 			=	"System"
		DateTime 		=	mktdate.getDateTimeNow()
		Branch			=	LoanAppObj.Branch

		MKTCoborrower  	= 	MKT_LOAN_CO_BORROWER
		MKTGuarantor 	= 	MKT_GUARANTOR
		MKTCollateral 	=	MKT_LOAN_COLLATERAL

		if Table == 'INAU':
			MKTCoborrower  	= 	MKT_LOAN_CO_BORROWER_INAU
			MKTGuarantor 	= 	MKT_GUARANTOR_INAU
			MKTCollateral 	=	MKT_LOAN_COLLATERAL_INAU

		if Table == 'HIST':
			MKTCoborrower  	= 	MKT_LOAN_CO_BORROWER_HIST
			MKTGuarantor 	= 	MKT_GUARANTOR_HIST
			MKTCollateral 	=	MKT_LOAN_COLLATERAL_HIST

		Guarantors 		= MKTGuarantor.query.filter(MKTGuarantor.ID == LCID)
		Collaterals    	= MKTCollateral.query.filter(MKTCollateral.ID == LCID)

		#check if co-borrower and quarantor already create for that loan contract
		if Option=='Y':
			CoBorrowerObj 	= MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID == LoanAppID)
			CoBorrowers 	= MKTCoborrower.query.filter(MKTCoborrower.ID == LCID)
			CoBorrowerDict  = {}
			if not CoBorrowers.first():
				for row in CoBorrowerObj:
					CoBorrowerDict = row.__dict__
					CoBorrowerDict.update({"Branch"		: Branch,
										   "Status"		: "AUTH",
										   "Curr"		: "0",
										   "Inputter"	: UserID,
										   "Authorizer"	: UserID,
										   "Createdon"  : DateTime,
										   "Authorizeon": DateTime,
										   "ID"			: LCID})

					if '_sa_instance_state' in CoBorrowerDict:
						del CoBorrowerDict['_sa_instance_state']

					# mktdb.insertTable(MKTCoborrower,CoBorrowerDict)
					db.session.add(MKTCoborrower(**CoBorrowerDict))

		if not Guarantors.first():
			for row in GuarantorObj:
				GuarantorDict = row.__dict__
				GuarantorDict.update({	"Branch"		: Branch,
										"Status"		: "AUTH",
										"Curr"			: "0",
										"Inputter"		: UserID,
										"Authorizer"	: UserID,
										"Createdon"  	: DateTime,
										"Authorizeon"	: DateTime,
										"ID"			: LCID,
									 })

				if '_sa_instance_state' in GuarantorDict:
					del GuarantorDict['_sa_instance_state']

				# mktdb.insertTable(MKTGuarantor,GuarantorDict)
				db.session.add(MKTGuarantor(**GuarantorDict))

		if not Collaterals.first():
			for row in CollateralObj:
				CollateralDict = row.__dict__
				CollateralDict.update({"Branch"			: Branch,
										"Status"		: "AUTH",
										"Curr"			: "0",
										"Inputter"		: UserID,
										"Authorizer"	: UserID,
										"Createdon"  	: DateTime,
										"Authorizeon"	: DateTime,
										"ID"			: LCID,})

				if '_sa_instance_state' in CollateralDict:
					del CollateralDict['_sa_instance_state']

				# mktdb.insertTable(MKTCollateral,CollateralDict)
				db.session.add(MKTCollateral(**CollateralDict))

		if LoanAppObj.SpouseID and  LoanAppObj.SpouseID != '__None':
			CBObj 			=	MKTCoborrower.query.filter(MKTCoborrower.CoBorrowerID==LoanAppObj.SpouseID,
																 MKTCoborrower.ID==LCID)
			if not CBObj.first():
				SpouseDict.update({	"Branch"		: Branch,
									"Status"		: "AUTH",
									"Curr"			: "0",
									"Inputter"		: UserID,
									"Authorizer"	: UserID,
									"Createdon"  	: DateTime,
									"Authorizeon"	: DateTime,
									"ID"			: LCID,
									"CoBorrowerID"	: LoanAppObj.SpouseID,
									"RelationIndicator" : "1"
									})

				if '_sa_instance_state' in SpouseDict:
					del SpouseDict['_sa_instance_state']

				# mktdb.insertTable(MKTCoborrower,SpouseDict)
				db.session.add(MKTCoborrower(**SpouseDict))
		db.session.commit()

def getCommitment(LoanAppID):
	""" method to check commitment amount by Loan application
		Args: 
			LoanAppID : Loan Application ID
		Returns:
			Dictionary:
				* CommitmentAmount : ApproveAmount - Disbursed (Loan Contract)
				* RepScheduleAmount : Principal + Interest (Repayment Schedule)
		Raises:
			n/a
	"""
	BankDate = mktsetting.getBankDate()
	LoanObj 			= ''
	RepSchedule 		= ''
	CommitmentAmount 	= 0
	ReScheduleAmount 	= 0
	CountSchedule 		= 0
	ExchangeRate 		= 0
	EquivApprovedAmount	= 0
	EquivDisbursed 		= 0
	EquivRepPrincipal 	= 0
	ExquivInterest 		= 0
	Amount = {}
	ExchangeRate = getExchangeRateEquivalent(LoanAppID)
	LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.LoanApplicationID==LoanAppID).first()
	# Get Next installment Amount
	RepSchedule = MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID==LoanObj.ID).\
										filter(MKT_REP_SCHEDULE.CollectionDate >= BankDate).\
										order_by(MKT_REP_SCHEDULE.No.asc()).first()
	# Count number of Installment not yet collect
	CountRepSchedule = db.session.query(func.count(MKT_REP_SCHEDULE.LoanID).label("CountSchedule")).\
										filter(MKT_REP_SCHEDULE.LoanID==LoanObj.ID).\
										filter(MKT_REP_SCHEDULE.CollectionDate >= BankDate).\
										group_by(MKT_REP_SCHEDULE.LoanID).first()

	if LoanObj:
		# Calculate EquivAmount from Loan Application
		EquivApprovedAmount = float(LoanObj.ApprovedAmount)*ExchangeRate
		EquivDisbursed = float(LoanObj.Disbursed)*ExchangeRate

		CommitmentAmount = EquivApprovedAmount - EquivDisbursed
		Amount.update({"CommitmentAmount":CommitmentAmount})
	if RepSchedule:
		# Calculate EquivAmount from Loan Application
		EquivRepPrincipal = float(RepSchedule.Principal)*ExchangeRate
		EquivInterest = float(RepSchedule.Interest)*ExchangeRate

		ReScheduleAmount = EquivRepPrincipal + EquivInterest
		Amount.update({"RepScheduleAmount":ReScheduleAmount})
	if CountRepSchedule:
		CountSchedule = CountRepSchedule.CountSchedule
		Amount.update({"CountSchedule":CountSchedule})
	return Amount

def getExchangeRateEquivalent(LoanAppID):
	""" method to calculate exchange rate from Equivalent field in loan application
		Args: 
			LoanAppID : Loan Application ID
		Returns:
			ExchangeRate : EquivAmount/Amount
		Raises:
			n/a
	"""
	ExchangeRate = 1
	LoanAppObj = MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID==LoanAppID).first()
	if LoanAppObj:
		ExchangeRate = float(LoanAppObj.EquivAmount) / float(LoanAppObj.Amount)
	return ExchangeRate
