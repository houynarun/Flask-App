from app.LoanApplication.models 					import MKT_LOAN_APPLICATION
from local.FirstFinance.LoanApproval.models 		import MKT_LOAN_APPROVAL
from local.FirstFinance.FollowUpCard.models			import *
from local.FirstFinance.FollowUp.models	 			import *
from local.FirstFinance.SurveyQuestion.models		import *
from local.FirstFinance.ScheduleAddonPayment.models	import *
from local.FirstFinance.SurveyAnswerDetail.models	import *
from local.FirstFinance.SurveyQuestion.models		import *
from app.LoanContract.models						import *
from app.ScheduleAddon.models						import *
import app.tools.mktdate 							as mktdate
from flask 											import Markup
import local.FirstFinance.tools.mktaddon 			as mktaddon
from app.PD.models 									import * 
from sqlalchemy 									import *

from app.User.models 								import MKT_USER


def getReviewedInfo(args):
	LoanID 	= args[0]
	LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanID)
	Info 	= ""
	Index 	= 1
	if LoanAppObj:
		ACTION_REVIEWED 	= 	"1"
		LoanApprovalObj = MKT_LOAN_APPROVAL.query.filter(MKT_LOAN_APPROVAL.LoanApplicationID == LoanID,\
														MKT_LOAN_APPROVAL.Action == ACTION_REVIEWED).all()
		if LoanApprovalObj:
			for row in LoanApprovalObj:
				ReviewedBy = row.Inputter
				ReviewedDate = str(row.Createdon)
				Info += getUserInfo(Index,ReviewedBy,ReviewedDate)
				Index += 1

		return Markup(Info)

def getApprovedInfo(args):
	LoanID 	= args[0]
	LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanID)
	Info 	= ""
	Index 	= 1
	if LoanAppObj:
		ACTION_APPROVED 	= 	"2"
		ACTION_REJECTED 	= 	"3"
		LoanApprovalObj = MKT_LOAN_APPROVAL.query.filter(MKT_LOAN_APPROVAL.LoanApplicationID == LoanID,\
														MKT_LOAN_APPROVAL.Action == ACTION_APPROVED).all()
		if LoanApprovalObj:
			for row in LoanApprovalObj:
				ApprovedBy 	= row.Inputter
				ApprovedDate = str(row.Createdon)
				Info += getUserInfo(Index,ApprovedBy,ApprovedDate)
				Index += 1

		return Markup(Info)

def getUserInfo(Index,UserID,ReviewedDate):
	UserObj = MKT_USER.query.get(UserID)
	Info = ""
	if UserObj:
		Info ="<b>%s. %s</b><br>(%s)<br>"%(Index,UserObj.DisplayName,ReviewedDate)

	return Info


#use in Follow up card report
#used for dynamic link based on whether activity already take action or pending
def getFollowUpLink(args):
	CardID			=	args[0]
	# print "Card ID is ",CardID
	CardObj 		= 	MKT_FOLLOWUP_CARD.query.get(CardID)
	# print 'Card Obj: ',CardObj ok
	# if ''
	FollowUpObj 	=	MKT_FOLLOWUP.query.\
									filter(MKT_FOLLOWUP.CardID == CardID).first()
	# if FollowUpObj:
	# 	print "ID: ",FollowUpObj.ID


	# print 'Followup Obj is ',FollowUpObj ok

  	ModuleLinkDict = {"1": {"Tab": "FollowUp-Survey"		, "Module": "FollowUpSurvey"},
	  				  "2": {"Tab": "FollowUp-Review"		, "Module": "FollowUpReview"},
	  				  "3": {"Tab": "FollowUp-PAR"			, "Module": "FollowUpPar"},
	  				  "4": {"Tab": "FollowUp-Card"			, "Module": "FollowUpCard"},
	  				  "5": {"Tab": "FollowUp-Card"			, "Module": "FollowUpCard"}
	  				 }

	Url 		= 	""
	Tab 		= 	""
	Text 		=	""
	OTHER 		=	"4"
	REQUEST 	= 	"5"

 	if FollowUpObj:# already update followup
 		#link to edit follow up
 		#label that need to show on report is done
 		# FollowUpObj 	= 	FollowUpObj.first()
 		FollowUpID 		=	FollowUpObj.ID
 		Text 			= 	"<span class='text-success'>Completed</span>"

 		# if it is followup PAR Check if it is status complete or not,
 		# if not change text to Not Complete.
 		if 'CFP' in FollowUpID and FollowUpObj.Complete=='N':
 			Text 		= 	"<span class='text-success'>Not Completed</span>"
 		Type 			= 	CardObj.NextReviewType

		ModuleDict  	= 	ModuleLinkDict.get(Type)
		Tab				=	ModuleDict.get("Tab")
		Url 			=	"%s/Edit/%s" % (ModuleDict.get("Module"),FollowUpID)

		if Type == OTHER or Type == REQUEST:
			Text	=	"Edit"
			Url 	=	"%s/Edit/%s" % (ModuleDict.get("Module"),CardID)

	else:#not yet update followup
		#link to create follow up for card 
		#label that need to show on report is pending
		Text 			= 	"<span class='text-warning'>Pending</span>"
		Type 			= 	CardObj.NextReviewType

		ModuleDict  	= 	ModuleLinkDict.get(Type)

		Tab				=	ModuleDict.get("Tab")
		Url 			=	"%s/New/?CardID=%s" % (ModuleDict.get("Module"),CardID)

		if Type == OTHER or Type == REQUEST:
			Text	=	"Edit"
			Url 	=	"%s/Edit/%s" % (ModuleDict.get("Module"),CardID)

  	Link = """
	 <a href='javascript:void(0)' onClick=CustomClickView('%s','%s')><u>%s</u></a> 
	""" % (Tab,Url,Text)

  	return Markup(Link)

#use in Follow up card report
#used as reminder label for upcoming and today activity
def getReminderLabel(args):
	CardID 		= args[0]
	Date 		= args[1]

	Reminder 	= ""

	NUM_OF_DAY 			= 2
	CurrentDate 		= mktdate.getDateISO()
	NextDate 			= mktdate.getNextDay(CurrentDate,NUM_OF_DAY)

	if Date == str(CurrentDate):
		Reminder = '<span class="label label-tag label-success">Today</span>'

	if Date <= str(NextDate) and Date > str(CurrentDate):
		Reminder = '<span class="label label-tag label-warning">Upcoming</span>'

	return "%s %s" % (CardID, Reminder)

#use in survey statfaction report
#used for count Survey Answer (Very Good, Good, etc)
#getSurveyAnswer(FollowUpID,AnswerID,Percentage)
#Percentage=Y, will calculate answer to percentage
def getSurveyAnswer(args):
	FollowUpID 	= args[0]
	Answer 		= args[1]
	Percentage  = args[2]

	GOOD_BAD_TYPE= "2"

	SurveyObj 	= MKT_FOLLOWUP_SURVEY.query.\
								filter(MKT_FOLLOWUP_SURVEY.ID == FollowUpID).\
								filter(MKT_FOLLOWUP_SURVEY.Answer == str(Answer))

	QuestionObj = MKT_SURVEY_QUESTION.query.\
								filter(MKT_SURVEY_QUESTION.AnswerType == GOOD_BAD_TYPE)

	TotalQuestion 	= QuestionObj.count()
	NumOfAnswer 	= SurveyObj.count() if SurveyObj.all() else 0

	Result = ""

	if Percentage == "Y":
		Result = (NumOfAnswer * 100) / float(TotalQuestion)
		Result = "%.2f %%" % Result

	else:
		Result = NumOfAnswer

	return Result

#use in loan area report
#used for get followup PAR information
#getFollowUpPAR(LoanID,FIELD_NAME_OF_FOLLOWUP_PAR_TABLE)
def getFollowUpPAR(args):
	LoanID = args[0]
	Field  = args[1]
	Result = ""

	LoanObj = MKT_LOAN_CONTRACT.query.get(LoanID)

	if LoanObj:
		CustomerID = LoanObj.ContractCustomerID
		FollowUpObj = db.session.query(MKT_FOLLOWUP,
										  MKT_FOLLOWUP_PAR
										  ).\
										  join(MKT_FOLLOWUP_PAR,
										  	   MKT_FOLLOWUP_PAR.ID == MKT_FOLLOWUP.ID
									  	  ).\
									  	  filter(MKT_FOLLOWUP.CustomerID == CustomerID).\
									  	  order_by(MKT_FOLLOWUP.ReviewDate.desc()).\
									  	  first()
		if FollowUpObj:
		  	ValueDict = {"RootCause": {"1": "1 - Financial Hardship",
		  							   "2": "2 - Overstated Incomes",
		  							   "3": "3 - Multiple Loans",
		  							   "4": "4 - Bad Character",
		  							   "5": "5 - Others"},

					   	 "LoanStatus": {"1": "1 - Sell Property",
		  							   "2": "2 - Court Case",
		  							   "3": "3 - Discussion",
		  							   "4": "4 - Paid on time-followup",
		  							   "5": "5 - Restructured",
		  							   "6": "6 - Rescheduled"},
		  				}

			PARObj 	= FollowUpObj[1]
			Result  = getattr(PARObj, Field)

			if Field in ValueDict:
				ListDict = ValueDict.get(Field)
				Result = ListDict.get(Result)			

	return Result

# Report Client Followup for export data
def getAnswer(args):
	# FollowupID 		= args[0]
	# Qid 			= args[1]
	AID  = args[0]
	answ = ''
	if AID in ('1','2','3','4','5','6','7'):
		AnswerDeObj 	= MKT_ANSWER_DE.query.filter(MKT_ANSWER_DE.ID==AID).first()
		if AnswerDeObj:
			answ 		= AnswerDeObj.Description
		else:
			# user did not answer this question
			answ 		= 'This Question has not yet been answered'
	else:
		# Answer is a free text type
		answ 			= AID
	return answ

#----------------INSURANCE---------------------#
def getPrepaidPaymentAmount(args):
	LoanID 		= 	args[0]
	Amount 		=	0
	PaymentObj 	=	MKT_SCHEDULE_ADDON_PAYMENT.query.\
						filter(MKT_SCHEDULE_ADDON_PAYMENT.LoanID == LoanID)

	for row in PaymentObj:
		Amount+= float(row.Amount)

	return "%.2f" % Amount

def getRemainPaymentAmount(args):
	AddonID 	= 	args[0]	
	Amount 		=	0

	AddonObj 	=	MKT_SCHEDULE_ADDON.query.\
						filter(MKT_SCHEDULE_ADDON.ID == AddonID).first()

	Prepaid 	=	getPrepaidPaymentAmount([AddonObj.LoanID])

	Amount += float(Prepaid) - (float(AddonObj.ActualCollection) + float(AddonObj.PastDue))

	return "%.2f" % Amount

def getActualCollectionAmountLink(args):
	AddonID		=	args[0]
	AddonObj 	=	MKT_SCHEDULE_ADDON.query.\
						filter(MKT_SCHEDULE_ADDON.ID == AddonID).first()

	Tab = "Insurance-Collection"
	Url = "Report/R030?OprBranch=EQ&Branch=%s&OprID=EQ&ID=%s%s&OprLoanID=EQ&LoanID=%s" % (AddonObj.Branch,AddonObj.ID, AddonObj.AddonType,AddonObj.LoanID)
	Text= "%.2f" % AddonObj.ActualCollection
	Link = """
	 <a href='javascript:void(0)' onClick=CustomClickView('%s','%s')><u>%s</u></a> 
	""" % (Tab,Url,Text)

	return Link

def getPastDueAmountLink(args):
	AddonID		=	args[0]
	AddonObj 	=	MKT_SCHEDULE_ADDON.query.\
						filter(MKT_SCHEDULE_ADDON.ID == AddonID).first()

	Tab = "Insurance-PastDue"
	Url = "Report/R031?OprBranch=EQ&Branch=%s&OprID=EQ&ID=%s%s&OprLoanID=EQ&LoanID=%s" % (AddonObj.Branch,AddonObj.ID, AddonObj.AddonType,AddonObj.LoanID)
	Text= "%.2f" % AddonObj.PastDue
	Link = """
	 <a href='javascript:void(0)' onClick=CustomClickView('%s','%s')><u>%s</u></a> 
	""" % (Tab,Url,Text)
	return Link


def getInsuranceInfo(args):
	""" Method to get insurance information such as 
		1. TotalPay = amount that customer need to pay for FF (TotalPay = Prepaid - Actual Collect)
		2. Prepaid  = amount that FF buy for customer
		3. Actual 	= amount that FF collect from customer 
		4. PastDue  = amount that customer owe FF
		5. Remain  	= amount that remain (Remain = Prepaid - (Actual+PastDue+TotalWaive))
		6. WaivePD 	
		7. WaiveAmount 
		8. TotalWaive 
		Args:
			AddonID (str): string Schedule Addon ID (MKT_SCHEDULE_ADDON)
			Key (str): Key of dict which return from getInsurance function 
						{"TotalPay": TotalPay,
						"Prepaid" : Prepaid,
						"Actual"  : Actual,
						"PastDue" : PastDue,
						"Remain"  : Remain,
						"TotalWaive": TotalWaive,
						"WaivePD": WaivePD,
						"WaiveAmount": WaiveAmount},
			Link (str): Y or N
		Return:
			Value
	"""
	AddonID		=	args[0]
	Key 		= 	args[1]
	Link 		= 	args[2]

	AddonObj 	=	MKT_SCHEDULE_ADDON.query.\
						filter(MKT_SCHEDULE_ADDON.ID == AddonID).first()
	Insurance   = 	mktaddon.getInsurance(AddonObj.LoanID)
	if Key == "PastDueAmount":
		Key = "PastDue"

	if Link == "Y":
		Tab = ""
		Url = ""
		Text= ""

		if Key == "PastDue":
			Tab = "Insurance-PastDue"
			Url = "Report/R031?OprBranch=EQ&Branch=%s&OprID=EQ&ID=%s%s&OprLoanID=EQ&LoanID=%s" % (AddonObj.Branch,AddonObj.ID, AddonObj.AddonType,AddonObj.LoanID)
			Text= "%.2f" % Insurance.get(Key)

		if Key == "Actual":
			Tab = "Insurance-Collection"
			Url = "Report/R030?OprBranch=EQ&Branch=%s&OprID=EQ&ID=%s%s&OprLoanID=EQ&LoanID=%s" % (AddonObj.Branch,AddonObj.ID, AddonObj.AddonType,AddonObj.LoanID)
			Text= "%.2f" % Insurance.get(Key)

		if Key == "TotalWaive":
			Tab = "Insurance-Waive"
			Url = "Report/RF006?OprBranch=EQ&Branch=%s&OprLoanID=EQ&LoanID=%s" % (AddonObj.Branch,AddonObj.LoanID)
			Text= "%.2f" % Insurance.get(Key)

		Link = """
		 <a href='javascript:void(0)' onClick=CustomClickView('%s','%s')><u>%s</u></a> 
		""" % (Tab,Url,Text)
		return Link

	return Insurance.get(Key)

def getDueDate(args):
	"""
		This function used for get First Due Date in MKT_PD_DATE
		Args:
			ID 	 (str)	:	ID of PD record (MKT_PAST_DUE) Ex: PDLC17121900009
		Return:
			Date (str)
			>>> getDueDate(ID)
			>>> 2018-01-01
	"""
	ID = args[0]
	DueDate = ""
	PDDateObj 	= MKT_PD_DATE.query.filter(MKT_PD_DATE.ID==ID).\
								filter(or_(MKT_PD_DATE.OutPriAmount > 0, MKT_PD_DATE.OutIntAmount > 0)).\
								order_by(MKT_PD_DATE.DueDate.asc(),
										MKT_PD_DATE.NumDayDue.desc()).\
								limit(1).first()
	if PDDateObj:
		DueDate=str(PDDateObj.DueDate)

	return DueDate

def getInsurancePastDue(args):
	"""
		This function used for get total past due insurance
		Args:
			LoanID (str): ID of loan contract
		Return:
			PastDue (float): Insurance past due amount
	"""
	LoanID = args[0]
	Insurance = mktaddon.getInsurance(LoanID)
	PastDue = Insurance.get("PastDue",0)

	return PastDue

def getTotalPastDue(args):
	"""
		This function used for get total past due insurance
		Args:
			LoanID (str): ID of loan contract
		Return:
			Total (float): total past due insurance and total od amount from MKT_PAST_DUE
	"""
	LoanID = args[0]
	PastDueObj = MKT_PAST_DUE.query.filter(MKT_PAST_DUE.LoanID == LoanID).first()
	Total = 0
	if PastDueObj:
		Total = float(PastDueObj.TotODAmount)

	Total += getInsurancePastDue(args)

	return Total