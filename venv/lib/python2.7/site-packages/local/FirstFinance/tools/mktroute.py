from app.mktcore.imports 			import *

from app.Customer.models 			import MKT_CUSTOMER
from app.Currency.models 			import MKT_CURRENCY
from app.ChargeRate.models 			import MKT_CHARGE_RATE
from app.Collateral.models 			import MKT_COLLATERAL
from app.PotentialCustomer.models 	import MKT_PO_CUSTOMER
from app.LoanApplication.models 	import MKT_LOAN_APPLICATION, MKT_LOAN_COLLATERAL, MKT_LOAN_APPLICATION_HIST
from app.LoanContract.models		import MKT_LOAN_CONTRACT, MKT_LOAN_CO_BORROWER, MKT_LOAN_CONTRACT_HIST
from app.LoanProduct.models 		import MKT_LOAN_PRODUCT
from app.LoanPurpose.models 		import MKT_LOAN_PURPOSE
from app.LoanAmendment.models 		import MKT_LOAN_AMENDMENT

import app.mktcore.globalfunction 	as globalfunction
import app.tools.mktmoney			as mktmoney
import app.tools.user 				as mktuser
import app.tools.mktsetting 		as mktsetting
import local.FirstFinance.tools.mktloan as mktloan
from app.RelationIndicators.models 	import *


"""
	Custom mktroute for First Finance project
	Route for extend FRM_CUSTOMER_EX
"""

@app.route('/Morakot/GetNetTotalIncome',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNetTotalIncome():
	Currency 		= request.args.get('Currency')

	PrimaryFreq 	= request.args.get('PrimaryFreq')
	PrimaryIncome 	= request.args.get('PrimaryIncome')
	PrimaryIncome 	= globalfunction.wordAmount(PrimaryIncome)

	SecondaryFreq 	= request.args.get('SecondaryFreq')
	SecondaryIncome = request.args.get('SecondaryIncome')
	SecondaryIncome = globalfunction.wordAmount(SecondaryIncome)
	FreqList 		= {'1':1, '2':3, '3': 6, '4': 12}
	
	NetTotalIncome 	= PrimaryIncome/FreqList.get(str(PrimaryFreq),1) + SecondaryIncome/FreqList.get(str(SecondaryFreq),1)
	CurrencyObj 	= MKT_CURRENCY.query.get(Currency)
	NetTotalIncome 	= mktmoney.toMoney(float(NetTotalIncome), CurrencyObj)

	return jsonify(NetTotalIncome = NetTotalIncome)

@app.route('/Morakot/GetTotalExpenses',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getTotalExpense():
	Currency 		= request.args.get('Currency')

	Household 		= request.args.get('Household')
	Household 		= globalfunction.wordAmount(Household)

	Personal 		= request.args.get('Personal')
	Personal 		= globalfunction.wordAmount(Personal)

	TotalExpenses 	= Household+Personal
	CurrencyObj 	= MKT_CURRENCY.query.get(Currency)
	TotalExpenses 	= mktmoney.toMoney(float(TotalExpenses), CurrencyObj)

	return jsonify(TotalExpenses = TotalExpenses)

@app.route('/Morakot/GetSelfEmployed',methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getSelfEmployed():
	SourceOfIncome 	= request.args.get('SourceOfIncome')
	ID 		= "Y" if SourceOfIncome == "4" else "N"
	Desc 	= "Yes" if SourceOfIncome == "4" else "No"

	return jsonify(ID = ID, Desc = Desc)



"""
	Route for extend FRM_COLLATERAL_DE_EX
"""
@app.route("/Morakot/CollateralOwnershipName", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getCollateralOwnershipName():
	CustomerID 					= request.args.get('CustomerName')
	CustomerObj 				= MKT_CUSTOMER.query.filter(MKT_CUSTOMER.ID==CustomerID).all()

	for row in CustomerObj:
		CustomerFirstNameEn 	= row.FirstNameEn
		CustomerLastNameEn 		= row.LastNameEn
	CustomerName = '%s %s'%(CustomerLastNameEn,CustomerFirstNameEn)

	return jsonify(CustomerName = CustomerName)

@app.route("/Morakot/CalculateCMV", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def calculateCMV():
	Building 	= request.args.get('Building')
	Building 	= globalfunction.wordAmount(Building)

	LandField 	= request.args.get('LandField')
	LandField 	= globalfunction.wordAmount(LandField)

	TotalCMV 	= Building + LandField
	Currency 	= request.args.get("Currency")
	CurrencyObj = MKT_CURRENCY.query.get(Currency)
	TotalCMV 	= mktmoney.toMoney(float(TotalCMV), CurrencyObj)
	return jsonify(Total = TotalCMV)
"""
	Route for extend FRM_LOAN_APPLICATION_EX
"""
def getSpouse(Customer = ""):

	CustomerObj 	= MKT_CUSTOMER.query
	CheckCustomerObj= CustomerObj.get(Customer)
	
	Dict 			= {}
	Dict[""] 		= "--None--"
	List 			= [{'id':'__None','text':'--None--'}]
	CurrentBranch 	= mktuser.getCurrentBranch()
	if CheckCustomerObj:
		MaritalStatus 	= CheckCustomerObj.MaritalStatus
		Gender 			= CheckCustomerObj.Gender

		if MaritalStatus in ['1','6']:
			SpouseObj = CustomerObj.filter(	MKT_CUSTOMER.ID != Customer,\
											MKT_CUSTOMER.Gender != Gender,
											MKT_CUSTOMER.Block =='N',
											MKT_CUSTOMER.Branch == CurrentBranch).all()
			if SpouseObj:
				for row in SpouseObj:
					CustomerID 				= row.ID
					CustomerFirstNameEn 	= row.FirstNameEn
					CustomerLastNameEn 		= row.LastNameEn
					CustomerName = '%s - %s %s'%(CustomerID,CustomerLastNameEn,CustomerFirstNameEn)
					Dict[CustomerID] = CustomerName
					List.append({'id':str(CustomerID),'text':str(CustomerName)})

	return {'Dict': Dict, 'List': List}


@app.route("/Morakot/LoadDicSpouse", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def loadDicSpouse():
	Customer 	= request.args.get('Customer')
	dic 		= getSpouse(Customer).get("Dict",{})
	return jsonify(results = dic)

@app.route("/Morakot/LoadListSpouse", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def loadListSpouse():
	Customer 	= request.args.get('Customer')
	List 		= getSpouse(Customer).get("List",[])
	return jsonify(results = List)

@app.route("/Morakot/SetDefault", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def setDefault():
	RelationIndicator 	= request.args.get('RelationIndicator') if request.args.get('RelationIndicator') else ""
	CBSpouse 			= request.args.get('CBSpouseID') if request.args.get('CBSpouseID') else "__None"
	CBCurrency 			= request.args.get('CBCurrency') if request.args.get('CBCurrency') else "USD"
	CBAppliedAmount 	= request.args.get('CBAppliedAmount') if request.args.get('CBAppliedAmount') else '0'
	CBAmount 			= request.args.get('CBAmount') if request.args.get('CBAmount') else '0'
	CBCycle 			= request.args.get('CBCycle') if request.args.get('CBCycle') else '1'
	CBLoanProduct 		= request.args.get('CBLoanProduct') if request.args.get('CBLoanProduct') else "__None"
	CBLoanPurpose		= request.args.get('CBLoanPurpose') if request.args.get('CBLoanPurpose') else "__None"
	CBFreqType			= request.args.get('CBFreqType') if request.args.get('CBFreqType') else "1"
	CBFrequency 		= request.args.get('CBFrequency') if request.args.get('CBFrequency') else '1'


	# Relation Indicator
	RelationObj 		= MKT_RELATION_INDICATORS.get(RelationIndicator)
	DictRelation 		= {'id':RelationIndicator, 'text':'--None--'}
	if RelationObj:
		DictRelation.update({'id':RelationIndicator,'text':'%s'%RelationObj.Description})

	# SpouseID
	CustomerObj 		= MKT_CUSTOMER.query.get(CBSpouse)
	DictSpouse 			= {'id':CBSpouse,'text':'--None--'}
	if CustomerObj:
		DictSpouse.update({'id':CBSpouse,'text':'%s - %s %s'%(CustomerObj.ID,CustomerObj.LastNameEn,CustomerObj.FirstNameEn)})

	# Currency
	DictCurrency 		= {'id':CBCurrency,'text':CBCurrency}

	# Loan Product
	LoanProductObj 		= MKT_LOAN_PRODUCT.query.get(CBLoanProduct)
	DictLoanProduct		= {'id':'__None','text':'--Choose Loan Product--'}
	if LoanProductObj:
		DictLoanProduct.update({'id':CBLoanProduct,'text':'%s'%LoanProductObj.Description})

	# Loan Purpose
	LoanPurposeObj 		= MKT_LOAN_PURPOSE.query.get(CBLoanPurpose)
	DictLoanPurpose		= {'id':'__None','text':'--Choose Loan Purpose--'}
	if LoanPurposeObj:
		DictLoanPurpose.update({'id':CBLoanProduct,'text':'%s'%LoanPurposeObj.Description})
	
	# Frequency Type
	ListFreqType 		={'':'--None--','1':'1. Monthly','2':'2. Monthly'}
	DictFreqType 		= {'id':CBFreqType, 'text':ListFreqType.get(CBFreqType)}

	dic = {
		'RelationIndicator'	: DictRelation,
		'CBSpouse'			: DictSpouse,
		'CBCurrency'		: DictCurrency,
		'CBAppliedAmount'	: CBAppliedAmount,
		'CBAmount'			: CBAmount,
		'CBCycle'			: CBCycle,
		'CBLoanProduct'		: DictLoanProduct,
		'CBLoanPurpose'		: DictLoanPurpose,
		'CBFreqType'		: DictFreqType,
		'CBFrequency'		: CBFrequency
	}
	return jsonify(results=dic)

@app.route("/Morakot/CalculateDSR", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def calculateDSR():
	"""
		1. DSR (Debt Service Ratio) or Monthly Repayment to NDI = Total repayment to all loans by the clients (and spouse) / NDI
			DSR a ratio to measure whether customer can afford to pay back loan or not. 
			DSR <= 65%
		2. NDI = Total Income (of the borrower and Spouse) - total Expenses (of the borrower and the spouse) - total monthly repayment on liabilities (of the borrower and the spouse)
			(different from above Total monthly repayment, this refers to liabilities field in Customer module)
		3. Monthly Repayment can be calculated based on repayment Mode
			(refer to function getMonthlyRepayment() for formular)
		** for more info, refer to BRD01, section BRD01-08, page 09 of FirstFinance BRD
		** Noted that this customization in FirstFinance is only for USD dollar

		Amount:
		1. calculate amount
		2. if KHR round to display
		3. convert to USD then round
	"""

	# calculate total NDI for borrower and spouse
	NDI 			= 0
	ID 				= request.args.get('ID')
	MainBorrower 	= request.args.get('MainBorrower')
	Spouse 			= request.args.get('Spouse')
	CustomerObj 	= MKT_CUSTOMER.query
	MainBorrowerObj = CustomerObj.get(MainBorrower)
	SpouseObj 		= CustomerObj.get(Spouse)

	# calculate NDI for borrower and spouse
	# NDI are converted to based currency
	MainNDI 		= mktloan.getNDI(MainBorrowerObj)
	SpouseNDI 		= mktloan.getNDI(SpouseObj)
	NDI 			= MainNDI + SpouseNDI

	# calculate total monthly repayment
	BasedCurrency 	= mktsetting.getAccSetting().BaseCurrency
	Currency 		= request.args.get('Currency')
	RepaymentMode 	= request.args.get('RepaymentMode')
	Principal 		= globalfunction.wordAmount(request.args.get('Principal'))
	LoanProduct 	= request.args.get('LoanProduct')
	Interest 		= request.args.get('Interest')
	FreqType 		= request.args.get('FreqType')
	Frequency		= request.args.get('Frequency')
	AppDate 		= request.args.get('AppDate')
	Term 			= request.args.get('Term')

	# calculate monthly repayment for new approved amount
	TotMonthlyRep 	= 0
	try:
		int(Term)
		int(Frequency)
		CurrMonthlyRep 	= mktloan.getMonthlyRepayment(	RepaymentMode 	= RepaymentMode,
														Principal 		= Principal,
														Interest 		= Interest,
														LoanProduct 	= LoanProduct,
														FreqType 		= FreqType,
														Frequency 		= Frequency,
														AppDate 		= AppDate,
														Term 			= Term)
	except Exception as e:
		CurrMonthlyRep = 0
		print "Error: %s"%e
	# Round using loan application currency
	CurrMonthlyRep 		= float(mktmoney.toMoney(CurrMonthlyRep,mktmoney.getCurrencyObj(Currency),DecimalPlace=0,RndMode='1').replace(",",""))
	RndCurrMonthlyRep 	= mktloan.toBaseCurrency(float(CurrMonthlyRep),Currency)
	# Round using based currency 
	EquivCurrMonthlyRep = float(mktmoney.toMoney(RndCurrMonthlyRep,mktmoney.getCurrencyObj(BasedCurrency),DecimalPlace=0,RndMode='1').replace(",",""))
	TotMonthlyRep 		+= EquivCurrMonthlyRep

	# calculate monthly repayment for old loan application,
	# cannot get from loan application record, because loan amount is changing throughout period
	RejectedStatus 		= ['4','5','6'] # exclude status Cancelled, Rejected, Closed

	LoanAppObj 			= MKT_LOAN_APPLICATION.query.filter(~MKT_LOAN_APPLICATION.AppStatus.in_(RejectedStatus),\
														MKT_LOAN_APPLICATION.ID != ID,\
														MKT_LOAN_APPLICATION.SplitAmount == "Y",
														or_(MKT_LOAN_APPLICATION.LNCustomerID == MainBorrower,
															MKT_LOAN_APPLICATION.SpouseID == MainBorrower))
	# Top up Loan Application that not yet use in LC take it to calculate,
	# If Top up loan Application that is already used in LC, skip it
	LoanAppID 		= [str(item.ID) for item in LoanAppObj]
	TopupObj = MKT_LOAN_AMENDMENT.query.filter(
				MKT_LOAN_AMENDMENT.LoanAppID.in_(LoanAppID),\
				MKT_LOAN_AMENDMENT.Option=='1'
		).all()

	if TopupObj:
		for item in TopupObj:
			if str(item.LoanAppID) in LoanAppID:
				LoanAppID.remove(item.LoanAppID)
	# Remove Top Up application that already used in Loan Contract
	LoanAppObj = LoanAppObj.filter(MKT_LOAN_APPLICATION.ID.in_(LoanAppID)).all()

	# Query to get CoBorrower Application in Loan CoBorrower when Loan Application is not Approved yet
	ListLoanAppID 		= [item.ID.split("-")[0] for item in LoanAppObj]
	LoanCBObj 			= db.session.query(MKT_LOAN_CO_BORROWER)\
									.filter(MKT_LOAN_CO_BORROWER.ID != ID,
											~MKT_LOAN_CO_BORROWER.ID.in_(ListLoanAppID),
											or_(MKT_LOAN_CO_BORROWER.CoBorrowerID == MainBorrower,
												MKT_LOAN_CO_BORROWER.CBSpouseID == MainBorrower),
											~MKT_LOAN_APPLICATION.AppStatus.in_(RejectedStatus))\
									.join(MKT_LOAN_APPLICATION, MKT_LOAN_APPLICATION.ID == MKT_LOAN_CO_BORROWER.ID).all()
	if LoanAppObj:
		for item in LoanAppObj:
			""" Principal is converted to based currency in function getLoanExposure
				=> TotMonthlyRep is in based currency as well 
			"""
			# Check Loan Application ID used  in Loan Conttract
			CheckLoanApp = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.LoanApplicationID==item.ID).first()
			if CheckLoanApp:
				# Check Commitment Amount by Loan application
				Commitment = mktloan.getCommitment(item.ID)
				CommitmentAmount = Commitment["CommitmentAmount"]
				RepScheduleAmount = Commitment["RepScheduleAmount"]
				RemainInstallment = Commitment["CountSchedule"]
				# Check Commitment of Customer
				if CommitmentAmount > 0:
					MonthlyRepAmount 	= mktloan.getMonthlyRepayment(  RepaymentMode 	= item.RepaymentMode,
																		Principal 		= CommitmentAmount,
																		Interest 		= item.InterestRate,
																		LoanProduct 	= item.LoanProduct,
																		FreqType 		= item.FreqType,
																		Frequency 		= item.Frequency,
																		AppDate 		= item.AppDate,
																		Term 			= RemainInstallment)
					MonthlyRep = MonthlyRepAmount + RepScheduleAmount
				else:
					MonthlyRep = RepScheduleAmount
			else:
				MonthlyRep 	= mktloan.getMonthlyRepayment(  RepaymentMode 	= item.RepaymentMode,
															Principal 		= item.EquivAmount,
															Interest 		= item.InterestRate,
															LoanProduct 	= item.LoanProduct,
															FreqType 		= item.FreqType,
															Frequency 		= item.Frequency,
															AppDate 		= item.AppDate,
															Term 			= item.Term)

			MonthlyRep 		= float(mktmoney.toMoney(MonthlyRep,mktmoney.getCurrencyObj(BasedCurrency),DecimalPlace=0,RndMode='1').replace(",",""))
			TotMonthlyRep 	+= MonthlyRep
	if LoanCBObj:
		for item in LoanCBObj:
			NewCBObj 	= MKT_LOAN_APPLICATION.query.get(item.ID)
			if NewCBObj:
				AppDate = NewCBObj.AppDate
			CheckCBLoanApp = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.LoanApplicationID==item.ID).first()
			if CheckCBLoanApp:
				# Check Commitment Amount by Loan application
				CBCommitment = mktloan.getCommitment(item.ID)
				CBCommitmentAmount = CBCommitment.get("CommitmentAmount",0)
				CBRepScheduleAmount = CBCommitment.get("RepScheduleAmount",0)
				CBRemainInstallment = CBCommitment.get("CountSchedule",0)
				if CBCommitmentAmount > 0:
					MonthlyRepAmount 	= mktloan.getMonthlyRepayment(  RepaymentMode 	= item.CBRepaymentMode,
																		Principal 		= CBCommitmentAmount,
																		Interest 		= item.CBInterestRate,
																		LoanProduct 	= item.CBLoanProduct,
																		FreqType 		= item.CBFreqType,
																		Frequency 		= item.CBFrequency,
																		AppDate 		= AppDate,
																		Term 			= CBRemainInstallment)
					MonthlyRep = MonthlyRepAmount + CBRepScheduleAmount
				else:
					MonthlyRep = CBRepScheduleAmount
			else:
				MonthlyRep 	= mktloan.getMonthlyRepayment(  RepaymentMode 	= item.CBRepaymentMode,
															Principal 		= item.CBEquivAmount,
															Interest 		= item.CBInterestRate,
															LoanProduct 	= item.CBLoanProduct,
															FreqType 		= item.CBFreqType,
															Frequency 		= item.CBFrequency,
															AppDate 		= AppDate,
															Term 			= item.CBTerm)
			MonthlyRep 		= float(mktmoney.toMoney(MonthlyRep,mktmoney.getCurrencyObj(BasedCurrency),DecimalPlace=0,RndMode='1').replace(",",""))
			TotMonthlyRep 	+= MonthlyRep
	# NDI is converted to based currency instead of because it is 
	NDI 			= float(mktmoney.toMoney(NDI,mktmoney.getCurrencyObj(BasedCurrency),DecimalPlace=0,RndMode='1').replace(",",""))
	DSR 			= mktloan.getMonthlyRepToNDI(TotMonthlyRep, NDI)
	# format amount for display
	DSR 			= mktmoney.formatNumber(DSR)
	CurrMonthlyRep	= mktmoney.toMoney(CurrMonthlyRep, mktmoney.getCurrencyObj(Currency))
	# EquivCurrMonthlyRep	= mktmoney.toMoney(EquivCurrMonthlyRep, mktmoney.getCurrencyObj(BasedCurrency))
	TotMonthlyRep 	= mktmoney.toMoney(TotMonthlyRep,mktmoney.getCurrencyObj(BasedCurrency))
	NDI 			= mktmoney.toMoney(NDI, mktmoney.getCurrencyObj(BasedCurrency))
	return jsonify(DSR = DSR, TotMonthlyRep = TotMonthlyRep, CurrMonthlyRep = CurrMonthlyRep, NDI = NDI, EquivCurrMonthlyRep = EquivCurrMonthlyRep)

@app.route("/Morakot/LoadCycle", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def loadCycle():
	Customer = request.args.get("Customer") if request.args.get("Customer") else ""
	AppStatus 	= ["3","6"] # Approved and Closed Status
	# Get Loan Application from LIVE Table
	LoanAppObj 	= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.AppStatus.in_(AppStatus),
													MKT_LOAN_APPLICATION.LNCustomerID == Customer).all()
	# Gete Loan Application from HIST Table
	LoanAppHISTObj 	= db.session.query(func.split_part(MKT_LOAN_APPLICATION_HIST.ID,"@",1).label("loanid")).\
								filter(MKT_LOAN_APPLICATION_HIST.AppStatus=='6').\
								filter(MKT_LOAN_APPLICATION_HIST.LNCustomerID == Customer).\
								distinct("loanid").all()

	Cycle = len(LoanAppObj) + len(LoanAppHISTObj) + 1
	return jsonify(Cycle = Cycle)

@app.route("/Morakot/CalculateEquivAmount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def calculateEquivAmount():
	Amount 		= request.args.get('Amount') if request.args.get('Amount') else ""
	Currency 	= request.args.get('Currency') if request.args.get('Currency') else ""
	BasedCurrency 	= mktsetting.getAccSetting().BaseCurrency
	try:
		Amount = float(Amount)
	except:
		Amount = globalfunction.wordAmount(Amount)
	EquivAmount = mktloan.toBaseCurrency(Amount, Currency)
	# EquivAmount = mktmoney.toMoney(EquivAmount, mktmoney.getCurrencyObj(BasedCurrency))
	return jsonify(EquivAmount = EquivAmount)


# Route for loan cancellation
@app.route("/Morakot/LoanIDByCustomer", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getLoanID():
	Customer 		= request.args.get('CustomerID')
	CurrentBranch 	= mktuser.getCurrentBranch()
	AppStatus 		= '3' # AppStatus Approve
	LoanAppObj 		= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.LNCustomerID == Customer,\
														MKT_LOAN_APPLICATION.Branch == CurrentBranch,\
														MKT_LOAN_APPLICATION.AppStatus == AppStatus).all()
	dic = {}
	if LoanAppObj:
		for row in LoanAppObj:
			dic[row.ID] = row.ID

	return jsonify(results=dic)

# Route for loan cancellation
@app.route("/Morakot/CancellationType", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getCancellationType():

	LoanAppID 			= request.args.get('LoanAppID')
	CancellationType 	= request.args.get('CancellationType')
	CommitmentAmount 	= 0
	Currency 			= ''
	isCanceledAmount 	= False
	LoanAppObj 			= ''

	if LoanAppID:
		LoanAppObj = MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID==LoanAppID).first()
		Currency = LoanAppObj.Currency
		# 4 is Commitment Cancel
		if str(CancellationType) == str(4):
			LoanObj = MKT_LOAN_CONTRACT.query.filter(MKT_LOAN_CONTRACT.LoanApplicationID==LoanAppID).first()
			isCanceledAmount = False
			if LoanObj:
				CommitmentAmount 	= float(LoanObj.ApprovedAmount) - float(LoanObj.Disbursed)
		else:
			isCanceledAmount = True
	CommitmentAmount = mktmoney.toMoney(CommitmentAmount,mktmoney.getCurrencyObj(Currency))
	return jsonify(CommitmentAmount = CommitmentAmount,isCanceledAmount = isCanceledAmount, Currency = Currency)