# -*- coding: utf-8 -*-

'''
Created Date: 11 December 2017
Author: Mony

All Right Reserved Morakot Technology
Description : 

	Using for data migration

	1. Booking remain insurance (outstanding balance insurance)


'''
import app.tools.mktdate 				as mktdate
from sqlalchemy 						import *

from local.FirstFinance.ScheduleAddonPayment.models import *
import local.FirstFinance.tools.mktpostaccounting as mktpostaccounting

from app.LoanContract.models import *
from app.ScheduleAddon.models import *

from app.tools						import mktdb

from decimal 							import Decimal
from app								import app, db
# from app.config 		import *

def loadInsurance(**kwargs):
	"""
		Function for post accounting of remain insurance amount
			Dr 			Insurance Receivable (28974)		100
				Cr 			Paid up Capital (40110) 			100
	"""
	try:
		Branch = kwargs.get("Branch") if "Branch" else ""
		#BankDate = 	mktdate.getBankDate()
		PaymentObj = MKT_SCHEDULE_ADDON_PAYMENT.query

		if Branch:
			PaymentObj = PaymentObj.\
								filter(MKT_SCHEDULE_ADDON_PAYMENT.Branch==Branch)
		DisplayString = ""						
		if PaymentObj:
			No = 1
			for row in PaymentObj:			
				Amount = row.Amount
				Currency = row.Currency
				TranDate = row.TranDate if row.TranDate else ""
				Reference = row.LoanID
				UserReference = row.ID

				Msg = "%s LoanID: %s =========> Amount: %s" % (No,row.LoanID,Amount)
				print Msg

				DisplayString+="%s <br>" % Msg

				DrCategory  = "28974"
				DrAccount 	= ""
				DrMode 		= "Direct"
				DrCurrency 	= Currency
				

				CrCategory  = "40110"
				CrAccount 	= ""
				CrMode 		= "Direct"
				CrCurrency 	= Currency						

				Transaction = "64"
				PostData 	= {}
				PostData.update({"Transaction"		:	Transaction,
								 "Module"			:	"LC",
								 "DrAccount"		:	DrAccount,
								 "CrAccount"		:	CrAccount,
								 "DrCategory"		:	DrCategory,
								 "CrCategory"		:	CrCategory,
								 "DrMode"			:	DrMode,
								 "CrMode"			:	CrMode,
								 "Currency"			: 	Currency,
								 "Reference"		:	Reference,
								 "UserReference"	: 	UserReference,
								 "Amount"			:	Decimal(Amount),
								 "TranDate" 		: 	TranDate,
								 "Branch"			: 	row.Branch,
								 "Note"				: 	"Data Migration",
								 "Inputter"			:  	"System"
								 })

				mktpostaccounting.setPostAccounting(**PostData)
				No+=1

			print "Successfully..."
			DisplayString+="Successfully..."
			db.session.commit()
			#return DisplayString
		else:
			print "There are no remain payment for posting."
			#return "There are no remain payment for posting."

	except Exception, e:
		db.session.rollback()
		raise e

def loadAdjustInsurance():
	"""
	This function used for adjust insurance payment which post wrong branch (Branch different from Loan Branch).
		Flow:
			1. Query insurance payment which branch differ from its loan branch
			2. Post reverse accounting for its current branch
					PaymentBranch
					Dr  Paidup (40110)  xxx
						Cr 	Receivable (28974) xxx
			3. Post accounting for payment based on loan branch
					LoanBranch
					Dr  Receivable (28974)  xxx
						Cr 	Paidup (40110) xxx
			4. Update branch of insurance payment to brach of loan
			5. Checking 

	"""
		
	try:
		PaymentObj = db.session.query(MKT_SCHEDULE_ADDON_PAYMENT.Branch.label("PaymentBranch"),
									  MKT_SCHEDULE_ADDON_PAYMENT.ID.label("PaymentID"),
									  MKT_SCHEDULE_ADDON_PAYMENT.Amount,
									  MKT_SCHEDULE_ADDON_PAYMENT.LoanID,
									  MKT_SCHEDULE_ADDON_PAYMENT.TranDate,
									  MKT_SCHEDULE_ADDON_PAYMENT.Currency,
									  MKT_LOAN_CONTRACT.Branch.label("LoanBranch"),
									  MKT_LOAN_CONTRACT.ID.label("ContractID")).\
								outerjoin(MKT_LOAN_CONTRACT,
											MKT_LOAN_CONTRACT.ID == MKT_SCHEDULE_ADDON_PAYMENT.LoanID).\
								filter(MKT_SCHEDULE_ADDON_PAYMENT.Branch != MKT_LOAN_CONTRACT.Branch)
		DisplayString = ""	
					
		if PaymentObj.first():
			No = 1
			for row in PaymentObj:
				InsuranceObj = MKT_SCHEDULE_ADDON.query.filter(MKT_SCHEDULE_ADDON.LoanID==row.LoanID).first()
				#print row.PaymentBranch,row.LoanBranch,row.LoanID,row.ContractID,row.PaymentID,row.Amount,InsuranceObj.ActualCollection,InsuranceObj.PastDue
			
				Amount = row.Amount
				Currency = row.Currency
				TranDate = row.TranDate if row.TranDate else ""
				Reference = row.LoanID
				UserReference = row.PaymentID
				PaymentID = row.PaymentID

				PaymentBranch = row.PaymentBranch
				LoanBranch 	= row.LoanBranch

				print "Reverse %s %s from %s %s ..." % (Reference,UserReference,PaymentBranch,Amount)

				DrCategory  = "40110"
				DrAccount 	= ""
				DrMode 		= "Direct"
				DrCurrency 	= Currency	

				CrCategory  = "28974"
				CrAccount 	= ""
				CrMode 		= "Direct"
				CrCurrency 	= Currency

				Transaction = "25" #Reverse
				PostData 	= {}
				PostData.update({"Transaction"		:	Transaction,
								 "Module"			:	"LC",
								 "DrAccount"		:	DrAccount,
								 "CrAccount"		:	CrAccount,
								 "DrCategory"		:	DrCategory,
								 "CrCategory"		:	CrCategory,
								 "DrMode"			:	DrMode,
								 "CrMode"			:	CrMode,
								 "Currency"			: 	Currency,
								 "Reference"		:	Reference,
								 "UserReference"	: 	UserReference,
								 "Amount"			:	Decimal(Amount),
								 "TranDate" 		: 	TranDate,
								 "Branch"			: 	PaymentBranch,
								 "Note"				: 	"Reverse Data Migration",
								 "Inputter"			:  	"System"
								 })

				mktpostaccounting.setPostAccounting(**PostData)

				print "Posting %s %s from %s %s ..." % (Reference,UserReference,LoanBranch,Amount)

				DrCategory  = "28974"
				DrAccount 	= ""
				DrMode 		= "Direct"
				DrCurrency 	= Currency
				

				CrCategory  = "40110"
				CrAccount 	= ""
				CrMode 		= "Direct"
				CrCurrency 	= Currency						

				Transaction = "64" #Booking
				PostData 	= {}
				PostData.update({"Transaction"		:	Transaction,
								 "Module"			:	"LC",
								 "DrAccount"		:	DrAccount,
								 "CrAccount"		:	CrAccount,
								 "DrCategory"		:	DrCategory,
								 "CrCategory"		:	CrCategory,
								 "DrMode"			:	DrMode,
								 "CrMode"			:	CrMode,
								 "Currency"			: 	Currency,
								 "Reference"		:	Reference,
								 "UserReference"	: 	UserReference,
								 "Amount"			:	Decimal(Amount),
								 "TranDate" 		: 	TranDate,
								 "Branch"			: 	LoanBranch,
								 "Note"				: 	"Data Migration",
								 "Inputter"			:  	"System"
								 })

				mktpostaccounting.setPostAccounting(**PostData)

				print "Update insurance payment branch from %s to %s ..." %(PaymentBranch,LoanBranch)

				mktdb.updateRecord(MKT_SCHEDULE_ADDON_PAYMENT, [MKT_SCHEDULE_ADDON_PAYMENT.ID == PaymentID], {"Branch": LoanBranch})

				print "-"*100

				No+=1

			print "Successfully ..."
			db.session.commit()

		else:
			print "There are no remain payment for posting."

	except Exception, e:
		db.session.rollback()
		raise e	