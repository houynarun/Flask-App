from app.mktcore.imports 			import *
from app 							import db
from sqlalchemy 					import *
from app.LoanContract.models 		import *
from app.Account.models 			import *
from app.LoanAmendment.models 		import *
from app.ChargeRate.models 			import *
from app.LoanApplication.models 	import *
import app.tools.mktaudit 					as mktaudit
import app.tools.mktcharge 					as mktcharge
import app.tools.mktdb 						as mktdb
import app.tools.mktdate 					as mktdate

def updateAdmendmentCharge(ID,Resouce="AUTH",EOD=1):
	try: 
		if EOD==1:
			Authorizer 			=	"System"
		else:
			Audit 				= mktaudit.getAuditrail()
			Authorizer 			= Audit['Authorizer']
		if Resouce=="AUTH":
			LoanChargeObj 		= MKT_LOAN_CHARGE.query.filter(MKT_LOAN_CHARGE.ID==ID)
			LoanAmendmentObj	= MKT_LOAN_AMENDMENT.query.filter(MKT_LOAN_AMENDMENT.ID==ID).first()
		else:
			LoanChargeObj 		= MKT_LOAN_CHARGE_INAU.query.filter(MKT_LOAN_CHARGE_INAU.ID==ID)
			LoanAmendmentObj	= MKT_LOAN_AMENDMENT_INAU.query.filter(MKT_LOAN_AMENDMENT_INAU.ID==ID).first()
		
		if LoanAmendmentObj:
			LoanContractObj =	MKT_LOAN_CONTRACT.query.get(LoanAmendmentObj.LoanID)

		if LoanContractObj:
			Installment 	=	LoanContractObj.Installment
			Account 		=	LoanContractObj.Account
			Branch 			=	LoanContractObj.Branch
			AccCat 			=	LoanContractObj.Category
			Currency 		= 	LoanContractObj.Currency
			TranDate 		=	mktdate.getBankDate()
			AccCat = MKT_ACCOUNT.query.get(Account).AccCategory
			if LoanChargeObj.first() and AccCat:
				#update promotion amount to zero as we do not have promotion in top up form. It cause error in withdrawal slid
				for obj in LoanChargeObj:
					obj.PromotionAmount = 0
					db.session.add(obj)

				Disbursed 		= LoanAmendmentObj.Amount		
				LoanAppObj 		= MKT_LOAN_APPLICATION.query.get(LoanAmendmentObj.LoanAppID)
				if LoanAppObj:
					Disbursed = LoanAppObj.Amount #Approve Amount
					
				mktcharge.updateLoanCharge(ID, Installment, Disbursed, Currency,Resouce=Resouce,Amendment="N")
				# Check Loan Charge Booking
				ChargeBooking = mktcharge.bookingLoanCharge(ID, Currency, Account, AccCat, Branch, Resouce=Resouce,TranDate=str(TranDate),Authorizer=Authorizer)
				if not ChargeBooking[0]:
					return False
		return True
	except Exception as e:
		db.session.rollback()
		return False
		raise e
def updateLoanChargeAfterAmement(ID,Resouce="AUTH",EOD=1):
	"""
		- update loan charge amount when user amendment loan have charging if charge key are the same. 
		- add new record of loan cahrge that clone from the record of laon amend charge to MKT_LOAN_CHARGE if 
			loan charge doesn't exist in MKT_LOAN_CHARGE  or not the same key charge
	"""
	try:
		if EOD==1:
			Authorizer 			=	"System"
			Authorizeon 		=	str(mktdate.getBankDate())
		else:
			Audit 				= mktaudit.getAuditrail()
			Authorizer 			= Audit['Authorizer']
			Authorizeon 		= Audit['Authorizeon']
		LoanAmendObj = None
		if Resouce=="AUTH":
			MKTLoanCharge 		=	MKT_LOAN_CHARGE
			MKTLoanContract 	= 	MKT_LOAN_CONTRACT
			MKTLoanAmendment 	=	MKT_LOAN_AMENDMENT
		else:
			MKTLoanCharge 		=	MKT_LOAN_CHARGE_INAU
			MKTLoanContract 	= 	MKT_LOAN_CONTRACT
			MKTLoanAmendment 	=	MKT_LOAN_AMENDMENT_INAU

		LoanAmendChargeObj 	=	MKTLoanCharge.query.filter(MKTLoanCharge.ID==ID)
		if LoanAmendChargeObj.first():
			LoanAmendObj 	=  	MKTLoanAmendment.query.get(ID)		
			for row  in LoanAmendChargeObj:
				if LoanAmendObj:
					'''LoanAmendObj not none , have loan charge record in MKT_LOAN_CHARGE'''
					ContractChargeObj 		= 	MKT_LOAN_CHARGE.query.filter(MKT_LOAN_CHARGE.ID==LoanAmendObj.LoanID,
																   MKT_LOAN_CHARGE.ChargeKey==row.ChargeKey).first()
					if ContractChargeObj:
						ChargeKey 		=	row.ChargeKey
						Currency		= 	LoanAmendObj.Currency
						ChargeRateObj 	= 	MKT_CHARGE_RATE.query.get(ChargeKey+Currency)
						if ChargeRateObj:		
							if ChargeRateObj.Amortize=='N':
								AmendCharge 		=	row.ChargeEarned  #amount of amendment charge
								ChargeEarned 		=	ContractChargeObj.ChargeEarned  #amount of Loan Charge
								ChargeLastBooked 	=	ContractChargeObj.ChargeLastBooked 
	
								ContractChargeObj.ChargeEarned 		= 	float(ChargeEarned)  + float(AmendCharge)
								ContractChargeObj.ChargeLastBooked 	= 	float(ChargeLastBooked) + float(AmendCharge)
							else:
								AmendCharge 		=	row.ChargeUnearned
								ChargeUnearned 		=	ContractChargeObj.ChargeUnearned
								ContractChargeObj.ChargeUnearned = float(ChargeUnearned) + float(AmendCharge)
							db.session.add(ContractChargeObj)
					else:
						''' LoanAmendObj is none , don't have loan charge record in MKT_LOAN_CHARGE'''
						DictUpdate 		= {}
						LoanID 			= LoanAmendObj.LoanID						
						DictUpdate.update(row.__dict__)
						DictUpdate.update({'ID':LoanID})
						DictUpdate.update({'Authorizer':Authorizer})
						DictUpdate.update({'Authorizeon':Authorizeon})
						DictUpdate.update({'OriginalCharge':"N"})
						if "_sa_instance_state" in DictUpdate:
							del DictUpdate['_sa_instance_state']
						mktdb.insertTable(MKT_LOAN_CHARGE,DictUpdate) #we do not add it to INAU.
		return True
	except Exception as e:
		db.session.rollback()		
		return False
		raise e
	
