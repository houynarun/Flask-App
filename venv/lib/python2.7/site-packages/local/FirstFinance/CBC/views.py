from app.mktcore.imports 						import *
from app.CBC.models 							import *
from app.LoanApplication.models 				import *
from app.Customer.forms 						import *
from app.Rejected.models 						import *
from app.Customer.models 						import *

import app.tools.user 							as mktuser
import app.tools.mktaudit 						as mktaudit
# from app.tools									import mktdb
import app.tools.mktdb  						as mktdb
import app.tools.mktsetting 					as mktsetting
import app.tools.mktnotification    			as mktnotify
import app.tools.mktautoid 						as mktAutoID
import app.tools.mktdate 						as mktdate

import local.FirstFinance.LoanApproval.views 	as loanapproval
import app.CBC.views 							as cbc
from .forms import *

registerCRUD(admin, '/CBCEx', 'CBCEx', FRM_CBC_DE_EX, [MKT_CBC, MKT_CBC_DE])

APPSTATUS_NEW 		=	loanapproval.APPSTATUS_NEW
APPSTATUS_SUBMIT	= 	loanapproval.APPSTATUS_SUBMIT
APPSTATUS_REVIEWED  = 	loanapproval.APPSTATUS_REVIEWED
APPSTATUS_APPROVED  = 	loanapproval.APPSTATUS_APPROVED
APPSTATUS_REJECTED  = 	loanapproval.APPSTATUS_REJECTED
APPSTATUS_CANCEL  	= 	loanapproval.APPSTATUS_CANCEL

NUM_OF_REVIEWER 	= 	loanapproval.NUM_OF_REVIEWER  # Y = allow to approved if there are 2/3 of reviewer review the loan. Example: 3/3*Y
NUM_OF_APPROVER 	= 	loanapproval.NUM_OF_APPROVER  # Y = change status to approved if 2/3 of approver approve the loan. Example: 2/3*Y
CHECK_ROLE_EXIST 	= 	loanapproval.CHECK_ROLE_EXIST # Y = allow to review/approval to next level role if role not exist 

#Action For CBC
ACTION_SUBMIT 		= 	"1" #submit loan application after check cbc 
ACTION_REJECED 		= 	"2" #reject loan application after check cbc

ACTION 				=	{ACTION_SUBMIT: "Submit",ACTION_REJECED:"Rejected"}


@app.route('/Morakot/CBCSubmitEx/',methods=['POST', 'GET'])
@checkLogOutSession
@checkLogOutTime
def CBCSubmitEx():
	"""
		Note:
			This route used for redirect to cbc history page with submit form for updating loan application status
		Args:
			ID 		(str)	: Loan Application ID
		Return:
			return to page local/FirstFinance/templates/CBC/submit.html

		Flow:
			1. Find Customer not yet check cbc inside loan application (CustNotYetCheckList)
			2. In case there is CustNotYetCheckList
				- create one main CBC record
					* AccountType will calculate based on number of primary customer (NumPrimary)
				- create detail CBC record based on number of applicant (NumberOfApplication)
					* AccountType will calcualte based on exact customer type which FF defined as below
						Main borrower 	=> P
						Co borrower 	=> P
						Gurantor 		=> G
					* In case there are no primary customer checking, guarantor will be automatic checking as primary (for auto option from loan application)

	"""
	try:
		#ID = Loan Application ID
		LoanAppID 		= request.args.get('ID') if 'ID' in request.args else ''
		LoanAppObj 		= MKT_LOAN_APPLICATION.query.get(LoanAppID)

		OldCBCIDList    	= []
		NewCBCIDList 		= []
		ALLCBCIDList 		= []
		HistoryData  		= {}
		CBCDetailSuccessObj = ""
		CustomerObj  		= MKT_CUSTOMER.query

		LoanStatus = ['0','1'] #  0: New, 1:Submit

		# if it is a new loan status new or submit, check new cbc. otherwise, just skip and check history
		if LoanAppObj.AppStatus in LoanStatus:

			if LoanAppObj:
				CustomerDict 		= 	getCustomerList(LoanAppID=LoanAppID)
				CustomerList   		=	CustomerDict.get("CustomerList")
				ApplicantTypeDict	=	CustomerDict.get("ApplicantType")

				CustomerObj 		= 	CustomerObj.filter(MKT_CUSTOMER.ID.in_(CustomerList)) # for lookup in html page

				HistoryData  		= 	getCustomerHistory(LoanAppID=LoanAppID)

				CustDoneCheckList	= 	HistoryData.get("CustDoneCheckList")
				CustNotYetCheckList	= 	HistoryData.get("CustNotYetCheckList")
				OldCBCIDList    	=	HistoryData.get("OldCBCIDList")
				NumPrimary			=	HistoryData.get("NumPrimary")

				NumberOfApplication = len(CustNotYetCheckList) # # of customer fail or not check cbc

				if NumberOfApplication > 0:

					"""			
						AccountType 	|	Primary		|	Supplimentary	|	Guarantor
						----------------|---------------|-------------------------------------------
						Single (S)		|	1			|	0 or more 		|	0 or more
						----------------|---------------|-------------------------------------------
						Joint  (J)		|	2 or more 	| 	0 or more 		| 	0 or more
						----------------|---------------|-------------------------------------------
						Group  (G)		|	2 or more 	| 	0 or more 		| 	0 or more

					"""
					#create new cbc record with NotYetCheckList customer
					MemberID  = mktsetting.getAppSetting('CBCMemberID')
					Action 	  = mktsetting.getAppSetting('AutoCBCAction')

					CBCID = mktautoid.getAutoID('FRM_CBC_DE_EX')
					EnquiryType = 'NA'
					AccountType = "S"
					Amount = LoanAppObj.InquiryAmount
					Currency = LoanAppObj.Currency
					MemberReference = '%s%s' % (MemberID, CBCID)

					if NumPrimary <= 1:
						AccountType = "S"

					elif NumPrimary > 1:
						AccountType = "J"

					CBCMainDict = {
						'ID': CBCID,
						'AccountType': AccountType,
						'LoanAppID': LoanAppID,
						'EnquiryType': EnquiryType,
						'NumberOfApplication': NumberOfApplication,
						'Currency': Currency,
						'Amount': Amount,
						'Action': Action
					}

					mktdb.insertTable(MKT_CBC, CBCMainDict)
					
					for index, Customer in enumerate(CustNotYetCheckList):
						ApplicationType = ApplicantTypeDict.get(Customer)
						if NumPrimary == 0 and index == 0:#in case there no primary customer, system will automatic set one of applicant to primary.
							ApplicationType = "P"

						InsertDic = {
							'ID': CBCID,
							'Customer':Customer,
							'MemberReference': '%s%s' %(MemberReference, index),
							'ApplicationType': ApplicationType
						}

						mktdb.insertTable(MKT_CBC_DE, InsertDic)

					db.session.commit()

					NewCBCIDList.append(CBCID)

				ALLCBCIDList.extend(OldCBCIDList+NewCBCIDList)

				if request.method == 'POST':
					Action 		=	request.form.get("Action") 
					LoanAppID   = 	request.form.get("LoanAppID")

					UserID 		=	mktuser.getUser().ID
					UserRoleID 	=	mktuser.getUserRole(UserID)
					DateTime 	=	mktdate.getDateTimeNow()
					Branch	    =	mktuser.getCurrentBranch()

					LoanData 	=	{}
					RejectedData=	{}

					LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanAppID)
					if LoanAppObj:
						if LoanAppObj.AppStatus in [APPSTATUS_NEW]:
							LoanAppID 		= 	LoanAppObj.ID
							ConfigData		= 	loanapproval.getConfig(LoanApplicationID=LoanAppID)
							Reviewer      	= 	ConfigData.get("Reviewer")#list of reviwer roleid
							Approver 	   	= 	ConfigData.get("Approver")#list of approver roleid
							IsEnoughReviewer=	ConfigData.get("IsEnoughReviewer")#check if loan have engouh reviewer for approval
							IsEnoughApprover=	ConfigData.get("IsEnoughApprover")#check if loan have engouh approver
							NotYetReviewRole=	ConfigData.get("NotYetReviewRole")
							NotYetApproveRole=	ConfigData.get("NotYetApproveRole")
							RecieverList    	= 	loanapproval.getUserByRole(Role=[''])
							Msg 			=	""
							CustomerObj     = 	MKT_CUSTOMER.query.get(LoanAppObj.LNCustomerID)
							##Action Submit##
							if Action == ACTION_SUBMIT:
								#update loan application status to SUBMIT 
								#notify to reviewer or approver based on app setting
								LoanData.update({"AppStatus" : APPSTATUS_SUBMIT})

								if IsEnoughReviewer[0] == False:#no reviewer or enough reviwer (in case no sub-BM condition => notify to BM direct)
									if NUM_OF_REVIEWER[1] == "Y":#notify by order
										RecieverList = 	loanapproval.getUserByRole(Role=[NotYetReviewRole[0]], Branch=Branch)	
										Msg         =	" was submitted for reviewing after check CBC. Please review on this loan application."
									else:#not by order
										RecieverList = 	loanapproval.getUserByRole(Role=NotYetReviewRole, Branch=Branch)	
										Msg         =	" was submitted for reviewing after check CBC. Please review on this loan application."
								else:
									if NUM_OF_APPROVER[1] == "Y":#notify by order
										RecieverList = 	loanapproval.getUserByRole(Role=[NotYetApproveRole[0]], Branch=Branch)	
										Msg         =	" was submitted for reviewing after check CBC. Please review on this loan application."
									else:#not by order
										RecieverList = 	loanapproval.getUserByRole(Role=NotYetApproveRole, Branch=Branch)	
										Msg         =	" was submitted for reviewing after check CBC. Please review on this loan application."


							##Action Rejected##
							elif Action == ACTION_REJECED:
								# print "REjected"
								#update loan application status to Rejected
								#add record rejected to rejected module
								#notify to all user related to that loan
								LoanData.update({"AppStatus": APPSTATUS_REJECTED})
								RejectedReason  	= 	request.form.get("Reason") 
								RejectedBy 			=	"1" #1=company, 2=client	

								RecieverList 		= 	loanapproval.getUserByRole(Role=Reviewer + Approver, Branch=Branch)
								CCObj 				= 	MKT_USER.query.filter(MKT_USER.ID==LoanAppObj.PreparedBy)	
								# RecieverList 		= 	RecieverList.all()
								RecieverList.extend(CCObj)
								Msg 				= " was rejected by %s after checking CBC record." % UserID

								#Add Reject Data to MKT_REJECTED
								RejectedData.update({"Rejected": "Y",
													 "CustomerID": CustomerObj.ID,
													 "LoanAppID": LoanAppID,
													 "RejectedBy": RejectedBy,
													 "RejectedReason": RejectedReason,
													 "RejectedDate": DateTime.split()[0]})

							if LoanData:
								Curr = 	int(LoanAppObj.Curr)+1
								LoanData.update({'Curr' :	str(Curr),
										'Inputter' 		:	UserID,
										'Createdon' 	: 	DateTime,
										'Authorizer' 	: 	UserID,
										'Authorizeon'	: 	DateTime})

								mktaudit.moveAUTHtoHIST(MKT_LOAN_APPLICATION,MKT_LOAN_APPLICATION_HIST,LoanAppID)
								mktdb.updateRecord(MKT_LOAN_APPLICATION, [MKT_LOAN_APPLICATION.ID == LoanAppID], LoanData)
								db.session.commit()	

								if RejectedData:
									#add Reject to MKT_REJECTED
									ID = mktautoid.getAutoID("FRM_REJECTED")
									RejectedData.update({"ID":ID})
									mktdb.insertTable(MKT_REJECTED,RejectedData)
									db.session.commit()	

								#send notify to reciever
								for row in RecieverList:	
									RecieverID = row.ID
									LoanID     = LoanAppID
									# print "Reciever ", RecieverID
									mktnotify.insertNotify({'ID': LoanID, 
								        'Path':	'LoanReviewDetail',
								        'Title':'Loan Application Review/Approval',
								        'From': UserID, 'To': RecieverID,
								        'Message': Msg
									})	

								flash("Record was %s successfully." % (ACTION.get(Action)))
							else:
								flash(msg_warning+"Loan application for this CBC checking already submitted.")	
						else:
							flash(msg_warning+"Loan application %s already submitted." % LoanAppObj.ID)
					else:
						flash(msg_warning+"There are no loan application for this CBC checking.")		

					return redirect("Morakot/LoanApplicationEx")

			else:
				flash(msg_warning+'Loan application %s not found.' % LoanAppID)

		else:
			# One application ID can have one or more CBC equiry ID
			CBCObj 				= MKT_CBC.query.filter(MKT_CBC.LoanAppID==LoanAppObj.ID).all()

			# if existing check cbc customer create loan app again under 30,
			# it will not create new cbc inquiry ID, so it will take cbc enquiry ID
			# from the last previous cbc ID, func getOldCBCList() is to perform that task
			if not CBCObj:

				OldCBCList 	= getOldCBCList(Customer=LoanAppObj.LNCustomerID)

				OldCBCIDList 		= [OldCBCList]

			else:

				# OldCBCIDList 		= [CBCObj.ID]
				OldCBCIDList 		= [CBC.ID for CBC in CBCObj]


			HistoryData  		= 	getCustomerHistory(LoanAppID=LoanAppObj.ID)

			NewCBCIDList.append(OldCBCIDList)
			ALLCBCIDList.extend(OldCBCIDList)
			HistoryData  		= 	getCustomerHistory(LoanAppID=LoanAppID)
			CustomerDict 		= 	getCustomerList(LoanAppID=LoanAppID)
			CustomerList   		=	CustomerDict.get("CustomerList")
			CustomerObj 		= 	CustomerObj.filter(MKT_CUSTOMER.ID.in_(CustomerList)) # for lookup in html page

		return render_template('CBC/submit.html',
								ID 					=		LoanAppID,
								LoanAppObj 			=		LoanAppObj,
								OldCBCIDList 		=		OldCBCIDList,
								ALLCBCIDList		=		ALLCBCIDList,
								NewCBCIDList		=		NewCBCIDList,
								HistoryData			=		HistoryData,
								CustomerObj			=		CustomerObj)

	except Exception, e:
		db.session.rollback()
		raise e

def getCustomerList(LoanAppID):
	"""
		Note:
			This function used for get all customer in one loan application including main-borrower, co-borrower, gurantor, and their spouses
		Args:
	        LoanAppID 	(str)	: Loan Application ID
	    Returns:
	    	Dict of key as below 
				CustomerList 	:	List of customer ID
				ApplicantType 	: 	Dict of ApplicantType with key as customer id
		Example:
			>>> getCustomerList(LoanAppID="LA001")
			>>>	{"CustomerList":["CU001","CU002"], "ApplicantType": {"CU001": "P","CU002": "G"}}
	"""
	LoanAppObj   = MKT_LOAN_APPLICATION.query.get(LoanAppID)
	CustomerList = []
	ApplicantDict = {}

	if LoanAppObj:
		MAIN_BORROWER_APPLICANT_TYPE 	= "P"
		CO_BORROWER_APPLICANT_TYPE		= "P"
		GUARANTOR_APPLICANT_TYPE 		= "G"

		#Main-Borrower
		CustomerList.append(LoanAppObj.LNCustomerID)
		ApplicantDict.update({LoanAppObj.LNCustomerID: MAIN_BORROWER_APPLICANT_TYPE})
		#Spouse Main-Borrower
		if LoanAppObj.SpouseID != "" and LoanAppObj.SpouseID !="__None":
			CustomerList.append(LoanAppObj.SpouseID)
			ApplicantDict.update({LoanAppObj.SpouseID : MAIN_BORROWER_APPLICANT_TYPE})

		#Co-Borrower
		CoBorrowerObj = MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanAppID)
		for row in CoBorrowerObj:
			#Co-borrower
			CustomerList.append(row.CoBorrowerID)
			ApplicantDict.update({row.CoBorrowerID: CO_BORROWER_APPLICANT_TYPE})
			#Co-borrower spouse
			if row.CBSpouseID != "" and row.CBSpouseID !="__None":
				CustomerList.append(row.CBSpouseID)
				ApplicantDict.update({row.CBSpouseID: CO_BORROWER_APPLICANT_TYPE})

		#Guarantor
		GuarantorObj = MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID==LoanAppID)
		for row in GuarantorObj:
			CustomerList.append(row.Guarantor)
			ApplicantDict.update({row.Guarantor: GUARANTOR_APPLICANT_TYPE})

	return {"CustomerList"	: CustomerList,
			"ApplicantType"	: ApplicantDict}

def getCustomerHistory(LoanAppID):
	"""
		Note:
			This function used for check whether each customer in loan application already check cbc in 30 days
		Args:
	        LoanAppID 	(str)	: Loan Application ID
	    Returns:
	    	Dict of key as below 
				CBCDetailSuccessObj 	: List Object of CBC detail records with successful checking in 30 days of customers
				CustNotYetCheckList		: List of customer ID who not yet check cbc
				CustDoneCheckList		: List of customer ID already check cbc
				OldCBCIDList 			: List of CBC main ID already have in cbc
				NumPrimary				: Total number of primaray user in not yet check list
		Example:
			>>> getCustomerHistory(LoanAppID='LA001')
			>>> {"CBCDetailSuccessObj"	:	[<app>,<app>],
				 "CustNotYetCheckList"	:	["CU001","CU002","CU004"], #CU001,CU002=P, CU004=G
				 "CustDoneCheckList"	:	["CU003"],
				 "OldCBCIDList"			:	[<app>],
				 "NumPrimary"			:	2
				}
	"""
	try:
		CBCDetailSuccessObj = []
		CustNotYetCheckList = []
		CustDoneCheckList   = []
		OldCBCIDList 		= [] #store list id of CBC record of customer id that successful check cbc in 30 days
		Data  				= {}

		CustomerDict = getCustomerList(LoanAppID=LoanAppID)
		CustomerList = CustomerDict.get("CustomerList")

		LoanAppObj   = MKT_LOAN_APPLICATION.query.get(LoanAppID)

		if LoanAppObj:
			#Check if loan already exist in Main Cbc
			CBCObj = MKT_CBC.query.filter(MKT_CBC.LoanAppID==LoanAppID)
			if CBCObj.count() > 0:#exist loan application id in CBC recored		
				# CBCDetailSuccessObj = CBCDetailSuccessObj.all()	
				for row in CBCObj:
					CBCDetailObj = MKT_CBC_DE.query.filter(MKT_CBC_DE.ID==row.ID)
					if row.ID not in OldCBCIDList: # distince sql
						OldCBCIDList.append(row.ID)
						CBCDetailSuccessObj.extend(CBCDetailObj.all())

				del CustNotYetCheckList[:]
			else:
				CustNotYetCheckList.extend(CustomerList)

			#check CBC history
			if CustomerList: 
				# CustNotYetCheckList.extend(CustomerList)
				CBCDetailSuccessObj1 = getCBCDetailSuccessObj(CustomerList)
			
			if CBCDetailSuccessObj1:
				for row in CBCDetailSuccessObj1:
					if row.Customer in CustomerList:
						CustDoneCheckList.append(row.Customer)

					if row.Customer in CustNotYetCheckList:
						CustNotYetCheckList.remove(row.Customer)

					if row.ID not in OldCBCIDList:
						OldCBCIDList.append(row.ID)

					CBCDetailSuccessObj.append(row)

			#calulate total primary customer in not yet checklist
			NumPrimary = 0
			ApplicantTypeDict = CustomerDict.get("ApplicantType")
			for index, Customer in enumerate(CustNotYetCheckList):
				if ApplicantTypeDict.get(Customer) == "P":
					NumPrimary = NumPrimary + 1				

		Data.update({"CBCDetailSuccessObj"	: CBCDetailSuccessObj,
					 "CustNotYetCheckList"	: CustNotYetCheckList,
					 "CustDoneCheckList"	: CustDoneCheckList,
					 "OldCBCIDList"  		: OldCBCIDList,
					 "NumPrimary"			: NumPrimary})

		return Data

	except Exception, e:
		raise e

def getCBCDetailSuccessObj(CustomerList):
	"""
		Note:
			This function used for get record of sucess enquiry of customer in 30 days (based on cofiguration)
		Args:
			CustomerList (List) : List of customer ID
		Return:
			Object
		Example:
			>>> getCBCDetailSuccessObj(CustomerList=["CU001","CU002"])
			>>> [<app>,<app>]

	"""
	CBCNUM_OF_DAY_FOR_HIST_CHECK = mktsetting.getAppSetting('CBCNUM_OF_DAY_FOR_HIST_CHECK')
	if not CBCNUM_OF_DAY_FOR_HIST_CHECK:
		CBCNUM_OF_DAY_FOR_HIST_CHECK = 30

	NumOfDay 	= int(CBCNUM_OF_DAY_FOR_HIST_CHECK)
	CurrentDate = mktdate.getDateISO()
	PreviousDate= mktdate.getPreviousDay(CurrentDate, NumOfDay)

	CBCDetailSuccessObj = db.session.query(MKT_CBC_DE).\
										filter(MKT_CBC_DE.Customer.in_(CustomerList)).\
										filter(MKT_CBC_DE.EnquiryID !="").\
										filter(MKT_CBC_DE.SuccessDate >= str(PreviousDate))

	return CBCDetailSuccessObj

def getOldCBCList(Customer):
	""" for getting the old cbc enquiry ID of exising cbc enquiry 
		return the last one enquiry ID by existing enquiry customer
	"""

	OldCBCID 	= 	''

	# get the last cbc equiry ID
	CBCDeObj   =    MKT_CBC_DE.query.filter(MKT_CBC_DE.Customer==Customer).order_by(MKT_CBC_DE.SuccessDate.desc()).first()

	if CBCDeObj:

		OldCBCID = CBCDeObj.ID


	return OldCBCID