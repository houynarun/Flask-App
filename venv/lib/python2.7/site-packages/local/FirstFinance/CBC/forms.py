from app.mktcore.wtfimports 		import *
from app.mktcore.imports 			import *
from app.CBC.forms 					import *
from app.CBC.models 				import *

def getCustomerHotField(LoanAppID):

	CustomerObj = None
	GurantorObj = None
	CoBorrowObj = None
	SpouseObj 	= None
	dic		= {}

	if not LoanAppID:
		return None

	LoanAppInauObj = MKT_LOAN_APPLICATION_INAU.query.get(LoanAppID)

	if LoanAppInauObj:
		GurantorObj = MKT_GUARANTOR_INAU.query.filter_by(ID=LoanAppID).all()
		CoBorrowObj = MKT_LOAN_CO_BORROWER_INAU.query.filter_by(ID=LoanAppID).all()
		CustomerObj = MKT_CUSTOMER.query.get(LoanAppInauObj.LNCustomerID)
		SpouseObj  	= MKT_CUSTOMER.query.get(LoanAppInauObj.SpouseID)
	else:
		GurantorObj = MKT_GUARANTOR.query.filter_by(ID=LoanAppID).all()
		CoBorrowObj = MKT_LOAN_CO_BORROWER.query.filter_by(ID=LoanAppID).all()
		LoanAppObj = MKT_LOAN_APPLICATION.query.get(LoanAppID)
		CustomerObj = MKT_CUSTOMER.query.get(LoanAppObj.LNCustomerID)
		SpouseObj  	= MKT_CUSTOMER.query.get(LoanAppObj.SpouseID)

	result = []
	result.append(CustomerObj)

	if GurantorObj:
		for row in GurantorObj:
			Obj = MKT_CUSTOMER.query.get(row.Guarantor)
			result.append(Obj)

	if CoBorrowObj:
		for row in CoBorrowObj:
			Obj = MKT_CUSTOMER.query.get(row.CoBorrowerID)
			result.append(Obj)

			CoSpouseObj = MKT_CUSTOMER.query.get(row.CBSpouseID)
			if CoSpouseObj:
				result.append(CoSpouseObj)

	if SpouseObj:
		result.append(SpouseObj)

	return result

def loadCustomer():
	if request.method == "POST":
		if not request.form['LoanAppID']:
			"""
			# check if LoanAppID is empty
			"""
			return []
		else:
			LoanAppID = request.form['LoanAppID']
			result = getCustomerHotField(LoanAppID)
			CustomerIDList = [x.ID for x in result]
			return MKT_CUSTOMER.query.filter_by(Branch=mktuser.getCurrentBranch()).\
								  	filter(MKT_CUSTOMER.ID.in_(CustomerIDList))
	else:
		return MKT_CUSTOMER.query.filter_by(Branch=mktuser.getCurrentBranch())

@app.route('/Morakot/CBC/getCustomerEx')
def getCustomerIDEx():

	LoanAppID   = request.args.get('LoanAppID')
	dic = {}

	result = getCustomerHotField(LoanAppID)

	if not result:
		return jsonify(results=dic)

	for row in result:
		dic[row.ID] = u'%s - %s %s' % (row.ID, row.LastNameEn, row.FirstNameEn)

	return jsonify(results=dic)

class FRM_CBC_DE_EX(FRM_CBC_DE):
	ApplicationType 	=	SelectField(requiredlabel("ApplicationType", "*"),
							choices=[('', '---None---'),
									 ('P', 'Primary'),
									 ('G', 'Guarantor'),
									 ('S', 'Supplementary')
									 ],
							validators=[validators.Required()],
							description='1-CBC Detail'
						)
	Customer 			= 	QuerySelectField(requiredlabel(getLanguage('Customer'),'*'),
							query_factory=loadCustomer,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'',
							validators=[validators.Required()],
							description='1-CBC Detail'
						)

	MemberReference 	=	TextField("Member Reference", description='1-CBC Detail')



	SuccessDate 		=	TextField("Success Date", description='1-CBC Detail')
	EnquiryID 			=	TextField("Enquiry ID", description='1-CBC Detail')

	@staticmethod
	def hotSelectField():

		hotfield = []

		fielddisplay="Customer"
		varname="LoanAppID:$('#LoanAppID').val()"
		fun=["LoanAppID", varname ,fielddisplay, "/Morakot/CBC/getCustomerEx", "change"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def redirectAfterInsert():
		try:
			AuthLevel 	= g.getNAuthorize
			if AuthLevel == 0 :
				CBCObj= MKT_CBC.query.get(request.form['ID'])
				base = super(FRM_CBC_DE_EX,FRM_CBC_DE_EX).redirectAfterInsert()
				if base:
					return "/Morakot/CBCSubmitEx/?ID="+CBCObj.LoanAppID
				else:
					return None
		except Exception, e:
			flash("%s"%e)
			db.session.rollback()


	@staticmethod
	def redirectAuthorize():
		try:
			CBCObj 	= MKT_CBC.query.get(g.formID)
			base = super(FRM_CBC_DE_EX,FRM_CBC_DE_EX).redirectAuthorize()
			if base:
				return "/Morakot/CBCSubmitEx/?ID="+CBCObj.LoanAppID
			else:
				return None
		except Exception, e:
			flash("%s"%e)
			db.session.rollback()