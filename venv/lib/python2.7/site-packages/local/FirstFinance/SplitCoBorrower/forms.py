from app.mktcore.wtfimports 					import *
from app.mktcore.imports 						import *
from app.LoanContract.models 					import *
from app.LoanApplication.models					import *
from local.FirstFinance.LoanApproval.models 	import *
from .models 									import *

import app.tools.mktdb 			 				as mktdb

class FRM_SPLIT_COBORROWER(exform):

	LoanApplication	= TextAreaField(requiredlabel('Loan Application(s)','*'),validators	= [validators.Required()])

	def validate_LoanApplication(form, field):

		CheckSplit 			= ''
		CheckApproved 		= ''
		CheckCoBorrower 	= ''
		LoanAppList 		= form.LoanApplication.data.split()		
		
		for LoanApp in LoanAppList:

			CheckLoanStatusObj 	= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID==LoanApp).first()
			CoBorrowerObj 		= MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanApp).all()
			CheckLoanObj 		= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID.ilike(LoanApp+'-%')).all()
			
			if not CoBorrowerObj:
				CheckCoBorrower = CheckCoBorrower + ', ' + LoanApp
			else:
				if len(CoBorrowerObj) == len(CheckLoanObj):
					CheckSplit = CheckSplit +', '+ LoanApp

			if not CheckLoanStatusObj.AppStatus == '3':
				CheckApproved 	= CheckApproved +', '+ LoanApp


		# raise Error 
		if CheckCoBorrower:
			raise ValidationError('Record do not have Co Borrower (%s )' %CheckCoBorrower[1:])
		if CheckSplit:
			raise ValidationError('Record already split (%s )'%CheckSplit[1:])
		if CheckApproved:
			raise ValidationError('Record is not approved (%s )' %CheckApproved[1:] )

	@staticmethod
	def beforeInsert():
		try:	
			AuthLevel 	= g.getNAuthorize
			if AuthLevel == 0 :		
				CoBorrowerList  = 	[]
				LoanDict 		= 	{}
				LoanAppList		= request.form['LoanApplication'].split()
				for LoanAppID in LoanAppList:
					CoBorrowerObj 		= MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanAppID).all()
					LoanCoBorrowerObj 	= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID.ilike(LoanAppID+'-%')).all()
					LoanObj  			= MKT_LOAN_APPLICATION.query.get(LoanAppID)							
					
					if LoanObj:
						LoanDict.update(LoanObj.__dict__)
						if "_sa_instance_state" in LoanDict:
							del LoanDict['_sa_instance_state']

					# Add Co_Borrower in loan application to list
					LNCustomer = []
					if LoanCoBorrowerObj:
						for LaCB in LoanCoBorrowerObj:
							LNCustomer.append(LaCB.LNCustomerID)

					# Auto create loan application for co-borrower
					# Check if loan already create for co-borrower				
					for CoBorrower in CoBorrowerObj:
						# CoBorrower.CoBorrowerID in MKT_LOAN_CO_BORROWER
						# LNCustomer in MKT_LOAN_APPLICITION
						if not CoBorrower.CoBorrowerID in LNCustomer:
							# Add suffix: LA18010400033 to LA18010400033-01
							Co_ID = "%s-%02d" % (CoBorrower.ID, len(LoanCoBorrowerObj) + 1)
							LoanDict.update({"ID"			: 	Co_ID,										 
											 "CheckCoBorrower": "N",
											 "MonthlyRep"	: 	CoBorrower.CBMonthlyRep,
											 "NDI"			:	CoBorrower.CBNDI,
											 "MonthlyRepToNDI": CoBorrower.CBMonthlyRepToNDI,
											 "LNCustomerID" : 	CoBorrower.CoBorrowerID,
											 "SpouseID" 	:	CoBorrower.CBSpouseID,
											 "Currency"		: 	CoBorrower.CBCurrency,
											 "AppliedAmount":	CoBorrower.CBAppliedAmount,
											 "Amount"		: 	CoBorrower.CBAmount,
											 "Cycle"		:	CoBorrower.CBCycle,
											 "LoanProduct"	:	CoBorrower.CBLoanProduct,
											 "LoanPurpose"	:	CoBorrower.CBLoanPurpose,
											 "Category"		: 	CoBorrower.CBCategory,
											 "InterestRate"	:	CoBorrower.CBInterestRate,
											 "RepaymentMode": 	CoBorrower.CBRepaymentMode,
											 "FreqType"		:	CoBorrower.CBFreqType,
											 "Frequency"	:	CoBorrower.CBFrequency,
											 "Term"			:	CoBorrower.CBTerm,
											 "Installment"	:	CoBorrower.CBInstallment,
											 "EquivAmount"	: 	CoBorrower.CBEquivAmount,
											 "EquivMonthlyRep":	CoBorrower.CBEquivMonthlyRep,
											 "SplitAmount"	:	CoBorrower.CBSplitAmount
											 })			
							
							CollateralObj 	= MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanAppID).first()
							GuaranterObj  	= MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID==LoanAppID)
							LoanApprovalObj	= MKT_LOAN_APPROVAL.query.filter(MKT_LOAN_APPROVAL.LoanApplicationID==LoanAppID)
								
							Co_ID = LoanDict.get("ID")
							mktdb.insertTable(MKT_LOAN_APPLICATION,LoanDict)
							
							#auto add loan collateral for co-borrower
							if CollateralObj:
								CollateralData = {"ID" 			: 	Co_ID,
												  "Collateral"	: 	CollateralObj.Collateral}

							  	mktdb.insertTable(MKT_LOAN_COLLATERAL,CollateralData)
								
							#auto add loan guranter for co-borrower
							if GuaranterObj:
								GuranterData = {}
								for row in GuaranterObj:
									GuranterData.update({"ID" 			: 	Co_ID,
														 "Guarantor"	:	row.Guarantor,
														 "GTRelationIndicator": row.GTRelationIndicator})

									mktdb.insertTable(MKT_GUARANTOR,GuranterData)
									
							#auto add loan approval for co-borrower new loan application
							if LoanApprovalObj:
								ApprovalDict = {}
								for row in LoanApprovalObj:									
									ApprovalDict.update({"LoanApplicationID": Co_ID,
														 "Inputter": row.Inputter,
														 "Authorizer": row.Authorizer,
														 "Comment": row.Comment,
														 "Action": row.Action})

									if '_sa_instance_state' in ApprovalDict:
										del ApprovalDict['_sa_instance_state']

									if 'ID' in ApprovalDict: del ApprovalDict['ID']

									mktdb.insertTable(MKT_LOAN_APPROVAL,ApprovalDict)
								
		except Exception as e:
			db.session.rollback()
			raise e
		return True

	@staticmethod
	def beforeAuthorize():
		try:			
			CoBorrowerList  = 	[]
			LoanDict 		= 	{}
			ID 				= g.formID

			SpliteCoBorrowerList 	= MKT_SPLIT_COBORROWER_INAU.query.get(ID)
			LoanAppList 			= SpliteCoBorrowerList.LoanApplication.split()			
			for LoanAppID in LoanAppList:
				CoBorrowerObj 		= MKT_LOAN_CO_BORROWER.query.filter(MKT_LOAN_CO_BORROWER.ID==LoanAppID).all()
				LoanCoBorrowerObj 	= MKT_LOAN_APPLICATION.query.filter(MKT_LOAN_APPLICATION.ID.ilike(LoanAppID+'-%')).all()
				LoanObj  			= MKT_LOAN_APPLICATION.query.get(LoanAppID)							
				print LoanAppID, CoBorrowerObj,LoanCoBorrowerObj
				if LoanObj:
					LoanDict.update(LoanObj.__dict__)
					if "_sa_instance_state" in LoanDict:
						del LoanDict['_sa_instance_state']

				# Add Co_Borrower in loan application to list
				LNCustomer = []
				if LoanCoBorrowerObj:
					for LaCB in LoanCoBorrowerObj:
						LNCustomer.append(LaCB.LNCustomerID)

				# Auto create loan application for co-borrower
				# Check if loan already create for co-borrower				
				for CoBorrower in CoBorrowerObj:
					# CoBorrower.CoBorrowerID in MKT_LOAN_CO_BORROWER
					# LNCustomer in MKT_LOAN_APPLICITION
					if not CoBorrower.CoBorrowerID in LNCustomer:
						# Add suffix: LA18010400033 to LA18010400033-01
						Co_ID = "%s-%02d" % (CoBorrower.ID, len(LoanCoBorrowerObj) + 1)
						LoanDict.update({"ID"			: 	Co_ID,										 
										 "CheckCoBorrower": "N",
										 "MonthlyRep"	: 	CoBorrower.CBMonthlyRep,
										 "NDI"			:	CoBorrower.CBNDI,
										 "MonthlyRepToNDI": CoBorrower.CBMonthlyRepToNDI,
										 "LNCustomerID" : 	CoBorrower.CoBorrowerID,
										 "SpouseID" 	:	CoBorrower.CBSpouseID,
										 "Currency"		: 	CoBorrower.CBCurrency,
										 "AppliedAmount":	CoBorrower.CBAppliedAmount,
										 "Amount"		: 	CoBorrower.CBAmount,
										 "Cycle"		:	CoBorrower.CBCycle,
										 "LoanProduct"	:	CoBorrower.CBLoanProduct,
										 "LoanPurpose"	:	CoBorrower.CBLoanPurpose,
										 "Category"		: 	CoBorrower.CBCategory,
										 "InterestRate"	:	CoBorrower.CBInterestRate,
										 "RepaymentMode": 	CoBorrower.CBRepaymentMode,
										 "FreqType"		:	CoBorrower.CBFreqType,
										 "Frequency"	:	CoBorrower.CBFrequency,
										 "Term"			:	CoBorrower.CBTerm,
										 "Installment"	:	CoBorrower.CBInstallment,
										 "EquivAmount"	: 	CoBorrower.CBEquivAmount,
										 "EquivMonthlyRep":	CoBorrower.CBEquivMonthlyRep,
										 "SplitAmount"	:	CoBorrower.CBSplitAmount
										 })			
						
						CollateralObj 	= MKT_LOAN_COLLATERAL.query.filter(MKT_LOAN_COLLATERAL.ID==LoanAppID).first()
						GuaranterObj  	= MKT_GUARANTOR.query.filter(MKT_GUARANTOR.ID==LoanAppID)
						LoanApprovalObj	= MKT_LOAN_APPROVAL.query.filter(MKT_LOAN_APPROVAL.LoanApplicationID==LoanAppID)
							
						Co_ID = LoanDict.get("ID")
						mktdb.insertTable(MKT_LOAN_APPLICATION,LoanDict)
						
						#auto add loan collateral for co-borrower
						if CollateralObj:
							CollateralData = {"ID" 			: 	Co_ID,
											  "Collateral"	: 	CollateralObj.Collateral}

						  	mktdb.insertTable(MKT_LOAN_COLLATERAL,CollateralData)
							
						#auto add loan guranter for co-borrower
						if GuaranterObj:
							GuranterData = {}
							for row in GuaranterObj:
								GuranterData.update({"ID" 			: 	Co_ID,
													 "Guarantor"	:	row.Guarantor,
													 "GTRelationIndicator": row.GTRelationIndicator})

								mktdb.insertTable(MKT_GUARANTOR,GuranterData)
								
						#auto add loan approval for co-borrower new loan application
						if LoanApprovalObj:
							ApprovalDict = {}
							for row in LoanApprovalObj:									
								ApprovalDict.update({"LoanApplicationID": Co_ID,
													 "Inputter": row.Inputter,
													 "Authorizer": row.Authorizer,
													 "Comment": row.Comment,
													 "Action": row.Action})

								if '_sa_instance_state' in ApprovalDict:
									del ApprovalDict['_sa_instance_state']

								if 'ID' in ApprovalDict: del ApprovalDict['ID']

								mktdb.insertTable(MKT_LOAN_APPROVAL,ApprovalDict)
								
		except Exception as e:
			db.session.rollback()
			raise e
		return True


