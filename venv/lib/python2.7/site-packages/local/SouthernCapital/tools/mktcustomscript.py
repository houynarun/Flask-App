from app.mktcore.constant 			import msg_error
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from decimal 						import Decimal
from flask 							import flash, Markup
import app.tools.mktdate 			as mktdate

class CustomPenalty(object):
	def __init__(self,**kwargs):
		pass

	@staticmethod
	def setCustomPretermination(**kwargs):
		"""
			Method to calculate custom pretermination. Pre-Termination Penalty is calculated 
			using following formular:
			#####################################################################
			# if AmendDate - ValueDate < Term/3									#
			# 	=> PreterminationPenalty = LoanOutstanding * PenaltyRate/100	#
			# else:																#
			#	=> PreterminationPenalty = 0									#
			#####################################################################
			Args:
				**kwargs 			(kwargs):
					NumOfDay		(int): 		number of day late
					PaidOffDate		(string): 	string date of loan paid off date
					LoanObj			(object):	sqlalchemy base query object
					NewStr			(string):	optional string - Penalty Rate
			Return:
				PreterminationPenalty 	(decimal): Amount 
		"""
		AmendDate 	= kwargs.get("PaidOffDate","")
		NumOfDay 	= kwargs.get("NumOfDay","")
		
		# Pretermination penalty rate
		NewStr 		= kwargs.get("NewStr","")
		PenaltyRate = str(NewStr[1])

		LoanObj 	= kwargs.get("LoanObj",None)
		ValueDate 	= LoanObj.ValueDate if LoanObj else ""
		Term 		= LoanObj.Term if LoanObj else 1
		LoanOutstanding = LoanObj.OutstandingAmount if LoanObj else 0

		PreterminationPenalty = Decimal(0)
		try:
			PenaltyRate = Decimal(float(PenaltyRate)/100)
			Term 		= int(Term)

			if mktdate.getDateDiff(str(AmendDate),str(ValueDate)) < int(Term/3):
				PreterminationPenalty = LoanOutstanding * PenaltyRate
			return PreterminationPenalty

		except ValueError as e:
			Message = Markup("<b>Pre-Termination Amount</b> is not calculated. Please check <b>Pre-Termination Calculate Base</b> in PD Parameters setting. Example: <b>CUSTOM 1.5</b>")
			flash(msg_error+Message)
			return PreterminationPenalty
		except Exception as e:
			raise e


	@staticmethod
	def setCustomPastDue(**kwargs):
		"""
			Method to calculate custom past due penalty. Total Loan LatePenalty is calculated 
			using following formular:
			#################################################################################
			# if NumOfDayLate <= 07 days:													#
			# 	=> PastDuePenalty = PenaltyFixed											#
			# else:																			#
			#	=> PastDuePenalty = (TotalDueAmount *(PenaltyRate/100) * NumOfDayLate)/360	#
			#################################################################################
			Args:
				**kwargs 			(kwargs):
					NumOfDayLate	(int): 		number of day late
					PastDueDateObj	(object):	sqlalchemy base query object
					Param			(string):	optional string - Penalty Fixed/Rate(per year) and number of day: F*50 R*24 D*7
			Return:
				PastDuePenalty 		(decimal): Amount 
		"""
		NumOfDayLate 	= kwargs.get("NumOfDayLate",0)
		PastDueDateObj	= kwargs.get("PastDueDateObj",None)
		Param 			= kwargs.get("Param","")
		LoanObj 		= kwargs.get("LoanObj",None)

		PastDuePenalty 	= Decimal(0)
		try:
			PenaltyFixed 	= 0
			PenaltyRate 	= 0
			PenaltyDay 		= 0

			for item in Param:
				ItemSplit = item.split("*")
				# get penalty fixed amount
				if "F" in ItemSplit[0]:
					PenaltyFixed 	= Decimal(ItemSplit[1])
				# get penalty rate
				if "R" in ItemSplit[0]:
					PenaltyRate 	= Decimal(ItemSplit[1])
				# get penalty day late
				if "D" in ItemSplit[0]:
					PenaltyDay 		= int(ItemSplit[1])

			RepScheduleObj 	= MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == LoanObj.ID, MKT_REP_SCHEDULE.CollectionDate == PastDueDateObj.DueDate).first()
			RepStatus 		= RepScheduleObj.RepStatus

			if NumOfDayLate <= PenaltyDay:
				# calculate penalty only when installment is not paid yet
				if RepStatus == "0":
					if NumOfDayLate == 1:
						PastDuePenalty = Decimal(PenaltyFixed)
			else:
				TotalDueAmount 	= PastDueDateObj.OutPriAmount + PastDueDateObj.OutIntAmount
				PenaltyRate 	= Decimal(PenaltyRate/100/360)
				PastDuePenalty 	= TotalDueAmount * PenaltyRate
			return PastDuePenalty

		except ValueError as e:
			Message = "Past Due Penalty is not calculated. Please PenaltyType and PenaltyRate in PD Parameters setting. Example: F*50 R*24 D*7"
			print("Error: %e"%Message)
			return PastDuePenalty
		except Exception as e:
			raise e


def getCustomTerminationPenalty(**kwargs):
	"""Method to access class CustomPenalty"""
	Amount = CustomPenalty.setCustomPretermination(**kwargs)
	return Amount

def getCustomPastDuePenalty(**kwargs):
	"""Method to access class CustomPenalty"""
	Amount = CustomPenalty.setCustomPastDue(**kwargs)
	return Amount