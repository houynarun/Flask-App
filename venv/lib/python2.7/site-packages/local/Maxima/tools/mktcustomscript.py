
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from decimal 						import Decimal
from app 							import db
from sqlalchemy 					import *
import app.tools.mktdate 			as mktdate
import app.tools.mktmoney 			as mktmoney


class CustomPenalty(object):
	def __init__(self,**kwargs):
		pass

	@staticmethod
	def setCustomPretermination(**kwargs):
		"""
			Example: If Client paid-off before the maturity date and the number of dates from start date and paid date is smaller than collection date of (Loan-Term/2), So the system will charge this customer, else don't charge

			Disbursed: $ 5,000.00,
			ValueDate: 2017-12-29, 
			InterestRate: 18/year

			ID	Date		Principal	Interest	Total		Status				Loan Balance
			1	2018-01-29	$ 833.33	$ 77.50		$ 910.83	Full paid on time	$ 4,166.67
			2	2018-02-28	$ 833.33	$ 62.50		$ 895.83	Full paid on time	$ 3,333.34
			3	2018-03-29	$ 833.33	$ 48.33		$ 881.66	Not Yet Due			$ 2,500.01
			4	2018-04-27	$ 833.33	$ 36.25		$ 869.58	Not Yet Due			$ 1,666.68
			5	2018-05-29	$ 833.33	$ 26.67		$ 860.00	Not Yet Due			$ 833.35
			6	2018-06-29	$ 833.35	$ 12.92		$ 846.27	Not Yet Due			$ 0.00
			 	Total		$ 5,000.00	$ 264.17	$ 5,264.17
			Args:
				**kwargs 			(kwargs):
					NumOfDayLate	(int):		number of day late
					PaidOffDate		(str):		string date "2017-12-12"
					LoanObj 		(object):	sqlalchemy object of Loan Contract
					NewStr			(string):	string additional parameters, "CUSTOM"
			Return:
				TotalPenalty 		(string): 	string format money
			Raise:
				Exception
			Call:
				CustomPenalty.setCustomPretermination(**kwargs)
		"""
		try:
			NumOfDay 		= kwargs.get("NumOfDay",0)
			PaidOffDate 	= kwargs.get("PaidOffDate","")
			LoanObj 		= kwargs.get("LoanObj",None)
			Param 			= kwargs.get("NewStr",[])
			TotalPenalty 	= 0
			PreInterest 	= 0

			BankDate 		= mktdate.getBankDate()
			HalfTerms = Decimal(LoanObj.Term)/2
			HalfTerms = int(round(HalfTerms))
			ScheduleObj		= db.session.query(MKT_REP_SCHEDULE.CollectionDate,
												MKT_REP_SCHEDULE.No,
												MKT_REP_SCHEDULE.Interest).\
										 filter(MKT_REP_SCHEDULE.LoanID == LoanObj.ID).\
										 filter(MKT_REP_SCHEDULE.RepStatus == '0').\
										 order_by(MKT_REP_SCHEDULE.No).limit(1).first()
			if ScheduleObj:
				#: calculate Interest not yet accrued in current installment
				if str(ScheduleObj.CollectionDate) > str(BankDate):
					PreInterest = Decimal(ScheduleObj.Interest) - Decimal(LoanObj.AccrCurrentInt)

				#: calculate PreTermination Amount when terminate loan before half of loan cycle
				if ScheduleObj.No < HalfTerms:
					TotalPenalty = Decimal(LoanObj.OutstandingAmount) * (Decimal(Param[1])/100) + PreInterest

			return TotalPenalty
		except Exception, e:
			raise e

def getCustomTerminationPenalty(NumOfDay,PaidOffDate,LoanObj,NewStr):
	"""Method to access class CustomPenalty"""
	kwargs = {"NumOfDay":NumOfDay,"PaidOffDate":PaidOffDate,"LoanObj":LoanObj,"NewStr":NewStr}
	Amount = CustomPenalty.setCustomPretermination(**kwargs)
	return Amount
