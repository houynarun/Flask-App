from app.mktcore.wtfimports 		import *
from app.VB.models 					import *
from ..VBCycle.models 				import *
from app.Currency.models 			import *
from .models 						import *
import app.tools.mktdate 				as mktdate
import app.tools.mkttool 				as mkttools
import app.mktcore.globalfunction 		as globalfunction


def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.get(ID)
	else:
		return MKT_CURRENCY.query.all()

def loadVillageBank():
	return MKT_VB.query.all()

def loadVillageBankCycle():
	dic = {}
	if request.method == 'POST':
		VillageBank = request.form["VillageBank"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VB_CYCLE.query.filter_by(ID=Record['VillageBankCycle'])  
		else:
			return MKT_VB_CYCLE.query.filter_by(ID='').all()

	return MKT_VB_CYCLE.query.filter(MKT_VB_CYCLE.VillageBank==VillageBank).all()



def getRecord():
	try:
		result = MKT_VB_SUB_CYCLE.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_VB_SUB_CYCLE_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'VillageBank'		:row.VillageBank})
				Dict.update({'VillageBankCycle'	:row.VillageBankCycle})

			return Dict
		else:
			return Dict
	except:
		raise


@app.route('/Morakot/VBSubCycle/VB')
def VillageBank():
	dic = {}
	VB = request.args.get('VB')
	VBCycle = MKT_VB_CYCLE.query.filter(MKT_VB_CYCLE.VillageBank==VB).all()

	if VBCycle:
		for row in VBCycle:
			VillageBank = MKT_VB_CYCLE.query.get(str(row.VillageBank))
			dic[row.ID] = str(row.ID) + ' - ' + str(row.VillageName)

	return jsonify(results=dic)


class FRM_VB_SUB_CYCLE(exform):

	VillageBank 	= QuerySelectField(requiredlabel("Village Bank","*"),
		 								query_factory=loadVillageBank,
		 								get_label=lambda a : a.COID + ' - ' + a.Coordinator,
		 								blank_text="--Choose Village Bank--",
		 								allow_blank=True,
		 								validators=[validators.Required()]
		 								)
	VillageBankCycle = QuerySelectField(requiredlabel("Village Bank Cycle","*"),
		 								query_factory=loadVillageBankCycle,
		 								get_label=lambda a: a.ID + ' - ' + a.VillageName,
		 								blank_text="--Choose Village Bank Cycle--",
		 								allow_blank=True,
		 								validators=[validators.Required()]
		 								)
	PeriodCourse 	= TextField(requiredlabel("Period Course","*"), 
								validators=[validators.Required()]
								)
	DateOpen 		= DateField(requiredlabel("Date Open","*"), 
								validators=[validators.Required()]
								)
	DateClose 		= DateField("Date Close",
								validators=[validators.Optional()]
								)
	GroupTotal 	 	= TextField(requiredlabel("Group Total","*"), 
								validators=[validators.Required()]
								)
	MemberTotal  	= TextField(requiredlabel("Member Total","*"), 
								validators=[validators.Required()]
								)
	BorrowerTotal 	= TextField(requiredlabel("Borrower Total","*"), 
								validators=[validators.Required()]
								)
	NewBorrowerTotal= TextField(requiredlabel("New Borrower Total","*"), 
								validators=[validators.Required()]
								)
	Currency     	= QuerySelectField(requiredlabel("Currency", "*"),
										query_factory=loadCurrency,
										get_label='ID',
										blank_text='--Choose Currency--',
										allow_blank=True,
										default=lambda:loadCurrency(ID='USD'),
										validators=[validators.Required()])
	AmountTotal 	= TextField(requiredlabel("Amount Total","*"), 
								validators=[validators.Required()]
								)
	AmountTotalChar = TextField("Amount Total Char", 
								validators=[validators.Length(max=100)]
								)
	FirstPayDate 	= DateField("First Pay Date",
								validators=[validators.Optional()]
								)


	def validate_GroupTotal(form, field):
		GroupTotal = field.data
		if GroupTotal:
   			if not mkttools.isInteger(GroupTotal):
				raise ValidationError("Must be number for Group Total.")

	def validate_MemberTotal(form, field):
		MemberTotal = field.data
		if MemberTotal:
   			if not mkttools.isInteger(MemberTotal):
				raise ValidationError("Must be number for Member Total.")


	def validate_BorrowerTotal(form, field):
		BorrowerTotal = field.data
		if BorrowerTotal:
   			if not mkttools.isInteger(BorrowerTotal):
				raise ValidationError("Must be number for Borrower Total.")

	def validate_NewBorrowerTotal(form, field):
		NewBorrowerTotal = field.data
		if NewBorrowerTotal:
   			if not mkttools.isInteger(NewBorrowerTotal):
				raise ValidationError("Must be number for New Borrower Total.")
		
	def validate_Course(form, field):
		Course = field.data
		if Course:
   			if not mkttools.isInteger(Course):
				raise ValidationError("Must be number for Course.")
	
	def validate_PeriodCourse(form, field):
		PeriodCourse = field.data
		if PeriodCourse:
   			if not mkttools.isInteger(PeriodCourse):
				raise ValidationError("Must be number for Period Course.")
	

	def validate_Rate(form, field):
		Rate = field.data
		if Rate:
   			if not mkttools.isInteger(Rate):
				raise ValidationError("Must be number for Rate.")


	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay = "$('#AmountTotalChar').val(data.AmountTotalChar);"

		varname = "AmountTotal:$('#AmountTotal').val(),Currency:$('#Currency').val()"
		fun = ['AmountTotal', varname, fielddisplay, '/Morakot/VBCycle/AmountTotal', 'blur']
		hotfield.append(fun)

		fielddisplay = "$('#AmountTotal').val(data.value);"
		fielddisplay += "$('#AmountTotal').focus();"
		fielddisplay += "$('#AmountTotalChar').focus();"

		varname = "Currency:$('#Currency').val(),Money:$('#AmountTotal').val()"
		fun = ['Currency', varname, fielddisplay, '/Morakot/toMktmoney', 'click']
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def hotSelectField():
		hotfield = []

		fielddisplay = "VillageBankCycle"
		varname = "VB:$('#VillageBank').val()"
		fun = ['VillageBank', varname, fielddisplay, '/Morakot/VBSubCycle/VB', 'change']
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def moneyField():
		Field = [('AmountTotal','Currency')]
		return Field

