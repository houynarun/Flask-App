from app.mktcore.wtfimports 		import *
from app.VB.models 					import *
import app.tools.mktaddress 			as mktaddress
import app.tools.mkttool 				as mkttools
import app.tools.mktdate 				as mktdate
from app.Officer.models 			import *
from .models 						import *
from app.Province.models 			import *
from app.District.models 			import MKT_DISTRICT
from app.Commune.models 			import MKT_COMMUNE
from app.Village.models 			import MKT_VILLAGE
from app.Currency.models 			import *
import app.mktcore.globalfunction 		as globalfunction


def loadCurrency(ID=''):
	if ID:
		return MKT_CURRENCY.query.get(ID)
	else:
		return MKT_CURRENCY.query.all()

def loadVillageBank():
	return MKT_VB.query.all()

def loadOfficer():
	return MKT_OFFICER.query.all()


def getRecord():
	try:
		result = MKT_VB_CYCLE.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_VB_CYCLE_INAU.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'Province'	:row.Province})
				Dict.update({'District'	:row.District})
				Dict.update({'Commune'	:row.Commune})
				Dict.update({'Village'	:row.Village})
			return Dict
		else:
			return Dict
	except:
		raise

def loadProvince():
	return mktaddress.getProvince()

def loadDistrict():  #define function
	if request.method == 'POST':
		Province = request.form["Province"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_DISTRICT.query.filter_by(ID=Record['District'])  
		else:
			return MKT_DISTRICT.query.filter_by(ID='').all()

	return mktaddress.getLoadDistrict(Province)

def loadCommune():  #define function
	if request.method == 'POST':
		District=request.form["District"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['Commune'])  
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return mktaddress.getLoadCommune(District)

def loadVillage():
	if request.method == 'POST':
		Commune=request.form["Commune"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_VILLAGE.query.filter_by(ID=Record['Village'])  
		else:
			return MKT_VILLAGE.query.filter_by(ID='').all()

	return mktaddress.getLoadVillage(Commune)


@app.route("/Morakot/VBCycle/VB", methods=['GET'])
def getVillageBank():
	VB = request.args.get('VB')
	VillageBank = MKT_VB.query.get(VB)
	if VillageBank:
		Province = MKT_PROVINCE.query.get(str(VillageBank.VBProvince))
		District = MKT_DISTRICT.query.get(str(VillageBank.VBDistrict))
		Commune = MKT_COMMUNE.query.get(str(VillageBank.VBCommune))
		Village = MKT_VILLAGE.query.get(str(VillageBank.VBVillage))

	return jsonify(
					COName 			= str(VillageBank.Coordinator) if VillageBank else '',
					ProvinceID 		= str(VillageBank.VBProvince) if VillageBank else '__None',
					Province 		= str(Province.Description) if VillageBank else '--Choose Province--',
					DistrictID 		= str(VillageBank.VBDistrict) if VillageBank else '__None',
					District 		= str(District.Description) if VillageBank else '--Choose District--',
					CommuneID 		= str(VillageBank.VBCommune) if VillageBank else '__None',
					Commune 		= str(Commune.Description) if VillageBank else '--Choose Commune--',
					VillageID 		= str(VillageBank.VBVillage) if VillageBank else '__None',
					Village 		= str(Village.Description) if VillageBank else '--Choose Village--',
					ServiceOfficer 	= str(VillageBank.ServiceOfficer) if VillageBank else '',
					)


@app.route("/Morakot/VBCycle/VB1", methods=['GET'])
def getVillageBank1():
	VB = request.args.get('VB1')
	VillageBank = MKT_VB.query.get(VB)
	return jsonify(COName1=str(VillageBank.Coordinator) if VillageBank else '')


@app.route("/Morakot/VBCycle/AmountTotal", methods=['GET'])
def getAmountTotal():
	AmountTotal = request.args.get('AmountTotal')
	AmountTotal = globalfunction.wordAmount(AmountTotal)
	Currency = request.args.get('Currency')
	AmountTotalChar = ''
	AmountTotalChar = mkttools.formatNumberToWord(AmountTotal,'kh',Currency)

	return jsonify(AmountTotalChar=AmountTotalChar)


class FRM_VB_CYCLE(exform):
	VillageBank 	= QuerySelectField(requiredlabel("Village Bank","*"),
										query_factory=loadVillageBank,
										get_label=lambda a: a.COID + ' - ' + a.Coordinator,
										blank_text="--Choose Village Bank--",
										allow_blank=True,
										validators=[validators.Required()]
										)
	VillageBank1 	= QuerySelectField("Village Bank 1",
										query_factory=loadVillageBank,
										get_label=lambda a: a.COID + ' - ' + a.Coordinator,
										blank_text="--Choose Village Bank--",
										allow_blank=True
										)
	VillageName 	= TextField(requiredlabel("Village Name","*"), 
								validators=[validators.Required()]
								)
	Course 			= TextField(requiredlabel("Course","*"), 
								validators=[validators.Required()]
								)
	PeriodCourse 	= TextField(requiredlabel("Period Course","*"), 
								validators=[validators.Required()]
								)
	DateOpen 		= DateField(requiredlabel("Date Open","*"), 
								validators=[validators.Required()]
								)
	DateClose 		= DateField("Date Close",
								validators=[validators.Optional()]
								)
	Rate 			= TextField(requiredlabel("Rate","*"), 
								validators=[validators.Required()]
								)
	GroupTotal 	 	= TextField(requiredlabel("Group Total","*"), 
								validators=[validators.Required()]
								)
	MemberTotal  	= TextField(requiredlabel("Member Total","*"), 
								validators=[validators.Required()]
								)
	BorrowerTotal 	= TextField(requiredlabel("Borrower Total","*"), 
								validators=[validators.Required()]
								)
	NewBorrowerTotal= TextField(requiredlabel("New Borrower Total","*"), 
								validators=[validators.Required()]
								)
	Currency     	= QuerySelectField(requiredlabel("Currency", "*"),
										query_factory=loadCurrency,
										get_label='ID',
										blank_text='--Choose Currency--',
										allow_blank=True,
										default=lambda:loadCurrency(ID='USD'),
										validators=[validators.Required()])
	AmountTotal 	= TextField(requiredlabel("Amount Total","*"), 
								validators=[validators.Required()]
								)
	AmountTotalChar = TextField(requiredlabel("Amount Total Char","*"), 
								validators=[validators.Required(), validators.Length(max=100)]
								)

	Closed 			= SelectField("Closed",
								  choices=[('0','Closed'),('1','Active')])
	FirstPayDate 	= DateField("First Pay Date",
								validators=[validators.Optional()]
								)
	COName 			= TextField(requiredlabel('CO Name', '*'),
								validators=[validators.Required()],
								description="1-Village Bank")
	COName1 		= TextField('CO Name 1',description="1-Village Bank")
								
	COID 			= QuerySelectField(requiredlabel("CO ID (Officer)","*"),
										query_factory=loadOfficer,
										get_label=lambda a: a.ID +' '+ a.FirstName + ' ' + a.LastName,
										blank_text="--Choose Village Bank--",
										allow_blank=True,
										validators=[validators.Required()]
										)
	IntCus 			= TextField(requiredlabel('Interest Customer', '*'),
								validators=[validators.Required()])
	ServiceOfficer 	= TextField('Service Officer',description="1-Village Bank")
	Province 		= QuerySelectField(requiredlabel('Province', "*"),
								query_factory=loadProvince,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--Choose Province--',
								validators=[validators.Required()],
								description="1-Village Bank"
								)

	District 		= QuerySelectField(requiredlabel('District','*'),
								query_factory=loadDistrict,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--Choose District--',
								validators=[validators.Required()],
								description="1-Village Bank"
								)

	Commune 		= QuerySelectField(requiredlabel('Commune','*'),
								query_factory=loadCommune,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--Choose Commune--',
								validators=[validators.Required()],
								description="1-Village Bank"
								)

	Village 		= QuerySelectField(requiredlabel('Village','*'),
								query_factory=loadVillage,
								get_label=u'Description',
								allow_blank=True,
								blank_text=u'--Choose Village--',
								validators=[validators.Required()],
								description="1-Village Bank"
								)


	def validate_GroupTotal(form, field):
		GroupTotal = field.data
		if GroupTotal:
			if not mkttools.isInteger(GroupTotal):
				raise ValidationError("Must be number for Group Total.")

	def validate_MemberTotal(form, field):
		MemberTotal = field.data
		if MemberTotal:
			if not mkttools.isInteger(MemberTotal):
				raise ValidationError("Must be number for Member Total.")


	def validate_BorrowerTotal(form, field):
		BorrowerTotal = field.data
		if BorrowerTotal:
			if not mkttools.isInteger(BorrowerTotal):
				raise ValidationError("Must be number for Borrower Total.")

	def validate_NewBorrowerTotal(form, field):
		NewBorrowerTotal = field.data
		if NewBorrowerTotal:
			if not mkttools.isInteger(NewBorrowerTotal):
				raise ValidationError("Must be number for New Borrower Total.")
		
	def validate_Course(form, field):
		Course = field.data
		if Course:
			if not mkttools.isInteger(Course):
				raise ValidationError("Must be number for Course.")
	
	def validate_PeriodCourse(form, field):
		PeriodCourse = field.data
		if PeriodCourse:
			if not mkttools.isInteger(PeriodCourse):
				raise ValidationError("Must be number for Period Course.")
	

	def validate_Rate(form, field):
		Rate = field.data
		if Rate:
			if not mkttools.isInteger(Rate):
				raise ValidationError("Must be number for Rate.")
	

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay = "$('#COName').val(data.COName);"
		fielddisplay += "$('#Province').append('<option value='+data.ProvinceID+'>'+data.Province+'</option>')"
		fielddisplay += ",$('#District').append('<option value='+data.DistrictID+'>'+data.District+'</option>')"
		fielddisplay += ",$('#Commune').append('<option value='+data.CommuneID+'>'+data.Commune+'</option>')"
		fielddisplay += ",$('#Village').append('<option value='+data.VillageID+'>'+data.Village+'</option>')"
		fielddisplay += ",$('#Province').select2('data', {'id':data.ProvinceID, 'text':data.Province})"
		fielddisplay += ",$('#District').select2('data', {'id':data.DistrictID, 'text':data.District})"
		fielddisplay += ",$('#Commune').select2('data', {'id':data.CommuneID, 'text':data.Commune})"
		fielddisplay += ",$('#Village').select2('data', {'id':data.VillageID, 'text':data.Village});"
		
		fielddisplay += "$('#ServiceOfficer').val(data.ServiceOfficer);"
		fielddisplay += "$('#Province').val(data.ProvinceID).Trigger('click')"

		varname = "VB:$('#VillageBank').val()"
		fun = ['VillageBank', varname, fielddisplay, '/Morakot/VBCycle/VB', 'change']
		hotfield.append(fun)

		fielddisplay = "$('#COName1').val(data.COName1);"
		varname = "VB1:$('#VillageBank1').val()"
		fun = ['VillageBank1', varname, fielddisplay, '/Morakot/VBCycle/VB1', 'change']
		hotfield.append(fun)

		fielddisplay = "$('#AmountTotalChar').val(data.AmountTotalChar);"

		varname = "AmountTotal:$('#AmountTotal').val(),Currency:$('#Currency').val()"
		fun = ['AmountTotal', varname, fielddisplay, '/Morakot/VBCycle/AmountTotal', 'blur']
		hotfield.append(fun)

		fielddisplay = "$('#AmountTotal').val(data.value);"
		fielddisplay += "$('#AmountTotal').focus();"
		fielddisplay += "$('#AmountTotalChar').focus();"

		varname = "Currency:$('#Currency').val(),Money:$('#AmountTotal').val()"
		fun = ['Currency', varname, fielddisplay, '/Morakot/toMktmoney', 'click']
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def hotSelectField():
		hotfield=[]

		fielddisplay="District, #Commune, #Village"
		varname="ProvinceID:$('#Province').val()"
		fun=["Province", varname ,fielddisplay, "/Morakot/DistrictID", "change"]
		hotfield.append(fun)

		fielddisplay="Commune, #Village"
		varname="DistrictID:$('#District').val()"
		fun=["District", varname ,fielddisplay, "/Morakot/CommuneID", "change"]
		hotfield.append(fun)

		fielddisplay="Village"
		varname="CommuneID:$('#Commune').val()"
		fun=["Commune", varname ,fielddisplay, "/Morakot/VillageID", "change"]
		hotfield.append(fun)

		return hotfield


	@staticmethod
	def moneyField():
		Field = [('AmountTotal','Currency')]

		return Field


	# @staticmethod
	# def setDisable():
	# 	Field = ['COName','COName1']

		# return Field