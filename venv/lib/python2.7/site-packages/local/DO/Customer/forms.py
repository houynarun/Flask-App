from app.Customer.models 	import *
from app.Customer.forms_my 	import *
import re

@app.route("/Morakot/GetNRCFormat", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getNRCFormat():
	try:
		IDType		=	request.args.get('IDType') if 'IDType' in request.args else ""
		IDNumber	=	request.args.get('IDNumber') if 'IDNumber' in request.args else ""
		NRCNumber	=	request.args.get('NRCNumber') if 'NRCNumber' in request.args else ""
		if (IDType == "2"):
			IDProvince	=	request.args.get('IDProvince') if 'IDProvince' in request.args else ""
			IDCommune	=	request.args.get('IDCommune') if 'IDCommune' in request.args else ""
			NRCType		=	request.args.get('NRCType') if 'NRCType' in request.args else ""

			ProvinceObj = MKT_PROVINCE.query.filter_by(ID=IDProvince).first()
			TownShipObj = MKT_COMMUNE.query.filter_by(ID=IDCommune).first()

			if (IDProvince != "__None") and TownShipObj:
				IDNumber = ProvinceObj.ProvinceCode + '/' + TownShipObj.ShortName + '(' + NRCType + ')' + NRCNumber
		else:
			IDNumber = NRCNumber

		return jsonify(IDNumber=IDNumber)
	except:
		raise

@app.route("/Morakot/GetTownShip", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getTownShip():
	try:
		Province = request.args.get('IDProvince')

		result = MKT_COMMUNE.query.filter(MKT_COMMUNE.ID.like(Province+'%')).order_by(MKT_COMMUNE.ID.asc()).all()
		dic={}
		for row in result:
			dic["%s" % (row.ID)] = row.CommuneCode + " - " + row.ShortName

		return jsonify(results=dic)

	except:
		raise

def getRecord():
	try:
		result = MKT_CUSTOMER_INAU.query.filter_by(ID=g.formID).all()
		if not result:
			result = MKT_CUSTOMER.query.filter_by(ID=g.formID).all()
		Dict={}
		if result:
			
			for row in result:
				Dict.update({'VillageII'			:str(row.VillageII)})
				Dict.update({'EmployerVillageII'	:str(row.EmployerVillageII)})
				Dict.update({'IDProvince'			:str(row.IDProvince)})
				Dict.update({'IDCommune'			:str(row.IDCommune)})
			return Dict
		else:
			return Dict

	except:
		raise

def loadIDProvince():
	return MKT_PROVINCE.query.order_by(MKT_PROVINCE.ID.asc())
	# return mktaddress.getProvince()

def loadTownShip():
	if request.method == 'POST':
		Province = request.form["IDProvince"]
	else:
		if len(getRecord())>0:
			Record = getRecord()
			return MKT_COMMUNE.query.filter_by(ID=Record['IDCommune'])
		else:
			return MKT_COMMUNE.query.filter_by(ID='').all()

	return MKT_COMMUNE.query.filter(MKT_COMMUNE.ID.like(Province+'%')).order_by(MKT_COMMUNE.ID.asc()).all()


class FRM_CUSTOMER_EX(FRM_CUSTOMER_MY):
	IDType			=	SelectField(requiredlabel(getLanguage('ID Type'),'*'),
							choices=[('', '--None--'),('1', 'No National ID'),('2', 'National ID')],
							coerce=str,
							validators=[validators.Required()],
							description="6-%s" %getLanguage('Identification Document'))
	IDProvince		=	QuerySelectField('Division',
							query_factory=loadIDProvince,
							get_label=lambda a: a.ProvinceCode + " - " + a.Description,
							allow_blank=True,
							blank_text=u'--Choose Division--',
							validators=[validators.Optional()],
							description="6-%s" %getLanguage('Identification Document'))
	IDCommune 		=	QuerySelectField('TownShip',
							query_factory=loadTownShip,
							get_label=lambda a: a.CommuneCode + " - " + a.ShortName,
							allow_blank=True,
							blank_text=u'--Choose TownShip--',
							validators=[validators.Optional()],
							description="6-%s" %getLanguage('Identification Document'))
	NRCType			=	SelectField('NRC Type',
							choices=[('N', 'National Citizen'),
									 ('Y', 'White Card'),
									 ('P', 'Foreign Registration Certificate')],
							coerce=str,
							validators=[validators.Optional()],
							description="6-%s" %getLanguage('Identification Document'),
							default='N')
	NRCNumber 		=	TextField(getLanguage("ID Number"),
							description="6-%s" %getLanguage('Identification Document'))
	IDNumber 		=	TextField("ID Displayed",
							 description="6-%s" %getLanguage('Identification Document'))

	def validate_IDProvince(form,field):
		try:
			IDType = str(request.form.get('IDType'))
			if IDType == '2':
				IDProvince = str(request.form.get('IDProvince'))
				if IDProvince == "__None" or IDProvince == "":
					raise ValidationError("This field is required.")
			else:
				form.IDProvince.data = None
		except:
			raise
		pass

	def validate_IDCommune(form,field):
		try:
			IDType = str(request.form.get('IDType'))
			if IDType == '2':
				IDCommune = str(request.form.get('IDCommune'))
				if IDCommune == "__None" or IDCommune == "":
					raise ValidationError("This field is required.")
			else:
				form.IDCommune.data = None
		except:
			raise
		pass

	def validate_NRCNumber(form,field):
		IDType = str(request.form.get('IDType'))
		if IDType == '2':
			NRCNumber = str(request.form.get('NRCNumber'))
			if not NRCNumber:
				raise ValidationError('This field is required.')
			if not re.match(r"^\d{6}$", NRCNumber):
				raise ValidationError("This field must be 6 digits.")

	def validate_IDNumber(form,field):
		ID 			= str(request.form.get('ID'))
		IDNumber 	= str(request.form.get('IDNumber'))
		IDType 		= str(request.form.get('IDType'))
		if IDType == '2':
			if not IDNumber:
				raise ValidationError('This field is required.')
			# format ID Number of Myanmar: 11/SATANA(N)084968

			CusIDNumber = MKT_CUSTOMER.query.\
									filter(MKT_CUSTOMER.ID!=ID).\
									filter(MKT_CUSTOMER.IDNumber.ilike(IDNumber)).all()
			if not CusIDNumber:
				CusIDNumber = MKT_CUSTOMER.query.\
										filter(MKT_CUSTOMER_INAU.ID!=ID).\
										filter(MKT_CUSTOMER_INAU.IDNumber == IDNumber).all()

			if CusIDNumber:
				Branch = ''
				Branch = ", ".join(str(row.Branch) for row in CusIDNumber)
				raise ValidationError('This ID Number %s is already used in branch %s'%(IDNumber, Branch))

	@staticmethod
	def setDisable():
		base = super(FRM_CUSTOMER_EX, FRM_CUSTOMER_EX).setDisable()
		controls_list = [("IDNumber")]
		controls_list.extend(base)
		return controls_list

	@staticmethod
	def hotSelectField():
		base 			= super(FRM_CUSTOMER_EX, FRM_CUSTOMER_EX).hotSelectField()
		hotfield=[]

		fielddisplay="IDCommune"
		varname="IDProvince:$('#IDProvince').val()"
		fun=["IDProvince", varname ,fielddisplay, "/Morakot/GetTownShip", "click"]
		hotfield.append(fun)

		hotfield.extend(base)
		return hotfield

	@staticmethod
	def hotField():
		base = super(FRM_CUSTOMER_EX, FRM_CUSTOMER_EX).hotField()
		hotfield=[]

		fielddisplay 	= 	"$('#IDNumber').val(data.IDNumber);"
		varname 		=	"IDType:$('#IDType').val()"
		varname 		+=	",IDNumber:$('#IDNumber').val()"
		varname 		+=	",IDProvince:$('#IDProvince').val()"
		varname 		+=	",IDCommune:$('#IDCommune').val()"
		varname 		+=	",NRCType:$('#NRCType').val()"
		varname 		+=	",NRCNumber:$('#NRCNumber').val()"
		fun 			=	["IDType", varname, fielddisplay, "/Morakot/GetNRCFormat", "change"]
		hotfield.append(fun)
		fun 			=	["IDProvince", varname, fielddisplay, "/Morakot/GetNRCFormat", "change"]
		hotfield.append(fun)
		fun 			=	["IDCommune", varname, fielddisplay, "/Morakot/GetNRCFormat", "change"]
		hotfield.append(fun)
		fun 			=	["NRCType", varname, fielddisplay, "/Morakot/GetNRCFormat", "change"]
		hotfield.append(fun)
		fun 			=	["NRCNumber", varname, fielddisplay, "/Morakot/GetNRCFormat", "change"]
		hotfield.append(fun)

		hotfield.extend(base)

		return hotfield
