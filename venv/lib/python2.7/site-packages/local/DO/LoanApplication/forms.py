from app.mktcore.wtfimports 		import *
from sqlalchemy 					import *
from app.LoanApplication.models 	import *
from app.LoanApplication.forms_my 	import *
from app.AccProduct.models 			import MKT_ACC_PRODUCT

import app.tools.mktmoney			as mktmoney
import app.tools.mktaccounting		as mktaccounting
import app.tools.mktautoid 			as mktAutoID


@app.route("/Morakot/GetApproveAmount", methods=['GET'])
@checkLogOutSession
@checkLogOutTime
def getApproveAmount():
	AppliedAmount 	= request.args.get('AppliedAmount')
	ApprovedPercent 	= request.args.get('ApprovedPercent')

	AppliedAmount = AppliedAmount.replace(",","")
	ApprovedPercent = ApprovedPercent.replace(",","")

	Amount = 0
	if AppliedAmount and ApprovedPercent:
		Amount = float(AppliedAmount) * float(ApprovedPercent) / 100
		# Amount = mktmoney.formatNumber(float(Amount),0)

	return jsonify(Amount=str(Amount))


class FRM_LOAN_APPLICATION_EX(FRM_LOAN_APPLICATION_MY):
	Currency 		= QuerySelectField(requiredlabel(getLanguage("Currency"), "*"),
						query_factory=loadCurrency,
						get_label=u'ID',
						allow_blank=loadDefaultCurrency(),
						default=lambda:loadCurrency('MMK'),
						blank_text=u'--%s--' %getLanguage("Currency"),
						validators=[validators.Required()]
					)
	AppliedAmount 	= TextField(requiredlabel("Applied Amount", "*"), [validators.Required()])
	ApprovedPercent	= IntegerField(requiredlabel("Approved Percent", "*"), [validators.Required(), validators.NumberRange(min=0, max=100)], default=0)
	Amount 			= TextField(requiredlabel("Approved Amount", "*"), [validators.Required()])
	Cycle 			= IntegerField(requiredlabel(getLanguage("Cycle"), "*"), [validators.Required()], default=1)
	LoanProduct 	= QuerySelectField(requiredlabel(getLanguage("Loan Product"), "*"),
						query_factory=loadLoanProduct,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Loan Product"),
						validators=[validators.Required()]
					)

	Category 		= TextField(requiredlabel(getLanguage("Category"), "*"), [validators.Required()])
	InterestRate 	= TextField(requiredlabel(getLanguage("Interest Rate"), "*"), [validators.Required()], default=0)
	FreqType 		= SelectField(requiredlabel(getLanguage("Frequency Type"), "*"),
						choices=[('', '--%s--' %getLanguage("None")),
								 ('1', '1. %s' %getLanguage("Monthly")), 
								 ('2', '2. %s' %getLanguage("Weekly")),
								 ('3', '3. %s' % "Daily")],
						coerce=str,
						validators=[validators.Required()],
						default='1'
					)

	Frequency 		= IntegerField(requiredlabel(getLanguage("Frequency"), "*"), [validators.Required()], default=1)
	Term 			= TextField("%s (%s)" %(getLanguage("Term"), getLanguage("Month")))
	Installment 	= TextField(getLanguage("Installment"))

	LoanPurpose 	= QuerySelectField(getLanguage("Loan Purpose"),
						query_factory=loadLoanPurpose,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Loan Purpose")
					)
	LoanPurposeRemark = TextAreaField("Loan Purpose Remark")
	VBID 			= HiddenField("Centre/Village")
	GroupID 		= QuerySelectField('Group',
						query_factory=loadGroupID,
						get_label=lambda a: a.ID + " - " + a.GroupName,
						allow_blank=True,
						blank_text=u'--None--')

	SourceOfFund 	= QuerySelectField(getLanguage("Source of Fund"),
						query_factory=loadSourceOfFund,
						get_label=u'Description',
						allow_blank=True,
						blank_text=u'--%s--' %getLanguage("Choose Source of Fund")
					)

	AppStatus 		= SelectField(getLanguage("Status"),
						choices=[('1', '1. %s' %"Applied"), ('2', '2. %s' %"Reviewed"), ('3', '3. %s' %"Approved"), ('4', '4. %s' %"Rejected"), ('5', '5. %s' %"Cancelled"), ('6', '6. %s' %"Closed")], 
						default='1',
						coerce=str
					)

	PreparedBy 		= TextField(getLanguage("Prepared By"), default=loadUserID, description="5-%s" %getLanguage("Signatory"))
	PreparedDate 	= DateField(getLanguage("Prepared Date"), [validators.Optional()], default=loadCurrentDate, description="5-%s" %getLanguage("Signatory"))
	ReviewedBy 		= TextField(getLanguage("Reviewed By"), description="5-%s" %getLanguage("Signatory"))
	ReviewedDate 	= DateField(getLanguage("Reviewed Date"), [validators.Optional()], description="5-%s" %getLanguage("Signatory"))
	ApprovedBy 		= TextField(getLanguage("Approved By"), description="5-%s" %getLanguage("Signatory"))
	ApprovedDate 	= DateField(getLanguage("Approved Date"), [validators.Optional()], description="5-%s" %getLanguage("Signatory"))
	RejectedBy 		= TextField(getLanguage("Rejected By"), description="5-%s" %getLanguage("Signatory"))
	RejectedDate 	= DateField(getLanguage("Rejected Date"), [validators.Optional()], description="5-%s" %getLanguage("Signatory"))

	CheckList = QuerySelectField(getLanguage("Check List Item"),
					query_factory=loadCheckList,
					get_label=u'Description',
					allow_blank=True,
					blank_text=u'--%s--' %getLanguage("Choose Check List"),
					description="1-%s" %getLanguage("Check List Items")
				)

	YesNo = SelectField("%s/%s" %(getLanguage("Yes"), getLanguage("No")),
					choices=[('N', getLanguage('No')), ('Y', getLanguage('Yes'))],
					coerce=str,
					description="1-%s" %getLanguage("Check List Items")
				)
	YesDate = DateField(getLanguage("Yes Date"), [validators.Optional()], description="1-%s" %getLanguage("Check List Items"))

	Guarantor 		= 	QuerySelectField(getLanguage("Guarantor"),
							query_factory=loadGuarantor,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="3-%s" %getLanguage("Guarantor")
						)
	GTRelationIndicator 		= 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None"),
							description="3-%s" %getLanguage("Guarantor")
						)
	Type 				= SelectField("Type",
								choices=[('G', 'Guarantor'), ('R', 'Referrer'), ('S', 'Successor')],
								coerce=str,
								default='G',
								description="3-%s" %getLanguage("Guarantor")
							)
	Collateral 		= 	QuerySelectField(getLanguage("Collateral"),
							query_factory=loadCollateral,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
						)
	
	CoBorrowerID 		= 	QuerySelectField(getLanguage("Co-Borrower"),
							query_factory=loadCoBorrower,
							get_label=lambda a: a.ID + " - " + a.LastNameEn + " " +a.FirstNameEn,
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
						)

	RelationIndicator 		= 	QuerySelectField("Relation Indicator",
							query_factory=loadRelationIndicators,
							get_label=u'Description',
							allow_blank=True,
							blank_text=u'--%s--' %getLanguage("None")
						)

	@staticmethod
	def hotField():
		hotfield = []

		fielddisplay 	= "$('#Category').val(data.Category); $('#InterestRate').val(data.InterestRate)"
		varname 		= "LoanProduct:$('#LoanProduct').val(),Currency:$('#Currency').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/LoanProductID", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Category').val(data.Category); $('#InterestRate').val(data.InterestRate)"
		varname 		= "LoanProduct:$('#LoanProduct').val(),Currency:$('#Currency').val()"
		fun 			= ["Currency", varname, fielddisplay, "/Morakot/LoanProductID", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#YesDate').val(data.YesDate)"
		varname 		= "YesNo:$('#YesNo').val()"
		fun 			= ["YesNo", varname, fielddisplay, "/Morakot/YesNo", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ReviewedBy').val(data.ReviewedBy),$('#ReviewedDate').val(data.ReviewedDate)"
		fielddisplay 	+= ",$('#ApprovedBy').val(data.ApprovedBy),$('#ApprovedDate').val(data.ApprovedDate)"
		fielddisplay 	+= ",$('#RejectedBy').val(data.RejectedBy),$('#RejectedDate').val(data.RejectedDate)"
		varname 		= "AppStatus:$('#AppStatus').val()"
		fun 			= ["AppStatus", varname, fielddisplay, "/Morakot/LoanAppStatus", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),AppDate:$('#AppDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Term", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		# fielddisplay 	= ("$('#Amount').val(data.Amount);$('#Amount').focus();$('#Cycle').focus();")
		# varname 		= ("Amount:$('#AppliedAmount').val()")
		# fun 			= ["AppliedAmount", varname, fielddisplay, "/Morakot/LoanApprovedPercent", "blur"]
		# hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment)"
		varname 		= "Term:$('#Term').val(),AppDate:$('#AppDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["Frequency", varname, fielddisplay, "/Morakot/CalculateInstallment", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Installment').val(data.Installment);"
		fielddisplay 	+= "$('#FreqType').val()==='3' ? $('#Installment').prop('readonly',false) : $('#Installment').prop('readonly',true);"
		varname 		= "Term:$('#Term').val(),AppDate:$('#AppDate').val(),FreqType:$('#FreqType').val(),Frequency:$('#Frequency').val()"
		fun 			= ["FreqType", varname, fielddisplay, "/Morakot/CalculateInstallment", "change"]
		hotfield.append(fun)

		fielddisplay 	= "$('#CoBorrowerName').val(data.CustomerName);$('#CoBorrowerID').val(data.Customer)"
		varname 		= "CoBorrowerID:$('#CoBorrowerID').val()"
		fun 			= ["CoBorrowerID", varname, fielddisplay, "/Morakot/CustomerFullNameByID", "blur"]
		hotfield.append(fun)
		
		fielddisplay 	= "$('#Term').val(data.Term); $('#WeekTerm').val(data.WeekTerm);"
		fielddisplay 	+= "$('#FreqType').select2('data', {'id':data.FreqType,'text':data.FreqTypeDes});"
		varname 		= "LoanProduct:$('#LoanProduct').val()"
		fun 			= ["LoanProduct", varname, fielddisplay, "/Morakot/TermFrequencyType", "change", "FreqType"]
		hotfield.append(fun)

		fielddisplay 	= "$('#Amount').val(data.Amount);$('#Amount').focus();$('#Cycle').focus();"
		varname 		= "AppliedAmount:$('#AppliedAmount').val(),ApprovedPercent:$('#ApprovedPercent').val()"
		fun 			= ["ApprovedPercent", varname, fielddisplay, "/Morakot/GetApproveAmount", "blur"]
		hotfield.append(fun)

		fielddisplay 	= "$('#ApprovedPercent').change();"
		varname 		= "AppliedAmount:$('#AppliedAmount').val(),ApprovedPercent:$('#ApprovedPercent').val()"
		fun 			= ["AppliedAmount", varname, fielddisplay, "/Morakot/GetApproveAmount", "blur"]
		hotfield.append(fun)

		return hotfield

	@staticmethod
	def beforeInsert():
		try:
			
			AuthLevel 	= g.getNAuthorize
			DDACustomer = request.form['LNCustomerID']
			ComCustomer = request.form['LNCustomerID']
			Currency 	= request.form['Currency']
			Msg 		= ''
			if AuthLevel == 0 :
				AccSetting 		= mktsetting.getTASetting()
				LAAccAuto 		= mktsetting.getAppSetting('LA_AUTO_ACC')
				CompulsoryID 	= mktsetting.getAppSetting('ACC_PRODUCT_COMPULSORY')
				if LAAccAuto == 'Y':
					CompusloryID 	= 'FRM_ACCOUNT_COMPULSORY'
					DDAID 			= 'FRM_ACCOUNT_DD'

					CustomerNameObj = MKT_CUSTOMER.query.get(DDACustomer)
					CustomerName 	= CustomerNameObj.FirstNameEn +' '+ CustomerNameObj.LastNameEn

					DDAAcc = AutoGenerateACC(DDAID,DDACustomer,CustomerName,Currency,'101', 'Drawdown Account')
					if DDAAcc:
						Msg+=DDAAcc
					else:
						return False

					COMAcc = AutoGenerateACC(CompusloryID,ComCustomer,CustomerName,Currency,CompulsoryID, 'Compulsory Saving Account')
					if COMAcc:
						Msg+=COMAcc
					else:
						return False

					flash(Markup(Msg))
			return True

		except Exception as e:
			raise
			return False

	@staticmethod
	def beforeAuthorize():

		ID 			= g.formID
		LAObj 		= MKT_LOAN_APPLICATION_INAU.query.get(ID)

		Inputter 	= LAObj.Inputter
		Audit 		= mktaudit.getAuditrail()
		Authorizer 	= Audit['Authorizer']
		Msg 		= ''

		if Inputter.upper() == Authorizer.upper():
			flash(msg_error + " user who authorize must differ from input.")
			return False
		else:

			AccSetting 		= mktsetting.getTASetting()
			LAAccAuto 		= mktsetting.getAppSetting('LA_AUTO_ACC')
			CompulsoryID 	= mktsetting.getAppSetting('ACC_PRODUCT_COMPULSORY')
			if LAAccAuto == 'Y':
				CompusloryID 	= 'FRM_ACCOUNT_COMPULSORY'
				DDAID 			= 'FRM_ACCOUNT_DD'
				DDACustomer 	= LAObj.LNCustomerID
				ComCustomer 	= LAObj.LNCustomerID
				Currency 		= LAObj.Currency

				CustomerNameObj = MKT_CUSTOMER.query.get(DDACustomer)
				CustomerName 	= CustomerNameObj.FirstNameEn +' '+ CustomerNameObj.LastNameEn

				DDAAcc = AutoGenerateACC(DDAID,DDACustomer,CustomerName,Currency,'101', 'Drawdown Account')
				if DDAAcc:
					Msg+=DDAAcc
				else:
					return False

				COMAcc = AutoGenerateACC(CompusloryID,ComCustomer,CustomerName,Currency,CompulsoryID, 'Compulsory Saving Account')
				if COMAcc:
					Msg+=COMAcc
				else:
					return False

				flash(Markup(Msg))

		return True


def AutoGenerateACC(AutoID, CustomerList, AccName, Currency, AccProduct, Note):

	Audit 		= mktaudit.getAuditrail()
	Branch 		= Audit['Branch']
	Inputter	= Audit['Inputter']
	Createdon	= Audit['Createdon']
	Authorizer	= Audit['Authorizer']
	Authorizeon = Audit['Authorizeon']

	AccCategory 	= ''
	AccID 			= mktAutoID.getAutoID(AutoID)
	DateNow 		= mktdate.getDateISO()
	BankDate 		= str(mktdate.getBankDate())

	AccObj 			= MKT_ACCOUNT.query.filter(MKT_ACCOUNT.CustomerList == CustomerList).\
										filter(MKT_ACCOUNT.AccProduct == AccProduct).first()
	if not AccObj:
		AccProductObj 	= MKT_ACC_PRODUCT.query.get(AccProduct)
		if AccProductObj:
			AccCategory = AccProductObj.CategoryList

		if not AccCategory:
			flash(Markup(msg_error+"Saving Account category is not found, please check your configuration!"))
			return False

		Acc = MKT_ACCOUNT(
					Status			= 'AUTH',
					Curr 			= '0',
					Inputter 		= Inputter,
					Createdon 		= Createdon,
					Authorizer 		= Authorizer,
					Authorizeon 	= Authorizeon,
					Branch			= Branch,
					ID 				= AccID,
					CustomerList 	= CustomerList,
					AccName 		= AccName,
					Currency 		= Currency,
					JAccount 		= 'N',
					JoinID 			= '',
					AccProduct 		= AccProduct,
					AccCategory 	= AccCategory,
					InterestRate 	= 0,
					Charge 			= 0,
					OpenDate 		= DateNow,
					NextAccrDate 	= BankDate,
					AccrInterest	= 0,
					AccrCurMonth 	= 0,
					AccrCurCapital	= 0,
					Balance 		= 0,
					AvailableBal 	= 0,
					AccrIntBooked 	= 0,
					AccStatus 		= 'O',
					ClosingDate 	= '',
					Dormant 		= 'N',
					Blocked 		= 'N',
					OfficerID		= '',
					Tax 			= '',
					LastTranDate 	= DateNow)

		db.session.add(Acc)
		Msg = "Customer ID <b>%s - %s</b> has %s <b>%s</b><br><br>"%(CustomerList, AccName, Note, AccID)
	else:
		Msg = "Customer ID <b>%s - %s</b> has %s <b>%s</b> already exist<br><br>"%(CustomerList, AccName, Note, AccObj.ID)

	return Msg