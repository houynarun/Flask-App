from app.mktcore.constant 			import msg_error
from app.LoanContract.models 		import MKT_LOAN_CONTRACT
from app.RepaymentSchedule.models 	import MKT_REP_SCHEDULE
from decimal 						import Decimal
from flask 							import flash, Markup
import app.tools.mktdate 			as mktdate

class CustomPenalty(object):
	def __init__(self,**kwargs):
		pass

	@staticmethod
	def setCustomPretermination(**kwargs):
		"""
			Method to calculate custom pretermination. Pre-Termination Penalty is calculated 
			using following formular:
			#####################################################################
			# if AmendDate - ValueDate < Term/3									#
			# 	=> PreterminationPenalty = LoanOutstanding * PenaltyRate/100	#
			# else:																#
			#	=> PreterminationPenalty = 0									#
			#####################################################################
			Args:
				**kwargs 			(kwargs):
					NumOfDay		(int): 		number of day late
					PaidOffDate		(string): 	string date of loan paid off date
					LoanObj			(object):	sqlalchemy base query object
					NewStr			(string):	optional string - Penalty Rate
			Return:
				PreterminationPenalty 	(decimal): Amount 
		"""
		return 0


	@staticmethod
	def setCustomPastDue(**kwargs):
		"""
			Method to calculate custom past due penalty. Total Loan LatePenalty is calculated 
			using following formular:
			#################################################################################
			# if NumOfDayLate < 8 days:														#
			#	=> PastDuePenalty = 0														#
			# elif NumOfDayLate 8 between 15 days:											#
			#	=> PastDuePenalty = (PenaltyRate)/2											#
			# elif: NumOfDayLate > 15 														#
			#	=> PastDuePenalty = (PenaltyRate)											#
			#################################################################################
			Args:
				**kwargs 			(kwargs):
					NumOfDayLate	(int): 		number of day late
					PastDueDateObj	(object):	sqlalchemy base query object
					Param			(string):	optional string - Penalty Fixed/Rate(per year) and number of day: F*50 R*24 D*7
			Return:
				PastDuePenalty 		(decimal): Amount 
		"""
		NumOfDayLate 	= kwargs.get("NumOfDayLate",0)
		PastDueDateObj	= kwargs.get("PastDueDateObj",None)
		Param 			= kwargs.get("Param","")
		LoanObj 		= kwargs.get("LoanObj",None)
		
		PastDuePenalty 	= Decimal(0)
		try:
			FixAmount 		= 0
			SPrincipal 		= 0
			EPrincipal 		= 0
			OutPDAmount 	= 0
			PDAmount 		= 0
			RepAmount 		= 0
			DayStartHalfCol = 8
			DayStartFullCol = 16

			if PastDueDateObj:
				OutPDAmount = float(PastDueDateObj.OutPriAmount) + float(PastDueDateObj.OutIntAmount) + float(PastDueDateObj.OutChgAmount)
				PDAmount = float(PastDueDateObj.PrincipalDue) + float(PastDueDateObj.InterestDue) + float(PastDueDateObj.ChargeDue)


			REPObj 	= MKT_REP_SCHEDULE.query.filter(MKT_REP_SCHEDULE.LoanID == LoanObj.ID).\
											filter(MKT_REP_SCHEDULE.CollectionDate == PastDueDateObj.DueDate).first()
			if REPObj:
				RepAmount = float(REPObj.Principal) + float(REPObj.Interest) + float(REPObj.Charge)
				HalfRepAmount = float(RepAmount) / 2

			if float(RepAmount) != float(OutPDAmount):
				if float(HalfRepAmount) > float(OutPDAmount):

					return 0
			# Fillter Penty Rate with currency in loan contract
			Para_list 	= [x for x in Param if LoanObj.Currency in x]
			CalDay_list = [x for x in Param if not LoanObj.Currency in x]
			if CalDay_list:
				Day_list = str(CalDay_list[0]).split('*')
				DayStartHalfCol 	= Day_list[0] if len(Day_list) == 2 else DayStartHalfCol
				DayStartFullCol 	= Day_list[1] if len(Day_list) == 2 else DayStartFullCol

			# loop Penalty Rate
			for item in Para_list:
				ItemSplit = item.split("*")
				# user connfig penalty rate USD2*2*50: it mean between total amount 2 USD to 50 USD
				if len(ItemSplit) == 3:
					FixAmount 	= ItemSplit[0][3:]
					SPrincipal 	= ItemSplit[1]
					EPrincipal 	= ItemSplit[2]

					if float(SPrincipal) <= float(OutPDAmount) < float(EPrincipal):

						if int(NumOfDayLate) == int(DayStartHalfCol):
							PastDuePenalty = float(FixAmount)/2
							break

						elif int(NumOfDayLate) == int(DayStartFullCol):
							PastDuePenalty = float(FixAmount) if float(PDAmount) != float(OutPDAmount) else float(FixAmount)/2
							break

				# user connfig penalty rate USD2*501: it mean total ammount greater than or equal 501
				elif len(ItemSplit) == 2:
					FixAmount 	= ItemSplit[0][3:]
					SPrincipal 	= ItemSplit[1]

					if float(OutPDAmount) >= float(SPrincipal):

						if int(NumOfDayLate) == int(DayStartHalfCol):
							PastDuePenalty = float(FixAmount)/2
							break

						elif int(NumOfDayLate) == int(DayStartFullCol):
							PastDuePenalty = float(FixAmount) if float(PDAmount) != float(OutPDAmount) else float(FixAmount)/2
							break

			return PastDuePenalty

		except ValueError as e:
			Message = "Past Due Penalty is not calculated. Please PenaltyType and PenaltyRate in PD Parameters setting. Example: USD2*2*50 USD5*51*100"
			print("Error: %e"%Message)
			return PastDuePenalty
		except Exception as e:
			raise e


def getCustomTerminationPenalty(**kwargs):
	"""Method to access class CustomPenalty"""
	Amount = CustomPenalty.setCustomPretermination(**kwargs)
	return Amount

def getCustomPastDuePenalty(**kwargs):
	"""Method to access class CustomPenalty"""
	Amount = CustomPenalty.setCustomPastDue(**kwargs)
	return Amount